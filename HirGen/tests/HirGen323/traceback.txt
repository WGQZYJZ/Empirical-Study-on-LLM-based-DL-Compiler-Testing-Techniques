==========mod==========
#[version = "0.0.5"]
def @func_6113(%var_6072: Tensor[(11, 4, 2), bool], %var_6096: Tensor[(165), int64]) -> (Tensor[(11, 4, 2), float32], Tensor[(10, 15, 11), int64], Tensor[(165), int64], Tensor[(1650), int64]) {
  %0 = @func_5225() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %1 = %0.0;
  %2 = cast(%var_6072, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %6 = cast(%var_6096, dtype="int64") /* ty=Tensor[(165), int64] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1650), int64] */, dtype="int64") /* ty=Tensor[(1650), int64] */;
  %8 = reshape(%6, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int64] */;
  %9 = reshape(%7, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), int64] */;
  %10 = @func_5567(%8, %9) /* ty=(Tensor[(10, 15, 11), int64], Tensor[(11, 4, 2), bool]) */;
  %11 = power(%4, %5) /* ty=Tensor[(11, 4, 2), float32] */;
  %12 = %10.0;
  (%11, %12, %var_6096, meta[relay.Constant][0] /* ty=Tensor[(1650), int64] */)
}

def @func_4852() -> Tensor[(11, 4, 2), bool] {
  @func_4473() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_1006() -> Tensor[(11, 4, 2), bool] {
  %13 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %13.1
}

def @func_7092() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64]) {
  %14 = @func_4816() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
  %15 = @func_2522() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) */;
  %16 = @func_5907() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool]) */;
  %17 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %18 = %14.0;
  %19 = %15.0;
  %20 = %16.1;
  (%17, %18, %19, %20)
}

def @func_6909() -> (Tensor[(11, 4, 2), bool],) {
  %21 = @func_3596() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
  %22 = %21.1;
  (%22,)
}

def @func_333() -> Tensor[(11, 4, 2), float32] {
  %23 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %23.0
}

def @func_3547() -> (Tensor[(12, 2, 12), float64], Tensor[(88), float64]) {
  %24 = @func_3358() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) */;
  %25 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  %26 = %24.2;
  (%25, %26)
}

def @func_1794(%var_1790: Tensor[(10, 7, 6), float32]) -> Tensor[(10, 7, 6), float32] {
  %27 = cast(%var_1790, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
  exp(%27) /* ty=Tensor[(10, 7, 6), float32] */
}

def @func_1760() -> (Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) {
  %28 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %29 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %30 = %28.1;
  %31 = %29.0;
  (%30, %31)
}

def @func_4407(%var_4401: Tensor[(4, 1280), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(?, 75), bool], Tensor[(1, 75), float32], Tensor[(11, 4, 2), float32], Tensor[(4, 1280), float64], Tensor[(12, 2, 12), float64]) {
  %32 = @func_3547() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(88), float64]) */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 75), float32] */, dtype="float32") /* ty=Tensor[(1, 75), float32] */;
  %34 = sinh(%33) /* ty=Tensor[(1, 75), float32] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 75), float32] */, dtype="float32") /* ty=Tensor[(1, 75), float32] */;
  %36 = reshape(%35, newshape=[15, 5]) /* ty=Tensor[(15, 5), float32] */;
  %37 = @func_2155(%36) /* ty=(Tensor[(15, 5), float32],) */;
  %38 = %37.0;
  %39 = cast(%38, dtype="bool") /* ty=Tensor[(15, 5), bool] */;
  %40 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
  %41 = cast(%34, dtype="bool") /* ty=Tensor[(1, 75), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %43 = logical_or(%41, %42) /* ty=Tensor[(?, 75), bool] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(?, 75), float64] */;
  %45 = log2(%44) /* ty=Tensor[(?, 75), float64] */;
  %46 = cast(%34, dtype="bool") /* ty=Tensor[(1, 75), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(2), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(?, 75), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %50 = cast(%34, dtype="float32") /* ty=Tensor[(1, 75), float32] */;
  %51 = cast(%var_4401, dtype="float64") /* ty=Tensor[(4, 1280), float64] */;
  %52 = reshape(%51, newshape=[2560, 2]) /* ty=Tensor[(2560, 2), float64] */;
  %53 = @func_3285(%52) /* ty=(Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) */;
  %54 = @func_3547() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(88), float64]) */;
  %55 = %32.0;
  %56 = less_equal(%48, %49) /* ty=Tensor[(?, 75), bool] */;
  %57 = log(%50) /* ty=Tensor[(1, 75), float32] */;
  %58 = %53.0;
  %59 = %54.0;
  (%55, %56, %57, %58, %var_4401, %59)
}

def @func_2986() -> (Tensor[(11, 4, 2), bool],) {
  %60 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %61 = %60.1;
  (%61,)
}

def @func_6012() -> Tensor[(88), float32] {
  %62 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %62.0
}

def @func_3596() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %63 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %64 = @func_3507() /* ty=Tensor[(11, 4, 2), bool] */;
  %65 = %63.1;
  (%64, %65)
}

def @func_534() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) {
  %66 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %67 = %66.3;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %69 = cast(%67, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %70 = reshape(%68, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %71 = reshape(%69, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %72 = @func_81(%70, %71) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %73 = %72.0;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %75 = acos(%74) /* ty=Tensor[(11, 4, 2), float64] */;
  (%67, %75)
}

def @func_1999(%var_1972: Tensor[(12, 7, 8), int64], %var_1973: Tensor[(12, 7, 8), int64]) -> Tensor[(12, 7, 8), float32] {
  %76 = cast(%var_1973, dtype="int64") /* ty=Tensor[(12, 7, 8), int64] */;
  %77 = shape_of(%var_1972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_1972, dtype="int64") /* ty=Tensor[(12, 7, 8), int64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %80 = add(%78, %79) /* ty=Tensor[(12, 7, 8), int64] */;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  %82 = shape_of(%var_1973, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_1973, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%83, %84) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_4275(%var_4254: Tensor[(2560), float64]) -> (Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) {
  %85 = @func_4173() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(2560), float64]) */;
  %86 = %85.1;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %88 = atan(%87) /* ty=Tensor[(2560), float64] */;
  %89 = cast(%var_4254, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(1), int32] */;
  %91 = cast(%88, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?), float32] */;
  %93 = cast(%var_4254, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %94 = floor_divide(%91, %92) /* ty=Tensor[(2560), float32] */;
  %95 = @func_2967() /* ty=Tensor[(11, 4, 2), float32] */;
  %96 = asinh(%93) /* ty=Tensor[(2560), float32] */;
  (%94, %95, %96)
}

def @func_5193(%var_5162: Tensor[(75, 1), float32]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(12, 7, 8), float32], Tensor[(672), int64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(15, 5), float32], Tensor[(75, 1), float32], Tensor[(22, 4), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %97 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %98 = @func_4992() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %99 = cast(meta[relay.Constant][2] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %100 = cast(meta[relay.Constant][2] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %101 = reshape(%99, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), int64] */;
  %102 = reshape(%100, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), int64] */;
  %103 = @func_4816() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
  %104 = @func_4516() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float64]) */;
  %105 = @func_4903() /* ty=Tensor[(12, 2, 12), float64] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %107 = reshape(%106, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float64] */;
  %108 = @func_3906(%107) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(12, 2, 12), int8], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), int32], Tensor[(12, 2, 12), float32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), float32]) */;
  %109 = %108.9;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %111 = atan(%110) /* ty=Tensor[(12, 2, 12), float32] */;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %113 = cast(%var_5162, dtype="float32") /* ty=Tensor[(75, 1), float32] */;
  %114 = reshape(%113, newshape=[15, 5]) /* ty=Tensor[(15, 5), float32] */;
  %115 = @func_2155(%114) /* ty=(Tensor[(15, 5), float32],) */;
  %116 = @func_3358() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) */;
  %117 = @func_2107() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */;
  %118 = @func_1963() /* ty=Tensor[(88), float32] */;
  %119 = %97.0;
  %120 = %98.0;
  %121 = @func_1999(%101, %102) /* ty=Tensor[(12, 7, 8), float32] */;
  %122 = %103.1;
  %123 = %104.0;
  %124 = acos(%112) /* ty=Tensor[(12, 2, 12), float64] */;
  %125 = %115.0;
  %126 = %116.1;
  %127 = @func_4352() /* ty=Tensor[(11, 4, 2), bool] */;
  %128 = %117.1;
  (%118, %119, %105, %120, %121, meta[relay.Constant][2] /* ty=Tensor[(672), int64] */, %122, %123, %124, %125, %var_5162, %126, %127, %128)
}

def @func_4315() -> Tensor[(11, 4, 2), float32] {
  %129 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %129.1
}

def @func_5383() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %130 = @func_2824() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), int16]) */;
  %131 = @func_4852() /* ty=Tensor[(11, 4, 2), bool] */;
  %132 = %130.0;
  (%131, %132)
}

def @func_5907() -> (Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool]) {
  %133 = @func_5291() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) */;
  %134 = @func_4816() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
  %135 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %136 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %137 = %135.0;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %139 = %134.1;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %141 = reshape(%138, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %142 = reshape(%140, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %143 = @func_81(%141, %142) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %144 = %133.0;
  %145 = @func_4432() /* ty=Tensor[(12, 2, 12), float64] */;
  %146 = %136.0;
  %147 = %143.0;
  %148 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
  (%144, %145, %139, %137, %146, %147, %148)
}

def @func_3702() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32]) {
  %149 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %150 = @func_2875() /* ty=(Tensor[(88), float64], Tensor[(11, 4, 2), bool]) */;
  %151 = @func_3381() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %152 = @func_2824() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), int16]) */;
  %153 = %149.2;
  %154 = %150.0;
  %155 = %151.0;
  %156 = %152.1;
  %157 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  (%153, %154, %155, %156, %157)
}

def @func_5761(%var_5746: Tensor[(2560), float64]) -> Tensor[(2560), uint64] {
  %158 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %159 = %158.2;
  %160 = cast(%var_5746, dtype="uint64") /* ty=Tensor[(2560), uint64] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(1), int32] */;
  %162 = cast(%159, dtype="uint64") /* ty=Tensor[(2560), uint64] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?), uint64] */;
  left_shift(%162, %163) /* ty=Tensor[(2560), uint64] */
}

def @func_5291() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) {
  %164 = cast(meta[relay.Constant][3] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %165 = reshape(%164, newshape=[2560]) /* ty=Tensor[(2560), float64] */;
  %166 = @func_4275(%165) /* ty=(Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) */;
  %167 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  %168 = %166.1;
  (%167, %168, meta[relay.Constant][3] /* ty=Tensor[(2560), float64] */)
}

def @func_2727() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %169 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %170 = @func_2107() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */;
  %171 = %169.0;
  %172 = cast(%171, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %173 = reshape(%172, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %174 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %175 = %170.0;
  %176 = @func_2631(%173) /* ty=Tensor[(11, 4, 2), bool] */;
  %177 = %174.0;
  (%171, %175, %176, %177)
}

def @func_898(%var_891: Tensor[(22, 4), float32]) -> (Tensor[(22, 4), int32],) {
  %178 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %179 = %178.1;
  %180 = cast(%var_891, dtype="int32") /* ty=Tensor[(22, 4), int32] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(2), int32] */;
  %182 = cast(%179, dtype="int32") /* ty=Tensor[(22, 4), int32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %184 = logical_xor(%182, %183) /* ty=Tensor[(22, 4), int32] */;
  (%184,)
}

def @func_1123(%var_1103: Tensor[(11, 4, 2), bool]) -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %185 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %186 = %185.0;
  %187 = cast(%var_1103, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %191 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %192 = less_equal(%189, %190) /* ty=Tensor[(11, 4, 2), bool] */;
  %193 = %191.1;
  (%192, %193)
}

def @func_6350() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  %194 = @func_5633() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %195 = %194.0;
  %196 = @func_4432() /* ty=Tensor[(12, 2, 12), float64] */;
  (%195, %196)
}

def @func_1382() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) {
  %197 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %198 = %197.0;
  %199 = cast(%198, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %200 = cast(%198, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %201 = reshape(%199, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %202 = reshape(%200, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %203 = @func_1235(%201, %202) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
  %204 = %203.1;
  %205 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  (%198, %204, %205)
}

def @func_5673() -> (Tensor[(11, 4, 2), float32],) {
  %206 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  (%206,)
}

def @func_1235(%var_1165: Tensor[(11, 4, 2), bool], %var_1230: Tensor[(11, 4, 2), bool]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) {
  %207 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  %208 = cast(%var_1165, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = cast(%var_1165, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %213 = exp(%212) /* ty=Tensor[(11, 4, 2), float32] */;
  %214 = cast(%207, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %215 = equal(%210, %211) /* ty=Tensor[(11, 4, 2), bool] */;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %217 = reshape(%214, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %218 = reshape(%216, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %219 = @func_81(%217, %218) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %220 = %219.0;
  %221 = cast(%220, dtype="int16") /* ty=Tensor[(11, 4, 2), int16] */;
  %222 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%213, dtype="int16") /* ty=Tensor[(11, 4, 2), int16] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %225 = cast(%var_1165, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %226 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%213, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %229 = cast(%var_1230, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
  %230 = shape_of(%var_1165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_1165, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %233 = right_shift(%223, %224) /* ty=Tensor[(11, 4, 2), int16] */;
  %234 = floor_mod(%227, %228) /* ty=Tensor[(11, 4, 2), float32] */;
  %235 = add(%231, %232) /* ty=Tensor[(11, 4, 2), uint32] */;
  (%215, %233, %234, %235)
}

def @func_1848(%var_1830: Tensor[(16, 4, 7), uint32]) -> (Tensor[(16, 4, 7), bool],) {
  %236 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 4, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 4, 7), bool] */;
  %237 = shape_of(%var_1830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%var_1830, dtype="bool") /* ty=Tensor[(16, 4, 7), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = less_equal(%238, %239) /* ty=Tensor[(16, 4, 7), bool] */;
  (%240,)
}

def @func_4516() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float64]) {
  %241 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
  %242 = @func_686() /* ty=Tensor[(88), float64] */;
  (%241, %242)
}

def @func_2893(%var_2882: Tensor[(3, 780), float64]) -> (Tensor[(88), float32], Tensor[(13, 12, 15), float32], Tensor[(3, 780), float64]) {
  %243 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %244 = cast(%var_2882, dtype="float64") /* ty=Tensor[(3, 780), float64] */;
  %245 = reshape(%244, newshape=[13, 12, 15]) /* ty=Tensor[(13, 12, 15), float64] */;
  %246 = @func_1885(%245) /* ty=(Tensor[(13, 12, 15), float32],) */;
  %247 = %243.0;
  %248 = %246.0;
  (%247, %248, %var_2882)
}

def @func_5276() -> Tensor[(22, 4), float64] {
  %249 = @func_1929() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) */;
  %249.1
}

def @func_510() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) {
  %250 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %251 = %250.1;
  %252 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  (%251, %252)
}

def @func_4972(%var_4914: Tensor[(8, 8, 5), uint64], %var_4915: Tensor[(8, 8, 5), uint64]) -> (Tensor[(8, 8, 5), bool], Tensor[(12, 2, 12), float64], Tensor[(8, 8, 5), float32], Tensor[(11, 4, 2), float32]) {
  %253 = cast(%var_4915, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %254 = shape_of(%var_4914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_4914, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %258 = cast(%var_4915, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %259 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %260 = %259.1;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %262 = less(%255, %256) /* ty=Tensor[(8, 8, 5), bool] */;
  %263 = %257.2;
  %264 = sin(%258) /* ty=Tensor[(8, 8, 5), float32] */;
  %265 = sinh(%261) /* ty=Tensor[(11, 4, 2), float32] */;
  (%262, %263, %264, %265)
}

def @func_4330() -> Tensor[(88), float32] {
  @func_1963() /* ty=Tensor[(88), float32] */
}

def @func_824(%var_793: Tensor[(2560, 1), float64]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) {
  %266 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(88), float32] */;
  %269 = cast(%267, dtype="float32") /* ty=Tensor[(88), float32] */;
  %270 = reshape(%268, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %271 = reshape(%269, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %272 = @func_81(%270, %271) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %273 = cast(%var_793, dtype="float64") /* ty=Tensor[(2560, 1), float64] */;
  %274 = cast(%var_793, dtype="float64") /* ty=Tensor[(2560, 1), float64] */;
  %275 = reshape(%273, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
  %276 = reshape(%274, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
  %277 = @func_579(%275, %276) /* ty=(Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) */;
  %278 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %279 = cast(%var_793, dtype="float32") /* ty=Tensor[(2560, 1), float32] */;
  %280 = %272.0;
  %281 = @func_686() /* ty=Tensor[(88), float64] */;
  %282 = %277.2;
  %283 = %278.2;
  %284 = atan(%279) /* ty=Tensor[(2560, 1), float32] */;
  (%267, %280, %281, %282, %283, %284)
}

def @func_4473() -> Tensor[(11, 4, 2), bool] {
  %285 = @func_3381() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %285.0
}

def @func_305() -> (Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) {
  %286 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %287 = %286.2;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %289 = cast(%287, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %290 = reshape(%288, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %291 = reshape(%289, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %292 = @func_81(%290, %291) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %293 = %292.0;
  %294 = cast(%293, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %295 = shape_of(%287, dtype="int32") /* ty=Tensor[(2), int32] */;
  %296 = cast(%287, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %298 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %299 = cast(%293, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %300 = logical_or(%296, %297) /* ty=Tensor[(22, 4), bool] */;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %302 = reshape(%299, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %303 = reshape(%301, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %304 = @func_81(%302, %303) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %305 = %298.1;
  %306 = cast(%305, dtype="float32") /* ty=Tensor[(88), float32] */;
  %307 = cast(%305, dtype="float32") /* ty=Tensor[(88), float32] */;
  %308 = reshape(%306, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %309 = reshape(%307, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %310 = @func_81(%308, %309) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %311 = %304.0;
  %312 = %310.0;
  (%300, %305, %311, %312)
}

def @func_5633() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  %313 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %314 = %313.0;
  %315 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  (%314, %315)
}

def @func_6554() -> (Tensor[(6, 3, 5), int64], Tensor[(6, 3, 5), int8]) {
  %316 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
  %317 = log10(%316) /* ty=Tensor[(6, 3, 5), float64] */;
  %318 = cast(%317, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
  %319 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 5), float64] */, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = logical_and(%320, %321) /* ty=Tensor[(6, 3, 5), bool] */;
  %323 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 3, 5), float64] */, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %327 = cast(%317, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
  %328 = rsqrt(%327) /* ty=Tensor[(6, 3, 5), float64] */;
  %329 = cast(%328, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
  %330 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%317, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = equal(%331, %332) /* ty=Tensor[(6, 3, 5), bool] */;
  %334 = cast(%317, dtype="int8") /* ty=Tensor[(6, 3, 5), int8] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="int8") /* ty=Tensor[(6, 3, 5), int8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %338 = bitwise_and(%325, %326) /* ty=Tensor[(6, 3, 5), int64] */;
  %339 = multiply(%336, %337) /* ty=Tensor[(6, 3, 5), int8] */;
  (%338, %339)
}

def @func_6620() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %340 = @func_4589() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(13, 12, 15), float32], Tensor[(2340), float64]) */;
  %341 = @func_4202() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
  %342 = %340.0;
  %343 = %341.1;
  (%342, %343)
}

def @func_1594() -> Tensor[(11, 4, 2), bool] {
  %344 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %344.2
}

def @func_3358() -> (Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) {
  %345 = @func_2986() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %346 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %347 = @func_2875() /* ty=(Tensor[(88), float64], Tensor[(11, 4, 2), bool]) */;
  %348 = %345.0;
  %349 = %346.0;
  %350 = %347.0;
  (%348, %349, %350)
}

def @func_5225() -> (Tensor[(11, 4, 2), bool],) {
  %351 = @func_5016() /* ty=Tensor[(11, 4, 2), bool] */;
  (%351,)
}

def @func_2875() -> (Tensor[(88), float64], Tensor[(11, 4, 2), bool]) {
  %352 = @func_686() /* ty=Tensor[(88), float64] */;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(88), float32] */;
  %354 = reshape(%353, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %355 = @func_2631(%354) /* ty=Tensor[(11, 4, 2), bool] */;
  (%352, %355)
}

def @func_1720(%var_1700: Tensor[(12, 2, 12), float64]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(12, 2, 12), bool]) {
  %356 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %357 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %358 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %359 = %358.0;
  %360 = cast(%var_1700, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  %365 = %356.0;
  %366 = %357.0;
  %367 = greater(%362, %363) /* ty=Tensor[(12, 2, 12), bool] */;
  (%364, %365, %366, %367)
}

def @func_4484(%var_4477: Tensor[(11, 7, 7), float32]) -> (Tensor[(11, 7, 7), float32], Tensor[(11, 4, 2), bool]) {
  %368 = cast(%var_4477, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
  %369 = @func_3381() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %370 = log10(%368) /* ty=Tensor[(11, 7, 7), float32] */;
  %371 = %369.0;
  (%370, %371)
}

def @func_4589() -> (Tensor[(11, 4, 2), bool], Tensor[(13, 12, 15), float32], Tensor[(2340), float64]) {
  %372 = cast(meta[relay.Constant][6] /* ty=Tensor[(2340), float64] */, dtype="float64") /* ty=Tensor[(2340), float64] */;
  %373 = reshape(%372, newshape=[13, 12, 15]) /* ty=Tensor[(13, 12, 15), float64] */;
  %374 = @func_1885(%373) /* ty=(Tensor[(13, 12, 15), float32],) */;
  %375 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
  %376 = %374.0;
  (%375, %376, meta[relay.Constant][6] /* ty=Tensor[(2340), float64] */)
}

def @func_1885(%var_1878: Tensor[(13, 12, 15), float64]) -> (Tensor[(13, 12, 15), float32],) {
  %377 = cast(%var_1878, dtype="float64") /* ty=Tensor[(13, 12, 15), float64] */;
  %378 = atanh(%377) /* ty=Tensor[(13, 12, 15), float64] */;
  %379 = cast(%378, dtype="float32") /* ty=Tensor[(13, 12, 15), float32] */;
  %380 = cos(%379) /* ty=Tensor[(13, 12, 15), float32] */;
  (%380,)
}

def @func_3181() -> Tensor[(12, 2, 12), float64] {
  %381 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %381.0
}

def @func_1531() -> (Tensor[(88), float32],) {
  %382 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %383 = %382.0;
  (%383,)
}

def @func_2824() -> (Tensor[(88), float32], Tensor[(11, 4, 2), int16]) {
  %384 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %385 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %386 = %384.0;
  %387 = %385.1;
  (%386, %387)
}

def @func_4432() -> Tensor[(12, 2, 12), float64] {
  @func_2179() /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_5654(%var_5649: int32, %var_5650: Tensor[(7, 12, 10), int32]) -> Tensor[(7, 12, 10), int32] {
  %388 = cast(%var_5649, dtype="int32") /* ty=int32 */;
  %389 = cast(%var_5650, dtype="int32") /* ty=Tensor[(7, 12, 10), int32] */;
  right_shift(%388, %389) /* ty=Tensor[(7, 12, 10), int32] */
}

def @func_4992() -> (Tensor[(11, 4, 2), bool],) {
  %390 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  (%390,)
}

def @func_735() -> (Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) {
  %391 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %392 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %393 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %394 = cast(meta[relay.Constant][7] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %395 = cast(meta[relay.Constant][7] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %396 = reshape(%394, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
  %397 = reshape(%395, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
  %398 = @func_579(%396, %397) /* ty=(Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) */;
  %399 = %391.1;
  %400 = %392.0;
  %401 = %393.1;
  %402 = %398.3;
  (%399, %400, %401, %402, meta[relay.Constant][7] /* ty=Tensor[(2560), float64] */)
}

def @func_5528(%var_5502: Tensor[(9, 14, 10), float64]) -> (Tensor[(11, 4, 2), bool], Tensor[(65, 6), float64], Tensor[(9, 14, 10), float64], Tensor[(11, 4, 2), bool], Tensor[(9, 14, 10), float32]) {
  %403 = cast(meta[relay.Constant][8] /* ty=Tensor[(65, 6), float64] */, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %404 = reshape(%403, newshape=[13, 2, 15]) /* ty=Tensor[(13, 2, 15), float64] */;
  %405 = @func_3752(%404) /* ty=(Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) */;
  %406 = cast(%var_5502, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %407 = acosh(%406) /* ty=Tensor[(9, 14, 10), float64] */;
  %408 = cast(%var_5502, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%407, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %412 = %405.1;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %414 = reshape(%413, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %415 = @func_3469(%414) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), uint8]) */;
  %416 = cast(%407, dtype="float32") /* ty=Tensor[(9, 14, 10), float32] */;
  %417 = mod(%410, %411) /* ty=Tensor[(9, 14, 10), float64] */;
  %418 = %415.0;
  %419 = log10(%416) /* ty=Tensor[(9, 14, 10), float32] */;
  (%412, meta[relay.Constant][8] /* ty=Tensor[(65, 6), float64] */, %417, %418, %419)
}

def @func_4031() -> Tensor[(11, 4, 2), float64] {
  %420 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %420.1
}

def @func_6027() -> (Tensor[(88), float32],) {
  %421 = @func_4330() /* ty=Tensor[(88), float32] */;
  (%421,)
}

def @func_3381() -> (Tensor[(11, 4, 2), bool],) {
  %422 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %423 = %422.1;
  (%423,)
}

def @func_2179() -> Tensor[(12, 2, 12), float64] {
  %424 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %425 = %424.1;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  asinh(%426) /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_2291(%var_2229: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) {
  %427 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %428 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %429 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %431 = sigmoid(%430) /* ty=Tensor[(11, 4, 2), float32] */;
  %432 = cast(%var_2229, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = logical_and(%434, %435) /* ty=Tensor[(11, 4, 2), bool] */;
  %437 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %438 = %437.1;
  %439 = cast(%438, dtype="int8") /* ty=Tensor[(88), int8] */;
  %440 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%436, dtype="int8") /* ty=Tensor[(11, 4, 2), int8] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %443 = %427.1;
  %444 = %428.2;
  %445 = bitwise_xor(%441, %442) /* ty=Tensor[(11, 4, 2), int8] */;
  (%443, %444, %445)
}

def @func_1047() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) {
  %446 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %447 = cast(meta[relay.Constant][9] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %448 = reshape(%447, newshape=[2560, 1]) /* ty=Tensor[(2560, 1), float64] */;
  %449 = @func_824(%448) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) */;
  %450 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %451 = %446.1;
  %452 = %449.4;
  %453 = %450.2;
  (%451, %452, meta[relay.Constant][9] /* ty=Tensor[(2560), float64] */, %453)
}

def @func_2107() -> (Tensor[(11, 4, 2), float32], Tensor[(88), float32]) {
  %454 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %455 = %454.0;
  %456 = @func_1963() /* ty=Tensor[(88), float32] */;
  (%455, %456)
}

def @func_6472() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32]) {
  %457 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %458 = %457.2;
  %459 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %460 = @func_6012() /* ty=Tensor[(88), float32] */;
  (%458, %459, %460)
}

def @func_6750() -> (Tensor[(12, 2, 12), float64],) {
  %461 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  (%461,)
}

def @func_6998(%var_6976: Tensor[(448), uint32]) -> (Tensor[(11, 4, 2), int16], Tensor[(88), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(448), uint32], Tensor[(16, 4, 7), float32]) {
  %462 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
  %463 = @func_4516() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float64]) */;
  %464 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %465 = @func_6811() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %466 = cast(%var_6976, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %467 = reshape(%466, newshape=[16, 4, 7]) /* ty=Tensor[(16, 4, 7), uint32] */;
  %468 = @func_1848(%467) /* ty=(Tensor[(16, 4, 7), bool],) */;
  %469 = %468.0;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(16, 4, 7), float32] */;
  %471 = %462.1;
  %472 = %463.1;
  %473 = %464.1;
  %474 = %465.0;
  %475 = asinh(%470) /* ty=Tensor[(16, 4, 7), float32] */;
  (%471, %472, %473, %474, %var_6976, %475)
}

def @func_3469(%var_3464: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), uint8]) {
  %476 = @func_1929() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) */;
  %477 = %476.0;
  %478 = cast(%var_3464, dtype="uint8") /* ty=Tensor[(11, 4, 2), uint8] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="uint8") /* ty=Tensor[(11, 4, 2), uint8] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %482 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
  %483 = left_shift(%480, %481) /* ty=Tensor[(11, 4, 2), uint8] */;
  (%482, %483)
}

def @func_2522() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) {
  %484 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %485 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
  %486 = %484.1;
  (%485, %486)
}

def @func_3285(%var_3275: Tensor[(2560, 2), float64]) -> (Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) {
  %487 = cast(meta[relay.Constant][10] /* ty=Tensor[(2560, 1), float64] */, dtype="float64") /* ty=Tensor[(2560, 1), float64] */;
  %488 = reshape(%487, newshape=[2560, 1]) /* ty=Tensor[(2560, 1), float64] */;
  %489 = @func_824(%488) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) */;
  %490 = cast(meta[relay.Constant][10] /* ty=Tensor[(2560, 1), float64] */, dtype="uint16") /* ty=Tensor[(2560, 1), uint16] */;
  %491 = cast(%var_3275, dtype="uint16") /* ty=Tensor[(2560, 2), uint16] */;
  %492 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %493 = %489.4;
  %494 = bitwise_or(%490, %491) /* ty=Tensor[(2560, 2), uint16] */;
  (%492, %493, %494)
}

def @func_7112() -> (Tensor[(11, 4, 2), float32],) {
  %495 = @func_5291() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) */;
  %496 = %495.1;
  (%496,)
}

def @func_6883(%var_6866: Tensor[(8, 8, 7), int16], %var_6867: Tensor[(8, 8, 7), int16]) -> (Tensor[(8, 8, 7), int16], Tensor[(11, 4, 2), int16], Tensor[(88), bool]) {
  %497 = cast(%var_6867, dtype="int16") /* ty=Tensor[(8, 8, 7), int16] */;
  %498 = shape_of(%var_6866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_6866, dtype="int16") /* ty=Tensor[(8, 8, 7), int16] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %501 = cast(meta[relay.Constant][11] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %502 = cast(meta[relay.Constant][11] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %503 = reshape(%501, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %504 = reshape(%502, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %505 = @func_1235(%503, %504) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
  %506 = bitwise_and(%499, %500) /* ty=Tensor[(8, 8, 7), int16] */;
  %507 = %505.1;
  (%506, %507, meta[relay.Constant][11] /* ty=Tensor[(88), bool] */)
}

def @func_1929() -> (Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) {
  %508 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %509 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %510 = %509.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(22, 4), float64] */;
  %512 = %508.0;
  %513 = cos(%511) /* ty=Tensor[(22, 4), float64] */;
  (%512, %513)
}

def @func_4202() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %514 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %515 = @func_3000() /* ty=Tensor[(11, 4, 2), bool] */;
  %516 = %514.1;
  (%515, %516)
}

def @func_4352() -> Tensor[(11, 4, 2), bool] {
  %517 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %517.2
}

def @func_5567(%var_5548: Tensor[(1, 15, 11), int64], %var_5549: Tensor[(10, 15, 11), int64]) -> (Tensor[(10, 15, 11), int64], Tensor[(11, 4, 2), bool]) {
  %518 = cast(%var_5548, dtype="int64") /* ty=Tensor[(1, 15, 11), int64] */;
  %519 = cast(%var_5549, dtype="int64") /* ty=Tensor[(10, 15, 11), int64] */;
  %520 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %521 = add(%518, %519) /* ty=Tensor[(10, 15, 11), int64] */;
  %522 = %520.2;
  (%521, %522)
}

def @func_101() -> (Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) {
  %523 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %524 = cast(meta[relay.Constant][13] /* ty=Tensor[(22, 4), float32] */, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %525 = cast(meta[relay.Constant][13] /* ty=Tensor[(22, 4), float32] */, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %526 = reshape(%524, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %527 = reshape(%525, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %528 = @func_81(%526, %527) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %529 = log10(%523) /* ty=Tensor[(12, 2, 12), float64] */;
  %530 = %528.0;
  (%529, %530, meta[relay.Constant][13] /* ty=Tensor[(22, 4), float32] */)
}

def @func_3964() -> (Tensor[(11, 4, 2), int16],) {
  %531 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
  %532 = %531.1;
  (%532,)
}

def @func_483() -> (Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) {
  %533 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %534 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %535 = %534.2;
  %536 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  %537 = cast(%536, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %538 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%535, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %542 = %533.1;
  %543 = not_equal(%539, %540) /* ty=Tensor[(11, 4, 2), bool] */;
  %544 = %541.1;
  (%542, %543, %544)
}

def @func_2631(%var_2621: Tensor[(11, 4, 2), float32]) -> Tensor[(11, 4, 2), bool] {
  %545 = @func_1929() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) */;
  %546 = %545.0;
  %547 = cast(%var_2621, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%549, %550) /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_7197(%var_7161: Tensor[(5120), float64], %var_7182: Tensor[(5120), float64]) -> (Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int16], Tensor[(5120), bool], Tensor[(11, 4, 2), bool]) {
  %551 = @func_7112() /* ty=(Tensor[(11, 4, 2), float32],) */;
  %552 = cast(%var_7161, dtype="float64") /* ty=Tensor[(5120), float64] */;
  %553 = reshape(%552, newshape=[2560, 2]) /* ty=Tensor[(2560, 2), float64] */;
  %554 = @func_3285(%553) /* ty=(Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) */;
  %555 = @func_2522() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) */;
  %556 = cast(%var_7182, dtype="bool") /* ty=Tensor[(5120), bool] */;
  %557 = shape_of(%var_7161, dtype="int32") /* ty=Tensor[(1), int32] */;
  %558 = cast(%var_7161, dtype="bool") /* ty=Tensor[(5120), bool] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?), bool] */;
  %560 = @func_5383() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %561 = %551.0;
  %562 = %554.1;
  %563 = %555.1;
  %564 = greater_equal(%558, %559) /* ty=Tensor[(5120), bool] */;
  %565 = %560.0;
  (%561, %562, %563, %564, %565)
}

def @func_1868() -> Tensor[(11, 4, 2), float32] {
  %566 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %566.2
}

def @func_4816() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %567 = @func_4352() /* ty=Tensor[(11, 4, 2), bool] */;
  %568 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
  (%567, %568)
}

def @func_181() -> (Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  %569 = cast(meta[relay.Constant][14] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %570 = cast(meta[relay.Constant][14] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %571 = reshape(%569, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %572 = reshape(%570, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %573 = @func_81(%571, %572) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %574 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %575 = %574.0;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %577 = %573.0;
  %578 = erf(%576) /* ty=Tensor[(12, 2, 12), float64] */;
  (%577, meta[relay.Constant][14] /* ty=Tensor[(88), float32] */, %578)
}

def @func_6714(%var_6707: Tensor[(22, 4), float32]) -> (Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(22, 4), int32], Tensor[(12, 2, 12), float64], Tensor[(22, 4), bool]) {
  %579 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %580 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %581 = %579.1;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %583 = reshape(%582, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
  %584 = @func_898(%583) /* ty=(Tensor[(22, 4), int32],) */;
  %585 = @func_3547() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(88), float64]) */;
  %586 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %587 = %586.1;
  %588 = cast(%var_6707, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(2), int32] */;
  %590 = cast(%587, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %592 = %580.2;
  %593 = %584.0;
  %594 = %585.0;
  %595 = logical_and(%590, %591) /* ty=Tensor[(22, 4), bool] */;
  (%581, %592, %593, %594, %595)
}

def @func_4173() -> (Tensor[(12, 2, 12), float64], Tensor[(2560), float64]) {
  %596 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %597 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %598 = %596.0;
  %599 = %597.4;
  (%598, %599)
}

def @func_3109() -> Tensor[(11, 4, 2), bool] {
  %600 = @func_2986() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %600.0
}

def @func_4750(%var_4720: Tensor[(12, 2, 12), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), bool]) {
  %601 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  %602 = cast(%var_4720, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %606 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
  %607 = cast(%var_4720, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %608 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%601, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = floor_divide(%604, %605) /* ty=Tensor[(12, 2, 12), float64] */;
  %612 = @func_4031() /* ty=Tensor[(11, 4, 2), float64] */;
  %613 = %606.0;
  %614 = greater_equal(%609, %610) /* ty=Tensor[(12, 2, 12), bool] */;
  (%611, %612, %613, %614)
}

def @func_686() -> Tensor[(88), float64] {
  %615 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %616 = %615.0;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(88), float64] */;
  log2(%617) /* ty=Tensor[(88), float64] */
}

def @func_5586() -> Tensor[(88), float32] {
  %618 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %618.0
}

def @func_2967() -> Tensor[(11, 4, 2), float32] {
  %619 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  atan(%620) /* ty=Tensor[(11, 4, 2), float32] */
}

def @func_1401(%var_1391: Tensor[(2, 11, 11), uint64], %var_1392: Tensor[(2, 11, 11), uint64]) -> Tensor[(2, 11, 11), uint64] {
  %621 = cast(%var_1392, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %622 = shape_of(%var_1391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%var_1391, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%623, %624) /* ty=Tensor[(2, 11, 11), uint64] */
}

def @func_6203(%var_6161: Tensor[(420), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(88), float32], Tensor[(10, 7, 6), bool], Tensor[(88), float64]) {
  %625 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %626 = cast(%var_6161, dtype="float32") /* ty=Tensor[(420), float32] */;
  %627 = reshape(%626, newshape=[10, 7, 6]) /* ty=Tensor[(10, 7, 6), float32] */;
  %628 = @func_1794(%627) /* ty=Tensor[(10, 7, 6), float32] */;
  %629 = cast(%var_6161, dtype="bool") /* ty=Tensor[(420), bool] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  %634 = @func_6012() /* ty=Tensor[(88), float32] */;
  %635 = %625.0;
  %636 = less(%631, %632) /* ty=Tensor[(10, 7, 6), bool] */;
  %637 = @func_686() /* ty=Tensor[(88), float64] */;
  (%633, %634, %635, %636, %637)
}

def @func_6811() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %638 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %639 = @func_3507() /* ty=Tensor[(11, 4, 2), bool] */;
  %640 = %638.0;
  (%639, %640)
}

def @func_5016() -> Tensor[(11, 4, 2), bool] {
  %641 = @func_2986() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %641.0
}

def @func_2155(%var_2150: Tensor[(15, 5), float32]) -> (Tensor[(15, 5), float32],) {
  %642 = cast(%var_2150, dtype="float32") /* ty=Tensor[(15, 5), float32] */;
  %643 = rsqrt(%642) /* ty=Tensor[(15, 5), float32] */;
  (%643,)
}

def @func_2460(%var_2425: Tensor[(242), uint64]) -> (Tensor[(11, 4, 2), uint32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(88), float64], Tensor[(2, 11, 11), uint64], Tensor[(242), uint64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(22, 4), int32]) {
  %644 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %645 = %644.1;
  %646 = cast(%645, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %647 = cast(%645, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %648 = reshape(%646, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %649 = reshape(%647, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %650 = @func_1235(%648, %649) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
  %651 = cast(%var_2425, dtype="uint64") /* ty=Tensor[(242), uint64] */;
  %652 = cast(%var_2425, dtype="uint64") /* ty=Tensor[(242), uint64] */;
  %653 = reshape(%651, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint64] */;
  %654 = reshape(%652, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint64] */;
  %655 = cast(%645, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %656 = log2(%655) /* ty=Tensor[(11, 4, 2), float64] */;
  %657 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %660 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%656, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %663 = %650.3;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %665 = reshape(%664, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
  %666 = @func_898(%665) /* ty=(Tensor[(22, 4), int32],) */;
  %667 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  %668 = @func_2179() /* ty=Tensor[(12, 2, 12), float64] */;
  %669 = @func_686() /* ty=Tensor[(88), float64] */;
  %670 = @func_1401(%653, %654) /* ty=Tensor[(2, 11, 11), uint64] */;
  %671 = greater(%661, %662) /* ty=Tensor[(11, 4, 2), bool] */;
  %672 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  %673 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
  %674 = %666.0;
  (%663, %667, %668, %669, %670, %var_2425, %671, %672, %673, %674)
}

def @func_7233() -> (Tensor[(11, 4, 2), bool], Tensor[(2560), float32], Tensor[(2560), float64]) {
  %675 = cast(meta[relay.Constant][15] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %676 = reshape(%675, newshape=[2560]) /* ty=Tensor[(2560), float64] */;
  %677 = @func_4275(%676) /* ty=(Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) */;
  %678 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
  %679 = %677.2;
  (%678, %679, meta[relay.Constant][15] /* ty=Tensor[(2560), float64] */)
}

def @func_3507() -> Tensor[(11, 4, 2), bool] {
  @func_1594() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_5488(%var_5434: Tensor[(13, 2, 15), float32], %var_5479: Tensor[(2560), float64]) -> (Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), int16], Tensor[(13, 2, 15), float64], Tensor[(13, 2, 15), float32], Tensor[(2560), float32], Tensor[(2560), float64]) {
  %680 = @func_4031() /* ty=Tensor[(11, 4, 2), float64] */;
  %681 = cast(%680, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %682 = cast(%680, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %683 = reshape(%681, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %684 = reshape(%682, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %685 = @func_1235(%683, %684) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
  %686 = cast(meta[relay.Constant][16] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %687 = reshape(%686, newshape=[13, 2, 15]) /* ty=Tensor[(13, 2, 15), float64] */;
  %688 = @func_3752(%687) /* ty=(Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) */;
  %689 = %688.0;
  %690 = cast(meta[relay.Constant][16] /* ty=Tensor[(390), float64] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%689, dtype="uint16") /* ty=Tensor[(13, 2, 15), uint16] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %694 = bitwise_or(%692, %693) /* ty=Tensor[(13, 2, 15), uint16] */;
  %695 = cast(%694, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %696 = exp(%695) /* ty=Tensor[(13, 2, 15), float64] */;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
  %698 = asinh(%697) /* ty=Tensor[(13, 2, 15), float32] */;
  %699 = cast(%var_5434, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %703 = divide(%701, %702) /* ty=Tensor[(13, 2, 15), float64] */;
  %704 = cast(%698, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %708 = cast(%696, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
  %709 = cast(%var_5479, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %710 = reshape(%709, newshape=[2560]) /* ty=Tensor[(2560), float64] */;
  %711 = @func_4275(%710) /* ty=(Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) */;
  %712 = %685.1;
  %713 = floor_mod(%706, %707) /* ty=Tensor[(13, 2, 15), float64] */;
  %714 = cosh(%708) /* ty=Tensor[(13, 2, 15), float32] */;
  %715 = %711.0;
  (%680, %712, %713, %714, %715, %var_5479)
}

def @func_579(%var_561: Tensor[(16, 10, 16), float64], %var_573: Tensor[(16, 10, 16), float64]) -> (Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) {
  %716 = cast(%var_561, dtype="float64") /* ty=Tensor[(16, 10, 16), float64] */;
  %717 = cast(meta[relay.Constant][17] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %718 = cast(meta[relay.Constant][17] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %719 = reshape(%717, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %720 = reshape(%718, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %721 = @func_81(%719, %720) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %722 = cast(%var_573, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %723 = shape_of(%var_561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%var_561, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %726 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %727 = exp(%716) /* ty=Tensor[(16, 10, 16), float64] */;
  %728 = %721.0;
  %729 = greater_equal(%724, %725) /* ty=Tensor[(16, 10, 16), bool] */;
  %730 = %726.0;
  (%727, %728, meta[relay.Constant][17] /* ty=Tensor[(88), float32] */, %729, %730)
}

def @func_1963() -> Tensor[(88), float32] {
  %731 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %731.0
}

def @func_4661(%var_4608: Tensor[(3, 3, 11), int32]) -> (Tensor[(3, 3, 11), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) {
  %732 = cast(-1 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %733 = cast(%var_4608, dtype="bool") /* ty=Tensor[(3, 3, 11), bool] */;
  %734 = equal(%732, %733) /* ty=Tensor[(3, 3, 11), bool] */;
  %735 = cast(%734, dtype="float32") /* ty=Tensor[(3, 3, 11), float32] */;
  %736 = log(%735) /* ty=Tensor[(3, 3, 11), float32] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(3, 3, 11), float64] */;
  %738 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
  %739 = @func_3596() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
  %740 = @func_2107() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */;
  %741 = exp(%737) /* ty=Tensor[(3, 3, 11), float64] */;
  %742 = %738.0;
  %743 = %739.0;
  %744 = %740.0;
  (%741, %742, %743, %744)
}

def @func_3000() -> Tensor[(11, 4, 2), bool] {
  @func_1594() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_6304(%var_6236: Tensor[(77, 7), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(77, 7), float32]) {
  %745 = cast(%var_6236, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
  %746 = reshape(%745, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %747 = @func_4484(%746) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(11, 4, 2), bool]) */;
  %748 = @func_4352() /* ty=Tensor[(11, 4, 2), bool] */;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %750 = %747.1;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %752 = reshape(%749, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %753 = reshape(%751, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %754 = @func_81(%752, %753) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %755 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %756 = %754.0;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %758 = reshape(%757, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %759 = @func_2291(%758) /* ty=(Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) */;
  %760 = cast(%var_6236, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
  %761 = atan(%760) /* ty=Tensor[(77, 7), float32] */;
  %762 = cast(meta[relay.Constant][18] /* ty=Tensor[(77, 7), float32] */, dtype="int64") /* ty=Tensor[(77, 7), int64] */;
  %763 = shape_of(%var_6236, dtype="int32") /* ty=Tensor[(2), int32] */;
  %764 = cast(%var_6236, dtype="int64") /* ty=Tensor[(77, 7), int64] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %766 = add(%764, %765) /* ty=Tensor[(77, 7), int64] */;
  %767 = cast(%766, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
  %768 = shape_of(%761, dtype="int32") /* ty=Tensor[(2), int32] */;
  %769 = cast(%761, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %771 = %755.0;
  %772 = %759.0;
  %773 = divide(%769, %770) /* ty=Tensor[(77, 7), float32] */;
  (%748, %750, %756, %771, %772, %773)
}

def @func_3752(%var_3738: Tensor[(13, 2, 15), float64]) -> (Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) {
  %774 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %775 = shape_of(%var_3738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%var_3738, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %778 = minimum(%776, %777) /* ty=Tensor[(13, 2, 15), float64] */;
  %779 = @func_3507() /* ty=Tensor[(11, 4, 2), bool] */;
  (%778, %779)
}

def @func_3906(%var_3824: Tensor[(12, 2, 12), float64]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(12, 2, 12), int8], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), int32], Tensor[(12, 2, 12), float32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), float32]) {
  %780 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %781 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %782 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %783 = %782.1;
  %784 = cast(%var_3824, dtype="int8") /* ty=Tensor[(12, 2, 12), int8] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="int8") /* ty=Tensor[(12, 2, 12), int8] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %788 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %789 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %790 = cast(%789, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %791 = reshape(%790, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %792 = @func_2291(%791) /* ty=(Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) */;
  %793 = %792.1;
  %794 = cast(%var_3824, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %795 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%783, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %798 = less_equal(%796, %797) /* ty=Tensor[(12, 2, 12), bool] */;
  %799 = cast(%798, dtype="int32") /* ty=Tensor[(12, 2, 12), int32] */;
  %800 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%793, dtype="int32") /* ty=Tensor[(12, 2, 12), int32] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %803 = cast(%783, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %804 = sigmoid(%803) /* ty=Tensor[(12, 2, 12), float32] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %806 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %807 = cast(%804, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %808 = log(%807) /* ty=Tensor[(12, 2, 12), float64] */;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %810 = cast(%804, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %811 = %780.1;
  %812 = %781.0;
  %813 = left_shift(%786, %787) /* ty=Tensor[(12, 2, 12), int8] */;
  %814 = %788.3;
  %815 = maximum(%801, %802) /* ty=Tensor[(12, 2, 12), int32] */;
  %816 = sinh(%805) /* ty=Tensor[(12, 2, 12), float32] */;
  %817 = %806.1;
  %818 = cosh(%809) /* ty=Tensor[(12, 2, 12), float64] */;
  %819 = cos(%810) /* ty=Tensor[(12, 2, 12), float32] */;
  (%811, %789, %812, %813, %814, %815, %816, %817, %818, %819)
}

def @func_4903() -> Tensor[(12, 2, 12), float64] {
  %820 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  %821 = cast(%820, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  atanh(%821) /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_403() -> (Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) {
  %822 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %823 = %822.3;
  %824 = cast(%823, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %825 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %826 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %827 = %826.2;
  %828 = cast(%827, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %829 = asinh(%824) /* ty=Tensor[(11, 4, 2), float64] */;
  %830 = %825.2;
  %831 = rsqrt(%828) /* ty=Tensor[(12, 2, 12), float64] */;
  (%829, %830, %831)
}

def @func_3244() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) {
  %832 = @func_2824() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), int16]) */;
  %833 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  %834 = %832.1;
  (%833, %834)
}

def @func_81(%var_63: Tensor[(11, 4, 2), float32], %var_64: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), float32],) {
  %835 = cast(%var_64, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %836 = shape_of(%var_63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%var_63, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %839 = floor_divide(%837, %838) /* ty=Tensor[(11, 4, 2), float32] */;
  (%839,)
}

def @main(%var_7237: Tensor[(7, 2, 16), float64], %var_7238: Tensor[(7, 2, 16), float64], %var_7250: Tensor[(7, 2, 16), float64]) -> (Tensor[(88), float32], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
  %840 = @func_6350() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %841 = cast(%var_7238, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %842 = shape_of(%var_7237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%var_7237, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %845 = floor_divide(%843, %844) /* ty=Tensor[(7, 2, 16), float64] */;
  %846 = cast(%var_7250, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%845, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %850 = logical_or(%848, %849) /* ty=Tensor[(7, 2, 16), bool] */;
  %851 = cast(%850, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %852 = shape_of(%var_7237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_7237, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %855 = greater_equal(%853, %854) /* ty=Tensor[(7, 2, 16), bool] */;
  %856 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 2, 16), bool] */, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%855, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %860 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 2, 16), bool] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %861 = %840.0;
  %862 = bitwise_xor(%858, %859) /* ty=Tensor[(7, 2, 16), uint64] */;
  %863 = log(%860) /* ty=Tensor[(7, 2, 16), float32] */;
  (%861, %862, %863)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_534() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) {
  %0 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %1 = %0.3;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %3 = cast(%1, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %4 = reshape(%2, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %5 = reshape(%3, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %6 = @func_81(%4, %5) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %9 = acos(%8) /* ty=Tensor[(11, 4, 2), float64] */;
  (%1, %9)
}

def @func_5658(%var_5656: int32, %var_5657: Tensor[(7, 12, 10), int32]) -> Tensor[(7, 12, 10), int32] {
  @func_5654(%var_5656, %var_5657) /* ty=Tensor[(7, 12, 10), int32] */
}

def @func_3471(%var_3470: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), uint8]) {
  %18 = fn (%var_3464: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), uint8]) {
    %10 = @func_1929() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) */;
    %11 = %10.0;
    %12 = cast(%var_3464, dtype="uint8") /* ty=Tensor[(11, 4, 2), uint8] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%11, dtype="uint8") /* ty=Tensor[(11, 4, 2), uint8] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %16 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
    %17 = left_shift(%14, %15) /* ty=Tensor[(11, 4, 2), uint8] */;
    (%16, %17)
  };
  %18(%var_3470) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), uint8]) */
}

def @func_5383() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %19 = @func_2824() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), int16]) */;
  %20 = @func_4852() /* ty=Tensor[(11, 4, 2), bool] */;
  %21 = %19.0;
  (%20, %21)
}

def @func_4487(%var_4485: Tensor[(11, 7, 7), float32]) -> (Tensor[(11, 7, 7), float32], Tensor[(11, 4, 2), bool]) {
  @func_4484(%var_4485) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(11, 4, 2), bool]) */
}

def @func_183() -> (Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */
}

def @func_898(%var_891: Tensor[(22, 4), float32]) -> (Tensor[(22, 4), int32],) {
  %22 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %23 = %22.1;
  %24 = cast(%var_891, dtype="int32") /* ty=Tensor[(22, 4), int32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(2), int32] */;
  %26 = cast(%23, dtype="int32") /* ty=Tensor[(22, 4), int32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %28 = logical_xor(%26, %27) /* ty=Tensor[(22, 4), int32] */;
  (%28,)
}

def @func_4664(%var_4662: Tensor[(3, 3, 11), int32]) -> (Tensor[(3, 3, 11), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) {
  @func_4661(%var_4662) /* ty=(Tensor[(3, 3, 11), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */
}

def @func_4484(%var_4477: Tensor[(11, 7, 7), float32]) -> (Tensor[(11, 7, 7), float32], Tensor[(11, 4, 2), bool]) {
  %29 = cast(%var_4477, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
  %30 = @func_3381() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %31 = log10(%29) /* ty=Tensor[(11, 7, 7), float32] */;
  %32 = %30.0;
  (%31, %32)
}

def @func_6014() -> Tensor[(88), float32] {
  @func_6012() /* ty=Tensor[(88), float32] */
}

def @func_1929() -> (Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) {
  %33 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %34 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %35 = %34.0;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(22, 4), float64] */;
  %37 = %33.0;
  %38 = cos(%36) /* ty=Tensor[(22, 4), float64] */;
  (%37, %38)
}

def @func_6883(%var_6866: Tensor[(8, 8, 7), int16], %var_6867: Tensor[(8, 8, 7), int16]) -> (Tensor[(8, 8, 7), int16], Tensor[(11, 4, 2), int16], Tensor[(88), bool]) {
  %39 = cast(%var_6867, dtype="int16") /* ty=Tensor[(8, 8, 7), int16] */;
  %40 = shape_of(%var_6866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%var_6866, dtype="int16") /* ty=Tensor[(8, 8, 7), int16] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %43 = cast(meta[relay.Constant][0] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %44 = cast(meta[relay.Constant][0] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %45 = reshape(%43, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %46 = reshape(%44, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %47 = @func_1235(%45, %46) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
  %48 = bitwise_and(%41, %42) /* ty=Tensor[(8, 8, 7), int16] */;
  %49 = %47.1;
  (%48, %49, meta[relay.Constant][0] /* ty=Tensor[(88), bool] */)
}

def @func_7200(%var_7198: Tensor[(5120), float64], %var_7199: Tensor[(5120), float64]) -> (Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int16], Tensor[(5120), bool], Tensor[(11, 4, 2), bool]) {
  %65 = fn (%var_7161: Tensor[(5120), float64], %var_7182: Tensor[(5120), float64]) -> (Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int16], Tensor[(5120), bool], Tensor[(11, 4, 2), bool]) {
    %50 = @func_7112() /* ty=(Tensor[(11, 4, 2), float32],) */;
    %51 = cast(%var_7161, dtype="float64") /* ty=Tensor[(5120), float64] */;
    %52 = reshape(%51, newshape=[2560, 2]) /* ty=Tensor[(2560, 2), float64] */;
    %53 = @func_3285(%52) /* ty=(Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) */;
    %54 = @func_2522() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) */;
    %55 = cast(%var_7182, dtype="bool") /* ty=Tensor[(5120), bool] */;
    %56 = shape_of(%var_7161, dtype="int32") /* ty=Tensor[(1), int32] */;
    %57 = cast(%var_7161, dtype="bool") /* ty=Tensor[(5120), bool] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?), bool] */;
    %59 = @func_5383() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
    %60 = %50.0;
    %61 = %53.1;
    %62 = %54.1;
    %63 = greater_equal(%57, %58) /* ty=Tensor[(5120), bool] */;
    %64 = %59.0;
    (%60, %61, %62, %63, %64)
  };
  %65(%var_7198, %var_7199) /* ty=(Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int16], Tensor[(5120), bool], Tensor[(11, 4, 2), bool]) */
}

def @func_737() -> (Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) {
  @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */
}

def @func_7001(%var_6999: Tensor[(448), uint32]) -> (Tensor[(11, 4, 2), int16], Tensor[(88), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(448), uint32], Tensor[(16, 4, 7), float32]) {
  @func_6998(%var_6999) /* ty=(Tensor[(11, 4, 2), int16], Tensor[(88), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(448), uint32], Tensor[(16, 4, 7), float32]) */
}

def @func_1931() -> (Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) {
  @func_1929() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) */
}

def @func_5531(%var_5529: Tensor[(9, 14, 10), float64]) -> (Tensor[(11, 4, 2), bool], Tensor[(65, 6), float64], Tensor[(9, 14, 10), float64], Tensor[(11, 4, 2), bool], Tensor[(9, 14, 10), float32]) {
  @func_5528(%var_5529) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(65, 6), float64], Tensor[(9, 14, 10), float64], Tensor[(11, 4, 2), bool], Tensor[(9, 14, 10), float32]) */
}

def @func_5016() -> Tensor[(11, 4, 2), bool] {
  %66 = @func_2986() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %66.0
}

def @func_1963() -> Tensor[(88), float32] {
  %67 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %67.0
}

def @func_2524() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) {
  @func_2522() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) */
}

def @func_181() -> (Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  %68 = cast(meta[relay.Constant][1] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %70 = reshape(%68, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %71 = reshape(%69, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %72 = @func_81(%70, %71) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %73 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %74 = %73.0;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %76 = %72.0;
  %77 = erf(%75) /* ty=Tensor[(12, 2, 12), float64] */;
  (%76, meta[relay.Constant][1] /* ty=Tensor[(88), float32] */, %77)
}

def @func_4972(%var_4914: Tensor[(8, 8, 5), uint64], %var_4915: Tensor[(8, 8, 5), uint64]) -> (Tensor[(8, 8, 5), bool], Tensor[(12, 2, 12), float64], Tensor[(8, 8, 5), float32], Tensor[(11, 4, 2), float32]) {
  %78 = cast(%var_4915, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %79 = shape_of(%var_4914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_4914, dtype="bool") /* ty=Tensor[(8, 8, 5), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %83 = cast(%var_4915, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %84 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %85 = %84.1;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %87 = less(%80, %81) /* ty=Tensor[(8, 8, 5), bool] */;
  %88 = %82.2;
  %89 = sin(%83) /* ty=Tensor[(8, 8, 5), float32] */;
  %90 = sinh(%86) /* ty=Tensor[(11, 4, 2), float32] */;
  (%87, %88, %89, %90)
}

def @func_3360() -> (Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) {
  @func_3358() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) */
}

def @func_5635() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  @func_5633() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */
}

def @func_1238(%var_1236: Tensor[(11, 4, 2), bool], %var_1237: Tensor[(11, 4, 2), bool]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) {
  %120 = fn (%var_1165: Tensor[(11, 4, 2), bool], %var_1230: Tensor[(11, 4, 2), bool]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) {
    %91 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
    %92 = cast(%var_1165, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%91, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %96 = cast(%var_1165, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %97 = exp(%96) /* ty=Tensor[(11, 4, 2), float32] */;
    %98 = cast(%91, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %99 = equal(%94, %95) /* ty=Tensor[(11, 4, 2), bool] */;
    %100 = cast(%99, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %101 = reshape(%98, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %102 = reshape(%100, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %103 = @func_81(%101, %102) /* ty=(Tensor[(11, 4, 2), float32],) */;
    %104 = %103.0;
    %105 = cast(%104, dtype="int16") /* ty=Tensor[(11, 4, 2), int16] */;
    %106 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%97, dtype="int16") /* ty=Tensor[(11, 4, 2), int16] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %109 = cast(%var_1165, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %110 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%97, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %113 = cast(%var_1230, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
    %114 = shape_of(%var_1165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %115 = cast(%var_1165, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %117 = right_shift(%107, %108) /* ty=Tensor[(11, 4, 2), int16] */;
    %118 = floor_mod(%111, %112) /* ty=Tensor[(11, 4, 2), float32] */;
    %119 = add(%115, %116) /* ty=Tensor[(11, 4, 2), uint32] */;
    (%99, %117, %118, %119)
  };
  %120(%var_1236, %var_1237) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */
}

def @func_4410(%var_4408: Tensor[(4, 1280), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(?, 75), bool], Tensor[(1, 75), float32], Tensor[(11, 4, 2), float32], Tensor[(4, 1280), float64], Tensor[(12, 2, 12), float64]) {
  @func_4407(%var_4408) /* ty=(Tensor[(12, 2, 12), float64], Tensor[(?, 75), bool], Tensor[(1, 75), float32], Tensor[(11, 4, 2), float32], Tensor[(4, 1280), float64], Tensor[(12, 2, 12), float64]) */
}

def @func_2727() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %121 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %122 = @func_2107() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */;
  %123 = %121.0;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %125 = reshape(%124, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %126 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %127 = %122.0;
  %128 = @func_2631(%125) /* ty=Tensor[(11, 4, 2), bool] */;
  %129 = %126.0;
  (%123, %127, %128, %129)
}

def @func_4202() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %130 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %131 = @func_3000() /* ty=Tensor[(11, 4, 2), bool] */;
  %132 = %130.1;
  (%131, %132)
}

def @func_2460(%var_2425: Tensor[(242), uint64]) -> (Tensor[(11, 4, 2), uint32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(88), float64], Tensor[(2, 11, 11), uint64], Tensor[(242), uint64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(22, 4), int32]) {
  %133 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %134 = %133.1;
  %135 = cast(%134, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %136 = cast(%134, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %137 = reshape(%135, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %138 = reshape(%136, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
  %139 = @func_1235(%137, %138) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
  %140 = cast(%var_2425, dtype="uint64") /* ty=Tensor[(242), uint64] */;
  %141 = cast(%var_2425, dtype="uint64") /* ty=Tensor[(242), uint64] */;
  %142 = reshape(%140, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint64] */;
  %143 = reshape(%141, newshape=[2, 11, 11]) /* ty=Tensor[(2, 11, 11), uint64] */;
  %144 = cast(%134, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %145 = log2(%144) /* ty=Tensor[(11, 4, 2), float64] */;
  %146 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %149 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%145, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = %139.3;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %154 = reshape(%153, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
  %155 = @func_898(%154) /* ty=(Tensor[(22, 4), int32],) */;
  %156 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  %157 = @func_2179() /* ty=Tensor[(12, 2, 12), float64] */;
  %158 = @func_686() /* ty=Tensor[(88), float64] */;
  %159 = @func_1401(%142, %143) /* ty=Tensor[(2, 11, 11), uint64] */;
  %160 = greater(%150, %151) /* ty=Tensor[(11, 4, 2), bool] */;
  %161 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  %162 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
  %163 = %155.0;
  (%152, %156, %157, %158, %159, %var_2425, %160, %161, %162, %163)
}

def @func_1049() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) {
  @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */
}

def @func_5018() -> Tensor[(11, 4, 2), bool] {
  @func_5016() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_735() -> (Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) {
  %164 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %165 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %166 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %167 = cast(meta[relay.Constant][2] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %168 = cast(meta[relay.Constant][2] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %169 = reshape(%167, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
  %170 = reshape(%168, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
  %171 = @func_579(%169, %170) /* ty=(Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) */;
  %172 = %164.1;
  %173 = %165.0;
  %174 = %166.1;
  %175 = %171.3;
  (%172, %173, %174, %175, meta[relay.Constant][2] /* ty=Tensor[(2560), float64] */)
}

def @func_6998(%var_6976: Tensor[(448), uint32]) -> (Tensor[(11, 4, 2), int16], Tensor[(88), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(448), uint32], Tensor[(16, 4, 7), float32]) {
  %176 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
  %177 = @func_4516() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float64]) */;
  %178 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %179 = @func_6811() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
  %180 = cast(%var_6976, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %181 = reshape(%180, newshape=[16, 4, 7]) /* ty=Tensor[(16, 4, 7), uint32] */;
  %182 = @func_1848(%181) /* ty=(Tensor[(16, 4, 7), bool],) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(16, 4, 7), float32] */;
  %185 = %176.1;
  %186 = %177.1;
  %187 = %178.1;
  %188 = %179.0;
  %189 = asinh(%184) /* ty=Tensor[(16, 4, 7), float32] */;
  (%185, %186, %187, %188, %var_6976, %189)
}

def @func_6752() -> (Tensor[(12, 2, 12), float64],) {
  @func_6750() /* ty=(Tensor[(12, 2, 12), float64],) */
}

def @func_3181() -> Tensor[(12, 2, 12), float64] {
  %190 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %190.0
}

def @func_1125(%var_1124: Tensor[(11, 4, 2), bool]) -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %200 = fn (%var_1103: Tensor[(11, 4, 2), bool]) -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
    %191 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
    %192 = %191.0;
    %193 = cast(%var_1103, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
    %195 = cast(%192, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %197 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
    %198 = less_equal(%195, %196) /* ty=Tensor[(11, 4, 2), bool] */;
    %199 = %197.1;
    (%198, %199)
  };
  %200(%var_1124) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */
}

def @func_1531() -> (Tensor[(88), float32],) {
  %201 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %202 = %201.0;
  (%202,)
}

def @func_4817() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %205 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
    %203 = @func_4352() /* ty=Tensor[(11, 4, 2), bool] */;
    %204 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
    (%203, %204)
  };
  %205() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */
}

def @func_826(%var_825: Tensor[(2560, 1), float64]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) {
  %225 = fn (%var_793: Tensor[(2560, 1), float64]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) {
    %206 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
    %207 = %206.0;
    %208 = cast(%207, dtype="float32") /* ty=Tensor[(88), float32] */;
    %209 = cast(%207, dtype="float32") /* ty=Tensor[(88), float32] */;
    %210 = reshape(%208, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %211 = reshape(%209, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %212 = @func_81(%210, %211) /* ty=(Tensor[(11, 4, 2), float32],) */;
    %213 = cast(%var_793, dtype="float64") /* ty=Tensor[(2560, 1), float64] */;
    %214 = cast(%var_793, dtype="float64") /* ty=Tensor[(2560, 1), float64] */;
    %215 = reshape(%213, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
    %216 = reshape(%214, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), float64] */;
    %217 = @func_579(%215, %216) /* ty=(Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) */;
    %218 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
    %219 = cast(%var_793, dtype="float32") /* ty=Tensor[(2560, 1), float32] */;
    %220 = %212.0;
    %221 = @func_686() /* ty=Tensor[(88), float64] */;
    %222 = %217.2;
    %223 = %218.2;
    %224 = atan(%219) /* ty=Tensor[(2560, 1), float32] */;
    (%207, %220, %221, %222, %223, %224)
  };
  %225(%var_825) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) */
}

def @func_4432() -> Tensor[(12, 2, 12), float64] {
  @func_2179() /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_1796(%var_1795: Tensor[(10, 7, 6), float32]) -> Tensor[(10, 7, 6), float32] {
  %227 = fn (%var_1790: Tensor[(10, 7, 6), float32]) -> Tensor[(10, 7, 6), float32] {
    %226 = cast(%var_1790, dtype="float32") /* ty=Tensor[(10, 7, 6), float32] */;
    exp(%226) /* ty=Tensor[(10, 7, 6), float32] */
  };
  %227(%var_1795) /* ty=Tensor[(10, 7, 6), float32] */
}

def @func_4903() -> Tensor[(12, 2, 12), float64] {
  %228 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  atanh(%229) /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_7093() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64]) {
  %237 = fn () -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64]) {
    %230 = @func_4816() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
    %231 = @func_2522() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) */;
    %232 = @func_5907() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool]) */;
    %233 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
    %234 = %230.0;
    %235 = %231.0;
    %236 = %232.1;
    (%233, %234, %235, %236)
  };
  %237() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64]) */
}

def @func_2893(%var_2882: Tensor[(3, 780), float64]) -> (Tensor[(88), float32], Tensor[(13, 12, 15), float32], Tensor[(3, 780), float64]) {
  %238 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %239 = cast(%var_2882, dtype="float64") /* ty=Tensor[(3, 780), float64] */;
  %240 = reshape(%239, newshape=[13, 12, 15]) /* ty=Tensor[(13, 12, 15), float64] */;
  %241 = @func_1885(%240) /* ty=(Tensor[(13, 12, 15), float32],) */;
  %242 = %238.0;
  %243 = %241.0;
  (%242, %243, %var_2882)
}

def @func_3704() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32]) {
  @func_3702() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32]) */
}

def @func_3965() -> (Tensor[(11, 4, 2), int16],) {
  %246 = fn () -> (Tensor[(11, 4, 2), int16],) {
    %244 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
    %245 = %244.1;
    (%245,)
  };
  %246() /* ty=(Tensor[(11, 4, 2), int16],) */
}

def @func_901(%var_899: Tensor[(22, 4), float32]) -> (Tensor[(22, 4), int32],) {
  @func_898(%var_899) /* ty=(Tensor[(22, 4), int32],) */
}

def @func_1006() -> Tensor[(11, 4, 2), bool] {
  %247 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %247.1
}

def @func_3702() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32]) {
  %248 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %249 = @func_2875() /* ty=(Tensor[(88), float64], Tensor[(11, 4, 2), bool]) */;
  %250 = @func_3381() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %251 = @func_2824() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), int16]) */;
  %252 = %248.2;
  %253 = %249.0;
  %254 = %250.0;
  %255 = %251.1;
  %256 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  (%252, %253, %254, %255, %256)
}

def @func_6621() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %261 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
    %257 = @func_4589() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(13, 12, 15), float32], Tensor[(2340), float64]) */;
    %258 = @func_4202() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
    %259 = %257.0;
    %260 = %258.1;
    (%259, %260)
  };
  %261() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */
}

def @func_3109() -> Tensor[(11, 4, 2), bool] {
  %262 = @func_2986() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %262.0
}

def @func_5673() -> (Tensor[(11, 4, 2), float32],) {
  %263 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  (%263,)
}

def @func_3358() -> (Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) {
  %264 = @func_2986() /* ty=(Tensor[(11, 4, 2), bool],) */;
  %265 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %266 = @func_2875() /* ty=(Tensor[(88), float64], Tensor[(11, 4, 2), bool]) */;
  %267 = %264.0;
  %268 = %265.0;
  %269 = %266.0;
  (%267, %268, %269)
}

def @func_4175() -> (Tensor[(12, 2, 12), float64], Tensor[(2560), float64]) {
  @func_4173() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(2560), float64]) */
}

def @func_3509() -> Tensor[(11, 4, 2), bool] {
  @func_3507() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_4275(%var_4254: Tensor[(2560), float64]) -> (Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) {
  %270 = @func_4173() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(2560), float64]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %273 = atan(%272) /* ty=Tensor[(2560), float64] */;
  %274 = cast(%var_4254, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(1), int32] */;
  %276 = cast(%273, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?), float32] */;
  %278 = cast(%var_4254, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %279 = floor_divide(%276, %277) /* ty=Tensor[(2560), float32] */;
  %280 = @func_2967() /* ty=Tensor[(11, 4, 2), float32] */;
  %281 = asinh(%278) /* ty=Tensor[(2560), float32] */;
  (%279, %280, %281)
}

def @func_5291() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) {
  %282 = cast(meta[relay.Constant][3] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %283 = reshape(%282, newshape=[2560]) /* ty=Tensor[(2560), float64] */;
  %284 = @func_4275(%283) /* ty=(Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) */;
  %285 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  %286 = %284.1;
  (%285, %286, meta[relay.Constant][3] /* ty=Tensor[(2560), float64] */)
}

def @func_536() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) {
  @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */
}

def @func_403() -> (Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) {
  %287 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %288 = %287.3;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  %290 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %291 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %292 = %291.2;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %294 = asinh(%289) /* ty=Tensor[(11, 4, 2), float64] */;
  %295 = %290.2;
  %296 = rsqrt(%293) /* ty=Tensor[(12, 2, 12), float64] */;
  (%294, %295, %296)
}

def @func_3909(%var_3907: Tensor[(12, 2, 12), float64]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(12, 2, 12), int8], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), int32], Tensor[(12, 2, 12), float32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), float32]) {
  @func_3906(%var_3907) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(12, 2, 12), int8], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), int32], Tensor[(12, 2, 12), float32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), float32]) */
}

def @func_5633() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  %297 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %298 = %297.0;
  %299 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  (%298, %299)
}

def @func_6306(%var_6305: Tensor[(77, 7), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(77, 7), float32]) {
  %329 = fn (%var_6236: Tensor[(77, 7), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(77, 7), float32]) {
    %300 = cast(%var_6236, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
    %301 = reshape(%300, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
    %302 = @func_4484(%301) /* ty=(Tensor[(11, 7, 7), float32], Tensor[(11, 4, 2), bool]) */;
    %303 = @func_4352() /* ty=Tensor[(11, 4, 2), bool] */;
    %304 = cast(%303, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %305 = %302.1;
    %306 = cast(%305, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %307 = reshape(%304, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %308 = reshape(%306, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %309 = @func_81(%307, %308) /* ty=(Tensor[(11, 4, 2), float32],) */;
    %310 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
    %311 = %309.0;
    %312 = cast(%311, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %313 = reshape(%312, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %314 = @func_2291(%313) /* ty=(Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) */;
    %315 = cast(%var_6236, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
    %316 = atan(%315) /* ty=Tensor[(77, 7), float32] */;
    %317 = cast(meta[relay.Constant][4] /* ty=Tensor[(77, 7), float32] */, dtype="int64") /* ty=Tensor[(77, 7), int64] */;
    %318 = shape_of(%var_6236, dtype="int32") /* ty=Tensor[(2), int32] */;
    %319 = cast(%var_6236, dtype="int64") /* ty=Tensor[(77, 7), int64] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %321 = add(%319, %320) /* ty=Tensor[(77, 7), int64] */;
    %322 = cast(%321, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
    %323 = shape_of(%316, dtype="int32") /* ty=Tensor[(2), int32] */;
    %324 = cast(%316, dtype="float32") /* ty=Tensor[(77, 7), float32] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %326 = %310.0;
    %327 = %314.0;
    %328 = divide(%324, %325) /* ty=Tensor[(77, 7), float32] */;
    (%303, %305, %311, %326, %327, %328)
  };
  %329(%var_6305) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(77, 7), float32]) */
}

def @func_4032() -> Tensor[(11, 4, 2), float64] {
  %331 = fn () -> Tensor[(11, 4, 2), float64] {
    %330 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
    %330.1
  };
  %331() /* ty=Tensor[(11, 4, 2), float64] */
}

def @func_6714(%var_6707: Tensor[(22, 4), float32]) -> (Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(22, 4), int32], Tensor[(12, 2, 12), float64], Tensor[(22, 4), bool]) {
  %332 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %333 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %334 = %332.1;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %336 = reshape(%335, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
  %337 = @func_898(%336) /* ty=(Tensor[(22, 4), int32],) */;
  %338 = @func_3547() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(88), float64]) */;
  %339 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %340 = %339.1;
  %341 = cast(%var_6707, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(2), int32] */;
  %343 = cast(%340, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %345 = %333.2;
  %346 = %337.0;
  %347 = %338.0;
  %348 = logical_and(%343, %344) /* ty=Tensor[(22, 4), bool] */;
  (%334, %345, %346, %347, %348)
}

def @func_485() -> (Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) {
  @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */
}

def @func_483() -> (Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) {
  %349 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %350 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %351 = %350.2;
  %352 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  %353 = cast(%352, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %354 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%351, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %358 = %349.1;
  %359 = not_equal(%355, %356) /* ty=Tensor[(11, 4, 2), bool] */;
  %360 = %357.1;
  (%358, %359, %360)
}

def @func_2157(%var_2156: Tensor[(15, 5), float32]) -> (Tensor[(15, 5), float32],) {
  %363 = fn (%var_2150: Tensor[(15, 5), float32]) -> (Tensor[(15, 5), float32],) {
    %361 = cast(%var_2150, dtype="float32") /* ty=Tensor[(15, 5), float32] */;
    %362 = rsqrt(%361) /* ty=Tensor[(15, 5), float32] */;
    (%362,)
  };
  %363(%var_2156) /* ty=(Tensor[(15, 5), float32],) */
}

def @func_1533() -> (Tensor[(88), float32],) {
  @func_1531() /* ty=(Tensor[(88), float32],) */
}

def @func_1885(%var_1878: Tensor[(13, 12, 15), float64]) -> (Tensor[(13, 12, 15), float32],) {
  %364 = cast(%var_1878, dtype="float64") /* ty=Tensor[(13, 12, 15), float64] */;
  %365 = atanh(%364) /* ty=Tensor[(13, 12, 15), float64] */;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(13, 12, 15), float32] */;
  %367 = cos(%366) /* ty=Tensor[(13, 12, 15), float32] */;
  (%367,)
}

def @func_4332() -> Tensor[(88), float32] {
  @func_4330() /* ty=Tensor[(88), float32] */
}

def @func_2987() -> (Tensor[(11, 4, 2), bool],) {
  %370 = fn () -> (Tensor[(11, 4, 2), bool],) {
    %368 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
    %369 = %368.1;
    (%369,)
  };
  %370() /* ty=(Tensor[(11, 4, 2), bool],) */
}

def @func_5528(%var_5502: Tensor[(9, 14, 10), float64]) -> (Tensor[(11, 4, 2), bool], Tensor[(65, 6), float64], Tensor[(9, 14, 10), float64], Tensor[(11, 4, 2), bool], Tensor[(9, 14, 10), float32]) {
  %371 = cast(meta[relay.Constant][5] /* ty=Tensor[(65, 6), float64] */, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %372 = reshape(%371, newshape=[13, 2, 15]) /* ty=Tensor[(13, 2, 15), float64] */;
  %373 = @func_3752(%372) /* ty=(Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) */;
  %374 = cast(%var_5502, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %375 = acosh(%374) /* ty=Tensor[(9, 14, 10), float64] */;
  %376 = cast(%var_5502, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="float64") /* ty=Tensor[(9, 14, 10), float64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %380 = %373.1;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %382 = reshape(%381, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %383 = @func_3469(%382) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), uint8]) */;
  %384 = cast(%375, dtype="float32") /* ty=Tensor[(9, 14, 10), float32] */;
  %385 = mod(%378, %379) /* ty=Tensor[(9, 14, 10), float64] */;
  %386 = %383.0;
  %387 = log10(%384) /* ty=Tensor[(9, 14, 10), float32] */;
  (%380, meta[relay.Constant][5] /* ty=Tensor[(65, 6), float64] */, %385, %386, %387)
}

def @func_4330() -> Tensor[(88), float32] {
  @func_1963() /* ty=Tensor[(88), float32] */
}

def @func_3598() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  @func_3596() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */
}

def @func_5226() -> (Tensor[(11, 4, 2), bool],) {
  %389 = fn () -> (Tensor[(11, 4, 2), bool],) {
    %388 = @func_5016() /* ty=Tensor[(11, 4, 2), bool] */;
    (%388,)
  };
  %389() /* ty=(Tensor[(11, 4, 2), bool],) */
}

def @func_2109() -> (Tensor[(11, 4, 2), float32], Tensor[(88), float32]) {
  @func_2107() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */
}

def @func_307() -> (Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) {
  @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */
}

def @func_5278() -> Tensor[(22, 4), float64] {
  @func_5276() /* ty=Tensor[(22, 4), float64] */
}

def @func_335() -> Tensor[(11, 4, 2), float32] {
  @func_333() /* ty=Tensor[(11, 4, 2), float32] */
}

def @func_4316() -> Tensor[(11, 4, 2), float32] {
  %391 = fn () -> Tensor[(11, 4, 2), float32] {
    %390 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
    %390.1
  };
  %391() /* ty=Tensor[(11, 4, 2), float32] */
}

def @func_4992() -> (Tensor[(11, 4, 2), bool],) {
  %392 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
  (%392,)
}

def @func_2729() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */
}

def @func_4590() -> (Tensor[(11, 4, 2), bool], Tensor[(13, 12, 15), float32], Tensor[(2340), float64]) {
  %398 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(13, 12, 15), float32], Tensor[(2340), float64]) {
    %393 = cast(meta[relay.Constant][6] /* ty=Tensor[(2340), float64] */, dtype="float64") /* ty=Tensor[(2340), float64] */;
    %394 = reshape(%393, newshape=[13, 12, 15]) /* ty=Tensor[(13, 12, 15), float64] */;
    %395 = @func_1885(%394) /* ty=(Tensor[(13, 12, 15), float32],) */;
    %396 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
    %397 = %395.0;
    (%396, %397, meta[relay.Constant][6] /* ty=Tensor[(2340), float64] */)
  };
  %398() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(13, 12, 15), float32], Tensor[(2340), float64]) */
}

def @func_4407(%var_4401: Tensor[(4, 1280), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(?, 75), bool], Tensor[(1, 75), float32], Tensor[(11, 4, 2), float32], Tensor[(4, 1280), float64], Tensor[(12, 2, 12), float64]) {
  %399 = @func_3547() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(88), float64]) */;
  %400 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 75), float32] */, dtype="float32") /* ty=Tensor[(1, 75), float32] */;
  %401 = sinh(%400) /* ty=Tensor[(1, 75), float32] */;
  %402 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 75), float32] */, dtype="float32") /* ty=Tensor[(1, 75), float32] */;
  %403 = reshape(%402, newshape=[15, 5]) /* ty=Tensor[(15, 5), float32] */;
  %404 = @func_2155(%403) /* ty=(Tensor[(15, 5), float32],) */;
  %405 = %404.0;
  %406 = cast(%405, dtype="bool") /* ty=Tensor[(15, 5), bool] */;
  %407 = shape_of(%401, dtype="int32") /* ty=Tensor[(2), int32] */;
  %408 = cast(%401, dtype="bool") /* ty=Tensor[(1, 75), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %410 = logical_or(%408, %409) /* ty=Tensor[(?, 75), bool] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(?, 75), float64] */;
  %412 = log2(%411) /* ty=Tensor[(?, 75), float64] */;
  %413 = cast(%401, dtype="bool") /* ty=Tensor[(1, 75), bool] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(2), int32] */;
  %415 = cast(%412, dtype="bool") /* ty=Tensor[(?, 75), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %417 = cast(%401, dtype="float32") /* ty=Tensor[(1, 75), float32] */;
  %418 = cast(%var_4401, dtype="float64") /* ty=Tensor[(4, 1280), float64] */;
  %419 = reshape(%418, newshape=[2560, 2]) /* ty=Tensor[(2560, 2), float64] */;
  %420 = @func_3285(%419) /* ty=(Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) */;
  %421 = @func_3547() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(88), float64]) */;
  %422 = %399.0;
  %423 = less_equal(%415, %416) /* ty=Tensor[(?, 75), bool] */;
  %424 = log(%417) /* ty=Tensor[(1, 75), float32] */;
  %425 = %420.0;
  %426 = %421.0;
  (%422, %423, %424, %425, %var_4401, %426)
}

def @func_4905() -> Tensor[(12, 2, 12), float64] {
  @func_4903() /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_1383() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) {
  %436 = fn () -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) {
    %427 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
    %428 = %427.0;
    %429 = cast(%428, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %430 = cast(%428, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %431 = reshape(%429, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
    %432 = reshape(%430, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
    %433 = @func_1235(%431, %432) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
    %434 = %433.1;
    %435 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
    (%428, %434, %435)
  };
  %436() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */
}

def @func_305() -> (Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) {
  %437 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %438 = %437.2;
  %439 = cast(%438, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %440 = cast(%438, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %441 = reshape(%439, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %442 = reshape(%440, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %443 = @func_81(%441, %442) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %446 = shape_of(%438, dtype="int32") /* ty=Tensor[(2), int32] */;
  %447 = cast(%438, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %449 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %450 = cast(%444, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %451 = logical_or(%447, %448) /* ty=Tensor[(22, 4), bool] */;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %453 = reshape(%450, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %454 = reshape(%452, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %455 = @func_81(%453, %454) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %456 = %449.1;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(88), float32] */;
  %458 = cast(%456, dtype="float32") /* ty=Tensor[(88), float32] */;
  %459 = reshape(%457, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %460 = reshape(%458, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %461 = @func_81(%459, %460) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %462 = %455.0;
  %463 = %461.0;
  (%451, %456, %462, %463)
}

def @func_3002() -> Tensor[(11, 4, 2), bool] {
  @func_3000() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_579(%var_561: Tensor[(16, 10, 16), float64], %var_573: Tensor[(16, 10, 16), float64]) -> (Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) {
  %464 = cast(%var_561, dtype="float64") /* ty=Tensor[(16, 10, 16), float64] */;
  %465 = cast(meta[relay.Constant][8] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %466 = cast(meta[relay.Constant][8] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %467 = reshape(%465, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %468 = reshape(%466, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %469 = @func_81(%467, %468) /* ty=(Tensor[(11, 4, 2), float32],) */;
  %470 = cast(%var_573, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %471 = shape_of(%var_561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%var_561, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %475 = exp(%464) /* ty=Tensor[(16, 10, 16), float64] */;
  %476 = %469.0;
  %477 = greater_equal(%472, %473) /* ty=Tensor[(16, 10, 16), bool] */;
  %478 = %474.0;
  (%475, %476, meta[relay.Constant][8] /* ty=Tensor[(88), float32] */, %477, %478)
}

def @func_2107() -> (Tensor[(11, 4, 2), float32], Tensor[(88), float32]) {
  %479 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %480 = %479.0;
  %481 = @func_1963() /* ty=Tensor[(88), float32] */;
  (%480, %481)
}

def @func_1047() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) {
  %482 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
  %483 = cast(meta[relay.Constant][9] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %484 = reshape(%483, newshape=[2560, 1]) /* ty=Tensor[(2560, 1), float64] */;
  %485 = @func_824(%484) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) */;
  %486 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %487 = %482.1;
  %488 = %485.4;
  %489 = %486.2;
  (%487, %488, meta[relay.Constant][9] /* ty=Tensor[(2560), float64] */, %489)
}

def @func_4976(%var_4974: Tensor[(8, 8, 5), uint64], %var_4975: Tensor[(8, 8, 5), uint64]) -> (Tensor[(8, 8, 5), bool], Tensor[(12, 2, 12), float64], Tensor[(8, 8, 5), float32], Tensor[(11, 4, 2), float32]) {
  @func_4972(%var_4974, %var_4975) /* ty=(Tensor[(8, 8, 5), bool], Tensor[(12, 2, 12), float64], Tensor[(8, 8, 5), float32], Tensor[(11, 4, 2), float32]) */
}

def @func_5293() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) {
  @func_5291() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) */
}

def @func_1869() -> Tensor[(11, 4, 2), float32] {
  %491 = fn () -> Tensor[(11, 4, 2), float32] {
    %490 = @func_305() /* ty=(Tensor[(22, 4), bool], Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float32]) */;
    %490.2
  };
  %491() /* ty=Tensor[(11, 4, 2), float32] */
}

def @func_3752(%var_3738: Tensor[(13, 2, 15), float64]) -> (Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) {
  %492 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %493 = shape_of(%var_3738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_3738, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %496 = minimum(%494, %495) /* ty=Tensor[(13, 2, 15), float64] */;
  %497 = @func_3507() /* ty=Tensor[(11, 4, 2), bool] */;
  (%496, %497)
}

def @func_3507() -> Tensor[(11, 4, 2), bool] {
  @func_1594() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_3381() -> (Tensor[(11, 4, 2), bool],) {
  %498 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %499 = %498.1;
  (%499,)
}

def @func_2179() -> Tensor[(12, 2, 12), float64] {
  %500 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %501 = %500.1;
  %502 = cast(%501, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  asinh(%502) /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_583(%var_581: Tensor[(16, 10, 16), float64], %var_582: Tensor[(16, 10, 16), float64]) -> (Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) {
  @func_579(%var_581, %var_582) /* ty=(Tensor[(16, 10, 16), float64], Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(16, 10, 16), bool], Tensor[(11, 4, 2), float32]) */
}

def @func_5385() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  @func_5383() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */
}

def @func_6717(%var_6715: Tensor[(22, 4), float32]) -> (Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(22, 4), int32], Tensor[(12, 2, 12), float64], Tensor[(22, 4), bool]) {
  @func_6714(%var_6715) /* ty=(Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(22, 4), int32], Tensor[(12, 2, 12), float64], Tensor[(22, 4), bool]) */
}

def @func_4853() -> Tensor[(11, 4, 2), bool] {
  %503 = fn () -> Tensor[(11, 4, 2), bool] {
    @func_4473() /* ty=Tensor[(11, 4, 2), bool] */
  };
  %503() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_1851(%var_1849: Tensor[(16, 4, 7), uint32]) -> (Tensor[(16, 4, 7), bool],) {
  @func_1848(%var_1849) /* ty=(Tensor[(16, 4, 7), bool],) */
}

def @func_6750() -> (Tensor[(12, 2, 12), float64],) {
  %504 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
  (%504,)
}

def @func_1761() -> (Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) {
  %509 = fn () -> (Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) {
    %505 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
    %506 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
    %507 = %505.1;
    %508 = %506.0;
    (%507, %508)
  };
  %509() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */
}

def @func_4434() -> Tensor[(12, 2, 12), float64] {
  @func_4432() /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_5675() -> (Tensor[(11, 4, 2), float32],) {
  @func_5673() /* ty=(Tensor[(11, 4, 2), float32],) */
}

def @func_1965() -> Tensor[(88), float32] {
  @func_1963() /* ty=Tensor[(88), float32] */
}

def @func_1888(%var_1886: Tensor[(13, 12, 15), float64]) -> (Tensor[(13, 12, 15), float32],) {
  @func_1885(%var_1886) /* ty=(Tensor[(13, 12, 15), float32],) */
}

def @func_5908() -> (Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool]) {
  %526 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool]) {
    %510 = @func_5291() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) */;
    %511 = @func_4816() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
    %512 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
    %513 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
    %514 = %512.0;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %516 = %511.1;
    %517 = cast(%516, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %518 = reshape(%515, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %519 = reshape(%517, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %520 = @func_81(%518, %519) /* ty=(Tensor[(11, 4, 2), float32],) */;
    %521 = %510.0;
    %522 = @func_4432() /* ty=Tensor[(12, 2, 12), float64] */;
    %523 = %513.0;
    %524 = %520.0;
    %525 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
    (%521, %522, %516, %514, %523, %524, %525)
  };
  %526() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool]) */
}

def @func_6116(%var_6114: Tensor[(11, 4, 2), bool], %var_6115: Tensor[(165), int64]) -> (Tensor[(11, 4, 2), float32], Tensor[(10, 15, 11), int64], Tensor[(165), int64], Tensor[(1650), int64]) {
  %540 = fn (%var_6072: Tensor[(11, 4, 2), bool], %var_6096: Tensor[(165), int64]) -> (Tensor[(11, 4, 2), float32], Tensor[(10, 15, 11), int64], Tensor[(165), int64], Tensor[(1650), int64]) {
    %527 = @func_5225() /* ty=(Tensor[(11, 4, 2), bool],) */;
    %528 = %527.0;
    %529 = cast(%var_6072, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
    %531 = cast(%528, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %533 = cast(%var_6096, dtype="int64") /* ty=Tensor[(165), int64] */;
    %534 = cast(meta[relay.Constant][11] /* ty=Tensor[(1650), int64] */, dtype="int64") /* ty=Tensor[(1650), int64] */;
    %535 = reshape(%533, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), int64] */;
    %536 = reshape(%534, newshape=[10, 15, 11]) /* ty=Tensor[(10, 15, 11), int64] */;
    %537 = @func_5567(%535, %536) /* ty=(Tensor[(10, 15, 11), int64], Tensor[(11, 4, 2), bool]) */;
    %538 = power(%531, %532) /* ty=Tensor[(11, 4, 2), float32] */;
    %539 = %537.0;
    (%538, %539, %var_6096, meta[relay.Constant][11] /* ty=Tensor[(1650), int64] */)
  };
  %540(%var_6114, %var_6115) /* ty=(Tensor[(11, 4, 2), float32], Tensor[(10, 15, 11), int64], Tensor[(165), int64], Tensor[(1650), int64]) */
}

def @func_1008() -> Tensor[(11, 4, 2), bool] {
  @func_1006() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_5570(%var_5568: Tensor[(1, 15, 11), int64], %var_5569: Tensor[(10, 15, 11), int64]) -> (Tensor[(10, 15, 11), int64], Tensor[(11, 4, 2), bool]) {
  %546 = fn (%var_5548: Tensor[(1, 15, 11), int64], %var_5549: Tensor[(10, 15, 11), int64]) -> (Tensor[(10, 15, 11), int64], Tensor[(11, 4, 2), bool]) {
    %541 = cast(%var_5548, dtype="int64") /* ty=Tensor[(1, 15, 11), int64] */;
    %542 = cast(%var_5549, dtype="int64") /* ty=Tensor[(10, 15, 11), int64] */;
    %543 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
    %544 = add(%541, %542) /* ty=Tensor[(10, 15, 11), int64] */;
    %545 = %543.2;
    (%544, %545)
  };
  %546(%var_5568, %var_5569) /* ty=(Tensor[(10, 15, 11), int64], Tensor[(11, 4, 2), bool]) */
}

def @func_5587() -> Tensor[(88), float32] {
  %548 = fn () -> Tensor[(88), float32] {
    %547 = @func_1531() /* ty=(Tensor[(88), float32],) */;
    %547.0
  };
  %548() /* ty=Tensor[(88), float32] */
}

def @func_6812() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %552 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
    %549 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
    %550 = @func_3507() /* ty=Tensor[(11, 4, 2), bool] */;
    %551 = %549.0;
    (%550, %551)
  };
  %552() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */
}

def @func_3287(%var_3286: Tensor[(2560, 2), float64]) -> (Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) {
  %561 = fn (%var_3275: Tensor[(2560, 2), float64]) -> (Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) {
    %553 = cast(meta[relay.Constant][12] /* ty=Tensor[(2560, 1), float64] */, dtype="float64") /* ty=Tensor[(2560, 1), float64] */;
    %554 = reshape(%553, newshape=[2560, 1]) /* ty=Tensor[(2560, 1), float64] */;
    %555 = @func_824(%554) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(88), float64], Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 1), float32]) */;
    %556 = cast(meta[relay.Constant][12] /* ty=Tensor[(2560, 1), float64] */, dtype="uint16") /* ty=Tensor[(2560, 1), uint16] */;
    %557 = cast(%var_3275, dtype="uint16") /* ty=Tensor[(2560, 2), uint16] */;
    %558 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
    %559 = %555.4;
    %560 = bitwise_or(%556, %557) /* ty=Tensor[(2560, 2), uint16] */;
    (%558, %559, %560)
  };
  %561(%var_3286) /* ty=(Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(2560, 2), uint16]) */
}

def @func_3755(%var_3753: Tensor[(13, 2, 15), float64]) -> (Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) {
  @func_3752(%var_3753) /* ty=(Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) */
}

def @func_1401(%var_1391: Tensor[(2, 11, 11), uint64], %var_1392: Tensor[(2, 11, 11), uint64]) -> Tensor[(2, 11, 11), uint64] {
  %562 = cast(%var_1392, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %563 = shape_of(%var_1391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_1391, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%564, %565) /* ty=Tensor[(2, 11, 11), uint64] */
}

def @func_7112() -> (Tensor[(11, 4, 2), float32],) {
  %566 = @func_5291() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(2560), float64]) */;
  %567 = %566.1;
  (%567,)
}

def @func_6029() -> (Tensor[(88), float32],) {
  @func_6027() /* ty=(Tensor[(88), float32],) */
}

def @func_4353() -> Tensor[(11, 4, 2), bool] {
  %569 = fn () -> Tensor[(11, 4, 2), bool] {
    %568 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
    %568.2
  };
  %569() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_2291(%var_2229: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) {
  %570 = @func_534() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), float64]) */;
  %571 = @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */;
  %572 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %574 = sigmoid(%573) /* ty=Tensor[(11, 4, 2), float32] */;
  %575 = cast(%var_2229, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = logical_and(%577, %578) /* ty=Tensor[(11, 4, 2), bool] */;
  %580 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %581 = %580.1;
  %582 = cast(%581, dtype="int8") /* ty=Tensor[(88), int8] */;
  %583 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%579, dtype="int8") /* ty=Tensor[(11, 4, 2), int8] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %586 = %570.1;
  %587 = %571.2;
  %588 = bitwise_xor(%584, %585) /* ty=Tensor[(11, 4, 2), int8] */;
  (%586, %587, %588)
}

def @func_3596() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  %589 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %590 = @func_3507() /* ty=Tensor[(11, 4, 2), bool] */;
  %591 = %589.1;
  (%590, %591)
}

def @func_5763(%var_5762: Tensor[(2560), float64]) -> Tensor[(2560), uint64] {
  %598 = fn (%var_5746: Tensor[(2560), float64]) -> Tensor[(2560), uint64] {
    %592 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
    %593 = %592.2;
    %594 = cast(%var_5746, dtype="uint64") /* ty=Tensor[(2560), uint64] */;
    %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(1), int32] */;
    %596 = cast(%593, dtype="uint64") /* ty=Tensor[(2560), uint64] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?), uint64] */;
    left_shift(%596, %597) /* ty=Tensor[(2560), uint64] */
  };
  %598(%var_5762) /* ty=Tensor[(2560), uint64] */
}

def @func_333() -> Tensor[(11, 4, 2), float32] {
  %599 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %599.0
}

def @func_6205(%var_6204: Tensor[(420), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(88), float32], Tensor[(10, 7, 6), bool], Tensor[(88), float64]) {
  %613 = fn (%var_6161: Tensor[(420), float32]) -> (Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(88), float32], Tensor[(10, 7, 6), bool], Tensor[(88), float64]) {
    %600 = @func_1531() /* ty=(Tensor[(88), float32],) */;
    %601 = cast(%var_6161, dtype="float32") /* ty=Tensor[(420), float32] */;
    %602 = reshape(%601, newshape=[10, 7, 6]) /* ty=Tensor[(10, 7, 6), float32] */;
    %603 = @func_1794(%602) /* ty=Tensor[(10, 7, 6), float32] */;
    %604 = cast(%var_6161, dtype="bool") /* ty=Tensor[(420), bool] */;
    %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%603, dtype="bool") /* ty=Tensor[(10, 7, 6), bool] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %608 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
    %609 = @func_6012() /* ty=Tensor[(88), float32] */;
    %610 = %600.0;
    %611 = less(%606, %607) /* ty=Tensor[(10, 7, 6), bool] */;
    %612 = @func_686() /* ty=Tensor[(88), float64] */;
    (%608, %609, %610, %611, %612)
  };
  %613(%var_6204) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(88), float32], Tensor[(10, 7, 6), bool], Tensor[(88), float64]) */
}

def @func_6351() -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
  %617 = fn () -> (Tensor[(88), float32], Tensor[(12, 2, 12), float64]) {
    %614 = @func_5633() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
    %615 = %614.0;
    %616 = @func_4432() /* ty=Tensor[(12, 2, 12), float64] */;
    (%615, %616)
  };
  %617() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */
}

def @func_6910() -> (Tensor[(11, 4, 2), bool],) {
  %620 = fn () -> (Tensor[(11, 4, 2), bool],) {
    %618 = @func_3596() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
    %619 = %618.1;
    (%619,)
  };
  %620() /* ty=(Tensor[(11, 4, 2), bool],) */
}

def @func_2003(%var_2001: Tensor[(12, 7, 8), int64], %var_2002: Tensor[(12, 7, 8), int64]) -> Tensor[(12, 7, 8), float32] {
  @func_1999(%var_2001, %var_2002) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_3383() -> (Tensor[(11, 4, 2), bool],) {
  @func_3381() /* ty=(Tensor[(11, 4, 2), bool],) */
}

def @func_2634(%var_2632: Tensor[(11, 4, 2), float32]) -> Tensor[(11, 4, 2), bool] {
  @func_2631(%var_2632) /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_102() -> (Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) {
  %629 = fn () -> (Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) {
    %621 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 2, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %622 = cast(meta[relay.Constant][14] /* ty=Tensor[(22, 4), float32] */, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
    %623 = cast(meta[relay.Constant][14] /* ty=Tensor[(22, 4), float32] */, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
    %624 = reshape(%622, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %625 = reshape(%623, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %626 = @func_81(%624, %625) /* ty=(Tensor[(11, 4, 2), float32],) */;
    %627 = log10(%621) /* ty=Tensor[(12, 2, 12), float64] */;
    %628 = %626.0;
    (%627, %628, meta[relay.Constant][14] /* ty=Tensor[(22, 4), float32] */)
  };
  %629() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */
}

def @func_4173() -> (Tensor[(12, 2, 12), float64], Tensor[(2560), float64]) {
  %630 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
  %631 = @func_735() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(16, 10, 16), bool], Tensor[(2560), float64]) */;
  %632 = %630.0;
  %633 = %631.4;
  (%632, %633)
}

def @func_85(%var_83: Tensor[(11, 4, 2), float32], %var_84: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), float32],) {
  @func_81(%var_83, %var_84) /* ty=(Tensor[(11, 4, 2), float32],) */
}

def @func_4661(%var_4608: Tensor[(3, 3, 11), int32]) -> (Tensor[(3, 3, 11), float64], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) {
  %634 = cast(-1 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %635 = cast(%var_4608, dtype="bool") /* ty=Tensor[(3, 3, 11), bool] */;
  %636 = equal(%634, %635) /* ty=Tensor[(3, 3, 11), bool] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(3, 3, 11), float32] */;
  %638 = log(%637) /* ty=Tensor[(3, 3, 11), float32] */;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(3, 3, 11), float64] */;
  %640 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
  %641 = @func_3596() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
  %642 = @func_2107() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */;
  %643 = exp(%639) /* ty=Tensor[(3, 3, 11), float64] */;
  %644 = %640.0;
  %645 = %641.0;
  %646 = %642.0;
  (%643, %644, %645, %646)
}

def @func_3000() -> Tensor[(11, 4, 2), bool] {
  @func_1594() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_3183() -> Tensor[(12, 2, 12), float64] {
  @func_3181() /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_5195(%var_5194: Tensor[(75, 1), float32]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(12, 7, 8), float32], Tensor[(672), int64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(15, 5), float32], Tensor[(75, 1), float32], Tensor[(22, 4), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
  %679 = fn (%var_5162: Tensor[(75, 1), float32]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(12, 7, 8), float32], Tensor[(672), int64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(15, 5), float32], Tensor[(75, 1), float32], Tensor[(22, 4), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) {
    %647 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
    %648 = @func_4992() /* ty=(Tensor[(11, 4, 2), bool],) */;
    %649 = cast(meta[relay.Constant][15] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
    %650 = cast(meta[relay.Constant][15] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
    %651 = reshape(%649, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), int64] */;
    %652 = reshape(%650, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), int64] */;
    %653 = @func_4816() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */;
    %654 = @func_4516() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float64]) */;
    %655 = @func_4903() /* ty=Tensor[(12, 2, 12), float64] */;
    %656 = cast(%655, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %657 = reshape(%656, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), float64] */;
    %658 = @func_3906(%657) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(12, 2, 12), int8], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), int32], Tensor[(12, 2, 12), float32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), float32]) */;
    %659 = %658.9;
    %660 = cast(%659, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
    %661 = atan(%660) /* ty=Tensor[(12, 2, 12), float32] */;
    %662 = cast(%661, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %663 = cast(%var_5162, dtype="float32") /* ty=Tensor[(75, 1), float32] */;
    %664 = reshape(%663, newshape=[15, 5]) /* ty=Tensor[(15, 5), float32] */;
    %665 = @func_2155(%664) /* ty=(Tensor[(15, 5), float32],) */;
    %666 = @func_3358() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) */;
    %667 = @func_2107() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */;
    %668 = @func_1963() /* ty=Tensor[(88), float32] */;
    %669 = %647.0;
    %670 = %648.0;
    %671 = @func_1999(%651, %652) /* ty=Tensor[(12, 7, 8), float32] */;
    %672 = %653.1;
    %673 = %654.0;
    %674 = acos(%662) /* ty=Tensor[(12, 2, 12), float64] */;
    %675 = %665.0;
    %676 = %666.1;
    %677 = @func_4352() /* ty=Tensor[(11, 4, 2), bool] */;
    %678 = %667.1;
    (%668, %669, %655, %670, %671, meta[relay.Constant][15] /* ty=Tensor[(672), int64] */, %672, %673, %674, %675, %var_5162, %676, %677, %678)
  };
  %679(%var_5194) /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), bool], Tensor[(12, 7, 8), float32], Tensor[(672), int64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(12, 2, 12), float64], Tensor[(15, 5), float32], Tensor[(75, 1), float32], Tensor[(22, 4), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */
}

def @func_2876() -> (Tensor[(88), float64], Tensor[(11, 4, 2), bool]) {
  %684 = fn () -> (Tensor[(88), float64], Tensor[(11, 4, 2), bool]) {
    %680 = @func_686() /* ty=Tensor[(88), float64] */;
    %681 = cast(%680, dtype="float32") /* ty=Tensor[(88), float32] */;
    %682 = reshape(%681, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %683 = @func_2631(%682) /* ty=Tensor[(11, 4, 2), bool] */;
    (%680, %683)
  };
  %684() /* ty=(Tensor[(88), float64], Tensor[(11, 4, 2), bool]) */
}

def @func_6027() -> (Tensor[(88), float32],) {
  %685 = @func_4330() /* ty=Tensor[(88), float32] */;
  (%685,)
}

def @func_5491(%var_5489: Tensor[(13, 2, 15), float32], %var_5490: Tensor[(2560), float64]) -> (Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), int16], Tensor[(13, 2, 15), float64], Tensor[(13, 2, 15), float32], Tensor[(2560), float32], Tensor[(2560), float64]) {
  %722 = fn (%var_5434: Tensor[(13, 2, 15), float32], %var_5479: Tensor[(2560), float64]) -> (Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), int16], Tensor[(13, 2, 15), float64], Tensor[(13, 2, 15), float32], Tensor[(2560), float32], Tensor[(2560), float64]) {
    %686 = @func_4031() /* ty=Tensor[(11, 4, 2), float64] */;
    %687 = cast(%686, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %688 = cast(%686, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
    %689 = reshape(%687, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
    %690 = reshape(%688, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), bool] */;
    %691 = @func_1235(%689, %690) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), uint32]) */;
    %692 = cast(meta[relay.Constant][16] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
    %693 = reshape(%692, newshape=[13, 2, 15]) /* ty=Tensor[(13, 2, 15), float64] */;
    %694 = @func_3752(%693) /* ty=(Tensor[(13, 2, 15), float64], Tensor[(11, 4, 2), bool]) */;
    %695 = %694.0;
    %696 = cast(meta[relay.Constant][16] /* ty=Tensor[(390), float64] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
    %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %698 = cast(%695, dtype="uint16") /* ty=Tensor[(13, 2, 15), uint16] */;
    %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %700 = bitwise_or(%698, %699) /* ty=Tensor[(13, 2, 15), uint16] */;
    %701 = cast(%700, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
    %702 = exp(%701) /* ty=Tensor[(13, 2, 15), float64] */;
    %703 = cast(%702, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
    %704 = asinh(%703) /* ty=Tensor[(13, 2, 15), float32] */;
    %705 = cast(%var_5434, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
    %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %707 = cast(%704, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
    %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %709 = divide(%707, %708) /* ty=Tensor[(13, 2, 15), float64] */;
    %710 = cast(%704, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
    %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(%709, dtype="float64") /* ty=Tensor[(13, 2, 15), float64] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %714 = cast(%702, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
    %715 = cast(%var_5479, dtype="float64") /* ty=Tensor[(2560), float64] */;
    %716 = reshape(%715, newshape=[2560]) /* ty=Tensor[(2560), float64] */;
    %717 = @func_4275(%716) /* ty=(Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) */;
    %718 = %691.1;
    %719 = floor_mod(%712, %713) /* ty=Tensor[(13, 2, 15), float64] */;
    %720 = cosh(%714) /* ty=Tensor[(13, 2, 15), float32] */;
    %721 = %717.0;
    (%686, %718, %719, %720, %721, %var_5479)
  };
  %722(%var_5489, %var_5490) /* ty=(Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), int16], Tensor[(13, 2, 15), float64], Tensor[(13, 2, 15), float32], Tensor[(2560), float32], Tensor[(2560), float64]) */
}

def @func_7234() -> (Tensor[(11, 4, 2), bool], Tensor[(2560), float32], Tensor[(2560), float64]) {
  %728 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(2560), float32], Tensor[(2560), float64]) {
    %723 = cast(meta[relay.Constant][17] /* ty=Tensor[(2560), float64] */, dtype="float64") /* ty=Tensor[(2560), float64] */;
    %724 = reshape(%723, newshape=[2560]) /* ty=Tensor[(2560), float64] */;
    %725 = @func_4275(%724) /* ty=(Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) */;
    %726 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
    %727 = %725.2;
    (%726, %727, meta[relay.Constant][17] /* ty=Tensor[(2560), float64] */)
  };
  %728() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(2560), float32], Tensor[(2560), float64]) */
}

def @func_4752(%var_4751: Tensor[(12, 2, 12), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), bool]) {
  %743 = fn (%var_4720: Tensor[(12, 2, 12), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), bool]) {
    %729 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
    %730 = cast(%var_4720, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%729, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %734 = @func_3244() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */;
    %735 = cast(%var_4720, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %736 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %737 = cast(%729, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %739 = floor_divide(%732, %733) /* ty=Tensor[(12, 2, 12), float64] */;
    %740 = @func_4031() /* ty=Tensor[(11, 4, 2), float64] */;
    %741 = %734.0;
    %742 = greater_equal(%737, %738) /* ty=Tensor[(12, 2, 12), bool] */;
    (%739, %740, %741, %742)
  };
  %743(%var_4751) /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float64], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), bool]) */
}

def @func_2631(%var_2621: Tensor[(11, 4, 2), float32]) -> Tensor[(11, 4, 2), bool] {
  %744 = @func_1929() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) */;
  %745 = %744.0;
  %746 = cast(%var_2621, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%748, %749) /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_512() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) {
  @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */
}

def @func_1722(%var_1721: Tensor[(12, 2, 12), float64]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(12, 2, 12), bool]) {
  %762 = fn (%var_1700: Tensor[(12, 2, 12), float64]) -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(12, 2, 12), bool]) {
    %750 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
    %751 = @func_1531() /* ty=(Tensor[(88), float32],) */;
    %752 = @func_101() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), float32], Tensor[(22, 4), float32]) */;
    %753 = %752.0;
    %754 = cast(%var_1700, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(%753, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %758 = @func_1006() /* ty=Tensor[(11, 4, 2), bool] */;
    %759 = %750.0;
    %760 = %751.0;
    %761 = greater(%756, %757) /* ty=Tensor[(12, 2, 12), bool] */;
    (%758, %759, %760, %761)
  };
  %762(%var_1721) /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(88), float32], Tensor[(12, 2, 12), bool]) */
}

def @func_2896(%var_2894: Tensor[(3, 780), float64]) -> (Tensor[(88), float32], Tensor[(13, 12, 15), float32], Tensor[(3, 780), float64]) {
  @func_2893(%var_2894) /* ty=(Tensor[(88), float32], Tensor[(13, 12, 15), float32], Tensor[(3, 780), float64]) */
}

def @func_510() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) {
  %763 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %764 = %763.1;
  %765 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
  (%764, %765)
}

def @func_687() -> Tensor[(88), float64] {
  %769 = fn () -> Tensor[(88), float64] {
    %766 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
    %767 = %766.0;
    %768 = cast(%767, dtype="float64") /* ty=Tensor[(88), float64] */;
    log2(%768) /* ty=Tensor[(88), float64] */
  };
  %769() /* ty=Tensor[(88), float64] */
}

def @func_1999(%var_1972: Tensor[(12, 7, 8), int64], %var_1973: Tensor[(12, 7, 8), int64]) -> Tensor[(12, 7, 8), float32] {
  %770 = cast(%var_1973, dtype="int64") /* ty=Tensor[(12, 7, 8), int64] */;
  %771 = shape_of(%var_1972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%var_1972, dtype="int64") /* ty=Tensor[(12, 7, 8), int64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %774 = add(%772, %773) /* ty=Tensor[(12, 7, 8), int64] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  %776 = shape_of(%var_1973, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%var_1973, dtype="float32") /* ty=Tensor[(12, 7, 8), float32] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%777, %778) /* ty=Tensor[(12, 7, 8), float32] */
}

def @func_2294(%var_2292: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) {
  @func_2291(%var_2292) /* ty=(Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) */
}

def @func_2824() -> (Tensor[(88), float32], Tensor[(11, 4, 2), int16]) {
  %779 = @func_483() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), bool], Tensor[(22, 4), float32]) */;
  %780 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %781 = %779.0;
  %782 = %780.1;
  (%781, %782)
}

def @func_4474() -> Tensor[(11, 4, 2), bool] {
  %784 = fn () -> Tensor[(11, 4, 2), bool] {
    %783 = @func_3381() /* ty=(Tensor[(11, 4, 2), bool],) */;
    %783.0
  };
  %784() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_4517() -> (Tensor[(11, 4, 2), bool], Tensor[(88), float64]) {
  %787 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(88), float64]) {
    %785 = @func_4473() /* ty=Tensor[(11, 4, 2), bool] */;
    %786 = @func_686() /* ty=Tensor[(88), float64] */;
    (%785, %786)
  };
  %787() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(88), float64]) */
}

def @func_5654(%var_5649: int32, %var_5650: Tensor[(7, 12, 10), int32]) -> Tensor[(7, 12, 10), int32] {
  %788 = cast(%var_5649, dtype="int32") /* ty=int32 */;
  %789 = cast(%var_5650, dtype="int32") /* ty=Tensor[(7, 12, 10), int32] */;
  right_shift(%788, %789) /* ty=Tensor[(7, 12, 10), int32] */
}

def @func_6473() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32]) {
  %794 = fn () -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32]) {
    %790 = @func_2727() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), bool], Tensor[(88), float32]) */;
    %791 = %790.2;
    %792 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
    %793 = @func_6012() /* ty=Tensor[(88), float32] */;
    (%791, %792, %793)
  };
  %794() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32], Tensor[(88), float32]) */
}

def @func_81(%var_63: Tensor[(11, 4, 2), float32], %var_64: Tensor[(11, 4, 2), float32]) -> (Tensor[(11, 4, 2), float32],) {
  %795 = cast(%var_64, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %796 = shape_of(%var_63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%var_63, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %799 = floor_divide(%797, %798) /* ty=Tensor[(11, 4, 2), float32] */;
  (%799,)
}

def @func_5276() -> Tensor[(22, 4), float64] {
  %800 = @func_1929() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(22, 4), float64]) */;
  %800.1
}

def @func_1405(%var_1403: Tensor[(2, 11, 11), uint64], %var_1404: Tensor[(2, 11, 11), uint64]) -> Tensor[(2, 11, 11), uint64] {
  @func_1401(%var_1403, %var_1404) /* ty=Tensor[(2, 11, 11), uint64] */
}

def @func_6012() -> Tensor[(88), float32] {
  %801 = @func_1531() /* ty=(Tensor[(88), float32],) */;
  %801.0
}

def @func_1848(%var_1830: Tensor[(16, 4, 7), uint32]) -> (Tensor[(16, 4, 7), bool],) {
  %802 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 4, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 4, 7), bool] */;
  %803 = shape_of(%var_1830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%var_1830, dtype="bool") /* ty=Tensor[(16, 4, 7), bool] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %806 = less_equal(%804, %805) /* ty=Tensor[(16, 4, 7), bool] */;
  (%806,)
}

def @func_3111() -> Tensor[(11, 4, 2), bool] {
  @func_3109() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_6887(%var_6885: Tensor[(8, 8, 7), int16], %var_6886: Tensor[(8, 8, 7), int16]) -> (Tensor[(8, 8, 7), int16], Tensor[(11, 4, 2), int16], Tensor[(88), bool]) {
  @func_6883(%var_6885, %var_6886) /* ty=(Tensor[(8, 8, 7), int16], Tensor[(11, 4, 2), int16], Tensor[(88), bool]) */
}

def @main(%var_7237: Tensor[(7, 2, 16), float64], %var_7238: Tensor[(7, 2, 16), float64], %var_7250: Tensor[(7, 2, 16), float64]) -> (Tensor[(88), float32], Tensor[(7, 2, 16), uint64], Tensor[(7, 2, 16), float32]) {
  %807 = @func_6351() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %808 = cast(%var_7238, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %809 = shape_of(%var_7237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%var_7237, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %812 = floor_divide(%810, %811) /* ty=Tensor[(7, 2, 16), float64] */;
  %813 = cast(%var_7250, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %817 = logical_or(%815, %816) /* ty=Tensor[(7, 2, 16), bool] */;
  %818 = cast(%817, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %819 = shape_of(%var_7237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(%var_7237, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %822 = greater_equal(%820, %821) /* ty=Tensor[(7, 2, 16), bool] */;
  %823 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 2, 16), bool] */, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %824 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%822, dtype="uint64") /* ty=Tensor[(7, 2, 16), uint64] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %827 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 2, 16), bool] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %828 = %807.0;
  %829 = bitwise_xor(%825, %826) /* ty=Tensor[(7, 2, 16), uint64] */;
  %830 = log(%827) /* ty=Tensor[(7, 2, 16), float32] */;
  (%828, %829, %830)
}

def @func_7114() -> (Tensor[(11, 4, 2), float32],) {
  @func_7112() /* ty=(Tensor[(11, 4, 2), float32],) */
}

def @func_2968() -> Tensor[(11, 4, 2), float32] {
  %833 = fn () -> Tensor[(11, 4, 2), float32] {
    %831 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
    %832 = cast(%831, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    atan(%832) /* ty=Tensor[(11, 4, 2), float32] */
  };
  %833() /* ty=Tensor[(11, 4, 2), float32] */
}

def @func_2826() -> (Tensor[(88), float32], Tensor[(11, 4, 2), int16]) {
  @func_2824() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), int16]) */
}

def @func_2522() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), int16]) {
  %834 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %835 = @func_1594() /* ty=Tensor[(11, 4, 2), bool] */;
  %836 = %834.1;
  (%835, %836)
}

def @func_4278(%var_4276: Tensor[(2560), float64]) -> (Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) {
  @func_4275(%var_4276) /* ty=(Tensor[(2560), float32], Tensor[(11, 4, 2), float32], Tensor[(2560), float32]) */
}

def @func_6555() -> (Tensor[(6, 3, 5), int64], Tensor[(6, 3, 5), int8]) {
  %861 = fn () -> (Tensor[(6, 3, 5), int64], Tensor[(6, 3, 5), int8]) {
    %837 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
    %838 = log10(%837) /* ty=Tensor[(6, 3, 5), float64] */;
    %839 = cast(%838, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
    %840 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 3, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %841 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 3, 5), float64] */, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
    %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %843 = logical_and(%841, %842) /* ty=Tensor[(6, 3, 5), bool] */;
    %844 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 3, 5), float64] */, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
    %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
    %846 = cast(%843, dtype="int64") /* ty=Tensor[(6, 3, 5), int64] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %848 = cast(%838, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
    %849 = rsqrt(%848) /* ty=Tensor[(6, 3, 5), float64] */;
    %850 = cast(%849, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
    %851 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
    %852 = cast(%838, dtype="bool") /* ty=Tensor[(6, 3, 5), bool] */;
    %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %854 = equal(%852, %853) /* ty=Tensor[(6, 3, 5), bool] */;
    %855 = cast(%838, dtype="int8") /* ty=Tensor[(6, 3, 5), int8] */;
    %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %857 = cast(%854, dtype="int8") /* ty=Tensor[(6, 3, 5), int8] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %859 = bitwise_and(%846, %847) /* ty=Tensor[(6, 3, 5), int64] */;
    %860 = multiply(%857, %858) /* ty=Tensor[(6, 3, 5), int8] */;
    (%859, %860)
  };
  %861() /* ty=(Tensor[(6, 3, 5), int64], Tensor[(6, 3, 5), int8]) */
}

def @func_4204() -> (Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) {
  @func_4202() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool]) */
}

def @func_3245() -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) {
  %865 = fn () -> (Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) {
    %862 = @func_2824() /* ty=(Tensor[(88), float32], Tensor[(11, 4, 2), int16]) */;
    %863 = @func_333() /* ty=Tensor[(11, 4, 2), float32] */;
    %864 = %862.1;
    (%863, %864)
  };
  %865() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16]) */
}

def @func_405() -> (Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) {
  @func_403() /* ty=(Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(12, 2, 12), float64]) */
}

def @func_3906(%var_3824: Tensor[(12, 2, 12), float64]) -> (Tensor[(88), float32], Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(12, 2, 12), int8], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), int32], Tensor[(12, 2, 12), float32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), float32]) {
  %866 = @func_181() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(88), float32], Tensor[(12, 2, 12), float64]) */;
  %867 = @func_1760() /* ty=(Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
  %868 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %869 = %868.1;
  %870 = cast(%var_3824, dtype="int8") /* ty=Tensor[(12, 2, 12), int8] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%869, dtype="int8") /* ty=Tensor[(12, 2, 12), int8] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %874 = @func_1047() /* ty=(Tensor[(88), float32], Tensor[(12, 2, 12), float64], Tensor[(2560), float64], Tensor[(11, 4, 2), float32]) */;
  %875 = @func_1868() /* ty=Tensor[(11, 4, 2), float32] */;
  %876 = cast(%875, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %877 = reshape(%876, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %878 = @func_2291(%877) /* ty=(Tensor[(11, 4, 2), float64], Tensor[(12, 2, 12), float64], Tensor[(11, 4, 2), int8]) */;
  %879 = %878.1;
  %880 = cast(%var_3824, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %881 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%869, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %884 = less_equal(%882, %883) /* ty=Tensor[(12, 2, 12), bool] */;
  %885 = cast(%884, dtype="int32") /* ty=Tensor[(12, 2, 12), int32] */;
  %886 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%879, dtype="int32") /* ty=Tensor[(12, 2, 12), int32] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %889 = cast(%869, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %890 = sigmoid(%889) /* ty=Tensor[(12, 2, 12), float32] */;
  %891 = cast(%890, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %892 = @func_510() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), float32]) */;
  %893 = cast(%890, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %894 = log(%893) /* ty=Tensor[(12, 2, 12), float64] */;
  %895 = cast(%894, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %896 = cast(%890, dtype="float32") /* ty=Tensor[(12, 2, 12), float32] */;
  %897 = %866.1;
  %898 = %867.0;
  %899 = left_shift(%872, %873) /* ty=Tensor[(12, 2, 12), int8] */;
  %900 = %874.3;
  %901 = maximum(%887, %888) /* ty=Tensor[(12, 2, 12), int32] */;
  %902 = sinh(%891) /* ty=Tensor[(12, 2, 12), float32] */;
  %903 = %892.1;
  %904 = cosh(%895) /* ty=Tensor[(12, 2, 12), float64] */;
  %905 = cos(%896) /* ty=Tensor[(12, 2, 12), float32] */;
  (%897, %875, %898, %899, %900, %901, %902, %903, %904, %905)
}

def @func_3548() -> (Tensor[(12, 2, 12), float64], Tensor[(88), float64]) {
  %909 = fn () -> (Tensor[(12, 2, 12), float64], Tensor[(88), float64]) {
    %906 = @func_3358() /* ty=(Tensor[(11, 4, 2), bool], Tensor[(22, 4), bool], Tensor[(88), float64]) */;
    %907 = @func_3181() /* ty=Tensor[(12, 2, 12), float64] */;
    %908 = %906.2;
    (%907, %908)
  };
  %909() /* ty=(Tensor[(12, 2, 12), float64], Tensor[(88), float64]) */
}

def @func_2463(%var_2461: Tensor[(242), uint64]) -> (Tensor[(11, 4, 2), uint32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(88), float64], Tensor[(2, 11, 11), uint64], Tensor[(242), uint64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(22, 4), int32]) {
  @func_2460(%var_2461) /* ty=(Tensor[(11, 4, 2), uint32], Tensor[(11, 4, 2), float32], Tensor[(12, 2, 12), float64], Tensor[(88), float64], Tensor[(2, 11, 11), uint64], Tensor[(242), uint64], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(11, 4, 2), bool], Tensor[(22, 4), int32]) */
}

def @func_2181() -> Tensor[(12, 2, 12), float64] {
  @func_2179() /* ty=Tensor[(12, 2, 12), float64] */
}

def @func_1595() -> Tensor[(11, 4, 2), bool] {
  %911 = fn () -> Tensor[(11, 4, 2), bool] {
    %910 = @func_1382() /* ty=(Tensor[(11, 4, 2), float32], Tensor[(11, 4, 2), int16], Tensor[(11, 4, 2), bool]) */;
    %910.2
  };
  %911() /* ty=Tensor[(11, 4, 2), bool] */
}

def @func_4994() -> (Tensor[(11, 4, 2), bool],) {
  @func_4992() /* ty=(Tensor[(11, 4, 2), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen323/build/output.py", line 2540, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:07:08] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

