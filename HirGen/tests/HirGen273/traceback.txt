==========mod==========
#[version = "0.0.5"]
def @func_1492() -> Tensor[(12, 6, 6), float32] {
  %0 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %0.0
}

def @func_4437() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %1 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %2 = @func_1933() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %3 = %1.0;
  %4 = %2.0;
  (%3, %4)
}

def @func_461(%var_444: Tensor[(14, 6, 15), uint8]) -> (Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) {
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 15), uint8] */, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %6 = shape_of(%var_444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_444, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %11 = reshape(%9, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
  %12 = reshape(%10, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %13 = @func_424(%11, %12) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) */;
  %14 = cast(%var_444, dtype="float64") /* ty=Tensor[(14, 6, 15), float64] */;
  %15 = greater_equal(%7, %8) /* ty=Tensor[(14, 6, 15), bool] */;
  %16 = %13.0;
  %17 = sin(%14) /* ty=Tensor[(14, 6, 15), float64] */;
  (%15, %16, meta[relay.Constant][1] /* ty=Tensor[(120), float32] */, meta[relay.Constant][2] /* ty=Tensor[(975), float32] */, %17)
}

def @func_3897(%var_3888: Tensor[(5, 96), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) {
  %18 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %19 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
  %20 = %19.1;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %22 = cast(%var_3888, dtype="float32") /* ty=Tensor[(5, 96), float32] */;
  %23 = cast(%20, dtype="bool") /* ty=Tensor[(1, 96), bool] */;
  %24 = cast(%var_3888, dtype="bool") /* ty=Tensor[(5, 96), bool] */;
  %25 = %18.0;
  %26 = mod(%21, %22) /* ty=Tensor[(5, 96), float32] */;
  %27 = equal(%23, %24) /* ty=Tensor[(5, 96), bool] */;
  (%25, %26, %27)
}

def @func_3658() -> Tensor[(12, 6, 6), float32] {
  @func_3034() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2178() -> (Tensor[(12, 6, 6), float32],) {
  %28 = @func_1688() /* ty=Tensor[(12, 6, 6), float32] */;
  (%28,)
}

def @func_4082(%var_4073: Tensor[(4, 2, 7), float64], %var_4074: Tensor[(4, 2, 7), float64]) -> Tensor[(4, 2, 7), float64] {
  %29 = cast(%var_4074, dtype="float64") /* ty=Tensor[(4, 2, 7), float64] */;
  %30 = shape_of(%var_4073, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_4073, dtype="float64") /* ty=Tensor[(4, 2, 7), float64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%31, %32) /* ty=Tensor[(4, 2, 7), float64] */
}

def @func_4265(%var_4231: Tensor[(35), int8], %var_4256: Tensor[(768), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(7, 5, ?), bool], Tensor[(35), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(252), uint16]) {
  %33 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %34 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %35 = %34.0;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %37 = cast(%var_4231, dtype="int8") /* ty=Tensor[(35), int8] */;
  %38 = cast(%var_4231, dtype="int8") /* ty=Tensor[(35), int8] */;
  %39 = reshape(%37, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), int8] */;
  %40 = reshape(%38, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), int8] */;
  %41 = @func_906(%39, %40) /* ty=(Tensor[(7, 5, ?), bool], Tensor[(7, 5, ?), float32]) */;
  %42 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %43 = cast(%var_4256, dtype="float32") /* ty=Tensor[(768), float32] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %46 = reshape(%43, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %47 = reshape(%44, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %48 = reshape(%45, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %49 = @func_3849(%46, %47, %48) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(630, 2), bool], Tensor[(252), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float32], Tensor[(112), float64]) */;
  %50 = %33.2;
  %51 = acos(%36) /* ty=Tensor[(12, 6, 6), float64] */;
  %52 = %41.0;
  %53 = %42.0;
  %54 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  %55 = %49.5;
  (%50, %51, %52, %var_4231, %53, %54, %55, %var_4256, meta[relay.Constant][3] /* ty=Tensor[(252), uint16] */)
}

def @func_7128() -> (Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), float64], Tensor[(96), float32]) {
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %58 = reshape(%56, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %59 = reshape(%57, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %60 = @func_826(%58, %59) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %61 = @func_3658() /* ty=Tensor[(12, 6, 6), float32] */;
  %62 = %60.0;
  (%61, %62, meta[relay.Constant][4] /* ty=Tensor[(96), float32] */)
}

def @func_1933() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %63 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %64 = %63.1;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %66 = asinh(%65) /* ty=Tensor[(12, 6, 6), float64] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %68 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %69 = atanh(%67) /* ty=Tensor[(12, 6, 6), float32] */;
  (%68, %69)
}

def @func_1869(%var_1838: Tensor[(5, 195), float32], %var_1852: Tensor[(5, 195), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(5, 195), float64], Tensor[(5, 195), bool]) {
  %70 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %71 = cast(%var_1838, dtype="float32") /* ty=Tensor[(5, 195), float32] */;
  %72 = reshape(%71, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %73 = @func_220(%72) /* ty=Tensor[(13, 15, 5), float32] */;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(13, 15, 5), float64] */;
  %75 = shape_of(%var_1838, dtype="int32") /* ty=Tensor[(2), int32] */;
  %76 = cast(%var_1838, dtype="float64") /* ty=Tensor[(5, 195), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %78 = cast(%var_1852, dtype="bool") /* ty=Tensor[(5, 195), bool] */;
  %79 = shape_of(%var_1838, dtype="int32") /* ty=Tensor[(2), int32] */;
  %80 = cast(%var_1838, dtype="bool") /* ty=Tensor[(5, 195), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %82 = %70.0;
  %83 = floor_divide(%76, %77) /* ty=Tensor[(5, 195), float64] */;
  %84 = greater(%80, %81) /* ty=Tensor[(5, 195), bool] */;
  (%82, %83, %84)
}

def @func_5709(%var_5704: Tensor[(4, 12, 2), float64]) -> (Tensor[(12, 6, 6), float32], Tensor[(96), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), bool]) {
  %85 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %86 = @func_3326() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %87 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %89 = reshape(%87, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %90 = reshape(%88, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %91 = @func_826(%89, %90) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %92 = %91.0;
  %93 = cast(%var_5704, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = %85.0;
  %98 = @func_4821() /* ty=Tensor[(12, 6, 6), float32] */;
  %99 = %86.0;
  %100 = equal(%95, %96) /* ty=Tensor[(4, 12, 2), bool] */;
  (%97, meta[relay.Constant][5] /* ty=Tensor[(96), float32] */, %98, %99, %100)
}

def @func_5264() -> Tensor[(4, 12, 2), int32] {
  @func_4697() /* ty=Tensor[(4, 12, 2), int32] */
}

def @func_2249(%var_2240: Tensor[(16, 8, 6), float64], %var_2243: Tensor[(16, 8, 6), float64]) -> Tensor[(16, 8, 6), uint8] {
  %101 = cast(%var_2240, dtype="float64") /* ty=Tensor[(16, 8, 6), float64] */;
  %102 = exp(%101) /* ty=Tensor[(16, 8, 6), float64] */;
  %103 = cast(%var_2243, dtype="uint8") /* ty=Tensor[(16, 8, 6), uint8] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="uint8") /* ty=Tensor[(16, 8, 6), uint8] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%105, %106) /* ty=Tensor[(16, 8, 6), uint8] */
}

def @func_6140(%var_6092: Tensor[(6, 8, 11), float64], %var_6093: Tensor[(6, 8, 11), float64]) -> (Tensor[(6, 8, 11), float64], Tensor[(975), float32], Tensor[(4, 60), float64], Tensor[(13, 15, 5), float32], Tensor[(6, 8, 11), float32], Tensor[(4, 12, 2), int32]) {
  %107 = cast(%var_6093, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %108 = shape_of(%var_6092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%var_6092, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %111 = @func_5000() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64]) */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %113 = reshape(%112, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %114 = @func_220(%113) /* ty=Tensor[(13, 15, 5), float32] */;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %116 = cast(%var_6093, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %117 = floor_divide(%109, %110) /* ty=Tensor[(6, 8, 11), float64] */;
  %118 = %111.2;
  %119 = asinh(%115) /* ty=Tensor[(13, 15, 5), float32] */;
  %120 = acos(%116) /* ty=Tensor[(6, 8, 11), float32] */;
  %121 = @func_5264() /* ty=Tensor[(4, 12, 2), int32] */;
  (%117, meta[relay.Constant][6] /* ty=Tensor[(975), float32] */, %118, %119, %120, %121)
}

def @func_2733() -> (Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) {
  %122 = @func_2480() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %123 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %125 = reshape(%124, newshape=[7, 4, 4]) /* ty=Tensor[(7, 4, 4), float64] */;
  %126 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %127 = %122.5;
  %128 = %123.0;
  %129 = @func_659(%125) /* ty=Tensor[(7, 4, 4), float64] */;
  %130 = %126.0;
  (%127, %128, %129, meta[relay.Constant][7] /* ty=Tensor[(112), float64] */, %130)
}

def @func_1619() -> (Tensor[(12, 6, 6), float32],) {
  %131 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %132 = %131.0;
  (%132,)
}

def @func_6919() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(975), float32]) {
  %133 = cast(meta[relay.Constant][8] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %134 = reshape(%133, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %135 = @func_4495(%134) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 15, 5), float32], Tensor[(975), float32]) */;
  %136 = @func_3658() /* ty=Tensor[(12, 6, 6), float32] */;
  %137 = %135.0;
  (%136, %137, meta[relay.Constant][8] /* ty=Tensor[(975), float32] */)
}

def @func_5000() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64]) {
  %138 = @func_3227() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %139 = @func_3937() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %140 = @func_3736() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64]) */;
  %141 = %138.0;
  %142 = %139.0;
  %143 = %140.1;
  (%141, %142, %143)
}

def @func_1465() -> (Tensor[(12, 6, 6), float32],) {
  %144 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %145 = %144.0;
  (%145,)
}

def @func_2614(%var_2603: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) {
  %146 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %147 = @func_1826() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %148 = cast(%var_2603, dtype="float32") /* ty=Tensor[(27), float32] */;
  %149 = reshape(%148, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %150 = @func_1330(%149) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) */;
  %151 = %146.1;
  %152 = %147.0;
  %153 = %150.7;
  (%151, %152, %153, %var_2603)
}

def @func_3243() -> Tensor[(12, 6, 6), float32] {
  %154 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %154.0
}

def @func_4407(%var_4399: Tensor[(1, 5, 15), float32]) -> Tensor[(1, 5, 15), float32] {
  %155 = cast(%var_4399, dtype="float32") /* ty=Tensor[(1, 5, 15), float32] */;
  acosh(%155) /* ty=Tensor[(1, 5, 15), float32] */
}

def @func_5398() -> Tensor[(12, 6, 6), float32] {
  %156 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %156.0
}

def @func_1386() -> (Tensor[(12, 6, 6), float32],) {
  %157 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %158 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(12, 6, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %161 = divide(%159, %160) /* ty=Tensor[(12, 6, 6), float32] */;
  (%161,)
}

def @func_3313(%var_3299: Tensor[(11, 11, 7), int32]) -> (Tensor[(11, 11, 7), int32], Tensor[(11, 11, 7), float64]) {
  %162 = cast(%var_3299, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %163 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %166 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 11, 7), int32] */, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
  %167 = minimum(%164, %165) /* ty=Tensor[(11, 11, 7), int32] */;
  %168 = log(%166) /* ty=Tensor[(11, 11, 7), float64] */;
  (%167, %168)
}

def @func_3546(%var_3538: Tensor[(2, 3, 1), int64]) -> Tensor[(2, 3, 5), bool] {
  %169 = cast(%var_3538, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %170 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 3, 5), int64] */, dtype="bool") /* ty=Tensor[(2, 3, 5), bool] */;
  less(%169, %170) /* ty=Tensor[(2, 3, 5), bool] */
}

def @func_5994() -> Tensor[(12, 6, 6), float32] {
  @func_1688() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_3288(%var_3249: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), int8], Tensor[(4, 12, 2), uint8], Tensor[(4, 12, 2), float64]) {
  %171 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
  %172 = cast(%var_3249, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %176 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
  %177 = %176.2;
  %178 = cast(%177, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %179 = cast(%177, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %180 = reshape(%178, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %181 = reshape(%179, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %182 = @func_826(%180, %181) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %185 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%177, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = less_equal(%186, %187) /* ty=Tensor[(4, 12, 2), bool] */;
  %189 = cast(%188, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
  %190 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%177, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %193 = cast(%183, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %194 = add(%174, %175) /* ty=Tensor[(12, 6, 6), int8] */;
  %195 = right_shift(%191, %192) /* ty=Tensor[(4, 12, 2), uint8] */;
  %196 = cosh(%193) /* ty=Tensor[(4, 12, 2), float64] */;
  (%194, %195, %196)
}

def @func_3998() -> Tensor[(12, 6, 6), float32] {
  @func_1688() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_6578() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64]) {
  %197 = @func_5186() /* ty=Tensor[(12, 6, 6), float32] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %199 = reshape(%198, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), float64] */;
  %200 = @func_5471(%199) /* ty=(Tensor[(5, 96), float32], Tensor[(480), float32], Tensor[(6, 6, 12), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(6, 6, 12), bool]) */;
  %201 = %200.3;
  %202 = @func_1492() /* ty=Tensor[(12, 6, 6), float32] */;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %204 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%201, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %207 = floor_divide(%205, %206) /* ty=Tensor[(12, 6, 6), float64] */;
  (%197, %207)
}

def @func_5494() -> Tensor[(12, 6, 6), bool] {
  %208 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %209 = %208.2;
  %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 6, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%212, %213) /* ty=Tensor[(12, 6, 6), bool] */
}

def @func_6246() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %214 = @func_5398() /* ty=Tensor[(12, 6, 6), float32] */;
  %215 = @func_4021() /* ty=Tensor[(12, 6, 6), float32] */;
  (%214, %215)
}

def @main() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64]) {
  %216 = @func_6862() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(?, 3, 9), int64], Tensor[(27), float32]) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %219 = @func_1492() /* ty=Tensor[(12, 6, 6), float32] */;
  %220 = erf(%218) /* ty=Tensor[(12, 6, 6), float64] */;
  (%219, %220)
}

def @func_2164() -> Tensor[(12, 6, 6), float32] {
  %221 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %221.0
}

def @func_6777(%var_6733: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32], Tensor[(16, 2, 14), float32], Tensor[(12, 6, 6), float32], Tensor[(448), float64]) {
  %222 = @func_6246() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %223 = cast(%var_6733, dtype="float32") /* ty=Tensor[(27), float32] */;
  %224 = reshape(%223, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %225 = @func_2614(%224) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) */;
  %226 = cast(meta[relay.Constant][14] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %227 = reshape(%226, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %228 = @func_4663(%227) /* ty=(Tensor[(16, 2, 14), float32],) */;
  %229 = cast(meta[relay.Constant][14] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
  %230 = reshape(%229, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %231 = @func_4663(%230) /* ty=(Tensor[(16, 2, 14), float32],) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %234 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(448), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(448), float32] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %237 = minimum(%235, %236) /* ty=Tensor[(448), uint64] */;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(448), float64] */;
  %239 = %222.1;
  %240 = %225.2;
  %241 = %228.0;
  %242 = @func_4021() /* ty=Tensor[(12, 6, 6), float32] */;
  %243 = rsqrt(%238) /* ty=Tensor[(448), float64] */;
  (%239, %240, %var_6733, %241, %242, %243)
}

def @func_5293() -> Tensor[(12, 6, 6), float32] {
  @func_1688() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2065() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %244 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %245 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
  %246 = %244.0;
  (%245, %246)
}

def @func_5471(%var_5429: Tensor[(6, 6, 12), float64]) -> (Tensor[(5, 96), float32], Tensor[(480), float32], Tensor[(6, 6, 12), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(6, 6, 12), bool]) {
  %247 = cast(meta[relay.Constant][15] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %248 = reshape(%247, newshape=[5, 96]) /* ty=Tensor[(5, 96), float32] */;
  %249 = @func_3897(%248) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) */;
  %250 = cast(%var_5429, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
  %251 = log10(%250) /* ty=Tensor[(6, 6, 12), float64] */;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
  %253 = shape_of(%var_5429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_5429, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %256 = cast(%251, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
  %257 = cosh(%256) /* ty=Tensor[(6, 6, 12), float64] */;
  %258 = cast(%251, dtype="bool") /* ty=Tensor[(6, 6, 12), bool] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="bool") /* ty=Tensor[(6, 6, 12), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = %249.1;
  %263 = mod(%254, %255) /* ty=Tensor[(6, 6, 12), float64] */;
  %264 = @func_3998() /* ty=Tensor[(12, 6, 6), float32] */;
  %265 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
  %266 = equal(%260, %261) /* ty=Tensor[(6, 6, 12), bool] */;
  (%262, meta[relay.Constant][15] /* ty=Tensor[(480), float32] */, %263, %264, %265, %266)
}

def @func_1740(%var_1728: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), float32],) {
  %267 = @func_1492() /* ty=Tensor[(12, 6, 6), float32] */;
  %268 = cast(%var_1728, dtype="uint8") /* ty=Tensor[(12, 6, 6), uint8] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="uint8") /* ty=Tensor[(12, 6, 6), uint8] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %272 = minimum(%270, %271) /* ty=Tensor[(12, 6, 6), uint8] */;
  %273 = cast(%272, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %274 = log(%273) /* ty=Tensor[(12, 6, 6), float32] */;
  (%274,)
}

def @func_5878(%var_5875: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(27), float32]) {
  %275 = @func_2178() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %276 = cast(%var_5875, dtype="float32") /* ty=Tensor[(27), float32] */;
  %277 = reshape(%276, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %278 = @func_2614(%277) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) */;
  %279 = @func_4821() /* ty=Tensor[(12, 6, 6), float32] */;
  %280 = %275.0;
  %281 = %278.1;
  (%279, %280, %281, %var_5875)
}

def @func_424(%var_397: Tensor[(8, 3, 5), float32], %var_403: Tensor[(975), float32]) -> (Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) {
  %282 = cast(%var_403, dtype="float32") /* ty=Tensor[(975), float32] */;
  %283 = reshape(%282, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %284 = cast(%var_397, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %285 = asinh(%284) /* ty=Tensor[(8, 3, 5), float32] */;
  %286 = cast(%var_397, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %287 = sqrt(%286) /* ty=Tensor[(8, 3, 5), float32] */;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
  %289 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%285, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %292 = cast(%287, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
  %293 = @func_220(%283) /* ty=Tensor[(13, 15, 5), float32] */;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %295 = reshape(%294, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %296 = divide(%290, %291) /* ty=Tensor[(8, 3, 5), float64] */;
  %297 = sin(%292) /* ty=Tensor[(8, 3, 5), float64] */;
  %298 = @func_220(%295) /* ty=Tensor[(13, 15, 5), float32] */;
  (%293, %var_403, %296, %297, %298)
}

def @func_2510() -> (Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) {
  %299 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %300 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %301 = reshape(%299, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %302 = reshape(%300, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %303 = @func_826(%301, %302) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %306 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  %307 = sinh(%305) /* ty=Tensor[(4, 12, 2), float64] */;
  (%306, meta[relay.Constant][16] /* ty=Tensor[(1, 96), float32] */, %307)
}

def @func_6483() -> Tensor[(12, 6, 6), float32] {
  %308 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %308.0
}

def @func_6793(%var_6783: Tensor[(9, 14, 12), uint32]) -> (Tensor[(9, 14, 12), bool], Tensor[(16, 8, 6), uint8], Tensor[(768), float64]) {
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 14, 12), uint32] */, dtype="bool") /* ty=Tensor[(9, 14, 12), bool] */;
  %310 = shape_of(%var_6783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%var_6783, dtype="bool") /* ty=Tensor[(9, 14, 12), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %313 = cast(meta[relay.Constant][18] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %314 = cast(meta[relay.Constant][18] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %315 = reshape(%313, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), float64] */;
  %316 = reshape(%314, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), float64] */;
  %317 = greater_equal(%311, %312) /* ty=Tensor[(9, 14, 12), bool] */;
  %318 = @func_2249(%315, %316) /* ty=Tensor[(16, 8, 6), uint8] */;
  (%317, %318, meta[relay.Constant][18] /* ty=Tensor[(768), float64] */)
}

def @func_5765(%var_5756: Tensor[(5, 189), uint32]) -> (Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(5, 189), uint32], Tensor[(12, 6, 6), float32]) {
  %319 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %320 = cast(%var_5756, dtype="uint32") /* ty=Tensor[(5, 189), uint32] */;
  %321 = reshape(%320, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint32] */;
  %322 = %319.0;
  %323 = @func_2777(%321) /* ty=Tensor[(7, 9, 15), bool] */;
  %324 = @func_3243() /* ty=Tensor[(12, 6, 6), float32] */;
  (%322, %323, %var_5756, %324)
}

def @func_1647() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %325 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %326 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %327 = %325.0;
  (%326, %327)
}

def @func_4021() -> Tensor[(12, 6, 6), float32] {
  @func_3034() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_5938(%var_5892: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), int32], Tensor[(27), bool], Tensor[(12, 6, 6), int8]) {
  %328 = cast(%var_5892, dtype="float32") /* ty=Tensor[(27), float32] */;
  %329 = reshape(%328, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %330 = @func_5878(%329) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(27), float32]) */;
  %331 = cast(meta[relay.Constant][19] /* ty=Tensor[(27), float32] */, dtype="bool") /* ty=Tensor[(27), bool] */;
  %332 = shape_of(%var_5892, dtype="int32") /* ty=Tensor[(1), int32] */;
  %333 = cast(%var_5892, dtype="bool") /* ty=Tensor[(27), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?), bool] */;
  %335 = equal(%333, %334) /* ty=Tensor[(27), bool] */;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(27), float64] */;
  %337 = tan(%336) /* ty=Tensor[(27), float64] */;
  %338 = cast(%335, dtype="bool") /* ty=Tensor[(27), bool] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(1), int32] */;
  %340 = cast(%337, dtype="bool") /* ty=Tensor[(27), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?), bool] */;
  %342 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %343 = %342.0;
  %344 = @func_2733() /* ty=(Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) */;
  %345 = %344.1;
  %346 = cast(%345, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %347 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%343, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %350 = %330.0;
  %351 = @func_4697() /* ty=Tensor[(4, 12, 2), int32] */;
  %352 = logical_or(%340, %341) /* ty=Tensor[(27), bool] */;
  %353 = bitwise_and(%348, %349) /* ty=Tensor[(12, 6, 6), int8] */;
  (%350, %351, %352, %353)
}

def @func_6053(%var_6044: Tensor[(252), uint16], %var_6045: Tensor[(1260), bool]) -> (Tensor[(12, 6, 6), float32], Tensor[(240), float64], Tensor[(768), float32], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %354 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %355 = cast(meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %356 = cast(%var_6044, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %357 = cast(%var_6045, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %358 = reshape(%355, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float32] */;
  %359 = reshape(%356, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %360 = reshape(%357, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %361 = @func_2991(%358, %359, %360) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) */;
  %362 = @func_3452() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %363 = %354.0;
  %364 = %361.2;
  %365 = %362.0;
  %366 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
  (%363, %364, meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, %var_6044, %var_6045, %365, %366)
}

def @func_6862() -> (Tensor[(12, 6, 6), float64], Tensor[(?, 3, 9), int64], Tensor[(27), float32]) {
  %367 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %369 = cast(meta[relay.Constant][21] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
  %370 = reshape(%369, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
  %371 = @func_1330(%370) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) */;
  %372 = sigmoid(%368) /* ty=Tensor[(12, 6, 6), float64] */;
  %373 = %371.5;
  (%372, %373, meta[relay.Constant][21] /* ty=Tensor[(27), float32] */)
}

def @func_6650(%var_6637: Tensor[(2, 9, 14), float64]) -> (Tensor[(2, 9, 14), float64], Tensor[(5, 96), bool], Tensor[(480), float32]) {
  %374 = cast(%var_6637, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %375 = cast(meta[relay.Constant][22] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %376 = reshape(%375, newshape=[5, 96]) /* ty=Tensor[(5, 96), float32] */;
  %377 = @func_3897(%376) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) */;
  %378 = sqrt(%374) /* ty=Tensor[(2, 9, 14), float64] */;
  %379 = %377.2;
  (%378, %379, meta[relay.Constant][22] /* ty=Tensor[(480), float32] */)
}

def @func_3452() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %380 = @func_1933() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %381 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %382 = %380.0;
  (%381, %382)
}

def @func_6834() -> (Tensor[(12, 6, 6), float32],) {
  %383 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %384 = %383.0;
  (%384,)
}

def @func_1688() -> Tensor[(12, 6, 6), float32] {
  %385 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %385.0
}

def @func_5806(%var_5777: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), bool], Tensor[(12, 6, 6), bool]) {
  %386 = @func_2480() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %387 = %386.3;
  %388 = cast(%var_5777, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = cast(%387, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %393 = shape_of(%var_5777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_5777, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = equal(%390, %391) /* ty=Tensor[(12, 6, 6), bool] */;
  %397 = greater_equal(%394, %395) /* ty=Tensor[(12, 6, 6), bool] */;
  (%396, %397)
}

def @func_3703() -> Tensor[(12, 6, 6), float32] {
  %398 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %398.0
}

def @func_5842(%var_5819: int8) -> (Tensor[(14, 16, 4), int8], Tensor[(12, 6, 6), float32]) {
  %399 = cast(%var_5819, dtype="int8") /* ty=int8 */;
  %400 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 16, 4), int8] */;
  %401 = left_shift(%399, %400) /* ty=Tensor[(14, 16, 4), int8] */;
  %402 = @func_4752() /* ty=Tensor[(12, 6, 6), float32] */;
  (%401, %402)
}

def @func_2209() -> Tensor[(12, 6, 6), float32] {
  %403 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %403.0
}

def @func_2233() -> Tensor[(12, 6, 6), float32] {
  @func_1482() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_1400() -> Tensor[(12, 6, 6), float32] {
  %404 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %404.0
}

def @func_4626(%var_4622: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), bool],) {
  %405 = cast(%var_4622, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
  %406 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 16, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 16, 7), float64] */, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = equal(%407, %408) /* ty=Tensor[(3, 16, 7), bool] */;
  (%409,)
}

def @func_4550() -> (Tensor[(4, 12, 2), int32], Tensor[(12, 6, 6), float32]) {
  %410 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
  %411 = %410.2;
  %412 = cast(%411, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %413 = acos(%412) /* ty=Tensor[(4, 12, 2), float32] */;
  %414 = cast(%411, dtype="int32") /* ty=Tensor[(4, 12, 2), int32] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="int32") /* ty=Tensor[(4, 12, 2), int32] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %418 = multiply(%416, %417) /* ty=Tensor[(4, 12, 2), int32] */;
  %419 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
  (%418, %419)
}

def @func_220(%var_188: Tensor[(13, 15, 5), float32]) -> Tensor[(13, 15, 5), float32] {
  %420 = cast(%var_188, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  atanh(%420) /* ty=Tensor[(13, 15, 5), float32] */
}

def @func_3213() -> (Tensor[(12, 6, 6), float32],) {
  %421 = @func_2209() /* ty=Tensor[(12, 6, 6), float32] */;
  (%421,)
}

def @func_3937() -> (Tensor[(12, 6, 6), float32],) {
  %422 = @func_3034() /* ty=Tensor[(12, 6, 6), float32] */;
  (%422,)
}

def @func_2991(%var_2916: Tensor[(8, 16, 6), float32], %var_2986: Tensor[(252), uint16], %var_2987: Tensor[(1260), bool]) -> (Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) {
  %423 = cast(%var_2916, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %424 = asin(%423) /* ty=Tensor[(8, 16, 6), float32] */;
  %425 = cast(%var_2916, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %429 = right_shift(%427, %428) /* ty=Tensor[(8, 16, 6), uint32] */;
  %430 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 16, 6), uint32] */, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%429, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %434 = cast(meta[relay.Constant][26] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %435 = reshape(%434, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %436 = @func_2110(%435) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %437 = cast(meta[relay.Constant][26] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %438 = reshape(%437, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
  %439 = @func_1967(%438) /* ty=(Tensor[(4, 15, 4), float64],) */;
  %440 = @func_1933() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %441 = cast(%var_2986, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %442 = cast(%var_2987, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %443 = %440.0;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %445 = reshape(%441, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %446 = reshape(%442, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), bool] */;
  %447 = reshape(%444, newshape=[12, 6, 6]) /* ty=Tensor[(12, 6, 6), float32] */;
  %448 = @func_1607(%445, %446, %447) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(120), float32], Tensor[(14, 6, 15), float32], Tensor[(12, 6, 6), uint32]) */;
  %449 = cast(%429, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %450 = minimum(%432, %433) /* ty=Tensor[(8, 16, 6), float64] */;
  %451 = %436.1;
  %452 = %439.0;
  %453 = %448.2;
  %454 = acosh(%449) /* ty=Tensor[(8, 16, 6), float64] */;
  (%450, %451, meta[relay.Constant][26] /* ty=Tensor[(240), float64] */, %452, %443, %453, %var_2986, %var_2987, %454)
}

def @func_1482() -> Tensor[(12, 6, 6), float32] {
  @func_1400() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2110(%var_2106: Tensor[(240), float64]) -> (Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) {
  %455 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %456 = %455.0;
  %457 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 6, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = cast(%var_2106, dtype="float64") /* ty=Tensor[(240), float64] */;
  %462 = reshape(%461, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
  %463 = @func_1967(%462) /* ty=(Tensor[(4, 15, 4), float64],) */;
  %464 = not_equal(%459, %460) /* ty=Tensor[(12, 6, 6), bool] */;
  %465 = %463.0;
  (%464, %465, %var_2106)
}

def @func_2480() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) {
  %466 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %467 = @func_2178() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %468 = cast(meta[relay.Constant][28] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %469 = reshape(%468, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %470 = @func_2110(%469) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %471 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %472 = %466.0;
  %473 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
  %474 = %467.0;
  %475 = %470.1;
  (%471, %472, %473, %474, %475, meta[relay.Constant][28] /* ty=Tensor[(240), float64] */)
}

def @func_5091() -> float32 {
  %476 = @func_5071() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 10, 12), float32], float32, Tensor[(12, 6, 6), float32]) */;
  %476.3
}

def @func_4752() -> Tensor[(12, 6, 6), float32] {
  %477 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %477.0
}

def @func_1801() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %478 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %479 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %480 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  %481 = %478.0;
  %482 = %479.1;
  (%480, %481, %482)
}

def @func_5366(%var_5347: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), bool],) {
  %483 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %484 = %483.1;
  %485 = cast(%var_5347, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = less(%487, %488) /* ty=Tensor[(12, 6, 6), bool] */;
  (%489,)
}

def @func_5560(%var_5515: Tensor[(12, 6, 6), float32], %var_5529: Tensor[(945), uint32]) -> (Tensor[(12, 6, 6), bool], Tensor[(7, 9, 15), bool], Tensor[(945), uint32], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %490 = @func_2733() /* ty=(Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) */;
  %491 = %490.4;
  %492 = cast(%var_5515, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = cast(%var_5529, dtype="uint32") /* ty=Tensor[(945), uint32] */;
  %497 = reshape(%496, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint32] */;
  %498 = cast(meta[relay.Constant][29] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %499 = reshape(%498, newshape=[1, 5, 15]) /* ty=Tensor[(1, 5, 15), float32] */;
  %500 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %501 = %500.0;
  %502 = cast(%501, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %503 = log10(%502) /* ty=Tensor[(12, 6, 6), float64] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %505 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %506 = less_equal(%494, %495) /* ty=Tensor[(12, 6, 6), bool] */;
  %507 = @func_2777(%497) /* ty=Tensor[(7, 9, 15), bool] */;
  %508 = @func_4407(%499) /* ty=Tensor[(1, 5, 15), float32] */;
  %509 = sin(%504) /* ty=Tensor[(12, 6, 6), float32] */;
  %510 = %505.1;
  (%506, %507, %var_5529, %508, meta[relay.Constant][29] /* ty=Tensor[(75), float32] */, %509, %510)
}

def @func_1826() -> (Tensor[(12, 6, 6), float32],) {
  %511 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %512 = %511.0;
  (%512,)
}

def @func_5599() -> (Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(1, 945), uint32]) {
  %513 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 945), uint32] */, dtype="uint32") /* ty=Tensor[(1, 945), uint32] */;
  %514 = reshape(%513, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint32] */;
  %515 = @func_1688() /* ty=Tensor[(12, 6, 6), float32] */;
  %516 = @func_2777(%514) /* ty=Tensor[(7, 9, 15), bool] */;
  (%515, %516, meta[relay.Constant][30] /* ty=Tensor[(1, 945), uint32] */)
}

def @func_1541() -> Tensor[(12, 6, 6), float32] {
  %517 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %517.0
}

def @func_2408(%var_2392: float32) -> (Tensor[(12, 10, 12), float32],) {
  %518 = cast(%var_2392, dtype="float32") /* ty=float32 */;
  %519 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 12), float32] */;
  %520 = power(%518, %519) /* ty=Tensor[(12, 10, 12), float32] */;
  (%520,)
}

def @func_659(%var_649: Tensor[(7, 4, 4), float64]) -> Tensor[(7, 4, 4), float64] {
  %521 = cast(%var_649, dtype="float64") /* ty=Tensor[(7, 4, 4), float64] */;
  cosh(%521) /* ty=Tensor[(7, 4, 4), float64] */
}

def @func_3736() -> (Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64]) {
  %522 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
  %523 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %524 = %522.0;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %526 = reshape(%523, newshape=[4, 60]) /* ty=Tensor[(4, 60), float64] */;
  %527 = reshape(%525, newshape=[12, 6, 6]) /* ty=Tensor[(12, 6, 6), float32] */;
  %528 = @func_2853(%526, %527) /* ty=(Tensor[(4, 15, 4), float64], Tensor[(4, 60), float64], Tensor[(12, 6, 6), float64]) */;
  %529 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %530 = reshape(%529, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
  %531 = @func_1967(%530) /* ty=(Tensor[(4, 15, 4), float64],) */;
  %532 = %528.1;
  %533 = %531.0;
  (%524, %532, meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, %533)
}

def @func_6633() -> (Tensor[(14, 5, 16), uint64],) {
  %534 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 5, 16), uint64] */, dtype="uint64") /* ty=Tensor[(14, 5, 16), uint64] */;
  %535 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(14, 5, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 5, 16), uint64] */, dtype="uint64") /* ty=Tensor[(14, 5, 16), uint64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %538 = multiply(%536, %537) /* ty=Tensor[(14, 5, 16), uint64] */;
  (%538,)
}

def @func_7180() -> (Tensor[(12, 6, 6), float64],) {
  %539 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %541 = rsqrt(%540) /* ty=Tensor[(12, 6, 6), float64] */;
  (%541,)
}

def @func_2129() -> (Tensor[(12, 6, 6), float32],) {
  %542 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  (%542,)
}

def @func_744(%var_730: Tensor[(5, 16, 9), uint32], %var_731: Tensor[(5, 16, 9), uint32]) -> (Tensor[(5, 16, 9), uint32], Tensor[(14, 6, 15), float64], Tensor[(1260), uint8]) {
  %543 = cast(%var_731, dtype="uint32") /* ty=Tensor[(5, 16, 9), uint32] */;
  %544 = shape_of(%var_730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_730, dtype="uint32") /* ty=Tensor[(5, 16, 9), uint32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %547 = cast(meta[relay.Constant][35] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
  %548 = reshape(%547, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
  %549 = @func_461(%548) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
  %550 = right_shift(%545, %546) /* ty=Tensor[(5, 16, 9), uint32] */;
  %551 = %549.4;
  (%550, %551, meta[relay.Constant][35] /* ty=Tensor[(1260), uint8] */)
}

def @func_2777(%var_2768: Tensor[(7, 9, 15), uint32]) -> Tensor[(7, 9, 15), bool] {
  %552 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 9, 15), uint32] */, dtype="bool") /* ty=Tensor[(7, 9, 15), bool] */;
  %553 = shape_of(%var_2768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%var_2768, dtype="bool") /* ty=Tensor[(7, 9, 15), bool] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%554, %555) /* ty=Tensor[(7, 9, 15), bool] */
}

def @func_532(%var_476: Tensor[(6, 3, 14), uint16], %var_477: Tensor[(6, 3, 14), uint16], %var_502: Tensor[(120), float32]) -> (Tensor[(6, 3, 14), uint64], Tensor[(8, 3, 5), float64], Tensor[(120), float32], Tensor[(325, 3), float32], Tensor[(6, 3, 14), float64], Tensor[(120), float32], Tensor[(1260), uint8], Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32]) {
  %556 = cast(%var_477, dtype="uint16") /* ty=Tensor[(6, 3, 14), uint16] */;
  %557 = shape_of(%var_476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_476, dtype="uint16") /* ty=Tensor[(6, 3, 14), uint16] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %560 = logical_xor(%558, %559) /* ty=Tensor[(6, 3, 14), uint16] */;
  %561 = cast(%560, dtype="uint64") /* ty=Tensor[(6, 3, 14), uint64] */;
  %562 = shape_of(%var_476, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%var_476, dtype="uint64") /* ty=Tensor[(6, 3, 14), uint64] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %565 = cast(%var_502, dtype="float32") /* ty=Tensor[(120), float32] */;
  %566 = cast(meta[relay.Constant][37] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
  %567 = reshape(%565, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
  %568 = reshape(%566, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %569 = @func_424(%567, %568) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) */;
  %570 = cast(%560, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
  %571 = log10(%570) /* ty=Tensor[(6, 3, 14), float64] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
  %573 = cast(meta[relay.Constant][38] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
  %574 = reshape(%573, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
  %575 = @func_461(%574) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
  %576 = cast(meta[relay.Constant][38] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
  %577 = reshape(%576, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
  %578 = @func_461(%577) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
  %579 = cast(meta[relay.Constant][38] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
  %580 = reshape(%579, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
  %581 = @func_461(%580) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
  %582 = bitwise_and(%563, %564) /* ty=Tensor[(6, 3, 14), uint64] */;
  %583 = %569.3;
  %584 = atanh(%572) /* ty=Tensor[(6, 3, 14), float64] */;
  %585 = %575.2;
  %586 = %578.0;
  %587 = %581.1;
  (%582, %583, %var_502, meta[relay.Constant][37] /* ty=Tensor[(325, 3), float32] */, %584, %585, meta[relay.Constant][38] /* ty=Tensor[(1260), uint8] */, %586, %587)
}

def @func_4528() -> Tensor[(12, 6, 6), float32] {
  %588 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %588.0
}

def @func_5966() -> Tensor[(1, 945), uint32] {
  %589 = @func_5599() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(1, 945), uint32]) */;
  %589.2
}

def @func_4821() -> Tensor[(12, 6, 6), float32] {
  %590 = @func_3326() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %590.0
}

def @func_1967(%var_1958: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), float64],) {
  %591 = cast(%var_1958, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %592 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(4, 15, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %595 = floor_mod(%593, %594) /* ty=Tensor[(4, 15, 4), float64] */;
  (%595,)
}

def @func_7057(%var_7037: Tensor[(75), float32], %var_7043: Tensor[(432), float32], %var_7044: Tensor[(945), uint32]) -> (Tensor[(240), float64], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(7, 9, 15), bool], Tensor[(432), float32], Tensor[(945), uint32], Tensor[(12, 6, 6), float32]) {
  %596 = @func_2480() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %597 = cast(%var_7037, dtype="float32") /* ty=Tensor[(75), float32] */;
  %598 = reshape(%597, newshape=[1, 5, 15]) /* ty=Tensor[(1, 5, 15), float32] */;
  %599 = cast(%var_7043, dtype="float32") /* ty=Tensor[(432), float32] */;
  %600 = cast(%var_7044, dtype="uint32") /* ty=Tensor[(945), uint32] */;
  %601 = reshape(%599, newshape=[12, 6, 6]) /* ty=Tensor[(12, 6, 6), float32] */;
  %602 = reshape(%600, newshape=[945]) /* ty=Tensor[(945), uint32] */;
  %603 = @func_5560(%601, %602) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(7, 9, 15), bool], Tensor[(945), uint32], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %604 = @func_6919() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(975), float32]) */;
  %605 = %596.5;
  %606 = @func_4407(%598) /* ty=Tensor[(1, 5, 15), float32] */;
  %607 = %603.1;
  %608 = %604.0;
  (%605, %606, %var_7037, %607, %var_7043, %var_7044, %608)
}

def @func_3034() -> Tensor[(12, 6, 6), float32] {
  %609 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
  %609.0
}

def @func_4495(%var_4482: Tensor[(975), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(13, 15, 5), float32], Tensor[(975), float32]) {
  %610 = cast(%var_4482, dtype="float32") /* ty=Tensor[(975), float32] */;
  %611 = reshape(%610, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %612 = @func_3998() /* ty=Tensor[(12, 6, 6), float32] */;
  %613 = @func_220(%611) /* ty=Tensor[(13, 15, 5), float32] */;
  (%612, %613, %var_4482)
}

def @func_2318() -> (Tensor[(12, 6, 6), float32],) {
  %614 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
  (%614,)
}

def @func_3326() -> (Tensor[(12, 6, 6), float32],) {
  %615 = @func_3227() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %616 = %615.0;
  (%616,)
}

def @func_6431() -> Tensor[(12, 6, 6), float32] {
  @func_1400() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_1607(%var_1575: Tensor[(252), uint16], %var_1579: Tensor[(14, 6, 15), bool], %var_1601: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(120), float32], Tensor[(14, 6, 15), float32], Tensor[(12, 6, 6), uint32]) {
  %617 = cast(meta[relay.Constant][40] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %618 = reshape(%617, newshape=[7, 4, 4]) /* ty=Tensor[(7, 4, 4), float64] */;
  %619 = cast(%var_1575, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %620 = cast(%var_1575, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %621 = cast(meta[relay.Constant][41] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %622 = reshape(%619, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint16] */;
  %623 = reshape(%620, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint16] */;
  %624 = reshape(%621, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %625 = @func_532(%622, %623, %624) /* ty=(Tensor[(6, 3, 14), uint64], Tensor[(8, 3, 5), float64], Tensor[(120), float32], Tensor[(325, 3), float32], Tensor[(6, 3, 14), float64], Tensor[(120), float32], Tensor[(1260), uint8], Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32]) */;
  %626 = %625.7;
  %627 = cast(%var_1579, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %631 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %633 = cosh(%632) /* ty=Tensor[(12, 6, 6), float32] */;
  %634 = cast(%var_1601, dtype="uint32") /* ty=Tensor[(12, 6, 6), uint32] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="uint32") /* ty=Tensor[(12, 6, 6), uint32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %638 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %639 = @func_659(%618) /* ty=Tensor[(7, 4, 4), float64] */;
  %640 = divide(%629, %630) /* ty=Tensor[(14, 6, 15), float32] */;
  %641 = left_shift(%636, %637) /* ty=Tensor[(12, 6, 6), uint32] */;
  (%638, %639, meta[relay.Constant][40] /* ty=Tensor[(112), float64] */, %var_1575, meta[relay.Constant][41] /* ty=Tensor[(120), float32] */, %640, %641)
}

def @func_4314(%var_4293: Tensor[(1, 5, 11), float64], %var_4294: Tensor[(15, 5, 11), float64]) -> (Tensor[(15, 5, 11), bool], Tensor[(12, 6, 6), float32]) {
  %642 = cast(%var_4293, dtype="bool") /* ty=Tensor[(1, 5, 11), bool] */;
  %643 = cast(%var_4294, dtype="bool") /* ty=Tensor[(15, 5, 11), bool] */;
  %644 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %645 = not_equal(%642, %643) /* ty=Tensor[(15, 5, 11), bool] */;
  %646 = %644.1;
  (%645, %646)
}

def @func_4697() -> Tensor[(4, 12, 2), int32] {
  %647 = @func_4550() /* ty=(Tensor[(4, 12, 2), int32], Tensor[(12, 6, 6), float32]) */;
  %647.0
}

def @func_906(%var_894: Tensor[(7, 5, 1), int8], %var_895: Tensor[(7, 5, 1), int8]) -> (Tensor[(7, 5, ?), bool], Tensor[(7, 5, ?), float32]) {
  %648 = cast(%var_894, dtype="bool") /* ty=Tensor[(7, 5, 1), bool] */;
  %649 = shape_of(%var_895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%var_895, dtype="bool") /* ty=Tensor[(7, 5, 1), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = cast(%var_895, dtype="int8") /* ty=Tensor[(7, 5, 1), int8] */;
  %653 = shape_of(%var_894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_894, dtype="int8") /* ty=Tensor[(7, 5, 1), int8] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %656 = logical_xor(%654, %655) /* ty=Tensor[(7, 5, ?), int8] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(7, 5, ?), float32] */;
  %658 = logical_and(%650, %651) /* ty=Tensor[(7, 5, ?), bool] */;
  %659 = atanh(%657) /* ty=Tensor[(7, 5, ?), float32] */;
  (%658, %659)
}

def @func_2853(%var_2836: Tensor[(4, 60), float64], %var_2841: Tensor[(12, 6, 6), float32]) -> (Tensor[(4, 15, 4), float64], Tensor[(4, 60), float64], Tensor[(12, 6, 6), float64]) {
  %660 = cast(%var_2836, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %661 = reshape(%660, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
  %662 = @func_1967(%661) /* ty=(Tensor[(4, 15, 4), float64],) */;
  %663 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %664 = %663.1;
  %665 = cast(%var_2841, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %669 = %662.0;
  %670 = power(%667, %668) /* ty=Tensor[(12, 6, 6), float64] */;
  (%669, %var_2836, %670)
}

def @func_5186() -> Tensor[(12, 6, 6), float32] {
  %671 = @func_1826() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %671.0
}

def @func_3849(%var_3764: Tensor[(768), float32], %var_3765: Tensor[(252), uint16], %var_3781: Tensor[(252), uint16]) -> (Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(630, 2), bool], Tensor[(252), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float32], Tensor[(112), float64]) {
  %672 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %673 = cast(%var_3781, dtype="int32") /* ty=Tensor[(252), int32] */;
  %674 = shape_of(%var_3765, dtype="int32") /* ty=Tensor[(1), int32] */;
  %675 = cast(%var_3765, dtype="int32") /* ty=Tensor[(252), int32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?), int32] */;
  %677 = bitwise_xor(%675, %676) /* ty=Tensor[(252), int32] */;
  %678 = cast(%677, dtype="int8") /* ty=Tensor[(252), int8] */;
  %679 = shape_of(%var_3781, dtype="int32") /* ty=Tensor[(1), int32] */;
  %680 = cast(%var_3781, dtype="int8") /* ty=Tensor[(252), int8] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?), int8] */;
  %682 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %683 = cast(%var_3764, dtype="float32") /* ty=Tensor[(768), float32] */;
  %684 = cast(%var_3765, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %685 = cast(meta[relay.Constant][42] /* ty=Tensor[(630, 2), bool] */, dtype="bool") /* ty=Tensor[(630, 2), bool] */;
  %686 = reshape(%683, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float32] */;
  %687 = reshape(%684, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %688 = reshape(%685, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %689 = @func_2991(%686, %687, %688) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) */;
  %690 = %689.1;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %692 = @func_2733() /* ty=(Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) */;
  %693 = %672.0;
  %694 = left_shift(%680, %681) /* ty=Tensor[(252), int8] */;
  %695 = @func_3703() /* ty=Tensor[(12, 6, 6), float32] */;
  %696 = %682.0;
  %697 = tan(%691) /* ty=Tensor[(4, 15, 4), float32] */;
  %698 = %692.3;
  (%693, %var_3764, meta[relay.Constant][42] /* ty=Tensor[(630, 2), bool] */, %694, %695, %696, %697, %698)
}

def @func_5071() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 10, 12), float32], float32, Tensor[(12, 6, 6), float32]) {
  %699 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %700 = %699.0;
  %701 = @func_3452() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %702 = %701.1;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %704 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%700, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %707 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %708 = cast(-4.45093f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %709 = reshape(%708, newshape=[]) /* ty=float32 */;
  %710 = @func_2408(%709) /* ty=(Tensor[(12, 10, 12), float32],) */;
  %711 = mod(%705, %706) /* ty=Tensor[(12, 6, 6), float32] */;
  %712 = %707.2;
  %713 = %710.0;
  %714 = @func_3703() /* ty=Tensor[(12, 6, 6), float32] */;
  (%711, %712, %713, -4.45093f /* ty=float32 */, %714)
}

def @func_1330(%var_1257: Tensor[(1, 3, 9), float32]) -> (Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) {
  %715 = cast(meta[relay.Constant][43] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %716 = cast(meta[relay.Constant][43] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %717 = reshape(%715, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %718 = reshape(%716, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %719 = @func_826(%717, %718) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %720 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 20), float32] */, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
  %721 = cast(meta[relay.Constant][45] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %722 = reshape(%720, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
  %723 = reshape(%721, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %724 = @func_424(%722, %723) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) */;
  %725 = cast(%var_1257, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  %726 = sigmoid(%725) /* ty=Tensor[(1, 3, 9), float64] */;
  %727 = cast(%var_1257, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %728 = rsqrt(%727) /* ty=Tensor[(1, 3, 9), float32] */;
  %729 = cast(%728, dtype="int64") /* ty=Tensor[(1, 3, 9), int64] */;
  %730 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%726, dtype="int64") /* ty=Tensor[(1, 3, 9), int64] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %733 = cast(%728, dtype="uint16") /* ty=Tensor[(1, 3, 9), uint16] */;
  %734 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%726, dtype="uint16") /* ty=Tensor[(1, 3, 9), uint16] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %737 = logical_xor(%735, %736) /* ty=Tensor[(?, 3, 9), uint16] */;
  %738 = cast(%726, dtype="bool") /* ty=Tensor[(1, 3, 9), bool] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%737, dtype="bool") /* ty=Tensor[(?, 3, 9), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = greater_equal(%740, %741) /* ty=Tensor[(?, 3, 9), bool] */;
  %743 = cast(%742, dtype="float64") /* ty=Tensor[(?, 3, 9), float64] */;
  %744 = cast(%728, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %745 = atanh(%744) /* ty=Tensor[(1, 3, 9), float32] */;
  %746 = cast(%726, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %750 = %719.0;
  %751 = %724.0;
  %752 = bitwise_and(%731, %732) /* ty=Tensor[(?, 3, 9), int64] */;
  %753 = asinh(%743) /* ty=Tensor[(?, 3, 9), float64] */;
  %754 = floor_mod(%748, %749) /* ty=Tensor[(?, 3, 9), float64] */;
  (%750, meta[relay.Constant][43] /* ty=Tensor[(96), float32] */, %751, meta[relay.Constant][44] /* ty=Tensor[(6, 20), float32] */, meta[relay.Constant][45] /* ty=Tensor[(975), float32] */, %752, %753, %754)
}

def @func_6514(%var_6493: Tensor[(14, 16, 1), float32], %var_6508: Tensor[(4, 12, 2), int32]) -> (Tensor[(14, 16, 1), float32], Tensor[(4, 12, 2), float32]) {
  %755 = cast(%var_6493, dtype="float32") /* ty=Tensor[(14, 16, 1), float32] */;
  %756 = @func_4697() /* ty=Tensor[(4, 12, 2), int32] */;
  %757 = cast(%var_6508, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %761 = sigmoid(%755) /* ty=Tensor[(14, 16, 1), float32] */;
  %762 = mod(%759, %760) /* ty=Tensor[(4, 12, 2), float32] */;
  (%761, %762)
}

def @func_6969() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %763 = @func_6483() /* ty=Tensor[(12, 6, 6), float32] */;
  %764 = @func_4752() /* ty=Tensor[(12, 6, 6), float32] */;
  (%763, %764)
}

def @func_4663(%var_4649: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), float32],) {
  %765 = cast(meta[relay.Constant][46] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %766 = shape_of(%var_4649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%var_4649, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %769 = floor_divide(%767, %768) /* ty=Tensor[(16, 2, 14), float32] */;
  (%769,)
}

def @func_3227() -> (Tensor[(12, 6, 6), float32],) {
  %770 = @func_1688() /* ty=Tensor[(12, 6, 6), float32] */;
  (%770,)
}

def @func_4864() -> (Tensor[(12, 6, 6), float32],) {
  %771 = @func_1826() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %772 = %771.0;
  (%772,)
}

def @func_6686() -> Tensor[(4, 12, 2), int32] {
  @func_4697() /* ty=Tensor[(4, 12, 2), int32] */
}

def @func_7100() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %773 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %774 = @func_2209() /* ty=Tensor[(12, 6, 6), float32] */;
  %775 = %773.0;
  (%774, %775)
}

def @func_826(%var_798: Tensor[(4, 12, 2), float32], %var_799: Tensor[(4, 12, 2), float32]) -> (Tensor[(4, 12, 2), float64],) {
  %776 = cast(%var_799, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %777 = shape_of(%var_798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%var_798, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %780 = floor_mod(%778, %779) /* ty=Tensor[(4, 12, 2), float32] */;
  %781 = cast(%var_798, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%780, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %785 = add(%783, %784) /* ty=Tensor[(4, 12, 2), float64] */;
  (%785,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4697() -> Tensor[(4, 12, 2), int32] {
  %0 = @func_4550() /* ty=(Tensor[(4, 12, 2), int32], Tensor[(12, 6, 6), float32]) */;
  %0.0
}

def @func_5560(%var_5515: Tensor[(12, 6, 6), float32], %var_5529: Tensor[(945), uint32]) -> (Tensor[(12, 6, 6), bool], Tensor[(7, 9, 15), bool], Tensor[(945), uint32], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %1 = @func_2733() /* ty=(Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) */;
  %2 = %1.4;
  %3 = cast(%var_5515, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = cast(%var_5529, dtype="uint32") /* ty=Tensor[(945), uint32] */;
  %8 = reshape(%7, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %10 = reshape(%9, newshape=[1, 5, 15]) /* ty=Tensor[(1, 5, 15), float32] */;
  %11 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %14 = log10(%13) /* ty=Tensor[(12, 6, 6), float64] */;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %16 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %17 = less_equal(%5, %6) /* ty=Tensor[(12, 6, 6), bool] */;
  %18 = @func_2777(%8) /* ty=Tensor[(7, 9, 15), bool] */;
  %19 = @func_4407(%10) /* ty=Tensor[(1, 5, 15), float32] */;
  %20 = sin(%15) /* ty=Tensor[(12, 6, 6), float32] */;
  %21 = %16.1;
  (%17, %18, %var_5529, %19, meta[relay.Constant][0] /* ty=Tensor[(75), float32] */, %20, %21)
}

def @func_2411(%var_2409: float32) -> (Tensor[(12, 10, 12), float32],) {
  @func_2408(%var_2409) /* ty=(Tensor[(12, 10, 12), float32],) */
}

def @func_2480() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) {
  %22 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %23 = @func_2178() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %25 = reshape(%24, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %26 = @func_2110(%25) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %27 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %28 = %22.0;
  %29 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
  %30 = %23.0;
  %31 = %26.1;
  (%27, %28, %29, %30, %31, meta[relay.Constant][1] /* ty=Tensor[(240), float64] */)
}

def @func_6921() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(975), float32]) {
  @func_6919() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(975), float32]) */
}

def @func_1330(%var_1257: Tensor[(1, 3, 9), float32]) -> (Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) {
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %34 = reshape(%32, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %35 = reshape(%33, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %36 = @func_826(%34, %35) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 20), float32] */, dtype="float32") /* ty=Tensor[(6, 20), float32] */;
  %38 = cast(meta[relay.Constant][4] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %39 = reshape(%37, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
  %40 = reshape(%38, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %41 = @func_424(%39, %40) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) */;
  %42 = cast(%var_1257, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  %43 = sigmoid(%42) /* ty=Tensor[(1, 3, 9), float64] */;
  %44 = cast(%var_1257, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %45 = rsqrt(%44) /* ty=Tensor[(1, 3, 9), float32] */;
  %46 = cast(%45, dtype="int64") /* ty=Tensor[(1, 3, 9), int64] */;
  %47 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%43, dtype="int64") /* ty=Tensor[(1, 3, 9), int64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %50 = cast(%45, dtype="uint16") /* ty=Tensor[(1, 3, 9), uint16] */;
  %51 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%43, dtype="uint16") /* ty=Tensor[(1, 3, 9), uint16] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %54 = logical_xor(%52, %53) /* ty=Tensor[(?, 3, 9), uint16] */;
  %55 = cast(%43, dtype="bool") /* ty=Tensor[(1, 3, 9), bool] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="bool") /* ty=Tensor[(?, 3, 9), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = greater_equal(%57, %58) /* ty=Tensor[(?, 3, 9), bool] */;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(?, 3, 9), float64] */;
  %61 = cast(%45, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %62 = atanh(%61) /* ty=Tensor[(1, 3, 9), float32] */;
  %63 = cast(%43, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %67 = %36.0;
  %68 = %41.0;
  %69 = bitwise_and(%48, %49) /* ty=Tensor[(?, 3, 9), int64] */;
  %70 = asinh(%60) /* ty=Tensor[(?, 3, 9), float64] */;
  %71 = floor_mod(%65, %66) /* ty=Tensor[(?, 3, 9), float64] */;
  (%67, meta[relay.Constant][2] /* ty=Tensor[(96), float32] */, %68, meta[relay.Constant][3] /* ty=Tensor[(6, 20), float32] */, meta[relay.Constant][4] /* ty=Tensor[(975), float32] */, %69, %70, %71)
}

def @func_463(%var_462: Tensor[(14, 6, 15), uint8]) -> (Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) {
  %85 = fn (%var_444: Tensor[(14, 6, 15), uint8]) -> (Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) {
    %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 6, 15), uint8] */, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
    %73 = shape_of(%var_444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(%var_444, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
    %78 = reshape(%76, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
    %79 = reshape(%77, newshape=[975]) /* ty=Tensor[(975), float32] */;
    %80 = @func_424(%78, %79) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) */;
    %81 = cast(%var_444, dtype="float64") /* ty=Tensor[(14, 6, 15), float64] */;
    %82 = greater_equal(%74, %75) /* ty=Tensor[(14, 6, 15), bool] */;
    %83 = %80.0;
    %84 = sin(%81) /* ty=Tensor[(14, 6, 15), float64] */;
    (%82, %83, meta[relay.Constant][6] /* ty=Tensor[(120), float32] */, meta[relay.Constant][7] /* ty=Tensor[(975), float32] */, %84)
  };
  %85(%var_462) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */
}

def @func_1688() -> Tensor[(12, 6, 6), float32] {
  %86 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %86.0
}

def @func_3313(%var_3299: Tensor[(11, 11, 7), int32]) -> (Tensor[(11, 11, 7), int32], Tensor[(11, 11, 7), float64]) {
  %87 = cast(%var_3299, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %88 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 11, 7), int32] */, dtype="int32") /* ty=Tensor[(11, 11, 7), int32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %91 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 11, 7), int32] */, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
  %92 = minimum(%89, %90) /* ty=Tensor[(11, 11, 7), int32] */;
  %93 = log(%91) /* ty=Tensor[(11, 11, 7), float64] */;
  (%92, %93)
}

def @func_1388() -> (Tensor[(12, 6, 6), float32],) {
  @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_6796(%var_6794: Tensor[(9, 14, 12), uint32]) -> (Tensor[(9, 14, 12), bool], Tensor[(16, 8, 6), uint8], Tensor[(768), float64]) {
  @func_6793(%var_6794) /* ty=(Tensor[(9, 14, 12), bool], Tensor[(16, 8, 6), uint8], Tensor[(768), float64]) */
}

def @func_3738() -> (Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64]) {
  @func_3736() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64]) */
}

def @func_6919() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(975), float32]) {
  %94 = cast(meta[relay.Constant][9] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %95 = reshape(%94, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %96 = @func_4495(%95) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 15, 5), float32], Tensor[(975), float32]) */;
  %97 = @func_3658() /* ty=Tensor[(12, 6, 6), float32] */;
  %98 = %96.0;
  (%97, %98, meta[relay.Constant][9] /* ty=Tensor[(975), float32] */)
}

def @func_4495(%var_4482: Tensor[(975), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(13, 15, 5), float32], Tensor[(975), float32]) {
  %99 = cast(%var_4482, dtype="float32") /* ty=Tensor[(975), float32] */;
  %100 = reshape(%99, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %101 = @func_3998() /* ty=Tensor[(12, 6, 6), float32] */;
  %102 = @func_220(%100) /* ty=Tensor[(13, 15, 5), float32] */;
  (%101, %102, %var_4482)
}

def @func_2510() -> (Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) {
  %103 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %104 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %105 = reshape(%103, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %106 = reshape(%104, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %107 = @func_826(%105, %106) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %108 = %107.0;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %110 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  %111 = sinh(%109) /* ty=Tensor[(4, 12, 2), float64] */;
  (%110, meta[relay.Constant][10] /* ty=Tensor[(1, 96), float32] */, %111)
}

def @func_4086(%var_4084: Tensor[(4, 2, 7), float64], %var_4085: Tensor[(4, 2, 7), float64]) -> Tensor[(4, 2, 7), float64] {
  @func_4082(%var_4084, %var_4085) /* ty=Tensor[(4, 2, 7), float64] */
}

def @func_4498(%var_4496: Tensor[(975), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(13, 15, 5), float32], Tensor[(975), float32]) {
  @func_4495(%var_4496) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(13, 15, 5), float32], Tensor[(975), float32]) */
}

def @func_3546(%var_3538: Tensor[(2, 3, 1), int64]) -> Tensor[(2, 3, 5), bool] {
  %112 = cast(%var_3538, dtype="bool") /* ty=Tensor[(2, 3, 1), bool] */;
  %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 3, 5), int64] */, dtype="bool") /* ty=Tensor[(2, 3, 5), bool] */;
  less(%112, %113) /* ty=Tensor[(2, 3, 5), bool] */
}

def @func_1484() -> Tensor[(12, 6, 6), float32] {
  @func_1482() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_5994() -> Tensor[(12, 6, 6), float32] {
  @func_1688() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_6247() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %116 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
    %114 = @func_5398() /* ty=Tensor[(12, 6, 6), float32] */;
    %115 = @func_4021() /* ty=Tensor[(12, 6, 6), float32] */;
    (%114, %115)
  };
  %116() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_5967() -> Tensor[(1, 945), uint32] {
  %118 = fn () -> Tensor[(1, 945), uint32] {
    %117 = @func_5599() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(1, 945), uint32]) */;
    %117.2
  };
  %118() /* ty=Tensor[(1, 945), uint32] */
}

def @func_5091() -> float32 {
  %119 = @func_5071() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 10, 12), float32], float32, Tensor[(12, 6, 6), float32]) */;
  %119.3
}

def @func_6056(%var_6054: Tensor[(252), uint16], %var_6055: Tensor[(1260), bool]) -> (Tensor[(12, 6, 6), float32], Tensor[(240), float64], Tensor[(768), float32], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %133 = fn (%var_6044: Tensor[(252), uint16], %var_6045: Tensor[(1260), bool]) -> (Tensor[(12, 6, 6), float32], Tensor[(240), float64], Tensor[(768), float32], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
    %120 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %121 = cast(meta[relay.Constant][12] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
    %122 = cast(%var_6044, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %123 = cast(%var_6045, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %124 = reshape(%121, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float32] */;
    %125 = reshape(%122, newshape=[252]) /* ty=Tensor[(252), uint16] */;
    %126 = reshape(%123, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
    %127 = @func_2991(%124, %125, %126) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) */;
    %128 = @func_3452() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %129 = %120.0;
    %130 = %127.2;
    %131 = %128.0;
    %132 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
    (%129, %130, meta[relay.Constant][12] /* ty=Tensor[(768), float32] */, %var_6044, %var_6045, %131, %132)
  };
  %133(%var_6054, %var_6055) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(240), float64], Tensor[(768), float32], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_6140(%var_6092: Tensor[(6, 8, 11), float64], %var_6093: Tensor[(6, 8, 11), float64]) -> (Tensor[(6, 8, 11), float64], Tensor[(975), float32], Tensor[(4, 60), float64], Tensor[(13, 15, 5), float32], Tensor[(6, 8, 11), float32], Tensor[(4, 12, 2), int32]) {
  %134 = cast(%var_6093, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %135 = shape_of(%var_6092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%var_6092, dtype="float64") /* ty=Tensor[(6, 8, 11), float64] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %138 = @func_5000() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64]) */;
  %139 = cast(meta[relay.Constant][13] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %140 = reshape(%139, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %141 = @func_220(%140) /* ty=Tensor[(13, 15, 5), float32] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %143 = cast(%var_6093, dtype="float32") /* ty=Tensor[(6, 8, 11), float32] */;
  %144 = floor_divide(%136, %137) /* ty=Tensor[(6, 8, 11), float64] */;
  %145 = %138.2;
  %146 = asinh(%142) /* ty=Tensor[(13, 15, 5), float32] */;
  %147 = acos(%143) /* ty=Tensor[(6, 8, 11), float32] */;
  %148 = @func_5264() /* ty=Tensor[(4, 12, 2), int32] */;
  (%144, meta[relay.Constant][13] /* ty=Tensor[(975), float32] */, %145, %146, %147, %148)
}

def @func_7180() -> (Tensor[(12, 6, 6), float64],) {
  %149 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %151 = rsqrt(%150) /* ty=Tensor[(12, 6, 6), float64] */;
  (%151,)
}

def @func_1802() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %157 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
    %152 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %153 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %154 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
    %155 = %152.0;
    %156 = %153.1;
    (%154, %155, %156)
  };
  %157() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_659(%var_649: Tensor[(7, 4, 4), float64]) -> Tensor[(7, 4, 4), float64] {
  %158 = cast(%var_649, dtype="float64") /* ty=Tensor[(7, 4, 4), float64] */;
  cosh(%158) /* ty=Tensor[(7, 4, 4), float64] */
}

def @func_748(%var_746: Tensor[(5, 16, 9), uint32], %var_747: Tensor[(5, 16, 9), uint32]) -> (Tensor[(5, 16, 9), uint32], Tensor[(14, 6, 15), float64], Tensor[(1260), uint8]) {
  @func_744(%var_746, %var_747) /* ty=(Tensor[(5, 16, 9), uint32], Tensor[(14, 6, 15), float64], Tensor[(1260), uint8]) */
}

def @func_6969() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %159 = @func_6483() /* ty=Tensor[(12, 6, 6), float32] */;
  %160 = @func_4752() /* ty=Tensor[(12, 6, 6), float32] */;
  (%159, %160)
}

def @func_5938(%var_5892: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), int32], Tensor[(27), bool], Tensor[(12, 6, 6), int8]) {
  %161 = cast(%var_5892, dtype="float32") /* ty=Tensor[(27), float32] */;
  %162 = reshape(%161, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %163 = @func_5878(%162) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(27), float32]) */;
  %164 = cast(meta[relay.Constant][14] /* ty=Tensor[(27), float32] */, dtype="bool") /* ty=Tensor[(27), bool] */;
  %165 = shape_of(%var_5892, dtype="int32") /* ty=Tensor[(1), int32] */;
  %166 = cast(%var_5892, dtype="bool") /* ty=Tensor[(27), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?), bool] */;
  %168 = equal(%166, %167) /* ty=Tensor[(27), bool] */;
  %169 = cast(%168, dtype="float64") /* ty=Tensor[(27), float64] */;
  %170 = tan(%169) /* ty=Tensor[(27), float64] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(27), bool] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(1), int32] */;
  %173 = cast(%170, dtype="bool") /* ty=Tensor[(27), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?), bool] */;
  %175 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %176 = %175.0;
  %177 = @func_2733() /* ty=(Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) */;
  %178 = %177.1;
  %179 = cast(%178, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %180 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%176, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %183 = %163.0;
  %184 = @func_4697() /* ty=Tensor[(4, 12, 2), int32] */;
  %185 = logical_or(%173, %174) /* ty=Tensor[(27), bool] */;
  %186 = bitwise_and(%181, %182) /* ty=Tensor[(12, 6, 6), int8] */;
  (%183, %184, %185, %186)
}

def @func_6431() -> Tensor[(12, 6, 6), float32] {
  @func_1400() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_4530() -> Tensor[(12, 6, 6), float32] {
  @func_4528() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_6514(%var_6493: Tensor[(14, 16, 1), float32], %var_6508: Tensor[(4, 12, 2), int32]) -> (Tensor[(14, 16, 1), float32], Tensor[(4, 12, 2), float32]) {
  %187 = cast(%var_6493, dtype="float32") /* ty=Tensor[(14, 16, 1), float32] */;
  %188 = @func_4697() /* ty=Tensor[(4, 12, 2), int32] */;
  %189 = cast(%var_6508, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %193 = sigmoid(%187) /* ty=Tensor[(14, 16, 1), float32] */;
  %194 = mod(%191, %192) /* ty=Tensor[(4, 12, 2), float32] */;
  (%193, %194)
}

def @func_4022() -> Tensor[(12, 6, 6), float32] {
  %195 = fn () -> Tensor[(12, 6, 6), float32] {
    @func_3034() /* ty=Tensor[(12, 6, 6), float32] */
  };
  %195() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2131() -> (Tensor[(12, 6, 6), float32],) {
  @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_830(%var_828: Tensor[(4, 12, 2), float32], %var_829: Tensor[(4, 12, 2), float32]) -> (Tensor[(4, 12, 2), float64],) {
  @func_826(%var_828, %var_829) /* ty=(Tensor[(4, 12, 2), float64],) */
}

def @func_3452() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %196 = @func_1933() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %197 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %198 = %196.0;
  (%197, %198)
}

def @func_1869(%var_1838: Tensor[(5, 195), float32], %var_1852: Tensor[(5, 195), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(5, 195), float64], Tensor[(5, 195), bool]) {
  %199 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %200 = cast(%var_1838, dtype="float32") /* ty=Tensor[(5, 195), float32] */;
  %201 = reshape(%200, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %202 = @func_220(%201) /* ty=Tensor[(13, 15, 5), float32] */;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(13, 15, 5), float64] */;
  %204 = shape_of(%var_1838, dtype="int32") /* ty=Tensor[(2), int32] */;
  %205 = cast(%var_1838, dtype="float64") /* ty=Tensor[(5, 195), float64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %207 = cast(%var_1852, dtype="bool") /* ty=Tensor[(5, 195), bool] */;
  %208 = shape_of(%var_1838, dtype="int32") /* ty=Tensor[(2), int32] */;
  %209 = cast(%var_1838, dtype="bool") /* ty=Tensor[(5, 195), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %211 = %199.0;
  %212 = floor_divide(%205, %206) /* ty=Tensor[(5, 195), float64] */;
  %213 = greater(%209, %210) /* ty=Tensor[(5, 195), bool] */;
  (%211, %212, %213)
}

def @func_6634() -> (Tensor[(14, 5, 16), uint64],) {
  %219 = fn () -> (Tensor[(14, 5, 16), uint64],) {
    %214 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 5, 16), uint64] */, dtype="uint64") /* ty=Tensor[(14, 5, 16), uint64] */;
    %215 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(14, 5, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %216 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 5, 16), uint64] */, dtype="uint64") /* ty=Tensor[(14, 5, 16), uint64] */;
    %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %218 = multiply(%216, %217) /* ty=Tensor[(14, 5, 16), uint64] */;
    (%218,)
  };
  %219() /* ty=(Tensor[(14, 5, 16), uint64],) */
}

def @func_5806(%var_5777: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), bool], Tensor[(12, 6, 6), bool]) {
  %220 = @func_2480() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %221 = %220.3;
  %222 = cast(%var_5777, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %226 = cast(%221, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %227 = shape_of(%var_5777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_5777, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %230 = equal(%224, %225) /* ty=Tensor[(12, 6, 6), bool] */;
  %231 = greater_equal(%228, %229) /* ty=Tensor[(12, 6, 6), bool] */;
  (%230, %231)
}

def @func_1619() -> (Tensor[(12, 6, 6), float32],) {
  %232 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %233 = %232.0;
  (%233,)
}

def @func_1690() -> Tensor[(12, 6, 6), float32] {
  @func_1688() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_4753() -> Tensor[(12, 6, 6), float32] {
  %235 = fn () -> Tensor[(12, 6, 6), float32] {
    %234 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %234.0
  };
  %235() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2991(%var_2916: Tensor[(8, 16, 6), float32], %var_2986: Tensor[(252), uint16], %var_2987: Tensor[(1260), bool]) -> (Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) {
  %236 = cast(%var_2916, dtype="float32") /* ty=Tensor[(8, 16, 6), float32] */;
  %237 = asin(%236) /* ty=Tensor[(8, 16, 6), float32] */;
  %238 = cast(%var_2916, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="uint32") /* ty=Tensor[(8, 16, 6), uint32] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %242 = right_shift(%240, %241) /* ty=Tensor[(8, 16, 6), uint32] */;
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 16, 6), uint32] */, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %247 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %248 = reshape(%247, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %249 = @func_2110(%248) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %250 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %251 = reshape(%250, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
  %252 = @func_1967(%251) /* ty=(Tensor[(4, 15, 4), float64],) */;
  %253 = @func_1933() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %254 = cast(%var_2986, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %255 = cast(%var_2987, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %256 = %253.0;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %258 = reshape(%254, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %259 = reshape(%255, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), bool] */;
  %260 = reshape(%257, newshape=[12, 6, 6]) /* ty=Tensor[(12, 6, 6), float32] */;
  %261 = @func_1607(%258, %259, %260) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(120), float32], Tensor[(14, 6, 15), float32], Tensor[(12, 6, 6), uint32]) */;
  %262 = cast(%242, dtype="float64") /* ty=Tensor[(8, 16, 6), float64] */;
  %263 = minimum(%245, %246) /* ty=Tensor[(8, 16, 6), float64] */;
  %264 = %249.1;
  %265 = %252.0;
  %266 = %261.2;
  %267 = acosh(%262) /* ty=Tensor[(8, 16, 6), float64] */;
  (%263, %264, meta[relay.Constant][18] /* ty=Tensor[(240), float64] */, %265, %256, %266, %var_2986, %var_2987, %267)
}

def @func_5266() -> Tensor[(4, 12, 2), int32] {
  @func_5264() /* ty=Tensor[(4, 12, 2), int32] */
}

def @func_5709(%var_5704: Tensor[(4, 12, 2), float64]) -> (Tensor[(12, 6, 6), float32], Tensor[(96), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), bool]) {
  %268 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %269 = @func_3326() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %270 = cast(meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %271 = cast(meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %272 = reshape(%270, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %273 = reshape(%271, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %274 = @func_826(%272, %273) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %275 = %274.0;
  %276 = cast(%var_5704, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = %268.0;
  %281 = @func_4821() /* ty=Tensor[(12, 6, 6), float32] */;
  %282 = %269.0;
  %283 = equal(%278, %279) /* ty=Tensor[(4, 12, 2), bool] */;
  (%280, meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, %281, %282, %283)
}

def @func_5844(%var_5843: int8) -> (Tensor[(14, 16, 4), int8], Tensor[(12, 6, 6), float32]) {
  %288 = fn (%var_5819: int8) -> (Tensor[(14, 16, 4), int8], Tensor[(12, 6, 6), float32]) {
    %284 = cast(%var_5819, dtype="int8") /* ty=int8 */;
    %285 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 16, 4), int8] */;
    %286 = left_shift(%284, %285) /* ty=Tensor[(14, 16, 4), int8] */;
    %287 = @func_4752() /* ty=Tensor[(12, 6, 6), float32] */;
    (%286, %287)
  };
  %288(%var_5843) /* ty=(Tensor[(14, 16, 4), int8], Tensor[(12, 6, 6), float32]) */
}

def @func_5878(%var_5875: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(27), float32]) {
  %289 = @func_2178() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %290 = cast(%var_5875, dtype="float32") /* ty=Tensor[(27), float32] */;
  %291 = reshape(%290, newshape=[27]) /* ty=Tensor[(27), float32] */;
  %292 = @func_2614(%291) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) */;
  %293 = @func_4821() /* ty=Tensor[(12, 6, 6), float32] */;
  %294 = %289.0;
  %295 = %292.1;
  (%293, %294, %295, %var_5875)
}

def @func_2129() -> (Tensor[(12, 6, 6), float32],) {
  %296 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  (%296,)
}

def @func_1969(%var_1968: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), float64],) {
  %302 = fn (%var_1958: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), float64],) {
    %297 = cast(%var_1958, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
    %298 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %301 = floor_mod(%299, %300) /* ty=Tensor[(4, 15, 4), float64] */;
    (%301,)
  };
  %302(%var_1968) /* ty=(Tensor[(4, 15, 4), float64],) */
}

def @func_2616(%var_2615: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) {
  %311 = fn (%var_2603: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) {
    %303 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %304 = @func_1826() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %305 = cast(%var_2603, dtype="float32") /* ty=Tensor[(27), float32] */;
    %306 = reshape(%305, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
    %307 = @func_1330(%306) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) */;
    %308 = %303.1;
    %309 = %304.0;
    %310 = %307.7;
    (%308, %309, %310, %var_2603)
  };
  %311(%var_2615) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) */
}

def @func_2733() -> (Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) {
  %312 = @func_2480() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
  %313 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %314 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %315 = reshape(%314, newshape=[7, 4, 4]) /* ty=Tensor[(7, 4, 4), float64] */;
  %316 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %317 = %312.5;
  %318 = %313.0;
  %319 = @func_659(%315) /* ty=Tensor[(7, 4, 4), float64] */;
  %320 = %316.0;
  (%317, %318, %319, meta[relay.Constant][22] /* ty=Tensor[(112), float64] */, %320)
}

def @func_3939() -> (Tensor[(12, 6, 6), float32],) {
  @func_3937() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_3327() -> (Tensor[(12, 6, 6), float32],) {
  %323 = fn () -> (Tensor[(12, 6, 6), float32],) {
    %321 = @func_3227() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %322 = %321.0;
    (%322,)
  };
  %323() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_6834() -> (Tensor[(12, 6, 6), float32],) {
  %324 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %325 = %324.0;
  (%325,)
}

def @func_5809(%var_5807: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), bool], Tensor[(12, 6, 6), bool]) {
  @func_5806(%var_5807) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(12, 6, 6), bool]) */
}

def @func_6653(%var_6651: Tensor[(2, 9, 14), float64]) -> (Tensor[(2, 9, 14), float64], Tensor[(5, 96), bool], Tensor[(480), float32]) {
  @func_6650(%var_6651) /* ty=(Tensor[(2, 9, 14), float64], Tensor[(5, 96), bool], Tensor[(480), float32]) */
}

def @func_7130() -> (Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), float64], Tensor[(96), float32]) {
  @func_7128() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), float64], Tensor[(96), float32]) */
}

def @func_5072() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 10, 12), float32], float32, Tensor[(12, 6, 6), float32]) {
  %342 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 10, 12), float32], float32, Tensor[(12, 6, 6), float32]) {
    %326 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %327 = %326.0;
    %328 = @func_3452() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %329 = %328.1;
    %330 = cast(%329, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
    %331 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(%327, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %334 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %335 = cast(-4.45093f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %336 = reshape(%335, newshape=[]) /* ty=float32 */;
    %337 = @func_2408(%336) /* ty=(Tensor[(12, 10, 12), float32],) */;
    %338 = mod(%332, %333) /* ty=Tensor[(12, 6, 6), float32] */;
    %339 = %334.2;
    %340 = %337.0;
    %341 = @func_3703() /* ty=Tensor[(12, 6, 6), float32] */;
    (%338, %339, %340, -4.45093f /* ty=float32 */, %341)
  };
  %342() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 10, 12), float32], float32, Tensor[(12, 6, 6), float32]) */
}

def @func_909(%var_907: Tensor[(7, 5, 1), int8], %var_908: Tensor[(7, 5, 1), int8]) -> (Tensor[(7, 5, ?), bool], Tensor[(7, 5, ?), float32]) {
  %355 = fn (%var_894: Tensor[(7, 5, 1), int8], %var_895: Tensor[(7, 5, 1), int8]) -> (Tensor[(7, 5, ?), bool], Tensor[(7, 5, ?), float32]) {
    %343 = cast(%var_894, dtype="bool") /* ty=Tensor[(7, 5, 1), bool] */;
    %344 = shape_of(%var_895, dtype="int32") /* ty=Tensor[(3), int32] */;
    %345 = cast(%var_895, dtype="bool") /* ty=Tensor[(7, 5, 1), bool] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %347 = cast(%var_895, dtype="int8") /* ty=Tensor[(7, 5, 1), int8] */;
    %348 = shape_of(%var_894, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(%var_894, dtype="int8") /* ty=Tensor[(7, 5, 1), int8] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %351 = logical_xor(%349, %350) /* ty=Tensor[(7, 5, ?), int8] */;
    %352 = cast(%351, dtype="float32") /* ty=Tensor[(7, 5, ?), float32] */;
    %353 = logical_and(%345, %346) /* ty=Tensor[(7, 5, ?), bool] */;
    %354 = atanh(%352) /* ty=Tensor[(7, 5, ?), float32] */;
    (%353, %354)
  };
  %355(%var_907, %var_908) /* ty=(Tensor[(7, 5, ?), bool], Tensor[(7, 5, ?), float32]) */
}

def @func_2780(%var_2778: Tensor[(7, 9, 15), uint32]) -> Tensor[(7, 9, 15), bool] {
  @func_2777(%var_2778) /* ty=Tensor[(7, 9, 15), bool] */
}

def @func_1740(%var_1728: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), float32],) {
  %356 = @func_1492() /* ty=Tensor[(12, 6, 6), float32] */;
  %357 = cast(%var_1728, dtype="uint8") /* ty=Tensor[(12, 6, 6), uint8] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="uint8") /* ty=Tensor[(12, 6, 6), uint8] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %361 = minimum(%359, %360) /* ty=Tensor[(12, 6, 6), uint8] */;
  %362 = cast(%361, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %363 = log(%362) /* ty=Tensor[(12, 6, 6), float32] */;
  (%363,)
}

def @func_4528() -> Tensor[(12, 6, 6), float32] {
  %364 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %364.0
}

def @func_5473(%var_5472: Tensor[(6, 6, 12), float64]) -> (Tensor[(5, 96), float32], Tensor[(480), float32], Tensor[(6, 6, 12), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(6, 6, 12), bool]) {
  %385 = fn (%var_5429: Tensor[(6, 6, 12), float64]) -> (Tensor[(5, 96), float32], Tensor[(480), float32], Tensor[(6, 6, 12), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(6, 6, 12), bool]) {
    %365 = cast(meta[relay.Constant][23] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %366 = reshape(%365, newshape=[5, 96]) /* ty=Tensor[(5, 96), float32] */;
    %367 = @func_3897(%366) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) */;
    %368 = cast(%var_5429, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
    %369 = log10(%368) /* ty=Tensor[(6, 6, 12), float64] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
    %371 = shape_of(%var_5429, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%var_5429, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %374 = cast(%369, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
    %375 = cosh(%374) /* ty=Tensor[(6, 6, 12), float64] */;
    %376 = cast(%369, dtype="bool") /* ty=Tensor[(6, 6, 12), bool] */;
    %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%375, dtype="bool") /* ty=Tensor[(6, 6, 12), bool] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %380 = %367.1;
    %381 = mod(%372, %373) /* ty=Tensor[(6, 6, 12), float64] */;
    %382 = @func_3998() /* ty=Tensor[(12, 6, 6), float32] */;
    %383 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
    %384 = equal(%378, %379) /* ty=Tensor[(6, 6, 12), bool] */;
    (%380, meta[relay.Constant][23] /* ty=Tensor[(480), float32] */, %381, %382, %383, %384)
  };
  %385(%var_5472) /* ty=(Tensor[(5, 96), float32], Tensor[(480), float32], Tensor[(6, 6, 12), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(6, 6, 12), bool]) */
}

def @func_2408(%var_2392: float32) -> (Tensor[(12, 10, 12), float32],) {
  %386 = cast(%var_2392, dtype="float32") /* ty=float32 */;
  %387 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 12), float32] */;
  %388 = power(%386, %387) /* ty=Tensor[(12, 10, 12), float32] */;
  (%388,)
}

def @func_3703() -> Tensor[(12, 6, 6), float32] {
  %389 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %389.0
}

def @func_4864() -> (Tensor[(12, 6, 6), float32],) {
  %390 = @func_1826() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %391 = %390.0;
  (%391,)
}

def @func_4866() -> (Tensor[(12, 6, 6), float32],) {
  @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_1647() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %392 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %393 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
  %394 = %392.0;
  (%393, %394)
}

def @func_3316(%var_3314: Tensor[(11, 11, 7), int32]) -> (Tensor[(11, 11, 7), int32], Tensor[(11, 11, 7), float64]) {
  @func_3313(%var_3314) /* ty=(Tensor[(11, 11, 7), int32], Tensor[(11, 11, 7), float64]) */
}

def @func_2066() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %398 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
    %395 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %396 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
    %397 = %395.0;
    (%396, %397)
  };
  %398() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_6433() -> Tensor[(12, 6, 6), float32] {
  @func_6431() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_1934() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %406 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
    %399 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %400 = %399.1;
    %401 = cast(%400, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
    %402 = asinh(%401) /* ty=Tensor[(12, 6, 6), float64] */;
    %403 = cast(%402, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
    %404 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
    %405 = atanh(%403) /* ty=Tensor[(12, 6, 6), float32] */;
    (%404, %405)
  };
  %406() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_2512() -> (Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) {
  @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */
}

def @func_5564(%var_5562: Tensor[(12, 6, 6), float32], %var_5563: Tensor[(945), uint32]) -> (Tensor[(12, 6, 6), bool], Tensor[(7, 9, 15), bool], Tensor[(945), uint32], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  @func_5560(%var_5562, %var_5563) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(7, 9, 15), bool], Tensor[(945), uint32], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_1611(%var_1608: Tensor[(252), uint16], %var_1609: Tensor[(14, 6, 15), bool], %var_1610: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(120), float32], Tensor[(14, 6, 15), float32], Tensor[(12, 6, 6), uint32]) {
  %432 = fn (%var_1575: Tensor[(252), uint16], %var_1579: Tensor[(14, 6, 15), bool], %var_1601: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(120), float32], Tensor[(14, 6, 15), float32], Tensor[(12, 6, 6), uint32]) {
    %407 = cast(meta[relay.Constant][25] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
    %408 = reshape(%407, newshape=[7, 4, 4]) /* ty=Tensor[(7, 4, 4), float64] */;
    %409 = cast(%var_1575, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %410 = cast(%var_1575, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %411 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %412 = reshape(%409, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint16] */;
    %413 = reshape(%410, newshape=[6, 3, 14]) /* ty=Tensor[(6, 3, 14), uint16] */;
    %414 = reshape(%411, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %415 = @func_532(%412, %413, %414) /* ty=(Tensor[(6, 3, 14), uint64], Tensor[(8, 3, 5), float64], Tensor[(120), float32], Tensor[(325, 3), float32], Tensor[(6, 3, 14), float64], Tensor[(120), float32], Tensor[(1260), uint8], Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32]) */;
    %416 = %415.7;
    %417 = cast(%var_1579, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
    %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
    %419 = cast(%416, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %421 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
    %422 = cast(%421, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
    %423 = cosh(%422) /* ty=Tensor[(12, 6, 6), float32] */;
    %424 = cast(%var_1601, dtype="uint32") /* ty=Tensor[(12, 6, 6), uint32] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="uint32") /* ty=Tensor[(12, 6, 6), uint32] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %428 = @func_1482() /* ty=Tensor[(12, 6, 6), float32] */;
    %429 = @func_659(%408) /* ty=Tensor[(7, 4, 4), float64] */;
    %430 = divide(%419, %420) /* ty=Tensor[(14, 6, 15), float32] */;
    %431 = left_shift(%426, %427) /* ty=Tensor[(12, 6, 6), uint32] */;
    (%428, %429, meta[relay.Constant][25] /* ty=Tensor[(112), float64] */, %var_1575, meta[relay.Constant][26] /* ty=Tensor[(120), float32] */, %430, %431)
  };
  %432(%var_1608, %var_1609, %var_1610) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(120), float32], Tensor[(14, 6, 15), float32], Tensor[(12, 6, 6), uint32]) */
}

def @func_2735() -> (Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) {
  @func_2733() /* ty=(Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) */
}

def @func_5264() -> Tensor[(4, 12, 2), int32] {
  @func_4697() /* ty=Tensor[(4, 12, 2), int32] */
}

def @func_3999() -> Tensor[(12, 6, 6), float32] {
  %433 = fn () -> Tensor[(12, 6, 6), float32] {
    @func_1688() /* ty=Tensor[(12, 6, 6), float32] */
  };
  %433() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_1482() -> Tensor[(12, 6, 6), float32] {
  @func_1400() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_4265(%var_4231: Tensor[(35), int8], %var_4256: Tensor[(768), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(7, 5, ?), bool], Tensor[(35), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(252), uint16]) {
  %434 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %435 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %436 = %435.0;
  %437 = cast(%436, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %438 = cast(%var_4231, dtype="int8") /* ty=Tensor[(35), int8] */;
  %439 = cast(%var_4231, dtype="int8") /* ty=Tensor[(35), int8] */;
  %440 = reshape(%438, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), int8] */;
  %441 = reshape(%439, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), int8] */;
  %442 = @func_906(%440, %441) /* ty=(Tensor[(7, 5, ?), bool], Tensor[(7, 5, ?), float32]) */;
  %443 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %444 = cast(%var_4256, dtype="float32") /* ty=Tensor[(768), float32] */;
  %445 = cast(meta[relay.Constant][27] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %446 = cast(meta[relay.Constant][27] /* ty=Tensor[(252), uint16] */, dtype="uint16") /* ty=Tensor[(252), uint16] */;
  %447 = reshape(%444, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %448 = reshape(%445, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %449 = reshape(%446, newshape=[252]) /* ty=Tensor[(252), uint16] */;
  %450 = @func_3849(%447, %448, %449) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(630, 2), bool], Tensor[(252), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float32], Tensor[(112), float64]) */;
  %451 = %434.2;
  %452 = acos(%437) /* ty=Tensor[(12, 6, 6), float64] */;
  %453 = %442.0;
  %454 = %443.0;
  %455 = @func_1400() /* ty=Tensor[(12, 6, 6), float32] */;
  %456 = %450.5;
  (%451, %452, %453, %var_4231, %454, %455, %456, %var_4256, meta[relay.Constant][27] /* ty=Tensor[(252), uint16] */)
}

def @func_6580() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64]) {
  @func_6578() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64]) */
}

def @func_2234() -> Tensor[(12, 6, 6), float32] {
  %457 = fn () -> Tensor[(12, 6, 6), float32] {
    @func_1482() /* ty=Tensor[(12, 6, 6), float32] */
  };
  %457() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_1827() -> (Tensor[(12, 6, 6), float32],) {
  %460 = fn () -> (Tensor[(12, 6, 6), float32],) {
    %458 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %459 = %458.0;
    (%459,)
  };
  %460() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_7182() -> (Tensor[(12, 6, 6), float64],) {
  @func_7180() /* ty=(Tensor[(12, 6, 6), float64],) */
}

def @func_6485() -> Tensor[(12, 6, 6), float32] {
  @func_6483() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_744(%var_730: Tensor[(5, 16, 9), uint32], %var_731: Tensor[(5, 16, 9), uint32]) -> (Tensor[(5, 16, 9), uint32], Tensor[(14, 6, 15), float64], Tensor[(1260), uint8]) {
  %461 = cast(%var_731, dtype="uint32") /* ty=Tensor[(5, 16, 9), uint32] */;
  %462 = shape_of(%var_730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_730, dtype="uint32") /* ty=Tensor[(5, 16, 9), uint32] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %465 = cast(meta[relay.Constant][28] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
  %466 = reshape(%465, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
  %467 = @func_461(%466) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
  %468 = right_shift(%463, %464) /* ty=Tensor[(5, 16, 9), uint32] */;
  %469 = %467.4;
  (%468, %469, meta[relay.Constant][28] /* ty=Tensor[(1260), uint8] */)
}

def @func_6863() -> (Tensor[(12, 6, 6), float64], Tensor[(?, 3, 9), int64], Tensor[(27), float32]) {
  %477 = fn () -> (Tensor[(12, 6, 6), float64], Tensor[(?, 3, 9), int64], Tensor[(27), float32]) {
    %470 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
    %471 = cast(%470, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
    %472 = cast(meta[relay.Constant][29] /* ty=Tensor[(27), float32] */, dtype="float32") /* ty=Tensor[(27), float32] */;
    %473 = reshape(%472, newshape=[1, 3, 9]) /* ty=Tensor[(1, 3, 9), float32] */;
    %474 = @func_1330(%473) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) */;
    %475 = sigmoid(%471) /* ty=Tensor[(12, 6, 6), float64] */;
    %476 = %474.5;
    (%475, %476, meta[relay.Constant][29] /* ty=Tensor[(27), float32] */)
  };
  %477() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(?, 3, 9), int64], Tensor[(27), float32]) */
}

def @func_7128() -> (Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), float64], Tensor[(96), float32]) {
  %478 = cast(meta[relay.Constant][30] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %479 = cast(meta[relay.Constant][30] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %480 = reshape(%478, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %481 = reshape(%479, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %482 = @func_826(%480, %481) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %483 = @func_3658() /* ty=Tensor[(12, 6, 6), float32] */;
  %484 = %482.0;
  (%483, %484, meta[relay.Constant][30] /* ty=Tensor[(96), float32] */)
}

def @func_5601() -> (Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(1, 945), uint32]) {
  @func_5599() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(1, 945), uint32]) */
}

def @func_3244() -> Tensor[(12, 6, 6), float32] {
  %486 = fn () -> Tensor[(12, 6, 6), float32] {
    %485 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %485.0
  };
  %486() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_5712(%var_5710: Tensor[(4, 12, 2), float64]) -> (Tensor[(12, 6, 6), float32], Tensor[(96), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), bool]) {
  @func_5709(%var_5710) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(96), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), bool]) */
}

def @func_3291(%var_3289: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), int8], Tensor[(4, 12, 2), uint8], Tensor[(4, 12, 2), float64]) {
  @func_3288(%var_3289) /* ty=(Tensor[(12, 6, 6), int8], Tensor[(4, 12, 2), uint8], Tensor[(4, 12, 2), float64]) */
}

def @func_6578() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64]) {
  %487 = @func_5186() /* ty=Tensor[(12, 6, 6), float32] */;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %489 = reshape(%488, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), float64] */;
  %490 = @func_5471(%489) /* ty=(Tensor[(5, 96), float32], Tensor[(480), float32], Tensor[(6, 6, 12), float64], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(6, 6, 12), bool]) */;
  %491 = %490.3;
  %492 = @func_1492() /* ty=Tensor[(12, 6, 6), float32] */;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %494 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%491, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %497 = floor_divide(%495, %496) /* ty=Tensor[(12, 6, 6), float64] */;
  (%487, %497)
}

def @func_4699() -> Tensor[(4, 12, 2), int32] {
  @func_4697() /* ty=Tensor[(4, 12, 2), int32] */
}

def @main() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64]) {
  %498 = @func_6863() /* ty=(Tensor[(12, 6, 6), float64], Tensor[(?, 3, 9), int64], Tensor[(27), float32]) */;
  %499 = %498.0;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
  %501 = @func_1492() /* ty=Tensor[(12, 6, 6), float32] */;
  %502 = erf(%500) /* ty=Tensor[(12, 6, 6), float64] */;
  (%501, %502)
}

def @func_6779(%var_6778: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32], Tensor[(16, 2, 14), float32], Tensor[(12, 6, 6), float32], Tensor[(448), float64]) {
  %525 = fn (%var_6733: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32], Tensor[(16, 2, 14), float32], Tensor[(12, 6, 6), float32], Tensor[(448), float64]) {
    %503 = @func_6246() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %504 = cast(%var_6733, dtype="float32") /* ty=Tensor[(27), float32] */;
    %505 = reshape(%504, newshape=[27]) /* ty=Tensor[(27), float32] */;
    %506 = @func_2614(%505) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32]) */;
    %507 = cast(meta[relay.Constant][31] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
    %508 = reshape(%507, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
    %509 = @func_4663(%508) /* ty=(Tensor[(16, 2, 14), float32],) */;
    %510 = cast(meta[relay.Constant][31] /* ty=Tensor[(448), float32] */, dtype="float32") /* ty=Tensor[(448), float32] */;
    %511 = reshape(%510, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
    %512 = @func_4663(%511) /* ty=(Tensor[(16, 2, 14), float32],) */;
    %513 = %512.0;
    %514 = cast(%513, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
    %515 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(448), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %516 = cast(meta[relay.Constant][31] /* ty=Tensor[(448), float32] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %518 = minimum(%516, %517) /* ty=Tensor[(448), uint64] */;
    %519 = cast(%518, dtype="float64") /* ty=Tensor[(448), float64] */;
    %520 = %503.1;
    %521 = %506.2;
    %522 = %509.0;
    %523 = @func_4021() /* ty=Tensor[(12, 6, 6), float32] */;
    %524 = rsqrt(%519) /* ty=Tensor[(448), float64] */;
    (%520, %521, %var_6733, %522, %523, %524)
  };
  %525(%var_6778) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(?, 3, 9), float64], Tensor[(27), float32], Tensor[(16, 2, 14), float32], Tensor[(12, 6, 6), float32], Tensor[(448), float64]) */
}

def @func_427(%var_425: Tensor[(8, 3, 5), float32], %var_426: Tensor[(975), float32]) -> (Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) {
  %543 = fn (%var_397: Tensor[(8, 3, 5), float32], %var_403: Tensor[(975), float32]) -> (Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) {
    %526 = cast(%var_403, dtype="float32") /* ty=Tensor[(975), float32] */;
    %527 = reshape(%526, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
    %528 = cast(%var_397, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
    %529 = asinh(%528) /* ty=Tensor[(8, 3, 5), float32] */;
    %530 = cast(%var_397, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
    %531 = sqrt(%530) /* ty=Tensor[(8, 3, 5), float32] */;
    %532 = cast(%531, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
    %533 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%529, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %536 = cast(%531, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
    %537 = @func_220(%527) /* ty=Tensor[(13, 15, 5), float32] */;
    %538 = cast(%537, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
    %539 = reshape(%538, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
    %540 = divide(%534, %535) /* ty=Tensor[(8, 3, 5), float64] */;
    %541 = sin(%536) /* ty=Tensor[(8, 3, 5), float64] */;
    %542 = @func_220(%539) /* ty=Tensor[(13, 15, 5), float32] */;
    (%537, %var_403, %540, %541, %542)
  };
  %543(%var_425, %var_426) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) */
}

def @func_662(%var_660: Tensor[(7, 4, 4), float64]) -> Tensor[(7, 4, 4), float64] {
  @func_659(%var_660) /* ty=Tensor[(7, 4, 4), float64] */
}

def @func_3229() -> (Tensor[(12, 6, 6), float32],) {
  @func_3227() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_5599() -> (Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(1, 945), uint32]) {
  %544 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 945), uint32] */, dtype="uint32") /* ty=Tensor[(1, 945), uint32] */;
  %545 = reshape(%544, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint32] */;
  %546 = @func_1688() /* ty=Tensor[(12, 6, 6), float32] */;
  %547 = @func_2777(%545) /* ty=Tensor[(7, 9, 15), bool] */;
  (%546, %547, meta[relay.Constant][32] /* ty=Tensor[(1, 945), uint32] */)
}

def @func_3705() -> Tensor[(12, 6, 6), float32] {
  @func_3703() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_3659() -> Tensor[(12, 6, 6), float32] {
  %548 = fn () -> Tensor[(12, 6, 6), float32] {
    @func_3034() /* ty=Tensor[(12, 6, 6), float32] */
  };
  %548() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_5186() -> Tensor[(12, 6, 6), float32] {
  %549 = @func_1826() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %549.0
}

def @func_1493() -> Tensor[(12, 6, 6), float32] {
  %551 = fn () -> Tensor[(12, 6, 6), float32] {
    %550 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %550.0
  };
  %551() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_5941(%var_5939: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), int32], Tensor[(27), bool], Tensor[(12, 6, 6), int8]) {
  @func_5938(%var_5939) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(4, 12, 2), int32], Tensor[(27), bool], Tensor[(12, 6, 6), int8]) */
}

def @func_5881(%var_5879: Tensor[(27), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(27), float32]) {
  @func_5878(%var_5879) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(27), float32]) */
}

def @func_5001() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64]) {
  %558 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64]) {
    %552 = @func_3227() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %553 = @func_3937() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %554 = @func_3736() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64]) */;
    %555 = %552.0;
    %556 = %553.0;
    %557 = %554.1;
    (%555, %556, %557)
  };
  %558() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64]) */
}

def @func_5188() -> Tensor[(12, 6, 6), float32] {
  @func_5186() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_3035() -> Tensor[(12, 6, 6), float32] {
  %560 = fn () -> Tensor[(12, 6, 6), float32] {
    %559 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
    %559.0
  };
  %560() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_3214() -> (Tensor[(12, 6, 6), float32],) {
  %562 = fn () -> (Tensor[(12, 6, 6), float32],) {
    %561 = @func_2209() /* ty=Tensor[(12, 6, 6), float32] */;
    (%561,)
  };
  %562() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_4665(%var_4664: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), float32],) {
  %568 = fn (%var_4649: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), float32],) {
    %563 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %564 = shape_of(%var_4649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%var_4649, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %567 = floor_divide(%565, %566) /* ty=Tensor[(16, 2, 14), float32] */;
    (%567,)
  };
  %568(%var_4664) /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_5293() -> Tensor[(12, 6, 6), float32] {
  @func_1688() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_3288(%var_3249: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), int8], Tensor[(4, 12, 2), uint8], Tensor[(4, 12, 2), float64]) {
  %569 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
  %570 = cast(%var_3249, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="int8") /* ty=Tensor[(12, 6, 6), int8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %574 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
  %575 = %574.2;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %577 = cast(%575, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %578 = reshape(%576, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %579 = reshape(%577, newshape=[4, 12, 2]) /* ty=Tensor[(4, 12, 2), float32] */;
  %580 = @func_826(%578, %579) /* ty=(Tensor[(4, 12, 2), float64],) */;
  %581 = %580.0;
  %582 = cast(%581, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %583 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%575, dtype="bool") /* ty=Tensor[(4, 12, 2), bool] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %586 = less_equal(%584, %585) /* ty=Tensor[(4, 12, 2), bool] */;
  %587 = cast(%586, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
  %588 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%575, dtype="uint8") /* ty=Tensor[(4, 12, 2), uint8] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %591 = cast(%581, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %592 = add(%572, %573) /* ty=Tensor[(12, 6, 6), int8] */;
  %593 = right_shift(%589, %590) /* ty=Tensor[(4, 12, 2), uint8] */;
  %594 = cosh(%591) /* ty=Tensor[(4, 12, 2), float64] */;
  (%592, %593, %594)
}

def @func_2210() -> Tensor[(12, 6, 6), float32] {
  %596 = fn () -> Tensor[(12, 6, 6), float32] {
    %595 = @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %595.0
  };
  %596() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_5996() -> Tensor[(12, 6, 6), float32] {
  @func_5994() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_4317(%var_4315: Tensor[(1, 5, 11), float64], %var_4316: Tensor[(15, 5, 11), float64]) -> (Tensor[(15, 5, 11), bool], Tensor[(12, 6, 6), float32]) {
  %602 = fn (%var_4293: Tensor[(1, 5, 11), float64], %var_4294: Tensor[(15, 5, 11), float64]) -> (Tensor[(15, 5, 11), bool], Tensor[(12, 6, 6), float32]) {
    %597 = cast(%var_4293, dtype="bool") /* ty=Tensor[(1, 5, 11), bool] */;
    %598 = cast(%var_4294, dtype="bool") /* ty=Tensor[(15, 5, 11), bool] */;
    %599 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %600 = not_equal(%597, %598) /* ty=Tensor[(15, 5, 11), bool] */;
    %601 = %599.1;
    (%600, %601)
  };
  %602(%var_4315, %var_4316) /* ty=(Tensor[(15, 5, 11), bool], Tensor[(12, 6, 6), float32]) */
}

def @func_4628(%var_4627: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), bool],) {
  %608 = fn (%var_4622: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), bool],) {
    %603 = cast(%var_4622, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
    %604 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(3, 16, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 16, 7), float64] */, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %607 = equal(%605, %606) /* ty=Tensor[(3, 16, 7), bool] */;
    (%607,)
  };
  %608(%var_4627) /* ty=(Tensor[(3, 16, 7), bool],) */
}

def @func_1466() -> (Tensor[(12, 6, 6), float32],) {
  %611 = fn () -> (Tensor[(12, 6, 6), float32],) {
    %609 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %610 = %609.0;
    (%610,)
  };
  %611() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_1333(%var_1331: Tensor[(1, 3, 9), float32]) -> (Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) {
  @func_1330(%var_1331) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(96), float32], Tensor[(13, 15, 5), float32], Tensor[(6, 20), float32], Tensor[(975), float32], Tensor[(?, 3, 9), int64], Tensor[(?, 3, 9), float64], Tensor[(?, 3, 9), float64]) */
}

def @func_4409(%var_4408: Tensor[(1, 5, 15), float32]) -> Tensor[(1, 5, 15), float32] {
  %613 = fn (%var_4399: Tensor[(1, 5, 15), float32]) -> Tensor[(1, 5, 15), float32] {
    %612 = cast(%var_4399, dtype="float32") /* ty=Tensor[(1, 5, 15), float32] */;
    acosh(%612) /* ty=Tensor[(1, 5, 15), float32] */
  };
  %613(%var_4408) /* ty=Tensor[(1, 5, 15), float32] */
}

def @func_5093() -> float32 {
  @func_5091() /* ty=float32 */
}

def @func_6793(%var_6783: Tensor[(9, 14, 12), uint32]) -> (Tensor[(9, 14, 12), bool], Tensor[(16, 8, 6), uint8], Tensor[(768), float64]) {
  %614 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 14, 12), uint32] */, dtype="bool") /* ty=Tensor[(9, 14, 12), bool] */;
  %615 = shape_of(%var_6783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%var_6783, dtype="bool") /* ty=Tensor[(9, 14, 12), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %618 = cast(meta[relay.Constant][36] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %619 = cast(meta[relay.Constant][36] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %620 = reshape(%618, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), float64] */;
  %621 = reshape(%619, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), float64] */;
  %622 = greater_equal(%616, %617) /* ty=Tensor[(9, 14, 12), bool] */;
  %623 = @func_2249(%620, %621) /* ty=Tensor[(16, 8, 6), uint8] */;
  (%622, %623, meta[relay.Constant][36] /* ty=Tensor[(768), float64] */)
}

def @func_6483() -> Tensor[(12, 6, 6), float32] {
  %624 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %624.0
}

def @func_5399() -> Tensor[(12, 6, 6), float32] {
  %626 = fn () -> Tensor[(12, 6, 6), float32] {
    %625 = @func_4864() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %625.0
  };
  %626() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_3549(%var_3547: Tensor[(2, 3, 1), int64]) -> Tensor[(2, 3, 5), bool] {
  @func_3546(%var_3547) /* ty=Tensor[(2, 3, 5), bool] */
}

def @func_1621() -> (Tensor[(12, 6, 6), float32],) {
  @func_1619() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_5368(%var_5367: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), bool],) {
  %634 = fn (%var_5347: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), bool],) {
    %627 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %628 = %627.1;
    %629 = cast(%var_5347, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
    %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%628, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %633 = less(%631, %632) /* ty=Tensor[(12, 6, 6), bool] */;
    (%633,)
  };
  %634(%var_5367) /* ty=(Tensor[(12, 6, 6), bool],) */
}

def @func_222(%var_221: Tensor[(13, 15, 5), float32]) -> Tensor[(13, 15, 5), float32] {
  %636 = fn (%var_188: Tensor[(13, 15, 5), float32]) -> Tensor[(13, 15, 5), float32] {
    %635 = cast(%var_188, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
    atanh(%635) /* ty=Tensor[(13, 15, 5), float32] */
  };
  %636(%var_221) /* ty=Tensor[(13, 15, 5), float32] */
}

def @func_1873(%var_1871: Tensor[(5, 195), float32], %var_1872: Tensor[(5, 195), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(5, 195), float64], Tensor[(5, 195), bool]) {
  @func_1869(%var_1871, %var_1872) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(5, 195), float64], Tensor[(5, 195), bool]) */
}

def @func_5767(%var_5766: Tensor[(5, 189), uint32]) -> (Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(5, 189), uint32], Tensor[(12, 6, 6), float32]) {
  %643 = fn (%var_5756: Tensor[(5, 189), uint32]) -> (Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(5, 189), uint32], Tensor[(12, 6, 6), float32]) {
    %637 = @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %638 = cast(%var_5756, dtype="uint32") /* ty=Tensor[(5, 189), uint32] */;
    %639 = reshape(%638, newshape=[7, 9, 15]) /* ty=Tensor[(7, 9, 15), uint32] */;
    %640 = %637.0;
    %641 = @func_2777(%639) /* ty=Tensor[(7, 9, 15), bool] */;
    %642 = @func_3243() /* ty=Tensor[(12, 6, 6), float32] */;
    (%640, %641, %var_5756, %642)
  };
  %643(%var_5766) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(7, 9, 15), bool], Tensor[(5, 189), uint32], Tensor[(12, 6, 6), float32]) */
}

def @func_1743(%var_1741: Tensor[(12, 6, 6), float32]) -> (Tensor[(12, 6, 6), float32],) {
  @func_1740(%var_1741) /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_2165() -> Tensor[(12, 6, 6), float32] {
  %645 = fn () -> Tensor[(12, 6, 6), float32] {
    %644 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %644.0
  };
  %645() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_6518(%var_6516: Tensor[(14, 16, 1), float32], %var_6517: Tensor[(4, 12, 2), int32]) -> (Tensor[(14, 16, 1), float32], Tensor[(4, 12, 2), float32]) {
  @func_6514(%var_6516, %var_6517) /* ty=(Tensor[(14, 16, 1), float32], Tensor[(4, 12, 2), float32]) */
}

def @func_2178() -> (Tensor[(12, 6, 6), float32],) {
  %646 = @func_1688() /* ty=Tensor[(12, 6, 6), float32] */;
  (%646,)
}

def @func_1649() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  @func_1647() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_4082(%var_4073: Tensor[(4, 2, 7), float64], %var_4074: Tensor[(4, 2, 7), float64]) -> Tensor[(4, 2, 7), float64] {
  %647 = cast(%var_4074, dtype="float64") /* ty=Tensor[(4, 2, 7), float64] */;
  %648 = shape_of(%var_4073, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_4073, dtype="float64") /* ty=Tensor[(4, 2, 7), float64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%649, %650) /* ty=Tensor[(4, 2, 7), float64] */
}

def @func_4438() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %655 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
    %651 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %652 = @func_1933() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %653 = %651.0;
    %654 = %652.0;
    (%653, %654)
  };
  %655() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_6144(%var_6142: Tensor[(6, 8, 11), float64], %var_6143: Tensor[(6, 8, 11), float64]) -> (Tensor[(6, 8, 11), float64], Tensor[(975), float32], Tensor[(4, 60), float64], Tensor[(13, 15, 5), float32], Tensor[(6, 8, 11), float32], Tensor[(4, 12, 2), int32]) {
  @func_6140(%var_6142, %var_6143) /* ty=(Tensor[(6, 8, 11), float64], Tensor[(975), float32], Tensor[(4, 60), float64], Tensor[(13, 15, 5), float32], Tensor[(6, 8, 11), float32], Tensor[(4, 12, 2), int32]) */
}

def @func_5295() -> Tensor[(12, 6, 6), float32] {
  @func_5293() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2996(%var_2993: Tensor[(8, 16, 6), float32], %var_2994: Tensor[(252), uint16], %var_2995: Tensor[(1260), bool]) -> (Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) {
  @func_2991(%var_2993, %var_2994, %var_2995) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) */
}

def @func_2113(%var_2111: Tensor[(240), float64]) -> (Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) {
  @func_2110(%var_2111) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */
}

def @func_1401() -> Tensor[(12, 6, 6), float32] {
  %657 = fn () -> Tensor[(12, 6, 6), float32] {
    %656 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %656.0
  };
  %657() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2777(%var_2768: Tensor[(7, 9, 15), uint32]) -> Tensor[(7, 9, 15), bool] {
  %658 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 9, 15), uint32] */, dtype="bool") /* ty=Tensor[(7, 9, 15), bool] */;
  %659 = shape_of(%var_2768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_2768, dtype="bool") /* ty=Tensor[(7, 9, 15), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%660, %661) /* ty=Tensor[(7, 9, 15), bool] */
}

def @func_7061(%var_7058: Tensor[(75), float32], %var_7059: Tensor[(432), float32], %var_7060: Tensor[(945), uint32]) -> (Tensor[(240), float64], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(7, 9, 15), bool], Tensor[(432), float32], Tensor[(945), uint32], Tensor[(12, 6, 6), float32]) {
  %675 = fn (%var_7037: Tensor[(75), float32], %var_7043: Tensor[(432), float32], %var_7044: Tensor[(945), uint32]) -> (Tensor[(240), float64], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(7, 9, 15), bool], Tensor[(432), float32], Tensor[(945), uint32], Tensor[(12, 6, 6), float32]) {
    %662 = @func_2480() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */;
    %663 = cast(%var_7037, dtype="float32") /* ty=Tensor[(75), float32] */;
    %664 = reshape(%663, newshape=[1, 5, 15]) /* ty=Tensor[(1, 5, 15), float32] */;
    %665 = cast(%var_7043, dtype="float32") /* ty=Tensor[(432), float32] */;
    %666 = cast(%var_7044, dtype="uint32") /* ty=Tensor[(945), uint32] */;
    %667 = reshape(%665, newshape=[12, 6, 6]) /* ty=Tensor[(12, 6, 6), float32] */;
    %668 = reshape(%666, newshape=[945]) /* ty=Tensor[(945), uint32] */;
    %669 = @func_5560(%667, %668) /* ty=(Tensor[(12, 6, 6), bool], Tensor[(7, 9, 15), bool], Tensor[(945), uint32], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %670 = @func_6919() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(975), float32]) */;
    %671 = %662.5;
    %672 = @func_4407(%664) /* ty=Tensor[(1, 5, 15), float32] */;
    %673 = %669.1;
    %674 = %670.0;
    (%671, %672, %var_7037, %673, %var_7043, %var_7044, %674)
  };
  %675(%var_7058, %var_7059, %var_7060) /* ty=(Tensor[(240), float64], Tensor[(1, 5, 15), float32], Tensor[(75), float32], Tensor[(7, 9, 15), bool], Tensor[(432), float32], Tensor[(945), uint32], Tensor[(12, 6, 6), float32]) */
}

def @func_6836() -> (Tensor[(12, 6, 6), float32],) {
  @func_6834() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_3454() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  @func_3452() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_826(%var_798: Tensor[(4, 12, 2), float32], %var_799: Tensor[(4, 12, 2), float32]) -> (Tensor[(4, 12, 2), float64],) {
  %676 = cast(%var_799, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %677 = shape_of(%var_798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_798, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %680 = floor_mod(%678, %679) /* ty=Tensor[(4, 12, 2), float32] */;
  %681 = cast(%var_798, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = add(%683, %684) /* ty=Tensor[(4, 12, 2), float64] */;
  (%685,)
}

def @func_3937() -> (Tensor[(12, 6, 6), float32],) {
  %686 = @func_3034() /* ty=Tensor[(12, 6, 6), float32] */;
  (%686,)
}

def @func_2252(%var_2250: Tensor[(16, 8, 6), float64], %var_2251: Tensor[(16, 8, 6), float64]) -> Tensor[(16, 8, 6), uint8] {
  %693 = fn (%var_2240: Tensor[(16, 8, 6), float64], %var_2243: Tensor[(16, 8, 6), float64]) -> Tensor[(16, 8, 6), uint8] {
    %687 = cast(%var_2240, dtype="float64") /* ty=Tensor[(16, 8, 6), float64] */;
    %688 = exp(%687) /* ty=Tensor[(16, 8, 6), float64] */;
    %689 = cast(%var_2243, dtype="uint8") /* ty=Tensor[(16, 8, 6), uint8] */;
    %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
    %691 = cast(%688, dtype="uint8") /* ty=Tensor[(16, 8, 6), uint8] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%691, %692) /* ty=Tensor[(16, 8, 6), uint8] */
  };
  %693(%var_2250, %var_2251) /* ty=Tensor[(16, 8, 6), uint8] */
}

def @func_2110(%var_2106: Tensor[(240), float64]) -> (Tensor[(12, 6, 6), bool], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) {
  %694 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
  %695 = %694.0;
  %696 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 6, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = cast(%var_2106, dtype="float64") /* ty=Tensor[(240), float64] */;
  %701 = reshape(%700, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
  %702 = @func_1967(%701) /* ty=(Tensor[(4, 15, 4), float64],) */;
  %703 = not_equal(%698, %699) /* ty=Tensor[(12, 6, 6), bool] */;
  %704 = %702.0;
  (%703, %704, %var_2106)
}

def @func_4269(%var_4267: Tensor[(35), int8], %var_4268: Tensor[(768), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(7, 5, ?), bool], Tensor[(35), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(252), uint16]) {
  @func_4265(%var_4267, %var_4268) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float64], Tensor[(7, 5, ?), bool], Tensor[(35), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(252), uint16]) */
}

def @func_2856(%var_2854: Tensor[(4, 60), float64], %var_2855: Tensor[(12, 6, 6), float32]) -> (Tensor[(4, 15, 4), float64], Tensor[(4, 60), float64], Tensor[(12, 6, 6), float64]) {
  %716 = fn (%var_2836: Tensor[(4, 60), float64], %var_2841: Tensor[(12, 6, 6), float32]) -> (Tensor[(4, 15, 4), float64], Tensor[(4, 60), float64], Tensor[(12, 6, 6), float64]) {
    %705 = cast(%var_2836, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
    %706 = reshape(%705, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
    %707 = @func_1967(%706) /* ty=(Tensor[(4, 15, 4), float64],) */;
    %708 = @func_2065() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
    %709 = %708.1;
    %710 = cast(%var_2841, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
    %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(%709, dtype="float64") /* ty=Tensor[(12, 6, 6), float64] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %714 = %707.0;
    %715 = power(%712, %713) /* ty=Tensor[(12, 6, 6), float64] */;
    (%714, %var_2836, %715)
  };
  %716(%var_2854, %var_2855) /* ty=(Tensor[(4, 15, 4), float64], Tensor[(4, 60), float64], Tensor[(12, 6, 6), float64]) */
}

def @func_2320() -> (Tensor[(12, 6, 6), float32],) {
  @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_2482() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) {
  @func_2480() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float64], Tensor[(240), float64]) */
}

def @func_1386() -> (Tensor[(12, 6, 6), float32],) {
  %717 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %718 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(12, 6, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %721 = divide(%719, %720) /* ty=Tensor[(12, 6, 6), float32] */;
  (%721,)
}

def @func_6971() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  @func_6969() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_3227() -> (Tensor[(12, 6, 6), float32],) {
  %722 = @func_1688() /* ty=Tensor[(12, 6, 6), float32] */;
  (%722,)
}

def @func_3736() -> (Tensor[(12, 6, 6), float32], Tensor[(4, 60), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64]) {
  %723 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
  %724 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %725 = %723.0;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(12, 6, 6), float32] */;
  %727 = reshape(%724, newshape=[4, 60]) /* ty=Tensor[(4, 60), float64] */;
  %728 = reshape(%726, newshape=[12, 6, 6]) /* ty=Tensor[(12, 6, 6), float32] */;
  %729 = @func_2853(%727, %728) /* ty=(Tensor[(4, 15, 4), float64], Tensor[(4, 60), float64], Tensor[(12, 6, 6), float64]) */;
  %730 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %731 = reshape(%730, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), float64] */;
  %732 = @func_1967(%731) /* ty=(Tensor[(4, 15, 4), float64],) */;
  %733 = %729.1;
  %734 = %732.0;
  (%725, %733, meta[relay.Constant][41] /* ty=Tensor[(240), float64] */, %734)
}

def @func_4551() -> (Tensor[(4, 12, 2), int32], Tensor[(12, 6, 6), float32]) {
  %745 = fn () -> (Tensor[(4, 12, 2), int32], Tensor[(12, 6, 6), float32]) {
    %735 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
    %736 = %735.2;
    %737 = cast(%736, dtype="float32") /* ty=Tensor[(4, 12, 2), float32] */;
    %738 = acos(%737) /* ty=Tensor[(4, 12, 2), float32] */;
    %739 = cast(%736, dtype="int32") /* ty=Tensor[(4, 12, 2), int32] */;
    %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%738, dtype="int32") /* ty=Tensor[(4, 12, 2), int32] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %743 = multiply(%741, %742) /* ty=Tensor[(4, 12, 2), int32] */;
    %744 = @func_2164() /* ty=Tensor[(12, 6, 6), float32] */;
    (%743, %744)
  };
  %745() /* ty=(Tensor[(4, 12, 2), int32], Tensor[(12, 6, 6), float32]) */
}

def @func_536(%var_533: Tensor[(6, 3, 14), uint16], %var_534: Tensor[(6, 3, 14), uint16], %var_535: Tensor[(120), float32]) -> (Tensor[(6, 3, 14), uint64], Tensor[(8, 3, 5), float64], Tensor[(120), float32], Tensor[(325, 3), float32], Tensor[(6, 3, 14), float64], Tensor[(120), float32], Tensor[(1260), uint8], Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32]) {
  %778 = fn (%var_476: Tensor[(6, 3, 14), uint16], %var_477: Tensor[(6, 3, 14), uint16], %var_502: Tensor[(120), float32]) -> (Tensor[(6, 3, 14), uint64], Tensor[(8, 3, 5), float64], Tensor[(120), float32], Tensor[(325, 3), float32], Tensor[(6, 3, 14), float64], Tensor[(120), float32], Tensor[(1260), uint8], Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32]) {
    %746 = cast(%var_477, dtype="uint16") /* ty=Tensor[(6, 3, 14), uint16] */;
    %747 = shape_of(%var_476, dtype="int32") /* ty=Tensor[(3), int32] */;
    %748 = cast(%var_476, dtype="uint16") /* ty=Tensor[(6, 3, 14), uint16] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %750 = logical_xor(%748, %749) /* ty=Tensor[(6, 3, 14), uint16] */;
    %751 = cast(%750, dtype="uint64") /* ty=Tensor[(6, 3, 14), uint64] */;
    %752 = shape_of(%var_476, dtype="int32") /* ty=Tensor[(3), int32] */;
    %753 = cast(%var_476, dtype="uint64") /* ty=Tensor[(6, 3, 14), uint64] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %755 = cast(%var_502, dtype="float32") /* ty=Tensor[(120), float32] */;
    %756 = cast(meta[relay.Constant][42] /* ty=Tensor[(325, 3), float32] */, dtype="float32") /* ty=Tensor[(325, 3), float32] */;
    %757 = reshape(%755, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
    %758 = reshape(%756, newshape=[975]) /* ty=Tensor[(975), float32] */;
    %759 = @func_424(%757, %758) /* ty=(Tensor[(13, 15, 5), float32], Tensor[(975), float32], Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), float64], Tensor[(13, 15, 5), float32]) */;
    %760 = cast(%750, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
    %761 = log10(%760) /* ty=Tensor[(6, 3, 14), float64] */;
    %762 = cast(%761, dtype="float64") /* ty=Tensor[(6, 3, 14), float64] */;
    %763 = cast(meta[relay.Constant][43] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
    %764 = reshape(%763, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
    %765 = @func_461(%764) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
    %766 = cast(meta[relay.Constant][43] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
    %767 = reshape(%766, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
    %768 = @func_461(%767) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
    %769 = cast(meta[relay.Constant][43] /* ty=Tensor[(1260), uint8] */, dtype="uint8") /* ty=Tensor[(1260), uint8] */;
    %770 = reshape(%769, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), uint8] */;
    %771 = @func_461(%770) /* ty=(Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32], Tensor[(120), float32], Tensor[(975), float32], Tensor[(14, 6, 15), float64]) */;
    %772 = bitwise_and(%753, %754) /* ty=Tensor[(6, 3, 14), uint64] */;
    %773 = %759.3;
    %774 = atanh(%762) /* ty=Tensor[(6, 3, 14), float64] */;
    %775 = %765.2;
    %776 = %768.0;
    %777 = %771.1;
    (%772, %773, %var_502, meta[relay.Constant][42] /* ty=Tensor[(325, 3), float32] */, %774, %775, meta[relay.Constant][43] /* ty=Tensor[(1260), uint8] */, %776, %777)
  };
  %778(%var_533, %var_534, %var_535) /* ty=(Tensor[(6, 3, 14), uint64], Tensor[(8, 3, 5), float64], Tensor[(120), float32], Tensor[(325, 3), float32], Tensor[(6, 3, 14), float64], Tensor[(120), float32], Tensor[(1260), uint8], Tensor[(14, 6, 15), bool], Tensor[(13, 15, 5), float32]) */
}

def @func_3899(%var_3898: Tensor[(5, 96), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) {
  %789 = fn (%var_3888: Tensor[(5, 96), float32]) -> (Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) {
    %779 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %780 = @func_2510() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(1, 96), float32], Tensor[(4, 12, 2), float64]) */;
    %781 = %780.1;
    %782 = cast(%781, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
    %783 = cast(%var_3888, dtype="float32") /* ty=Tensor[(5, 96), float32] */;
    %784 = cast(%781, dtype="bool") /* ty=Tensor[(1, 96), bool] */;
    %785 = cast(%var_3888, dtype="bool") /* ty=Tensor[(5, 96), bool] */;
    %786 = %779.0;
    %787 = mod(%782, %783) /* ty=Tensor[(5, 96), float32] */;
    %788 = equal(%784, %785) /* ty=Tensor[(5, 96), bool] */;
    (%786, %787, %788)
  };
  %789(%var_3898) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) */
}

def @func_6687() -> Tensor[(4, 12, 2), int32] {
  %790 = fn () -> Tensor[(4, 12, 2), int32] {
    @func_4697() /* ty=Tensor[(4, 12, 2), int32] */
  };
  %790() /* ty=Tensor[(4, 12, 2), int32] */
}

def @func_6650(%var_6637: Tensor[(2, 9, 14), float64]) -> (Tensor[(2, 9, 14), float64], Tensor[(5, 96), bool], Tensor[(480), float32]) {
  %791 = cast(%var_6637, dtype="float64") /* ty=Tensor[(2, 9, 14), float64] */;
  %792 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %793 = reshape(%792, newshape=[5, 96]) /* ty=Tensor[(5, 96), float32] */;
  %794 = @func_3897(%793) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(5, 96), float32], Tensor[(5, 96), bool]) */;
  %795 = sqrt(%791) /* ty=Tensor[(2, 9, 14), float64] */;
  %796 = %794.2;
  (%795, %796, meta[relay.Constant][44] /* ty=Tensor[(480), float32] */)
}

def @func_5496() -> Tensor[(12, 6, 6), bool] {
  @func_5494() /* ty=Tensor[(12, 6, 6), bool] */
}

def @func_1542() -> Tensor[(12, 6, 6), float32] {
  %798 = fn () -> Tensor[(12, 6, 6), float32] {
    %797 = @func_1465() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %797.0
  };
  %798() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_7101() -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
  %802 = fn () -> (Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) {
    %799 = @func_2129() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %800 = @func_2209() /* ty=Tensor[(12, 6, 6), float32] */;
    %801 = %799.0;
    (%800, %801)
  };
  %802() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */
}

def @func_4822() -> Tensor[(12, 6, 6), float32] {
  %804 = fn () -> Tensor[(12, 6, 6), float32] {
    %803 = @func_3326() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %803.0
  };
  %804() /* ty=Tensor[(12, 6, 6), float32] */
}

def @func_2180() -> (Tensor[(12, 6, 6), float32],) {
  @func_2178() /* ty=(Tensor[(12, 6, 6), float32],) */
}

def @func_5494() -> Tensor[(12, 6, 6), bool] {
  %805 = @func_1801() /* ty=(Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32]) */;
  %806 = %805.2;
  %807 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 6, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%806, dtype="bool") /* ty=Tensor[(12, 6, 6), bool] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%809, %810) /* ty=Tensor[(12, 6, 6), bool] */
}

def @func_3853(%var_3850: Tensor[(768), float32], %var_3851: Tensor[(252), uint16], %var_3852: Tensor[(252), uint16]) -> (Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(630, 2), bool], Tensor[(252), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float32], Tensor[(112), float64]) {
  %838 = fn (%var_3764: Tensor[(768), float32], %var_3765: Tensor[(252), uint16], %var_3781: Tensor[(252), uint16]) -> (Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(630, 2), bool], Tensor[(252), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float32], Tensor[(112), float64]) {
    %811 = @func_1386() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %812 = cast(%var_3781, dtype="int32") /* ty=Tensor[(252), int32] */;
    %813 = shape_of(%var_3765, dtype="int32") /* ty=Tensor[(1), int32] */;
    %814 = cast(%var_3765, dtype="int32") /* ty=Tensor[(252), int32] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?), int32] */;
    %816 = bitwise_xor(%814, %815) /* ty=Tensor[(252), int32] */;
    %817 = cast(%816, dtype="int8") /* ty=Tensor[(252), int8] */;
    %818 = shape_of(%var_3781, dtype="int32") /* ty=Tensor[(1), int32] */;
    %819 = cast(%var_3781, dtype="int8") /* ty=Tensor[(252), int8] */;
    %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?), int8] */;
    %821 = @func_2318() /* ty=(Tensor[(12, 6, 6), float32],) */;
    %822 = cast(%var_3764, dtype="float32") /* ty=Tensor[(768), float32] */;
    %823 = cast(%var_3765, dtype="uint16") /* ty=Tensor[(252), uint16] */;
    %824 = cast(meta[relay.Constant][46] /* ty=Tensor[(630, 2), bool] */, dtype="bool") /* ty=Tensor[(630, 2), bool] */;
    %825 = reshape(%822, newshape=[8, 16, 6]) /* ty=Tensor[(8, 16, 6), float32] */;
    %826 = reshape(%823, newshape=[252]) /* ty=Tensor[(252), uint16] */;
    %827 = reshape(%824, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
    %828 = @func_2991(%825, %826, %827) /* ty=(Tensor[(8, 16, 6), float64], Tensor[(4, 15, 4), float64], Tensor[(240), float64], Tensor[(4, 15, 4), float64], Tensor[(12, 6, 6), float32], Tensor[(112), float64], Tensor[(252), uint16], Tensor[(1260), bool], Tensor[(8, 16, 6), float64]) */;
    %829 = %828.1;
    %830 = cast(%829, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
    %831 = @func_2733() /* ty=(Tensor[(240), float64], Tensor[(12, 6, 6), float32], Tensor[(7, 4, 4), float64], Tensor[(112), float64], Tensor[(12, 6, 6), float32]) */;
    %832 = %811.0;
    %833 = left_shift(%819, %820) /* ty=Tensor[(252), int8] */;
    %834 = @func_3703() /* ty=Tensor[(12, 6, 6), float32] */;
    %835 = %821.0;
    %836 = tan(%830) /* ty=Tensor[(4, 15, 4), float32] */;
    %837 = %831.3;
    (%832, %var_3764, meta[relay.Constant][46] /* ty=Tensor[(630, 2), bool] */, %833, %834, %835, %836, %837)
  };
  %838(%var_3850, %var_3851, %var_3852) /* ty=(Tensor[(12, 6, 6), float32], Tensor[(768), float32], Tensor[(630, 2), bool], Tensor[(252), int8], Tensor[(12, 6, 6), float32], Tensor[(12, 6, 6), float32], Tensor[(4, 15, 4), float32], Tensor[(112), float64]) */
}

def @func_2318() -> (Tensor[(12, 6, 6), float32],) {
  %839 = @func_1541() /* ty=Tensor[(12, 6, 6), float32] */;
  (%839,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen273/build/output.py", line 2362, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:02:45] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

