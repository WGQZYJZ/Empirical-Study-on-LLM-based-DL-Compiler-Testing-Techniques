==========mod==========
#[version = "0.0.5"]
def @func_5104() -> Tensor[(12, 12, 7), int32] {
  @func_3578() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_2882() -> Tensor[(12, 12, 7), uint64] {
  %0 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
  %0.0
}

def @func_2075() -> Tensor[(12, 12, 7), int32] {
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %2 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%3, %4) /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_4961(%var_4911: Tensor[(16, 7, 2), float32]) -> (Tensor[(12, 12, 7), uint64], Tensor[(15, 2, 7), float64], Tensor[(35, 6), float64], Tensor[(16, 7, 2), bool]) {
  %5 = cast(meta[relay.Constant][2] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
  %6 = reshape(%5, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), float64] */;
  %7 = @func_3115(%6) /* ty=(Tensor[(15, 2, 7), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), float64]) */;
  %8 = cast(%var_4911, dtype="float32") /* ty=Tensor[(16, 7, 2), float32] */;
  %9 = sin(%8) /* ty=Tensor[(16, 7, 2), float32] */;
  %10 = cast(%var_4911, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %14 = less_equal(%12, %13) /* ty=Tensor[(16, 7, 2), bool] */;
  %15 = cast(%9, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %19 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %20 = %7.0;
  %21 = logical_and(%17, %18) /* ty=Tensor[(16, 7, 2), bool] */;
  (%19, %20, meta[relay.Constant][2] /* ty=Tensor[(35, 6), float64] */, %21)
}

def @func_4607() -> (Tensor[(12, 12, 7), int32], Tensor[(1008), float32]) {
  %22 = @func_3179() /* ty=Tensor[(1008), int32] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %24 = asinh(%23) /* ty=Tensor[(1008), float32] */;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %26 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  %27 = cos(%25) /* ty=Tensor[(1008), float32] */;
  (%26, %27)
}

def @func_5162(%var_5125: Tensor[(1, 3, 16), int64], %var_5126: Tensor[(9, 3, 16), int64], %var_5133: Tensor[(1008), float64]) -> (Tensor[(9, 3, 16), bool], Tensor[(1008), uint8], Tensor[(9, 3, 16), int32]) {
  %28 = cast(%var_5125, dtype="int64") /* ty=Tensor[(1, 3, 16), int64] */;
  %29 = cast(%var_5126, dtype="int64") /* ty=Tensor[(9, 3, 16), int64] */;
  %30 = add(%28, %29) /* ty=Tensor[(9, 3, 16), int64] */;
  %31 = cast(%30, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %32 = shape_of(%var_5126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_5126, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = cast(%var_5133, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %36 = reshape(%35, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), float64] */;
  %37 = @func_4391(%36) /* ty=Tensor[(12, 12, 7), float64] */;
  %38 = cast(%37, dtype="uint8") /* ty=Tensor[(12, 12, 7), uint8] */;
  %39 = shape_of(%var_5133, dtype="int32") /* ty=Tensor[(1), int32] */;
  %40 = cast(%var_5133, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 3, 16), int64] */, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
  %43 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%30, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %46 = logical_or(%33, %34) /* ty=Tensor[(9, 3, 16), bool] */;
  %47 = add(%40, %41) /* ty=Tensor[(1008), uint8] */;
  %48 = bitwise_xor(%44, %45) /* ty=Tensor[(9, 3, 16), int32] */;
  (%46, %47, %48)
}

def @func_6570() -> (Tensor[(12, 12, 7), float64], Tensor[(12, 12, 7), int32]) {
  %49 = @func_3681() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) */;
  %50 = %49.0;
  %51 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  (%50, %51)
}

def @func_3438(%var_3412: Tensor[(12, 12, 7), uint64]) -> (Tensor[(12, 12, 7), int64],) {
  %52 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %53 = cast(%var_3412, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %57 = subtract(%55, %56) /* ty=Tensor[(12, 12, 7), int64] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %59 = cos(%58) /* ty=Tensor[(12, 12, 7), float64] */;
  %60 = cast(%52, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %64 = minimum(%62, %63) /* ty=Tensor[(12, 12, 7), int64] */;
  (%64,)
}

def @func_2786(%var_2781: Tensor[(14), uint64], %var_2782: Tensor[(504), int64]) -> (Tensor[(12, 12, 7), uint64], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(504), int64]) {
  %65 = cast(%var_2781, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %66 = cast(%var_2782, dtype="int64") /* ty=Tensor[(504), int64] */;
  %67 = reshape(%65, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
  %68 = reshape(%66, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %69 = @func_2754(%67, %68) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
  %70 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %71 = %69.5;
  (%70, %71, %var_2781, %var_2782)
}

def @func_3017() -> (Tensor[(96, 1), float64],) {
  %72 = @func_2962() /* ty=(Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) */;
  %73 = %72.0;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %75 = tan(%74) /* ty=Tensor[(96, 1), float64] */;
  (%75,)
}

def @func_1953(%var_1936: Tensor[(7, 2, 9), float32]) -> (Tensor[(7, 2, 9), float32],) {
  %76 = cast(%var_1936, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %77 = acosh(%76) /* ty=Tensor[(7, 2, 9), float32] */;
  %78 = cast(%var_1936, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %82 = mod(%80, %81) /* ty=Tensor[(7, 2, 9), float32] */;
  (%82,)
}

def @func_219(%var_174: Tensor[(4, 15, 16), uint16]) -> (Tensor[(4, 15, 16), uint16], Tensor[(4, 15, 16), float32]) {
  %83 = cast(%var_174, dtype="uint16") /* ty=Tensor[(4, 15, 16), uint16] */;
  %84 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(4, 15, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 15, 16), uint16] */, dtype="uint16") /* ty=Tensor[(4, 15, 16), uint16] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 15, 16), uint16] */, dtype="float64") /* ty=Tensor[(4, 15, 16), float64] */;
  %88 = atan(%87) /* ty=Tensor[(4, 15, 16), float64] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(4, 15, 16), float32] */;
  %90 = maximum(%85, %86) /* ty=Tensor[(4, 15, 16), uint16] */;
  %91 = sinh(%89) /* ty=Tensor[(4, 15, 16), float32] */;
  (%90, %91)
}

def @func_4130(%var_4106: Tensor[(6, 84), int64], %var_4117: Tensor[(135), float64]) -> (Tensor[(126), float32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(6, 84), int64], Tensor[(9, 3, 5), float64], Tensor[(135), float64]) {
  %92 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %94 = cast(%var_4106, dtype="int64") /* ty=Tensor[(6, 84), int64] */;
  %95 = reshape(%93, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float64] */;
  %96 = reshape(%94, newshape=[1, 504]) /* ty=Tensor[(1, 504), int64] */;
  %97 = @func_2649(%95, %96) /* ty=(Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) */;
  %98 = cast(%var_4117, dtype="float64") /* ty=Tensor[(135), float64] */;
  %99 = reshape(%98, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float64] */;
  %100 = @func_1420(%99) /* ty=(Tensor[(9, 3, 5), float64],) */;
  %101 = %92.2;
  %102 = %97.1;
  %103 = %100.0;
  (%101, %102, meta[relay.Constant][5] /* ty=Tensor[(1200), float64] */, %var_4106, %103, %var_4117)
}

def @func_3179() -> Tensor[(1008), int32] {
  %104 = @func_2962() /* ty=(Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) */;
  %104.2
}

def @func_1021(%var_987: Tensor[(3, 8, 4), int32], %var_998: Tensor[(960), uint16]) -> (Tensor[(3, 8, 4), int32], Tensor[(960), float64]) {
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 8, 4), int32] */, dtype="int32") /* ty=Tensor[(3, 8, 4), int32] */;
  %106 = shape_of(%var_987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_987, dtype="int32") /* ty=Tensor[(3, 8, 4), int32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %109 = cast(%var_998, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %110 = reshape(%109, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), uint16] */;
  %111 = @func_219(%110) /* ty=(Tensor[(4, 15, 16), uint16], Tensor[(4, 15, 16), float32]) */;
  %112 = %111.1;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(4, 15, 16), float64] */;
  %114 = shape_of(%var_998, dtype="int32") /* ty=Tensor[(1), int32] */;
  %115 = cast(%var_998, dtype="float64") /* ty=Tensor[(960), float64] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?), float64] */;
  %117 = bitwise_xor(%107, %108) /* ty=Tensor[(3, 8, 4), int32] */;
  %118 = power(%115, %116) /* ty=Tensor[(960), float64] */;
  (%117, %118)
}

def @func_3978() -> (Tensor[(12, 12, 7), int32],) {
  %119 = @func_2578() /* ty=(Tensor[(12, 12, 7), int32],) */;
  %120 = %119.0;
  (%120,)
}

def @func_6642() -> (Tensor[(420), float32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), bool]) {
  %121 = @func_5451() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) */;
  %122 = @func_4667() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) */;
  %123 = %122.2;
  %124 = cast(%123, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %125 = reshape(%124, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
  %126 = @func_4066(%125) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) */;
  %127 = %121.1;
  %128 = %126.0;
  (%127, %123, %128)
}

def @func_3209() -> Tensor[(12, 12, 7), int32] {
  @func_2075() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_571(%var_549: Tensor[(7, 1, 2), uint64], %var_550: Tensor[(7, 6, 2), uint64]) -> (Tensor[(7, 6, 2), float32],) {
  %129 = cast(%var_549, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
  %130 = cast(%var_550, dtype="bool") /* ty=Tensor[(7, 6, 2), bool] */;
  %131 = less_equal(%129, %130) /* ty=Tensor[(7, 6, 2), bool] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(7, 6, 2), float32] */;
  %133 = rsqrt(%132) /* ty=Tensor[(7, 6, 2), float32] */;
  (%133,)
}

def @func_4342() -> Tensor[(12, 12, 7), int32] {
  @func_3287() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_4548() -> Tensor[(12, 12, 7), bool] {
  %134 = @func_4342() /* ty=Tensor[(12, 12, 7), int32] */;
  %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 12, 7), int32] */, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%137, %138) /* ty=Tensor[(12, 12, 7), bool] */
}

def @func_2327(%var_2298: Tensor[(96, 1), float32]) -> (Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64], Tensor[(96, ?), bool], Tensor[(96, ?), uint16], Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) {
  %139 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %140 = cast(meta[relay.Constant][9] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %141 = reshape(%139, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %142 = reshape(%140, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %143 = @func_571(%141, %142) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %144 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %145 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %148 = erf(%147) /* ty=Tensor[(96, 1), float32] */;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %150 = log10(%149) /* ty=Tensor[(96, 1), float32] */;
  %151 = cast(%150, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %152 = shape_of(%var_2298, dtype="int32") /* ty=Tensor[(2), int32] */;
  %153 = cast(%var_2298, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %155 = cast(%var_2298, dtype="int16") /* ty=Tensor[(96, 1), int16] */;
  %156 = shape_of(%150, dtype="int32") /* ty=Tensor[(2), int32] */;
  %157 = cast(%150, dtype="int16") /* ty=Tensor[(96, 1), int16] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %159 = bitwise_or(%157, %158) /* ty=Tensor[(96, ?), int16] */;
  %160 = cast(%159, dtype="uint16") /* ty=Tensor[(96, ?), uint16] */;
  %161 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %162 = cast(%148, dtype="uint16") /* ty=Tensor[(96, 1), uint16] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %164 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %165 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %167 = reshape(%165, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %168 = reshape(%166, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %169 = @func_571(%167, %168) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %170 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %171 = %143.0;
  %172 = %144.3;
  %173 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %174 = not_equal(%153, %154) /* ty=Tensor[(96, ?), bool] */;
  %175 = logical_xor(%162, %163) /* ty=Tensor[(96, ?), uint16] */;
  %176 = %164.0;
  %177 = %169.0;
  %178 = %170.3;
  %179 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  (%171, meta[relay.Constant][8] /* ty=Tensor[(14, 1), uint64] */, meta[relay.Constant][9] /* ty=Tensor[(84), uint64] */, %172, %173, %174, %175, %176, %177, %178, %179)
}

def @func_3475() -> Tensor[(1008), int32] {
  @func_3179() /* ty=Tensor[(1008), int32] */
}

def @func_5805(%var_5790: Tensor[(5, 9, 1), float32]) -> (Tensor[(5, 9, 1), float32], Tensor[(1008), int32], Tensor[(15, 7, 2), float64], Tensor[(210), float64]) {
  %180 = cast(%var_5790, dtype="float32") /* ty=Tensor[(5, 9, 1), float32] */;
  %181 = @func_2962() /* ty=(Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) */;
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %183 = reshape(%182, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), float64] */;
  %184 = asinh(%180) /* ty=Tensor[(5, 9, 1), float32] */;
  %185 = %181.2;
  %186 = @func_3565(%183) /* ty=Tensor[(15, 7, 2), float64] */;
  (%184, %185, %186, meta[relay.Constant][10] /* ty=Tensor[(210), float64] */)
}

def @func_3800() -> Tensor[(12, 12, 7), int32] {
  @func_3209() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_4268(%var_4230: Tensor[(13, 4, 9), uint16], %var_4251: Tensor[(420), float32]) -> (Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) {
  %187 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %188 = cast(%var_4230, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
  %189 = not_equal(%187, %188) /* ty=Tensor[(13, 4, 9), bool] */;
  %190 = cast(%189, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
  %191 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %192 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), int32] */, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %193 = reshape(%192, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
  %194 = @func_4197(%193) /* ty=(Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) */;
  %195 = cast(%var_4251, dtype="float32") /* ty=Tensor[(420), float32] */;
  %196 = reshape(%195, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
  %197 = greater_equal(%190, %191) /* ty=Tensor[(13, 4, 9), bool] */;
  %198 = %194.0;
  %199 = @func_3142(%196) /* ty=Tensor[(14, 3, 10), float32] */;
  (%197, %198, meta[relay.Constant][12] /* ty=Tensor[(1008), int32] */, %199, %var_4251)
}

def @func_3750() -> (Tensor[(1008), int32],) {
  %200 = @func_3475() /* ty=Tensor[(1008), int32] */;
  (%200,)
}

def @func_5621(%var_5604: Tensor[(96, 4), float64]) -> (Tensor[(96, 4), uint32],) {
  %201 = @func_3017() /* ty=(Tensor[(96, 1), float64],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %204 = cast(%var_5604, dtype="bool") /* ty=Tensor[(96, 4), bool] */;
  %205 = not_equal(%203, %204) /* ty=Tensor[(96, 4), bool] */;
  %206 = cast(%205, dtype="uint32") /* ty=Tensor[(96, 4), uint32] */;
  %207 = cast(%202, dtype="uint32") /* ty=Tensor[(96, 1), uint32] */;
  %208 = left_shift(%206, %207) /* ty=Tensor[(96, 4), uint32] */;
  (%208,)
}

def @func_4174() -> (Tensor[(15, 9, 7), float64], Tensor[(15, 9, 7), float32]) {
  %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 7), float64] */;
  %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 9, 7), float64] */, dtype="float32") /* ty=Tensor[(15, 9, 7), float32] */;
  %211 = exp(%209) /* ty=Tensor[(15, 9, 7), float64] */;
  %212 = log10(%210) /* ty=Tensor[(15, 9, 7), float32] */;
  (%211, %212)
}

def @func_2754(%var_2742: Tensor[(14, 1), uint64], %var_2747: Tensor[(504), int64]) -> (Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) {
  %213 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %214 = cast(%var_2742, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %216 = reshape(%214, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %217 = reshape(%215, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %218 = @func_571(%216, %217) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %219 = cast(%var_2747, dtype="int64") /* ty=Tensor[(504), int64] */;
  %220 = %218.0;
  %221 = cast(%220, dtype="uint64") /* ty=Tensor[(7, 6, 2), uint64] */;
  %222 = reshape(%219, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %223 = reshape(%221, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %224 = @func_2401(%222, %223) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) */;
  %225 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %226 = %213.0;
  %227 = %224.4;
  %228 = %225.2;
  (%226, %220, %var_2742, meta[relay.Constant][14] /* ty=Tensor[(84), uint64] */, %227, %var_2747, %228)
}

def @func_5541(%var_5527: Tensor[(1008), int32]) -> (Tensor[(432), float32], Tensor[(1008), int32], Tensor[(12, 12, 7), float32]) {
  %229 = cast(%var_5527, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %230 = reshape(%229, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
  %231 = @func_4066(%230) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(12, 12, 7), float32] */;
  %234 = @func_5112() /* ty=Tensor[(432), float32] */;
  %235 = cosh(%233) /* ty=Tensor[(12, 12, 7), float32] */;
  (%234, %var_5527, %235)
}

def @func_1648(%var_1644: Tensor[(9, 7, 8), int64]) -> (Tensor[(9, 7, 8), int64],) {
  %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 1, 8), int64] */, dtype="int64") /* ty=Tensor[(9, 1, 8), int64] */;
  %237 = cast(%var_1644, dtype="int64") /* ty=Tensor[(9, 7, 8), int64] */;
  %238 = bitwise_or(%236, %237) /* ty=Tensor[(9, 7, 8), int64] */;
  (%238,)
}

def @func_2649(%var_2613: Tensor[(10, 15, 8), float64], %var_2645: Tensor[(1, 504), int64]) -> (Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) {
  %239 = cast(%var_2613, dtype="float64") /* ty=Tensor[(10, 15, 8), float64] */;
  %240 = cast(%var_2645, dtype="int64") /* ty=Tensor[(1, 504), int64] */;
  %241 = reshape(%240, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
  %242 = @func_1648(%241) /* ty=(Tensor[(9, 7, 8), int64],) */;
  %243 = atan(%239) /* ty=Tensor[(10, 15, 8), float64] */;
  %244 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %245 = %242.0;
  (%243, %244, %245, %var_2645)
}

def @func_5945(%var_5891: Tensor[(3136), float32], %var_5892: Tensor[(693), float64], %var_5902: Tensor[(1008), int32]) -> (Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) {
  %246 = @func_5451() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) */;
  %247 = cast(%var_5902, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %248 = reshape(%247, newshape=[1008]) /* ty=Tensor[(1008), int32] */;
  %249 = @func_5541(%248) /* ty=(Tensor[(432), float32], Tensor[(1008), int32], Tensor[(12, 12, 7), float32]) */;
  %250 = cast(%var_5891, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %251 = cast(%var_5891, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %252 = cast(%var_5892, dtype="float64") /* ty=Tensor[(693), float64] */;
  %253 = reshape(%250, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float32] */;
  %254 = reshape(%251, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float32] */;
  %255 = reshape(%252, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %256 = @func_2704(%253, %254, %255) /* ty=(Tensor[(16, 14, 14), float32], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(11, 9, 7), float64], Tensor[(693), float64]) */;
  %257 = %256.3;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %259 = sigmoid(%258) /* ty=Tensor[(11, 9, 7), float64] */;
  %260 = cast(%var_5892, dtype="uint32") /* ty=Tensor[(693), uint32] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="uint32") /* ty=Tensor[(11, 9, 7), uint32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %264 = @func_5257() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) */;
  %265 = %246.3;
  %266 = %249.0;
  %267 = logical_xor(%262, %263) /* ty=Tensor[(11, 9, 7), uint32] */;
  %268 = %264.2;
  (%265, %var_5891, %266, %var_5902, %267, %268)
}

def @func_4904() -> (Tensor[(1008), bool], Tensor[(432), float32]) {
  %269 = @func_3750() /* ty=(Tensor[(1008), int32],) */;
  %270 = %269.0;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %272 = acos(%271) /* ty=Tensor[(1008), float32] */;
  %273 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), float32] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(1), int32] */;
  %275 = cast(%272, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?), bool] */;
  %277 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %278 = greater(%275, %276) /* ty=Tensor[(1008), bool] */;
  %279 = %277.0;
  (%278, %279)
}

def @func_4300(%var_4295: Tensor[(7, 10, 10), uint16]) -> (Tensor[(7, 10, 10), uint16],) {
  %280 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 10, 10), uint16] */, dtype="uint16") /* ty=Tensor[(7, 10, 10), uint16] */;
  %281 = shape_of(%var_4295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%var_4295, dtype="uint16") /* ty=Tensor[(7, 10, 10), uint16] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %284 = left_shift(%282, %283) /* ty=Tensor[(7, 10, 10), uint16] */;
  (%284,)
}

def @func_4797(%var_4786: Tensor[(960), uint16]) -> (Tensor[(12, 12, 7), uint64], Tensor[(1008), int32], Tensor[(960), float64], Tensor[(96), int32], Tensor[(960), uint16]) {
  %285 = cast(meta[relay.Constant][18] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %286 = cast(%var_4786, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %287 = reshape(%285, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int32] */;
  %288 = reshape(%286, newshape=[960]) /* ty=Tensor[(960), uint16] */;
  %289 = @func_1021(%287, %288) /* ty=(Tensor[(3, 8, 4), int32], Tensor[(960), float64]) */;
  %290 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %291 = @func_3179() /* ty=Tensor[(1008), int32] */;
  %292 = %289.1;
  (%290, %291, %292, meta[relay.Constant][18] /* ty=Tensor[(96), int32] */, %var_4786)
}

def @func_5001() -> (Tensor[(12, 12, 7), float32],) {
  %293 = @func_4342() /* ty=Tensor[(12, 12, 7), int32] */;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(12, 12, 7), float32] */;
  %295 = asinh(%294) /* ty=Tensor[(12, 12, 7), float32] */;
  (%295,)
}

def @func_3381(%var_3334: Tensor[(12, 12, 7), int32], %var_3340: Tensor[(1200), float64], %var_3341: Tensor[(504), int64]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(504), int64], Tensor[(9, 7, 8), int64], Tensor[(14, 1), uint64], Tensor[(7, 2), uint64], Tensor[(12, 12, 7), uint64]) {
  %296 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %297 = cast(%var_3334, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %301 = cast(%var_3340, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %302 = cast(%var_3341, dtype="int64") /* ty=Tensor[(504), int64] */;
  %303 = reshape(%301, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float64] */;
  %304 = reshape(%302, newshape=[1, 504]) /* ty=Tensor[(1, 504), int64] */;
  %305 = @func_2649(%303, %304) /* ty=(Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) */;
  %306 = cast(%var_3341, dtype="int64") /* ty=Tensor[(504), int64] */;
  %307 = reshape(%306, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
  %308 = @func_1648(%307) /* ty=(Tensor[(9, 7, 8), int64],) */;
  %309 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 2), uint64] */;
  %310 = %308.0;
  %311 = cast(%310, dtype="int64") /* ty=Tensor[(9, 7, 8), int64] */;
  %312 = reshape(%309, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
  %313 = reshape(%311, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %314 = @func_2754(%312, %313) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
  %315 = bitwise_or(%299, %300) /* ty=Tensor[(12, 12, 7), int32] */;
  %316 = %305.1;
  %317 = %314.4;
  %318 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  (%315, %316, %var_3340, %var_3341, %310, %317, meta[relay.Constant][19] /* ty=Tensor[(7, 2), uint64] */, %318)
}

def @func_4139() -> (Tensor[(12, 12, 7), uint64],) {
  %319 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  (%319,)
}

def @func_5578(%var_5561: Tensor[(11, 5, 6), int32], %var_5562: Tensor[(11, 5, 6), int32], %var_5571: Tensor[(420, 1), float32]) -> (Tensor[(11, 5, 6), int32], Tensor[(14, 3, 10), float32], Tensor[(420, 1), float32]) {
  %320 = cast(%var_5562, dtype="int32") /* ty=Tensor[(11, 5, 6), int32] */;
  %321 = shape_of(%var_5561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_5561, dtype="int32") /* ty=Tensor[(11, 5, 6), int32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %324 = cast(%var_5571, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %325 = reshape(%324, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
  %326 = right_shift(%322, %323) /* ty=Tensor[(11, 5, 6), int32] */;
  %327 = @func_3142(%325) /* ty=Tensor[(14, 3, 10), float32] */;
  (%326, %327, %var_5571)
}

def @func_2937(%var_2891: Tensor[(12, 12, 7), int32], %var_2921: Tensor[(96), float32]) -> (Tensor[(12, 12, 7), float64], Tensor[(84), uint64], Tensor[(96), float32]) {
  %328 = @func_2825() /* ty=(Tensor[(12, 12, 7), int32],) */;
  %329 = %328.0;
  %330 = cast(%var_2891, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %334 = cast(%var_2921, dtype="float32") /* ty=Tensor[(96), float32] */;
  %335 = reshape(%334, newshape=[96, 1]) /* ty=Tensor[(96, 1), float32] */;
  %336 = @func_2327(%335) /* ty=(Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64], Tensor[(96, ?), bool], Tensor[(96, ?), uint16], Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %337 = mod(%332, %333) /* ty=Tensor[(12, 12, 7), float64] */;
  %338 = %336.2;
  (%337, %338, %var_2921)
}

def @func_4391(%var_4381: Tensor[(12, 12, 7), float64]) -> Tensor[(12, 12, 7), float64] {
  %339 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %341 = exp(%340) /* ty=Tensor[(12, 12, 7), float64] */;
  %342 = cast(%var_4381, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%344, %345) /* ty=Tensor[(12, 12, 7), float64] */
}

def @func_5382() -> (Tensor[(96, 8), int64], Tensor[(9, 7, 8), int64], Tensor[(12, 42), int64], Tensor[(84), uint64]) {
  %346 = @func_5257() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) */;
  %347 = %346.1;
  %348 = cast(%347, dtype="int64") /* ty=Tensor[(96, ?), int64] */;
  %349 = cast(meta[relay.Constant][20] /* ty=Tensor[(96, 8), bool] */, dtype="int64") /* ty=Tensor[(96, 8), int64] */;
  %350 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 42), int64] */, dtype="int64") /* ty=Tensor[(12, 42), int64] */;
  %351 = cast(meta[relay.Constant][22] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %352 = reshape(%350, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %353 = reshape(%351, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %354 = @func_2401(%352, %353) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) */;
  %355 = left_shift(%348, %349) /* ty=Tensor[(96, 8), int64] */;
  %356 = %354.1;
  (%355, %356, meta[relay.Constant][21] /* ty=Tensor[(12, 42), int64] */, meta[relay.Constant][22] /* ty=Tensor[(84), uint64] */)
}

def @func_3565(%var_3554: Tensor[(15, 7, 2), float64]) -> Tensor[(15, 7, 2), float64] {
  %357 = cast(%var_3554, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
  acos(%357) /* ty=Tensor[(15, 7, 2), float64] */
}

def @func_3681() -> (Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) {
  %358 = @func_2578() /* ty=(Tensor[(12, 12, 7), int32],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %361 = cast(meta[relay.Constant][23] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %362 = reshape(%361, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %363 = @func_2561(%362) /* ty=(Tensor[(9, 3, 5), float64], Tensor[(135), float64], Tensor[(12, 12, 7), float64], Tensor[(7, 6, 2), float32], Tensor[(1, 14), uint64], Tensor[(84), uint64]) */;
  %364 = acosh(%360) /* ty=Tensor[(12, 12, 7), float64] */;
  %365 = %363.1;
  (%364, %365, meta[relay.Constant][23] /* ty=Tensor[(84), uint64] */)
}

def @func_2578() -> (Tensor[(12, 12, 7), int32],) {
  %366 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
  (%366,)
}

def @func_4572() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32]) {
  %367 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %368 = %367.1;
  %369 = @func_3287() /* ty=Tensor[(12, 12, 7), int32] */;
  (%368, %369)
}

def @func_5257() -> (Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) {
  %370 = @func_3161() /* ty=(Tensor[(96, 1), float64],) */;
  %371 = %370.0;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %373 = asinh(%372) /* ty=Tensor[(96, 1), float64] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(2), int32] */;
  %376 = cast(%373, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %378 = cast(meta[relay.Constant][25] /* ty=Tensor[(468, 1), uint16] */, dtype="uint16") /* ty=Tensor[(468, 1), uint16] */;
  %379 = cast(meta[relay.Constant][24] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %380 = reshape(%378, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), uint16] */;
  %381 = reshape(%379, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %382 = @func_4268(%380, %381) /* ty=(Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) */;
  %383 = %382.0;
  %384 = cast(%383, dtype="int16") /* ty=Tensor[(13, 4, 9), int16] */;
  %385 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(468, 1), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %386 = cast(meta[relay.Constant][25] /* ty=Tensor[(468, 1), uint16] */, dtype="int16") /* ty=Tensor[(468, 1), int16] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %388 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  %389 = greater(%376, %377) /* ty=Tensor[(96, ?), bool] */;
  %390 = left_shift(%386, %387) /* ty=Tensor[(468, ?), int16] */;
  (%388, %389, meta[relay.Constant][24] /* ty=Tensor[(420), float32] */, %390)
}

def @func_5112() -> Tensor[(432), float32] {
  %391 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %391.1
}

def @func_5772() -> (Tensor[(12, 12, 7), float64], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) {
  %392 = @func_5104() /* ty=Tensor[(12, 12, 7), int32] */;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %394 = cast(meta[relay.Constant][26] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %395 = cast(meta[relay.Constant][26] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %396 = reshape(%394, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %397 = reshape(%395, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %398 = @func_4728(%396, %397) /* ty=(Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) */;
  %399 = atanh(%393) /* ty=Tensor[(12, 12, 7), float64] */;
  %400 = %398.0;
  (%399, %400, meta[relay.Constant][26] /* ty=Tensor[(832), float64] */)
}

def @func_6601(%var_6588: Tensor[(693), float64]) -> (Tensor[(12, 12, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(12, 12, 7), float64]) {
  %401 = @func_3906() /* ty=(Tensor[(1008), int32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), float64]) */;
  %402 = cast(%var_6588, dtype="float64") /* ty=Tensor[(693), float64] */;
  %403 = reshape(%402, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %404 = @func_2605(%403) /* ty=(Tensor[(11, 9, 7), float64],) */;
  %405 = %401.2;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %407 = reshape(%406, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), float64] */;
  %408 = %404.0;
  %409 = @func_4391(%407) /* ty=Tensor[(12, 12, 7), float64] */;
  (%405, %408, %var_6588, %409)
}

def @func_3103() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32]) {
  %410 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %411 = %410.0;
  %412 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
  (%411, %412)
}

def @func_2962() -> (Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) {
  %413 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %414 = cast(meta[relay.Constant][27] /* ty=Tensor[(1008), int32] */, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %415 = %413.0;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %417 = reshape(%414, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
  %418 = reshape(%416, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %419 = @func_2937(%417, %418) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(84), uint64], Tensor[(96), float32]) */;
  %420 = %419.2;
  (%415, %420, meta[relay.Constant][27] /* ty=Tensor[(1008), int32] */)
}

def @func_1352(%var_1327: Tensor[(9, 16, 3), float32], %var_1348: Tensor[(126), int32]) -> (Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) {
  %421 = cast(%var_1327, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %422 = cast(%var_1348, dtype="int32") /* ty=Tensor[(126), int32] */;
  %423 = cast(meta[relay.Constant][28] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %424 = reshape(%422, newshape=[14, 1, 9]) /* ty=Tensor[(14, 1, 9), int32] */;
  %425 = reshape(%423, newshape=[96, 1]) /* ty=Tensor[(96, 1), int32] */;
  %426 = @func_1136(%424, %425) /* ty=(Tensor[(14, 13, 9), int32], Tensor[(960), float64], Tensor[(96, 1), int32], Tensor[(960), uint16], Tensor[(14, 13, 9), uint8]) */;
  %427 = asin(%421) /* ty=Tensor[(9, 16, 3), float32] */;
  %428 = %426.2;
  (%427, %428, %var_1348, meta[relay.Constant][28] /* ty=Tensor[(96), int32] */)
}

def @func_4328(%var_4317: Tensor[(96, 3), float64]) -> (Tensor[(7, 2, 9), float32], Tensor[(96, 3), float64]) {
  %429 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
  %430 = @func_3161() /* ty=(Tensor[(96, 1), float64],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %433 = cast(%var_4317, dtype="bool") /* ty=Tensor[(96, 3), bool] */;
  %434 = not_equal(%432, %433) /* ty=Tensor[(96, 3), bool] */;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(96, 3), float64] */;
  %436 = %429.1;
  %437 = tan(%435) /* ty=Tensor[(96, 3), float64] */;
  (%436, %437)
}

def @func_2561(%var_2556: Tensor[(84), uint64]) -> (Tensor[(9, 3, 5), float64], Tensor[(135), float64], Tensor[(12, 12, 7), float64], Tensor[(7, 6, 2), float32], Tensor[(1, 14), uint64], Tensor[(84), uint64]) {
  %438 = cast(meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %439 = reshape(%438, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float64] */;
  %440 = @func_1420(%439) /* ty=(Tensor[(9, 3, 5), float64],) */;
  %441 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %443 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 14), uint64] */, dtype="uint64") /* ty=Tensor[(1, 14), uint64] */;
  %444 = cast(%var_2556, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %445 = reshape(%443, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %446 = reshape(%444, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %447 = @func_571(%445, %446) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %448 = %440.0;
  %449 = asin(%442) /* ty=Tensor[(12, 12, 7), float64] */;
  %450 = %447.0;
  (%448, meta[relay.Constant][29] /* ty=Tensor[(135), float64] */, %449, %450, meta[relay.Constant][30] /* ty=Tensor[(1, 14), uint64] */, %var_2556)
}

def @func_3161() -> (Tensor[(96, 1), float64],) {
  %451 = @func_3017() /* ty=(Tensor[(96, 1), float64],) */;
  %452 = %451.0;
  (%452,)
}

def @func_5088(%var_5064: Tensor[(432), float32], %var_5065: Tensor[(126), int32]) -> (Tensor[(84), uint64], Tensor[(126), int32], Tensor[(432), float32], Tensor[(126), int32]) {
  %453 = @func_3681() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) */;
  %454 = cast(%var_5064, dtype="float32") /* ty=Tensor[(432), float32] */;
  %455 = cast(%var_5065, dtype="int32") /* ty=Tensor[(126), int32] */;
  %456 = reshape(%454, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %457 = reshape(%455, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %458 = @func_1352(%456, %457) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) */;
  %459 = %453.2;
  %460 = %458.2;
  (%459, %460, %var_5064, %var_5065)
}

def @func_6510() -> (Tensor[(432), float32],) {
  %461 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %462 = %461.1;
  (%462,)
}

def @func_3142(%var_3132: Tensor[(14, 3, 10), float32]) -> Tensor[(14, 3, 10), float32] {
  %463 = cast(%var_3132, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %464 = log(%463) /* ty=Tensor[(14, 3, 10), float32] */;
  %465 = cast(%var_3132, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%467, %468) /* ty=Tensor[(14, 3, 10), float32] */
}

def @func_3578() -> Tensor[(12, 12, 7), int32] {
  @func_3287() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_2176() -> (Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) {
  %469 = cast(meta[relay.Constant][31] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %470 = cast(meta[relay.Constant][32] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %471 = reshape(%469, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %472 = reshape(%470, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %473 = @func_1352(%471, %472) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) */;
  %474 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %475 = reshape(%474, newshape=[]) /* ty=int64 */;
  %476 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %478 = tan(%477) /* ty=Tensor[(12, 12, 7), float64] */;
  %479 = cast(%478, dtype="uint64") /* ty=Tensor[(12, 12, 7), uint64] */;
  %480 = cast(5 /* ty=int64 */, dtype="uint64") /* ty=uint64 */;
  %481 = %473.1;
  %482 = @func_513(%475) /* ty=Tensor[(11, 14, 13), int64] */;
  %483 = bitwise_xor(%479, %480) /* ty=Tensor[(12, 12, 7), uint64] */;
  (%481, meta[relay.Constant][31] /* ty=Tensor[(432), float32] */, meta[relay.Constant][32] /* ty=Tensor[(126), int32] */, %482, %483)
}

def @func_1136(%var_1110: Tensor[(14, 1, 9), int32], %var_1118: Tensor[(96, 1), int32]) -> (Tensor[(14, 13, 9), int32], Tensor[(960), float64], Tensor[(96, 1), int32], Tensor[(960), uint16], Tensor[(14, 13, 9), uint8]) {
  %484 = cast(%var_1110, dtype="int32") /* ty=Tensor[(14, 1, 9), int32] */;
  %485 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 13, 9), int32] */, dtype="int32") /* ty=Tensor[(14, 13, 9), int32] */;
  %486 = cast(%var_1118, dtype="int32") /* ty=Tensor[(96, 1), int32] */;
  %487 = cast(meta[relay.Constant][34] /* ty=Tensor[(960), uint16] */, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %488 = reshape(%486, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int32] */;
  %489 = reshape(%487, newshape=[960]) /* ty=Tensor[(960), uint16] */;
  %490 = @func_1021(%488, %489) /* ty=(Tensor[(3, 8, 4), int32], Tensor[(960), float64]) */;
  %491 = cast(%var_1110, dtype="uint8") /* ty=Tensor[(14, 1, 9), uint8] */;
  %492 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 13, 9), int32] */, dtype="uint8") /* ty=Tensor[(14, 13, 9), uint8] */;
  %493 = minimum(%484, %485) /* ty=Tensor[(14, 13, 9), int32] */;
  %494 = %490.1;
  %495 = right_shift(%491, %492) /* ty=Tensor[(14, 13, 9), uint8] */;
  (%493, %494, %var_1118, meta[relay.Constant][34] /* ty=Tensor[(960), uint16] */, %495)
}

def @func_5597() -> (Tensor[(12, 12, 7), int32],) {
  %496 = @func_3800() /* ty=Tensor[(12, 12, 7), int32] */;
  (%496,)
}

def @main() -> Tensor[(12, 12, 7), bool] {
  %497 = @func_3103() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
  %498 = %497.1;
  %499 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 12, 7), int32] */, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%501, %502) /* ty=Tensor[(12, 12, 7), bool] */
}

def @func_1420(%var_1416: Tensor[(9, 3, 5), float64]) -> (Tensor[(9, 3, 5), float64],) {
  %503 = cast(%var_1416, dtype="float64") /* ty=Tensor[(9, 3, 5), float64] */;
  %504 = acos(%503) /* ty=Tensor[(9, 3, 5), float64] */;
  (%504,)
}

def @func_3992(%var_3982: Tensor[(12, 9, 5), uint64], %var_3983: Tensor[(12, 9, 5), uint64]) -> Tensor[(12, 9, 5), uint64] {
  %505 = cast(%var_3983, dtype="uint64") /* ty=Tensor[(12, 9, 5), uint64] */;
  %506 = shape_of(%var_3982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_3982, dtype="uint64") /* ty=Tensor[(12, 9, 5), uint64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%507, %508) /* ty=Tensor[(12, 9, 5), uint64] */
}

def @func_2401(%var_2384: Tensor[(504), int64], %var_2395: Tensor[(84), uint64]) -> (Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) {
  %509 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %511 = cast(%var_2384, dtype="int64") /* ty=Tensor[(504), int64] */;
  %512 = reshape(%511, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
  %513 = @func_1648(%512) /* ty=(Tensor[(9, 7, 8), int64],) */;
  %514 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %515 = cast(%var_2395, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %516 = reshape(%514, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %517 = reshape(%515, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %518 = @func_571(%516, %517) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %519 = erf(%510) /* ty=Tensor[(12, 12, 7), float64] */;
  %520 = %513.0;
  %521 = %518.0;
  (%519, %520, %var_2384, %521, meta[relay.Constant][36] /* ty=Tensor[(14, 1), uint64] */, %var_2395)
}

def @func_4728(%var_4703: Tensor[(8, 8, 13), float64], %var_4718: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) {
  %522 = cast(%var_4703, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %523 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(8, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %526 = cast(%var_4718, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %527 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(8, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %530 = subtract(%524, %525) /* ty=Tensor[(8, 8, 13), float64] */;
  %531 = maximum(%528, %529) /* ty=Tensor[(8, 8, 13), float64] */;
  (%530, %531)
}

def @func_2704(%var_2677: Tensor[(16, 14, 14), float32], %var_2678: Tensor[(16, 14, 14), float32], %var_2696: Tensor[(693), float64]) -> (Tensor[(16, 14, 14), float32], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(11, 9, 7), float64], Tensor[(693), float64]) {
  %532 = cast(%var_2678, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %533 = shape_of(%var_2677, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_2677, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %536 = cast(meta[relay.Constant][38] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %537 = reshape(%536, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
  %538 = @func_1648(%537) /* ty=(Tensor[(9, 7, 8), int64],) */;
  %539 = cast(%var_2696, dtype="float64") /* ty=Tensor[(693), float64] */;
  %540 = reshape(%539, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %541 = @func_2605(%540) /* ty=(Tensor[(11, 9, 7), float64],) */;
  %542 = subtract(%534, %535) /* ty=Tensor[(16, 14, 14), float32] */;
  %543 = %538.0;
  %544 = %541.0;
  (%542, %543, meta[relay.Constant][38] /* ty=Tensor[(504), int64] */, %544, %var_2696)
}

def @func_2825() -> (Tensor[(12, 12, 7), int32],) {
  %545 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
  (%545,)
}

def @func_5451() -> (Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) {
  %546 = @func_4667() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) */;
  %547 = cast(meta[relay.Constant][39] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %548 = reshape(%547, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
  %549 = @func_3142(%548) /* ty=Tensor[(14, 3, 10), float32] */;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
  %551 = @func_4342() /* ty=Tensor[(12, 12, 7), int32] */;
  %552 = %546.0;
  %553 = rsqrt(%550) /* ty=Tensor[(14, 3, 10), float64] */;
  (%551, meta[relay.Constant][39] /* ty=Tensor[(420), float32] */, %552, %553)
}

def @func_5633() -> (Tensor[(12, 12, 7), int32],) {
  %554 = @func_3209() /* ty=Tensor[(12, 12, 7), int32] */;
  (%554,)
}

def @func_5978(%var_5974: Tensor[(420), float32]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(13, 4, 9), bool], Tensor[(6, 78), uint16], Tensor[(420), float32]) {
  %555 = @func_2578() /* ty=(Tensor[(12, 12, 7), int32],) */;
  %556 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 78), uint16] */, dtype="uint16") /* ty=Tensor[(6, 78), uint16] */;
  %557 = cast(%var_5974, dtype="float32") /* ty=Tensor[(420), float32] */;
  %558 = reshape(%556, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), uint16] */;
  %559 = reshape(%557, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %560 = @func_4268(%558, %559) /* ty=(Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) */;
  %561 = %555.0;
  %562 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %563 = %560.0;
  (%561, %562, %563, meta[relay.Constant][40] /* ty=Tensor[(6, 78), uint16] */, %var_5974)
}

def @func_4066(%var_4059: Tensor[(12, 12, 7), int32]) -> (Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) {
  %564 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
  %565 = cast(%var_4059, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = not_equal(%567, %568) /* ty=Tensor[(12, 12, 7), bool] */;
  %570 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  (%569, %570)
}

def @func_2213() -> (Tensor[(432), float32], Tensor[(126), int32]) {
  %571 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %572 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %573 = %571.1;
  %574 = %572.2;
  (%573, %574)
}

def @func_513(%var_486: int64) -> Tensor[(11, 14, 13), int64] {
  %575 = cast(%var_486, dtype="int64") /* ty=int64 */;
  %576 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 14, 13), int64] */, dtype="int64") /* ty=Tensor[(11, 14, 13), int64] */;
  subtract(%575, %576) /* ty=Tensor[(11, 14, 13), int64] */
}

def @func_6138(%var_6054: Tensor[(693), float64], %var_6084: Tensor[(2496), float64], %var_6087: Tensor[(14), uint64], %var_6121: Tensor[(832), float64]) -> (Tensor[(12, 12, 7), int32], Tensor[(432), float32], Tensor[(784, 4), float32], Tensor[(693), float64], Tensor[(12, 12, 7), int64], Tensor[(504), int64], Tensor[(2496), float64], Tensor[(5, 3), float32], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(420), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) {
  %577 = cast(meta[relay.Constant][42] /* ty=Tensor[(784, 4), float32] */, dtype="float32") /* ty=Tensor[(784, 4), float32] */;
  %578 = cast(%var_6054, dtype="float64") /* ty=Tensor[(693), float64] */;
  %579 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %580 = cast(%579, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %581 = reshape(%577, newshape=[3136]) /* ty=Tensor[(3136), float32] */;
  %582 = reshape(%578, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %583 = reshape(%580, newshape=[1008]) /* ty=Tensor[(1008), int32] */;
  %584 = @func_5945(%581, %582, %583) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) */;
  %585 = cast(%579, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %586 = reshape(%585, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
  %587 = @func_4197(%586) /* ty=(Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) */;
  %588 = cast(%var_6084, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %589 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 3), float32] */;
  %590 = cast(meta[relay.Constant][44] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %591 = cast(%var_6087, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %592 = reshape(%588, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float64] */;
  %593 = reshape(%589, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %594 = reshape(%590, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %595 = reshape(%591, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
  %596 = @func_3521(%592, %593, %594, %595) /* ty=(Tensor[(13, 16, 12), float64], Tensor[(5, 3, 1), float32], Tensor[(15), float32], Tensor[(504), int64], Tensor[(504), int64], Tensor[(14, 1), uint64]) */;
  %597 = cast(meta[relay.Constant][42] /* ty=Tensor[(784, 4), float32] */, dtype="float32") /* ty=Tensor[(784, 4), float32] */;
  %598 = cast(%var_6054, dtype="float64") /* ty=Tensor[(693), float64] */;
  %599 = cast(%579, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %600 = reshape(%597, newshape=[3136]) /* ty=Tensor[(3136), float32] */;
  %601 = reshape(%598, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %602 = reshape(%599, newshape=[1008]) /* ty=Tensor[(1008), int32] */;
  %603 = @func_5945(%600, %601, %602) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) */;
  %604 = cast(%var_6121, dtype="float64") /* ty=Tensor[(832), float64] */;
  %605 = cast(%var_6121, dtype="float64") /* ty=Tensor[(832), float64] */;
  %606 = reshape(%604, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %607 = reshape(%605, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %608 = @func_4728(%606, %607) /* ty=(Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) */;
  %609 = %584.2;
  %610 = %587.0;
  %611 = %596.3;
  %612 = %603.5;
  %613 = %608.1;
  (%579, %609, meta[relay.Constant][42] /* ty=Tensor[(784, 4), float32] */, %var_6054, %610, %611, %var_6084, meta[relay.Constant][43] /* ty=Tensor[(5, 3), float32] */, meta[relay.Constant][44] /* ty=Tensor[(504), int64] */, %var_6087, %612, %613, %var_6121)
}

def @func_3063(%var_3043: Tensor[(5, 3, 1), float32], %var_3049: Tensor[(504), int64]) -> (Tensor[(5, 3, 1), float32], Tensor[(504), int64], Tensor[(9, 7, 8), uint16]) {
  %614 = cast(-2.43474f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %615 = cast(%var_3043, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
  %616 = cast(%var_3049, dtype="int64") /* ty=Tensor[(504), int64] */;
  %617 = reshape(%616, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
  %618 = @func_1648(%617) /* ty=(Tensor[(9, 7, 8), int64],) */;
  %619 = %618.0;
  %620 = cast(-2.43474f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
  %621 = cast(%619, dtype="uint16") /* ty=Tensor[(9, 7, 8), uint16] */;
  %622 = divide(%614, %615) /* ty=Tensor[(5, 3, 1), float32] */;
  %623 = left_shift(%620, %621) /* ty=Tensor[(9, 7, 8), uint16] */;
  (%622, %var_3049, %623)
}

def @func_6227(%var_6165: Tensor[(9, 1, 4), int16]) -> (Tensor[(9, 2, 4), int16], Tensor[(432), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(8, 8, 13), float64]) {
  %624 = cast(%var_6165, dtype="int16") /* ty=Tensor[(9, 1, 4), int16] */;
  %625 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 2, 4), int16] */, dtype="int16") /* ty=Tensor[(9, 2, 4), int16] */;
  %626 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %627 = cast(meta[relay.Constant][46] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %628 = reshape(%627, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %629 = @func_5772() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) */;
  %630 = %629.1;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %632 = subtract(%624, %625) /* ty=Tensor[(9, 2, 4), int16] */;
  %633 = %626.1;
  %634 = @func_4416(%628) /* ty=Tensor[(1, 14, 13), float64] */;
  %635 = atan(%631) /* ty=Tensor[(8, 8, 13), float64] */;
  (%632, %633, %634, meta[relay.Constant][46] /* ty=Tensor[(182), float64] */, %635)
}

def @func_4416(%var_4410: Tensor[(1, 14, 13), float64]) -> Tensor[(1, 14, 13), float64] {
  %636 = cast(%var_4410, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  log2(%636) /* ty=Tensor[(1, 14, 13), float64] */
}

def @func_5336(%var_5276: Tensor[(224), float32]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(224), float32], Tensor[(432), float32], Tensor[(1008), bool], Tensor[(12, 12, 7), int32], Tensor[(693), uint64], Tensor[(1008), int32]) {
  %637 = cast(%var_5276, dtype="float32") /* ty=Tensor[(224), float32] */;
  %638 = reshape(%637, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float32] */;
  %639 = @func_4961(%638) /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(15, 2, 7), float64], Tensor[(35, 6), float64], Tensor[(16, 7, 2), bool]) */;
  %640 = @func_4572() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
  %641 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %642 = @func_4607() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(1008), float32]) */;
  %643 = cast(meta[relay.Constant][47] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %644 = reshape(%643, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %645 = @func_2605(%644) /* ty=(Tensor[(11, 9, 7), float64],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="uint64") /* ty=Tensor[(11, 9, 7), uint64] */;
  %648 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(693), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %649 = cast(meta[relay.Constant][47] /* ty=Tensor[(693), float64] */, dtype="uint64") /* ty=Tensor[(693), uint64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %651 = @func_3750() /* ty=(Tensor[(1008), int32],) */;
  %652 = @func_3800() /* ty=Tensor[(12, 12, 7), int32] */;
  %653 = %639.0;
  %654 = %640.0;
  %655 = %641.0;
  %656 = %642.0;
  %657 = add(%649, %650) /* ty=Tensor[(693), uint64] */;
  %658 = %651.0;
  (%652, %653, %var_5276, %654, %655, %656, %657, %658)
}

def @func_4197(%var_4183: Tensor[(12, 12, 7), int32]) -> (Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) {
  %659 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  %660 = cast(%var_4183, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %664 = cast(%659, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %665 = shape_of(%var_4183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_4183, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %668 = left_shift(%662, %663) /* ty=Tensor[(12, 12, 7), int64] */;
  %669 = bitwise_and(%666, %667) /* ty=Tensor[(12, 12, 7), int64] */;
  (%668, %669)
}

def @func_6479(%var_6412: Tensor[(832), float64]) -> (Tensor[(12, 12, 7), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) {
  %670 = cast(%var_6412, dtype="float64") /* ty=Tensor[(832), float64] */;
  %671 = cast(%var_6412, dtype="float64") /* ty=Tensor[(832), float64] */;
  %672 = reshape(%670, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %673 = reshape(%671, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %674 = @func_4728(%672, %673) /* ty=(Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) */;
  %675 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %676 = @func_2825() /* ty=(Tensor[(12, 12, 7), int32],) */;
  %677 = @func_4139() /* ty=(Tensor[(12, 12, 7), uint64],) */;
  %678 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  %679 = %674.1;
  %680 = %675.0;
  %681 = %676.0;
  %682 = %677.0;
  (%678, %679, %var_6412, %680, %681, %682)
}

def @func_5849(%var_5820: Tensor[(14), uint64], %var_5821: Tensor[(504), int64]) -> (Tensor[(126), int32], Tensor[(14), uint64], Tensor[(504), int64], Tensor[(?, 15, 4), float64]) {
  %683 = cast(%var_5820, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %684 = cast(%var_5821, dtype="int64") /* ty=Tensor[(504), int64] */;
  %685 = reshape(%683, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
  %686 = reshape(%684, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %687 = @func_2754(%685, %686) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
  %688 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
  %689 = cosh(%688) /* ty=Tensor[(1, 15, 4), float32] */;
  %690 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float64") /* ty=Tensor[(1, 15, 4), float64] */;
  %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%689, dtype="float64") /* ty=Tensor[(1, 15, 4), float64] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %694 = %687.6;
  %695 = mod(%692, %693) /* ty=Tensor[(?, 15, 4), float64] */;
  (%694, %var_5820, %var_5821, %695)
}

def @func_2451(%var_2432: Tensor[(12, 12, 7), float64]) -> (Tensor[(12, 12, 7), bool],) {
  %696 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %698 = log2(%697) /* ty=Tensor[(12, 12, 7), float64] */;
  %699 = cast(%var_2432, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %703 = equal(%701, %702) /* ty=Tensor[(12, 12, 7), bool] */;
  %704 = cast(%698, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %708 = divide(%706, %707) /* ty=Tensor[(12, 12, 7), float64] */;
  %709 = cast(%708, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %710 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%698, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = less_equal(%711, %712) /* ty=Tensor[(12, 12, 7), bool] */;
  (%713,)
}

def @func_2605(%var_2596: Tensor[(11, 9, 7), float64]) -> (Tensor[(11, 9, 7), float64],) {
  %714 = cast(%var_2596, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %715 = tan(%714) /* ty=Tensor[(11, 9, 7), float64] */;
  (%715,)
}

def @func_4667() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) {
  %716 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %717 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
  %718 = %716.0;
  %719 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %720 = %717.0;
  (%718, %719, %720)
}

def @func_6270() -> (Tensor[(12, 12, 7), int32],) {
  %721 = @func_4572() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
  %722 = %721.1;
  (%722,)
}

def @func_3115(%var_3108: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), float64]) {
  %723 = cast(%var_3108, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %724 = cast(meta[relay.Constant][49] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %725 = reshape(%724, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), float64] */;
  %726 = @func_2451(%725) /* ty=(Tensor[(12, 12, 7), bool],) */;
  %727 = atan(%723) /* ty=Tensor[(15, 2, 7), float64] */;
  %728 = %726.0;
  (%727, %728, meta[relay.Constant][49] /* ty=Tensor[(1008), float64] */)
}

def @func_3623(%var_3620: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float64] {
  %729 = cast(%var_3620, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  log10(%729) /* ty=Tensor[(15, 12, 11), float64] */
}

def @func_2675() -> (Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) {
  %730 = cast(meta[relay.Constant][50] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %731 = reshape(%730, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), float32] */;
  %732 = @func_1953(%731) /* ty=(Tensor[(7, 2, 9), float32],) */;
  %733 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %734 = %732.0;
  (%733, %734, meta[relay.Constant][50] /* ty=Tensor[(126), float32] */)
}

def @func_2185() -> Tensor[(12, 12, 7), uint64] {
  %735 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %735.4
}

def @func_3906() -> (Tensor[(1008), int32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), float64]) {
  %736 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %738 = @func_3179() /* ty=Tensor[(1008), int32] */;
  %739 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %740 = sqrt(%737) /* ty=Tensor[(12, 12, 7), float64] */;
  (%738, %739, %740)
}

def @func_3521(%var_3492: Tensor[(13, 16, 12), float64], %var_3509: Tensor[(15), float32], %var_3510: Tensor[(504), int64], %var_3515: Tensor[(14, 1), uint64]) -> (Tensor[(13, 16, 12), float64], Tensor[(5, 3, 1), float32], Tensor[(15), float32], Tensor[(504), int64], Tensor[(504), int64], Tensor[(14, 1), uint64]) {
  %741 = cast(%var_3492, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %742 = atan(%741) /* ty=Tensor[(13, 16, 12), float64] */;
  %743 = cast(%var_3492, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %747 = cast(%var_3509, dtype="float32") /* ty=Tensor[(15), float32] */;
  %748 = cast(%var_3510, dtype="int64") /* ty=Tensor[(504), int64] */;
  %749 = reshape(%747, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
  %750 = reshape(%748, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %751 = @func_3063(%749, %750) /* ty=(Tensor[(5, 3, 1), float32], Tensor[(504), int64], Tensor[(9, 7, 8), uint16]) */;
  %752 = cast(%var_3515, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %753 = cast(%var_3510, dtype="int64") /* ty=Tensor[(504), int64] */;
  %754 = reshape(%752, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
  %755 = reshape(%753, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %756 = @func_2754(%754, %755) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
  %757 = power(%745, %746) /* ty=Tensor[(13, 16, 12), float64] */;
  %758 = %751.0;
  %759 = %756.5;
  (%757, %758, %var_3509, %var_3510, %759, %var_3515)
}

def @func_3287() -> Tensor[(12, 12, 7), int32] {
  %760 = @func_3103() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
  %760.1
}

def @func_6715(%var_6644: Tensor[(1, 12, 7), int8], %var_6645: Tensor[(10, 12, 7), int8], %var_6683: Tensor[(14), uint64]) -> (Tensor[(12, 12, 7), uint64], Tensor[(10, 12, 7), bool], Tensor[(14), uint64], Tensor[(14), uint64], Tensor[(36, 14), int64], Tensor[(1, 12, 7), float64]) {
  %761 = cast(%var_6644, dtype="bool") /* ty=Tensor[(1, 12, 7), bool] */;
  %762 = cast(%var_6645, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
  %763 = less(%761, %762) /* ty=Tensor[(10, 12, 7), bool] */;
  %764 = cast(%763, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
  %765 = cast(%var_6644, dtype="bool") /* ty=Tensor[(1, 12, 7), bool] */;
  %766 = cast(%var_6683, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %767 = cast(meta[relay.Constant][51] /* ty=Tensor[(36, 14), int64] */, dtype="int64") /* ty=Tensor[(36, 14), int64] */;
  %768 = reshape(%766, newshape=[14]) /* ty=Tensor[(14), uint64] */;
  %769 = reshape(%767, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %770 = @func_5849(%768, %769) /* ty=(Tensor[(126), int32], Tensor[(14), uint64], Tensor[(504), int64], Tensor[(?, 15, 4), float64]) */;
  %771 = cast(%var_6644, dtype="float64") /* ty=Tensor[(1, 12, 7), float64] */;
  %772 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %773 = not_equal(%764, %765) /* ty=Tensor[(10, 12, 7), bool] */;
  %774 = %770.1;
  %775 = cosh(%771) /* ty=Tensor[(1, 12, 7), float64] */;
  (%772, %773, %774, %var_6683, meta[relay.Constant][51] /* ty=Tensor[(36, 14), int64] */, %775)
}

def @func_2508() -> Tensor[(12, 12, 7), int32] {
  @func_2075() /* ty=Tensor[(12, 12, 7), int32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2454(%var_2452: Tensor[(12, 12, 7), float64]) -> (Tensor[(12, 12, 7), bool],) {
  @func_2451(%var_2452) /* ty=(Tensor[(12, 12, 7), bool],) */
}

def @func_4732(%var_4730: Tensor[(8, 8, 13), float64], %var_4731: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) {
  @func_4728(%var_4730, %var_4731) /* ty=(Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) */
}

def @func_4331(%var_4329: Tensor[(96, 3), float64]) -> (Tensor[(7, 2, 9), float32], Tensor[(96, 3), float64]) {
  @func_4328(%var_4329) /* ty=(Tensor[(7, 2, 9), float32], Tensor[(96, 3), float64]) */
}

def @func_3906() -> (Tensor[(1008), int32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), float64]) {
  %0 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %1 = cast(%0, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %2 = @func_3179() /* ty=Tensor[(1008), int32] */;
  %3 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %4 = sqrt(%1) /* ty=Tensor[(12, 12, 7), float64] */;
  (%2, %3, %4)
}

def @func_3161() -> (Tensor[(96, 1), float64],) {
  %5 = @func_3017() /* ty=(Tensor[(96, 1), float64],) */;
  %6 = %5.0;
  (%6,)
}

def @func_3996(%var_3994: Tensor[(12, 9, 5), uint64], %var_3995: Tensor[(12, 9, 5), uint64]) -> Tensor[(12, 9, 5), uint64] {
  @func_3992(%var_3994, %var_3995) /* ty=Tensor[(12, 9, 5), uint64] */
}

def @func_5106() -> Tensor[(12, 12, 7), int32] {
  @func_5104() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_6227(%var_6165: Tensor[(9, 1, 4), int16]) -> (Tensor[(9, 2, 4), int16], Tensor[(432), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(8, 8, 13), float64]) {
  %7 = cast(%var_6165, dtype="int16") /* ty=Tensor[(9, 1, 4), int16] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 2, 4), int16] */, dtype="int16") /* ty=Tensor[(9, 2, 4), int16] */;
  %9 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %11 = reshape(%10, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %12 = @func_5772() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) */;
  %13 = %12.1;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %15 = subtract(%7, %8) /* ty=Tensor[(9, 2, 4), int16] */;
  %16 = %9.1;
  %17 = @func_4416(%11) /* ty=Tensor[(1, 14, 13), float64] */;
  %18 = atan(%14) /* ty=Tensor[(8, 8, 13), float64] */;
  (%15, %16, %17, meta[relay.Constant][1] /* ty=Tensor[(182), float64] */, %18)
}

def @func_4391(%var_4381: Tensor[(12, 12, 7), float64]) -> Tensor[(12, 12, 7), float64] {
  %19 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %21 = exp(%20) /* ty=Tensor[(12, 12, 7), float64] */;
  %22 = cast(%var_4381, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%24, %25) /* ty=Tensor[(12, 12, 7), float64] */
}

def @func_6510() -> (Tensor[(432), float32],) {
  %26 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %27 = %26.1;
  (%27,)
}

def @func_4608() -> (Tensor[(12, 12, 7), int32], Tensor[(1008), float32]) {
  %34 = fn () -> (Tensor[(12, 12, 7), int32], Tensor[(1008), float32]) {
    %28 = @func_3179() /* ty=Tensor[(1008), int32] */;
    %29 = cast(%28, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %30 = asinh(%29) /* ty=Tensor[(1008), float32] */;
    %31 = cast(%30, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %32 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
    %33 = cos(%31) /* ty=Tensor[(1008), float32] */;
    (%32, %33)
  };
  %34() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(1008), float32]) */
}

def @func_5598() -> (Tensor[(12, 12, 7), int32],) {
  %36 = fn () -> (Tensor[(12, 12, 7), int32],) {
    %35 = @func_3800() /* ty=Tensor[(12, 12, 7), int32] */;
    (%35,)
  };
  %36() /* ty=(Tensor[(12, 12, 7), int32],) */
}

def @func_1140(%var_1138: Tensor[(14, 1, 9), int32], %var_1139: Tensor[(96, 1), int32]) -> (Tensor[(14, 13, 9), int32], Tensor[(960), float64], Tensor[(96, 1), int32], Tensor[(960), uint16], Tensor[(14, 13, 9), uint8]) {
  @func_1136(%var_1138, %var_1139) /* ty=(Tensor[(14, 13, 9), int32], Tensor[(960), float64], Tensor[(96, 1), int32], Tensor[(960), uint16], Tensor[(14, 13, 9), uint8]) */
}

def @func_3802() -> Tensor[(12, 12, 7), int32] {
  @func_3800() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_3441(%var_3439: Tensor[(12, 12, 7), uint64]) -> (Tensor[(12, 12, 7), int64],) {
  @func_3438(%var_3439) /* ty=(Tensor[(12, 12, 7), int64],) */
}

def @func_3526(%var_3522: Tensor[(13, 16, 12), float64], %var_3523: Tensor[(15), float32], %var_3524: Tensor[(504), int64], %var_3525: Tensor[(14, 1), uint64]) -> (Tensor[(13, 16, 12), float64], Tensor[(5, 3, 1), float32], Tensor[(15), float32], Tensor[(504), int64], Tensor[(504), int64], Tensor[(14, 1), uint64]) {
  %56 = fn (%var_3492: Tensor[(13, 16, 12), float64], %var_3509: Tensor[(15), float32], %var_3510: Tensor[(504), int64], %var_3515: Tensor[(14, 1), uint64]) -> (Tensor[(13, 16, 12), float64], Tensor[(5, 3, 1), float32], Tensor[(15), float32], Tensor[(504), int64], Tensor[(504), int64], Tensor[(14, 1), uint64]) {
    %37 = cast(%var_3492, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
    %38 = atan(%37) /* ty=Tensor[(13, 16, 12), float64] */;
    %39 = cast(%var_3492, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
    %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
    %41 = cast(%38, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
    %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %43 = cast(%var_3509, dtype="float32") /* ty=Tensor[(15), float32] */;
    %44 = cast(%var_3510, dtype="int64") /* ty=Tensor[(504), int64] */;
    %45 = reshape(%43, newshape=[5, 3, 1]) /* ty=Tensor[(5, 3, 1), float32] */;
    %46 = reshape(%44, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %47 = @func_3063(%45, %46) /* ty=(Tensor[(5, 3, 1), float32], Tensor[(504), int64], Tensor[(9, 7, 8), uint16]) */;
    %48 = cast(%var_3515, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
    %49 = cast(%var_3510, dtype="int64") /* ty=Tensor[(504), int64] */;
    %50 = reshape(%48, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
    %51 = reshape(%49, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %52 = @func_2754(%50, %51) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
    %53 = power(%41, %42) /* ty=Tensor[(13, 16, 12), float64] */;
    %54 = %47.0;
    %55 = %52.5;
    (%53, %54, %var_3509, %var_3510, %55, %var_3515)
  };
  %56(%var_3522, %var_3523, %var_3524, %var_3525) /* ty=(Tensor[(13, 16, 12), float64], Tensor[(5, 3, 1), float32], Tensor[(15), float32], Tensor[(504), int64], Tensor[(504), int64], Tensor[(14, 1), uint64]) */
}

def @func_5452() -> (Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) {
  %65 = fn () -> (Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) {
    %57 = @func_4667() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) */;
    %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %59 = reshape(%58, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
    %60 = @func_3142(%59) /* ty=Tensor[(14, 3, 10), float32] */;
    %61 = cast(%60, dtype="float64") /* ty=Tensor[(14, 3, 10), float64] */;
    %62 = @func_4342() /* ty=Tensor[(12, 12, 7), int32] */;
    %63 = %57.0;
    %64 = rsqrt(%61) /* ty=Tensor[(14, 3, 10), float64] */;
    (%62, meta[relay.Constant][2] /* ty=Tensor[(420), float32] */, %63, %64)
  };
  %65() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) */
}

def @func_5002() -> (Tensor[(12, 12, 7), float32],) {
  %69 = fn () -> (Tensor[(12, 12, 7), float32],) {
    %66 = @func_4342() /* ty=Tensor[(12, 12, 7), int32] */;
    %67 = cast(%66, dtype="float32") /* ty=Tensor[(12, 12, 7), float32] */;
    %68 = asinh(%67) /* ty=Tensor[(12, 12, 7), float32] */;
    (%68,)
  };
  %69() /* ty=(Tensor[(12, 12, 7), float32],) */
}

def @func_2884() -> Tensor[(12, 12, 7), uint64] {
  @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */
}

def @func_6603(%var_6602: Tensor[(693), float64]) -> (Tensor[(12, 12, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(12, 12, 7), float64]) {
  %79 = fn (%var_6588: Tensor[(693), float64]) -> (Tensor[(12, 12, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(12, 12, 7), float64]) {
    %70 = @func_3906() /* ty=(Tensor[(1008), int32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), float64]) */;
    %71 = cast(%var_6588, dtype="float64") /* ty=Tensor[(693), float64] */;
    %72 = reshape(%71, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
    %73 = @func_2605(%72) /* ty=(Tensor[(11, 9, 7), float64],) */;
    %74 = %70.2;
    %75 = cast(%74, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
    %76 = reshape(%75, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), float64] */;
    %77 = %73.0;
    %78 = @func_4391(%76) /* ty=Tensor[(12, 12, 7), float64] */;
    (%74, %77, %var_6588, %78)
  };
  %79(%var_6602) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(12, 12, 7), float64]) */
}

def @func_3115(%var_3108: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), float64]) {
  %80 = cast(%var_3108, dtype="float64") /* ty=Tensor[(15, 2, 7), float64] */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %82 = reshape(%81, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), float64] */;
  %83 = @func_2451(%82) /* ty=(Tensor[(12, 12, 7), bool],) */;
  %84 = atan(%80) /* ty=Tensor[(15, 2, 7), float64] */;
  %85 = %83.0;
  (%84, %85, meta[relay.Constant][3] /* ty=Tensor[(1008), float64] */)
}

def @func_2185() -> Tensor[(12, 12, 7), uint64] {
  %86 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %86.4
}

def @func_2404(%var_2402: Tensor[(504), int64], %var_2403: Tensor[(84), uint64]) -> (Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) {
  %100 = fn (%var_2384: Tensor[(504), int64], %var_2395: Tensor[(84), uint64]) -> (Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) {
    %87 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
    %88 = cast(%87, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
    %89 = cast(%var_2384, dtype="int64") /* ty=Tensor[(504), int64] */;
    %90 = reshape(%89, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
    %91 = @func_1648(%90) /* ty=(Tensor[(9, 7, 8), int64],) */;
    %92 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
    %93 = cast(%var_2395, dtype="uint64") /* ty=Tensor[(84), uint64] */;
    %94 = reshape(%92, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
    %95 = reshape(%93, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
    %96 = @func_571(%94, %95) /* ty=(Tensor[(7, 6, 2), float32],) */;
    %97 = erf(%88) /* ty=Tensor[(12, 12, 7), float64] */;
    %98 = %91.0;
    %99 = %96.0;
    (%97, %98, %var_2384, %99, meta[relay.Constant][4] /* ty=Tensor[(14, 1), uint64] */, %var_2395)
  };
  %100(%var_2402, %var_2403) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) */
}

def @func_4799(%var_4798: Tensor[(960), uint16]) -> (Tensor[(12, 12, 7), uint64], Tensor[(1008), int32], Tensor[(960), float64], Tensor[(96), int32], Tensor[(960), uint16]) {
  %109 = fn (%var_4786: Tensor[(960), uint16]) -> (Tensor[(12, 12, 7), uint64], Tensor[(1008), int32], Tensor[(960), float64], Tensor[(96), int32], Tensor[(960), uint16]) {
    %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
    %102 = cast(%var_4786, dtype="uint16") /* ty=Tensor[(960), uint16] */;
    %103 = reshape(%101, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int32] */;
    %104 = reshape(%102, newshape=[960]) /* ty=Tensor[(960), uint16] */;
    %105 = @func_1021(%103, %104) /* ty=(Tensor[(3, 8, 4), int32], Tensor[(960), float64]) */;
    %106 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
    %107 = @func_3179() /* ty=Tensor[(1008), int32] */;
    %108 = %105.1;
    (%106, %107, %108, meta[relay.Constant][5] /* ty=Tensor[(96), int32] */, %var_4786)
  };
  %109(%var_4798) /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(1008), int32], Tensor[(960), float64], Tensor[(96), int32], Tensor[(960), uint16]) */
}

def @func_2963() -> (Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) {
  %118 = fn () -> (Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) {
    %110 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
    %111 = cast(meta[relay.Constant][6] /* ty=Tensor[(1008), int32] */, dtype="int32") /* ty=Tensor[(1008), int32] */;
    %112 = %110.0;
    %113 = cast(%112, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
    %114 = reshape(%111, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
    %115 = reshape(%113, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %116 = @func_2937(%114, %115) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(84), uint64], Tensor[(96), float32]) */;
    %117 = %116.2;
    (%112, %117, meta[relay.Constant][6] /* ty=Tensor[(1008), int32] */)
  };
  %118() /* ty=(Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) */
}

def @func_1422(%var_1421: Tensor[(9, 3, 5), float64]) -> (Tensor[(9, 3, 5), float64],) {
  %121 = fn (%var_1416: Tensor[(9, 3, 5), float64]) -> (Tensor[(9, 3, 5), float64],) {
    %119 = cast(%var_1416, dtype="float64") /* ty=Tensor[(9, 3, 5), float64] */;
    %120 = acos(%119) /* ty=Tensor[(9, 3, 5), float64] */;
    (%120,)
  };
  %121(%var_1421) /* ty=(Tensor[(9, 3, 5), float64],) */
}

def @func_4343() -> Tensor[(12, 12, 7), int32] {
  %122 = fn () -> Tensor[(12, 12, 7), int32] {
    @func_3287() /* ty=Tensor[(12, 12, 7), int32] */
  };
  %122() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_2564(%var_2562: Tensor[(84), uint64]) -> (Tensor[(9, 3, 5), float64], Tensor[(135), float64], Tensor[(12, 12, 7), float64], Tensor[(7, 6, 2), float32], Tensor[(1, 14), uint64], Tensor[(84), uint64]) {
  @func_2561(%var_2562) /* ty=(Tensor[(9, 3, 5), float64], Tensor[(135), float64], Tensor[(12, 12, 7), float64], Tensor[(7, 6, 2), float32], Tensor[(1, 14), uint64], Tensor[(84), uint64]) */
}

def @func_1355(%var_1353: Tensor[(9, 16, 3), float32], %var_1354: Tensor[(126), int32]) -> (Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) {
  %131 = fn (%var_1327: Tensor[(9, 16, 3), float32], %var_1348: Tensor[(126), int32]) -> (Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) {
    %123 = cast(%var_1327, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
    %124 = cast(%var_1348, dtype="int32") /* ty=Tensor[(126), int32] */;
    %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
    %126 = reshape(%124, newshape=[14, 1, 9]) /* ty=Tensor[(14, 1, 9), int32] */;
    %127 = reshape(%125, newshape=[96, 1]) /* ty=Tensor[(96, 1), int32] */;
    %128 = @func_1136(%126, %127) /* ty=(Tensor[(14, 13, 9), int32], Tensor[(960), float64], Tensor[(96, 1), int32], Tensor[(960), uint16], Tensor[(14, 13, 9), uint8]) */;
    %129 = asin(%123) /* ty=Tensor[(9, 16, 3), float32] */;
    %130 = %128.2;
    (%129, %130, %var_1348, meta[relay.Constant][7] /* ty=Tensor[(96), int32] */)
  };
  %131(%var_1353, %var_1354) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) */
}

def @func_1953(%var_1936: Tensor[(7, 2, 9), float32]) -> (Tensor[(7, 2, 9), float32],) {
  %132 = cast(%var_1936, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %133 = acosh(%132) /* ty=Tensor[(7, 2, 9), float32] */;
  %134 = cast(%var_1936, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %138 = mod(%136, %137) /* ty=Tensor[(7, 2, 9), float32] */;
  (%138,)
}

def @func_5624(%var_5622: Tensor[(96, 4), float64]) -> (Tensor[(96, 4), uint32],) {
  @func_5621(%var_5622) /* ty=(Tensor[(96, 4), uint32],) */
}

def @func_2509() -> Tensor[(12, 12, 7), int32] {
  %139 = fn () -> Tensor[(12, 12, 7), int32] {
    @func_2075() /* ty=Tensor[(12, 12, 7), int32] */
  };
  %139() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_4140() -> (Tensor[(12, 12, 7), uint64],) {
  %141 = fn () -> (Tensor[(12, 12, 7), uint64],) {
    %140 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
    (%140,)
  };
  %141() /* ty=(Tensor[(12, 12, 7), uint64],) */
}

def @func_2825() -> (Tensor[(12, 12, 7), int32],) {
  %142 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
  (%142,)
}

def @func_5259() -> (Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) {
  @func_5257() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) */
}

def @func_5339(%var_5337: Tensor[(224), float32]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(224), float32], Tensor[(432), float32], Tensor[(1008), bool], Tensor[(12, 12, 7), int32], Tensor[(693), uint64], Tensor[(1008), int32]) {
  @func_5336(%var_5337) /* ty=(Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(224), float32], Tensor[(432), float32], Tensor[(1008), bool], Tensor[(12, 12, 7), int32], Tensor[(693), uint64], Tensor[(1008), int32]) */
}

def @func_3163() -> (Tensor[(96, 1), float64],) {
  @func_3161() /* ty=(Tensor[(96, 1), float64],) */
}

def @func_4667() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) {
  %143 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %144 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
  %145 = %143.0;
  %146 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %147 = %144.0;
  (%145, %146, %147)
}

def @func_2607(%var_2606: Tensor[(11, 9, 7), float64]) -> (Tensor[(11, 9, 7), float64],) {
  %150 = fn (%var_2596: Tensor[(11, 9, 7), float64]) -> (Tensor[(11, 9, 7), float64],) {
    %148 = cast(%var_2596, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
    %149 = tan(%148) /* ty=Tensor[(11, 9, 7), float64] */;
    (%149,)
  };
  %150(%var_2606) /* ty=(Tensor[(11, 9, 7), float64],) */
}

def @func_6719(%var_6716: Tensor[(1, 12, 7), int8], %var_6717: Tensor[(10, 12, 7), int8], %var_6718: Tensor[(14), uint64]) -> (Tensor[(12, 12, 7), uint64], Tensor[(10, 12, 7), bool], Tensor[(14), uint64], Tensor[(14), uint64], Tensor[(36, 14), int64], Tensor[(1, 12, 7), float64]) {
  %166 = fn (%var_6644: Tensor[(1, 12, 7), int8], %var_6645: Tensor[(10, 12, 7), int8], %var_6683: Tensor[(14), uint64]) -> (Tensor[(12, 12, 7), uint64], Tensor[(10, 12, 7), bool], Tensor[(14), uint64], Tensor[(14), uint64], Tensor[(36, 14), int64], Tensor[(1, 12, 7), float64]) {
    %151 = cast(%var_6644, dtype="bool") /* ty=Tensor[(1, 12, 7), bool] */;
    %152 = cast(%var_6645, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
    %153 = less(%151, %152) /* ty=Tensor[(10, 12, 7), bool] */;
    %154 = cast(%153, dtype="bool") /* ty=Tensor[(10, 12, 7), bool] */;
    %155 = cast(%var_6644, dtype="bool") /* ty=Tensor[(1, 12, 7), bool] */;
    %156 = cast(%var_6683, dtype="uint64") /* ty=Tensor[(14), uint64] */;
    %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(36, 14), int64] */, dtype="int64") /* ty=Tensor[(36, 14), int64] */;
    %158 = reshape(%156, newshape=[14]) /* ty=Tensor[(14), uint64] */;
    %159 = reshape(%157, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %160 = @func_5849(%158, %159) /* ty=(Tensor[(126), int32], Tensor[(14), uint64], Tensor[(504), int64], Tensor[(?, 15, 4), float64]) */;
    %161 = cast(%var_6644, dtype="float64") /* ty=Tensor[(1, 12, 7), float64] */;
    %162 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
    %163 = not_equal(%154, %155) /* ty=Tensor[(10, 12, 7), bool] */;
    %164 = %160.1;
    %165 = cosh(%161) /* ty=Tensor[(1, 12, 7), float64] */;
    (%162, %163, %164, %var_6683, meta[relay.Constant][8] /* ty=Tensor[(36, 14), int64] */, %165)
  };
  %166(%var_6716, %var_6717, %var_6718) /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(10, 12, 7), bool], Tensor[(14), uint64], Tensor[(14), uint64], Tensor[(36, 14), int64], Tensor[(1, 12, 7), float64]) */
}

def @main() -> Tensor[(12, 12, 7), bool] {
  %167 = @func_3104() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
  %168 = %167.1;
  %169 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 12, 7), int32] */, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%171, %172) /* ty=Tensor[(12, 12, 7), bool] */
}

def @func_3289() -> Tensor[(12, 12, 7), int32] {
  @func_3287() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_4728(%var_4703: Tensor[(8, 8, 13), float64], %var_4718: Tensor[(8, 8, 13), float64]) -> (Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) {
  %173 = cast(%var_4703, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %174 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(8, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %177 = cast(%var_4718, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %178 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(8, 8, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 8, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 13), float64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %181 = subtract(%175, %176) /* ty=Tensor[(8, 8, 13), float64] */;
  %182 = maximum(%179, %180) /* ty=Tensor[(8, 8, 13), float64] */;
  (%181, %182)
}

def @func_1956(%var_1954: Tensor[(7, 2, 9), float32]) -> (Tensor[(7, 2, 9), float32],) {
  @func_1953(%var_1954) /* ty=(Tensor[(7, 2, 9), float32],) */
}

def @func_2652(%var_2650: Tensor[(10, 15, 8), float64], %var_2651: Tensor[(1, 504), int64]) -> (Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) {
  %190 = fn (%var_2613: Tensor[(10, 15, 8), float64], %var_2645: Tensor[(1, 504), int64]) -> (Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) {
    %183 = cast(%var_2613, dtype="float64") /* ty=Tensor[(10, 15, 8), float64] */;
    %184 = cast(%var_2645, dtype="int64") /* ty=Tensor[(1, 504), int64] */;
    %185 = reshape(%184, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
    %186 = @func_1648(%185) /* ty=(Tensor[(9, 7, 8), int64],) */;
    %187 = atan(%183) /* ty=Tensor[(10, 15, 8), float64] */;
    %188 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
    %189 = %186.0;
    (%187, %188, %189, %var_2645)
  };
  %190(%var_2650, %var_2651) /* ty=(Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) */
}

def @func_5384() -> (Tensor[(96, 8), int64], Tensor[(9, 7, 8), int64], Tensor[(12, 42), int64], Tensor[(84), uint64]) {
  @func_5382() /* ty=(Tensor[(96, 8), int64], Tensor[(9, 7, 8), int64], Tensor[(12, 42), int64], Tensor[(84), uint64]) */
}

def @func_6570() -> (Tensor[(12, 12, 7), float64], Tensor[(12, 12, 7), int32]) {
  %191 = @func_3681() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) */;
  %192 = %191.0;
  %193 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  (%192, %193)
}

def @func_3681() -> (Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) {
  %194 = @func_2578() /* ty=(Tensor[(12, 12, 7), int32],) */;
  %195 = %194.0;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %198 = reshape(%197, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %199 = @func_2561(%198) /* ty=(Tensor[(9, 3, 5), float64], Tensor[(135), float64], Tensor[(12, 12, 7), float64], Tensor[(7, 6, 2), float32], Tensor[(1, 14), uint64], Tensor[(84), uint64]) */;
  %200 = acosh(%196) /* ty=Tensor[(12, 12, 7), float64] */;
  %201 = %199.1;
  (%200, %201, meta[relay.Constant][11] /* ty=Tensor[(84), uint64] */)
}

def @func_2882() -> Tensor[(12, 12, 7), uint64] {
  %202 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
  %202.0
}

def @func_516(%var_514: int64) -> Tensor[(11, 14, 13), int64] {
  @func_513(%var_514) /* ty=Tensor[(11, 14, 13), int64] */
}

def @func_513(%var_486: int64) -> Tensor[(11, 14, 13), int64] {
  %203 = cast(%var_486, dtype="int64") /* ty=int64 */;
  %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 14, 13), int64] */, dtype="int64") /* ty=Tensor[(11, 14, 13), int64] */;
  subtract(%203, %204) /* ty=Tensor[(11, 14, 13), int64] */
}

def @func_2451(%var_2432: Tensor[(12, 12, 7), float64]) -> (Tensor[(12, 12, 7), bool],) {
  %205 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %207 = log2(%206) /* ty=Tensor[(12, 12, 7), float64] */;
  %208 = cast(%var_2432, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = equal(%210, %211) /* ty=Tensor[(12, 12, 7), bool] */;
  %213 = cast(%207, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %217 = divide(%215, %216) /* ty=Tensor[(12, 12, 7), float64] */;
  %218 = cast(%217, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %219 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%207, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = less_equal(%220, %221) /* ty=Tensor[(12, 12, 7), bool] */;
  (%222,)
}

def @func_4550() -> Tensor[(12, 12, 7), bool] {
  @func_4548() /* ty=Tensor[(12, 12, 7), bool] */
}

def @func_5852(%var_5850: Tensor[(14), uint64], %var_5851: Tensor[(504), int64]) -> (Tensor[(126), int32], Tensor[(14), uint64], Tensor[(504), int64], Tensor[(?, 15, 4), float64]) {
  %236 = fn (%var_5820: Tensor[(14), uint64], %var_5821: Tensor[(504), int64]) -> (Tensor[(126), int32], Tensor[(14), uint64], Tensor[(504), int64], Tensor[(?, 15, 4), float64]) {
    %223 = cast(%var_5820, dtype="uint64") /* ty=Tensor[(14), uint64] */;
    %224 = cast(%var_5821, dtype="int64") /* ty=Tensor[(504), int64] */;
    %225 = reshape(%223, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
    %226 = reshape(%224, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %227 = @func_2754(%225, %226) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
    %228 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
    %229 = cosh(%228) /* ty=Tensor[(1, 15, 4), float32] */;
    %230 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float64") /* ty=Tensor[(1, 15, 4), float64] */;
    %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%229, dtype="float64") /* ty=Tensor[(1, 15, 4), float64] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %234 = %227.6;
    %235 = mod(%232, %233) /* ty=Tensor[(?, 15, 4), float64] */;
    (%234, %var_5820, %var_5821, %235)
  };
  %236(%var_5850, %var_5851) /* ty=(Tensor[(126), int32], Tensor[(14), uint64], Tensor[(504), int64], Tensor[(?, 15, 4), float64]) */
}

def @func_2075() -> Tensor[(12, 12, 7), int32] {
  %237 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %238 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(12, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%239, %240) /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_3752() -> (Tensor[(1008), int32],) {
  @func_3750() /* ty=(Tensor[(1008), int32],) */
}

def @func_3683() -> (Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) {
  @func_3681() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) */
}

def @func_2940(%var_2938: Tensor[(12, 12, 7), int32], %var_2939: Tensor[(96), float32]) -> (Tensor[(12, 12, 7), float64], Tensor[(84), uint64], Tensor[(96), float32]) {
  %252 = fn (%var_2891: Tensor[(12, 12, 7), int32], %var_2921: Tensor[(96), float32]) -> (Tensor[(12, 12, 7), float64], Tensor[(84), uint64], Tensor[(96), float32]) {
    %241 = @func_2825() /* ty=(Tensor[(12, 12, 7), int32],) */;
    %242 = %241.0;
    %243 = cast(%var_2891, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
    %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%242, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %247 = cast(%var_2921, dtype="float32") /* ty=Tensor[(96), float32] */;
    %248 = reshape(%247, newshape=[96, 1]) /* ty=Tensor[(96, 1), float32] */;
    %249 = @func_2327(%248) /* ty=(Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64], Tensor[(96, ?), bool], Tensor[(96, ?), uint16], Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
    %250 = mod(%245, %246) /* ty=Tensor[(12, 12, 7), float64] */;
    %251 = %249.2;
    (%250, %251, %var_2921)
  };
  %252(%var_2938, %var_2939) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(84), uint64], Tensor[(96), float32]) */
}

def @func_4574() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32]) {
  @func_4572() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */
}

def @func_5543(%var_5542: Tensor[(1008), int32]) -> (Tensor[(432), float32], Tensor[(1008), int32], Tensor[(12, 12, 7), float32]) {
  %260 = fn (%var_5527: Tensor[(1008), int32]) -> (Tensor[(432), float32], Tensor[(1008), int32], Tensor[(12, 12, 7), float32]) {
    %253 = cast(%var_5527, dtype="int32") /* ty=Tensor[(1008), int32] */;
    %254 = reshape(%253, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
    %255 = @func_4066(%254) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) */;
    %256 = %255.0;
    %257 = cast(%256, dtype="float32") /* ty=Tensor[(12, 12, 7), float32] */;
    %258 = @func_5112() /* ty=Tensor[(432), float32] */;
    %259 = cosh(%257) /* ty=Tensor[(12, 12, 7), float32] */;
    (%258, %var_5527, %259)
  };
  %260(%var_5542) /* ty=(Tensor[(432), float32], Tensor[(1008), int32], Tensor[(12, 12, 7), float32]) */
}

def @func_1651(%var_1649: Tensor[(9, 7, 8), int64]) -> (Tensor[(9, 7, 8), int64],) {
  @func_1648(%var_1649) /* ty=(Tensor[(9, 7, 8), int64],) */
}

def @func_5382() -> (Tensor[(96, 8), int64], Tensor[(9, 7, 8), int64], Tensor[(12, 42), int64], Tensor[(84), uint64]) {
  %261 = @func_5257() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) */;
  %262 = %261.1;
  %263 = cast(%262, dtype="int64") /* ty=Tensor[(96, ?), int64] */;
  %264 = cast(meta[relay.Constant][16] /* ty=Tensor[(96, 8), bool] */, dtype="int64") /* ty=Tensor[(96, 8), int64] */;
  %265 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 42), int64] */, dtype="int64") /* ty=Tensor[(12, 42), int64] */;
  %266 = cast(meta[relay.Constant][18] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %267 = reshape(%265, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %268 = reshape(%266, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %269 = @func_2401(%267, %268) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) */;
  %270 = left_shift(%263, %264) /* ty=Tensor[(96, 8), int64] */;
  %271 = %269.1;
  (%270, %271, meta[relay.Constant][17] /* ty=Tensor[(12, 42), int64] */, meta[relay.Constant][18] /* ty=Tensor[(84), uint64] */)
}

def @func_5104() -> Tensor[(12, 12, 7), int32] {
  @func_3578() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_5621(%var_5604: Tensor[(96, 4), float64]) -> (Tensor[(96, 4), uint32],) {
  %272 = @func_3017() /* ty=(Tensor[(96, 1), float64],) */;
  %273 = %272.0;
  %274 = cast(%273, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %275 = cast(%var_5604, dtype="bool") /* ty=Tensor[(96, 4), bool] */;
  %276 = not_equal(%274, %275) /* ty=Tensor[(96, 4), bool] */;
  %277 = cast(%276, dtype="uint32") /* ty=Tensor[(96, 4), uint32] */;
  %278 = cast(%273, dtype="uint32") /* ty=Tensor[(96, 1), uint32] */;
  %279 = left_shift(%277, %278) /* ty=Tensor[(96, 4), uint32] */;
  (%279,)
}

def @func_6230(%var_6228: Tensor[(9, 1, 4), int16]) -> (Tensor[(9, 2, 4), int16], Tensor[(432), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(8, 8, 13), float64]) {
  @func_6227(%var_6228) /* ty=(Tensor[(9, 2, 4), int16], Tensor[(432), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(8, 8, 13), float64]) */
}

def @func_3908() -> (Tensor[(1008), int32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), float64]) {
  @func_3906() /* ty=(Tensor[(1008), int32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), float64]) */
}

def @func_4175() -> (Tensor[(15, 9, 7), float64], Tensor[(15, 9, 7), float32]) {
  %284 = fn () -> (Tensor[(15, 9, 7), float64], Tensor[(15, 9, 7), float32]) {
    %280 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 9, 7), float64] */;
    %281 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 9, 7), float64] */, dtype="float32") /* ty=Tensor[(15, 9, 7), float32] */;
    %282 = exp(%280) /* ty=Tensor[(15, 9, 7), float64] */;
    %283 = log10(%281) /* ty=Tensor[(15, 9, 7), float32] */;
    (%282, %283)
  };
  %284() /* ty=(Tensor[(15, 9, 7), float64], Tensor[(15, 9, 7), float32]) */
}

def @func_2758(%var_2756: Tensor[(14, 1), uint64], %var_2757: Tensor[(504), int64]) -> (Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) {
  @func_2754(%var_2756, %var_2757) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */
}

def @func_2187() -> Tensor[(12, 12, 7), uint64] {
  @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */
}

def @func_2579() -> (Tensor[(12, 12, 7), int32],) {
  %286 = fn () -> (Tensor[(12, 12, 7), int32],) {
    %285 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
    (%285,)
  };
  %286() /* ty=(Tensor[(12, 12, 7), int32],) */
}

def @func_3625(%var_3624: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float64] {
  %288 = fn (%var_3620: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float64] {
    %287 = cast(%var_3620, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
    log10(%287) /* ty=Tensor[(15, 12, 11), float64] */
  };
  %288(%var_3624) /* ty=Tensor[(15, 12, 11), float64] */
}

def @func_3992(%var_3982: Tensor[(12, 9, 5), uint64], %var_3983: Tensor[(12, 9, 5), uint64]) -> Tensor[(12, 9, 5), uint64] {
  %289 = cast(%var_3983, dtype="uint64") /* ty=Tensor[(12, 9, 5), uint64] */;
  %290 = shape_of(%var_3982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_3982, dtype="uint64") /* ty=Tensor[(12, 9, 5), uint64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%291, %292) /* ty=Tensor[(12, 9, 5), uint64] */
}

def @func_4197(%var_4183: Tensor[(12, 12, 7), int32]) -> (Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) {
  %293 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  %294 = cast(%var_4183, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %298 = cast(%293, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %299 = shape_of(%var_4183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_4183, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %302 = left_shift(%296, %297) /* ty=Tensor[(12, 12, 7), int64] */;
  %303 = bitwise_and(%300, %301) /* ty=Tensor[(12, 12, 7), int64] */;
  (%302, %303)
}

def @func_4328(%var_4317: Tensor[(96, 3), float64]) -> (Tensor[(7, 2, 9), float32], Tensor[(96, 3), float64]) {
  %304 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
  %305 = @func_3161() /* ty=(Tensor[(96, 1), float64],) */;
  %306 = %305.0;
  %307 = cast(%306, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %308 = cast(%var_4317, dtype="bool") /* ty=Tensor[(96, 3), bool] */;
  %309 = not_equal(%307, %308) /* ty=Tensor[(96, 3), bool] */;
  %310 = cast(%309, dtype="float64") /* ty=Tensor[(96, 3), float64] */;
  %311 = %304.1;
  %312 = tan(%310) /* ty=Tensor[(96, 3), float64] */;
  (%311, %312)
}

def @func_5088(%var_5064: Tensor[(432), float32], %var_5065: Tensor[(126), int32]) -> (Tensor[(84), uint64], Tensor[(126), int32], Tensor[(432), float32], Tensor[(126), int32]) {
  %313 = @func_3681() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(135), float64], Tensor[(84), uint64]) */;
  %314 = cast(%var_5064, dtype="float32") /* ty=Tensor[(432), float32] */;
  %315 = cast(%var_5065, dtype="int32") /* ty=Tensor[(126), int32] */;
  %316 = reshape(%314, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %317 = reshape(%315, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %318 = @func_1352(%316, %317) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) */;
  %319 = %313.2;
  %320 = %318.2;
  (%319, %320, %var_5064, %var_5065)
}

def @func_6271() -> (Tensor[(12, 12, 7), int32],) {
  %323 = fn () -> (Tensor[(12, 12, 7), int32],) {
    %321 = @func_4572() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
    %322 = %321.1;
    (%322,)
  };
  %323() /* ty=(Tensor[(12, 12, 7), int32],) */
}

def @func_1136(%var_1110: Tensor[(14, 1, 9), int32], %var_1118: Tensor[(96, 1), int32]) -> (Tensor[(14, 13, 9), int32], Tensor[(960), float64], Tensor[(96, 1), int32], Tensor[(960), uint16], Tensor[(14, 13, 9), uint8]) {
  %324 = cast(%var_1110, dtype="int32") /* ty=Tensor[(14, 1, 9), int32] */;
  %325 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 13, 9), int32] */, dtype="int32") /* ty=Tensor[(14, 13, 9), int32] */;
  %326 = cast(%var_1118, dtype="int32") /* ty=Tensor[(96, 1), int32] */;
  %327 = cast(meta[relay.Constant][21] /* ty=Tensor[(960), uint16] */, dtype="uint16") /* ty=Tensor[(960), uint16] */;
  %328 = reshape(%326, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int32] */;
  %329 = reshape(%327, newshape=[960]) /* ty=Tensor[(960), uint16] */;
  %330 = @func_1021(%328, %329) /* ty=(Tensor[(3, 8, 4), int32], Tensor[(960), float64]) */;
  %331 = cast(%var_1110, dtype="uint8") /* ty=Tensor[(14, 1, 9), uint8] */;
  %332 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 13, 9), int32] */, dtype="uint8") /* ty=Tensor[(14, 13, 9), uint8] */;
  %333 = minimum(%324, %325) /* ty=Tensor[(14, 13, 9), int32] */;
  %334 = %330.1;
  %335 = right_shift(%331, %332) /* ty=Tensor[(14, 13, 9), uint8] */;
  (%333, %334, %var_1118, meta[relay.Constant][21] /* ty=Tensor[(960), uint16] */, %335)
}

def @func_4572() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32]) {
  %336 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %337 = %336.1;
  %338 = @func_3287() /* ty=Tensor[(12, 12, 7), int32] */;
  (%337, %338)
}

def @func_3066(%var_3064: Tensor[(5, 3, 1), float32], %var_3065: Tensor[(504), int64]) -> (Tensor[(5, 3, 1), float32], Tensor[(504), int64], Tensor[(9, 7, 8), uint16]) {
  %349 = fn (%var_3043: Tensor[(5, 3, 1), float32], %var_3049: Tensor[(504), int64]) -> (Tensor[(5, 3, 1), float32], Tensor[(504), int64], Tensor[(9, 7, 8), uint16]) {
    %339 = cast(-2.43474f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %340 = cast(%var_3043, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
    %341 = cast(%var_3049, dtype="int64") /* ty=Tensor[(504), int64] */;
    %342 = reshape(%341, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
    %343 = @func_1648(%342) /* ty=(Tensor[(9, 7, 8), int64],) */;
    %344 = %343.0;
    %345 = cast(-2.43474f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
    %346 = cast(%344, dtype="uint16") /* ty=Tensor[(9, 7, 8), uint16] */;
    %347 = divide(%339, %340) /* ty=Tensor[(5, 3, 1), float32] */;
    %348 = left_shift(%345, %346) /* ty=Tensor[(9, 7, 8), uint16] */;
    (%347, %var_3049, %348)
  };
  %349(%var_3064, %var_3065) /* ty=(Tensor[(5, 3, 1), float32], Tensor[(504), int64], Tensor[(9, 7, 8), uint16]) */
}

def @func_4133(%var_4131: Tensor[(6, 84), int64], %var_4132: Tensor[(135), float64]) -> (Tensor[(126), float32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(6, 84), int64], Tensor[(9, 3, 5), float64], Tensor[(135), float64]) {
  %362 = fn (%var_4106: Tensor[(6, 84), int64], %var_4117: Tensor[(135), float64]) -> (Tensor[(126), float32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(6, 84), int64], Tensor[(9, 3, 5), float64], Tensor[(135), float64]) {
    %350 = @func_2675() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */;
    %351 = cast(meta[relay.Constant][22] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %352 = cast(%var_4106, dtype="int64") /* ty=Tensor[(6, 84), int64] */;
    %353 = reshape(%351, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float64] */;
    %354 = reshape(%352, newshape=[1, 504]) /* ty=Tensor[(1, 504), int64] */;
    %355 = @func_2649(%353, %354) /* ty=(Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) */;
    %356 = cast(%var_4117, dtype="float64") /* ty=Tensor[(135), float64] */;
    %357 = reshape(%356, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float64] */;
    %358 = @func_1420(%357) /* ty=(Tensor[(9, 3, 5), float64],) */;
    %359 = %350.2;
    %360 = %355.1;
    %361 = %358.0;
    (%359, %360, meta[relay.Constant][22] /* ty=Tensor[(1200), float64] */, %var_4106, %361, %var_4117)
  };
  %362(%var_4131, %var_4132) /* ty=(Tensor[(126), float32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(6, 84), int64], Tensor[(9, 3, 5), float64], Tensor[(135), float64]) */
}

def @func_3145(%var_3143: Tensor[(14, 3, 10), float32]) -> Tensor[(14, 3, 10), float32] {
  @func_3142(%var_3143) /* ty=Tensor[(14, 3, 10), float32] */
}

def @func_5162(%var_5125: Tensor[(1, 3, 16), int64], %var_5126: Tensor[(9, 3, 16), int64], %var_5133: Tensor[(1008), float64]) -> (Tensor[(9, 3, 16), bool], Tensor[(1008), uint8], Tensor[(9, 3, 16), int32]) {
  %363 = cast(%var_5125, dtype="int64") /* ty=Tensor[(1, 3, 16), int64] */;
  %364 = cast(%var_5126, dtype="int64") /* ty=Tensor[(9, 3, 16), int64] */;
  %365 = add(%363, %364) /* ty=Tensor[(9, 3, 16), int64] */;
  %366 = cast(%365, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %367 = shape_of(%var_5126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_5126, dtype="bool") /* ty=Tensor[(9, 3, 16), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %370 = cast(%var_5133, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %371 = reshape(%370, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), float64] */;
  %372 = @func_4391(%371) /* ty=Tensor[(12, 12, 7), float64] */;
  %373 = cast(%372, dtype="uint8") /* ty=Tensor[(12, 12, 7), uint8] */;
  %374 = shape_of(%var_5133, dtype="int32") /* ty=Tensor[(1), int32] */;
  %375 = cast(%var_5133, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 3, 16), int64] */, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
  %378 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%365, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %381 = logical_or(%368, %369) /* ty=Tensor[(9, 3, 16), bool] */;
  %382 = add(%375, %376) /* ty=Tensor[(1008), uint8] */;
  %383 = bitwise_xor(%379, %380) /* ty=Tensor[(9, 3, 16), int32] */;
  (%381, %382, %383)
}

def @func_5772() -> (Tensor[(12, 12, 7), float64], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) {
  %384 = @func_5104() /* ty=Tensor[(12, 12, 7), int32] */;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %386 = cast(meta[relay.Constant][24] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %387 = cast(meta[relay.Constant][24] /* ty=Tensor[(832), float64] */, dtype="float64") /* ty=Tensor[(832), float64] */;
  %388 = reshape(%386, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %389 = reshape(%387, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %390 = @func_4728(%388, %389) /* ty=(Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) */;
  %391 = atanh(%385) /* ty=Tensor[(12, 12, 7), float64] */;
  %392 = %390.0;
  (%391, %392, meta[relay.Constant][24] /* ty=Tensor[(832), float64] */)
}

def @func_5807(%var_5806: Tensor[(5, 9, 1), float32]) -> (Tensor[(5, 9, 1), float32], Tensor[(1008), int32], Tensor[(15, 7, 2), float64], Tensor[(210), float64]) {
  %400 = fn (%var_5790: Tensor[(5, 9, 1), float32]) -> (Tensor[(5, 9, 1), float32], Tensor[(1008), int32], Tensor[(15, 7, 2), float64], Tensor[(210), float64]) {
    %393 = cast(%var_5790, dtype="float32") /* ty=Tensor[(5, 9, 1), float32] */;
    %394 = @func_2962() /* ty=(Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) */;
    %395 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %396 = reshape(%395, newshape=[15, 7, 2]) /* ty=Tensor[(15, 7, 2), float64] */;
    %397 = asinh(%393) /* ty=Tensor[(5, 9, 1), float32] */;
    %398 = %394.2;
    %399 = @func_3565(%396) /* ty=Tensor[(15, 7, 2), float64] */;
    (%397, %398, %399, meta[relay.Constant][25] /* ty=Tensor[(210), float64] */)
  };
  %400(%var_5806) /* ty=(Tensor[(5, 9, 1), float32], Tensor[(1008), int32], Tensor[(15, 7, 2), float64], Tensor[(210), float64]) */
}

def @func_6479(%var_6412: Tensor[(832), float64]) -> (Tensor[(12, 12, 7), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) {
  %401 = cast(%var_6412, dtype="float64") /* ty=Tensor[(832), float64] */;
  %402 = cast(%var_6412, dtype="float64") /* ty=Tensor[(832), float64] */;
  %403 = reshape(%401, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %404 = reshape(%402, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %405 = @func_4728(%403, %404) /* ty=(Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) */;
  %406 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %407 = @func_2825() /* ty=(Tensor[(12, 12, 7), int32],) */;
  %408 = @func_4139() /* ty=(Tensor[(12, 12, 7), uint64],) */;
  %409 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  %410 = %405.1;
  %411 = %406.0;
  %412 = %407.0;
  %413 = %408.0;
  (%409, %410, %var_6412, %411, %412, %413)
}

def @func_574(%var_572: Tensor[(7, 1, 2), uint64], %var_573: Tensor[(7, 6, 2), uint64]) -> (Tensor[(7, 6, 2), float32],) {
  %419 = fn (%var_549: Tensor[(7, 1, 2), uint64], %var_550: Tensor[(7, 6, 2), uint64]) -> (Tensor[(7, 6, 2), float32],) {
    %414 = cast(%var_549, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
    %415 = cast(%var_550, dtype="bool") /* ty=Tensor[(7, 6, 2), bool] */;
    %416 = less_equal(%414, %415) /* ty=Tensor[(7, 6, 2), bool] */;
    %417 = cast(%416, dtype="float32") /* ty=Tensor[(7, 6, 2), float32] */;
    %418 = rsqrt(%417) /* ty=Tensor[(7, 6, 2), float32] */;
    (%418,)
  };
  %419(%var_572, %var_573) /* ty=(Tensor[(7, 6, 2), float32],) */
}

def @func_2177() -> (Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) {
  %435 = fn () -> (Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) {
    %420 = cast(meta[relay.Constant][26] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %421 = cast(meta[relay.Constant][27] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
    %422 = reshape(%420, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
    %423 = reshape(%421, newshape=[126]) /* ty=Tensor[(126), int32] */;
    %424 = @func_1352(%422, %423) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(96, 1), int32], Tensor[(126), int32], Tensor[(96), int32]) */;
    %425 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %426 = reshape(%425, newshape=[]) /* ty=int64 */;
    %427 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
    %428 = cast(%427, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
    %429 = tan(%428) /* ty=Tensor[(12, 12, 7), float64] */;
    %430 = cast(%429, dtype="uint64") /* ty=Tensor[(12, 12, 7), uint64] */;
    %431 = cast(5 /* ty=int64 */, dtype="uint64") /* ty=uint64 */;
    %432 = %424.1;
    %433 = @func_513(%426) /* ty=Tensor[(11, 14, 13), int64] */;
    %434 = bitwise_xor(%430, %431) /* ty=Tensor[(12, 12, 7), uint64] */;
    (%432, meta[relay.Constant][26] /* ty=Tensor[(432), float32] */, meta[relay.Constant][27] /* ty=Tensor[(126), int32] */, %433, %434)
  };
  %435() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */
}

def @func_3438(%var_3412: Tensor[(12, 12, 7), uint64]) -> (Tensor[(12, 12, 7), int64],) {
  %436 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %437 = cast(%var_3412, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %441 = subtract(%439, %440) /* ty=Tensor[(12, 12, 7), int64] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %443 = cos(%442) /* ty=Tensor[(12, 12, 7), float64] */;
  %444 = cast(%436, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="int64") /* ty=Tensor[(12, 12, 7), int64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %448 = minimum(%446, %447) /* ty=Tensor[(12, 12, 7), int64] */;
  (%448,)
}

def @func_5092(%var_5090: Tensor[(432), float32], %var_5091: Tensor[(126), int32]) -> (Tensor[(84), uint64], Tensor[(126), int32], Tensor[(432), float32], Tensor[(126), int32]) {
  @func_5088(%var_5090, %var_5091) /* ty=(Tensor[(84), uint64], Tensor[(126), int32], Tensor[(432), float32], Tensor[(126), int32]) */
}

def @func_1648(%var_1644: Tensor[(9, 7, 8), int64]) -> (Tensor[(9, 7, 8), int64],) {
  %449 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 1, 8), int64] */, dtype="int64") /* ty=Tensor[(9, 1, 8), int64] */;
  %450 = cast(%var_1644, dtype="int64") /* ty=Tensor[(9, 7, 8), int64] */;
  %451 = bitwise_or(%449, %450) /* ty=Tensor[(9, 7, 8), int64] */;
  (%451,)
}

def @func_5257() -> (Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) {
  %452 = @func_3161() /* ty=(Tensor[(96, 1), float64],) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %455 = asinh(%454) /* ty=Tensor[(96, 1), float64] */;
  %456 = cast(%453, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(2), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %460 = cast(meta[relay.Constant][30] /* ty=Tensor[(468, 1), uint16] */, dtype="uint16") /* ty=Tensor[(468, 1), uint16] */;
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %462 = reshape(%460, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), uint16] */;
  %463 = reshape(%461, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %464 = @func_4268(%462, %463) /* ty=(Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="int16") /* ty=Tensor[(13, 4, 9), int16] */;
  %467 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(468, 1), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %468 = cast(meta[relay.Constant][30] /* ty=Tensor[(468, 1), uint16] */, dtype="int16") /* ty=Tensor[(468, 1), int16] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %470 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  %471 = greater(%458, %459) /* ty=Tensor[(96, ?), bool] */;
  %472 = left_shift(%468, %469) /* ty=Tensor[(468, ?), int16] */;
  (%470, %471, meta[relay.Constant][29] /* ty=Tensor[(420), float32] */, %472)
}

def @func_1024(%var_1022: Tensor[(3, 8, 4), int32], %var_1023: Tensor[(960), uint16]) -> (Tensor[(3, 8, 4), int32], Tensor[(960), float64]) {
  %487 = fn (%var_987: Tensor[(3, 8, 4), int32], %var_998: Tensor[(960), uint16]) -> (Tensor[(3, 8, 4), int32], Tensor[(960), float64]) {
    %473 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 8, 4), int32] */, dtype="int32") /* ty=Tensor[(3, 8, 4), int32] */;
    %474 = shape_of(%var_987, dtype="int32") /* ty=Tensor[(3), int32] */;
    %475 = cast(%var_987, dtype="int32") /* ty=Tensor[(3, 8, 4), int32] */;
    %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %477 = cast(%var_998, dtype="uint16") /* ty=Tensor[(960), uint16] */;
    %478 = reshape(%477, newshape=[4, 15, 16]) /* ty=Tensor[(4, 15, 16), uint16] */;
    %479 = @func_219(%478) /* ty=(Tensor[(4, 15, 16), uint16], Tensor[(4, 15, 16), float32]) */;
    %480 = %479.1;
    %481 = cast(%480, dtype="float64") /* ty=Tensor[(4, 15, 16), float64] */;
    %482 = shape_of(%var_998, dtype="int32") /* ty=Tensor[(1), int32] */;
    %483 = cast(%var_998, dtype="float64") /* ty=Tensor[(960), float64] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?), float64] */;
    %485 = bitwise_xor(%475, %476) /* ty=Tensor[(3, 8, 4), int32] */;
    %486 = power(%483, %484) /* ty=Tensor[(960), float64] */;
    (%485, %486)
  };
  %487(%var_1022, %var_1023) /* ty=(Tensor[(3, 8, 4), int32], Tensor[(960), float64]) */
}

def @func_3142(%var_3132: Tensor[(14, 3, 10), float32]) -> Tensor[(14, 3, 10), float32] {
  %488 = cast(%var_3132, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %489 = log(%488) /* ty=Tensor[(14, 3, 10), float32] */;
  %490 = cast(%var_3132, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="float32") /* ty=Tensor[(14, 3, 10), float32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%492, %493) /* ty=Tensor[(14, 3, 10), float32] */
}

def @func_2327(%var_2298: Tensor[(96, 1), float32]) -> (Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64], Tensor[(96, ?), bool], Tensor[(96, ?), uint16], Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) {
  %494 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %495 = cast(meta[relay.Constant][33] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %496 = reshape(%494, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %497 = reshape(%495, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %498 = @func_571(%496, %497) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %499 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %500 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %501 = %500.0;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %503 = erf(%502) /* ty=Tensor[(96, 1), float32] */;
  %504 = cast(%503, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %505 = log10(%504) /* ty=Tensor[(96, 1), float32] */;
  %506 = cast(%505, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %507 = shape_of(%var_2298, dtype="int32") /* ty=Tensor[(2), int32] */;
  %508 = cast(%var_2298, dtype="bool") /* ty=Tensor[(96, 1), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %510 = cast(%var_2298, dtype="int16") /* ty=Tensor[(96, 1), int16] */;
  %511 = shape_of(%505, dtype="int32") /* ty=Tensor[(2), int32] */;
  %512 = cast(%505, dtype="int16") /* ty=Tensor[(96, 1), int16] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %514 = bitwise_or(%512, %513) /* ty=Tensor[(96, ?), int16] */;
  %515 = cast(%514, dtype="uint16") /* ty=Tensor[(96, ?), uint16] */;
  %516 = shape_of(%503, dtype="int32") /* ty=Tensor[(2), int32] */;
  %517 = cast(%503, dtype="uint16") /* ty=Tensor[(96, 1), uint16] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %519 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %520 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %521 = cast(meta[relay.Constant][33] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %522 = reshape(%520, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %523 = reshape(%521, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %524 = @func_571(%522, %523) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %525 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %526 = %498.0;
  %527 = %499.3;
  %528 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %529 = not_equal(%508, %509) /* ty=Tensor[(96, ?), bool] */;
  %530 = logical_xor(%517, %518) /* ty=Tensor[(96, ?), uint16] */;
  %531 = %519.0;
  %532 = %524.0;
  %533 = %525.3;
  %534 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  (%526, meta[relay.Constant][32] /* ty=Tensor[(14, 1), uint64] */, meta[relay.Constant][33] /* ty=Tensor[(84), uint64] */, %527, %528, %529, %530, %531, %532, %533, %534)
}

def @func_3017() -> (Tensor[(96, 1), float64],) {
  %535 = @func_2962() /* ty=(Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) */;
  %536 = %535.0;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %538 = tan(%537) /* ty=Tensor[(96, 1), float64] */;
  (%538,)
}

def @func_3180() -> Tensor[(1008), int32] {
  %540 = fn () -> Tensor[(1008), int32] {
    %539 = @func_2962() /* ty=(Tensor[(96, 1), int32], Tensor[(96), float32], Tensor[(1008), int32]) */;
    %539.2
  };
  %540() /* ty=Tensor[(1008), int32] */
}

def @func_6572() -> (Tensor[(12, 12, 7), float64], Tensor[(12, 12, 7), int32]) {
  @func_6570() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(12, 12, 7), int32]) */
}

def @func_4302(%var_4301: Tensor[(7, 10, 10), uint16]) -> (Tensor[(7, 10, 10), uint16],) {
  %546 = fn (%var_4295: Tensor[(7, 10, 10), uint16]) -> (Tensor[(7, 10, 10), uint16],) {
    %541 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 10, 10), uint16] */, dtype="uint16") /* ty=Tensor[(7, 10, 10), uint16] */;
    %542 = shape_of(%var_4295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %543 = cast(%var_4295, dtype="uint16") /* ty=Tensor[(7, 10, 10), uint16] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %545 = left_shift(%543, %544) /* ty=Tensor[(7, 10, 10), uint16] */;
    (%545,)
  };
  %546(%var_4301) /* ty=(Tensor[(7, 10, 10), uint16],) */
}

def @func_2077() -> Tensor[(12, 12, 7), int32] {
  @func_2075() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_5774() -> (Tensor[(12, 12, 7), float64], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) {
  @func_5772() /* ty=(Tensor[(12, 12, 7), float64], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) */
}

def @func_221(%var_220: Tensor[(4, 15, 16), uint16]) -> (Tensor[(4, 15, 16), uint16], Tensor[(4, 15, 16), float32]) {
  %556 = fn (%var_174: Tensor[(4, 15, 16), uint16]) -> (Tensor[(4, 15, 16), uint16], Tensor[(4, 15, 16), float32]) {
    %547 = cast(%var_174, dtype="uint16") /* ty=Tensor[(4, 15, 16), uint16] */;
    %548 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(4, 15, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %549 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 15, 16), uint16] */, dtype="uint16") /* ty=Tensor[(4, 15, 16), uint16] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %551 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 15, 16), uint16] */, dtype="float64") /* ty=Tensor[(4, 15, 16), float64] */;
    %552 = atan(%551) /* ty=Tensor[(4, 15, 16), float64] */;
    %553 = cast(%552, dtype="float32") /* ty=Tensor[(4, 15, 16), float32] */;
    %554 = maximum(%549, %550) /* ty=Tensor[(4, 15, 16), uint16] */;
    %555 = sinh(%553) /* ty=Tensor[(4, 15, 16), float32] */;
    (%554, %555)
  };
  %556(%var_220) /* ty=(Tensor[(4, 15, 16), uint16], Tensor[(4, 15, 16), float32]) */
}

def @func_2708(%var_2705: Tensor[(16, 14, 14), float32], %var_2706: Tensor[(16, 14, 14), float32], %var_2707: Tensor[(693), float64]) -> (Tensor[(16, 14, 14), float32], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(11, 9, 7), float64], Tensor[(693), float64]) {
  %570 = fn (%var_2677: Tensor[(16, 14, 14), float32], %var_2678: Tensor[(16, 14, 14), float32], %var_2696: Tensor[(693), float64]) -> (Tensor[(16, 14, 14), float32], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(11, 9, 7), float64], Tensor[(693), float64]) {
    %557 = cast(%var_2678, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
    %558 = shape_of(%var_2677, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%var_2677, dtype="float32") /* ty=Tensor[(16, 14, 14), float32] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %561 = cast(meta[relay.Constant][36] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
    %562 = reshape(%561, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
    %563 = @func_1648(%562) /* ty=(Tensor[(9, 7, 8), int64],) */;
    %564 = cast(%var_2696, dtype="float64") /* ty=Tensor[(693), float64] */;
    %565 = reshape(%564, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
    %566 = @func_2605(%565) /* ty=(Tensor[(11, 9, 7), float64],) */;
    %567 = subtract(%559, %560) /* ty=Tensor[(16, 14, 14), float32] */;
    %568 = %563.0;
    %569 = %566.0;
    (%567, %568, meta[relay.Constant][36] /* ty=Tensor[(504), int64] */, %569, %var_2696)
  };
  %570(%var_2705, %var_2706, %var_2707) /* ty=(Tensor[(16, 14, 14), float32], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(11, 9, 7), float64], Tensor[(693), float64]) */
}

def @func_2754(%var_2742: Tensor[(14, 1), uint64], %var_2747: Tensor[(504), int64]) -> (Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) {
  %571 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
  %572 = cast(%var_2742, dtype="uint64") /* ty=Tensor[(14, 1), uint64] */;
  %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(84), uint64] */, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %574 = reshape(%572, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %575 = reshape(%573, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %576 = @func_571(%574, %575) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %577 = cast(%var_2747, dtype="int64") /* ty=Tensor[(504), int64] */;
  %578 = %576.0;
  %579 = cast(%578, dtype="uint64") /* ty=Tensor[(7, 6, 2), uint64] */;
  %580 = reshape(%577, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %581 = reshape(%579, newshape=[84]) /* ty=Tensor[(84), uint64] */;
  %582 = @func_2401(%580, %581) /* ty=(Tensor[(12, 12, 7), float64], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64]) */;
  %583 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %584 = %571.0;
  %585 = %582.4;
  %586 = %583.2;
  (%584, %578, %var_2742, meta[relay.Constant][37] /* ty=Tensor[(84), uint64] */, %585, %var_2747, %586)
}

def @func_5336(%var_5276: Tensor[(224), float32]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(224), float32], Tensor[(432), float32], Tensor[(1008), bool], Tensor[(12, 12, 7), int32], Tensor[(693), uint64], Tensor[(1008), int32]) {
  %587 = cast(%var_5276, dtype="float32") /* ty=Tensor[(224), float32] */;
  %588 = reshape(%587, newshape=[16, 7, 2]) /* ty=Tensor[(16, 7, 2), float32] */;
  %589 = @func_4961(%588) /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(15, 2, 7), float64], Tensor[(35, 6), float64], Tensor[(16, 7, 2), bool]) */;
  %590 = @func_4572() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
  %591 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %592 = @func_4607() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(1008), float32]) */;
  %593 = cast(meta[relay.Constant][38] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %594 = reshape(%593, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %595 = @func_2605(%594) /* ty=(Tensor[(11, 9, 7), float64],) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="uint64") /* ty=Tensor[(11, 9, 7), uint64] */;
  %598 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(693), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %599 = cast(meta[relay.Constant][38] /* ty=Tensor[(693), float64] */, dtype="uint64") /* ty=Tensor[(693), uint64] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %601 = @func_3750() /* ty=(Tensor[(1008), int32],) */;
  %602 = @func_3800() /* ty=Tensor[(12, 12, 7), int32] */;
  %603 = %589.0;
  %604 = %590.0;
  %605 = %591.0;
  %606 = %592.0;
  %607 = add(%599, %600) /* ty=Tensor[(693), uint64] */;
  %608 = %601.0;
  (%602, %603, %var_5276, %604, %605, %606, %607, %608)
}

def @func_2786(%var_2781: Tensor[(14), uint64], %var_2782: Tensor[(504), int64]) -> (Tensor[(12, 12, 7), uint64], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(504), int64]) {
  %609 = cast(%var_2781, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %610 = cast(%var_2782, dtype="int64") /* ty=Tensor[(504), int64] */;
  %611 = reshape(%609, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
  %612 = reshape(%610, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %613 = @func_2754(%611, %612) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
  %614 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %615 = %613.5;
  (%614, %615, %var_2781, %var_2782)
}

def @func_4548() -> Tensor[(12, 12, 7), bool] {
  %616 = @func_4342() /* ty=Tensor[(12, 12, 7), int32] */;
  %617 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 12, 7), int32] */, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%619, %620) /* ty=Tensor[(12, 12, 7), bool] */
}

def @func_4418(%var_4417: Tensor[(1, 14, 13), float64]) -> Tensor[(1, 14, 13), float64] {
  %622 = fn (%var_4410: Tensor[(1, 14, 13), float64]) -> Tensor[(1, 14, 13), float64] {
    %621 = cast(%var_4410, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
    log2(%621) /* ty=Tensor[(1, 14, 13), float64] */
  };
  %622(%var_4417) /* ty=Tensor[(1, 14, 13), float64] */
}

def @func_5112() -> Tensor[(432), float32] {
  %623 = @func_4904() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */;
  %623.1
}

def @func_3104() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32]) {
  %627 = fn () -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32]) {
    %624 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
    %625 = %624.0;
    %626 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
    (%625, %626)
  };
  %627() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */
}

def @func_6138(%var_6054: Tensor[(693), float64], %var_6084: Tensor[(2496), float64], %var_6087: Tensor[(14), uint64], %var_6121: Tensor[(832), float64]) -> (Tensor[(12, 12, 7), int32], Tensor[(432), float32], Tensor[(784, 4), float32], Tensor[(693), float64], Tensor[(12, 12, 7), int64], Tensor[(504), int64], Tensor[(2496), float64], Tensor[(5, 3), float32], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(420), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) {
  %628 = cast(meta[relay.Constant][40] /* ty=Tensor[(784, 4), float32] */, dtype="float32") /* ty=Tensor[(784, 4), float32] */;
  %629 = cast(%var_6054, dtype="float64") /* ty=Tensor[(693), float64] */;
  %630 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
  %631 = cast(%630, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %632 = reshape(%628, newshape=[3136]) /* ty=Tensor[(3136), float32] */;
  %633 = reshape(%629, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %634 = reshape(%631, newshape=[1008]) /* ty=Tensor[(1008), int32] */;
  %635 = @func_5945(%632, %633, %634) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) */;
  %636 = cast(%630, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %637 = reshape(%636, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
  %638 = @func_4197(%637) /* ty=(Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) */;
  %639 = cast(%var_6084, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %640 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 3), float32] */;
  %641 = cast(meta[relay.Constant][42] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %642 = cast(%var_6087, dtype="uint64") /* ty=Tensor[(14), uint64] */;
  %643 = reshape(%639, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float64] */;
  %644 = reshape(%640, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %645 = reshape(%641, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %646 = reshape(%642, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
  %647 = @func_3521(%643, %644, %645, %646) /* ty=(Tensor[(13, 16, 12), float64], Tensor[(5, 3, 1), float32], Tensor[(15), float32], Tensor[(504), int64], Tensor[(504), int64], Tensor[(14, 1), uint64]) */;
  %648 = cast(meta[relay.Constant][40] /* ty=Tensor[(784, 4), float32] */, dtype="float32") /* ty=Tensor[(784, 4), float32] */;
  %649 = cast(%var_6054, dtype="float64") /* ty=Tensor[(693), float64] */;
  %650 = cast(%630, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
  %651 = reshape(%648, newshape=[3136]) /* ty=Tensor[(3136), float32] */;
  %652 = reshape(%649, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %653 = reshape(%650, newshape=[1008]) /* ty=Tensor[(1008), int32] */;
  %654 = @func_5945(%651, %652, %653) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) */;
  %655 = cast(%var_6121, dtype="float64") /* ty=Tensor[(832), float64] */;
  %656 = cast(%var_6121, dtype="float64") /* ty=Tensor[(832), float64] */;
  %657 = reshape(%655, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %658 = reshape(%656, newshape=[8, 8, 13]) /* ty=Tensor[(8, 8, 13), float64] */;
  %659 = @func_4728(%657, %658) /* ty=(Tensor[(8, 8, 13), float64], Tensor[(8, 8, 13), float64]) */;
  %660 = %635.2;
  %661 = %638.0;
  %662 = %647.3;
  %663 = %654.5;
  %664 = %659.1;
  (%630, %660, meta[relay.Constant][40] /* ty=Tensor[(784, 4), float32] */, %var_6054, %661, %662, %var_6084, meta[relay.Constant][41] /* ty=Tensor[(5, 3), float32] */, meta[relay.Constant][42] /* ty=Tensor[(504), int64] */, %var_6087, %663, %664, %var_6121)
}

def @func_4200(%var_4198: Tensor[(12, 12, 7), int32]) -> (Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) {
  @func_4197(%var_4198) /* ty=(Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) */
}

def @func_3385(%var_3382: Tensor[(12, 12, 7), int32], %var_3383: Tensor[(1200), float64], %var_3384: Tensor[(504), int64]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(504), int64], Tensor[(9, 7, 8), int64], Tensor[(14, 1), uint64], Tensor[(7, 2), uint64], Tensor[(12, 12, 7), uint64]) {
  %688 = fn (%var_3334: Tensor[(12, 12, 7), int32], %var_3340: Tensor[(1200), float64], %var_3341: Tensor[(504), int64]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(504), int64], Tensor[(9, 7, 8), int64], Tensor[(14, 1), uint64], Tensor[(7, 2), uint64], Tensor[(12, 12, 7), uint64]) {
    %665 = @func_2075() /* ty=Tensor[(12, 12, 7), int32] */;
    %666 = cast(%var_3334, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
    %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%665, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %670 = cast(%var_3340, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %671 = cast(%var_3341, dtype="int64") /* ty=Tensor[(504), int64] */;
    %672 = reshape(%670, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float64] */;
    %673 = reshape(%671, newshape=[1, 504]) /* ty=Tensor[(1, 504), int64] */;
    %674 = @func_2649(%672, %673) /* ty=(Tensor[(10, 15, 8), float64], Tensor[(12, 12, 7), uint64], Tensor[(9, 7, 8), int64], Tensor[(1, 504), int64]) */;
    %675 = cast(%var_3341, dtype="int64") /* ty=Tensor[(504), int64] */;
    %676 = reshape(%675, newshape=[9, 7, 8]) /* ty=Tensor[(9, 7, 8), int64] */;
    %677 = @func_1648(%676) /* ty=(Tensor[(9, 7, 8), int64],) */;
    %678 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 2), uint64] */, dtype="uint64") /* ty=Tensor[(7, 2), uint64] */;
    %679 = %677.0;
    %680 = cast(%679, dtype="int64") /* ty=Tensor[(9, 7, 8), int64] */;
    %681 = reshape(%678, newshape=[14, 1]) /* ty=Tensor[(14, 1), uint64] */;
    %682 = reshape(%680, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %683 = @func_2754(%681, %682) /* ty=(Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(14, 1), uint64], Tensor[(504), int64], Tensor[(126), int32]) */;
    %684 = bitwise_or(%668, %669) /* ty=Tensor[(12, 12, 7), int32] */;
    %685 = %674.1;
    %686 = %683.4;
    %687 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
    (%684, %685, %var_3340, %var_3341, %679, %686, meta[relay.Constant][43] /* ty=Tensor[(7, 2), uint64] */, %687)
  };
  %688(%var_3382, %var_3383, %var_3384) /* ty=(Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(1200), float64], Tensor[(504), int64], Tensor[(9, 7, 8), int64], Tensor[(14, 1), uint64], Tensor[(7, 2), uint64], Tensor[(12, 12, 7), uint64]) */
}

def @func_3477() -> Tensor[(1008), int32] {
  @func_3475() /* ty=Tensor[(1008), int32] */
}

def @func_5167(%var_5164: Tensor[(1, 3, 16), int64], %var_5165: Tensor[(9, 3, 16), int64], %var_5166: Tensor[(1008), float64]) -> (Tensor[(9, 3, 16), bool], Tensor[(1008), uint8], Tensor[(9, 3, 16), int32]) {
  @func_5162(%var_5164, %var_5165, %var_5166) /* ty=(Tensor[(9, 3, 16), bool], Tensor[(1008), uint8], Tensor[(9, 3, 16), int32]) */
}

def @func_3118(%var_3116: Tensor[(15, 2, 7), float64]) -> (Tensor[(15, 2, 7), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), float64]) {
  @func_3115(%var_3116) /* ty=(Tensor[(15, 2, 7), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), float64]) */
}

def @func_5980(%var_5979: Tensor[(420), float32]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(13, 4, 9), bool], Tensor[(6, 78), uint16], Tensor[(420), float32]) {
  %698 = fn (%var_5974: Tensor[(420), float32]) -> (Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(13, 4, 9), bool], Tensor[(6, 78), uint16], Tensor[(420), float32]) {
    %689 = @func_2578() /* ty=(Tensor[(12, 12, 7), int32],) */;
    %690 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 78), uint16] */, dtype="uint16") /* ty=Tensor[(6, 78), uint16] */;
    %691 = cast(%var_5974, dtype="float32") /* ty=Tensor[(420), float32] */;
    %692 = reshape(%690, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), uint16] */;
    %693 = reshape(%691, newshape=[420]) /* ty=Tensor[(420), float32] */;
    %694 = @func_4268(%692, %693) /* ty=(Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) */;
    %695 = %689.0;
    %696 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
    %697 = %694.0;
    (%695, %696, %697, meta[relay.Constant][44] /* ty=Tensor[(6, 78), uint16] */, %var_5974)
  };
  %698(%var_5979) /* ty=(Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64], Tensor[(13, 4, 9), bool], Tensor[(6, 78), uint16], Tensor[(420), float32]) */
}

def @func_2676() -> (Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) {
  %704 = fn () -> (Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) {
    %699 = cast(meta[relay.Constant][45] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
    %700 = reshape(%699, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), float32] */;
    %701 = @func_1953(%700) /* ty=(Tensor[(7, 2, 9), float32],) */;
    %702 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
    %703 = %701.0;
    (%702, %703, meta[relay.Constant][45] /* ty=Tensor[(126), float32] */)
  };
  %704() /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(7, 2, 9), float32], Tensor[(126), float32]) */
}

def @func_3019() -> (Tensor[(96, 1), float64],) {
  @func_3017() /* ty=(Tensor[(96, 1), float64],) */
}

def @func_5634() -> (Tensor[(12, 12, 7), int32],) {
  %706 = fn () -> (Tensor[(12, 12, 7), int32],) {
    %705 = @func_3209() /* ty=Tensor[(12, 12, 7), int32] */;
    (%705,)
  };
  %706() /* ty=(Tensor[(12, 12, 7), int32],) */
}

def @func_4394(%var_4392: Tensor[(12, 12, 7), float64]) -> Tensor[(12, 12, 7), float64] {
  @func_4391(%var_4392) /* ty=Tensor[(12, 12, 7), float64] */
}

def @func_2215() -> (Tensor[(432), float32], Tensor[(126), int32]) {
  @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */
}

def @func_3800() -> Tensor[(12, 12, 7), int32] {
  @func_3209() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_4905() -> (Tensor[(1008), bool], Tensor[(432), float32]) {
  %718 = fn () -> (Tensor[(1008), bool], Tensor[(432), float32]) {
    %707 = @func_3750() /* ty=(Tensor[(1008), int32],) */;
    %708 = %707.0;
    %709 = cast(%708, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %710 = acos(%709) /* ty=Tensor[(1008), float32] */;
    %711 = cast(meta[relay.Constant][46] /* ty=Tensor[(1008), float32] */, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(1), int32] */;
    %713 = cast(%710, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?), bool] */;
    %715 = @func_2213() /* ty=(Tensor[(432), float32], Tensor[(126), int32]) */;
    %716 = greater(%713, %714) /* ty=Tensor[(1008), bool] */;
    %717 = %715.0;
    (%716, %717)
  };
  %718() /* ty=(Tensor[(1008), bool], Tensor[(432), float32]) */
}

def @func_4069(%var_4067: Tensor[(12, 12, 7), int32]) -> (Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) {
  @func_4066(%var_4067) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) */
}

def @func_3475() -> Tensor[(1008), int32] {
  @func_3179() /* ty=Tensor[(1008), int32] */
}

def @func_4964(%var_4962: Tensor[(16, 7, 2), float32]) -> (Tensor[(12, 12, 7), uint64], Tensor[(15, 2, 7), float64], Tensor[(35, 6), float64], Tensor[(16, 7, 2), bool]) {
  @func_4961(%var_4962) /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(15, 2, 7), float64], Tensor[(35, 6), float64], Tensor[(16, 7, 2), bool]) */
}

def @func_3579() -> Tensor[(12, 12, 7), int32] {
  %719 = fn () -> Tensor[(12, 12, 7), int32] {
    @func_3287() /* ty=Tensor[(12, 12, 7), int32] */
  };
  %719() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_4271(%var_4269: Tensor[(13, 4, 9), uint16], %var_4270: Tensor[(420), float32]) -> (Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) {
  %733 = fn (%var_4230: Tensor[(13, 4, 9), uint16], %var_4251: Tensor[(420), float32]) -> (Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) {
    %720 = cast(meta[relay.Constant][47] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %721 = cast(%var_4230, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
    %722 = not_equal(%720, %721) /* ty=Tensor[(13, 4, 9), bool] */;
    %723 = cast(%722, dtype="bool") /* ty=Tensor[(13, 4, 9), bool] */;
    %724 = cast(meta[relay.Constant][47] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %725 = cast(meta[relay.Constant][48] /* ty=Tensor[(1008), int32] */, dtype="int32") /* ty=Tensor[(1008), int32] */;
    %726 = reshape(%725, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
    %727 = @func_4197(%726) /* ty=(Tensor[(12, 12, 7), int64], Tensor[(12, 12, 7), int64]) */;
    %728 = cast(%var_4251, dtype="float32") /* ty=Tensor[(420), float32] */;
    %729 = reshape(%728, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
    %730 = greater_equal(%723, %724) /* ty=Tensor[(13, 4, 9), bool] */;
    %731 = %727.0;
    %732 = @func_3142(%729) /* ty=Tensor[(14, 3, 10), float32] */;
    (%730, %731, meta[relay.Constant][48] /* ty=Tensor[(1008), int32] */, %732, %var_4251)
  };
  %733(%var_4269, %var_4270) /* ty=(Tensor[(13, 4, 9), bool], Tensor[(12, 12, 7), int64], Tensor[(1008), int32], Tensor[(14, 3, 10), float32], Tensor[(420), float32]) */
}

def @func_3210() -> Tensor[(12, 12, 7), int32] {
  %734 = fn () -> Tensor[(12, 12, 7), int32] {
    @func_2075() /* ty=Tensor[(12, 12, 7), int32] */
  };
  %734() /* ty=Tensor[(12, 12, 7), int32] */
}

def @func_6512() -> (Tensor[(432), float32],) {
  @func_6510() /* ty=(Tensor[(432), float32],) */
}

def @func_3567(%var_3566: Tensor[(15, 7, 2), float64]) -> Tensor[(15, 7, 2), float64] {
  %736 = fn (%var_3554: Tensor[(15, 7, 2), float64]) -> Tensor[(15, 7, 2), float64] {
    %735 = cast(%var_3554, dtype="float64") /* ty=Tensor[(15, 7, 2), float64] */;
    acos(%735) /* ty=Tensor[(15, 7, 2), float64] */
  };
  %736(%var_3566) /* ty=Tensor[(15, 7, 2), float64] */
}

def @func_2213() -> (Tensor[(432), float32], Tensor[(126), int32]) {
  %737 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %738 = @func_2176() /* ty=(Tensor[(96, 1), int32], Tensor[(432), float32], Tensor[(126), int32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */;
  %739 = %737.1;
  %740 = %738.2;
  (%739, %740)
}

def @func_3287() -> Tensor[(12, 12, 7), int32] {
  %741 = @func_3103() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32]) */;
  %741.1
}

def @func_4066(%var_4059: Tensor[(12, 12, 7), int32]) -> (Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) {
  %742 = @func_2508() /* ty=Tensor[(12, 12, 7), int32] */;
  %743 = cast(%var_4059, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %747 = not_equal(%745, %746) /* ty=Tensor[(12, 12, 7), bool] */;
  %748 = @func_3578() /* ty=Tensor[(12, 12, 7), int32] */;
  (%747, %748)
}

def @func_2790(%var_2788: Tensor[(14), uint64], %var_2789: Tensor[(504), int64]) -> (Tensor[(12, 12, 7), uint64], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(504), int64]) {
  @func_2786(%var_2788, %var_2789) /* ty=(Tensor[(12, 12, 7), uint64], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(504), int64]) */
}

def @func_6482(%var_6480: Tensor[(832), float64]) -> (Tensor[(12, 12, 7), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) {
  @func_6479(%var_6480) /* ty=(Tensor[(12, 12, 7), int32], Tensor[(8, 8, 13), float64], Tensor[(832), float64], Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) */
}

def @func_4961(%var_4911: Tensor[(16, 7, 2), float32]) -> (Tensor[(12, 12, 7), uint64], Tensor[(15, 2, 7), float64], Tensor[(35, 6), float64], Tensor[(16, 7, 2), bool]) {
  %749 = cast(meta[relay.Constant][49] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
  %750 = reshape(%749, newshape=[15, 2, 7]) /* ty=Tensor[(15, 2, 7), float64] */;
  %751 = @func_3115(%750) /* ty=(Tensor[(15, 2, 7), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), float64]) */;
  %752 = cast(%var_4911, dtype="float32") /* ty=Tensor[(16, 7, 2), float32] */;
  %753 = sin(%752) /* ty=Tensor[(16, 7, 2), float32] */;
  %754 = cast(%var_4911, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %758 = less_equal(%756, %757) /* ty=Tensor[(16, 7, 2), bool] */;
  %759 = cast(%753, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="bool") /* ty=Tensor[(16, 7, 2), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %763 = @func_2882() /* ty=Tensor[(12, 12, 7), uint64] */;
  %764 = %751.0;
  %765 = logical_and(%761, %762) /* ty=Tensor[(16, 7, 2), bool] */;
  (%763, %764, meta[relay.Constant][49] /* ty=Tensor[(35, 6), float64] */, %765)
}

def @func_2827() -> (Tensor[(12, 12, 7), int32],) {
  @func_2825() /* ty=(Tensor[(12, 12, 7), int32],) */
}

def @func_2330(%var_2328: Tensor[(96, 1), float32]) -> (Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64], Tensor[(96, ?), bool], Tensor[(96, ?), uint16], Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) {
  @func_2327(%var_2328) /* ty=(Tensor[(7, 6, 2), float32], Tensor[(14, 1), uint64], Tensor[(84), uint64], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64], Tensor[(96, ?), bool], Tensor[(96, ?), uint16], Tensor[(432), float32], Tensor[(7, 6, 2), float32], Tensor[(11, 14, 13), int64], Tensor[(12, 12, 7), uint64]) */
}

def @func_6643() -> (Tensor[(420), float32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), bool]) {
  %774 = fn () -> (Tensor[(420), float32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), bool]) {
    %766 = @func_5451() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) */;
    %767 = @func_4667() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) */;
    %768 = %767.2;
    %769 = cast(%768, dtype="int32") /* ty=Tensor[(12, 12, 7), int32] */;
    %770 = reshape(%769, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), int32] */;
    %771 = @func_4066(%770) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(12, 12, 7), int32]) */;
    %772 = %766.1;
    %773 = %771.0;
    (%772, %768, %773)
  };
  %774() /* ty=(Tensor[(420), float32], Tensor[(12, 12, 7), uint64], Tensor[(12, 12, 7), bool]) */
}

def @func_6144(%var_6140: Tensor[(693), float64], %var_6141: Tensor[(2496), float64], %var_6142: Tensor[(14), uint64], %var_6143: Tensor[(832), float64]) -> (Tensor[(12, 12, 7), int32], Tensor[(432), float32], Tensor[(784, 4), float32], Tensor[(693), float64], Tensor[(12, 12, 7), int64], Tensor[(504), int64], Tensor[(2496), float64], Tensor[(5, 3), float32], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(420), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) {
  @func_6138(%var_6140, %var_6141, %var_6142, %var_6143) /* ty=(Tensor[(12, 12, 7), int32], Tensor[(432), float32], Tensor[(784, 4), float32], Tensor[(693), float64], Tensor[(12, 12, 7), int64], Tensor[(504), int64], Tensor[(2496), float64], Tensor[(5, 3), float32], Tensor[(504), int64], Tensor[(14), uint64], Tensor[(420), float32], Tensor[(8, 8, 13), float64], Tensor[(832), float64]) */
}

def @func_3979() -> (Tensor[(12, 12, 7), int32],) {
  %777 = fn () -> (Tensor[(12, 12, 7), int32],) {
    %775 = @func_2578() /* ty=(Tensor[(12, 12, 7), int32],) */;
    %776 = %775.0;
    (%776,)
  };
  %777() /* ty=(Tensor[(12, 12, 7), int32],) */
}

def @func_3750() -> (Tensor[(1008), int32],) {
  %778 = @func_3475() /* ty=Tensor[(1008), int32] */;
  (%778,)
}

def @func_5582(%var_5579: Tensor[(11, 5, 6), int32], %var_5580: Tensor[(11, 5, 6), int32], %var_5581: Tensor[(420, 1), float32]) -> (Tensor[(11, 5, 6), int32], Tensor[(14, 3, 10), float32], Tensor[(420, 1), float32]) {
  %787 = fn (%var_5561: Tensor[(11, 5, 6), int32], %var_5562: Tensor[(11, 5, 6), int32], %var_5571: Tensor[(420, 1), float32]) -> (Tensor[(11, 5, 6), int32], Tensor[(14, 3, 10), float32], Tensor[(420, 1), float32]) {
    %779 = cast(%var_5562, dtype="int32") /* ty=Tensor[(11, 5, 6), int32] */;
    %780 = shape_of(%var_5561, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%var_5561, dtype="int32") /* ty=Tensor[(11, 5, 6), int32] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %783 = cast(%var_5571, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
    %784 = reshape(%783, newshape=[14, 3, 10]) /* ty=Tensor[(14, 3, 10), float32] */;
    %785 = right_shift(%781, %782) /* ty=Tensor[(11, 5, 6), int32] */;
    %786 = @func_3142(%784) /* ty=Tensor[(14, 3, 10), float32] */;
    (%785, %786, %var_5571)
  };
  %787(%var_5579, %var_5580, %var_5581) /* ty=(Tensor[(11, 5, 6), int32], Tensor[(14, 3, 10), float32], Tensor[(420, 1), float32]) */
}

def @func_2561(%var_2556: Tensor[(84), uint64]) -> (Tensor[(9, 3, 5), float64], Tensor[(135), float64], Tensor[(12, 12, 7), float64], Tensor[(7, 6, 2), float32], Tensor[(1, 14), uint64], Tensor[(84), uint64]) {
  %788 = cast(meta[relay.Constant][50] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %789 = reshape(%788, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), float64] */;
  %790 = @func_1420(%789) /* ty=(Tensor[(9, 3, 5), float64],) */;
  %791 = @func_2185() /* ty=Tensor[(12, 12, 7), uint64] */;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(12, 12, 7), float64] */;
  %793 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 14), uint64] */, dtype="uint64") /* ty=Tensor[(1, 14), uint64] */;
  %794 = cast(%var_2556, dtype="uint64") /* ty=Tensor[(84), uint64] */;
  %795 = reshape(%793, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), uint64] */;
  %796 = reshape(%794, newshape=[7, 6, 2]) /* ty=Tensor[(7, 6, 2), uint64] */;
  %797 = @func_571(%795, %796) /* ty=(Tensor[(7, 6, 2), float32],) */;
  %798 = %790.0;
  %799 = asin(%792) /* ty=Tensor[(12, 12, 7), float64] */;
  %800 = %797.0;
  (%798, meta[relay.Constant][50] /* ty=Tensor[(135), float64] */, %799, %800, meta[relay.Constant][51] /* ty=Tensor[(1, 14), uint64] */, %var_2556)
}

def @func_5949(%var_5946: Tensor[(3136), float32], %var_5947: Tensor[(693), float64], %var_5948: Tensor[(1008), int32]) -> (Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) {
  %824 = fn (%var_5891: Tensor[(3136), float32], %var_5892: Tensor[(693), float64], %var_5902: Tensor[(1008), int32]) -> (Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) {
    %801 = @func_5451() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(420), float32], Tensor[(432), float32], Tensor[(14, 3, 10), float64]) */;
    %802 = cast(%var_5902, dtype="int32") /* ty=Tensor[(1008), int32] */;
    %803 = reshape(%802, newshape=[1008]) /* ty=Tensor[(1008), int32] */;
    %804 = @func_5541(%803) /* ty=(Tensor[(432), float32], Tensor[(1008), int32], Tensor[(12, 12, 7), float32]) */;
    %805 = cast(%var_5891, dtype="float32") /* ty=Tensor[(3136), float32] */;
    %806 = cast(%var_5891, dtype="float32") /* ty=Tensor[(3136), float32] */;
    %807 = cast(%var_5892, dtype="float64") /* ty=Tensor[(693), float64] */;
    %808 = reshape(%805, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float32] */;
    %809 = reshape(%806, newshape=[16, 14, 14]) /* ty=Tensor[(16, 14, 14), float32] */;
    %810 = reshape(%807, newshape=[693]) /* ty=Tensor[(693), float64] */;
    %811 = @func_2704(%808, %809, %810) /* ty=(Tensor[(16, 14, 14), float32], Tensor[(9, 7, 8), int64], Tensor[(504), int64], Tensor[(11, 9, 7), float64], Tensor[(693), float64]) */;
    %812 = %811.3;
    %813 = cast(%812, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
    %814 = sigmoid(%813) /* ty=Tensor[(11, 9, 7), float64] */;
    %815 = cast(%var_5892, dtype="uint32") /* ty=Tensor[(693), uint32] */;
    %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
    %817 = cast(%814, dtype="uint32") /* ty=Tensor[(11, 9, 7), uint32] */;
    %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %819 = @func_5257() /* ty=(Tensor[(12, 12, 7), int32], Tensor[(96, ?), bool], Tensor[(420), float32], Tensor[(468, ?), int16]) */;
    %820 = %801.3;
    %821 = %804.0;
    %822 = logical_xor(%817, %818) /* ty=Tensor[(11, 9, 7), uint32] */;
    %823 = %819.2;
    (%820, %var_5891, %821, %var_5902, %822, %823)
  };
  %824(%var_5946, %var_5947, %var_5948) /* ty=(Tensor[(14, 3, 10), float64], Tensor[(3136), float32], Tensor[(432), float32], Tensor[(1008), int32], Tensor[(11, 9, 7), uint32], Tensor[(420), float32]) */
}

def @func_4669() -> (Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) {
  @func_4667() /* ty=(Tensor[(432), float32], Tensor[(12, 12, 7), int32], Tensor[(12, 12, 7), uint64]) */
}

def @func_5114() -> Tensor[(432), float32] {
  @func_5112() /* ty=Tensor[(432), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen72/build/output.py", line 2141, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:47:48] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

