==========mod==========
#[version = "0.0.5"]
def @func_7124() -> Tensor[(15, 16, 4), float32] {
  @func_5847() /* ty=Tensor[(15, 16, 4), float32] */
}

def @func_6304() -> (Tensor[(15, 16, 4), int16], Tensor[(15, 16, 4), float64]) {
  %0 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 16, 4), float32] */, dtype="int16") /* ty=Tensor[(15, 16, 4), int16] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="int16") /* ty=Tensor[(15, 16, 4), int16] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %5 = cast(%0, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %6 = reshape(%5, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %7 = logical_xor(%3, %4) /* ty=Tensor[(15, 16, 4), int16] */;
  %8 = @func_5890(%6) /* ty=Tensor[(15, 16, 4), float64] */;
  (%7, %8)
}

def @func_2161(%var_2096: Tensor[(10, 1, 12), uint16], %var_2097: Tensor[(10, 1, 12), uint16]) -> (Tensor[(15, 16, 4), float32], Tensor[(480, 2), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(8, 11, 10), bool], Tensor[(1, 880), bool], Tensor[(10, ?, 12), float32]) {
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
  %10 = reshape(%9, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %11 = @func_171(%10) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %13 = reshape(%12, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %14 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 880), bool] */, dtype="bool") /* ty=Tensor[(1, 880), bool] */;
  %15 = reshape(%14, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %16 = cast(%var_2097, dtype="uint16") /* ty=Tensor[(10, 1, 12), uint16] */;
  %17 = shape_of(%var_2096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_2096, dtype="uint16") /* ty=Tensor[(10, 1, 12), uint16] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %20 = left_shift(%18, %19) /* ty=Tensor[(10, ?, 12), uint16] */;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(10, ?, 12), float32] */;
  %22 = log10(%21) /* ty=Tensor[(10, ?, 12), float32] */;
  %23 = cast(%20, dtype="int32") /* ty=Tensor[(10, ?, 12), int32] */;
  %24 = shape_of(%var_2096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%var_2096, dtype="int32") /* ty=Tensor[(10, 1, 12), int32] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %27 = bitwise_xor(%25, %26) /* ty=Tensor[(10, ?, 12), int32] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(10, ?, 12), float64] */;
  %29 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%22, dtype="float64") /* ty=Tensor[(10, ?, 12), float64] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %32 = minimum(%30, %31) /* ty=Tensor[(10, ?, 12), float64] */;
  %33 = cast(%32, dtype="float32") /* ty=Tensor[(10, ?, 12), float32] */;
  %34 = %11.0;
  %35 = @func_643(%13) /* ty=Tensor[(8, 2, 10), float32] */;
  %36 = @func_920(%15) /* ty=Tensor[(8, 11, 10), bool] */;
  %37 = atan(%33) /* ty=Tensor[(10, ?, 12), float32] */;
  (%34, meta[relay.Constant][1] /* ty=Tensor[(480, 2), float32] */, %35, meta[relay.Constant][2] /* ty=Tensor[(160), float64] */, %36, meta[relay.Constant][3] /* ty=Tensor[(1, 880), bool] */, %37)
}

def @func_6342() -> Tensor[(7, 9, 15), float32] {
  @func_5340() /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_6941() -> (Tensor[(7, 9, 15), float32],) {
  %38 = @func_5549() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) */;
  %39 = %38.0;
  (%39,)
}

def @func_1763(%var_1759: Tensor[(2, 784), int64]) -> (Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) {
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %41 = cast(%var_1759, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %42 = cast(%var_1759, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %43 = reshape(%41, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %44 = reshape(%42, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %45 = @func_1541(%43, %44) /* ty=(Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) */;
  %46 = sqrt(%40) /* ty=Tensor[(9, 11, 8), float32] */;
  %47 = %45.0;
  (%46, %47, %var_1759)
}

def @func_6651(%var_6626: Tensor[(585), float32]) -> (Tensor[(120), uint16], Tensor[(13, 3, 15), uint32], Tensor[(5, 5, 8), uint16], Tensor[(200), uint16]) {
  %48 = @func_6477() /* ty=(Tensor[(9, 16, 7), int8], Tensor[(3, 40), uint16], Tensor[(120), uint16], Tensor[(15, 16, 4), float32], Tensor[(240, 4), float32]) */;
  %49 = cast(%var_6626, dtype="float32") /* ty=Tensor[(585), float32] */;
  %50 = cast(%var_6626, dtype="float32") /* ty=Tensor[(585), float32] */;
  %51 = reshape(%49, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %52 = reshape(%50, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %53 = @func_3517(%51, %52) /* ty=Tensor[(13, 3, 15), float32] */;
  %54 = cast(%53, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
  %55 = sin(%54) /* ty=Tensor[(13, 3, 15), float64] */;
  %56 = cast(%var_6626, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%55, dtype="uint32") /* ty=Tensor[(13, 3, 15), uint32] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %60 = cast(meta[relay.Constant][5] /* ty=Tensor[(200), uint16] */, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %61 = reshape(%60, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), uint16] */;
  %62 = @func_2707(%61) /* ty=(Tensor[(5, 5, 8), uint16],) */;
  %63 = %48.2;
  %64 = bitwise_or(%58, %59) /* ty=Tensor[(13, 3, 15), uint32] */;
  %65 = %62.0;
  (%63, %64, %65, meta[relay.Constant][5] /* ty=Tensor[(200), uint16] */)
}

def @func_3677(%var_3643: Tensor[(1, 8, 15), float64], %var_3673: Tensor[(168, 2), bool]) -> (Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) {
  %66 = cast(%var_3643, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
  %67 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %68 = power(%66, %67) /* ty=Tensor[(4, 8, 15), float64] */;
  %69 = cast(%68, dtype="uint8") /* ty=Tensor[(4, 8, 15), uint8] */;
  %70 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 8, 15), float64] */, dtype="uint8") /* ty=Tensor[(4, 8, 15), uint8] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %74 = reshape(%73, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
  %75 = @func_1763(%74) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
  %76 = cast(%var_3673, dtype="bool") /* ty=Tensor[(168, 2), bool] */;
  %77 = cast(meta[relay.Constant][8] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %78 = reshape(%76, newshape=[3, 7, 16]) /* ty=Tensor[(3, 7, 16), bool] */;
  %79 = reshape(%77, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %80 = @func_1301(%78, %79) /* ty=(Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) */;
  %81 = subtract(%71, %72) /* ty=Tensor[(4, 8, 15), uint8] */;
  %82 = %75.1;
  %83 = %80.2;
  (%81, %82, meta[relay.Constant][7] /* ty=Tensor[(1568), int64] */, %83, %var_3673, meta[relay.Constant][8] /* ty=Tensor[(960), float32] */)
}

def @func_6424(%var_6415: Tensor[(3, 40), uint16]) -> (Tensor[(7, 9, 15), float32], Tensor[(8, 2, 10), float32], Tensor[(3, 40), uint16]) {
  %84 = @func_5921() /* ty=(Tensor[(880), bool], Tensor[(7, 9, 15), float32]) */;
  %85 = cast(%var_6415, dtype="uint16") /* ty=Tensor[(3, 40), uint16] */;
  %86 = cast(%var_6415, dtype="uint16") /* ty=Tensor[(3, 40), uint16] */;
  %87 = reshape(%85, newshape=[10, 1, 12]) /* ty=Tensor[(10, 1, 12), uint16] */;
  %88 = reshape(%86, newshape=[10, 1, 12]) /* ty=Tensor[(10, 1, 12), uint16] */;
  %89 = @func_2161(%87, %88) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(480, 2), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(8, 11, 10), bool], Tensor[(1, 880), bool], Tensor[(10, ?, 12), float32]) */;
  %90 = %84.1;
  %91 = %89.2;
  (%90, %91, %var_6415)
}

def @func_5847() -> Tensor[(15, 16, 4), float32] {
  %92 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %92.1
}

def @func_6798() -> (Tensor[(960), float32],) {
  %93 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %94 = %93.2;
  (%94,)
}

def @func_6234() -> Tensor[(8, 4, 8), bool] {
  %95 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %96 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(8, 4, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%97, %98) /* ty=Tensor[(8, 4, 8), bool] */
}

def @func_7159(%var_7140: Tensor[(15, 16, 4), float32], %var_7154: Tensor[(832), float64]) -> (Tensor[(15, 16, 4), int32], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
  %99 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
  %100 = cast(%var_7140, dtype="int32") /* ty=Tensor[(15, 16, 4), int32] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="int32") /* ty=Tensor[(15, 16, 4), int32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %104 = cast(%var_7154, dtype="float64") /* ty=Tensor[(832), float64] */;
  %105 = reshape(%104, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float64] */;
  %106 = @func_3270(%105) /* ty=(Tensor[(8, 13, 8), float64], Tensor[(352), bool]) */;
  %107 = cast(%var_7154, dtype="float32") /* ty=Tensor[(832), float32] */;
  %108 = maximum(%102, %103) /* ty=Tensor[(15, 16, 4), int32] */;
  %109 = %106.0;
  %110 = asinh(%107) /* ty=Tensor[(832), float32] */;
  (%108, %109, %110)
}

def @func_920(%var_910: Tensor[(8, 11, 10), bool]) -> Tensor[(8, 11, 10), bool] {
  %111 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %112 = cast(%var_910, dtype="bool") /* ty=Tensor[(8, 11, 10), bool] */;
  logical_or(%111, %112) /* ty=Tensor[(8, 11, 10), bool] */
}

def @func_7073() -> (Tensor[(7, 9, 15), float32],) {
  %113 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  (%113,)
}

def @func_3129(%var_3119: Tensor[(5, 9, 1), uint16]) -> (Tensor[(5, 9, ?), bool],) {
  %114 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 9, 1), uint16] */, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %115 = shape_of(%var_3119, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%var_3119, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = greater_equal(%116, %117) /* ty=Tensor[(5, 9, ?), bool] */;
  (%118,)
}

def @func_1301(%var_1228: Tensor[(3, 7, 16), bool], %var_1236: Tensor[(960), float32]) -> (Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) {
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 7, 16), bool] */, dtype="bool") /* ty=Tensor[(3, 7, 16), bool] */;
  %120 = shape_of(%var_1228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_1228, dtype="bool") /* ty=Tensor[(3, 7, 16), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %123 = cast(%var_1236, dtype="float32") /* ty=Tensor[(960), float32] */;
  %124 = reshape(%123, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %125 = @func_171(%124) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %128 = cos(%127) /* ty=Tensor[(15, 16, 4), float32] */;
  %129 = cast(%126, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %130 = reshape(%129, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %131 = @func_171(%130) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %132 = %131.0;
  %133 = cast(%132, dtype="uint8") /* ty=Tensor[(15, 16, 4), uint8] */;
  %134 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%128, dtype="uint8") /* ty=Tensor[(15, 16, 4), uint8] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %137 = bitwise_or(%135, %136) /* ty=Tensor[(15, 16, 4), uint8] */;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  %139 = logical_or(%121, %122) /* ty=Tensor[(3, 7, 16), bool] */;
  %140 = atan(%138) /* ty=Tensor[(15, 16, 4), float64] */;
  (%139, %var_1236, %140)
}

def @func_4343(%var_4259: Tensor[(2, 12, 15), float64], %var_4264: Tensor[(120, 1), float64], %var_4265: Tensor[(336), bool], %var_4281: Tensor[(30), float32], %var_4296: Tensor[(2, 12, 15), float32], %var_4309: Tensor[(45), uint16], %var_4310: Tensor[(1568), int64], %var_4330: Tensor[(18), float32]) -> (Tensor[(15, 16, 4), float64], Tensor[(120, 1), float64], Tensor[(336), bool], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(352), int64], Tensor[(264), int8], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(9, 2, 1), float32], Tensor[(18), float32], Tensor[(2, 12, 15), uint64], Tensor[(2, 12, 15), float32]) {
  %141 = cast(%var_4264, dtype="float64") /* ty=Tensor[(120, 1), float64] */;
  %142 = cast(%var_4265, dtype="bool") /* ty=Tensor[(336), bool] */;
  %143 = reshape(%141, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
  %144 = reshape(%142, newshape=[168, 2]) /* ty=Tensor[(168, 2), bool] */;
  %145 = @func_3677(%143, %144) /* ty=(Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) */;
  %146 = cast(%var_4281, dtype="float32") /* ty=Tensor[(30), float32] */;
  %147 = cast(meta[relay.Constant][13] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %148 = reshape(%146, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %149 = reshape(%147, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %150 = @func_2597(%148, %149) /* ty=(Tensor[(15, 2, 2), float32],) */;
  %151 = cast(meta[relay.Constant][14] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %152 = cast(%var_4309, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %153 = cast(%var_4310, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %154 = cast(meta[relay.Constant][15] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
  %155 = cast(meta[relay.Constant][16] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %156 = %145.3;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %158 = reshape(%151, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int8] */;
  %159 = reshape(%152, newshape=[1, 45]) /* ty=Tensor[(1, 45), uint16] */;
  %160 = reshape(%153, newshape=[392, 4]) /* ty=Tensor[(392, 4), int64] */;
  %161 = reshape(%154, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %162 = reshape(%155, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %163 = reshape(%157, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %164 = @func_3826(%158, %159, %160, %161, %162, %163) /* ty=(Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) */;
  %165 = cast(%var_4330, dtype="float32") /* ty=Tensor[(18), float32] */;
  %166 = reshape(%165, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %167 = @func_54(%166) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %168 = cast(%var_4259, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
  %169 = asin(%168) /* ty=Tensor[(2, 12, 15), float64] */;
  %170 = cast(%var_4259, dtype="uint64") /* ty=Tensor[(2, 12, 15), uint64] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="uint64") /* ty=Tensor[(2, 12, 15), uint64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %174 = cast(%169, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
  %175 = exp(%174) /* ty=Tensor[(2, 12, 15), float32] */;
  %176 = cast(%var_4296, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %180 = logical_and(%178, %179) /* ty=Tensor[(2, 12, 15), bool] */;
  %181 = cast(%169, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = less(%183, %184) /* ty=Tensor[(2, 12, 15), bool] */;
  %186 = cast(%180, dtype="int8") /* ty=Tensor[(2, 12, 15), int8] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="int8") /* ty=Tensor[(2, 12, 15), int8] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %190 = multiply(%188, %189) /* ty=Tensor[(2, 12, 15), int8] */;
  %191 = cast(%190, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
  %192 = %150.0;
  %193 = %164.12;
  %194 = %167.1;
  %195 = minimum(%172, %173) /* ty=Tensor[(2, 12, 15), uint64] */;
  %196 = atan(%191) /* ty=Tensor[(2, 12, 15), float32] */;
  (%156, %var_4264, %var_4265, %192, %var_4281, meta[relay.Constant][13] /* ty=Tensor[(60), float32] */, %193, meta[relay.Constant][14] /* ty=Tensor[(264), int8] */, %var_4309, %var_4310, meta[relay.Constant][15] /* ty=Tensor[(880), bool] */, meta[relay.Constant][16] /* ty=Tensor[(728), bool] */, %194, %var_4330, %195, %196)
}

def @func_5921() -> (Tensor[(880), bool], Tensor[(7, 9, 15), float32]) {
  %197 = @func_5549() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) */;
  %198 = %197.1;
  %199 = @func_5800() /* ty=Tensor[(7, 9, 15), float32] */;
  (%198, %199)
}

def @func_6089() -> (Tensor[(880), bool], Tensor[(4, 392), uint64]) {
  %200 = @func_5921() /* ty=(Tensor[(880), bool], Tensor[(7, 9, 15), float32]) */;
  %201 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 392), int64] */, dtype="float32") /* ty=Tensor[(4, 392), float32] */;
  %202 = erf(%201) /* ty=Tensor[(4, 392), float32] */;
  %203 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 392), int64] */, dtype="int64") /* ty=Tensor[(4, 392), int64] */;
  %204 = reshape(%203, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
  %205 = @func_1763(%204) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
  %206 = %205.1;
  %207 = cast(%206, dtype="uint64") /* ty=Tensor[(7, 14, 16), uint64] */;
  %208 = shape_of(%202, dtype="int32") /* ty=Tensor[(2), int32] */;
  %209 = cast(%202, dtype="uint64") /* ty=Tensor[(4, 392), uint64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %211 = %200.0;
  %212 = add(%209, %210) /* ty=Tensor[(4, 392), uint64] */;
  (%211, %212)
}

def @func_6243() -> (Tensor[(8, 4, 8), bool],) {
  %213 = @func_6234() /* ty=Tensor[(8, 4, 8), bool] */;
  (%213,)
}

def @func_6836() -> (Tensor[(7, 9, 15), float32], Tensor[(15, 8, 11), bool], Tensor[(1320), float64]) {
  %214 = cast(meta[relay.Constant][18] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %215 = reshape(%214, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
  %216 = @func_1662(%215) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) */;
  %217 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  %218 = %216.0;
  (%217, %218, meta[relay.Constant][18] /* ty=Tensor[(1320), float64] */)
}

def @func_3062(%var_3056: Tensor[(7, 1, 13), float32]) -> Tensor[(7, 1, 13), float32] {
  %219 = cast(%var_3056, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
  rsqrt(%219) /* ty=Tensor[(7, 1, 13), float32] */
}

def @func_3725(%var_3696: Tensor[(10, 13, 1), float64]) -> (Tensor[(10, 13, ?), float32], Tensor[(10, 13, 1), float32]) {
  %220 = cast(%var_3696, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %221 = sinh(%220) /* ty=Tensor[(10, 13, 1), float64] */;
  %222 = cast(%221, dtype="uint8") /* ty=Tensor[(10, 13, 1), uint8] */;
  %223 = shape_of(%var_3696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_3696, dtype="uint8") /* ty=Tensor[(10, 13, 1), uint8] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %226 = maximum(%224, %225) /* ty=Tensor[(10, 13, ?), uint8] */;
  %227 = cast(%221, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="float32") /* ty=Tensor[(10, 13, ?), float32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %231 = cast(%221, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
  %232 = power(%229, %230) /* ty=Tensor[(10, 13, ?), float32] */;
  %233 = acos(%231) /* ty=Tensor[(10, 13, 1), float32] */;
  (%232, %233)
}

def @func_3826(%var_3772: Tensor[(12, 2, 11), int8], %var_3780: Tensor[(1, 45), uint16], %var_3785: Tensor[(392, 4), int64], %var_3805: Tensor[(8, 11, 10), bool], %var_3815: Tensor[(728), bool], %var_3816: Tensor[(960), float32]) -> (Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) {
  %234 = cast(%var_3772, dtype="int8") /* ty=Tensor[(12, 2, 11), int8] */;
  %235 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(12, 2, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 2, 11), int8] */, dtype="int8") /* ty=Tensor[(12, 2, 11), int8] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %238 = cast(%var_3780, dtype="uint16") /* ty=Tensor[(1, 45), uint16] */;
  %239 = reshape(%238, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), uint16] */;
  %240 = @func_3129(%239) /* ty=(Tensor[(5, 9, ?), bool],) */;
  %241 = cast(%var_3785, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
  %242 = reshape(%241, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
  %243 = @func_1763(%242) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
  %244 = cast(meta[relay.Constant][20] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %245 = cast(meta[relay.Constant][21] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %246 = reshape(%244, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %247 = reshape(%245, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %248 = @func_2597(%246, %247) /* ty=(Tensor[(15, 2, 2), float32],) */;
  %249 = %243.2;
  %250 = cast(%249, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %251 = cast(%249, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %252 = reshape(%250, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %253 = reshape(%251, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %254 = @func_1541(%252, %253) /* ty=(Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) */;
  %255 = %254.1;
  %256 = cast(%var_3805, dtype="int8") /* ty=Tensor[(8, 11, 10), int8] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="int8") /* ty=Tensor[(8, 11, 10), int8] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %260 = cast(%var_3815, dtype="bool") /* ty=Tensor[(728), bool] */;
  %261 = cast(%var_3815, dtype="bool") /* ty=Tensor[(728), bool] */;
  %262 = cast(%var_3816, dtype="float32") /* ty=Tensor[(960), float32] */;
  %263 = cast(meta[relay.Constant][22] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %264 = reshape(%260, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %265 = reshape(%261, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %266 = reshape(%262, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
  %267 = reshape(%263, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
  %268 = @func_2914(%264, %265, %266, %267) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
  %269 = subtract(%236, %237) /* ty=Tensor[(12, 2, 11), int8] */;
  %270 = %240.0;
  %271 = %248.0;
  %272 = left_shift(%258, %259) /* ty=Tensor[(8, 11, 10), int8] */;
  %273 = %268.1;
  (%269, %270, %var_3780, %249, %var_3785, %271, meta[relay.Constant][20] /* ty=Tensor[(30), float32] */, meta[relay.Constant][21] /* ty=Tensor[(60), float32] */, %272, %273, %var_3815, %var_3816, meta[relay.Constant][22] /* ty=Tensor[(352), int64] */)
}

def @func_5057(%var_5040: Tensor[(960), float32]) -> (Tensor[(11, 4, 15), uint64], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(13, 3, 15), float32], Tensor[(585, 1), float32]) {
  %274 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 4, 15), uint64] */, dtype="uint64") /* ty=Tensor[(11, 4, 15), uint64] */;
  %275 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(11, 4, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 4, 15), uint64] */, dtype="uint64") /* ty=Tensor[(11, 4, 15), uint64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %278 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %279 = cast(meta[relay.Constant][25] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %280 = cast(%var_5040, dtype="float32") /* ty=Tensor[(960), float32] */;
  %281 = cast(meta[relay.Constant][26] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %282 = reshape(%278, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %283 = reshape(%279, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %284 = reshape(%280, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
  %285 = reshape(%281, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
  %286 = @func_2914(%282, %283, %284, %285) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
  %287 = cast(meta[relay.Constant][27] /* ty=Tensor[(585, 1), float32] */, dtype="float32") /* ty=Tensor[(585, 1), float32] */;
  %288 = cast(meta[relay.Constant][27] /* ty=Tensor[(585, 1), float32] */, dtype="float32") /* ty=Tensor[(585, 1), float32] */;
  %289 = reshape(%287, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %290 = reshape(%288, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %291 = multiply(%276, %277) /* ty=Tensor[(11, 4, 15), uint64] */;
  %292 = %286.4;
  %293 = @func_3517(%289, %290) /* ty=Tensor[(13, 3, 15), float32] */;
  (%291, %292, meta[relay.Constant][25] /* ty=Tensor[(728), bool] */, %var_5040, meta[relay.Constant][26] /* ty=Tensor[(352), int64] */, %293, meta[relay.Constant][27] /* ty=Tensor[(585, 1), float32] */)
}

def @func_6477() -> (Tensor[(9, 16, 7), int8], Tensor[(3, 40), uint16], Tensor[(120), uint16], Tensor[(15, 16, 4), float32], Tensor[(240, 4), float32]) {
  %294 = @func_6394() /* ty=(Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) */;
  %295 = cast(meta[relay.Constant][28] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %296 = reshape(%295, newshape=[3, 40]) /* ty=Tensor[(3, 40), uint16] */;
  %297 = @func_6424(%296) /* ty=(Tensor[(7, 9, 15), float32], Tensor[(8, 2, 10), float32], Tensor[(3, 40), uint16]) */;
  %298 = cast(meta[relay.Constant][29] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
  %299 = reshape(%298, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %300 = @func_171(%299) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %301 = %294.3;
  %302 = %297.2;
  %303 = %300.0;
  (%301, %302, meta[relay.Constant][28] /* ty=Tensor[(120), uint16] */, %303, meta[relay.Constant][29] /* ty=Tensor[(240, 4), float32] */)
}

def @func_7520(%var_7507: Tensor[(392, 4), int64]) -> (Tensor[(15, 16, 4), float32], Tensor[(392, 4), int64], Tensor[(2, 784), float32]) {
  %304 = cast(%var_7507, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
  %305 = reshape(%304, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
  %306 = @func_1763(%305) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
  %307 = %306.2;
  %308 = cast(%307, dtype="float32") /* ty=Tensor[(2, 784), float32] */;
  %309 = @func_6878() /* ty=Tensor[(15, 16, 4), float32] */;
  %310 = log2(%308) /* ty=Tensor[(2, 784), float32] */;
  (%309, %var_7507, %310)
}

def @func_6365() -> (Tensor[(7, 9, 15), float32],) {
  %311 = @func_6342() /* ty=Tensor[(7, 9, 15), float32] */;
  (%311,)
}

def @func_1541(%var_1529: Tensor[(7, 14, 16), int64], %var_1530: Tensor[(7, 14, 16), int64]) -> (Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) {
  %312 = cast(%var_1530, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %313 = shape_of(%var_1529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_1529, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %316 = cast(meta[relay.Constant][30] /* ty=Tensor[(440, 2), bool] */, dtype="bool") /* ty=Tensor[(440, 2), bool] */;
  %317 = reshape(%316, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %318 = add(%314, %315) /* ty=Tensor[(7, 14, 16), int64] */;
  %319 = @func_920(%317) /* ty=Tensor[(8, 11, 10), bool] */;
  (%318, %319, meta[relay.Constant][30] /* ty=Tensor[(440, 2), bool] */)
}

def @func_5340() -> Tensor[(7, 9, 15), float32] {
  %320 = cast(meta[relay.Constant][31] /* ty=Tensor[(7, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 15), float32] */;
  asin(%320) /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_7055() -> (Tensor[(7, 12, 10), float64], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) {
  %321 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %322 = asin(%321) /* ty=Tensor[(7, 12, 10), float64] */;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %324 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(7, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %327 = cast(meta[relay.Constant][33] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %328 = reshape(%327, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %329 = @func_171(%328) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %330 = mod(%325, %326) /* ty=Tensor[(7, 12, 10), float64] */;
  %331 = %329.0;
  (%330, %331, meta[relay.Constant][33] /* ty=Tensor[(960), float32] */)
}

def @func_5577() -> (Tensor[(18), float32],) {
  %332 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
  %333 = %332.1;
  (%333,)
}

def @func_2597(%var_2581: Tensor[(15, 1, 2), float32], %var_2582: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float32],) {
  %334 = cast(%var_2581, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %335 = cast(%var_2582, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %336 = mod(%334, %335) /* ty=Tensor[(15, 2, 2), float32] */;
  (%336,)
}

def @func_5800() -> Tensor[(7, 9, 15), float32] {
  %337 = @func_5549() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) */;
  %337.0
}

def @func_4727(%var_4723: Tensor[(5, 40), uint16]) -> (Tensor[(7, 13, 10), float64], Tensor[(5, 5, 8), uint16], Tensor[(5, 40), uint16]) {
  %338 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 13, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
  %339 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(7, 13, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 13, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %342 = power(%340, %341) /* ty=Tensor[(7, 13, 10), float64] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
  %344 = cast(%var_4723, dtype="uint16") /* ty=Tensor[(5, 40), uint16] */;
  %345 = reshape(%344, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), uint16] */;
  %346 = @func_2707(%345) /* ty=(Tensor[(5, 5, 8), uint16],) */;
  %347 = exp(%343) /* ty=Tensor[(7, 13, 10), float64] */;
  %348 = %346.0;
  (%347, %348, %var_4723)
}

def @func_7021() -> Tensor[(7, 9, 15), float32] {
  %349 = @func_5921() /* ty=(Tensor[(880), bool], Tensor[(7, 9, 15), float32]) */;
  %349.1
}

def @func_5890(%var_5867: Tensor[(15, 16, 4), float32]) -> Tensor[(15, 16, 4), float64] {
  %350 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
  %351 = cast(%var_5867, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %355 = floor_divide(%353, %354) /* ty=Tensor[(15, 16, 4), float32] */;
  %356 = cast(%355, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %357 = atanh(%356) /* ty=Tensor[(15, 16, 4), float32] */;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  asin(%358) /* ty=Tensor[(15, 16, 4), float64] */
}

def @func_6005(%var_5938: Tensor[(7, 9, 15), float32], %var_5957: Tensor[(4, 84), bool], %var_5958: Tensor[(960), float32], %var_5963: Tensor[(120), float64], %var_5965: Tensor[(45), uint16], %var_5967: Tensor[(18), float32]) -> (Tensor[(7, 9, 15), uint16], Tensor[(15, 8, 11), float64], Tensor[(1320), float64], Tensor[(4, 84), bool], Tensor[(960), float32], Tensor[(360), float64], Tensor[(120), float64], Tensor[(30), float32], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(18), float32], Tensor[(9, 2, 960), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32]) {
  %359 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
  %360 = %359.0;
  %361 = cast(%var_5938, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %365 = cast(meta[relay.Constant][36] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %366 = reshape(%365, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
  %367 = @func_1662(%366) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) */;
  %368 = cast(%var_5957, dtype="bool") /* ty=Tensor[(4, 84), bool] */;
  %369 = cast(%var_5958, dtype="float32") /* ty=Tensor[(960), float32] */;
  %370 = reshape(%368, newshape=[3, 7, 16]) /* ty=Tensor[(3, 7, 16), bool] */;
  %371 = reshape(%369, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %372 = @func_1301(%370, %371) /* ty=(Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) */;
  %373 = %372.1;
  %374 = cast(meta[relay.Constant][37] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %375 = cast(%var_5963, dtype="float64") /* ty=Tensor[(120), float64] */;
  %376 = cast(%var_5957, dtype="bool") /* ty=Tensor[(4, 84), bool] */;
  %377 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %378 = cast(meta[relay.Constant][37] /* ty=Tensor[(360), float64] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %379 = cast(%var_5965, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %380 = cast(meta[relay.Constant][39] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %381 = cast(%var_5967, dtype="float32") /* ty=Tensor[(18), float32] */;
  %382 = reshape(%374, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
  %383 = reshape(%375, newshape=[120, 1]) /* ty=Tensor[(120, 1), float64] */;
  %384 = reshape(%376, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %385 = reshape(%377, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %386 = reshape(%378, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float32] */;
  %387 = reshape(%379, newshape=[45]) /* ty=Tensor[(45), uint16] */;
  %388 = reshape(%380, newshape=[1568]) /* ty=Tensor[(1568), int64] */;
  %389 = reshape(%381, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %390 = @func_4343(%382, %383, %384, %385, %386, %387, %388, %389) /* ty=(Tensor[(15, 16, 4), float64], Tensor[(120, 1), float64], Tensor[(336), bool], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(352), int64], Tensor[(264), int8], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(9, 2, 1), float32], Tensor[(18), float32], Tensor[(2, 12, 15), uint64], Tensor[(2, 12, 15), float32]) */;
  %391 = %390.12;
  %392 = cast(%373, dtype="float32") /* ty=Tensor[(960), float32] */;
  %393 = cast(%391, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %394 = cast(meta[relay.Constant][40] /* ty=Tensor[(450), uint32] */, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %395 = cast(meta[relay.Constant][40] /* ty=Tensor[(450), uint32] */, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %396 = reshape(%394, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %397 = reshape(%395, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %398 = @func_4194(%396, %397) /* ty=(Tensor[(10, 5, 9), bool],) */;
  %399 = left_shift(%363, %364) /* ty=Tensor[(7, 9, 15), uint16] */;
  %400 = %367.1;
  %401 = mod(%392, %393) /* ty=Tensor[(9, 2, 960), float32] */;
  %402 = %398.0;
  (%399, %400, meta[relay.Constant][36] /* ty=Tensor[(1320), float64] */, %var_5957, %var_5958, meta[relay.Constant][37] /* ty=Tensor[(360), float64] */, %var_5963, meta[relay.Constant][38] /* ty=Tensor[(30), float32] */, %var_5965, meta[relay.Constant][39] /* ty=Tensor[(1568), int64] */, %var_5967, %401, %402, meta[relay.Constant][40] /* ty=Tensor[(450), uint32] */)
}

def @func_6878() -> Tensor[(15, 16, 4), float32] {
  %403 = @func_6394() /* ty=(Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) */;
  %403.0
}

def @func_7193() -> (Tensor[(7, 9, 15), float32],) {
  %404 = @func_7008() /* ty=(Tensor[(7, 9, 15), float32],) */;
  %405 = %404.0;
  (%405,)
}

def @func_4194(%var_4173: Tensor[(10, 5, 9), uint32], %var_4186: Tensor[(10, 5, 9), uint32]) -> (Tensor[(10, 5, 9), bool],) {
  %406 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(10, 5, 9), uint32] */;
  %407 = shape_of(%var_4173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_4173, dtype="uint32") /* ty=Tensor[(10, 5, 9), uint32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %410 = add(%408, %409) /* ty=Tensor[(10, 5, 9), uint32] */;
  %411 = cast(%var_4186, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = greater_equal(%413, %414) /* ty=Tensor[(10, 5, 9), bool] */;
  (%415,)
}

def @func_5412() -> (Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) {
  %416 = cast(meta[relay.Constant][42] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %417 = reshape(%416, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %418 = @func_171(%417) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %419 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  %420 = %418.0;
  (%419, %420, meta[relay.Constant][42] /* ty=Tensor[(960), float32] */)
}

def @func_54(%var_0: Tensor[(9, 2, 1), float32]) -> (Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) {
  %421 = cast(%var_0, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %422 = sin(%421) /* ty=Tensor[(9, 2, 1), float32] */;
  %423 = cast(%var_0, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = greater_equal(%425, %426) /* ty=Tensor[(9, 2, ?), bool] */;
  %428 = cast(%422, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(9, 2, ?), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %432 = cast(%var_0, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %433 = cast(%427, dtype="int64") /* ty=Tensor[(9, 2, ?), int64] */;
  %434 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%422, dtype="int64") /* ty=Tensor[(9, 2, 1), int64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %437 = logical_xor(%435, %436) /* ty=Tensor[(9, 2, ?), int64] */;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(9, 2, ?), float64] */;
  %439 = less(%430, %431) /* ty=Tensor[(9, 2, ?), bool] */;
  %440 = atanh(%432) /* ty=Tensor[(9, 2, 1), float32] */;
  %441 = cos(%438) /* ty=Tensor[(9, 2, ?), float64] */;
  (%439, %440, %441)
}

def @func_2914(%var_2880: Tensor[(14, 13, 4), bool], %var_2881: Tensor[(14, 13, 4), bool], %var_2890: Tensor[(120, 8), float32], %var_2903: Tensor[(2, 176), int64]) -> (Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) {
  %442 = cast(%var_2890, dtype="float32") /* ty=Tensor[(120, 8), float32] */;
  %443 = reshape(%442, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %444 = @func_171(%443) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %445 = cast(%var_2881, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %446 = shape_of(%var_2880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_2880, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %449 = logical_or(%447, %448) /* ty=Tensor[(14, 13, 4), bool] */;
  %450 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 13, 4), bool] */, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = cast(%var_2881, dtype="float32") /* ty=Tensor[(14, 13, 4), float32] */;
  %455 = cast(%var_2903, dtype="int64") /* ty=Tensor[(2, 176), int64] */;
  %456 = reshape(%455, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
  %457 = cast(%var_2890, dtype="float32") /* ty=Tensor[(120, 8), float32] */;
  %458 = %444.0;
  %459 = less(%452, %453) /* ty=Tensor[(14, 13, 4), bool] */;
  %460 = sin(%454) /* ty=Tensor[(14, 13, 4), float32] */;
  %461 = @func_116(%456) /* ty=Tensor[(11, 4, 8), bool] */;
  %462 = sigmoid(%457) /* ty=Tensor[(120, 8), float32] */;
  (%458, %459, %460, %461, %var_2903, %462)
}

def @func_2658(%var_2651: Tensor[(4, 8, 3), int32]) -> Tensor[(4, 8, 3), int32] {
  %463 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 8, 3), int32] */, dtype="int32") /* ty=Tensor[(4, 8, 3), int32] */;
  %464 = shape_of(%var_2651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_2651, dtype="int32") /* ty=Tensor[(4, 8, 3), int32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%465, %466) /* ty=Tensor[(4, 8, 3), int32] */
}

def @func_5638(%var_5628: Tensor[(16, 9, 9), int16], %var_5629: Tensor[(16, 9, 9), int16]) -> Tensor[(16, 9, 9), int16] {
  %467 = cast(%var_5629, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %468 = shape_of(%var_5628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%var_5628, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%469, %470) /* ty=Tensor[(16, 9, 9), int16] */
}

def @func_5549() -> (Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) {
  %471 = cast(meta[relay.Constant][45] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %472 = reshape(%471, newshape=[4, 15, 10]) /* ty=Tensor[(4, 15, 10), float32] */;
  %473 = @func_4949(%472) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */;
  %474 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  %475 = %473.11;
  (%474, %475, meta[relay.Constant][45] /* ty=Tensor[(600), float32] */)
}

def @func_7339() -> Tensor[(7, 9, 15), float32] {
  %476 = @func_7008() /* ty=(Tensor[(7, 9, 15), float32],) */;
  %476.0
}

def @func_643(%var_623: Tensor[(8, 2, 10), float64]) -> Tensor[(8, 2, 10), float32] {
  %477 = cast(%var_623, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %478 = asin(%477) /* ty=Tensor[(8, 2, 10), float64] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(8, 2, 10), float32] */;
  cosh(%479) /* ty=Tensor[(8, 2, 10), float32] */
}

def @func_7008() -> (Tensor[(7, 9, 15), float32],) {
  %480 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  (%480,)
}

def @func_5736(%var_5680: Tensor[(7, 9, 15), float32], %var_5705: Tensor[(96), int32]) -> (Tensor[(7, 9, 15), float64], Tensor[(18), float32], Tensor[(4, 8, 3), int32], Tensor[(96), int32], Tensor[(7, 9, 15), float64]) {
  %481 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %482 = %481.0;
  %483 = cast(%var_5680, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %487 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
  %488 = cast(%var_5705, dtype="int32") /* ty=Tensor[(96), int32] */;
  %489 = reshape(%488, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), int32] */;
  %490 = cast(%482, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
  %491 = floor_mod(%485, %486) /* ty=Tensor[(7, 9, 15), float64] */;
  %492 = %487.1;
  %493 = @func_2658(%489) /* ty=Tensor[(4, 8, 3), int32] */;
  %494 = cos(%490) /* ty=Tensor[(7, 9, 15), float64] */;
  (%491, %492, %493, %var_5705, %494)
}

def @func_4949(%var_4872: Tensor[(4, 15, 10), float32]) -> (Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  %495 = cast(meta[relay.Constant][46] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %496 = reshape(%495, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
  %497 = @func_1662(%496) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) */;
  %498 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %499 = cast(meta[relay.Constant][48] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %500 = reshape(%499, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %501 = @func_54(%500) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %502 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %503 = exp(%502) /* ty=Tensor[(4, 15, 10), float32] */;
  %504 = cast(%var_4872, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %508 = maximum(%506, %507) /* ty=Tensor[(4, 15, 10), int64] */;
  %509 = cast(%508, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %510 = atan(%509) /* ty=Tensor[(4, 15, 10), float64] */;
  %511 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %515 = cast(meta[relay.Constant][49] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %516 = cast(meta[relay.Constant][49] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %517 = cast(meta[relay.Constant][50] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %518 = cast(meta[relay.Constant][51] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %519 = reshape(%515, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %520 = reshape(%516, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %521 = reshape(%517, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
  %522 = reshape(%518, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
  %523 = @func_2914(%519, %520, %521, %522) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
  %524 = cast(meta[relay.Constant][52] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
  %525 = reshape(%524, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %526 = %497.0;
  %527 = asinh(%498) /* ty=Tensor[(4, 15, 10), float32] */;
  %528 = %501.0;
  %529 = floor_mod(%513, %514) /* ty=Tensor[(4, 15, 10), float32] */;
  %530 = %523.4;
  %531 = @func_920(%525) /* ty=Tensor[(8, 11, 10), bool] */;
  (%526, meta[relay.Constant][46] /* ty=Tensor[(1320), float64] */, %527, %528, meta[relay.Constant][48] /* ty=Tensor[(18), float32] */, %529, %530, meta[relay.Constant][49] /* ty=Tensor[(728), bool] */, meta[relay.Constant][50] /* ty=Tensor[(960), float32] */, meta[relay.Constant][51] /* ty=Tensor[(352), int64] */, %531, meta[relay.Constant][52] /* ty=Tensor[(880), bool] */)
}

def @func_5443() -> (Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) {
  %532 = cast(meta[relay.Constant][53] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %533 = reshape(%532, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %534 = @func_54(%533) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %535 = %534.0;
  %536 = cast(%535, dtype="float32") /* ty=Tensor[(9, 2, ?), float32] */;
  %537 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  %538 = log(%536) /* ty=Tensor[(9, 2, ?), float32] */;
  (%537, meta[relay.Constant][53] /* ty=Tensor[(18), float32] */, %538)
}

def @main(%var_7527: Tensor[(6, 6, 14), int16], %var_7528: Tensor[(6, 6, 14), int16]) -> (Tensor[(6, 6, 14), bool],) {
  %539 = cast(%var_7528, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %540 = shape_of(%var_7527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_7527, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = greater_equal(%541, %542) /* ty=Tensor[(6, 6, 14), bool] */;
  (%543,)
}

def @func_2707(%var_2703: Tensor[(5, 5, 8), uint16]) -> (Tensor[(5, 5, 8), uint16],) {
  %544 = cast(meta[relay.Constant][54] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %545 = cast(%var_2703, dtype="uint16") /* ty=Tensor[(5, 5, 8), uint16] */;
  %546 = right_shift(%544, %545) /* ty=Tensor[(5, 5, 8), uint16] */;
  (%546,)
}

def @func_7270(%var_7249: Tensor[(600), float32], %var_7258: Tensor[(336), bool]) -> (Tensor[(18), float32], Tensor[(15, 16, 4), float64], Tensor[(14, 13, 4), float32], Tensor[(728), bool], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(600), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), float64], Tensor[(6, 20), float64], Tensor[(336), bool]) {
  %547 = @func_5577() /* ty=(Tensor[(18), float32],) */;
  %548 = @func_6304() /* ty=(Tensor[(15, 16, 4), int16], Tensor[(15, 16, 4), float64]) */;
  %549 = %548.1;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  %551 = cast(meta[relay.Constant][55] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %552 = cast(meta[relay.Constant][55] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %553 = asinh(%550) /* ty=Tensor[(15, 16, 4), float64] */;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %555 = cast(meta[relay.Constant][56] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %556 = reshape(%551, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %557 = reshape(%552, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %558 = reshape(%554, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
  %559 = reshape(%555, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
  %560 = @func_2914(%556, %557, %558, %559) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
  %561 = cast(%var_7249, dtype="float32") /* ty=Tensor[(600), float32] */;
  %562 = reshape(%561, newshape=[4, 15, 10]) /* ty=Tensor[(4, 15, 10), float32] */;
  %563 = @func_4949(%562) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */;
  %564 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
  %565 = cast(%549, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = cast(meta[relay.Constant][57] /* ty=Tensor[(6, 20), float64] */, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
  %570 = cast(%var_7258, dtype="bool") /* ty=Tensor[(336), bool] */;
  %571 = reshape(%569, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
  %572 = reshape(%570, newshape=[168, 2]) /* ty=Tensor[(168, 2), bool] */;
  %573 = @func_3677(%571, %572) /* ty=(Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) */;
  %574 = %547.0;
  %575 = %560.2;
  %576 = %563.10;
  %577 = equal(%567, %568) /* ty=Tensor[(15, 16, 4), bool] */;
  %578 = %573.3;
  (%574, %553, %575, meta[relay.Constant][55] /* ty=Tensor[(728), bool] */, meta[relay.Constant][56] /* ty=Tensor[(352), int64] */, %576, %var_7249, %577, %578, meta[relay.Constant][57] /* ty=Tensor[(6, 20), float64] */, %var_7258)
}

def @func_116(%var_106: Tensor[(11, 4, 8), int64]) -> Tensor[(11, 4, 8), bool] {
  %579 = cast(-4 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %580 = cast(%var_106, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  greater(%579, %580) /* ty=Tensor[(11, 4, 8), bool] */
}

def @func_1662(%var_1628: Tensor[(15, 8, 11), float64]) -> (Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) {
  %581 = cast(meta[relay.Constant][58] /* ty=Tensor[(15, 8, 11), float64] */, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %582 = shape_of(%var_1628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_1628, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = cast(%var_1628, dtype="float64") /* ty=Tensor[(15, 8, 11), float64] */;
  %586 = less_equal(%583, %584) /* ty=Tensor[(15, 8, 11), bool] */;
  %587 = cosh(%585) /* ty=Tensor[(15, 8, 11), float64] */;
  (%586, %587)
}

def @func_7489(%var_7469: Tensor[(15, 16, 4), float32], %var_7481: Tensor[(880), bool]) -> (Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), uint64], Tensor[(8, 4, 8), bool], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  %588 = @func_7193() /* ty=(Tensor[(7, 9, 15), float32],) */;
  %589 = @func_6394() /* ty=(Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  %592 = log(%591) /* ty=Tensor[(15, 16, 4), float64] */;
  %593 = @func_7055() /* ty=(Tensor[(7, 12, 10), float64], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %594 = %593.2;
  %595 = cast(%594, dtype="bool") /* ty=Tensor[(960), bool] */;
  %596 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%592, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = cast(%var_7469, dtype="uint64") /* ty=Tensor[(15, 16, 4), uint64] */;
  %600 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%590, dtype="uint64") /* ty=Tensor[(15, 16, 4), uint64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %603 = @func_6243() /* ty=(Tensor[(8, 4, 8), bool],) */;
  %604 = cast(%var_7481, dtype="bool") /* ty=Tensor[(880), bool] */;
  %605 = reshape(%604, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %606 = %588.0;
  %607 = less_equal(%597, %598) /* ty=Tensor[(15, 16, 4), bool] */;
  %608 = bitwise_and(%601, %602) /* ty=Tensor[(15, 16, 4), uint64] */;
  %609 = %603.0;
  %610 = @func_920(%605) /* ty=Tensor[(8, 11, 10), bool] */;
  (%606, %607, %608, %609, %610, %var_7481)
}

def @func_5319(%var_5224: Tensor[(12, 1, 6), float64], %var_5236: Tensor[(450), uint32], %var_5242: Tensor[(45), uint16], %var_5243: Tensor[(56, 28), int64], %var_5245: Tensor[(728), bool], %var_5246: Tensor[(960), float32], %var_5261: Tensor[(336), bool], %var_5305: Tensor[(8, 20), float64]) -> (Tensor[(12, ?, 6), bool], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(60), float32], Tensor[(264), int8], Tensor[(56, 28), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64], Tensor[(336), bool], Tensor[(18), float32], Tensor[(9, 2, 45), uint16], Tensor[(8, 2, 10), float32], Tensor[(8, 20), float64], Tensor[(10, 13, 1), float32], Tensor[(26, 5), float64]) {
  %611 = cast(%var_5224, dtype="float64") /* ty=Tensor[(12, 1, 6), float64] */;
  %612 = atan(%611) /* ty=Tensor[(12, 1, 6), float64] */;
  %613 = cast(%var_5224, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = cast(%var_5236, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %618 = cast(%var_5236, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %619 = reshape(%617, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %620 = reshape(%618, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %621 = @func_4194(%619, %620) /* ty=(Tensor[(10, 5, 9), bool],) */;
  %622 = cast(meta[relay.Constant][59] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %623 = cast(%var_5242, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %624 = cast(%var_5243, dtype="int64") /* ty=Tensor[(56, 28), int64] */;
  %625 = cast(meta[relay.Constant][60] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
  %626 = cast(%var_5245, dtype="bool") /* ty=Tensor[(728), bool] */;
  %627 = cast(%var_5246, dtype="float32") /* ty=Tensor[(960), float32] */;
  %628 = reshape(%622, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int8] */;
  %629 = reshape(%623, newshape=[1, 45]) /* ty=Tensor[(1, 45), uint16] */;
  %630 = reshape(%624, newshape=[392, 4]) /* ty=Tensor[(392, 4), int64] */;
  %631 = reshape(%625, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %632 = reshape(%626, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %633 = reshape(%627, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %634 = @func_3826(%628, %629, %630, %631, %632, %633) /* ty=(Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) */;
  %635 = cast(%var_5261, dtype="bool") /* ty=Tensor[(336), bool] */;
  %636 = cast(%var_5246, dtype="float32") /* ty=Tensor[(960), float32] */;
  %637 = reshape(%635, newshape=[3, 7, 16]) /* ty=Tensor[(3, 7, 16), bool] */;
  %638 = reshape(%636, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %639 = @func_1301(%637, %638) /* ty=(Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) */;
  %640 = cast(meta[relay.Constant][61] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %641 = reshape(%640, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %642 = @func_54(%641) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %643 = %642.1;
  %644 = cast(%643, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %645 = cast(%var_5242, dtype="float32") /* ty=Tensor[(45), float32] */;
  %646 = floor_divide(%644, %645) /* ty=Tensor[(9, 2, 45), float32] */;
  %647 = cast(%var_5242, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %648 = cast(%646, dtype="uint16") /* ty=Tensor[(9, 2, 45), uint16] */;
  %649 = cast(%var_5305, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %650 = reshape(%649, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %651 = cast(meta[relay.Constant][62] /* ty=Tensor[(26, 5), float64] */, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %652 = reshape(%651, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %653 = @func_3725(%652) /* ty=(Tensor[(10, 13, ?), float32], Tensor[(10, 13, 1), float32]) */;
  %654 = logical_and(%615, %616) /* ty=Tensor[(12, ?, 6), bool] */;
  %655 = %621.0;
  %656 = %634.7;
  %657 = %639.2;
  %658 = bitwise_and(%647, %648) /* ty=Tensor[(9, 2, 45), uint16] */;
  %659 = @func_643(%650) /* ty=Tensor[(8, 2, 10), float32] */;
  %660 = %653.1;
  (%654, %655, %var_5236, %656, meta[relay.Constant][59] /* ty=Tensor[(264), int8] */, %var_5243, meta[relay.Constant][60] /* ty=Tensor[(880), bool] */, %var_5245, %var_5246, %657, %var_5261, meta[relay.Constant][61] /* ty=Tensor[(18), float32] */, %658, %659, %var_5305, %660, meta[relay.Constant][62] /* ty=Tensor[(26, 5), float64] */)
}

def @func_5512(%var_5508: Tensor[(160), float64]) -> (Tensor[(15, 16, 4), float64], Tensor[(9, 2, ?), float64], Tensor[(6, 3), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64]) {
  %661 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %662 = %661.1;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  %664 = cast(meta[relay.Constant][63] /* ty=Tensor[(6, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 3), float32] */;
  %665 = reshape(%664, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %666 = @func_54(%665) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %667 = cast(%var_5508, dtype="float64") /* ty=Tensor[(160), float64] */;
  %668 = reshape(%667, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %669 = cosh(%663) /* ty=Tensor[(15, 16, 4), float64] */;
  %670 = %666.2;
  %671 = @func_643(%668) /* ty=Tensor[(8, 2, 10), float32] */;
  (%669, %670, meta[relay.Constant][63] /* ty=Tensor[(6, 3), float32] */, %671, %var_5508)
}

def @func_3270(%var_3225: Tensor[(8, 13, 8), float64]) -> (Tensor[(8, 13, 8), float64], Tensor[(352), bool]) {
  %672 = cast(%var_3225, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %673 = cast(meta[relay.Constant][64] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %674 = reshape(%673, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
  %675 = @func_116(%674) /* ty=Tensor[(11, 4, 8), bool] */;
  %676 = cast(%675, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
  %677 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(352), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %678 = cast(meta[relay.Constant][64] /* ty=Tensor[(352), int64] */, dtype="bool") /* ty=Tensor[(352), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?), bool] */;
  %680 = acos(%672) /* ty=Tensor[(8, 13, 8), float64] */;
  %681 = logical_or(%678, %679) /* ty=Tensor[(352), bool] */;
  (%680, %681)
}

def @func_3517(%var_3508: Tensor[(13, 3, 15), float32], %var_3509: Tensor[(13, 3, 15), float32]) -> Tensor[(13, 3, 15), float32] {
  %682 = cast(%var_3509, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  %683 = shape_of(%var_3508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%var_3508, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%684, %685) /* ty=Tensor[(13, 3, 15), float32] */
}

def @func_3548(%var_3537: float32, %var_3538: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), float32], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  %686 = cast(%var_3537, dtype="float32") /* ty=float32 */;
  %687 = cast(%var_3538, dtype="float32") /* ty=Tensor[(6, 14, 14), float32] */;
  %688 = cast(meta[relay.Constant][65] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
  %689 = reshape(%688, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %690 = power(%686, %687) /* ty=Tensor[(6, 14, 14), float32] */;
  %691 = @func_920(%689) /* ty=Tensor[(8, 11, 10), bool] */;
  (%690, %691, meta[relay.Constant][65] /* ty=Tensor[(880), bool] */)
}

def @func_7393(%var_7354: Tensor[(6, 5, 12), bool], %var_7355: Tensor[(6, 5, 12), bool]) -> (Tensor[(6, 5, 12), bool], Tensor[(8, 4, 8), bool], Tensor[(16, 9, 9), int16], Tensor[(1296), int16], Tensor[(7, 9, 15), float32]) {
  %692 = cast(%var_7355, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %693 = shape_of(%var_7354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_7354, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = cast(meta[relay.Constant][66] /* ty=Tensor[(1296), int16] */, dtype="int16") /* ty=Tensor[(1296), int16] */;
  %697 = cast(meta[relay.Constant][66] /* ty=Tensor[(1296), int16] */, dtype="int16") /* ty=Tensor[(1296), int16] */;
  %698 = reshape(%696, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int16] */;
  %699 = reshape(%697, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int16] */;
  %700 = @func_7073() /* ty=(Tensor[(7, 9, 15), float32],) */;
  %701 = logical_or(%694, %695) /* ty=Tensor[(6, 5, 12), bool] */;
  %702 = @func_6234() /* ty=Tensor[(8, 4, 8), bool] */;
  %703 = @func_5638(%698, %699) /* ty=Tensor[(16, 9, 9), int16] */;
  %704 = %700.0;
  (%701, %702, %703, meta[relay.Constant][66] /* ty=Tensor[(1296), int16] */, %704)
}

def @func_171(%var_165: Tensor[(15, 16, 4), float32]) -> (Tensor[(15, 16, 4), float32],) {
  %705 = cast(%var_165, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %706 = sin(%705) /* ty=Tensor[(15, 16, 4), float32] */;
  (%706,)
}

def @func_6267(%var_6257: Tensor[(450), uint32], %var_6261: Tensor[(832), float64]) -> (Tensor[(9, 2, ?), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(352), bool], Tensor[(832), float64]) {
  %707 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
  %708 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %709 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %710 = reshape(%708, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %711 = reshape(%709, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %712 = @func_4194(%710, %711) /* ty=(Tensor[(10, 5, 9), bool],) */;
  %713 = cast(%var_6261, dtype="float64") /* ty=Tensor[(832), float64] */;
  %714 = reshape(%713, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float64] */;
  %715 = @func_3270(%714) /* ty=(Tensor[(8, 13, 8), float64], Tensor[(352), bool]) */;
  %716 = %707.2;
  %717 = %712.0;
  %718 = %715.1;
  (%716, %717, %var_6257, %718, %var_6261)
}

def @func_4158(%var_4139: Tensor[(7, 4, 9), float64]) -> (Tensor[(7, 4, 9), float64],) {
  %719 = cast(meta[relay.Constant][67] /* ty=Tensor[(7, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %720 = shape_of(%var_4139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_4139, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %723 = floor_mod(%721, %722) /* ty=Tensor[(7, 4, 9), float64] */;
  (%723,)
}

def @func_6394() -> (Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) {
  %724 = cast(meta[relay.Constant][68] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %725 = reshape(%724, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %726 = @func_171(%725) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %727 = cast(meta[relay.Constant][69] /* ty=Tensor[(9, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
  %728 = atan(%727) /* ty=Tensor[(9, 16, 7), float32] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
  %730 = asinh(%729) /* ty=Tensor[(9, 16, 7), float64] */;
  %731 = cast(%730, dtype="int8") /* ty=Tensor[(9, 16, 7), int8] */;
  %732 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%728, dtype="int8") /* ty=Tensor[(9, 16, 7), int8] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %735 = %726.0;
  %736 = @func_6234() /* ty=Tensor[(8, 4, 8), bool] */;
  %737 = add(%733, %734) /* ty=Tensor[(9, 16, 7), int8] */;
  (%735, meta[relay.Constant][68] /* ty=Tensor[(960), float32] */, %736, %737)
}

def @func_6997(%var_6979: Tensor[(160), float64], %var_6984: float32) -> (Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(880), bool], float32, Tensor[(1176), float32], Tensor[(8, 2, 10), float32], Tensor[(7, 9, 15), float64]) {
  %738 = cast(%var_6979, dtype="float64") /* ty=Tensor[(160), float64] */;
  %739 = reshape(%738, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %740 = cast(%var_6984, dtype="float32") /* ty=float32 */;
  %741 = cast(meta[relay.Constant][70] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %742 = reshape(%740, newshape=[]) /* ty=float32 */;
  %743 = reshape(%741, newshape=[6, 14, 14]) /* ty=Tensor[(6, 14, 14), float32] */;
  %744 = @func_3548(%742, %743) /* ty=(Tensor[(6, 14, 14), float32], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */;
  %745 = cast(%var_6979, dtype="float64") /* ty=Tensor[(160), float64] */;
  %746 = reshape(%745, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %747 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %748 = %747.0;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
  %750 = @func_643(%739) /* ty=Tensor[(8, 2, 10), float32] */;
  %751 = %744.2;
  %752 = @func_643(%746) /* ty=Tensor[(8, 2, 10), float32] */;
  %753 = acos(%749) /* ty=Tensor[(7, 9, 15), float64] */;
  (%750, %var_6979, %751, %var_6984, meta[relay.Constant][70] /* ty=Tensor[(1176), float32] */, %752, %753)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3521(%var_3519: Tensor[(13, 3, 15), float32], %var_3520: Tensor[(13, 3, 15), float32]) -> Tensor[(13, 3, 15), float32] {
  @func_3517(%var_3519, %var_3520) /* ty=Tensor[(13, 3, 15), float32] */
}

def @func_7126() -> Tensor[(15, 16, 4), float32] {
  @func_7124() /* ty=Tensor[(15, 16, 4), float32] */
}

def @func_5443() -> (Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %1 = reshape(%0, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %2 = @func_54(%1) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(9, 2, ?), float32] */;
  %5 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  %6 = log(%4) /* ty=Tensor[(9, 2, ?), float32] */;
  (%5, meta[relay.Constant][0] /* ty=Tensor[(18), float32] */, %6)
}

def @func_5642(%var_5640: Tensor[(16, 9, 9), int16], %var_5641: Tensor[(16, 9, 9), int16]) -> Tensor[(16, 9, 9), int16] {
  @func_5638(%var_5640, %var_5641) /* ty=Tensor[(16, 9, 9), int16] */
}

def @func_1763(%var_1759: Tensor[(2, 784), int64]) -> (Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) {
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %8 = cast(%var_1759, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %9 = cast(%var_1759, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %10 = reshape(%8, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %11 = reshape(%9, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %12 = @func_1541(%10, %11) /* ty=(Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) */;
  %13 = sqrt(%7) /* ty=Tensor[(9, 11, 8), float32] */;
  %14 = %12.0;
  (%13, %14, %var_1759)
}

def @func_6270(%var_6268: Tensor[(450), uint32], %var_6269: Tensor[(832), float64]) -> (Tensor[(9, 2, ?), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(352), bool], Tensor[(832), float64]) {
  %27 = fn (%var_6257: Tensor[(450), uint32], %var_6261: Tensor[(832), float64]) -> (Tensor[(9, 2, ?), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(352), bool], Tensor[(832), float64]) {
    %15 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
    %16 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(450), uint32] */;
    %17 = cast(%var_6257, dtype="uint32") /* ty=Tensor[(450), uint32] */;
    %18 = reshape(%16, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
    %19 = reshape(%17, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
    %20 = @func_4194(%18, %19) /* ty=(Tensor[(10, 5, 9), bool],) */;
    %21 = cast(%var_6261, dtype="float64") /* ty=Tensor[(832), float64] */;
    %22 = reshape(%21, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float64] */;
    %23 = @func_3270(%22) /* ty=(Tensor[(8, 13, 8), float64], Tensor[(352), bool]) */;
    %24 = %15.2;
    %25 = %20.0;
    %26 = %23.1;
    (%24, %25, %var_6257, %26, %var_6261)
  };
  %27(%var_6268, %var_6269) /* ty=(Tensor[(9, 2, ?), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(352), bool], Tensor[(832), float64]) */
}

def @main(%var_7527: Tensor[(6, 6, 14), int16], %var_7528: Tensor[(6, 6, 14), int16]) -> (Tensor[(6, 6, 14), bool],) {
  %28 = cast(%var_7528, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %29 = shape_of(%var_7527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_7527, dtype="bool") /* ty=Tensor[(6, 6, 14), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = greater_equal(%30, %31) /* ty=Tensor[(6, 6, 14), bool] */;
  (%32,)
}

def @func_6235() -> Tensor[(8, 4, 8), bool] {
  %37 = fn () -> Tensor[(8, 4, 8), bool] {
    %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
    %34 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(8, 4, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%35, %36) /* ty=Tensor[(8, 4, 8), bool] */
  };
  %37() /* ty=Tensor[(8, 4, 8), bool] */
}

def @func_4729(%var_4728: Tensor[(5, 40), uint16]) -> (Tensor[(7, 13, 10), float64], Tensor[(5, 5, 8), uint16], Tensor[(5, 40), uint16]) {
  %49 = fn (%var_4723: Tensor[(5, 40), uint16]) -> (Tensor[(7, 13, 10), float64], Tensor[(5, 5, 8), uint16], Tensor[(5, 40), uint16]) {
    %38 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 13, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
    %39 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(7, 13, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 13, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
    %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %42 = power(%40, %41) /* ty=Tensor[(7, 13, 10), float64] */;
    %43 = cast(%42, dtype="float64") /* ty=Tensor[(7, 13, 10), float64] */;
    %44 = cast(%var_4723, dtype="uint16") /* ty=Tensor[(5, 40), uint16] */;
    %45 = reshape(%44, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), uint16] */;
    %46 = @func_2707(%45) /* ty=(Tensor[(5, 5, 8), uint16],) */;
    %47 = exp(%43) /* ty=Tensor[(7, 13, 10), float64] */;
    %48 = %46.0;
    (%47, %48, %var_4723)
  };
  %49(%var_4728) /* ty=(Tensor[(7, 13, 10), float64], Tensor[(5, 5, 8), uint16], Tensor[(5, 40), uint16]) */
}

def @func_6005(%var_5938: Tensor[(7, 9, 15), float32], %var_5957: Tensor[(4, 84), bool], %var_5958: Tensor[(960), float32], %var_5963: Tensor[(120), float64], %var_5965: Tensor[(45), uint16], %var_5967: Tensor[(18), float32]) -> (Tensor[(7, 9, 15), uint16], Tensor[(15, 8, 11), float64], Tensor[(1320), float64], Tensor[(4, 84), bool], Tensor[(960), float32], Tensor[(360), float64], Tensor[(120), float64], Tensor[(30), float32], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(18), float32], Tensor[(9, 2, 960), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32]) {
  %50 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
  %51 = %50.0;
  %52 = cast(%var_5938, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="uint16") /* ty=Tensor[(7, 9, 15), uint16] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %56 = cast(meta[relay.Constant][6] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %57 = reshape(%56, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
  %58 = @func_1662(%57) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) */;
  %59 = cast(%var_5957, dtype="bool") /* ty=Tensor[(4, 84), bool] */;
  %60 = cast(%var_5958, dtype="float32") /* ty=Tensor[(960), float32] */;
  %61 = reshape(%59, newshape=[3, 7, 16]) /* ty=Tensor[(3, 7, 16), bool] */;
  %62 = reshape(%60, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %63 = @func_1301(%61, %62) /* ty=(Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) */;
  %64 = %63.1;
  %65 = cast(meta[relay.Constant][7] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %66 = cast(%var_5963, dtype="float64") /* ty=Tensor[(120), float64] */;
  %67 = cast(%var_5957, dtype="bool") /* ty=Tensor[(4, 84), bool] */;
  %68 = cast(meta[relay.Constant][8] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %69 = cast(meta[relay.Constant][7] /* ty=Tensor[(360), float64] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %70 = cast(%var_5965, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %71 = cast(meta[relay.Constant][9] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %72 = cast(%var_5967, dtype="float32") /* ty=Tensor[(18), float32] */;
  %73 = reshape(%65, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float64] */;
  %74 = reshape(%66, newshape=[120, 1]) /* ty=Tensor[(120, 1), float64] */;
  %75 = reshape(%67, newshape=[336]) /* ty=Tensor[(336), bool] */;
  %76 = reshape(%68, newshape=[30]) /* ty=Tensor[(30), float32] */;
  %77 = reshape(%69, newshape=[2, 12, 15]) /* ty=Tensor[(2, 12, 15), float32] */;
  %78 = reshape(%70, newshape=[45]) /* ty=Tensor[(45), uint16] */;
  %79 = reshape(%71, newshape=[1568]) /* ty=Tensor[(1568), int64] */;
  %80 = reshape(%72, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %81 = @func_4343(%73, %74, %75, %76, %77, %78, %79, %80) /* ty=(Tensor[(15, 16, 4), float64], Tensor[(120, 1), float64], Tensor[(336), bool], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(352), int64], Tensor[(264), int8], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(9, 2, 1), float32], Tensor[(18), float32], Tensor[(2, 12, 15), uint64], Tensor[(2, 12, 15), float32]) */;
  %82 = %81.12;
  %83 = cast(%64, dtype="float32") /* ty=Tensor[(960), float32] */;
  %84 = cast(%82, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %85 = cast(meta[relay.Constant][10] /* ty=Tensor[(450), uint32] */, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %86 = cast(meta[relay.Constant][10] /* ty=Tensor[(450), uint32] */, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %87 = reshape(%85, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %88 = reshape(%86, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %89 = @func_4194(%87, %88) /* ty=(Tensor[(10, 5, 9), bool],) */;
  %90 = left_shift(%54, %55) /* ty=Tensor[(7, 9, 15), uint16] */;
  %91 = %58.1;
  %92 = mod(%83, %84) /* ty=Tensor[(9, 2, 960), float32] */;
  %93 = %89.0;
  (%90, %91, meta[relay.Constant][6] /* ty=Tensor[(1320), float64] */, %var_5957, %var_5958, meta[relay.Constant][7] /* ty=Tensor[(360), float64] */, %var_5963, meta[relay.Constant][8] /* ty=Tensor[(30), float32] */, %var_5965, meta[relay.Constant][9] /* ty=Tensor[(1568), int64] */, %var_5967, %92, %93, meta[relay.Constant][10] /* ty=Tensor[(450), uint32] */)
}

def @func_5319(%var_5224: Tensor[(12, 1, 6), float64], %var_5236: Tensor[(450), uint32], %var_5242: Tensor[(45), uint16], %var_5243: Tensor[(56, 28), int64], %var_5245: Tensor[(728), bool], %var_5246: Tensor[(960), float32], %var_5261: Tensor[(336), bool], %var_5305: Tensor[(8, 20), float64]) -> (Tensor[(12, ?, 6), bool], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(60), float32], Tensor[(264), int8], Tensor[(56, 28), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64], Tensor[(336), bool], Tensor[(18), float32], Tensor[(9, 2, 45), uint16], Tensor[(8, 2, 10), float32], Tensor[(8, 20), float64], Tensor[(10, 13, 1), float32], Tensor[(26, 5), float64]) {
  %94 = cast(%var_5224, dtype="float64") /* ty=Tensor[(12, 1, 6), float64] */;
  %95 = atan(%94) /* ty=Tensor[(12, 1, 6), float64] */;
  %96 = cast(%var_5224, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = cast(%var_5236, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %101 = cast(%var_5236, dtype="uint32") /* ty=Tensor[(450), uint32] */;
  %102 = reshape(%100, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %103 = reshape(%101, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), uint32] */;
  %104 = @func_4194(%102, %103) /* ty=(Tensor[(10, 5, 9), bool],) */;
  %105 = cast(meta[relay.Constant][11] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
  %106 = cast(%var_5242, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %107 = cast(%var_5243, dtype="int64") /* ty=Tensor[(56, 28), int64] */;
  %108 = cast(meta[relay.Constant][12] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
  %109 = cast(%var_5245, dtype="bool") /* ty=Tensor[(728), bool] */;
  %110 = cast(%var_5246, dtype="float32") /* ty=Tensor[(960), float32] */;
  %111 = reshape(%105, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int8] */;
  %112 = reshape(%106, newshape=[1, 45]) /* ty=Tensor[(1, 45), uint16] */;
  %113 = reshape(%107, newshape=[392, 4]) /* ty=Tensor[(392, 4), int64] */;
  %114 = reshape(%108, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %115 = reshape(%109, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %116 = reshape(%110, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %117 = @func_3826(%111, %112, %113, %114, %115, %116) /* ty=(Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) */;
  %118 = cast(%var_5261, dtype="bool") /* ty=Tensor[(336), bool] */;
  %119 = cast(%var_5246, dtype="float32") /* ty=Tensor[(960), float32] */;
  %120 = reshape(%118, newshape=[3, 7, 16]) /* ty=Tensor[(3, 7, 16), bool] */;
  %121 = reshape(%119, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %122 = @func_1301(%120, %121) /* ty=(Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) */;
  %123 = cast(meta[relay.Constant][13] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %124 = reshape(%123, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %125 = @func_54(%124) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %126 = %125.1;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
  %128 = cast(%var_5242, dtype="float32") /* ty=Tensor[(45), float32] */;
  %129 = floor_divide(%127, %128) /* ty=Tensor[(9, 2, 45), float32] */;
  %130 = cast(%var_5242, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %131 = cast(%129, dtype="uint16") /* ty=Tensor[(9, 2, 45), uint16] */;
  %132 = cast(%var_5305, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %133 = reshape(%132, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %134 = cast(meta[relay.Constant][14] /* ty=Tensor[(26, 5), float64] */, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %135 = reshape(%134, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %136 = @func_3725(%135) /* ty=(Tensor[(10, 13, ?), float32], Tensor[(10, 13, 1), float32]) */;
  %137 = logical_and(%98, %99) /* ty=Tensor[(12, ?, 6), bool] */;
  %138 = %104.0;
  %139 = %117.7;
  %140 = %122.2;
  %141 = bitwise_and(%130, %131) /* ty=Tensor[(9, 2, 45), uint16] */;
  %142 = @func_643(%133) /* ty=Tensor[(8, 2, 10), float32] */;
  %143 = %136.1;
  (%137, %138, %var_5236, %139, meta[relay.Constant][11] /* ty=Tensor[(264), int8] */, %var_5243, meta[relay.Constant][12] /* ty=Tensor[(880), bool] */, %var_5245, %var_5246, %140, %var_5261, meta[relay.Constant][13] /* ty=Tensor[(18), float32] */, %141, %142, %var_5305, %143, meta[relay.Constant][14] /* ty=Tensor[(26, 5), float64] */)
}

def @func_7162(%var_7160: Tensor[(15, 16, 4), float32], %var_7161: Tensor[(832), float64]) -> (Tensor[(15, 16, 4), int32], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
  %156 = fn (%var_7140: Tensor[(15, 16, 4), float32], %var_7154: Tensor[(832), float64]) -> (Tensor[(15, 16, 4), int32], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) {
    %144 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
    %145 = cast(%var_7140, dtype="int32") /* ty=Tensor[(15, 16, 4), int32] */;
    %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(%144, dtype="int32") /* ty=Tensor[(15, 16, 4), int32] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %149 = cast(%var_7154, dtype="float64") /* ty=Tensor[(832), float64] */;
    %150 = reshape(%149, newshape=[8, 13, 8]) /* ty=Tensor[(8, 13, 8), float64] */;
    %151 = @func_3270(%150) /* ty=(Tensor[(8, 13, 8), float64], Tensor[(352), bool]) */;
    %152 = cast(%var_7154, dtype="float32") /* ty=Tensor[(832), float32] */;
    %153 = maximum(%147, %148) /* ty=Tensor[(15, 16, 4), int32] */;
    %154 = %151.0;
    %155 = asinh(%152) /* ty=Tensor[(832), float32] */;
    (%153, %154, %155)
  };
  %156(%var_7160, %var_7161) /* ty=(Tensor[(15, 16, 4), int32], Tensor[(8, 13, 8), float64], Tensor[(832), float32]) */
}

def @func_3834(%var_3828: Tensor[(12, 2, 11), int8], %var_3829: Tensor[(1, 45), uint16], %var_3830: Tensor[(392, 4), int64], %var_3831: Tensor[(8, 11, 10), bool], %var_3832: Tensor[(728), bool], %var_3833: Tensor[(960), float32]) -> (Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) {
  @func_3826(%var_3828, %var_3829, %var_3830, %var_3831, %var_3832, %var_3833) /* ty=(Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) */
}

def @func_7000(%var_6998: Tensor[(160), float64], %var_6999: float32) -> (Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(880), bool], float32, Tensor[(1176), float32], Tensor[(8, 2, 10), float32], Tensor[(7, 9, 15), float64]) {
  %173 = fn (%var_6979: Tensor[(160), float64], %var_6984: float32) -> (Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(880), bool], float32, Tensor[(1176), float32], Tensor[(8, 2, 10), float32], Tensor[(7, 9, 15), float64]) {
    %157 = cast(%var_6979, dtype="float64") /* ty=Tensor[(160), float64] */;
    %158 = reshape(%157, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
    %159 = cast(%var_6984, dtype="float32") /* ty=float32 */;
    %160 = cast(meta[relay.Constant][15] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %161 = reshape(%159, newshape=[]) /* ty=float32 */;
    %162 = reshape(%160, newshape=[6, 14, 14]) /* ty=Tensor[(6, 14, 14), float32] */;
    %163 = @func_3548(%161, %162) /* ty=(Tensor[(6, 14, 14), float32], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */;
    %164 = cast(%var_6979, dtype="float64") /* ty=Tensor[(160), float64] */;
    %165 = reshape(%164, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
    %166 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
    %167 = %166.0;
    %168 = cast(%167, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
    %169 = @func_643(%158) /* ty=Tensor[(8, 2, 10), float32] */;
    %170 = %163.2;
    %171 = @func_643(%165) /* ty=Tensor[(8, 2, 10), float32] */;
    %172 = acos(%168) /* ty=Tensor[(7, 9, 15), float64] */;
    (%169, %var_6979, %170, %var_6984, meta[relay.Constant][15] /* ty=Tensor[(1176), float32] */, %171, %172)
  };
  %173(%var_6998, %var_6999) /* ty=(Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(880), bool], float32, Tensor[(1176), float32], Tensor[(8, 2, 10), float32], Tensor[(7, 9, 15), float64]) */
}

def @func_4197(%var_4195: Tensor[(10, 5, 9), uint32], %var_4196: Tensor[(10, 5, 9), uint32]) -> (Tensor[(10, 5, 9), bool],) {
  %184 = fn (%var_4173: Tensor[(10, 5, 9), uint32], %var_4186: Tensor[(10, 5, 9), uint32]) -> (Tensor[(10, 5, 9), bool],) {
    %174 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 5, 9), uint32] */, dtype="uint32") /* ty=Tensor[(10, 5, 9), uint32] */;
    %175 = shape_of(%var_4173, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%var_4173, dtype="uint32") /* ty=Tensor[(10, 5, 9), uint32] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %178 = add(%176, %177) /* ty=Tensor[(10, 5, 9), uint32] */;
    %179 = cast(%var_4186, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
    %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(%178, dtype="bool") /* ty=Tensor[(10, 5, 9), bool] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %183 = greater_equal(%181, %182) /* ty=Tensor[(10, 5, 9), bool] */;
    (%183,)
  };
  %184(%var_4195, %var_4196) /* ty=(Tensor[(10, 5, 9), bool],) */
}

def @func_5736(%var_5680: Tensor[(7, 9, 15), float32], %var_5705: Tensor[(96), int32]) -> (Tensor[(7, 9, 15), float64], Tensor[(18), float32], Tensor[(4, 8, 3), int32], Tensor[(96), int32], Tensor[(7, 9, 15), float64]) {
  %185 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %186 = %185.0;
  %187 = cast(%var_5680, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %191 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
  %192 = cast(%var_5705, dtype="int32") /* ty=Tensor[(96), int32] */;
  %193 = reshape(%192, newshape=[4, 8, 3]) /* ty=Tensor[(4, 8, 3), int32] */;
  %194 = cast(%186, dtype="float64") /* ty=Tensor[(7, 9, 15), float64] */;
  %195 = floor_mod(%189, %190) /* ty=Tensor[(7, 9, 15), float64] */;
  %196 = %191.1;
  %197 = @func_2658(%193) /* ty=Tensor[(4, 8, 3), int32] */;
  %198 = cos(%194) /* ty=Tensor[(7, 9, 15), float64] */;
  (%195, %196, %197, %var_5705, %198)
}

def @func_2597(%var_2581: Tensor[(15, 1, 2), float32], %var_2582: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float32],) {
  %199 = cast(%var_2581, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %200 = cast(%var_2582, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %201 = mod(%199, %200) /* ty=Tensor[(15, 2, 2), float32] */;
  (%201,)
}

def @func_5514(%var_5513: Tensor[(160), float64]) -> (Tensor[(15, 16, 4), float64], Tensor[(9, 2, ?), float64], Tensor[(6, 3), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64]) {
  %213 = fn (%var_5508: Tensor[(160), float64]) -> (Tensor[(15, 16, 4), float64], Tensor[(9, 2, ?), float64], Tensor[(6, 3), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64]) {
    %202 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
    %203 = %202.1;
    %204 = cast(%203, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
    %205 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 3), float32] */;
    %206 = reshape(%205, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
    %207 = @func_54(%206) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
    %208 = cast(%var_5508, dtype="float64") /* ty=Tensor[(160), float64] */;
    %209 = reshape(%208, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
    %210 = cosh(%204) /* ty=Tensor[(15, 16, 4), float64] */;
    %211 = %207.2;
    %212 = @func_643(%209) /* ty=Tensor[(8, 2, 10), float32] */;
    (%210, %211, meta[relay.Constant][17] /* ty=Tensor[(6, 3), float32] */, %212, %var_5508)
  };
  %213(%var_5513) /* ty=(Tensor[(15, 16, 4), float64], Tensor[(9, 2, ?), float64], Tensor[(6, 3), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64]) */
}

def @func_6424(%var_6415: Tensor[(3, 40), uint16]) -> (Tensor[(7, 9, 15), float32], Tensor[(8, 2, 10), float32], Tensor[(3, 40), uint16]) {
  %214 = @func_5921() /* ty=(Tensor[(880), bool], Tensor[(7, 9, 15), float32]) */;
  %215 = cast(%var_6415, dtype="uint16") /* ty=Tensor[(3, 40), uint16] */;
  %216 = cast(%var_6415, dtype="uint16") /* ty=Tensor[(3, 40), uint16] */;
  %217 = reshape(%215, newshape=[10, 1, 12]) /* ty=Tensor[(10, 1, 12), uint16] */;
  %218 = reshape(%216, newshape=[10, 1, 12]) /* ty=Tensor[(10, 1, 12), uint16] */;
  %219 = @func_2161(%217, %218) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(480, 2), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(8, 11, 10), bool], Tensor[(1, 880), bool], Tensor[(10, ?, 12), float32]) */;
  %220 = %214.1;
  %221 = %219.2;
  (%220, %221, %var_6415)
}

def @func_3272(%var_3271: Tensor[(8, 13, 8), float64]) -> (Tensor[(8, 13, 8), float64], Tensor[(352), bool]) {
  %232 = fn (%var_3225: Tensor[(8, 13, 8), float64]) -> (Tensor[(8, 13, 8), float64], Tensor[(352), bool]) {
    %222 = cast(%var_3225, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
    %223 = cast(meta[relay.Constant][18] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
    %224 = reshape(%223, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
    %225 = @func_116(%224) /* ty=Tensor[(11, 4, 8), bool] */;
    %226 = cast(%225, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
    %227 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(352), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %228 = cast(meta[relay.Constant][18] /* ty=Tensor[(352), int64] */, dtype="bool") /* ty=Tensor[(352), bool] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?), bool] */;
    %230 = acos(%222) /* ty=Tensor[(8, 13, 8), float64] */;
    %231 = logical_or(%228, %229) /* ty=Tensor[(352), bool] */;
    (%230, %231)
  };
  %232(%var_3271) /* ty=(Tensor[(8, 13, 8), float64], Tensor[(352), bool]) */
}

def @func_1541(%var_1529: Tensor[(7, 14, 16), int64], %var_1530: Tensor[(7, 14, 16), int64]) -> (Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) {
  %233 = cast(%var_1530, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %234 = shape_of(%var_1529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_1529, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %237 = cast(meta[relay.Constant][19] /* ty=Tensor[(440, 2), bool] */, dtype="bool") /* ty=Tensor[(440, 2), bool] */;
  %238 = reshape(%237, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %239 = add(%235, %236) /* ty=Tensor[(7, 14, 16), int64] */;
  %240 = @func_920(%238) /* ty=Tensor[(8, 11, 10), bool] */;
  (%239, %240, meta[relay.Constant][19] /* ty=Tensor[(440, 2), bool] */)
}

def @func_5340() -> Tensor[(7, 9, 15), float32] {
  %241 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 9, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 9, 15), float32] */;
  asin(%241) /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_4949(%var_4872: Tensor[(4, 15, 10), float32]) -> (Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  %242 = cast(meta[relay.Constant][21] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %243 = reshape(%242, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
  %244 = @func_1662(%243) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) */;
  %245 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %246 = cast(meta[relay.Constant][23] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %247 = reshape(%246, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
  %248 = @func_54(%247) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
  %249 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %250 = exp(%249) /* ty=Tensor[(4, 15, 10), float32] */;
  %251 = cast(%var_4872, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="int64") /* ty=Tensor[(4, 15, 10), int64] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %255 = maximum(%253, %254) /* ty=Tensor[(4, 15, 10), int64] */;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %257 = atan(%256) /* ty=Tensor[(4, 15, 10), float64] */;
  %258 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 15, 10), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="float32") /* ty=Tensor[(4, 15, 10), float32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %262 = cast(meta[relay.Constant][24] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %263 = cast(meta[relay.Constant][24] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %264 = cast(meta[relay.Constant][25] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %265 = cast(meta[relay.Constant][26] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %266 = reshape(%262, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %267 = reshape(%263, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %268 = reshape(%264, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
  %269 = reshape(%265, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
  %270 = @func_2914(%266, %267, %268, %269) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
  %271 = cast(meta[relay.Constant][27] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
  %272 = reshape(%271, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %273 = %244.0;
  %274 = asinh(%245) /* ty=Tensor[(4, 15, 10), float32] */;
  %275 = %248.0;
  %276 = floor_mod(%260, %261) /* ty=Tensor[(4, 15, 10), float32] */;
  %277 = %270.4;
  %278 = @func_920(%272) /* ty=Tensor[(8, 11, 10), bool] */;
  (%273, meta[relay.Constant][21] /* ty=Tensor[(1320), float64] */, %274, %275, meta[relay.Constant][23] /* ty=Tensor[(18), float32] */, %276, %277, meta[relay.Constant][24] /* ty=Tensor[(728), bool] */, meta[relay.Constant][25] /* ty=Tensor[(960), float32] */, meta[relay.Constant][26] /* ty=Tensor[(352), int64] */, %278, meta[relay.Constant][27] /* ty=Tensor[(880), bool] */)
}

def @func_5923() -> (Tensor[(880), bool], Tensor[(7, 9, 15), float32]) {
  @func_5921() /* ty=(Tensor[(880), bool], Tensor[(7, 9, 15), float32]) */
}

def @func_7010() -> (Tensor[(7, 9, 15), float32],) {
  @func_7008() /* ty=(Tensor[(7, 9, 15), float32],) */
}

def @func_2919(%var_2915: Tensor[(14, 13, 4), bool], %var_2916: Tensor[(14, 13, 4), bool], %var_2917: Tensor[(120, 8), float32], %var_2918: Tensor[(2, 176), int64]) -> (Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) {
  %300 = fn (%var_2880: Tensor[(14, 13, 4), bool], %var_2881: Tensor[(14, 13, 4), bool], %var_2890: Tensor[(120, 8), float32], %var_2903: Tensor[(2, 176), int64]) -> (Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) {
    %279 = cast(%var_2890, dtype="float32") /* ty=Tensor[(120, 8), float32] */;
    %280 = reshape(%279, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
    %281 = @func_171(%280) /* ty=(Tensor[(15, 16, 4), float32],) */;
    %282 = cast(%var_2881, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
    %283 = shape_of(%var_2880, dtype="int32") /* ty=Tensor[(3), int32] */;
    %284 = cast(%var_2880, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
    %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %286 = logical_or(%284, %285) /* ty=Tensor[(14, 13, 4), bool] */;
    %287 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 13, 4), bool] */, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
    %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(%286, dtype="bool") /* ty=Tensor[(14, 13, 4), bool] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %291 = cast(%var_2881, dtype="float32") /* ty=Tensor[(14, 13, 4), float32] */;
    %292 = cast(%var_2903, dtype="int64") /* ty=Tensor[(2, 176), int64] */;
    %293 = reshape(%292, newshape=[11, 4, 8]) /* ty=Tensor[(11, 4, 8), int64] */;
    %294 = cast(%var_2890, dtype="float32") /* ty=Tensor[(120, 8), float32] */;
    %295 = %281.0;
    %296 = less(%289, %290) /* ty=Tensor[(14, 13, 4), bool] */;
    %297 = sin(%291) /* ty=Tensor[(14, 13, 4), float32] */;
    %298 = @func_116(%293) /* ty=Tensor[(11, 4, 8), bool] */;
    %299 = sigmoid(%294) /* ty=Tensor[(120, 8), float32] */;
    (%295, %296, %297, %298, %var_2903, %299)
  };
  %300(%var_2915, %var_2916, %var_2917, %var_2918) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */
}

def @func_3548(%var_3537: float32, %var_3538: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), float32], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  %301 = cast(%var_3537, dtype="float32") /* ty=float32 */;
  %302 = cast(%var_3538, dtype="float32") /* ty=Tensor[(6, 14, 14), float32] */;
  %303 = cast(meta[relay.Constant][29] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
  %304 = reshape(%303, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
  %305 = power(%301, %302) /* ty=Tensor[(6, 14, 14), float32] */;
  %306 = @func_920(%304) /* ty=Tensor[(8, 11, 10), bool] */;
  (%305, %306, meta[relay.Constant][29] /* ty=Tensor[(880), bool] */)
}

def @func_6880() -> Tensor[(15, 16, 4), float32] {
  @func_6878() /* ty=Tensor[(15, 16, 4), float32] */
}

def @func_3552(%var_3550: float32, %var_3551: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), float32], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  @func_3548(%var_3550, %var_3551) /* ty=(Tensor[(6, 14, 14), float32], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */
}

def @func_56(%var_55: Tensor[(9, 2, 1), float32]) -> (Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) {
  %328 = fn (%var_0: Tensor[(9, 2, 1), float32]) -> (Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) {
    %307 = cast(%var_0, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
    %308 = sin(%307) /* ty=Tensor[(9, 2, 1), float32] */;
    %309 = cast(%var_0, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
    %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
    %311 = cast(%308, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %313 = greater_equal(%311, %312) /* ty=Tensor[(9, 2, ?), bool] */;
    %314 = cast(%308, dtype="bool") /* ty=Tensor[(9, 2, 1), bool] */;
    %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(%313, dtype="bool") /* ty=Tensor[(9, 2, ?), bool] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %318 = cast(%var_0, dtype="float32") /* ty=Tensor[(9, 2, 1), float32] */;
    %319 = cast(%313, dtype="int64") /* ty=Tensor[(9, 2, ?), int64] */;
    %320 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%308, dtype="int64") /* ty=Tensor[(9, 2, 1), int64] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %323 = logical_xor(%321, %322) /* ty=Tensor[(9, 2, ?), int64] */;
    %324 = cast(%323, dtype="float64") /* ty=Tensor[(9, 2, ?), float64] */;
    %325 = less(%316, %317) /* ty=Tensor[(9, 2, ?), bool] */;
    %326 = atanh(%318) /* ty=Tensor[(9, 2, 1), float32] */;
    %327 = cos(%324) /* ty=Tensor[(9, 2, ?), float64] */;
    (%325, %326, %327)
  };
  %328(%var_55) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */
}

def @func_2164(%var_2162: Tensor[(10, 1, 12), uint16], %var_2163: Tensor[(10, 1, 12), uint16]) -> (Tensor[(15, 16, 4), float32], Tensor[(480, 2), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(8, 11, 10), bool], Tensor[(1, 880), bool], Tensor[(10, ?, 12), float32]) {
  %358 = fn (%var_2096: Tensor[(10, 1, 12), uint16], %var_2097: Tensor[(10, 1, 12), uint16]) -> (Tensor[(15, 16, 4), float32], Tensor[(480, 2), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(8, 11, 10), bool], Tensor[(1, 880), bool], Tensor[(10, ?, 12), float32]) {
    %329 = cast(meta[relay.Constant][30] /* ty=Tensor[(480, 2), float32] */, dtype="float32") /* ty=Tensor[(480, 2), float32] */;
    %330 = reshape(%329, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
    %331 = @func_171(%330) /* ty=(Tensor[(15, 16, 4), float32],) */;
    %332 = cast(meta[relay.Constant][31] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %333 = reshape(%332, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
    %334 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 880), bool] */, dtype="bool") /* ty=Tensor[(1, 880), bool] */;
    %335 = reshape(%334, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
    %336 = cast(%var_2097, dtype="uint16") /* ty=Tensor[(10, 1, 12), uint16] */;
    %337 = shape_of(%var_2096, dtype="int32") /* ty=Tensor[(3), int32] */;
    %338 = cast(%var_2096, dtype="uint16") /* ty=Tensor[(10, 1, 12), uint16] */;
    %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %340 = left_shift(%338, %339) /* ty=Tensor[(10, ?, 12), uint16] */;
    %341 = cast(%340, dtype="float32") /* ty=Tensor[(10, ?, 12), float32] */;
    %342 = log10(%341) /* ty=Tensor[(10, ?, 12), float32] */;
    %343 = cast(%340, dtype="int32") /* ty=Tensor[(10, ?, 12), int32] */;
    %344 = shape_of(%var_2096, dtype="int32") /* ty=Tensor[(3), int32] */;
    %345 = cast(%var_2096, dtype="int32") /* ty=Tensor[(10, 1, 12), int32] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %347 = bitwise_xor(%345, %346) /* ty=Tensor[(10, ?, 12), int32] */;
    %348 = cast(%347, dtype="float64") /* ty=Tensor[(10, ?, 12), float64] */;
    %349 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
    %350 = cast(%342, dtype="float64") /* ty=Tensor[(10, ?, 12), float64] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %352 = minimum(%350, %351) /* ty=Tensor[(10, ?, 12), float64] */;
    %353 = cast(%352, dtype="float32") /* ty=Tensor[(10, ?, 12), float32] */;
    %354 = %331.0;
    %355 = @func_643(%333) /* ty=Tensor[(8, 2, 10), float32] */;
    %356 = @func_920(%335) /* ty=Tensor[(8, 11, 10), bool] */;
    %357 = atan(%353) /* ty=Tensor[(10, ?, 12), float32] */;
    (%354, meta[relay.Constant][30] /* ty=Tensor[(480, 2), float32] */, %355, meta[relay.Constant][31] /* ty=Tensor[(160), float64] */, %356, meta[relay.Constant][32] /* ty=Tensor[(1, 880), bool] */, %357)
  };
  %358(%var_2162, %var_2163) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(480, 2), float32], Tensor[(8, 2, 10), float32], Tensor[(160), float64], Tensor[(8, 11, 10), bool], Tensor[(1, 880), bool], Tensor[(10, ?, 12), float32]) */
}

def @func_2658(%var_2651: Tensor[(4, 8, 3), int32]) -> Tensor[(4, 8, 3), int32] {
  %359 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 8, 3), int32] */, dtype="int32") /* ty=Tensor[(4, 8, 3), int32] */;
  %360 = shape_of(%var_2651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_2651, dtype="int32") /* ty=Tensor[(4, 8, 3), int32] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%361, %362) /* ty=Tensor[(4, 8, 3), int32] */
}

def @func_643(%var_623: Tensor[(8, 2, 10), float64]) -> Tensor[(8, 2, 10), float32] {
  %363 = cast(%var_623, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %364 = asin(%363) /* ty=Tensor[(8, 2, 10), float64] */;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(8, 2, 10), float32] */;
  cosh(%365) /* ty=Tensor[(8, 2, 10), float32] */
}

def @func_6306() -> (Tensor[(15, 16, 4), int16], Tensor[(15, 16, 4), float64]) {
  @func_6304() /* ty=(Tensor[(15, 16, 4), int16], Tensor[(15, 16, 4), float64]) */
}

def @func_3680(%var_3678: Tensor[(1, 8, 15), float64], %var_3679: Tensor[(168, 2), bool]) -> (Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) {
  %384 = fn (%var_3643: Tensor[(1, 8, 15), float64], %var_3673: Tensor[(168, 2), bool]) -> (Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) {
    %366 = cast(%var_3643, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
    %367 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 8, 15), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
    %368 = power(%366, %367) /* ty=Tensor[(4, 8, 15), float64] */;
    %369 = cast(%368, dtype="uint8") /* ty=Tensor[(4, 8, 15), uint8] */;
    %370 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 8, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %371 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 8, 15), float64] */, dtype="uint8") /* ty=Tensor[(4, 8, 15), uint8] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %373 = cast(meta[relay.Constant][35] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %374 = reshape(%373, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
    %375 = @func_1763(%374) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
    %376 = cast(%var_3673, dtype="bool") /* ty=Tensor[(168, 2), bool] */;
    %377 = cast(meta[relay.Constant][36] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %378 = reshape(%376, newshape=[3, 7, 16]) /* ty=Tensor[(3, 7, 16), bool] */;
    %379 = reshape(%377, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %380 = @func_1301(%378, %379) /* ty=(Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) */;
    %381 = subtract(%371, %372) /* ty=Tensor[(4, 8, 15), uint8] */;
    %382 = %375.1;
    %383 = %380.2;
    (%381, %382, meta[relay.Constant][35] /* ty=Tensor[(1568), int64] */, %383, %var_3673, meta[relay.Constant][36] /* ty=Tensor[(960), float32] */)
  };
  %384(%var_3678, %var_3679) /* ty=(Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) */
}

def @func_6304() -> (Tensor[(15, 16, 4), int16], Tensor[(15, 16, 4), float64]) {
  %385 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
  %386 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 16, 4), float32] */, dtype="int16") /* ty=Tensor[(15, 16, 4), int16] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="int16") /* ty=Tensor[(15, 16, 4), int16] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %390 = cast(%385, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %391 = reshape(%390, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %392 = logical_xor(%388, %389) /* ty=Tensor[(15, 16, 4), int16] */;
  %393 = @func_5890(%391) /* ty=Tensor[(15, 16, 4), float64] */;
  (%392, %393)
}

def @func_2601(%var_2599: Tensor[(15, 1, 2), float32], %var_2600: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float32],) {
  @func_2597(%var_2599, %var_2600) /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_6366() -> (Tensor[(7, 9, 15), float32],) {
  %395 = fn () -> (Tensor[(7, 9, 15), float32],) {
    %394 = @func_6342() /* ty=Tensor[(7, 9, 15), float32] */;
    (%394,)
  };
  %395() /* ty=(Tensor[(7, 9, 15), float32],) */
}

def @func_6090() -> (Tensor[(880), bool], Tensor[(4, 392), uint64]) {
  %409 = fn () -> (Tensor[(880), bool], Tensor[(4, 392), uint64]) {
    %396 = @func_5921() /* ty=(Tensor[(880), bool], Tensor[(7, 9, 15), float32]) */;
    %397 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 392), int64] */, dtype="float32") /* ty=Tensor[(4, 392), float32] */;
    %398 = erf(%397) /* ty=Tensor[(4, 392), float32] */;
    %399 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 392), int64] */, dtype="int64") /* ty=Tensor[(4, 392), int64] */;
    %400 = reshape(%399, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
    %401 = @func_1763(%400) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
    %402 = %401.1;
    %403 = cast(%402, dtype="uint64") /* ty=Tensor[(7, 14, 16), uint64] */;
    %404 = shape_of(%398, dtype="int32") /* ty=Tensor[(2), int32] */;
    %405 = cast(%398, dtype="uint64") /* ty=Tensor[(4, 392), uint64] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %407 = %396.0;
    %408 = add(%405, %406) /* ty=Tensor[(4, 392), uint64] */;
    (%407, %408)
  };
  %409() /* ty=(Tensor[(880), bool], Tensor[(4, 392), uint64]) */
}

def @func_7057() -> (Tensor[(7, 12, 10), float64], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) {
  @func_7055() /* ty=(Tensor[(7, 12, 10), float64], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */
}

def @func_7008() -> (Tensor[(7, 9, 15), float32],) {
  %410 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
  (%410,)
}

def @func_7124() -> Tensor[(15, 16, 4), float32] {
  @func_5847() /* ty=Tensor[(15, 16, 4), float32] */
}

def @func_646(%var_644: Tensor[(8, 2, 10), float64]) -> Tensor[(8, 2, 10), float32] {
  @func_643(%var_644) /* ty=Tensor[(8, 2, 10), float32] */
}

def @func_5740(%var_5738: Tensor[(7, 9, 15), float32], %var_5739: Tensor[(96), int32]) -> (Tensor[(7, 9, 15), float64], Tensor[(18), float32], Tensor[(4, 8, 3), int32], Tensor[(96), int32], Tensor[(7, 9, 15), float64]) {
  @func_5736(%var_5738, %var_5739) /* ty=(Tensor[(7, 9, 15), float64], Tensor[(18), float32], Tensor[(4, 8, 3), int32], Tensor[(96), int32], Tensor[(7, 9, 15), float64]) */
}

def @func_3131(%var_3130: Tensor[(5, 9, 1), uint16]) -> (Tensor[(5, 9, ?), bool],) {
  %416 = fn (%var_3119: Tensor[(5, 9, 1), uint16]) -> (Tensor[(5, 9, ?), bool],) {
    %411 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 9, 1), uint16] */, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
    %412 = shape_of(%var_3119, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%var_3119, dtype="bool") /* ty=Tensor[(5, 9, 1), bool] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %415 = greater_equal(%413, %414) /* ty=Tensor[(5, 9, ?), bool] */;
    (%415,)
  };
  %416(%var_3130) /* ty=(Tensor[(5, 9, ?), bool],) */
}

def @func_1766(%var_1764: Tensor[(2, 784), int64]) -> (Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) {
  @func_1763(%var_1764) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */
}

def @func_6244() -> (Tensor[(8, 4, 8), bool],) {
  %418 = fn () -> (Tensor[(8, 4, 8), bool],) {
    %417 = @func_6234() /* ty=Tensor[(8, 4, 8), bool] */;
    (%417,)
  };
  %418() /* ty=(Tensor[(8, 4, 8), bool],) */
}

def @func_4952(%var_4950: Tensor[(4, 15, 10), float32]) -> (Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  @func_4949(%var_4950) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */
}

def @func_7055() -> (Tensor[(7, 12, 10), float64], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) {
  %419 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %420 = asin(%419) /* ty=Tensor[(7, 12, 10), float64] */;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %422 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 12, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 12, 10), float64] */, dtype="float64") /* ty=Tensor[(7, 12, 10), float64] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %425 = cast(meta[relay.Constant][41] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %426 = reshape(%425, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
  %427 = @func_171(%426) /* ty=(Tensor[(15, 16, 4), float32],) */;
  %428 = mod(%423, %424) /* ty=Tensor[(7, 12, 10), float64] */;
  %429 = %427.0;
  (%428, %429, meta[relay.Constant][41] /* ty=Tensor[(960), float32] */)
}

def @func_7396(%var_7394: Tensor[(6, 5, 12), bool], %var_7395: Tensor[(6, 5, 12), bool]) -> (Tensor[(6, 5, 12), bool], Tensor[(8, 4, 8), bool], Tensor[(16, 9, 9), int16], Tensor[(1296), int16], Tensor[(7, 9, 15), float32]) {
  %443 = fn (%var_7354: Tensor[(6, 5, 12), bool], %var_7355: Tensor[(6, 5, 12), bool]) -> (Tensor[(6, 5, 12), bool], Tensor[(8, 4, 8), bool], Tensor[(16, 9, 9), int16], Tensor[(1296), int16], Tensor[(7, 9, 15), float32]) {
    %430 = cast(%var_7355, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
    %431 = shape_of(%var_7354, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%var_7354, dtype="bool") /* ty=Tensor[(6, 5, 12), bool] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %434 = cast(meta[relay.Constant][42] /* ty=Tensor[(1296), int16] */, dtype="int16") /* ty=Tensor[(1296), int16] */;
    %435 = cast(meta[relay.Constant][42] /* ty=Tensor[(1296), int16] */, dtype="int16") /* ty=Tensor[(1296), int16] */;
    %436 = reshape(%434, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int16] */;
    %437 = reshape(%435, newshape=[16, 9, 9]) /* ty=Tensor[(16, 9, 9), int16] */;
    %438 = @func_7073() /* ty=(Tensor[(7, 9, 15), float32],) */;
    %439 = logical_or(%432, %433) /* ty=Tensor[(6, 5, 12), bool] */;
    %440 = @func_6234() /* ty=Tensor[(8, 4, 8), bool] */;
    %441 = @func_5638(%436, %437) /* ty=Tensor[(16, 9, 9), int16] */;
    %442 = %438.0;
    (%439, %440, %441, meta[relay.Constant][42] /* ty=Tensor[(1296), int16] */, %442)
  };
  %443(%var_7394, %var_7395) /* ty=(Tensor[(6, 5, 12), bool], Tensor[(8, 4, 8), bool], Tensor[(16, 9, 9), int16], Tensor[(1296), int16], Tensor[(7, 9, 15), float32]) */
}

def @func_5550() -> (Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) {
  %449 = fn () -> (Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) {
    %444 = cast(meta[relay.Constant][43] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %445 = reshape(%444, newshape=[4, 15, 10]) /* ty=Tensor[(4, 15, 10), float32] */;
    %446 = @func_4949(%445) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */;
    %447 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
    %448 = %446.11;
    (%447, %448, meta[relay.Constant][43] /* ty=Tensor[(600), float32] */)
  };
  %449() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) */
}

def @func_7273(%var_7271: Tensor[(600), float32], %var_7272: Tensor[(336), bool]) -> (Tensor[(18), float32], Tensor[(15, 16, 4), float64], Tensor[(14, 13, 4), float32], Tensor[(728), bool], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(600), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), float64], Tensor[(6, 20), float64], Tensor[(336), bool]) {
  %482 = fn (%var_7249: Tensor[(600), float32], %var_7258: Tensor[(336), bool]) -> (Tensor[(18), float32], Tensor[(15, 16, 4), float64], Tensor[(14, 13, 4), float32], Tensor[(728), bool], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(600), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), float64], Tensor[(6, 20), float64], Tensor[(336), bool]) {
    %450 = @func_5577() /* ty=(Tensor[(18), float32],) */;
    %451 = @func_6304() /* ty=(Tensor[(15, 16, 4), int16], Tensor[(15, 16, 4), float64]) */;
    %452 = %451.1;
    %453 = cast(%452, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
    %454 = cast(meta[relay.Constant][44] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
    %455 = cast(meta[relay.Constant][44] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
    %456 = asinh(%453) /* ty=Tensor[(15, 16, 4), float64] */;
    %457 = cast(%456, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
    %458 = cast(meta[relay.Constant][45] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
    %459 = reshape(%454, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
    %460 = reshape(%455, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
    %461 = reshape(%457, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
    %462 = reshape(%458, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
    %463 = @func_2914(%459, %460, %461, %462) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
    %464 = cast(%var_7249, dtype="float32") /* ty=Tensor[(600), float32] */;
    %465 = reshape(%464, newshape=[4, 15, 10]) /* ty=Tensor[(4, 15, 10), float32] */;
    %466 = @func_4949(%465) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(1320), float64], Tensor[(4, 15, 10), float32], Tensor[(9, 2, ?), bool], Tensor[(18), float32], Tensor[(4, 15, 10), float32], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */;
    %467 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
    %468 = cast(%452, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
    %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%467, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %472 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 20), float64] */, dtype="float64") /* ty=Tensor[(6, 20), float64] */;
    %473 = cast(%var_7258, dtype="bool") /* ty=Tensor[(336), bool] */;
    %474 = reshape(%472, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
    %475 = reshape(%473, newshape=[168, 2]) /* ty=Tensor[(168, 2), bool] */;
    %476 = @func_3677(%474, %475) /* ty=(Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) */;
    %477 = %450.0;
    %478 = %463.2;
    %479 = %466.10;
    %480 = equal(%470, %471) /* ty=Tensor[(15, 16, 4), bool] */;
    %481 = %476.3;
    (%477, %456, %478, meta[relay.Constant][44] /* ty=Tensor[(728), bool] */, meta[relay.Constant][45] /* ty=Tensor[(352), int64] */, %479, %var_7249, %480, %481, meta[relay.Constant][46] /* ty=Tensor[(6, 20), float64] */, %var_7258)
  };
  %482(%var_7271, %var_7272) /* ty=(Tensor[(18), float32], Tensor[(15, 16, 4), float64], Tensor[(14, 13, 4), float32], Tensor[(728), bool], Tensor[(352), int64], Tensor[(8, 11, 10), bool], Tensor[(600), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), float64], Tensor[(6, 20), float64], Tensor[(336), bool]) */
}

def @func_6878() -> Tensor[(15, 16, 4), float32] {
  %483 = @func_6394() /* ty=(Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) */;
  %483.0
}

def @func_3725(%var_3696: Tensor[(10, 13, 1), float64]) -> (Tensor[(10, 13, ?), float32], Tensor[(10, 13, 1), float32]) {
  %484 = cast(%var_3696, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %485 = sinh(%484) /* ty=Tensor[(10, 13, 1), float64] */;
  %486 = cast(%485, dtype="uint8") /* ty=Tensor[(10, 13, 1), uint8] */;
  %487 = shape_of(%var_3696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_3696, dtype="uint8") /* ty=Tensor[(10, 13, 1), uint8] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %490 = maximum(%488, %489) /* ty=Tensor[(10, 13, ?), uint8] */;
  %491 = cast(%485, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="float32") /* ty=Tensor[(10, 13, ?), float32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %495 = cast(%485, dtype="float32") /* ty=Tensor[(10, 13, 1), float32] */;
  %496 = power(%493, %494) /* ty=Tensor[(10, 13, ?), float32] */;
  %497 = acos(%495) /* ty=Tensor[(10, 13, 1), float32] */;
  (%496, %497)
}

def @func_118(%var_117: Tensor[(11, 4, 8), int64]) -> Tensor[(11, 4, 8), bool] {
  %500 = fn (%var_106: Tensor[(11, 4, 8), int64]) -> Tensor[(11, 4, 8), bool] {
    %498 = cast(-4 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %499 = cast(%var_106, dtype="bool") /* ty=Tensor[(11, 4, 8), bool] */;
    greater(%498, %499) /* ty=Tensor[(11, 4, 8), bool] */
  };
  %500(%var_117) /* ty=Tensor[(11, 4, 8), bool] */
}

def @func_7520(%var_7507: Tensor[(392, 4), int64]) -> (Tensor[(15, 16, 4), float32], Tensor[(392, 4), int64], Tensor[(2, 784), float32]) {
  %501 = cast(%var_7507, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
  %502 = reshape(%501, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
  %503 = @func_1763(%502) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
  %504 = %503.2;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(2, 784), float32] */;
  %506 = @func_6878() /* ty=Tensor[(15, 16, 4), float32] */;
  %507 = log2(%505) /* ty=Tensor[(2, 784), float32] */;
  (%506, %var_7507, %507)
}

def @func_6478() -> (Tensor[(9, 16, 7), int8], Tensor[(3, 40), uint16], Tensor[(120), uint16], Tensor[(15, 16, 4), float32], Tensor[(240, 4), float32]) {
  %518 = fn () -> (Tensor[(9, 16, 7), int8], Tensor[(3, 40), uint16], Tensor[(120), uint16], Tensor[(15, 16, 4), float32], Tensor[(240, 4), float32]) {
    %508 = @func_6394() /* ty=(Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) */;
    %509 = cast(meta[relay.Constant][47] /* ty=Tensor[(120), uint16] */, dtype="uint16") /* ty=Tensor[(120), uint16] */;
    %510 = reshape(%509, newshape=[3, 40]) /* ty=Tensor[(3, 40), uint16] */;
    %511 = @func_6424(%510) /* ty=(Tensor[(7, 9, 15), float32], Tensor[(8, 2, 10), float32], Tensor[(3, 40), uint16]) */;
    %512 = cast(meta[relay.Constant][48] /* ty=Tensor[(240, 4), float32] */, dtype="float32") /* ty=Tensor[(240, 4), float32] */;
    %513 = reshape(%512, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
    %514 = @func_171(%513) /* ty=(Tensor[(15, 16, 4), float32],) */;
    %515 = %508.3;
    %516 = %511.2;
    %517 = %514.0;
    (%515, %516, meta[relay.Constant][47] /* ty=Tensor[(120), uint16] */, %517, meta[relay.Constant][48] /* ty=Tensor[(240, 4), float32] */)
  };
  %518() /* ty=(Tensor[(9, 16, 7), int8], Tensor[(3, 40), uint16], Tensor[(120), uint16], Tensor[(15, 16, 4), float32], Tensor[(240, 4), float32]) */
}

def @func_6344() -> Tensor[(7, 9, 15), float32] {
  @func_6342() /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_5890(%var_5867: Tensor[(15, 16, 4), float32]) -> Tensor[(15, 16, 4), float64] {
  %519 = @func_5847() /* ty=Tensor[(15, 16, 4), float32] */;
  %520 = cast(%var_5867, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %524 = floor_divide(%522, %523) /* ty=Tensor[(15, 16, 4), float32] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
  %526 = atanh(%525) /* ty=Tensor[(15, 16, 4), float32] */;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
  asin(%527) /* ty=Tensor[(15, 16, 4), float64] */
}

def @func_7194() -> (Tensor[(7, 9, 15), float32],) {
  %530 = fn () -> (Tensor[(7, 9, 15), float32],) {
    %528 = @func_7008() /* ty=(Tensor[(7, 9, 15), float32],) */;
    %529 = %528.0;
    (%529,)
  };
  %530() /* ty=(Tensor[(7, 9, 15), float32],) */
}

def @func_6654(%var_6652: Tensor[(585), float32]) -> (Tensor[(120), uint16], Tensor[(13, 3, 15), uint32], Tensor[(5, 5, 8), uint16], Tensor[(200), uint16]) {
  @func_6651(%var_6652) /* ty=(Tensor[(120), uint16], Tensor[(13, 3, 15), uint32], Tensor[(5, 5, 8), uint16], Tensor[(200), uint16]) */
}

def @func_173(%var_172: Tensor[(15, 16, 4), float32]) -> (Tensor[(15, 16, 4), float32],) {
  %533 = fn (%var_165: Tensor[(15, 16, 4), float32]) -> (Tensor[(15, 16, 4), float32],) {
    %531 = cast(%var_165, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
    %532 = sin(%531) /* ty=Tensor[(15, 16, 4), float32] */;
    (%532,)
  };
  %533(%var_172) /* ty=(Tensor[(15, 16, 4), float32],) */
}

def @func_2709(%var_2708: Tensor[(5, 5, 8), uint16]) -> (Tensor[(5, 5, 8), uint16],) {
  %537 = fn (%var_2703: Tensor[(5, 5, 8), uint16]) -> (Tensor[(5, 5, 8), uint16],) {
    %534 = cast(meta[relay.Constant][49] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %535 = cast(%var_2703, dtype="uint16") /* ty=Tensor[(5, 5, 8), uint16] */;
    %536 = right_shift(%534, %535) /* ty=Tensor[(5, 5, 8), uint16] */;
    (%536,)
  };
  %537(%var_2708) /* ty=(Tensor[(5, 5, 8), uint16],) */
}

def @func_6427(%var_6425: Tensor[(3, 40), uint16]) -> (Tensor[(7, 9, 15), float32], Tensor[(8, 2, 10), float32], Tensor[(3, 40), uint16]) {
  @func_6424(%var_6425) /* ty=(Tensor[(7, 9, 15), float32], Tensor[(8, 2, 10), float32], Tensor[(3, 40), uint16]) */
}

def @func_5445() -> (Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) {
  @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */
}

def @func_7492(%var_7490: Tensor[(15, 16, 4), float32], %var_7491: Tensor[(880), bool]) -> (Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), uint64], Tensor[(8, 4, 8), bool], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
  %561 = fn (%var_7469: Tensor[(15, 16, 4), float32], %var_7481: Tensor[(880), bool]) -> (Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), uint64], Tensor[(8, 4, 8), bool], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) {
    %538 = @func_7193() /* ty=(Tensor[(7, 9, 15), float32],) */;
    %539 = @func_6394() /* ty=(Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) */;
    %540 = %539.0;
    %541 = cast(%540, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
    %542 = log(%541) /* ty=Tensor[(15, 16, 4), float64] */;
    %543 = @func_7055() /* ty=(Tensor[(7, 12, 10), float64], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
    %544 = %543.2;
    %545 = cast(%544, dtype="bool") /* ty=Tensor[(960), bool] */;
    %546 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%542, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %549 = cast(%var_7469, dtype="uint64") /* ty=Tensor[(15, 16, 4), uint64] */;
    %550 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%540, dtype="uint64") /* ty=Tensor[(15, 16, 4), uint64] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %553 = @func_6243() /* ty=(Tensor[(8, 4, 8), bool],) */;
    %554 = cast(%var_7481, dtype="bool") /* ty=Tensor[(880), bool] */;
    %555 = reshape(%554, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
    %556 = %538.0;
    %557 = less_equal(%547, %548) /* ty=Tensor[(15, 16, 4), bool] */;
    %558 = bitwise_and(%551, %552) /* ty=Tensor[(15, 16, 4), uint64] */;
    %559 = %553.0;
    %560 = @func_920(%555) /* ty=Tensor[(8, 11, 10), bool] */;
    (%556, %557, %558, %559, %560, %var_7481)
  };
  %561(%var_7490, %var_7491) /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), bool], Tensor[(15, 16, 4), uint64], Tensor[(8, 4, 8), bool], Tensor[(8, 11, 10), bool], Tensor[(880), bool]) */
}

def @func_6395() -> (Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) {
  %576 = fn () -> (Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) {
    %562 = cast(meta[relay.Constant][50] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %563 = reshape(%562, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
    %564 = @func_171(%563) /* ty=(Tensor[(15, 16, 4), float32],) */;
    %565 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
    %566 = atan(%565) /* ty=Tensor[(9, 16, 7), float32] */;
    %567 = cast(%566, dtype="float64") /* ty=Tensor[(9, 16, 7), float64] */;
    %568 = asinh(%567) /* ty=Tensor[(9, 16, 7), float64] */;
    %569 = cast(%568, dtype="int8") /* ty=Tensor[(9, 16, 7), int8] */;
    %570 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
    %571 = cast(%566, dtype="int8") /* ty=Tensor[(9, 16, 7), int8] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %573 = %564.0;
    %574 = @func_6234() /* ty=Tensor[(8, 4, 8), bool] */;
    %575 = add(%571, %572) /* ty=Tensor[(9, 16, 7), int8] */;
    (%573, meta[relay.Constant][50] /* ty=Tensor[(960), float32] */, %574, %575)
  };
  %576() /* ty=(Tensor[(15, 16, 4), float32], Tensor[(960), float32], Tensor[(8, 4, 8), bool], Tensor[(9, 16, 7), int8]) */
}

def @func_5413() -> (Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) {
  %582 = fn () -> (Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) {
    %577 = cast(meta[relay.Constant][52] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %578 = reshape(%577, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
    %579 = @func_171(%578) /* ty=(Tensor[(15, 16, 4), float32],) */;
    %580 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
    %581 = %579.0;
    (%580, %581, meta[relay.Constant][52] /* ty=Tensor[(960), float32] */)
  };
  %582() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */
}

def @func_923(%var_921: Tensor[(8, 11, 10), bool]) -> Tensor[(8, 11, 10), bool] {
  @func_920(%var_921) /* ty=Tensor[(8, 11, 10), bool] */
}

def @func_7022() -> Tensor[(7, 9, 15), float32] {
  %584 = fn () -> Tensor[(7, 9, 15), float32] {
    %583 = @func_5921() /* ty=(Tensor[(880), bool], Tensor[(7, 9, 15), float32]) */;
    %583.1
  };
  %584() /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_5847() -> Tensor[(15, 16, 4), float32] {
  %585 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
  %585.1
}

def @func_920(%var_910: Tensor[(8, 11, 10), bool]) -> Tensor[(8, 11, 10), bool] {
  %586 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %587 = cast(%var_910, dtype="bool") /* ty=Tensor[(8, 11, 10), bool] */;
  logical_or(%586, %587) /* ty=Tensor[(8, 11, 10), bool] */
}

def @func_5921() -> (Tensor[(880), bool], Tensor[(7, 9, 15), float32]) {
  %588 = @func_5549() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) */;
  %589 = %588.1;
  %590 = @func_5800() /* ty=Tensor[(7, 9, 15), float32] */;
  (%589, %590)
}

def @func_4352(%var_4344: Tensor[(2, 12, 15), float64], %var_4345: Tensor[(120, 1), float64], %var_4346: Tensor[(336), bool], %var_4347: Tensor[(30), float32], %var_4348: Tensor[(2, 12, 15), float32], %var_4349: Tensor[(45), uint16], %var_4350: Tensor[(1568), int64], %var_4351: Tensor[(18), float32]) -> (Tensor[(15, 16, 4), float64], Tensor[(120, 1), float64], Tensor[(336), bool], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(352), int64], Tensor[(264), int8], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(9, 2, 1), float32], Tensor[(18), float32], Tensor[(2, 12, 15), uint64], Tensor[(2, 12, 15), float32]) {
  %647 = fn (%var_4259: Tensor[(2, 12, 15), float64], %var_4264: Tensor[(120, 1), float64], %var_4265: Tensor[(336), bool], %var_4281: Tensor[(30), float32], %var_4296: Tensor[(2, 12, 15), float32], %var_4309: Tensor[(45), uint16], %var_4310: Tensor[(1568), int64], %var_4330: Tensor[(18), float32]) -> (Tensor[(15, 16, 4), float64], Tensor[(120, 1), float64], Tensor[(336), bool], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(352), int64], Tensor[(264), int8], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(9, 2, 1), float32], Tensor[(18), float32], Tensor[(2, 12, 15), uint64], Tensor[(2, 12, 15), float32]) {
    %591 = cast(%var_4264, dtype="float64") /* ty=Tensor[(120, 1), float64] */;
    %592 = cast(%var_4265, dtype="bool") /* ty=Tensor[(336), bool] */;
    %593 = reshape(%591, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
    %594 = reshape(%592, newshape=[168, 2]) /* ty=Tensor[(168, 2), bool] */;
    %595 = @func_3677(%593, %594) /* ty=(Tensor[(4, 8, 15), uint8], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(15, 16, 4), float64], Tensor[(168, 2), bool], Tensor[(960), float32]) */;
    %596 = cast(%var_4281, dtype="float32") /* ty=Tensor[(30), float32] */;
    %597 = cast(meta[relay.Constant][53] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %598 = reshape(%596, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
    %599 = reshape(%597, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
    %600 = @func_2597(%598, %599) /* ty=(Tensor[(15, 2, 2), float32],) */;
    %601 = cast(meta[relay.Constant][54] /* ty=Tensor[(264), int8] */, dtype="int8") /* ty=Tensor[(264), int8] */;
    %602 = cast(%var_4309, dtype="uint16") /* ty=Tensor[(45), uint16] */;
    %603 = cast(%var_4310, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %604 = cast(meta[relay.Constant][55] /* ty=Tensor[(880), bool] */, dtype="bool") /* ty=Tensor[(880), bool] */;
    %605 = cast(meta[relay.Constant][56] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
    %606 = %595.3;
    %607 = cast(%606, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
    %608 = reshape(%601, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int8] */;
    %609 = reshape(%602, newshape=[1, 45]) /* ty=Tensor[(1, 45), uint16] */;
    %610 = reshape(%603, newshape=[392, 4]) /* ty=Tensor[(392, 4), int64] */;
    %611 = reshape(%604, newshape=[8, 11, 10]) /* ty=Tensor[(8, 11, 10), bool] */;
    %612 = reshape(%605, newshape=[728]) /* ty=Tensor[(728), bool] */;
    %613 = reshape(%607, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %614 = @func_3826(%608, %609, %610, %611, %612, %613) /* ty=(Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) */;
    %615 = cast(%var_4330, dtype="float32") /* ty=Tensor[(18), float32] */;
    %616 = reshape(%615, newshape=[9, 2, 1]) /* ty=Tensor[(9, 2, 1), float32] */;
    %617 = @func_54(%616) /* ty=(Tensor[(9, 2, ?), bool], Tensor[(9, 2, 1), float32], Tensor[(9, 2, ?), float64]) */;
    %618 = cast(%var_4259, dtype="float64") /* ty=Tensor[(2, 12, 15), float64] */;
    %619 = asin(%618) /* ty=Tensor[(2, 12, 15), float64] */;
    %620 = cast(%var_4259, dtype="uint64") /* ty=Tensor[(2, 12, 15), uint64] */;
    %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%619, dtype="uint64") /* ty=Tensor[(2, 12, 15), uint64] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %624 = cast(%619, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
    %625 = exp(%624) /* ty=Tensor[(2, 12, 15), float32] */;
    %626 = cast(%var_4296, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%625, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %630 = logical_and(%628, %629) /* ty=Tensor[(2, 12, 15), bool] */;
    %631 = cast(%619, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%630, dtype="bool") /* ty=Tensor[(2, 12, 15), bool] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %635 = less(%633, %634) /* ty=Tensor[(2, 12, 15), bool] */;
    %636 = cast(%630, dtype="int8") /* ty=Tensor[(2, 12, 15), int8] */;
    %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%635, dtype="int8") /* ty=Tensor[(2, 12, 15), int8] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %640 = multiply(%638, %639) /* ty=Tensor[(2, 12, 15), int8] */;
    %641 = cast(%640, dtype="float32") /* ty=Tensor[(2, 12, 15), float32] */;
    %642 = %600.0;
    %643 = %614.12;
    %644 = %617.1;
    %645 = minimum(%622, %623) /* ty=Tensor[(2, 12, 15), uint64] */;
    %646 = atan(%641) /* ty=Tensor[(2, 12, 15), float32] */;
    (%606, %var_4264, %var_4265, %642, %var_4281, meta[relay.Constant][53] /* ty=Tensor[(60), float32] */, %643, meta[relay.Constant][54] /* ty=Tensor[(264), int8] */, %var_4309, %var_4310, meta[relay.Constant][55] /* ty=Tensor[(880), bool] */, meta[relay.Constant][56] /* ty=Tensor[(728), bool] */, %644, %var_4330, %645, %646)
  };
  %647(%var_4344, %var_4345, %var_4346, %var_4347, %var_4348, %var_4349, %var_4350, %var_4351) /* ty=(Tensor[(15, 16, 4), float64], Tensor[(120, 1), float64], Tensor[(336), bool], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(352), int64], Tensor[(264), int8], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(9, 2, 1), float32], Tensor[(18), float32], Tensor[(2, 12, 15), uint64], Tensor[(2, 12, 15), float32]) */
}

def @func_1665(%var_1663: Tensor[(15, 8, 11), float64]) -> (Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) {
  @func_1662(%var_1663) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) */
}

def @func_4160(%var_4159: Tensor[(7, 4, 9), float64]) -> (Tensor[(7, 4, 9), float64],) {
  %653 = fn (%var_4139: Tensor[(7, 4, 9), float64]) -> (Tensor[(7, 4, 9), float64],) {
    %648 = cast(meta[relay.Constant][57] /* ty=Tensor[(7, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
    %649 = shape_of(%var_4139, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%var_4139, dtype="float64") /* ty=Tensor[(7, 4, 9), float64] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %652 = floor_mod(%650, %651) /* ty=Tensor[(7, 4, 9), float64] */;
    (%652,)
  };
  %653(%var_4159) /* ty=(Tensor[(7, 4, 9), float64],) */
}

def @func_5057(%var_5040: Tensor[(960), float32]) -> (Tensor[(11, 4, 15), uint64], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(13, 3, 15), float32], Tensor[(585, 1), float32]) {
  %654 = cast(meta[relay.Constant][59] /* ty=Tensor[(11, 4, 15), uint64] */, dtype="uint64") /* ty=Tensor[(11, 4, 15), uint64] */;
  %655 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(11, 4, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(meta[relay.Constant][58] /* ty=Tensor[(11, 4, 15), uint64] */, dtype="uint64") /* ty=Tensor[(11, 4, 15), uint64] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %658 = cast(meta[relay.Constant][60] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %659 = cast(meta[relay.Constant][60] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %660 = cast(%var_5040, dtype="float32") /* ty=Tensor[(960), float32] */;
  %661 = cast(meta[relay.Constant][61] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %662 = reshape(%658, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %663 = reshape(%659, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %664 = reshape(%660, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
  %665 = reshape(%661, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
  %666 = @func_2914(%662, %663, %664, %665) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
  %667 = cast(meta[relay.Constant][62] /* ty=Tensor[(585, 1), float32] */, dtype="float32") /* ty=Tensor[(585, 1), float32] */;
  %668 = cast(meta[relay.Constant][62] /* ty=Tensor[(585, 1), float32] */, dtype="float32") /* ty=Tensor[(585, 1), float32] */;
  %669 = reshape(%667, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %670 = reshape(%668, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %671 = multiply(%656, %657) /* ty=Tensor[(11, 4, 15), uint64] */;
  %672 = %666.4;
  %673 = @func_3517(%669, %670) /* ty=Tensor[(13, 3, 15), float32] */;
  (%671, %672, meta[relay.Constant][60] /* ty=Tensor[(728), bool] */, %var_5040, meta[relay.Constant][61] /* ty=Tensor[(352), int64] */, %673, meta[relay.Constant][62] /* ty=Tensor[(585, 1), float32] */)
}

def @func_3517(%var_3508: Tensor[(13, 3, 15), float32], %var_3509: Tensor[(13, 3, 15), float32]) -> Tensor[(13, 3, 15), float32] {
  %674 = cast(%var_3509, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  %675 = shape_of(%var_3508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%var_3508, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%676, %677) /* ty=Tensor[(13, 3, 15), float32] */
}

def @func_6799() -> (Tensor[(960), float32],) {
  %680 = fn () -> (Tensor[(960), float32],) {
    %678 = @func_5412() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 16, 4), float32], Tensor[(960), float32]) */;
    %679 = %678.2;
    (%679,)
  };
  %680() /* ty=(Tensor[(960), float32],) */
}

def @func_5578() -> (Tensor[(18), float32],) {
  %683 = fn () -> (Tensor[(18), float32],) {
    %681 = @func_5443() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(18), float32], Tensor[(9, 2, ?), float32]) */;
    %682 = %681.1;
    (%682,)
  };
  %683() /* ty=(Tensor[(18), float32],) */
}

def @func_2661(%var_2659: Tensor[(4, 8, 3), int32]) -> Tensor[(4, 8, 3), int32] {
  @func_2658(%var_2659) /* ty=Tensor[(4, 8, 3), int32] */
}

def @func_5638(%var_5628: Tensor[(16, 9, 9), int16], %var_5629: Tensor[(16, 9, 9), int16]) -> Tensor[(16, 9, 9), int16] {
  %684 = cast(%var_5629, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %685 = shape_of(%var_5628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%var_5628, dtype="int16") /* ty=Tensor[(16, 9, 9), int16] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%686, %687) /* ty=Tensor[(16, 9, 9), int16] */
}

def @func_7074() -> (Tensor[(7, 9, 15), float32],) {
  %689 = fn () -> (Tensor[(7, 9, 15), float32],) {
    %688 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
    (%688,)
  };
  %689() /* ty=(Tensor[(7, 9, 15), float32],) */
}

def @func_6013(%var_6007: Tensor[(7, 9, 15), float32], %var_6008: Tensor[(4, 84), bool], %var_6009: Tensor[(960), float32], %var_6010: Tensor[(120), float64], %var_6011: Tensor[(45), uint16], %var_6012: Tensor[(18), float32]) -> (Tensor[(7, 9, 15), uint16], Tensor[(15, 8, 11), float64], Tensor[(1320), float64], Tensor[(4, 84), bool], Tensor[(960), float32], Tensor[(360), float64], Tensor[(120), float64], Tensor[(30), float32], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(18), float32], Tensor[(9, 2, 960), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32]) {
  @func_6005(%var_6007, %var_6008, %var_6009, %var_6010, %var_6011, %var_6012) /* ty=(Tensor[(7, 9, 15), uint16], Tensor[(15, 8, 11), float64], Tensor[(1320), float64], Tensor[(4, 84), bool], Tensor[(960), float32], Tensor[(360), float64], Tensor[(120), float64], Tensor[(30), float32], Tensor[(45), uint16], Tensor[(1568), int64], Tensor[(18), float32], Tensor[(9, 2, 960), float32], Tensor[(10, 5, 9), bool], Tensor[(450), uint32]) */
}

def @func_5801() -> Tensor[(7, 9, 15), float32] {
  %691 = fn () -> Tensor[(7, 9, 15), float32] {
    %690 = @func_5549() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) */;
    %690.0
  };
  %691() /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_5893(%var_5891: Tensor[(15, 16, 4), float32]) -> Tensor[(15, 16, 4), float64] {
  @func_5890(%var_5891) /* ty=Tensor[(15, 16, 4), float64] */
}

def @func_7523(%var_7521: Tensor[(392, 4), int64]) -> (Tensor[(15, 16, 4), float32], Tensor[(392, 4), int64], Tensor[(2, 784), float32]) {
  @func_7520(%var_7521) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(392, 4), int64], Tensor[(2, 784), float32]) */
}

def @func_6342() -> Tensor[(7, 9, 15), float32] {
  @func_5340() /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_1545(%var_1543: Tensor[(7, 14, 16), int64], %var_1544: Tensor[(7, 14, 16), int64]) -> (Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) {
  @func_1541(%var_1543, %var_1544) /* ty=(Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) */
}

def @func_5329(%var_5321: Tensor[(12, 1, 6), float64], %var_5322: Tensor[(450), uint32], %var_5323: Tensor[(45), uint16], %var_5324: Tensor[(56, 28), int64], %var_5325: Tensor[(728), bool], %var_5326: Tensor[(960), float32], %var_5327: Tensor[(336), bool], %var_5328: Tensor[(8, 20), float64]) -> (Tensor[(12, ?, 6), bool], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(60), float32], Tensor[(264), int8], Tensor[(56, 28), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64], Tensor[(336), bool], Tensor[(18), float32], Tensor[(9, 2, 45), uint16], Tensor[(8, 2, 10), float32], Tensor[(8, 20), float64], Tensor[(10, 13, 1), float32], Tensor[(26, 5), float64]) {
  @func_5319(%var_5321, %var_5322, %var_5323, %var_5324, %var_5325, %var_5326, %var_5327, %var_5328) /* ty=(Tensor[(12, ?, 6), bool], Tensor[(10, 5, 9), bool], Tensor[(450), uint32], Tensor[(60), float32], Tensor[(264), int8], Tensor[(56, 28), int64], Tensor[(880), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64], Tensor[(336), bool], Tensor[(18), float32], Tensor[(9, 2, 45), uint16], Tensor[(8, 2, 10), float32], Tensor[(8, 20), float64], Tensor[(10, 13, 1), float32], Tensor[(26, 5), float64]) */
}

def @func_3065(%var_3063: Tensor[(7, 1, 13), float32]) -> Tensor[(7, 1, 13), float32] {
  @func_3062(%var_3063) /* ty=Tensor[(7, 1, 13), float32] */
}

def @func_6837() -> (Tensor[(7, 9, 15), float32], Tensor[(15, 8, 11), bool], Tensor[(1320), float64]) {
  %697 = fn () -> (Tensor[(7, 9, 15), float32], Tensor[(15, 8, 11), bool], Tensor[(1320), float64]) {
    %692 = cast(meta[relay.Constant][63] /* ty=Tensor[(1320), float64] */, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %693 = reshape(%692, newshape=[15, 8, 11]) /* ty=Tensor[(15, 8, 11), float64] */;
    %694 = @func_1662(%693) /* ty=(Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) */;
    %695 = @func_5340() /* ty=Tensor[(7, 9, 15), float32] */;
    %696 = %694.0;
    (%695, %696, meta[relay.Constant][63] /* ty=Tensor[(1320), float64] */)
  };
  %697() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(15, 8, 11), bool], Tensor[(1320), float64]) */
}

def @func_5342() -> Tensor[(7, 9, 15), float32] {
  @func_5340() /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_6942() -> (Tensor[(7, 9, 15), float32],) {
  %700 = fn () -> (Tensor[(7, 9, 15), float32],) {
    %698 = @func_5549() /* ty=(Tensor[(7, 9, 15), float32], Tensor[(880), bool], Tensor[(600), float32]) */;
    %699 = %698.0;
    (%699,)
  };
  %700() /* ty=(Tensor[(7, 9, 15), float32],) */
}

def @func_3062(%var_3056: Tensor[(7, 1, 13), float32]) -> Tensor[(7, 1, 13), float32] {
  %701 = cast(%var_3056, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
  rsqrt(%701) /* ty=Tensor[(7, 1, 13), float32] */
}

def @func_3728(%var_3726: Tensor[(10, 13, 1), float64]) -> (Tensor[(10, 13, ?), float32], Tensor[(10, 13, 1), float32]) {
  @func_3725(%var_3726) /* ty=(Tensor[(10, 13, ?), float32], Tensor[(10, 13, 1), float32]) */
}

def @func_7340() -> Tensor[(7, 9, 15), float32] {
  %703 = fn () -> Tensor[(7, 9, 15), float32] {
    %702 = @func_7008() /* ty=(Tensor[(7, 9, 15), float32],) */;
    %702.0
  };
  %703() /* ty=Tensor[(7, 9, 15), float32] */
}

def @func_1662(%var_1628: Tensor[(15, 8, 11), float64]) -> (Tensor[(15, 8, 11), bool], Tensor[(15, 8, 11), float64]) {
  %704 = cast(meta[relay.Constant][64] /* ty=Tensor[(15, 8, 11), float64] */, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %705 = shape_of(%var_1628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%var_1628, dtype="bool") /* ty=Tensor[(15, 8, 11), bool] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %708 = cast(%var_1628, dtype="float64") /* ty=Tensor[(15, 8, 11), float64] */;
  %709 = less_equal(%706, %707) /* ty=Tensor[(15, 8, 11), bool] */;
  %710 = cosh(%708) /* ty=Tensor[(15, 8, 11), float64] */;
  (%709, %710)
}

def @func_3826(%var_3772: Tensor[(12, 2, 11), int8], %var_3780: Tensor[(1, 45), uint16], %var_3785: Tensor[(392, 4), int64], %var_3805: Tensor[(8, 11, 10), bool], %var_3815: Tensor[(728), bool], %var_3816: Tensor[(960), float32]) -> (Tensor[(12, 2, 11), int8], Tensor[(5, 9, ?), bool], Tensor[(1, 45), uint16], Tensor[(2, 784), int64], Tensor[(392, 4), int64], Tensor[(15, 2, 2), float32], Tensor[(30), float32], Tensor[(60), float32], Tensor[(8, 11, 10), int8], Tensor[(14, 13, 4), bool], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64]) {
  %711 = cast(%var_3772, dtype="int8") /* ty=Tensor[(12, 2, 11), int8] */;
  %712 = shape_of(meta[relay.Constant][65] /* ty=Tensor[(12, 2, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(meta[relay.Constant][65] /* ty=Tensor[(12, 2, 11), int8] */, dtype="int8") /* ty=Tensor[(12, 2, 11), int8] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %715 = cast(%var_3780, dtype="uint16") /* ty=Tensor[(1, 45), uint16] */;
  %716 = reshape(%715, newshape=[5, 9, 1]) /* ty=Tensor[(5, 9, 1), uint16] */;
  %717 = @func_3129(%716) /* ty=(Tensor[(5, 9, ?), bool],) */;
  %718 = cast(%var_3785, dtype="int64") /* ty=Tensor[(392, 4), int64] */;
  %719 = reshape(%718, newshape=[2, 784]) /* ty=Tensor[(2, 784), int64] */;
  %720 = @func_1763(%719) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 14, 16), int64], Tensor[(2, 784), int64]) */;
  %721 = cast(meta[relay.Constant][66] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %722 = cast(meta[relay.Constant][67] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %723 = reshape(%721, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %724 = reshape(%722, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %725 = @func_2597(%723, %724) /* ty=(Tensor[(15, 2, 2), float32],) */;
  %726 = %720.2;
  %727 = cast(%726, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %728 = cast(%726, dtype="int64") /* ty=Tensor[(2, 784), int64] */;
  %729 = reshape(%727, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %730 = reshape(%728, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %731 = @func_1541(%729, %730) /* ty=(Tensor[(7, 14, 16), int64], Tensor[(8, 11, 10), bool], Tensor[(440, 2), bool]) */;
  %732 = %731.1;
  %733 = cast(%var_3805, dtype="int8") /* ty=Tensor[(8, 11, 10), int8] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="int8") /* ty=Tensor[(8, 11, 10), int8] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %737 = cast(%var_3815, dtype="bool") /* ty=Tensor[(728), bool] */;
  %738 = cast(%var_3815, dtype="bool") /* ty=Tensor[(728), bool] */;
  %739 = cast(%var_3816, dtype="float32") /* ty=Tensor[(960), float32] */;
  %740 = cast(meta[relay.Constant][68] /* ty=Tensor[(352), int64] */, dtype="int64") /* ty=Tensor[(352), int64] */;
  %741 = reshape(%737, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %742 = reshape(%738, newshape=[14, 13, 4]) /* ty=Tensor[(14, 13, 4), bool] */;
  %743 = reshape(%739, newshape=[120, 8]) /* ty=Tensor[(120, 8), float32] */;
  %744 = reshape(%740, newshape=[2, 176]) /* ty=Tensor[(2, 176), int64] */;
  %745 = @func_2914(%741, %742, %743, %744) /* ty=(Tensor[(15, 16, 4), float32], Tensor[(14, 13, 4), bool], Tensor[(14, 13, 4), float32], Tensor[(11, 4, 8), bool], Tensor[(2, 176), int64], Tensor[(120, 8), float32]) */;
  %746 = subtract(%713, %714) /* ty=Tensor[(12, 2, 11), int8] */;
  %747 = %717.0;
  %748 = %725.0;
  %749 = left_shift(%735, %736) /* ty=Tensor[(8, 11, 10), int8] */;
  %750 = %745.1;
  (%746, %747, %var_3780, %726, %var_3785, %748, meta[relay.Constant][66] /* ty=Tensor[(30), float32] */, meta[relay.Constant][67] /* ty=Tensor[(60), float32] */, %749, %750, %var_3815, %var_3816, meta[relay.Constant][68] /* ty=Tensor[(352), int64] */)
}

def @func_6651(%var_6626: Tensor[(585), float32]) -> (Tensor[(120), uint16], Tensor[(13, 3, 15), uint32], Tensor[(5, 5, 8), uint16], Tensor[(200), uint16]) {
  %751 = @func_6477() /* ty=(Tensor[(9, 16, 7), int8], Tensor[(3, 40), uint16], Tensor[(120), uint16], Tensor[(15, 16, 4), float32], Tensor[(240, 4), float32]) */;
  %752 = cast(%var_6626, dtype="float32") /* ty=Tensor[(585), float32] */;
  %753 = cast(%var_6626, dtype="float32") /* ty=Tensor[(585), float32] */;
  %754 = reshape(%752, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %755 = reshape(%753, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %756 = @func_3517(%754, %755) /* ty=Tensor[(13, 3, 15), float32] */;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
  %758 = sin(%757) /* ty=Tensor[(13, 3, 15), float64] */;
  %759 = cast(%var_6626, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="uint32") /* ty=Tensor[(13, 3, 15), uint32] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %763 = cast(meta[relay.Constant][69] /* ty=Tensor[(200), uint16] */, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %764 = reshape(%763, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), uint16] */;
  %765 = @func_2707(%764) /* ty=(Tensor[(5, 5, 8), uint16],) */;
  %766 = %751.2;
  %767 = bitwise_or(%761, %762) /* ty=Tensor[(13, 3, 15), uint32] */;
  %768 = %765.0;
  (%766, %767, %768, meta[relay.Constant][69] /* ty=Tensor[(200), uint16] */)
}

def @func_1304(%var_1302: Tensor[(3, 7, 16), bool], %var_1303: Tensor[(960), float32]) -> (Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) {
  %791 = fn (%var_1228: Tensor[(3, 7, 16), bool], %var_1236: Tensor[(960), float32]) -> (Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) {
    %769 = cast(meta[relay.Constant][70] /* ty=Tensor[(3, 7, 16), bool] */, dtype="bool") /* ty=Tensor[(3, 7, 16), bool] */;
    %770 = shape_of(%var_1228, dtype="int32") /* ty=Tensor[(3), int32] */;
    %771 = cast(%var_1228, dtype="bool") /* ty=Tensor[(3, 7, 16), bool] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %773 = cast(%var_1236, dtype="float32") /* ty=Tensor[(960), float32] */;
    %774 = reshape(%773, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
    %775 = @func_171(%774) /* ty=(Tensor[(15, 16, 4), float32],) */;
    %776 = %775.0;
    %777 = cast(%776, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
    %778 = cos(%777) /* ty=Tensor[(15, 16, 4), float32] */;
    %779 = cast(%776, dtype="float32") /* ty=Tensor[(15, 16, 4), float32] */;
    %780 = reshape(%779, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), float32] */;
    %781 = @func_171(%780) /* ty=(Tensor[(15, 16, 4), float32],) */;
    %782 = %781.0;
    %783 = cast(%782, dtype="uint8") /* ty=Tensor[(15, 16, 4), uint8] */;
    %784 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%778, dtype="uint8") /* ty=Tensor[(15, 16, 4), uint8] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %787 = bitwise_or(%785, %786) /* ty=Tensor[(15, 16, 4), uint8] */;
    %788 = cast(%787, dtype="float64") /* ty=Tensor[(15, 16, 4), float64] */;
    %789 = logical_or(%771, %772) /* ty=Tensor[(3, 7, 16), bool] */;
    %790 = atan(%788) /* ty=Tensor[(15, 16, 4), float64] */;
    (%789, %var_1236, %790)
  };
  %791(%var_1302, %var_1303) /* ty=(Tensor[(3, 7, 16), bool], Tensor[(960), float32], Tensor[(15, 16, 4), float64]) */
}

def @func_5849() -> Tensor[(15, 16, 4), float32] {
  @func_5847() /* ty=Tensor[(15, 16, 4), float32] */
}

def @func_5060(%var_5058: Tensor[(960), float32]) -> (Tensor[(11, 4, 15), uint64], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(13, 3, 15), float32], Tensor[(585, 1), float32]) {
  @func_5057(%var_5058) /* ty=(Tensor[(11, 4, 15), uint64], Tensor[(2, 176), int64], Tensor[(728), bool], Tensor[(960), float32], Tensor[(352), int64], Tensor[(13, 3, 15), float32], Tensor[(585, 1), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen317/build/output.py:1603: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen317/build/output.py", line 1608, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(504) tvmgen_default_fused_cast_cast_reshape_greater_equal_kernel0(signed char* __restrict__ T_greater_equal, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_greater_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

