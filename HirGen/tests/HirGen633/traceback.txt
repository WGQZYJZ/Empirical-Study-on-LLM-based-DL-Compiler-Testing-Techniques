==========mod==========
#[version = "0.0.5"]
def @func_4790(%var_4786: Tensor[(165, 2), uint32], %var_4787: Tensor[(640), float64]) -> (Tensor[(11, 11, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(165, 2), uint32], Tensor[(640), float64]) {
  %0 = @func_4431() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %1 = cast(%var_4786, dtype="uint32") /* ty=Tensor[(165, 2), uint32] */;
  %2 = cast(%var_4787, dtype="float64") /* ty=Tensor[(640), float64] */;
  %3 = cast(%var_4787, dtype="float64") /* ty=Tensor[(640), float64] */;
  %4 = reshape(%1, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %5 = reshape(%2, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
  %6 = reshape(%3, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
  %7 = @func_2649(%4, %5, %6) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) */;
  %8 = %0.0;
  %9 = %7.0;
  (%8, %9, %var_4786, %var_4787)
}

def @func_5528() -> (Tensor[(36), float64],) {
  %10 = @func_5502() /* ty=Tensor[(36), float64] */;
  (%10,)
}

def @func_3331() -> Tensor[(36), float64] {
  @func_3252() /* ty=Tensor[(36), float64] */
}

def @func_7682() -> (Tensor[(15, 1, 3), float32],) {
  %11 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
  %12 = %11.1;
  (%12,)
}

def @func_8288() -> (Tensor[(11, 11, 7), float32],) {
  %13 = @func_5601() /* ty=Tensor[(11, 11, 7), float32] */;
  (%13,)
}

def @func_6264() -> (Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) {
  %14 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %15 = %14.1;
  %16 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  (%15, %16)
}

def @func_8601() -> (Tensor[(15, 1, 3), float32],) {
  %17 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
  %18 = %17.1;
  (%18,)
}

def @func_5697(%var_5668: Tensor[(784), uint64]) -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), uint16], Tensor[(14, 14, 4), float64], Tensor[(11, 11, 7), float32]) {
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %20 = reshape(%19, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float32] */;
  %21 = @func_4546(%20) /* ty=Tensor[(3, 2, 12), uint8] */;
  %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), float32] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="uint16") /* ty=Tensor[(3, 2, 12), uint16] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %26 = cast(%var_5668, dtype="uint64") /* ty=Tensor[(784), uint64] */;
  %27 = reshape(%26, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), uint64] */;
  %28 = @func_3359(%27) /* ty=(Tensor[(14, 14, 4), uint64],) */;
  %29 = %28.0;
  %30 = cast(%var_5668, dtype="float64") /* ty=Tensor[(784), float64] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %34 = @func_4431() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %35 = @func_4911() /* ty=Tensor[(11, 11, 7), float32] */;
  %36 = right_shift(%24, %25) /* ty=Tensor[(3, 2, 12), uint16] */;
  %37 = power(%32, %33) /* ty=Tensor[(14, 14, 4), float64] */;
  %38 = %34.0;
  (%35, %36, %37, %38)
}

def @func_5052(%var_5044: Tensor[(3, 16, 12), int16]) -> (Tensor[(3, 16, 12), int16],) {
  %39 = cast(%var_5044, dtype="int16") /* ty=Tensor[(3, 16, 12), int16] */;
  %40 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(3, 16, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 16, 12), int16] */, dtype="int16") /* ty=Tensor[(3, 16, 12), int16] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %43 = add(%41, %42) /* ty=Tensor[(3, 16, 12), int16] */;
  (%43,)
}

def @func_4963() -> (Tensor[(36), float64], Tensor[(800), int16], Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) {
  %44 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(800), int16] */, dtype="int16") /* ty=Tensor[(800), int16] */;
  %46 = reshape(%45, newshape=[800]) /* ty=Tensor[(800), int16] */;
  %47 = @func_1979(%46) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  %50 = %44.0;
  %51 = asinh(%49) /* ty=Tensor[(3, 2, 12), float32] */;
  %52 = @func_4753() /* ty=Tensor[(11, 11, 7), float32] */;
  (%50, meta[relay.Constant][2] /* ty=Tensor[(800), int16] */, %51, %52)
}

def @func_2832(%var_2827: Tensor[(168), float32]) -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) {
  %53 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %54 = cast(%var_2827, dtype="float32") /* ty=Tensor[(168), float32] */;
  %55 = reshape(%54, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %56 = @func_2358(%55) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %57 = %53.4;
  %58 = %56.0;
  (%57, %58, %var_2827)
}

def @func_3550() -> Tensor[(3, 2, 12), float32] {
  %59 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %59.0
}

def @func_6512() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(36), float64]) {
  %60 = @func_4963() /* ty=(Tensor[(36), float64], Tensor[(800), int16], Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) */;
  %61 = @func_5429() /* ty=Tensor[(11, 11, 7), float32] */;
  %62 = @func_5123() /* ty=Tensor[(36), float64] */;
  %63 = %60.0;
  (%61, %62, %63)
}

def @func_3090() -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) {
  %64 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %65 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  %66 = %64.0;
  (%65, %66)
}

def @func_3149() -> (Tensor[(11, 11, 7), float32],) {
  %67 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  (%67,)
}

def @func_4674(%var_4634: Tensor[(168), int64], %var_4635: Tensor[(320, 2), float32]) -> (Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(330, 1), uint32], float32, Tensor[(7, 12, 2), bool], Tensor[(168), int64], Tensor[(320, 2), float32], Tensor[(10, 9, ?), uint64], Tensor[(15, 6), float64], Tensor[(11, 11, 7), float32], Tensor[(847), float32]) {
  %68 = @func_4398() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(330, 1), uint32] */, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
  %70 = reshape(%69, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %71 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %72 = cast(%var_4634, dtype="int64") /* ty=Tensor[(168), int64] */;
  %73 = cast(%var_4634, dtype="int64") /* ty=Tensor[(168), int64] */;
  %74 = cast(%var_4635, dtype="float32") /* ty=Tensor[(320, 2), float32] */;
  %75 = reshape(%72, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %76 = reshape(%73, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %77 = reshape(%74, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %78 = @func_1315(%75, %76, %77) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) */;
  %79 = %71.2;
  %80 = cast(%79, dtype="float64") /* ty=float64 */;
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
  %82 = reshape(%80, newshape=[]) /* ty=float64 */;
  %83 = reshape(%81, newshape=[10, 9, 1]) /* ty=Tensor[(10, 9, 1), float64] */;
  %84 = @func_364(%82, %83) /* ty=(Tensor[(10, 9, ?), uint64], Tensor[(10, 9, ?), int64]) */;
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(847), float32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %86 = reshape(%85, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
  %87 = %68.6;
  %88 = @func_839(%70) /* ty=Tensor[(2, 15, 11), bool] */;
  %89 = %78.4;
  %90 = %84.0;
  %91 = @func_3436(%86) /* ty=Tensor[(11, 11, 7), float32] */;
  (%87, %88, meta[relay.Constant][3] /* ty=Tensor[(330, 1), uint32] */, %79, %89, %var_4634, %var_4635, %90, meta[relay.Constant][4] /* ty=Tensor[(15, 6), float64] */, %91, meta[relay.Constant][5] /* ty=Tensor[(847), float32] */)
}

def @func_6485(%var_6461: Tensor[(15, 9, 14), int16], %var_6469: Tensor[(15, 9, 14), int16]) -> (Tensor[(15, 9, 14), int16], Tensor[(15, 9, 14), bool], Tensor[(6, 13, 8), bool], bool) {
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 9, 14), int16] */, dtype="int16") /* ty=Tensor[(15, 9, 14), int16] */;
  %93 = shape_of(%var_6461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%var_6461, dtype="int16") /* ty=Tensor[(15, 9, 14), int16] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %96 = cast(%var_6469, dtype="bool") /* ty=Tensor[(15, 9, 14), bool] */;
  %97 = shape_of(%var_6461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_6461, dtype="bool") /* ty=Tensor[(15, 9, 14), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %101 = reshape(%100, newshape=[]) /* ty=bool */;
  %102 = @func_6307(%101) /* ty=(Tensor[(6, 13, 8), bool],) */;
  %103 = bitwise_and(%94, %95) /* ty=Tensor[(15, 9, 14), int16] */;
  %104 = equal(%98, %99) /* ty=Tensor[(15, 9, 14), bool] */;
  %105 = %102.0;
  (%103, %104, %105, True /* ty=bool */)
}

def @func_2649(%var_2599: Tensor[(330), uint32], %var_2609: Tensor[(10, 64), float64], %var_2625: Tensor[(10, 64), float64]) -> (Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) {
  %106 = @func_2444() /* ty=Tensor[(15, 1, 3), float32] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
  %108 = reshape(%107, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 64), float32] */, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 64), float32] */, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %111 = reshape(%109, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %112 = reshape(%110, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %113 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(800), int16] */, dtype="int16") /* ty=Tensor[(800), int16] */;
  %115 = cast(%var_2599, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %116 = reshape(%114, newshape=[2, 400]) /* ty=Tensor[(2, 400), int16] */;
  %117 = reshape(%115, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %118 = @func_2240(%116, %117) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), bool], Tensor[(2, 400), float32], Tensor[(330), uint32], Tensor[(2, 15, 11), float64]) */;
  %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 64), float32] */, dtype="float64") /* ty=Tensor[(10, 64), float64] */;
  %120 = sin(%119) /* ty=Tensor[(10, 64), float64] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(10, 64), float64] */;
  %122 = exp(%121) /* ty=Tensor[(10, 64), float64] */;
  %123 = cast(%var_2609, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(2), int32] */;
  %125 = cast(%122, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %127 = minimum(%125, %126) /* ty=Tensor[(10, 64), float32] */;
  %128 = cast(%122, dtype="int8") /* ty=Tensor[(10, 64), int8] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(2), int32] */;
  %130 = cast(%127, dtype="int8") /* ty=Tensor[(10, 64), int8] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %132 = @func_1230(%108) /* ty=Tensor[(15, 1, 3), float32] */;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
  %134 = reshape(%133, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %135 = cast(%var_2625, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %136 = shape_of(%120, dtype="int32") /* ty=Tensor[(2), int32] */;
  %137 = cast(%120, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %139 = @func_113(%111, %112) /* ty=Tensor[(8, 5, 16), float64] */;
  %140 = %113.0;
  %141 = %118.4;
  %142 = bitwise_and(%130, %131) /* ty=Tensor[(10, 64), int8] */;
  %143 = @func_1230(%134) /* ty=Tensor[(15, 1, 3), float32] */;
  %144 = floor_mod(%137, %138) /* ty=Tensor[(10, 64), float32] */;
  (%106, %132, %139, %140, %141, meta[relay.Constant][8] /* ty=Tensor[(800), int16] */, %var_2599, %142, %143, %144)
}

def @func_6955() -> (Tensor[(45), float32], Tensor[(36), float64]) {
  %145 = @func_3968() /* ty=(Tensor[(45), float32],) */;
  %146 = %145.0;
  %147 = @func_4496() /* ty=Tensor[(36), float64] */;
  (%146, %147)
}

def @func_3436(%var_3400: Tensor[(11, 11, 7), float32]) -> Tensor[(11, 11, 7), float32] {
  %148 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %149 = %148.0;
  %150 = cast(%var_3400, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%152, %153) /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_4398() -> (Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) {
  %154 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %155 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %156 = reshape(%155, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %157 = @func_2358(%156) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %158 = @func_3331() /* ty=Tensor[(36), float64] */;
  %159 = cast(%158, dtype="float64") /* ty=Tensor[(36), float64] */;
  %160 = cast(%158, dtype="float64") /* ty=Tensor[(36), float64] */;
  %161 = reshape(%159, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %162 = reshape(%160, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %163 = @func_2061(%161, %162) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
  %164 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %165 = %154.2;
  %166 = %157.0;
  %167 = %163.0;
  %168 = @func_3252() /* ty=Tensor[(36), float64] */;
  (%158, %164, %165, %166, meta[relay.Constant][9] /* ty=Tensor[(168), float32] */, %167, %168)
}

def @func_3359(%var_3351: Tensor[(14, 14, 4), uint64]) -> (Tensor[(14, 14, 4), uint64],) {
  %169 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 14, 4), uint64] */, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %170 = shape_of(%var_3351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%var_3351, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %173 = bitwise_or(%171, %172) /* ty=Tensor[(14, 14, 4), uint64] */;
  (%173,)
}

def @func_6388() -> Tensor[(11, 11, 7), float32] {
  @func_4753() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_4496() -> Tensor[(36), float64] {
  %174 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %174.0
}

def @func_2240(%var_2200: Tensor[(2, 400), int16], %var_2223: Tensor[(330), uint32]) -> (Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), bool], Tensor[(2, 400), float32], Tensor[(330), uint32], Tensor[(2, 15, 11), float64]) {
  %175 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %176 = cast(%var_2200, dtype="int16") /* ty=Tensor[(2, 400), int16] */;
  %177 = reshape(%176, newshape=[800]) /* ty=Tensor[(800), int16] */;
  %178 = @func_1979(%177) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) */;
  %179 = cast(%var_2200, dtype="int16") /* ty=Tensor[(2, 400), int16] */;
  %180 = reshape(%179, newshape=[800]) /* ty=Tensor[(800), int16] */;
  %181 = @func_1979(%180) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) */;
  %182 = %181.2;
  %183 = cast(%182, dtype="int8") /* ty=Tensor[(800), int8] */;
  %184 = shape_of(%var_2200, dtype="int32") /* ty=Tensor[(2), int32] */;
  %185 = cast(%var_2200, dtype="int8") /* ty=Tensor[(2, 400), int8] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %187 = left_shift(%185, %186) /* ty=Tensor[(2, 400), int8] */;
  %188 = cast(%var_2200, dtype="float32") /* ty=Tensor[(2, 400), float32] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(2), int32] */;
  %190 = cast(%187, dtype="float32") /* ty=Tensor[(2, 400), float32] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %192 = cast(%var_2223, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %193 = reshape(%192, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %194 = @func_839(%193) /* ty=Tensor[(2, 15, 11), bool] */;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %196 = %175.1;
  %197 = %178.3;
  %198 = minimum(%190, %191) /* ty=Tensor[(2, 400), float32] */;
  %199 = erf(%195) /* ty=Tensor[(2, 15, 11), float64] */;
  (%196, %197, %198, %var_2223, %199)
}

def @func_6034() -> (Tensor[(36), float64], Tensor[(36), float64]) {
  %200 = @func_5300() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32]) */;
  %201 = %200.0;
  %202 = @func_3252() /* ty=Tensor[(36), float64] */;
  (%201, %202)
}

def @func_8732(%var_8724: Tensor[(8, 5, 10), float32]) -> (Tensor[(8, 5, 10), float32], Tensor[(11, 11, 7), float32]) {
  %203 = cast(%var_8724, dtype="float32") /* ty=Tensor[(8, 5, 10), float32] */;
  %204 = cosh(%203) /* ty=Tensor[(8, 5, 10), float32] */;
  %205 = @func_7384() /* ty=Tensor[(11, 11, 7), float32] */;
  (%204, %205)
}

def @func_7378() -> (Tensor[(3, 2, 12), float32],) {
  %206 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  (%206,)
}

def @func_3611(%var_3588: Tensor[(4, 7, 14), uint32], %var_3589: Tensor[(4, 7, 14), uint32]) -> (Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) {
  %207 = cast(%var_3589, dtype="uint32") /* ty=Tensor[(4, 7, 14), uint32] */;
  %208 = shape_of(%var_3588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_3588, dtype="uint32") /* ty=Tensor[(4, 7, 14), uint32] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %211 = cast(%var_3589, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
  %212 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %213 = maximum(%209, %210) /* ty=Tensor[(4, 7, 14), uint32] */;
  %214 = asin(%211) /* ty=Tensor[(4, 7, 14), float32] */;
  %215 = %212.3;
  (%213, %214, %215)
}

def @func_3230() -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) {
  %216 = cast(meta[relay.Constant][11] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %217 = reshape(%216, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %218 = @func_2358(%217) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %219 = %218.0;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %221 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  %222 = asinh(%220) /* ty=Tensor[(6, 4, 7), float32] */;
  (%221, meta[relay.Constant][11] /* ty=Tensor[(168), float32] */, %222)
}

def @func_2975() -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) {
  %223 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %225 = reshape(%224, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %226 = @func_2358(%225) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %227 = %223.4;
  %228 = %226.0;
  (%227, %228, meta[relay.Constant][12] /* ty=Tensor[(168), float32] */)
}

def @func_8887(%var_8883: Tensor[(392), uint32]) -> (Tensor[(15, 1, 3), float32], Tensor[(4, 7, 14), float32], Tensor[(392), uint32], Tensor[(640), float32]) {
  %229 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
  %230 = cast(%var_8883, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %232 = reshape(%230, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint32] */;
  %233 = reshape(%231, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %234 = @func_6887(%232, %233) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) */;
  %235 = %229.1;
  %236 = %234.1;
  (%235, %236, %var_8883, meta[relay.Constant][13] /* ty=Tensor[(640), float32] */)
}

def @func_6239(%var_6187: Tensor[(15, 1, 3), float32], %var_6221: Tensor[(330), uint32], %var_6231: Tensor[(640), float32]) -> (Tensor[(15, ?, 3), int64], Tensor[(11, 11, 7), float32], Tensor[(2, 9, 2), float64], uint32, Tensor[(330), uint32], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(168), int64], Tensor[(640), float32]) {
  %237 = @func_2444() /* ty=Tensor[(15, 1, 3), float32] */;
  %238 = cast(%var_6187, dtype="int64") /* ty=Tensor[(15, 1, 3), int64] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="int64") /* ty=Tensor[(15, 1, 3), int64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %242 = cast(meta[relay.Constant][14] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %243 = cast(%237, dtype="uint32") /* ty=Tensor[(15, 1, 3), uint32] */;
  %244 = cast(%var_6221, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %245 = reshape(%242, newshape=[]) /* ty=uint32 */;
  %246 = reshape(%243, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), uint32] */;
  %247 = reshape(%244, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %248 = @func_5395(%245, %246, %247) /* ty=(Tensor[(1, 9, 5), bool], Tensor[(2, 9, 2), float64], Tensor[(1, 392), float32], Tensor[(36), float64], Tensor[(330), uint32], Tensor[(330), uint32], Tensor[(36), float64]) */;
  %249 = cast(meta[relay.Constant][15] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %250 = cast(%var_6231, dtype="float32") /* ty=Tensor[(640), float32] */;
  %251 = reshape(%249, newshape=[168]) /* ty=Tensor[(168), int64] */;
  %252 = reshape(%250, newshape=[320, 2]) /* ty=Tensor[(320, 2), float32] */;
  %253 = @func_4674(%251, %252) /* ty=(Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(330, 1), uint32], float32, Tensor[(7, 12, 2), bool], Tensor[(168), int64], Tensor[(320, 2), float32], Tensor[(10, 9, ?), uint64], Tensor[(15, 6), float64], Tensor[(11, 11, 7), float32], Tensor[(847), float32]) */;
  %254 = right_shift(%240, %241) /* ty=Tensor[(15, ?, 3), int64] */;
  %255 = @func_5429() /* ty=Tensor[(11, 11, 7), float32] */;
  %256 = %248.1;
  %257 = @func_3331() /* ty=Tensor[(36), float64] */;
  %258 = %253.1;
  (%254, %255, %256, meta[relay.Constant][14] /* ty=uint32 */, %var_6221, %257, %258, meta[relay.Constant][15] /* ty=Tensor[(168), int64] */, %var_6231)
}

def @func_839(%var_832: Tensor[(2, 15, 11), uint32]) -> Tensor[(2, 15, 11), bool] {
  %259 = cast(%var_832, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %260 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(2, 15, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 15, 11), uint32] */, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%261, %262) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_2061(%var_2034: Tensor[(2, 9, 2), float64], %var_2035: Tensor[(2, 9, 2), float64]) -> (Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) {
  %263 = cast(%var_2035, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %264 = shape_of(%var_2034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_2034, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %267 = cast(%var_2035, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %268 = divide(%265, %266) /* ty=Tensor[(2, 9, 2), float64] */;
  %269 = acos(%267) /* ty=Tensor[(2, 9, 2), float64] */;
  (%268, %269)
}

def @func_4546(%var_4534: Tensor[(3, 2, 12), float32]) -> Tensor[(3, 2, 12), uint8] {
  %270 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %271 = cast(%var_4534, dtype="uint8") /* ty=Tensor[(3, 2, 12), uint8] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint8") /* ty=Tensor[(3, 2, 12), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%273, %274) /* ty=Tensor[(3, 2, 12), uint8] */
}

def @func_5035() -> (Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) {
  %275 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %276 = @func_3950() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %277 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %278 = %275.0;
  %279 = %276.1;
  (%277, %278, %279)
}

def @func_8765() -> (Tensor[(11, 11, 7), float32],) {
  %280 = @func_5601() /* ty=Tensor[(11, 11, 7), float32] */;
  (%280,)
}

def @func_7085() -> Tensor[(36), float64] {
  @func_6922() /* ty=Tensor[(36), float64] */
}

def @func_8569(%var_8547: Tensor[(16, 4, 14), float32]) -> (Tensor[(9, 5, 14), int8], Tensor[(630), int8], Tensor[(16, 4, 14), bool]) {
  %281 = cast(meta[relay.Constant][17] /* ty=Tensor[(630), int8] */, dtype="int8") /* ty=Tensor[(630), int8] */;
  %282 = cast(meta[relay.Constant][17] /* ty=Tensor[(630), int8] */, dtype="int8") /* ty=Tensor[(630), int8] */;
  %283 = reshape(%281, newshape=[9, 5, 14]) /* ty=Tensor[(9, 5, 14), int8] */;
  %284 = reshape(%282, newshape=[9, 5, 14]) /* ty=Tensor[(9, 5, 14), int8] */;
  %285 = @func_7534(%283, %284) /* ty=(Tensor[(9, 5, 14), int8],) */;
  %286 = cast(%var_8547, dtype="float32") /* ty=Tensor[(16, 4, 14), float32] */;
  %287 = tan(%286) /* ty=Tensor[(16, 4, 14), float32] */;
  %288 = cast(%var_8547, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = %285.0;
  %293 = equal(%290, %291) /* ty=Tensor[(16, 4, 14), bool] */;
  (%292, meta[relay.Constant][17] /* ty=Tensor[(630), int8] */, %293)
}

def @func_7978(%var_7975: Tensor[(392), uint32]) -> (Tensor[(3, 2, 12), float32], Tensor[(72), float32], Tensor[(330), uint32], Tensor[(392), uint32]) {
  %294 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
  %295 = cast(meta[relay.Constant][18] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %296 = cast(%var_7975, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %297 = reshape(%295, newshape=[330, 1]) /* ty=Tensor[(330, 1), uint32] */;
  %298 = reshape(%296, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %299 = @func_3833(%297, %298) /* ty=(Tensor[(2, 15, 11), bool], Tensor[(330, ?), uint32], Tensor[(4, 7, 14), uint32], Tensor[(392), uint32], Tensor[(2, 9, 2), float64], Tensor[(330, 36), float64], Tensor[(11, 11, 7), float32], Tensor[(4, 7, 14), float32], Tensor[(3, 2, 12), bool], Tensor[(72), float32]) */;
  %300 = %294.0;
  %301 = %299.9;
  (%300, %301, meta[relay.Constant][18] /* ty=Tensor[(330), uint32] */, %var_7975)
}

def @func_5314() -> Tensor[(3, 2, 12), float32] {
  @func_3550() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_5395(%var_5345: uint32, %var_5346: Tensor[(1, 9, 5), uint32], %var_5379: Tensor[(330), uint32]) -> (Tensor[(1, 9, 5), bool], Tensor[(2, 9, 2), float64], Tensor[(1, 392), float32], Tensor[(36), float64], Tensor[(330), uint32], Tensor[(330), uint32], Tensor[(36), float64]) {
  %302 = cast(%var_5345, dtype="bool") /* ty=bool */;
  %303 = cast(%var_5346, dtype="bool") /* ty=Tensor[(1, 9, 5), bool] */;
  %304 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 392), uint32] */, dtype="uint32") /* ty=Tensor[(1, 392), uint32] */;
  %305 = reshape(%304, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %306 = @func_3894(%305) /* ty=(Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) */;
  %307 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 392), uint32] */, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %308 = cast(%var_5379, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %309 = reshape(%308, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %310 = @func_2706(%309) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(3, 2, 12), float32], Tensor[(330), uint32], Tensor[(640), float64]) */;
  %311 = not_equal(%302, %303) /* ty=Tensor[(1, 9, 5), bool] */;
  %312 = %306.1;
  %313 = sqrt(%307) /* ty=Tensor[(1, 392), float32] */;
  %314 = @func_3331() /* ty=Tensor[(36), float64] */;
  %315 = %310.3;
  %316 = @func_3252() /* ty=Tensor[(36), float64] */;
  (%311, %312, %313, %314, %315, %var_5379, %316)
}

def @func_3710(%var_3677: Tensor[(26, 1), float64], %var_3678: Tensor[(330), uint32]) -> (Tensor[(11, 11, 7), float32], Tensor[(2, 15, 11), bool], Tensor[(26, 330), int8], Tensor[(11, 11, 7), float32]) {
  %317 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %318 = cast(%var_3677, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
  %319 = cast(%var_3678, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %320 = reshape(%318, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %321 = reshape(%319, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %322 = @func_2278(%320, %321) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) */;
  %323 = cast(%var_3677, dtype="int8") /* ty=Tensor[(26, 1), int8] */;
  %324 = cast(%var_3678, dtype="int8") /* ty=Tensor[(330), int8] */;
  %325 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %326 = %317.0;
  %327 = %322.2;
  %328 = bitwise_and(%323, %324) /* ty=Tensor[(26, 330), int8] */;
  %329 = %325.0;
  (%326, %327, %328, %329)
}

def @func_8645() -> (Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) {
  %330 = @func_5300() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32]) */;
  %331 = @func_6264() /* ty=(Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) */;
  %332 = %330.1;
  %333 = %331.1;
  (%332, %333)
}

def @func_2444() -> Tensor[(15, 1, 3), float32] {
  %334 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %334.1
}

def @func_1929(%var_1924: Tensor[(3, 2, 12), float32]) -> Tensor[(3, 2, 12), bool] {
  %335 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %336 = cast(%var_1924, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%338, %339) /* ty=Tensor[(3, 2, 12), bool] */
}

def @func_5300() -> (Tensor[(36), float64], Tensor[(3, 2, 12), float32]) {
  %340 = @func_5084() /* ty=Tensor[(36), float64] */;
  %341 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  (%340, %341)
}

def @func_1230(%var_1226: Tensor[(15, 1, 3), float32]) -> Tensor[(15, 1, 3), float32] {
  %342 = cast(%var_1226, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
  acosh(%342) /* ty=Tensor[(15, 1, 3), float32] */
}

def @func_3004(%var_2999: Tensor[(13, 11, 8), uint64]) -> (Tensor[(13, 11, 8), bool],) {
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 11, 8), uint64] */, dtype="bool") /* ty=Tensor[(13, 11, 8), bool] */;
  %344 = shape_of(%var_2999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_2999, dtype="bool") /* ty=Tensor[(13, 11, 8), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = equal(%345, %346) /* ty=Tensor[(13, 11, 8), bool] */;
  (%347,)
}

def @func_4911() -> Tensor[(11, 11, 7), float32] {
  @func_4753() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_5795(%var_5775: Tensor[(26), float64]) -> (Tensor[(36), float64], Tensor[(26), float64], Tensor[(330), uint32], Tensor[(3, 1, 3), float32], Tensor[(11, 11, 7), float32]) {
  %348 = cast(%var_5775, dtype="float64") /* ty=Tensor[(26), float64] */;
  %349 = cast(meta[relay.Constant][21] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %350 = reshape(%348, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %351 = reshape(%349, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %352 = @func_2278(%350, %351) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) */;
  %353 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %354 = atan(%353) /* ty=Tensor[(3, 1, 3), float64] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %356 = %352.1;
  %357 = acos(%355) /* ty=Tensor[(3, 1, 3), float32] */;
  %358 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  (%356, %var_5775, meta[relay.Constant][21] /* ty=Tensor[(330), uint32] */, %357, %358)
}

def @func_1893() -> Tensor[(3, 2, 12), float32] {
  %359 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 2, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %360 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(3, 2, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 2, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = logical_and(%361, %362) /* ty=Tensor[(3, 2, 12), bool] */;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  %365 = erf(%364) /* ty=Tensor[(3, 2, 12), float32] */;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  cos(%366) /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_7698() -> (Tensor[(11, 11, 7), float32],) {
  %367 = @func_6264() /* ty=(Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) */;
  %368 = %367.1;
  (%368,)
}

def @func_4871() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) {
  %369 = @func_4306() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) */;
  %370 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  %371 = %369.3;
  %372 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  (%370, %371, %372)
}

def @func_113(%var_50: Tensor[(8, 5, 16), float32], %var_53: Tensor[(8, 5, 16), float32]) -> Tensor[(8, 5, 16), float64] {
  %373 = cast(%var_50, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %374 = atan(%373) /* ty=Tensor[(8, 5, 16), float32] */;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %376 = sinh(%375) /* ty=Tensor[(8, 5, 16), float32] */;
  %377 = cast(%var_53, dtype="uint8") /* ty=Tensor[(8, 5, 16), uint8] */;
  %378 = shape_of(%var_50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%var_50, dtype="uint8") /* ty=Tensor[(8, 5, 16), uint8] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %381 = right_shift(%379, %380) /* ty=Tensor[(8, 5, 16), uint8] */;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
  %383 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%376, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%384, %385) /* ty=Tensor[(8, 5, 16), float64] */
}

def @func_6079(%var_6069: Tensor[(13, 11, 14), float64]) -> (Tensor[(13, 11, 14), float64], Tensor[(36), float64]) {
  %386 = cast(%var_6069, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
  %387 = @func_5528() /* ty=(Tensor[(36), float64],) */;
  %388 = sin(%386) /* ty=Tensor[(13, 11, 14), float64] */;
  %389 = %387.0;
  (%388, %389)
}

def @func_5715(%var_5710: Tensor[(847, 11), float32]) -> Tensor[(847, 11), int64] {
  %390 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %391 = %390.3;
  %392 = cast(%391, dtype="int64") /* ty=Tensor[(847, 1), int64] */;
  %393 = cast(%var_5710, dtype="int64") /* ty=Tensor[(847, 11), int64] */;
  add(%392, %393) /* ty=Tensor[(847, 11), int64] */
}

def @func_8254(%var_8155: uint16, %var_8156: Tensor[(11, 9, 16), uint16]) -> (Tensor[(11, 9, 16), bool], Tensor[(11, 11, 7), float32], Tensor[(6, 4, 7), float32], Tensor[(168, 1), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(36), float64], Tensor[(14, 14, 4), uint64], Tensor[(784), uint64]) {
  %394 = cast(%var_8155, dtype="bool") /* ty=bool */;
  %395 = cast(%var_8156, dtype="bool") /* ty=Tensor[(11, 9, 16), bool] */;
  %396 = @func_4871() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) */;
  %397 = cast(meta[relay.Constant][25] /* ty=Tensor[(168, 1), float32] */, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
  %398 = reshape(%397, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %399 = @func_2358(%398) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %400 = @func_3230() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) */;
  %401 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
  %402 = @func_4871() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) */;
  %403 = cast(meta[relay.Constant][26] /* ty=Tensor[(784), uint64] */, dtype="uint64") /* ty=Tensor[(784), uint64] */;
  %404 = reshape(%403, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), uint64] */;
  %405 = @func_3359(%404) /* ty=(Tensor[(14, 14, 4), uint64],) */;
  %406 = greater_equal(%394, %395) /* ty=Tensor[(11, 9, 16), bool] */;
  %407 = %396.2;
  %408 = %399.0;
  %409 = %400.2;
  %410 = %401.0;
  %411 = %402.1;
  %412 = %405.0;
  (%406, %407, %408, meta[relay.Constant][25] /* ty=Tensor[(168, 1), float32] */, %409, %410, %411, %412, meta[relay.Constant][26] /* ty=Tensor[(784), uint64] */)
}

def @func_8699(%var_8653: Tensor[(14, 12, 4), float64]) -> (Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(3, 2, 12), float32], Tensor[(14, 12, 4), float64]) {
  %413 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %414 = reshape(%413, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %415 = @func_7040() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %416 = cast(%var_8653, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %417 = cosh(%416) /* ty=Tensor[(14, 12, 4), float64] */;
  %418 = cast(%var_8653, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %422 = @func_839(%414) /* ty=Tensor[(2, 15, 11), bool] */;
  %423 = %415.2;
  %424 = floor_mod(%420, %421) /* ty=Tensor[(14, 12, 4), float64] */;
  (%422, meta[relay.Constant][27] /* ty=Tensor[(330), uint32] */, %423, %424)
}

def @func_8491() -> (Tensor[(45), float32],) {
  %425 = @func_7837() /* ty=(Tensor[(45), float32],) */;
  %426 = %425.0;
  (%426,)
}

def @func_5265(%var_5253: Tensor[(11, 11, 12), float32]) -> Tensor[(11, 11, 12), int32] {
  %427 = cast(%var_5253, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %428 = atan(%427) /* ty=Tensor[(11, 11, 12), float32] */;
  %429 = cast(%428, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
  %430 = shape_of(%var_5253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_5253, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%431, %432) /* ty=Tensor[(11, 11, 12), int32] */
}

def @func_8382() -> (Tensor[(36), float64], Tensor[(36), float64], Tensor[(330), uint32]) {
  %433 = @func_7896() /* ty=(Tensor[(168), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32]) */;
  %434 = @func_5123() /* ty=Tensor[(36), float64] */;
  %435 = @func_8038() /* ty=Tensor[(36), float64] */;
  %436 = %433.2;
  (%434, %435, %436)
}

def @func_2706(%var_2676: Tensor[(330), uint32]) -> (Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(3, 2, 12), float32], Tensor[(330), uint32], Tensor[(640), float64]) {
  %437 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %438 = cast(%var_2676, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %439 = cast(meta[relay.Constant][28] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %440 = cast(meta[relay.Constant][28] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %441 = reshape(%438, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %442 = reshape(%439, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
  %443 = reshape(%440, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
  %444 = @func_2649(%441, %442, %443) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) */;
  %445 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %446 = %437.2;
  %447 = %444.3;
  (%445, %446, %447, %var_2676, meta[relay.Constant][28] /* ty=Tensor[(640), float64] */)
}

def @func_3894(%var_3861: Tensor[(392), uint32]) -> (Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) {
  %448 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %449 = cast(%var_3861, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %450 = cast(%var_3861, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %451 = reshape(%449, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %452 = reshape(%450, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %453 = @func_3611(%451, %452) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
  %454 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %455 = %454.0;
  %456 = cast(%455, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  %457 = %448.4;
  %458 = %453.2;
  %459 = rsqrt(%456) /* ty=Tensor[(11, 11, 7), float32] */;
  (%457, %458, %var_3861, %459)
}

def @func_6307(%var_6299: bool) -> (Tensor[(6, 13, 8), bool],) {
  %460 = cast(%var_6299, dtype="bool") /* ty=bool */;
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 13, 8), bool] */, dtype="bool") /* ty=Tensor[(6, 13, 8), bool] */;
  %462 = logical_and(%460, %461) /* ty=Tensor[(6, 13, 8), bool] */;
  (%462,)
}

def @func_6456() -> (Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), uint16], Tensor[(784), uint64]) {
  %463 = cast(meta[relay.Constant][30] /* ty=Tensor[(784), uint64] */, dtype="uint64") /* ty=Tensor[(784), uint64] */;
  %464 = reshape(%463, newshape=[784]) /* ty=Tensor[(784), uint64] */;
  %465 = @func_5697(%464) /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), uint16], Tensor[(14, 14, 4), float64], Tensor[(11, 11, 7), float32]) */;
  %466 = @func_5479() /* ty=Tensor[(6, 4, 7), float32] */;
  %467 = @func_2444() /* ty=Tensor[(15, 1, 3), float32] */;
  %468 = %465.1;
  (%466, %467, %468, meta[relay.Constant][30] /* ty=Tensor[(784), uint64] */)
}

def @func_6922() -> Tensor[(36), float64] {
  %469 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %469.0
}

def @func_8903() -> Tensor[(3, 2, 12), float32] {
  @func_7647() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_6094() -> (Tensor[(45), float32],) {
  %470 = @func_4398() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %471 = %470.2;
  (%471,)
}

def @func_7896() -> (Tensor[(168), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32]) {
  %472 = @func_7063() /* ty=(Tensor[(168), float32],) */;
  %473 = cast(meta[relay.Constant][31] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %474 = reshape(%473, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %475 = %472.0;
  %476 = @func_839(%474) /* ty=Tensor[(2, 15, 11), bool] */;
  (%475, %476, meta[relay.Constant][31] /* ty=Tensor[(330), uint32] */)
}

def @func_6782() -> (Tensor[(11, 11, 7), float32],) {
  %477 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  (%477,)
}

def @func_5502() -> Tensor[(36), float64] {
  @func_3331() /* ty=Tensor[(36), float64] */
}

def @func_2358(%var_2353: Tensor[(6, 4, 7), float32]) -> (Tensor[(6, 4, 7), float32],) {
  %478 = cast(%var_2353, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
  %479 = cosh(%478) /* ty=Tensor[(6, 4, 7), float32] */;
  (%479,)
}

def @func_3908() -> Tensor[(168), float32] {
  %480 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %480.2
}

def @func_5955() -> (Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) {
  %481 = @func_3318() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) */;
  %482 = @func_5479() /* ty=Tensor[(6, 4, 7), float32] */;
  %483 = %481.2;
  (%482, %483)
}

def @func_6292() -> (Tensor[(36), float64], Tensor[(36), float64], Tensor[(3, 2, 12), float32]) {
  %484 = @func_4358() /* ty=(Tensor[(36), float64],) */;
  %485 = @func_4358() /* ty=(Tensor[(36), float64],) */;
  %486 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %487 = %484.0;
  %488 = %485.0;
  %489 = %486.0;
  (%487, %488, %489)
}

def @main(%var_8928: Tensor[(392, 1), uint32], %var_8955: Tensor[(330), uint32], %var_8971: Tensor[(392, 2), uint32]) -> (Tensor[(640), float32], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(11, 11, 7), float64], Tensor[(392, 2), float32]) {
  %490 = cast(%var_8928, dtype="uint32") /* ty=Tensor[(392, 1), uint32] */;
  %491 = cast(meta[relay.Constant][32] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %492 = reshape(%490, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint32] */;
  %493 = reshape(%491, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %494 = @func_6887(%492, %493) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) */;
  %495 = cast(%var_8955, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %496 = reshape(%495, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %497 = cast(meta[relay.Constant][33] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %498 = reshape(%497, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %499 = @func_2832(%498) /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %500 = @func_4306() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) */;
  %501 = %500.0;
  %502 = cast(%501, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
  %503 = cast(%var_8928, dtype="int32") /* ty=Tensor[(392, 1), int32] */;
  %504 = cast(%var_8971, dtype="int32") /* ty=Tensor[(392, 2), int32] */;
  %505 = maximum(%503, %504) /* ty=Tensor[(392, 2), int32] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(392, 2), float32] */;
  %507 = %494.5;
  %508 = @func_839(%496) /* ty=Tensor[(2, 15, 11), bool] */;
  %509 = %499.2;
  %510 = asinh(%502) /* ty=Tensor[(11, 11, 7), float64] */;
  %511 = cos(%506) /* ty=Tensor[(392, 2), float32] */;
  (%507, meta[relay.Constant][32] /* ty=Tensor[(640), float32] */, %508, %var_8955, %509, meta[relay.Constant][33] /* ty=Tensor[(168), float32] */, %510, %511)
}

def @func_4753() -> Tensor[(11, 11, 7), float32] {
  @func_4736() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_7837() -> (Tensor[(45), float32],) {
  %512 = @func_4398() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %513 = %512.2;
  (%513,)
}

def @func_7040() -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) {
  %514 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
  %515 = @func_5123() /* ty=Tensor[(36), float64] */;
  %516 = @func_5479() /* ty=Tensor[(6, 4, 7), float32] */;
  %517 = %514.1;
  (%515, %516, %517)
}

def @func_3318() -> (Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) {
  %518 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %519 = %518.2;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(45), float32] */;
  %521 = reshape(%520, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %522 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  %523 = @func_1230(%521) /* ty=Tensor[(15, 1, 3), float32] */;
  (%522, %519, %523)
}

def @func_5008() -> Tensor[(13, 7, 4), float64] {
  %524 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
  %525 = log(%524) /* ty=Tensor[(13, 7, 4), float64] */;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
  %527 = atan(%526) /* ty=Tensor[(13, 7, 4), float64] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
  %529 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%525, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  multiply(%530, %531) /* ty=Tensor[(13, 7, 4), float64] */
}

def @func_2735(%var_2728: float32, %var_2729: Tensor[(11, 11, 7), float32]) -> (Tensor[(11, 11, 7), float32],) {
  %532 = cast(%var_2728, dtype="float32") /* ty=float32 */;
  %533 = cast(%var_2729, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  %534 = floor_mod(%532, %533) /* ty=Tensor[(11, 11, 7), float32] */;
  (%534,)
}

def @func_4431() -> (Tensor[(11, 11, 7), float32],) {
  %535 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %536 = %535.0;
  (%536,)
}

def @func_1979(%var_1973: Tensor[(800), int16]) -> (Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) {
  %537 = cast(%var_1973, dtype="int16") /* ty=Tensor[(800), int16] */;
  %538 = reshape(%537, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), int16] */;
  %539 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  %541 = reshape(%540, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float32] */;
  %542 = @func_1876(%538) /* ty=Tensor[(5, 10, 16), int64] */;
  %543 = @func_1929(%541) /* ty=Tensor[(3, 2, 12), bool] */;
  (%539, %542, %var_1973, %543)
}

def @func_6402() -> Tensor[(36), bool] {
  %544 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %545 = %544.4;
  %546 = cast(meta[relay.Constant][35] /* ty=Tensor[(36), float64] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(1), int32] */;
  %548 = cast(%545, dtype="bool") /* ty=Tensor[(36), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater_equal(%548, %549) /* ty=Tensor[(36), bool] */
}

def @func_6764(%var_6717: Tensor[(10, 15, 6), float64]) -> Tensor[(10, 15, 6), float64] {
  %550 = cast(%var_6717, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %551 = log(%550) /* ty=Tensor[(10, 15, 6), float64] */;
  %552 = cast(%var_6717, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%554, %555) /* ty=Tensor[(10, 15, 6), float64] */
}

def @func_7063() -> (Tensor[(168), float32],) {
  %556 = @func_3908() /* ty=Tensor[(168), float32] */;
  (%556,)
}

def @func_8778() -> (Tensor[(36), float64], Tensor[(168), float32], Tensor[(168), float32]) {
  %557 = cast(meta[relay.Constant][36] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %558 = reshape(%557, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %559 = @func_2832(%558) /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %560 = @func_5502() /* ty=Tensor[(36), float64] */;
  %561 = %559.2;
  (%560, %561, meta[relay.Constant][36] /* ty=Tensor[(168), float32] */)
}

def @func_1876(%var_1848: Tensor[(5, 10, 16), int16]) -> Tensor[(5, 10, 16), int64] {
  %562 = cast(%var_1848, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %563 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 10, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 10, 16), int16] */, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = equal(%564, %565) /* ty=Tensor[(5, 10, 16), bool] */;
  %567 = cast(%566, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %568 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 10, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 10, 16), int16] */, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %571 = logical_or(%569, %570) /* ty=Tensor[(5, 10, 16), bool] */;
  %572 = cast(%var_1848, dtype="int64") /* ty=Tensor[(5, 10, 16), int64] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="int64") /* ty=Tensor[(5, 10, 16), int64] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%574, %575) /* ty=Tensor[(5, 10, 16), int64] */
}

def @func_8435() -> (Tensor[(168), float32],) {
  %576 = @func_7063() /* ty=(Tensor[(168), float32],) */;
  %577 = %576.0;
  (%577,)
}

def @func_5619() -> (Tensor[(3, 2, 12), float32],) {
  %578 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
  %579 = %578.2;
  (%579,)
}

def @func_3252() -> Tensor[(36), float64] {
  %580 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %580.0
}

def @func_5568(%var_5561: int64, %var_5562: Tensor[(11, 4, 1), int64]) -> (Tensor[(11, 4, 1), bool],) {
  %581 = cast(%var_5561, dtype="bool") /* ty=bool */;
  %582 = cast(%var_5562, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
  %583 = greater_equal(%581, %582) /* ty=Tensor[(11, 4, 1), bool] */;
  (%583,)
}

def @func_6887(%var_6880: Tensor[(7, 56), uint32], %var_6885: Tensor[(640), float32]) -> (Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) {
  %584 = @func_6456() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), uint16], Tensor[(784), uint64]) */;
  %585 = %584.2;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  %587 = cast(%var_6880, dtype="uint32") /* ty=Tensor[(7, 56), uint32] */;
  %588 = cast(%var_6880, dtype="uint32") /* ty=Tensor[(7, 56), uint32] */;
  %589 = reshape(%587, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %590 = reshape(%588, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %591 = @func_3611(%589, %590) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
  %592 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 56), int64] */, dtype="int64") /* ty=Tensor[(3, 56), int64] */;
  %593 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 56), int64] */, dtype="int64") /* ty=Tensor[(3, 56), int64] */;
  %594 = cast(%var_6885, dtype="float32") /* ty=Tensor[(640), float32] */;
  %595 = reshape(%592, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %596 = reshape(%593, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %597 = reshape(%594, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %598 = @func_1315(%595, %596, %597) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) */;
  %599 = acosh(%586) /* ty=Tensor[(3, 2, 12), float32] */;
  %600 = %591.1;
  %601 = %598.5;
  (%599, %600, %var_6880, %601, meta[relay.Constant][38] /* ty=Tensor[(3, 56), int64] */, %var_6885)
}

def @func_2804(%var_2797: Tensor[(640), float64]) -> (Tensor[(3, 2, 12), float32], Tensor[(8, 5, 16), float64], Tensor[(330), uint32], Tensor[(640), float64]) {
  %602 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  %604 = cast(meta[relay.Constant][39] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %605 = cast(%var_2797, dtype="float64") /* ty=Tensor[(640), float64] */;
  %606 = cast(%var_2797, dtype="float64") /* ty=Tensor[(640), float64] */;
  %607 = reshape(%604, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %608 = reshape(%605, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
  %609 = reshape(%606, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
  %610 = @func_2649(%607, %608, %609) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) */;
  %611 = atanh(%603) /* ty=Tensor[(3, 2, 12), float32] */;
  %612 = %610.2;
  (%611, %612, meta[relay.Constant][39] /* ty=Tensor[(330), uint32] */, %var_2797)
}

def @func_6644() -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32]) {
  %613 = @func_6264() /* ty=(Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) */;
  %614 = %613.1;
  %615 = @func_3908() /* ty=Tensor[(168), float32] */;
  (%614, %615)
}

def @func_7790() -> Tensor[(11, 11, 7), float32] {
  %616 = @func_6067() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %616.0
}

def @func_7113() -> (Tensor[(36), float64],) {
  %617 = @func_7040() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %618 = %617.0;
  (%618,)
}

def @func_1315(%var_1273: Tensor[(7, 12, 2), int64], %var_1274: Tensor[(7, 12, 2), int64], %var_1282: Tensor[(640), float32]) -> (Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) {
  %619 = cast(%var_1282, dtype="float32") /* ty=Tensor[(640), float32] */;
  %620 = cast(%var_1282, dtype="float32") /* ty=Tensor[(640), float32] */;
  %621 = reshape(%619, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %622 = reshape(%620, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %623 = cast(meta[relay.Constant][40] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %624 = reshape(%623, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %625 = cast(%var_1274, dtype="int64") /* ty=Tensor[(7, 12, 2), int64] */;
  %626 = shape_of(%var_1273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_1273, dtype="int64") /* ty=Tensor[(7, 12, 2), int64] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %629 = subtract(%627, %628) /* ty=Tensor[(7, 12, 2), int64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %631 = tan(%630) /* ty=Tensor[(7, 12, 2), float64] */;
  %632 = cast(%629, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %636 = cast(%631, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %637 = @func_113(%621, %622) /* ty=Tensor[(8, 5, 16), float64] */;
  %638 = @func_839(%624) /* ty=Tensor[(2, 15, 11), bool] */;
  %639 = greater_equal(%634, %635) /* ty=Tensor[(7, 12, 2), bool] */;
  %640 = cosh(%636) /* ty=Tensor[(7, 12, 2), float64] */;
  (%637, %var_1282, %638, meta[relay.Constant][40] /* ty=Tensor[(330), uint32] */, %639, %640)
}

def @func_4736() -> Tensor[(11, 11, 7), float32] {
  %641 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  sigmoid(%642) /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_2949() -> Tensor[(11, 11, 7), float32] {
  %643 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %643.1
}

def @func_3968() -> (Tensor[(45), float32],) {
  %644 = @func_3318() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) */;
  %645 = %644.1;
  (%645,)
}

def @func_4306() -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) {
  %646 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %647 = @func_3950() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %648 = %646.0;
  %649 = @func_3908() /* ty=Tensor[(168), float32] */;
  %650 = %647.1;
  %651 = @func_3252() /* ty=Tensor[(36), float64] */;
  (%648, %649, %650, %651)
}

def @func_3833(%var_3785: Tensor[(330, 1), uint32], %var_3790: Tensor[(392), uint32]) -> (Tensor[(2, 15, 11), bool], Tensor[(330, ?), uint32], Tensor[(4, 7, 14), uint32], Tensor[(392), uint32], Tensor[(2, 9, 2), float64], Tensor[(330, 36), float64], Tensor[(11, 11, 7), float32], Tensor[(4, 7, 14), float32], Tensor[(3, 2, 12), bool], Tensor[(72), float32]) {
  %652 = cast(meta[relay.Constant][41] /* ty=Tensor[(330, 1), uint32] */, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
  %653 = reshape(%652, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %654 = cast(%var_3785, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
  %655 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(330, 1), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %656 = cast(meta[relay.Constant][41] /* ty=Tensor[(330, 1), uint32] */, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %658 = cast(%var_3790, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %659 = cast(%var_3790, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %660 = reshape(%658, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %661 = reshape(%659, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %662 = @func_3611(%660, %661) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
  %663 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %664 = %663.4;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(36), float64] */;
  %666 = cast(%664, dtype="float64") /* ty=Tensor[(36), float64] */;
  %667 = reshape(%665, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %668 = reshape(%666, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %669 = @func_2061(%667, %668) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
  %670 = cast(%664, dtype="int32") /* ty=Tensor[(36), int32] */;
  %671 = cast(meta[relay.Constant][41] /* ty=Tensor[(330, 1), uint32] */, dtype="int32") /* ty=Tensor[(330, 1), int32] */;
  %672 = bitwise_xor(%670, %671) /* ty=Tensor[(330, 36), int32] */;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(330, 36), float32] */;
  %674 = cosh(%673) /* ty=Tensor[(330, 36), float32] */;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(330, 36), float64] */;
  %676 = atanh(%675) /* ty=Tensor[(330, 36), float64] */;
  %677 = cast(%676, dtype="float64") /* ty=Tensor[(330, 36), float64] */;
  %678 = cast(%var_3785, dtype="float64") /* ty=Tensor[(330, 1), float64] */;
  %679 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %680 = %662.0;
  %681 = cast(%680, dtype="uint32") /* ty=Tensor[(4, 7, 14), uint32] */;
  %682 = cast(%var_3790, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %683 = reshape(%681, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %684 = reshape(%682, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %685 = @func_3611(%683, %684) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
  %686 = cast(meta[relay.Constant][42] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %687 = reshape(%686, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float32] */;
  %688 = @func_839(%653) /* ty=Tensor[(2, 15, 11), bool] */;
  %689 = maximum(%656, %657) /* ty=Tensor[(330, ?), uint32] */;
  %690 = %669.1;
  %691 = floor_mod(%677, %678) /* ty=Tensor[(330, 36), float64] */;
  %692 = %679.0;
  %693 = %685.1;
  %694 = @func_1929(%687) /* ty=Tensor[(3, 2, 12), bool] */;
  (%688, %689, %680, %var_3790, %690, %691, %692, %693, %694, meta[relay.Constant][42] /* ty=Tensor[(72), float32] */)
}

def @func_5084() -> Tensor[(36), float64] {
  @func_4496() /* ty=Tensor[(36), float64] */
}

def @func_5601() -> Tensor[(11, 11, 7), float32] {
  %695 = @func_3950() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %695.0
}

def @func_8394() -> (Tensor[(13, 7, 4), float64],) {
  %696 = @func_5008() /* ty=Tensor[(13, 7, 4), float64] */;
  (%696,)
}

def @func_6792() -> Tensor[(11, 11, 7), float32] {
  @func_5153() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_2912() -> (Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) {
  %697 = cast(0.894142f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %698 = cast(meta[relay.Constant][43] /* ty=Tensor[(847, 1), float32] */, dtype="float32") /* ty=Tensor[(847, 1), float32] */;
  %699 = reshape(%697, newshape=[]) /* ty=float32 */;
  %700 = reshape(%698, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
  %701 = @func_2735(%699, %700) /* ty=(Tensor[(11, 11, 7), float32],) */;
  %702 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %703 = %701.0;
  (%702, %703, 0.894142f /* ty=float32 */, meta[relay.Constant][43] /* ty=Tensor[(847, 1), float32] */)
}

def @func_4358() -> (Tensor[(36), float64],) {
  %704 = @func_3331() /* ty=Tensor[(36), float64] */;
  (%704,)
}

def @func_7384() -> Tensor[(11, 11, 7), float32] {
  %705 = @func_6067() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %705.0
}

def @func_8858() -> (Tensor[(36), float64], Tensor[(16, 11, 6), uint8], Tensor[(36), float64], Tensor[(45), float32], Tensor[(16, 11, 6), float32]) {
  %706 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
  %707 = cosh(%706) /* ty=Tensor[(16, 11, 6), float32] */;
  %708 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 11, 6), float32] */, dtype="uint8") /* ty=Tensor[(16, 11, 6), uint8] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="uint8") /* ty=Tensor[(16, 11, 6), uint8] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %712 = @func_8382() /* ty=(Tensor[(36), float64], Tensor[(36), float64], Tensor[(330), uint32]) */;
  %713 = @func_6094() /* ty=(Tensor[(45), float32],) */;
  %714 = cast(%707, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
  %715 = @func_3331() /* ty=Tensor[(36), float64] */;
  %716 = left_shift(%710, %711) /* ty=Tensor[(16, 11, 6), uint8] */;
  %717 = %712.1;
  %718 = %713.0;
  %719 = asin(%714) /* ty=Tensor[(16, 11, 6), float32] */;
  (%715, %716, %717, %718, %719)
}

def @func_8078(%var_8076: Tensor[(20, 32), float32]) -> (Tensor[(3, 2, 12), float64], Tensor[(8, 5, 16), float64], Tensor[(20, 32), float32]) {
  %720 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
  %723 = cast(%var_8076, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %724 = cast(%var_8076, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %725 = reshape(%723, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %726 = reshape(%724, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %727 = exp(%722) /* ty=Tensor[(3, 2, 12), float64] */;
  %728 = @func_113(%725, %726) /* ty=Tensor[(8, 5, 16), float64] */;
  (%727, %728, %var_8076)
}

def @func_8451() -> (Tensor[(11, 11, 7), float32],) {
  %729 = @func_6792() /* ty=Tensor[(11, 11, 7), float32] */;
  (%729,)
}

def @func_2278(%var_2246: Tensor[(13, 2, 1), float64], %var_2256: Tensor[(330), uint32]) -> (Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) {
  %730 = cast(meta[relay.Constant][46] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %731 = cast(meta[relay.Constant][46] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %732 = reshape(%730, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %733 = reshape(%731, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %734 = @func_2061(%732, %733) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
  %735 = cast(%var_2256, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %736 = reshape(%735, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %737 = cast(%var_2246, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %738 = cosh(%737) /* ty=Tensor[(13, 2, 1), float64] */;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %740 = cast(%var_2256, dtype="float64") /* ty=Tensor[(330), float64] */;
  %741 = %734.1;
  %742 = @func_839(%736) /* ty=Tensor[(2, 15, 11), bool] */;
  %743 = power(%739, %740) /* ty=Tensor[(13, 2, 330), float64] */;
  (%741, meta[relay.Constant][46] /* ty=Tensor[(36), float64] */, %742, %743)
}

def @func_993(%var_969: Tensor[(11, 16, 5), float64], %var_978: Tensor[(11, 16, 5), float32], %var_988: Tensor[(10, 64), float32]) -> (Tensor[(11, 16, 5), float32], Tensor[(8, 5, 16), float64], Tensor[(10, 64), float32]) {
  %744 = cast(%var_969, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %745 = log2(%744) /* ty=Tensor[(11, 16, 5), float64] */;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
  %747 = sin(%746) /* ty=Tensor[(11, 16, 5), float32] */;
  %748 = cast(%var_978, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = equal(%750, %751) /* ty=Tensor[(11, 16, 5), bool] */;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
  %754 = cast(%var_988, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %755 = cast(%var_988, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
  %756 = reshape(%754, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %757 = reshape(%755, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %758 = atan(%753) /* ty=Tensor[(11, 16, 5), float32] */;
  %759 = @func_113(%756, %757) /* ty=Tensor[(8, 5, 16), float64] */;
  (%758, %759, %var_988)
}

def @func_3950() -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) {
  %760 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %761 = %760.0;
  %762 = @func_3550() /* ty=Tensor[(3, 2, 12), float32] */;
  (%761, %762)
}

def @func_7534(%var_7528: Tensor[(9, 5, 14), int8], %var_7529: Tensor[(9, 5, 14), int8]) -> (Tensor[(9, 5, 14), int8],) {
  %763 = cast(%var_7529, dtype="int8") /* ty=Tensor[(9, 5, 14), int8] */;
  %764 = shape_of(%var_7528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%var_7528, dtype="int8") /* ty=Tensor[(9, 5, 14), int8] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %767 = bitwise_or(%765, %766) /* ty=Tensor[(9, 5, 14), int8] */;
  (%767,)
}

def @func_5429() -> Tensor[(11, 11, 7), float32] {
  @func_4911() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_8038() -> Tensor[(36), float64] {
  @func_4496() /* ty=Tensor[(36), float64] */
}

def @func_6067() -> (Tensor[(11, 11, 7), float32],) {
  %768 = @func_4753() /* ty=Tensor[(11, 11, 7), float32] */;
  (%768,)
}

def @func_5123() -> Tensor[(36), float64] {
  @func_3331() /* ty=Tensor[(36), float64] */
}

def @func_7558() -> (Tensor[(36), float64],) {
  %769 = @func_5502() /* ty=Tensor[(36), float64] */;
  (%769,)
}

def @func_7647() -> Tensor[(3, 2, 12), float32] {
  %770 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
  %770.1
}

def @func_364(%var_330: float64, %var_331: Tensor[(10, 9, 1), float64]) -> (Tensor[(10, 9, ?), uint64], Tensor[(10, 9, ?), int64]) {
  %771 = cast(%var_330, dtype="float64") /* ty=float64 */;
  %772 = cast(%var_331, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
  %773 = power(%771, %772) /* ty=Tensor[(10, 9, 1), float64] */;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
  %775 = sinh(%774) /* ty=Tensor[(10, 9, 1), float32] */;
  %776 = cast(%773, dtype="uint64") /* ty=Tensor[(10, 9, 1), uint64] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="uint64") /* ty=Tensor[(10, 9, 1), uint64] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %780 = cast(%773, dtype="int64") /* ty=Tensor[(10, 9, 1), int64] */;
  %781 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%775, dtype="int64") /* ty=Tensor[(10, 9, 1), int64] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %784 = add(%778, %779) /* ty=Tensor[(10, 9, ?), uint64] */;
  %785 = bitwise_or(%782, %783) /* ty=Tensor[(10, 9, ?), int64] */;
  (%784, %785)
}

def @func_2183() -> (Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) {
  %786 = cast(meta[relay.Constant][47] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %787 = reshape(%786, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %788 = cast(meta[relay.Constant][48] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %789 = cast(meta[relay.Constant][48] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %790 = reshape(%788, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %791 = reshape(%789, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %792 = @func_2061(%790, %791) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
  %793 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %794 = @func_1230(%787) /* ty=Tensor[(15, 1, 3), float32] */;
  %795 = %792.0;
  (%793, %794, meta[relay.Constant][47] /* ty=Tensor[(45), float32] */, %795, meta[relay.Constant][48] /* ty=Tensor[(36), float64] */)
}

def @func_4099(%var_4055: Tensor[(3, 14, 9), uint8], %var_4056: Tensor[(3, 14, 9), uint8], %var_4065: Tensor[(640), float32], %var_4082: Tensor[(1, 847), float32]) -> (Tensor[(3, 14, 9), uint8], Tensor[(7, 12, 2), float64], Tensor[(168), int64], Tensor[(640), float32], Tensor[(11, 11, 7), float32], Tensor[(1, 847), float32], Tensor[(3, 14, 9), uint32]) {
  %796 = cast(%var_4056, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
  %797 = shape_of(%var_4055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_4055, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %800 = cast(meta[relay.Constant][49] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %801 = cast(meta[relay.Constant][49] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %802 = cast(%var_4065, dtype="float32") /* ty=Tensor[(640), float32] */;
  %803 = reshape(%800, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %804 = reshape(%801, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %805 = reshape(%802, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %806 = @func_1315(%803, %804, %805) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) */;
  %807 = cast(%var_4082, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %808 = reshape(%807, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
  %809 = cast(%var_4055, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %810 = shape_of(%var_4056, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%var_4056, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %813 = subtract(%798, %799) /* ty=Tensor[(3, 14, 9), uint8] */;
  %814 = %806.5;
  %815 = @func_3436(%808) /* ty=Tensor[(11, 11, 7), float32] */;
  %816 = bitwise_or(%811, %812) /* ty=Tensor[(3, 14, 9), uint32] */;
  (%813, %814, meta[relay.Constant][49] /* ty=Tensor[(168), int64] */, %var_4065, %815, %var_4082, %816)
}

def @func_5479() -> Tensor[(6, 4, 7), float32] {
  %817 = @func_3230() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) */;
  %817.2
}

def @func_4210(%var_4190: Tensor[(12, 1, 4), float32]) -> Tensor[(12, 1, 4), float32] {
  %818 = cast(%var_4190, dtype="float32") /* ty=Tensor[(12, 1, 4), float32] */;
  sinh(%818) /* ty=Tensor[(12, 1, 4), float32] */
}

def @func_6686(%var_6671: Tensor[(14, 3, 3), bool], %var_6672: Tensor[(14, 3, 3), bool]) -> Tensor[(14, 3, 3), bool] {
  %819 = cast(%var_6672, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %820 = shape_of(%var_6671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_6671, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%821, %822) /* ty=Tensor[(14, 3, 3), bool] */
}

def @func_7304(%var_7251: Tensor[(392), uint32]) -> (Tensor[(11, 11, 7), float32], Tensor[(15, ?, 3), float32], Tensor[(15, ?, 3), bool], Tensor[(36), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32], Tensor[(36), bool]) {
  %823 = @func_5955() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) */;
  %824 = %823.1;
  %825 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %826 = %825.2;
  %827 = cast(%824, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
  %828 = cast(%826, dtype="bool") /* ty=bool */;
  %829 = less_equal(%827, %828) /* ty=Tensor[(15, 1, 3), bool] */;
  %830 = cast(%829, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
  %831 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%824, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %834 = cast(%824, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
  %835 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%829, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %838 = cast(%var_7251, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %839 = reshape(%838, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %840 = @func_3894(%839) /* ty=(Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) */;
  %841 = cast(%826, dtype="float32") /* ty=float32 */;
  %842 = @func_4753() /* ty=Tensor[(11, 11, 7), float32] */;
  %843 = cast(%842, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  %844 = reshape(%841, newshape=[]) /* ty=float32 */;
  %845 = reshape(%843, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
  %846 = @func_2735(%844, %845) /* ty=(Tensor[(11, 11, 7), float32],) */;
  %847 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %848 = add(%832, %833) /* ty=Tensor[(15, ?, 3), float32] */;
  %849 = logical_or(%836, %837) /* ty=Tensor[(15, ?, 3), bool] */;
  %850 = %840.0;
  %851 = %846.0;
  %852 = %847.0;
  %853 = @func_6402() /* ty=Tensor[(36), bool] */;
  (%842, %848, %849, %850, %var_7251, %851, %852, %853)
}

def @func_5153() -> Tensor[(11, 11, 7), float32] {
  %854 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %854.0
}

def @func_8520(%var_8505: Tensor[(45), float32], %var_8506: Tensor[(330), uint32]) -> (Tensor[(168), float32], Tensor[(6, 4, 7), float32], Tensor[(36), float64], Tensor[(45), float32], Tensor[(330), uint32], Tensor[(640), float32]) {
  %855 = @func_7063() /* ty=(Tensor[(168), float32],) */;
  %856 = %855.0;
  %857 = cast(%856, dtype="float32") /* ty=Tensor[(168), float32] */;
  %858 = reshape(%857, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %859 = @func_2358(%858) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %860 = cast(%var_8505, dtype="float32") /* ty=Tensor[(45), float32] */;
  %861 = cast(%var_8506, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %862 = cast(meta[relay.Constant][50] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %863 = reshape(%860, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %864 = reshape(%861, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %865 = reshape(%862, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %866 = @func_6239(%863, %864, %865) /* ty=(Tensor[(15, ?, 3), int64], Tensor[(11, 11, 7), float32], Tensor[(2, 9, 2), float64], uint32, Tensor[(330), uint32], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(168), int64], Tensor[(640), float32]) */;
  %867 = %859.0;
  %868 = %866.5;
  (%856, %867, %868, %var_8505, %var_8506, meta[relay.Constant][50] /* ty=Tensor[(640), float32] */)
}

def @func_7485() -> (Tensor[(168), float32], Tensor[(15, 1, 3), float32]) {
  %869 = @func_7063() /* ty=(Tensor[(168), float32],) */;
  %870 = @func_5955() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) */;
  %871 = %869.0;
  %872 = %870.1;
  (%871, %872)
}

def @func_7525() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64]) {
  %873 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %874 = @func_6792() /* ty=Tensor[(11, 11, 7), float32] */;
  %875 = %873.4;
  (%874, %875)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6488(%var_6486: Tensor[(15, 9, 14), int16], %var_6487: Tensor[(15, 9, 14), int16]) -> (Tensor[(15, 9, 14), int16], Tensor[(15, 9, 14), bool], Tensor[(6, 13, 8), bool], bool) {
  %14 = fn (%var_6461: Tensor[(15, 9, 14), int16], %var_6469: Tensor[(15, 9, 14), int16]) -> (Tensor[(15, 9, 14), int16], Tensor[(15, 9, 14), bool], Tensor[(6, 13, 8), bool], bool) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 9, 14), int16] */, dtype="int16") /* ty=Tensor[(15, 9, 14), int16] */;
    %1 = shape_of(%var_6461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_6461, dtype="int16") /* ty=Tensor[(15, 9, 14), int16] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %4 = cast(%var_6469, dtype="bool") /* ty=Tensor[(15, 9, 14), bool] */;
    %5 = shape_of(%var_6461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%var_6461, dtype="bool") /* ty=Tensor[(15, 9, 14), bool] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %8 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %9 = reshape(%8, newshape=[]) /* ty=bool */;
    %10 = @func_6307(%9) /* ty=(Tensor[(6, 13, 8), bool],) */;
    %11 = bitwise_and(%2, %3) /* ty=Tensor[(15, 9, 14), int16] */;
    %12 = equal(%6, %7) /* ty=Tensor[(15, 9, 14), bool] */;
    %13 = %10.0;
    (%11, %12, %13, True /* ty=bool */)
  };
  %14(%var_6486, %var_6487) /* ty=(Tensor[(15, 9, 14), int16], Tensor[(15, 9, 14), bool], Tensor[(6, 13, 8), bool], bool) */
}

def @func_4674(%var_4634: Tensor[(168), int64], %var_4635: Tensor[(320, 2), float32]) -> (Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(330, 1), uint32], float32, Tensor[(7, 12, 2), bool], Tensor[(168), int64], Tensor[(320, 2), float32], Tensor[(10, 9, ?), uint64], Tensor[(15, 6), float64], Tensor[(11, 11, 7), float32], Tensor[(847), float32]) {
  %15 = @func_4398() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(330, 1), uint32] */, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
  %17 = reshape(%16, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %18 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %19 = cast(%var_4634, dtype="int64") /* ty=Tensor[(168), int64] */;
  %20 = cast(%var_4634, dtype="int64") /* ty=Tensor[(168), int64] */;
  %21 = cast(%var_4635, dtype="float32") /* ty=Tensor[(320, 2), float32] */;
  %22 = reshape(%19, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %23 = reshape(%20, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %24 = reshape(%21, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %25 = @func_1315(%22, %23, %24) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) */;
  %26 = %18.2;
  %27 = cast(%26, dtype="float64") /* ty=float64 */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 6), float64] */;
  %29 = reshape(%27, newshape=[]) /* ty=float64 */;
  %30 = reshape(%28, newshape=[10, 9, 1]) /* ty=Tensor[(10, 9, 1), float64] */;
  %31 = @func_364(%29, %30) /* ty=(Tensor[(10, 9, ?), uint64], Tensor[(10, 9, ?), int64]) */;
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(847), float32] */, dtype="float32") /* ty=Tensor[(847), float32] */;
  %33 = reshape(%32, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
  %34 = %15.6;
  %35 = @func_839(%17) /* ty=Tensor[(2, 15, 11), bool] */;
  %36 = %25.4;
  %37 = %31.0;
  %38 = @func_3436(%33) /* ty=Tensor[(11, 11, 7), float32] */;
  (%34, %35, meta[relay.Constant][1] /* ty=Tensor[(330, 1), uint32] */, %26, %36, %var_4634, %var_4635, %37, meta[relay.Constant][2] /* ty=Tensor[(15, 6), float64] */, %38, meta[relay.Constant][3] /* ty=Tensor[(847), float32] */)
}

def @func_7980(%var_7979: Tensor[(392), uint32]) -> (Tensor[(3, 2, 12), float32], Tensor[(72), float32], Tensor[(330), uint32], Tensor[(392), uint32]) {
  %47 = fn (%var_7975: Tensor[(392), uint32]) -> (Tensor[(3, 2, 12), float32], Tensor[(72), float32], Tensor[(330), uint32], Tensor[(392), uint32]) {
    %39 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
    %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %41 = cast(%var_7975, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %42 = reshape(%40, newshape=[330, 1]) /* ty=Tensor[(330, 1), uint32] */;
    %43 = reshape(%41, newshape=[392]) /* ty=Tensor[(392), uint32] */;
    %44 = @func_3833(%42, %43) /* ty=(Tensor[(2, 15, 11), bool], Tensor[(330, ?), uint32], Tensor[(4, 7, 14), uint32], Tensor[(392), uint32], Tensor[(2, 9, 2), float64], Tensor[(330, 36), float64], Tensor[(11, 11, 7), float32], Tensor[(4, 7, 14), float32], Tensor[(3, 2, 12), bool], Tensor[(72), float32]) */;
    %45 = %39.0;
    %46 = %44.9;
    (%45, %46, meta[relay.Constant][4] /* ty=Tensor[(330), uint32] */, %var_7975)
  };
  %47(%var_7979) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(72), float32], Tensor[(330), uint32], Tensor[(392), uint32]) */
}

def @func_2950() -> Tensor[(11, 11, 7), float32] {
  %49 = fn () -> Tensor[(11, 11, 7), float32] {
    %48 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
    %48.1
  };
  %49() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_367(%var_365: float64, %var_366: Tensor[(10, 9, 1), float64]) -> (Tensor[(10, 9, ?), uint64], Tensor[(10, 9, ?), int64]) {
  %65 = fn (%var_330: float64, %var_331: Tensor[(10, 9, 1), float64]) -> (Tensor[(10, 9, ?), uint64], Tensor[(10, 9, ?), int64]) {
    %50 = cast(%var_330, dtype="float64") /* ty=float64 */;
    %51 = cast(%var_331, dtype="float64") /* ty=Tensor[(10, 9, 1), float64] */;
    %52 = power(%50, %51) /* ty=Tensor[(10, 9, 1), float64] */;
    %53 = cast(%52, dtype="float32") /* ty=Tensor[(10, 9, 1), float32] */;
    %54 = sinh(%53) /* ty=Tensor[(10, 9, 1), float32] */;
    %55 = cast(%52, dtype="uint64") /* ty=Tensor[(10, 9, 1), uint64] */;
    %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
    %57 = cast(%54, dtype="uint64") /* ty=Tensor[(10, 9, 1), uint64] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %59 = cast(%52, dtype="int64") /* ty=Tensor[(10, 9, 1), int64] */;
    %60 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%54, dtype="int64") /* ty=Tensor[(10, 9, 1), int64] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %63 = add(%57, %58) /* ty=Tensor[(10, 9, ?), uint64] */;
    %64 = bitwise_or(%61, %62) /* ty=Tensor[(10, 9, ?), int64] */;
    (%63, %64)
  };
  %65(%var_365, %var_366) /* ty=(Tensor[(10, 9, ?), uint64], Tensor[(10, 9, ?), int64]) */
}

def @func_2282(%var_2280: Tensor[(13, 2, 1), float64], %var_2281: Tensor[(330), uint32]) -> (Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) {
  @func_2278(%var_2280, %var_2281) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) */
}

def @func_8647() -> (Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) {
  @func_8645() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) */
}

def @func_4496() -> Tensor[(36), float64] {
  %66 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %66.0
}

def @func_5502() -> Tensor[(36), float64] {
  @func_3331() /* ty=Tensor[(36), float64] */
}

def @func_5795(%var_5775: Tensor[(26), float64]) -> (Tensor[(36), float64], Tensor[(26), float64], Tensor[(330), uint32], Tensor[(3, 1, 3), float32], Tensor[(11, 11, 7), float32]) {
  %67 = cast(%var_5775, dtype="float64") /* ty=Tensor[(26), float64] */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %69 = reshape(%67, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %70 = reshape(%68, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %71 = @func_2278(%69, %70) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) */;
  %72 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %73 = atan(%72) /* ty=Tensor[(3, 1, 3), float64] */;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %75 = %71.1;
  %76 = acos(%74) /* ty=Tensor[(3, 1, 3), float32] */;
  %77 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  (%75, %var_5775, meta[relay.Constant][5] /* ty=Tensor[(330), uint32] */, %76, %77)
}

def @func_8887(%var_8883: Tensor[(392), uint32]) -> (Tensor[(15, 1, 3), float32], Tensor[(4, 7, 14), float32], Tensor[(392), uint32], Tensor[(640), float32]) {
  %78 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
  %79 = cast(%var_8883, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %81 = reshape(%79, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint32] */;
  %82 = reshape(%80, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %83 = @func_6887(%81, %82) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) */;
  %84 = %78.1;
  %85 = %83.1;
  (%84, %85, %var_8883, meta[relay.Constant][7] /* ty=Tensor[(640), float32] */)
}

def @func_3091() -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) {
  %89 = fn () -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) {
    %86 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %87 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
    %88 = %86.0;
    (%87, %88)
  };
  %89() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */
}

def @func_3331() -> Tensor[(36), float64] {
  @func_3252() /* ty=Tensor[(36), float64] */
}

def @func_2244(%var_2242: Tensor[(2, 400), int16], %var_2243: Tensor[(330), uint32]) -> (Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), bool], Tensor[(2, 400), float32], Tensor[(330), uint32], Tensor[(2, 15, 11), float64]) {
  @func_2240(%var_2242, %var_2243) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), bool], Tensor[(2, 400), float32], Tensor[(330), uint32], Tensor[(2, 15, 11), float64]) */
}

def @func_5697(%var_5668: Tensor[(784), uint64]) -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), uint16], Tensor[(14, 14, 4), float64], Tensor[(11, 11, 7), float32]) {
  %90 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %91 = reshape(%90, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float32] */;
  %92 = @func_4546(%91) /* ty=Tensor[(3, 2, 12), uint8] */;
  %93 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float32] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="uint16") /* ty=Tensor[(3, 2, 12), uint16] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %97 = cast(%var_5668, dtype="uint64") /* ty=Tensor[(784), uint64] */;
  %98 = reshape(%97, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), uint64] */;
  %99 = @func_3359(%98) /* ty=(Tensor[(14, 14, 4), uint64],) */;
  %100 = %99.0;
  %101 = cast(%var_5668, dtype="float64") /* ty=Tensor[(784), float64] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %105 = @func_4431() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %106 = @func_4911() /* ty=Tensor[(11, 11, 7), float32] */;
  %107 = right_shift(%95, %96) /* ty=Tensor[(3, 2, 12), uint16] */;
  %108 = power(%103, %104) /* ty=Tensor[(14, 14, 4), float64] */;
  %109 = %105.0;
  (%106, %107, %108, %109)
}

def @func_5528() -> (Tensor[(36), float64],) {
  %110 = @func_5502() /* ty=Tensor[(36), float64] */;
  (%110,)
}

def @func_3714(%var_3712: Tensor[(26, 1), float64], %var_3713: Tensor[(330), uint32]) -> (Tensor[(11, 11, 7), float32], Tensor[(2, 15, 11), bool], Tensor[(26, 330), int8], Tensor[(11, 11, 7), float32]) {
  @func_3710(%var_3712, %var_3713) /* ty=(Tensor[(11, 11, 7), float32], Tensor[(2, 15, 11), bool], Tensor[(26, 330), int8], Tensor[(11, 11, 7), float32]) */
}

def @func_7086() -> Tensor[(36), float64] {
  %111 = fn () -> Tensor[(36), float64] {
    @func_6922() /* ty=Tensor[(36), float64] */
  };
  %111() /* ty=Tensor[(36), float64] */
}

def @func_4793(%var_4791: Tensor[(165, 2), uint32], %var_4792: Tensor[(640), float64]) -> (Tensor[(11, 11, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(165, 2), uint32], Tensor[(640), float64]) {
  %122 = fn (%var_4786: Tensor[(165, 2), uint32], %var_4787: Tensor[(640), float64]) -> (Tensor[(11, 11, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(165, 2), uint32], Tensor[(640), float64]) {
    %112 = @func_4431() /* ty=(Tensor[(11, 11, 7), float32],) */;
    %113 = cast(%var_4786, dtype="uint32") /* ty=Tensor[(165, 2), uint32] */;
    %114 = cast(%var_4787, dtype="float64") /* ty=Tensor[(640), float64] */;
    %115 = cast(%var_4787, dtype="float64") /* ty=Tensor[(640), float64] */;
    %116 = reshape(%113, newshape=[330]) /* ty=Tensor[(330), uint32] */;
    %117 = reshape(%114, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
    %118 = reshape(%115, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
    %119 = @func_2649(%116, %117, %118) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) */;
    %120 = %112.0;
    %121 = %119.0;
    (%120, %121, %var_4786, %var_4787)
  };
  %122(%var_4791, %var_4792) /* ty=(Tensor[(11, 11, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(165, 2), uint32], Tensor[(640), float64]) */
}

def @func_2735(%var_2728: float32, %var_2729: Tensor[(11, 11, 7), float32]) -> (Tensor[(11, 11, 7), float32],) {
  %123 = cast(%var_2728, dtype="float32") /* ty=float32 */;
  %124 = cast(%var_2729, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  %125 = floor_mod(%123, %124) /* ty=Tensor[(11, 11, 7), float32] */;
  (%125,)
}

def @func_2065(%var_2063: Tensor[(2, 9, 2), float64], %var_2064: Tensor[(2, 9, 2), float64]) -> (Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) {
  @func_2061(%var_2063, %var_2064) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */
}

def @func_4360() -> (Tensor[(36), float64],) {
  @func_4358() /* ty=(Tensor[(36), float64],) */
}

def @func_6783() -> (Tensor[(11, 11, 7), float32],) {
  %127 = fn () -> (Tensor[(11, 11, 7), float32],) {
    %126 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
    (%126,)
  };
  %127() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_6690(%var_6688: Tensor[(14, 3, 3), bool], %var_6689: Tensor[(14, 3, 3), bool]) -> Tensor[(14, 3, 3), bool] {
  @func_6686(%var_6688, %var_6689) /* ty=Tensor[(14, 3, 3), bool] */
}

def @func_7896() -> (Tensor[(168), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32]) {
  %128 = @func_7063() /* ty=(Tensor[(168), float32],) */;
  %129 = cast(meta[relay.Constant][9] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %130 = reshape(%129, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %131 = %128.0;
  %132 = @func_839(%130) /* ty=Tensor[(2, 15, 11), bool] */;
  (%131, %132, meta[relay.Constant][9] /* ty=Tensor[(330), uint32] */)
}

def @func_8493() -> (Tensor[(45), float32],) {
  @func_8491() /* ty=(Tensor[(45), float32],) */
}

def @func_6512() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(36), float64]) {
  %133 = @func_4963() /* ty=(Tensor[(36), float64], Tensor[(800), int16], Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) */;
  %134 = @func_5429() /* ty=Tensor[(11, 11, 7), float32] */;
  %135 = @func_5123() /* ty=Tensor[(36), float64] */;
  %136 = %133.0;
  (%134, %135, %136)
}

def @func_4872() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) {
  %141 = fn () -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) {
    %137 = @func_4306() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) */;
    %138 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
    %139 = %137.3;
    %140 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
    (%138, %139, %140)
  };
  %141() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) */
}

def @func_7486() -> (Tensor[(168), float32], Tensor[(15, 1, 3), float32]) {
  %146 = fn () -> (Tensor[(168), float32], Tensor[(15, 1, 3), float32]) {
    %142 = @func_7063() /* ty=(Tensor[(168), float32],) */;
    %143 = @func_5955() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) */;
    %144 = %142.0;
    %145 = %143.1;
    (%144, %145)
  };
  %146() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */
}

def @func_5601() -> Tensor[(11, 11, 7), float32] {
  %147 = @func_3950() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %147.0
}

def @func_3362(%var_3360: Tensor[(14, 14, 4), uint64]) -> (Tensor[(14, 14, 4), uint64],) {
  @func_3359(%var_3360) /* ty=(Tensor[(14, 14, 4), uint64],) */
}

def @func_7115() -> (Tensor[(36), float64],) {
  @func_7113() /* ty=(Tensor[(36), float64],) */
}

def @func_1232(%var_1231: Tensor[(15, 1, 3), float32]) -> Tensor[(15, 1, 3), float32] {
  %149 = fn (%var_1226: Tensor[(15, 1, 3), float32]) -> Tensor[(15, 1, 3), float32] {
    %148 = cast(%var_1226, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
    acosh(%148) /* ty=Tensor[(15, 1, 3), float32] */
  };
  %149(%var_1231) /* ty=Tensor[(15, 1, 3), float32] */
}

def @func_8890(%var_8888: Tensor[(392), uint32]) -> (Tensor[(15, 1, 3), float32], Tensor[(4, 7, 14), float32], Tensor[(392), uint32], Tensor[(640), float32]) {
  @func_8887(%var_8888) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(4, 7, 14), float32], Tensor[(392), uint32], Tensor[(640), float32]) */
}

def @func_4737() -> Tensor[(11, 11, 7), float32] {
  %152 = fn () -> Tensor[(11, 11, 7), float32] {
    %150 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
    %151 = cast(%150, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
    sigmoid(%151) /* ty=Tensor[(11, 11, 7), float32] */
  };
  %152() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_2278(%var_2246: Tensor[(13, 2, 1), float64], %var_2256: Tensor[(330), uint32]) -> (Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) {
  %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %155 = reshape(%153, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %156 = reshape(%154, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %157 = @func_2061(%155, %156) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
  %158 = cast(%var_2256, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %159 = reshape(%158, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %160 = cast(%var_2246, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %161 = cosh(%160) /* ty=Tensor[(13, 2, 1), float64] */;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(13, 2, 1), float64] */;
  %163 = cast(%var_2256, dtype="float64") /* ty=Tensor[(330), float64] */;
  %164 = %157.1;
  %165 = @func_839(%159) /* ty=Tensor[(2, 15, 11), bool] */;
  %166 = power(%162, %163) /* ty=Tensor[(13, 2, 330), float64] */;
  (%164, meta[relay.Constant][10] /* ty=Tensor[(36), float64] */, %165, %166)
}

def @func_5400(%var_5397: uint32, %var_5398: Tensor[(1, 9, 5), uint32], %var_5399: Tensor[(330), uint32]) -> (Tensor[(1, 9, 5), bool], Tensor[(2, 9, 2), float64], Tensor[(1, 392), float32], Tensor[(36), float64], Tensor[(330), uint32], Tensor[(330), uint32], Tensor[(36), float64]) {
  @func_5395(%var_5397, %var_5398, %var_5399) /* ty=(Tensor[(1, 9, 5), bool], Tensor[(2, 9, 2), float64], Tensor[(1, 392), float32], Tensor[(36), float64], Tensor[(330), uint32], Tensor[(330), uint32], Tensor[(36), float64]) */
}

def @func_4212(%var_4211: Tensor[(12, 1, 4), float32]) -> Tensor[(12, 1, 4), float32] {
  %168 = fn (%var_4190: Tensor[(12, 1, 4), float32]) -> Tensor[(12, 1, 4), float32] {
    %167 = cast(%var_4190, dtype="float32") /* ty=Tensor[(12, 1, 4), float32] */;
    sinh(%167) /* ty=Tensor[(12, 1, 4), float32] */
  };
  %168(%var_4211) /* ty=Tensor[(12, 1, 4), float32] */
}

def @func_6094() -> (Tensor[(45), float32],) {
  %169 = @func_4398() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %170 = %169.2;
  (%170,)
}

def @func_2739(%var_2737: float32, %var_2738: Tensor[(11, 11, 7), float32]) -> (Tensor[(11, 11, 7), float32],) {
  @func_2735(%var_2737, %var_2738) /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_4912() -> Tensor[(11, 11, 7), float32] {
  %171 = fn () -> Tensor[(11, 11, 7), float32] {
    @func_4753() /* ty=Tensor[(11, 11, 7), float32] */
  };
  %171() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_3909() -> Tensor[(168), float32] {
  %173 = fn () -> Tensor[(168), float32] {
    %172 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
    %172.2
  };
  %173() /* ty=Tensor[(168), float32] */
}

def @func_4307() -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) {
  %180 = fn () -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) {
    %174 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
    %175 = @func_3950() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
    %176 = %174.0;
    %177 = @func_3908() /* ty=Tensor[(168), float32] */;
    %178 = %175.1;
    %179 = @func_3252() /* ty=Tensor[(36), float64] */;
    (%176, %177, %178, %179)
  };
  %180() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) */
}

def @func_5956() -> (Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) {
  %184 = fn () -> (Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) {
    %181 = @func_3318() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) */;
    %182 = @func_5479() /* ty=Tensor[(6, 4, 7), float32] */;
    %183 = %181.2;
    (%182, %183)
  };
  %184() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) */
}

def @func_1315(%var_1273: Tensor[(7, 12, 2), int64], %var_1274: Tensor[(7, 12, 2), int64], %var_1282: Tensor[(640), float32]) -> (Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) {
  %185 = cast(%var_1282, dtype="float32") /* ty=Tensor[(640), float32] */;
  %186 = cast(%var_1282, dtype="float32") /* ty=Tensor[(640), float32] */;
  %187 = reshape(%185, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %188 = reshape(%186, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %189 = cast(meta[relay.Constant][11] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %190 = reshape(%189, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %191 = cast(%var_1274, dtype="int64") /* ty=Tensor[(7, 12, 2), int64] */;
  %192 = shape_of(%var_1273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_1273, dtype="int64") /* ty=Tensor[(7, 12, 2), int64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %195 = subtract(%193, %194) /* ty=Tensor[(7, 12, 2), int64] */;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %197 = tan(%196) /* ty=Tensor[(7, 12, 2), float64] */;
  %198 = cast(%195, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = cast(%197, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %203 = @func_113(%187, %188) /* ty=Tensor[(8, 5, 16), float64] */;
  %204 = @func_839(%190) /* ty=Tensor[(2, 15, 11), bool] */;
  %205 = greater_equal(%200, %201) /* ty=Tensor[(7, 12, 2), bool] */;
  %206 = cosh(%202) /* ty=Tensor[(7, 12, 2), float64] */;
  (%203, %var_1282, %204, meta[relay.Constant][11] /* ty=Tensor[(330), uint32] */, %205, %206)
}

def @func_3004(%var_2999: Tensor[(13, 11, 8), uint64]) -> (Tensor[(13, 11, 8), bool],) {
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 11, 8), uint64] */, dtype="bool") /* ty=Tensor[(13, 11, 8), bool] */;
  %208 = shape_of(%var_2999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_2999, dtype="bool") /* ty=Tensor[(13, 11, 8), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = equal(%209, %210) /* ty=Tensor[(13, 11, 8), bool] */;
  (%211,)
}

def @func_5480() -> Tensor[(6, 4, 7), float32] {
  %213 = fn () -> Tensor[(6, 4, 7), float32] {
    %212 = @func_3230() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) */;
    %212.2
  };
  %213() /* ty=Tensor[(6, 4, 7), float32] */
}

def @func_6035() -> (Tensor[(36), float64], Tensor[(36), float64]) {
  %217 = fn () -> (Tensor[(36), float64], Tensor[(36), float64]) {
    %214 = @func_5300() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32]) */;
    %215 = %214.0;
    %216 = @func_3252() /* ty=Tensor[(36), float64] */;
    (%215, %216)
  };
  %217() /* ty=(Tensor[(36), float64], Tensor[(36), float64]) */
}

def @func_5301() -> (Tensor[(36), float64], Tensor[(3, 2, 12), float32]) {
  %220 = fn () -> (Tensor[(36), float64], Tensor[(3, 2, 12), float32]) {
    %218 = @func_5084() /* ty=Tensor[(36), float64] */;
    %219 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    (%218, %219)
  };
  %220() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32]) */
}

def @func_6293() -> (Tensor[(36), float64], Tensor[(36), float64], Tensor[(3, 2, 12), float32]) {
  %227 = fn () -> (Tensor[(36), float64], Tensor[(36), float64], Tensor[(3, 2, 12), float32]) {
    %221 = @func_4358() /* ty=(Tensor[(36), float64],) */;
    %222 = @func_4358() /* ty=(Tensor[(36), float64],) */;
    %223 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %224 = %221.0;
    %225 = %222.0;
    %226 = %223.0;
    (%224, %225, %226)
  };
  %227() /* ty=(Tensor[(36), float64], Tensor[(36), float64], Tensor[(3, 2, 12), float32]) */
}

def @func_6514() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(36), float64]) {
  @func_6512() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(36), float64]) */
}

def @func_1895() -> Tensor[(3, 2, 12), float32] {
  @func_1893() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_5715(%var_5710: Tensor[(847, 11), float32]) -> Tensor[(847, 11), int64] {
  %228 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
  %229 = %228.3;
  %230 = cast(%229, dtype="int64") /* ty=Tensor[(847, 1), int64] */;
  %231 = cast(%var_5710, dtype="int64") /* ty=Tensor[(847, 11), int64] */;
  add(%230, %231) /* ty=Tensor[(847, 11), int64] */
}

def @func_6645() -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32]) {
  %235 = fn () -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32]) {
    %232 = @func_6264() /* ty=(Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) */;
    %233 = %232.1;
    %234 = @func_3908() /* ty=Tensor[(168), float32] */;
    (%233, %234)
  };
  %235() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32]) */
}

def @func_8699(%var_8653: Tensor[(14, 12, 4), float64]) -> (Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(3, 2, 12), float32], Tensor[(14, 12, 4), float64]) {
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %237 = reshape(%236, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %238 = @func_7040() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %239 = cast(%var_8653, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %240 = cosh(%239) /* ty=Tensor[(14, 12, 4), float64] */;
  %241 = cast(%var_8653, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %245 = @func_839(%237) /* ty=Tensor[(2, 15, 11), bool] */;
  %246 = %238.2;
  %247 = floor_mod(%243, %244) /* ty=Tensor[(14, 12, 4), float64] */;
  (%245, meta[relay.Constant][13] /* ty=Tensor[(330), uint32] */, %246, %247)
}

def @func_7700() -> (Tensor[(11, 11, 7), float32],) {
  @func_7698() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_6096() -> (Tensor[(45), float32],) {
  @func_6094() /* ty=(Tensor[(45), float32],) */
}

def @func_5085() -> Tensor[(36), float64] {
  %248 = fn () -> Tensor[(36), float64] {
    @func_4496() /* ty=Tensor[(36), float64] */
  };
  %248() /* ty=Tensor[(36), float64] */
}

def @func_4678(%var_4676: Tensor[(168), int64], %var_4677: Tensor[(320, 2), float32]) -> (Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(330, 1), uint32], float32, Tensor[(7, 12, 2), bool], Tensor[(168), int64], Tensor[(320, 2), float32], Tensor[(10, 9, ?), uint64], Tensor[(15, 6), float64], Tensor[(11, 11, 7), float32], Tensor[(847), float32]) {
  @func_4674(%var_4676, %var_4677) /* ty=(Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(330, 1), uint32], float32, Tensor[(7, 12, 2), bool], Tensor[(168), int64], Tensor[(320, 2), float32], Tensor[(10, 9, ?), uint64], Tensor[(15, 6), float64], Tensor[(11, 11, 7), float32], Tensor[(847), float32]) */
}

def @func_5568(%var_5561: int64, %var_5562: Tensor[(11, 4, 1), int64]) -> (Tensor[(11, 4, 1), bool],) {
  %249 = cast(%var_5561, dtype="bool") /* ty=bool */;
  %250 = cast(%var_5562, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
  %251 = greater_equal(%249, %250) /* ty=Tensor[(11, 4, 1), bool] */;
  (%251,)
}

def @func_3007(%var_3005: Tensor[(13, 11, 8), uint64]) -> (Tensor[(13, 11, 8), bool],) {
  @func_3004(%var_3005) /* ty=(Tensor[(13, 11, 8), bool],) */
}

def @func_4399() -> (Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) {
  %267 = fn () -> (Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) {
    %252 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %253 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %254 = reshape(%253, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %255 = @func_2358(%254) /* ty=(Tensor[(6, 4, 7), float32],) */;
    %256 = @func_3331() /* ty=Tensor[(36), float64] */;
    %257 = cast(%256, dtype="float64") /* ty=Tensor[(36), float64] */;
    %258 = cast(%256, dtype="float64") /* ty=Tensor[(36), float64] */;
    %259 = reshape(%257, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
    %260 = reshape(%258, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
    %261 = @func_2061(%259, %260) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
    %262 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    %263 = %252.2;
    %264 = %255.0;
    %265 = %261.0;
    %266 = @func_3252() /* ty=Tensor[(36), float64] */;
    (%256, %262, %263, %264, meta[relay.Constant][14] /* ty=Tensor[(168), float32] */, %265, %266)
  };
  %267() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */
}

def @func_3252() -> Tensor[(36), float64] {
  %268 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %268.0
}

def @func_5395(%var_5345: uint32, %var_5346: Tensor[(1, 9, 5), uint32], %var_5379: Tensor[(330), uint32]) -> (Tensor[(1, 9, 5), bool], Tensor[(2, 9, 2), float64], Tensor[(1, 392), float32], Tensor[(36), float64], Tensor[(330), uint32], Tensor[(330), uint32], Tensor[(36), float64]) {
  %269 = cast(%var_5345, dtype="bool") /* ty=bool */;
  %270 = cast(%var_5346, dtype="bool") /* ty=Tensor[(1, 9, 5), bool] */;
  %271 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 392), uint32] */, dtype="uint32") /* ty=Tensor[(1, 392), uint32] */;
  %272 = reshape(%271, newshape=[392]) /* ty=Tensor[(392), uint32] */;
  %273 = @func_3894(%272) /* ty=(Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) */;
  %274 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 392), uint32] */, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %275 = cast(%var_5379, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %276 = reshape(%275, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %277 = @func_2706(%276) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(3, 2, 12), float32], Tensor[(330), uint32], Tensor[(640), float64]) */;
  %278 = not_equal(%269, %270) /* ty=Tensor[(1, 9, 5), bool] */;
  %279 = %273.1;
  %280 = sqrt(%274) /* ty=Tensor[(1, 392), float32] */;
  %281 = @func_3331() /* ty=Tensor[(36), float64] */;
  %282 = %277.3;
  %283 = @func_3252() /* ty=Tensor[(36), float64] */;
  (%278, %279, %280, %281, %282, %var_5379, %283)
}

def @func_997(%var_994: Tensor[(11, 16, 5), float64], %var_995: Tensor[(11, 16, 5), float32], %var_996: Tensor[(10, 64), float32]) -> (Tensor[(11, 16, 5), float32], Tensor[(8, 5, 16), float64], Tensor[(10, 64), float32]) {
  %300 = fn (%var_969: Tensor[(11, 16, 5), float64], %var_978: Tensor[(11, 16, 5), float32], %var_988: Tensor[(10, 64), float32]) -> (Tensor[(11, 16, 5), float32], Tensor[(8, 5, 16), float64], Tensor[(10, 64), float32]) {
    %284 = cast(%var_969, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
    %285 = log2(%284) /* ty=Tensor[(11, 16, 5), float64] */;
    %286 = cast(%285, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
    %287 = sin(%286) /* ty=Tensor[(11, 16, 5), float32] */;
    %288 = cast(%var_978, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
    %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %290 = cast(%287, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %292 = equal(%290, %291) /* ty=Tensor[(11, 16, 5), bool] */;
    %293 = cast(%292, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
    %294 = cast(%var_988, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %295 = cast(%var_988, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %296 = reshape(%294, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %297 = reshape(%295, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %298 = atan(%293) /* ty=Tensor[(11, 16, 5), float32] */;
    %299 = @func_113(%296, %297) /* ty=Tensor[(8, 5, 16), float64] */;
    (%298, %299, %var_988)
  };
  %300(%var_994, %var_995, %var_996) /* ty=(Tensor[(11, 16, 5), float32], Tensor[(8, 5, 16), float64], Tensor[(10, 64), float32]) */
}

def @func_6792() -> Tensor[(11, 11, 7), float32] {
  @func_5153() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_5504() -> Tensor[(36), float64] {
  @func_5502() /* ty=Tensor[(36), float64] */
}

def @func_8601() -> (Tensor[(15, 1, 3), float32],) {
  %301 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
  %302 = %301.1;
  (%302,)
}

def @func_6764(%var_6717: Tensor[(10, 15, 6), float64]) -> Tensor[(10, 15, 6), float64] {
  %303 = cast(%var_6717, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %304 = log(%303) /* ty=Tensor[(10, 15, 6), float64] */;
  %305 = cast(%var_6717, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="float64") /* ty=Tensor[(10, 15, 6), float64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%307, %308) /* ty=Tensor[(10, 15, 6), float64] */
}

def @func_8858() -> (Tensor[(36), float64], Tensor[(16, 11, 6), uint8], Tensor[(36), float64], Tensor[(45), float32], Tensor[(16, 11, 6), float32]) {
  %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
  %310 = cosh(%309) /* ty=Tensor[(16, 11, 6), float32] */;
  %311 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 11, 6), float32] */, dtype="uint8") /* ty=Tensor[(16, 11, 6), uint8] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="uint8") /* ty=Tensor[(16, 11, 6), uint8] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %315 = @func_8382() /* ty=(Tensor[(36), float64], Tensor[(36), float64], Tensor[(330), uint32]) */;
  %316 = @func_6094() /* ty=(Tensor[(45), float32],) */;
  %317 = cast(%310, dtype="float32") /* ty=Tensor[(16, 11, 6), float32] */;
  %318 = @func_3331() /* ty=Tensor[(36), float64] */;
  %319 = left_shift(%313, %314) /* ty=Tensor[(16, 11, 6), uint8] */;
  %320 = %315.1;
  %321 = %316.0;
  %322 = asin(%317) /* ty=Tensor[(16, 11, 6), float32] */;
  (%318, %319, %320, %321, %322)
}

def @func_8860() -> (Tensor[(36), float64], Tensor[(16, 11, 6), uint8], Tensor[(36), float64], Tensor[(45), float32], Tensor[(16, 11, 6), float32]) {
  @func_8858() /* ty=(Tensor[(36), float64], Tensor[(16, 11, 6), uint8], Tensor[(36), float64], Tensor[(45), float32], Tensor[(16, 11, 6), float32]) */
}

def @func_8383() -> (Tensor[(36), float64], Tensor[(36), float64], Tensor[(330), uint32]) {
  %327 = fn () -> (Tensor[(36), float64], Tensor[(36), float64], Tensor[(330), uint32]) {
    %323 = @func_7896() /* ty=(Tensor[(168), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32]) */;
    %324 = @func_5123() /* ty=Tensor[(36), float64] */;
    %325 = @func_8038() /* ty=Tensor[(36), float64] */;
    %326 = %323.2;
    (%324, %325, %326)
  };
  %327() /* ty=(Tensor[(36), float64], Tensor[(36), float64], Tensor[(330), uint32]) */
}

def @func_8520(%var_8505: Tensor[(45), float32], %var_8506: Tensor[(330), uint32]) -> (Tensor[(168), float32], Tensor[(6, 4, 7), float32], Tensor[(36), float64], Tensor[(45), float32], Tensor[(330), uint32], Tensor[(640), float32]) {
  %328 = @func_7063() /* ty=(Tensor[(168), float32],) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(168), float32] */;
  %331 = reshape(%330, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %332 = @func_2358(%331) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %333 = cast(%var_8505, dtype="float32") /* ty=Tensor[(45), float32] */;
  %334 = cast(%var_8506, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %335 = cast(meta[relay.Constant][18] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %336 = reshape(%333, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %337 = reshape(%334, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %338 = reshape(%335, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %339 = @func_6239(%336, %337, %338) /* ty=(Tensor[(15, ?, 3), int64], Tensor[(11, 11, 7), float32], Tensor[(2, 9, 2), float64], uint32, Tensor[(330), uint32], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(168), int64], Tensor[(640), float32]) */;
  %340 = %332.0;
  %341 = %339.5;
  (%329, %340, %341, %var_8505, %var_8506, meta[relay.Constant][18] /* ty=Tensor[(640), float32] */)
}

def @func_6081(%var_6080: Tensor[(13, 11, 14), float64]) -> (Tensor[(13, 11, 14), float64], Tensor[(36), float64]) {
  %346 = fn (%var_6069: Tensor[(13, 11, 14), float64]) -> (Tensor[(13, 11, 14), float64], Tensor[(36), float64]) {
    %342 = cast(%var_6069, dtype="float64") /* ty=Tensor[(13, 11, 14), float64] */;
    %343 = @func_5528() /* ty=(Tensor[(36), float64],) */;
    %344 = sin(%342) /* ty=Tensor[(13, 11, 14), float64] */;
    %345 = %343.0;
    (%344, %345)
  };
  %346(%var_6080) /* ty=(Tensor[(13, 11, 14), float64], Tensor[(36), float64]) */
}

def @func_7064() -> (Tensor[(168), float32],) {
  %348 = fn () -> (Tensor[(168), float32],) {
    %347 = @func_3908() /* ty=Tensor[(168), float32] */;
    (%347,)
  };
  %348() /* ty=(Tensor[(168), float32],) */
}

def @func_6794() -> Tensor[(11, 11, 7), float32] {
  @func_6792() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_6310(%var_6308: bool) -> (Tensor[(6, 13, 8), bool],) {
  @func_6307(%var_6308) /* ty=(Tensor[(6, 13, 8), bool],) */
}

def @func_6922() -> Tensor[(36), float64] {
  %349 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %349.0
}

def @func_5530() -> (Tensor[(36), float64],) {
  @func_5528() /* ty=(Tensor[(36), float64],) */
}

def @func_4099(%var_4055: Tensor[(3, 14, 9), uint8], %var_4056: Tensor[(3, 14, 9), uint8], %var_4065: Tensor[(640), float32], %var_4082: Tensor[(1, 847), float32]) -> (Tensor[(3, 14, 9), uint8], Tensor[(7, 12, 2), float64], Tensor[(168), int64], Tensor[(640), float32], Tensor[(11, 11, 7), float32], Tensor[(1, 847), float32], Tensor[(3, 14, 9), uint32]) {
  %350 = cast(%var_4056, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
  %351 = shape_of(%var_4055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_4055, dtype="uint8") /* ty=Tensor[(3, 14, 9), uint8] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %354 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %355 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
  %356 = cast(%var_4065, dtype="float32") /* ty=Tensor[(640), float32] */;
  %357 = reshape(%354, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %358 = reshape(%355, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
  %359 = reshape(%356, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %360 = @func_1315(%357, %358, %359) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) */;
  %361 = cast(%var_4082, dtype="float32") /* ty=Tensor[(1, 847), float32] */;
  %362 = reshape(%361, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
  %363 = cast(%var_4055, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %364 = shape_of(%var_4056, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%var_4056, dtype="uint32") /* ty=Tensor[(3, 14, 9), uint32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %367 = subtract(%352, %353) /* ty=Tensor[(3, 14, 9), uint8] */;
  %368 = %360.5;
  %369 = @func_3436(%362) /* ty=Tensor[(11, 11, 7), float32] */;
  %370 = bitwise_or(%365, %366) /* ty=Tensor[(3, 14, 9), uint32] */;
  (%367, %368, meta[relay.Constant][19] /* ty=Tensor[(168), int64] */, %var_4065, %369, %var_4082, %370)
}

def @func_2061(%var_2034: Tensor[(2, 9, 2), float64], %var_2035: Tensor[(2, 9, 2), float64]) -> (Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) {
  %371 = cast(%var_2035, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %372 = shape_of(%var_2034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_2034, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %375 = cast(%var_2035, dtype="float64") /* ty=Tensor[(2, 9, 2), float64] */;
  %376 = divide(%373, %374) /* ty=Tensor[(2, 9, 2), float64] */;
  %377 = acos(%375) /* ty=Tensor[(2, 9, 2), float64] */;
  (%376, %377)
}

def @func_5265(%var_5253: Tensor[(11, 11, 12), float32]) -> Tensor[(11, 11, 12), int32] {
  %378 = cast(%var_5253, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %379 = atan(%378) /* ty=Tensor[(11, 11, 12), float32] */;
  %380 = cast(%379, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
  %381 = shape_of(%var_5253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%var_5253, dtype="int32") /* ty=Tensor[(11, 11, 12), int32] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%382, %383) /* ty=Tensor[(11, 11, 12), int32] */
}

def @func_7527() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64]) {
  @func_7525() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(36), float64]) */
}

def @func_8290() -> (Tensor[(11, 11, 7), float32],) {
  @func_8288() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_5620() -> (Tensor[(3, 2, 12), float32],) {
  %386 = fn () -> (Tensor[(3, 2, 12), float32],) {
    %384 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
    %385 = %384.2;
    (%385,)
  };
  %386() /* ty=(Tensor[(3, 2, 12), float32],) */
}

def @func_6767(%var_6765: Tensor[(10, 15, 6), float64]) -> Tensor[(10, 15, 6), float64] {
  @func_6764(%var_6765) /* ty=Tensor[(10, 15, 6), float64] */
}

def @func_8524(%var_8522: Tensor[(45), float32], %var_8523: Tensor[(330), uint32]) -> (Tensor[(168), float32], Tensor[(6, 4, 7), float32], Tensor[(36), float64], Tensor[(45), float32], Tensor[(330), uint32], Tensor[(640), float32]) {
  @func_8520(%var_8522, %var_8523) /* ty=(Tensor[(168), float32], Tensor[(6, 4, 7), float32], Tensor[(36), float64], Tensor[(45), float32], Tensor[(330), uint32], Tensor[(640), float32]) */
}

def @func_1982(%var_1980: Tensor[(800), int16]) -> (Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) {
  @func_1979(%var_1980) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) */
}

def @func_3320() -> (Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) {
  @func_3318() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) */
}

def @func_841(%var_840: Tensor[(2, 15, 11), uint32]) -> Tensor[(2, 15, 11), bool] {
  %391 = fn (%var_832: Tensor[(2, 15, 11), uint32]) -> Tensor[(2, 15, 11), bool] {
    %387 = cast(%var_832, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
    %388 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(2, 15, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %389 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 15, 11), uint32] */, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%389, %390) /* ty=Tensor[(2, 15, 11), bool] */
  };
  %391(%var_840) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_3614(%var_3612: Tensor[(4, 7, 14), uint32], %var_3613: Tensor[(4, 7, 14), uint32]) -> (Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) {
  %401 = fn (%var_3588: Tensor[(4, 7, 14), uint32], %var_3589: Tensor[(4, 7, 14), uint32]) -> (Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) {
    %392 = cast(%var_3589, dtype="uint32") /* ty=Tensor[(4, 7, 14), uint32] */;
    %393 = shape_of(%var_3588, dtype="int32") /* ty=Tensor[(3), int32] */;
    %394 = cast(%var_3588, dtype="uint32") /* ty=Tensor[(4, 7, 14), uint32] */;
    %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %396 = cast(%var_3589, dtype="float32") /* ty=Tensor[(4, 7, 14), float32] */;
    %397 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %398 = maximum(%394, %395) /* ty=Tensor[(4, 7, 14), uint32] */;
    %399 = asin(%396) /* ty=Tensor[(4, 7, 14), float32] */;
    %400 = %397.3;
    (%398, %399, %400)
  };
  %401(%var_3612, %var_3613) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */
}

def @func_3710(%var_3677: Tensor[(26, 1), float64], %var_3678: Tensor[(330), uint32]) -> (Tensor[(11, 11, 7), float32], Tensor[(2, 15, 11), bool], Tensor[(26, 330), int8], Tensor[(11, 11, 7), float32]) {
  %402 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %403 = cast(%var_3677, dtype="float64") /* ty=Tensor[(26, 1), float64] */;
  %404 = cast(%var_3678, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %405 = reshape(%403, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float64] */;
  %406 = reshape(%404, newshape=[330]) /* ty=Tensor[(330), uint32] */;
  %407 = @func_2278(%405, %406) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(13, 2, 330), float64]) */;
  %408 = cast(%var_3677, dtype="int8") /* ty=Tensor[(26, 1), int8] */;
  %409 = cast(%var_3678, dtype="int8") /* ty=Tensor[(330), int8] */;
  %410 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
  %411 = %402.0;
  %412 = %407.2;
  %413 = bitwise_and(%408, %409) /* ty=Tensor[(26, 330), int8] */;
  %414 = %410.0;
  (%411, %412, %413, %414)
}

def @func_5036() -> (Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) {
  %420 = fn () -> (Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) {
    %415 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %416 = @func_3950() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
    %417 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    %418 = %415.0;
    %419 = %416.1;
    (%417, %418, %419)
  };
  %420() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */
}

def @func_8702(%var_8700: Tensor[(14, 12, 4), float64]) -> (Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(3, 2, 12), float32], Tensor[(14, 12, 4), float64]) {
  @func_8699(%var_8700) /* ty=(Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(3, 2, 12), float32], Tensor[(14, 12, 4), float64]) */
}

def @func_2977() -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) {
  @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */
}

def @func_6457() -> (Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), uint16], Tensor[(784), uint64]) {
  %427 = fn () -> (Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), uint16], Tensor[(784), uint64]) {
    %421 = cast(meta[relay.Constant][21] /* ty=Tensor[(784), uint64] */, dtype="uint64") /* ty=Tensor[(784), uint64] */;
    %422 = reshape(%421, newshape=[784]) /* ty=Tensor[(784), uint64] */;
    %423 = @func_5697(%422) /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), uint16], Tensor[(14, 14, 4), float64], Tensor[(11, 11, 7), float32]) */;
    %424 = @func_5479() /* ty=Tensor[(6, 4, 7), float32] */;
    %425 = @func_2444() /* ty=Tensor[(15, 1, 3), float32] */;
    %426 = %423.1;
    (%424, %425, %426, meta[relay.Constant][21] /* ty=Tensor[(784), uint64] */)
  };
  %427() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), uint16], Tensor[(784), uint64]) */
}

def @func_6924() -> Tensor[(36), float64] {
  @func_6922() /* ty=Tensor[(36), float64] */
}

def @func_3318() -> (Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) {
  %428 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %429 = %428.2;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(45), float32] */;
  %431 = reshape(%430, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %432 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  %433 = @func_1230(%431) /* ty=Tensor[(15, 1, 3), float32] */;
  (%432, %429, %433)
}

def @func_7838() -> (Tensor[(45), float32],) {
  %436 = fn () -> (Tensor[(45), float32],) {
    %434 = @func_4398() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %435 = %434.2;
    (%435,)
  };
  %436() /* ty=(Tensor[(45), float32],) */
}

def @func_8732(%var_8724: Tensor[(8, 5, 10), float32]) -> (Tensor[(8, 5, 10), float32], Tensor[(11, 11, 7), float32]) {
  %437 = cast(%var_8724, dtype="float32") /* ty=Tensor[(8, 5, 10), float32] */;
  %438 = cosh(%437) /* ty=Tensor[(8, 5, 10), float32] */;
  %439 = @func_7384() /* ty=Tensor[(11, 11, 7), float32] */;
  (%438, %439)
}

def @func_5718(%var_5716: Tensor[(847, 11), float32]) -> Tensor[(847, 11), int64] {
  @func_5715(%var_5716) /* ty=Tensor[(847, 11), int64] */
}

def @func_7791() -> Tensor[(11, 11, 7), float32] {
  %441 = fn () -> Tensor[(11, 11, 7), float32] {
    %440 = @func_6067() /* ty=(Tensor[(11, 11, 7), float32],) */;
    %440.0
  };
  %441() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_5124() -> Tensor[(36), float64] {
  %442 = fn () -> Tensor[(36), float64] {
    @func_3331() /* ty=Tensor[(36), float64] */
  };
  %442() /* ty=Tensor[(36), float64] */
}

def @func_8394() -> (Tensor[(13, 7, 4), float64],) {
  %443 = @func_5008() /* ty=Tensor[(13, 7, 4), float64] */;
  (%443,)
}

def @func_5314() -> Tensor[(3, 2, 12), float32] {
  @func_3550() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_2708(%var_2707: Tensor[(330), uint32]) -> (Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(3, 2, 12), float32], Tensor[(330), uint32], Tensor[(640), float64]) {
  %455 = fn (%var_2676: Tensor[(330), uint32]) -> (Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(3, 2, 12), float32], Tensor[(330), uint32], Tensor[(640), float64]) {
    %444 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %445 = cast(%var_2676, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %446 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %447 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %448 = reshape(%445, newshape=[330]) /* ty=Tensor[(330), uint32] */;
    %449 = reshape(%446, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
    %450 = reshape(%447, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
    %451 = @func_2649(%448, %449, %450) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) */;
    %452 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    %453 = %444.2;
    %454 = %451.3;
    (%452, %453, %454, %var_2676, meta[relay.Constant][22] /* ty=Tensor[(640), float64] */)
  };
  %455(%var_2707) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(45), float32], Tensor[(3, 2, 12), float32], Tensor[(330), uint32], Tensor[(640), float64]) */
}

def @func_5316() -> Tensor[(3, 2, 12), float32] {
  @func_5314() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_7683() -> (Tensor[(15, 1, 3), float32],) {
  %458 = fn () -> (Tensor[(15, 1, 3), float32],) {
    %456 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
    %457 = %456.1;
    (%457,)
  };
  %458() /* ty=(Tensor[(15, 1, 3), float32],) */
}

def @func_8452() -> (Tensor[(11, 11, 7), float32],) {
  %460 = fn () -> (Tensor[(11, 11, 7), float32],) {
    %459 = @func_6792() /* ty=Tensor[(11, 11, 7), float32] */;
    (%459,)
  };
  %460() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_8569(%var_8547: Tensor[(16, 4, 14), float32]) -> (Tensor[(9, 5, 14), int8], Tensor[(630), int8], Tensor[(16, 4, 14), bool]) {
  %461 = cast(meta[relay.Constant][23] /* ty=Tensor[(630), int8] */, dtype="int8") /* ty=Tensor[(630), int8] */;
  %462 = cast(meta[relay.Constant][23] /* ty=Tensor[(630), int8] */, dtype="int8") /* ty=Tensor[(630), int8] */;
  %463 = reshape(%461, newshape=[9, 5, 14]) /* ty=Tensor[(9, 5, 14), int8] */;
  %464 = reshape(%462, newshape=[9, 5, 14]) /* ty=Tensor[(9, 5, 14), int8] */;
  %465 = @func_7534(%463, %464) /* ty=(Tensor[(9, 5, 14), int8],) */;
  %466 = cast(%var_8547, dtype="float32") /* ty=Tensor[(16, 4, 14), float32] */;
  %467 = tan(%466) /* ty=Tensor[(16, 4, 14), float32] */;
  %468 = cast(%var_8547, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %472 = %465.0;
  %473 = equal(%470, %471) /* ty=Tensor[(16, 4, 14), bool] */;
  (%472, meta[relay.Constant][23] /* ty=Tensor[(630), int8] */, %473)
}

def @func_1979(%var_1973: Tensor[(800), int16]) -> (Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) {
  %474 = cast(%var_1973, dtype="int16") /* ty=Tensor[(800), int16] */;
  %475 = reshape(%474, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), int16] */;
  %476 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  %478 = reshape(%477, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float32] */;
  %479 = @func_1876(%475) /* ty=Tensor[(5, 10, 16), int64] */;
  %480 = @func_1929(%478) /* ty=Tensor[(3, 2, 12), bool] */;
  (%476, %479, %var_1973, %480)
}

def @func_2913() -> (Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) {
  %488 = fn () -> (Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) {
    %481 = cast(0.894142f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %482 = cast(meta[relay.Constant][24] /* ty=Tensor[(847, 1), float32] */, dtype="float32") /* ty=Tensor[(847, 1), float32] */;
    %483 = reshape(%481, newshape=[]) /* ty=float32 */;
    %484 = reshape(%482, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
    %485 = @func_2735(%483, %484) /* ty=(Tensor[(11, 11, 7), float32],) */;
    %486 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    %487 = %485.0;
    (%486, %487, 0.894142f /* ty=float32 */, meta[relay.Constant][24] /* ty=Tensor[(847, 1), float32] */)
  };
  %488() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */
}

def @func_8257(%var_8255: uint16, %var_8256: Tensor[(11, 9, 16), uint16]) -> (Tensor[(11, 9, 16), bool], Tensor[(11, 11, 7), float32], Tensor[(6, 4, 7), float32], Tensor[(168, 1), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(36), float64], Tensor[(14, 14, 4), uint64], Tensor[(784), uint64]) {
  %508 = fn (%var_8155: uint16, %var_8156: Tensor[(11, 9, 16), uint16]) -> (Tensor[(11, 9, 16), bool], Tensor[(11, 11, 7), float32], Tensor[(6, 4, 7), float32], Tensor[(168, 1), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(36), float64], Tensor[(14, 14, 4), uint64], Tensor[(784), uint64]) {
    %489 = cast(%var_8155, dtype="bool") /* ty=bool */;
    %490 = cast(%var_8156, dtype="bool") /* ty=Tensor[(11, 9, 16), bool] */;
    %491 = @func_4871() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) */;
    %492 = cast(meta[relay.Constant][25] /* ty=Tensor[(168, 1), float32] */, dtype="float32") /* ty=Tensor[(168, 1), float32] */;
    %493 = reshape(%492, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %494 = @func_2358(%493) /* ty=(Tensor[(6, 4, 7), float32],) */;
    %495 = @func_3230() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) */;
    %496 = @func_7485() /* ty=(Tensor[(168), float32], Tensor[(15, 1, 3), float32]) */;
    %497 = @func_4871() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(36), float64], Tensor[(11, 11, 7), float32]) */;
    %498 = cast(meta[relay.Constant][26] /* ty=Tensor[(784), uint64] */, dtype="uint64") /* ty=Tensor[(784), uint64] */;
    %499 = reshape(%498, newshape=[14, 14, 4]) /* ty=Tensor[(14, 14, 4), uint64] */;
    %500 = @func_3359(%499) /* ty=(Tensor[(14, 14, 4), uint64],) */;
    %501 = greater_equal(%489, %490) /* ty=Tensor[(11, 9, 16), bool] */;
    %502 = %491.2;
    %503 = %494.0;
    %504 = %495.2;
    %505 = %496.0;
    %506 = %497.1;
    %507 = %500.0;
    (%501, %502, %503, meta[relay.Constant][25] /* ty=Tensor[(168, 1), float32] */, %504, %505, %506, %507, meta[relay.Constant][26] /* ty=Tensor[(784), uint64] */)
  };
  %508(%var_8255, %var_8256) /* ty=(Tensor[(11, 9, 16), bool], Tensor[(11, 11, 7), float32], Tensor[(6, 4, 7), float32], Tensor[(168, 1), float32], Tensor[(6, 4, 7), float32], Tensor[(168), float32], Tensor[(36), float64], Tensor[(14, 14, 4), uint64], Tensor[(784), uint64]) */
}

def @func_7041() -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) {
  %513 = fn () -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) {
    %509 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
    %510 = @func_5123() /* ty=Tensor[(36), float64] */;
    %511 = @func_5479() /* ty=Tensor[(6, 4, 7), float32] */;
    %512 = %509.1;
    (%510, %511, %512)
  };
  %513() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) */
}

def @func_3836(%var_3834: Tensor[(330, 1), uint32], %var_3835: Tensor[(392), uint32]) -> (Tensor[(2, 15, 11), bool], Tensor[(330, ?), uint32], Tensor[(4, 7, 14), uint32], Tensor[(392), uint32], Tensor[(2, 9, 2), float64], Tensor[(330, 36), float64], Tensor[(11, 11, 7), float32], Tensor[(4, 7, 14), float32], Tensor[(3, 2, 12), bool], Tensor[(72), float32]) {
  %557 = fn (%var_3785: Tensor[(330, 1), uint32], %var_3790: Tensor[(392), uint32]) -> (Tensor[(2, 15, 11), bool], Tensor[(330, ?), uint32], Tensor[(4, 7, 14), uint32], Tensor[(392), uint32], Tensor[(2, 9, 2), float64], Tensor[(330, 36), float64], Tensor[(11, 11, 7), float32], Tensor[(4, 7, 14), float32], Tensor[(3, 2, 12), bool], Tensor[(72), float32]) {
    %514 = cast(meta[relay.Constant][27] /* ty=Tensor[(330, 1), uint32] */, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
    %515 = reshape(%514, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
    %516 = cast(%var_3785, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
    %517 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(330, 1), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %518 = cast(meta[relay.Constant][27] /* ty=Tensor[(330, 1), uint32] */, dtype="uint32") /* ty=Tensor[(330, 1), uint32] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %520 = cast(%var_3790, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %521 = cast(%var_3790, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %522 = reshape(%520, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
    %523 = reshape(%521, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
    %524 = @func_3611(%522, %523) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
    %525 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %526 = %525.4;
    %527 = cast(%526, dtype="float64") /* ty=Tensor[(36), float64] */;
    %528 = cast(%526, dtype="float64") /* ty=Tensor[(36), float64] */;
    %529 = reshape(%527, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
    %530 = reshape(%528, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
    %531 = @func_2061(%529, %530) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
    %532 = cast(%526, dtype="int32") /* ty=Tensor[(36), int32] */;
    %533 = cast(meta[relay.Constant][27] /* ty=Tensor[(330, 1), uint32] */, dtype="int32") /* ty=Tensor[(330, 1), int32] */;
    %534 = bitwise_xor(%532, %533) /* ty=Tensor[(330, 36), int32] */;
    %535 = cast(%534, dtype="float32") /* ty=Tensor[(330, 36), float32] */;
    %536 = cosh(%535) /* ty=Tensor[(330, 36), float32] */;
    %537 = cast(%536, dtype="float64") /* ty=Tensor[(330, 36), float64] */;
    %538 = atanh(%537) /* ty=Tensor[(330, 36), float64] */;
    %539 = cast(%538, dtype="float64") /* ty=Tensor[(330, 36), float64] */;
    %540 = cast(%var_3785, dtype="float64") /* ty=Tensor[(330, 1), float64] */;
    %541 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
    %542 = %524.0;
    %543 = cast(%542, dtype="uint32") /* ty=Tensor[(4, 7, 14), uint32] */;
    %544 = cast(%var_3790, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %545 = reshape(%543, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
    %546 = reshape(%544, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
    %547 = @func_3611(%545, %546) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
    %548 = cast(meta[relay.Constant][28] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %549 = reshape(%548, newshape=[3, 2, 12]) /* ty=Tensor[(3, 2, 12), float32] */;
    %550 = @func_839(%515) /* ty=Tensor[(2, 15, 11), bool] */;
    %551 = maximum(%518, %519) /* ty=Tensor[(330, ?), uint32] */;
    %552 = %531.1;
    %553 = floor_mod(%539, %540) /* ty=Tensor[(330, 36), float64] */;
    %554 = %541.0;
    %555 = %547.1;
    %556 = @func_1929(%549) /* ty=Tensor[(3, 2, 12), bool] */;
    (%550, %551, %542, %var_3790, %552, %553, %554, %555, %556, meta[relay.Constant][28] /* ty=Tensor[(72), float32] */)
  };
  %557(%var_3834, %var_3835) /* ty=(Tensor[(2, 15, 11), bool], Tensor[(330, ?), uint32], Tensor[(4, 7, 14), uint32], Tensor[(392), uint32], Tensor[(2, 9, 2), float64], Tensor[(330, 36), float64], Tensor[(11, 11, 7), float32], Tensor[(4, 7, 14), float32], Tensor[(3, 2, 12), bool], Tensor[(72), float32]) */
}

def @func_6068() -> (Tensor[(11, 11, 7), float32],) {
  %559 = fn () -> (Tensor[(11, 11, 7), float32],) {
    %558 = @func_4753() /* ty=Tensor[(11, 11, 7), float32] */;
    (%558,)
  };
  %559() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_6243(%var_6240: Tensor[(15, 1, 3), float32], %var_6241: Tensor[(330), uint32], %var_6242: Tensor[(640), float32]) -> (Tensor[(15, ?, 3), int64], Tensor[(11, 11, 7), float32], Tensor[(2, 9, 2), float64], uint32, Tensor[(330), uint32], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(168), int64], Tensor[(640), float32]) {
  %582 = fn (%var_6187: Tensor[(15, 1, 3), float32], %var_6221: Tensor[(330), uint32], %var_6231: Tensor[(640), float32]) -> (Tensor[(15, ?, 3), int64], Tensor[(11, 11, 7), float32], Tensor[(2, 9, 2), float64], uint32, Tensor[(330), uint32], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(168), int64], Tensor[(640), float32]) {
    %560 = @func_2444() /* ty=Tensor[(15, 1, 3), float32] */;
    %561 = cast(%var_6187, dtype="int64") /* ty=Tensor[(15, 1, 3), int64] */;
    %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%560, dtype="int64") /* ty=Tensor[(15, 1, 3), int64] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %565 = cast(meta[relay.Constant][29] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %566 = cast(%560, dtype="uint32") /* ty=Tensor[(15, 1, 3), uint32] */;
    %567 = cast(%var_6221, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %568 = reshape(%565, newshape=[]) /* ty=uint32 */;
    %569 = reshape(%566, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), uint32] */;
    %570 = reshape(%567, newshape=[330]) /* ty=Tensor[(330), uint32] */;
    %571 = @func_5395(%568, %569, %570) /* ty=(Tensor[(1, 9, 5), bool], Tensor[(2, 9, 2), float64], Tensor[(1, 392), float32], Tensor[(36), float64], Tensor[(330), uint32], Tensor[(330), uint32], Tensor[(36), float64]) */;
    %572 = cast(meta[relay.Constant][30] /* ty=Tensor[(168), int64] */, dtype="int64") /* ty=Tensor[(168), int64] */;
    %573 = cast(%var_6231, dtype="float32") /* ty=Tensor[(640), float32] */;
    %574 = reshape(%572, newshape=[168]) /* ty=Tensor[(168), int64] */;
    %575 = reshape(%573, newshape=[320, 2]) /* ty=Tensor[(320, 2), float32] */;
    %576 = @func_4674(%574, %575) /* ty=(Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(330, 1), uint32], float32, Tensor[(7, 12, 2), bool], Tensor[(168), int64], Tensor[(320, 2), float32], Tensor[(10, 9, ?), uint64], Tensor[(15, 6), float64], Tensor[(11, 11, 7), float32], Tensor[(847), float32]) */;
    %577 = right_shift(%563, %564) /* ty=Tensor[(15, ?, 3), int64] */;
    %578 = @func_5429() /* ty=Tensor[(11, 11, 7), float32] */;
    %579 = %571.1;
    %580 = @func_3331() /* ty=Tensor[(36), float64] */;
    %581 = %576.1;
    (%577, %578, %579, meta[relay.Constant][29] /* ty=uint32 */, %var_6221, %580, %581, meta[relay.Constant][30] /* ty=Tensor[(168), int64] */, %var_6231)
  };
  %582(%var_6240, %var_6241, %var_6242) /* ty=(Tensor[(15, ?, 3), int64], Tensor[(11, 11, 7), float32], Tensor[(2, 9, 2), float64], uint32, Tensor[(330), uint32], Tensor[(36), float64], Tensor[(2, 15, 11), bool], Tensor[(168), int64], Tensor[(640), float32]) */
}

def @func_6403() -> Tensor[(36), bool] {
  %589 = fn () -> Tensor[(36), bool] {
    %583 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %584 = %583.4;
    %585 = cast(meta[relay.Constant][31] /* ty=Tensor[(36), float64] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(1), int32] */;
    %587 = cast(%584, dtype="bool") /* ty=Tensor[(36), bool] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?), bool] */;
    greater_equal(%587, %588) /* ty=Tensor[(36), bool] */
  };
  %589() /* ty=Tensor[(36), bool] */
}

def @func_2653(%var_2650: Tensor[(330), uint32], %var_2651: Tensor[(10, 64), float64], %var_2652: Tensor[(10, 64), float64]) -> (Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) {
  %629 = fn (%var_2599: Tensor[(330), uint32], %var_2609: Tensor[(10, 64), float64], %var_2625: Tensor[(10, 64), float64]) -> (Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) {
    %590 = @func_2444() /* ty=Tensor[(15, 1, 3), float32] */;
    %591 = cast(%590, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
    %592 = reshape(%591, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
    %593 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 64), float32] */, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %594 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 64), float32] */, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %595 = reshape(%593, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %596 = reshape(%594, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %597 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %598 = cast(meta[relay.Constant][33] /* ty=Tensor[(800), int16] */, dtype="int16") /* ty=Tensor[(800), int16] */;
    %599 = cast(%var_2599, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %600 = reshape(%598, newshape=[2, 400]) /* ty=Tensor[(2, 400), int16] */;
    %601 = reshape(%599, newshape=[330]) /* ty=Tensor[(330), uint32] */;
    %602 = @func_2240(%600, %601) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), bool], Tensor[(2, 400), float32], Tensor[(330), uint32], Tensor[(2, 15, 11), float64]) */;
    %603 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 64), float32] */, dtype="float64") /* ty=Tensor[(10, 64), float64] */;
    %604 = sin(%603) /* ty=Tensor[(10, 64), float64] */;
    %605 = cast(%604, dtype="float64") /* ty=Tensor[(10, 64), float64] */;
    %606 = exp(%605) /* ty=Tensor[(10, 64), float64] */;
    %607 = cast(%var_2609, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(2), int32] */;
    %609 = cast(%606, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %611 = minimum(%609, %610) /* ty=Tensor[(10, 64), float32] */;
    %612 = cast(%606, dtype="int8") /* ty=Tensor[(10, 64), int8] */;
    %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(2), int32] */;
    %614 = cast(%611, dtype="int8") /* ty=Tensor[(10, 64), int8] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %616 = @func_1230(%592) /* ty=Tensor[(15, 1, 3), float32] */;
    %617 = cast(%616, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
    %618 = reshape(%617, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
    %619 = cast(%var_2625, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %620 = shape_of(%604, dtype="int32") /* ty=Tensor[(2), int32] */;
    %621 = cast(%604, dtype="float32") /* ty=Tensor[(10, 64), float32] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %623 = @func_113(%595, %596) /* ty=Tensor[(8, 5, 16), float64] */;
    %624 = %597.0;
    %625 = %602.4;
    %626 = bitwise_and(%614, %615) /* ty=Tensor[(10, 64), int8] */;
    %627 = @func_1230(%618) /* ty=Tensor[(15, 1, 3), float32] */;
    %628 = floor_mod(%621, %622) /* ty=Tensor[(10, 64), float32] */;
    (%590, %616, %623, %624, %625, meta[relay.Constant][33] /* ty=Tensor[(800), int16] */, %var_2599, %626, %627, %628)
  };
  %629(%var_2650, %var_2651, %var_2652) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) */
}

def @func_7538(%var_7536: Tensor[(9, 5, 14), int8], %var_7537: Tensor[(9, 5, 14), int8]) -> (Tensor[(9, 5, 14), int8],) {
  @func_7534(%var_7536, %var_7537) /* ty=(Tensor[(9, 5, 14), int8],) */
}

def @func_3359(%var_3351: Tensor[(14, 14, 4), uint64]) -> (Tensor[(14, 14, 4), uint64],) {
  %630 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 14, 4), uint64] */, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %631 = shape_of(%var_3351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_3351, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %634 = bitwise_or(%632, %633) /* ty=Tensor[(14, 14, 4), uint64] */;
  (%634,)
}

def @func_2183() -> (Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) {
  %635 = cast(meta[relay.Constant][35] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %636 = reshape(%635, newshape=[15, 1, 3]) /* ty=Tensor[(15, 1, 3), float32] */;
  %637 = cast(meta[relay.Constant][36] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %638 = cast(meta[relay.Constant][36] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %639 = reshape(%637, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %640 = reshape(%638, newshape=[2, 9, 2]) /* ty=Tensor[(2, 9, 2), float64] */;
  %641 = @func_2061(%639, %640) /* ty=(Tensor[(2, 9, 2), float64], Tensor[(2, 9, 2), float64]) */;
  %642 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
  %643 = @func_1230(%636) /* ty=Tensor[(15, 1, 3), float32] */;
  %644 = %641.0;
  (%642, %643, meta[relay.Constant][35] /* ty=Tensor[(45), float32] */, %644, meta[relay.Constant][36] /* ty=Tensor[(36), float64] */)
}

def @func_2445() -> Tensor[(15, 1, 3), float32] {
  %646 = fn () -> Tensor[(15, 1, 3), float32] {
    %645 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %645.1
  };
  %646() /* ty=Tensor[(15, 1, 3), float32] */
}

def @func_1893() -> Tensor[(3, 2, 12), float32] {
  %647 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 2, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %648 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 2, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 2, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %651 = logical_and(%649, %650) /* ty=Tensor[(3, 2, 12), bool] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  %653 = erf(%652) /* ty=Tensor[(3, 2, 12), float32] */;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
  cos(%654) /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_4548(%var_4547: Tensor[(3, 2, 12), float32]) -> Tensor[(3, 2, 12), uint8] {
  %660 = fn (%var_4534: Tensor[(3, 2, 12), float32]) -> Tensor[(3, 2, 12), uint8] {
    %655 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    %656 = cast(%var_4534, dtype="uint8") /* ty=Tensor[(3, 2, 12), uint8] */;
    %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%655, dtype="uint8") /* ty=Tensor[(3, 2, 12), uint8] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    left_shift(%658, %659) /* ty=Tensor[(3, 2, 12), uint8] */
  };
  %660(%var_4547) /* ty=Tensor[(3, 2, 12), uint8] */
}

def @func_3951() -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) {
  %664 = fn () -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) {
    %661 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
    %662 = %661.0;
    %663 = @func_3550() /* ty=Tensor[(3, 2, 12), float32] */;
    (%662, %663)
  };
  %664() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */
}

def @func_2240(%var_2200: Tensor[(2, 400), int16], %var_2223: Tensor[(330), uint32]) -> (Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), bool], Tensor[(2, 400), float32], Tensor[(330), uint32], Tensor[(2, 15, 11), float64]) {
  %665 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %666 = cast(%var_2200, dtype="int16") /* ty=Tensor[(2, 400), int16] */;
  %667 = reshape(%666, newshape=[800]) /* ty=Tensor[(800), int16] */;
  %668 = @func_1979(%667) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) */;
  %669 = cast(%var_2200, dtype="int16") /* ty=Tensor[(2, 400), int16] */;
  %670 = reshape(%669, newshape=[800]) /* ty=Tensor[(800), int16] */;
  %671 = @func_1979(%670) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) */;
  %672 = %671.2;
  %673 = cast(%672, dtype="int8") /* ty=Tensor[(800), int8] */;
  %674 = shape_of(%var_2200, dtype="int32") /* ty=Tensor[(2), int32] */;
  %675 = cast(%var_2200, dtype="int8") /* ty=Tensor[(2, 400), int8] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %677 = left_shift(%675, %676) /* ty=Tensor[(2, 400), int8] */;
  %678 = cast(%var_2200, dtype="float32") /* ty=Tensor[(2, 400), float32] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(2), int32] */;
  %680 = cast(%677, dtype="float32") /* ty=Tensor[(2, 400), float32] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %682 = cast(%var_2223, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %683 = reshape(%682, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %684 = @func_839(%683) /* ty=Tensor[(2, 15, 11), bool] */;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %686 = %665.1;
  %687 = %668.3;
  %688 = minimum(%680, %681) /* ty=Tensor[(2, 400), float32] */;
  %689 = erf(%685) /* ty=Tensor[(2, 15, 11), float64] */;
  (%686, %687, %688, %var_2223, %689)
}

def @func_1931(%var_1930: Tensor[(3, 2, 12), float32]) -> Tensor[(3, 2, 12), bool] {
  %695 = fn (%var_1924: Tensor[(3, 2, 12), float32]) -> Tensor[(3, 2, 12), bool] {
    %690 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    %691 = cast(%var_1924, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
    %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
    %693 = cast(%690, dtype="bool") /* ty=Tensor[(3, 2, 12), bool] */;
    %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%693, %694) /* ty=Tensor[(3, 2, 12), bool] */
  };
  %695(%var_1930) /* ty=Tensor[(3, 2, 12), bool] */
}

def @func_8603() -> (Tensor[(15, 1, 3), float32],) {
  @func_8601() /* ty=(Tensor[(15, 1, 3), float32],) */
}

def @func_7534(%var_7528: Tensor[(9, 5, 14), int8], %var_7529: Tensor[(9, 5, 14), int8]) -> (Tensor[(9, 5, 14), int8],) {
  %696 = cast(%var_7529, dtype="int8") /* ty=Tensor[(9, 5, 14), int8] */;
  %697 = shape_of(%var_7528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_7528, dtype="int8") /* ty=Tensor[(9, 5, 14), int8] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %700 = bitwise_or(%698, %699) /* ty=Tensor[(9, 5, 14), int8] */;
  (%700,)
}

def @func_1320(%var_1317: Tensor[(7, 12, 2), int64], %var_1318: Tensor[(7, 12, 2), int64], %var_1319: Tensor[(640), float32]) -> (Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) {
  @func_1315(%var_1317, %var_1318, %var_1319) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) */
}

def @func_1878(%var_1877: Tensor[(5, 10, 16), int16]) -> Tensor[(5, 10, 16), int64] {
  %715 = fn (%var_1848: Tensor[(5, 10, 16), int16]) -> Tensor[(5, 10, 16), int64] {
    %701 = cast(%var_1848, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
    %702 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 16), int16] */, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %705 = equal(%703, %704) /* ty=Tensor[(5, 10, 16), bool] */;
    %706 = cast(%705, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
    %707 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %708 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 10, 16), int16] */, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %710 = logical_or(%708, %709) /* ty=Tensor[(5, 10, 16), bool] */;
    %711 = cast(%var_1848, dtype="int64") /* ty=Tensor[(5, 10, 16), int64] */;
    %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(%710, dtype="int64") /* ty=Tensor[(5, 10, 16), int64] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    right_shift(%713, %714) /* ty=Tensor[(5, 10, 16), int64] */
  };
  %715(%var_1877) /* ty=Tensor[(5, 10, 16), int64] */
}

def @func_7648() -> Tensor[(3, 2, 12), float32] {
  %717 = fn () -> Tensor[(3, 2, 12), float32] {
    %716 = @func_5035() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32], Tensor[(3, 2, 12), float32]) */;
    %716.1
  };
  %717() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_2360(%var_2359: Tensor[(6, 4, 7), float32]) -> (Tensor[(6, 4, 7), float32],) {
  %720 = fn (%var_2353: Tensor[(6, 4, 7), float32]) -> (Tensor[(6, 4, 7), float32],) {
    %718 = cast(%var_2353, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %719 = cosh(%718) /* ty=Tensor[(6, 4, 7), float32] */;
    (%719,)
  };
  %720(%var_2359) /* ty=(Tensor[(6, 4, 7), float32],) */
}

def @func_2975() -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) {
  %721 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %722 = cast(meta[relay.Constant][40] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %723 = reshape(%722, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
  %724 = @func_2358(%723) /* ty=(Tensor[(6, 4, 7), float32],) */;
  %725 = %721.4;
  %726 = %724.0;
  (%725, %726, meta[relay.Constant][40] /* ty=Tensor[(168), float32] */)
}

def @func_4964() -> (Tensor[(36), float64], Tensor[(800), int16], Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) {
  %736 = fn () -> (Tensor[(36), float64], Tensor[(800), int16], Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) {
    %727 = @func_2975() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
    %728 = cast(meta[relay.Constant][41] /* ty=Tensor[(800), int16] */, dtype="int16") /* ty=Tensor[(800), int16] */;
    %729 = reshape(%728, newshape=[800]) /* ty=Tensor[(800), int16] */;
    %730 = @func_1979(%729) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(5, 10, 16), int64], Tensor[(800), int16], Tensor[(3, 2, 12), bool]) */;
    %731 = %730.0;
    %732 = cast(%731, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
    %733 = %727.0;
    %734 = asinh(%732) /* ty=Tensor[(3, 2, 12), float32] */;
    %735 = @func_4753() /* ty=Tensor[(11, 11, 7), float32] */;
    (%733, meta[relay.Constant][41] /* ty=Tensor[(800), int16] */, %734, %735)
  };
  %736() /* ty=(Tensor[(36), float64], Tensor[(800), int16], Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) */
}

def @func_8288() -> (Tensor[(11, 11, 7), float32],) {
  %737 = @func_5601() /* ty=Tensor[(11, 11, 7), float32] */;
  (%737,)
}

def @func_4432() -> (Tensor[(11, 11, 7), float32],) {
  %740 = fn () -> (Tensor[(11, 11, 7), float32],) {
    %738 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
    %739 = %738.0;
    (%739,)
  };
  %740() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_3897(%var_3895: Tensor[(392), uint32]) -> (Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) {
  @func_3894(%var_3895) /* ty=(Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) */
}

def @func_3894(%var_3861: Tensor[(392), uint32]) -> (Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) {
  %741 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %742 = cast(%var_3861, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %743 = cast(%var_3861, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %744 = reshape(%742, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %745 = reshape(%743, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
  %746 = @func_3611(%744, %745) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
  %747 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %748 = %747.0;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
  %750 = %741.4;
  %751 = %746.2;
  %752 = rsqrt(%749) /* ty=Tensor[(11, 11, 7), float32] */;
  (%750, %751, %var_3861, %752)
}

def @func_7898() -> (Tensor[(168), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32]) {
  @func_7896() /* ty=(Tensor[(168), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32]) */
}

def @func_5055(%var_5053: Tensor[(3, 16, 12), int16]) -> (Tensor[(3, 16, 12), int16],) {
  @func_5052(%var_5053) /* ty=(Tensor[(3, 16, 12), int16],) */
}

def @main(%var_8928: Tensor[(392, 1), uint32], %var_8955: Tensor[(330), uint32], %var_8971: Tensor[(392, 2), uint32]) -> (Tensor[(640), float32], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(168), float32], Tensor[(168), float32], Tensor[(11, 11, 7), float64], Tensor[(392, 2), float32]) {
  %753 = cast(%var_8928, dtype="uint32") /* ty=Tensor[(392, 1), uint32] */;
  %754 = cast(meta[relay.Constant][42] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %755 = reshape(%753, newshape=[7, 56]) /* ty=Tensor[(7, 56), uint32] */;
  %756 = reshape(%754, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %757 = @func_6890(%755, %756) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) */;
  %758 = cast(%var_8955, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %759 = reshape(%758, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), uint32] */;
  %760 = cast(meta[relay.Constant][43] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %761 = reshape(%760, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %762 = @func_2834(%761) /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
  %763 = @func_4307() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(3, 2, 12), float32], Tensor[(36), float64]) */;
  %764 = %763.0;
  %765 = cast(%764, dtype="float64") /* ty=Tensor[(11, 11, 7), float64] */;
  %766 = cast(%var_8928, dtype="int32") /* ty=Tensor[(392, 1), int32] */;
  %767 = cast(%var_8971, dtype="int32") /* ty=Tensor[(392, 2), int32] */;
  %768 = maximum(%766, %767) /* ty=Tensor[(392, 2), int32] */;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(392, 2), float32] */;
  %770 = %757.5;
  %771 = @func_839(%759) /* ty=Tensor[(2, 15, 11), bool] */;
  %772 = %762.2;
  %773 = asinh(%765) /* ty=Tensor[(11, 11, 7), float64] */;
  %774 = cos(%769) /* ty=Tensor[(392, 2), float32] */;
  (%770, meta[relay.Constant][42] /* ty=Tensor[(640), float32] */, %771, %var_8955, %772, meta[relay.Constant][43] /* ty=Tensor[(168), float32] */, %773, %774)
}

def @func_8491() -> (Tensor[(45), float32],) {
  %775 = @func_7837() /* ty=(Tensor[(45), float32],) */;
  %776 = %775.0;
  (%776,)
}

def @func_3438(%var_3437: Tensor[(11, 11, 7), float32]) -> Tensor[(11, 11, 7), float32] {
  %783 = fn (%var_3400: Tensor[(11, 11, 7), float32]) -> Tensor[(11, 11, 7), float32] {
    %777 = @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */;
    %778 = %777.0;
    %779 = cast(%var_3400, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
    %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%778, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%781, %782) /* ty=Tensor[(11, 11, 7), float32] */
  };
  %783(%var_3437) /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_8572(%var_8570: Tensor[(16, 4, 14), float32]) -> (Tensor[(9, 5, 14), int8], Tensor[(630), int8], Tensor[(16, 4, 14), bool]) {
  @func_8569(%var_8570) /* ty=(Tensor[(9, 5, 14), int8], Tensor[(630), int8], Tensor[(16, 4, 14), bool]) */
}

def @func_5603() -> Tensor[(11, 11, 7), float32] {
  @func_5601() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_6307(%var_6299: bool) -> (Tensor[(6, 13, 8), bool],) {
  %784 = cast(%var_6299, dtype="bool") /* ty=bool */;
  %785 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 13, 8), bool] */, dtype="bool") /* ty=Tensor[(6, 13, 8), bool] */;
  %786 = logical_and(%784, %785) /* ty=Tensor[(6, 13, 8), bool] */;
  (%786,)
}

def @func_6389() -> Tensor[(11, 11, 7), float32] {
  %787 = fn () -> Tensor[(11, 11, 7), float32] {
    @func_4753() /* ty=Tensor[(11, 11, 7), float32] */
  };
  %787() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_5798(%var_5796: Tensor[(26), float64]) -> (Tensor[(36), float64], Tensor[(26), float64], Tensor[(330), uint32], Tensor[(3, 1, 3), float32], Tensor[(11, 11, 7), float32]) {
  @func_5795(%var_5796) /* ty=(Tensor[(36), float64], Tensor[(26), float64], Tensor[(330), uint32], Tensor[(3, 1, 3), float32], Tensor[(11, 11, 7), float32]) */
}

def @func_8040() -> Tensor[(36), float64] {
  @func_8038() /* ty=Tensor[(36), float64] */
}

def @func_6890(%var_6888: Tensor[(7, 56), uint32], %var_6889: Tensor[(640), float32]) -> (Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) {
  %806 = fn (%var_6880: Tensor[(7, 56), uint32], %var_6885: Tensor[(640), float32]) -> (Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) {
    %788 = @func_6456() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32], Tensor[(3, 2, 12), uint16], Tensor[(784), uint64]) */;
    %789 = %788.2;
    %790 = cast(%789, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
    %791 = cast(%var_6880, dtype="uint32") /* ty=Tensor[(7, 56), uint32] */;
    %792 = cast(%var_6880, dtype="uint32") /* ty=Tensor[(7, 56), uint32] */;
    %793 = reshape(%791, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
    %794 = reshape(%792, newshape=[4, 7, 14]) /* ty=Tensor[(4, 7, 14), uint32] */;
    %795 = @func_3611(%793, %794) /* ty=(Tensor[(4, 7, 14), uint32], Tensor[(4, 7, 14), float32], Tensor[(2, 9, 2), float64]) */;
    %796 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 56), int64] */, dtype="int64") /* ty=Tensor[(3, 56), int64] */;
    %797 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 56), int64] */, dtype="int64") /* ty=Tensor[(3, 56), int64] */;
    %798 = cast(%var_6885, dtype="float32") /* ty=Tensor[(640), float32] */;
    %799 = reshape(%796, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
    %800 = reshape(%797, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), int64] */;
    %801 = reshape(%798, newshape=[640]) /* ty=Tensor[(640), float32] */;
    %802 = @func_1315(%799, %800, %801) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(640), float32], Tensor[(2, 15, 11), bool], Tensor[(330), uint32], Tensor[(7, 12, 2), bool], Tensor[(7, 12, 2), float64]) */;
    %803 = acosh(%790) /* ty=Tensor[(3, 2, 12), float32] */;
    %804 = %795.1;
    %805 = %802.5;
    (%803, %804, %var_6880, %805, meta[relay.Constant][45] /* ty=Tensor[(3, 56), int64] */, %var_6885)
  };
  %806(%var_6888, %var_6889) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(4, 7, 14), float32], Tensor[(7, 56), uint32], Tensor[(7, 12, 2), float64], Tensor[(3, 56), int64], Tensor[(640), float32]) */
}

def @func_6265() -> (Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) {
  %810 = fn () -> (Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) {
    %807 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %808 = %807.1;
    %809 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
    (%808, %809)
  };
  %810() /* ty=(Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) */
}

def @func_4498() -> Tensor[(36), float64] {
  @func_4496() /* ty=Tensor[(36), float64] */
}

def @func_4754() -> Tensor[(11, 11, 7), float32] {
  %811 = fn () -> Tensor[(11, 11, 7), float32] {
    @func_4736() /* ty=Tensor[(11, 11, 7), float32] */
  };
  %811() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_8766() -> (Tensor[(11, 11, 7), float32],) {
  %813 = fn () -> (Tensor[(11, 11, 7), float32],) {
    %812 = @func_5601() /* ty=Tensor[(11, 11, 7), float32] */;
    (%812,)
  };
  %813() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_2185() -> (Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) {
  @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */
}

def @func_8038() -> Tensor[(36), float64] {
  @func_4496() /* ty=Tensor[(36), float64] */
}

def @func_3969() -> (Tensor[(45), float32],) {
  %816 = fn () -> (Tensor[(45), float32],) {
    %814 = @func_3318() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(45), float32], Tensor[(15, 1, 3), float32]) */;
    %815 = %814.1;
    (%815,)
  };
  %816() /* ty=(Tensor[(45), float32],) */
}

def @func_5431() -> Tensor[(11, 11, 7), float32] {
  @func_5429() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_6686(%var_6671: Tensor[(14, 3, 3), bool], %var_6672: Tensor[(14, 3, 3), bool]) -> Tensor[(14, 3, 3), bool] {
  %817 = cast(%var_6672, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %818 = shape_of(%var_6671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%var_6671, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%819, %820) /* ty=Tensor[(14, 3, 3), bool] */
}

def @func_4358() -> (Tensor[(36), float64],) {
  %821 = @func_3331() /* ty=Tensor[(36), float64] */;
  (%821,)
}

def @func_3151() -> (Tensor[(11, 11, 7), float32],) {
  @func_3149() /* ty=(Tensor[(11, 11, 7), float32],) */
}

def @func_116(%var_114: Tensor[(8, 5, 16), float32], %var_115: Tensor[(8, 5, 16), float32]) -> Tensor[(8, 5, 16), float64] {
  %835 = fn (%var_50: Tensor[(8, 5, 16), float32], %var_53: Tensor[(8, 5, 16), float32]) -> Tensor[(8, 5, 16), float64] {
    %822 = cast(%var_50, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
    %823 = atan(%822) /* ty=Tensor[(8, 5, 16), float32] */;
    %824 = cast(%823, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
    %825 = sinh(%824) /* ty=Tensor[(8, 5, 16), float32] */;
    %826 = cast(%var_53, dtype="uint8") /* ty=Tensor[(8, 5, 16), uint8] */;
    %827 = shape_of(%var_50, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%var_50, dtype="uint8") /* ty=Tensor[(8, 5, 16), uint8] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %830 = right_shift(%828, %829) /* ty=Tensor[(8, 5, 16), uint8] */;
    %831 = cast(%830, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
    %832 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
    %833 = cast(%825, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
    %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%833, %834) /* ty=Tensor[(8, 5, 16), float64] */
  };
  %835(%var_114, %var_115) /* ty=Tensor[(8, 5, 16), float64] */
}

def @func_7306(%var_7305: Tensor[(392), uint32]) -> (Tensor[(11, 11, 7), float32], Tensor[(15, ?, 3), float32], Tensor[(15, ?, 3), bool], Tensor[(36), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32], Tensor[(36), bool]) {
  %867 = fn (%var_7251: Tensor[(392), uint32]) -> (Tensor[(11, 11, 7), float32], Tensor[(15, ?, 3), float32], Tensor[(15, ?, 3), bool], Tensor[(36), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32], Tensor[(36), bool]) {
    %836 = @func_5955() /* ty=(Tensor[(6, 4, 7), float32], Tensor[(15, 1, 3), float32]) */;
    %837 = %836.1;
    %838 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
    %839 = %838.2;
    %840 = cast(%837, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
    %841 = cast(%839, dtype="bool") /* ty=bool */;
    %842 = less_equal(%840, %841) /* ty=Tensor[(15, 1, 3), bool] */;
    %843 = cast(%842, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
    %844 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
    %845 = cast(%837, dtype="float32") /* ty=Tensor[(15, 1, 3), float32] */;
    %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %847 = cast(%837, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
    %848 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
    %849 = cast(%842, dtype="bool") /* ty=Tensor[(15, 1, 3), bool] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %851 = cast(%var_7251, dtype="uint32") /* ty=Tensor[(392), uint32] */;
    %852 = reshape(%851, newshape=[392]) /* ty=Tensor[(392), uint32] */;
    %853 = @func_3894(%852) /* ty=(Tensor[(36), float64], Tensor[(2, 9, 2), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32]) */;
    %854 = cast(%839, dtype="float32") /* ty=float32 */;
    %855 = @func_4753() /* ty=Tensor[(11, 11, 7), float32] */;
    %856 = cast(%855, dtype="float32") /* ty=Tensor[(11, 11, 7), float32] */;
    %857 = reshape(%854, newshape=[]) /* ty=float32 */;
    %858 = reshape(%856, newshape=[11, 11, 7]) /* ty=Tensor[(11, 11, 7), float32] */;
    %859 = @func_2735(%857, %858) /* ty=(Tensor[(11, 11, 7), float32],) */;
    %860 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
    %861 = add(%845, %846) /* ty=Tensor[(15, ?, 3), float32] */;
    %862 = logical_or(%849, %850) /* ty=Tensor[(15, ?, 3), bool] */;
    %863 = %853.0;
    %864 = %859.0;
    %865 = %860.0;
    %866 = @func_6402() /* ty=Tensor[(36), bool] */;
    (%855, %861, %862, %863, %var_7251, %864, %865, %866)
  };
  %867(%var_7305) /* ty=(Tensor[(11, 11, 7), float32], Tensor[(15, ?, 3), float32], Tensor[(15, ?, 3), bool], Tensor[(36), float64], Tensor[(392), uint32], Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32], Tensor[(36), bool]) */
}

def @func_5572(%var_5570: int64, %var_5571: Tensor[(11, 4, 1), int64]) -> (Tensor[(11, 4, 1), bool],) {
  @func_5568(%var_5570, %var_5571) /* ty=(Tensor[(11, 4, 1), bool],) */
}

def @func_8645() -> (Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32]) {
  %868 = @func_5300() /* ty=(Tensor[(36), float64], Tensor[(3, 2, 12), float32]) */;
  %869 = @func_6264() /* ty=(Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) */;
  %870 = %868.1;
  %871 = %869.1;
  (%870, %871)
}

def @func_2834(%var_2833: Tensor[(168), float32]) -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) {
  %878 = fn (%var_2827: Tensor[(168), float32]) -> (Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) {
    %872 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %873 = cast(%var_2827, dtype="float32") /* ty=Tensor[(168), float32] */;
    %874 = reshape(%873, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %875 = @func_2358(%874) /* ty=(Tensor[(6, 4, 7), float32],) */;
    %876 = %872.4;
    %877 = %875.0;
    (%876, %877, %var_2827)
  };
  %878(%var_2833) /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */
}

def @func_7113() -> (Tensor[(36), float64],) {
  %879 = @func_7040() /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %880 = %879.0;
  (%880,)
}

def @func_5009() -> Tensor[(13, 7, 4), float64] {
  %889 = fn () -> Tensor[(13, 7, 4), float64] {
    %881 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
    %882 = log(%881) /* ty=Tensor[(13, 7, 4), float64] */;
    %883 = cast(%882, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
    %884 = atan(%883) /* ty=Tensor[(13, 7, 4), float64] */;
    %885 = cast(%884, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
    %886 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
    %887 = cast(%882, dtype="float64") /* ty=Tensor[(13, 7, 4), float64] */;
    %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    multiply(%887, %888) /* ty=Tensor[(13, 7, 4), float64] */
  };
  %889() /* ty=Tensor[(13, 7, 4), float64] */
}

def @func_3231() -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) {
  %897 = fn () -> (Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) {
    %890 = cast(meta[relay.Constant][47] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %891 = reshape(%890, newshape=[6, 4, 7]) /* ty=Tensor[(6, 4, 7), float32] */;
    %892 = @func_2358(%891) /* ty=(Tensor[(6, 4, 7), float32],) */;
    %893 = %892.0;
    %894 = cast(%893, dtype="float32") /* ty=Tensor[(6, 4, 7), float32] */;
    %895 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
    %896 = asinh(%894) /* ty=Tensor[(6, 4, 7), float32] */;
    (%895, meta[relay.Constant][47] /* ty=Tensor[(168), float32] */, %896)
  };
  %897() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(168), float32], Tensor[(6, 4, 7), float32]) */
}

def @func_8735(%var_8733: Tensor[(8, 5, 10), float32]) -> (Tensor[(8, 5, 10), float32], Tensor[(11, 11, 7), float32]) {
  @func_8732(%var_8733) /* ty=(Tensor[(8, 5, 10), float32], Tensor[(11, 11, 7), float32]) */
}

def @func_5153() -> Tensor[(11, 11, 7), float32] {
  %898 = @func_3090() /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), float32]) */;
  %898.0
}

def @func_4105(%var_4101: Tensor[(3, 14, 9), uint8], %var_4102: Tensor[(3, 14, 9), uint8], %var_4103: Tensor[(640), float32], %var_4104: Tensor[(1, 847), float32]) -> (Tensor[(3, 14, 9), uint8], Tensor[(7, 12, 2), float64], Tensor[(168), int64], Tensor[(640), float32], Tensor[(11, 11, 7), float32], Tensor[(1, 847), float32], Tensor[(3, 14, 9), uint32]) {
  @func_4099(%var_4101, %var_4102, %var_4103, %var_4104) /* ty=(Tensor[(3, 14, 9), uint8], Tensor[(7, 12, 2), float64], Tensor[(168), int64], Tensor[(640), float32], Tensor[(11, 11, 7), float32], Tensor[(1, 847), float32], Tensor[(3, 14, 9), uint32]) */
}

def @func_6955() -> (Tensor[(45), float32], Tensor[(36), float64]) {
  %899 = @func_3968() /* ty=(Tensor[(45), float32],) */;
  %900 = %899.0;
  %901 = @func_4496() /* ty=Tensor[(36), float64] */;
  (%900, %901)
}

def @func_3551() -> Tensor[(3, 2, 12), float32] {
  %903 = fn () -> Tensor[(3, 2, 12), float32] {
    %902 = @func_2912() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(11, 11, 7), float32], float32, Tensor[(847, 1), float32]) */;
    %902.0
  };
  %903() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_3333() -> Tensor[(36), float64] {
  @func_3331() /* ty=Tensor[(36), float64] */
}

def @func_7698() -> (Tensor[(11, 11, 7), float32],) {
  %904 = @func_6264() /* ty=(Tensor[(15, 1, 3), float32], Tensor[(11, 11, 7), float32]) */;
  %905 = %904.1;
  (%905,)
}

def @func_5700(%var_5698: Tensor[(784), uint64]) -> (Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), uint16], Tensor[(14, 14, 4), float64], Tensor[(11, 11, 7), float32]) {
  @func_5697(%var_5698) /* ty=(Tensor[(11, 11, 7), float32], Tensor[(3, 2, 12), uint16], Tensor[(14, 14, 4), float64], Tensor[(11, 11, 7), float32]) */
}

def @func_7525() -> (Tensor[(11, 11, 7), float32], Tensor[(36), float64]) {
  %906 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
  %907 = @func_6792() /* ty=Tensor[(11, 11, 7), float32] */;
  %908 = %906.4;
  (%907, %908)
}

def @func_7559() -> (Tensor[(36), float64],) {
  %910 = fn () -> (Tensor[(36), float64],) {
    %909 = @func_5502() /* ty=Tensor[(36), float64] */;
    (%909,)
  };
  %910() /* ty=(Tensor[(36), float64],) */
}

def @func_8436() -> (Tensor[(168), float32],) {
  %913 = fn () -> (Tensor[(168), float32],) {
    %911 = @func_7063() /* ty=(Tensor[(168), float32],) */;
    %912 = %911.0;
    (%912,)
  };
  %913() /* ty=(Tensor[(168), float32],) */
}

def @func_3254() -> Tensor[(36), float64] {
  @func_3252() /* ty=Tensor[(36), float64] */
}

def @func_7385() -> Tensor[(11, 11, 7), float32] {
  %915 = fn () -> Tensor[(11, 11, 7), float32] {
    %914 = @func_6067() /* ty=(Tensor[(11, 11, 7), float32],) */;
    %914.0
  };
  %915() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_8779() -> (Tensor[(36), float64], Tensor[(168), float32], Tensor[(168), float32]) {
  %921 = fn () -> (Tensor[(36), float64], Tensor[(168), float32], Tensor[(168), float32]) {
    %916 = cast(meta[relay.Constant][48] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %917 = reshape(%916, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %918 = @func_2832(%917) /* ty=(Tensor[(36), float64], Tensor[(6, 4, 7), float32], Tensor[(168), float32]) */;
    %919 = @func_5502() /* ty=Tensor[(36), float64] */;
    %920 = %918.2;
    (%919, %920, meta[relay.Constant][48] /* ty=Tensor[(168), float32] */)
  };
  %921() /* ty=(Tensor[(36), float64], Tensor[(168), float32], Tensor[(168), float32]) */
}

def @func_6957() -> (Tensor[(45), float32], Tensor[(36), float64]) {
  @func_6955() /* ty=(Tensor[(45), float32], Tensor[(36), float64]) */
}

def @func_5429() -> Tensor[(11, 11, 7), float32] {
  @func_4911() /* ty=Tensor[(11, 11, 7), float32] */
}

def @func_8396() -> (Tensor[(13, 7, 4), float64],) {
  @func_8394() /* ty=(Tensor[(13, 7, 4), float64],) */
}

def @func_3149() -> (Tensor[(11, 11, 7), float32],) {
  %922 = @func_2949() /* ty=Tensor[(11, 11, 7), float32] */;
  (%922,)
}

def @func_5052(%var_5044: Tensor[(3, 16, 12), int16]) -> (Tensor[(3, 16, 12), int16],) {
  %923 = cast(%var_5044, dtype="int16") /* ty=Tensor[(3, 16, 12), int16] */;
  %924 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(3, 16, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %925 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 16, 12), int16] */, dtype="int16") /* ty=Tensor[(3, 16, 12), int16] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %927 = add(%925, %926) /* ty=Tensor[(3, 16, 12), int16] */;
  (%927,)
}

def @func_8904() -> Tensor[(3, 2, 12), float32] {
  %928 = fn () -> Tensor[(3, 2, 12), float32] {
    @func_7647() /* ty=Tensor[(3, 2, 12), float32] */
  };
  %928() /* ty=Tensor[(3, 2, 12), float32] */
}

def @func_2806(%var_2805: Tensor[(640), float64]) -> (Tensor[(3, 2, 12), float32], Tensor[(8, 5, 16), float64], Tensor[(330), uint32], Tensor[(640), float64]) {
  %940 = fn (%var_2797: Tensor[(640), float64]) -> (Tensor[(3, 2, 12), float32], Tensor[(8, 5, 16), float64], Tensor[(330), uint32], Tensor[(640), float64]) {
    %929 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    %930 = cast(%929, dtype="float32") /* ty=Tensor[(3, 2, 12), float32] */;
    %931 = cast(meta[relay.Constant][50] /* ty=Tensor[(330), uint32] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %932 = cast(%var_2797, dtype="float64") /* ty=Tensor[(640), float64] */;
    %933 = cast(%var_2797, dtype="float64") /* ty=Tensor[(640), float64] */;
    %934 = reshape(%931, newshape=[330]) /* ty=Tensor[(330), uint32] */;
    %935 = reshape(%932, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
    %936 = reshape(%933, newshape=[10, 64]) /* ty=Tensor[(10, 64), float64] */;
    %937 = @func_2649(%934, %935, %936) /* ty=(Tensor[(15, 1, 3), float32], Tensor[(15, 1, 3), float32], Tensor[(8, 5, 16), float64], Tensor[(3, 2, 12), float32], Tensor[(2, 15, 11), float64], Tensor[(800), int16], Tensor[(330), uint32], Tensor[(10, 64), int8], Tensor[(15, 1, 3), float32], Tensor[(10, 64), float32]) */;
    %938 = atanh(%930) /* ty=Tensor[(3, 2, 12), float32] */;
    %939 = %937.2;
    (%938, %939, meta[relay.Constant][50] /* ty=Tensor[(330), uint32] */, %var_2797)
  };
  %940(%var_2805) /* ty=(Tensor[(3, 2, 12), float32], Tensor[(8, 5, 16), float64], Tensor[(330), uint32], Tensor[(640), float64]) */
}

def @func_5268(%var_5266: Tensor[(11, 11, 12), float32]) -> Tensor[(11, 11, 12), int32] {
  @func_5265(%var_5266) /* ty=Tensor[(11, 11, 12), int32] */
}

def @func_7379() -> (Tensor[(3, 2, 12), float32],) {
  %942 = fn () -> (Tensor[(3, 2, 12), float32],) {
    %941 = @func_1893() /* ty=Tensor[(3, 2, 12), float32] */;
    (%941,)
  };
  %942() /* ty=(Tensor[(3, 2, 12), float32],) */
}

def @func_8080(%var_8079: Tensor[(20, 32), float32]) -> (Tensor[(3, 2, 12), float64], Tensor[(8, 5, 16), float64], Tensor[(20, 32), float32]) {
  %952 = fn (%var_8076: Tensor[(20, 32), float32]) -> (Tensor[(3, 2, 12), float64], Tensor[(8, 5, 16), float64], Tensor[(20, 32), float32]) {
    %943 = @func_2183() /* ty=(Tensor[(3, 2, 12), float32], Tensor[(15, 1, 3), float32], Tensor[(45), float32], Tensor[(2, 9, 2), float64], Tensor[(36), float64]) */;
    %944 = %943.0;
    %945 = cast(%944, dtype="float64") /* ty=Tensor[(3, 2, 12), float64] */;
    %946 = cast(%var_8076, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
    %947 = cast(%var_8076, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
    %948 = reshape(%946, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %949 = reshape(%947, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %950 = exp(%945) /* ty=Tensor[(3, 2, 12), float64] */;
    %951 = @func_113(%948, %949) /* ty=Tensor[(8, 5, 16), float64] */;
    (%950, %951, %var_8076)
  };
  %952(%var_8079) /* ty=(Tensor[(3, 2, 12), float64], Tensor[(8, 5, 16), float64], Tensor[(20, 32), float32]) */
}

def @func_5155() -> Tensor[(11, 11, 7), float32] {
  @func_5153() /* ty=Tensor[(11, 11, 7), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen633/build/output.py", line 2750, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:42:37] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

