==========mod==========
#[version = "0.0.5"]
def @func_4806(%var_4784: Tensor[(132), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 448), uint64]) {
  %0 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %1 = cast(%var_4784, dtype="float32") /* ty=Tensor[(132), float32] */;
  %2 = reshape(%1, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float32] */;
  %3 = @func_4014(%2) /* ty=(Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) */;
  %4 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %5 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %6 = %0.0;
  %7 = %3.0;
  %8 = %4.0;
  %9 = %5.1;
  (%6, %7, %var_4784, %8, %9)
}

def @func_2804(%var_2756: Tensor[(13, 4, 12), float32]) -> (Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) {
  %10 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %12 = shape_of(%var_2756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%var_2756, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %15 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %16 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %17 = %16.0;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %19 = atanh(%18) /* ty=Tensor[(13, 4, 12), float32] */;
  %20 = cast(%var_2756, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %21 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%10, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %24 = logical_and(%22, %23) /* ty=Tensor[(13, 4, 12), bool] */;
  %25 = cast(%24, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %26 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%19, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = floor_mod(%13, %14) /* ty=Tensor[(13, 4, 12), float64] */;
  %30 = %15.0;
  %31 = logical_or(%27, %28) /* ty=Tensor[(13, 4, 12), bool] */;
  (%29, %30, %31)
}

def @func_274(%var_256: Tensor[(9, 14, 16), float64]) -> Tensor[(9, 14, 16), float64] {
  %32 = cast(%var_256, dtype="float64") /* ty=Tensor[(9, 14, 16), float64] */;
  cos(%32) /* ty=Tensor[(9, 14, 16), float64] */
}

def @func_4736() -> (Tensor[(1, 10, 12), int32], Tensor[(1050), uint64]) {
  %33 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="int32") /* ty=Tensor[(1, 1, 12), int32] */;
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 10, 12), float32] */, dtype="int32") /* ty=Tensor[(1, 10, 12), int32] */;
  %37 = @func_4636() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(1050), uint64], Tensor[(1050), uint64]) */;
  %38 = bitwise_and(%35, %36) /* ty=Tensor[(1, 10, 12), int32] */;
  %39 = %37.4;
  (%38, %39)
}

def @func_3870(%var_3860: Tensor[(7, 4, 8), bool], %var_3866: Tensor[(792), uint64]) -> (Tensor[(7, 4, 8), float32], Tensor[(6, 15, 2), uint32], Tensor[(792), uint64], Tensor[(6, 30), float64]) {
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
  %41 = cosh(%40) /* ty=Tensor[(7, 4, 8), float64] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 4, 8), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %46 = greater(%44, %45) /* ty=Tensor[(7, 4, 8), bool] */;
  %47 = cast(%var_3860, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %51 = cast(%var_3866, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %53 = reshape(%51, newshape=[2, 396]) /* ty=Tensor[(2, 396), uint64] */;
  %54 = reshape(%52, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %55 = @func_1336(%53, %54) /* ty=(Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) */;
  %56 = mod(%49, %50) /* ty=Tensor[(7, 4, 8), float32] */;
  %57 = %55.5;
  (%56, %57, %var_3866, meta[relay.Constant][2] /* ty=Tensor[(6, 30), float64] */)
}

def @func_3194() -> (Tensor[(13, 4, 12), float32],) {
  %58 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %59 = %58.0;
  (%59,)
}

def @func_4178(%var_4155: Tensor[(224), bool], %var_4156: Tensor[(792, 1), uint64], %var_4158: Tensor[(13, 4, 12), float64], %var_4169: Tensor[(6, 30), float64]) -> (Tensor[(224), bool], Tensor[(13, 4, 12), uint16], Tensor[(13, 4, 12), float64], Tensor[(6, 30), int32], Tensor[(792, 1), float32]) {
  %60 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %62 = log2(%61) /* ty=Tensor[(13, 4, 12), float64] */;
  %63 = cast(%62, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %64 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%60, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %67 = less(%65, %66) /* ty=Tensor[(13, 4, 12), bool] */;
  %68 = cast(%67, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %69 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%62, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %72 = add(%70, %71) /* ty=Tensor[(13, 4, 12), uint16] */;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %74 = cos(%73) /* ty=Tensor[(13, 4, 12), float64] */;
  %75 = cast(%var_4158, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%74, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %79 = cast(%var_4158, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %80 = reshape(%79, newshape=[13, 4, 12]) /* ty=Tensor[(13, 4, 12), float32] */;
  %81 = @func_2804(%80) /* ty=(Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) */;
  %82 = cast(%var_4155, dtype="bool") /* ty=Tensor[(224), bool] */;
  %83 = cast(%var_4156, dtype="uint64") /* ty=Tensor[(792, 1), uint64] */;
  %84 = reshape(%82, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), bool] */;
  %85 = reshape(%83, newshape=[792]) /* ty=Tensor[(792), uint64] */;
  %86 = @func_3870(%84, %85) /* ty=(Tensor[(7, 4, 8), float32], Tensor[(6, 15, 2), uint32], Tensor[(792), uint64], Tensor[(6, 30), float64]) */;
  %87 = %86.3;
  %88 = cast(%var_4169, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(2), int32] */;
  %90 = cast(%87, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %92 = cast(%var_4156, dtype="float32") /* ty=Tensor[(792, 1), float32] */;
  %93 = bitwise_xor(%77, %78) /* ty=Tensor[(13, 4, 12), uint16] */;
  %94 = %81.0;
  %95 = add(%90, %91) /* ty=Tensor[(6, 30), int32] */;
  %96 = asin(%92) /* ty=Tensor[(792, 1), float32] */;
  (%var_4155, %93, %94, %95, %96)
}

def @func_3829(%var_3817: Tensor[(13, 4, 12), float32]) -> Tensor[(13, 4, 12), int16] {
  %97 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %98 = %97.0;
  %99 = cast(%var_3817, dtype="int16") /* ty=Tensor[(13, 4, 12), int16] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="int16") /* ty=Tensor[(13, 4, 12), int16] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%101, %102) /* ty=Tensor[(13, 4, 12), int16] */
}

def @func_4934(%var_4879: Tensor[(13, 4, 16), float32], %var_4911: Tensor[(1620), int8]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 16), int8], Tensor[(1620), int8], Tensor[(12, 9, 15), float64], Tensor[(13, 4, 16), uint32], Tensor[(715, 3), float32]) {
  %103 = @func_3893() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32]) */;
  %104 = cast(%var_4879, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %105 = exp(%104) /* ty=Tensor[(13, 4, 16), float32] */;
  %106 = cast(%105, dtype="uint16") /* ty=Tensor[(13, 4, 16), uint16] */;
  %107 = shape_of(%var_4879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%var_4879, dtype="uint16") /* ty=Tensor[(13, 4, 16), uint16] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %110 = minimum(%108, %109) /* ty=Tensor[(13, 4, 16), uint16] */;
  %111 = cast(%110, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %112 = shape_of(%var_4879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_4879, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %115 = cast(%var_4911, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %116 = cast(%var_4911, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %117 = reshape(%115, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %118 = reshape(%116, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %119 = @func_1279(%117, %118) /* ty=Tensor[(12, 9, 15), int8] */;
  %120 = cast(%119, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %121 = cast(%110, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %122 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%105, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %125 = bitwise_xor(%123, %124) /* ty=Tensor[(13, 4, 16), int8] */;
  %126 = cast(%105, dtype="uint32") /* ty=Tensor[(13, 4, 16), uint32] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="uint32") /* ty=Tensor[(13, 4, 16), uint32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %130 = @func_3568() /* ty=(Tensor[(715, 3), float32],) */;
  %131 = %103.0;
  %132 = maximum(%113, %114) /* ty=Tensor[(13, 4, 16), int8] */;
  %133 = sigmoid(%120) /* ty=Tensor[(12, 9, 15), float64] */;
  %134 = logical_xor(%128, %129) /* ty=Tensor[(13, 4, 16), uint32] */;
  %135 = %130.0;
  (%131, %132, %var_4911, %133, %134, %135)
}

def @func_2912() -> (Tensor[(13, 4, 12), float32],) {
  %136 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  (%136,)
}

def @func_2404() -> (Tensor[(13, 4, 12), float32],) {
  %137 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %138 = %137.1;
  (%138,)
}

def @func_3544(%var_3416: Tensor[(4, 14, 12), float32], %var_3506: Tensor[(792), uint64]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 14, 12), bool], Tensor[(12, 9, 15), int8], Tensor[(792), uint64], Tensor[(6, 30), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), bool]) {
  %139 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %140 = @func_3194() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %141 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="uint16") /* ty=Tensor[(1, 1, 12), uint16] */;
  %144 = cast(%var_3416, dtype="uint16") /* ty=Tensor[(4, 14, 12), uint16] */;
  %145 = multiply(%143, %144) /* ty=Tensor[(4, 14, 12), uint16] */;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %147 = exp(%146) /* ty=Tensor[(4, 14, 12), float64] */;
  %148 = cast(%145, dtype="int64") /* ty=Tensor[(4, 14, 12), int64] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="int64") /* ty=Tensor[(4, 14, 12), int64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %152 = minimum(%150, %151) /* ty=Tensor[(4, 14, 12), int64] */;
  %153 = cast(%var_3416, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %157 = power(%155, %156) /* ty=Tensor[(4, 14, 12), float64] */;
  %158 = cast(%147, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %162 = cast(%var_3506, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %163 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %164 = reshape(%162, newshape=[2, 396]) /* ty=Tensor[(2, 396), uint64] */;
  %165 = reshape(%163, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %166 = @func_1336(%164, %165) /* ty=(Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) */;
  %167 = cast(%147, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %168 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %169 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%157, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = logical_or(%170, %171) /* ty=Tensor[(4, 14, 12), bool] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(4, 14, 12), float32] */;
  %174 = log10(%173) /* ty=Tensor[(4, 14, 12), float32] */;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %176 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%147, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %179 = cast(%147, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %180 = atan(%179) /* ty=Tensor[(4, 14, 12), float64] */;
  %181 = cast(%147, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %186 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %187 = %139.0;
  %188 = %140.0;
  %189 = logical_and(%160, %161) /* ty=Tensor[(4, 14, 12), bool] */;
  %190 = %166.6;
  %191 = acos(%167) /* ty=Tensor[(4, 14, 12), float64] */;
  %192 = mod(%177, %178) /* ty=Tensor[(4, 14, 12), float64] */;
  %193 = greater_equal(%183, %184) /* ty=Tensor[(4, 14, 12), bool] */;
  (%185, %186, %187, %188, %189, %190, %var_3506, meta[relay.Constant][3] /* ty=Tensor[(6, 30), float64] */, %191, %192, %193)
}

def @func_3689(%var_3662: Tensor[(1620), int8]) -> (Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64], Tensor[(1, 1, 12), float32], Tensor[(5, 5, 6), float32], Tensor[(13, 4, 12), uint8], Tensor[(5, 5, 6), uint16], Tensor[(12, 9, 15), int8], Tensor[(1620), int8], Tensor[(5, 5, 6), float64], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64]) {
  %194 = cast(meta[relay.Constant][5] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %195 = cast(meta[relay.Constant][5] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %196 = reshape(%194, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %197 = reshape(%195, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %198 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %199 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %200 = sinh(%199) /* ty=Tensor[(5, 5, 6), float64] */;
  %201 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 5, 6), float64] */, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%200, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = logical_and(%203, %204) /* ty=Tensor[(5, 5, 6), bool] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %207 = log(%206) /* ty=Tensor[(5, 5, 6), float32] */;
  %208 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 5, 6), float64] */, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %212 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %213 = %212.0;
  %214 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %215 = %214.1;
  %216 = cast(%215, dtype="uint8") /* ty=Tensor[(13, 4, 12), uint8] */;
  %217 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%213, dtype="uint8") /* ty=Tensor[(13, 4, 12), uint8] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %220 = cast(%205, dtype="uint16") /* ty=Tensor[(5, 5, 6), uint16] */;
  %221 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%200, dtype="uint16") /* ty=Tensor[(5, 5, 6), uint16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %224 = cast(%var_3662, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %225 = cast(%var_3662, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %226 = reshape(%224, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %227 = reshape(%225, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %228 = cast(%207, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %229 = bitwise_and(%218, %219) /* ty=Tensor[(13, 4, 12), uint8] */;
  %230 = cast(%229, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %231 = reshape(%230, newshape=[13, 4, 12]) /* ty=Tensor[(13, 4, 12), float32] */;
  %232 = @func_2804(%231) /* ty=(Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) */;
  %233 = cast(meta[relay.Constant][5] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %234 = cast(meta[relay.Constant][5] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %235 = reshape(%233, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %236 = reshape(%234, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %237 = @func_1176(%196, %197) /* ty=Tensor[(5, 14, 15), uint64] */;
  %238 = %198.2;
  %239 = floor_mod(%210, %211) /* ty=Tensor[(5, 5, 6), float32] */;
  %240 = bitwise_and(%222, %223) /* ty=Tensor[(5, 5, 6), uint16] */;
  %241 = @func_1279(%226, %227) /* ty=Tensor[(12, 9, 15), int8] */;
  %242 = exp(%228) /* ty=Tensor[(5, 5, 6), float64] */;
  %243 = %232.1;
  %244 = @func_1176(%235, %236) /* ty=Tensor[(5, 14, 15), uint64] */;
  (%237, meta[relay.Constant][5] /* ty=Tensor[(1050), uint64] */, %238, %239, %229, %240, %241, %var_3662, %242, %243, %244)
}

def @func_5405(%var_5389: Tensor[(12, 10, 11), uint8]) -> Tensor[(12, 10, 11), bool] {
  %245 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 10, 11), uint8] */, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  %246 = shape_of(%var_5389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_5389, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%247, %248) /* ty=Tensor[(12, 10, 11), bool] */
}

def @func_5372() -> (Tensor[(13, 4, 12), float32],) {
  %249 = @func_2916() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %250 = %249.0;
  (%250,)
}

def @func_4876() -> Tensor[(15, 11, 13), float32] {
  %251 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
  %252 = %251.1;
  %253 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%255, %256) /* ty=Tensor[(15, 11, 13), float32] */
}

def @func_2948() -> (Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) {
  %257 = @func_2521() /* ty=(Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) */;
  %258 = @func_2521() /* ty=(Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) */;
  %259 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %260 = %257.1;
  %261 = %258.2;
  %262 = @func_2865() /* ty=Tensor[(1, 1, 12), float32] */;
  %263 = %259.0;
  (%260, %261, %262, %263)
}

def @func_1948() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %264 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %265 = %264.0;
  %266 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  (%265, %266)
}

def @func_4293(%var_4284: Tensor[(132), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32]) {
  %267 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %268 = cast(%var_4284, dtype="float32") /* ty=Tensor[(132), float32] */;
  %269 = reshape(%268, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float32] */;
  %270 = @func_4014(%269) /* ty=(Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) */;
  %271 = %267.0;
  %272 = %270.0;
  (%271, %272, %var_4284)
}

def @func_4014(%var_4010: Tensor[(2, 6, 11), float32]) -> (Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) {
  %273 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  %274 = cast(%var_4010, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %275 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(2, 6, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 6, 11), float32] */, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %278 = sqrt(%273) /* ty=Tensor[(2, 6, 11), float32] */;
  %279 = floor_mod(%276, %277) /* ty=Tensor[(2, 6, 11), float64] */;
  (%278, %279)
}

def @func_4655() -> (Tensor[(13, 4, 12), float32],) {
  %280 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
  (%280,)
}

def @func_2024(%var_2022: Tensor[(1050), uint64]) -> (Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64]) {
  %281 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %282 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %285 = cast(%283, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %286 = cast(%var_2022, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %287 = cast(%var_2022, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %288 = reshape(%286, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %289 = reshape(%287, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %290 = %281.0;
  %291 = acosh(%284) /* ty=Tensor[(15, 11, 13), float32] */;
  %292 = log10(%285) /* ty=Tensor[(15, 11, 13), float32] */;
  %293 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %294 = @func_1176(%288, %289) /* ty=Tensor[(5, 14, 15), uint64] */;
  (%290, %291, %292, %293, %294, %var_2022)
}

def @func_2235(%var_2192: Tensor[(14, 8, 16), uint64]) -> (Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) {
  %295 = cast(%var_2192, dtype="uint64") /* ty=Tensor[(14, 8, 16), uint64] */;
  %296 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(14, 8, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 8, 16), uint64] */, dtype="uint64") /* ty=Tensor[(14, 8, 16), uint64] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %299 = cast(%var_2192, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %300 = bitwise_or(%297, %298) /* ty=Tensor[(14, 8, 16), uint64] */;
  %301 = log2(%299) /* ty=Tensor[(14, 8, 16), float64] */;
  (%300, %301)
}

def @func_2348() -> Tensor[(13, 4, 12), float32] {
  %302 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %302.0
}

def @func_2392(%var_2389: Tensor[(11, 195), float32]) -> (Tensor[(13, 4, 12), uint32], Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(11, 195), float32]) {
  %303 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
  %304 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
  %305 = %304.0;
  %306 = cast(%305, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
  %307 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%303, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %310 = cast(%var_2389, dtype="float32") /* ty=Tensor[(11, 195), float32] */;
  %311 = cast(%var_2389, dtype="float32") /* ty=Tensor[(11, 195), float32] */;
  %312 = reshape(%310, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
  %313 = reshape(%311, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
  %314 = @func_789(%312, %313) /* ty=(Tensor[(15, 11, 13), float32],) */;
  %315 = multiply(%308, %309) /* ty=Tensor[(13, 4, 12), uint32] */;
  %316 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
  %317 = %314.0;
  (%315, %316, %317, %var_2389)
}

def @func_1746(%var_1716: Tensor[(6, 4, 15), uint16], %var_1717: Tensor[(6, 4, 15), uint16], %var_1728: Tensor[(792), uint64]) -> (Tensor[(6, 4, 15), uint16], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64], Tensor[(6, 4, 15), uint8]) {
  %318 = cast(%var_1717, dtype="uint16") /* ty=Tensor[(6, 4, 15), uint16] */;
  %319 = shape_of(%var_1716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_1716, dtype="uint16") /* ty=Tensor[(6, 4, 15), uint16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %322 = cast(meta[relay.Constant][11] /* ty=Tensor[(72), uint64] */, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %323 = cast(%var_1728, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %324 = reshape(%322, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), uint64] */;
  %325 = reshape(%323, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), uint64] */;
  %326 = @func_1257(%324, %325) /* ty=(Tensor[(11, 8, 9), uint64],) */;
  %327 = cast(%var_1716, dtype="float32") /* ty=Tensor[(6, 4, 15), float32] */;
  %328 = log2(%327) /* ty=Tensor[(6, 4, 15), float32] */;
  %329 = cast(%var_1716, dtype="uint8") /* ty=Tensor[(6, 4, 15), uint8] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="uint8") /* ty=Tensor[(6, 4, 15), uint8] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %333 = left_shift(%320, %321) /* ty=Tensor[(6, 4, 15), uint16] */;
  %334 = %326.0;
  %335 = right_shift(%331, %332) /* ty=Tensor[(6, 4, 15), uint8] */;
  (%333, %334, meta[relay.Constant][11] /* ty=Tensor[(72), uint64] */, %var_1728, %335)
}

def @func_5425() -> Tensor[(13, 4, 12), float32] {
  %336 = @func_3218() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %336.0
}

def @func_3279() -> (Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) {
  %337 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
  %338 = %337.0;
  %339 = cast(%338, dtype="uint16") /* ty=Tensor[(1, 1, 12), uint16] */;
  %340 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 3, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 3, 12), uint16] */;
  %341 = minimum(%339, %340) /* ty=Tensor[(13, 3, 12), uint16] */;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
  %343 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %344 = atan(%342) /* ty=Tensor[(13, 3, 12), float32] */;
  %345 = %343.0;
  (%344, %345)
}

def @func_2588() -> Tensor[(13, 4, 12), float32] {
  %346 = @func_2521() /* ty=(Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) */;
  %346.3
}

def @func_5312(%var_5304: Tensor[(2145), float64]) -> (Tensor[(13, 4, 12), float32], Tensor[(14, 8, 16), float64], Tensor[(1792), uint64], Tensor[(2016), float64], Tensor[(2145), bool]) {
  %347 = cast(meta[relay.Constant][13] /* ty=Tensor[(1792), uint64] */, dtype="uint64") /* ty=Tensor[(1792), uint64] */;
  %348 = reshape(%347, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), uint64] */;
  %349 = @func_2235(%348) /* ty=(Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) */;
  %350 = cast(meta[relay.Constant][14] /* ty=Tensor[(2145), float64] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %351 = cast(meta[relay.Constant][14] /* ty=Tensor[(2145), float64] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %352 = reshape(%350, newshape=[715, 3]) /* ty=Tensor[(715, 3), float64] */;
  %353 = reshape(%351, newshape=[715, 3]) /* ty=Tensor[(715, 3), float64] */;
  %354 = @func_4258(%352, %353) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(715, 3), float64], Tensor[(9, 14, 16), float64], Tensor[(2016), float64], Tensor[(715, 3), float32]) */;
  %355 = cast(%var_5304, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %356 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2145), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %357 = cast(meta[relay.Constant][14] /* ty=Tensor[(2145), float64] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?), bool] */;
  %359 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  %360 = %349.1;
  %361 = %354.3;
  %362 = greater_equal(%357, %358) /* ty=Tensor[(2145), bool] */;
  (%359, %360, meta[relay.Constant][13] /* ty=Tensor[(1792), uint64] */, %361, %362)
}

def @func_789(%var_781: Tensor[(15, 11, 13), float32], %var_782: Tensor[(15, 11, 13), float32]) -> (Tensor[(15, 11, 13), float32],) {
  %363 = cast(%var_782, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %364 = shape_of(%var_781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%var_781, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %367 = power(%365, %366) /* ty=Tensor[(15, 11, 13), float32] */;
  (%367,)
}

def @func_5116(%var_5105: Tensor[(3, 14, 4), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(168), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 3, 12), float32], Tensor[(3, 14, 4), int16], Tensor[(9, 14, 16), uint8]) {
  %368 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %369 = @func_4655() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %370 = %369.0;
  %371 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 4, 12), float32] */, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %375 = @func_3279() /* ty=(Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %376 = cast(meta[relay.Constant][16] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %377 = reshape(%376, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), float32] */;
  %378 = @func_3712(%377) /* ty=Tensor[(3, 14, 4), float32] */;
  %379 = cast(%var_5105, dtype="int16") /* ty=Tensor[(3, 14, 4), int16] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(%378, dtype="int16") /* ty=Tensor[(3, 14, 4), int16] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %383 = cast(meta[relay.Constant][17] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %384 = reshape(%383, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float64] */;
  %385 = @func_274(%384) /* ty=Tensor[(9, 14, 16), float64] */;
  %386 = cast(meta[relay.Constant][17] /* ty=Tensor[(2016), float64] */, dtype="uint8") /* ty=Tensor[(2016), uint8] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="uint8") /* ty=Tensor[(9, 14, 16), uint8] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %390 = %368.0;
  %391 = minimum(%373, %374) /* ty=Tensor[(13, 4, 12), float64] */;
  %392 = @func_4876() /* ty=Tensor[(15, 11, 13), float32] */;
  %393 = @func_4876() /* ty=Tensor[(15, 11, 13), float32] */;
  %394 = %375.0;
  %395 = right_shift(%381, %382) /* ty=Tensor[(3, 14, 4), int16] */;
  %396 = bitwise_and(%388, %389) /* ty=Tensor[(9, 14, 16), uint8] */;
  (%390, %391, meta[relay.Constant][16] /* ty=Tensor[(168), float32] */, %392, %393, %394, %395, %396)
}

def @func_4742() -> Tensor[(13, 4, 12), float32] {
  @func_1834() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_4672() -> Tensor[(13, 4, 12), float32] {
  %397 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %397.0
}

def @func_5233() -> (Tensor[(13, 4, 12), float32],) {
  %398 = @func_4672() /* ty=Tensor[(13, 4, 12), float32] */;
  (%398,)
}

def @func_2813() -> Tensor[(13, 4, 12), float32] {
  %399 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %399.0
}

def @func_5156() -> (Tensor[(13, 4, 12), float32],) {
  %400 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %401 = %400.0;
  (%401,)
}

def @func_1902() -> (Tensor[(13, 4, 12), float32],) {
  %402 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %404 = log(%403) /* ty=Tensor[(13, 4, 12), float32] */;
  (%404,)
}

def @func_3712(%var_3706: Tensor[(3, 14, 4), float32]) -> Tensor[(3, 14, 4), float32] {
  %405 = cast(%var_3706, dtype="float32") /* ty=Tensor[(3, 14, 4), float32] */;
  rsqrt(%405) /* ty=Tensor[(3, 14, 4), float32] */
}

def @func_2097(%var_2060: Tensor[(5, 9, 12), float64], %var_2079: Tensor[(360), uint16]) -> (Tensor[(13, 4, 12), float32], Tensor[(6, 4, 15), uint8], Tensor[(360), uint16], Tensor[(792), uint64], Tensor[(5, 9, 12), float64]) {
  %406 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %407 = cast(%var_2079, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %408 = cast(%var_2079, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %409 = cast(meta[relay.Constant][18] /* ty=Tensor[(792), uint64] */, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %410 = reshape(%407, newshape=[6, 4, 15]) /* ty=Tensor[(6, 4, 15), uint16] */;
  %411 = reshape(%408, newshape=[6, 4, 15]) /* ty=Tensor[(6, 4, 15), uint16] */;
  %412 = reshape(%409, newshape=[792]) /* ty=Tensor[(792), uint64] */;
  %413 = @func_1746(%410, %411, %412) /* ty=(Tensor[(6, 4, 15), uint16], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64], Tensor[(6, 4, 15), uint8]) */;
  %414 = cast(%var_2060, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %415 = acos(%414) /* ty=Tensor[(5, 9, 12), float64] */;
  %416 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %420 = %406.0;
  %421 = %413.4;
  %422 = power(%418, %419) /* ty=Tensor[(5, 9, 12), float64] */;
  (%420, %421, %var_2079, meta[relay.Constant][18] /* ty=Tensor[(792), uint64] */, %422)
}

def @func_4565(%var_4559: Tensor[(72), uint64]) -> (Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64]) {
  %423 = @func_3279() /* ty=(Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %424 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %426 = sqrt(%425) /* ty=Tensor[(13, 4, 12), float32] */;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %428 = exp(%427) /* ty=Tensor[(13, 4, 12), float64] */;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %430 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %431 = cast(meta[relay.Constant][20] /* ty=Tensor[(792), uint64] */, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %432 = reshape(%430, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), uint64] */;
  %433 = reshape(%431, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), uint64] */;
  %434 = @func_1257(%432, %433) /* ty=(Tensor[(11, 8, 9), uint64],) */;
  %435 = %423.0;
  %436 = sin(%429) /* ty=Tensor[(13, 4, 12), float64] */;
  %437 = %434.0;
  (%435, %436, %437, %var_4559, meta[relay.Constant][20] /* ty=Tensor[(792), uint64] */)
}

def @func_5240() -> (Tensor[(13, 4, 12), float32],) {
  %438 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %439 = %438.3;
  (%439,)
}

def @func_4636() -> (Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(1050), uint64], Tensor[(1050), uint64]) {
  %440 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
  %441 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %443 = rsqrt(%442) /* ty=Tensor[(13, 4, 12), float64] */;
  %444 = @func_3965() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %445 = %444.1;
  %446 = cast(%445, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %447 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%443, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %450 = cast(meta[relay.Constant][21] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %451 = reshape(%450, newshape=[1050]) /* ty=Tensor[(1050), uint64] */;
  %452 = @func_2024(%451) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64]) */;
  %453 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
  %454 = %440.0;
  %455 = power(%448, %449) /* ty=Tensor[(13, 4, 12), float32] */;
  %456 = %452.5;
  (%453, %454, %455, %456, meta[relay.Constant][21] /* ty=Tensor[(1050), uint64] */)
}

def @func_1279(%var_1271: Tensor[(12, 9, 15), int8], %var_1272: Tensor[(12, 9, 15), int8]) -> Tensor[(12, 9, 15), int8] {
  %457 = cast(%var_1272, dtype="int8") /* ty=Tensor[(12, 9, 15), int8] */;
  %458 = shape_of(%var_1271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_1271, dtype="int8") /* ty=Tensor[(12, 9, 15), int8] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%459, %460) /* ty=Tensor[(12, 9, 15), int8] */
}

def @func_2991() -> (Tensor[(13, 4, 12), float32], Tensor[(715, 3), float32], Tensor[(13, 4, 12), bool], Tensor[(13, 4, 12), float32]) {
  %461 = cast(meta[relay.Constant][22] /* ty=Tensor[(715, 3), float32] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %462 = reshape(%461, newshape=[11, 195]) /* ty=Tensor[(11, 195), float32] */;
  %463 = @func_2392(%462) /* ty=(Tensor[(13, 4, 12), uint32], Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(11, 195), float32]) */;
  %464 = %463.1;
  %465 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %466 = %465.0;
  %467 = cast(%466, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %468 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%464, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = @func_2588() /* ty=Tensor[(13, 4, 12), float32] */;
  %472 = not_equal(%469, %470) /* ty=Tensor[(13, 4, 12), bool] */;
  %473 = @func_2588() /* ty=Tensor[(13, 4, 12), float32] */;
  (%471, meta[relay.Constant][22] /* ty=Tensor[(715, 3), float32] */, %472, %473)
}

def @func_5487() -> (Tensor[(13, 4, 12), float32],) {
  %474 = @func_4454() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(2145), float32], Tensor[(13, 4, 12), float32], Tensor[(3, 14, 4), float32], Tensor[(168), float32]) */;
  %475 = %474.3;
  (%475,)
}

def @func_4454() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(2145), float32], Tensor[(13, 4, 12), float32], Tensor[(3, 14, 4), float32], Tensor[(168), float32]) {
  %476 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %477 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
  %478 = cast(meta[relay.Constant][23] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %479 = reshape(%478, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), float32] */;
  %480 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %481 = %476.0;
  %482 = %477.2;
  %483 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  %484 = @func_3712(%479) /* ty=Tensor[(3, 14, 4), float32] */;
  (%480, %481, %482, %483, %484, meta[relay.Constant][23] /* ty=Tensor[(168), float32] */)
}

def @func_5516() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %485 = @func_1902() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %486 = %485.0;
  %487 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  (%486, %487)
}

def @func_1257(%var_1252: Tensor[(1, 8, 9), uint64], %var_1253: Tensor[(11, 8, 9), uint64]) -> (Tensor[(11, 8, 9), uint64],) {
  %488 = cast(%var_1252, dtype="uint64") /* ty=Tensor[(1, 8, 9), uint64] */;
  %489 = cast(%var_1253, dtype="uint64") /* ty=Tensor[(11, 8, 9), uint64] */;
  %490 = bitwise_and(%488, %489) /* ty=Tensor[(11, 8, 9), uint64] */;
  (%490,)
}

def @func_1834() -> Tensor[(13, 4, 12), float32] {
  %491 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
  %492 = %491.0;
  %493 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%495, %496) /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_2916() -> (Tensor[(13, 4, 12), float32],) {
  %497 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %498 = %497.0;
  (%498,)
}

def @main(%var_5660: Tensor[(4, 448), uint64]) -> Tensor[(4, 448), bool] {
  %499 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %500 = %499.1;
  %501 = cast(%var_5660, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(2), int32] */;
  %503 = cast(%500, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %505 = not_equal(%503, %504) /* ty=Tensor[(4, 448), bool] */;
  %506 = cast(%var_5660, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(2), int32] */;
  %508 = cast(%505, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%508, %509) /* ty=Tensor[(4, 448), bool] */
}

def @func_1907() -> (Tensor[(13, 4, 12), float32],) {
  %510 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  (%510,)
}

def @func_2521() -> (Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) {
  %511 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  %512 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 4, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %516 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 448), uint64] */, dtype="uint64") /* ty=Tensor[(4, 448), uint64] */;
  %517 = reshape(%516, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), uint64] */;
  %518 = @func_2235(%517) /* ty=(Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) */;
  %519 = cast(%511, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %520 = sinh(%519) /* ty=Tensor[(13, 4, 12), float32] */;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %522 = log10(%521) /* ty=Tensor[(13, 4, 12), float32] */;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %524 = greater(%514, %515) /* ty=Tensor[(13, 4, 12), bool] */;
  %525 = %518.1;
  %526 = acosh(%523) /* ty=Tensor[(13, 4, 12), float32] */;
  (%524, %525, meta[relay.Constant][26] /* ty=Tensor[(4, 448), uint64] */, %526)
}

def @func_2845() -> (Tensor[(13, 4, 12), float32],) {
  %527 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  (%527,)
}

def @func_3893() -> (Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32]) {
  %528 = @func_1902() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %529 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %530 = %528.0;
  %531 = %529.2;
  (%530, %531)
}

def @func_1176(%var_1170: Tensor[(5, 14, 15), uint64], %var_1171: Tensor[(5, 14, 15), uint64]) -> Tensor[(5, 14, 15), uint64] {
  %532 = cast(%var_1171, dtype="uint64") /* ty=Tensor[(5, 14, 15), uint64] */;
  %533 = shape_of(%var_1170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_1170, dtype="uint64") /* ty=Tensor[(5, 14, 15), uint64] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%534, %535) /* ty=Tensor[(5, 14, 15), uint64] */
}

def @func_1336(%var_1305: Tensor[(2, 396), uint64], %var_1313: Tensor[(6, 15, 2), float64]) -> (Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) {
  %536 = cast(meta[relay.Constant][27] /* ty=Tensor[(350, 3), uint64] */, dtype="uint64") /* ty=Tensor[(350, 3), uint64] */;
  %537 = cast(meta[relay.Constant][27] /* ty=Tensor[(350, 3), uint64] */, dtype="uint64") /* ty=Tensor[(350, 3), uint64] */;
  %538 = reshape(%536, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %539 = reshape(%537, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %540 = cast(meta[relay.Constant][28] /* ty=Tensor[(18, 4), uint64] */, dtype="uint64") /* ty=Tensor[(18, 4), uint64] */;
  %541 = cast(%var_1305, dtype="uint64") /* ty=Tensor[(2, 396), uint64] */;
  %542 = reshape(%540, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), uint64] */;
  %543 = reshape(%541, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), uint64] */;
  %544 = @func_1257(%542, %543) /* ty=(Tensor[(11, 8, 9), uint64],) */;
  %545 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 2), float64] */;
  %546 = acos(%545) /* ty=Tensor[(6, 1, 2), float64] */;
  %547 = cast(%546, dtype="uint32") /* ty=Tensor[(6, 1, 2), uint32] */;
  %548 = cast(%var_1313, dtype="uint32") /* ty=Tensor[(6, 15, 2), uint32] */;
  %549 = cast(meta[relay.Constant][30] /* ty=Tensor[(1620), int8] */, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %550 = cast(meta[relay.Constant][30] /* ty=Tensor[(1620), int8] */, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %551 = reshape(%549, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %552 = reshape(%550, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %553 = @func_1176(%538, %539) /* ty=Tensor[(5, 14, 15), uint64] */;
  %554 = %544.0;
  %555 = logical_xor(%547, %548) /* ty=Tensor[(6, 15, 2), uint32] */;
  %556 = @func_1279(%551, %552) /* ty=Tensor[(12, 9, 15), int8] */;
  (%553, meta[relay.Constant][27] /* ty=Tensor[(350, 3), uint64] */, %554, meta[relay.Constant][28] /* ty=Tensor[(18, 4), uint64] */, %var_1305, %555, %556, meta[relay.Constant][30] /* ty=Tensor[(1620), int8] */)
}

def @func_4090(%var_4047: Tensor[(540), float64], %var_4083: Tensor[(13, 4, 12), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(792), uint64], Tensor[(540), float64], Tensor[(360), uint16], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), uint32]) {
  %557 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %558 = cast(%var_4047, dtype="float64") /* ty=Tensor[(540), float64] */;
  %559 = cast(meta[relay.Constant][31] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %560 = reshape(%558, newshape=[5, 9, 12]) /* ty=Tensor[(5, 9, 12), float64] */;
  %561 = reshape(%559, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %562 = @func_2097(%560, %561) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(6, 4, 15), uint8], Tensor[(360), uint16], Tensor[(792), uint64], Tensor[(5, 9, 12), float64]) */;
  %563 = @func_1902() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %564 = @func_3218() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %565 = %564.1;
  %566 = cast(%var_4083, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %570 = %557.0;
  %571 = %562.3;
  %572 = %563.0;
  %573 = right_shift(%568, %569) /* ty=Tensor[(13, 4, 12), uint32] */;
  (%570, %571, %var_4047, meta[relay.Constant][31] /* ty=Tensor[(360), uint16] */, %572, %573)
}

def @func_2865() -> Tensor[(1, 1, 12), float32] {
  %574 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 1, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 12), float32] */;
  erf(%574) /* ty=Tensor[(1, 1, 12), float32] */
}

def @func_3147(%var_3137: Tensor[(7, 5, 1), int32], %var_3138: Tensor[(7, 5, 1), int32]) -> (Tensor[(7, 5, ?), int32],) {
  %575 = cast(%var_3138, dtype="int32") /* ty=Tensor[(7, 5, 1), int32] */;
  %576 = shape_of(%var_3137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%var_3137, dtype="int32") /* ty=Tensor[(7, 5, 1), int32] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %579 = subtract(%577, %578) /* ty=Tensor[(7, 5, ?), int32] */;
  (%579,)
}

def @func_3218() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %580 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %581 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  %582 = %580.1;
  (%581, %582)
}

def @func_3568() -> (Tensor[(715, 3), float32],) {
  %583 = @func_2991() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(715, 3), float32], Tensor[(13, 4, 12), bool], Tensor[(13, 4, 12), float32]) */;
  %584 = %583.1;
  (%584,)
}

def @func_2336(%var_2252: Tensor[(8, 10, 5), float32], %var_2306: Tensor[(784), uint32]) -> (Tensor[(8, 10, 5), bool], Tensor[(7, 8, 14), bool], Tensor[(784), uint32], Tensor[(8, 10, 5), bool], Tensor[(14, 8, 16), uint64], Tensor[(1792), uint64], Tensor[(7, 8, 14), bool]) {
  %585 = cast(%var_2252, dtype="float32") /* ty=Tensor[(8, 10, 5), float32] */;
  %586 = cosh(%585) /* ty=Tensor[(8, 10, 5), float32] */;
  %587 = cast(%586, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
  %588 = shape_of(%var_2252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_2252, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = cast(%var_2306, dtype="uint32") /* ty=Tensor[(784), uint32] */;
  %592 = reshape(%591, newshape=[7, 8, 14]) /* ty=Tensor[(7, 8, 14), uint32] */;
  %593 = cast(%var_2252, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  %594 = acosh(%593) /* ty=Tensor[(8, 10, 5), float64] */;
  %595 = cast(%594, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
  %596 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%586, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = cast(meta[relay.Constant][33] /* ty=Tensor[(1792), uint64] */, dtype="uint64") /* ty=Tensor[(1792), uint64] */;
  %600 = reshape(%599, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), uint64] */;
  %601 = @func_2235(%600) /* ty=(Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) */;
  %602 = @func_1198(%592) /* ty=Tensor[(7, 8, 14), bool] */;
  %603 = cast(%602, dtype="uint32") /* ty=Tensor[(7, 8, 14), uint32] */;
  %604 = reshape(%603, newshape=[7, 8, 14]) /* ty=Tensor[(7, 8, 14), uint32] */;
  %605 = logical_or(%589, %590) /* ty=Tensor[(8, 10, 5), bool] */;
  %606 = greater(%597, %598) /* ty=Tensor[(8, 10, 5), bool] */;
  %607 = %601.0;
  %608 = @func_1198(%604) /* ty=Tensor[(7, 8, 14), bool] */;
  (%605, %602, %var_2306, %606, %607, meta[relay.Constant][33] /* ty=Tensor[(1792), uint64] */, %608)
}

def @func_3965() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %609 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %610 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %611 = %609.0;
  %612 = %610.0;
  (%611, %612)
}

def @func_1821() -> (Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) {
  %613 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %614 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %617 = cast(meta[relay.Constant][36] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %618 = cast(meta[relay.Constant][36] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %619 = reshape(%617, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
  %620 = reshape(%618, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
  %621 = @func_789(%619, %620) /* ty=(Tensor[(15, 11, 13), float32],) */;
  %622 = maximum(%615, %616) /* ty=Tensor[(13, 4, 12), uint16] */;
  %623 = %621.0;
  (%622, %623, meta[relay.Constant][36] /* ty=Tensor[(2145), float32] */)
}

def @func_1198(%var_1183: Tensor[(7, 8, 14), uint32]) -> Tensor[(7, 8, 14), bool] {
  %624 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 8, 14), uint32] */, dtype="bool") /* ty=Tensor[(7, 8, 14), bool] */;
  %625 = shape_of(%var_1183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_1183, dtype="bool") /* ty=Tensor[(7, 8, 14), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%626, %627) /* ty=Tensor[(7, 8, 14), bool] */
}

def @func_4353(%var_4339: Tensor[(6, 8, 12), uint8], %var_4340: Tensor[(6, 8, 12), uint8]) -> (Tensor[(6, 8, 12), uint8],) {
  %628 = cast(%var_4340, dtype="uint8") /* ty=Tensor[(6, 8, 12), uint8] */;
  %629 = shape_of(%var_4339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_4339, dtype="uint8") /* ty=Tensor[(6, 8, 12), uint8] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %632 = left_shift(%630, %631) /* ty=Tensor[(6, 8, 12), uint8] */;
  (%632,)
}

def @func_4258(%var_4240: Tensor[(715, 3), float64], %var_4252: Tensor[(715, 3), float64]) -> (Tensor[(13, 4, 12), float32], Tensor[(715, 3), float64], Tensor[(9, 14, 16), float64], Tensor[(2016), float64], Tensor[(715, 3), float32]) {
  %633 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %634 = @func_3568() /* ty=(Tensor[(715, 3), float32],) */;
  %635 = %634.0;
  %636 = cast(meta[relay.Constant][38] /* ty=Tensor[(715, 3), float32] */, dtype="uint32") /* ty=Tensor[(715, 3), uint32] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(2), int32] */;
  %638 = cast(%635, dtype="uint32") /* ty=Tensor[(715, 3), uint32] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %640 = bitwise_xor(%638, %639) /* ty=Tensor[(715, 3), uint32] */;
  %641 = cast(meta[relay.Constant][38] /* ty=Tensor[(715, 3), float32] */, dtype="bool") /* ty=Tensor[(715, 3), bool] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(2), int32] */;
  %643 = cast(%640, dtype="bool") /* ty=Tensor[(715, 3), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %645 = greater_equal(%643, %644) /* ty=Tensor[(715, 3), bool] */;
  %646 = cast(%640, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(2), int32] */;
  %648 = cast(%645, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %650 = floor_divide(%648, %649) /* ty=Tensor[(715, 3), float32] */;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(715, 3), float64] */;
  %652 = log(%651) /* ty=Tensor[(715, 3), float64] */;
  %653 = cast(%var_4240, dtype="float64") /* ty=Tensor[(715, 3), float64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(2), int32] */;
  %655 = cast(%652, dtype="float64") /* ty=Tensor[(715, 3), float64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %657 = cast(meta[relay.Constant][39] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %658 = reshape(%657, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float64] */;
  %659 = cast(%var_4252, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %660 = shape_of(%652, dtype="int32") /* ty=Tensor[(2), int32] */;
  %661 = cast(%652, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %663 = %633.0;
  %664 = divide(%655, %656) /* ty=Tensor[(715, 3), float64] */;
  %665 = @func_274(%658) /* ty=Tensor[(9, 14, 16), float64] */;
  %666 = floor_mod(%661, %662) /* ty=Tensor[(715, 3), float32] */;
  (%663, %664, %665, meta[relay.Constant][39] /* ty=Tensor[(2016), float64] */, %666)
}

def @func_3038() -> (Tensor[(1, 1, 12), float32],) {
  %667 = @func_2865() /* ty=Tensor[(1, 1, 12), float32] */;
  (%667,)
}

def @func_2038() -> Tensor[(13, 4, 12), float32] {
  %668 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %668.0
}

def @func_2564(%var_2553: Tensor[(1, 3, 11), int64]) -> (Tensor[(8, 3, 11), int64],) {
  %669 = cast(%var_2553, dtype="bool") /* ty=Tensor[(1, 3, 11), bool] */;
  %670 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 3, 11), int64] */, dtype="bool") /* ty=Tensor[(8, 3, 11), bool] */;
  %671 = greater(%669, %670) /* ty=Tensor[(8, 3, 11), bool] */;
  %672 = cast(%var_2553, dtype="int64") /* ty=Tensor[(1, 3, 11), int64] */;
  %673 = cast(%671, dtype="int64") /* ty=Tensor[(8, 3, 11), int64] */;
  %674 = add(%672, %673) /* ty=Tensor[(8, 3, 11), int64] */;
  (%674,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2394(%var_2393: Tensor[(11, 195), float32]) -> (Tensor[(13, 4, 12), uint32], Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(11, 195), float32]) {
  %15 = fn (%var_2389: Tensor[(11, 195), float32]) -> (Tensor[(13, 4, 12), uint32], Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(11, 195), float32]) {
    %0 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
    %1 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
    %2 = %1.0;
    %3 = cast(%2, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
    %4 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
    %5 = cast(%0, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
    %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %7 = cast(%var_2389, dtype="float32") /* ty=Tensor[(11, 195), float32] */;
    %8 = cast(%var_2389, dtype="float32") /* ty=Tensor[(11, 195), float32] */;
    %9 = reshape(%7, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
    %10 = reshape(%8, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
    %11 = @func_789(%9, %10) /* ty=(Tensor[(15, 11, 13), float32],) */;
    %12 = multiply(%5, %6) /* ty=Tensor[(13, 4, 12), uint32] */;
    %13 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
    %14 = %11.0;
    (%12, %13, %14, %var_2389)
  };
  %15(%var_2393) /* ty=(Tensor[(13, 4, 12), uint32], Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(11, 195), float32]) */
}

def @func_4455() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(2145), float32], Tensor[(13, 4, 12), float32], Tensor[(3, 14, 4), float32], Tensor[(168), float32]) {
  %25 = fn () -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(2145), float32], Tensor[(13, 4, 12), float32], Tensor[(3, 14, 4), float32], Tensor[(168), float32]) {
    %16 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %17 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %19 = reshape(%18, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), float32] */;
    %20 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
    %21 = %16.0;
    %22 = %17.2;
    %23 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
    %24 = @func_3712(%19) /* ty=Tensor[(3, 14, 4), float32] */;
    (%20, %21, %22, %23, %24, meta[relay.Constant][0] /* ty=Tensor[(168), float32] */)
  };
  %25() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(2145), float32], Tensor[(13, 4, 12), float32], Tensor[(3, 14, 4), float32], Tensor[(168), float32]) */
}

def @func_2348() -> Tensor[(13, 4, 12), float32] {
  %26 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %26.0
}

def @func_4744() -> Tensor[(13, 4, 12), float32] {
  @func_4742() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_4742() -> Tensor[(13, 4, 12), float32] {
  @func_1834() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_1902() -> (Tensor[(13, 4, 12), float32],) {
  %27 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %29 = log(%28) /* ty=Tensor[(13, 4, 12), float32] */;
  (%29,)
}

def @func_4876() -> Tensor[(15, 11, 13), float32] {
  %30 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
  %31 = %30.1;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%34, %35) /* ty=Tensor[(15, 11, 13), float32] */
}

def @func_5489() -> (Tensor[(13, 4, 12), float32],) {
  @func_5487() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_4184(%var_4180: Tensor[(224), bool], %var_4181: Tensor[(792, 1), uint64], %var_4182: Tensor[(13, 4, 12), float64], %var_4183: Tensor[(6, 30), float64]) -> (Tensor[(224), bool], Tensor[(13, 4, 12), uint16], Tensor[(13, 4, 12), float64], Tensor[(6, 30), int32], Tensor[(792, 1), float32]) {
  @func_4178(%var_4180, %var_4181, %var_4182, %var_4183) /* ty=(Tensor[(224), bool], Tensor[(13, 4, 12), uint16], Tensor[(13, 4, 12), float64], Tensor[(6, 30), int32], Tensor[(792, 1), float32]) */
}

def @func_3965() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %36 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %37 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %38 = %36.0;
  %39 = %37.0;
  (%38, %39)
}

def @func_3150(%var_3148: Tensor[(7, 5, 1), int32], %var_3149: Tensor[(7, 5, 1), int32]) -> (Tensor[(7, 5, ?), int32],) {
  %45 = fn (%var_3137: Tensor[(7, 5, 1), int32], %var_3138: Tensor[(7, 5, 1), int32]) -> (Tensor[(7, 5, ?), int32],) {
    %40 = cast(%var_3138, dtype="int32") /* ty=Tensor[(7, 5, 1), int32] */;
    %41 = shape_of(%var_3137, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%var_3137, dtype="int32") /* ty=Tensor[(7, 5, 1), int32] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %44 = subtract(%42, %43) /* ty=Tensor[(7, 5, ?), int32] */;
    (%44,)
  };
  %45(%var_3148, %var_3149) /* ty=(Tensor[(7, 5, ?), int32],) */
}

def @func_4293(%var_4284: Tensor[(132), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32]) {
  %46 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %47 = cast(%var_4284, dtype="float32") /* ty=Tensor[(132), float32] */;
  %48 = reshape(%47, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float32] */;
  %49 = @func_4014(%48) /* ty=(Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) */;
  %50 = %46.0;
  %51 = %49.0;
  (%50, %51, %var_4284)
}

def @func_4809(%var_4807: Tensor[(132), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 448), uint64]) {
  @func_4806(%var_4807) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 448), uint64]) */
}

def @func_1834() -> Tensor[(13, 4, 12), float32] {
  %52 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
  %53 = %52.0;
  %54 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%56, %57) /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_2590() -> Tensor[(13, 4, 12), float32] {
  @func_2588() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_3548(%var_3546: Tensor[(4, 14, 12), float32], %var_3547: Tensor[(792), uint64]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 14, 12), bool], Tensor[(12, 9, 15), int8], Tensor[(792), uint64], Tensor[(6, 30), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), bool]) {
  @func_3544(%var_3546, %var_3547) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 14, 12), bool], Tensor[(12, 9, 15), int8], Tensor[(792), uint64], Tensor[(6, 30), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), bool]) */
}

def @func_5372() -> (Tensor[(13, 4, 12), float32],) {
  %58 = @func_2916() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %59 = %58.0;
  (%59,)
}

def @func_4878() -> Tensor[(15, 11, 13), float32] {
  @func_4876() /* ty=Tensor[(15, 11, 13), float32] */
}

def @func_4636() -> (Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(1050), uint64], Tensor[(1050), uint64]) {
  %60 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
  %61 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %63 = rsqrt(%62) /* ty=Tensor[(13, 4, 12), float64] */;
  %64 = @func_3965() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %65 = %64.1;
  %66 = cast(%65, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %67 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%63, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %71 = reshape(%70, newshape=[1050]) /* ty=Tensor[(1050), uint64] */;
  %72 = @func_2024(%71) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64]) */;
  %73 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
  %74 = %60.0;
  %75 = power(%68, %69) /* ty=Tensor[(13, 4, 12), float32] */;
  %76 = %72.5;
  (%73, %74, %75, %76, meta[relay.Constant][3] /* ty=Tensor[(1050), uint64] */)
}

def @func_274(%var_256: Tensor[(9, 14, 16), float64]) -> Tensor[(9, 14, 16), float64] {
  %77 = cast(%var_256, dtype="float64") /* ty=Tensor[(9, 14, 16), float64] */;
  cos(%77) /* ty=Tensor[(9, 14, 16), float64] */
}

def @func_3893() -> (Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32]) {
  %78 = @func_1902() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %79 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %80 = %78.0;
  %81 = %79.2;
  (%80, %81)
}

def @func_4017(%var_4015: Tensor[(2, 6, 11), float32]) -> (Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) {
  @func_4014(%var_4015) /* ty=(Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) */
}

def @func_1746(%var_1716: Tensor[(6, 4, 15), uint16], %var_1717: Tensor[(6, 4, 15), uint16], %var_1728: Tensor[(792), uint64]) -> (Tensor[(6, 4, 15), uint16], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64], Tensor[(6, 4, 15), uint8]) {
  %82 = cast(%var_1717, dtype="uint16") /* ty=Tensor[(6, 4, 15), uint16] */;
  %83 = shape_of(%var_1716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_1716, dtype="uint16") /* ty=Tensor[(6, 4, 15), uint16] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(72), uint64] */, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %87 = cast(%var_1728, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %88 = reshape(%86, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), uint64] */;
  %89 = reshape(%87, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), uint64] */;
  %90 = @func_1257(%88, %89) /* ty=(Tensor[(11, 8, 9), uint64],) */;
  %91 = cast(%var_1716, dtype="float32") /* ty=Tensor[(6, 4, 15), float32] */;
  %92 = log2(%91) /* ty=Tensor[(6, 4, 15), float32] */;
  %93 = cast(%var_1716, dtype="uint8") /* ty=Tensor[(6, 4, 15), uint8] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%92, dtype="uint8") /* ty=Tensor[(6, 4, 15), uint8] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %97 = left_shift(%84, %85) /* ty=Tensor[(6, 4, 15), uint16] */;
  %98 = %90.0;
  %99 = right_shift(%95, %96) /* ty=Tensor[(6, 4, 15), uint8] */;
  (%97, %98, meta[relay.Constant][4] /* ty=Tensor[(72), uint64] */, %var_1728, %99)
}

def @func_1950() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */
}

def @func_2339(%var_2337: Tensor[(8, 10, 5), float32], %var_2338: Tensor[(784), uint32]) -> (Tensor[(8, 10, 5), bool], Tensor[(7, 8, 14), bool], Tensor[(784), uint32], Tensor[(8, 10, 5), bool], Tensor[(14, 8, 16), uint64], Tensor[(1792), uint64], Tensor[(7, 8, 14), bool]) {
  %124 = fn (%var_2252: Tensor[(8, 10, 5), float32], %var_2306: Tensor[(784), uint32]) -> (Tensor[(8, 10, 5), bool], Tensor[(7, 8, 14), bool], Tensor[(784), uint32], Tensor[(8, 10, 5), bool], Tensor[(14, 8, 16), uint64], Tensor[(1792), uint64], Tensor[(7, 8, 14), bool]) {
    %100 = cast(%var_2252, dtype="float32") /* ty=Tensor[(8, 10, 5), float32] */;
    %101 = cosh(%100) /* ty=Tensor[(8, 10, 5), float32] */;
    %102 = cast(%101, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
    %103 = shape_of(%var_2252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%var_2252, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %106 = cast(%var_2306, dtype="uint32") /* ty=Tensor[(784), uint32] */;
    %107 = reshape(%106, newshape=[7, 8, 14]) /* ty=Tensor[(7, 8, 14), uint32] */;
    %108 = cast(%var_2252, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
    %109 = acosh(%108) /* ty=Tensor[(8, 10, 5), float64] */;
    %110 = cast(%109, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
    %111 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(%101, dtype="bool") /* ty=Tensor[(8, 10, 5), bool] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(1792), uint64] */, dtype="uint64") /* ty=Tensor[(1792), uint64] */;
    %115 = reshape(%114, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), uint64] */;
    %116 = @func_2235(%115) /* ty=(Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) */;
    %117 = @func_1198(%107) /* ty=Tensor[(7, 8, 14), bool] */;
    %118 = cast(%117, dtype="uint32") /* ty=Tensor[(7, 8, 14), uint32] */;
    %119 = reshape(%118, newshape=[7, 8, 14]) /* ty=Tensor[(7, 8, 14), uint32] */;
    %120 = logical_or(%104, %105) /* ty=Tensor[(8, 10, 5), bool] */;
    %121 = greater(%112, %113) /* ty=Tensor[(8, 10, 5), bool] */;
    %122 = %116.0;
    %123 = @func_1198(%119) /* ty=Tensor[(7, 8, 14), bool] */;
    (%120, %117, %var_2306, %121, %122, meta[relay.Constant][5] /* ty=Tensor[(1792), uint64] */, %123)
  };
  %124(%var_2337, %var_2338) /* ty=(Tensor[(8, 10, 5), bool], Tensor[(7, 8, 14), bool], Tensor[(784), uint32], Tensor[(8, 10, 5), bool], Tensor[(14, 8, 16), uint64], Tensor[(1792), uint64], Tensor[(7, 8, 14), bool]) */
}

def @func_2405() -> (Tensor[(13, 4, 12), float32],) {
  %127 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %125 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
    %126 = %125.1;
    (%126,)
  };
  %127() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_2522() -> (Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) {
  %144 = fn () -> (Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) {
    %128 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
    %129 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 4, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%128, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 448), uint64] */, dtype="uint64") /* ty=Tensor[(4, 448), uint64] */;
    %134 = reshape(%133, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), uint64] */;
    %135 = @func_2235(%134) /* ty=(Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) */;
    %136 = cast(%128, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
    %137 = sinh(%136) /* ty=Tensor[(13, 4, 12), float32] */;
    %138 = cast(%137, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
    %139 = log10(%138) /* ty=Tensor[(13, 4, 12), float32] */;
    %140 = cast(%139, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
    %141 = greater(%131, %132) /* ty=Tensor[(13, 4, 12), bool] */;
    %142 = %135.1;
    %143 = acosh(%140) /* ty=Tensor[(13, 4, 12), float32] */;
    (%141, %142, meta[relay.Constant][7] /* ty=Tensor[(4, 448), uint64] */, %143)
  };
  %144() /* ty=(Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) */
}

def @func_5426() -> Tensor[(13, 4, 12), float32] {
  %146 = fn () -> Tensor[(13, 4, 12), float32] {
    %145 = @func_3218() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
    %145.0
  };
  %146() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_2101(%var_2099: Tensor[(5, 9, 12), float64], %var_2100: Tensor[(360), uint16]) -> (Tensor[(13, 4, 12), float32], Tensor[(6, 4, 15), uint8], Tensor[(360), uint16], Tensor[(792), uint64], Tensor[(5, 9, 12), float64]) {
  @func_2097(%var_2099, %var_2100) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(6, 4, 15), uint8], Tensor[(360), uint16], Tensor[(792), uint64], Tensor[(5, 9, 12), float64]) */
}

def @func_4934(%var_4879: Tensor[(13, 4, 16), float32], %var_4911: Tensor[(1620), int8]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 16), int8], Tensor[(1620), int8], Tensor[(12, 9, 15), float64], Tensor[(13, 4, 16), uint32], Tensor[(715, 3), float32]) {
  %147 = @func_3893() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32]) */;
  %148 = cast(%var_4879, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %149 = exp(%148) /* ty=Tensor[(13, 4, 16), float32] */;
  %150 = cast(%149, dtype="uint16") /* ty=Tensor[(13, 4, 16), uint16] */;
  %151 = shape_of(%var_4879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%var_4879, dtype="uint16") /* ty=Tensor[(13, 4, 16), uint16] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %154 = minimum(%152, %153) /* ty=Tensor[(13, 4, 16), uint16] */;
  %155 = cast(%154, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %156 = shape_of(%var_4879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%var_4879, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %159 = cast(%var_4911, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %160 = cast(%var_4911, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %161 = reshape(%159, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %162 = reshape(%160, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %163 = @func_1279(%161, %162) /* ty=Tensor[(12, 9, 15), int8] */;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(12, 9, 15), float64] */;
  %165 = cast(%154, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %166 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%149, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %169 = bitwise_xor(%167, %168) /* ty=Tensor[(13, 4, 16), int8] */;
  %170 = cast(%149, dtype="uint32") /* ty=Tensor[(13, 4, 16), uint32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="uint32") /* ty=Tensor[(13, 4, 16), uint32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %174 = @func_3568() /* ty=(Tensor[(715, 3), float32],) */;
  %175 = %147.0;
  %176 = maximum(%157, %158) /* ty=Tensor[(13, 4, 16), int8] */;
  %177 = sigmoid(%164) /* ty=Tensor[(12, 9, 15), float64] */;
  %178 = logical_xor(%172, %173) /* ty=Tensor[(13, 4, 16), uint32] */;
  %179 = %174.0;
  (%175, %176, %var_4911, %177, %178, %179)
}

def @func_5234() -> (Tensor[(13, 4, 12), float32],) {
  %181 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %180 = @func_4672() /* ty=Tensor[(13, 4, 12), float32] */;
    (%180,)
  };
  %181() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_5156() -> (Tensor[(13, 4, 12), float32],) {
  %182 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %183 = %182.0;
  (%183,)
}

def @func_1179(%var_1177: Tensor[(5, 14, 15), uint64], %var_1178: Tensor[(5, 14, 15), uint64]) -> Tensor[(5, 14, 15), uint64] {
  %188 = fn (%var_1170: Tensor[(5, 14, 15), uint64], %var_1171: Tensor[(5, 14, 15), uint64]) -> Tensor[(5, 14, 15), uint64] {
    %184 = cast(%var_1171, dtype="uint64") /* ty=Tensor[(5, 14, 15), uint64] */;
    %185 = shape_of(%var_1170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %186 = cast(%var_1170, dtype="uint64") /* ty=Tensor[(5, 14, 15), uint64] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%186, %187) /* ty=Tensor[(5, 14, 15), uint64] */
  };
  %188(%var_1177, %var_1178) /* ty=Tensor[(5, 14, 15), uint64] */
}

def @func_2991() -> (Tensor[(13, 4, 12), float32], Tensor[(715, 3), float32], Tensor[(13, 4, 12), bool], Tensor[(13, 4, 12), float32]) {
  %189 = cast(meta[relay.Constant][8] /* ty=Tensor[(715, 3), float32] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %190 = reshape(%189, newshape=[11, 195]) /* ty=Tensor[(11, 195), float32] */;
  %191 = @func_2392(%190) /* ty=(Tensor[(13, 4, 12), uint32], Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(11, 195), float32]) */;
  %192 = %191.1;
  %193 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %196 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%192, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = @func_2588() /* ty=Tensor[(13, 4, 12), float32] */;
  %200 = not_equal(%197, %198) /* ty=Tensor[(13, 4, 12), bool] */;
  %201 = @func_2588() /* ty=Tensor[(13, 4, 12), float32] */;
  (%199, meta[relay.Constant][8] /* ty=Tensor[(715, 3), float32] */, %200, %201)
}

def @func_3714(%var_3713: Tensor[(3, 14, 4), float32]) -> Tensor[(3, 14, 4), float32] {
  %203 = fn (%var_3706: Tensor[(3, 14, 4), float32]) -> Tensor[(3, 14, 4), float32] {
    %202 = cast(%var_3706, dtype="float32") /* ty=Tensor[(3, 14, 4), float32] */;
    rsqrt(%202) /* ty=Tensor[(3, 14, 4), float32] */
  };
  %203(%var_3713) /* ty=Tensor[(3, 14, 4), float32] */
}

def @func_4261(%var_4259: Tensor[(715, 3), float64], %var_4260: Tensor[(715, 3), float64]) -> (Tensor[(13, 4, 12), float32], Tensor[(715, 3), float64], Tensor[(9, 14, 16), float64], Tensor[(2016), float64], Tensor[(715, 3), float32]) {
  %238 = fn (%var_4240: Tensor[(715, 3), float64], %var_4252: Tensor[(715, 3), float64]) -> (Tensor[(13, 4, 12), float32], Tensor[(715, 3), float64], Tensor[(9, 14, 16), float64], Tensor[(2016), float64], Tensor[(715, 3), float32]) {
    %204 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %205 = @func_3568() /* ty=(Tensor[(715, 3), float32],) */;
    %206 = %205.0;
    %207 = cast(meta[relay.Constant][9] /* ty=Tensor[(715, 3), float32] */, dtype="uint32") /* ty=Tensor[(715, 3), uint32] */;
    %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(2), int32] */;
    %209 = cast(%206, dtype="uint32") /* ty=Tensor[(715, 3), uint32] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %211 = bitwise_xor(%209, %210) /* ty=Tensor[(715, 3), uint32] */;
    %212 = cast(meta[relay.Constant][9] /* ty=Tensor[(715, 3), float32] */, dtype="bool") /* ty=Tensor[(715, 3), bool] */;
    %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(2), int32] */;
    %214 = cast(%211, dtype="bool") /* ty=Tensor[(715, 3), bool] */;
    %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %216 = greater_equal(%214, %215) /* ty=Tensor[(715, 3), bool] */;
    %217 = cast(%211, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
    %219 = cast(%216, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %221 = floor_divide(%219, %220) /* ty=Tensor[(715, 3), float32] */;
    %222 = cast(%221, dtype="float64") /* ty=Tensor[(715, 3), float64] */;
    %223 = log(%222) /* ty=Tensor[(715, 3), float64] */;
    %224 = cast(%var_4240, dtype="float64") /* ty=Tensor[(715, 3), float64] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(2), int32] */;
    %226 = cast(%223, dtype="float64") /* ty=Tensor[(715, 3), float64] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %228 = cast(meta[relay.Constant][10] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
    %229 = reshape(%228, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float64] */;
    %230 = cast(%var_4252, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %231 = shape_of(%223, dtype="int32") /* ty=Tensor[(2), int32] */;
    %232 = cast(%223, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %234 = %204.0;
    %235 = divide(%226, %227) /* ty=Tensor[(715, 3), float64] */;
    %236 = @func_274(%229) /* ty=Tensor[(9, 14, 16), float64] */;
    %237 = floor_mod(%232, %233) /* ty=Tensor[(715, 3), float32] */;
    (%234, %235, %236, meta[relay.Constant][10] /* ty=Tensor[(2016), float64] */, %237)
  };
  %238(%var_4259, %var_4260) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(715, 3), float64], Tensor[(9, 14, 16), float64], Tensor[(2016), float64], Tensor[(715, 3), float32]) */
}

def @func_4806(%var_4784: Tensor[(132), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 448), uint64]) {
  %239 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %240 = cast(%var_4784, dtype="float32") /* ty=Tensor[(132), float32] */;
  %241 = reshape(%240, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float32] */;
  %242 = @func_4014(%241) /* ty=(Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) */;
  %243 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %244 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %245 = %239.0;
  %246 = %242.0;
  %247 = %243.0;
  %248 = %244.1;
  (%245, %246, %var_4784, %247, %248)
}

def @func_5158() -> (Tensor[(13, 4, 12), float32],) {
  @func_5156() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_1751(%var_1748: Tensor[(6, 4, 15), uint16], %var_1749: Tensor[(6, 4, 15), uint16], %var_1750: Tensor[(792), uint64]) -> (Tensor[(6, 4, 15), uint16], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64], Tensor[(6, 4, 15), uint8]) {
  @func_1746(%var_1748, %var_1749, %var_1750) /* ty=(Tensor[(6, 4, 15), uint16], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64], Tensor[(6, 4, 15), uint8]) */
}

def @main(%var_5660: Tensor[(4, 448), uint64]) -> Tensor[(4, 448), bool] {
  %249 = @func_2949() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %250 = %249.1;
  %251 = cast(%var_5660, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %255 = not_equal(%253, %254) /* ty=Tensor[(4, 448), bool] */;
  %256 = cast(%var_5660, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(2), int32] */;
  %258 = cast(%255, dtype="bool") /* ty=Tensor[(4, 448), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%258, %259) /* ty=Tensor[(4, 448), bool] */
}

def @func_3895() -> (Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32]) {
  @func_3893() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32]) */
}

def @func_3692(%var_3690: Tensor[(1620), int8]) -> (Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64], Tensor[(1, 1, 12), float32], Tensor[(5, 5, 6), float32], Tensor[(13, 4, 12), uint8], Tensor[(5, 5, 6), uint16], Tensor[(12, 9, 15), int8], Tensor[(1620), int8], Tensor[(5, 5, 6), float64], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64]) {
  @func_3689(%var_3690) /* ty=(Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64], Tensor[(1, 1, 12), float32], Tensor[(5, 5, 6), float32], Tensor[(13, 4, 12), uint8], Tensor[(5, 5, 6), uint16], Tensor[(12, 9, 15), int8], Tensor[(1620), int8], Tensor[(5, 5, 6), float64], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64]) */
}

def @func_1282(%var_1280: Tensor[(12, 9, 15), int8], %var_1281: Tensor[(12, 9, 15), int8]) -> Tensor[(12, 9, 15), int8] {
  %264 = fn (%var_1271: Tensor[(12, 9, 15), int8], %var_1272: Tensor[(12, 9, 15), int8]) -> Tensor[(12, 9, 15), int8] {
    %260 = cast(%var_1272, dtype="int8") /* ty=Tensor[(12, 9, 15), int8] */;
    %261 = shape_of(%var_1271, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%var_1271, dtype="int8") /* ty=Tensor[(12, 9, 15), int8] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    minimum(%262, %263) /* ty=Tensor[(12, 9, 15), int8] */
  };
  %264(%var_1280, %var_1281) /* ty=Tensor[(12, 9, 15), int8] */
}

def @func_5312(%var_5304: Tensor[(2145), float64]) -> (Tensor[(13, 4, 12), float32], Tensor[(14, 8, 16), float64], Tensor[(1792), uint64], Tensor[(2016), float64], Tensor[(2145), bool]) {
  %265 = cast(meta[relay.Constant][11] /* ty=Tensor[(1792), uint64] */, dtype="uint64") /* ty=Tensor[(1792), uint64] */;
  %266 = reshape(%265, newshape=[14, 8, 16]) /* ty=Tensor[(14, 8, 16), uint64] */;
  %267 = @func_2235(%266) /* ty=(Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) */;
  %268 = cast(meta[relay.Constant][12] /* ty=Tensor[(2145), float64] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %269 = cast(meta[relay.Constant][12] /* ty=Tensor[(2145), float64] */, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %270 = reshape(%268, newshape=[715, 3]) /* ty=Tensor[(715, 3), float64] */;
  %271 = reshape(%269, newshape=[715, 3]) /* ty=Tensor[(715, 3), float64] */;
  %272 = @func_4258(%270, %271) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(715, 3), float64], Tensor[(9, 14, 16), float64], Tensor[(2016), float64], Tensor[(715, 3), float32]) */;
  %273 = cast(%var_5304, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %274 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(2145), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %275 = cast(meta[relay.Constant][12] /* ty=Tensor[(2145), float64] */, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?), bool] */;
  %277 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  %278 = %267.1;
  %279 = %272.3;
  %280 = greater_equal(%275, %276) /* ty=Tensor[(2145), bool] */;
  (%277, %278, meta[relay.Constant][11] /* ty=Tensor[(1792), uint64] */, %279, %280)
}

def @func_4357(%var_4355: Tensor[(6, 8, 12), uint8], %var_4356: Tensor[(6, 8, 12), uint8]) -> (Tensor[(6, 8, 12), uint8],) {
  @func_4353(%var_4355, %var_4356) /* ty=(Tensor[(6, 8, 12), uint8],) */
}

def @func_5517() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %284 = fn () -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
    %281 = @func_1902() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %282 = %281.0;
    %283 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
    (%282, %283)
  };
  %284() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */
}

def @func_3829(%var_3817: Tensor[(13, 4, 12), float32]) -> Tensor[(13, 4, 12), int16] {
  %285 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %286 = %285.0;
  %287 = cast(%var_3817, dtype="int16") /* ty=Tensor[(13, 4, 12), int16] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="int16") /* ty=Tensor[(13, 4, 12), int16] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%289, %290) /* ty=Tensor[(13, 4, 12), int16] */
}

def @func_3874(%var_3872: Tensor[(7, 4, 8), bool], %var_3873: Tensor[(792), uint64]) -> (Tensor[(7, 4, 8), float32], Tensor[(6, 15, 2), uint32], Tensor[(792), uint64], Tensor[(6, 30), float64]) {
  @func_3870(%var_3872, %var_3873) /* ty=(Tensor[(7, 4, 8), float32], Tensor[(6, 15, 2), uint32], Tensor[(792), uint64], Tensor[(6, 30), float64]) */
}

def @func_4353(%var_4339: Tensor[(6, 8, 12), uint8], %var_4340: Tensor[(6, 8, 12), uint8]) -> (Tensor[(6, 8, 12), uint8],) {
  %291 = cast(%var_4340, dtype="uint8") /* ty=Tensor[(6, 8, 12), uint8] */;
  %292 = shape_of(%var_4339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_4339, dtype="uint8") /* ty=Tensor[(6, 8, 12), uint8] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %295 = left_shift(%293, %294) /* ty=Tensor[(6, 8, 12), uint8] */;
  (%295,)
}

def @func_5487() -> (Tensor[(13, 4, 12), float32],) {
  %296 = @func_4454() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(2145), float32], Tensor[(13, 4, 12), float32], Tensor[(3, 14, 4), float32], Tensor[(168), float32]) */;
  %297 = %296.3;
  (%297,)
}

def @func_4568(%var_4566: Tensor[(72), uint64]) -> (Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64]) {
  @func_4565(%var_4566) /* ty=(Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64]) */
}

def @func_2813() -> Tensor[(13, 4, 12), float32] {
  %298 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %298.0
}

def @func_3544(%var_3416: Tensor[(4, 14, 12), float32], %var_3506: Tensor[(792), uint64]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(4, 14, 12), bool], Tensor[(12, 9, 15), int8], Tensor[(792), uint64], Tensor[(6, 30), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), float64], Tensor[(4, 14, 12), bool]) {
  %299 = @func_2912() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %300 = @func_3194() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %301 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
  %302 = %301.0;
  %303 = cast(%302, dtype="uint16") /* ty=Tensor[(1, 1, 12), uint16] */;
  %304 = cast(%var_3416, dtype="uint16") /* ty=Tensor[(4, 14, 12), uint16] */;
  %305 = multiply(%303, %304) /* ty=Tensor[(4, 14, 12), uint16] */;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %307 = exp(%306) /* ty=Tensor[(4, 14, 12), float64] */;
  %308 = cast(%305, dtype="int64") /* ty=Tensor[(4, 14, 12), int64] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="int64") /* ty=Tensor[(4, 14, 12), int64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %312 = minimum(%310, %311) /* ty=Tensor[(4, 14, 12), int64] */;
  %313 = cast(%var_3416, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %317 = power(%315, %316) /* ty=Tensor[(4, 14, 12), float64] */;
  %318 = cast(%307, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = cast(%var_3506, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %323 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %324 = reshape(%322, newshape=[2, 396]) /* ty=Tensor[(2, 396), uint64] */;
  %325 = reshape(%323, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %326 = @func_1336(%324, %325) /* ty=(Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) */;
  %327 = cast(%307, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %328 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 14, 12), float64] */, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %329 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%317, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %332 = logical_or(%330, %331) /* ty=Tensor[(4, 14, 12), bool] */;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(4, 14, 12), float32] */;
  %334 = log10(%333) /* ty=Tensor[(4, 14, 12), float32] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %336 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%307, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %339 = cast(%307, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %340 = atan(%339) /* ty=Tensor[(4, 14, 12), float64] */;
  %341 = cast(%307, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="bool") /* ty=Tensor[(4, 14, 12), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %345 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %346 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %347 = %299.0;
  %348 = %300.0;
  %349 = logical_and(%320, %321) /* ty=Tensor[(4, 14, 12), bool] */;
  %350 = %326.6;
  %351 = acos(%327) /* ty=Tensor[(4, 14, 12), float64] */;
  %352 = mod(%337, %338) /* ty=Tensor[(4, 14, 12), float64] */;
  %353 = greater_equal(%343, %344) /* ty=Tensor[(4, 14, 12), bool] */;
  (%345, %346, %347, %348, %349, %350, %var_3506, meta[relay.Constant][13] /* ty=Tensor[(6, 30), float64] */, %351, %352, %353)
}

def @func_2350() -> Tensor[(13, 4, 12), float32] {
  @func_2348() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_2039() -> Tensor[(13, 4, 12), float32] {
  %355 = fn () -> Tensor[(13, 4, 12), float32] {
    %354 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
    %354.0
  };
  %355() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_5407(%var_5406: Tensor[(12, 10, 11), uint8]) -> Tensor[(12, 10, 11), bool] {
  %360 = fn (%var_5389: Tensor[(12, 10, 11), uint8]) -> Tensor[(12, 10, 11), bool] {
    %356 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 10, 11), uint8] */, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
    %357 = shape_of(%var_5389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(%var_5389, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%358, %359) /* ty=Tensor[(12, 10, 11), bool] */
  };
  %360(%var_5406) /* ty=Tensor[(12, 10, 11), bool] */
}

def @func_1822() -> (Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) {
  %372 = fn () -> (Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) {
    %361 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
    %362 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 4, 12), uint16] */, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %365 = cast(meta[relay.Constant][18] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %366 = cast(meta[relay.Constant][18] /* ty=Tensor[(2145), float32] */, dtype="float32") /* ty=Tensor[(2145), float32] */;
    %367 = reshape(%365, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
    %368 = reshape(%366, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), float32] */;
    %369 = @func_789(%367, %368) /* ty=(Tensor[(15, 11, 13), float32],) */;
    %370 = maximum(%363, %364) /* ty=Tensor[(13, 4, 12), uint16] */;
    %371 = %369.0;
    (%370, %371, meta[relay.Constant][18] /* ty=Tensor[(2145), float32] */)
  };
  %372() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */
}

def @func_1836() -> Tensor[(13, 4, 12), float32] {
  @func_1834() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_2238(%var_2236: Tensor[(14, 8, 16), uint64]) -> (Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) {
  @func_2235(%var_2236) /* ty=(Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) */
}

def @func_4738() -> (Tensor[(1, 10, 12), int32], Tensor[(1050), uint64]) {
  @func_4736() /* ty=(Tensor[(1, 10, 12), int32], Tensor[(1050), uint64]) */
}

def @func_4094(%var_4092: Tensor[(540), float64], %var_4093: Tensor[(13, 4, 12), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(792), uint64], Tensor[(540), float64], Tensor[(360), uint16], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), uint32]) {
  @func_4090(%var_4092, %var_4093) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(792), uint64], Tensor[(540), float64], Tensor[(360), uint16], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), uint32]) */
}

def @func_5242() -> (Tensor[(13, 4, 12), float32],) {
  @func_5240() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_1339(%var_1337: Tensor[(2, 396), uint64], %var_1338: Tensor[(6, 15, 2), float64]) -> (Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) {
  %394 = fn (%var_1305: Tensor[(2, 396), uint64], %var_1313: Tensor[(6, 15, 2), float64]) -> (Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) {
    %373 = cast(meta[relay.Constant][19] /* ty=Tensor[(350, 3), uint64] */, dtype="uint64") /* ty=Tensor[(350, 3), uint64] */;
    %374 = cast(meta[relay.Constant][19] /* ty=Tensor[(350, 3), uint64] */, dtype="uint64") /* ty=Tensor[(350, 3), uint64] */;
    %375 = reshape(%373, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
    %376 = reshape(%374, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
    %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(18, 4), uint64] */, dtype="uint64") /* ty=Tensor[(18, 4), uint64] */;
    %378 = cast(%var_1305, dtype="uint64") /* ty=Tensor[(2, 396), uint64] */;
    %379 = reshape(%377, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), uint64] */;
    %380 = reshape(%378, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), uint64] */;
    %381 = @func_1257(%379, %380) /* ty=(Tensor[(11, 8, 9), uint64],) */;
    %382 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 2), float64] */;
    %383 = acos(%382) /* ty=Tensor[(6, 1, 2), float64] */;
    %384 = cast(%383, dtype="uint32") /* ty=Tensor[(6, 1, 2), uint32] */;
    %385 = cast(%var_1313, dtype="uint32") /* ty=Tensor[(6, 15, 2), uint32] */;
    %386 = cast(meta[relay.Constant][22] /* ty=Tensor[(1620), int8] */, dtype="int8") /* ty=Tensor[(1620), int8] */;
    %387 = cast(meta[relay.Constant][22] /* ty=Tensor[(1620), int8] */, dtype="int8") /* ty=Tensor[(1620), int8] */;
    %388 = reshape(%386, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
    %389 = reshape(%387, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
    %390 = @func_1176(%375, %376) /* ty=Tensor[(5, 14, 15), uint64] */;
    %391 = %381.0;
    %392 = logical_xor(%384, %385) /* ty=Tensor[(6, 15, 2), uint32] */;
    %393 = @func_1279(%388, %389) /* ty=Tensor[(12, 9, 15), int8] */;
    (%390, meta[relay.Constant][19] /* ty=Tensor[(350, 3), uint64] */, %391, meta[relay.Constant][20] /* ty=Tensor[(18, 4), uint64] */, %var_1305, %392, %393, meta[relay.Constant][22] /* ty=Tensor[(1620), int8] */)
  };
  %394(%var_1337, %var_1338) /* ty=(Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) */
}

def @func_2815() -> Tensor[(13, 4, 12), float32] {
  @func_2813() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_2588() -> Tensor[(13, 4, 12), float32] {
  %395 = @func_2521() /* ty=(Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) */;
  %395.3
}

def @func_4673() -> Tensor[(13, 4, 12), float32] {
  %397 = fn () -> Tensor[(13, 4, 12), float32] {
    %396 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %396.0
  };
  %397() /* ty=Tensor[(13, 4, 12), float32] */
}

def @func_3967() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  @func_3965() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */
}

def @func_2564(%var_2553: Tensor[(1, 3, 11), int64]) -> (Tensor[(8, 3, 11), int64],) {
  %398 = cast(%var_2553, dtype="bool") /* ty=Tensor[(1, 3, 11), bool] */;
  %399 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 3, 11), int64] */, dtype="bool") /* ty=Tensor[(8, 3, 11), bool] */;
  %400 = greater(%398, %399) /* ty=Tensor[(8, 3, 11), bool] */;
  %401 = cast(%var_2553, dtype="int64") /* ty=Tensor[(1, 3, 11), int64] */;
  %402 = cast(%400, dtype="int64") /* ty=Tensor[(8, 3, 11), int64] */;
  %403 = add(%401, %402) /* ty=Tensor[(8, 3, 11), int64] */;
  (%403,)
}

def @func_3195() -> (Tensor[(13, 4, 12), float32],) {
  %406 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %404 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %405 = %404.0;
    (%405,)
  };
  %406() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_4565(%var_4559: Tensor[(72), uint64]) -> (Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64]) {
  %407 = @func_3279() /* ty=(Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %408 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %410 = sqrt(%409) /* ty=Tensor[(13, 4, 12), float32] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %412 = exp(%411) /* ty=Tensor[(13, 4, 12), float64] */;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %414 = cast(%var_4559, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %415 = cast(meta[relay.Constant][24] /* ty=Tensor[(792), uint64] */, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %416 = reshape(%414, newshape=[1, 8, 9]) /* ty=Tensor[(1, 8, 9), uint64] */;
  %417 = reshape(%415, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), uint64] */;
  %418 = @func_1257(%416, %417) /* ty=(Tensor[(11, 8, 9), uint64],) */;
  %419 = %407.0;
  %420 = sin(%413) /* ty=Tensor[(13, 4, 12), float64] */;
  %421 = %418.0;
  (%419, %420, %421, %var_4559, meta[relay.Constant][24] /* ty=Tensor[(792), uint64] */)
}

def @func_4090(%var_4047: Tensor[(540), float64], %var_4083: Tensor[(13, 4, 12), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(792), uint64], Tensor[(540), float64], Tensor[(360), uint16], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), uint32]) {
  %422 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %423 = cast(%var_4047, dtype="float64") /* ty=Tensor[(540), float64] */;
  %424 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %425 = reshape(%423, newshape=[5, 9, 12]) /* ty=Tensor[(5, 9, 12), float64] */;
  %426 = reshape(%424, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %427 = @func_2097(%425, %426) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(6, 4, 15), uint8], Tensor[(360), uint16], Tensor[(792), uint64], Tensor[(5, 9, 12), float64]) */;
  %428 = @func_1902() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %429 = @func_3218() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %430 = %429.1;
  %431 = cast(%var_4083, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="uint32") /* ty=Tensor[(13, 4, 12), uint32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %435 = %422.0;
  %436 = %427.3;
  %437 = %428.0;
  %438 = right_shift(%433, %434) /* ty=Tensor[(13, 4, 12), uint32] */;
  (%435, %436, %var_4047, meta[relay.Constant][25] /* ty=Tensor[(360), uint16] */, %437, %438)
}

def @func_4656() -> (Tensor[(13, 4, 12), float32],) {
  %440 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %439 = @func_2348() /* ty=Tensor[(13, 4, 12), float32] */;
    (%439,)
  };
  %440() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_3870(%var_3860: Tensor[(7, 4, 8), bool], %var_3866: Tensor[(792), uint64]) -> (Tensor[(7, 4, 8), float32], Tensor[(6, 15, 2), uint32], Tensor[(792), uint64], Tensor[(6, 30), float64]) {
  %441 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
  %442 = cosh(%441) /* ty=Tensor[(7, 4, 8), float64] */;
  %443 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 4, 8), float64] */, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="bool") /* ty=Tensor[(7, 4, 8), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = greater(%445, %446) /* ty=Tensor[(7, 4, 8), bool] */;
  %448 = cast(%var_3860, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="float32") /* ty=Tensor[(7, 4, 8), float32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %452 = cast(%var_3866, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %453 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 30), float64] */, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %454 = reshape(%452, newshape=[2, 396]) /* ty=Tensor[(2, 396), uint64] */;
  %455 = reshape(%453, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %456 = @func_1336(%454, %455) /* ty=(Tensor[(5, 14, 15), uint64], Tensor[(350, 3), uint64], Tensor[(11, 8, 9), uint64], Tensor[(18, 4), uint64], Tensor[(2, 396), uint64], Tensor[(6, 15, 2), uint32], Tensor[(12, 9, 15), int8], Tensor[(1620), int8]) */;
  %457 = mod(%450, %451) /* ty=Tensor[(7, 4, 8), float32] */;
  %458 = %456.5;
  (%457, %458, %var_3866, meta[relay.Constant][27] /* ty=Tensor[(6, 30), float64] */)
}

def @func_5118(%var_5117: Tensor[(3, 14, 4), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(168), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 3, 12), float32], Tensor[(3, 14, 4), int16], Tensor[(9, 14, 16), uint8]) {
  %488 = fn (%var_5105: Tensor[(3, 14, 4), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(168), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 3, 12), float32], Tensor[(3, 14, 4), int16], Tensor[(9, 14, 16), uint8]) {
    %459 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %460 = @func_4655() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %461 = %460.0;
    %462 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 4, 12), float32] */, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
    %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%461, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %466 = @func_3279() /* ty=(Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) */;
    %467 = cast(meta[relay.Constant][29] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %468 = reshape(%467, newshape=[3, 14, 4]) /* ty=Tensor[(3, 14, 4), float32] */;
    %469 = @func_3712(%468) /* ty=Tensor[(3, 14, 4), float32] */;
    %470 = cast(%var_5105, dtype="int16") /* ty=Tensor[(3, 14, 4), int16] */;
    %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%469, dtype="int16") /* ty=Tensor[(3, 14, 4), int16] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %474 = cast(meta[relay.Constant][30] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
    %475 = reshape(%474, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float64] */;
    %476 = @func_274(%475) /* ty=Tensor[(9, 14, 16), float64] */;
    %477 = cast(meta[relay.Constant][30] /* ty=Tensor[(2016), float64] */, dtype="uint8") /* ty=Tensor[(2016), uint8] */;
    %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%476, dtype="uint8") /* ty=Tensor[(9, 14, 16), uint8] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %481 = %459.0;
    %482 = minimum(%464, %465) /* ty=Tensor[(13, 4, 12), float64] */;
    %483 = @func_4876() /* ty=Tensor[(15, 11, 13), float32] */;
    %484 = @func_4876() /* ty=Tensor[(15, 11, 13), float32] */;
    %485 = %466.0;
    %486 = right_shift(%472, %473) /* ty=Tensor[(3, 14, 4), int16] */;
    %487 = bitwise_and(%479, %480) /* ty=Tensor[(9, 14, 16), uint8] */;
    (%481, %482, meta[relay.Constant][29] /* ty=Tensor[(168), float32] */, %483, %484, %485, %486, %487)
  };
  %488(%var_5117) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float64], Tensor[(168), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 3, 12), float32], Tensor[(3, 14, 4), int16], Tensor[(9, 14, 16), uint8]) */
}

def @func_277(%var_275: Tensor[(9, 14, 16), float64]) -> Tensor[(9, 14, 16), float64] {
  @func_274(%var_275) /* ty=Tensor[(9, 14, 16), float64] */
}

def @func_2804(%var_2756: Tensor[(13, 4, 12), float32]) -> (Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) {
  %489 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
  %490 = cast(%489, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %491 = shape_of(%var_2756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_2756, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %494 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %495 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %496 = %495.0;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %498 = atanh(%497) /* ty=Tensor[(13, 4, 12), float32] */;
  %499 = cast(%var_2756, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %500 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%489, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %503 = logical_and(%501, %502) /* ty=Tensor[(13, 4, 12), bool] */;
  %504 = cast(%503, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %505 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%498, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %508 = floor_mod(%492, %493) /* ty=Tensor[(13, 4, 12), float64] */;
  %509 = %494.0;
  %510 = logical_or(%506, %507) /* ty=Tensor[(13, 4, 12), bool] */;
  (%508, %509, %510)
}

def @func_5374() -> (Tensor[(13, 4, 12), float32],) {
  @func_5372() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_3219() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %514 = fn () -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
    %511 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
    %512 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
    %513 = %511.1;
    (%512, %513)
  };
  %514() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */
}

def @func_1257(%var_1252: Tensor[(1, 8, 9), uint64], %var_1253: Tensor[(11, 8, 9), uint64]) -> (Tensor[(11, 8, 9), uint64],) {
  %515 = cast(%var_1252, dtype="uint64") /* ty=Tensor[(1, 8, 9), uint64] */;
  %516 = cast(%var_1253, dtype="uint64") /* ty=Tensor[(11, 8, 9), uint64] */;
  %517 = bitwise_and(%515, %516) /* ty=Tensor[(11, 8, 9), uint64] */;
  (%517,)
}

def @func_4296(%var_4294: Tensor[(132), float32]) -> (Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32]) {
  @func_4293(%var_4294) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(2, 6, 11), float32], Tensor[(132), float32]) */
}

def @func_2097(%var_2060: Tensor[(5, 9, 12), float64], %var_2079: Tensor[(360), uint16]) -> (Tensor[(13, 4, 12), float32], Tensor[(6, 4, 15), uint8], Tensor[(360), uint16], Tensor[(792), uint64], Tensor[(5, 9, 12), float64]) {
  %518 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %519 = cast(%var_2079, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %520 = cast(%var_2079, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %521 = cast(meta[relay.Constant][31] /* ty=Tensor[(792), uint64] */, dtype="uint64") /* ty=Tensor[(792), uint64] */;
  %522 = reshape(%519, newshape=[6, 4, 15]) /* ty=Tensor[(6, 4, 15), uint16] */;
  %523 = reshape(%520, newshape=[6, 4, 15]) /* ty=Tensor[(6, 4, 15), uint16] */;
  %524 = reshape(%521, newshape=[792]) /* ty=Tensor[(792), uint64] */;
  %525 = @func_1746(%522, %523, %524) /* ty=(Tensor[(6, 4, 15), uint16], Tensor[(11, 8, 9), uint64], Tensor[(72), uint64], Tensor[(792), uint64], Tensor[(6, 4, 15), uint8]) */;
  %526 = cast(%var_2060, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %527 = acos(%526) /* ty=Tensor[(5, 9, 12), float64] */;
  %528 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %532 = %518.0;
  %533 = %525.4;
  %534 = power(%530, %531) /* ty=Tensor[(5, 9, 12), float64] */;
  (%532, %533, %var_2079, meta[relay.Constant][31] /* ty=Tensor[(792), uint64] */, %534)
}

def @func_4736() -> (Tensor[(1, 10, 12), int32], Tensor[(1050), uint64]) {
  %535 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
  %536 = %535.0;
  %537 = cast(%536, dtype="int32") /* ty=Tensor[(1, 1, 12), int32] */;
  %538 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 10, 12), float32] */, dtype="int32") /* ty=Tensor[(1, 10, 12), int32] */;
  %539 = @func_4636() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(1050), uint64], Tensor[(1050), uint64]) */;
  %540 = bitwise_and(%537, %538) /* ty=Tensor[(1, 10, 12), int32] */;
  %541 = %539.4;
  (%540, %541)
}

def @func_1904() -> (Tensor[(13, 4, 12), float32],) {
  @func_1902() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_2913() -> (Tensor[(13, 4, 12), float32],) {
  %543 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %542 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
    (%542,)
  };
  %543() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_2917() -> (Tensor[(13, 4, 12), float32],) {
  %546 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %544 = @func_2845() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %545 = %544.0;
    (%545,)
  };
  %546() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_3832(%var_3830: Tensor[(13, 4, 12), float32]) -> Tensor[(13, 4, 12), int16] {
  @func_3829(%var_3830) /* ty=Tensor[(13, 4, 12), int16] */
}

def @func_1200(%var_1199: Tensor[(7, 8, 14), uint32]) -> Tensor[(7, 8, 14), bool] {
  %551 = fn (%var_1183: Tensor[(7, 8, 14), uint32]) -> Tensor[(7, 8, 14), bool] {
    %547 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 8, 14), uint32] */, dtype="bool") /* ty=Tensor[(7, 8, 14), bool] */;
    %548 = shape_of(%var_1183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %549 = cast(%var_1183, dtype="bool") /* ty=Tensor[(7, 8, 14), bool] */;
    %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%549, %550) /* ty=Tensor[(7, 8, 14), bool] */
  };
  %551(%var_1199) /* ty=Tensor[(7, 8, 14), bool] */
}

def @func_2567(%var_2565: Tensor[(1, 3, 11), int64]) -> (Tensor[(8, 3, 11), int64],) {
  @func_2564(%var_2565) /* ty=(Tensor[(8, 3, 11), int64],) */
}

def @func_4638() -> (Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(1050), uint64], Tensor[(1050), uint64]) {
  @func_4636() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32], Tensor[(1050), uint64], Tensor[(1050), uint64]) */
}

def @func_4938(%var_4936: Tensor[(13, 4, 16), float32], %var_4937: Tensor[(1620), int8]) -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 16), int8], Tensor[(1620), int8], Tensor[(12, 9, 15), float64], Tensor[(13, 4, 16), uint32], Tensor[(715, 3), float32]) {
  @func_4934(%var_4936, %var_4937) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 16), int8], Tensor[(1620), int8], Tensor[(12, 9, 15), float64], Tensor[(13, 4, 16), uint32], Tensor[(715, 3), float32]) */
}

def @func_792(%var_790: Tensor[(15, 11, 13), float32], %var_791: Tensor[(15, 11, 13), float32]) -> (Tensor[(15, 11, 13), float32],) {
  %557 = fn (%var_781: Tensor[(15, 11, 13), float32], %var_782: Tensor[(15, 11, 13), float32]) -> (Tensor[(15, 11, 13), float32],) {
    %552 = cast(%var_782, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
    %553 = shape_of(%var_781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%var_781, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %556 = power(%554, %555) /* ty=Tensor[(15, 11, 13), float32] */;
    (%556,)
  };
  %557(%var_790, %var_791) /* ty=(Tensor[(15, 11, 13), float32],) */
}

def @func_3689(%var_3662: Tensor[(1620), int8]) -> (Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64], Tensor[(1, 1, 12), float32], Tensor[(5, 5, 6), float32], Tensor[(13, 4, 12), uint8], Tensor[(5, 5, 6), uint16], Tensor[(12, 9, 15), int8], Tensor[(1620), int8], Tensor[(5, 5, 6), float64], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64]) {
  %558 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %559 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %560 = reshape(%558, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %561 = reshape(%559, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %562 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %563 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %564 = sinh(%563) /* ty=Tensor[(5, 5, 6), float64] */;
  %565 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 6), float64] */, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(5, 5, 6), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = logical_and(%567, %568) /* ty=Tensor[(5, 5, 6), bool] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %571 = log(%570) /* ty=Tensor[(5, 5, 6), float32] */;
  %572 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 6), float64] */, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %576 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %577 = %576.0;
  %578 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %579 = %578.1;
  %580 = cast(%579, dtype="uint8") /* ty=Tensor[(13, 4, 12), uint8] */;
  %581 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%577, dtype="uint8") /* ty=Tensor[(13, 4, 12), uint8] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %584 = cast(%569, dtype="uint16") /* ty=Tensor[(5, 5, 6), uint16] */;
  %585 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%564, dtype="uint16") /* ty=Tensor[(5, 5, 6), uint16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %588 = cast(%var_3662, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %589 = cast(%var_3662, dtype="int8") /* ty=Tensor[(1620), int8] */;
  %590 = reshape(%588, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %591 = reshape(%589, newshape=[12, 9, 15]) /* ty=Tensor[(12, 9, 15), int8] */;
  %592 = cast(%571, dtype="float64") /* ty=Tensor[(5, 5, 6), float64] */;
  %593 = bitwise_and(%582, %583) /* ty=Tensor[(13, 4, 12), uint8] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %595 = reshape(%594, newshape=[13, 4, 12]) /* ty=Tensor[(13, 4, 12), float32] */;
  %596 = @func_2804(%595) /* ty=(Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) */;
  %597 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %598 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), uint64] */, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
  %599 = reshape(%597, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %600 = reshape(%598, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
  %601 = @func_1176(%560, %561) /* ty=Tensor[(5, 14, 15), uint64] */;
  %602 = %562.2;
  %603 = floor_mod(%574, %575) /* ty=Tensor[(5, 5, 6), float32] */;
  %604 = bitwise_and(%586, %587) /* ty=Tensor[(5, 5, 6), uint16] */;
  %605 = @func_1279(%590, %591) /* ty=Tensor[(12, 9, 15), int8] */;
  %606 = exp(%592) /* ty=Tensor[(5, 5, 6), float64] */;
  %607 = %596.1;
  %608 = @func_1176(%599, %600) /* ty=Tensor[(5, 14, 15), uint64] */;
  (%601, meta[relay.Constant][35] /* ty=Tensor[(1050), uint64] */, %602, %603, %593, %604, %605, %var_3662, %606, %607, %608)
}

def @func_2867() -> Tensor[(1, 1, 12), float32] {
  @func_2865() /* ty=Tensor[(1, 1, 12), float32] */
}

def @func_5315(%var_5313: Tensor[(2145), float64]) -> (Tensor[(13, 4, 12), float32], Tensor[(14, 8, 16), float64], Tensor[(1792), uint64], Tensor[(2016), float64], Tensor[(2145), bool]) {
  @func_5312(%var_5313) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(14, 8, 16), float64], Tensor[(1792), uint64], Tensor[(2016), float64], Tensor[(2145), bool]) */
}

def @func_4014(%var_4010: Tensor[(2, 6, 11), float32]) -> (Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), float64]) {
  %609 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  %610 = cast(%var_4010, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %611 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(2, 6, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 6, 11), float32] */, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %614 = sqrt(%609) /* ty=Tensor[(2, 6, 11), float32] */;
  %615 = floor_mod(%612, %613) /* ty=Tensor[(2, 6, 11), float64] */;
  (%614, %615)
}

def @func_3280() -> (Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) {
  %625 = fn () -> (Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) {
    %616 = @func_3038() /* ty=(Tensor[(1, 1, 12), float32],) */;
    %617 = %616.0;
    %618 = cast(%617, dtype="uint16") /* ty=Tensor[(1, 1, 12), uint16] */;
    %619 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 3, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 3, 12), uint16] */;
    %620 = minimum(%618, %619) /* ty=Tensor[(13, 3, 12), uint16] */;
    %621 = cast(%620, dtype="float32") /* ty=Tensor[(13, 3, 12), float32] */;
    %622 = @func_2404() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %623 = atan(%621) /* ty=Tensor[(13, 3, 12), float32] */;
    %624 = %622.0;
    (%623, %624)
  };
  %625() /* ty=(Tensor[(13, 3, 12), float32], Tensor[(13, 4, 12), float32]) */
}

def @func_1948() -> (Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) {
  %626 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
  %627 = %626.0;
  %628 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  (%627, %628)
}

def @func_3568() -> (Tensor[(715, 3), float32],) {
  %629 = @func_2991() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(715, 3), float32], Tensor[(13, 4, 12), bool], Tensor[(13, 4, 12), float32]) */;
  %630 = %629.1;
  (%630,)
}

def @func_2026(%var_2025: Tensor[(1050), uint64]) -> (Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64]) {
  %645 = fn (%var_2022: Tensor[(1050), uint64]) -> (Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64]) {
    %631 = @func_1907() /* ty=(Tensor[(13, 4, 12), float32],) */;
    %632 = @func_1821() /* ty=(Tensor[(13, 4, 12), uint16], Tensor[(15, 11, 13), float32], Tensor[(2145), float32]) */;
    %633 = %632.1;
    %634 = cast(%633, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
    %635 = cast(%633, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
    %636 = cast(%var_2022, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
    %637 = cast(%var_2022, dtype="uint64") /* ty=Tensor[(1050), uint64] */;
    %638 = reshape(%636, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
    %639 = reshape(%637, newshape=[5, 14, 15]) /* ty=Tensor[(5, 14, 15), uint64] */;
    %640 = %631.0;
    %641 = acosh(%634) /* ty=Tensor[(15, 11, 13), float32] */;
    %642 = log10(%635) /* ty=Tensor[(15, 11, 13), float32] */;
    %643 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
    %644 = @func_1176(%638, %639) /* ty=Tensor[(5, 14, 15), uint64] */;
    (%640, %641, %642, %643, %644, %var_2022)
  };
  %645(%var_2025) /* ty=(Tensor[(13, 4, 12), float32], Tensor[(15, 11, 13), float32], Tensor[(15, 11, 13), float32], Tensor[(13, 4, 12), float32], Tensor[(5, 14, 15), uint64], Tensor[(1050), uint64]) */
}

def @func_2807(%var_2805: Tensor[(13, 4, 12), float32]) -> (Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) {
  @func_2804(%var_2805) /* ty=(Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) */
}

def @func_3039() -> (Tensor[(1, 1, 12), float32],) {
  %647 = fn () -> (Tensor[(1, 1, 12), float32],) {
    %646 = @func_2865() /* ty=Tensor[(1, 1, 12), float32] */;
    (%646,)
  };
  %647() /* ty=(Tensor[(1, 1, 12), float32],) */
}

def @func_4178(%var_4155: Tensor[(224), bool], %var_4156: Tensor[(792, 1), uint64], %var_4158: Tensor[(13, 4, 12), float64], %var_4169: Tensor[(6, 30), float64]) -> (Tensor[(224), bool], Tensor[(13, 4, 12), uint16], Tensor[(13, 4, 12), float64], Tensor[(6, 30), int32], Tensor[(792, 1), float32]) {
  %648 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
  %649 = cast(%648, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %650 = log2(%649) /* ty=Tensor[(13, 4, 12), float64] */;
  %651 = cast(%650, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %652 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%648, dtype="bool") /* ty=Tensor[(13, 4, 12), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %655 = less(%653, %654) /* ty=Tensor[(13, 4, 12), bool] */;
  %656 = cast(%655, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %657 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%650, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %660 = add(%658, %659) /* ty=Tensor[(13, 4, 12), uint16] */;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(13, 4, 12), float64] */;
  %662 = cos(%661) /* ty=Tensor[(13, 4, 12), float64] */;
  %663 = cast(%var_4158, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="uint16") /* ty=Tensor[(13, 4, 12), uint16] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %667 = cast(%var_4158, dtype="float32") /* ty=Tensor[(13, 4, 12), float32] */;
  %668 = reshape(%667, newshape=[13, 4, 12]) /* ty=Tensor[(13, 4, 12), float32] */;
  %669 = @func_2804(%668) /* ty=(Tensor[(13, 4, 12), float64], Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), bool]) */;
  %670 = cast(%var_4155, dtype="bool") /* ty=Tensor[(224), bool] */;
  %671 = cast(%var_4156, dtype="uint64") /* ty=Tensor[(792, 1), uint64] */;
  %672 = reshape(%670, newshape=[7, 4, 8]) /* ty=Tensor[(7, 4, 8), bool] */;
  %673 = reshape(%671, newshape=[792]) /* ty=Tensor[(792), uint64] */;
  %674 = @func_3870(%672, %673) /* ty=(Tensor[(7, 4, 8), float32], Tensor[(6, 15, 2), uint32], Tensor[(792), uint64], Tensor[(6, 30), float64]) */;
  %675 = %674.3;
  %676 = cast(%var_4169, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(2), int32] */;
  %678 = cast(%675, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %680 = cast(%var_4156, dtype="float32") /* ty=Tensor[(792, 1), float32] */;
  %681 = bitwise_xor(%665, %666) /* ty=Tensor[(13, 4, 12), uint16] */;
  %682 = %669.0;
  %683 = add(%678, %679) /* ty=Tensor[(6, 30), int32] */;
  %684 = asin(%680) /* ty=Tensor[(792, 1), float32] */;
  (%var_4155, %681, %682, %683, %684)
}

def @func_3570() -> (Tensor[(715, 3), float32],) {
  @func_3568() /* ty=(Tensor[(715, 3), float32],) */
}

def @func_2235(%var_2192: Tensor[(14, 8, 16), uint64]) -> (Tensor[(14, 8, 16), uint64], Tensor[(14, 8, 16), float64]) {
  %685 = cast(%var_2192, dtype="uint64") /* ty=Tensor[(14, 8, 16), uint64] */;
  %686 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(14, 8, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 8, 16), uint64] */, dtype="uint64") /* ty=Tensor[(14, 8, 16), uint64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %689 = cast(%var_2192, dtype="float64") /* ty=Tensor[(14, 8, 16), float64] */;
  %690 = bitwise_or(%687, %688) /* ty=Tensor[(14, 8, 16), uint64] */;
  %691 = log2(%689) /* ty=Tensor[(14, 8, 16), float64] */;
  (%690, %691)
}

def @func_1261(%var_1259: Tensor[(1, 8, 9), uint64], %var_1260: Tensor[(11, 8, 9), uint64]) -> (Tensor[(11, 8, 9), uint64],) {
  @func_1257(%var_1259, %var_1260) /* ty=(Tensor[(11, 8, 9), uint64],) */
}

def @func_1908() -> (Tensor[(13, 4, 12), float32],) {
  %693 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %692 = @func_1834() /* ty=Tensor[(13, 4, 12), float32] */;
    (%692,)
  };
  %693() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_5240() -> (Tensor[(13, 4, 12), float32],) {
  %694 = @func_2948() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */;
  %695 = %694.3;
  (%695,)
}

def @func_2865() -> Tensor[(1, 1, 12), float32] {
  %696 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1, 12), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 12), float32] */;
  erf(%696) /* ty=Tensor[(1, 1, 12), float32] */
}

def @func_2846() -> (Tensor[(13, 4, 12), float32],) {
  %698 = fn () -> (Tensor[(13, 4, 12), float32],) {
    %697 = @func_2038() /* ty=Tensor[(13, 4, 12), float32] */;
    (%697,)
  };
  %698() /* ty=(Tensor[(13, 4, 12), float32],) */
}

def @func_2949() -> (Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) {
  %706 = fn () -> (Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) {
    %699 = @func_2521() /* ty=(Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) */;
    %700 = @func_2521() /* ty=(Tensor[(13, 4, 12), bool], Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(13, 4, 12), float32]) */;
    %701 = @func_1948() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(13, 4, 12), float32]) */;
    %702 = %699.1;
    %703 = %700.2;
    %704 = @func_2865() /* ty=Tensor[(1, 1, 12), float32] */;
    %705 = %701.0;
    (%702, %703, %704, %705)
  };
  %706() /* ty=(Tensor[(14, 8, 16), float64], Tensor[(4, 448), uint64], Tensor[(1, 1, 12), float32], Tensor[(13, 4, 12), float32]) */
}

def @func_2993() -> (Tensor[(13, 4, 12), float32], Tensor[(715, 3), float32], Tensor[(13, 4, 12), bool], Tensor[(13, 4, 12), float32]) {
  @func_2991() /* ty=(Tensor[(13, 4, 12), float32], Tensor[(715, 3), float32], Tensor[(13, 4, 12), bool], Tensor[(13, 4, 12), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen10/build/output.py", line 1626, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:43:44] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

