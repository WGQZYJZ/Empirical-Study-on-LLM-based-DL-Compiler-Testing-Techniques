==========mod==========
#[version = "0.0.5"]
def @func_4459(%var_4424: Tensor[(10, 13, 8), float64], %var_4430: Tensor[(10, 13, 8), float64]) -> (Tensor[(7, 4, 15), int16], Tensor[(10, 13, 8), bool]) {
  %0 = @func_3683() /* ty=(Tensor[(7, 4, 15), int16], Tensor[(7, 4, 15), float64]) */;
  %1 = cast(%var_4424, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
  %2 = sigmoid(%1) /* ty=Tensor[(10, 13, 8), float64] */;
  %3 = cast(%var_4430, dtype="int64") /* ty=Tensor[(10, 13, 8), int64] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="int64") /* ty=Tensor[(10, 13, 8), int64] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %7 = add(%5, %6) /* ty=Tensor[(10, 13, 8), int64] */;
  %8 = cast(%var_4430, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = %0.0;
  %13 = logical_or(%10, %11) /* ty=Tensor[(10, 13, 8), bool] */;
  (%12, %13)
}

def @func_2769() -> Tensor[(7, 4, 15), float32] {
  %14 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %14.0
}

def @func_5046(%var_5027: Tensor[(16, 9, 4), uint16], %var_5028: Tensor[(16, 9, 4), uint16]) -> (Tensor[(16, 9, 4), uint16], Tensor[(16, 9, 4), float64], Tensor[(240), float64], uint16, Tensor[(756), uint16]) {
  %15 = cast(%var_5028, dtype="uint16") /* ty=Tensor[(16, 9, 4), uint16] */;
  %16 = shape_of(%var_5027, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_5027, dtype="uint16") /* ty=Tensor[(16, 9, 4), uint16] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %19 = cast(%var_5027, dtype="float64") /* ty=Tensor[(16, 9, 4), float64] */;
  %20 = cast(meta[relay.Constant][0] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(756), uint16] */, dtype="uint16") /* ty=Tensor[(756), uint16] */;
  %22 = reshape(%20, newshape=[]) /* ty=uint16 */;
  %23 = reshape(%21, newshape=[6, 9, 14]) /* ty=Tensor[(6, 9, 14), uint16] */;
  %24 = @func_3182(%22, %23) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %25 = add(%17, %18) /* ty=Tensor[(16, 9, 4), uint16] */;
  %26 = atan(%19) /* ty=Tensor[(16, 9, 4), float64] */;
  %27 = %24.3;
  (%25, %26, %27, meta[relay.Constant][0] /* ty=uint16 */, meta[relay.Constant][1] /* ty=Tensor[(756), uint16] */)
}

def @func_6368() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(15, 15, 15), int16], Tensor[(12, 8, 3), float32], Tensor[(288), float32], Tensor[(7, 4, 15), float64]) {
  %28 = @func_4218() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) */;
  %29 = @func_4932() /* ty=(Tensor[(15, 15, 15), int16],) */;
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %31 = reshape(%30, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
  %32 = @func_657(%31) /* ty=(Tensor[(12, 8, 3), float32],) */;
  %33 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %34 = %28.0;
  %35 = @func_5025() /* ty=Tensor[(7, 4, 15), int32] */;
  %36 = %29.0;
  %37 = %32.0;
  %38 = %33.0;
  (%34, %35, %36, %37, meta[relay.Constant][2] /* ty=Tensor[(288), float32] */, %38)
}

def @func_6292() -> Tensor[(546), uint32] {
  %39 = @func_4576() /* ty=(Tensor[(546), uint32],) */;
  %39.0
}

def @func_5553() -> Tensor[(7, 4, 15), uint64] {
  @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */
}

def @func_5728() -> Tensor[(7, 16, 15), float32] {
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  erf(%40) /* ty=Tensor[(7, 16, 15), float32] */
}

def @func_4576() -> (Tensor[(546), uint32],) {
  %41 = @func_3815() /* ty=(Tensor[(546), uint32],) */;
  %42 = %41.0;
  (%42,)
}

def @func_1924() -> (Tensor[(7, 4, 15), uint64],) {
  %43 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %44 = %43.0;
  %45 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %46 = %45.0;
  %47 = cast(%46, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
  %48 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%44, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %51 = minimum(%49, %50) /* ty=Tensor[(7, 4, 15), uint64] */;
  (%51,)
}

def @func_6113() -> Tensor[(7, 4, 15), float64] {
  %52 = @func_583() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64]) */;
  %52.1
}

def @func_6455() -> Tensor[(7, 4, 15), int32] {
  %53 = @func_4796() /* ty=(Tensor[(7, 4, 15), int32],) */;
  %53.0
}

def @func_1172() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %54 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %55 = %54.1;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %57 = reshape(%56, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
  %58 = @func_325(%57) /* ty=Tensor[(7, 4, 15), int32] */;
  %59 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  %60 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%55, %58, %59, %60)
}

def @func_2295() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %61 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %62 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %63 = %61.1;
  %64 = %62.0;
  (%63, %64)
}

def @func_2626(%var_2613: Tensor[(15, 15, 15), int16], %var_2614: Tensor[(15, 15, 15), int16]) -> (Tensor[(15, 15, 15), int16], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) {
  %65 = cast(%var_2614, dtype="int16") /* ty=Tensor[(15, 15, 15), int16] */;
  %66 = shape_of(%var_2613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_2613, dtype="int16") /* ty=Tensor[(15, 15, 15), int16] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %69 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %70 = @func_1241() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) */;
  %71 = maximum(%67, %68) /* ty=Tensor[(15, 15, 15), int16] */;
  %72 = %69.0;
  %73 = %70.0;
  (%71, %72, %73)
}

def @func_1030(%var_1028: Tensor[(240), float64]) -> (Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
  %74 = cast(%var_1028, dtype="float64") /* ty=Tensor[(240), float64] */;
  %75 = reshape(%74, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
  %76 = @func_125(%75) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
  %77 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  %78 = %76.0;
  (%77, %78, %var_1028)
}

def @func_2084() -> Tensor[(7, 4, 15), uint64] {
  %79 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %79.0
}

def @func_5706() -> (Tensor[(7, 4, 15), float32],) {
  %80 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%80,)
}

def @func_3264(%var_3253: Tensor[(9, 1, 9), float64]) -> (Tensor[(9, 1, 9), float64], Tensor[(480), uint8], Tensor[(1, 30), uint8], Tensor[(7, 4, 15), float64]) {
  %81 = cast(%var_3253, dtype="float64") /* ty=Tensor[(9, 1, 9), float64] */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 30), uint8] */, dtype="uint8") /* ty=Tensor[(1, 30), uint8] */;
  %83 = reshape(%82, newshape=[30]) /* ty=Tensor[(30), uint8] */;
  %84 = @func_1254(%83) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) */;
  %85 = erf(%81) /* ty=Tensor[(9, 1, 9), float64] */;
  %86 = %84.3;
  %87 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  (%85, %86, meta[relay.Constant][4] /* ty=Tensor[(1, 30), uint8] */, %87)
}

def @main(%var_6552: Tensor[(12, 1), int32]) -> (Tensor[(12, 1), bool],) {
  %88 = cast(-7 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %89 = cast(%var_6552, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %90 = equal(%88, %89) /* ty=Tensor[(12, 1), bool] */;
  (%90,)
}

def @func_3182(%var_3119: uint16, %var_3120: Tensor[(6, 9, 14), uint16]) -> (Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
  %91 = cast(%var_3119, dtype="uint16") /* ty=uint16 */;
  %92 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %93 = right_shift(%91, %92) /* ty=Tensor[(6, 9, 14), uint16] */;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(6, 9, 14), float64] */;
  %95 = sqrt(%94) /* ty=Tensor[(6, 9, 14), float64] */;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(6, 9, 14), float64] */;
  %97 = cosh(%96) /* ty=Tensor[(6, 9, 14), float64] */;
  %98 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %102 = cast(%95, dtype="float32") /* ty=Tensor[(6, 9, 14), float32] */;
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %104 = reshape(%103, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %105 = @func_1030(%104) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %106 = bitwise_or(%100, %101) /* ty=Tensor[(6, 9, 14), uint16] */;
  %107 = atan(%102) /* ty=Tensor[(6, 9, 14), float32] */;
  %108 = %105.1;
  (%106, %107, %108, meta[relay.Constant][5] /* ty=Tensor[(240), float64] */)
}

def @func_4413() -> (Tensor[(7, 4, 15), float32],) {
  %109 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %110 = %109.0;
  (%110,)
}

def @func_6490() -> (Tensor[(7, 4, 15), float32],) {
  %111 = @func_5706() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %112 = %111.0;
  (%112,)
}

def @func_2153() -> (Tensor[(7, 4, 15), float32], Tensor[(16, 3, 16), float64], Tensor[(192, 4), float64], Tensor[(112), float64]) {
  %113 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %114 = cast(meta[relay.Constant][6] /* ty=Tensor[(192, 4), float64] */, dtype="float64") /* ty=Tensor[(192, 4), float64] */;
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %116 = reshape(%114, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
  %117 = reshape(%115, newshape=[2, 56]) /* ty=Tensor[(2, 56), float64] */;
  %118 = @func_1529(%116, %117) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) */;
  %119 = %113.0;
  %120 = %118.0;
  (%119, %120, meta[relay.Constant][6] /* ty=Tensor[(192, 4), float64] */, meta[relay.Constant][7] /* ty=Tensor[(112), float64] */)
}

def @func_1384() -> (Tensor[(7, 4, 15), float32],) {
  %121 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %122 = %121.1;
  (%122,)
}

def @func_2953() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 14, 14), float32], Tensor[(480), uint8], Tensor[(30, 1), uint8]) {
  %123 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %124 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
  %125 = log(%124) /* ty=Tensor[(7, 14, 14), float32] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(30, 1), uint8] */, dtype="uint8") /* ty=Tensor[(30, 1), uint8] */;
  %128 = reshape(%127, newshape=[30]) /* ty=Tensor[(30), uint8] */;
  %129 = @func_1859(%128) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(7, 4, 15), float32], Tensor[(675, 120), bool], Tensor[(30), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), float64]) */;
  %130 = %123.1;
  %131 = sigmoid(%126) /* ty=Tensor[(7, 14, 14), float32] */;
  %132 = %129.2;
  (%130, %131, %132, meta[relay.Constant][9] /* ty=Tensor[(30, 1), uint8] */)
}

def @func_1254(%var_1251: Tensor[(30), uint8]) -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) {
  %133 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %134 = cast(%var_1251, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %135 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %136 = reshape(%134, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
  %137 = reshape(%135, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
  %138 = @func_755(%136, %137) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
  %139 = %133.1;
  %140 = %138.1;
  (%139, %140, %var_1251, meta[relay.Constant][10] /* ty=Tensor[(480), uint8] */)
}

def @func_583() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64]) {
  %141 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %144 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
  %145 = rsqrt(%143) /* ty=Tensor[(7, 4, 15), float64] */;
  %146 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  (%144, %145, %146)
}

def @func_3683() -> (Tensor[(7, 4, 15), int16], Tensor[(7, 4, 15), float64]) {
  %147 = @func_2361() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %148 = %147.0;
  %149 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 4, 15), uint64] */, dtype="int16") /* ty=Tensor[(7, 4, 15), int16] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="int16") /* ty=Tensor[(7, 4, 15), int16] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %153 = bitwise_and(%151, %152) /* ty=Tensor[(7, 4, 15), int16] */;
  %154 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
  (%153, %154)
}

def @func_3098() -> (Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) {
  %155 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %157 = cast(meta[relay.Constant][12] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %158 = reshape(%156, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
  %159 = reshape(%157, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
  %160 = @func_3010(%158, %159) /* ty=(Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float32], Tensor[(112), float64], Tensor[(112), float64]) */;
  %161 = %155.0;
  %162 = %160.2;
  (%161, %162, meta[relay.Constant][12] /* ty=Tensor[(546), float32] */)
}

def @func_3560() -> (Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) {
  %163 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
  %164 = @func_3098() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) */;
  %165 = %164.2;
  %166 = cast(meta[relay.Constant][13] /* ty=Tensor[(546), float32] */, dtype="uint32") /* ty=Tensor[(546), uint32] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %168 = cast(%165, dtype="uint32") /* ty=Tensor[(546), uint32] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %170 = %163.0;
  %171 = left_shift(%168, %169) /* ty=Tensor[(546), uint32] */;
  (%170, %171)
}

def @func_3511() -> (Tensor[(7, 4, 15), float64],) {
  %172 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %173 = %172.0;
  %174 = cast(%173, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %175 = cos(%174) /* ty=Tensor[(7, 4, 15), float64] */;
  (%175,)
}

def @func_459() -> Tensor[(7, 4, 15), float64] {
  @func_223() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_3497() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
  %176 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %177 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %178 = reshape(%177, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %179 = @func_1030(%178) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %180 = %176.0;
  %181 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  %182 = %179.1;
  (%180, %181, %182, meta[relay.Constant][14] /* ty=Tensor[(240), float64] */)
}

def @func_3902(%var_3857: Tensor[(5, 16, 3), float32], %var_3881: uint16, %var_3882: Tensor[(756), uint16]) -> (Tensor[(2, 10, 12), bool], Tensor[(7, 4, 15), float32], Tensor[(6, 9, 14), float32], uint16, Tensor[(756), uint16], Tensor[(420), float64]) {
  %183 = cast(%var_3857, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
  %184 = cast(meta[relay.Constant][15] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %185 = reshape(%183, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %186 = reshape(%184, newshape=[10, 42]) /* ty=Tensor[(10, 42), float32] */;
  %187 = @func_629(%185, %186) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(2, 13, 2), bool], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), int32], Tensor[(10, 42), float32]) */;
  %188 = %187.0;
  %189 = cast(%var_3857, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %190 = log10(%189) /* ty=Tensor[(5, 16, 3), float32] */;
  %191 = cast(%190, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
  %192 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%188, dtype="bool") /* ty=Tensor[(2, 10, 12), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %196 = cast(%var_3881, dtype="uint16") /* ty=uint16 */;
  %197 = cast(%var_3882, dtype="uint16") /* ty=Tensor[(756), uint16] */;
  %198 = reshape(%196, newshape=[]) /* ty=uint16 */;
  %199 = reshape(%197, newshape=[6, 9, 14]) /* ty=Tensor[(6, 9, 14), uint16] */;
  %200 = @func_3182(%198, %199) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %201 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %204 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(420), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(420), float32] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?), float64] */;
  %207 = greater(%193, %194) /* ty=Tensor[(2, 10, 12), bool] */;
  %208 = %195.0;
  %209 = %200.1;
  %210 = subtract(%205, %206) /* ty=Tensor[(420), float64] */;
  (%207, %208, %209, %var_3881, %var_3882, %210)
}

def @func_6200(%var_6195: Tensor[(4, 7, 7), bool], %var_6196: Tensor[(4, 7, 7), bool]) -> (Tensor[(4, 7, 7), bool],) {
  %211 = cast(%var_6196, dtype="bool") /* ty=Tensor[(4, 7, 7), bool] */;
  %212 = shape_of(%var_6195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_6195, dtype="bool") /* ty=Tensor[(4, 7, 7), bool] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %215 = logical_and(%213, %214) /* ty=Tensor[(4, 7, 7), bool] */;
  (%215,)
}

def @func_742() -> Tensor[(7, 4, 15), float32] {
  %216 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %216.0
}

def @func_4705() -> (Tensor[(7, 4, 15), float64],) {
  %217 = @func_1956() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %218 = %217.0;
  (%218,)
}

def @func_2729() -> Tensor[(7, 4, 15), float64] {
  %219 = @func_1998() /* ty=Tensor[(7, 4, 15), float32] */;
  %220 = cast(%219, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  acosh(%220) /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_5368() -> (Tensor[(2, 10, 12), int32],) {
  %221 = @func_4915() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(3, 16, 10), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], uint16, Tensor[(756, 1), uint16]) */;
  %222 = %221.5;
  (%222,)
}

def @func_6081(%var_6064: Tensor[(384), float32]) -> (Tensor[(7, 4, 15), uint64], Tensor[(8, 7, 10), bool], Tensor[(4, 140), uint64], Tensor[(4, 12, 8), uint64], Tensor[(384), float32], Tensor[(7, 4, 15), float32]) {
  %223 = @func_2841() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %224 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 140), uint64] */, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
  %225 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 140), uint64] */, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
  %226 = reshape(%224, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), uint64] */;
  %227 = reshape(%225, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), uint64] */;
  %228 = @func_5124(%226, %227) /* ty=(Tensor[(8, 7, 10), bool], Tensor[(7, 4, 15), float32]) */;
  %229 = cast(%var_6064, dtype="float32") /* ty=Tensor[(384), float32] */;
  %230 = reshape(%229, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float32] */;
  %231 = @func_1686(%230) /* ty=(Tensor[(4, 12, 8), uint64],) */;
  %232 = @func_4001() /* ty=Tensor[(7, 4, 15), float64] */;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %234 = %223.0;
  %235 = %228.0;
  %236 = %231.0;
  %237 = tan(%233) /* ty=Tensor[(7, 4, 15), float32] */;
  (%234, %235, meta[relay.Constant][16] /* ty=Tensor[(4, 140), uint64] */, %236, %var_6064, %237)
}

def @func_3383(%var_3339: Tensor[(480), uint8], %var_3375: Tensor[(240), float64]) -> (Tensor[(3, 16, 10), bool], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), uint16], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(240), float64]) {
  %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %239 = cast(%var_3339, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %240 = reshape(%238, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
  %241 = reshape(%239, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
  %242 = @func_755(%240, %241) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
  %243 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %244 = reshape(%243, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
  %245 = @func_259(%244) /* ty=(Tensor[(15, ?, 8), bool],) */;
  %246 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %247 = %246.0;
  %248 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %250 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%247, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %253 = floor_divide(%251, %252) /* ty=Tensor[(7, 4, 15), float64] */;
  %254 = cast(%253, dtype="uint16") /* ty=Tensor[(7, 4, 15), uint16] */;
  %255 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%247, dtype="uint16") /* ty=Tensor[(7, 4, 15), uint16] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %258 = cast(%var_3375, dtype="float64") /* ty=Tensor[(240), float64] */;
  %259 = reshape(%258, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %260 = @func_1030(%259) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %261 = %242.0;
  %262 = %245.0;
  %263 = left_shift(%256, %257) /* ty=Tensor[(7, 4, 15), uint16] */;
  %264 = @func_2729() /* ty=Tensor[(7, 4, 15), float64] */;
  %265 = %260.0;
  (%261, meta[relay.Constant][17] /* ty=Tensor[(30), uint8] */, %var_3339, %262, meta[relay.Constant][18] /* ty=Tensor[(120), int8] */, %263, %264, %265, %var_3375)
}

def @func_1736(%var_1706: Tensor[(480), uint8], %var_1726: Tensor[(675), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(2, 10, 12), int32], Tensor[(675), float64]) {
  %266 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %267 = cast(meta[relay.Constant][19] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %268 = cast(%var_1706, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %269 = reshape(%267, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
  %270 = reshape(%268, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
  %271 = @func_755(%269, %270) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
  %272 = cast(%var_1726, dtype="float64") /* ty=Tensor[(675), float64] */;
  %273 = reshape(%272, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
  %274 = @func_378(%273) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) */;
  %275 = %266.2;
  %276 = %271.1;
  %277 = %274.0;
  (%275, %276, meta[relay.Constant][19] /* ty=Tensor[(30), uint8] */, %var_1706, %277, %var_1726)
}

def @func_2841() -> (Tensor[(7, 4, 15), uint64],) {
  %278 = @func_2361() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %279 = %278.0;
  (%279,)
}

def @func_6278() -> (Tensor[(7, 4, 15), float64], Tensor[(240), float64], Tensor[(288, 2), uint16]) {
  %280 = cast(meta[relay.Constant][20] /* ty=Tensor[(288, 2), uint16] */, dtype="uint16") /* ty=Tensor[(288, 2), uint16] */;
  %281 = cast(meta[relay.Constant][20] /* ty=Tensor[(288, 2), uint16] */, dtype="uint16") /* ty=Tensor[(288, 2), uint16] */;
  %282 = reshape(%280, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), uint16] */;
  %283 = reshape(%281, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), uint16] */;
  %284 = @func_5046(%282, %283) /* ty=(Tensor[(16, 9, 4), uint16], Tensor[(16, 9, 4), float64], Tensor[(240), float64], uint16, Tensor[(756), uint16]) */;
  %285 = @func_2729() /* ty=Tensor[(7, 4, 15), float64] */;
  %286 = %284.2;
  (%285, %286, meta[relay.Constant][20] /* ty=Tensor[(288, 2), uint16] */)
}

def @func_3991() -> Tensor[(546), uint32] {
  %287 = @func_3560() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) */;
  %287.1
}

def @func_4218() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) {
  %288 = @func_2769() /* ty=Tensor[(7, 4, 15), float32] */;
  %289 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 4, 15), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %293 = @func_3787() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %294 = power(%291, %292) /* ty=Tensor[(7, 4, 15), float64] */;
  %295 = %293.1;
  (%294, %295)
}

def @func_525() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %296 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %297 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %298 = %296.0;
  %299 = %297.0;
  (%298, %299)
}

def @func_5595() -> (Tensor[(7, 4, 15), float64],) {
  %300 = @func_3787() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %301 = %300.3;
  (%301,)
}

def @func_3787() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  %302 = @func_3251() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %303 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %304 = @func_2889() /* ty=Tensor[(7, 4, 15), float32] */;
  %305 = %302.0;
  %306 = %303.0;
  %307 = @func_2813() /* ty=Tensor[(7, 4, 15), float64] */;
  (%304, %305, %306, %307)
}

def @func_1956() -> (Tensor[(7, 4, 15), float64],) {
  %308 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %309 = %308.0;
  (%309,)
}

def @func_4796() -> (Tensor[(7, 4, 15), int32],) {
  %310 = @func_3529() /* ty=(Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) */;
  %311 = %310.2;
  (%311,)
}

def @func_3010(%var_2982: Tensor[(13, 6, 7), float32], %var_2987: Tensor[(13, 6, 7), float32]) -> (Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float32], Tensor[(112), float64], Tensor[(112), float64]) {
  %312 = cast(%var_2982, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %313 = log2(%312) /* ty=Tensor[(13, 6, 7), float32] */;
  %314 = cast(%var_2987, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = cast(%var_2982, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %319 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%313, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %323 = reshape(%322, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %324 = @func_2036(%323) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) */;
  %325 = not_equal(%316, %317) /* ty=Tensor[(13, 6, 7), bool] */;
  %326 = floor_divide(%320, %321) /* ty=Tensor[(13, 6, 7), float32] */;
  %327 = %324.1;
  (%325, %326, %327, meta[relay.Constant][22] /* ty=Tensor[(112), float64] */)
}

def @func_4596(%var_4582: Tensor[(2, 1, 7), uint64], %var_4583: Tensor[(2, 3, 7), uint64]) -> (Tensor[(2, 3, 7), bool],) {
  %328 = cast(%var_4582, dtype="bool") /* ty=Tensor[(2, 1, 7), bool] */;
  %329 = cast(%var_4583, dtype="bool") /* ty=Tensor[(2, 3, 7), bool] */;
  %330 = less_equal(%328, %329) /* ty=Tensor[(2, 3, 7), bool] */;
  (%330,)
}

def @func_1364() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  %331 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %332 = %331.0;
  %333 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%332, %333)
}

def @func_3941() -> Tensor[(15, 15, 15), int16] {
  %334 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
  %334.1
}

def @func_2889() -> Tensor[(7, 4, 15), float32] {
  %335 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  sqrt(%337) /* ty=Tensor[(7, 4, 15), float32] */
}

def @func_192(%var_183: Tensor[(14, 4, 2), float64]) -> (Tensor[(14, 4, 2), float64],) {
  %338 = cast(%var_183, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
  %339 = asinh(%338) /* ty=Tensor[(14, 4, 2), float64] */;
  %340 = cast(%var_183, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%339, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %344 = floor_divide(%342, %343) /* ty=Tensor[(14, 4, 2), float64] */;
  (%344,)
}

def @func_5965() -> (Tensor[(7, 4, 15), float32],) {
  %345 = @func_2769() /* ty=Tensor[(7, 4, 15), float32] */;
  (%345,)
}

def @func_1662() -> (Tensor[(7, 4, 15), float64],) {
  %346 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %347 = %346.0;
  (%347,)
}

def @func_2209() -> (Tensor[(7, 4, 15), float32],) {
  %348 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%348,)
}

def @func_3627(%var_3601: Tensor[(3, 3, 15), uint32]) -> (Tensor[(3, 3, 15), uint32], Tensor[(112), float64], Tensor[(105, 2), int64]) {
  %349 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 3, 15), uint32] */, dtype="uint32") /* ty=Tensor[(3, 3, 15), uint32] */;
  %350 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_3601, dtype="uint32") /* ty=Tensor[(3, 3, 15), uint32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %353 = cast(meta[relay.Constant][24] /* ty=Tensor[(105, 2), int64] */, dtype="int64") /* ty=Tensor[(105, 2), int64] */;
  %354 = reshape(%353, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), int64] */;
  %355 = @func_2561(%354) /* ty=(Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */;
  %356 = bitwise_or(%351, %352) /* ty=Tensor[(3, 3, 15), uint32] */;
  %357 = %355.2;
  (%356, %357, meta[relay.Constant][24] /* ty=Tensor[(105, 2), int64] */)
}

def @func_2561(%var_2515: Tensor[(1, 14, 15), int64]) -> (Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  %358 = cast(%var_2515, dtype="bool") /* ty=Tensor[(1, 14, 15), bool] */;
  %359 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 14, 15), int64] */, dtype="bool") /* ty=Tensor[(11, 14, 15), bool] */;
  %360 = cast(meta[relay.Constant][26] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %361 = reshape(%360, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %362 = @func_2036(%361) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) */;
  %363 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %364 = not_equal(%358, %359) /* ty=Tensor[(11, 14, 15), bool] */;
  %365 = %362.0;
  %366 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  %367 = %363.0;
  (%364, %365, meta[relay.Constant][26] /* ty=Tensor[(112), float64] */, %366, %367)
}

def @func_657(%var_648: Tensor[(12, 8, 3), float32]) -> (Tensor[(12, 8, 3), float32],) {
  %368 = cast(%var_648, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
  %369 = exp(%368) /* ty=Tensor[(12, 8, 3), float32] */;
  (%369,)
}

def @func_2505(%var_2473: Tensor[(4, 8, 11), float32], %var_2496: Tensor[(4, 8, 11), float32]) -> (Tensor[(4, 8, 11), int8],) {
  %370 = cast(%var_2473, dtype="float32") /* ty=Tensor[(4, 8, 11), float32] */;
  %371 = cosh(%370) /* ty=Tensor[(4, 8, 11), float32] */;
  %372 = cast(%var_2496, dtype="uint32") /* ty=Tensor[(4, 8, 11), uint32] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="uint32") /* ty=Tensor[(4, 8, 11), uint32] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %376 = maximum(%374, %375) /* ty=Tensor[(4, 8, 11), uint32] */;
  %377 = cast(%var_2496, dtype="int8") /* ty=Tensor[(4, 8, 11), int8] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="int8") /* ty=Tensor[(4, 8, 11), int8] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %381 = right_shift(%379, %380) /* ty=Tensor[(4, 8, 11), int8] */;
  (%381,)
}

def @func_1646() -> (Tensor[(7, 4, 15), float64],) {
  %382 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  (%382,)
}

def @func_3251() -> (Tensor[(7, 4, 15), uint64],) {
  %383 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
  (%383,)
}

def @func_1900(%var_1879: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float64], Tensor[(2, 56), float64], Tensor[(112), float64], Tensor[(768, 1), float64], Tensor[(7, 4, 15), float64]) {
  %384 = cast(meta[relay.Constant][27] /* ty=Tensor[(768, 1), float64] */, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %385 = cast(%var_1879, dtype="float64") /* ty=Tensor[(112), float64] */;
  %386 = reshape(%384, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
  %387 = reshape(%385, newshape=[2, 56]) /* ty=Tensor[(2, 56), float64] */;
  %388 = @func_1529(%386, %387) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) */;
  %389 = cast(meta[relay.Constant][27] /* ty=Tensor[(768, 1), float64] */, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %390 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %391 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  %392 = %388.3;
  %393 = acos(%389) /* ty=Tensor[(768, 1), float64] */;
  %394 = %390.1;
  (%391, %392, %var_1879, %393, %394)
}

def @func_1404() -> Tensor[(7, 4, 15), float64] {
  %395 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %395.1
}

def @func_4553(%var_4527: Tensor[(135), uint32]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) {
  %396 = @func_3560() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) */;
  %397 = cast(%var_4527, dtype="uint32") /* ty=Tensor[(135), uint32] */;
  %398 = reshape(%397, newshape=[3, 3, 15]) /* ty=Tensor[(3, 3, 15), uint32] */;
  %399 = @func_3627(%398) /* ty=(Tensor[(3, 3, 15), uint32], Tensor[(112), float64], Tensor[(105, 2), int64]) */;
  %400 = cast(meta[relay.Constant][28] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %401 = cast(meta[relay.Constant][28] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %402 = reshape(%400, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), float64] */;
  %403 = reshape(%401, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), float64] */;
  %404 = @func_4459(%402, %403) /* ty=(Tensor[(7, 4, 15), int16], Tensor[(10, 13, 8), bool]) */;
  %405 = %396.0;
  %406 = @func_4153() /* ty=Tensor[(7, 4, 15), float64] */;
  %407 = %399.1;
  %408 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  %409 = %404.0;
  (%405, %406, %407, %var_4527, %408, %409, meta[relay.Constant][28] /* ty=Tensor[(1040), float64] */)
}

def @func_5491() -> Tensor[(3375), int16] {
  %410 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
  %410.2
}

def @func_810(%var_789: Tensor[(7, 15, 15), uint32]) -> Tensor[(7, 15, 15), uint32] {
  %411 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 15, 15), uint32] */, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
  %412 = shape_of(%var_789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_789, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%413, %414) /* ty=Tensor[(7, 15, 15), uint32] */
}

def @func_6245(%var_6208: Tensor[(16, 15, 12), float32], %var_6221: Tensor[(16, 15, 12), float32]) -> (Tensor[(16, 15, 12), float32], Tensor[(7, 4, 15), float32], Tensor[(16, 15, 12), float32], Tensor[(16, 15, 12), int64]) {
  %415 = cast(%var_6208, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %416 = atanh(%415) /* ty=Tensor[(16, 15, 12), float32] */;
  %417 = cast(%var_6221, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %421 = @func_4413() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %422 = cast(%var_6208, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %423 = cast(%var_6221, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
  %424 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%416, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %427 = floor_divide(%419, %420) /* ty=Tensor[(16, 15, 12), float32] */;
  %428 = %421.0;
  %429 = sin(%422) /* ty=Tensor[(16, 15, 12), float32] */;
  %430 = bitwise_and(%425, %426) /* ty=Tensor[(16, 15, 12), int64] */;
  (%427, %428, %429, %430)
}

def @func_2361() -> (Tensor[(7, 4, 15), uint64],) {
  %431 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
  (%431,)
}

def @func_4153() -> Tensor[(7, 4, 15), float64] {
  %432 = @func_4065() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %432.0
}

def @func_1626(%var_1612: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), bool], Tensor[(112), float64]) {
  %433 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %434 = %433.0;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %436 = log10(%435) /* ty=Tensor[(7, 4, 15), float32] */;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %438 = cast(%var_1612, dtype="float64") /* ty=Tensor[(112), float64] */;
  %439 = reshape(%437, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
  %440 = reshape(%438, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %441 = @func_717(%439, %440) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) */;
  %442 = %441.4;
  (%436, %442, %var_1612)
}

def @func_408() -> (Tensor[(7, 4, 15), float32],) {
  %443 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %444 = %443.0;
  (%444,)
}

def @func_3230() -> (Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) {
  %445 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %446 = cast(meta[relay.Constant][30] /* ty=Tensor[(3375), int16] */, dtype="int16") /* ty=Tensor[(3375), int16] */;
  %447 = cast(meta[relay.Constant][30] /* ty=Tensor[(3375), int16] */, dtype="int16") /* ty=Tensor[(3375), int16] */;
  %448 = reshape(%446, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), int16] */;
  %449 = reshape(%447, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), int16] */;
  %450 = @func_2626(%448, %449) /* ty=(Tensor[(15, 15, 15), int16], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) */;
  %451 = %445.0;
  %452 = %450.0;
  (%451, %452, meta[relay.Constant][30] /* ty=Tensor[(3375), int16] */)
}

def @func_4915() -> (Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(3, 16, 10), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], uint16, Tensor[(756, 1), uint16]) {
  %453 = cast(meta[relay.Constant][31] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %454 = cast(meta[relay.Constant][32] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %455 = reshape(%453, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
  %456 = reshape(%454, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
  %457 = @func_755(%455, %456) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
  %458 = %457.0;
  %459 = cast(meta[relay.Constant][32] /* ty=Tensor[(480), uint8] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %463 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %464 = @func_4001() /* ty=Tensor[(7, 4, 15), float64] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %466 = reshape(%465, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
  %467 = @func_4318(%466) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64]) */;
  %468 = cast(meta[relay.Constant][33] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %469 = cast(meta[relay.Constant][34] /* ty=Tensor[(756, 1), uint16] */, dtype="uint16") /* ty=Tensor[(756, 1), uint16] */;
  %470 = reshape(%468, newshape=[]) /* ty=uint16 */;
  %471 = reshape(%469, newshape=[6, 9, 14]) /* ty=Tensor[(6, 9, 14), uint16] */;
  %472 = @func_3182(%470, %471) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %473 = divide(%461, %462) /* ty=Tensor[(3, 16, 10), float32] */;
  %474 = %463.0;
  %475 = %467.0;
  %476 = %472.2;
  (%464, meta[relay.Constant][31] /* ty=Tensor[(30), uint8] */, %473, %474, %475, %476, meta[relay.Constant][33] /* ty=uint16 */, meta[relay.Constant][34] /* ty=Tensor[(756, 1), uint16] */)
}

def @func_4001() -> Tensor[(7, 4, 15), float64] {
  @func_223() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_4292(%var_4248: Tensor[(4, 2, 1), float32]) -> (Tensor[(4, 2, 1), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), float32], Tensor[(240), float64], Tensor[(7, 4, 15), float32]) {
  %477 = cast(0.905448f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %478 = cast(%var_4248, dtype="float32") /* ty=Tensor[(4, 2, 1), float32] */;
  %479 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %480 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %481 = cast(meta[relay.Constant][35] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %482 = reshape(%481, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
  %483 = @func_125(%482) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
  %484 = @func_3787() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %485 = mod(%477, %478) /* ty=Tensor[(4, 2, 1), float32] */;
  %486 = %479.0;
  %487 = %480.1;
  %488 = %483.1;
  %489 = %484.2;
  (%485, %486, %487, %488, meta[relay.Constant][35] /* ty=Tensor[(240), float64] */, %489)
}

def @func_4177() -> (Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(9, 6, 9), bool], Tensor[(243, 2), float32]) {
  %490 = @func_2841() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %491 = cast(meta[relay.Constant][36] /* ty=Tensor[(243, 2), float32] */, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %492 = reshape(%491, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float32] */;
  %493 = @func_1939(%492) /* ty=(Tensor[(9, 6, 9), bool],) */;
  %494 = %490.0;
  %495 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
  %496 = %493.0;
  (%494, %495, %496, meta[relay.Constant][36] /* ty=Tensor[(243, 2), float32] */)
}

def @func_3714() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) {
  %497 = @func_3511() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %498 = @func_3251() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %499 = %497.0;
  %500 = %498.0;
  %501 = @func_2889() /* ty=Tensor[(7, 4, 15), float32] */;
  (%499, %500, %501)
}

def @func_5025() -> Tensor[(7, 4, 15), int32] {
  %502 = @func_4796() /* ty=(Tensor[(7, 4, 15), int32],) */;
  %502.0
}

def @func_755(%var_746: Tensor[(3, 1, 10), uint8], %var_747: Tensor[(3, 16, 10), uint8]) -> (Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) {
  %503 = cast(%var_746, dtype="bool") /* ty=Tensor[(3, 1, 10), bool] */;
  %504 = cast(%var_747, dtype="bool") /* ty=Tensor[(3, 16, 10), bool] */;
  %505 = not_equal(%503, %504) /* ty=Tensor[(3, 16, 10), bool] */;
  %506 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  (%505, %506)
}

def @func_6031() -> (Tensor[(7, 4, 15), float32],) {
  %507 = @func_2769() /* ty=Tensor[(7, 4, 15), float32] */;
  (%507,)
}

def @func_3815() -> (Tensor[(546), uint32],) {
  %508 = @func_3560() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) */;
  %509 = %508.1;
  (%509,)
}

def @func_6544() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(12, 8, 3), float32], Tensor[(288), float32]) {
  %510 = @func_5997() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %511 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %512 = cast(meta[relay.Constant][37] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %513 = reshape(%512, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
  %514 = @func_657(%513) /* ty=(Tensor[(12, 8, 3), float32],) */;
  %515 = %510.0;
  %516 = %511.0;
  %517 = %514.0;
  (%515, %516, %517, meta[relay.Constant][37] /* ty=Tensor[(288), float32] */)
}

def @func_5327(%var_5321: Tensor[(8, 13, 8), float64], %var_5322: Tensor[(8, 13, 8), float64]) -> (Tensor[(8, 13, 8), float64],) {
  %518 = cast(%var_5322, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %519 = shape_of(%var_5321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_5321, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %522 = minimum(%520, %521) /* ty=Tensor[(8, 13, 8), float64] */;
  (%522,)
}

def @func_1063() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  %523 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %524 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %525 = %523.1;
  %526 = %524.0;
  (%525, %526)
}

def @func_1529(%var_1423: Tensor[(16, 3, 16), float64], %var_1493: Tensor[(2, 56), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) {
  %527 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 3, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %528 = shape_of(%var_1423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%var_1423, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %531 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %532 = %531.0;
  %533 = cast(%532, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %534 = erf(%533) /* ty=Tensor[(7, 4, 15), float32] */;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %536 = cast(%532, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %537 = cast(%var_1493, dtype="float64") /* ty=Tensor[(2, 56), float64] */;
  %538 = reshape(%536, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
  %539 = reshape(%537, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %540 = @func_717(%538, %539) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) */;
  %541 = maximum(%529, %530) /* ty=Tensor[(16, 3, 16), float64] */;
  %542 = sinh(%535) /* ty=Tensor[(7, 4, 15), float64] */;
  %543 = %540.3;
  (%541, %542, %543, %var_1493)
}

def @func_4674(%var_4630: Tensor[(675), float64], %var_4652: Tensor[(30), uint8]) -> (Tensor[(546), uint32], Tensor[(15, 5, 9), float64], Tensor[(112), float64], Tensor[(210), int64], Tensor[(675), uint16], Tensor[(480), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(675), bool]) {
  %544 = cast(%var_4630, dtype="float64") /* ty=Tensor[(675), float64] */;
  %545 = reshape(%544, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
  %546 = @func_378(%545) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) */;
  %547 = cast(meta[relay.Constant][39] /* ty=Tensor[(210), int64] */, dtype="int64") /* ty=Tensor[(210), int64] */;
  %548 = reshape(%547, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), int64] */;
  %549 = @func_2561(%548) /* ty=(Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */;
  %550 = cast(%var_4630, dtype="float64") /* ty=Tensor[(675), float64] */;
  %551 = log10(%550) /* ty=Tensor[(675), float64] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(675), float64] */;
  %553 = acos(%552) /* ty=Tensor[(675), float64] */;
  %554 = cast(%553, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %555 = shape_of(%551, dtype="int32") /* ty=Tensor[(1), int32] */;
  %556 = cast(%551, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %558 = cast(%var_4652, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %559 = reshape(%558, newshape=[30]) /* ty=Tensor[(30), uint8] */;
  %560 = @func_1254(%559) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) */;
  %561 = @func_2962() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %562 = cast(%553, dtype="float64") /* ty=Tensor[(675), float64] */;
  %563 = rsqrt(%562) /* ty=Tensor[(675), float64] */;
  %564 = cast(%551, dtype="bool") /* ty=Tensor[(675), bool] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(1), int32] */;
  %566 = cast(%563, dtype="bool") /* ty=Tensor[(675), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?), bool] */;
  %568 = @func_3991() /* ty=Tensor[(546), uint32] */;
  %569 = %546.5;
  %570 = %549.2;
  %571 = left_shift(%556, %557) /* ty=Tensor[(675), uint16] */;
  %572 = %560.3;
  %573 = %561.0;
  %574 = @func_4153() /* ty=Tensor[(7, 4, 15), float64] */;
  %575 = less_equal(%566, %567) /* ty=Tensor[(675), bool] */;
  (%568, %569, %570, meta[relay.Constant][39] /* ty=Tensor[(210), int64] */, %571, %572, %var_4652, %573, %574, %575)
}

def @func_914() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %576 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %577 = %576.0;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %579 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  %580 = asin(%578) /* ty=Tensor[(7, 4, 15), float32] */;
  (%579, %580)
}

def @func_6149(%var_6115: Tensor[(12, 10, 2), uint64], %var_6116: Tensor[(12, 10, 2), uint64]) -> (Tensor[(12, 10, 2), uint64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  %581 = cast(%var_6116, dtype="uint64") /* ty=Tensor[(12, 10, 2), uint64] */;
  %582 = shape_of(%var_6115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_6115, dtype="uint64") /* ty=Tensor[(12, 10, 2), uint64] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %585 = @func_5595() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %586 = @func_2209() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %587 = subtract(%583, %584) /* ty=Tensor[(12, 10, 2), uint64] */;
  %588 = %585.0;
  %589 = %586.0;
  (%587, %588, %589)
}

def @func_4318(%var_4301: Tensor[(7, 4, 15), float32]) -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64]) {
  %590 = @func_2295() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %591 = %590.0;
  %592 = cast(%var_4301, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %596 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %597 = @func_2813() /* ty=Tensor[(7, 4, 15), float64] */;
  %598 = right_shift(%594, %595) /* ty=Tensor[(7, 4, 15), uint64] */;
  %599 = %596.0;
  (%597, %598, %599)
}

def @func_5124(%var_5099: Tensor[(8, 7, 10), uint64], %var_5100: Tensor[(8, 7, 10), uint64]) -> (Tensor[(8, 7, 10), bool], Tensor[(7, 4, 15), float32]) {
  %600 = cast(%var_5100, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
  %601 = shape_of(%var_5099, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_5099, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %605 = not_equal(%602, %603) /* ty=Tensor[(8, 7, 10), bool] */;
  %606 = %604.0;
  (%605, %606)
}

def @func_5284(%var_5212: Tensor[(15, 9), uint32], %var_5228: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), int32], Tensor[(1040), float64], Tensor[(15, 9), uint32], Tensor[(112), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  %607 = @func_3529() /* ty=(Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) */;
  %608 = cast(%var_5212, dtype="uint32") /* ty=Tensor[(15, 9), uint32] */;
  %609 = reshape(%608, newshape=[135]) /* ty=Tensor[(135), uint32] */;
  %610 = @func_4553(%609) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) */;
  %611 = @func_3098() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) */;
  %612 = %611.1;
  %613 = cast(%var_5228, dtype="int32") /* ty=Tensor[(112), int32] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(1), int32] */;
  %615 = cast(%612, dtype="int32") /* ty=Tensor[(112), int32] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?), int32] */;
  %617 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %618 = cast(%var_5212, dtype="uint32") /* ty=Tensor[(15, 9), uint32] */;
  %619 = reshape(%618, newshape=[135]) /* ty=Tensor[(135), uint32] */;
  %620 = @func_4553(%619) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) */;
  %621 = %607.2;
  %622 = %610.6;
  %623 = left_shift(%615, %616) /* ty=Tensor[(112), int32] */;
  %624 = %617.3;
  %625 = %620.4;
  (%621, %622, %var_5212, %623, %624, %625)
}

def @func_259(%var_255: Tensor[(15, 1, 8), int8]) -> (Tensor[(15, ?, 8), bool],) {
  %626 = cast(%var_255, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
  %627 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(15, 1, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 1, 8), int8] */, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %630 = greater_equal(%628, %629) /* ty=Tensor[(15, ?, 8), bool] */;
  (%630,)
}

def @func_5421(%var_5400: Tensor[(3, 10, 11), float32]) -> (Tensor[(3, 10, 11), float32], Tensor[(7, 4, 15), uint64]) {
  %631 = cast(%var_5400, dtype="float32") /* ty=Tensor[(3, 10, 11), float32] */;
  %632 = sqrt(%631) /* ty=Tensor[(3, 10, 11), float32] */;
  %633 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
  (%632, %633)
}

def @func_4065() -> (Tensor[(7, 4, 15), float64],) {
  %634 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %635 = %634.0;
  (%635,)
}

def @func_5662() -> (Tensor[(15, ?, 8), bool], Tensor[(12, 8, 3), float32], Tensor[(72, 4), float32]) {
  %636 = @func_1241() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) */;
  %637 = cast(meta[relay.Constant][41] /* ty=Tensor[(72, 4), float32] */, dtype="float32") /* ty=Tensor[(72, 4), float32] */;
  %638 = reshape(%637, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
  %639 = @func_657(%638) /* ty=(Tensor[(12, 8, 3), float32],) */;
  %640 = %636.1;
  %641 = %639.0;
  (%640, %641, meta[relay.Constant][41] /* ty=Tensor[(72, 4), float32] */)
}

def @func_325(%var_308: Tensor[(7, 4, 15), float32]) -> Tensor[(7, 4, 15), int32] {
  %642 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %643 = %642.0;
  %644 = cast(%var_308, dtype="int32") /* ty=Tensor[(7, 4, 15), int32] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="int32") /* ty=Tensor[(7, 4, 15), int32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%646, %647) /* ty=Tensor[(7, 4, 15), int32] */
}

def @func_882() -> (Tensor[(7, 4, 15), float64],) {
  %648 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %649 = %648.0;
  %650 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 4, 15), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%649, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %654 = floor_mod(%652, %653) /* ty=Tensor[(7, 4, 15), float64] */;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %656 = log(%655) /* ty=Tensor[(7, 4, 15), float64] */;
  (%656,)
}

def @func_2962() -> (Tensor[(7, 4, 15), uint64],) {
  %657 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
  (%657,)
}

def @func_158() -> (Tensor[(7, 4, 15), float32],) {
  %658 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %659 = atan(%658) /* ty=Tensor[(7, 4, 15), float32] */;
  (%659,)
}

def @func_2036(%var_2021: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) {
  %660 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %661 = cast(%var_2021, dtype="float64") /* ty=Tensor[(112), float64] */;
  %662 = reshape(%661, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %663 = @func_1900(%662) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 56), float64], Tensor[(112), float64], Tensor[(768, 1), float64], Tensor[(7, 4, 15), float64]) */;
  %664 = @func_1364() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */;
  %665 = %660.0;
  %666 = %663.2;
  %667 = %664.1;
  (%665, %666, %var_2021, %667)
}

def @func_1859(%var_1808: Tensor[(30), uint8]) -> (Tensor[(7, 4, 15), float32], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(7, 4, 15), float32], Tensor[(675, 120), bool], Tensor[(30), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), float64]) {
  %668 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %669 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %670 = cast(meta[relay.Constant][45] /* ty=Tensor[(675, 1), float64] */, dtype="float64") /* ty=Tensor[(675, 1), float64] */;
  %671 = reshape(%669, newshape=[480]) /* ty=Tensor[(480), uint8] */;
  %672 = reshape(%670, newshape=[675]) /* ty=Tensor[(675), float64] */;
  %673 = @func_1736(%671, %672) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(2, 10, 12), int32], Tensor[(675), float64]) */;
  %674 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %675 = cast(meta[relay.Constant][46] /* ty=Tensor[(120), int8] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %676 = cast(meta[relay.Constant][45] /* ty=Tensor[(675, 1), float64] */, dtype="bool") /* ty=Tensor[(675, 1), bool] */;
  %677 = cast(%var_1808, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %678 = reshape(%677, newshape=[30]) /* ty=Tensor[(30), uint8] */;
  %679 = @func_1254(%678) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) */;
  %680 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %681 = cast(meta[relay.Constant][46] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %682 = reshape(%681, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
  %683 = @func_259(%682) /* ty=(Tensor[(15, ?, 8), bool],) */;
  %684 = %683.0;
  %685 = cast(%684, dtype="float32") /* ty=Tensor[(15, ?, 8), float32] */;
  %686 = atan(%685) /* ty=Tensor[(15, ?, 8), float32] */;
  %687 = cast(%684, dtype="bool") /* ty=Tensor[(15, ?, 8), bool] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="bool") /* ty=Tensor[(15, ?, 8), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = not_equal(%689, %690) /* ty=Tensor[(15, ?, 8), bool] */;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(15, ?, 8), float32] */;
  %693 = asinh(%692) /* ty=Tensor[(15, ?, 8), float32] */;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(15, ?, 8), float64] */;
  %695 = %668.1;
  %696 = %673.3;
  %697 = %674.0;
  %698 = logical_and(%675, %676) /* ty=Tensor[(675, 120), bool] */;
  %699 = %679.2;
  %700 = %680.0;
  %701 = cosh(%694) /* ty=Tensor[(15, ?, 8), float64] */;
  (%695, %696, meta[relay.Constant][44] /* ty=Tensor[(480), uint8] */, %697, %698, %699, %var_1808, %700, %701)
}

def @func_378(%var_330: Tensor[(15, 5, 9), float64]) -> (Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) {
  %702 = cast(meta[relay.Constant][47] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %703 = reshape(%702, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
  %704 = @func_125(%703) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
  %705 = cast(%var_330, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %706 = atan(%705) /* ty=Tensor[(15, 5, 9), float64] */;
  %707 = cast(%var_330, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %711 = maximum(%709, %710) /* ty=Tensor[(15, 5, 9), uint8] */;
  %712 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 5, 9), uint8] */, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%711, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %716 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %717 = cast(meta[relay.Constant][47] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %718 = reshape(%717, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
  %719 = @func_125(%718) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
  %720 = cast(%706, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %721 = %704.0;
  %722 = less(%714, %715) /* ty=Tensor[(15, 5, 9), bool] */;
  %723 = %716.0;
  %724 = %719.0;
  %725 = asin(%720) /* ty=Tensor[(15, 5, 9), float64] */;
  (%721, meta[relay.Constant][47] /* ty=Tensor[(240), float64] */, %722, %723, %724, %725)
}

def @func_4510() -> Tensor[(7, 4, 15), float32] {
  %726 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %726.1
}

def @func_2324(%var_2300: Tensor[(14, 2, 4), int32]) -> (Tensor[(14, 2, 4), bool],) {
  %727 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 2, 4), int32] */, dtype="int32") /* ty=Tensor[(14, 2, 4), int32] */;
  %728 = shape_of(%var_2300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%var_2300, dtype="int32") /* ty=Tensor[(14, 2, 4), int32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %731 = bitwise_xor(%729, %730) /* ty=Tensor[(14, 2, 4), int32] */;
  %732 = cast(meta[relay.Constant][50] /* ty=Tensor[(14, 2, 4), int32] */, dtype="bool") /* ty=Tensor[(14, 2, 4), bool] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="bool") /* ty=Tensor[(14, 2, 4), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = equal(%734, %735) /* ty=Tensor[(14, 2, 4), bool] */;
  (%736,)
}

def @func_3443(%var_3434: Tensor[(15, 15, 15), int16]) -> (Tensor[(112), float64], Tensor[(112), float64], Tensor[(15, 15, 15), uint32]) {
  %737 = cast(meta[relay.Constant][51] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %738 = reshape(%737, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %739 = @func_2036(%738) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) */;
  %740 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
  %741 = %740.1;
  %742 = cast(%var_3434, dtype="uint32") /* ty=Tensor[(15, 15, 15), uint32] */;
  %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%741, dtype="uint32") /* ty=Tensor[(15, 15, 15), uint32] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %746 = %739.1;
  %747 = bitwise_or(%744, %745) /* ty=Tensor[(15, 15, 15), uint32] */;
  (%746, meta[relay.Constant][51] /* ty=Tensor[(112), float64] */, %747)
}

def @func_3529() -> (Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) {
  %748 = @func_1241() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) */;
  %749 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %750 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %751 = %748.2;
  %752 = %749.0;
  %753 = %750.1;
  (%751, %752, %753)
}

def @func_125(%var_83: Tensor[(2, 10, 12), float64]) -> (Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) {
  %754 = cast(%var_83, dtype="int32") /* ty=Tensor[(2, 10, 12), int32] */;
  %755 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(2, 10, 12), int32] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %758 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
  %759 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %762 = divide(%760, %761) /* ty=Tensor[(2, 10, 12), float64] */;
  %763 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %767 = mod(%765, %766) /* ty=Tensor[(2, 10, 12), float64] */;
  %768 = cast(%762, dtype="uint64") /* ty=Tensor[(2, 10, 12), uint64] */;
  %769 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 10, 12), float64] */, dtype="uint64") /* ty=Tensor[(2, 10, 12), uint64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %772 = right_shift(%770, %771) /* ty=Tensor[(2, 10, 12), uint64] */;
  %773 = cast(%772, dtype="uint8") /* ty=Tensor[(2, 10, 12), uint8] */;
  %774 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%767, dtype="uint8") /* ty=Tensor[(2, 10, 12), uint8] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %777 = maximum(%775, %776) /* ty=Tensor[(2, 10, 12), uint8] */;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(2, 10, 12), float32] */;
  %779 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 10, 12), float32] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %782 = bitwise_and(%756, %757) /* ty=Tensor[(2, 10, 12), int32] */;
  %783 = minimum(%780, %781) /* ty=Tensor[(2, 10, 12), float32] */;
  (%782, %783)
}

def @func_1686(%var_1672: Tensor[(4, 12, 8), float32]) -> (Tensor[(4, 12, 8), uint64],) {
  %784 = cast(%var_1672, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %785 = cos(%784) /* ty=Tensor[(4, 12, 8), float32] */;
  %786 = cast(%var_1672, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %790 = multiply(%788, %789) /* ty=Tensor[(4, 12, 8), uint64] */;
  (%790,)
}

def @func_1939(%var_1926: Tensor[(9, 6, 9), float32]) -> (Tensor[(9, 6, 9), bool],) {
  %791 = cast(%var_1926, dtype="float32") /* ty=Tensor[(9, 6, 9), float32] */;
  %792 = log(%791) /* ty=Tensor[(9, 6, 9), float32] */;
  %793 = cast(%var_1926, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
  %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%792, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = equal(%795, %796) /* ty=Tensor[(9, 6, 9), bool] */;
  (%797,)
}

def @func_3054(%var_3037: Tensor[(75, 9), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(75, 9), float64]) {
  %798 = cast(%var_3037, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
  %799 = reshape(%798, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
  %800 = @func_378(%799) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) */;
  %801 = @func_1998() /* ty=Tensor[(7, 4, 15), float32] */;
  %802 = %800.4;
  (%801, %802, %var_3037)
}

def @func_5997() -> (Tensor[(7, 4, 15), float32],) {
  %803 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%803,)
}

def @func_1241() -> (Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) {
  %804 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %805 = cast(meta[relay.Constant][54] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %806 = reshape(%805, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
  %807 = @func_259(%806) /* ty=(Tensor[(15, ?, 8), bool],) */;
  %808 = %804.0;
  %809 = %807.0;
  (%808, %809, meta[relay.Constant][54] /* ty=Tensor[(120), int8] */)
}

def @func_5684() -> (Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), int32]) {
  %810 = @func_4218() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) */;
  %811 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %812 = %810.1;
  %813 = %811.1;
  (%812, %813)
}

def @func_629(%var_599: Tensor[(240), float64], %var_627: Tensor[(10, 42), float32]) -> (Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(2, 13, 2), bool], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), int32], Tensor[(10, 42), float32]) {
  %814 = cast(%var_599, dtype="float64") /* ty=Tensor[(240), float64] */;
  %815 = reshape(%814, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
  %816 = @func_125(%815) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
  %817 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 13, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 2), float32] */;
  %818 = acos(%817) /* ty=Tensor[(2, 13, 2), float32] */;
  %819 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 13, 2), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%818, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %823 = cast(meta[relay.Constant][56] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %824 = reshape(%823, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
  %825 = @func_259(%824) /* ty=(Tensor[(15, ?, 8), bool],) */;
  %826 = cast(%var_627, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
  %827 = reshape(%826, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
  %828 = %816.0;
  %829 = logical_or(%821, %822) /* ty=Tensor[(2, 13, 2), bool] */;
  %830 = %825.0;
  %831 = @func_325(%827) /* ty=Tensor[(7, 4, 15), int32] */;
  (%828, %var_599, %829, %830, meta[relay.Constant][56] /* ty=Tensor[(120), int8] */, %831, %var_627)
}

def @func_2813() -> Tensor[(7, 4, 15), float64] {
  %832 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %832.0
}

def @func_1998() -> Tensor[(7, 4, 15), float32] {
  %833 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %833.0
}

def @func_223() -> Tensor[(7, 4, 15), float64] {
  %834 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %835 = %834.0;
  %836 = cast(%835, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  sin(%836) /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_4932() -> (Tensor[(15, 15, 15), int16],) {
  %837 = @func_3941() /* ty=Tensor[(15, 15, 15), int16] */;
  (%837,)
}

def @func_717(%var_694: Tensor[(7, 4, 15), float32], %var_708: Tensor[(112), float64]) -> (Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) {
  %838 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
  %839 = reshape(%838, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
  %840 = @func_657(%839) /* ty=(Tensor[(12, 8, 3), float32],) */;
  %841 = cast(%var_708, dtype="float64") /* ty=Tensor[(112), float64] */;
  %842 = reshape(%841, newshape=[14, 4, 2]) /* ty=Tensor[(14, 4, 2), float64] */;
  %843 = @func_192(%842) /* ty=(Tensor[(14, 4, 2), float64],) */;
  %844 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %845 = %844.0;
  %846 = cast(%var_694, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%845, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %850 = less_equal(%848, %849) /* ty=Tensor[(7, 4, 15), bool] */;
  %851 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
  %852 = cast(%851, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %853 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%850, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %856 = %840.0;
  %857 = %843.0;
  %858 = greater_equal(%854, %855) /* ty=Tensor[(7, 4, 15), bool] */;
  (%856, meta[relay.Constant][57] /* ty=Tensor[(1, 288), float32] */, %857, %var_708, %858)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6149(%var_6115: Tensor[(12, 10, 2), uint64], %var_6116: Tensor[(12, 10, 2), uint64]) -> (Tensor[(12, 10, 2), uint64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  %0 = cast(%var_6116, dtype="uint64") /* ty=Tensor[(12, 10, 2), uint64] */;
  %1 = shape_of(%var_6115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_6115, dtype="uint64") /* ty=Tensor[(12, 10, 2), uint64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %4 = @func_5595() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %5 = @func_2209() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %6 = subtract(%2, %3) /* ty=Tensor[(12, 10, 2), uint64] */;
  %7 = %4.0;
  %8 = %5.0;
  (%6, %7, %8)
}

def @func_6280() -> (Tensor[(7, 4, 15), float64], Tensor[(240), float64], Tensor[(288, 2), uint16]) {
  @func_6278() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(240), float64], Tensor[(288, 2), uint16]) */
}

def @func_2211() -> (Tensor[(7, 4, 15), float32],) {
  @func_2209() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_3561() -> (Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) {
  %18 = fn () -> (Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) {
    %9 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
    %10 = @func_3098() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) */;
    %11 = %10.2;
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(546), float32] */, dtype="uint32") /* ty=Tensor[(546), uint32] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(1), int32] */;
    %14 = cast(%11, dtype="uint32") /* ty=Tensor[(546), uint32] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %16 = %9.0;
    %17 = left_shift(%14, %15) /* ty=Tensor[(546), uint32] */;
    (%16, %17)
  };
  %18() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) */
}

def @func_2963() -> (Tensor[(7, 4, 15), uint64],) {
  %20 = fn () -> (Tensor[(7, 4, 15), uint64],) {
    %19 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
    (%19,)
  };
  %20() /* ty=(Tensor[(7, 4, 15), uint64],) */
}

def @func_6248(%var_6246: Tensor[(16, 15, 12), float32], %var_6247: Tensor[(16, 15, 12), float32]) -> (Tensor[(16, 15, 12), float32], Tensor[(7, 4, 15), float32], Tensor[(16, 15, 12), float32], Tensor[(16, 15, 12), int64]) {
  %37 = fn (%var_6208: Tensor[(16, 15, 12), float32], %var_6221: Tensor[(16, 15, 12), float32]) -> (Tensor[(16, 15, 12), float32], Tensor[(7, 4, 15), float32], Tensor[(16, 15, 12), float32], Tensor[(16, 15, 12), int64]) {
    %21 = cast(%var_6208, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %22 = atanh(%21) /* ty=Tensor[(16, 15, 12), float32] */;
    %23 = cast(%var_6221, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %25 = cast(%22, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %27 = @func_4413() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %28 = cast(%var_6208, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %29 = cast(%var_6221, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
    %30 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %31 = cast(%22, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
    %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %33 = floor_divide(%25, %26) /* ty=Tensor[(16, 15, 12), float32] */;
    %34 = %27.0;
    %35 = sin(%28) /* ty=Tensor[(16, 15, 12), float32] */;
    %36 = bitwise_and(%31, %32) /* ty=Tensor[(16, 15, 12), int64] */;
    (%33, %34, %35, %36)
  };
  %37(%var_6246, %var_6247) /* ty=(Tensor[(16, 15, 12), float32], Tensor[(7, 4, 15), float32], Tensor[(16, 15, 12), float32], Tensor[(16, 15, 12), int64]) */
}

def @func_1532(%var_1530: Tensor[(16, 3, 16), float64], %var_1531: Tensor[(2, 56), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) {
  %55 = fn (%var_1423: Tensor[(16, 3, 16), float64], %var_1493: Tensor[(2, 56), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) {
    %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 3, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
    %39 = shape_of(%var_1423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %40 = cast(%var_1423, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
    %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %42 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %43 = %42.0;
    %44 = cast(%43, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
    %45 = erf(%44) /* ty=Tensor[(7, 4, 15), float32] */;
    %46 = cast(%45, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    %47 = cast(%43, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
    %48 = cast(%var_1493, dtype="float64") /* ty=Tensor[(2, 56), float64] */;
    %49 = reshape(%47, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
    %50 = reshape(%48, newshape=[112]) /* ty=Tensor[(112), float64] */;
    %51 = @func_717(%49, %50) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) */;
    %52 = maximum(%40, %41) /* ty=Tensor[(16, 3, 16), float64] */;
    %53 = sinh(%46) /* ty=Tensor[(7, 4, 15), float64] */;
    %54 = %51.3;
    (%52, %53, %54, %var_1493)
  };
  %55(%var_1530, %var_1531) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) */
}

def @func_1243() -> (Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) {
  @func_1241() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) */
}

def @func_5553() -> Tensor[(7, 4, 15), uint64] {
  @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */
}

def @func_5046(%var_5027: Tensor[(16, 9, 4), uint16], %var_5028: Tensor[(16, 9, 4), uint16]) -> (Tensor[(16, 9, 4), uint16], Tensor[(16, 9, 4), float64], Tensor[(240), float64], uint16, Tensor[(756), uint16]) {
  %56 = cast(%var_5028, dtype="uint16") /* ty=Tensor[(16, 9, 4), uint16] */;
  %57 = shape_of(%var_5027, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_5027, dtype="uint16") /* ty=Tensor[(16, 9, 4), uint16] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %60 = cast(%var_5027, dtype="float64") /* ty=Tensor[(16, 9, 4), float64] */;
  %61 = cast(meta[relay.Constant][2] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(756), uint16] */, dtype="uint16") /* ty=Tensor[(756), uint16] */;
  %63 = reshape(%61, newshape=[]) /* ty=uint16 */;
  %64 = reshape(%62, newshape=[6, 9, 14]) /* ty=Tensor[(6, 9, 14), uint16] */;
  %65 = @func_3182(%63, %64) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %66 = add(%58, %59) /* ty=Tensor[(16, 9, 4), uint16] */;
  %67 = atan(%60) /* ty=Tensor[(16, 9, 4), float64] */;
  %68 = %65.3;
  (%66, %67, %68, meta[relay.Constant][2] /* ty=uint16 */, meta[relay.Constant][3] /* ty=Tensor[(756), uint16] */)
}

def @func_1384() -> (Tensor[(7, 4, 15), float32],) {
  %69 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %70 = %69.1;
  (%70,)
}

def @func_5127(%var_5125: Tensor[(8, 7, 10), uint64], %var_5126: Tensor[(8, 7, 10), uint64]) -> (Tensor[(8, 7, 10), bool], Tensor[(7, 4, 15), float32]) {
  %78 = fn (%var_5099: Tensor[(8, 7, 10), uint64], %var_5100: Tensor[(8, 7, 10), uint64]) -> (Tensor[(8, 7, 10), bool], Tensor[(7, 4, 15), float32]) {
    %71 = cast(%var_5100, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
    %72 = shape_of(%var_5099, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_5099, dtype="bool") /* ty=Tensor[(8, 7, 10), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %75 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %76 = not_equal(%73, %74) /* ty=Tensor[(8, 7, 10), bool] */;
    %77 = %75.0;
    (%76, %77)
  };
  %78(%var_5125, %var_5126) /* ty=(Tensor[(8, 7, 10), bool], Tensor[(7, 4, 15), float32]) */
}

def @func_6293() -> Tensor[(546), uint32] {
  %80 = fn () -> Tensor[(546), uint32] {
    %79 = @func_4576() /* ty=(Tensor[(546), uint32],) */;
    %79.0
  };
  %80() /* ty=Tensor[(546), uint32] */
}

def @func_1664() -> (Tensor[(7, 4, 15), float64],) {
  @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_6278() -> (Tensor[(7, 4, 15), float64], Tensor[(240), float64], Tensor[(288, 2), uint16]) {
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(288, 2), uint16] */, dtype="uint16") /* ty=Tensor[(288, 2), uint16] */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(288, 2), uint16] */, dtype="uint16") /* ty=Tensor[(288, 2), uint16] */;
  %83 = reshape(%81, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), uint16] */;
  %84 = reshape(%82, newshape=[16, 9, 4]) /* ty=Tensor[(16, 9, 4), uint16] */;
  %85 = @func_5046(%83, %84) /* ty=(Tensor[(16, 9, 4), uint16], Tensor[(16, 9, 4), float64], Tensor[(240), float64], uint16, Tensor[(756), uint16]) */;
  %86 = @func_2729() /* ty=Tensor[(7, 4, 15), float64] */;
  %87 = %85.2;
  (%86, %87, meta[relay.Constant][4] /* ty=Tensor[(288, 2), uint16] */)
}

def @func_1629(%var_1627: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), bool], Tensor[(112), float64]) {
  @func_1626(%var_1627) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), bool], Tensor[(112), float64]) */
}

def @func_5596() -> (Tensor[(7, 4, 15), float64],) {
  %90 = fn () -> (Tensor[(7, 4, 15), float64],) {
    %88 = @func_3787() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
    %89 = %88.3;
    (%89,)
  };
  %90() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_4599(%var_4597: Tensor[(2, 1, 7), uint64], %var_4598: Tensor[(2, 3, 7), uint64]) -> (Tensor[(2, 3, 7), bool],) {
  %94 = fn (%var_4582: Tensor[(2, 1, 7), uint64], %var_4583: Tensor[(2, 3, 7), uint64]) -> (Tensor[(2, 3, 7), bool],) {
    %91 = cast(%var_4582, dtype="bool") /* ty=Tensor[(2, 1, 7), bool] */;
    %92 = cast(%var_4583, dtype="bool") /* ty=Tensor[(2, 3, 7), bool] */;
    %93 = less_equal(%91, %92) /* ty=Tensor[(2, 3, 7), bool] */;
    (%93,)
  };
  %94(%var_4597, %var_4598) /* ty=(Tensor[(2, 3, 7), bool],) */
}

def @func_408() -> (Tensor[(7, 4, 15), float32],) {
  %95 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %96 = %95.0;
  (%96,)
}

def @func_3186(%var_3184: uint16, %var_3185: Tensor[(6, 9, 14), uint16]) -> (Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
  @func_3182(%var_3184, %var_3185) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */
}

def @func_2361() -> (Tensor[(7, 4, 15), uint64],) {
  %97 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
  (%97,)
}

def @func_3992() -> Tensor[(546), uint32] {
  %99 = fn () -> Tensor[(546), uint32] {
    %98 = @func_3560() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) */;
    %98.1
  };
  %99() /* ty=Tensor[(546), uint32] */
}

def @func_5997() -> (Tensor[(7, 4, 15), float32],) {
  %100 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%100,)
}

def @func_755(%var_746: Tensor[(3, 1, 10), uint8], %var_747: Tensor[(3, 16, 10), uint8]) -> (Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) {
  %101 = cast(%var_746, dtype="bool") /* ty=Tensor[(3, 1, 10), bool] */;
  %102 = cast(%var_747, dtype="bool") /* ty=Tensor[(3, 16, 10), bool] */;
  %103 = not_equal(%101, %102) /* ty=Tensor[(3, 16, 10), bool] */;
  %104 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  (%103, %104)
}

def @func_2729() -> Tensor[(7, 4, 15), float64] {
  %105 = @func_1998() /* ty=Tensor[(7, 4, 15), float32] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  acosh(%106) /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_1999() -> Tensor[(7, 4, 15), float32] {
  %108 = fn () -> Tensor[(7, 4, 15), float32] {
    %107 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %107.0
  };
  %108() /* ty=Tensor[(7, 4, 15), float32] */
}

def @func_3252() -> (Tensor[(7, 4, 15), uint64],) {
  %110 = fn () -> (Tensor[(7, 4, 15), uint64],) {
    %109 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
    (%109,)
  };
  %110() /* ty=(Tensor[(7, 4, 15), uint64],) */
}

def @func_2842() -> (Tensor[(7, 4, 15), uint64],) {
  %113 = fn () -> (Tensor[(7, 4, 15), uint64],) {
    %111 = @func_2361() /* ty=(Tensor[(7, 4, 15), uint64],) */;
    %112 = %111.0;
    (%112,)
  };
  %113() /* ty=(Tensor[(7, 4, 15), uint64],) */
}

def @func_3099() -> (Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) {
  %122 = fn () -> (Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) {
    %114 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %115 = cast(meta[relay.Constant][5] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
    %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
    %117 = reshape(%115, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
    %118 = reshape(%116, newshape=[13, 6, 7]) /* ty=Tensor[(13, 6, 7), float32] */;
    %119 = @func_3010(%117, %118) /* ty=(Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float32], Tensor[(112), float64], Tensor[(112), float64]) */;
    %120 = %114.0;
    %121 = %119.2;
    (%120, %121, meta[relay.Constant][5] /* ty=Tensor[(546), float32] */)
  };
  %122() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) */
}

def @func_1925() -> (Tensor[(7, 4, 15), uint64],) {
  %132 = fn () -> (Tensor[(7, 4, 15), uint64],) {
    %123 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %124 = %123.0;
    %125 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %126 = %125.0;
    %127 = cast(%126, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
    %128 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%124, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %131 = minimum(%129, %130) /* ty=Tensor[(7, 4, 15), uint64] */;
    (%131,)
  };
  %132() /* ty=(Tensor[(7, 4, 15), uint64],) */
}

def @func_3530() -> (Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) {
  %139 = fn () -> (Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) {
    %133 = @func_1241() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) */;
    %134 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %135 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %136 = %133.2;
    %137 = %134.0;
    %138 = %135.1;
    (%136, %137, %138)
  };
  %139() /* ty=(Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) */
}

def @func_2770() -> Tensor[(7, 4, 15), float32] {
  %141 = fn () -> Tensor[(7, 4, 15), float32] {
    %140 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %140.0
  };
  %141() /* ty=Tensor[(7, 4, 15), float32] */
}

def @func_914() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %142 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %143 = %142.0;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %145 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  %146 = asin(%144) /* ty=Tensor[(7, 4, 15), float32] */;
  (%145, %146)
}

def @func_5555() -> Tensor[(7, 4, 15), uint64] {
  @func_5553() /* ty=Tensor[(7, 4, 15), uint64] */
}

def @func_3684() -> (Tensor[(7, 4, 15), int16], Tensor[(7, 4, 15), float64]) {
  %155 = fn () -> (Tensor[(7, 4, 15), int16], Tensor[(7, 4, 15), float64]) {
    %147 = @func_2361() /* ty=(Tensor[(7, 4, 15), uint64],) */;
    %148 = %147.0;
    %149 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 4, 15), uint64] */, dtype="int16") /* ty=Tensor[(7, 4, 15), int16] */;
    %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%148, dtype="int16") /* ty=Tensor[(7, 4, 15), int16] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %153 = bitwise_and(%151, %152) /* ty=Tensor[(7, 4, 15), int16] */;
    %154 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
    (%153, %154)
  };
  %155() /* ty=(Tensor[(7, 4, 15), int16], Tensor[(7, 4, 15), float64]) */
}

def @func_2889() -> Tensor[(7, 4, 15), float32] {
  %156 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  sqrt(%158) /* ty=Tensor[(7, 4, 15), float32] */
}

def @func_4179() -> (Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(9, 6, 9), bool], Tensor[(243, 2), float32]) {
  @func_4177() /* ty=(Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(9, 6, 9), bool], Tensor[(243, 2), float32]) */
}

def @func_6203(%var_6201: Tensor[(4, 7, 7), bool], %var_6202: Tensor[(4, 7, 7), bool]) -> (Tensor[(4, 7, 7), bool],) {
  %164 = fn (%var_6195: Tensor[(4, 7, 7), bool], %var_6196: Tensor[(4, 7, 7), bool]) -> (Tensor[(4, 7, 7), bool],) {
    %159 = cast(%var_6196, dtype="bool") /* ty=Tensor[(4, 7, 7), bool] */;
    %160 = shape_of(%var_6195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %161 = cast(%var_6195, dtype="bool") /* ty=Tensor[(4, 7, 7), bool] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %163 = logical_and(%161, %162) /* ty=Tensor[(4, 7, 7), bool] */;
    (%163,)
  };
  %164(%var_6201, %var_6202) /* ty=(Tensor[(4, 7, 7), bool],) */
}

def @func_4510() -> Tensor[(7, 4, 15), float32] {
  %165 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %165.1
}

def @func_1365() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  %169 = fn () -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
    %166 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %167 = %166.0;
    %168 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
    (%167, %168)
  };
  %169() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */
}

def @func_4177() -> (Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(9, 6, 9), bool], Tensor[(243, 2), float32]) {
  %170 = @func_2841() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %171 = cast(meta[relay.Constant][7] /* ty=Tensor[(243, 2), float32] */, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %172 = reshape(%171, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), float32] */;
  %173 = @func_1939(%172) /* ty=(Tensor[(9, 6, 9), bool],) */;
  %174 = %170.0;
  %175 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
  %176 = %173.0;
  (%174, %175, %176, meta[relay.Constant][7] /* ty=Tensor[(243, 2), float32] */)
}

def @func_2036(%var_2021: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) {
  %177 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %178 = cast(%var_2021, dtype="float64") /* ty=Tensor[(112), float64] */;
  %179 = reshape(%178, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %180 = @func_1900(%179) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 56), float64], Tensor[(112), float64], Tensor[(768, 1), float64], Tensor[(7, 4, 15), float64]) */;
  %181 = @func_1364() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */;
  %182 = %177.0;
  %183 = %180.2;
  %184 = %181.1;
  (%182, %183, %var_2021, %184)
}

def @func_6545() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(12, 8, 3), float32], Tensor[(288), float32]) {
  %193 = fn () -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(12, 8, 3), float32], Tensor[(288), float32]) {
    %185 = @func_5997() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %186 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
    %187 = cast(meta[relay.Constant][8] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %188 = reshape(%187, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
    %189 = @func_657(%188) /* ty=(Tensor[(12, 8, 3), float32],) */;
    %190 = %185.0;
    %191 = %186.0;
    %192 = %189.0;
    (%190, %191, %192, meta[relay.Constant][8] /* ty=Tensor[(288), float32] */)
  };
  %193() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(12, 8, 3), float32], Tensor[(288), float32]) */
}

def @func_2630(%var_2628: Tensor[(15, 15, 15), int16], %var_2629: Tensor[(15, 15, 15), int16]) -> (Tensor[(15, 15, 15), int16], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) {
  @func_2626(%var_2628, %var_2629) /* ty=(Tensor[(15, 15, 15), int16], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) */
}

def @func_2891() -> Tensor[(7, 4, 15), float32] {
  @func_2889() /* ty=Tensor[(7, 4, 15), float32] */
}

def @func_5368() -> (Tensor[(2, 10, 12), int32],) {
  %194 = @func_4915() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(3, 16, 10), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], uint16, Tensor[(756, 1), uint16]) */;
  %195 = %194.5;
  (%195,)
}

def @func_5730() -> Tensor[(7, 16, 15), float32] {
  @func_5728() /* ty=Tensor[(7, 16, 15), float32] */
}

def @func_6456() -> Tensor[(7, 4, 15), int32] {
  %197 = fn () -> Tensor[(7, 4, 15), int32] {
    %196 = @func_4796() /* ty=(Tensor[(7, 4, 15), int32],) */;
    %196.0
  };
  %197() /* ty=Tensor[(7, 4, 15), int32] */
}

def @func_1862(%var_1860: Tensor[(30), uint8]) -> (Tensor[(7, 4, 15), float32], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(7, 4, 15), float32], Tensor[(675, 120), bool], Tensor[(30), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), float64]) {
  @func_1859(%var_1860) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(7, 4, 15), float32], Tensor[(675, 120), bool], Tensor[(30), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), float64]) */
}

def @func_1859(%var_1808: Tensor[(30), uint8]) -> (Tensor[(7, 4, 15), float32], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(7, 4, 15), float32], Tensor[(675, 120), bool], Tensor[(30), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), float64]) {
  %198 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %199 = cast(meta[relay.Constant][9] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %200 = cast(meta[relay.Constant][10] /* ty=Tensor[(675, 1), float64] */, dtype="float64") /* ty=Tensor[(675, 1), float64] */;
  %201 = reshape(%199, newshape=[480]) /* ty=Tensor[(480), uint8] */;
  %202 = reshape(%200, newshape=[675]) /* ty=Tensor[(675), float64] */;
  %203 = @func_1736(%201, %202) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(2, 10, 12), int32], Tensor[(675), float64]) */;
  %204 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %205 = cast(meta[relay.Constant][11] /* ty=Tensor[(120), int8] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %206 = cast(meta[relay.Constant][10] /* ty=Tensor[(675, 1), float64] */, dtype="bool") /* ty=Tensor[(675, 1), bool] */;
  %207 = cast(%var_1808, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %208 = reshape(%207, newshape=[30]) /* ty=Tensor[(30), uint8] */;
  %209 = @func_1254(%208) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) */;
  %210 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %211 = cast(meta[relay.Constant][11] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %212 = reshape(%211, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
  %213 = @func_259(%212) /* ty=(Tensor[(15, ?, 8), bool],) */;
  %214 = %213.0;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(15, ?, 8), float32] */;
  %216 = atan(%215) /* ty=Tensor[(15, ?, 8), float32] */;
  %217 = cast(%214, dtype="bool") /* ty=Tensor[(15, ?, 8), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(15, ?, 8), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %221 = not_equal(%219, %220) /* ty=Tensor[(15, ?, 8), bool] */;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(15, ?, 8), float32] */;
  %223 = asinh(%222) /* ty=Tensor[(15, ?, 8), float32] */;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(15, ?, 8), float64] */;
  %225 = %198.1;
  %226 = %203.3;
  %227 = %204.0;
  %228 = logical_and(%205, %206) /* ty=Tensor[(675, 120), bool] */;
  %229 = %209.2;
  %230 = %210.0;
  %231 = cosh(%224) /* ty=Tensor[(15, ?, 8), float64] */;
  (%225, %226, meta[relay.Constant][9] /* ty=Tensor[(480), uint8] */, %227, %228, %229, %var_1808, %230, %231)
}

def @func_3942() -> Tensor[(15, 15, 15), int16] {
  %233 = fn () -> Tensor[(15, 15, 15), int16] {
    %232 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
    %232.1
  };
  %233() /* ty=Tensor[(15, 15, 15), int16] */
}

def @func_3266(%var_3265: Tensor[(9, 1, 9), float64]) -> (Tensor[(9, 1, 9), float64], Tensor[(480), uint8], Tensor[(1, 30), uint8], Tensor[(7, 4, 15), float64]) {
  %241 = fn (%var_3253: Tensor[(9, 1, 9), float64]) -> (Tensor[(9, 1, 9), float64], Tensor[(480), uint8], Tensor[(1, 30), uint8], Tensor[(7, 4, 15), float64]) {
    %234 = cast(%var_3253, dtype="float64") /* ty=Tensor[(9, 1, 9), float64] */;
    %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 30), uint8] */, dtype="uint8") /* ty=Tensor[(1, 30), uint8] */;
    %236 = reshape(%235, newshape=[30]) /* ty=Tensor[(30), uint8] */;
    %237 = @func_1254(%236) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) */;
    %238 = erf(%234) /* ty=Tensor[(9, 1, 9), float64] */;
    %239 = %237.3;
    %240 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
    (%238, %239, meta[relay.Constant][12] /* ty=Tensor[(1, 30), uint8] */, %240)
  };
  %241(%var_3265) /* ty=(Tensor[(9, 1, 9), float64], Tensor[(480), uint8], Tensor[(1, 30), uint8], Tensor[(7, 4, 15), float64]) */
}

def @func_1941(%var_1940: Tensor[(9, 6, 9), float32]) -> (Tensor[(9, 6, 9), bool],) {
  %249 = fn (%var_1926: Tensor[(9, 6, 9), float32]) -> (Tensor[(9, 6, 9), bool],) {
    %242 = cast(%var_1926, dtype="float32") /* ty=Tensor[(9, 6, 9), float32] */;
    %243 = log(%242) /* ty=Tensor[(9, 6, 9), float32] */;
    %244 = cast(%var_1926, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
    %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(%243, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %248 = equal(%246, %247) /* ty=Tensor[(9, 6, 9), bool] */;
    (%248,)
  };
  %249(%var_1940) /* ty=(Tensor[(9, 6, 9), bool],) */
}

def @func_916() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */
}

def @func_1063() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  %250 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %251 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %252 = %250.1;
  %253 = %251.0;
  (%252, %253)
}

def @func_1241() -> (Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) {
  %254 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %255 = cast(meta[relay.Constant][13] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %256 = reshape(%255, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
  %257 = @func_259(%256) /* ty=(Tensor[(15, ?, 8), bool],) */;
  %258 = %254.0;
  %259 = %257.0;
  (%258, %259, meta[relay.Constant][13] /* ty=Tensor[(120), int8] */)
}

def @func_3383(%var_3339: Tensor[(480), uint8], %var_3375: Tensor[(240), float64]) -> (Tensor[(3, 16, 10), bool], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), uint16], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(240), float64]) {
  %260 = cast(meta[relay.Constant][14] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %261 = cast(%var_3339, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %262 = reshape(%260, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
  %263 = reshape(%261, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
  %264 = @func_755(%262, %263) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
  %265 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %266 = reshape(%265, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
  %267 = @func_259(%266) /* ty=(Tensor[(15, ?, 8), bool],) */;
  %268 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %269 = %268.0;
  %270 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  %271 = cast(%270, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %272 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%269, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %275 = floor_divide(%273, %274) /* ty=Tensor[(7, 4, 15), float64] */;
  %276 = cast(%275, dtype="uint16") /* ty=Tensor[(7, 4, 15), uint16] */;
  %277 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%269, dtype="uint16") /* ty=Tensor[(7, 4, 15), uint16] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %280 = cast(%var_3375, dtype="float64") /* ty=Tensor[(240), float64] */;
  %281 = reshape(%280, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %282 = @func_1030(%281) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %283 = %264.0;
  %284 = %267.0;
  %285 = left_shift(%278, %279) /* ty=Tensor[(7, 4, 15), uint16] */;
  %286 = @func_2729() /* ty=Tensor[(7, 4, 15), float64] */;
  %287 = %282.0;
  (%283, meta[relay.Constant][14] /* ty=Tensor[(30), uint8] */, %var_3339, %284, meta[relay.Constant][15] /* ty=Tensor[(120), int8] */, %285, %286, %287, %var_3375)
}

def @func_2154() -> (Tensor[(7, 4, 15), float32], Tensor[(16, 3, 16), float64], Tensor[(192, 4), float64], Tensor[(112), float64]) {
  %296 = fn () -> (Tensor[(7, 4, 15), float32], Tensor[(16, 3, 16), float64], Tensor[(192, 4), float64], Tensor[(112), float64]) {
    %288 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %289 = cast(meta[relay.Constant][16] /* ty=Tensor[(192, 4), float64] */, dtype="float64") /* ty=Tensor[(192, 4), float64] */;
    %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
    %291 = reshape(%289, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
    %292 = reshape(%290, newshape=[2, 56]) /* ty=Tensor[(2, 56), float64] */;
    %293 = @func_1529(%291, %292) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) */;
    %294 = %288.0;
    %295 = %293.0;
    (%294, %295, meta[relay.Constant][16] /* ty=Tensor[(192, 4), float64] */, meta[relay.Constant][17] /* ty=Tensor[(112), float64] */)
  };
  %296() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(16, 3, 16), float64], Tensor[(192, 4), float64], Tensor[(112), float64]) */
}

def @func_159() -> (Tensor[(7, 4, 15), float32],) {
  %299 = fn () -> (Tensor[(7, 4, 15), float32],) {
    %297 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 4, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
    %298 = atan(%297) /* ty=Tensor[(7, 4, 15), float32] */;
    (%298,)
  };
  %299() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_883() -> (Tensor[(7, 4, 15), float64],) {
  %309 = fn () -> (Tensor[(7, 4, 15), float64],) {
    %300 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %301 = %300.0;
    %302 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 4, 15), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%301, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %306 = floor_mod(%304, %305) /* ty=Tensor[(7, 4, 15), float64] */;
    %307 = cast(%306, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    %308 = log(%307) /* ty=Tensor[(7, 4, 15), float64] */;
    (%308,)
  };
  %309() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_2505(%var_2473: Tensor[(4, 8, 11), float32], %var_2496: Tensor[(4, 8, 11), float32]) -> (Tensor[(4, 8, 11), int8],) {
  %310 = cast(%var_2473, dtype="float32") /* ty=Tensor[(4, 8, 11), float32] */;
  %311 = cosh(%310) /* ty=Tensor[(4, 8, 11), float32] */;
  %312 = cast(%var_2496, dtype="uint32") /* ty=Tensor[(4, 8, 11), uint32] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="uint32") /* ty=Tensor[(4, 8, 11), uint32] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %316 = maximum(%314, %315) /* ty=Tensor[(4, 8, 11), uint32] */;
  %317 = cast(%var_2496, dtype="int8") /* ty=Tensor[(4, 8, 11), int8] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="int8") /* ty=Tensor[(4, 8, 11), int8] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %321 = right_shift(%319, %320) /* ty=Tensor[(4, 8, 11), int8] */;
  (%321,)
}

def @func_2509(%var_2507: Tensor[(4, 8, 11), float32], %var_2508: Tensor[(4, 8, 11), float32]) -> (Tensor[(4, 8, 11), int8],) {
  @func_2505(%var_2507, %var_2508) /* ty=(Tensor[(4, 8, 11), int8],) */
}

def @func_2626(%var_2613: Tensor[(15, 15, 15), int16], %var_2614: Tensor[(15, 15, 15), int16]) -> (Tensor[(15, 15, 15), int16], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) {
  %322 = cast(%var_2614, dtype="int16") /* ty=Tensor[(15, 15, 15), int16] */;
  %323 = shape_of(%var_2613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_2613, dtype="int16") /* ty=Tensor[(15, 15, 15), int16] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %326 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %327 = @func_1241() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) */;
  %328 = maximum(%324, %325) /* ty=Tensor[(15, 15, 15), int16] */;
  %329 = %326.0;
  %330 = %327.0;
  (%328, %329, %330)
}

def @func_6114() -> Tensor[(7, 4, 15), float64] {
  %332 = fn () -> Tensor[(7, 4, 15), float64] {
    %331 = @func_583() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64]) */;
    %331.1
  };
  %332() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_3630(%var_3628: Tensor[(3, 3, 15), uint32]) -> (Tensor[(3, 3, 15), uint32], Tensor[(112), float64], Tensor[(105, 2), int64]) {
  @func_3627(%var_3628) /* ty=(Tensor[(3, 3, 15), uint32], Tensor[(112), float64], Tensor[(105, 2), int64]) */
}

def @func_1662() -> (Tensor[(7, 4, 15), float64],) {
  %333 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %334 = %333.0;
  (%334,)
}

def @func_2326(%var_2325: Tensor[(14, 2, 4), int32]) -> (Tensor[(14, 2, 4), bool],) {
  %345 = fn (%var_2300: Tensor[(14, 2, 4), int32]) -> (Tensor[(14, 2, 4), bool],) {
    %335 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 2, 4), int32] */, dtype="int32") /* ty=Tensor[(14, 2, 4), int32] */;
    %336 = shape_of(%var_2300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %337 = cast(%var_2300, dtype="int32") /* ty=Tensor[(14, 2, 4), int32] */;
    %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %339 = bitwise_xor(%337, %338) /* ty=Tensor[(14, 2, 4), int32] */;
    %340 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 2, 4), int32] */, dtype="bool") /* ty=Tensor[(14, 2, 4), bool] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="bool") /* ty=Tensor[(14, 2, 4), bool] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %344 = equal(%342, %343) /* ty=Tensor[(14, 2, 4), bool] */;
    (%344,)
  };
  %345(%var_2325) /* ty=(Tensor[(14, 2, 4), bool],) */
}

def @func_1956() -> (Tensor[(7, 4, 15), float64],) {
  %346 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %347 = %346.0;
  (%347,)
}

def @func_5728() -> Tensor[(7, 16, 15), float32] {
  %348 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 15), float32] */;
  erf(%348) /* ty=Tensor[(7, 16, 15), float32] */
}

def @func_5662() -> (Tensor[(15, ?, 8), bool], Tensor[(12, 8, 3), float32], Tensor[(72, 4), float32]) {
  %349 = @func_1241() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), bool], Tensor[(120), int8]) */;
  %350 = cast(meta[relay.Constant][23] /* ty=Tensor[(72, 4), float32] */, dtype="float32") /* ty=Tensor[(72, 4), float32] */;
  %351 = reshape(%350, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
  %352 = @func_657(%351) /* ty=(Tensor[(12, 8, 3), float32],) */;
  %353 = %349.1;
  %354 = %352.0;
  (%353, %354, meta[relay.Constant][23] /* ty=Tensor[(72, 4), float32] */)
}

def @func_3013(%var_3011: Tensor[(13, 6, 7), float32], %var_3012: Tensor[(13, 6, 7), float32]) -> (Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float32], Tensor[(112), float64], Tensor[(112), float64]) {
  %371 = fn (%var_2982: Tensor[(13, 6, 7), float32], %var_2987: Tensor[(13, 6, 7), float32]) -> (Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float32], Tensor[(112), float64], Tensor[(112), float64]) {
    %355 = cast(%var_2982, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
    %356 = log2(%355) /* ty=Tensor[(13, 6, 7), float32] */;
    %357 = cast(%var_2987, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
    %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%356, dtype="bool") /* ty=Tensor[(13, 6, 7), bool] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %361 = cast(%var_2982, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
    %362 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(%356, dtype="float32") /* ty=Tensor[(13, 6, 7), float32] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %365 = cast(meta[relay.Constant][24] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
    %366 = reshape(%365, newshape=[112]) /* ty=Tensor[(112), float64] */;
    %367 = @func_2036(%366) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) */;
    %368 = not_equal(%359, %360) /* ty=Tensor[(13, 6, 7), bool] */;
    %369 = floor_divide(%363, %364) /* ty=Tensor[(13, 6, 7), float32] */;
    %370 = %367.1;
    (%368, %369, %370, meta[relay.Constant][24] /* ty=Tensor[(112), float64] */)
  };
  %371(%var_3011, %var_3012) /* ty=(Tensor[(13, 6, 7), bool], Tensor[(13, 6, 7), float32], Tensor[(112), float64], Tensor[(112), float64]) */
}

def @func_3714() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) {
  %372 = @func_3511() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %373 = @func_3251() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %374 = %372.0;
  %375 = %373.0;
  %376 = @func_2889() /* ty=Tensor[(7, 4, 15), float32] */;
  (%374, %375, %376)
}

def @func_632(%var_630: Tensor[(240), float64], %var_631: Tensor[(10, 42), float32]) -> (Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(2, 13, 2), bool], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), int32], Tensor[(10, 42), float32]) {
  %395 = fn (%var_599: Tensor[(240), float64], %var_627: Tensor[(10, 42), float32]) -> (Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(2, 13, 2), bool], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), int32], Tensor[(10, 42), float32]) {
    %377 = cast(%var_599, dtype="float64") /* ty=Tensor[(240), float64] */;
    %378 = reshape(%377, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
    %379 = @func_125(%378) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
    %380 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 13, 2), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 2), float32] */;
    %381 = acos(%380) /* ty=Tensor[(2, 13, 2), float32] */;
    %382 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 13, 2), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
    %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%381, dtype="bool") /* ty=Tensor[(2, 13, 2), bool] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %386 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
    %387 = reshape(%386, newshape=[15, 1, 8]) /* ty=Tensor[(15, 1, 8), int8] */;
    %388 = @func_259(%387) /* ty=(Tensor[(15, ?, 8), bool],) */;
    %389 = cast(%var_627, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
    %390 = reshape(%389, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
    %391 = %379.0;
    %392 = logical_or(%384, %385) /* ty=Tensor[(2, 13, 2), bool] */;
    %393 = %388.0;
    %394 = @func_325(%390) /* ty=Tensor[(7, 4, 15), int32] */;
    (%391, %var_599, %392, %393, meta[relay.Constant][26] /* ty=Tensor[(120), int8] */, %394, %var_627)
  };
  %395(%var_630, %var_631) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(2, 13, 2), bool], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), int32], Tensor[(10, 42), float32]) */
}

def @func_461() -> Tensor[(7, 4, 15), float64] {
  @func_459() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_5026() -> Tensor[(7, 4, 15), int32] {
  %397 = fn () -> Tensor[(7, 4, 15), int32] {
    %396 = @func_4796() /* ty=(Tensor[(7, 4, 15), int32],) */;
    %396.0
  };
  %397() /* ty=Tensor[(7, 4, 15), int32] */
}

def @func_5706() -> (Tensor[(7, 4, 15), float32],) {
  %398 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%398,)
}

def @func_4294(%var_4293: Tensor[(4, 2, 1), float32]) -> (Tensor[(4, 2, 1), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), float32], Tensor[(240), float64], Tensor[(7, 4, 15), float32]) {
  %412 = fn (%var_4248: Tensor[(4, 2, 1), float32]) -> (Tensor[(4, 2, 1), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), float32], Tensor[(240), float64], Tensor[(7, 4, 15), float32]) {
    %399 = cast(0.905448f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %400 = cast(%var_4248, dtype="float32") /* ty=Tensor[(4, 2, 1), float32] */;
    %401 = @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %402 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %403 = cast(meta[relay.Constant][27] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %404 = reshape(%403, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
    %405 = @func_125(%404) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
    %406 = @func_3787() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
    %407 = mod(%399, %400) /* ty=Tensor[(4, 2, 1), float32] */;
    %408 = %401.0;
    %409 = %402.1;
    %410 = %405.1;
    %411 = %406.2;
    (%407, %408, %409, %410, meta[relay.Constant][27] /* ty=Tensor[(240), float64] */, %411)
  };
  %412(%var_4293) /* ty=(Tensor[(4, 2, 1), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), float32], Tensor[(240), float64], Tensor[(7, 4, 15), float32]) */
}

def @func_5493() -> Tensor[(3375), int16] {
  @func_5491() /* ty=Tensor[(3375), int16] */
}

def @func_6491() -> (Tensor[(7, 4, 15), float32],) {
  %415 = fn () -> (Tensor[(7, 4, 15), float32],) {
    %413 = @func_5706() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %414 = %413.0;
    (%414,)
  };
  %415() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_4002() -> Tensor[(7, 4, 15), float64] {
  %416 = fn () -> Tensor[(7, 4, 15), float64] {
    @func_223() /* ty=Tensor[(7, 4, 15), float64] */
  };
  %416() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_380(%var_379: Tensor[(15, 5, 9), float64]) -> (Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) {
  %441 = fn (%var_330: Tensor[(15, 5, 9), float64]) -> (Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) {
    %417 = cast(meta[relay.Constant][28] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %418 = reshape(%417, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
    %419 = @func_125(%418) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
    %420 = cast(%var_330, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    %421 = atan(%420) /* ty=Tensor[(15, 5, 9), float64] */;
    %422 = cast(%var_330, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
    %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(%421, dtype="uint8") /* ty=Tensor[(15, 5, 9), uint8] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %426 = maximum(%424, %425) /* ty=Tensor[(15, 5, 9), uint8] */;
    %427 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 5, 9), uint8] */, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
    %429 = cast(%426, dtype="bool") /* ty=Tensor[(15, 5, 9), bool] */;
    %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %431 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %432 = cast(meta[relay.Constant][28] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %433 = reshape(%432, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
    %434 = @func_125(%433) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
    %435 = cast(%421, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
    %436 = %419.0;
    %437 = less(%429, %430) /* ty=Tensor[(15, 5, 9), bool] */;
    %438 = %431.0;
    %439 = %434.0;
    %440 = asin(%435) /* ty=Tensor[(15, 5, 9), float64] */;
    (%436, meta[relay.Constant][28] /* ty=Tensor[(240), float64] */, %437, %438, %439, %440)
  };
  %441(%var_379) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) */
}

def @func_4577() -> (Tensor[(546), uint32],) {
  %444 = fn () -> (Tensor[(546), uint32],) {
    %442 = @func_3815() /* ty=(Tensor[(546), uint32],) */;
    %443 = %442.0;
    (%443,)
  };
  %444() /* ty=(Tensor[(546), uint32],) */
}

def @func_3387(%var_3385: Tensor[(480), uint8], %var_3386: Tensor[(240), float64]) -> (Tensor[(3, 16, 10), bool], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), uint16], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(240), float64]) {
  @func_3383(%var_3385, %var_3386) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), uint16], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(240), float64]) */
}

def @func_3789() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  @func_3787() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */
}

def @func_3716() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) {
  @func_3714() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) */
}

def @func_3906(%var_3903: Tensor[(5, 16, 3), float32], %var_3904: uint16, %var_3905: Tensor[(756), uint16]) -> (Tensor[(2, 10, 12), bool], Tensor[(7, 4, 15), float32], Tensor[(6, 9, 14), float32], uint16, Tensor[(756), uint16], Tensor[(420), float64]) {
  %473 = fn (%var_3857: Tensor[(5, 16, 3), float32], %var_3881: uint16, %var_3882: Tensor[(756), uint16]) -> (Tensor[(2, 10, 12), bool], Tensor[(7, 4, 15), float32], Tensor[(6, 9, 14), float32], uint16, Tensor[(756), uint16], Tensor[(420), float64]) {
    %445 = cast(%var_3857, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
    %446 = cast(meta[relay.Constant][30] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %447 = reshape(%445, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %448 = reshape(%446, newshape=[10, 42]) /* ty=Tensor[(10, 42), float32] */;
    %449 = @func_629(%447, %448) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(2, 13, 2), bool], Tensor[(15, ?, 8), bool], Tensor[(120), int8], Tensor[(7, 4, 15), int32], Tensor[(10, 42), float32]) */;
    %450 = %449.0;
    %451 = cast(%var_3857, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
    %452 = log10(%451) /* ty=Tensor[(5, 16, 3), float32] */;
    %453 = cast(%452, dtype="bool") /* ty=Tensor[(5, 16, 3), bool] */;
    %454 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
    %455 = cast(%450, dtype="bool") /* ty=Tensor[(2, 10, 12), bool] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %457 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %458 = cast(%var_3881, dtype="uint16") /* ty=uint16 */;
    %459 = cast(%var_3882, dtype="uint16") /* ty=Tensor[(756), uint16] */;
    %460 = reshape(%458, newshape=[]) /* ty=uint16 */;
    %461 = reshape(%459, newshape=[6, 9, 14]) /* ty=Tensor[(6, 9, 14), uint16] */;
    %462 = @func_3182(%460, %461) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
    %463 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %464 = %463.0;
    %465 = cast(%464, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    %466 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(420), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %467 = cast(meta[relay.Constant][30] /* ty=Tensor[(420), float32] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?), float64] */;
    %469 = greater(%455, %456) /* ty=Tensor[(2, 10, 12), bool] */;
    %470 = %457.0;
    %471 = %462.1;
    %472 = subtract(%467, %468) /* ty=Tensor[(420), float64] */;
    (%469, %470, %471, %var_3881, %var_3882, %472)
  };
  %473(%var_3903, %var_3904, %var_3905) /* ty=(Tensor[(2, 10, 12), bool], Tensor[(7, 4, 15), float32], Tensor[(6, 9, 14), float32], uint16, Tensor[(756), uint16], Tensor[(420), float64]) */
}

def @func_3231() -> (Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) {
  %482 = fn () -> (Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) {
    %474 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %475 = cast(meta[relay.Constant][31] /* ty=Tensor[(3375), int16] */, dtype="int16") /* ty=Tensor[(3375), int16] */;
    %476 = cast(meta[relay.Constant][31] /* ty=Tensor[(3375), int16] */, dtype="int16") /* ty=Tensor[(3375), int16] */;
    %477 = reshape(%475, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), int16] */;
    %478 = reshape(%476, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), int16] */;
    %479 = @func_2626(%477, %478) /* ty=(Tensor[(15, 15, 15), int16], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32]) */;
    %480 = %474.0;
    %481 = %479.0;
    (%480, %481, meta[relay.Constant][31] /* ty=Tensor[(3375), int16] */)
  };
  %482() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */
}

def @func_4677(%var_4675: Tensor[(675), float64], %var_4676: Tensor[(30), uint8]) -> (Tensor[(546), uint32], Tensor[(15, 5, 9), float64], Tensor[(112), float64], Tensor[(210), int64], Tensor[(675), uint16], Tensor[(480), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(675), bool]) {
  %515 = fn (%var_4630: Tensor[(675), float64], %var_4652: Tensor[(30), uint8]) -> (Tensor[(546), uint32], Tensor[(15, 5, 9), float64], Tensor[(112), float64], Tensor[(210), int64], Tensor[(675), uint16], Tensor[(480), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(675), bool]) {
    %483 = cast(%var_4630, dtype="float64") /* ty=Tensor[(675), float64] */;
    %484 = reshape(%483, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
    %485 = @func_378(%484) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) */;
    %486 = cast(meta[relay.Constant][32] /* ty=Tensor[(210), int64] */, dtype="int64") /* ty=Tensor[(210), int64] */;
    %487 = reshape(%486, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), int64] */;
    %488 = @func_2561(%487) /* ty=(Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */;
    %489 = cast(%var_4630, dtype="float64") /* ty=Tensor[(675), float64] */;
    %490 = log10(%489) /* ty=Tensor[(675), float64] */;
    %491 = cast(%490, dtype="float64") /* ty=Tensor[(675), float64] */;
    %492 = acos(%491) /* ty=Tensor[(675), float64] */;
    %493 = cast(%492, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %494 = shape_of(%490, dtype="int32") /* ty=Tensor[(1), int32] */;
    %495 = cast(%490, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %497 = cast(%var_4652, dtype="uint8") /* ty=Tensor[(30), uint8] */;
    %498 = reshape(%497, newshape=[30]) /* ty=Tensor[(30), uint8] */;
    %499 = @func_1254(%498) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) */;
    %500 = @func_2962() /* ty=(Tensor[(7, 4, 15), uint64],) */;
    %501 = cast(%492, dtype="float64") /* ty=Tensor[(675), float64] */;
    %502 = rsqrt(%501) /* ty=Tensor[(675), float64] */;
    %503 = cast(%490, dtype="bool") /* ty=Tensor[(675), bool] */;
    %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(1), int32] */;
    %505 = cast(%502, dtype="bool") /* ty=Tensor[(675), bool] */;
    %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?), bool] */;
    %507 = @func_3991() /* ty=Tensor[(546), uint32] */;
    %508 = %485.5;
    %509 = %488.2;
    %510 = left_shift(%495, %496) /* ty=Tensor[(675), uint16] */;
    %511 = %499.3;
    %512 = %500.0;
    %513 = @func_4153() /* ty=Tensor[(7, 4, 15), float64] */;
    %514 = less_equal(%505, %506) /* ty=Tensor[(675), bool] */;
    (%507, %508, %509, meta[relay.Constant][32] /* ty=Tensor[(210), int64] */, %510, %511, %var_4652, %512, %513, %514)
  };
  %515(%var_4675, %var_4676) /* ty=(Tensor[(546), uint32], Tensor[(15, 5, 9), float64], Tensor[(112), float64], Tensor[(210), int64], Tensor[(675), uint16], Tensor[(480), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64], Tensor[(675), bool]) */
}

def @func_6081(%var_6064: Tensor[(384), float32]) -> (Tensor[(7, 4, 15), uint64], Tensor[(8, 7, 10), bool], Tensor[(4, 140), uint64], Tensor[(4, 12, 8), uint64], Tensor[(384), float32], Tensor[(7, 4, 15), float32]) {
  %516 = @func_2841() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %517 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 140), uint64] */, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
  %518 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 140), uint64] */, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
  %519 = reshape(%517, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), uint64] */;
  %520 = reshape(%518, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), uint64] */;
  %521 = @func_5124(%519, %520) /* ty=(Tensor[(8, 7, 10), bool], Tensor[(7, 4, 15), float32]) */;
  %522 = cast(%var_6064, dtype="float32") /* ty=Tensor[(384), float32] */;
  %523 = reshape(%522, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float32] */;
  %524 = @func_1686(%523) /* ty=(Tensor[(4, 12, 8), uint64],) */;
  %525 = @func_4001() /* ty=Tensor[(7, 4, 15), float64] */;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %527 = %516.0;
  %528 = %521.0;
  %529 = %524.0;
  %530 = tan(%526) /* ty=Tensor[(7, 4, 15), float32] */;
  (%527, %528, meta[relay.Constant][33] /* ty=Tensor[(4, 140), uint64] */, %529, %var_6064, %530)
}

def @func_2297() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  @func_2295() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */
}

def @func_259(%var_255: Tensor[(15, 1, 8), int8]) -> (Tensor[(15, ?, 8), bool],) {
  %531 = cast(%var_255, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
  %532 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(15, 1, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 1, 8), int8] */, dtype="bool") /* ty=Tensor[(15, 1, 8), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %535 = greater_equal(%533, %534) /* ty=Tensor[(15, ?, 8), bool] */;
  (%535,)
}

def @func_5330(%var_5328: Tensor[(8, 13, 8), float64], %var_5329: Tensor[(8, 13, 8), float64]) -> (Tensor[(8, 13, 8), float64],) {
  %541 = fn (%var_5321: Tensor[(8, 13, 8), float64], %var_5322: Tensor[(8, 13, 8), float64]) -> (Tensor[(8, 13, 8), float64],) {
    %536 = cast(%var_5322, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
    %537 = shape_of(%var_5321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %538 = cast(%var_5321, dtype="float64") /* ty=Tensor[(8, 13, 8), float64] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %540 = minimum(%538, %539) /* ty=Tensor[(8, 13, 8), float64] */;
    (%540,)
  };
  %541(%var_5328, %var_5329) /* ty=(Tensor[(8, 13, 8), float64],) */
}

def @func_2086() -> Tensor[(7, 4, 15), uint64] {
  @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */
}

def @func_4462(%var_4460: Tensor[(10, 13, 8), float64], %var_4461: Tensor[(10, 13, 8), float64]) -> (Tensor[(7, 4, 15), int16], Tensor[(10, 13, 8), bool]) {
  %556 = fn (%var_4424: Tensor[(10, 13, 8), float64], %var_4430: Tensor[(10, 13, 8), float64]) -> (Tensor[(7, 4, 15), int16], Tensor[(10, 13, 8), bool]) {
    %542 = @func_3683() /* ty=(Tensor[(7, 4, 15), int16], Tensor[(7, 4, 15), float64]) */;
    %543 = cast(%var_4424, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
    %544 = sigmoid(%543) /* ty=Tensor[(10, 13, 8), float64] */;
    %545 = cast(%var_4430, dtype="int64") /* ty=Tensor[(10, 13, 8), int64] */;
    %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%544, dtype="int64") /* ty=Tensor[(10, 13, 8), int64] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %549 = add(%547, %548) /* ty=Tensor[(10, 13, 8), int64] */;
    %550 = cast(%var_4430, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
    %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%549, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %554 = %542.0;
    %555 = logical_or(%552, %553) /* ty=Tensor[(10, 13, 8), bool] */;
    (%554, %555)
  };
  %556(%var_4460, %var_4461) /* ty=(Tensor[(7, 4, 15), int16], Tensor[(10, 13, 8), bool]) */
}

def @func_5050(%var_5048: Tensor[(16, 9, 4), uint16], %var_5049: Tensor[(16, 9, 4), uint16]) -> (Tensor[(16, 9, 4), uint16], Tensor[(16, 9, 4), float64], Tensor[(240), float64], uint16, Tensor[(756), uint16]) {
  @func_5046(%var_5048, %var_5049) /* ty=(Tensor[(16, 9, 4), uint16], Tensor[(16, 9, 4), float64], Tensor[(240), float64], uint16, Tensor[(756), uint16]) */
}

def @func_328(%var_326: Tensor[(7, 4, 15), float32]) -> Tensor[(7, 4, 15), int32] {
  @func_325(%var_326) /* ty=Tensor[(7, 4, 15), int32] */
}

def @func_325(%var_308: Tensor[(7, 4, 15), float32]) -> Tensor[(7, 4, 15), int32] {
  %557 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %558 = %557.0;
  %559 = cast(%var_308, dtype="int32") /* ty=Tensor[(7, 4, 15), int32] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="int32") /* ty=Tensor[(7, 4, 15), int32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%561, %562) /* ty=Tensor[(7, 4, 15), int32] */
}

def @func_5370() -> (Tensor[(2, 10, 12), int32],) {
  @func_5368() /* ty=(Tensor[(2, 10, 12), int32],) */
}

def @func_1626(%var_1612: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), bool], Tensor[(112), float64]) {
  %563 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %564 = %563.0;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %566 = log10(%565) /* ty=Tensor[(7, 4, 15), float32] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %568 = cast(%var_1612, dtype="float64") /* ty=Tensor[(112), float64] */;
  %569 = reshape(%567, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
  %570 = reshape(%568, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %571 = @func_717(%569, %570) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) */;
  %572 = %571.4;
  (%566, %572, %var_1612)
}

def @func_3445(%var_3444: Tensor[(15, 15, 15), int16]) -> (Tensor[(112), float64], Tensor[(112), float64], Tensor[(15, 15, 15), uint32]) {
  %584 = fn (%var_3434: Tensor[(15, 15, 15), int16]) -> (Tensor[(112), float64], Tensor[(112), float64], Tensor[(15, 15, 15), uint32]) {
    %573 = cast(meta[relay.Constant][35] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
    %574 = reshape(%573, newshape=[112]) /* ty=Tensor[(112), float64] */;
    %575 = @func_2036(%574) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) */;
    %576 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
    %577 = %576.1;
    %578 = cast(%var_3434, dtype="uint32") /* ty=Tensor[(15, 15, 15), uint32] */;
    %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%577, dtype="uint32") /* ty=Tensor[(15, 15, 15), uint32] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %582 = %575.1;
    %583 = bitwise_or(%580, %581) /* ty=Tensor[(15, 15, 15), uint32] */;
    (%582, meta[relay.Constant][35] /* ty=Tensor[(112), float64] */, %583)
  };
  %584(%var_3444) /* ty=(Tensor[(112), float64], Tensor[(112), float64], Tensor[(15, 15, 15), uint32]) */
}

def @func_2039(%var_2037: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) {
  @func_2036(%var_2037) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) */
}

def @func_5685() -> (Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), int32]) {
  %589 = fn () -> (Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), int32]) {
    %585 = @func_4218() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) */;
    %586 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %587 = %585.1;
    %588 = %586.1;
    (%587, %588)
  };
  %589() /* ty=(Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), int32]) */
}

def @func_6153(%var_6151: Tensor[(12, 10, 2), uint64], %var_6152: Tensor[(12, 10, 2), uint64]) -> (Tensor[(12, 10, 2), uint64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  @func_6149(%var_6151, %var_6152) /* ty=(Tensor[(12, 10, 2), uint64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */
}

def @func_4553(%var_4527: Tensor[(135), uint32]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) {
  %590 = @func_3560() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) */;
  %591 = cast(%var_4527, dtype="uint32") /* ty=Tensor[(135), uint32] */;
  %592 = reshape(%591, newshape=[3, 3, 15]) /* ty=Tensor[(3, 3, 15), uint32] */;
  %593 = @func_3627(%592) /* ty=(Tensor[(3, 3, 15), uint32], Tensor[(112), float64], Tensor[(105, 2), int64]) */;
  %594 = cast(meta[relay.Constant][36] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %595 = cast(meta[relay.Constant][36] /* ty=Tensor[(1040), float64] */, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %596 = reshape(%594, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), float64] */;
  %597 = reshape(%595, newshape=[10, 13, 8]) /* ty=Tensor[(10, 13, 8), float64] */;
  %598 = @func_4459(%596, %597) /* ty=(Tensor[(7, 4, 15), int16], Tensor[(10, 13, 8), bool]) */;
  %599 = %590.0;
  %600 = @func_4153() /* ty=Tensor[(7, 4, 15), float64] */;
  %601 = %593.1;
  %602 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  %603 = %598.0;
  (%599, %600, %601, %var_4527, %602, %603, meta[relay.Constant][36] /* ty=Tensor[(1040), float64] */)
}

def @func_3056(%var_3055: Tensor[(75, 9), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(75, 9), float64]) {
  %609 = fn (%var_3037: Tensor[(75, 9), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(75, 9), float64]) {
    %604 = cast(%var_3037, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
    %605 = reshape(%604, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
    %606 = @func_378(%605) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) */;
    %607 = @func_1998() /* ty=Tensor[(7, 4, 15), float32] */;
    %608 = %606.4;
    (%607, %608, %var_3037)
  };
  %609(%var_3055) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(75, 9), float64]) */
}

def @func_4065() -> (Tensor[(7, 4, 15), float64],) {
  %610 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %611 = %610.0;
  (%611,)
}

def @func_1646() -> (Tensor[(7, 4, 15), float64],) {
  %612 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
  (%612,)
}

def @func_1386() -> (Tensor[(7, 4, 15), float32],) {
  @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_5423(%var_5422: Tensor[(3, 10, 11), float32]) -> (Tensor[(3, 10, 11), float32], Tensor[(7, 4, 15), uint64]) {
  %616 = fn (%var_5400: Tensor[(3, 10, 11), float32]) -> (Tensor[(3, 10, 11), float32], Tensor[(7, 4, 15), uint64]) {
    %613 = cast(%var_5400, dtype="float32") /* ty=Tensor[(3, 10, 11), float32] */;
    %614 = sqrt(%613) /* ty=Tensor[(3, 10, 11), float32] */;
    %615 = @func_2084() /* ty=Tensor[(7, 4, 15), uint64] */;
    (%614, %615)
  };
  %616(%var_5422) /* ty=(Tensor[(3, 10, 11), float32], Tensor[(7, 4, 15), uint64]) */
}

def @func_5967() -> (Tensor[(7, 4, 15), float32],) {
  @func_5965() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_5708() -> (Tensor[(7, 4, 15), float32],) {
  @func_5706() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_2084() -> Tensor[(7, 4, 15), uint64] {
  %617 = @func_1924() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %617.0
}

def @func_812(%var_811: Tensor[(7, 15, 15), uint32]) -> Tensor[(7, 15, 15), uint32] {
  %622 = fn (%var_789: Tensor[(7, 15, 15), uint32]) -> Tensor[(7, 15, 15), uint32] {
    %618 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 15, 15), uint32] */, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
    %619 = shape_of(%var_789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%var_789, dtype="uint32") /* ty=Tensor[(7, 15, 15), uint32] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    logical_xor(%620, %621) /* ty=Tensor[(7, 15, 15), uint32] */
  };
  %622(%var_811) /* ty=Tensor[(7, 15, 15), uint32] */
}

def @func_4155() -> Tensor[(7, 4, 15), float64] {
  @func_4153() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_4067() -> (Tensor[(7, 4, 15), float64],) {
  @func_4065() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_4512() -> Tensor[(7, 4, 15), float32] {
  @func_4510() /* ty=Tensor[(7, 4, 15), float32] */
}

def @func_3182(%var_3119: uint16, %var_3120: Tensor[(6, 9, 14), uint16]) -> (Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
  %623 = cast(%var_3119, dtype="uint16") /* ty=uint16 */;
  %624 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %625 = right_shift(%623, %624) /* ty=Tensor[(6, 9, 14), uint16] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(6, 9, 14), float64] */;
  %627 = sqrt(%626) /* ty=Tensor[(6, 9, 14), float64] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(6, 9, 14), float64] */;
  %629 = cosh(%628) /* ty=Tensor[(6, 9, 14), float64] */;
  %630 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%629, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %634 = cast(%627, dtype="float32") /* ty=Tensor[(6, 9, 14), float32] */;
  %635 = cast(meta[relay.Constant][38] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %636 = reshape(%635, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %637 = @func_1030(%636) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %638 = bitwise_or(%632, %633) /* ty=Tensor[(6, 9, 14), uint16] */;
  %639 = atan(%634) /* ty=Tensor[(6, 9, 14), float32] */;
  %640 = %637.1;
  (%638, %639, %640, meta[relay.Constant][38] /* ty=Tensor[(240), float64] */)
}

def @func_3817() -> (Tensor[(546), uint32],) {
  @func_3815() /* ty=(Tensor[(546), uint32],) */
}

def @func_5491() -> Tensor[(3375), int16] {
  %641 = @func_3230() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(15, 15, 15), int16], Tensor[(3375), int16]) */;
  %641.2
}

def @func_1065() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */
}

def @func_5287(%var_5285: Tensor[(15, 9), uint32], %var_5286: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), int32], Tensor[(1040), float64], Tensor[(15, 9), uint32], Tensor[(112), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  %661 = fn (%var_5212: Tensor[(15, 9), uint32], %var_5228: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), int32], Tensor[(1040), float64], Tensor[(15, 9), uint32], Tensor[(112), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
    %642 = @func_3529() /* ty=(Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) */;
    %643 = cast(%var_5212, dtype="uint32") /* ty=Tensor[(15, 9), uint32] */;
    %644 = reshape(%643, newshape=[135]) /* ty=Tensor[(135), uint32] */;
    %645 = @func_4553(%644) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) */;
    %646 = @func_3098() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(546), float32]) */;
    %647 = %646.1;
    %648 = cast(%var_5228, dtype="int32") /* ty=Tensor[(112), int32] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(1), int32] */;
    %650 = cast(%647, dtype="int32") /* ty=Tensor[(112), int32] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?), int32] */;
    %652 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %653 = cast(%var_5212, dtype="uint32") /* ty=Tensor[(15, 9), uint32] */;
    %654 = reshape(%653, newshape=[135]) /* ty=Tensor[(135), uint32] */;
    %655 = @func_4553(%654) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) */;
    %656 = %642.2;
    %657 = %645.6;
    %658 = left_shift(%650, %651) /* ty=Tensor[(112), int32] */;
    %659 = %652.3;
    %660 = %655.4;
    (%656, %657, %var_5212, %658, %659, %660)
  };
  %661(%var_5285, %var_5286) /* ty=(Tensor[(7, 4, 15), int32], Tensor[(1040), float64], Tensor[(15, 9), uint32], Tensor[(112), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */
}

def @func_2295() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %662 = @func_525() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %663 = @func_1384() /* ty=(Tensor[(7, 4, 15), float32],) */;
  %664 = %662.1;
  %665 = %663.0;
  (%664, %665)
}

def @func_262(%var_260: Tensor[(15, 1, 8), int8]) -> (Tensor[(15, ?, 8), bool],) {
  @func_259(%var_260) /* ty=(Tensor[(15, ?, 8), bool],) */
}

def @func_2363() -> (Tensor[(7, 4, 15), uint64],) {
  @func_2361() /* ty=(Tensor[(7, 4, 15), uint64],) */
}

def @func_2561(%var_2515: Tensor[(1, 14, 15), int64]) -> (Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  %666 = cast(%var_2515, dtype="bool") /* ty=Tensor[(1, 14, 15), bool] */;
  %667 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 14, 15), int64] */, dtype="bool") /* ty=Tensor[(11, 14, 15), bool] */;
  %668 = cast(meta[relay.Constant][40] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %669 = reshape(%668, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %670 = @func_2036(%669) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(112), float64], Tensor[(7, 4, 15), float32]) */;
  %671 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %672 = not_equal(%666, %667) /* ty=Tensor[(11, 14, 15), bool] */;
  %673 = %670.0;
  %674 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  %675 = %671.0;
  (%672, %673, meta[relay.Constant][40] /* ty=Tensor[(112), float64] */, %674, %675)
}

def @func_1903(%var_1901: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float64], Tensor[(2, 56), float64], Tensor[(112), float64], Tensor[(768, 1), float64], Tensor[(7, 4, 15), float64]) {
  @func_1900(%var_1901) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 56), float64], Tensor[(112), float64], Tensor[(768, 1), float64], Tensor[(7, 4, 15), float64]) */
}

def @func_1900(%var_1879: Tensor[(112), float64]) -> (Tensor[(7, 4, 15), float64], Tensor[(2, 56), float64], Tensor[(112), float64], Tensor[(768, 1), float64], Tensor[(7, 4, 15), float64]) {
  %676 = cast(meta[relay.Constant][41] /* ty=Tensor[(768, 1), float64] */, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %677 = cast(%var_1879, dtype="float64") /* ty=Tensor[(112), float64] */;
  %678 = reshape(%676, newshape=[16, 3, 16]) /* ty=Tensor[(16, 3, 16), float64] */;
  %679 = reshape(%677, newshape=[2, 56]) /* ty=Tensor[(2, 56), float64] */;
  %680 = @func_1529(%678, %679) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(2, 56), float64]) */;
  %681 = cast(meta[relay.Constant][41] /* ty=Tensor[(768, 1), float64] */, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %682 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %683 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
  %684 = %680.3;
  %685 = acos(%681) /* ty=Tensor[(768, 1), float64] */;
  %686 = %682.1;
  (%683, %684, %var_1879, %685, %686)
}

def @func_720(%var_718: Tensor[(7, 4, 15), float32], %var_719: Tensor[(112), float64]) -> (Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) {
  %708 = fn (%var_694: Tensor[(7, 4, 15), float32], %var_708: Tensor[(112), float64]) -> (Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) {
    %687 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
    %688 = reshape(%687, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
    %689 = @func_657(%688) /* ty=(Tensor[(12, 8, 3), float32],) */;
    %690 = cast(%var_708, dtype="float64") /* ty=Tensor[(112), float64] */;
    %691 = reshape(%690, newshape=[14, 4, 2]) /* ty=Tensor[(14, 4, 2), float64] */;
    %692 = @func_192(%691) /* ty=(Tensor[(14, 4, 2), float64],) */;
    %693 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %694 = %693.0;
    %695 = cast(%var_694, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%694, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %699 = less_equal(%697, %698) /* ty=Tensor[(7, 4, 15), bool] */;
    %700 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
    %701 = cast(%700, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %702 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(%699, dtype="bool") /* ty=Tensor[(7, 4, 15), bool] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %705 = %689.0;
    %706 = %692.0;
    %707 = greater_equal(%703, %704) /* ty=Tensor[(7, 4, 15), bool] */;
    (%705, meta[relay.Constant][42] /* ty=Tensor[(1, 288), float32] */, %706, %var_708, %707)
  };
  %708(%var_718, %var_719) /* ty=(Tensor[(12, 8, 3), float32], Tensor[(1, 288), float32], Tensor[(14, 4, 2), float64], Tensor[(112), float64], Tensor[(7, 4, 15), bool]) */
}

def @func_4797() -> (Tensor[(7, 4, 15), int32],) {
  %711 = fn () -> (Tensor[(7, 4, 15), int32],) {
    %709 = @func_3529() /* ty=(Tensor[(120), int8], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), int32]) */;
    %710 = %709.2;
    (%710,)
  };
  %711() /* ty=(Tensor[(7, 4, 15), int32],) */
}

def @func_1958() -> (Tensor[(7, 4, 15), float64],) {
  @func_1956() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_4320(%var_4319: Tensor[(7, 4, 15), float32]) -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64]) {
  %722 = fn (%var_4301: Tensor[(7, 4, 15), float32]) -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64]) {
    %712 = @func_2295() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %713 = %712.0;
    %714 = cast(%var_4301, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
    %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%713, dtype="uint64") /* ty=Tensor[(7, 4, 15), uint64] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %718 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %719 = @func_2813() /* ty=Tensor[(7, 4, 15), float64] */;
    %720 = right_shift(%716, %717) /* ty=Tensor[(7, 4, 15), uint64] */;
    %721 = %718.0;
    (%719, %720, %721)
  };
  %722(%var_4319) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64]) */
}

def @func_6368() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(15, 15, 15), int16], Tensor[(12, 8, 3), float32], Tensor[(288), float32], Tensor[(7, 4, 15), float64]) {
  %723 = @func_4218() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) */;
  %724 = @func_4932() /* ty=(Tensor[(15, 15, 15), int16],) */;
  %725 = cast(meta[relay.Constant][43] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %726 = reshape(%725, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), float32] */;
  %727 = @func_657(%726) /* ty=(Tensor[(12, 8, 3), float32],) */;
  %728 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %729 = %723.0;
  %730 = @func_5025() /* ty=Tensor[(7, 4, 15), int32] */;
  %731 = %724.0;
  %732 = %727.0;
  %733 = %728.0;
  (%729, %730, %731, %732, meta[relay.Constant][43] /* ty=Tensor[(288), float32] */, %733)
}

def @func_1406() -> Tensor[(7, 4, 15), float64] {
  @func_1404() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_3512() -> (Tensor[(7, 4, 15), float64],) {
  %738 = fn () -> (Tensor[(7, 4, 15), float64],) {
    %734 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %735 = %734.0;
    %736 = cast(%735, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    %737 = cos(%736) /* ty=Tensor[(7, 4, 15), float64] */;
    (%737,)
  };
  %738() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_459() -> Tensor[(7, 4, 15), float64] {
  @func_223() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_4220() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) {
  @func_4218() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) */
}

def @func_194(%var_193: Tensor[(14, 4, 2), float64]) -> (Tensor[(14, 4, 2), float64],) {
  %746 = fn (%var_183: Tensor[(14, 4, 2), float64]) -> (Tensor[(14, 4, 2), float64],) {
    %739 = cast(%var_183, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
    %740 = asinh(%739) /* ty=Tensor[(14, 4, 2), float64] */;
    %741 = cast(%var_183, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
    %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %743 = cast(%740, dtype="float64") /* ty=Tensor[(14, 4, 2), float64] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %745 = floor_divide(%743, %744) /* ty=Tensor[(14, 4, 2), float64] */;
    (%745,)
  };
  %746(%var_193) /* ty=(Tensor[(14, 4, 2), float64],) */
}

def @func_3627(%var_3601: Tensor[(3, 3, 15), uint32]) -> (Tensor[(3, 3, 15), uint32], Tensor[(112), float64], Tensor[(105, 2), int64]) {
  %747 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 3, 15), uint32] */, dtype="uint32") /* ty=Tensor[(3, 3, 15), uint32] */;
  %748 = shape_of(%var_3601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_3601, dtype="uint32") /* ty=Tensor[(3, 3, 15), uint32] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %751 = cast(meta[relay.Constant][45] /* ty=Tensor[(105, 2), int64] */, dtype="int64") /* ty=Tensor[(105, 2), int64] */;
  %752 = reshape(%751, newshape=[1, 14, 15]) /* ty=Tensor[(1, 14, 15), int64] */;
  %753 = @func_2561(%752) /* ty=(Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */;
  %754 = bitwise_or(%749, %750) /* ty=Tensor[(3, 3, 15), uint32] */;
  %755 = %753.2;
  (%754, %755, meta[relay.Constant][45] /* ty=Tensor[(105, 2), int64] */)
}

def @func_1256(%var_1255: Tensor[(30), uint8]) -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) {
  %764 = fn (%var_1251: Tensor[(30), uint8]) -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) {
    %756 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
    %757 = cast(%var_1251, dtype="uint8") /* ty=Tensor[(30), uint8] */;
    %758 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %759 = reshape(%757, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
    %760 = reshape(%758, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
    %761 = @func_755(%759, %760) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
    %762 = %756.1;
    %763 = %761.1;
    (%762, %763, %var_1251, meta[relay.Constant][46] /* ty=Tensor[(480), uint8] */)
  };
  %764(%var_1255) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8]) */
}

def @func_3815() -> (Tensor[(546), uint32],) {
  %765 = @func_3560() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(546), uint32]) */;
  %766 = %765.1;
  (%766,)
}

def @func_526() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %771 = fn () -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
    %767 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %768 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %769 = %767.0;
    %770 = %768.0;
    (%769, %770)
  };
  %771() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */
}

def @func_2814() -> Tensor[(7, 4, 15), float64] {
  %773 = fn () -> Tensor[(7, 4, 15), float64] {
    %772 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %772.0
  };
  %773() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_1739(%var_1737: Tensor[(480), uint8], %var_1738: Tensor[(675), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(2, 10, 12), int32], Tensor[(675), float64]) {
  %786 = fn (%var_1706: Tensor[(480), uint8], %var_1726: Tensor[(675), float64]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(2, 10, 12), int32], Tensor[(675), float64]) {
    %774 = @func_1172() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
    %775 = cast(meta[relay.Constant][47] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
    %776 = cast(%var_1706, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %777 = reshape(%775, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
    %778 = reshape(%776, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
    %779 = @func_755(%777, %778) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
    %780 = cast(%var_1726, dtype="float64") /* ty=Tensor[(675), float64] */;
    %781 = reshape(%780, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
    %782 = @func_378(%781) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(240), float64], Tensor[(15, 5, 9), bool], Tensor[(7, 4, 15), float32], Tensor[(2, 10, 12), int32], Tensor[(15, 5, 9), float64]) */;
    %783 = %774.2;
    %784 = %779.1;
    %785 = %782.0;
    (%783, %784, meta[relay.Constant][47] /* ty=Tensor[(30), uint8] */, %var_1706, %785, %var_1726)
  };
  %786(%var_1737, %var_1738) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(480), uint8], Tensor[(2, 10, 12), int32], Tensor[(675), float64]) */
}

def @func_4917() -> (Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(3, 16, 10), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], uint16, Tensor[(756, 1), uint16]) {
  @func_4915() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(3, 16, 10), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], uint16, Tensor[(756, 1), uint16]) */
}

def @func_5999() -> (Tensor[(7, 4, 15), float32],) {
  @func_5997() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_1648() -> (Tensor[(7, 4, 15), float64],) {
  @func_1646() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_4556(%var_4554: Tensor[(135), uint32]) -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) {
  @func_4553(%var_4554) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64], Tensor[(112), float64], Tensor[(135), uint32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int16], Tensor[(1040), float64]) */
}

def @func_410() -> (Tensor[(7, 4, 15), float32],) {
  @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_1404() -> Tensor[(7, 4, 15), float64] {
  %787 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %787.1
}

def @func_3787() -> (Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) {
  %788 = @func_3251() /* ty=(Tensor[(7, 4, 15), uint64],) */;
  %789 = @func_914() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */;
  %790 = @func_2889() /* ty=Tensor[(7, 4, 15), float32] */;
  %791 = %788.0;
  %792 = %789.0;
  %793 = @func_2813() /* ty=Tensor[(7, 4, 15), float64] */;
  (%790, %791, %792, %793)
}

def @func_3498() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
  %801 = fn () -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
    %794 = @func_1662() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %795 = cast(meta[relay.Constant][48] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %796 = reshape(%795, newshape=[240]) /* ty=Tensor[(240), float64] */;
    %797 = @func_1030(%796) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
    %798 = %794.0;
    %799 = @func_1404() /* ty=Tensor[(7, 4, 15), float64] */;
    %800 = %797.1;
    (%798, %799, %800, meta[relay.Constant][48] /* ty=Tensor[(240), float64] */)
  };
  %801() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */
}

def @func_2731() -> Tensor[(7, 4, 15), float64] {
  @func_2729() /* ty=Tensor[(7, 4, 15), float64] */
}

def @func_1032(%var_1031: Tensor[(240), float64]) -> (Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
  %807 = fn (%var_1028: Tensor[(240), float64]) -> (Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) {
    %802 = cast(%var_1028, dtype="float64") /* ty=Tensor[(240), float64] */;
    %803 = reshape(%802, newshape=[2, 10, 12]) /* ty=Tensor[(2, 10, 12), float64] */;
    %804 = @func_125(%803) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */;
    %805 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
    %806 = %804.0;
    (%805, %806, %var_1028)
  };
  %807(%var_1031) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */
}

def @func_4933() -> (Tensor[(15, 15, 15), int16],) {
  %809 = fn () -> (Tensor[(15, 15, 15), int16],) {
    %808 = @func_3941() /* ty=Tensor[(15, 15, 15), int16] */;
    (%808,)
  };
  %809() /* ty=(Tensor[(15, 15, 15), int16],) */
}

def @func_759(%var_757: Tensor[(3, 1, 10), uint8], %var_758: Tensor[(3, 16, 10), uint8]) -> (Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) {
  @func_755(%var_757, %var_758) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */
}

def @func_743() -> Tensor[(7, 4, 15), float32] {
  %811 = fn () -> Tensor[(7, 4, 15), float32] {
    %810 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %810.0
  };
  %811() /* ty=Tensor[(7, 4, 15), float32] */
}

def @func_5965() -> (Tensor[(7, 4, 15), float32],) {
  %812 = @func_2769() /* ty=Tensor[(7, 4, 15), float32] */;
  (%812,)
}

def @func_2564(%var_2562: Tensor[(1, 14, 15), int64]) -> (Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) {
  @func_2561(%var_2562) /* ty=(Tensor[(11, 14, 15), bool], Tensor[(7, 4, 15), float32], Tensor[(112), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float32]) */
}

def @func_2954() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 14, 14), float32], Tensor[(480), uint8], Tensor[(30, 1), uint8]) {
  %823 = fn () -> (Tensor[(7, 4, 15), float64], Tensor[(7, 14, 14), float32], Tensor[(480), uint8], Tensor[(30, 1), uint8]) {
    %813 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
    %814 = cast(meta[relay.Constant][49] /* ty=Tensor[(7, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
    %815 = log(%814) /* ty=Tensor[(7, 14, 14), float32] */;
    %816 = cast(%815, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
    %817 = cast(meta[relay.Constant][50] /* ty=Tensor[(30, 1), uint8] */, dtype="uint8") /* ty=Tensor[(30, 1), uint8] */;
    %818 = reshape(%817, newshape=[30]) /* ty=Tensor[(30), uint8] */;
    %819 = @func_1859(%818) /* ty=(Tensor[(7, 4, 15), float32], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(7, 4, 15), float32], Tensor[(675, 120), bool], Tensor[(30), uint8], Tensor[(30), uint8], Tensor[(7, 4, 15), float32], Tensor[(15, ?, 8), float64]) */;
    %820 = %813.1;
    %821 = sigmoid(%816) /* ty=Tensor[(7, 14, 14), float32] */;
    %822 = %819.2;
    (%820, %821, %822, meta[relay.Constant][50] /* ty=Tensor[(30, 1), uint8] */)
  };
  %823() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 14, 14), float32], Tensor[(480), uint8], Tensor[(30, 1), uint8]) */
}

def @func_1173() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
  %831 = fn () -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) {
    %824 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
    %825 = %824.1;
    %826 = cast(%825, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
    %827 = reshape(%826, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
    %828 = @func_325(%827) /* ty=Tensor[(7, 4, 15), int32] */;
    %829 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
    %830 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
    (%825, %828, %829, %830)
  };
  %831() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float32]) */
}

def @func_4414() -> (Tensor[(7, 4, 15), float32],) {
  %834 = fn () -> (Tensor[(7, 4, 15), float32],) {
    %832 = @func_1063() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
    %833 = %832.0;
    (%833,)
  };
  %834() /* ty=(Tensor[(7, 4, 15), float32],) */
}

def @func_659(%var_658: Tensor[(12, 8, 3), float32]) -> (Tensor[(12, 8, 3), float32],) {
  %837 = fn (%var_648: Tensor[(12, 8, 3), float32]) -> (Tensor[(12, 8, 3), float32],) {
    %835 = cast(%var_648, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
    %836 = exp(%835) /* ty=Tensor[(12, 8, 3), float32] */;
    (%836,)
  };
  %837(%var_658) /* ty=(Tensor[(12, 8, 3), float32],) */
}

def @func_2209() -> (Tensor[(7, 4, 15), float32],) {
  %838 = @func_742() /* ty=Tensor[(7, 4, 15), float32] */;
  (%838,)
}

def @func_4153() -> Tensor[(7, 4, 15), float64] {
  %839 = @func_4065() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %839.0
}

def @func_1688(%var_1687: Tensor[(4, 12, 8), float32]) -> (Tensor[(4, 12, 8), uint64],) {
  %847 = fn (%var_1672: Tensor[(4, 12, 8), float32]) -> (Tensor[(4, 12, 8), uint64],) {
    %840 = cast(%var_1672, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
    %841 = cos(%840) /* ty=Tensor[(4, 12, 8), float32] */;
    %842 = cast(%var_1672, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
    %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(3), int32] */;
    %844 = cast(%841, dtype="uint64") /* ty=Tensor[(4, 12, 8), uint64] */;
    %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %846 = multiply(%844, %845) /* ty=Tensor[(4, 12, 8), uint64] */;
    (%846,)
  };
  %847(%var_1687) /* ty=(Tensor[(4, 12, 8), uint64],) */
}

def @func_4218() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64]) {
  %848 = @func_2769() /* ty=Tensor[(7, 4, 15), float32] */;
  %849 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 4, 15), float32] */, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %853 = @func_3787() /* ty=(Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float32], Tensor[(7, 4, 15), float64]) */;
  %854 = power(%851, %852) /* ty=Tensor[(7, 4, 15), float64] */;
  %855 = %853.1;
  (%854, %855)
}

def @func_4915() -> (Tensor[(7, 4, 15), float64], Tensor[(30), uint8], Tensor[(3, 16, 10), float32], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(2, 10, 12), int32], uint16, Tensor[(756, 1), uint16]) {
  %856 = cast(meta[relay.Constant][52] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %857 = cast(meta[relay.Constant][53] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %858 = reshape(%856, newshape=[3, 1, 10]) /* ty=Tensor[(3, 1, 10), uint8] */;
  %859 = reshape(%857, newshape=[3, 16, 10]) /* ty=Tensor[(3, 16, 10), uint8] */;
  %860 = @func_755(%858, %859) /* ty=(Tensor[(3, 16, 10), bool], Tensor[(7, 4, 15), float64]) */;
  %861 = %860.0;
  %862 = cast(meta[relay.Constant][53] /* ty=Tensor[(480), uint8] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%861, dtype="float32") /* ty=Tensor[(3, 16, 10), float32] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %866 = @func_882() /* ty=(Tensor[(7, 4, 15), float64],) */;
  %867 = @func_4001() /* ty=Tensor[(7, 4, 15), float64] */;
  %868 = cast(%867, dtype="float32") /* ty=Tensor[(7, 4, 15), float32] */;
  %869 = reshape(%868, newshape=[7, 4, 15]) /* ty=Tensor[(7, 4, 15), float32] */;
  %870 = @func_4318(%869) /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), uint64], Tensor[(7, 4, 15), float64]) */;
  %871 = cast(meta[relay.Constant][54] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %872 = cast(meta[relay.Constant][55] /* ty=Tensor[(756, 1), uint16] */, dtype="uint16") /* ty=Tensor[(756, 1), uint16] */;
  %873 = reshape(%871, newshape=[]) /* ty=uint16 */;
  %874 = reshape(%872, newshape=[6, 9, 14]) /* ty=Tensor[(6, 9, 14), uint16] */;
  %875 = @func_3182(%873, %874) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), float32], Tensor[(2, 10, 12), int32], Tensor[(240), float64]) */;
  %876 = divide(%864, %865) /* ty=Tensor[(3, 16, 10), float32] */;
  %877 = %866.0;
  %878 = %870.0;
  %879 = %875.2;
  (%867, meta[relay.Constant][52] /* ty=Tensor[(30), uint8] */, %876, %877, %878, %879, meta[relay.Constant][54] /* ty=uint16 */, meta[relay.Constant][55] /* ty=Tensor[(756, 1), uint16] */)
}

def @func_4706() -> (Tensor[(7, 4, 15), float64],) {
  %882 = fn () -> (Tensor[(7, 4, 15), float64],) {
    %880 = @func_1956() /* ty=(Tensor[(7, 4, 15), float64],) */;
    %881 = %880.0;
    (%881,)
  };
  %882() /* ty=(Tensor[(7, 4, 15), float64],) */
}

def @func_5664() -> (Tensor[(15, ?, 8), bool], Tensor[(12, 8, 3), float32], Tensor[(72, 4), float32]) {
  @func_5662() /* ty=(Tensor[(15, ?, 8), bool], Tensor[(12, 8, 3), float32], Tensor[(72, 4), float32]) */
}

def @func_584() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64]) {
  %889 = fn () -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64]) {
    %883 = @func_408() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %884 = %883.0;
    %885 = cast(%884, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    %886 = @func_223() /* ty=Tensor[(7, 4, 15), float64] */;
    %887 = rsqrt(%885) /* ty=Tensor[(7, 4, 15), float64] */;
    %888 = @func_459() /* ty=Tensor[(7, 4, 15), float64] */;
    (%886, %887, %888)
  };
  %889() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), float64]) */
}

def @func_6084(%var_6082: Tensor[(384), float32]) -> (Tensor[(7, 4, 15), uint64], Tensor[(8, 7, 10), bool], Tensor[(4, 140), uint64], Tensor[(4, 12, 8), uint64], Tensor[(384), float32], Tensor[(7, 4, 15), float32]) {
  @func_6081(%var_6082) /* ty=(Tensor[(7, 4, 15), uint64], Tensor[(8, 7, 10), bool], Tensor[(4, 140), uint64], Tensor[(4, 12, 8), uint64], Tensor[(384), float32], Tensor[(7, 4, 15), float32]) */
}

def @func_224() -> Tensor[(7, 4, 15), float64] {
  %893 = fn () -> Tensor[(7, 4, 15), float64] {
    %890 = @func_158() /* ty=(Tensor[(7, 4, 15), float32],) */;
    %891 = %890.0;
    %892 = cast(%891, dtype="float64") /* ty=Tensor[(7, 4, 15), float64] */;
    sin(%892) /* ty=Tensor[(7, 4, 15), float64] */
  };
  %893() /* ty=Tensor[(7, 4, 15), float64] */
}

def @main(%var_6552: Tensor[(12, 1), int32]) -> (Tensor[(12, 1), bool],) {
  %894 = cast(-7 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %895 = cast(%var_6552, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %896 = equal(%894, %895) /* ty=Tensor[(12, 1), bool] */;
  (%896,)
}

def @func_6370() -> (Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(15, 15, 15), int16], Tensor[(12, 8, 3), float32], Tensor[(288), float32], Tensor[(7, 4, 15), float64]) {
  @func_6368() /* ty=(Tensor[(7, 4, 15), float64], Tensor[(7, 4, 15), int32], Tensor[(15, 15, 15), int16], Tensor[(12, 8, 3), float32], Tensor[(288), float32], Tensor[(7, 4, 15), float64]) */
}

def @func_127(%var_126: Tensor[(2, 10, 12), float64]) -> (Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) {
  %927 = fn (%var_83: Tensor[(2, 10, 12), float64]) -> (Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) {
    %897 = cast(%var_83, dtype="int32") /* ty=Tensor[(2, 10, 12), int32] */;
    %898 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(2, 10, 12), int32] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %901 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
    %902 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %903 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %905 = divide(%903, %904) /* ty=Tensor[(2, 10, 12), float64] */;
    %906 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
    %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(3), int32] */;
    %908 = cast(%905, dtype="float64") /* ty=Tensor[(2, 10, 12), float64] */;
    %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %910 = mod(%908, %909) /* ty=Tensor[(2, 10, 12), float64] */;
    %911 = cast(%905, dtype="uint64") /* ty=Tensor[(2, 10, 12), uint64] */;
    %912 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %913 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 10, 12), float64] */, dtype="uint64") /* ty=Tensor[(2, 10, 12), uint64] */;
    %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %915 = right_shift(%913, %914) /* ty=Tensor[(2, 10, 12), uint64] */;
    %916 = cast(%915, dtype="uint8") /* ty=Tensor[(2, 10, 12), uint8] */;
    %917 = shape_of(%910, dtype="int32") /* ty=Tensor[(3), int32] */;
    %918 = cast(%910, dtype="uint8") /* ty=Tensor[(2, 10, 12), uint8] */;
    %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %920 = maximum(%918, %919) /* ty=Tensor[(2, 10, 12), uint8] */;
    %921 = cast(%920, dtype="float32") /* ty=Tensor[(2, 10, 12), float32] */;
    %922 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(2, 10, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %923 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 10, 12), float64] */, dtype="float32") /* ty=Tensor[(2, 10, 12), float32] */;
    %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %925 = bitwise_and(%899, %900) /* ty=Tensor[(2, 10, 12), int32] */;
    %926 = minimum(%923, %924) /* ty=Tensor[(2, 10, 12), float32] */;
    (%925, %926)
  };
  %927(%var_126) /* ty=(Tensor[(2, 10, 12), int32], Tensor[(2, 10, 12), float32]) */
}

def @func_6032() -> (Tensor[(7, 4, 15), float32],) {
  %929 = fn () -> (Tensor[(7, 4, 15), float32],) {
    %928 = @func_2769() /* ty=Tensor[(7, 4, 15), float32] */;
    (%928,)
  };
  %929() /* ty=(Tensor[(7, 4, 15), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen166/build/output.py:2507: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen166/build/output.py", line 2512, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(12) tvmgen_default_fused_cast_equal_kernel0(signed char* __restrict__ T_equal, int* __restrict__ placeholder) {
  T_equal[(((int)threadIdx.x))] = ((signed char)((bool)1 == ((bool)placeholder[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

