==========mod==========
#[version = "0.0.5"]
def @func_6293(%var_6276: Tensor[(96), float64]) -> (Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) {
  %0 = @func_6266() /* ty=(Tensor[(126), int8], Tensor[(8, 12), float64]) */;
  %1 = cast(%var_6276, dtype="float64") /* ty=Tensor[(96), float64] */;
  %2 = reshape(%1, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %3 = @func_785(%2) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %4 = %0.0;
  %5 = %3.0;
  %6 = @func_5282() /* ty=Tensor[(8, 13, 3), float32] */;
  (%4, %5, %var_6276, %6)
}

def @func_13333() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %7 = @func_4102() /* ty=Tensor[(126), int8] */;
  %8 = @func_11976() /* ty=Tensor[(8, 13, 3), float32] */;
  (%7, %8)
}

def @func_13847() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %9 = @func_13333() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %10 = @func_10627() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %11 = %9.1;
  %12 = %10.0;
  (%11, %12)
}

def @func_10089() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %13 = @func_9255() /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
  %14 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %15 = %13.1;
  %16 = %14.0;
  (%15, %16)
}

def @func_4285() -> (Tensor[(8, 13, 3), float32],) {
  %17 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %18 = %17.0;
  (%18,)
}

def @func_12052() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %19 = @func_6434() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %20 = %19.1;
  %21 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  (%20, %21)
}

def @func_6945() -> (Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) {
  %22 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %23 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %24 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %25 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %26 = @func_5935() /* ty=(Tensor[(126), int8],) */;
  %27 = %22.0;
  %28 = %23.0;
  %29 = %24.0;
  %30 = %25.0;
  %31 = %26.0;
  %32 = @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%27, %28, %29, %30, %31, %32)
}

def @func_10698() -> (Tensor[(126), int8],) {
  %33 = @func_9375() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %34 = %33.0;
  (%34,)
}

def @func_4915() -> Tensor[(3, 14, 3), uint32] {
  @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_3042() -> (Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %35 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %36 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %37 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
  %38 = %35.0;
  %39 = %36.0;
  %40 = %37.7;
  (%38, %39, %40)
}

def @func_4389(%var_4368: float32) -> (Tensor[(11, 2, 1), float32], Tensor[(126), int8], Tensor[(126), int8]) {
  %41 = cast(%var_4368, dtype="float32") /* ty=float32 */;
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 1), float32] */;
  %43 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %44 = @func_2786() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %45 = power(%41, %42) /* ty=Tensor[(11, 2, 1), float32] */;
  %46 = %43.0;
  %47 = %44.0;
  (%45, %46, %47)
}

def @func_3607() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %48 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %49 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %50 = %48.2;
  %51 = %49.0;
  (%50, %51)
}

def @func_9717(%var_9679: Tensor[(104, 1), float32], %var_9703: Tensor[(640), int8]) -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), bool], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(104, 126), int64], Tensor[(8, 13, 3), bool]) {
  %52 = cast(%var_9679, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
  %53 = reshape(%52, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %54 = @func_2075(%53) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %55 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %56 = cast(%var_9703, dtype="int8") /* ty=Tensor[(640), int8] */;
  %57 = reshape(%56, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %58 = @func_465(%57) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %59 = cast(%var_9679, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
  %60 = log2(%59) /* ty=Tensor[(104, 1), float32] */;
  %61 = cast(%var_9679, dtype="bool") /* ty=Tensor[(104, 1), bool] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(2), int32] */;
  %63 = cast(%60, dtype="bool") /* ty=Tensor[(104, 1), bool] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %65 = greater_equal(%63, %64) /* ty=Tensor[(104, ?), bool] */;
  %66 = @func_7074() /* ty=(Tensor[(1, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(7, 11, 15), float32], Tensor[(1155), float32]) */;
  %67 = %66.2;
  %68 = cast(%65, dtype="int64") /* ty=Tensor[(104, ?), int64] */;
  %69 = cast(%67, dtype="int64") /* ty=Tensor[(126), int64] */;
  %70 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %71 = %54.0;
  %72 = %55.0;
  %73 = %58.0;
  %74 = left_shift(%68, %69) /* ty=Tensor[(104, 126), int64] */;
  %75 = %70.0;
  (%71, %72, %73, %var_9703, %74, %75)
}

def @func_13130() -> Tensor[(650), int64] {
  %76 = @func_7754() /* ty=(Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) */;
  %76.3
}

def @func_3577() -> Tensor[(8, 13, 3), float32] {
  %77 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %77.0
}

def @func_7074() -> (Tensor[(1, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(7, 11, 15), float32], Tensor[(1155), float32]) {
  %78 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 13, 3), float32] */;
  %79 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %80 = @func_6561() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
  %81 = cast(meta[relay.Constant][2] /* ty=Tensor[(1155), float32] */, dtype="float32") /* ty=Tensor[(1155), float32] */;
  %82 = reshape(%81, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float32] */;
  %83 = @func_5169(%82) /* ty=(Tensor[(7, 11, 15), float32],) */;
  %84 = atan(%78) /* ty=Tensor[(1, 13, 3), float32] */;
  %85 = %79.0;
  %86 = %80.1;
  %87 = %83.0;
  (%84, %85, %86, %87, meta[relay.Constant][2] /* ty=Tensor[(1155), float32] */)
}

def @func_6408() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %88 = @func_4669() /* ty=(Tensor[(126), int8],) */;
  %89 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
  %90 = %88.0;
  %91 = %89.5;
  (%90, %91)
}

def @func_11024() -> Tensor[(3, 14, 3), float32] {
  %92 = @func_6677() /* ty=(Tensor[(3, 14, 3), float32],) */;
  %92.0
}

def @func_2614() -> (Tensor[(126), int8],) {
  %93 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %94 = %93.0;
  (%94,)
}

def @func_6831(%var_6807: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8]) {
  %95 = cast(meta[relay.Constant][3] /* ty=Tensor[(130), int64] */, dtype="int64") /* ty=Tensor[(130), int64] */;
  %96 = cast(%var_6807, dtype="int64") /* ty=Tensor[(650), int64] */;
  %97 = reshape(%95, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %98 = reshape(%96, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %99 = @func_719(%97, %98) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %100 = @func_4317() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
  %101 = @func_2192() /* ty=Tensor[(126), int8] */;
  %102 = %99.2;
  %103 = %100.1;
  (%101, %102, meta[relay.Constant][3] /* ty=Tensor[(130), int64] */, %var_6807, %103)
}

def @func_5923(%var_5879: Tensor[(8, 13, 3), float32], %var_5895: Tensor[(8, 13, 3), float32]) -> (Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), int16]) {
  %104 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
  %105 = cast(%var_5895, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %106 = shape_of(%var_5879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_5879, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %109 = @func_3354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) */;
  %110 = %109.2;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %112 = rsqrt(%111) /* ty=Tensor[(8, 13, 3), float32] */;
  %113 = cast(%var_5879, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %114 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%110, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %117 = logical_or(%115, %116) /* ty=Tensor[(8, 13, 3), bool] */;
  %118 = cast(%117, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
  %119 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%112, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %122 = %104.0;
  %123 = greater(%107, %108) /* ty=Tensor[(8, 13, 3), bool] */;
  %124 = subtract(%120, %121) /* ty=Tensor[(8, 13, 3), int16] */;
  (%122, %123, %124)
}

def @func_9861() -> (Tensor[(4, 8, 14), float32],) {
  %125 = @func_7447() /* ty=(Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) */;
  %126 = %125.0;
  (%126,)
}

def @func_4669() -> (Tensor[(126), int8],) {
  %127 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %128 = %127.0;
  (%128,)
}

def @func_8120() -> (Tensor[(8, 13, 3), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) {
  %129 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
  %132 = cast(meta[relay.Constant][4] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %133 = reshape(%132, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %134 = @func_3712(%133) /* ty=(Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) */;
  %135 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %136 = @func_5684() /* ty=(Tensor[(126), int8],) */;
  %137 = cast(meta[relay.Constant][4] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %138 = reshape(%137, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %139 = @func_3712(%138) /* ty=(Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) */;
  %140 = exp(%131) /* ty=Tensor[(8, 13, 3), float64] */;
  %141 = %134.4;
  %142 = @func_4915() /* ty=Tensor[(3, 14, 3), uint32] */;
  %143 = @func_6148() /* ty=Tensor[(126), int8] */;
  %144 = %135.1;
  %145 = %136.0;
  %146 = %139.1;
  (%140, %141, meta[relay.Constant][4] /* ty=Tensor[(104), float32] */, %142, %143, %144, %145, %146)
}

def @func_9139(%var_9111: Tensor[(96), float64], %var_9114: float32) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(126), int8], float32, Tensor[(126), int8]) {
  %147 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %148 = cast(%var_9111, dtype="float64") /* ty=Tensor[(96), float64] */;
  %149 = reshape(%148, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %150 = @func_8714(%149) /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) */;
  %151 = cast(%var_9114, dtype="float32") /* ty=float32 */;
  %152 = reshape(%151, newshape=[]) /* ty=float32 */;
  %153 = @func_4389(%152) /* ty=(Tensor[(11, 2, 1), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %154 = @func_6434() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %155 = %147.0;
  %156 = %150.1;
  %157 = %153.1;
  %158 = %154.0;
  (%155, %156, %var_9111, %157, %var_9114, %158)
}

def @func_4744() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %159 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %160 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %161 = %159.0;
  %162 = %160.1;
  (%161, %162)
}

def @func_8692() -> (Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64]) {
  %163 = @func_5935() /* ty=(Tensor[(126), int8],) */;
  %164 = cast(meta[relay.Constant][5] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %165 = reshape(%164, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %166 = @func_785(%165) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %167 = %163.0;
  %168 = %166.0;
  (%167, %168, meta[relay.Constant][5] /* ty=Tensor[(96), float64] */)
}

def @func_5169(%var_5156: Tensor[(7, 11, 15), float32]) -> (Tensor[(7, 11, 15), float32],) {
  %169 = cast(%var_5156, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
  %170 = log2(%169) /* ty=Tensor[(7, 11, 15), float32] */;
  (%170,)
}

def @func_9193() -> (Tensor[(3, 14, 3), float64],) {
  %171 = @func_2443() /* ty=(Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %174 = atan(%173) /* ty=Tensor[(3, 14, 3), float64] */;
  (%174,)
}

def @func_10346(%var_10316: uint64, %var_10317: Tensor[(8, 11, 6), uint64], %var_10333: Tensor[(104), float32], %var_10334: Tensor[(640), int8], %var_10342: Tensor[(96), float64]) -> (Tensor[(8, 11, 6), uint64], Tensor[(640), int8], Tensor[(104), float32], Tensor[(640), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) {
  %175 = cast(%var_10316, dtype="uint64") /* ty=uint64 */;
  %176 = cast(%var_10317, dtype="uint64") /* ty=Tensor[(8, 11, 6), uint64] */;
  %177 = cast(%var_10333, dtype="float32") /* ty=Tensor[(104), float32] */;
  %178 = cast(%var_10334, dtype="int8") /* ty=Tensor[(640), int8] */;
  %179 = reshape(%177, newshape=[104, 1]) /* ty=Tensor[(104, 1), float32] */;
  %180 = reshape(%178, newshape=[640]) /* ty=Tensor[(640), int8] */;
  %181 = @func_9717(%179, %180) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), bool], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(104, 126), int64], Tensor[(8, 13, 3), bool]) */;
  %182 = cast(%var_10342, dtype="float64") /* ty=Tensor[(96), float64] */;
  %183 = reshape(%182, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %184 = @func_9097(%183) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) */;
  %185 = bitwise_xor(%175, %176) /* ty=Tensor[(8, 11, 6), uint64] */;
  %186 = %181.3;
  %187 = %184.0;
  (%185, %186, %var_10333, %var_10334, %187, %var_10342)
}

def @func_6327() -> (Tensor[(126), int8],) {
  %188 = @func_4317() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
  %189 = %188.1;
  (%189,)
}

def @func_12321() -> Tensor[(8, 13, 3), float32] {
  @func_5282() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_13885() -> (Tensor[(126), int8],) {
  %190 = @func_10465() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %191 = %190.0;
  (%191,)
}

def @func_4644(%var_4624: Tensor[(320, 2), int8]) -> (Tensor[(8, 13, 3), float32], Tensor[(320, 2), int8], Tensor[(8, 10, 8), float64]) {
  %192 = cast(%var_4624, dtype="int8") /* ty=Tensor[(320, 2), int8] */;
  %193 = reshape(%192, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %194 = @func_465(%193) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %195 = %194.0;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
  %197 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  %198 = tan(%196) /* ty=Tensor[(8, 10, 8), float64] */;
  (%197, %var_4624, %198)
}

def @func_4201() -> (Tensor[(126), int8],) {
  %199 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %200 = %199.7;
  (%200,)
}

def @func_2920() -> (Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) {
  %201 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %202 = %201.0;
  %203 = cast(%202, dtype="int8") /* ty=Tensor[(126), int8] */;
  %204 = reshape(%203, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %205 = @func_221(%204) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %206 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
  %207 = asin(%206) /* ty=Tensor[(1, 9, 9), float64] */;
  %208 = cast(%207, dtype="bool") /* ty=Tensor[(1, 9, 9), bool] */;
  %209 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1, 9, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 9, 9), float64] */, dtype="bool") /* ty=Tensor[(1, 9, 9), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = not_equal(%210, %211) /* ty=Tensor[(?, 9, 9), bool] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(?, 9, 9), float64] */;
  %214 = rsqrt(%213) /* ty=Tensor[(?, 9, 9), float64] */;
  %215 = cast(%212, dtype="float64") /* ty=Tensor[(?, 9, 9), float64] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="float64") /* ty=Tensor[(?, 9, 9), float64] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %219 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %220 = cast(meta[relay.Constant][7] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %221 = %205.1;
  %222 = cast(%221, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %223 = reshape(%220, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float32] */;
  %224 = reshape(%222, newshape=[126]) /* ty=Tensor[(126), int8] */;
  %225 = @func_1287(%223, %224) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
  %226 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %227 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %228 = mod(%217, %218) /* ty=Tensor[(?, 9, 9), float64] */;
  %229 = %219.0;
  %230 = %225.1;
  %231 = %226.0;
  %232 = %227.0;
  (%202, %221, %228, %229, %230, meta[relay.Constant][7] /* ty=Tensor[(352), float32] */, %231, %232)
}

def @func_221(%var_197: Tensor[(3, 14, 3), int8]) -> (Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) {
  %233 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 14, 3), int8] */, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %234 = shape_of(%var_197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_197, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 14, 3), int8] */, dtype="uint32") /* ty=Tensor[(3, 14, 3), uint32] */;
  %238 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3, 14, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 14, 3), int8] */, dtype="uint32") /* ty=Tensor[(3, 14, 3), uint32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %241 = less(%235, %236) /* ty=Tensor[(3, 14, 3), bool] */;
  %242 = minimum(%239, %240) /* ty=Tensor[(3, 14, 3), uint32] */;
  (%241, %242)
}

def @func_10175(%var_10155: Tensor[(8, 13, 3), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), int8]) {
  %243 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %244 = %243.0;
  %245 = cast(%var_10155, dtype="int8") /* ty=Tensor[(8, 13, 3), int8] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="int8") /* ty=Tensor[(8, 13, 3), int8] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %249 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  %250 = multiply(%247, %248) /* ty=Tensor[(8, 13, 3), int8] */;
  (%249, %250)
}

def @func_13897() -> Tensor[(8, 13, 3), float32] {
  @func_3886() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_13184(%var_13167: Tensor[(560), float64]) -> (Tensor[(126), int8], Tensor[(104), float32], Tensor[(560), float64], Tensor[(126), int8]) {
  %251 = @func_9375() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %252 = cast(%var_13167, dtype="float64") /* ty=Tensor[(560), float64] */;
  %253 = reshape(%252, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), float64] */;
  %254 = @func_9999(%253) /* ty=(Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 7, 10), float64]) */;
  %255 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
  %256 = %251.0;
  %257 = %254.1;
  %258 = %255.3;
  (%256, %257, %var_13167, %258)
}

def @func_6135() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %259 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %260 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %261 = %259.1;
  %262 = %260.0;
  %263 = @func_2192() /* ty=Tensor[(126), int8] */;
  (%261, %262, %263)
}

def @func_13579() -> (Tensor[(126), int8],) {
  %264 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %265 = %264.0;
  (%265,)
}

def @func_2802() -> (Tensor[(8, 13, 3), float32],) {
  %266 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %267 = %266.0;
  (%267,)
}

def @func_3886() -> Tensor[(8, 13, 3), float32] {
  %268 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %268.0
}

def @func_6148() -> Tensor[(126), int8] {
  %269 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %269.0
}

def @func_11370() -> (Tensor[(8, 13, 3), float32],) {
  %270 = @func_4906() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %271 = %270.1;
  (%271,)
}

def @func_13526() -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
  %272 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %273 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %274 = %272.0;
  %275 = %273.0;
  (%274, %275)
}

def @func_9654() -> Tensor[(3, 14, 3), uint32] {
  @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_13724() -> Tensor[(126), int8] {
  %276 = @func_3217() /* ty=(Tensor[(126), int8],) */;
  %276.0
}

def @func_5393() -> (Tensor[(3, 14, 3), float32], Tensor[(126), int8]) {
  %277 = @func_4915() /* ty=Tensor[(3, 14, 3), uint32] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(3, 14, 3), float32] */;
  %279 = tan(%278) /* ty=Tensor[(3, 14, 3), float32] */;
  %280 = @func_4584() /* ty=Tensor[(126), int8] */;
  (%279, %280)
}

def @func_14368() -> Tensor[(4, 13, 2), float32] {
  %281 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
  %281.8
}

def @func_14608() -> Tensor[(4, 8, 14), float32] {
  %282 = @func_9861() /* ty=(Tensor[(4, 8, 14), float32],) */;
  %282.0
}

def @func_3397(%var_3362: Tensor[(640), int8], %var_3390: Tensor[(650), int64]) -> (Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) {
  %283 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %284 = %283.2;
  %285 = cast(%var_3362, dtype="bool") /* ty=Tensor[(640), bool] */;
  %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(1), int32] */;
  %287 = cast(%284, dtype="bool") /* ty=Tensor[(640), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?), bool] */;
  %289 = cast(meta[relay.Constant][10] /* ty=Tensor[(130), int64] */, dtype="int64") /* ty=Tensor[(130), int64] */;
  %290 = cast(%var_3390, dtype="int64") /* ty=Tensor[(650), int64] */;
  %291 = reshape(%289, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %292 = reshape(%290, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %293 = @func_719(%291, %292) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %294 = cast(meta[relay.Constant][11] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %295 = reshape(%294, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %296 = @func_2075(%295) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %297 = logical_or(%287, %288) /* ty=Tensor[(640), bool] */;
  %298 = %293.1;
  %299 = %296.1;
  (%297, %298, meta[relay.Constant][10] /* ty=Tensor[(130), int64] */, %var_3390, %299, meta[relay.Constant][11] /* ty=Tensor[(104), float32] */)
}

def @func_14649() -> (Tensor[(8, 13, 3), float32],) {
  %300 = @func_12247() /* ty=Tensor[(8, 13, 3), float32] */;
  (%300,)
}

def @func_1572() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) {
  %301 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %302 = cast(meta[relay.Constant][12] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
  %303 = reshape(%302, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %304 = @func_221(%303) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %305 = %301.0;
  %306 = %304.0;
  (%305, %306, meta[relay.Constant][12] /* ty=Tensor[(126), int8] */)
}

def @func_9004(%var_8958: Tensor[(1890), float32], %var_8959: Tensor[(650, 1), int64], %var_8989: Tensor[(160, 4), int8]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(650, 1), int64], Tensor[(8, 12), float64], Tensor[(8, 10, 8), int8], Tensor[(160, 4), int8]) {
  %307 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %308 = cast(%var_8958, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %309 = cast(%var_8959, dtype="int64") /* ty=Tensor[(650, 1), int64] */;
  %310 = reshape(%308, newshape=[1890]) /* ty=Tensor[(1890), float32] */;
  %311 = reshape(%309, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %312 = @func_5008(%310, %311) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %313 = @func_6266() /* ty=(Tensor[(126), int8], Tensor[(8, 12), float64]) */;
  %314 = cast(%var_8989, dtype="int8") /* ty=Tensor[(160, 4), int8] */;
  %315 = reshape(%314, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %316 = @func_465(%315) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %317 = %307.1;
  %318 = %312.1;
  %319 = %313.1;
  %320 = %316.0;
  (%317, %318, %var_8958, %var_8959, %319, %320, %var_8989)
}

def @func_9901() -> (Tensor[(126), int8],) {
  %321 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %322 = %321.0;
  (%322,)
}

def @func_9255() -> (Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) {
  %323 = @func_6561() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
  %324 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %325 = %323.3;
  %326 = %324.1;
  (%325, %326)
}

def @func_11116(%var_11089: Tensor[(650), int64]) -> (Tensor[(4, 8, 14), float32], Tensor[(6, 2, 8), float64], Tensor[(198, 1), float64], Tensor[(650), float32]) {
  %327 = @func_9861() /* ty=(Tensor[(4, 8, 14), float32],) */;
  %328 = cast(meta[relay.Constant][13] /* ty=Tensor[(198, 1), float64] */, dtype="float64") /* ty=Tensor[(198, 1), float64] */;
  %329 = cast(%var_11089, dtype="int64") /* ty=Tensor[(650), int64] */;
  %330 = cast(meta[relay.Constant][13] /* ty=Tensor[(198, 1), float64] */, dtype="float32") /* ty=Tensor[(198, 1), float32] */;
  %331 = reshape(%328, newshape=[99, 2]) /* ty=Tensor[(99, 2), float64] */;
  %332 = reshape(%329, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %333 = reshape(%330, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
  %334 = @func_4050(%331, %332, %333) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) */;
  %335 = cast(%var_11089, dtype="float32") /* ty=Tensor[(650), float32] */;
  %336 = %327.0;
  %337 = %334.1;
  %338 = asinh(%335) /* ty=Tensor[(650), float32] */;
  (%336, %337, meta[relay.Constant][13] /* ty=Tensor[(198, 1), float64] */, %338)
}

def @func_12788(%var_12748: Tensor[(5, 16, 6), float64], %var_12749: Tensor[(5, 16, 6), float64]) -> (Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool]) {
  %339 = cast(%var_12749, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %340 = shape_of(%var_12748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_12748, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %343 = cast(%var_12748, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %344 = shape_of(%var_12749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_12749, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = divide(%341, %342) /* ty=Tensor[(5, 16, 6), float64] */;
  %348 = greater_equal(%345, %346) /* ty=Tensor[(5, 16, 6), bool] */;
  (%347, %348)
}

def @func_8570(%var_8498: Tensor[(650), int64], %var_8500: Tensor[(650), int64], %var_8523: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) {
  %349 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %350 = @func_3217() /* ty=(Tensor[(126), int8],) */;
  %351 = cast(meta[relay.Constant][14] /* ty=Tensor[(130), int64] */, dtype="int64") /* ty=Tensor[(130), int64] */;
  %352 = cast(%var_8498, dtype="int64") /* ty=Tensor[(650), int64] */;
  %353 = reshape(%351, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %354 = reshape(%352, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %355 = @func_719(%353, %354) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %356 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %357 = %355.2;
  %358 = cast(%357, dtype="int8") /* ty=Tensor[(8, 10, 8), int8] */;
  %359 = cast(%var_8500, dtype="bool") /* ty=Tensor[(650), bool] */;
  %360 = shape_of(%var_8498, dtype="int32") /* ty=Tensor[(1), int32] */;
  %361 = cast(%var_8498, dtype="bool") /* ty=Tensor[(650), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?), bool] */;
  %363 = less(%361, %362) /* ty=Tensor[(650), bool] */;
  %364 = cast(%363, dtype="int64") /* ty=Tensor[(650), int64] */;
  %365 = reshape(%358, newshape=[640]) /* ty=Tensor[(640), int8] */;
  %366 = reshape(%364, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %367 = @func_3397(%365, %366) /* ty=(Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %368 = cast(meta[relay.Constant][15] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %369 = cast(%var_8523, dtype="float32") /* ty=Tensor[(104), float32] */;
  %370 = %367.3;
  %371 = cast(%370, dtype="int64") /* ty=Tensor[(650), int64] */;
  %372 = reshape(%368, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %373 = reshape(%369, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %374 = reshape(%371, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %375 = @func_1735(%372, %373, %374) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %376 = cast(%363, dtype="float64") /* ty=Tensor[(650), float64] */;
  %377 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
  %378 = %349.0;
  %379 = %350.0;
  %380 = %356.0;
  %381 = %375.8;
  %382 = @func_3886() /* ty=Tensor[(8, 13, 3), float32] */;
  %383 = sigmoid(%376) /* ty=Tensor[(650), float64] */;
  %384 = %377.1;
  (%378, %379, %357, meta[relay.Constant][14] /* ty=Tensor[(130), int64] */, %380, %370, %381, meta[relay.Constant][15] /* ty=Tensor[(198), float64] */, %var_8523, %382, %383, %384)
}

def @func_10839() -> (Tensor[(126), int8],) {
  %385 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %386 = %385.0;
  (%386,)
}

def @func_5980(%var_5974: Tensor[(14, 9, 7), float32]) -> (Tensor[(14, 9, 7), float32],) {
  %387 = cast(%var_5974, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
  %388 = sigmoid(%387) /* ty=Tensor[(14, 9, 7), float32] */;
  (%388,)
}

def @func_7027() -> (Tensor[(126), int8],) {
  %389 = @func_6408() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %390 = %389.1;
  (%390,)
}

def @func_2390() -> (Tensor[(126), int8],) {
  %391 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %392 = %391.2;
  (%392,)
}

def @func_6266() -> (Tensor[(126), int8], Tensor[(8, 12), float64]) {
  %393 = @func_5438() /* ty=(Tensor[(126), int8],) */;
  %394 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
  %395 = %393.0;
  %396 = %394.3;
  (%395, %396)
}

def @func_13303(%var_13293: Tensor[(2, 52), float32]) -> (Tensor[(126), int8], Tensor[(99, 2), float32], Tensor[(2, 52), uint16], Tensor[(26, 4), float32]) {
  %397 = @func_8024() /* ty=(Tensor[(126), int8],) */;
  %398 = cast(%var_13293, dtype="float32") /* ty=Tensor[(2, 52), float32] */;
  %399 = reshape(%398, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %400 = @func_7560(%399) /* ty=(Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) */;
  %401 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 52), float32] */, dtype="uint16") /* ty=Tensor[(2, 52), uint16] */;
  %402 = shape_of(%var_13293, dtype="int32") /* ty=Tensor[(2), int32] */;
  %403 = cast(%var_13293, dtype="uint16") /* ty=Tensor[(2, 52), uint16] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %405 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 52), float32] */, dtype="float32") /* ty=Tensor[(2, 52), float32] */;
  %406 = reshape(%405, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %407 = @func_4134(%406) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) */;
  %408 = %397.0;
  %409 = %400.5;
  %410 = add(%403, %404) /* ty=Tensor[(2, 52), uint16] */;
  %411 = %407.2;
  (%408, %409, %410, %411)
}

def @func_13018(%var_13014: Tensor[(1890), float32], %var_13016: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), int64]) {
  %412 = @func_4669() /* ty=(Tensor[(126), int8],) */;
  %413 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %414 = @func_10089() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %415 = cast(%var_13014, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %416 = cast(meta[relay.Constant][17] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %417 = cast(%var_13016, dtype="int64") /* ty=Tensor[(650), int64] */;
  %418 = reshape(%415, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
  %419 = reshape(%416, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %420 = reshape(%417, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %421 = @func_3555(%418, %419, %420) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
  %422 = @func_11816() /* ty=Tensor[(126), int8] */;
  %423 = %412.0;
  %424 = %413.0;
  %425 = %414.1;
  %426 = %421.2;
  (%422, %423, %424, %425, %426, %var_13014, meta[relay.Constant][17] /* ty=Tensor[(198), float64] */, %var_13016)
}

def @func_9375() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %427 = @func_6622() /* ty=(Tensor[(126), int8],) */;
  %428 = @func_4669() /* ty=(Tensor[(126), int8],) */;
  %429 = %427.0;
  %430 = %428.0;
  (%429, %430)
}

def @func_5476() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float64]) {
  %431 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %432 = @func_2443() /* ty=(Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %435 = %431.0;
  %436 = acosh(%434) /* ty=Tensor[(3, 14, 3), float64] */;
  (%435, %436)
}

def @func_2443() -> (Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) {
  %437 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %438 = %437.1;
  %439 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  (%438, %439)
}

def @func_10774(%var_10736: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(640), int8], Tensor[(1, 1890), float32], Tensor[(198), float64], Tensor[(650), int64], Tensor[(352), float32], Tensor[(3, 14, 3), bool]) {
  %440 = @func_4669() /* ty=(Tensor[(126), int8],) */;
  %441 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 1890), float32] */, dtype="float32") /* ty=Tensor[(1, 1890), float32] */;
  %442 = cast(meta[relay.Constant][19] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %443 = cast(%var_10736, dtype="int64") /* ty=Tensor[(650), int64] */;
  %444 = reshape(%441, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
  %445 = reshape(%442, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %446 = reshape(%443, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %447 = @func_3555(%444, %445, %446) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
  %448 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %449 = @func_6677() /* ty=(Tensor[(3, 14, 3), float32],) */;
  %450 = %449.0;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(3, 14, 3), float32] */;
  %452 = cos(%451) /* ty=Tensor[(3, 14, 3), float32] */;
  %453 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 14, 3), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = %440.0;
  %458 = %447.2;
  %459 = %448.5;
  %460 = less_equal(%455, %456) /* ty=Tensor[(3, 14, 3), bool] */;
  (%457, %458, meta[relay.Constant][18] /* ty=Tensor[(1, 1890), float32] */, meta[relay.Constant][19] /* ty=Tensor[(198), float64] */, %var_10736, %459, %460)
}

def @func_3322() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %461 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %462 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %463 = %461.0;
  %464 = %462.0;
  (%463, %464)
}

def @func_6677() -> (Tensor[(3, 14, 3), float32],) {
  %465 = @func_4915() /* ty=Tensor[(3, 14, 3), uint32] */;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(3, 14, 3), float32] */;
  %467 = sigmoid(%466) /* ty=Tensor[(3, 14, 3), float32] */;
  (%467,)
}

def @func_12272() -> Tensor[(3, 14, 3), float32] {
  %468 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
  %468.0
}

def @func_2118() -> Tensor[(8, 13, 3), float32] {
  %469 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %469.0
}

def @func_7952() -> (Tensor[(126), int8],) {
  %470 = @func_2192() /* ty=Tensor[(126), int8] */;
  (%470,)
}

def @func_4906() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %471 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %472 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %473 = %471.0;
  %474 = %472.0;
  (%473, %474)
}

def @func_2360(%var_2347: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(104), float32]) {
  %475 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %476 = %475.0;
  %477 = cast(%476, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %478 = cast(%var_2347, dtype="float32") /* ty=Tensor[(104), float32] */;
  %479 = reshape(%478, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %480 = @func_276(%479) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %481 = log10(%477) /* ty=Tensor[(8, 13, 3), float32] */;
  %482 = %480.4;
  (%481, %482, %var_2347)
}

def @func_12604() -> Tensor[(3, 14, 3), float32] {
  %483 = @func_6677() /* ty=(Tensor[(3, 14, 3), float32],) */;
  %483.0
}

def @func_13370() -> (Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(126), int8]) {
  %484 = @func_4317() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
  %485 = @func_6007() /* ty=(Tensor[(10, 2, 3), float64],) */;
  %486 = @func_11273() /* ty=(Tensor[(126), int8],) */;
  %487 = %484.0;
  %488 = %485.0;
  %489 = %486.0;
  (%487, %488, %489)
}

def @func_14064() -> (Tensor[(8, 13, 3), float32],) {
  %490 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %491 = %490.0;
  (%491,)
}

def @func_14597() -> (Tensor[(4, 8, 14), float32],) {
  %492 = @func_7447() /* ty=(Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) */;
  %493 = %492.0;
  (%493,)
}

def @func_276(%var_247: Tensor[(4, 13, 2), float32]) -> (Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) {
  %494 = cast(meta[relay.Constant][21] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
  %495 = reshape(%494, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %496 = @func_221(%495) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %497 = cast(%var_247, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %498 = cosh(%497) /* ty=Tensor[(4, 13, 2), float32] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
  %501 = reshape(%500, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %502 = @func_221(%501) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %503 = %496.1;
  %504 = cast(%503, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %505 = reshape(%504, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %506 = @func_221(%505) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %507 = cos(%499) /* ty=Tensor[(4, 13, 2), float32] */;
  %508 = %502.0;
  %509 = %506.0;
  (%503, meta[relay.Constant][21] /* ty=Tensor[(126), int8] */, %507, %508, %509)
}

def @func_7754() -> (Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) {
  %510 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %511 = cast(meta[relay.Constant][23] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %512 = reshape(%510, newshape=[640]) /* ty=Tensor[(640), int8] */;
  %513 = reshape(%511, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %514 = @func_3397(%512, %513) /* ty=(Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %515 = @func_7138() /* ty=Tensor[(126), int8] */;
  %516 = %514.3;
  (%515, %516, meta[relay.Constant][22] /* ty=Tensor[(640), int8] */, meta[relay.Constant][23] /* ty=Tensor[(650), int64] */)
}

def @func_11848(%var_11835: Tensor[(9, 8, 12), float64]) -> (Tensor[(9, 8, 12), float64],) {
  %517 = cast(%var_11835, dtype="float64") /* ty=Tensor[(9, 8, 12), float64] */;
  %518 = rsqrt(%517) /* ty=Tensor[(9, 8, 12), float64] */;
  (%518,)
}

def @func_5972() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(640), int8]) {
  %519 = cast(meta[relay.Constant][24] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %520 = reshape(%519, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %521 = @func_2740(%520) /* ty=(Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %522 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
  %523 = %521.2;
  (%522, %523, meta[relay.Constant][24] /* ty=Tensor[(640), int8] */)
}

def @func_3217() -> (Tensor[(126), int8],) {
  %524 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %525 = %524.0;
  (%525,)
}

def @func_10881() -> (Tensor[(9, 14, 1), float32],) {
  %526 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %527 = sqrt(%526) /* ty=Tensor[(9, 14, 1), float32] */;
  (%527,)
}

def @func_13534() -> (Tensor[(126), int8],) {
  %528 = @func_9375() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %529 = %528.1;
  (%529,)
}

def @func_785(%var_774: Tensor[(6, 2, 8), float64]) -> (Tensor[(6, 2, 8), float64],) {
  %530 = cast(%var_774, dtype="float64") /* ty=Tensor[(6, 2, 8), float64] */;
  %531 = atanh(%530) /* ty=Tensor[(6, 2, 8), float64] */;
  (%531,)
}

def @func_2318() -> (Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) {
  %532 = cast(meta[relay.Constant][26] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %533 = reshape(%532, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %534 = @func_465(%533) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %535 = @func_2192() /* ty=Tensor[(126), int8] */;
  %536 = %534.0;
  (%535, %536, meta[relay.Constant][26] /* ty=Tensor[(640), int8] */)
}

def @func_11328() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %537 = @func_7952() /* ty=(Tensor[(126), int8],) */;
  %538 = @func_10698() /* ty=(Tensor[(126), int8],) */;
  %539 = %537.0;
  %540 = %538.0;
  (%539, %540)
}

def @func_465(%var_461: Tensor[(8, 10, 8), int8]) -> (Tensor[(8, 10, 8), int8],) {
  %541 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %542 = cast(%var_461, dtype="int8") /* ty=Tensor[(8, 10, 8), int8] */;
  %543 = minimum(%541, %542) /* ty=Tensor[(8, 10, 8), int8] */;
  (%543,)
}

def @func_2786() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %544 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %545 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %546 = %544.0;
  %547 = %545.0;
  (%546, %547)
}

def @func_7447() -> (Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) {
  %548 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %549 = sigmoid(%548) /* ty=Tensor[(4, 8, 14), float32] */;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %551 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(4, 8, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %555 = divide(%552, %553) /* ty=Tensor[(4, 8, 14), float32] */;
  %556 = %554.0;
  (%555, %556)
}

def @func_9430() -> Tensor[(?, 9, 9), float64] {
  %557 = @func_3354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) */;
  %557.1
}

def @func_8874(%var_8863: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), float32]) {
  %558 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %559 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %560 = cast(meta[relay.Constant][29] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %561 = cast(meta[relay.Constant][29] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %562 = cast(%var_8863, dtype="float32") /* ty=Tensor[(104), float32] */;
  %563 = reshape(%560, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %564 = reshape(%561, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %565 = reshape(%562, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %566 = @func_8570(%563, %564, %565) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) */;
  %567 = %558.2;
  %568 = %559.0;
  %569 = %566.4;
  %570 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  (%567, %568, %569, meta[relay.Constant][29] /* ty=Tensor[(650), int64] */, %var_8863, %570)
}

def @func_7466(%var_7449: Tensor[(3, 15, 15), float32]) -> (Tensor[(3, 15, 15), uint8],) {
  %571 = cast(%var_7449, dtype="float32") /* ty=Tensor[(3, 15, 15), float32] */;
  %572 = acos(%571) /* ty=Tensor[(3, 15, 15), float32] */;
  %573 = cast(%var_7449, dtype="uint8") /* ty=Tensor[(3, 15, 15), uint8] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="uint8") /* ty=Tensor[(3, 15, 15), uint8] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %577 = subtract(%575, %576) /* ty=Tensor[(3, 15, 15), uint8] */;
  (%577,)
}

def @func_13414(%var_13397: Tensor[(640), int8]) -> (Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(104), float32], Tensor[(640), int8]) {
  %578 = @func_7638() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %579 = cast(meta[relay.Constant][30] /* ty=Tensor[(1155), float32] */, dtype="float32") /* ty=Tensor[(1155), float32] */;
  %580 = reshape(%579, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float32] */;
  %581 = @func_5169(%580) /* ty=(Tensor[(7, 11, 15), float32],) */;
  %582 = cast(%var_13397, dtype="int8") /* ty=Tensor[(640), int8] */;
  %583 = reshape(%582, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %584 = @func_2740(%583) /* ty=(Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %585 = %578.0;
  %586 = %581.0;
  %587 = %584.4;
  (%585, %586, meta[relay.Constant][30] /* ty=Tensor[(1155), float32] */, %587, %var_13397)
}

def @func_11976() -> Tensor[(8, 13, 3), float32] {
  %588 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
  %588.0
}

def @func_5935() -> (Tensor[(126), int8],) {
  %589 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %590 = %589.1;
  (%590,)
}

def @func_12178() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
  %591 = @func_3066() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %592 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %593 = @func_11370() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %594 = %591.0;
  %595 = %592.0;
  %596 = %593.0;
  (%594, %595, %596)
}

def @func_1482() -> (Tensor[(8, 13, 3), float32],) {
  %597 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %598 = acos(%597) /* ty=Tensor[(8, 13, 3), float32] */;
  (%598,)
}

def @func_3940() -> (Tensor[(126), int8],) {
  %599 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %600 = %599.0;
  (%600,)
}

def @func_4102() -> Tensor[(126), int8] {
  %601 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %601.0
}

def @func_4134(%var_4129: Tensor[(26, 4), float32]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) {
  %602 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %603 = cast(%var_4129, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %604 = reshape(%603, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %605 = @func_3712(%604) /* ty=(Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) */;
  %606 = %602.2;
  %607 = %605.0;
  (%606, %607, %var_4129)
}

def @func_5641() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %608 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %609 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %610 = %608.0;
  %611 = %609.1;
  (%610, %611)
}

def @func_5260() -> Tensor[(126), int8] {
  @func_4102() /* ty=Tensor[(126), int8] */
}

def @func_2075(%var_2071: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) {
  %612 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %614 = sinh(%613) /* ty=Tensor[(8, 13, 3), float32] */;
  %615 = cast(%614, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %616 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%612, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = cast(%var_2071, dtype="float32") /* ty=Tensor[(104), float32] */;
  %620 = reshape(%619, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %621 = @func_276(%620) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %622 = greater_equal(%617, %618) /* ty=Tensor[(8, 13, 3), bool] */;
  %623 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
  %624 = %621.2;
  (%622, %623, %624, %var_2071)
}

def @func_10304(%var_10296: Tensor[(99, 2), float64], %var_10297: Tensor[(1, 650), int64]) -> (Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(99, 2), float64], Tensor[(1, 650), int64]) {
  %625 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %626 = cast(meta[relay.Constant][32] /* ty=Tensor[(1890), float32] */, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %627 = cast(%var_10296, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
  %628 = cast(%var_10297, dtype="int64") /* ty=Tensor[(1, 650), int64] */;
  %629 = reshape(%626, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
  %630 = reshape(%627, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %631 = reshape(%628, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %632 = @func_3555(%629, %630, %631) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
  %633 = %625.0;
  %634 = %632.2;
  (%633, %634, meta[relay.Constant][32] /* ty=Tensor[(1890), float32] */, %var_10296, %var_10297)
}

def @func_14336() -> Tensor[(126), int8] {
  @func_7262() /* ty=Tensor[(126), int8] */
}

def @func_14773(%var_14771: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(27, 70), float32], Tensor[(650), int64]) {
  %635 = @func_9255() /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
  %636 = @func_11938() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %637 = cast(meta[relay.Constant][33] /* ty=Tensor[(27, 70), float32] */, dtype="float32") /* ty=Tensor[(27, 70), float32] */;
  %638 = cast(%var_14771, dtype="int64") /* ty=Tensor[(650), int64] */;
  %639 = reshape(%637, newshape=[1890]) /* ty=Tensor[(1890), float32] */;
  %640 = reshape(%638, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %641 = @func_5008(%639, %640) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %642 = %635.1;
  %643 = %636.0;
  %644 = %641.2;
  (%642, %643, %644, meta[relay.Constant][33] /* ty=Tensor[(27, 70), float32] */, %var_14771)
}

def @func_8024() -> (Tensor[(126), int8],) {
  %645 = @func_7952() /* ty=(Tensor[(126), int8],) */;
  %646 = %645.0;
  (%646,)
}

def @func_10516(%var_10495: Tensor[(640), int8], %var_10501: Tensor[(650), int64]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(650), int64], Tensor[(198), float64], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) {
  %647 = cast(%var_10495, dtype="int8") /* ty=Tensor[(640), int8] */;
  %648 = reshape(%647, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %649 = @func_465(%648) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %650 = cast(meta[relay.Constant][34] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %651 = cast(%var_10501, dtype="int64") /* ty=Tensor[(650), int64] */;
  %652 = cast(meta[relay.Constant][34] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %653 = reshape(%650, newshape=[99, 2]) /* ty=Tensor[(99, 2), float64] */;
  %654 = reshape(%651, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %655 = reshape(%652, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
  %656 = @func_4050(%653, %654, %655) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) */;
  %657 = @func_6434() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %658 = @func_9968() /* ty=Tensor[(8, 13, 3), float32] */;
  %659 = %649.0;
  %660 = %656.3;
  %661 = %657.1;
  (%658, %659, %var_10495, %660, meta[relay.Constant][34] /* ty=Tensor[(198), float64] */, %var_10501, %661)
}

def @func_11756() -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 10, 8), int16], Tensor[(8, 13, 3), float32]) {
  %662 = @func_10698() /* ty=(Tensor[(126), int8],) */;
  %663 = @func_10839() /* ty=(Tensor[(126), int8],) */;
  %664 = cast(meta[relay.Constant][35] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %665 = reshape(%664, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %666 = @func_465(%665) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %667 = %666.0;
  %668 = cast(meta[relay.Constant][35] /* ty=Tensor[(640), int8] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="int16") /* ty=Tensor[(8, 10, 8), int16] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %672 = @func_7638() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %673 = %662.0;
  %674 = %663.0;
  %675 = bitwise_xor(%670, %671) /* ty=Tensor[(8, 10, 8), int16] */;
  %676 = %672.0;
  (%673, %674, %675, %676)
}

def @func_14019() -> (Tensor[(8, 13, 3), float32],) {
  %677 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  (%677,)
}

def @func_6869(%var_6864: Tensor[(8, 13, 3), float32]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), int16]) {
  %678 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %679 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %680 = %679.1;
  %681 = cast(%var_6864, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %685 = %678.0;
  %686 = bitwise_or(%683, %684) /* ty=Tensor[(8, 13, 3), int16] */;
  (%685, %686)
}

def @func_5688() -> (Tensor[(3, 14, 3), uint32],) {
  %687 = @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%687,)
}

def @func_14221() -> (Tensor[(650), int64], Tensor[(3, 14, 3), uint32]) {
  %688 = @func_7754() /* ty=(Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) */;
  %689 = %688.1;
  %690 = @func_3464() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%689, %690)
}

def @func_14147() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %691 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %692 = %691.0;
  %693 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  (%692, %693)
}

def @func_11273() -> (Tensor[(126), int8],) {
  %694 = @func_9901() /* ty=(Tensor[(126), int8],) */;
  %695 = %694.0;
  (%695,)
}

def @func_9764(%var_9756: Tensor[(1155), float32]) -> (Tensor[(3, 14, 3), float64], Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(126), int8]) {
  %696 = @func_9193() /* ty=(Tensor[(3, 14, 3), float64],) */;
  %697 = %696.0;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %699 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
  %700 = cast(%var_9756, dtype="float32") /* ty=Tensor[(1155), float32] */;
  %701 = reshape(%700, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float32] */;
  %702 = @func_5169(%701) /* ty=(Tensor[(7, 11, 15), float32],) */;
  %703 = @func_6135() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
  %704 = log2(%698) /* ty=Tensor[(3, 14, 3), float64] */;
  %705 = %699.2;
  %706 = %702.0;
  %707 = %703.0;
  (%704, %705, %706, %var_9756, %707)
}

def @func_9999(%var_9976: Tensor[(8, 7, 10), float64]) -> (Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 7, 10), float64]) {
  %708 = cast(meta[relay.Constant][36] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %709 = reshape(%708, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %710 = @func_7560(%709) /* ty=(Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) */;
  %711 = cast(%var_9976, dtype="float64") /* ty=Tensor[(8, 7, 10), float64] */;
  %712 = asin(%711) /* ty=Tensor[(8, 7, 10), float64] */;
  %713 = cast(%var_9976, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %717 = floor_mod(%715, %716) /* ty=Tensor[(8, 7, 10), float32] */;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(8, 7, 10), float64] */;
  %719 = %710.0;
  %720 = acos(%718) /* ty=Tensor[(8, 7, 10), float64] */;
  (%719, meta[relay.Constant][36] /* ty=Tensor[(104), float32] */, %720)
}

def @func_9617(%var_9584: uint8, %var_9585: Tensor[(2, 6, 4), uint8], %var_9593: Tensor[(33, 6), float64], %var_9594: Tensor[(104), float32]) -> (Tensor[(2, 6, 4), uint8], Tensor[(13, 10), int64], Tensor[(33, 6), float64], Tensor[(104), float32], Tensor[(650), float32], Tensor[(8, 13, 3), float32]) {
  %721 = cast(%var_9584, dtype="uint8") /* ty=uint8 */;
  %722 = cast(%var_9585, dtype="uint8") /* ty=Tensor[(2, 6, 4), uint8] */;
  %723 = cast(%var_9593, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
  %724 = cast(%var_9594, dtype="float32") /* ty=Tensor[(104), float32] */;
  %725 = cast(meta[relay.Constant][37] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %726 = reshape(%723, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %727 = reshape(%724, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %728 = reshape(%725, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %729 = @func_1735(%726, %727, %728) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %730 = cast(meta[relay.Constant][37] /* ty=Tensor[(650), int64] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %731 = @func_8382() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %732 = minimum(%721, %722) /* ty=Tensor[(2, 6, 4), uint8] */;
  %733 = %729.3;
  %734 = log(%730) /* ty=Tensor[(650), float32] */;
  %735 = %731.0;
  (%732, %733, %var_9593, %var_9594, %734, %735)
}

def @func_3763(%var_3734: Tensor[(198), float64], %var_3735: Tensor[(104), float32], %var_3742: Tensor[(12, 9, 9), float64]) -> (Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(325, 2), int64], Tensor[(8, 13, 3), float32], Tensor[(12, 9, 9), float64]) {
  %736 = cast(%var_3734, dtype="float64") /* ty=Tensor[(198), float64] */;
  %737 = cast(%var_3735, dtype="float32") /* ty=Tensor[(104), float32] */;
  %738 = cast(meta[relay.Constant][38] /* ty=Tensor[(325, 2), int64] */, dtype="int64") /* ty=Tensor[(325, 2), int64] */;
  %739 = reshape(%736, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %740 = reshape(%737, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %741 = reshape(%738, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %742 = @func_1735(%739, %740, %741) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %743 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %744 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %745 = %744.2;
  %746 = cast(%745, dtype="bool") /* ty=Tensor[(?, 9, 9), bool] */;
  %747 = cast(%var_3742, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %748 = not_equal(%746, %747) /* ty=Tensor[(12, 9, 9), bool] */;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %750 = shape_of(%var_3742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%var_3742, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %753 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  %754 = %742.7;
  %755 = %743.0;
  %756 = floor_divide(%751, %752) /* ty=Tensor[(12, 9, 9), float64] */;
  (%753, %754, %var_3734, %var_3735, meta[relay.Constant][38] /* ty=Tensor[(325, 2), int64] */, %755, %756)
}

def @func_3162() -> Tensor[(8, 13, 3), float32] {
  %757 = @func_3066() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %757.0
}

def @func_11530() -> (Tensor[(352), float32], Tensor[(126), int8]) {
  %758 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %759 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
  %760 = %758.5;
  %761 = %759.1;
  (%760, %761)
}

def @func_1548() -> Tensor[(8, 13, 3), float32] {
  %762 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %762.0
}

def @func_2478() -> (Tensor[(8, 13, 3), bool],) {
  %763 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %764 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 13, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %768 = equal(%766, %767) /* ty=Tensor[(8, 13, 3), bool] */;
  (%768,)
}

def @func_3555(%var_3534: Tensor[(9, 14, 15), float32], %var_3545: Tensor[(198), float64], %var_3547: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) {
  %769 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %770 = cast(%var_3534, dtype="float32") /* ty=Tensor[(9, 14, 15), float32] */;
  %771 = sinh(%770) /* ty=Tensor[(9, 14, 15), float32] */;
  %772 = cast(%var_3534, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %776 = cast(%var_3545, dtype="float64") /* ty=Tensor[(198), float64] */;
  %777 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %778 = cast(%var_3547, dtype="int64") /* ty=Tensor[(650), int64] */;
  %779 = reshape(%776, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %780 = reshape(%777, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %781 = reshape(%778, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %782 = @func_1735(%779, %780, %781) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %783 = %769.0;
  %784 = cast(%783, dtype="int8") /* ty=Tensor[(126), int8] */;
  %785 = reshape(%784, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %786 = @func_221(%785) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %787 = bitwise_or(%774, %775) /* ty=Tensor[(9, 14, 15), int16] */;
  %788 = %782.2;
  %789 = %786.0;
  (%783, %787, %788, %var_3545, meta[relay.Constant][40] /* ty=Tensor[(1, 104), float32] */, %var_3547, %789)
}

def @func_11816() -> Tensor[(126), int8] {
  @func_5260() /* ty=Tensor[(126), int8] */
}

def @func_12584(%var_12555: Tensor[(11, 4, 4), float64]) -> Tensor[(11, 4, 4), float32] {
  %790 = cast(%var_12555, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %791 = cosh(%790) /* ty=Tensor[(11, 4, 4), float64] */;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  asin(%792) /* ty=Tensor[(11, 4, 4), float32] */
}

def @func_9532() -> (Tensor[(8, 13, 3), float64], Tensor[(126), int8]) {
  %793 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %794 = %793.0;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
  %796 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %797 = log(%795) /* ty=Tensor[(8, 13, 3), float64] */;
  %798 = %796.2;
  (%797, %798)
}

def @func_10627() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %799 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %800 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %801 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  %802 = %799.0;
  %803 = %800.0;
  (%801, %802, %803)
}

def @func_14790() -> Tensor[(104), float32] {
  %804 = @func_12521() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(104), float32]) */;
  %804.1
}

def @func_10236() -> (Tensor[(8, 13, 3), float32], Tensor[(352), float32]) {
  %805 = @func_10022() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %806 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %807 = %805.1;
  %808 = %806.5;
  (%807, %808)
}

def @func_5536() -> Tensor[(126), int8] {
  @func_2192() /* ty=Tensor[(126), int8] */
}

def @func_3354() -> (Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) {
  %809 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %810 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %811 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  %812 = %809.2;
  %813 = %810.0;
  (%811, %812, %813)
}

def @main() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(3, 14, 3), bool]) {
  %814 = @func_6082() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) */;
  %815 = @func_7952() /* ty=(Tensor[(126), int8],) */;
  %816 = @func_13370() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(126), int8]) */;
  %817 = %815.0;
  %818 = cast(%817, dtype="int8") /* ty=Tensor[(126), int8] */;
  %819 = reshape(%818, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %820 = @func_221(%819) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %821 = %820.0;
  %822 = cast(%821, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %823 = log(%822) /* ty=Tensor[(3, 14, 3), float64] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = %814.0;
  %829 = @func_12321() /* ty=Tensor[(8, 13, 3), float32] */;
  %830 = %816.1;
  %831 = logical_and(%826, %827) /* ty=Tensor[(3, 14, 3), bool] */;
  (%828, %817, %829, %830, %831)
}

def @func_5008(%var_4966: Tensor[(1890), float32], %var_4970: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %832 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %833 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %834 = cast(%var_4966, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %835 = cast(meta[relay.Constant][41] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %836 = cast(meta[relay.Constant][42] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %837 = reshape(%834, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
  %838 = reshape(%835, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %839 = reshape(%836, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %840 = @func_3555(%837, %838, %839) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
  %841 = cast(%var_4970, dtype="bool") /* ty=Tensor[(650), bool] */;
  %842 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(650), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %843 = cast(meta[relay.Constant][42] /* ty=Tensor[(650), int64] */, dtype="bool") /* ty=Tensor[(650), bool] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?), bool] */;
  %845 = cast(%var_4970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %846 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
  %847 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %848 = %832.0;
  %849 = %833.0;
  %850 = %840.0;
  %851 = not_equal(%843, %844) /* ty=Tensor[(650), bool] */;
  %852 = log2(%845) /* ty=Tensor[(650), float32] */;
  %853 = %846.0;
  %854 = %847.1;
  %855 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  (%848, %849, %850, %var_4966, meta[relay.Constant][41] /* ty=Tensor[(198), float64] */, %851, %852, %853, %854, %855)
}

def @func_14552(%var_14529: Tensor[(640), int8], %var_14530: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(640), bool], Tensor[(640), int8], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) {
  %856 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %857 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %858 = @func_7638() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %859 = cast(%var_14529, dtype="int8") /* ty=Tensor[(640), int8] */;
  %860 = cast(%var_14530, dtype="int64") /* ty=Tensor[(650), int64] */;
  %861 = reshape(%859, newshape=[640]) /* ty=Tensor[(640), int8] */;
  %862 = reshape(%860, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %863 = @func_3397(%861, %862) /* ty=(Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %864 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %865 = %856.0;
  %866 = %857.1;
  %867 = @func_11024() /* ty=Tensor[(3, 14, 3), float32] */;
  %868 = %858.0;
  %869 = %863.0;
  %870 = %864.0;
  (%865, %866, %867, %868, %869, %var_14529, %var_14530, %870)
}

def @func_3256() -> Tensor[(3, 14, 3), uint32] {
  @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_4584() -> Tensor[(126), int8] {
  %871 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %871.1
}

def @func_1735(%var_1602: Tensor[(11, 6, 3), float64], %var_1610: Tensor[(104), float32], %var_1623: Tensor[(650), int64]) -> (Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) {
  %872 = cast(%var_1610, dtype="float32") /* ty=Tensor[(104), float32] */;
  %873 = reshape(%872, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %874 = @func_276(%873) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %875 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 10), int64] */, dtype="int64") /* ty=Tensor[(13, 10), int64] */;
  %876 = cast(%var_1623, dtype="int64") /* ty=Tensor[(650), int64] */;
  %877 = reshape(%875, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %878 = reshape(%876, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %879 = @func_719(%877, %878) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %880 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %881 = cast(meta[relay.Constant][44] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %882 = reshape(%881, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %883 = @func_785(%882) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %884 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 10), int64] */, dtype="int64") /* ty=Tensor[(13, 10), int64] */;
  %885 = cast(%var_1623, dtype="int64") /* ty=Tensor[(650), int64] */;
  %886 = reshape(%884, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %887 = reshape(%885, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %888 = @func_719(%886, %887) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %889 = %883.0;
  %890 = cast(%889, dtype="float64") /* ty=Tensor[(6, 2, 8), float64] */;
  %891 = reshape(%890, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %892 = @func_785(%891) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %893 = cast(%var_1610, dtype="float32") /* ty=Tensor[(104), float32] */;
  %894 = reshape(%893, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %895 = @func_276(%894) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %896 = %874.0;
  %897 = cast(%896, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %898 = reshape(%897, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %899 = @func_221(%898) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %900 = cast(%var_1602, dtype="float64") /* ty=Tensor[(11, 6, 3), float64] */;
  %901 = tan(%900) /* ty=Tensor[(11, 6, 3), float64] */;
  %902 = cast(%901, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
  %903 = %879.3;
  %904 = %880.0;
  %905 = %888.2;
  %906 = %892.0;
  %907 = %895.1;
  %908 = %899.1;
  %909 = erf(%902) /* ty=Tensor[(11, 6, 3), float32] */;
  (%896, %var_1610, %903, meta[relay.Constant][43] /* ty=Tensor[(13, 10), int64] */, %var_1623, %904, %889, meta[relay.Constant][44] /* ty=Tensor[(96), float64] */, %905, %906, %907, %908, %909)
}

def @func_7848() -> (Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) {
  %910 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %911 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %912 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %913 = cast(meta[relay.Constant][45] /* ty=Tensor[(26, 4), float32] */, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %914 = reshape(%913, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %915 = @func_2075(%914) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %916 = %910.0;
  %917 = @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */;
  %918 = %911.1;
  %919 = %912.2;
  %920 = %915.3;
  (%916, %917, %918, %919, %920, meta[relay.Constant][45] /* ty=Tensor[(26, 4), float32] */)
}

def @func_11450(%var_11425: int64) -> (Tensor[(1, 15, 2), int64], Tensor[(1, 15, 2), bool]) {
  %921 = cast(%var_11425, dtype="int64") /* ty=int64 */;
  %922 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 15, 2), int64] */, dtype="int64") /* ty=Tensor[(1, 15, 2), int64] */;
  %923 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 15, 2), int64] */, dtype="float32") /* ty=Tensor[(1, 15, 2), float32] */;
  %924 = log10(%923) /* ty=Tensor[(1, 15, 2), float32] */;
  %925 = cast(%924, dtype="bool") /* ty=Tensor[(1, 15, 2), bool] */;
  %926 = cast(%var_11425, dtype="bool") /* ty=bool */;
  %927 = right_shift(%921, %922) /* ty=Tensor[(1, 15, 2), int64] */;
  %928 = logical_or(%925, %926) /* ty=Tensor[(1, 15, 2), bool] */;
  (%927, %928)
}

def @func_6561() -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) {
  %929 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %930 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %931 = @func_6408() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %932 = %929.0;
  %933 = %930.0;
  %934 = %931.1;
  %935 = @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%932, %933, %934, %935)
}

def @func_6713() -> (Tensor[(11, 12, 3), int16], Tensor[(126), int8], Tensor[(104), float32]) {
  %936 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 12, 3), int16] */, dtype="int16") /* ty=Tensor[(11, 12, 3), int16] */;
  %937 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(11, 12, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 12, 3), int16] */, dtype="int16") /* ty=Tensor[(11, 12, 3), int16] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %940 = cast(meta[relay.Constant][49] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %941 = reshape(%940, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %942 = @func_276(%941) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %943 = bitwise_or(%938, %939) /* ty=Tensor[(11, 12, 3), int16] */;
  %944 = %942.1;
  (%943, %944, meta[relay.Constant][49] /* ty=Tensor[(104), float32] */)
}

def @func_11079() -> (Tensor[(8, 13, 3), float32],) {
  %945 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  (%945,)
}

def @func_9831() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %946 = @func_6561() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
  %947 = %946.2;
  %948 = @func_7262() /* ty=Tensor[(126), int8] */;
  (%947, %948)
}

def @func_2096() -> (Tensor[(8, 13, 3), float32],) {
  %949 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %950 = %949.0;
  (%950,)
}

def @func_12114(%var_12097: Tensor[(325, 2), int64], %var_12098: Tensor[(640, 1), int8]) -> (Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(640, 1), int8], Tensor[(325, 2), float32]) {
  %951 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %952 = cast(meta[relay.Constant][50] /* ty=Tensor[(1890), float32] */, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %953 = cast(%var_12097, dtype="int64") /* ty=Tensor[(325, 2), int64] */;
  %954 = cast(%var_12098, dtype="int8") /* ty=Tensor[(640, 1), int8] */;
  %955 = reshape(%952, newshape=[1890]) /* ty=Tensor[(1890), float32] */;
  %956 = reshape(%953, newshape=[650, 1]) /* ty=Tensor[(650, 1), int64] */;
  %957 = reshape(%954, newshape=[160, 4]) /* ty=Tensor[(160, 4), int8] */;
  %958 = @func_9004(%955, %956, %957) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(650, 1), int64], Tensor[(8, 12), float64], Tensor[(8, 10, 8), int8], Tensor[(160, 4), int8]) */;
  %959 = cast(%var_12097, dtype="float32") /* ty=Tensor[(325, 2), float32] */;
  %960 = %951.2;
  %961 = %958.0;
  %962 = erf(%959) /* ty=Tensor[(325, 2), float32] */;
  (%960, %961, meta[relay.Constant][50] /* ty=Tensor[(1890), float32] */, %var_12098, %962)
}

def @func_10416(%var_10366: Tensor[(352), float32]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(352), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %963 = @func_5641() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %964 = cast(%var_10366, dtype="float32") /* ty=Tensor[(352), float32] */;
  %965 = %963.0;
  %966 = cast(%965, dtype="int8") /* ty=Tensor[(126), int8] */;
  %967 = reshape(%964, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float32] */;
  %968 = reshape(%966, newshape=[126]) /* ty=Tensor[(126), int8] */;
  %969 = @func_1287(%967, %968) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
  %970 = @func_6344() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %971 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
  %972 = @func_4201() /* ty=(Tensor[(126), int8],) */;
  %973 = %969.3;
  %974 = %970.0;
  %975 = %971.0;
  %976 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  %977 = @func_3886() /* ty=Tensor[(8, 13, 3), float32] */;
  %978 = %972.0;
  (%965, %973, %var_10366, %974, %975, %976, %977, %978)
}

def @func_9968() -> Tensor[(8, 13, 3), float32] {
  @func_2118() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_10846() -> (Tensor[(126), int8],) {
  %979 = @func_4201() /* ty=(Tensor[(126), int8],) */;
  %980 = %979.0;
  (%980,)
}

def @func_12017(%var_12003: Tensor[(7, 11, 14), float32]) -> Tensor[(7, 11, 14), float32] {
  %981 = cast(%var_12003, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
  log10(%981) /* ty=Tensor[(7, 11, 14), float32] */
}

def @func_9097(%var_9093: Tensor[(96), float64]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) {
  %982 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %983 = cast(%var_9093, dtype="float64") /* ty=Tensor[(96), float64] */;
  %984 = reshape(%983, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %985 = @func_6293(%984) /* ty=(Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) */;
  %986 = %982.0;
  %987 = %985.0;
  (%986, %987, %var_9093)
}

def @func_4413() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) {
  %988 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %989 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %990 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 12), float64] */;
  %991 = reshape(%990, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %992 = @func_785(%991) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %993 = %988.0;
  %994 = %989.1;
  %995 = %992.0;
  (%993, %994, %995, meta[relay.Constant][51] /* ty=Tensor[(8, 12), float64] */)
}

def @func_11485() -> (Tensor[(8, 13, 3), float32],) {
  %996 = @func_9069() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %997 = %996.0;
  (%997,)
}

def @func_11212() -> (Tensor[(104), float32], Tensor[(6, 2, 8), float64], Tensor[(126), int8]) {
  %998 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
  %999 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
  %1000 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %1001 = %998.4;
  %1002 = %999.2;
  %1003 = %1000.2;
  (%1001, %1002, %1003)
}

def @func_10947(%var_10902: Tensor[(104), float32]) -> (Tensor[(126), int8], Tensor[(3, 14, 3), bool], Tensor[(126), int8], Tensor[(650), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
  %1004 = @func_7027() /* ty=(Tensor[(126), int8],) */;
  %1005 = %1004.0;
  %1006 = cast(%1005, dtype="int8") /* ty=Tensor[(126), int8] */;
  %1007 = reshape(%1006, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %1008 = @func_221(%1007) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %1009 = cast(meta[relay.Constant][52] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1010 = cast(meta[relay.Constant][52] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1011 = cast(%var_10902, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1012 = reshape(%1009, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1013 = reshape(%1010, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1014 = reshape(%1011, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1015 = @func_8570(%1012, %1013, %1014) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) */;
  %1016 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %1017 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %1018 = %1008.0;
  %1019 = @func_6148() /* ty=Tensor[(126), int8] */;
  %1020 = %1015.10;
  %1021 = %1016.0;
  %1022 = %1017.0;
  (%1005, %1018, %1019, %1020, meta[relay.Constant][52] /* ty=Tensor[(650), int64] */, %var_10902, %1021, %1022)
}

def @func_12283() -> Tensor[(3, 14, 3), float32] {
  @func_12272() /* ty=Tensor[(3, 14, 3), float32] */
}

def @func_12703() -> (Tensor[(8, 13, 3), float32],) {
  %1023 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1024 = %1023.0;
  (%1024,)
}

def @func_10465() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %1025 = @func_6622() /* ty=(Tensor[(126), int8],) */;
  %1026 = @func_3354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) */;
  %1027 = %1025.0;
  %1028 = %1026.0;
  (%1027, %1028)
}

def @func_8354() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %1029 = @func_6408() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1030 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  %1031 = %1029.0;
  (%1030, %1031)
}

def @func_6007() -> (Tensor[(10, 2, 3), float64],) {
  %1032 = cast(meta[relay.Constant][53] /* ty=Tensor[(10, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
  %1033 = tan(%1032) /* ty=Tensor[(10, 2, 3), float64] */;
  (%1033,)
}

def @func_5684() -> (Tensor[(126), int8],) {
  %1034 = @func_2786() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %1035 = %1034.0;
  (%1035,)
}

def @func_8227() -> Tensor[(126), int8] {
  %1036 = @func_5935() /* ty=(Tensor[(126), int8],) */;
  %1036.0
}

def @func_1945() -> Tensor[(8, 13, 3), float32] {
  %1037 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %1038 = %1037.0;
  %1039 = cast(%1038, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  log2(%1039) /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_12247() -> Tensor[(8, 13, 3), float32] {
  @func_3886() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_4317() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %1040 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %1041 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %1042 = %1040.1;
  %1043 = %1041.0;
  (%1042, %1043)
}

def @func_9173() -> Tensor[(8, 13, 3), float32] {
  @func_1548() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_4050(%var_4007: Tensor[(99, 2), float64], %var_4009: Tensor[(650), int64], %var_4046: Tensor[(99, 2), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) {
  %1044 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %1045 = cast(%var_4007, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
  %1046 = cast(meta[relay.Constant][54] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1047 = cast(%var_4009, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1048 = reshape(%1045, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %1049 = reshape(%1046, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1050 = reshape(%1047, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1051 = @func_1735(%1048, %1049, %1050) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %1052 = cast(%var_4007, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
  %1053 = cos(%1052) /* ty=Tensor[(99, 2), float32] */;
  %1054 = cast(%var_4046, dtype="bool") /* ty=Tensor[(99, 2), bool] */;
  %1055 = shape_of(%1053, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1056 = cast(%1053, dtype="bool") /* ty=Tensor[(99, 2), bool] */;
  %1057 = dyn.reshape(%1054, %1055, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1058 = %1044.1;
  %1059 = %1051.9;
  %1060 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %1061 = equal(%1056, %1057) /* ty=Tensor[(99, 2), bool] */;
  (%1058, %1059, meta[relay.Constant][54] /* ty=Tensor[(104), float32] */, %var_4009, %1060, %1061)
}

def @func_8146(%var_8137: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32]) {
  %1062 = @func_6082() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) */;
  %1063 = cast(%var_8137, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1064 = reshape(%1063, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %1065 = @func_4134(%1064) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) */;
  %1066 = %1062.0;
  %1067 = %1065.1;
  (%1066, %1067, %var_8137)
}

def @func_13819(%var_13772: Tensor[(24, 2), uint8]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(13, 10), int64], uint8, Tensor[(24, 2), uint8], Tensor[(198), float64], Tensor[(104, 1), float32], Tensor[(3, 14, 3), float64]) {
  %1068 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %1069 = cast(meta[relay.Constant][55] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1070 = cast(%var_13772, dtype="uint8") /* ty=Tensor[(24, 2), uint8] */;
  %1071 = cast(meta[relay.Constant][56] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %1072 = cast(meta[relay.Constant][57] /* ty=Tensor[(104, 1), float32] */, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
  %1073 = reshape(%1069, newshape=[]) /* ty=uint8 */;
  %1074 = reshape(%1070, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint8] */;
  %1075 = reshape(%1071, newshape=[33, 6]) /* ty=Tensor[(33, 6), float64] */;
  %1076 = reshape(%1072, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1077 = @func_9617(%1073, %1074, %1075, %1076) /* ty=(Tensor[(2, 6, 4), uint8], Tensor[(13, 10), int64], Tensor[(33, 6), float64], Tensor[(104), float32], Tensor[(650), float32], Tensor[(8, 13, 3), float32]) */;
  %1078 = @func_9193() /* ty=(Tensor[(3, 14, 3), float64],) */;
  %1079 = @func_9173() /* ty=Tensor[(8, 13, 3), float32] */;
  %1080 = %1068.1;
  %1081 = %1077.1;
  %1082 = %1078.0;
  (%1079, %1080, %1081, meta[relay.Constant][55] /* ty=uint8 */, %var_13772, meta[relay.Constant][56] /* ty=Tensor[(198), float64] */, meta[relay.Constant][57] /* ty=Tensor[(104, 1), float32] */, %1082)
}

def @func_13904() -> Tensor[(126), int8] {
  @func_4102() /* ty=Tensor[(126), int8] */
}

def @func_12597() -> (Tensor[(3, 14, 3), float64],) {
  %1083 = @func_5476() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float64]) */;
  %1084 = %1083.1;
  (%1084,)
}

def @func_3464() -> Tensor[(3, 14, 3), uint32] {
  @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_9069() -> (Tensor[(8, 13, 3), float32],) {
  %1085 = @func_3066() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1086 = %1085.0;
  (%1086,)
}

def @func_14250() -> Tensor[(7, 15, 2), float32] {
  @func_6882() /* ty=Tensor[(7, 15, 2), float32] */
}

def @func_2292() -> (Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) {
  %1087 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %1088 = reshape(%1087, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1089 = @func_2075(%1088) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %1090 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %1091 = reshape(%1090, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %1092 = @func_276(%1091) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %1093 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %1094 = reshape(%1093, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %1095 = @func_276(%1094) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %1096 = @func_2192() /* ty=Tensor[(126), int8] */;
  %1097 = %1089.0;
  %1098 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %1099 = @func_2192() /* ty=Tensor[(126), int8] */;
  %1100 = %1092.1;
  %1101 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
  %1102 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %1103 = %1095.2;
  %1104 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  (%1096, %1097, meta[relay.Constant][58] /* ty=Tensor[(1, 104), float32] */, %1098, %1099, %1100, %1101, %1102, %1103, %1104)
}

def @func_2998() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1105 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1106 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1107 = %1105.0;
  %1108 = %1106.0;
  (%1107, %1108)
}

def @func_6622() -> (Tensor[(126), int8],) {
  %1109 = @func_5684() /* ty=(Tensor[(126), int8],) */;
  %1110 = %1109.0;
  (%1110,)
}

def @func_11886(%var_11881: Tensor[(864), float64]) -> (Tensor[(8, 13, 3), float64], Tensor[(9, 8, 12), float64], Tensor[(864), float64]) {
  %1111 = @func_9532() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(126), int8]) */;
  %1112 = cast(%var_11881, dtype="float64") /* ty=Tensor[(864), float64] */;
  %1113 = reshape(%1112, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float64] */;
  %1114 = @func_11848(%1113) /* ty=(Tensor[(9, 8, 12), float64],) */;
  %1115 = %1111.0;
  %1116 = %1114.0;
  (%1115, %1116, %var_11881)
}

def @func_13253() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32]) {
  %1117 = @func_8382() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1118 = %1117.0;
  %1119 = @func_3464() /* ty=Tensor[(3, 14, 3), uint32] */;
  %1120 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  (%1118, %1119, %1120)
}

def @func_14177() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %1121 = @func_11370() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1122 = @func_3217() /* ty=(Tensor[(126), int8],) */;
  %1123 = %1121.0;
  %1124 = %1122.0;
  (%1123, %1124)
}

def @func_12469() -> Tensor[(126), int8] {
  @func_5536() /* ty=Tensor[(126), int8] */
}

def @func_7638() -> (Tensor[(8, 13, 3), float32],) {
  %1125 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1126 = %1125.0;
  (%1126,)
}

def @func_3066() -> (Tensor[(8, 13, 3), float32],) {
  %1127 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %1128 = %1127.1;
  (%1128,)
}

def @func_5282() -> Tensor[(8, 13, 3), float32] {
  %1129 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %1129.0
}

def @func_9504() -> (Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(104), float32], Tensor[(40, 16), int8], Tensor[(10, 2, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1130 = @func_5641() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %1131 = @func_6007() /* ty=(Tensor[(10, 2, 3), float64],) */;
  %1132 = %1131.0;
  %1133 = cast(%1132, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
  %1134 = cast(meta[relay.Constant][59] /* ty=Tensor[(40, 16), int8] */, dtype="int8") /* ty=Tensor[(40, 16), int8] */;
  %1135 = reshape(%1134, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %1136 = @func_2740(%1135) /* ty=(Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %1137 = cast(%1132, dtype="float32") /* ty=Tensor[(10, 2, 3), float32] */;
  %1138 = cosh(%1137) /* ty=Tensor[(10, 2, 3), float32] */;
  %1139 = cast(%1138, dtype="float32") /* ty=Tensor[(10, 2, 3), float32] */;
  %1140 = @func_9069() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1141 = %1130.1;
  %1142 = asinh(%1133) /* ty=Tensor[(10, 2, 3), float64] */;
  %1143 = %1136.4;
  %1144 = sigmoid(%1139) /* ty=Tensor[(10, 2, 3), float32] */;
  %1145 = %1140.0;
  (%1141, %1142, %1143, meta[relay.Constant][59] /* ty=Tensor[(40, 16), int8] */, %1144, %1145)
}

def @func_13481(%var_13471: Tensor[(16, 9, 16), float32]) -> Tensor[(16, 9, 16), uint32] {
  %1146 = cast(%var_13471, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %1147 = log10(%1146) /* ty=Tensor[(16, 9, 16), float32] */;
  %1148 = cast(%var_13471, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
  %1149 = shape_of(%1147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1150 = cast(%1147, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
  %1151 = dyn.reshape(%1148, %1149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%1150, %1151) /* ty=Tensor[(16, 9, 16), uint32] */
}

def @func_14622() -> (Tensor[(126), int8],) {
  %1152 = @func_9901() /* ty=(Tensor[(126), int8],) */;
  %1153 = %1152.0;
  (%1153,)
}

def @func_8782(%var_8729: Tensor[(14, 11, 12), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(14, 11, 12), float32]) {
  %1154 = @func_6344() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1155 = cast(%var_8729, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %1156 = log(%1155) /* ty=Tensor[(14, 11, 12), float32] */;
  %1157 = cast(%1156, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %1158 = atanh(%1157) /* ty=Tensor[(14, 11, 12), float32] */;
  %1159 = cast(%1158, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
  %1160 = %1154.0;
  %1161 = asinh(%1159) /* ty=Tensor[(14, 11, 12), float32] */;
  (%1160, %1161)
}

def @func_6344() -> (Tensor[(8, 13, 3), float32],) {
  %1162 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %1163 = %1162.0;
  (%1163,)
}

def @func_4217() -> (Tensor[(8, 13, 3), float32],) {
  %1164 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  (%1164,)
}

def @func_7138() -> Tensor[(126), int8] {
  %1165 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %1165.0
}

def @func_12521() -> (Tensor[(8, 13, 3), float64], Tensor[(104), float32]) {
  %1166 = @func_9532() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(126), int8]) */;
  %1167 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
  %1168 = %1166.0;
  %1169 = %1167.4;
  (%1168, %1169)
}

def @func_7560(%var_7517: Tensor[(104), float32]) -> (Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) {
  %1170 = cast(meta[relay.Constant][61] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %1171 = cast(meta[relay.Constant][60] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1172 = cast(meta[relay.Constant][61] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %1173 = reshape(%1170, newshape=[99, 2]) /* ty=Tensor[(99, 2), float64] */;
  %1174 = reshape(%1171, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1175 = reshape(%1172, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
  %1176 = @func_4050(%1173, %1174, %1175) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) */;
  %1177 = %1176.5;
  %1178 = cast(meta[relay.Constant][61] /* ty=Tensor[(198), float64] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %1179 = shape_of(%1177, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1180 = cast(%1177, dtype="int16") /* ty=Tensor[(99, 2), int16] */;
  %1181 = dyn.reshape(%1178, %1179, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1182 = cast(%var_7517, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1183 = reshape(%1182, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %1184 = @func_4134(%1183) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) */;
  %1185 = cast(%1177, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
  %1186 = cast(%1177, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
  %1187 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %1188 = %1187.1;
  %1189 = cast(meta[relay.Constant][62] /* ty=Tensor[(8, 13, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %1190 = shape_of(%1188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1191 = cast(%1188, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %1192 = dyn.reshape(%1189, %1190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1193 = add(%1180, %1181) /* ty=Tensor[(99, 2), int16] */;
  %1194 = %1184.0;
  %1195 = acosh(%1185) /* ty=Tensor[(99, 2), float64] */;
  %1196 = asin(%1186) /* ty=Tensor[(99, 2), float32] */;
  %1197 = less_equal(%1191, %1192) /* ty=Tensor[(8, 13, 3), bool] */;
  (meta[relay.Constant][60] /* ty=Tensor[(650), int64] */, %1193, %1194, %var_7517, %1195, %1196, %1197)
}

def @func_6082() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) {
  %1198 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1199 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1200 = %1198.0;
  %1201 = %1199.0;
  %1202 = @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%1200, %1201, %1202)
}

def @func_6697(%var_6691: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(104), float32]) {
  %1203 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %1204 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %1205 = cast(%var_6691, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1206 = reshape(%1205, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1207 = @func_2075(%1206) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %1208 = %1203.1;
  %1209 = %1204.0;
  %1210 = %1207.3;
  (%1208, %1209, %1210, %var_6691)
}

def @func_2192() -> Tensor[(126), int8] {
  %1211 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %1211.2
}

def @func_3418() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1212 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1213 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1214 = %1212.0;
  %1215 = %1213.0;
  (%1214, %1215)
}

def @func_3712(%var_3691: Tensor[(104), float32]) -> (Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) {
  %1216 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1217 = cast(meta[relay.Constant][63] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %1218 = cast(%var_3691, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1219 = cast(meta[relay.Constant][64] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1220 = reshape(%1217, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %1221 = reshape(%1218, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1222 = reshape(%1219, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1223 = @func_1735(%1220, %1221, %1222) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %1224 = %1216.1;
  %1225 = %1223.7;
  %1226 = @func_2192() /* ty=Tensor[(126), int8] */;
  (%1224, %1225, meta[relay.Constant][63] /* ty=Tensor[(198), float64] */, %var_3691, meta[relay.Constant][64] /* ty=Tensor[(650), int64] */, %1226)
}

def @func_2599() -> (Tensor[(126), int8],) {
  %1227 = @func_2192() /* ty=Tensor[(126), int8] */;
  (%1227,)
}

def @func_3191() -> Tensor[(3, 14, 3), uint32] {
  %1228 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %1228.1
}

def @func_5438() -> (Tensor[(126), int8],) {
  %1229 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1230 = %1229.0;
  (%1230,)
}

def @func_6434() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %1231 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  %1232 = cast(%1231, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %1233 = @func_5536() /* ty=Tensor[(126), int8] */;
  %1234 = sqrt(%1232) /* ty=Tensor[(8, 13, 3), float32] */;
  (%1233, %1234)
}

def @func_2740(%var_2710: Tensor[(8, 10, 8), int8]) -> (Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) {
  %1235 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %1236 = %1235.1;
  %1237 = cast(%var_2710, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
  %1238 = shape_of(%1236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1239 = cast(%1236, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
  %1240 = dyn.reshape(%1237, %1238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1241 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %1242 = cast(%var_2710, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
  %1243 = cast(meta[relay.Constant][65] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1244 = reshape(%1243, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1245 = @func_2075(%1244) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %1246 = logical_or(%1239, %1240) /* ty=Tensor[(8, 10, 8), bool] */;
  %1247 = %1241.0;
  %1248 = cos(%1242) /* ty=Tensor[(8, 10, 8), float64] */;
  %1249 = %1245.1;
  (%1246, %1247, %1248, %1249, meta[relay.Constant][65] /* ty=Tensor[(104), float32] */)
}

def @func_12897() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %1250 = @func_11370() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1251 = @func_11328() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1252 = %1250.0;
  %1253 = %1251.0;
  (%1252, %1253)
}

def @func_8382() -> (Tensor[(8, 13, 3), float32],) {
  %1254 = @func_6945() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
  %1255 = %1254.3;
  (%1255,)
}

def @func_10022() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1256 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
  %1257 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  (%1256, %1257)
}

def @func_7262() -> Tensor[(126), int8] {
  %1258 = @func_7027() /* ty=(Tensor[(126), int8],) */;
  %1258.0
}

def @func_12971() -> (Tensor[(8, 13, 3), float64], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8], Tensor[(126), int8]) {
  %1259 = @func_9532() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(126), int8]) */;
  %1260 = cast(meta[relay.Constant][66] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1261 = reshape(%1260, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1262 = @func_6831(%1261) /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8]) */;
  %1263 = @func_10089() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1264 = @func_11530() /* ty=(Tensor[(352), float32], Tensor[(126), int8]) */;
  %1265 = %1259.0;
  %1266 = %1262.2;
  %1267 = %1263.1;
  %1268 = %1264.1;
  (%1265, %1266, meta[relay.Constant][66] /* ty=Tensor[(650), int64] */, %1267, %1268)
}

def @func_719(%var_693: Tensor[(10, 1, 13), int64], %var_694: Tensor[(10, 5, 13), int64]) -> (Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) {
  %1269 = cast(%var_693, dtype="int64") /* ty=Tensor[(10, 1, 13), int64] */;
  %1270 = cast(%var_694, dtype="int64") /* ty=Tensor[(10, 5, 13), int64] */;
  %1271 = cast(%var_694, dtype="float32") /* ty=Tensor[(10, 5, 13), float32] */;
  %1272 = cast(meta[relay.Constant][67] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %1273 = reshape(%1272, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %1274 = @func_465(%1273) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %1275 = logical_xor(%1269, %1270) /* ty=Tensor[(10, 5, 13), int64] */;
  %1276 = rsqrt(%1271) /* ty=Tensor[(10, 5, 13), float32] */;
  %1277 = %1274.0;
  (%1275, %1276, %1277, meta[relay.Constant][67] /* ty=Tensor[(640), int8] */)
}

def @func_8714(%var_8705: Tensor[(96), float64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) {
  %1278 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
  %1279 = cast(%var_8705, dtype="float64") /* ty=Tensor[(96), float64] */;
  %1280 = reshape(%1279, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %1281 = @func_6293(%1280) /* ty=(Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) */;
  %1282 = %1278.5;
  %1283 = %1281.3;
  (%1282, %1283, %var_8705)
}

def @func_11938() -> (Tensor[(8, 13, 3), float32],) {
  %1284 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
  (%1284,)
}

def @func_6882() -> Tensor[(7, 15, 2), float32] {
  %1285 = cast(meta[relay.Constant][68] /* ty=Tensor[(7, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
  log2(%1285) /* ty=Tensor[(7, 15, 2), float32] */
}

def @func_1287(%var_1274: Tensor[(2, 11, 16), float32], %var_1282: Tensor[(126), int8]) -> (Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) {
  %1286 = cast(%var_1274, dtype="float32") /* ty=Tensor[(2, 11, 16), float32] */;
  %1287 = cast(%var_1274, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
  %1288 = cast(%var_1282, dtype="int8") /* ty=Tensor[(126), int8] */;
  %1289 = reshape(%1288, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %1290 = @func_221(%1289) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %1291 = sinh(%1286) /* ty=Tensor[(2, 11, 16), float32] */;
  %1292 = acosh(%1287) /* ty=Tensor[(2, 11, 16), float64] */;
  %1293 = %1290.1;
  (%1291, %1292, %1293, %var_1282)
}

def @func_6187() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1294 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %1295 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1296 = %1294.1;
  %1297 = %1295.0;
  (%1296, %1297)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10352(%var_10347: uint64, %var_10348: Tensor[(8, 11, 6), uint64], %var_10349: Tensor[(104), float32], %var_10350: Tensor[(640), int8], %var_10351: Tensor[(96), float64]) -> (Tensor[(8, 11, 6), uint64], Tensor[(640), int8], Tensor[(104), float32], Tensor[(640), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) {
  %13 = fn (%var_10316: uint64, %var_10317: Tensor[(8, 11, 6), uint64], %var_10333: Tensor[(104), float32], %var_10334: Tensor[(640), int8], %var_10342: Tensor[(96), float64]) -> (Tensor[(8, 11, 6), uint64], Tensor[(640), int8], Tensor[(104), float32], Tensor[(640), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) {
    %0 = cast(%var_10316, dtype="uint64") /* ty=uint64 */;
    %1 = cast(%var_10317, dtype="uint64") /* ty=Tensor[(8, 11, 6), uint64] */;
    %2 = cast(%var_10333, dtype="float32") /* ty=Tensor[(104), float32] */;
    %3 = cast(%var_10334, dtype="int8") /* ty=Tensor[(640), int8] */;
    %4 = reshape(%2, newshape=[104, 1]) /* ty=Tensor[(104, 1), float32] */;
    %5 = reshape(%3, newshape=[640]) /* ty=Tensor[(640), int8] */;
    %6 = @func_9717(%4, %5) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), bool], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(104, 126), int64], Tensor[(8, 13, 3), bool]) */;
    %7 = cast(%var_10342, dtype="float64") /* ty=Tensor[(96), float64] */;
    %8 = reshape(%7, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %9 = @func_9097(%8) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) */;
    %10 = bitwise_xor(%0, %1) /* ty=Tensor[(8, 11, 6), uint64] */;
    %11 = %6.3;
    %12 = %9.0;
    (%10, %11, %var_10333, %var_10334, %12, %var_10342)
  };
  %13(%var_10347, %var_10348, %var_10349, %var_10350, %var_10351) /* ty=(Tensor[(8, 11, 6), uint64], Tensor[(640), int8], Tensor[(104), float32], Tensor[(640), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) */
}

def @func_8354() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %14 = @func_6408() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %15 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  %16 = %14.0;
  (%15, %16)
}

def @func_14773(%var_14771: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(27, 70), float32], Tensor[(650), int64]) {
  %17 = @func_9255() /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
  %18 = @func_11938() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(27, 70), float32] */, dtype="float32") /* ty=Tensor[(27, 70), float32] */;
  %20 = cast(%var_14771, dtype="int64") /* ty=Tensor[(650), int64] */;
  %21 = reshape(%19, newshape=[1890]) /* ty=Tensor[(1890), float32] */;
  %22 = reshape(%20, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %23 = @func_5008(%21, %22) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %24 = %17.1;
  %25 = %18.0;
  %26 = %23.2;
  (%24, %25, %26, meta[relay.Constant][0] /* ty=Tensor[(27, 70), float32] */, %var_14771)
}

def @func_11328() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %27 = @func_7952() /* ty=(Tensor[(126), int8],) */;
  %28 = @func_10698() /* ty=(Tensor[(126), int8],) */;
  %29 = %27.0;
  %30 = %28.0;
  (%29, %30)
}

def @func_10089() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %31 = @func_9255() /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
  %32 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %33 = %31.1;
  %34 = %32.0;
  (%33, %34)
}

def @func_4202() -> (Tensor[(126), int8],) {
  %37 = fn () -> (Tensor[(126), int8],) {
    %35 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
    %36 = %35.7;
    (%36,)
  };
  %37() /* ty=(Tensor[(126), int8],) */
}

def @func_2804() -> (Tensor[(8, 13, 3), float32],) {
  @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_6345() -> (Tensor[(8, 13, 3), float32],) {
  %40 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %38 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %39 = %38.0;
    (%39,)
  };
  %40() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_7754() -> (Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) {
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %43 = reshape(%41, newshape=[640]) /* ty=Tensor[(640), int8] */;
  %44 = reshape(%42, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %45 = @func_3397(%43, %44) /* ty=(Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %46 = @func_7138() /* ty=Tensor[(126), int8] */;
  %47 = %45.3;
  (%46, %47, meta[relay.Constant][1] /* ty=Tensor[(640), int8] */, meta[relay.Constant][2] /* ty=Tensor[(650), int64] */)
}

def @func_2787() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %52 = fn () -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
    %48 = @func_2390() /* ty=(Tensor[(126), int8],) */;
    %49 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %50 = %48.0;
    %51 = %49.0;
    (%50, %51)
  };
  %52() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_719(%var_693: Tensor[(10, 1, 13), int64], %var_694: Tensor[(10, 5, 13), int64]) -> (Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) {
  %53 = cast(%var_693, dtype="int64") /* ty=Tensor[(10, 1, 13), int64] */;
  %54 = cast(%var_694, dtype="int64") /* ty=Tensor[(10, 5, 13), int64] */;
  %55 = cast(%var_694, dtype="float32") /* ty=Tensor[(10, 5, 13), float32] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %57 = reshape(%56, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %58 = @func_465(%57) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %59 = logical_xor(%53, %54) /* ty=Tensor[(10, 5, 13), int64] */;
  %60 = rsqrt(%55) /* ty=Tensor[(10, 5, 13), float32] */;
  %61 = %58.0;
  (%59, %60, %61, meta[relay.Constant][3] /* ty=Tensor[(640), int8] */)
}

def @func_6883() -> Tensor[(7, 15, 2), float32] {
  %63 = fn () -> Tensor[(7, 15, 2), float32] {
    %62 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 2), float32] */;
    log2(%62) /* ty=Tensor[(7, 15, 2), float32] */
  };
  %63() /* ty=Tensor[(7, 15, 2), float32] */
}

def @func_11977() -> Tensor[(8, 13, 3), float32] {
  %65 = fn () -> Tensor[(8, 13, 3), float32] {
    %64 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
    %64.0
  };
  %65() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_3191() -> Tensor[(3, 14, 3), uint32] {
  %66 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %66.1
}

def @func_2802() -> (Tensor[(8, 13, 3), float32],) {
  %67 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %68 = %67.0;
  (%68,)
}

def @func_6947() -> (Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) {
  @func_6945() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */
}

def @func_3043() -> (Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %75 = fn () -> (Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
    %69 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
    %70 = @func_2614() /* ty=(Tensor[(126), int8],) */;
    %71 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
    %72 = %69.0;
    %73 = %70.0;
    %74 = %71.7;
    (%72, %73, %74)
  };
  %75() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_8356() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  @func_8354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */
}

def @func_14598() -> (Tensor[(4, 8, 14), float32],) {
  %78 = fn () -> (Tensor[(4, 8, 14), float32],) {
    %76 = @func_7447() /* ty=(Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) */;
    %77 = %76.0;
    (%77,)
  };
  %78() /* ty=(Tensor[(4, 8, 14), float32],) */
}

def @func_3888() -> Tensor[(8, 13, 3), float32] {
  @func_3886() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_2320() -> (Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) {
  @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */
}

def @func_10002(%var_10000: Tensor[(8, 7, 10), float64]) -> (Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 7, 10), float64]) {
  @func_9999(%var_10000) /* ty=(Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 7, 10), float64]) */
}

def @func_2600() -> (Tensor[(126), int8],) {
  %80 = fn () -> (Tensor[(126), int8],) {
    %79 = @func_2192() /* ty=Tensor[(126), int8] */;
    (%79,)
  };
  %80() /* ty=(Tensor[(126), int8],) */
}

def @func_5439() -> (Tensor[(126), int8],) {
  %83 = fn () -> (Tensor[(126), int8],) {
    %81 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %82 = %81.0;
    (%82,)
  };
  %83() /* ty=(Tensor[(126), int8],) */
}

def @func_14250() -> Tensor[(7, 15, 2), float32] {
  @func_6882() /* ty=Tensor[(7, 15, 2), float32] */
}

def @func_12469() -> Tensor[(126), int8] {
  @func_5536() /* ty=Tensor[(126), int8] */
}

def @func_7138() -> Tensor[(126), int8] {
  %84 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %84.0
}

def @func_8716(%var_8715: Tensor[(96), float64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) {
  %91 = fn (%var_8705: Tensor[(96), float64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) {
    %85 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
    %86 = cast(%var_8705, dtype="float64") /* ty=Tensor[(96), float64] */;
    %87 = reshape(%86, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %88 = @func_6293(%87) /* ty=(Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) */;
    %89 = %85.5;
    %90 = %88.3;
    (%89, %90, %var_8705)
  };
  %91(%var_8715) /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) */
}

def @func_14791() -> Tensor[(104), float32] {
  %93 = fn () -> Tensor[(104), float32] {
    %92 = @func_12521() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(104), float32]) */;
    %92.1
  };
  %93() /* ty=Tensor[(104), float32] */
}

def @func_2445() -> (Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) {
  @func_2443() /* ty=(Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) */
}

def @func_4104() -> Tensor[(126), int8] {
  @func_4102() /* ty=Tensor[(126), int8] */
}

def @func_14223() -> (Tensor[(650), int64], Tensor[(3, 14, 3), uint32]) {
  @func_14221() /* ty=(Tensor[(650), int64], Tensor[(3, 14, 3), uint32]) */
}

def @func_11532() -> (Tensor[(352), float32], Tensor[(126), int8]) {
  @func_11530() /* ty=(Tensor[(352), float32], Tensor[(126), int8]) */
}

def @func_6869(%var_6864: Tensor[(8, 13, 3), float32]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), int16]) {
  %94 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %95 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %96 = %95.1;
  %97 = cast(%var_6864, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %101 = %94.0;
  %102 = bitwise_or(%99, %100) /* ty=Tensor[(8, 13, 3), int16] */;
  (%101, %102)
}

def @func_467(%var_466: Tensor[(8, 10, 8), int8]) -> (Tensor[(8, 10, 8), int8],) {
  %106 = fn (%var_461: Tensor[(8, 10, 8), int8]) -> (Tensor[(8, 10, 8), int8],) {
    %103 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %104 = cast(%var_461, dtype="int8") /* ty=Tensor[(8, 10, 8), int8] */;
    %105 = minimum(%103, %104) /* ty=Tensor[(8, 10, 8), int8] */;
    (%105,)
  };
  %106(%var_466) /* ty=(Tensor[(8, 10, 8), int8],) */
}

def @func_4744() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %107 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %108 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %109 = %107.0;
  %110 = %108.1;
  (%109, %110)
}

def @func_7560(%var_7517: Tensor[(104), float32]) -> (Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) {
  %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %114 = reshape(%111, newshape=[99, 2]) /* ty=Tensor[(99, 2), float64] */;
  %115 = reshape(%112, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %116 = reshape(%113, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
  %117 = @func_4050(%114, %115, %116) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) */;
  %118 = %117.5;
  %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(198), float64] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(2), int32] */;
  %121 = cast(%118, dtype="int16") /* ty=Tensor[(99, 2), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %123 = cast(%var_7517, dtype="float32") /* ty=Tensor[(104), float32] */;
  %124 = reshape(%123, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
  %125 = @func_4134(%124) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) */;
  %126 = cast(%118, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
  %127 = cast(%118, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
  %128 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %129 = %128.1;
  %130 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 13, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = add(%121, %122) /* ty=Tensor[(99, 2), int16] */;
  %135 = %125.0;
  %136 = acosh(%126) /* ty=Tensor[(99, 2), float64] */;
  %137 = asin(%127) /* ty=Tensor[(99, 2), float32] */;
  %138 = less_equal(%132, %133) /* ty=Tensor[(8, 13, 3), bool] */;
  (meta[relay.Constant][6] /* ty=Tensor[(650), int64] */, %134, %135, %var_7517, %136, %137, %138)
}

def @func_11372() -> (Tensor[(8, 13, 3), float32],) {
  @func_11370() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_6408() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %139 = @func_4669() /* ty=(Tensor[(126), int8],) */;
  %140 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
  %141 = %139.0;
  %142 = %140.5;
  (%141, %142)
}

def @func_2478() -> (Tensor[(8, 13, 3), bool],) {
  %143 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 13, 3), float32] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = equal(%146, %147) /* ty=Tensor[(8, 13, 3), bool] */;
  (%148,)
}

def @func_9901() -> (Tensor[(126), int8],) {
  %149 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %150 = %149.0;
  (%150,)
}

def @func_3714(%var_3713: Tensor[(104), float32]) -> (Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) {
  %162 = fn (%var_3691: Tensor[(104), float32]) -> (Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) {
    %151 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %153 = cast(%var_3691, dtype="float32") /* ty=Tensor[(104), float32] */;
    %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %155 = reshape(%152, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
    %156 = reshape(%153, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %157 = reshape(%154, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %158 = @func_1735(%155, %156, %157) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
    %159 = %151.1;
    %160 = %158.7;
    %161 = @func_2192() /* ty=Tensor[(126), int8] */;
    (%159, %160, meta[relay.Constant][10] /* ty=Tensor[(198), float64] */, %var_3691, meta[relay.Constant][11] /* ty=Tensor[(650), int64] */, %161)
  };
  %162(%var_3713) /* ty=(Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) */
}

def @func_8692() -> (Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64]) {
  %163 = @func_5935() /* ty=(Tensor[(126), int8],) */;
  %164 = cast(meta[relay.Constant][12] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %165 = reshape(%164, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %166 = @func_785(%165) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %167 = %163.0;
  %168 = %166.0;
  (%167, %168, meta[relay.Constant][12] /* ty=Tensor[(96), float64] */)
}

def @func_6410() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  @func_6408() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_11079() -> (Tensor[(8, 13, 3), float32],) {
  %169 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  (%169,)
}

def @func_1573() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) {
  %176 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) {
    %170 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %171 = cast(meta[relay.Constant][13] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
    %172 = reshape(%171, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
    %173 = @func_221(%172) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
    %174 = %170.0;
    %175 = %173.0;
    (%174, %175, meta[relay.Constant][13] /* ty=Tensor[(126), int8] */)
  };
  %176() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */
}

def @func_8025() -> (Tensor[(126), int8],) {
  %179 = fn () -> (Tensor[(126), int8],) {
    %177 = @func_7952() /* ty=(Tensor[(126), int8],) */;
    %178 = %177.0;
    (%178,)
  };
  %179() /* ty=(Tensor[(126), int8],) */
}

def @func_11213() -> (Tensor[(104), float32], Tensor[(6, 2, 8), float64], Tensor[(126), int8]) {
  %186 = fn () -> (Tensor[(104), float32], Tensor[(6, 2, 8), float64], Tensor[(126), int8]) {
    %180 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
    %181 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
    %182 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %183 = %180.4;
    %184 = %181.2;
    %185 = %182.2;
    (%183, %184, %185)
  };
  %186() /* ty=(Tensor[(104), float32], Tensor[(6, 2, 8), float64], Tensor[(126), int8]) */
}

def @func_1946() -> Tensor[(8, 13, 3), float32] {
  %190 = fn () -> Tensor[(8, 13, 3), float32] {
    %187 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %188 = %187.0;
    %189 = cast(%188, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    log2(%189) /* ty=Tensor[(8, 13, 3), float32] */
  };
  %190() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_11370() -> (Tensor[(8, 13, 3), float32],) {
  %191 = @func_4906() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %192 = %191.1;
  (%192,)
}

def @func_9831() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %193 = @func_6561() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
  %194 = %193.2;
  %195 = @func_7262() /* ty=Tensor[(126), int8] */;
  (%194, %195)
}

def @func_12052() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %196 = @func_6434() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %197 = %196.1;
  %198 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  (%197, %198)
}

def @func_10238() -> (Tensor[(8, 13, 3), float32], Tensor[(352), float32]) {
  @func_10236() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(352), float32]) */
}

def @func_12704() -> (Tensor[(8, 13, 3), float32],) {
  %201 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %199 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %200 = %199.0;
    (%200,)
  };
  %201() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_4906() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %202 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %203 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %204 = %202.0;
  %205 = %203.0;
  (%204, %205)
}

def @func_4917() -> Tensor[(3, 14, 3), uint32] {
  @func_4915() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_13021(%var_13019: Tensor[(1890), float32], %var_13020: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), int64]) {
  %221 = fn (%var_13014: Tensor[(1890), float32], %var_13016: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), int64]) {
    %206 = @func_4669() /* ty=(Tensor[(126), int8],) */;
    %207 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %208 = @func_10089() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %209 = cast(%var_13014, dtype="float32") /* ty=Tensor[(1890), float32] */;
    %210 = cast(meta[relay.Constant][14] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
    %211 = cast(%var_13016, dtype="int64") /* ty=Tensor[(650), int64] */;
    %212 = reshape(%209, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
    %213 = reshape(%210, newshape=[198]) /* ty=Tensor[(198), float64] */;
    %214 = reshape(%211, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %215 = @func_3555(%212, %213, %214) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
    %216 = @func_11816() /* ty=Tensor[(126), int8] */;
    %217 = %206.0;
    %218 = %207.0;
    %219 = %208.1;
    %220 = %215.2;
    (%216, %217, %218, %219, %220, %var_13014, meta[relay.Constant][14] /* ty=Tensor[(198), float64] */, %var_13016)
  };
  %221(%var_13019, %var_13020) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), int64]) */
}

def @func_2614() -> (Tensor[(126), int8],) {
  %222 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %223 = %222.0;
  (%223,)
}

def @func_14221() -> (Tensor[(650), int64], Tensor[(3, 14, 3), uint32]) {
  %224 = @func_7754() /* ty=(Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) */;
  %225 = %224.1;
  %226 = @func_3464() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%225, %226)
}

def @func_13253() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32]) {
  %227 = @func_8382() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %228 = %227.0;
  %229 = @func_3464() /* ty=Tensor[(3, 14, 3), uint32] */;
  %230 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  (%228, %229, %230)
}

def @func_10177(%var_10176: Tensor[(8, 13, 3), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), int8]) {
  %239 = fn (%var_10155: Tensor[(8, 13, 3), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), int8]) {
    %231 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %232 = %231.0;
    %233 = cast(%var_10155, dtype="int8") /* ty=Tensor[(8, 13, 3), int8] */;
    %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%232, dtype="int8") /* ty=Tensor[(8, 13, 3), int8] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %237 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
    %238 = multiply(%235, %236) /* ty=Tensor[(8, 13, 3), int8] */;
    (%237, %238)
  };
  %239(%var_10176) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), int8]) */
}

def @func_4669() -> (Tensor[(126), int8],) {
  %240 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %241 = %240.0;
  (%241,)
}

def @func_4391(%var_4390: float32) -> (Tensor[(11, 2, 1), float32], Tensor[(126), int8], Tensor[(126), int8]) {
  %249 = fn (%var_4368: float32) -> (Tensor[(11, 2, 1), float32], Tensor[(126), int8], Tensor[(126), int8]) {
    %242 = cast(%var_4368, dtype="float32") /* ty=float32 */;
    %243 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 1), float32] */;
    %244 = @func_2614() /* ty=(Tensor[(126), int8],) */;
    %245 = @func_2786() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %246 = power(%242, %243) /* ty=Tensor[(11, 2, 1), float32] */;
    %247 = %244.0;
    %248 = %245.0;
    (%246, %247, %248)
  };
  %249(%var_4390) /* ty=(Tensor[(11, 2, 1), float32], Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_6563() -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) {
  @func_6561() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */
}

def @func_14622() -> (Tensor[(126), int8],) {
  %250 = @func_9901() /* ty=(Tensor[(126), int8],) */;
  %251 = %250.0;
  (%251,)
}

def @func_11888(%var_11887: Tensor[(864), float64]) -> (Tensor[(8, 13, 3), float64], Tensor[(9, 8, 12), float64], Tensor[(864), float64]) {
  %258 = fn (%var_11881: Tensor[(864), float64]) -> (Tensor[(8, 13, 3), float64], Tensor[(9, 8, 12), float64], Tensor[(864), float64]) {
    %252 = @func_9532() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(126), int8]) */;
    %253 = cast(%var_11881, dtype="float64") /* ty=Tensor[(864), float64] */;
    %254 = reshape(%253, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float64] */;
    %255 = @func_11848(%254) /* ty=(Tensor[(9, 8, 12), float64],) */;
    %256 = %252.0;
    %257 = %255.0;
    (%256, %257, %var_11881)
  };
  %258(%var_11887) /* ty=(Tensor[(8, 13, 3), float64], Tensor[(9, 8, 12), float64], Tensor[(864), float64]) */
}

def @func_12471() -> Tensor[(126), int8] {
  @func_12469() /* ty=Tensor[(126), int8] */
}

def @func_4218() -> (Tensor[(8, 13, 3), float32],) {
  %260 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %259 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
    (%259,)
  };
  %260() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_3419() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %265 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
    %261 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %262 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %263 = %261.0;
    %264 = %262.0;
    (%263, %264)
  };
  %265() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_4317() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %266 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %267 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %268 = %266.1;
  %269 = %267.0;
  (%268, %269)
}

def @func_9969() -> Tensor[(8, 13, 3), float32] {
  %270 = fn () -> Tensor[(8, 13, 3), float32] {
    @func_2118() /* ty=Tensor[(8, 13, 3), float32] */
  };
  %270() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_10308(%var_10306: Tensor[(99, 2), float64], %var_10307: Tensor[(1, 650), int64]) -> (Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(99, 2), float64], Tensor[(1, 650), int64]) {
  @func_10304(%var_10306, %var_10307) /* ty=(Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(99, 2), float64], Tensor[(1, 650), int64]) */
}

def @func_11274() -> (Tensor[(126), int8],) {
  %273 = fn () -> (Tensor[(126), int8],) {
    %271 = @func_9901() /* ty=(Tensor[(126), int8],) */;
    %272 = %271.0;
    (%272,)
  };
  %273() /* ty=(Tensor[(126), int8],) */
}

def @func_4136(%var_4135: Tensor[(26, 4), float32]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) {
  %280 = fn (%var_4129: Tensor[(26, 4), float32]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) {
    %274 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %275 = cast(%var_4129, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
    %276 = reshape(%275, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %277 = @func_3712(%276) /* ty=(Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) */;
    %278 = %274.2;
    %279 = %277.0;
    (%278, %279, %var_4129)
  };
  %280(%var_4135) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) */
}

def @func_3578() -> Tensor[(8, 13, 3), float32] {
  %282 = fn () -> Tensor[(8, 13, 3), float32] {
    %281 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
    %281.0
  };
  %282() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_9656() -> Tensor[(3, 14, 3), uint32] {
  @func_9654() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_2077(%var_2076: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) {
  %296 = fn (%var_2071: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) {
    %283 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
    %284 = cast(%283, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %285 = sinh(%284) /* ty=Tensor[(8, 13, 3), float32] */;
    %286 = cast(%285, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %287 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %288 = cast(%283, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %290 = cast(%var_2071, dtype="float32") /* ty=Tensor[(104), float32] */;
    %291 = reshape(%290, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
    %292 = @func_276(%291) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
    %293 = greater_equal(%288, %289) /* ty=Tensor[(8, 13, 3), bool] */;
    %294 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
    %295 = %292.2;
    (%293, %294, %295, %var_2071)
  };
  %296(%var_2076) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */
}

def @func_3219() -> (Tensor[(126), int8],) {
  @func_3217() /* ty=(Tensor[(126), int8],) */
}

def @func_2391() -> (Tensor[(126), int8],) {
  %299 = fn () -> (Tensor[(126), int8],) {
    %297 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %298 = %297.2;
    (%298,)
  };
  %299() /* ty=(Tensor[(126), int8],) */
}

def @func_4585() -> Tensor[(126), int8] {
  %301 = fn () -> Tensor[(126), int8] {
    %300 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %300.1
  };
  %301() /* ty=Tensor[(126), int8] */
}

def @func_1484() -> (Tensor[(8, 13, 3), float32],) {
  @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_10839() -> (Tensor[(126), int8],) {
  %302 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %303 = %302.0;
  (%303,)
}

def @func_1735(%var_1602: Tensor[(11, 6, 3), float64], %var_1610: Tensor[(104), float32], %var_1623: Tensor[(650), int64]) -> (Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) {
  %304 = cast(%var_1610, dtype="float32") /* ty=Tensor[(104), float32] */;
  %305 = reshape(%304, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %306 = @func_276(%305) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %307 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 10), int64] */, dtype="int64") /* ty=Tensor[(13, 10), int64] */;
  %308 = cast(%var_1623, dtype="int64") /* ty=Tensor[(650), int64] */;
  %309 = reshape(%307, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %310 = reshape(%308, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %311 = @func_719(%309, %310) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %312 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %313 = cast(meta[relay.Constant][17] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %314 = reshape(%313, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %315 = @func_785(%314) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %316 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 10), int64] */, dtype="int64") /* ty=Tensor[(13, 10), int64] */;
  %317 = cast(%var_1623, dtype="int64") /* ty=Tensor[(650), int64] */;
  %318 = reshape(%316, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %319 = reshape(%317, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %320 = @func_719(%318, %319) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %321 = %315.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(6, 2, 8), float64] */;
  %323 = reshape(%322, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %324 = @func_785(%323) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %325 = cast(%var_1610, dtype="float32") /* ty=Tensor[(104), float32] */;
  %326 = reshape(%325, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %327 = @func_276(%326) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %328 = %306.0;
  %329 = cast(%328, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %330 = reshape(%329, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %331 = @func_221(%330) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %332 = cast(%var_1602, dtype="float64") /* ty=Tensor[(11, 6, 3), float64] */;
  %333 = tan(%332) /* ty=Tensor[(11, 6, 3), float64] */;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
  %335 = %311.3;
  %336 = %312.0;
  %337 = %320.2;
  %338 = %324.0;
  %339 = %327.1;
  %340 = %331.1;
  %341 = erf(%334) /* ty=Tensor[(11, 6, 3), float32] */;
  (%328, %var_1610, %335, meta[relay.Constant][16] /* ty=Tensor[(13, 10), int64] */, %var_1623, %336, %321, meta[relay.Constant][17] /* ty=Tensor[(96), float64] */, %337, %338, %339, %340, %341)
}

def @func_7029() -> (Tensor[(126), int8],) {
  @func_7027() /* ty=(Tensor[(126), int8],) */
}

def @func_12020(%var_12018: Tensor[(7, 11, 14), float32]) -> Tensor[(7, 11, 14), float32] {
  @func_12017(%var_12018) /* ty=Tensor[(7, 11, 14), float32] */
}

def @func_5169(%var_5156: Tensor[(7, 11, 15), float32]) -> (Tensor[(7, 11, 15), float32],) {
  %342 = cast(%var_5156, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
  %343 = log2(%342) /* ty=Tensor[(7, 11, 15), float32] */;
  (%343,)
}

def @func_6623() -> (Tensor[(126), int8],) {
  %346 = fn () -> (Tensor[(126), int8],) {
    %344 = @func_5684() /* ty=(Tensor[(126), int8],) */;
    %345 = %344.0;
    (%345,)
  };
  %346() /* ty=(Tensor[(126), int8],) */
}

def @func_12179() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
  %353 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
    %347 = @func_3066() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %348 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
    %349 = @func_11370() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %350 = %347.0;
    %351 = %348.0;
    %352 = %349.0;
    (%350, %351, %352)
  };
  %353() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) */
}

def @func_1740(%var_1737: Tensor[(11, 6, 3), float64], %var_1738: Tensor[(104), float32], %var_1739: Tensor[(650), int64]) -> (Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) {
  @func_1735(%var_1737, %var_1738, %var_1739) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */
}

def @func_13906() -> Tensor[(126), int8] {
  @func_13904() /* ty=Tensor[(126), int8] */
}

def @func_3258() -> Tensor[(3, 14, 3), uint32] {
  @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_6329() -> (Tensor[(126), int8],) {
  @func_6327() /* ty=(Tensor[(126), int8],) */
}

def @func_4915() -> Tensor[(3, 14, 3), uint32] {
  @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_5477() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float64]) {
  %360 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float64]) {
    %354 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %355 = @func_2443() /* ty=(Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) */;
    %356 = %355.0;
    %357 = cast(%356, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
    %358 = %354.0;
    %359 = acosh(%357) /* ty=Tensor[(3, 14, 3), float64] */;
    (%358, %359)
  };
  %360() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float64]) */
}

def @func_3354() -> (Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) {
  %361 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %362 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %363 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
  %364 = %361.2;
  %365 = %362.0;
  (%363, %364, %365)
}

def @func_9377() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  @func_9375() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_11081() -> (Tensor[(8, 13, 3), float32],) {
  @func_11079() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_276(%var_247: Tensor[(4, 13, 2), float32]) -> (Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) {
  %366 = cast(meta[relay.Constant][18] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
  %367 = reshape(%366, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %368 = @func_221(%367) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %369 = cast(%var_247, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %370 = cosh(%369) /* ty=Tensor[(4, 13, 2), float32] */;
  %371 = cast(%370, dtype="float32") /* ty=Tensor[(4, 13, 2), float32] */;
  %372 = cast(meta[relay.Constant][18] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
  %373 = reshape(%372, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %374 = @func_221(%373) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %375 = %368.1;
  %376 = cast(%375, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %377 = reshape(%376, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %378 = @func_221(%377) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %379 = cos(%371) /* ty=Tensor[(4, 13, 2), float32] */;
  %380 = %374.0;
  %381 = %378.0;
  (%375, meta[relay.Constant][18] /* ty=Tensor[(126), int8] */, %379, %380, %381)
}

def @func_10467() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  @func_10465() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_5172(%var_5170: Tensor[(7, 11, 15), float32]) -> (Tensor[(7, 11, 15), float32],) {
  @func_5169(%var_5170) /* ty=(Tensor[(7, 11, 15), float32],) */
}

def @func_11024() -> Tensor[(3, 14, 3), float32] {
  %382 = @func_6677() /* ty=(Tensor[(3, 14, 3), float32],) */;
  %382.0
}

def @func_9623(%var_9619: uint8, %var_9620: Tensor[(2, 6, 4), uint8], %var_9621: Tensor[(33, 6), float64], %var_9622: Tensor[(104), float32]) -> (Tensor[(2, 6, 4), uint8], Tensor[(13, 10), int64], Tensor[(33, 6), float64], Tensor[(104), float32], Tensor[(650), float32], Tensor[(8, 13, 3), float32]) {
  @func_9617(%var_9619, %var_9620, %var_9621, %var_9622) /* ty=(Tensor[(2, 6, 4), uint8], Tensor[(13, 10), int64], Tensor[(33, 6), float64], Tensor[(104), float32], Tensor[(650), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_4413() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) {
  %383 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %384 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %385 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 12), float64] */;
  %386 = reshape(%385, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %387 = @func_785(%386) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %388 = %383.0;
  %389 = %384.1;
  %390 = %387.0;
  (%388, %389, %390, meta[relay.Constant][19] /* ty=Tensor[(8, 12), float64] */)
}

def @func_10627() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %391 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %392 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %393 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  %394 = %391.0;
  %395 = %392.0;
  (%393, %394, %395)
}

def @func_9999(%var_9976: Tensor[(8, 7, 10), float64]) -> (Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 7, 10), float64]) {
  %396 = cast(meta[relay.Constant][20] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %397 = reshape(%396, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %398 = @func_7560(%397) /* ty=(Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) */;
  %399 = cast(%var_9976, dtype="float64") /* ty=Tensor[(8, 7, 10), float64] */;
  %400 = asin(%399) /* ty=Tensor[(8, 7, 10), float64] */;
  %401 = cast(%var_9976, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="float32") /* ty=Tensor[(8, 7, 10), float32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %405 = floor_mod(%403, %404) /* ty=Tensor[(8, 7, 10), float32] */;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(8, 7, 10), float64] */;
  %407 = %398.0;
  %408 = acos(%406) /* ty=Tensor[(8, 7, 10), float64] */;
  (%407, meta[relay.Constant][20] /* ty=Tensor[(104), float32] */, %408)
}

def @func_2922() -> (Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) {
  @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_10236() -> (Tensor[(8, 13, 3), float32], Tensor[(352), float32]) {
  %409 = @func_10022() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %410 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %411 = %409.1;
  %412 = %410.5;
  (%411, %412)
}

def @func_8876(%var_8875: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), float32]) {
  %426 = fn (%var_8863: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), float32]) {
    %413 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %414 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %415 = cast(meta[relay.Constant][21] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %416 = cast(meta[relay.Constant][21] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %417 = cast(%var_8863, dtype="float32") /* ty=Tensor[(104), float32] */;
    %418 = reshape(%415, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %419 = reshape(%416, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %420 = reshape(%417, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %421 = @func_8570(%418, %419, %420) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) */;
    %422 = %413.2;
    %423 = %414.0;
    %424 = %421.4;
    %425 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
    (%422, %423, %424, meta[relay.Constant][21] /* ty=Tensor[(650), int64] */, %var_8863, %425)
  };
  %426(%var_8875) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_4415() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) {
  @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */
}

def @func_2097() -> (Tensor[(8, 13, 3), float32],) {
  %429 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %427 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %428 = %427.0;
    (%428,)
  };
  %429() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_13187(%var_13185: Tensor[(560), float64]) -> (Tensor[(126), int8], Tensor[(104), float32], Tensor[(560), float64], Tensor[(126), int8]) {
  @func_13184(%var_13185) /* ty=(Tensor[(126), int8], Tensor[(104), float32], Tensor[(560), float64], Tensor[(126), int8]) */
}

def @func_2443() -> (Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) {
  %430 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %431 = %430.1;
  %432 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  (%431, %432)
}

def @func_6872(%var_6870: Tensor[(8, 13, 3), float32]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), int16]) {
  @func_6869(%var_6870) /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), int16]) */
}

def @func_13581() -> (Tensor[(126), int8],) {
  @func_13579() /* ty=(Tensor[(126), int8],) */
}

def @func_4054(%var_4051: Tensor[(99, 2), float64], %var_4052: Tensor[(650), int64], %var_4053: Tensor[(99, 2), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) {
  %451 = fn (%var_4007: Tensor[(99, 2), float64], %var_4009: Tensor[(650), int64], %var_4046: Tensor[(99, 2), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) {
    %433 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %434 = cast(%var_4007, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
    %435 = cast(meta[relay.Constant][22] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
    %436 = cast(%var_4009, dtype="int64") /* ty=Tensor[(650), int64] */;
    %437 = reshape(%434, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
    %438 = reshape(%435, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %439 = reshape(%436, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %440 = @func_1735(%437, %438, %439) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
    %441 = cast(%var_4007, dtype="float32") /* ty=Tensor[(99, 2), float32] */;
    %442 = cos(%441) /* ty=Tensor[(99, 2), float32] */;
    %443 = cast(%var_4046, dtype="bool") /* ty=Tensor[(99, 2), bool] */;
    %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(2), int32] */;
    %445 = cast(%442, dtype="bool") /* ty=Tensor[(99, 2), bool] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %447 = %433.1;
    %448 = %440.9;
    %449 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
    %450 = equal(%445, %446) /* ty=Tensor[(99, 2), bool] */;
    (%447, %448, meta[relay.Constant][22] /* ty=Tensor[(104), float32] */, %var_4009, %449, %450)
  };
  %451(%var_4051, %var_4052, %var_4053) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) */
}

def @func_10777(%var_10775: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(640), int8], Tensor[(1, 1890), float32], Tensor[(198), float64], Tensor[(650), int64], Tensor[(352), float32], Tensor[(3, 14, 3), bool]) {
  @func_10774(%var_10775) /* ty=(Tensor[(126), int8], Tensor[(640), int8], Tensor[(1, 1890), float32], Tensor[(198), float64], Tensor[(650), int64], Tensor[(352), float32], Tensor[(3, 14, 3), bool]) */
}

def @func_9506() -> (Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(104), float32], Tensor[(40, 16), int8], Tensor[(10, 2, 3), float32], Tensor[(8, 13, 3), float32]) {
  @func_9504() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(104), float32], Tensor[(40, 16), int8], Tensor[(10, 2, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_5642() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %456 = fn () -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
    %452 = @func_2390() /* ty=(Tensor[(126), int8],) */;
    %453 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
    %454 = %452.0;
    %455 = %453.1;
    (%454, %455)
  };
  %456() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_12284() -> Tensor[(3, 14, 3), float32] {
  %457 = fn () -> Tensor[(3, 14, 3), float32] {
    @func_12272() /* ty=Tensor[(3, 14, 3), float32] */
  };
  %457() /* ty=Tensor[(3, 14, 3), float32] */
}

def @func_7468(%var_7467: Tensor[(3, 15, 15), float32]) -> (Tensor[(3, 15, 15), uint8],) {
  %465 = fn (%var_7449: Tensor[(3, 15, 15), float32]) -> (Tensor[(3, 15, 15), uint8],) {
    %458 = cast(%var_7449, dtype="float32") /* ty=Tensor[(3, 15, 15), float32] */;
    %459 = acos(%458) /* ty=Tensor[(3, 15, 15), float32] */;
    %460 = cast(%var_7449, dtype="uint8") /* ty=Tensor[(3, 15, 15), uint8] */;
    %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%459, dtype="uint8") /* ty=Tensor[(3, 15, 15), uint8] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %464 = subtract(%462, %463) /* ty=Tensor[(3, 15, 15), uint8] */;
    (%464,)
  };
  %465(%var_7467) /* ty=(Tensor[(3, 15, 15), uint8],) */
}

def @func_9721(%var_9719: Tensor[(104, 1), float32], %var_9720: Tensor[(640), int8]) -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), bool], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(104, 126), int64], Tensor[(8, 13, 3), bool]) {
  @func_9717(%var_9719, %var_9720) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), bool], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(104, 126), int64], Tensor[(8, 13, 3), bool]) */
}

def @func_13819(%var_13772: Tensor[(24, 2), uint8]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(13, 10), int64], uint8, Tensor[(24, 2), uint8], Tensor[(198), float64], Tensor[(104, 1), float32], Tensor[(3, 14, 3), float64]) {
  %466 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %467 = cast(meta[relay.Constant][23] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %468 = cast(%var_13772, dtype="uint8") /* ty=Tensor[(24, 2), uint8] */;
  %469 = cast(meta[relay.Constant][24] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %470 = cast(meta[relay.Constant][25] /* ty=Tensor[(104, 1), float32] */, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
  %471 = reshape(%467, newshape=[]) /* ty=uint8 */;
  %472 = reshape(%468, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint8] */;
  %473 = reshape(%469, newshape=[33, 6]) /* ty=Tensor[(33, 6), float64] */;
  %474 = reshape(%470, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %475 = @func_9617(%471, %472, %473, %474) /* ty=(Tensor[(2, 6, 4), uint8], Tensor[(13, 10), int64], Tensor[(33, 6), float64], Tensor[(104), float32], Tensor[(650), float32], Tensor[(8, 13, 3), float32]) */;
  %476 = @func_9193() /* ty=(Tensor[(3, 14, 3), float64],) */;
  %477 = @func_9173() /* ty=Tensor[(8, 13, 3), float32] */;
  %478 = %466.1;
  %479 = %475.1;
  %480 = %476.0;
  (%477, %478, %479, meta[relay.Constant][23] /* ty=uint8 */, %var_13772, meta[relay.Constant][24] /* ty=Tensor[(198), float64] */, meta[relay.Constant][25] /* ty=Tensor[(104, 1), float32] */, %480)
}

def @func_14177() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %481 = @func_11370() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %482 = @func_3217() /* ty=(Tensor[(126), int8],) */;
  %483 = %481.0;
  %484 = %482.0;
  (%483, %484)
}

def @func_13334() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %487 = fn () -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
    %485 = @func_4102() /* ty=Tensor[(126), int8] */;
    %486 = @func_11976() /* ty=Tensor[(8, 13, 3), float32] */;
    (%485, %486)
  };
  %487() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_12273() -> Tensor[(3, 14, 3), float32] {
  %489 = fn () -> Tensor[(3, 14, 3), float32] {
    %488 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
    %488.0
  };
  %489() /* ty=Tensor[(3, 14, 3), float32] */
}

def @func_9766(%var_9765: Tensor[(1155), float32]) -> (Tensor[(3, 14, 3), float64], Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(126), int8]) {
  %502 = fn (%var_9756: Tensor[(1155), float32]) -> (Tensor[(3, 14, 3), float64], Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(126), int8]) {
    %490 = @func_9193() /* ty=(Tensor[(3, 14, 3), float64],) */;
    %491 = %490.0;
    %492 = cast(%491, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
    %493 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
    %494 = cast(%var_9756, dtype="float32") /* ty=Tensor[(1155), float32] */;
    %495 = reshape(%494, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float32] */;
    %496 = @func_5169(%495) /* ty=(Tensor[(7, 11, 15), float32],) */;
    %497 = @func_6135() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
    %498 = log2(%492) /* ty=Tensor[(3, 14, 3), float64] */;
    %499 = %493.2;
    %500 = %496.0;
    %501 = %497.0;
    (%498, %499, %500, %var_9756, %501)
  };
  %502(%var_9765) /* ty=(Tensor[(3, 14, 3), float64], Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(126), int8]) */
}

def @func_723(%var_721: Tensor[(10, 1, 13), int64], %var_722: Tensor[(10, 5, 13), int64]) -> (Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) {
  @func_719(%var_721, %var_722) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */
}

def @func_11939() -> (Tensor[(8, 13, 3), float32],) {
  %504 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %503 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
    (%503,)
  };
  %504() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_2119() -> Tensor[(8, 13, 3), float32] {
  %506 = fn () -> Tensor[(8, 13, 3), float32] {
    %505 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %505.0
  };
  %506() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_12017(%var_12003: Tensor[(7, 11, 14), float32]) -> Tensor[(7, 11, 14), float32] {
  %507 = cast(%var_12003, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
  log10(%507) /* ty=Tensor[(7, 11, 14), float32] */
}

def @func_5926(%var_5924: Tensor[(8, 13, 3), float32], %var_5925: Tensor[(8, 13, 3), float32]) -> (Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), int16]) {
  %529 = fn (%var_5879: Tensor[(8, 13, 3), float32], %var_5895: Tensor[(8, 13, 3), float32]) -> (Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), int16]) {
    %508 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
    %509 = cast(%var_5895, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %510 = shape_of(%var_5879, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%var_5879, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %513 = @func_3354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) */;
    %514 = %513.2;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %516 = rsqrt(%515) /* ty=Tensor[(8, 13, 3), float32] */;
    %517 = cast(%var_5879, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %518 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %519 = cast(%514, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %521 = logical_or(%519, %520) /* ty=Tensor[(8, 13, 3), bool] */;
    %522 = cast(%521, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
    %523 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %524 = cast(%516, dtype="int16") /* ty=Tensor[(8, 13, 3), int16] */;
    %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %526 = %508.0;
    %527 = greater(%511, %512) /* ty=Tensor[(8, 13, 3), bool] */;
    %528 = subtract(%524, %525) /* ty=Tensor[(8, 13, 3), int16] */;
    (%526, %527, %528)
  };
  %529(%var_5924, %var_5925) /* ty=(Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), int16]) */
}

def @func_13305(%var_13304: Tensor[(2, 52), float32]) -> (Tensor[(126), int8], Tensor[(99, 2), float32], Tensor[(2, 52), uint16], Tensor[(26, 4), float32]) {
  %545 = fn (%var_13293: Tensor[(2, 52), float32]) -> (Tensor[(126), int8], Tensor[(99, 2), float32], Tensor[(2, 52), uint16], Tensor[(26, 4), float32]) {
    %530 = @func_8024() /* ty=(Tensor[(126), int8],) */;
    %531 = cast(%var_13293, dtype="float32") /* ty=Tensor[(2, 52), float32] */;
    %532 = reshape(%531, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %533 = @func_7560(%532) /* ty=(Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) */;
    %534 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 52), float32] */, dtype="uint16") /* ty=Tensor[(2, 52), uint16] */;
    %535 = shape_of(%var_13293, dtype="int32") /* ty=Tensor[(2), int32] */;
    %536 = cast(%var_13293, dtype="uint16") /* ty=Tensor[(2, 52), uint16] */;
    %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %538 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 52), float32] */, dtype="float32") /* ty=Tensor[(2, 52), float32] */;
    %539 = reshape(%538, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
    %540 = @func_4134(%539) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) */;
    %541 = %530.0;
    %542 = %533.5;
    %543 = add(%536, %537) /* ty=Tensor[(2, 52), uint16] */;
    %544 = %540.2;
    (%541, %542, %543, %544)
  };
  %545(%var_13304) /* ty=(Tensor[(126), int8], Tensor[(99, 2), float32], Tensor[(2, 52), uint16], Tensor[(26, 4), float32]) */
}

def @func_2999() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %550 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
    %546 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %547 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %548 = %546.0;
    %549 = %547.0;
    (%548, %549)
  };
  %550() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_14020() -> (Tensor[(8, 13, 3), float32],) {
  %552 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %551 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
    (%551,)
  };
  %552() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_6293(%var_6276: Tensor[(96), float64]) -> (Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) {
  %553 = @func_6266() /* ty=(Tensor[(126), int8], Tensor[(8, 12), float64]) */;
  %554 = cast(%var_6276, dtype="float64") /* ty=Tensor[(96), float64] */;
  %555 = reshape(%554, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %556 = @func_785(%555) /* ty=(Tensor[(6, 2, 8), float64],) */;
  %557 = %553.0;
  %558 = %556.0;
  %559 = @func_5282() /* ty=Tensor[(8, 13, 3), float32] */;
  (%557, %558, %var_6276, %559)
}

def @func_12604() -> Tensor[(3, 14, 3), float32] {
  %560 = @func_6677() /* ty=(Tensor[(3, 14, 3), float32],) */;
  %560.0
}

def @func_4647(%var_4645: Tensor[(320, 2), int8]) -> (Tensor[(8, 13, 3), float32], Tensor[(320, 2), int8], Tensor[(8, 10, 8), float64]) {
  @func_4644(%var_4645) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(320, 2), int8], Tensor[(8, 10, 8), float64]) */
}

def @func_7848() -> (Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) {
  %561 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %562 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %563 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %564 = cast(meta[relay.Constant][27] /* ty=Tensor[(26, 4), float32] */, dtype="float32") /* ty=Tensor[(26, 4), float32] */;
  %565 = reshape(%564, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %566 = @func_2075(%565) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %567 = %561.0;
  %568 = @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */;
  %569 = %562.1;
  %570 = %563.2;
  %571 = %566.3;
  (%567, %568, %569, %570, %571, meta[relay.Constant][27] /* ty=Tensor[(26, 4), float32] */)
}

def @func_10629() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  @func_10627() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_11450(%var_11425: int64) -> (Tensor[(1, 15, 2), int64], Tensor[(1, 15, 2), bool]) {
  %572 = cast(%var_11425, dtype="int64") /* ty=int64 */;
  %573 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 15, 2), int64] */, dtype="int64") /* ty=Tensor[(1, 15, 2), int64] */;
  %574 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 15, 2), int64] */, dtype="float32") /* ty=Tensor[(1, 15, 2), float32] */;
  %575 = log10(%574) /* ty=Tensor[(1, 15, 2), float32] */;
  %576 = cast(%575, dtype="bool") /* ty=Tensor[(1, 15, 2), bool] */;
  %577 = cast(%var_11425, dtype="bool") /* ty=bool */;
  %578 = right_shift(%572, %573) /* ty=Tensor[(1, 15, 2), int64] */;
  %579 = logical_or(%576, %577) /* ty=Tensor[(1, 15, 2), bool] */;
  (%578, %579)
}

def @func_14555(%var_14553: Tensor[(640), int8], %var_14554: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(640), bool], Tensor[(640), int8], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) {
  %595 = fn (%var_14529: Tensor[(640), int8], %var_14530: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(640), bool], Tensor[(640), int8], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) {
    %580 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
    %581 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
    %582 = @func_7638() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %583 = cast(%var_14529, dtype="int8") /* ty=Tensor[(640), int8] */;
    %584 = cast(%var_14530, dtype="int64") /* ty=Tensor[(650), int64] */;
    %585 = reshape(%583, newshape=[640]) /* ty=Tensor[(640), int8] */;
    %586 = reshape(%584, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %587 = @func_3397(%585, %586) /* ty=(Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
    %588 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
    %589 = %580.0;
    %590 = %581.1;
    %591 = @func_11024() /* ty=Tensor[(3, 14, 3), float32] */;
    %592 = %582.0;
    %593 = %587.0;
    %594 = %588.0;
    (%589, %590, %591, %592, %593, %var_14529, %var_14530, %594)
  };
  %595(%var_14553, %var_14554) /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(640), bool], Tensor[(640), int8], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) */
}

def @func_14609() -> Tensor[(4, 8, 14), float32] {
  %597 = fn () -> Tensor[(4, 8, 14), float32] {
    %596 = @func_9861() /* ty=(Tensor[(4, 8, 14), float32],) */;
    %596.0
  };
  %597() /* ty=Tensor[(4, 8, 14), float32] */
}

def @func_10881() -> (Tensor[(9, 14, 1), float32],) {
  %598 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %599 = sqrt(%598) /* ty=Tensor[(9, 14, 1), float32] */;
  (%599,)
}

def @func_7075() -> (Tensor[(1, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(7, 11, 15), float32], Tensor[(1155), float32]) {
  %610 = fn () -> (Tensor[(1, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(7, 11, 15), float32], Tensor[(1155), float32]) {
    %600 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 13, 3), float32] */;
    %601 = @func_2390() /* ty=(Tensor[(126), int8],) */;
    %602 = @func_6561() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
    %603 = cast(meta[relay.Constant][31] /* ty=Tensor[(1155), float32] */, dtype="float32") /* ty=Tensor[(1155), float32] */;
    %604 = reshape(%603, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float32] */;
    %605 = @func_5169(%604) /* ty=(Tensor[(7, 11, 15), float32],) */;
    %606 = atan(%600) /* ty=Tensor[(1, 13, 3), float32] */;
    %607 = %601.0;
    %608 = %602.1;
    %609 = %605.0;
    (%606, %607, %608, %609, meta[relay.Constant][31] /* ty=Tensor[(1155), float32] */)
  };
  %610() /* ty=(Tensor[(1, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(7, 11, 15), float32], Tensor[(1155), float32]) */
}

def @func_6831(%var_6807: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8]) {
  %611 = cast(meta[relay.Constant][32] /* ty=Tensor[(130), int64] */, dtype="int64") /* ty=Tensor[(130), int64] */;
  %612 = cast(%var_6807, dtype="int64") /* ty=Tensor[(650), int64] */;
  %613 = reshape(%611, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %614 = reshape(%612, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %615 = @func_719(%613, %614) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %616 = @func_4317() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
  %617 = @func_2192() /* ty=Tensor[(126), int8] */;
  %618 = %615.2;
  %619 = %616.1;
  (%617, %618, meta[relay.Constant][32] /* ty=Tensor[(130), int64] */, %var_6807, %619)
}

def @func_8227() -> Tensor[(126), int8] {
  %620 = @func_5935() /* ty=(Tensor[(126), int8],) */;
  %620.0
}

def @func_3356() -> (Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) {
  @func_3354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) */
}

def @func_221(%var_197: Tensor[(3, 14, 3), int8]) -> (Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) {
  %621 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 14, 3), int8] */, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %622 = shape_of(%var_197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%var_197, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 14, 3), int8] */, dtype="uint32") /* ty=Tensor[(3, 14, 3), uint32] */;
  %626 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(3, 14, 3), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 14, 3), int8] */, dtype="uint32") /* ty=Tensor[(3, 14, 3), uint32] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %629 = less(%623, %624) /* ty=Tensor[(3, 14, 3), bool] */;
  %630 = minimum(%627, %628) /* ty=Tensor[(3, 14, 3), uint32] */;
  (%629, %630)
}

def @func_12598() -> (Tensor[(3, 14, 3), float64],) {
  %633 = fn () -> (Tensor[(3, 14, 3), float64],) {
    %631 = @func_5476() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), float64]) */;
    %632 = %631.1;
    (%632,)
  };
  %633() /* ty=(Tensor[(3, 14, 3), float64],) */
}

def @func_2362(%var_2361: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(104), float32]) {
  %642 = fn (%var_2347: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(104), float32]) {
    %634 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %635 = %634.0;
    %636 = cast(%635, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %637 = cast(%var_2347, dtype="float32") /* ty=Tensor[(104), float32] */;
    %638 = reshape(%637, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
    %639 = @func_276(%638) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
    %640 = log10(%636) /* ty=Tensor[(8, 13, 3), float32] */;
    %641 = %639.4;
    (%640, %641, %var_2347)
  };
  %642(%var_2361) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(104), float32]) */
}

def @func_4671() -> (Tensor[(126), int8],) {
  @func_4669() /* ty=(Tensor[(126), int8],) */
}

def @func_5982(%var_5981: Tensor[(14, 9, 7), float32]) -> (Tensor[(14, 9, 7), float32],) {
  %645 = fn (%var_5974: Tensor[(14, 9, 7), float32]) -> (Tensor[(14, 9, 7), float32],) {
    %643 = cast(%var_5974, dtype="float32") /* ty=Tensor[(14, 9, 7), float32] */;
    %644 = sigmoid(%643) /* ty=Tensor[(14, 9, 7), float32] */;
    (%644,)
  };
  %645(%var_5981) /* ty=(Tensor[(14, 9, 7), float32],) */
}

def @func_13886() -> (Tensor[(126), int8],) {
  %648 = fn () -> (Tensor[(126), int8],) {
    %646 = @func_10465() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %647 = %646.0;
    (%647,)
  };
  %648() /* ty=(Tensor[(126), int8],) */
}

def @func_11848(%var_11835: Tensor[(9, 8, 12), float64]) -> (Tensor[(9, 8, 12), float64],) {
  %649 = cast(%var_11835, dtype="float64") /* ty=Tensor[(9, 8, 12), float64] */;
  %650 = rsqrt(%649) /* ty=Tensor[(9, 8, 12), float64] */;
  (%650,)
}

def @func_6082() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) {
  %651 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %652 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %653 = %651.0;
  %654 = %652.0;
  %655 = @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%653, %654, %655)
}

def @func_8694() -> (Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64]) {
  @func_8692() /* ty=(Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64]) */
}

def @func_13898() -> Tensor[(8, 13, 3), float32] {
  %656 = fn () -> Tensor[(8, 13, 3), float32] {
    @func_3886() /* ty=Tensor[(8, 13, 3), float32] */
  };
  %656() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_9142(%var_9140: Tensor[(96), float64], %var_9141: float32) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(126), int8], float32, Tensor[(126), int8]) {
  %669 = fn (%var_9111: Tensor[(96), float64], %var_9114: float32) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(126), int8], float32, Tensor[(126), int8]) {
    %657 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %658 = cast(%var_9111, dtype="float64") /* ty=Tensor[(96), float64] */;
    %659 = reshape(%658, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %660 = @func_8714(%659) /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(96), float64]) */;
    %661 = cast(%var_9114, dtype="float32") /* ty=float32 */;
    %662 = reshape(%661, newshape=[]) /* ty=float32 */;
    %663 = @func_4389(%662) /* ty=(Tensor[(11, 2, 1), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
    %664 = @func_6434() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %665 = %657.0;
    %666 = %660.1;
    %667 = %663.1;
    %668 = %664.0;
    (%665, %666, %var_9111, %667, %var_9114, %668)
  };
  %669(%var_9140, %var_9141) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(126), int8], float32, Tensor[(126), int8]) */
}

def @func_10774(%var_10736: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(640), int8], Tensor[(1, 1890), float32], Tensor[(198), float64], Tensor[(650), int64], Tensor[(352), float32], Tensor[(3, 14, 3), bool]) {
  %670 = @func_4669() /* ty=(Tensor[(126), int8],) */;
  %671 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1890), float32] */, dtype="float32") /* ty=Tensor[(1, 1890), float32] */;
  %672 = cast(meta[relay.Constant][36] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %673 = cast(%var_10736, dtype="int64") /* ty=Tensor[(650), int64] */;
  %674 = reshape(%671, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
  %675 = reshape(%672, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %676 = reshape(%673, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %677 = @func_3555(%674, %675, %676) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
  %678 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %679 = @func_6677() /* ty=(Tensor[(3, 14, 3), float32],) */;
  %680 = %679.0;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(3, 14, 3), float32] */;
  %682 = cos(%681) /* ty=Tensor[(3, 14, 3), float32] */;
  %683 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 14, 3), float32] */, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %687 = %670.0;
  %688 = %677.2;
  %689 = %678.5;
  %690 = less_equal(%685, %686) /* ty=Tensor[(3, 14, 3), bool] */;
  (%687, %688, meta[relay.Constant][35] /* ty=Tensor[(1, 1890), float32] */, meta[relay.Constant][36] /* ty=Tensor[(198), float64] */, %var_10736, %689, %690)
}

def @func_9833() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  @func_9831() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_11530() -> (Tensor[(352), float32], Tensor[(126), int8]) {
  %691 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
  %692 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
  %693 = %691.5;
  %694 = %692.1;
  (%693, %694)
}

def @func_11758() -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 10, 8), int16], Tensor[(8, 13, 3), float32]) {
  @func_11756() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 10, 8), int16], Tensor[(8, 13, 3), float32]) */
}

def @func_785(%var_774: Tensor[(6, 2, 8), float64]) -> (Tensor[(6, 2, 8), float64],) {
  %695 = cast(%var_774, dtype="float64") /* ty=Tensor[(6, 2, 8), float64] */;
  %696 = atanh(%695) /* ty=Tensor[(6, 2, 8), float64] */;
  (%696,)
}

def @func_8575(%var_8572: Tensor[(650), int64], %var_8573: Tensor[(650), int64], %var_8574: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) {
  @func_8570(%var_8572, %var_8573, %var_8574) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) */
}

def @func_9194() -> (Tensor[(3, 14, 3), float64],) {
  %701 = fn () -> (Tensor[(3, 14, 3), float64],) {
    %697 = @func_2443() /* ty=(Tensor[(3, 14, 3), bool], Tensor[(8, 13, 3), float32]) */;
    %698 = %697.0;
    %699 = cast(%698, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
    %700 = atan(%699) /* ty=Tensor[(3, 14, 3), float64] */;
    (%700,)
  };
  %701() /* ty=(Tensor[(3, 14, 3), float64],) */
}

def @func_14179() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  @func_14177() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */
}

def @func_7262() -> Tensor[(126), int8] {
  %702 = @func_7027() /* ty=(Tensor[(126), int8],) */;
  %702.0
}

def @func_6700(%var_6698: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(104), float32]) {
  @func_6697(%var_6698) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(104), float32]) */
}

def @func_13371() -> (Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(126), int8]) {
  %709 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(126), int8]) {
    %703 = @func_4317() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
    %704 = @func_6007() /* ty=(Tensor[(10, 2, 3), float64],) */;
    %705 = @func_11273() /* ty=(Tensor[(126), int8],) */;
    %706 = %703.0;
    %707 = %704.0;
    %708 = %705.0;
    (%706, %707, %708)
  };
  %709() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(126), int8]) */
}

def @func_279(%var_277: Tensor[(4, 13, 2), float32]) -> (Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) {
  @func_276(%var_277) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */
}

def @func_788(%var_786: Tensor[(6, 2, 8), float64]) -> (Tensor[(6, 2, 8), float64],) {
  @func_785(%var_786) /* ty=(Tensor[(6, 2, 8), float64],) */
}

def @func_5538() -> Tensor[(126), int8] {
  @func_5536() /* ty=Tensor[(126), int8] */
}

def @func_7264() -> Tensor[(126), int8] {
  @func_7262() /* ty=Tensor[(126), int8] */
}

def @func_3162() -> Tensor[(8, 13, 3), float32] {
  %710 = @func_3066() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %710.0
}

def @func_7954() -> (Tensor[(126), int8],) {
  @func_7952() /* ty=(Tensor[(126), int8],) */
}

def @func_6327() -> (Tensor[(126), int8],) {
  %711 = @func_4317() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */;
  %712 = %711.1;
  (%712,)
}

def @func_9903() -> (Tensor[(126), int8],) {
  @func_9901() /* ty=(Tensor[(126), int8],) */
}

def @func_2742(%var_2741: Tensor[(8, 10, 8), int8]) -> (Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) {
  %728 = fn (%var_2710: Tensor[(8, 10, 8), int8]) -> (Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) {
    %713 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
    %714 = %713.1;
    %715 = cast(%var_2710, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
    %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %717 = cast(%714, dtype="bool") /* ty=Tensor[(8, 10, 8), bool] */;
    %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %719 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %720 = cast(%var_2710, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
    %721 = cast(meta[relay.Constant][38] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
    %722 = reshape(%721, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %723 = @func_2075(%722) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
    %724 = logical_or(%717, %718) /* ty=Tensor[(8, 10, 8), bool] */;
    %725 = %719.0;
    %726 = cos(%720) /* ty=Tensor[(8, 10, 8), float64] */;
    %727 = %723.1;
    (%724, %725, %726, %727, meta[relay.Constant][38] /* ty=Tensor[(104), float32] */)
  };
  %728(%var_2741) /* ty=(Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */
}

def @func_8570(%var_8498: Tensor[(650), int64], %var_8500: Tensor[(650), int64], %var_8523: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) {
  %729 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %730 = @func_3217() /* ty=(Tensor[(126), int8],) */;
  %731 = cast(meta[relay.Constant][39] /* ty=Tensor[(130), int64] */, dtype="int64") /* ty=Tensor[(130), int64] */;
  %732 = cast(%var_8498, dtype="int64") /* ty=Tensor[(650), int64] */;
  %733 = reshape(%731, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %734 = reshape(%732, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %735 = @func_719(%733, %734) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %736 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %737 = %735.2;
  %738 = cast(%737, dtype="int8") /* ty=Tensor[(8, 10, 8), int8] */;
  %739 = cast(%var_8500, dtype="bool") /* ty=Tensor[(650), bool] */;
  %740 = shape_of(%var_8498, dtype="int32") /* ty=Tensor[(1), int32] */;
  %741 = cast(%var_8498, dtype="bool") /* ty=Tensor[(650), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?), bool] */;
  %743 = less(%741, %742) /* ty=Tensor[(650), bool] */;
  %744 = cast(%743, dtype="int64") /* ty=Tensor[(650), int64] */;
  %745 = reshape(%738, newshape=[640]) /* ty=Tensor[(640), int8] */;
  %746 = reshape(%744, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %747 = @func_3397(%745, %746) /* ty=(Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %748 = cast(meta[relay.Constant][40] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %749 = cast(%var_8523, dtype="float32") /* ty=Tensor[(104), float32] */;
  %750 = %747.3;
  %751 = cast(%750, dtype="int64") /* ty=Tensor[(650), int64] */;
  %752 = reshape(%748, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %753 = reshape(%749, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %754 = reshape(%751, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %755 = @func_1735(%752, %753, %754) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %756 = cast(%743, dtype="float64") /* ty=Tensor[(650), float64] */;
  %757 = @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */;
  %758 = %729.0;
  %759 = %730.0;
  %760 = %736.0;
  %761 = %755.8;
  %762 = @func_3886() /* ty=Tensor[(8, 13, 3), float32] */;
  %763 = sigmoid(%756) /* ty=Tensor[(650), float64] */;
  %764 = %757.1;
  (%758, %759, %737, meta[relay.Constant][39] /* ty=Tensor[(130), int64] */, %760, %750, %761, meta[relay.Constant][40] /* ty=Tensor[(198), float64] */, %var_8523, %762, %763, %764)
}

def @func_8148(%var_8147: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32]) {
  %771 = fn (%var_8137: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32]) {
    %765 = @func_6082() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) */;
    %766 = cast(%var_8137, dtype="float32") /* ty=Tensor[(104), float32] */;
    %767 = reshape(%766, newshape=[26, 4]) /* ty=Tensor[(26, 4), float32] */;
    %768 = @func_4134(%767) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(26, 4), float32]) */;
    %769 = %765.0;
    %770 = %768.1;
    (%769, %770, %var_8137)
  };
  %771(%var_8147) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32]) */
}

def @func_3555(%var_3534: Tensor[(9, 14, 15), float32], %var_3545: Tensor[(198), float64], %var_3547: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) {
  %772 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %773 = cast(%var_3534, dtype="float32") /* ty=Tensor[(9, 14, 15), float32] */;
  %774 = sinh(%773) /* ty=Tensor[(9, 14, 15), float32] */;
  %775 = cast(%var_3534, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="int16") /* ty=Tensor[(9, 14, 15), int16] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %779 = cast(%var_3545, dtype="float64") /* ty=Tensor[(198), float64] */;
  %780 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %781 = cast(%var_3547, dtype="int64") /* ty=Tensor[(650), int64] */;
  %782 = reshape(%779, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %783 = reshape(%780, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %784 = reshape(%781, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %785 = @func_1735(%782, %783, %784) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %786 = %772.0;
  %787 = cast(%786, dtype="int8") /* ty=Tensor[(126), int8] */;
  %788 = reshape(%787, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %789 = @func_221(%788) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %790 = bitwise_or(%777, %778) /* ty=Tensor[(9, 14, 15), int16] */;
  %791 = %785.2;
  %792 = %789.0;
  (%786, %790, %791, %var_3545, meta[relay.Constant][41] /* ty=Tensor[(1, 104), float32] */, %var_3547, %792)
}

def @func_1290(%var_1288: Tensor[(2, 11, 16), float32], %var_1289: Tensor[(126), int8]) -> (Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) {
  %801 = fn (%var_1274: Tensor[(2, 11, 16), float32], %var_1282: Tensor[(126), int8]) -> (Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) {
    %793 = cast(%var_1274, dtype="float32") /* ty=Tensor[(2, 11, 16), float32] */;
    %794 = cast(%var_1274, dtype="float64") /* ty=Tensor[(2, 11, 16), float64] */;
    %795 = cast(%var_1282, dtype="int8") /* ty=Tensor[(126), int8] */;
    %796 = reshape(%795, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
    %797 = @func_221(%796) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
    %798 = sinh(%793) /* ty=Tensor[(2, 11, 16), float32] */;
    %799 = acosh(%794) /* ty=Tensor[(2, 11, 16), float64] */;
    %800 = %797.1;
    (%798, %799, %800, %var_1282)
  };
  %801(%var_1288, %var_1289) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */
}

def @func_14624() -> (Tensor[(126), int8],) {
  @func_14622() /* ty=(Tensor[(126), int8],) */
}

def @func_11119(%var_11117: Tensor[(650), int64]) -> (Tensor[(4, 8, 14), float32], Tensor[(6, 2, 8), float64], Tensor[(198, 1), float64], Tensor[(650), float32]) {
  @func_11116(%var_11117) /* ty=(Tensor[(4, 8, 14), float32], Tensor[(6, 2, 8), float64], Tensor[(198, 1), float64], Tensor[(650), float32]) */
}

def @func_3256() -> Tensor[(3, 14, 3), uint32] {
  @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_6714() -> (Tensor[(11, 12, 3), int16], Tensor[(126), int8], Tensor[(104), float32]) {
  %811 = fn () -> (Tensor[(11, 12, 3), int16], Tensor[(126), int8], Tensor[(104), float32]) {
    %802 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 12, 3), int16] */, dtype="int16") /* ty=Tensor[(11, 12, 3), int16] */;
    %803 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(11, 12, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 12, 3), int16] */, dtype="int16") /* ty=Tensor[(11, 12, 3), int16] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %806 = cast(meta[relay.Constant][44] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
    %807 = reshape(%806, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
    %808 = @func_276(%807) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
    %809 = bitwise_or(%804, %805) /* ty=Tensor[(11, 12, 3), int16] */;
    %810 = %808.1;
    (%809, %810, meta[relay.Constant][44] /* ty=Tensor[(104), float32] */)
  };
  %811() /* ty=(Tensor[(11, 12, 3), int16], Tensor[(126), int8], Tensor[(104), float32]) */
}

def @func_10883() -> (Tensor[(9, 14, 1), float32],) {
  @func_10881() /* ty=(Tensor[(9, 14, 1), float32],) */
}

def @func_7027() -> (Tensor[(126), int8],) {
  %812 = @func_6408() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %813 = %812.1;
  (%813,)
}

def @func_9430() -> Tensor[(?, 9, 9), float64] {
  %814 = @func_3354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) */;
  %814.1
}

def @func_4319() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  @func_4317() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */
}

def @func_9071() -> (Tensor[(8, 13, 3), float32],) {
  @func_9069() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_12323() -> Tensor[(8, 13, 3), float32] {
  @func_12321() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_8120() -> (Tensor[(8, 13, 3), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) {
  %815 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %816 = %815.0;
  %817 = cast(%816, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
  %818 = cast(meta[relay.Constant][45] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %819 = reshape(%818, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %820 = @func_3712(%819) /* ty=(Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) */;
  %821 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %822 = @func_5684() /* ty=(Tensor[(126), int8],) */;
  %823 = cast(meta[relay.Constant][45] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %824 = reshape(%823, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %825 = @func_3712(%824) /* ty=(Tensor[(126), int8], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(126), int8]) */;
  %826 = exp(%817) /* ty=Tensor[(8, 13, 3), float64] */;
  %827 = %820.4;
  %828 = @func_4915() /* ty=Tensor[(3, 14, 3), uint32] */;
  %829 = @func_6148() /* ty=Tensor[(126), int8] */;
  %830 = %821.1;
  %831 = %822.0;
  %832 = %825.1;
  (%826, %827, meta[relay.Constant][45] /* ty=Tensor[(104), float32] */, %828, %829, %830, %831, %832)
}

def @func_13904() -> Tensor[(126), int8] {
  @func_4102() /* ty=Tensor[(126), int8] */
}

def @func_12522() -> (Tensor[(8, 13, 3), float64], Tensor[(104), float32]) {
  %837 = fn () -> (Tensor[(8, 13, 3), float64], Tensor[(104), float32]) {
    %833 = @func_9532() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(126), int8]) */;
    %834 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
    %835 = %833.0;
    %836 = %834.4;
    (%835, %836)
  };
  %837() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(104), float32]) */
}

def @func_6945() -> (Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) {
  %838 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %839 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %840 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %841 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %842 = @func_5935() /* ty=(Tensor[(126), int8],) */;
  %843 = %838.0;
  %844 = %839.0;
  %845 = %840.0;
  %846 = %841.0;
  %847 = %842.0;
  %848 = @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%843, %844, %845, %846, %847, %848)
}

def @func_6008() -> (Tensor[(10, 2, 3), float64],) {
  %851 = fn () -> (Tensor[(10, 2, 3), float64],) {
    %849 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
    %850 = tan(%849) /* ty=Tensor[(10, 2, 3), float64] */;
    (%850,)
  };
  %851() /* ty=(Tensor[(10, 2, 3), float64],) */
}

def @func_3217() -> (Tensor[(126), int8],) {
  %852 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %853 = %852.0;
  (%853,)
}

def @func_10465() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %854 = @func_6622() /* ty=(Tensor[(126), int8],) */;
  %855 = @func_3354() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(?, 9, 9), float64], Tensor[(8, 13, 3), float32]) */;
  %856 = %854.0;
  %857 = %855.0;
  (%856, %857)
}

def @func_4644(%var_4624: Tensor[(320, 2), int8]) -> (Tensor[(8, 13, 3), float32], Tensor[(320, 2), int8], Tensor[(8, 10, 8), float64]) {
  %858 = cast(%var_4624, dtype="int8") /* ty=Tensor[(320, 2), int8] */;
  %859 = reshape(%858, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %860 = @func_465(%859) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %861 = %860.0;
  %862 = cast(%861, dtype="float64") /* ty=Tensor[(8, 10, 8), float64] */;
  %863 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  %864 = tan(%862) /* ty=Tensor[(8, 10, 8), float64] */;
  (%863, %var_4624, %864)
}

def @func_4286() -> (Tensor[(8, 13, 3), float32],) {
  %867 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %865 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %866 = %865.0;
    (%866,)
  };
  %867() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_9008(%var_9005: Tensor[(1890), float32], %var_9006: Tensor[(650, 1), int64], %var_9007: Tensor[(160, 4), int8]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(650, 1), int64], Tensor[(8, 12), float64], Tensor[(8, 10, 8), int8], Tensor[(160, 4), int8]) {
  %882 = fn (%var_8958: Tensor[(1890), float32], %var_8959: Tensor[(650, 1), int64], %var_8989: Tensor[(160, 4), int8]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(650, 1), int64], Tensor[(8, 12), float64], Tensor[(8, 10, 8), int8], Tensor[(160, 4), int8]) {
    %868 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %869 = cast(%var_8958, dtype="float32") /* ty=Tensor[(1890), float32] */;
    %870 = cast(%var_8959, dtype="int64") /* ty=Tensor[(650, 1), int64] */;
    %871 = reshape(%869, newshape=[1890]) /* ty=Tensor[(1890), float32] */;
    %872 = reshape(%870, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %873 = @func_5008(%871, %872) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %874 = @func_6266() /* ty=(Tensor[(126), int8], Tensor[(8, 12), float64]) */;
    %875 = cast(%var_8989, dtype="int8") /* ty=Tensor[(160, 4), int8] */;
    %876 = reshape(%875, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
    %877 = @func_465(%876) /* ty=(Tensor[(8, 10, 8), int8],) */;
    %878 = %868.1;
    %879 = %873.1;
    %880 = %874.1;
    %881 = %877.0;
    (%878, %879, %var_8958, %var_8959, %880, %881, %var_8989)
  };
  %882(%var_9005, %var_9006, %var_9007) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(650, 1), int64], Tensor[(8, 12), float64], Tensor[(8, 10, 8), int8], Tensor[(160, 4), int8]) */
}

def @func_5685() -> (Tensor[(126), int8],) {
  %885 = fn () -> (Tensor[(126), int8],) {
    %883 = @func_2786() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %884 = %883.0;
    (%884,)
  };
  %885() /* ty=(Tensor[(126), int8],) */
}

def @func_3401(%var_3399: Tensor[(640), int8], %var_3400: Tensor[(650), int64]) -> (Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) {
  @func_3397(%var_3399, %var_3400) /* ty=(Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */
}

def @func_5282() -> Tensor[(8, 13, 3), float32] {
  %886 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
  %886.0
}

def @func_12606() -> Tensor[(3, 14, 3), float32] {
  @func_12604() /* ty=Tensor[(3, 14, 3), float32] */
}

def @func_5936() -> (Tensor[(126), int8],) {
  %889 = fn () -> (Tensor[(126), int8],) {
    %887 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %888 = %887.1;
    (%888,)
  };
  %889() /* ty=(Tensor[(126), int8],) */
}

def @func_10520(%var_10518: Tensor[(640), int8], %var_10519: Tensor[(650), int64]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(650), int64], Tensor[(198), float64], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) {
  @func_10516(%var_10518, %var_10519) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(650), int64], Tensor[(198), float64], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) */
}

def @func_5262() -> Tensor[(126), int8] {
  @func_5260() /* ty=Tensor[(126), int8] */
}

def @func_7448() -> (Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) {
  %899 = fn () -> (Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) {
    %890 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
    %891 = sigmoid(%890) /* ty=Tensor[(4, 8, 14), float32] */;
    %892 = cast(%891, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
    %893 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(4, 8, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %894 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
    %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %896 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %897 = divide(%894, %895) /* ty=Tensor[(4, 8, 14), float32] */;
    %898 = %896.0;
    (%897, %898)
  };
  %899() /* ty=(Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_6697(%var_6691: Tensor[(104), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(104), float32]) {
  %900 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %901 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %902 = cast(%var_6691, dtype="float32") /* ty=Tensor[(104), float32] */;
  %903 = reshape(%902, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %904 = @func_2075(%903) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %905 = %900.1;
  %906 = %901.0;
  %907 = %904.3;
  (%905, %906, %907, %var_6691)
}

def @func_13822(%var_13820: Tensor[(24, 2), uint8]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(13, 10), int64], uint8, Tensor[(24, 2), uint8], Tensor[(198), float64], Tensor[(104, 1), float32], Tensor[(3, 14, 3), float64]) {
  @func_13819(%var_13820) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(13, 10), int64], uint8, Tensor[(24, 2), uint8], Tensor[(198), float64], Tensor[(104, 1), float32], Tensor[(3, 14, 3), float64]) */
}

def @func_6834(%var_6832: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8]) {
  @func_6831(%var_6832) /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8]) */
}

def @func_6136() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %913 = fn () -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
    %908 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %909 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %910 = %908.1;
    %911 = %909.0;
    %912 = @func_2192() /* ty=Tensor[(126), int8] */;
    (%910, %911, %912)
  };
  %913() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */
}

def @func_11851(%var_11849: Tensor[(9, 8, 12), float64]) -> (Tensor[(9, 8, 12), float64],) {
  @func_11848(%var_11849) /* ty=(Tensor[(9, 8, 12), float64],) */
}

def @func_2920() -> (Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) {
  %914 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %915 = %914.0;
  %916 = cast(%915, dtype="int8") /* ty=Tensor[(126), int8] */;
  %917 = reshape(%916, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %918 = @func_221(%917) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %919 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
  %920 = asin(%919) /* ty=Tensor[(1, 9, 9), float64] */;
  %921 = cast(%920, dtype="bool") /* ty=Tensor[(1, 9, 9), bool] */;
  %922 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(1, 9, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %923 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 9, 9), float64] */, dtype="bool") /* ty=Tensor[(1, 9, 9), bool] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %925 = not_equal(%923, %924) /* ty=Tensor[(?, 9, 9), bool] */;
  %926 = cast(%925, dtype="float64") /* ty=Tensor[(?, 9, 9), float64] */;
  %927 = rsqrt(%926) /* ty=Tensor[(?, 9, 9), float64] */;
  %928 = cast(%925, dtype="float64") /* ty=Tensor[(?, 9, 9), float64] */;
  %929 = shape_of(%927, dtype="int32") /* ty=Tensor[(3), int32] */;
  %930 = cast(%927, dtype="float64") /* ty=Tensor[(?, 9, 9), float64] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %932 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %933 = cast(meta[relay.Constant][49] /* ty=Tensor[(352), float32] */, dtype="float32") /* ty=Tensor[(352), float32] */;
  %934 = %918.1;
  %935 = cast(%934, dtype="int8") /* ty=Tensor[(3, 14, 3), int8] */;
  %936 = reshape(%933, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float32] */;
  %937 = reshape(%935, newshape=[126]) /* ty=Tensor[(126), int8] */;
  %938 = @func_1287(%936, %937) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
  %939 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %940 = @func_2390() /* ty=(Tensor[(126), int8],) */;
  %941 = mod(%930, %931) /* ty=Tensor[(?, 9, 9), float64] */;
  %942 = %932.0;
  %943 = %938.1;
  %944 = %939.0;
  %945 = %940.0;
  (%915, %934, %941, %942, %943, meta[relay.Constant][49] /* ty=Tensor[(352), float32] */, %944, %945)
}

def @func_3886() -> Tensor[(8, 13, 3), float32] {
  %946 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %946.0
}

def @func_224(%var_222: Tensor[(3, 14, 3), int8]) -> (Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) {
  @func_221(%var_222) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */
}

def @func_5689() -> (Tensor[(3, 14, 3), uint32],) {
  %948 = fn () -> (Tensor[(3, 14, 3), uint32],) {
    %947 = @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */;
    (%947,)
  };
  %948() /* ty=(Tensor[(3, 14, 3), uint32],) */
}

def @func_14370() -> Tensor[(4, 13, 2), float32] {
  @func_14368() /* ty=Tensor[(4, 13, 2), float32] */
}

def @func_3193() -> Tensor[(3, 14, 3), uint32] {
  @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_14650() -> (Tensor[(8, 13, 3), float32],) {
  %950 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %949 = @func_12247() /* ty=Tensor[(8, 13, 3), float32] */;
    (%949,)
  };
  %950() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_11330() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  @func_11328() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_9654() -> Tensor[(3, 14, 3), uint32] {
  @func_3191() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_2292() -> (Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) {
  %951 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %952 = reshape(%951, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %953 = @func_2075(%952) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %954 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %955 = reshape(%954, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %956 = @func_276(%955) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %957 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 104), float32] */, dtype="float32") /* ty=Tensor[(1, 104), float32] */;
  %958 = reshape(%957, newshape=[4, 13, 2]) /* ty=Tensor[(4, 13, 2), float32] */;
  %959 = @func_276(%958) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(4, 13, 2), float32], Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), bool]) */;
  %960 = @func_2192() /* ty=Tensor[(126), int8] */;
  %961 = %953.0;
  %962 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %963 = @func_2192() /* ty=Tensor[(126), int8] */;
  %964 = %956.1;
  %965 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
  %966 = @func_1548() /* ty=Tensor[(8, 13, 3), float32] */;
  %967 = %959.2;
  %968 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
  (%960, %961, meta[relay.Constant][50] /* ty=Tensor[(1, 104), float32] */, %962, %963, %964, %965, %966, %967, %968)
}

def @func_1549() -> Tensor[(8, 13, 3), float32] {
  %970 = fn () -> Tensor[(8, 13, 3), float32] {
    %969 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %969.0
  };
  %970() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_2616() -> (Tensor[(126), int8],) {
  @func_2614() /* ty=(Tensor[(126), int8],) */
}

def @func_8229() -> Tensor[(126), int8] {
  @func_8227() /* ty=Tensor[(126), int8] */
}

def @func_12248() -> Tensor[(8, 13, 3), float32] {
  %971 = fn () -> Tensor[(8, 13, 3), float32] {
    @func_3886() /* ty=Tensor[(8, 13, 3), float32] */
  };
  %971() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_8784(%var_8783: Tensor[(14, 11, 12), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(14, 11, 12), float32]) {
  %980 = fn (%var_8729: Tensor[(14, 11, 12), float32]) -> (Tensor[(8, 13, 3), float32], Tensor[(14, 11, 12), float32]) {
    %972 = @func_6344() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %973 = cast(%var_8729, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %974 = log(%973) /* ty=Tensor[(14, 11, 12), float32] */;
    %975 = cast(%974, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %976 = atanh(%975) /* ty=Tensor[(14, 11, 12), float32] */;
    %977 = cast(%976, dtype="float32") /* ty=Tensor[(14, 11, 12), float32] */;
    %978 = %972.0;
    %979 = asinh(%977) /* ty=Tensor[(14, 11, 12), float32] */;
    (%978, %979)
  };
  %980(%var_8783) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(14, 11, 12), float32]) */
}

def @func_9862() -> (Tensor[(4, 8, 14), float32],) {
  %983 = fn () -> (Tensor[(4, 8, 14), float32],) {
    %981 = @func_7447() /* ty=(Tensor[(4, 8, 14), float32], Tensor[(8, 13, 3), float32]) */;
    %982 = %981.0;
    (%982,)
  };
  %983() /* ty=(Tensor[(4, 8, 14), float32],) */
}

def @func_9717(%var_9679: Tensor[(104, 1), float32], %var_9703: Tensor[(640), int8]) -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), bool], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(104, 126), int64], Tensor[(8, 13, 3), bool]) {
  %984 = cast(%var_9679, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
  %985 = reshape(%984, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %986 = @func_2075(%985) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %987 = @func_3042() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %988 = cast(%var_9703, dtype="int8") /* ty=Tensor[(640), int8] */;
  %989 = reshape(%988, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %990 = @func_465(%989) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %991 = cast(%var_9679, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
  %992 = log2(%991) /* ty=Tensor[(104, 1), float32] */;
  %993 = cast(%var_9679, dtype="bool") /* ty=Tensor[(104, 1), bool] */;
  %994 = shape_of(%992, dtype="int32") /* ty=Tensor[(2), int32] */;
  %995 = cast(%992, dtype="bool") /* ty=Tensor[(104, 1), bool] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %997 = greater_equal(%995, %996) /* ty=Tensor[(104, ?), bool] */;
  %998 = @func_7074() /* ty=(Tensor[(1, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(7, 11, 15), float32], Tensor[(1155), float32]) */;
  %999 = %998.2;
  %1000 = cast(%997, dtype="int64") /* ty=Tensor[(104, ?), int64] */;
  %1001 = cast(%999, dtype="int64") /* ty=Tensor[(126), int64] */;
  %1002 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
  %1003 = %986.0;
  %1004 = %987.0;
  %1005 = %990.0;
  %1006 = left_shift(%1000, %1001) /* ty=Tensor[(104, 126), int64] */;
  %1007 = %1002.0;
  (%1003, %1004, %1005, %var_9703, %1006, %1007)
}

def @func_9255() -> (Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) {
  %1008 = @func_6561() /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
  %1009 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1010 = %1008.3;
  %1011 = %1009.1;
  (%1010, %1011)
}

def @func_4102() -> Tensor[(126), int8] {
  %1012 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %1012.0
}

def @func_13483(%var_13482: Tensor[(16, 9, 16), float32]) -> Tensor[(16, 9, 16), uint32] {
  %1019 = fn (%var_13471: Tensor[(16, 9, 16), float32]) -> Tensor[(16, 9, 16), uint32] {
    %1013 = cast(%var_13471, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
    %1014 = log10(%1013) /* ty=Tensor[(16, 9, 16), float32] */;
    %1015 = cast(%var_13471, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
    %1016 = shape_of(%1014, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1017 = cast(%1014, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
    %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    left_shift(%1017, %1018) /* ty=Tensor[(16, 9, 16), uint32] */
  };
  %1019(%var_13482) /* ty=Tensor[(16, 9, 16), uint32] */
}

def @func_14148() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %1023 = fn () -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
    %1020 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
    %1021 = %1020.0;
    %1022 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
    (%1021, %1022)
  };
  %1023() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_14776(%var_14774: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(27, 70), float32], Tensor[(650), int64]) {
  @func_14773(%var_14774) /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(27, 70), float32], Tensor[(650), int64]) */
}

def @func_9533() -> (Tensor[(8, 13, 3), float64], Tensor[(126), int8]) {
  %1030 = fn () -> (Tensor[(8, 13, 3), float64], Tensor[(126), int8]) {
    %1024 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1025 = %1024.0;
    %1026 = cast(%1025, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
    %1027 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %1028 = log(%1026) /* ty=Tensor[(8, 13, 3), float64] */;
    %1029 = %1027.2;
    (%1028, %1029)
  };
  %1030() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(126), int8]) */
}

def @func_3164() -> Tensor[(8, 13, 3), float32] {
  @func_3162() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_3397(%var_3362: Tensor[(640), int8], %var_3390: Tensor[(650), int64]) -> (Tensor[(640), bool], Tensor[(10, 5, 13), float32], Tensor[(130), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) {
  %1031 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %1032 = %1031.2;
  %1033 = cast(%var_3362, dtype="bool") /* ty=Tensor[(640), bool] */;
  %1034 = shape_of(%1032, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1035 = cast(%1032, dtype="bool") /* ty=Tensor[(640), bool] */;
  %1036 = dyn.reshape(%1033, %1034, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1037 = cast(meta[relay.Constant][51] /* ty=Tensor[(130), int64] */, dtype="int64") /* ty=Tensor[(130), int64] */;
  %1038 = cast(%var_3390, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1039 = reshape(%1037, newshape=[10, 1, 13]) /* ty=Tensor[(10, 1, 13), int64] */;
  %1040 = reshape(%1038, newshape=[10, 5, 13]) /* ty=Tensor[(10, 5, 13), int64] */;
  %1041 = @func_719(%1039, %1040) /* ty=(Tensor[(10, 5, 13), int64], Tensor[(10, 5, 13), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %1042 = cast(meta[relay.Constant][52] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1043 = reshape(%1042, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1044 = @func_2075(%1043) /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(104), float32]) */;
  %1045 = logical_or(%1035, %1036) /* ty=Tensor[(640), bool] */;
  %1046 = %1041.1;
  %1047 = %1044.1;
  (%1045, %1046, meta[relay.Constant][51] /* ty=Tensor[(130), int64] */, %var_3390, %1047, meta[relay.Constant][52] /* ty=Tensor[(104), float32] */)
}

def @func_6561() -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) {
  %1048 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1049 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %1050 = @func_6408() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1051 = %1048.0;
  %1052 = %1049.0;
  %1053 = %1050.1;
  %1054 = @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */;
  (%1051, %1052, %1053, %1054)
}

def @func_9504() -> (Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(104), float32], Tensor[(40, 16), int8], Tensor[(10, 2, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1055 = @func_5641() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %1056 = @func_6007() /* ty=(Tensor[(10, 2, 3), float64],) */;
  %1057 = %1056.0;
  %1058 = cast(%1057, dtype="float64") /* ty=Tensor[(10, 2, 3), float64] */;
  %1059 = cast(meta[relay.Constant][53] /* ty=Tensor[(40, 16), int8] */, dtype="int8") /* ty=Tensor[(40, 16), int8] */;
  %1060 = reshape(%1059, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %1061 = @func_2740(%1060) /* ty=(Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
  %1062 = cast(%1057, dtype="float32") /* ty=Tensor[(10, 2, 3), float32] */;
  %1063 = cosh(%1062) /* ty=Tensor[(10, 2, 3), float32] */;
  %1064 = cast(%1063, dtype="float32") /* ty=Tensor[(10, 2, 3), float32] */;
  %1065 = @func_9069() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1066 = %1055.1;
  %1067 = asinh(%1058) /* ty=Tensor[(10, 2, 3), float64] */;
  %1068 = %1061.4;
  %1069 = sigmoid(%1064) /* ty=Tensor[(10, 2, 3), float32] */;
  %1070 = %1065.0;
  (%1066, %1067, %1068, meta[relay.Constant][53] /* ty=Tensor[(40, 16), int8] */, %1069, %1070)
}

def @func_5393() -> (Tensor[(3, 14, 3), float32], Tensor[(126), int8]) {
  %1071 = @func_4915() /* ty=Tensor[(3, 14, 3), uint32] */;
  %1072 = cast(%1071, dtype="float32") /* ty=Tensor[(3, 14, 3), float32] */;
  %1073 = tan(%1072) /* ty=Tensor[(3, 14, 3), float32] */;
  %1074 = @func_4584() /* ty=Tensor[(126), int8] */;
  (%1073, %1074)
}

def @func_11756() -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 10, 8), int16], Tensor[(8, 13, 3), float32]) {
  %1075 = @func_10698() /* ty=(Tensor[(126), int8],) */;
  %1076 = @func_10839() /* ty=(Tensor[(126), int8],) */;
  %1077 = cast(meta[relay.Constant][54] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %1078 = reshape(%1077, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %1079 = @func_465(%1078) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %1080 = %1079.0;
  %1081 = cast(meta[relay.Constant][54] /* ty=Tensor[(640), int8] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %1082 = shape_of(%1080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1083 = cast(%1080, dtype="int16") /* ty=Tensor[(8, 10, 8), int16] */;
  %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1085 = @func_7638() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1086 = %1075.0;
  %1087 = %1076.0;
  %1088 = bitwise_xor(%1083, %1084) /* ty=Tensor[(8, 10, 8), int16] */;
  %1089 = %1085.0;
  (%1086, %1087, %1088, %1089)
}

def @func_7756() -> (Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) {
  @func_7754() /* ty=(Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) */
}

def @func_11486() -> (Tensor[(8, 13, 3), float32],) {
  %1092 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %1090 = @func_9069() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1091 = %1090.0;
    (%1091,)
  };
  %1092() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_1482() -> (Tensor[(8, 13, 3), float32],) {
  %1093 = cast(meta[relay.Constant][55] /* ty=Tensor[(8, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %1094 = acos(%1093) /* ty=Tensor[(8, 13, 3), float32] */;
  (%1094,)
}

def @func_10516(%var_10495: Tensor[(640), int8], %var_10501: Tensor[(650), int64]) -> (Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), int8], Tensor[(640), int8], Tensor[(650), int64], Tensor[(198), float64], Tensor[(650), int64], Tensor[(8, 13, 3), float32]) {
  %1095 = cast(%var_10495, dtype="int8") /* ty=Tensor[(640), int8] */;
  %1096 = reshape(%1095, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %1097 = @func_465(%1096) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %1098 = cast(meta[relay.Constant][56] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %1099 = cast(%var_10501, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1100 = cast(meta[relay.Constant][56] /* ty=Tensor[(198), float64] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %1101 = reshape(%1098, newshape=[99, 2]) /* ty=Tensor[(99, 2), float64] */;
  %1102 = reshape(%1099, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1103 = reshape(%1100, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
  %1104 = @func_4050(%1101, %1102, %1103) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) */;
  %1105 = @func_6434() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
  %1106 = @func_9968() /* ty=Tensor[(8, 13, 3), float32] */;
  %1107 = %1097.0;
  %1108 = %1104.3;
  %1109 = %1105.1;
  (%1106, %1107, %var_10495, %1108, meta[relay.Constant][56] /* ty=Tensor[(198), float64] */, %var_10501, %1109)
}

def @func_9099(%var_9098: Tensor[(96), float64]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) {
  %1116 = fn (%var_9093: Tensor[(96), float64]) -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) {
    %1110 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1111 = cast(%var_9093, dtype="float64") /* ty=Tensor[(96), float64] */;
    %1112 = reshape(%1111, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %1113 = @func_6293(%1112) /* ty=(Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) */;
    %1114 = %1110.0;
    %1115 = %1113.0;
    (%1114, %1115, %var_9093)
  };
  %1116(%var_9098) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) */
}

def @func_3324() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_8383() -> (Tensor[(8, 13, 3), float32],) {
  %1119 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %1117 = @func_6945() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(3, 14, 3), uint32]) */;
    %1118 = %1117.3;
    (%1118,)
  };
  %1119() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_7639() -> (Tensor[(8, 13, 3), float32],) {
  %1122 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %1120 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1121 = %1120.0;
    (%1121,)
  };
  %1122() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_12321() -> Tensor[(8, 13, 3), float32] {
  @func_5282() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_2193() -> Tensor[(126), int8] {
  %1124 = fn () -> Tensor[(126), int8] {
    %1123 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %1123.2
  };
  %1124() /* ty=Tensor[(126), int8] */
}

def @func_6084() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) {
  @func_6082() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) */
}

def @func_6435() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %1129 = fn () -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
    %1125 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
    %1126 = cast(%1125, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %1127 = @func_5536() /* ty=Tensor[(126), int8] */;
    %1128 = sqrt(%1126) /* ty=Tensor[(8, 13, 3), float32] */;
    (%1127, %1128)
  };
  %1129() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_13535() -> (Tensor[(126), int8],) {
  %1132 = fn () -> (Tensor[(126), int8],) {
    %1130 = @func_9375() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %1131 = %1130.1;
    (%1131,)
  };
  %1132() /* ty=(Tensor[(126), int8],) */
}

def @func_3465() -> Tensor[(3, 14, 3), uint32] {
  %1133 = fn () -> Tensor[(3, 14, 3), uint32] {
    @func_3256() /* ty=Tensor[(3, 14, 3), uint32] */
  };
  %1133() /* ty=Tensor[(3, 14, 3), uint32] */
}

def @func_10847() -> (Tensor[(126), int8],) {
  %1136 = fn () -> (Tensor[(126), int8],) {
    %1134 = @func_4201() /* ty=(Tensor[(126), int8],) */;
    %1135 = %1134.0;
    (%1135,)
  };
  %1136() /* ty=(Tensor[(126), int8],) */
}

def @func_9375() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %1137 = @func_6622() /* ty=(Tensor[(126), int8],) */;
  %1138 = @func_4669() /* ty=(Tensor[(126), int8],) */;
  %1139 = %1137.0;
  %1140 = %1138.0;
  (%1139, %1140)
}

def @func_11026() -> Tensor[(3, 14, 3), float32] {
  @func_11024() /* ty=Tensor[(3, 14, 3), float32] */
}

def @func_11817() -> Tensor[(126), int8] {
  %1141 = fn () -> Tensor[(126), int8] {
    @func_5260() /* ty=Tensor[(126), int8] */
  };
  %1141() /* ty=Tensor[(126), int8] */
}

def @func_2318() -> (Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) {
  %1142 = cast(meta[relay.Constant][57] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
  %1143 = reshape(%1142, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
  %1144 = @func_465(%1143) /* ty=(Tensor[(8, 10, 8), int8],) */;
  %1145 = @func_2192() /* ty=Tensor[(126), int8] */;
  %1146 = %1144.0;
  (%1145, %1146, meta[relay.Constant][57] /* ty=Tensor[(640), int8] */)
}

def @func_7140() -> Tensor[(126), int8] {
  @func_7138() /* ty=Tensor[(126), int8] */
}

def @func_4908() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  @func_4906() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @func_4746() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  @func_4744() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_6187() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1147 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
  %1148 = @func_4217() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1149 = %1147.1;
  %1150 = %1148.0;
  (%1149, %1150)
}

def @func_5395() -> (Tensor[(3, 14, 3), float32], Tensor[(126), int8]) {
  @func_5393() /* ty=(Tensor[(3, 14, 3), float32], Tensor[(126), int8]) */
}

def @func_6266() -> (Tensor[(126), int8], Tensor[(8, 12), float64]) {
  %1151 = @func_5438() /* ty=(Tensor[(126), int8],) */;
  %1152 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
  %1153 = %1151.0;
  %1154 = %1152.3;
  (%1153, %1154)
}

def @func_9174() -> Tensor[(8, 13, 3), float32] {
  %1155 = fn () -> Tensor[(8, 13, 3), float32] {
    @func_1548() /* ty=Tensor[(8, 13, 3), float32] */
  };
  %1155() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_12791(%var_12789: Tensor[(5, 16, 6), float64], %var_12790: Tensor[(5, 16, 6), float64]) -> (Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool]) {
  %1166 = fn (%var_12748: Tensor[(5, 16, 6), float64], %var_12749: Tensor[(5, 16, 6), float64]) -> (Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool]) {
    %1156 = cast(%var_12749, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
    %1157 = shape_of(%var_12748, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1158 = cast(%var_12748, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
    %1159 = dyn.reshape(%1156, %1157, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1160 = cast(%var_12748, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
    %1161 = shape_of(%var_12749, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1162 = cast(%var_12749, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
    %1163 = dyn.reshape(%1160, %1161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1164 = divide(%1158, %1159) /* ty=Tensor[(5, 16, 6), float64] */;
    %1165 = greater_equal(%1162, %1163) /* ty=Tensor[(5, 16, 6), bool] */;
    (%1164, %1165)
  };
  %1166(%var_12789, %var_12790) /* ty=(Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool]) */
}

def @func_6149() -> Tensor[(126), int8] {
  %1168 = fn () -> Tensor[(126), int8] {
    %1167 = @func_2599() /* ty=(Tensor[(126), int8],) */;
    %1167.0
  };
  %1168() /* ty=Tensor[(126), int8] */
}

def @func_14368() -> Tensor[(4, 13, 2), float32] {
  %1169 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
  %1169.8
}

def @func_5284() -> Tensor[(8, 13, 3), float32] {
  @func_5282() /* ty=Tensor[(8, 13, 3), float32] */
}

def @func_6296(%var_6294: Tensor[(96), float64]) -> (Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) {
  @func_6293(%var_6294) /* ty=(Tensor[(126), int8], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 13, 3), float32]) */
}

def @func_12972() -> (Tensor[(8, 13, 3), float64], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8], Tensor[(126), int8]) {
  %1180 = fn () -> (Tensor[(8, 13, 3), float64], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8], Tensor[(126), int8]) {
    %1170 = @func_9532() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(126), int8]) */;
    %1171 = cast(meta[relay.Constant][58] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %1172 = reshape(%1171, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %1173 = @func_6831(%1172) /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8]) */;
    %1174 = @func_10089() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %1175 = @func_11530() /* ty=(Tensor[(352), float32], Tensor[(126), int8]) */;
    %1176 = %1170.0;
    %1177 = %1173.2;
    %1178 = %1174.1;
    %1179 = %1175.1;
    (%1176, %1177, meta[relay.Constant][58] /* ty=Tensor[(650), int64] */, %1178, %1179)
  };
  %1180() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(130), int64], Tensor[(650), int64], Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_8122() -> (Tensor[(8, 13, 3), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) {
  @func_8120() /* ty=(Tensor[(8, 13, 3), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(3, 14, 3), uint32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(96), float64]) */
}

def @func_6268() -> (Tensor[(126), int8], Tensor[(8, 12), float64]) {
  @func_6266() /* ty=(Tensor[(126), int8], Tensor[(8, 12), float64]) */
}

def @func_12054() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  @func_12052() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_7952() -> (Tensor[(126), int8],) {
  %1181 = @func_2192() /* ty=Tensor[(126), int8] */;
  (%1181,)
}

def @func_14338() -> Tensor[(126), int8] {
  @func_14336() /* ty=Tensor[(126), int8] */
}

def @func_3608() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  %1186 = fn () -> (Tensor[(126), int8], Tensor[(126), int8]) {
    %1182 = @func_1572() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(126), int8]) */;
    %1183 = @func_2614() /* ty=(Tensor[(126), int8],) */;
    %1184 = %1182.2;
    %1185 = %1183.0;
    (%1184, %1185)
  };
  %1186() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_10418(%var_10417: Tensor[(352), float32]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(352), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %1203 = fn (%var_10366: Tensor[(352), float32]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(352), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
    %1187 = @func_5641() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %1188 = cast(%var_10366, dtype="float32") /* ty=Tensor[(352), float32] */;
    %1189 = %1187.0;
    %1190 = cast(%1189, dtype="int8") /* ty=Tensor[(126), int8] */;
    %1191 = reshape(%1188, newshape=[2, 11, 16]) /* ty=Tensor[(2, 11, 16), float32] */;
    %1192 = reshape(%1190, newshape=[126]) /* ty=Tensor[(126), int8] */;
    %1193 = @func_1287(%1191, %1192) /* ty=(Tensor[(2, 11, 16), float32], Tensor[(2, 11, 16), float64], Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */;
    %1194 = @func_6344() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1195 = @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */;
    %1196 = @func_4201() /* ty=(Tensor[(126), int8],) */;
    %1197 = %1193.3;
    %1198 = %1194.0;
    %1199 = %1195.0;
    %1200 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
    %1201 = @func_3886() /* ty=Tensor[(8, 13, 3), float32] */;
    %1202 = %1196.0;
    (%1189, %1197, %var_10366, %1198, %1199, %1200, %1201, %1202)
  };
  %1203(%var_10417) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(352), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */
}

def @func_3322() -> (Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %1204 = @func_2614() /* ty=(Tensor[(126), int8],) */;
  %1205 = @func_1482() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1206 = %1204.0;
  %1207 = %1205.0;
  (%1206, %1207)
}

def @func_6678() -> (Tensor[(3, 14, 3), float32],) {
  %1211 = fn () -> (Tensor[(3, 14, 3), float32],) {
    %1208 = @func_4915() /* ty=Tensor[(3, 14, 3), uint32] */;
    %1209 = cast(%1208, dtype="float32") /* ty=Tensor[(3, 14, 3), float32] */;
    %1210 = sigmoid(%1209) /* ty=Tensor[(3, 14, 3), float32] */;
    (%1210,)
  };
  %1211() /* ty=(Tensor[(3, 14, 3), float32],) */
}

def @func_2480() -> (Tensor[(8, 13, 3), bool],) {
  @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */
}

def @func_10949(%var_10948: Tensor[(104), float32]) -> (Tensor[(126), int8], Tensor[(3, 14, 3), bool], Tensor[(126), int8], Tensor[(650), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
  %1231 = fn (%var_10902: Tensor[(104), float32]) -> (Tensor[(126), int8], Tensor[(3, 14, 3), bool], Tensor[(126), int8], Tensor[(650), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
    %1212 = @func_7027() /* ty=(Tensor[(126), int8],) */;
    %1213 = %1212.0;
    %1214 = cast(%1213, dtype="int8") /* ty=Tensor[(126), int8] */;
    %1215 = reshape(%1214, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
    %1216 = @func_221(%1215) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
    %1217 = cast(meta[relay.Constant][59] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %1218 = cast(meta[relay.Constant][59] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
    %1219 = cast(%var_10902, dtype="float32") /* ty=Tensor[(104), float32] */;
    %1220 = reshape(%1217, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %1221 = reshape(%1218, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %1222 = reshape(%1219, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %1223 = @func_8570(%1220, %1221, %1222) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(130), int64], Tensor[(8, 13, 3), float32], Tensor[(650), int64], Tensor[(8, 10, 8), int8], Tensor[(198), float64], Tensor[(104), float32], Tensor[(8, 13, 3), float32], Tensor[(650), float64], Tensor[(126), int8]) */;
    %1224 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
    %1225 = @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
    %1226 = %1216.0;
    %1227 = @func_6148() /* ty=Tensor[(126), int8] */;
    %1228 = %1223.10;
    %1229 = %1224.0;
    %1230 = %1225.0;
    (%1213, %1226, %1227, %1228, meta[relay.Constant][59] /* ty=Tensor[(650), int64] */, %var_10902, %1229, %1230)
  };
  %1231(%var_10948) /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), bool], Tensor[(126), int8], Tensor[(650), float64], Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) */
}

def @func_10841() -> (Tensor[(126), int8],) {
  @func_10839() /* ty=(Tensor[(126), int8],) */
}

def @func_10091() -> (Tensor[(126), int8], Tensor[(126), int8]) {
  @func_10089() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */
}

def @func_3767(%var_3764: Tensor[(198), float64], %var_3765: Tensor[(104), float32], %var_3766: Tensor[(12, 9, 9), float64]) -> (Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(325, 2), int64], Tensor[(8, 13, 3), float32], Tensor[(12, 9, 9), float64]) {
  %1253 = fn (%var_3734: Tensor[(198), float64], %var_3735: Tensor[(104), float32], %var_3742: Tensor[(12, 9, 9), float64]) -> (Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(325, 2), int64], Tensor[(8, 13, 3), float32], Tensor[(12, 9, 9), float64]) {
    %1232 = cast(%var_3734, dtype="float64") /* ty=Tensor[(198), float64] */;
    %1233 = cast(%var_3735, dtype="float32") /* ty=Tensor[(104), float32] */;
    %1234 = cast(meta[relay.Constant][60] /* ty=Tensor[(325, 2), int64] */, dtype="int64") /* ty=Tensor[(325, 2), int64] */;
    %1235 = reshape(%1232, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
    %1236 = reshape(%1233, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %1237 = reshape(%1234, newshape=[650]) /* ty=Tensor[(650), int64] */;
    %1238 = @func_1735(%1235, %1236, %1237) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
    %1239 = @func_2096() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1240 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
    %1241 = %1240.2;
    %1242 = cast(%1241, dtype="bool") /* ty=Tensor[(?, 9, 9), bool] */;
    %1243 = cast(%var_3742, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
    %1244 = not_equal(%1242, %1243) /* ty=Tensor[(12, 9, 9), bool] */;
    %1245 = cast(%1244, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
    %1246 = shape_of(%var_3742, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1247 = cast(%var_3742, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
    %1248 = dyn.reshape(%1245, %1246, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1249 = @func_2118() /* ty=Tensor[(8, 13, 3), float32] */;
    %1250 = %1238.7;
    %1251 = %1239.0;
    %1252 = floor_divide(%1247, %1248) /* ty=Tensor[(12, 9, 9), float64] */;
    (%1249, %1250, %var_3734, %var_3735, meta[relay.Constant][60] /* ty=Tensor[(325, 2), int64] */, %1251, %1252)
  };
  %1253(%var_3764, %var_3765, %var_3766) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(96), float64], Tensor[(198), float64], Tensor[(104), float32], Tensor[(325, 2), int64], Tensor[(8, 13, 3), float32], Tensor[(12, 9, 9), float64]) */
}

def @func_3941() -> (Tensor[(126), int8],) {
  %1256 = fn () -> (Tensor[(126), int8],) {
    %1254 = @func_3322() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %1255 = %1254.0;
    (%1255,)
  };
  %1256() /* ty=(Tensor[(126), int8],) */
}

def @func_10304(%var_10296: Tensor[(99, 2), float64], %var_10297: Tensor[(1, 650), int64]) -> (Tensor[(126), int8], Tensor[(640), int8], Tensor[(1890), float32], Tensor[(99, 2), float64], Tensor[(1, 650), int64]) {
  %1257 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %1258 = cast(meta[relay.Constant][61] /* ty=Tensor[(1890), float32] */, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %1259 = cast(%var_10296, dtype="float64") /* ty=Tensor[(99, 2), float64] */;
  %1260 = cast(%var_10297, dtype="int64") /* ty=Tensor[(1, 650), int64] */;
  %1261 = reshape(%1258, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
  %1262 = reshape(%1259, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %1263 = reshape(%1260, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1264 = @func_3555(%1261, %1262, %1263) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
  %1265 = %1257.0;
  %1266 = %1264.2;
  (%1265, %1266, meta[relay.Constant][61] /* ty=Tensor[(1890), float32] */, %var_10296, %var_10297)
}

def @func_5973() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(640), int8]) {
  %1272 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(640), int8]) {
    %1267 = cast(meta[relay.Constant][62] /* ty=Tensor[(640), int8] */, dtype="int8") /* ty=Tensor[(640), int8] */;
    %1268 = reshape(%1267, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
    %1269 = @func_2740(%1268) /* ty=(Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
    %1270 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
    %1271 = %1269.2;
    (%1270, %1271, meta[relay.Constant][62] /* ty=Tensor[(640), int8] */)
  };
  %1272() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(640), int8]) */
}

def @func_7563(%var_7561: Tensor[(104), float32]) -> (Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) {
  @func_7560(%var_7561) /* ty=(Tensor[(650), int64], Tensor[(99, 2), int16], Tensor[(126), int8], Tensor[(104), float32], Tensor[(99, 2), float64], Tensor[(99, 2), float32], Tensor[(8, 13, 3), bool]) */
}

def @func_13848() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1277 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
    %1273 = @func_13333() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %1274 = @func_10627() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */;
    %1275 = %1273.1;
    %1276 = %1274.0;
    (%1275, %1276)
  };
  %1277() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_5008(%var_4966: Tensor[(1890), float32], %var_4970: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  %1278 = @func_3940() /* ty=(Tensor[(126), int8],) */;
  %1279 = @func_2599() /* ty=(Tensor[(126), int8],) */;
  %1280 = cast(%var_4966, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %1281 = cast(meta[relay.Constant][63] /* ty=Tensor[(198), float64] */, dtype="float64") /* ty=Tensor[(198), float64] */;
  %1282 = cast(meta[relay.Constant][64] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1283 = reshape(%1280, newshape=[9, 14, 15]) /* ty=Tensor[(9, 14, 15), float32] */;
  %1284 = reshape(%1281, newshape=[198]) /* ty=Tensor[(198), float64] */;
  %1285 = reshape(%1282, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1286 = @func_3555(%1283, %1284, %1285) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */;
  %1287 = cast(%var_4970, dtype="bool") /* ty=Tensor[(650), bool] */;
  %1288 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(650), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1289 = cast(meta[relay.Constant][64] /* ty=Tensor[(650), int64] */, dtype="bool") /* ty=Tensor[(650), bool] */;
  %1290 = dyn.reshape(%1287, %1288, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1291 = cast(%var_4970, dtype="float32") /* ty=Tensor[(650), float32] */;
  %1292 = @func_4413() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), bool], Tensor[(6, 2, 8), float64], Tensor[(8, 12), float64]) */;
  %1293 = @func_3607() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1294 = %1278.0;
  %1295 = %1279.0;
  %1296 = %1286.0;
  %1297 = not_equal(%1289, %1290) /* ty=Tensor[(650), bool] */;
  %1298 = log2(%1291) /* ty=Tensor[(650), float32] */;
  %1299 = %1292.0;
  %1300 = %1293.1;
  %1301 = @func_3577() /* ty=Tensor[(8, 13, 3), float32] */;
  (%1294, %1295, %1296, %var_4966, meta[relay.Constant][63] /* ty=Tensor[(198), float64] */, %1297, %1298, %1299, %1300, %1301)
}

def @func_9257() -> (Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) {
  @func_9255() /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(126), int8]) */
}

def @func_5260() -> Tensor[(126), int8] {
  @func_4102() /* ty=Tensor[(126), int8] */
}

def @func_9617(%var_9584: uint8, %var_9585: Tensor[(2, 6, 4), uint8], %var_9593: Tensor[(33, 6), float64], %var_9594: Tensor[(104), float32]) -> (Tensor[(2, 6, 4), uint8], Tensor[(13, 10), int64], Tensor[(33, 6), float64], Tensor[(104), float32], Tensor[(650), float32], Tensor[(8, 13, 3), float32]) {
  %1302 = cast(%var_9584, dtype="uint8") /* ty=uint8 */;
  %1303 = cast(%var_9585, dtype="uint8") /* ty=Tensor[(2, 6, 4), uint8] */;
  %1304 = cast(%var_9593, dtype="float64") /* ty=Tensor[(33, 6), float64] */;
  %1305 = cast(%var_9594, dtype="float32") /* ty=Tensor[(104), float32] */;
  %1306 = cast(meta[relay.Constant][65] /* ty=Tensor[(650), int64] */, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1307 = reshape(%1304, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), float64] */;
  %1308 = reshape(%1305, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %1309 = reshape(%1306, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1310 = @func_1735(%1307, %1308, %1309) /* ty=(Tensor[(3, 14, 3), uint32], Tensor[(104), float32], Tensor[(640), int8], Tensor[(13, 10), int64], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(96), float64], Tensor[(8, 10, 8), int8], Tensor[(6, 2, 8), float64], Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(11, 6, 3), float32]) */;
  %1311 = cast(meta[relay.Constant][65] /* ty=Tensor[(650), int64] */, dtype="float32") /* ty=Tensor[(650), float32] */;
  %1312 = @func_8382() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1313 = minimum(%1302, %1303) /* ty=Tensor[(2, 6, 4), uint8] */;
  %1314 = %1310.3;
  %1315 = log(%1311) /* ty=Tensor[(650), float32] */;
  %1316 = %1312.0;
  (%1313, %1314, %var_9593, %var_9594, %1315, %1316)
}

def @func_6189() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  @func_6187() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_13131() -> Tensor[(650), int64] {
  %1318 = fn () -> Tensor[(650), int64] {
    %1317 = @func_7754() /* ty=(Tensor[(126), int8], Tensor[(650), int64], Tensor[(640), int8], Tensor[(650), int64]) */;
    %1317.3
  };
  %1318() /* ty=Tensor[(650), int64] */
}

def @func_3067() -> (Tensor[(8, 13, 3), float32],) {
  %1321 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %1319 = @func_2998() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
    %1320 = %1319.1;
    (%1320,)
  };
  %1321() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_13726() -> Tensor[(126), int8] {
  @func_13724() /* ty=Tensor[(126), int8] */
}

def @func_13724() -> Tensor[(126), int8] {
  %1322 = @func_3217() /* ty=(Tensor[(126), int8],) */;
  %1322.0
}

def @func_5536() -> Tensor[(126), int8] {
  @func_2192() /* ty=Tensor[(126), int8] */
}

def @func_7850() -> (Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) {
  @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */
}

def @func_14065() -> (Tensor[(8, 13, 3), float32],) {
  %1325 = fn () -> (Tensor[(8, 13, 3), float32],) {
    %1323 = @func_2802() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1324 = %1323.0;
    (%1324,)
  };
  %1325() /* ty=(Tensor[(8, 13, 3), float32],) */
}

def @func_14252() -> Tensor[(7, 15, 2), float32] {
  @func_14250() /* ty=Tensor[(7, 15, 2), float32] */
}

def @func_12117(%var_12115: Tensor[(325, 2), int64], %var_12116: Tensor[(640, 1), int8]) -> (Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(640, 1), int8], Tensor[(325, 2), float32]) {
  %1338 = fn (%var_12097: Tensor[(325, 2), int64], %var_12098: Tensor[(640, 1), int8]) -> (Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(640, 1), int8], Tensor[(325, 2), float32]) {
    %1326 = @func_2920() /* ty=(Tensor[(126), int8], Tensor[(3, 14, 3), uint32], Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(2, 11, 16), float64], Tensor[(352), float32], Tensor[(126), int8], Tensor[(126), int8]) */;
    %1327 = cast(meta[relay.Constant][66] /* ty=Tensor[(1890), float32] */, dtype="float32") /* ty=Tensor[(1890), float32] */;
    %1328 = cast(%var_12097, dtype="int64") /* ty=Tensor[(325, 2), int64] */;
    %1329 = cast(%var_12098, dtype="int8") /* ty=Tensor[(640, 1), int8] */;
    %1330 = reshape(%1327, newshape=[1890]) /* ty=Tensor[(1890), float32] */;
    %1331 = reshape(%1328, newshape=[650, 1]) /* ty=Tensor[(650, 1), int64] */;
    %1332 = reshape(%1329, newshape=[160, 4]) /* ty=Tensor[(160, 4), int8] */;
    %1333 = @func_9004(%1330, %1331, %1332) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(650, 1), int64], Tensor[(8, 12), float64], Tensor[(8, 10, 8), int8], Tensor[(160, 4), int8]) */;
    %1334 = cast(%var_12097, dtype="float32") /* ty=Tensor[(325, 2), float32] */;
    %1335 = %1326.2;
    %1336 = %1333.0;
    %1337 = erf(%1334) /* ty=Tensor[(325, 2), float32] */;
    (%1335, %1336, meta[relay.Constant][66] /* ty=Tensor[(1890), float32] */, %var_12098, %1337)
  };
  %1338(%var_12115, %var_12116) /* ty=(Tensor[(?, 9, 9), float64], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(640, 1), int8], Tensor[(325, 2), float32]) */
}

def @func_14336() -> Tensor[(126), int8] {
  @func_7262() /* ty=Tensor[(126), int8] */
}

def @func_13416(%var_13415: Tensor[(640), int8]) -> (Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(104), float32], Tensor[(640), int8]) {
  %1349 = fn (%var_13397: Tensor[(640), int8]) -> (Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(104), float32], Tensor[(640), int8]) {
    %1339 = @func_7638() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1340 = cast(meta[relay.Constant][67] /* ty=Tensor[(1155), float32] */, dtype="float32") /* ty=Tensor[(1155), float32] */;
    %1341 = reshape(%1340, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float32] */;
    %1342 = @func_5169(%1341) /* ty=(Tensor[(7, 11, 15), float32],) */;
    %1343 = cast(%var_13397, dtype="int8") /* ty=Tensor[(640), int8] */;
    %1344 = reshape(%1343, newshape=[8, 10, 8]) /* ty=Tensor[(8, 10, 8), int8] */;
    %1345 = @func_2740(%1344) /* ty=(Tensor[(8, 10, 8), bool], Tensor[(8, 13, 3), float32], Tensor[(8, 10, 8), float64], Tensor[(8, 13, 3), float32], Tensor[(104), float32]) */;
    %1346 = %1339.0;
    %1347 = %1342.0;
    %1348 = %1345.4;
    (%1346, %1347, meta[relay.Constant][67] /* ty=Tensor[(1155), float32] */, %1348, %var_13397)
  };
  %1349(%var_13415) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(7, 11, 15), float32], Tensor[(1155), float32], Tensor[(104), float32], Tensor[(640), int8]) */
}

def @func_13255() -> (Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32]) {
  @func_13253() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32]) */
}

def @func_11116(%var_11089: Tensor[(650), int64]) -> (Tensor[(4, 8, 14), float32], Tensor[(6, 2, 8), float64], Tensor[(198, 1), float64], Tensor[(650), float32]) {
  %1350 = @func_9861() /* ty=(Tensor[(4, 8, 14), float32],) */;
  %1351 = cast(meta[relay.Constant][68] /* ty=Tensor[(198, 1), float64] */, dtype="float64") /* ty=Tensor[(198, 1), float64] */;
  %1352 = cast(%var_11089, dtype="int64") /* ty=Tensor[(650), int64] */;
  %1353 = cast(meta[relay.Constant][68] /* ty=Tensor[(198, 1), float64] */, dtype="float32") /* ty=Tensor[(198, 1), float32] */;
  %1354 = reshape(%1351, newshape=[99, 2]) /* ty=Tensor[(99, 2), float64] */;
  %1355 = reshape(%1352, newshape=[650]) /* ty=Tensor[(650), int64] */;
  %1356 = reshape(%1353, newshape=[99, 2]) /* ty=Tensor[(99, 2), float32] */;
  %1357 = @func_4050(%1354, %1355, %1356) /* ty=(Tensor[(8, 13, 3), float32], Tensor[(6, 2, 8), float64], Tensor[(104), float32], Tensor[(650), int64], Tensor[(8, 13, 3), float32], Tensor[(99, 2), bool]) */;
  %1358 = cast(%var_11089, dtype="float32") /* ty=Tensor[(650), float32] */;
  %1359 = %1350.0;
  %1360 = %1357.1;
  %1361 = asinh(%1358) /* ty=Tensor[(650), float32] */;
  (%1359, %1360, meta[relay.Constant][68] /* ty=Tensor[(198, 1), float64] */, %1361)
}

def @func_3560(%var_3557: Tensor[(9, 14, 15), float32], %var_3558: Tensor[(198), float64], %var_3559: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) {
  @func_3555(%var_3557, %var_3558, %var_3559) /* ty=(Tensor[(126), int8], Tensor[(9, 14, 15), int16], Tensor[(640), int8], Tensor[(198), float64], Tensor[(1, 104), float32], Tensor[(650), int64], Tensor[(3, 14, 3), bool]) */
}

def @func_10023() -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
  %1364 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) {
    %1362 = @func_1945() /* ty=Tensor[(8, 13, 3), float32] */;
    %1363 = @func_3162() /* ty=Tensor[(8, 13, 3), float32] */;
    (%1362, %1363)
  };
  %1364() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_5012(%var_5010: Tensor[(1890), float32], %var_5011: Tensor[(650), int64]) -> (Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) {
  @func_5008(%var_5010, %var_5011) /* ty=(Tensor[(126), int8], Tensor[(126), int8], Tensor[(126), int8], Tensor[(1890), float32], Tensor[(198), float64], Tensor[(650), bool], Tensor[(650), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32]) */
}

def @main() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(3, 14, 3), bool]) {
  %1365 = @func_6084() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(3, 14, 3), uint32]) */;
  %1366 = @func_7954() /* ty=(Tensor[(126), int8],) */;
  %1367 = @func_13371() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(10, 2, 3), float64], Tensor[(126), int8]) */;
  %1368 = @func_7952() /* ty=(Tensor[(126), int8],) */;
  %1369 = %1368.0;
  %1370 = cast(%1369, dtype="int8") /* ty=Tensor[(126), int8] */;
  %1371 = reshape(%1370, newshape=[3, 14, 3]) /* ty=Tensor[(3, 14, 3), int8] */;
  %1372 = @func_224(%1371) /* ty=(Tensor[(3, 14, 3), bool], Tensor[(3, 14, 3), uint32]) */;
  %1373 = %1372.0;
  %1374 = cast(%1373, dtype="float64") /* ty=Tensor[(3, 14, 3), float64] */;
  %1375 = log(%1374) /* ty=Tensor[(3, 14, 3), float64] */;
  %1376 = cast(%1373, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %1377 = shape_of(%1375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1378 = cast(%1375, dtype="bool") /* ty=Tensor[(3, 14, 3), bool] */;
  %1379 = dyn.reshape(%1376, %1377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1380 = %1365.0;
  %1381 = %1366.0;
  %1382 = @func_12321() /* ty=Tensor[(8, 13, 3), float32] */;
  %1383 = %1367.1;
  %1384 = logical_and(%1378, %1379) /* ty=Tensor[(3, 14, 3), bool] */;
  (%1380, %1381, %1382, %1383, %1384)
}

def @func_12587(%var_12585: Tensor[(11, 4, 4), float64]) -> Tensor[(11, 4, 4), float32] {
  @func_12584(%var_12585) /* ty=Tensor[(11, 4, 4), float32] */
}

def @func_9432() -> Tensor[(?, 9, 9), float64] {
  @func_9430() /* ty=Tensor[(?, 9, 9), float64] */
}

def @func_10699() -> (Tensor[(126), int8],) {
  %1387 = fn () -> (Tensor[(126), int8],) {
    %1385 = @func_9375() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %1386 = %1385.0;
    (%1386,)
  };
  %1387() /* ty=(Tensor[(126), int8],) */
}

def @func_13527() -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
  %1392 = fn () -> (Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) {
    %1388 = @func_2478() /* ty=(Tensor[(8, 13, 3), bool],) */;
    %1389 = @func_3418() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32]) */;
    %1390 = %1388.0;
    %1391 = %1389.0;
    (%1390, %1391)
  };
  %1392() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(8, 13, 3), float32]) */
}

def @func_13184(%var_13167: Tensor[(560), float64]) -> (Tensor[(126), int8], Tensor[(104), float32], Tensor[(560), float64], Tensor[(126), int8]) {
  %1393 = @func_9375() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
  %1394 = cast(%var_13167, dtype="float64") /* ty=Tensor[(560), float64] */;
  %1395 = reshape(%1394, newshape=[8, 7, 10]) /* ty=Tensor[(8, 7, 10), float64] */;
  %1396 = @func_9999(%1395) /* ty=(Tensor[(650), int64], Tensor[(104), float32], Tensor[(8, 7, 10), float64]) */;
  %1397 = @func_7848() /* ty=(Tensor[(8, 13, 3), bool], Tensor[(3, 14, 3), uint32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(104), float32], Tensor[(26, 4), float32]) */;
  %1398 = %1393.0;
  %1399 = %1396.1;
  %1400 = %1397.3;
  (%1398, %1399, %var_13167, %1400)
}

def @func_2294() -> (Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) {
  @func_2292() /* ty=(Tensor[(126), int8], Tensor[(8, 13, 3), bool], Tensor[(1, 104), float32], Tensor[(8, 13, 3), float32], Tensor[(126), int8], Tensor[(126), int8], Tensor[(8, 13, 3), float32], Tensor[(8, 13, 3), float32], Tensor[(4, 13, 2), float32], Tensor[(8, 13, 3), float32]) */
}

def @func_13579() -> (Tensor[(126), int8],) {
  %1401 = @func_2318() /* ty=(Tensor[(126), int8], Tensor[(8, 10, 8), int8], Tensor[(640), int8]) */;
  %1402 = %1401.0;
  (%1402,)
}

def @func_12898() -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
  %1407 = fn () -> (Tensor[(8, 13, 3), float32], Tensor[(126), int8]) {
    %1403 = @func_11370() /* ty=(Tensor[(8, 13, 3), float32],) */;
    %1404 = @func_11328() /* ty=(Tensor[(126), int8], Tensor[(126), int8]) */;
    %1405 = %1403.0;
    %1406 = %1404.0;
    (%1405, %1406)
  };
  %1407() /* ty=(Tensor[(8, 13, 3), float32], Tensor[(126), int8]) */
}

def @func_11453(%var_11451: int64) -> (Tensor[(1, 15, 2), int64], Tensor[(1, 15, 2), bool]) {
  @func_11450(%var_11451) /* ty=(Tensor[(1, 15, 2), int64], Tensor[(1, 15, 2), bool]) */
}

def @func_12584(%var_12555: Tensor[(11, 4, 4), float64]) -> Tensor[(11, 4, 4), float32] {
  %1408 = cast(%var_12555, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %1409 = cosh(%1408) /* ty=Tensor[(11, 4, 4), float64] */;
  %1410 = cast(%1409, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  asin(%1410) /* ty=Tensor[(11, 4, 4), float32] */
}

def @func_9069() -> (Tensor[(8, 13, 3), float32],) {
  %1411 = @func_3066() /* ty=(Tensor[(8, 13, 3), float32],) */;
  %1412 = %1411.0;
  (%1412,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen715/build/output.py", line 4525, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:57:42] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

