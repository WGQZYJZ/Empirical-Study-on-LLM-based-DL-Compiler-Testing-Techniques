==========mod==========
#[version = "0.0.5"]
def @func_6209() -> (Tensor[(8, 16, 5), int16], Tensor[(4, 13, 13), bool]) {
  %0 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
  %1 = %0.0;
  %2 = @func_3989() /* ty=Tensor[(4, 13, 13), bool] */;
  (%1, %2)
}

def @func_2854() -> Tensor[(8, 16, 5), float32] {
  %3 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %3.0
}

def @func_2151(%var_2139: Tensor[(4, 13, 13), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32]) {
  %4 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  %5 = cast(%var_2139, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %9 = cast(%var_2139, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %10 = divide(%7, %8) /* ty=Tensor[(4, 13, 13), float32] */;
  %11 = sqrt(%9) /* ty=Tensor[(4, 13, 13), float32] */;
  (%10, %11)
}

def @func_4026(%var_3995: Tensor[(5, 13, 13), float64], %var_4011: Tensor[(13, 52), int8]) -> (Tensor[(5, 13, 13), float64], Tensor[(4, 13, 13), bool], Tensor[(13, 52), int8], Tensor[(4, 13, 13), int64]) {
  %12 = cast(%var_3995, dtype="float64") /* ty=Tensor[(5, 13, 13), float64] */;
  %13 = cast(%var_4011, dtype="int8") /* ty=Tensor[(13, 52), int8] */;
  %14 = reshape(%13, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), int8] */;
  %15 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %16 = asinh(%12) /* ty=Tensor[(5, 13, 13), float64] */;
  %17 = @func_3136(%14) /* ty=Tensor[(4, 13, 13), bool] */;
  %18 = %15.1;
  (%16, %17, %var_4011, %18)
}

def @func_7134() -> Tensor[(1120), float64] {
  @func_4560() /* ty=Tensor[(1120), float64] */
}

def @func_5276(%var_5267: Tensor[(840), uint64]) -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) {
  %19 = @func_3016() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */;
  %20 = cast(%var_5267, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %21 = cast(%var_5267, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %22 = reshape(%20, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %23 = reshape(%21, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %24 = @func_3606() /* ty=Tensor[(4, 13, 13), uint64] */;
  %25 = %19.2;
  %26 = @func_742(%22, %23) /* ty=Tensor[(14, 15, 4), bool] */;
  (%24, %25, %26, %var_5267)
}

def @func_6136() -> (Tensor[(4, 13, 13), int8],) {
  %27 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %28 = %27.0;
  (%28,)
}

def @func_4350() -> (Tensor[(14, 15, 4), float64],) {
  %29 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %30 = %29.0;
  (%30,)
}

def @func_5653() -> (Tensor[(640), float32],) {
  %31 = @func_3652() /* ty=(Tensor[(640), float32],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float32") /* ty=Tensor[(640), float32] */;
  %34 = rsqrt(%33) /* ty=Tensor[(640), float32] */;
  (%34,)
}

def @func_6817() -> (Tensor[(8, 16, 5), float32],) {
  %35 = @func_6154() /* ty=Tensor[(8, 16, 5), float32] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %37 = asinh(%36) /* ty=Tensor[(8, 16, 5), float32] */;
  (%37,)
}

def @func_2700(%var_2689: Tensor[(4, 13, 13), int8]) -> (Tensor[(4, 13, 13), bool], Tensor[(14, 15, 4), bool]) {
  %38 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %39 = %38.0;
  %40 = cast(%var_2689, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %44 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %45 = less(%42, %43) /* ty=Tensor[(4, 13, 13), bool] */;
  %46 = %44.0;
  (%45, %46)
}

def @func_1737() -> (Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) {
  %47 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %48 = %47.1;
  %49 = cast(%48, dtype="float64") /* ty=Tensor[(14, 15, 4), float64] */;
  %50 = cast(%48, dtype="float64") /* ty=Tensor[(14, 15, 4), float64] */;
  %51 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %52 = cosh(%49) /* ty=Tensor[(14, 15, 4), float64] */;
  %53 = acosh(%50) /* ty=Tensor[(14, 15, 4), float64] */;
  %54 = %51.1;
  (%52, %53, %54)
}

def @func_3234() -> (Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) {
  %55 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %56 = reshape(%55, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %57 = @func_1829(%56) /* ty=(Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) */;
  %58 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %59 = %58.0;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(640), float32] */;
  %61 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %62 = reshape(%60, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %63 = reshape(%61, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
  %64 = @func_2445(%62, %63) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
  %65 = @func_3016() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */;
  %66 = cast(%59, dtype="float32") /* ty=Tensor[(640), float32] */;
  %67 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %68 = %57.2;
  %69 = %64.3;
  %70 = %65.2;
  %71 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  %72 = erf(%66) /* ty=Tensor[(640), float32] */;
  %73 = %67.0;
  (%68, meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, %69, %70, %71, %72, %73)
}

def @func_7149() -> Tensor[(4, 13, 13), int8] {
  %74 = @func_3736() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %74.0
}

def @main() -> (Tensor[(14, 15, 7), float32],) {
  %75 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 7), float32] */;
  %76 = acosh(%75) /* ty=Tensor[(14, 15, 7), float32] */;
  (%76,)
}

def @func_3016() -> (Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) {
  %77 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %78 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %79 = %77.0;
  %80 = cast(%79, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %81 = reshape(%80, newshape=[676, 1]) /* ty=Tensor[(676, 1), float32] */;
  %82 = @func_2542(%81) /* ty=(Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) */;
  %83 = %78.0;
  %84 = %82.9;
  (%79, %83, %84)
}

def @func_7982() -> (Tensor[(4, 13, 13), uint64],) {
  %85 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %86 = %85.0;
  (%86,)
}

def @func_588(%var_573: Tensor[(10, 7, 16), int8], %var_574: Tensor[(10, 7, 16), int8]) -> (Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) {
  %87 = cast(%var_574, dtype="bool") /* ty=Tensor[(10, 7, 16), bool] */;
  %88 = shape_of(%var_573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_573, dtype="bool") /* ty=Tensor[(10, 7, 16), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = cast(%var_574, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %92 = equal(%89, %90) /* ty=Tensor[(10, 7, 16), bool] */;
  %93 = sigmoid(%91) /* ty=Tensor[(10, 7, 16), float64] */;
  (%92, %93)
}

def @func_3442() -> (Tensor[(14, 15, 4), float64],) {
  %94 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %95 = %94.1;
  (%95,)
}

def @func_6880() -> (Tensor[(4, 13, 13), uint64],) {
  %96 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %97 = %96.0;
  (%97,)
}

def @func_4846(%var_4790: Tensor[(15, 5, 14), uint8]) -> (Tensor[(15, 5, 14), uint8], Tensor[(4, 13, 13), float32]) {
  %98 = cast(%var_4790, dtype="uint8") /* ty=Tensor[(15, 5, 14), uint8] */;
  %99 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(15, 5, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 5, 14), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 14), uint8] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %102 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
  %103 = bitwise_or(%100, %101) /* ty=Tensor[(15, 5, 14), uint8] */;
  %104 = %102.2;
  (%103, %104)
}

def @func_3163() -> Tensor[(8, 16, 5), float32] {
  %105 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %105.0
}

def @func_3136(%var_3121: Tensor[(4, 13, 13), int8]) -> Tensor[(4, 13, 13), bool] {
  %106 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %107 = %106.0;
  %108 = cast(%var_3121, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%110, %111) /* ty=Tensor[(4, 13, 13), bool] */
}

def @func_7609() -> (Tensor[(30), float32], Tensor[(4, 13, 13), float64], Tensor[(640), float32]) {
  %112 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
  %113 = @func_6323() /* ty=(Tensor[(4, 13, 13), int64],) */;
  %114 = %113.0;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %116 = %112.2;
  %117 = asinh(%115) /* ty=Tensor[(4, 13, 13), float64] */;
  %118 = @func_4985() /* ty=Tensor[(640), float32] */;
  (%116, %117, %118)
}

def @func_1211() -> Tensor[(4, 13, 13), int8] {
  %119 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %119.0
}

def @func_5006() -> (Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) {
  %120 = @func_3163() /* ty=Tensor[(8, 16, 5), float32] */;
  %121 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 16, 5), float32] */, dtype="int16") /* ty=Tensor[(8, 16, 5), int16] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="int16") /* ty=Tensor[(8, 16, 5), int16] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %125 = cast(meta[relay.Constant][4] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %126 = reshape(%125, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), float32] */;
  %127 = multiply(%123, %124) /* ty=Tensor[(8, 16, 5), int16] */;
  %128 = @func_1979(%126) /* ty=Tensor[(3, 2, 5), float32] */;
  (%127, %128, meta[relay.Constant][4] /* ty=Tensor[(30), float32] */)
}

def @func_4390() -> Tensor[(640), float32] {
  %129 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %129.1
}

def @func_6079() -> Tensor[(4, 13, 13), uint64] {
  @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_7928(%var_7911: Tensor[(2, 320), float32]) -> (Tensor[(14, 15, 4), float32], Tensor[(4, 13, 13), uint64], Tensor[(2, 320), float32]) {
  %130 = @func_4631() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) */;
  %131 = %130.3;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(14, 15, 4), float32] */;
  %133 = cast(%var_7911, dtype="float32") /* ty=Tensor[(2, 320), float32] */;
  %134 = reshape(%133, newshape=[2, 320]) /* ty=Tensor[(2, 320), float32] */;
  %135 = @func_3837(%134) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), float32], Tensor[(1120, 1), int8], Tensor[(2, 320), float64], Tensor[(4, 13, 13), uint64]) */;
  %136 = atanh(%132) /* ty=Tensor[(14, 15, 4), float32] */;
  %137 = %135.0;
  (%136, %137, %var_7911)
}

def @func_1979(%var_1974: Tensor[(3, 2, 5), float32]) -> Tensor[(3, 2, 5), float32] {
  %138 = cast(%var_1974, dtype="float32") /* ty=Tensor[(3, 2, 5), float32] */;
  sinh(%138) /* ty=Tensor[(3, 2, 5), float32] */
}

def @func_742(%var_735: Tensor[(14, 15, 4), uint64], %var_736: Tensor[(14, 15, 4), uint64]) -> Tensor[(14, 15, 4), bool] {
  %139 = cast(%var_736, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
  %140 = shape_of(%var_735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_735, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%141, %142) /* ty=Tensor[(14, 15, 4), bool] */
}

def @func_2373() -> Tensor[(4, 13, 13), int64] {
  %143 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %143.1
}

def @func_2200() -> (Tensor[(14, 15, 4), bool],) {
  %144 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %145 = %144.1;
  (%145,)
}

def @func_1071(%var_1046: Tensor[(1120), int8]) -> (Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int32], Tensor[(4, 13, 13), int64]) {
  %146 = cast(%var_1046, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %147 = cast(%var_1046, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %148 = reshape(%146, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %149 = reshape(%147, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %150 = @func_588(%148, %149) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %151 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %154 = rsqrt(%153) /* ty=Tensor[(4, 13, 13), float64] */;
  %155 = cast(%152, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %159 = floor_mod(%157, %158) /* ty=Tensor[(4, 13, 13), float64] */;
  %160 = cast(%152, dtype="int32") /* ty=Tensor[(4, 13, 13), int32] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="int32") /* ty=Tensor[(4, 13, 13), int32] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %164 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %165 = %150.1;
  %166 = add(%162, %163) /* ty=Tensor[(4, 13, 13), int32] */;
  %167 = %164.1;
  (%165, %var_1046, %166, %167)
}

def @func_2661() -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) {
  %168 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %171 = cast(meta[relay.Constant][5] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %172 = reshape(%171, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %173 = @func_1829(%172) /* ty=(Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) */;
  %174 = log2(%170) /* ty=Tensor[(4, 13, 13), float32] */;
  %175 = %173.5;
  (%174, %175, meta[relay.Constant][5] /* ty=Tensor[(1120), int8] */)
}

def @func_7026() -> Tensor[(14, 15, 4), float64] {
  %176 = @func_5125() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %176.0
}

def @func_2124() -> (Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) {
  %177 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %178 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %179 = %177.2;
  %180 = %178.0;
  (%179, %180)
}

def @func_5247(%var_5244: Tensor[(600), float64], %var_5245: Tensor[(1568), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(5, 8, 15), float64], Tensor[(600), float64], Tensor[(1568), float32]) {
  %181 = cast(%var_5244, dtype="float64") /* ty=Tensor[(600), float64] */;
  %182 = cast(%var_5244, dtype="float64") /* ty=Tensor[(600), float64] */;
  %183 = cast(%var_5245, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %184 = cast(%var_5244, dtype="float64") /* ty=Tensor[(600), float64] */;
  %185 = reshape(%181, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %186 = reshape(%182, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %187 = reshape(%183, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), float32] */;
  %188 = reshape(%184, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %189 = @func_5189(%185, %186, %187, %188) /* ty=(Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) */;
  %190 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  %191 = %189.0;
  (%190, %191, %var_5244, %var_5245)
}

def @func_5802() -> Tensor[(8, 16, 5), float32] {
  %192 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %192.1
}

def @func_5065(%var_5059: Tensor[(8, 16, 5), float32]) -> (Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool]) {
  %193 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %195 = reshape(%194, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %196 = cast(%var_5059, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %197 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%193, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = @func_1132(%195) /* ty=Tensor[(8, 16, 5), float32] */;
  %201 = equal(%198, %199) /* ty=Tensor[(8, 16, 5), bool] */;
  (%200, %201)
}

def @func_8033() -> Tensor[(14, 15, 4), bool] {
  %202 = @func_6569() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %202.0
}

def @func_6642() -> (Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int16]) {
  %203 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %204 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %205 = @func_6209() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(4, 13, 13), bool]) */;
  %206 = %203.0;
  %207 = %204.0;
  %208 = %205.0;
  (%206, %207, %208)
}

def @func_6777(%var_6698: Tensor[(14, 14, 4), float32], %var_6699: Tensor[(14, 14, 4), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(640), float32], Tensor[(640), float32], Tensor[(14, 14, 4), uint32], Tensor[(4, 13, 13), uint64], Tensor[(14, 14, 4), float64], Tensor[(14, 14, 4), uint64]) {
  %209 = @func_4462() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %210 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %211 = cast(%var_6699, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %212 = erf(%211) /* ty=Tensor[(14, 14, 4), float64] */;
  %213 = cast(%var_6699, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %217 = bitwise_and(%215, %216) /* ty=Tensor[(14, 14, 4), uint32] */;
  %218 = cast(%212, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %222 = cast(%var_6699, dtype="float32") /* ty=Tensor[(14, 14, 4), float32] */;
  %223 = shape_of(%var_6698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_6698, dtype="float32") /* ty=Tensor[(14, 14, 4), float32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %226 = floor_divide(%224, %225) /* ty=Tensor[(14, 14, 4), float32] */;
  %227 = cast(%226, dtype="bool") /* ty=Tensor[(14, 14, 4), bool] */;
  %228 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%217, dtype="bool") /* ty=Tensor[(14, 14, 4), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = greater(%229, %230) /* ty=Tensor[(14, 14, 4), bool] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %233 = log10(%232) /* ty=Tensor[(14, 14, 4), float64] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %235 = cast(%var_6698, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %236 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%233, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %239 = %209.1;
  %240 = @func_4560() /* ty=Tensor[(1120), float64] */;
  %241 = @func_6256() /* ty=Tensor[(640), float32] */;
  %242 = %210.2;
  %243 = logical_xor(%220, %221) /* ty=Tensor[(14, 14, 4), uint32] */;
  %244 = @func_6079() /* ty=Tensor[(4, 13, 13), uint64] */;
  %245 = atanh(%234) /* ty=Tensor[(14, 14, 4), float64] */;
  %246 = multiply(%237, %238) /* ty=Tensor[(14, 14, 4), uint64] */;
  (%239, %240, %241, %242, %243, %244, %245, %246)
}

def @func_2445(%var_2420: Tensor[(640), float32], %var_2440: Tensor[(56, 20), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) {
  %247 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
  %248 = cast(%var_2420, dtype="float32") /* ty=Tensor[(640), float32] */;
  %249 = reshape(%248, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %250 = cast(%var_2440, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
  %251 = cast(%var_2440, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
  %252 = reshape(%250, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %253 = reshape(%251, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %254 = @func_588(%252, %253) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %255 = %247.0;
  %256 = @func_1132(%249) /* ty=Tensor[(8, 16, 5), float32] */;
  %257 = %254.0;
  (%255, %256, %var_2420, %257, %var_2440)
}

def @func_4083(%var_4031: Tensor[(1, 3, 5), uint32], %var_4032: Tensor[(4, 3, 5), uint32]) -> Tensor[(4, 3, 5), float32] {
  %258 = cast(%var_4032, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %259 = atanh(%258) /* ty=Tensor[(4, 3, 5), float64] */;
  %260 = cast(%var_4031, dtype="uint32") /* ty=Tensor[(1, 3, 5), uint32] */;
  %261 = cast(%var_4032, dtype="uint32") /* ty=Tensor[(4, 3, 5), uint32] */;
  %262 = bitwise_or(%260, %261) /* ty=Tensor[(4, 3, 5), uint32] */;
  %263 = cast(%262, dtype="uint8") /* ty=Tensor[(4, 3, 5), uint8] */;
  %264 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%259, dtype="uint8") /* ty=Tensor[(4, 3, 5), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %267 = subtract(%265, %266) /* ty=Tensor[(4, 3, 5), uint8] */;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(4, 3, 5), float32] */;
  acos(%268) /* ty=Tensor[(4, 3, 5), float32] */
}

def @func_7237() -> (Tensor[(14, 15, 4), float64], Tensor[(640), uint8], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64]) {
  %269 = @func_4350() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %270 = @func_4985() /* ty=Tensor[(640), float32] */;
  %271 = cast(meta[relay.Constant][6] /* ty=Tensor[(640), float32] */, dtype="uint8") /* ty=Tensor[(640), uint8] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(1), int32] */;
  %273 = cast(%270, dtype="uint8") /* ty=Tensor[(640), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %275 = @func_6471() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %276 = @func_3736() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %277 = %269.0;
  %278 = logical_xor(%273, %274) /* ty=Tensor[(640), uint8] */;
  %279 = %275.0;
  %280 = %276.3;
  (%277, %278, %279, %280)
}

def @func_1132(%var_1120: Tensor[(8, 16, 5), float32]) -> Tensor[(8, 16, 5), float32] {
  %281 = cast(%var_1120, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  rsqrt(%281) /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_5399(%var_5351: Tensor[(10, 6, 13), float64], %var_5387: Tensor[(10, 6, 13), bool]) -> (Tensor[(4, 13, 13), int64], Tensor[(10, 6, 13), float64]) {
  %282 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %283 = cast(%var_5351, dtype="float64") /* ty=Tensor[(10, 6, 13), float64] */;
  %284 = sigmoid(%283) /* ty=Tensor[(10, 6, 13), float64] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(10, 6, 13), float32] */;
  %286 = sinh(%285) /* ty=Tensor[(10, 6, 13), float32] */;
  %287 = cast(%284, dtype="bool") /* ty=Tensor[(10, 6, 13), bool] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="bool") /* ty=Tensor[(10, 6, 13), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %291 = equal(%289, %290) /* ty=Tensor[(10, 6, 13), bool] */;
  %292 = cast(%var_5387, dtype="float64") /* ty=Tensor[(10, 6, 13), float64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="float64") /* ty=Tensor[(10, 6, 13), float64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %296 = %282.1;
  %297 = power(%294, %295) /* ty=Tensor[(10, 6, 13), float64] */;
  (%296, %297)
}

def @func_6823() -> (Tensor[(4, 13, 13), int64],) {
  %298 = @func_3284() /* ty=Tensor[(4, 13, 13), int64] */;
  (%298,)
}

def @func_7863() -> (Tensor[(12, 14, 4), float64],) {
  %299 = @func_5959() /* ty=(Tensor[(12, 14, 4), float64],) */;
  %300 = %299.0;
  (%300,)
}

def @func_6471() -> (Tensor[(14, 15, 4), float64],) {
  %301 = @func_5125() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %302 = %301.0;
  (%302,)
}

def @func_5959() -> (Tensor[(12, 14, 4), float64],) {
  %303 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 4), float64] */;
  %304 = rsqrt(%303) /* ty=Tensor[(12, 14, 4), float64] */;
  (%304,)
}

def @func_3989() -> Tensor[(4, 13, 13), bool] {
  %305 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  %306 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 13, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%308, %309) /* ty=Tensor[(4, 13, 13), bool] */
}

def @func_2082() -> Tensor[(4, 13, 13), uint64] {
  %310 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %310.1
}

def @func_2610(%var_2585: Tensor[(320, 2), float32]) -> (Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(8, 16, 5), bool]) {
  %311 = cast(%var_2585, dtype="float32") /* ty=Tensor[(320, 2), float32] */;
  %312 = cast(meta[relay.Constant][9] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %313 = reshape(%311, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %314 = reshape(%312, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
  %315 = @func_2445(%313, %314) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
  %316 = %315.1;
  %317 = cast(%var_2585, dtype="bool") /* ty=Tensor[(320, 2), bool] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  %322 = greater(%319, %320) /* ty=Tensor[(8, 16, 5), bool] */;
  (%321, meta[relay.Constant][9] /* ty=Tensor[(1120), int8] */, %322)
}

def @func_2176() -> Tensor[(14, 15, 4), float64] {
  %323 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %323.0
}

def @func_5901() -> Tensor[(4, 13, 13), int64] {
  %324 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %324.0
}

def @func_4513() -> Tensor[(640), float32] {
  %325 = @func_3234() /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %325.5
}

def @func_1453() -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) {
  %326 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %329 = exp(%328) /* ty=Tensor[(4, 13, 13), float32] */;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %331 = cast(%329, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %332 = reshape(%330, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %333 = reshape(%331, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %334 = @func_1021(%332, %333) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
  %335 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %336 = cast(%329, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %337 = %334.4;
  %338 = %335.0;
  %339 = sigmoid(%336) /* ty=Tensor[(4, 13, 13), float32] */;
  (%337, %338, %339)
}

def @func_3606() -> Tensor[(4, 13, 13), uint64] {
  @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_6545() -> (Tensor[(1120), float64], Tensor[(8, 16, 5), float32]) {
  %340 = @func_3234() /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %341 = %340.6;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %343 = sinh(%342) /* ty=Tensor[(8, 16, 5), float32] */;
  %344 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %348 = @func_4560() /* ty=Tensor[(1120), float64] */;
  %349 = power(%346, %347) /* ty=Tensor[(8, 16, 5), float32] */;
  (%348, %349)
}

def @func_4220() -> (Tensor[(4, 13, 13), int8], Tensor[(676), float32], Tensor[(8, 16, 5), bool]) {
  %350 = cast(meta[relay.Constant][11] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %351 = reshape(%350, newshape=[676, 1]) /* ty=Tensor[(676, 1), float32] */;
  %352 = @func_2542(%351) /* ty=(Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) */;
  %353 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %354 = %353.1;
  %355 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 16, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %359 = %352.3;
  %360 = less(%357, %358) /* ty=Tensor[(8, 16, 5), bool] */;
  (%359, meta[relay.Constant][11] /* ty=Tensor[(676), float32] */, %360)
}

def @func_7365() -> (Tensor[(4, 13, 13), float64],) {
  %361 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %362 = %361.0;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %364 = tan(%363) /* ty=Tensor[(4, 13, 13), float64] */;
  (%364,)
}

def @func_1469() -> (Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) {
  %365 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %366 = %365.1;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %368 = cast(%366, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %369 = reshape(%367, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %370 = reshape(%368, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %371 = @func_1021(%369, %370) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
  %372 = %371.0;
  (%366, %372)
}

def @func_4195(%var_4189: Tensor[(200), uint16]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), uint64], Tensor[(200), uint16], Tensor[(3, 2, 5), float32]) {
  %373 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %374 = cast(%var_4189, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %375 = reshape(%374, newshape=[4, 5, 10]) /* ty=Tensor[(4, 5, 10), uint16] */;
  %376 = @func_2265(%375) /* ty=(Tensor[(4, 5, 10), float32], Tensor[(3, 2, 5), float32], Tensor[(30), float32], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %377 = %376.1;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(3, 2, 5), float32] */;
  %379 = @func_2221() /* ty=Tensor[(640), float32] */;
  %380 = %373.0;
  %381 = atan(%378) /* ty=Tensor[(3, 2, 5), float32] */;
  (%379, %380, %var_4189, %381)
}

def @func_3893(%var_3841: Tensor[(6, 11, 8), float64], %var_3868: Tensor[(8, 16, 5), float32]) -> (Tensor[(6, 11, 8), float64], Tensor[(8, 16, 5), int8], Tensor[(640), float32]) {
  %382 = cast(%var_3841, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %383 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %384 = %383.0;
  %385 = cast(%var_3868, dtype="int8") /* ty=Tensor[(8, 16, 5), int8] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="int8") /* ty=Tensor[(8, 16, 5), int8] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %389 = atan(%382) /* ty=Tensor[(6, 11, 8), float64] */;
  %390 = add(%387, %388) /* ty=Tensor[(8, 16, 5), int8] */;
  %391 = @func_1570() /* ty=Tensor[(640), float32] */;
  (%389, %390, %391)
}

def @func_4560() -> Tensor[(1120), float64] {
  %392 = @func_3234() /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %392.3
}

def @func_1639(%var_1604: Tensor[(8, 16, 5), float32]) -> (Tensor[(640), float32], Tensor[(8, 16, 5), uint32], Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool], Tensor[(8, 16, 5), float32]) {
  %393 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %394 = %393.2;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(640), float32] */;
  %396 = reshape(%395, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %397 = @func_1132(%396) /* ty=Tensor[(8, 16, 5), float32] */;
  %398 = cast(%var_1604, dtype="uint32") /* ty=Tensor[(8, 16, 5), uint32] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="uint32") /* ty=Tensor[(8, 16, 5), uint32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %402 = left_shift(%400, %401) /* ty=Tensor[(8, 16, 5), uint32] */;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %404 = reshape(%403, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %405 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 16, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %406 = shape_of(%var_1604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%var_1604, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = cast(%var_1604, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %410 = @func_1132(%404) /* ty=Tensor[(8, 16, 5), float32] */;
  %411 = not_equal(%407, %408) /* ty=Tensor[(8, 16, 5), bool] */;
  %412 = sqrt(%409) /* ty=Tensor[(8, 16, 5), float32] */;
  (%394, %402, %410, %411, %412)
}

def @func_4882() -> (Tensor[(4, 13, 13), int8],) {
  %413 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  (%413,)
}

def @func_3490(%var_3471: Tensor[(640), float32]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(640), float32]) {
  %414 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %415 = %414.1;
  %416 = cast(%var_3471, dtype="float32") /* ty=Tensor[(640), float32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = cast(%415, dtype="float32") /* ty=Tensor[(640), float32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), float32] */;
  %420 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %421 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %422 = floor_mod(%418, %419) /* ty=Tensor[(640), float32] */;
  %423 = %420.0;
  %424 = %421.0;
  (%422, %423, %424)
}

def @func_1933() -> (Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) {
  %425 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
  %426 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %427 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %428 = %427.1;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %430 = %426.1;
  %431 = cast(%430, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
  %432 = cast(%430, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
  %433 = reshape(%431, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %434 = reshape(%432, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %435 = %425.2;
  %436 = sinh(%429) /* ty=Tensor[(4, 13, 13), float64] */;
  %437 = @func_742(%433, %434) /* ty=Tensor[(14, 15, 4), bool] */;
  (%435, %430, %436, %437)
}

def @func_815() -> (Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) {
  %438 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %439 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %442 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %443 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %446 = maximum(%440, %441) /* ty=Tensor[(4, 13, 13), int64] */;
  %447 = bitwise_xor(%444, %445) /* ty=Tensor[(4, 13, 13), int64] */;
  (%446, %447)
}

def @func_2542(%var_2459: Tensor[(676, 1), float32]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) {
  %448 = cast(%var_2459, dtype="float32") /* ty=Tensor[(676, 1), float32] */;
  %449 = cast(%var_2459, dtype="float32") /* ty=Tensor[(676, 1), float32] */;
  %450 = reshape(%448, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %451 = reshape(%449, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %452 = @func_1021(%450, %451) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
  %453 = @func_1933() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) */;
  %454 = @func_1570() /* ty=Tensor[(640), float32] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(640), float32] */;
  %456 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %457 = reshape(%455, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %458 = reshape(%456, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
  %459 = @func_2445(%457, %458) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
  %460 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %461 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %462 = reshape(%461, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %463 = @func_1829(%462) /* ty=(Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) */;
  %464 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), int8] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
  %465 = cast(%var_2459, dtype="uint16") /* ty=Tensor[(676, 1), uint16] */;
  %466 = %453.0;
  %467 = cast(%466, dtype="int8") /* ty=Tensor[(4, 13, 13), int8] */;
  %468 = reshape(%467, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), int8] */;
  %469 = @func_2151(%468) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32]) */;
  %470 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), int8] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %471 = log2(%470) /* ty=Tensor[(1120), float32] */;
  %472 = cast(%471, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %473 = %452.4;
  %474 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  %475 = %459.4;
  %476 = %460.0;
  %477 = %463.3;
  %478 = subtract(%464, %465) /* ty=Tensor[(676, 1120), uint16] */;
  %479 = %469.0;
  %480 = atanh(%472) /* ty=Tensor[(1120), float64] */;
  (%454, %473, %466, %474, %475, %476, %477, %478, %479, %480)
}

def @func_3736() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) {
  %481 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %482 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %483 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
  %484 = %481.0;
  %485 = %482.1;
  %486 = %483.1;
  %487 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  (%484, %485, %486, %487)
}

def @func_3837(%var_3804: Tensor[(2, 320), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), float32], Tensor[(1120, 1), int8], Tensor[(2, 320), float64], Tensor[(4, 13, 13), uint64]) {
  %488 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 320), float32] */, dtype="float32") /* ty=Tensor[(2, 320), float32] */;
  %489 = cast(meta[relay.Constant][18] /* ty=Tensor[(1120, 1), int8] */, dtype="int8") /* ty=Tensor[(1120, 1), int8] */;
  %490 = reshape(%488, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %491 = reshape(%489, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
  %492 = @func_2445(%490, %491) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
  %493 = cast(%var_3804, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
  %494 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 320), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %495 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 320), float32] */, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %497 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  %498 = %492.0;
  %499 = subtract(%495, %496) /* ty=Tensor[(2, 320), float64] */;
  %500 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  (%497, %498, meta[relay.Constant][18] /* ty=Tensor[(1120, 1), int8] */, %499, %500)
}

def @func_6854(%var_6835: Tensor[(9, 6, 15), uint8]) -> (Tensor[(9, 6, 15), uint8],) {
  %501 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %502 = cast(%var_6835, dtype="uint8") /* ty=Tensor[(9, 6, 15), uint8] */;
  %503 = bitwise_or(%501, %502) /* ty=Tensor[(9, 6, 15), uint8] */;
  (%503,)
}

def @func_6299() -> (Tensor[(4, 13, 13), int64],) {
  %504 = @func_2373() /* ty=Tensor[(4, 13, 13), int64] */;
  (%504,)
}

def @func_2265(%var_2231: Tensor[(4, 5, 10), uint16]) -> (Tensor[(4, 5, 10), float32], Tensor[(3, 2, 5), float32], Tensor[(30), float32], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) {
  %505 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 5, 10), uint16] */, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %506 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_2231, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = less(%507, %508) /* ty=Tensor[(4, 5, 10), bool] */;
  %510 = cast(%var_2231, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %514 = cast(meta[relay.Constant][21] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %515 = reshape(%514, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), float32] */;
  %516 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %517 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %518 = divide(%512, %513) /* ty=Tensor[(4, 5, 10), float32] */;
  %519 = @func_1979(%515) /* ty=Tensor[(3, 2, 5), float32] */;
  %520 = %516.0;
  %521 = %517.0;
  (%518, %519, meta[relay.Constant][21] /* ty=Tensor[(30), float32] */, %520, %521)
}

def @func_7171() -> (Tensor[(8, 16, 5), float32],) {
  %522 = @func_2709() /* ty=Tensor[(8, 16, 5), float32] */;
  (%522,)
}

def @func_4631() -> (Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) {
  %523 = @func_4350() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %524 = @func_4406() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %525 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
  %526 = @func_4390() /* ty=Tensor[(640), float32] */;
  %527 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  %528 = %523.0;
  %529 = @func_2373() /* ty=Tensor[(4, 13, 13), int64] */;
  %530 = @func_3606() /* ty=Tensor[(4, 13, 13), uint64] */;
  %531 = %524.0;
  (%525, %526, %527, %528, %529, %530, %531)
}

def @func_4406() -> (Tensor[(14, 15, 4), float64],) {
  %532 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %533 = %532.0;
  (%533,)
}

def @func_2322() -> Tensor[(4, 13, 13), int64] {
  %534 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %534.0
}

def @func_1570() -> Tensor[(640), float32] {
  %535 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %535.0
}

def @func_1315() -> (Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) {
  %536 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %537 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %538 = reshape(%537, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %539 = %536.0;
  %540 = @func_1132(%538) /* ty=Tensor[(8, 16, 5), float32] */;
  (%539, %540, meta[relay.Constant][22] /* ty=Tensor[(640), float32] */)
}

def @func_2057(%var_2035: Tensor[(4, 13, 13), float32], %var_2046: Tensor[(1120), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) {
  %541 = @func_1933() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) */;
  %542 = %541.0;
  %543 = cast(%var_2035, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %547 = cast(%var_2046, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %548 = cast(%var_2046, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %549 = reshape(%547, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %550 = reshape(%548, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %551 = @func_588(%549, %550) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %552 = minimum(%545, %546) /* ty=Tensor[(4, 13, 13), float32] */;
  %553 = %551.0;
  (%552, %553, %var_2046)
}

def @func_897() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) {
  %554 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %555 = %554.1;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %557 = sin(%556) /* ty=Tensor[(4, 13, 13), float32] */;
  %558 = cast(%557, dtype="int8") /* ty=Tensor[(4, 13, 13), int8] */;
  %559 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%555, dtype="int8") /* ty=Tensor[(4, 13, 13), int8] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %562 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %563 = %562.1;
  %564 = cast(%555, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %565 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%557, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %568 = logical_xor(%566, %567) /* ty=Tensor[(4, 13, 13), uint64] */;
  %569 = cast(%568, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %570 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%563, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %573 = multiply(%560, %561) /* ty=Tensor[(4, 13, 13), int8] */;
  %574 = bitwise_and(%571, %572) /* ty=Tensor[(4, 13, 13), uint64] */;
  (%573, %574)
}

def @func_1558() -> (Tensor[(640), float32], Tensor[(640), float32]) {
  %575 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %576 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %577 = %575.2;
  %578 = %576.2;
  (%577, %578)
}

def @func_2709() -> Tensor[(8, 16, 5), float32] {
  %579 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %579.1
}

def @func_5189(%var_5128: Tensor[(5, 8, 15), float64], %var_5129: Tensor[(5, 8, 15), float64], %var_5160: Tensor[(1, 1568), float32], %var_5181: Tensor[(5, 8, 15), float64]) -> (Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) {
  %580 = cast(%var_5129, dtype="float64") /* ty=Tensor[(5, 8, 15), float64] */;
  %581 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%var_5128, dtype="float64") /* ty=Tensor[(5, 8, 15), float64] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %584 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %585 = cast(%var_5160, dtype="float32") /* ty=Tensor[(1, 1568), float32] */;
  %586 = reshape(%585, newshape=[7, 16, 14]) /* ty=Tensor[(7, 16, 14), float32] */;
  %587 = @func_3322(%586) /* ty=(Tensor[(7, 16, 14), float32], Tensor[(640), float32]) */;
  %588 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
  %589 = cast(%var_5181, dtype="bool") /* ty=Tensor[(5, 8, 15), bool] */;
  %590 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_5128, dtype="bool") /* ty=Tensor[(5, 8, 15), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = power(%582, %583) /* ty=Tensor[(5, 8, 15), float64] */;
  %594 = %584.1;
  %595 = %587.0;
  %596 = %588.1;
  %597 = logical_and(%591, %592) /* ty=Tensor[(5, 8, 15), bool] */;
  (%593, %594, %595, %var_5160, %596, %597)
}

def @func_2730() -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) {
  %598 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  %599 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  (%598, %599)
}

def @func_1021(%var_960: Tensor[(4, 13, 13), float32], %var_982: Tensor[(4, 13, 13), float32]) -> (Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) {
  %600 = cast(meta[relay.Constant][23] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %601 = cast(meta[relay.Constant][23] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %602 = reshape(%600, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %603 = reshape(%601, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %604 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %607 = cosh(%606) /* ty=Tensor[(4, 13, 13), float32] */;
  %608 = cast(%var_960, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %612 = floor_divide(%610, %611) /* ty=Tensor[(4, 13, 13), float32] */;
  %613 = cast(%var_982, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = cast(%612, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %618 = erf(%617) /* ty=Tensor[(4, 13, 13), float64] */;
  %619 = cast(%var_960, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %623 = cast(%618, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %624 = @func_742(%602, %603) /* ty=Tensor[(14, 15, 4), bool] */;
  %625 = cast(%624, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
  %626 = cast(meta[relay.Constant][23] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %627 = reshape(%625, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %628 = reshape(%626, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %629 = cast(meta[relay.Constant][24] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %630 = cast(meta[relay.Constant][24] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %631 = reshape(%629, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %632 = reshape(%630, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %633 = @func_588(%631, %632) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %634 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %635 = greater(%615, %616) /* ty=Tensor[(4, 13, 13), bool] */;
  %636 = mod(%621, %622) /* ty=Tensor[(4, 13, 13), float64] */;
  %637 = atan(%623) /* ty=Tensor[(4, 13, 13), float32] */;
  %638 = @func_742(%627, %628) /* ty=Tensor[(14, 15, 4), bool] */;
  %639 = %633.1;
  %640 = %634.0;
  (%624, meta[relay.Constant][23] /* ty=Tensor[(840), uint64] */, %635, %636, %637, %638, %639, meta[relay.Constant][24] /* ty=Tensor[(1120), int8] */, %640)
}

def @func_2578() -> (Tensor[(4, 13, 13), float64], Tensor[(3, 2, 5), float32], Tensor[(30, 1), float32]) {
  %641 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %643 = cast(meta[relay.Constant][25] /* ty=Tensor[(30, 1), float32] */, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %644 = reshape(%643, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), float32] */;
  %645 = acos(%642) /* ty=Tensor[(4, 13, 13), float64] */;
  %646 = @func_1979(%644) /* ty=Tensor[(3, 2, 5), float32] */;
  (%645, %646, meta[relay.Constant][25] /* ty=Tensor[(30, 1), float32] */)
}

def @func_6147() -> Tensor[(8, 10, 5), float64] {
  %647 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  asin(%647) /* ty=Tensor[(8, 10, 5), float64] */
}

def @func_5811() -> Tensor[(14, 15, 4), float64] {
  %648 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %648.0
}

def @func_7753() -> (Tensor[(4, 13, 13), uint64], Tensor[(640), float32], Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(4, 6, 4), int64], Tensor[(16, 6), int64]) {
  %649 = @func_6029() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %650 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 6), int64] */, dtype="int64") /* ty=Tensor[(16, 6), int64] */;
  %651 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 6), int64] */, dtype="int64") /* ty=Tensor[(16, 6), int64] */;
  %652 = reshape(%650, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), int64] */;
  %653 = reshape(%651, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), int64] */;
  %654 = %649.0;
  %655 = @func_4390() /* ty=Tensor[(640), float32] */;
  %656 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  %657 = @func_4390() /* ty=Tensor[(640), float32] */;
  %658 = @func_7644(%652, %653) /* ty=Tensor[(4, 6, 4), int64] */;
  (%654, %655, %656, %657, %658, meta[relay.Constant][27] /* ty=Tensor[(16, 6), int64] */)
}

def @func_5945() -> (Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), float64]) {
  %659 = @func_4631() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) */;
  %660 = @func_2578() /* ty=(Tensor[(4, 13, 13), float64], Tensor[(3, 2, 5), float32], Tensor[(30, 1), float32]) */;
  %661 = %659.4;
  %662 = %660.0;
  (%661, %662)
}

def @func_6323() -> (Tensor[(4, 13, 13), int64],) {
  %663 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  (%663,)
}

def @func_5513(%var_5490: Tensor[(40, 16), float32]) -> (Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int8], Tensor[(528), float64], Tensor[(40, 16), float32]) {
  %664 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %665 = cast(meta[relay.Constant][28] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %666 = cast(%var_5490, dtype="float32") /* ty=Tensor[(40, 16), float32] */;
  %667 = reshape(%665, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), float64] */;
  %668 = reshape(%666, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %669 = @func_3893(%667, %668) /* ty=(Tensor[(6, 11, 8), float64], Tensor[(8, 16, 5), int8], Tensor[(640), float32]) */;
  %670 = %664.0;
  %671 = %669.1;
  (%670, %671, meta[relay.Constant][28] /* ty=Tensor[(528), float64] */, %var_5490)
}

def @func_4462() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) {
  %672 = @func_2661() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) */;
  %673 = %672.1;
  %674 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  (%673, %674)
}

def @func_5125() -> (Tensor[(14, 15, 4), float64],) {
  %675 = @func_4406() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %676 = %675.0;
  (%676,)
}

def @func_3939() -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), int8]) {
  %677 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %678 = @func_2661() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) */;
  %679 = %677.1;
  %680 = %678.2;
  (%679, %680)
}

def @func_1829(%var_1821: Tensor[(1120), int8]) -> (Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) {
  %681 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %682 = cast(%var_1821, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %683 = cast(%var_1821, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %684 = reshape(%682, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %685 = reshape(%683, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %686 = @func_588(%684, %685) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %687 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %688 = %687.1;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %690 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %692 = reshape(%689, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %693 = reshape(%691, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %694 = @func_1021(%692, %693) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
  %695 = %681.0;
  %696 = %686.1;
  %697 = %694.8;
  (%690, %695, %696, %var_1821, %688, %697)
}

def @func_3540() -> (Tensor[(8, 16, 5), float32],) {
  %698 = @func_3163() /* ty=Tensor[(8, 16, 5), float32] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %700 = erf(%699) /* ty=Tensor[(8, 16, 5), float32] */;
  (%700,)
}

def @func_2780() -> Tensor[(14, 15, 4), float64] {
  %701 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %701.1
}

def @func_3106() -> (Tensor[(640), float32], Tensor[(8, 16, 5), float32]) {
  %702 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(640), float32] */;
  %705 = cast(%703, dtype="float32") /* ty=Tensor[(640), float32] */;
  %706 = reshape(%705, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %707 = atanh(%704) /* ty=Tensor[(640), float32] */;
  %708 = @func_1132(%706) /* ty=Tensor[(8, 16, 5), float32] */;
  (%707, %708)
}

def @func_4303() -> Tensor[(8, 16, 5), float32] {
  @func_2854() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_5736(%var_5713: Tensor[(14, 15, 4), float64]) -> (Tensor[(7, 16, 14), float32], Tensor[(600), float64], Tensor[(1568), float32], Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(56), int64], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) {
  %709 = cast(meta[relay.Constant][29] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %710 = cast(meta[relay.Constant][29] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %711 = cast(meta[relay.Constant][30] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %712 = cast(meta[relay.Constant][29] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %713 = reshape(%709, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %714 = reshape(%710, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %715 = reshape(%711, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), float32] */;
  %716 = reshape(%712, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %717 = @func_5189(%713, %714, %715, %716) /* ty=(Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) */;
  %718 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %719 = %718.0;
  %720 = cast(%var_5713, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%719, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = cast(meta[relay.Constant][31] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
  %725 = reshape(%724, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), int64] */;
  %726 = @func_5119(%725) /* ty=(Tensor[(7, 1, 8), int64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %727 = cast(meta[relay.Constant][32] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %728 = cast(meta[relay.Constant][32] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %729 = reshape(%727, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %730 = reshape(%728, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %731 = @func_588(%729, %730) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %732 = %717.2;
  %733 = logical_or(%722, %723) /* ty=Tensor[(14, 15, 4), bool] */;
  %734 = %726.1;
  %735 = %731.0;
  (%732, meta[relay.Constant][29] /* ty=Tensor[(600), float64] */, meta[relay.Constant][30] /* ty=Tensor[(1568), float32] */, %733, %734, meta[relay.Constant][31] /* ty=Tensor[(56), int64] */, %735, meta[relay.Constant][32] /* ty=Tensor[(1120), int8] */)
}

def @func_6029() -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) {
  %736 = @func_3939() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), int8]) */;
  %737 = @func_5945() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), float64]) */;
  %738 = %736.0;
  %739 = %737.0;
  (%738, %739)
}

def @func_6058() -> (Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) {
  %740 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %741 = %740.0;
  %742 = cast(%741, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
  %743 = reshape(%742, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %744 = @func_5276(%743) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) */;
  %745 = %744.1;
  (%741, %745)
}

def @func_6295() -> (Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32]) {
  %746 = @func_3284() /* ty=Tensor[(4, 13, 13), int64] */;
  %747 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
  (%746, %747)
}

def @func_3402() -> Tensor[(8, 16, 5), float32] {
  %748 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %748.1
}

def @func_4985() -> Tensor[(640), float32] {
  @func_4672() /* ty=Tensor[(640), float32] */
}

def @func_4672() -> Tensor[(640), float32] {
  %749 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %750 = %749.2;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(640), float32] */;
  sigmoid(%751) /* ty=Tensor[(640), float32] */
}

def @func_1502() -> (Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) {
  %752 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %753 = cast(meta[relay.Constant][33] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %754 = reshape(%753, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %755 = %752.0;
  %756 = @func_1132(%754) /* ty=Tensor[(8, 16, 5), float32] */;
  (%755, %756, meta[relay.Constant][33] /* ty=Tensor[(640), float32] */)
}

def @func_4235() -> (Tensor[(8, 16, 5), float32],) {
  %757 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
  (%757,)
}

def @func_7037() -> Tensor[(11, 5, 13), float64] {
  %758 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
  asinh(%758) /* ty=Tensor[(11, 5, 13), float64] */
}

def @func_7807() -> (Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), float64]) {
  %759 = @func_7365() /* ty=(Tensor[(4, 13, 13), float64],) */;
  %760 = @func_2176() /* ty=Tensor[(14, 15, 4), float64] */;
  %761 = %759.0;
  (%760, %761)
}

def @func_6256() -> Tensor[(640), float32] {
  %762 = @func_5653() /* ty=(Tensor[(640), float32],) */;
  %762.0
}

def @func_3322(%var_3287: Tensor[(7, 16, 14), float32]) -> (Tensor[(7, 16, 14), float32], Tensor[(640), float32]) {
  %763 = cast(%var_3287, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
  %764 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %765 = tan(%763) /* ty=Tensor[(7, 16, 14), float32] */;
  %766 = %764.1;
  (%765, %766)
}

def @func_1197() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) {
  %767 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %768 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %769 = %767.0;
  %770 = %768.0;
  (%769, %770)
}

def @func_5119(%var_5096: Tensor[(7, 1, 8), int64]) -> (Tensor[(7, 1, 8), int64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) {
  %771 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %772 = cast(%var_5096, dtype="int64") /* ty=Tensor[(7, 1, 8), int64] */;
  %773 = @func_3540() /* ty=(Tensor[(8, 16, 5), float32],) */;
  %774 = left_shift(%771, %772) /* ty=Tensor[(7, 1, 8), int64] */;
  %775 = @func_2780() /* ty=Tensor[(14, 15, 4), float64] */;
  %776 = %773.0;
  (%774, %775, %776)
}

def @func_4590() -> Tensor[(4, 13, 13), uint64] {
  @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_7519() -> (Tensor[(640), float32], Tensor[(1120), float64], Tensor[(3, 2, 5), float32], Tensor[(4, 13, 13), int64], Tensor[(840, 780), bool], Tensor[(840, 1), float32], Tensor[(840, ?), float32]) {
  %777 = cast(meta[relay.Constant][35] /* ty=Tensor[(840, 1), uint64] */, dtype="uint64") /* ty=Tensor[(840, 1), uint64] */;
  %778 = reshape(%777, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %779 = @func_5276(%778) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) */;
  %780 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
  %781 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %782 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), float64] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %783 = reshape(%781, newshape=[10, 6, 13]) /* ty=Tensor[(10, 6, 13), float64] */;
  %784 = reshape(%782, newshape=[10, 6, 13]) /* ty=Tensor[(10, 6, 13), bool] */;
  %785 = @func_5399(%783, %784) /* ty=(Tensor[(4, 13, 13), int64], Tensor[(10, 6, 13), float64]) */;
  %786 = cast(meta[relay.Constant][35] /* ty=Tensor[(840, 1), uint64] */, dtype="float32") /* ty=Tensor[(840, 1), float32] */;
  %787 = cosh(%786) /* ty=Tensor[(840, 1), float32] */;
  %788 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), float64] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %789 = cast(%787, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %790 = cast(%787, dtype="float32") /* ty=Tensor[(840, 1), float32] */;
  %791 = cast(meta[relay.Constant][35] /* ty=Tensor[(840, 1), uint64] */, dtype="uint8") /* ty=Tensor[(840, 1), uint8] */;
  %792 = shape_of(%787, dtype="int32") /* ty=Tensor[(2), int32] */;
  %793 = cast(%787, dtype="uint8") /* ty=Tensor[(840, 1), uint8] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %795 = multiply(%793, %794) /* ty=Tensor[(840, ?), uint8] */;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(840, ?), float32] */;
  %797 = @func_4672() /* ty=Tensor[(640), float32] */;
  %798 = %779.1;
  %799 = %780.1;
  %800 = %785.0;
  %801 = less_equal(%788, %789) /* ty=Tensor[(840, 780), bool] */;
  %802 = exp(%790) /* ty=Tensor[(840, 1), float32] */;
  %803 = sqrt(%796) /* ty=Tensor[(840, ?), float32] */;
  (%797, %798, %799, %800, %801, %802, %803)
}

def @func_2221() -> Tensor[(640), float32] {
  %804 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %804.1
}

def @func_2917(%var_2861: Tensor[(10, 5, 7), float32], %var_2881: Tensor[(1120), int8], %var_2913: Tensor[(80, 8), float32]) -> (Tensor[(10, 5, 7), float32], Tensor[(4, 13, 13), float32], Tensor[(676), float32], Tensor[(1120), float32], Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32], Tensor[(80, 8), float32]) {
  %805 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 5, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
  %806 = shape_of(%var_2861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%var_2861, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %809 = cast(meta[relay.Constant][38] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %810 = cast(%var_2881, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %811 = reshape(%809, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %812 = reshape(%810, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %813 = @func_2057(%811, %812) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) */;
  %814 = cast(%var_2881, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %815 = cast(%var_2913, dtype="float32") /* ty=Tensor[(80, 8), float32] */;
  %816 = reshape(%815, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %817 = maximum(%807, %808) /* ty=Tensor[(10, 5, 7), float32] */;
  %818 = %813.0;
  %819 = rsqrt(%814) /* ty=Tensor[(1120), float32] */;
  %820 = @func_2373() /* ty=Tensor[(4, 13, 13), int64] */;
  %821 = @func_1132(%816) /* ty=Tensor[(8, 16, 5), float32] */;
  (%817, %818, meta[relay.Constant][38] /* ty=Tensor[(676), float32] */, %819, %820, %821, %var_2913)
}

def @func_5578(%var_5556: Tensor[(5, 9, 9), uint32], %var_5557: Tensor[(5, 9, 9), uint32]) -> (Tensor[(5, 9, 9), uint32], Tensor[(5, 9, 9), float64]) {
  %822 = cast(%var_5557, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
  %823 = shape_of(%var_5556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%var_5556, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %826 = cast(%var_5556, dtype="float64") /* ty=Tensor[(5, 9, 9), float64] */;
  %827 = left_shift(%824, %825) /* ty=Tensor[(5, 9, 9), uint32] */;
  %828 = sigmoid(%826) /* ty=Tensor[(5, 9, 9), float64] */;
  (%827, %828)
}

def @func_3284() -> Tensor[(4, 13, 13), int64] {
  @func_2373() /* ty=Tensor[(4, 13, 13), int64] */
}

def @func_6154() -> Tensor[(8, 16, 5), float32] {
  @func_4303() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_6569() -> (Tensor[(14, 15, 4), bool],) {
  %829 = @func_6058() /* ty=(Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */;
  %830 = %829.0;
  (%830,)
}

def @func_7644(%var_7636: Tensor[(4, 6, 4), int64], %var_7637: Tensor[(4, 6, 4), int64]) -> Tensor[(4, 6, 4), int64] {
  %831 = cast(%var_7637, dtype="int64") /* ty=Tensor[(4, 6, 4), int64] */;
  %832 = shape_of(%var_7636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%var_7636, dtype="int64") /* ty=Tensor[(4, 6, 4), int64] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%833, %834) /* ty=Tensor[(4, 6, 4), int64] */
}

def @func_3652() -> (Tensor[(640), float32],) {
  %835 = @func_1570() /* ty=Tensor[(640), float32] */;
  (%835,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2730() -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) {
  %0 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
  %1 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  (%0, %1)
}

def @func_5946() -> (Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), float64]) {
  %6 = fn () -> (Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), float64]) {
    %2 = @func_4631() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) */;
    %3 = @func_2578() /* ty=(Tensor[(4, 13, 13), float64], Tensor[(3, 2, 5), float32], Tensor[(30, 1), float32]) */;
    %4 = %2.4;
    %5 = %3.0;
    (%4, %5)
  };
  %6() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), float64]) */
}

def @func_3403() -> Tensor[(8, 16, 5), float32] {
  %8 = fn () -> Tensor[(8, 16, 5), float32] {
    %7 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
    %7.1
  };
  %8() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_4029(%var_4027: Tensor[(5, 13, 13), float64], %var_4028: Tensor[(13, 52), int8]) -> (Tensor[(5, 13, 13), float64], Tensor[(4, 13, 13), bool], Tensor[(13, 52), int8], Tensor[(4, 13, 13), int64]) {
  %16 = fn (%var_3995: Tensor[(5, 13, 13), float64], %var_4011: Tensor[(13, 52), int8]) -> (Tensor[(5, 13, 13), float64], Tensor[(4, 13, 13), bool], Tensor[(13, 52), int8], Tensor[(4, 13, 13), int64]) {
    %9 = cast(%var_3995, dtype="float64") /* ty=Tensor[(5, 13, 13), float64] */;
    %10 = cast(%var_4011, dtype="int8") /* ty=Tensor[(13, 52), int8] */;
    %11 = reshape(%10, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), int8] */;
    %12 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
    %13 = asinh(%9) /* ty=Tensor[(5, 13, 13), float64] */;
    %14 = @func_3136(%11) /* ty=Tensor[(4, 13, 13), bool] */;
    %15 = %12.1;
    (%13, %14, %var_4011, %15)
  };
  %16(%var_4027, %var_4028) /* ty=(Tensor[(5, 13, 13), float64], Tensor[(4, 13, 13), bool], Tensor[(13, 52), int8], Tensor[(4, 13, 13), int64]) */
}

def @func_1982(%var_1980: Tensor[(3, 2, 5), float32]) -> Tensor[(3, 2, 5), float32] {
  @func_1979(%var_1980) /* ty=Tensor[(3, 2, 5), float32] */
}

def @func_2544(%var_2543: Tensor[(676, 1), float32]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) {
  %50 = fn (%var_2459: Tensor[(676, 1), float32]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) {
    %17 = cast(%var_2459, dtype="float32") /* ty=Tensor[(676, 1), float32] */;
    %18 = cast(%var_2459, dtype="float32") /* ty=Tensor[(676, 1), float32] */;
    %19 = reshape(%17, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
    %20 = reshape(%18, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
    %21 = @func_1021(%19, %20) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
    %22 = @func_1933() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) */;
    %23 = @func_1570() /* ty=Tensor[(640), float32] */;
    %24 = cast(%23, dtype="float32") /* ty=Tensor[(640), float32] */;
    %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %26 = reshape(%24, newshape=[640]) /* ty=Tensor[(640), float32] */;
    %27 = reshape(%25, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
    %28 = @func_2445(%26, %27) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
    %29 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
    %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %31 = reshape(%30, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
    %32 = @func_1829(%31) /* ty=(Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) */;
    %33 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="uint16") /* ty=Tensor[(1120), uint16] */;
    %34 = cast(%var_2459, dtype="uint16") /* ty=Tensor[(676, 1), uint16] */;
    %35 = %22.0;
    %36 = cast(%35, dtype="int8") /* ty=Tensor[(4, 13, 13), int8] */;
    %37 = reshape(%36, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), int8] */;
    %38 = @func_2151(%37) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32]) */;
    %39 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), int8] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %40 = log2(%39) /* ty=Tensor[(1120), float32] */;
    %41 = cast(%40, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %42 = %21.4;
    %43 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
    %44 = %28.4;
    %45 = %29.0;
    %46 = %32.3;
    %47 = subtract(%33, %34) /* ty=Tensor[(676, 1120), uint16] */;
    %48 = %38.0;
    %49 = atanh(%41) /* ty=Tensor[(1120), float64] */;
    (%23, %42, %35, %43, %44, %45, %46, %47, %48, %49)
  };
  %50(%var_2543) /* ty=(Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) */
}

def @func_5736(%var_5713: Tensor[(14, 15, 4), float64]) -> (Tensor[(7, 16, 14), float32], Tensor[(600), float64], Tensor[(1568), float32], Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(56), int64], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) {
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %54 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %55 = reshape(%51, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %56 = reshape(%52, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %57 = reshape(%53, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), float32] */;
  %58 = reshape(%54, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
  %59 = @func_5189(%55, %56, %57, %58) /* ty=(Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) */;
  %60 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %61 = %60.0;
  %62 = cast(%var_5713, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
  %67 = reshape(%66, newshape=[7, 1, 8]) /* ty=Tensor[(7, 1, 8), int64] */;
  %68 = @func_5119(%67) /* ty=(Tensor[(7, 1, 8), int64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %71 = reshape(%69, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %72 = reshape(%70, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %73 = @func_588(%71, %72) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %74 = %59.2;
  %75 = logical_or(%64, %65) /* ty=Tensor[(14, 15, 4), bool] */;
  %76 = %68.1;
  %77 = %73.0;
  (%74, meta[relay.Constant][1] /* ty=Tensor[(600), float64] */, meta[relay.Constant][2] /* ty=Tensor[(1568), float32] */, %75, %76, meta[relay.Constant][3] /* ty=Tensor[(56), int64] */, %77, meta[relay.Constant][4] /* ty=Tensor[(1120), int8] */)
}

def @func_5399(%var_5351: Tensor[(10, 6, 13), float64], %var_5387: Tensor[(10, 6, 13), bool]) -> (Tensor[(4, 13, 13), int64], Tensor[(10, 6, 13), float64]) {
  %78 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %79 = cast(%var_5351, dtype="float64") /* ty=Tensor[(10, 6, 13), float64] */;
  %80 = sigmoid(%79) /* ty=Tensor[(10, 6, 13), float64] */;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(10, 6, 13), float32] */;
  %82 = sinh(%81) /* ty=Tensor[(10, 6, 13), float32] */;
  %83 = cast(%80, dtype="bool") /* ty=Tensor[(10, 6, 13), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(10, 6, 13), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = equal(%85, %86) /* ty=Tensor[(10, 6, 13), bool] */;
  %88 = cast(%var_5387, dtype="float64") /* ty=Tensor[(10, 6, 13), float64] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="float64") /* ty=Tensor[(10, 6, 13), float64] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %92 = %78.1;
  %93 = power(%90, %91) /* ty=Tensor[(10, 6, 13), float64] */;
  (%92, %93)
}

def @func_2855() -> Tensor[(8, 16, 5), float32] {
  %95 = fn () -> Tensor[(8, 16, 5), float32] {
    %94 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
    %94.0
  };
  %95() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_2323() -> Tensor[(4, 13, 13), int64] {
  %97 = fn () -> Tensor[(4, 13, 13), int64] {
    %96 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
    %96.0
  };
  %97() /* ty=Tensor[(4, 13, 13), int64] */
}

def @func_7648(%var_7646: Tensor[(4, 6, 4), int64], %var_7647: Tensor[(4, 6, 4), int64]) -> Tensor[(4, 6, 4), int64] {
  @func_7644(%var_7646, %var_7647) /* ty=Tensor[(4, 6, 4), int64] */
}

def @func_2178() -> Tensor[(14, 15, 4), float64] {
  @func_2176() /* ty=Tensor[(14, 15, 4), float64] */
}

def @func_5403(%var_5401: Tensor[(10, 6, 13), float64], %var_5402: Tensor[(10, 6, 13), bool]) -> (Tensor[(4, 13, 13), int64], Tensor[(10, 6, 13), float64]) {
  @func_5399(%var_5401, %var_5402) /* ty=(Tensor[(4, 13, 13), int64], Tensor[(10, 6, 13), float64]) */
}

def @func_6547() -> (Tensor[(1120), float64], Tensor[(8, 16, 5), float32]) {
  @func_6545() /* ty=(Tensor[(1120), float64], Tensor[(8, 16, 5), float32]) */
}

def @func_6857(%var_6855: Tensor[(9, 6, 15), uint8]) -> (Tensor[(9, 6, 15), uint8],) {
  @func_6854(%var_6855) /* ty=(Tensor[(9, 6, 15), uint8],) */
}

def @func_4848(%var_4847: Tensor[(15, 5, 14), uint8]) -> (Tensor[(15, 5, 14), uint8], Tensor[(4, 13, 13), float32]) {
  %105 = fn (%var_4790: Tensor[(15, 5, 14), uint8]) -> (Tensor[(15, 5, 14), uint8], Tensor[(4, 13, 13), float32]) {
    %98 = cast(%var_4790, dtype="uint8") /* ty=Tensor[(15, 5, 14), uint8] */;
    %99 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(15, 5, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 5, 14), uint8] */, dtype="uint8") /* ty=Tensor[(15, 5, 14), uint8] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %102 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
    %103 = bitwise_or(%100, %101) /* ty=Tensor[(15, 5, 14), uint8] */;
    %104 = %102.2;
    (%103, %104)
  };
  %105(%var_4847) /* ty=(Tensor[(15, 5, 14), uint8], Tensor[(4, 13, 13), float32]) */
}

def @func_7931(%var_7929: Tensor[(2, 320), float32]) -> (Tensor[(14, 15, 4), float32], Tensor[(4, 13, 13), uint64], Tensor[(2, 320), float32]) {
  @func_7928(%var_7929) /* ty=(Tensor[(14, 15, 4), float32], Tensor[(4, 13, 13), uint64], Tensor[(2, 320), float32]) */
}

def @func_3284() -> Tensor[(4, 13, 13), int64] {
  @func_2373() /* ty=Tensor[(4, 13, 13), int64] */
}

def @func_2732() -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) {
  @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */
}

def @func_3940() -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), int8]) {
  %110 = fn () -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), int8]) {
    %106 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
    %107 = @func_2661() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) */;
    %108 = %106.1;
    %109 = %107.2;
    (%108, %109)
  };
  %110() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), int8]) */
}

def @func_6472() -> (Tensor[(14, 15, 4), float64],) {
  %113 = fn () -> (Tensor[(14, 15, 4), float64],) {
    %111 = @func_5125() /* ty=(Tensor[(14, 15, 4), float64],) */;
    %112 = %111.0;
    (%112,)
  };
  %113() /* ty=(Tensor[(14, 15, 4), float64],) */
}

def @func_3442() -> (Tensor[(14, 15, 4), float64],) {
  %114 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %115 = %114.1;
  (%115,)
}

def @func_6079() -> Tensor[(4, 13, 13), uint64] {
  @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_4985() -> Tensor[(640), float32] {
  @func_4672() /* ty=Tensor[(640), float32] */
}

def @func_2702(%var_2701: Tensor[(4, 13, 13), int8]) -> (Tensor[(4, 13, 13), bool], Tensor[(14, 15, 4), bool]) {
  %125 = fn (%var_2689: Tensor[(4, 13, 13), int8]) -> (Tensor[(4, 13, 13), bool], Tensor[(14, 15, 4), bool]) {
    %116 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
    %117 = %116.0;
    %118 = cast(%var_2689, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
    %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(%117, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %122 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
    %123 = less(%120, %121) /* ty=Tensor[(4, 13, 13), bool] */;
    %124 = %122.0;
    (%123, %124)
  };
  %125(%var_2701) /* ty=(Tensor[(4, 13, 13), bool], Tensor[(14, 15, 4), bool]) */
}

def @func_4632() -> (Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) {
  %135 = fn () -> (Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) {
    %126 = @func_4350() /* ty=(Tensor[(14, 15, 4), float64],) */;
    %127 = @func_4406() /* ty=(Tensor[(14, 15, 4), float64],) */;
    %128 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
    %129 = @func_4390() /* ty=Tensor[(640), float32] */;
    %130 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
    %131 = %126.0;
    %132 = @func_2373() /* ty=Tensor[(4, 13, 13), int64] */;
    %133 = @func_3606() /* ty=Tensor[(4, 13, 13), uint64] */;
    %134 = %127.0;
    (%128, %129, %130, %131, %132, %133, %134)
  };
  %135() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) */
}

def @func_6823() -> (Tensor[(4, 13, 13), int64],) {
  %136 = @func_3284() /* ty=Tensor[(4, 13, 13), int64] */;
  (%136,)
}

def @func_1829(%var_1821: Tensor[(1120), int8]) -> (Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) {
  %137 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %138 = cast(%var_1821, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %139 = cast(%var_1821, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %140 = reshape(%138, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %141 = reshape(%139, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %142 = @func_588(%140, %141) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %143 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %144 = %143.1;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %146 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %148 = reshape(%145, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %149 = reshape(%147, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %150 = @func_1021(%148, %149) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
  %151 = %137.0;
  %152 = %142.1;
  %153 = %150.8;
  (%146, %151, %152, %var_1821, %144, %153)
}

def @func_3286() -> Tensor[(4, 13, 13), int64] {
  @func_3284() /* ty=Tensor[(4, 13, 13), int64] */
}

def @func_4197(%var_4196: Tensor[(200), uint16]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), uint64], Tensor[(200), uint16], Tensor[(3, 2, 5), float32]) {
  %163 = fn (%var_4189: Tensor[(200), uint16]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), uint64], Tensor[(200), uint16], Tensor[(3, 2, 5), float32]) {
    %154 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
    %155 = cast(%var_4189, dtype="uint16") /* ty=Tensor[(200), uint16] */;
    %156 = reshape(%155, newshape=[4, 5, 10]) /* ty=Tensor[(4, 5, 10), uint16] */;
    %157 = @func_2265(%156) /* ty=(Tensor[(4, 5, 10), float32], Tensor[(3, 2, 5), float32], Tensor[(30), float32], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
    %158 = %157.1;
    %159 = cast(%158, dtype="float32") /* ty=Tensor[(3, 2, 5), float32] */;
    %160 = @func_2221() /* ty=Tensor[(640), float32] */;
    %161 = %154.0;
    %162 = atan(%159) /* ty=Tensor[(3, 2, 5), float32] */;
    (%160, %161, %var_4189, %162)
  };
  %163(%var_4196) /* ty=(Tensor[(640), float32], Tensor[(4, 13, 13), uint64], Tensor[(200), uint16], Tensor[(3, 2, 5), float32]) */
}

def @func_2222() -> Tensor[(640), float32] {
  %165 = fn () -> Tensor[(640), float32] {
    %164 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
    %164.1
  };
  %165() /* ty=Tensor[(640), float32] */
}

def @func_7521() -> (Tensor[(640), float32], Tensor[(1120), float64], Tensor[(3, 2, 5), float32], Tensor[(4, 13, 13), int64], Tensor[(840, 780), bool], Tensor[(840, 1), float32], Tensor[(840, ?), float32]) {
  @func_7519() /* ty=(Tensor[(640), float32], Tensor[(1120), float64], Tensor[(3, 2, 5), float32], Tensor[(4, 13, 13), int64], Tensor[(840, 780), bool], Tensor[(840, 1), float32], Tensor[(840, ?), float32]) */
}

def @func_7173() -> (Tensor[(8, 16, 5), float32],) {
  @func_7171() /* ty=(Tensor[(8, 16, 5), float32],) */
}

def @func_2061(%var_2059: Tensor[(4, 13, 13), float32], %var_2060: Tensor[(1120), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) {
  @func_2057(%var_2059, %var_2060) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) */
}

def @func_5813() -> Tensor[(14, 15, 4), float64] {
  @func_5811() /* ty=Tensor[(14, 15, 4), float64] */
}

def @func_2125() -> (Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) {
  %170 = fn () -> (Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) {
    %166 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
    %167 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
    %168 = %166.2;
    %169 = %167.0;
    (%168, %169)
  };
  %170() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */
}

def @func_3235() -> (Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) {
  %190 = fn () -> (Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) {
    %171 = cast(meta[relay.Constant][6] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %172 = reshape(%171, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
    %173 = @func_1829(%172) /* ty=(Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) */;
    %174 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
    %175 = %174.0;
    %176 = cast(%175, dtype="float32") /* ty=Tensor[(640), float32] */;
    %177 = cast(meta[relay.Constant][6] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %178 = reshape(%176, newshape=[640]) /* ty=Tensor[(640), float32] */;
    %179 = reshape(%177, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
    %180 = @func_2445(%178, %179) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
    %181 = @func_3016() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */;
    %182 = cast(%175, dtype="float32") /* ty=Tensor[(640), float32] */;
    %183 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
    %184 = %173.2;
    %185 = %180.3;
    %186 = %181.2;
    %187 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
    %188 = erf(%182) /* ty=Tensor[(640), float32] */;
    %189 = %183.0;
    (%184, meta[relay.Constant][6] /* ty=Tensor[(1120), int8] */, %185, %186, %187, %188, %189)
  };
  %190() /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */
}

def @func_6147() -> Tensor[(8, 10, 5), float64] {
  %191 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  asin(%191) /* ty=Tensor[(8, 10, 5), float64] */
}

def @func_4407() -> (Tensor[(14, 15, 4), float64],) {
  %194 = fn () -> (Tensor[(14, 15, 4), float64],) {
    %192 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
    %193 = %192.0;
    (%193,)
  };
  %194() /* ty=(Tensor[(14, 15, 4), float64],) */
}

def @func_6257() -> Tensor[(640), float32] {
  %196 = fn () -> Tensor[(640), float32] {
    %195 = @func_5653() /* ty=(Tensor[(640), float32],) */;
    %195.0
  };
  %196() /* ty=Tensor[(640), float32] */
}

def @func_2154(%var_2152: Tensor[(4, 13, 13), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32]) {
  @func_2151(%var_2152) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32]) */
}

def @func_3016() -> (Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) {
  %197 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %198 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %199 = %197.0;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %201 = reshape(%200, newshape=[676, 1]) /* ty=Tensor[(676, 1), float32] */;
  %202 = @func_2542(%201) /* ty=(Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) */;
  %203 = %198.0;
  %204 = %202.9;
  (%199, %203, %204)
}

def @func_4672() -> Tensor[(640), float32] {
  %205 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %206 = %205.2;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(640), float32] */;
  sigmoid(%207) /* ty=Tensor[(640), float32] */
}

def @func_5065(%var_5059: Tensor[(8, 16, 5), float32]) -> (Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool]) {
  %208 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %210 = reshape(%209, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %211 = cast(%var_5059, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %212 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%208, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %215 = @func_1132(%210) /* ty=Tensor[(8, 16, 5), float32] */;
  %216 = equal(%213, %214) /* ty=Tensor[(8, 16, 5), bool] */;
  (%215, %216)
}

def @func_3018() -> (Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) {
  @func_3016() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */
}

def @func_6817() -> (Tensor[(8, 16, 5), float32],) {
  %217 = @func_6154() /* ty=Tensor[(8, 16, 5), float32] */;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %219 = asinh(%218) /* ty=Tensor[(8, 16, 5), float32] */;
  (%219,)
}

def @func_7037() -> Tensor[(11, 5, 13), float64] {
  %220 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
  asinh(%220) /* ty=Tensor[(11, 5, 13), float64] */
}

def @func_4304() -> Tensor[(8, 16, 5), float32] {
  %221 = fn () -> Tensor[(8, 16, 5), float32] {
    @func_2854() /* ty=Tensor[(8, 16, 5), float32] */
  };
  %221() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_3736() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) {
  %222 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %223 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %224 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
  %225 = %222.0;
  %226 = %223.1;
  %227 = %224.1;
  %228 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  (%225, %226, %227, %228)
}

def @func_5516(%var_5514: Tensor[(40, 16), float32]) -> (Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int8], Tensor[(528), float64], Tensor[(40, 16), float32]) {
  @func_5513(%var_5514) /* ty=(Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int8], Tensor[(528), float64], Tensor[(40, 16), float32]) */
}

def @func_4463() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) {
  %232 = fn () -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) {
    %229 = @func_2661() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) */;
    %230 = %229.1;
    %231 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
    (%230, %231)
  };
  %232() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */
}

def @func_2176() -> Tensor[(14, 15, 4), float64] {
  %233 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %233.0
}

def @func_1933() -> (Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) {
  %234 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
  %235 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %236 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %237 = %236.1;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
  %239 = %235.1;
  %240 = cast(%239, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
  %241 = cast(%239, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
  %242 = reshape(%240, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %243 = reshape(%241, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
  %244 = %234.2;
  %245 = sinh(%238) /* ty=Tensor[(4, 13, 13), float64] */;
  %246 = @func_742(%242, %243) /* ty=Tensor[(14, 15, 4), bool] */;
  (%244, %239, %245, %246)
}

def @func_3897(%var_3895: Tensor[(6, 11, 8), float64], %var_3896: Tensor[(8, 16, 5), float32]) -> (Tensor[(6, 11, 8), float64], Tensor[(8, 16, 5), int8], Tensor[(640), float32]) {
  @func_3893(%var_3895, %var_3896) /* ty=(Tensor[(6, 11, 8), float64], Tensor[(8, 16, 5), int8], Tensor[(640), float32]) */
}

def @func_2267(%var_2266: Tensor[(4, 5, 10), uint16]) -> (Tensor[(4, 5, 10), float32], Tensor[(3, 2, 5), float32], Tensor[(30), float32], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) {
  %264 = fn (%var_2231: Tensor[(4, 5, 10), uint16]) -> (Tensor[(4, 5, 10), float32], Tensor[(3, 2, 5), float32], Tensor[(30), float32], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) {
    %247 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 5, 10), uint16] */, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
    %248 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%var_2231, dtype="bool") /* ty=Tensor[(4, 5, 10), bool] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %251 = less(%249, %250) /* ty=Tensor[(4, 5, 10), bool] */;
    %252 = cast(%var_2231, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
    %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%251, dtype="float32") /* ty=Tensor[(4, 5, 10), float32] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %256 = cast(meta[relay.Constant][10] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %257 = reshape(%256, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), float32] */;
    %258 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
    %259 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
    %260 = divide(%254, %255) /* ty=Tensor[(4, 5, 10), float32] */;
    %261 = @func_1979(%257) /* ty=Tensor[(3, 2, 5), float32] */;
    %262 = %258.0;
    %263 = %259.0;
    (%260, %261, meta[relay.Constant][10] /* ty=Tensor[(30), float32] */, %262, %263)
  };
  %264(%var_2266) /* ty=(Tensor[(4, 5, 10), float32], Tensor[(3, 2, 5), float32], Tensor[(30), float32], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */
}

def @func_3654() -> (Tensor[(640), float32],) {
  @func_3652() /* ty=(Tensor[(640), float32],) */
}

def @func_5278(%var_5277: Tensor[(840), uint64]) -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) {
  %273 = fn (%var_5267: Tensor[(840), uint64]) -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) {
    %265 = @func_3016() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */;
    %266 = cast(%var_5267, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %267 = cast(%var_5267, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %268 = reshape(%266, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
    %269 = reshape(%267, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
    %270 = @func_3606() /* ty=Tensor[(4, 13, 13), uint64] */;
    %271 = %265.2;
    %272 = @func_742(%268, %269) /* ty=Tensor[(14, 15, 4), bool] */;
    (%270, %271, %272, %var_5267)
  };
  %273(%var_5277) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) */
}

def @func_1197() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) {
  %274 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %275 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %276 = %274.0;
  %277 = %275.0;
  (%276, %277)
}

def @func_3444() -> (Tensor[(14, 15, 4), float64],) {
  @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */
}

def @func_2449(%var_2447: Tensor[(640), float32], %var_2448: Tensor[(56, 20), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) {
  @func_2445(%var_2447, %var_2448) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */
}

def @func_5903() -> Tensor[(4, 13, 13), int64] {
  @func_5901() /* ty=Tensor[(4, 13, 13), int64] */
}

def @func_1453() -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) {
  %278 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %281 = exp(%280) /* ty=Tensor[(4, 13, 13), float32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %283 = cast(%281, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %284 = reshape(%282, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %285 = reshape(%283, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %286 = @func_1021(%284, %285) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
  %287 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %288 = cast(%281, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %289 = %286.4;
  %290 = %287.0;
  %291 = sigmoid(%288) /* ty=Tensor[(4, 13, 13), float32] */;
  (%289, %290, %291)
}

def @func_4391() -> Tensor[(640), float32] {
  %293 = fn () -> Tensor[(640), float32] {
    %292 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
    %292.1
  };
  %293() /* ty=Tensor[(640), float32] */
}

def @func_5739(%var_5737: Tensor[(14, 15, 4), float64]) -> (Tensor[(7, 16, 14), float32], Tensor[(600), float64], Tensor[(1568), float32], Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(56), int64], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) {
  @func_5736(%var_5737) /* ty=(Tensor[(7, 16, 14), float32], Tensor[(600), float64], Tensor[(1568), float32], Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(56), int64], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) */
}

def @func_5811() -> Tensor[(14, 15, 4), float64] {
  %294 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %294.0
}

def @func_4590() -> Tensor[(4, 13, 13), uint64] {
  @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_2780() -> Tensor[(14, 15, 4), float64] {
  %295 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %295.1
}

def @func_8035() -> Tensor[(14, 15, 4), bool] {
  @func_8033() /* ty=Tensor[(14, 15, 4), bool] */
}

def @func_6296() -> (Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32]) {
  %298 = fn () -> (Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32]) {
    %296 = @func_3284() /* ty=Tensor[(4, 13, 13), int64] */;
    %297 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
    (%296, %297)
  };
  %298() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32]) */
}

def @func_6569() -> (Tensor[(14, 15, 4), bool],) {
  %299 = @func_6058() /* ty=(Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */;
  %300 = %299.0;
  (%300,)
}

def @func_6571() -> (Tensor[(14, 15, 4), bool],) {
  @func_6569() /* ty=(Tensor[(14, 15, 4), bool],) */
}

def @func_3607() -> Tensor[(4, 13, 13), uint64] {
  %301 = fn () -> Tensor[(4, 13, 13), uint64] {
    @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */
  };
  %301() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_1832(%var_1830: Tensor[(1120), int8]) -> (Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) {
  @func_1829(%var_1830) /* ty=(Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) */
}

def @func_2662() -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) {
  %310 = fn () -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) {
    %302 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
    %303 = %302.0;
    %304 = cast(%303, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
    %305 = cast(meta[relay.Constant][11] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %306 = reshape(%305, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
    %307 = @func_1829(%306) /* ty=(Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8]) */;
    %308 = log2(%304) /* ty=Tensor[(4, 13, 13), float32] */;
    %309 = %307.5;
    (%308, %309, meta[relay.Constant][11] /* ty=Tensor[(1120), int8] */)
  };
  %310() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(1120), int8]) */
}

def @func_5901() -> Tensor[(4, 13, 13), int64] {
  %311 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
  %311.0
}

def @func_6882() -> (Tensor[(4, 13, 13), uint64],) {
  @func_6880() /* ty=(Tensor[(4, 13, 13), uint64],) */
}

def @func_7754() -> (Tensor[(4, 13, 13), uint64], Tensor[(640), float32], Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(4, 6, 4), int64], Tensor[(16, 6), int64]) {
  %322 = fn () -> (Tensor[(4, 13, 13), uint64], Tensor[(640), float32], Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(4, 6, 4), int64], Tensor[(16, 6), int64]) {
    %312 = @func_6029() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
    %313 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 6), int64] */, dtype="int64") /* ty=Tensor[(16, 6), int64] */;
    %314 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 6), int64] */, dtype="int64") /* ty=Tensor[(16, 6), int64] */;
    %315 = reshape(%313, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), int64] */;
    %316 = reshape(%314, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), int64] */;
    %317 = %312.0;
    %318 = @func_4390() /* ty=Tensor[(640), float32] */;
    %319 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
    %320 = @func_4390() /* ty=Tensor[(640), float32] */;
    %321 = @func_7644(%315, %316) /* ty=Tensor[(4, 6, 4), int64] */;
    (%317, %318, %319, %320, %321, meta[relay.Constant][12] /* ty=Tensor[(16, 6), int64] */)
  };
  %322() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(640), float32], Tensor[(4, 13, 13), int8], Tensor[(640), float32], Tensor[(4, 6, 4), int64], Tensor[(16, 6), int64]) */
}

def @func_6081() -> Tensor[(4, 13, 13), uint64] {
  @func_6079() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_3542() -> (Tensor[(8, 16, 5), float32],) {
  @func_3540() /* ty=(Tensor[(8, 16, 5), float32],) */
}

def @func_4351() -> (Tensor[(14, 15, 4), float64],) {
  %325 = fn () -> (Tensor[(14, 15, 4), float64],) {
    %323 = @func_3442() /* ty=(Tensor[(14, 15, 4), float64],) */;
    %324 = %323.0;
    (%324,)
  };
  %325() /* ty=(Tensor[(14, 15, 4), float64],) */
}

def @func_1935() -> (Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) {
  @func_1933() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) */
}

def @func_745(%var_743: Tensor[(14, 15, 4), uint64], %var_744: Tensor[(14, 15, 4), uint64]) -> Tensor[(14, 15, 4), bool] {
  %330 = fn (%var_735: Tensor[(14, 15, 4), uint64], %var_736: Tensor[(14, 15, 4), uint64]) -> Tensor[(14, 15, 4), bool] {
    %326 = cast(%var_736, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
    %327 = shape_of(%var_735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%var_735, dtype="bool") /* ty=Tensor[(14, 15, 4), bool] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%328, %329) /* ty=Tensor[(14, 15, 4), bool] */
  };
  %330(%var_743, %var_744) /* ty=Tensor[(14, 15, 4), bool] */
}

def @func_1738() -> (Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) {
  %339 = fn () -> (Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) {
    %331 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
    %332 = %331.1;
    %333 = cast(%332, dtype="float64") /* ty=Tensor[(14, 15, 4), float64] */;
    %334 = cast(%332, dtype="float64") /* ty=Tensor[(14, 15, 4), float64] */;
    %335 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
    %336 = cosh(%333) /* ty=Tensor[(14, 15, 4), float64] */;
    %337 = acosh(%334) /* ty=Tensor[(14, 15, 4), float64] */;
    %338 = %335.1;
    (%336, %337, %338)
  };
  %339() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */
}

def @func_4514() -> Tensor[(640), float32] {
  %341 = fn () -> Tensor[(640), float32] {
    %340 = @func_3234() /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
    %340.5
  };
  %341() /* ty=Tensor[(640), float32] */
}

def @func_2151(%var_2139: Tensor[(4, 13, 13), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32]) {
  %342 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  %343 = cast(%var_2139, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %347 = cast(%var_2139, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %348 = divide(%345, %346) /* ty=Tensor[(4, 13, 13), float32] */;
  %349 = sqrt(%347) /* ty=Tensor[(4, 13, 13), float32] */;
  (%348, %349)
}

def @func_3136(%var_3121: Tensor[(4, 13, 13), int8]) -> Tensor[(4, 13, 13), bool] {
  %350 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %351 = %350.0;
  %352 = cast(%var_3121, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%354, %355) /* ty=Tensor[(4, 13, 13), bool] */
}

def @func_5250(%var_5248: Tensor[(600), float64], %var_5249: Tensor[(1568), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(5, 8, 15), float64], Tensor[(600), float64], Tensor[(1568), float32]) {
  %367 = fn (%var_5244: Tensor[(600), float64], %var_5245: Tensor[(1568), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(5, 8, 15), float64], Tensor[(600), float64], Tensor[(1568), float32]) {
    %356 = cast(%var_5244, dtype="float64") /* ty=Tensor[(600), float64] */;
    %357 = cast(%var_5244, dtype="float64") /* ty=Tensor[(600), float64] */;
    %358 = cast(%var_5245, dtype="float32") /* ty=Tensor[(1568), float32] */;
    %359 = cast(%var_5244, dtype="float64") /* ty=Tensor[(600), float64] */;
    %360 = reshape(%356, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
    %361 = reshape(%357, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
    %362 = reshape(%358, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), float32] */;
    %363 = reshape(%359, newshape=[5, 8, 15]) /* ty=Tensor[(5, 8, 15), float64] */;
    %364 = @func_5189(%360, %361, %362, %363) /* ty=(Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) */;
    %365 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
    %366 = %364.0;
    (%365, %366, %var_5244, %var_5245)
  };
  %367(%var_5248, %var_5249) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(5, 8, 15), float64], Tensor[(600), float64], Tensor[(1568), float32]) */
}

def @func_5121(%var_5120: Tensor[(7, 1, 8), int64]) -> (Tensor[(7, 1, 8), int64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) {
  %374 = fn (%var_5096: Tensor[(7, 1, 8), int64]) -> (Tensor[(7, 1, 8), int64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) {
    %368 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %369 = cast(%var_5096, dtype="int64") /* ty=Tensor[(7, 1, 8), int64] */;
    %370 = @func_3540() /* ty=(Tensor[(8, 16, 5), float32],) */;
    %371 = left_shift(%368, %369) /* ty=Tensor[(7, 1, 8), int64] */;
    %372 = @func_2780() /* ty=Tensor[(14, 15, 4), float64] */;
    %373 = %370.0;
    (%371, %372, %373)
  };
  %374(%var_5120) /* ty=(Tensor[(7, 1, 8), int64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */
}

def @func_3139(%var_3137: Tensor[(4, 13, 13), int8]) -> Tensor[(4, 13, 13), bool] {
  @func_3136(%var_3137) /* ty=Tensor[(4, 13, 13), bool] */
}

def @func_4561() -> Tensor[(1120), float64] {
  %376 = fn () -> Tensor[(1120), float64] {
    %375 = @func_3234() /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
    %375.3
  };
  %376() /* ty=Tensor[(1120), float64] */
}

def @func_5513(%var_5490: Tensor[(40, 16), float32]) -> (Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int8], Tensor[(528), float64], Tensor[(40, 16), float32]) {
  %377 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %378 = cast(meta[relay.Constant][13] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %379 = cast(%var_5490, dtype="float32") /* ty=Tensor[(40, 16), float32] */;
  %380 = reshape(%378, newshape=[6, 11, 8]) /* ty=Tensor[(6, 11, 8), float64] */;
  %381 = reshape(%379, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %382 = @func_3893(%380, %381) /* ty=(Tensor[(6, 11, 8), float64], Tensor[(8, 16, 5), int8], Tensor[(640), float32]) */;
  %383 = %377.0;
  %384 = %382.1;
  (%383, %384, meta[relay.Constant][13] /* ty=Tensor[(528), float64] */, %var_5490)
}

def @func_1073(%var_1072: Tensor[(1120), int8]) -> (Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int32], Tensor[(4, 13, 13), int64]) {
  %407 = fn (%var_1046: Tensor[(1120), int8]) -> (Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int32], Tensor[(4, 13, 13), int64]) {
    %385 = cast(%var_1046, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %386 = cast(%var_1046, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %387 = reshape(%385, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
    %388 = reshape(%386, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
    %389 = @func_588(%387, %388) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
    %390 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
    %391 = %390.0;
    %392 = cast(%391, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %393 = rsqrt(%392) /* ty=Tensor[(4, 13, 13), float64] */;
    %394 = cast(%391, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%393, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %398 = floor_mod(%396, %397) /* ty=Tensor[(4, 13, 13), float64] */;
    %399 = cast(%391, dtype="int32") /* ty=Tensor[(4, 13, 13), int32] */;
    %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
    %401 = cast(%398, dtype="int32") /* ty=Tensor[(4, 13, 13), int32] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %403 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
    %404 = %389.1;
    %405 = add(%401, %402) /* ty=Tensor[(4, 13, 13), int32] */;
    %406 = %403.1;
    (%404, %var_1046, %405, %406)
  };
  %407(%var_1072) /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int32], Tensor[(4, 13, 13), int64]) */
}

def @func_1639(%var_1604: Tensor[(8, 16, 5), float32]) -> (Tensor[(640), float32], Tensor[(8, 16, 5), uint32], Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool], Tensor[(8, 16, 5), float32]) {
  %408 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %409 = %408.2;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(640), float32] */;
  %411 = reshape(%410, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %412 = @func_1132(%411) /* ty=Tensor[(8, 16, 5), float32] */;
  %413 = cast(%var_1604, dtype="uint32") /* ty=Tensor[(8, 16, 5), uint32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="uint32") /* ty=Tensor[(8, 16, 5), uint32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %417 = left_shift(%415, %416) /* ty=Tensor[(8, 16, 5), uint32] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %419 = reshape(%418, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %420 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 16, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %421 = shape_of(%var_1604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_1604, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(%var_1604, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %425 = @func_1132(%419) /* ty=Tensor[(8, 16, 5), float32] */;
  %426 = not_equal(%422, %423) /* ty=Tensor[(8, 16, 5), bool] */;
  %427 = sqrt(%424) /* ty=Tensor[(8, 16, 5), float32] */;
  (%409, %417, %425, %426, %427)
}

def @func_3893(%var_3841: Tensor[(6, 11, 8), float64], %var_3868: Tensor[(8, 16, 5), float32]) -> (Tensor[(6, 11, 8), float64], Tensor[(8, 16, 5), int8], Tensor[(640), float32]) {
  %428 = cast(%var_3841, dtype="float64") /* ty=Tensor[(6, 11, 8), float64] */;
  %429 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %430 = %429.0;
  %431 = cast(%var_3868, dtype="int8") /* ty=Tensor[(8, 16, 5), int8] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="int8") /* ty=Tensor[(8, 16, 5), int8] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %435 = atan(%428) /* ty=Tensor[(6, 11, 8), float64] */;
  %436 = add(%433, %434) /* ty=Tensor[(8, 16, 5), int8] */;
  %437 = @func_1570() /* ty=Tensor[(640), float32] */;
  (%435, %436, %437)
}

def @func_3990() -> Tensor[(4, 13, 13), bool] {
  %443 = fn () -> Tensor[(4, 13, 13), bool] {
    %438 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
    %439 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 13, 13), uint64] */, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
    %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(%438, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%441, %442) /* ty=Tensor[(4, 13, 13), bool] */
  };
  %443() /* ty=Tensor[(4, 13, 13), bool] */
}

def @func_1316() -> (Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) {
  %449 = fn () -> (Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) {
    %444 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
    %445 = cast(meta[relay.Constant][16] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %446 = reshape(%445, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
    %447 = %444.0;
    %448 = @func_1132(%446) /* ty=Tensor[(8, 16, 5), float32] */;
    (%447, %448, meta[relay.Constant][16] /* ty=Tensor[(640), float32] */)
  };
  %449() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */
}

def @func_4236() -> (Tensor[(8, 16, 5), float32],) {
  %451 = fn () -> (Tensor[(8, 16, 5), float32],) {
    %450 = @func_3402() /* ty=Tensor[(8, 16, 5), float32] */;
    (%450,)
  };
  %451() /* ty=(Tensor[(8, 16, 5), float32],) */
}

def @func_5125() -> (Tensor[(14, 15, 4), float64],) {
  %452 = @func_4406() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %453 = %452.0;
  (%453,)
}

def @func_6819() -> (Tensor[(8, 16, 5), float32],) {
  @func_6817() /* ty=(Tensor[(8, 16, 5), float32],) */
}

def @func_2057(%var_2035: Tensor[(4, 13, 13), float32], %var_2046: Tensor[(1120), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) {
  %454 = @func_1933() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(4, 13, 13), float64], Tensor[(14, 15, 4), bool]) */;
  %455 = %454.0;
  %456 = cast(%var_2035, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %460 = cast(%var_2046, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %461 = cast(%var_2046, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %462 = reshape(%460, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %463 = reshape(%461, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %464 = @func_588(%462, %463) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %465 = minimum(%458, %459) /* ty=Tensor[(4, 13, 13), float32] */;
  %466 = %464.0;
  (%465, %466, %var_2046)
}

def @func_3165() -> Tensor[(8, 16, 5), float32] {
  @func_3163() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_1470() -> (Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) {
  %475 = fn () -> (Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) {
    %467 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
    %468 = %467.1;
    %469 = cast(%468, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
    %470 = cast(%468, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
    %471 = reshape(%469, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
    %472 = reshape(%470, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
    %473 = @func_1021(%471, %472) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */;
    %474 = %473.0;
    (%468, %474)
  };
  %475() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */
}

def @func_6210() -> (Tensor[(8, 16, 5), int16], Tensor[(4, 13, 13), bool]) {
  %479 = fn () -> (Tensor[(8, 16, 5), int16], Tensor[(4, 13, 13), bool]) {
    %476 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
    %477 = %476.0;
    %478 = @func_3989() /* ty=Tensor[(4, 13, 13), bool] */;
    (%477, %478)
  };
  %479() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(4, 13, 13), bool]) */
}

def @func_2579() -> (Tensor[(4, 13, 13), float64], Tensor[(3, 2, 5), float32], Tensor[(30, 1), float32]) {
  %486 = fn () -> (Tensor[(4, 13, 13), float64], Tensor[(3, 2, 5), float32], Tensor[(30, 1), float32]) {
    %480 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
    %481 = cast(%480, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %482 = cast(meta[relay.Constant][17] /* ty=Tensor[(30, 1), float32] */, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
    %483 = reshape(%482, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), float32] */;
    %484 = acos(%481) /* ty=Tensor[(4, 13, 13), float64] */;
    %485 = @func_1979(%483) /* ty=Tensor[(3, 2, 5), float32] */;
    (%484, %485, meta[relay.Constant][17] /* ty=Tensor[(30, 1), float32] */)
  };
  %486() /* ty=(Tensor[(4, 13, 13), float64], Tensor[(3, 2, 5), float32], Tensor[(30, 1), float32]) */
}

def @func_1024(%var_1022: Tensor[(4, 13, 13), float32], %var_1023: Tensor[(4, 13, 13), float32]) -> (Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) {
  %528 = fn (%var_960: Tensor[(4, 13, 13), float32], %var_982: Tensor[(4, 13, 13), float32]) -> (Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) {
    %487 = cast(meta[relay.Constant][18] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %488 = cast(meta[relay.Constant][18] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %489 = reshape(%487, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
    %490 = reshape(%488, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
    %491 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
    %492 = %491.1;
    %493 = cast(%492, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
    %494 = cosh(%493) /* ty=Tensor[(4, 13, 13), float32] */;
    %495 = cast(%var_960, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
    %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%494, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %499 = floor_divide(%497, %498) /* ty=Tensor[(4, 13, 13), float32] */;
    %500 = cast(%var_982, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%499, dtype="bool") /* ty=Tensor[(4, 13, 13), bool] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %504 = cast(%499, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %505 = erf(%504) /* ty=Tensor[(4, 13, 13), float64] */;
    %506 = cast(%var_960, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(%505, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %510 = cast(%505, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
    %511 = @func_742(%489, %490) /* ty=Tensor[(14, 15, 4), bool] */;
    %512 = cast(%511, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
    %513 = cast(meta[relay.Constant][18] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %514 = reshape(%512, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
    %515 = reshape(%513, newshape=[14, 15, 4]) /* ty=Tensor[(14, 15, 4), uint64] */;
    %516 = cast(meta[relay.Constant][19] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %517 = cast(meta[relay.Constant][19] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %518 = reshape(%516, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
    %519 = reshape(%517, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
    %520 = @func_588(%518, %519) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
    %521 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
    %522 = greater(%502, %503) /* ty=Tensor[(4, 13, 13), bool] */;
    %523 = mod(%508, %509) /* ty=Tensor[(4, 13, 13), float64] */;
    %524 = atan(%510) /* ty=Tensor[(4, 13, 13), float32] */;
    %525 = @func_742(%514, %515) /* ty=Tensor[(14, 15, 4), bool] */;
    %526 = %520.1;
    %527 = %521.0;
    (%511, meta[relay.Constant][18] /* ty=Tensor[(840), uint64] */, %522, %523, %524, %525, %526, meta[relay.Constant][19] /* ty=Tensor[(1120), int8] */, %527)
  };
  %528(%var_1022, %var_1023) /* ty=(Tensor[(14, 15, 4), bool], Tensor[(840), uint64], Tensor[(4, 13, 13), bool], Tensor[(4, 13, 13), float64], Tensor[(4, 13, 13), float32], Tensor[(14, 15, 4), bool], Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(4, 13, 13), int8]) */
}

def @func_7864() -> (Tensor[(12, 14, 4), float64],) {
  %531 = fn () -> (Tensor[(12, 14, 4), float64],) {
    %529 = @func_5959() /* ty=(Tensor[(12, 14, 4), float64],) */;
    %530 = %529.0;
    (%530,)
  };
  %531() /* ty=(Tensor[(12, 14, 4), float64],) */
}

def @func_1503() -> (Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) {
  %537 = fn () -> (Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) {
    %532 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
    %533 = cast(meta[relay.Constant][20] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %534 = reshape(%533, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
    %535 = %532.0;
    %536 = @func_1132(%534) /* ty=Tensor[(8, 16, 5), float32] */;
    (%535, %536, meta[relay.Constant][20] /* ty=Tensor[(640), float32] */)
  };
  %537() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */
}

def @func_6324() -> (Tensor[(4, 13, 13), int64],) {
  %539 = fn () -> (Tensor[(4, 13, 13), int64],) {
    %538 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
    (%538,)
  };
  %539() /* ty=(Tensor[(4, 13, 13), int64],) */
}

def @func_2922(%var_2919: Tensor[(10, 5, 7), float32], %var_2920: Tensor[(1120), int8], %var_2921: Tensor[(80, 8), float32]) -> (Tensor[(10, 5, 7), float32], Tensor[(4, 13, 13), float32], Tensor[(676), float32], Tensor[(1120), float32], Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32], Tensor[(80, 8), float32]) {
  @func_2917(%var_2919, %var_2920, %var_2921) /* ty=(Tensor[(10, 5, 7), float32], Tensor[(4, 13, 13), float32], Tensor[(676), float32], Tensor[(1120), float32], Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32], Tensor[(80, 8), float32]) */
}

def @func_2610(%var_2585: Tensor[(320, 2), float32]) -> (Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(8, 16, 5), bool]) {
  %540 = cast(%var_2585, dtype="float32") /* ty=Tensor[(320, 2), float32] */;
  %541 = cast(meta[relay.Constant][21] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %542 = reshape(%540, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %543 = reshape(%541, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
  %544 = @func_2445(%542, %543) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
  %545 = %544.1;
  %546 = cast(%var_2585, dtype="bool") /* ty=Tensor[(320, 2), bool] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = @func_2322() /* ty=Tensor[(4, 13, 13), int64] */;
  %551 = greater(%548, %549) /* ty=Tensor[(8, 16, 5), bool] */;
  (%550, meta[relay.Constant][21] /* ty=Tensor[(1120), int8] */, %551)
}

def @func_5581(%var_5579: Tensor[(5, 9, 9), uint32], %var_5580: Tensor[(5, 9, 9), uint32]) -> (Tensor[(5, 9, 9), uint32], Tensor[(5, 9, 9), float64]) {
  %559 = fn (%var_5556: Tensor[(5, 9, 9), uint32], %var_5557: Tensor[(5, 9, 9), uint32]) -> (Tensor[(5, 9, 9), uint32], Tensor[(5, 9, 9), float64]) {
    %552 = cast(%var_5557, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
    %553 = shape_of(%var_5556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %554 = cast(%var_5556, dtype="uint32") /* ty=Tensor[(5, 9, 9), uint32] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %556 = cast(%var_5556, dtype="float64") /* ty=Tensor[(5, 9, 9), float64] */;
    %557 = left_shift(%554, %555) /* ty=Tensor[(5, 9, 9), uint32] */;
    %558 = sigmoid(%556) /* ty=Tensor[(5, 9, 9), float64] */;
    (%557, %558)
  };
  %559(%var_5579, %var_5580) /* ty=(Tensor[(5, 9, 9), uint32], Tensor[(5, 9, 9), float64]) */
}

def @func_3108() -> (Tensor[(640), float32], Tensor[(8, 16, 5), float32]) {
  @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */
}

def @func_7239() -> (Tensor[(14, 15, 4), float64], Tensor[(640), uint8], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64]) {
  @func_7237() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(640), uint8], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64]) */
}

def @func_3652() -> (Tensor[(640), float32],) {
  %560 = @func_1570() /* ty=Tensor[(640), float32] */;
  (%560,)
}

def @func_3540() -> (Tensor[(8, 16, 5), float32],) {
  %561 = @func_3163() /* ty=Tensor[(8, 16, 5), float32] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %563 = erf(%562) /* ty=Tensor[(8, 16, 5), float32] */;
  (%563,)
}

def @func_4087(%var_4085: Tensor[(1, 3, 5), uint32], %var_4086: Tensor[(4, 3, 5), uint32]) -> Tensor[(4, 3, 5), float32] {
  @func_4083(%var_4085, %var_4086) /* ty=Tensor[(4, 3, 5), float32] */
}

def @func_1455() -> (Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) {
  @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */
}

def @func_1211() -> Tensor[(4, 13, 13), int8] {
  %564 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %564.0
}

def @func_6642() -> (Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int16]) {
  %565 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %566 = @func_1737() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), float32]) */;
  %567 = @func_6209() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(4, 13, 13), bool]) */;
  %568 = %565.0;
  %569 = %566.0;
  %570 = %567.0;
  (%568, %569, %570)
}

def @func_6644() -> (Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int16]) {
  @func_6642() /* ty=(Tensor[(14, 15, 4), bool], Tensor[(14, 15, 4), float64], Tensor[(8, 16, 5), int16]) */
}

def @func_7928(%var_7911: Tensor[(2, 320), float32]) -> (Tensor[(14, 15, 4), float32], Tensor[(4, 13, 13), uint64], Tensor[(2, 320), float32]) {
  %571 = @func_4631() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), uint64], Tensor[(14, 15, 4), float64]) */;
  %572 = %571.3;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(14, 15, 4), float32] */;
  %574 = cast(%var_7911, dtype="float32") /* ty=Tensor[(2, 320), float32] */;
  %575 = reshape(%574, newshape=[2, 320]) /* ty=Tensor[(2, 320), float32] */;
  %576 = @func_3837(%575) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), float32], Tensor[(1120, 1), int8], Tensor[(2, 320), float64], Tensor[(4, 13, 13), uint64]) */;
  %577 = atanh(%573) /* ty=Tensor[(14, 15, 4), float32] */;
  %578 = %576.0;
  (%577, %578, %var_7911)
}

def @func_2917(%var_2861: Tensor[(10, 5, 7), float32], %var_2881: Tensor[(1120), int8], %var_2913: Tensor[(80, 8), float32]) -> (Tensor[(10, 5, 7), float32], Tensor[(4, 13, 13), float32], Tensor[(676), float32], Tensor[(1120), float32], Tensor[(4, 13, 13), int64], Tensor[(8, 16, 5), float32], Tensor[(80, 8), float32]) {
  %579 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 5, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
  %580 = shape_of(%var_2861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_2861, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %583 = cast(meta[relay.Constant][23] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
  %584 = cast(%var_2881, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %585 = reshape(%583, newshape=[4, 13, 13]) /* ty=Tensor[(4, 13, 13), float32] */;
  %586 = reshape(%584, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %587 = @func_2057(%585, %586) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(10, 7, 16), bool], Tensor[(1120), int8]) */;
  %588 = cast(%var_2881, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %589 = cast(%var_2913, dtype="float32") /* ty=Tensor[(80, 8), float32] */;
  %590 = reshape(%589, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %591 = maximum(%581, %582) /* ty=Tensor[(10, 5, 7), float32] */;
  %592 = %587.0;
  %593 = rsqrt(%588) /* ty=Tensor[(1120), float32] */;
  %594 = @func_2373() /* ty=Tensor[(4, 13, 13), int64] */;
  %595 = @func_1132(%590) /* ty=Tensor[(8, 16, 5), float32] */;
  (%591, %592, meta[relay.Constant][23] /* ty=Tensor[(676), float32] */, %593, %594, %595, %var_2913)
}

def @func_2613(%var_2611: Tensor[(320, 2), float32]) -> (Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(8, 16, 5), bool]) {
  @func_2610(%var_2611) /* ty=(Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(8, 16, 5), bool]) */
}

def @func_4882() -> (Tensor[(4, 13, 13), int8],) {
  %596 = @func_1211() /* ty=Tensor[(4, 13, 13), int8] */;
  (%596,)
}

def @func_6880() -> (Tensor[(4, 13, 13), uint64],) {
  %597 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
  %598 = %597.0;
  (%598,)
}

def @func_1199() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) {
  @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */
}

def @func_6156() -> Tensor[(8, 16, 5), float32] {
  @func_6154() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_1642(%var_1640: Tensor[(8, 16, 5), float32]) -> (Tensor[(640), float32], Tensor[(8, 16, 5), uint32], Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool], Tensor[(8, 16, 5), float32]) {
  @func_1639(%var_1640) /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), uint32], Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool], Tensor[(8, 16, 5), float32]) */
}

def @func_5194(%var_5190: Tensor[(5, 8, 15), float64], %var_5191: Tensor[(5, 8, 15), float64], %var_5192: Tensor[(1, 1568), float32], %var_5193: Tensor[(5, 8, 15), float64]) -> (Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) {
  %617 = fn (%var_5128: Tensor[(5, 8, 15), float64], %var_5129: Tensor[(5, 8, 15), float64], %var_5160: Tensor[(1, 1568), float32], %var_5181: Tensor[(5, 8, 15), float64]) -> (Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) {
    %599 = cast(%var_5129, dtype="float64") /* ty=Tensor[(5, 8, 15), float64] */;
    %600 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(%var_5128, dtype="float64") /* ty=Tensor[(5, 8, 15), float64] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %603 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
    %604 = cast(%var_5160, dtype="float32") /* ty=Tensor[(1, 1568), float32] */;
    %605 = reshape(%604, newshape=[7, 16, 14]) /* ty=Tensor[(7, 16, 14), float32] */;
    %606 = @func_3322(%605) /* ty=(Tensor[(7, 16, 14), float32], Tensor[(640), float32]) */;
    %607 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
    %608 = cast(%var_5181, dtype="bool") /* ty=Tensor[(5, 8, 15), bool] */;
    %609 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%var_5128, dtype="bool") /* ty=Tensor[(5, 8, 15), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %612 = power(%601, %602) /* ty=Tensor[(5, 8, 15), float64] */;
    %613 = %603.1;
    %614 = %606.0;
    %615 = %607.1;
    %616 = logical_and(%610, %611) /* ty=Tensor[(5, 8, 15), bool] */;
    (%612, %613, %614, %var_5160, %615, %616)
  };
  %617(%var_5190, %var_5191, %var_5192, %var_5193) /* ty=(Tensor[(5, 8, 15), float64], Tensor[(4, 13, 13), int64], Tensor[(7, 16, 14), float32], Tensor[(1, 1568), float32], Tensor[(3, 2, 5), float32], Tensor[(5, 8, 15), bool]) */
}

def @func_6154() -> Tensor[(8, 16, 5), float32] {
  @func_4303() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_7519() -> (Tensor[(640), float32], Tensor[(1120), float64], Tensor[(3, 2, 5), float32], Tensor[(4, 13, 13), int64], Tensor[(840, 780), bool], Tensor[(840, 1), float32], Tensor[(840, ?), float32]) {
  %618 = cast(meta[relay.Constant][24] /* ty=Tensor[(840, 1), uint64] */, dtype="uint64") /* ty=Tensor[(840, 1), uint64] */;
  %619 = reshape(%618, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %620 = @func_5276(%619) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) */;
  %621 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
  %622 = cast(meta[relay.Constant][25] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %623 = cast(meta[relay.Constant][25] /* ty=Tensor[(780), float64] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %624 = reshape(%622, newshape=[10, 6, 13]) /* ty=Tensor[(10, 6, 13), float64] */;
  %625 = reshape(%623, newshape=[10, 6, 13]) /* ty=Tensor[(10, 6, 13), bool] */;
  %626 = @func_5399(%624, %625) /* ty=(Tensor[(4, 13, 13), int64], Tensor[(10, 6, 13), float64]) */;
  %627 = cast(meta[relay.Constant][24] /* ty=Tensor[(840, 1), uint64] */, dtype="float32") /* ty=Tensor[(840, 1), float32] */;
  %628 = cosh(%627) /* ty=Tensor[(840, 1), float32] */;
  %629 = cast(meta[relay.Constant][25] /* ty=Tensor[(780), float64] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %630 = cast(%628, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %631 = cast(%628, dtype="float32") /* ty=Tensor[(840, 1), float32] */;
  %632 = cast(meta[relay.Constant][24] /* ty=Tensor[(840, 1), uint64] */, dtype="uint8") /* ty=Tensor[(840, 1), uint8] */;
  %633 = shape_of(%628, dtype="int32") /* ty=Tensor[(2), int32] */;
  %634 = cast(%628, dtype="uint8") /* ty=Tensor[(840, 1), uint8] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %636 = multiply(%634, %635) /* ty=Tensor[(840, ?), uint8] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(840, ?), float32] */;
  %638 = @func_4672() /* ty=Tensor[(640), float32] */;
  %639 = %620.1;
  %640 = %621.1;
  %641 = %626.0;
  %642 = less_equal(%629, %630) /* ty=Tensor[(840, 780), bool] */;
  %643 = exp(%631) /* ty=Tensor[(840, 1), float32] */;
  %644 = sqrt(%637) /* ty=Tensor[(840, ?), float32] */;
  (%638, %639, %640, %641, %642, %643, %644)
}

def @func_5960() -> (Tensor[(12, 14, 4), float64],) {
  %647 = fn () -> (Tensor[(12, 14, 4), float64],) {
    %645 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 14, 4), float64] */;
    %646 = rsqrt(%645) /* ty=Tensor[(12, 14, 4), float64] */;
    (%646,)
  };
  %647() /* ty=(Tensor[(12, 14, 4), float64],) */
}

def @func_4592() -> Tensor[(4, 13, 13), uint64] {
  @func_4590() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_5068(%var_5066: Tensor[(8, 16, 5), float32]) -> (Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool]) {
  @func_5065(%var_5066) /* ty=(Tensor[(8, 16, 5), float32], Tensor[(8, 16, 5), bool]) */
}

def @func_3839(%var_3838: Tensor[(2, 320), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), float32], Tensor[(1120, 1), int8], Tensor[(2, 320), float64], Tensor[(4, 13, 13), uint64]) {
  %661 = fn (%var_3804: Tensor[(2, 320), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), float32], Tensor[(1120, 1), int8], Tensor[(2, 320), float64], Tensor[(4, 13, 13), uint64]) {
    %648 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 320), float32] */, dtype="float32") /* ty=Tensor[(2, 320), float32] */;
    %649 = cast(meta[relay.Constant][28] /* ty=Tensor[(1120, 1), int8] */, dtype="int8") /* ty=Tensor[(1120, 1), int8] */;
    %650 = reshape(%648, newshape=[640]) /* ty=Tensor[(640), float32] */;
    %651 = reshape(%649, newshape=[56, 20]) /* ty=Tensor[(56, 20), int8] */;
    %652 = @func_2445(%650, %651) /* ty=(Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) */;
    %653 = cast(%var_3804, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
    %654 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(2, 320), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %655 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 320), float32] */, dtype="float64") /* ty=Tensor[(2, 320), float64] */;
    %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %657 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
    %658 = %652.0;
    %659 = subtract(%655, %656) /* ty=Tensor[(2, 320), float64] */;
    %660 = @func_2082() /* ty=Tensor[(4, 13, 13), uint64] */;
    (%657, %658, meta[relay.Constant][28] /* ty=Tensor[(1120, 1), int8] */, %659, %660)
  };
  %661(%var_3838) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), float32], Tensor[(1120, 1), int8], Tensor[(2, 320), float64], Tensor[(4, 13, 13), uint64]) */
}

def @func_7149() -> Tensor[(4, 13, 13), int8] {
  %662 = @func_3736() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %662.0
}

def @func_897() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) {
  %663 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %664 = %663.1;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(4, 13, 13), float32] */;
  %666 = sin(%665) /* ty=Tensor[(4, 13, 13), float32] */;
  %667 = cast(%666, dtype="int8") /* ty=Tensor[(4, 13, 13), int8] */;
  %668 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%664, dtype="int8") /* ty=Tensor[(4, 13, 13), int8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %671 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %672 = %671.1;
  %673 = cast(%664, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %674 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%666, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %677 = logical_xor(%675, %676) /* ty=Tensor[(4, 13, 13), uint64] */;
  %678 = cast(%677, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %679 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%672, dtype="uint64") /* ty=Tensor[(4, 13, 13), uint64] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %682 = multiply(%669, %670) /* ty=Tensor[(4, 13, 13), int8] */;
  %683 = bitwise_and(%680, %681) /* ty=Tensor[(4, 13, 13), uint64] */;
  (%682, %683)
}

def @func_7171() -> (Tensor[(8, 16, 5), float32],) {
  %684 = @func_2709() /* ty=Tensor[(8, 16, 5), float32] */;
  (%684,)
}

def @func_1134(%var_1133: Tensor[(8, 16, 5), float32]) -> Tensor[(8, 16, 5), float32] {
  %686 = fn (%var_1120: Tensor[(8, 16, 5), float32]) -> Tensor[(8, 16, 5), float32] {
    %685 = cast(%var_1120, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
    rsqrt(%685) /* ty=Tensor[(8, 16, 5), float32] */
  };
  %686(%var_1133) /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_7237() -> (Tensor[(14, 15, 4), float64], Tensor[(640), uint8], Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), int64]) {
  %687 = @func_4350() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %688 = @func_4985() /* ty=Tensor[(640), float32] */;
  %689 = cast(meta[relay.Constant][29] /* ty=Tensor[(640), float32] */, dtype="uint8") /* ty=Tensor[(640), uint8] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(1), int32] */;
  %691 = cast(%688, dtype="uint8") /* ty=Tensor[(640), uint8] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %693 = @func_6471() /* ty=(Tensor[(14, 15, 4), float64],) */;
  %694 = @func_3736() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
  %695 = %687.0;
  %696 = logical_xor(%691, %692) /* ty=Tensor[(640), uint8] */;
  %697 = %693.0;
  %698 = %694.3;
  (%695, %696, %697, %698)
}

def @func_1560() -> (Tensor[(640), float32], Tensor[(640), float32]) {
  @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */
}

def @func_1213() -> Tensor[(4, 13, 13), int8] {
  @func_1211() /* ty=Tensor[(4, 13, 13), int8] */
}

def @func_3322(%var_3287: Tensor[(7, 16, 14), float32]) -> (Tensor[(7, 16, 14), float32], Tensor[(640), float32]) {
  %699 = cast(%var_3287, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
  %700 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %701 = tan(%699) /* ty=Tensor[(7, 16, 14), float32] */;
  %702 = %700.1;
  (%701, %702)
}

def @main() -> (Tensor[(14, 15, 7), float32],) {
  %703 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 15, 7), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 7), float32] */;
  %704 = acosh(%703) /* ty=Tensor[(14, 15, 7), float32] */;
  (%704,)
}

def @func_6137() -> (Tensor[(4, 13, 13), int8],) {
  %707 = fn () -> (Tensor[(4, 13, 13), int8],) {
    %705 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
    %706 = %705.0;
    (%706,)
  };
  %707() /* ty=(Tensor[(4, 13, 13), int8],) */
}

def @func_7151() -> Tensor[(4, 13, 13), int8] {
  @func_7149() /* ty=Tensor[(4, 13, 13), int8] */
}

def @func_1979(%var_1974: Tensor[(3, 2, 5), float32]) -> Tensor[(3, 2, 5), float32] {
  %708 = cast(%var_1974, dtype="float32") /* ty=Tensor[(3, 2, 5), float32] */;
  sinh(%708) /* ty=Tensor[(3, 2, 5), float32] */
}

def @func_6825() -> (Tensor[(4, 13, 13), int64],) {
  @func_6823() /* ty=(Tensor[(4, 13, 13), int64],) */
}

def @func_2374() -> Tensor[(4, 13, 13), int64] {
  %710 = fn () -> Tensor[(4, 13, 13), int64] {
    %709 = @func_1197() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */;
    %709.1
  };
  %710() /* ty=Tensor[(4, 13, 13), int64] */
}

def @func_6149() -> Tensor[(8, 10, 5), float64] {
  @func_6147() /* ty=Tensor[(8, 10, 5), float64] */
}

def @func_3325(%var_3323: Tensor[(7, 16, 14), float32]) -> (Tensor[(7, 16, 14), float32], Tensor[(640), float32]) {
  @func_3322(%var_3323) /* ty=(Tensor[(7, 16, 14), float32], Tensor[(640), float32]) */
}

def @func_6854(%var_6835: Tensor[(9, 6, 15), uint8]) -> (Tensor[(9, 6, 15), uint8],) {
  %711 = cast(meta[relay.Constant][31] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %712 = cast(%var_6835, dtype="uint8") /* ty=Tensor[(9, 6, 15), uint8] */;
  %713 = bitwise_or(%711, %712) /* ty=Tensor[(9, 6, 15), uint8] */;
  (%713,)
}

def @func_7644(%var_7636: Tensor[(4, 6, 4), int64], %var_7637: Tensor[(4, 6, 4), int64]) -> Tensor[(4, 6, 4), int64] {
  %714 = cast(%var_7637, dtype="int64") /* ty=Tensor[(4, 6, 4), int64] */;
  %715 = shape_of(%var_7636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_7636, dtype="int64") /* ty=Tensor[(4, 6, 4), int64] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%716, %717) /* ty=Tensor[(4, 6, 4), int64] */
}

def @func_6777(%var_6698: Tensor[(14, 14, 4), float32], %var_6699: Tensor[(14, 14, 4), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(640), float32], Tensor[(640), float32], Tensor[(14, 14, 4), uint32], Tensor[(4, 13, 13), uint64], Tensor[(14, 14, 4), float64], Tensor[(14, 14, 4), uint64]) {
  %718 = @func_4462() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
  %719 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %720 = cast(%var_6699, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %721 = erf(%720) /* ty=Tensor[(14, 14, 4), float64] */;
  %722 = cast(%var_6699, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %726 = bitwise_and(%724, %725) /* ty=Tensor[(14, 14, 4), uint32] */;
  %727 = cast(%721, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="uint32") /* ty=Tensor[(14, 14, 4), uint32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %731 = cast(%var_6699, dtype="float32") /* ty=Tensor[(14, 14, 4), float32] */;
  %732 = shape_of(%var_6698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%var_6698, dtype="float32") /* ty=Tensor[(14, 14, 4), float32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %735 = floor_divide(%733, %734) /* ty=Tensor[(14, 14, 4), float32] */;
  %736 = cast(%735, dtype="bool") /* ty=Tensor[(14, 14, 4), bool] */;
  %737 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%726, dtype="bool") /* ty=Tensor[(14, 14, 4), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = greater(%738, %739) /* ty=Tensor[(14, 14, 4), bool] */;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %742 = log10(%741) /* ty=Tensor[(14, 14, 4), float64] */;
  %743 = cast(%742, dtype="float64") /* ty=Tensor[(14, 14, 4), float64] */;
  %744 = cast(%var_6698, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %745 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%742, dtype="uint64") /* ty=Tensor[(14, 14, 4), uint64] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %748 = %718.1;
  %749 = @func_4560() /* ty=Tensor[(1120), float64] */;
  %750 = @func_6256() /* ty=Tensor[(640), float32] */;
  %751 = %719.2;
  %752 = logical_xor(%729, %730) /* ty=Tensor[(14, 14, 4), uint32] */;
  %753 = @func_6079() /* ty=Tensor[(4, 13, 13), uint64] */;
  %754 = atanh(%743) /* ty=Tensor[(14, 14, 4), float64] */;
  %755 = multiply(%746, %747) /* ty=Tensor[(14, 14, 4), uint64] */;
  (%748, %749, %750, %751, %752, %753, %754, %755)
}

def @func_4884() -> (Tensor[(4, 13, 13), int8],) {
  @func_4882() /* ty=(Tensor[(4, 13, 13), int8],) */
}

def @func_7027() -> Tensor[(14, 15, 4), float64] {
  %757 = fn () -> Tensor[(14, 15, 4), float64] {
    %756 = @func_5125() /* ty=(Tensor[(14, 15, 4), float64],) */;
    %756.0
  };
  %757() /* ty=Tensor[(14, 15, 4), float64] */
}

def @func_7610() -> (Tensor[(30), float32], Tensor[(4, 13, 13), float64], Tensor[(640), float32]) {
  %765 = fn () -> (Tensor[(30), float32], Tensor[(4, 13, 13), float64], Tensor[(640), float32]) {
    %758 = @func_5006() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */;
    %759 = @func_6323() /* ty=(Tensor[(4, 13, 13), int64],) */;
    %760 = %759.0;
    %761 = cast(%760, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %762 = %758.2;
    %763 = asinh(%761) /* ty=Tensor[(4, 13, 13), float64] */;
    %764 = @func_4985() /* ty=Tensor[(640), float32] */;
    (%762, %763, %764)
  };
  %765() /* ty=(Tensor[(30), float32], Tensor[(4, 13, 13), float64], Tensor[(640), float32]) */
}

def @func_6300() -> (Tensor[(4, 13, 13), int64],) {
  %767 = fn () -> (Tensor[(4, 13, 13), int64],) {
    %766 = @func_2373() /* ty=Tensor[(4, 13, 13), int64] */;
    (%766,)
  };
  %767() /* ty=(Tensor[(4, 13, 13), int64],) */
}

def @func_3738() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) {
  @func_3736() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), int64]) */
}

def @func_591(%var_589: Tensor[(10, 7, 16), int8], %var_590: Tensor[(10, 7, 16), int8]) -> (Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) {
  %775 = fn (%var_573: Tensor[(10, 7, 16), int8], %var_574: Tensor[(10, 7, 16), int8]) -> (Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) {
    %768 = cast(%var_574, dtype="bool") /* ty=Tensor[(10, 7, 16), bool] */;
    %769 = shape_of(%var_573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(%var_573, dtype="bool") /* ty=Tensor[(10, 7, 16), bool] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %772 = cast(%var_574, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
    %773 = equal(%770, %771) /* ty=Tensor[(10, 7, 16), bool] */;
    %774 = sigmoid(%772) /* ty=Tensor[(10, 7, 16), float64] */;
    (%773, %774)
  };
  %775(%var_589, %var_590) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */
}

def @func_2782() -> Tensor[(14, 15, 4), float64] {
  @func_2780() /* ty=Tensor[(14, 15, 4), float64] */
}

def @func_4674() -> Tensor[(640), float32] {
  @func_4672() /* ty=Tensor[(640), float32] */
}

def @func_3493(%var_3491: Tensor[(640), float32]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(640), float32]) {
  @func_3490(%var_3491) /* ty=(Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(640), float32]) */
}

def @func_2445(%var_2420: Tensor[(640), float32], %var_2440: Tensor[(56, 20), int8]) -> (Tensor[(4, 13, 13), float32], Tensor[(8, 16, 5), float32], Tensor[(640), float32], Tensor[(10, 7, 16), bool], Tensor[(56, 20), int8]) {
  %776 = @func_1453() /* ty=(Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), float32]) */;
  %777 = cast(%var_2420, dtype="float32") /* ty=Tensor[(640), float32] */;
  %778 = reshape(%777, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %779 = cast(%var_2440, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
  %780 = cast(%var_2440, dtype="int8") /* ty=Tensor[(56, 20), int8] */;
  %781 = reshape(%779, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %782 = reshape(%780, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), int8] */;
  %783 = @func_588(%781, %782) /* ty=(Tensor[(10, 7, 16), bool], Tensor[(10, 7, 16), float64]) */;
  %784 = %776.0;
  %785 = @func_1132(%778) /* ty=Tensor[(8, 16, 5), float32] */;
  %786 = %783.0;
  (%784, %785, %var_2420, %786, %var_2440)
}

def @func_4083(%var_4031: Tensor[(1, 3, 5), uint32], %var_4032: Tensor[(4, 3, 5), uint32]) -> Tensor[(4, 3, 5), float32] {
  %787 = cast(%var_4032, dtype="float64") /* ty=Tensor[(4, 3, 5), float64] */;
  %788 = atanh(%787) /* ty=Tensor[(4, 3, 5), float64] */;
  %789 = cast(%var_4031, dtype="uint32") /* ty=Tensor[(1, 3, 5), uint32] */;
  %790 = cast(%var_4032, dtype="uint32") /* ty=Tensor[(4, 3, 5), uint32] */;
  %791 = bitwise_or(%789, %790) /* ty=Tensor[(4, 3, 5), uint32] */;
  %792 = cast(%791, dtype="uint8") /* ty=Tensor[(4, 3, 5), uint8] */;
  %793 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%788, dtype="uint8") /* ty=Tensor[(4, 3, 5), uint8] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %796 = subtract(%794, %795) /* ty=Tensor[(4, 3, 5), uint8] */;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(4, 3, 5), float32] */;
  acos(%797) /* ty=Tensor[(4, 3, 5), float32] */
}

def @func_6030() -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) {
  %802 = fn () -> (Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) {
    %798 = @func_3939() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), int8]) */;
    %799 = @func_5945() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), float64]) */;
    %800 = %798.0;
    %801 = %799.0;
    (%800, %801)
  };
  %802() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */
}

def @func_8033() -> Tensor[(14, 15, 4), bool] {
  %803 = @func_6569() /* ty=(Tensor[(14, 15, 4), bool],) */;
  %803.0
}

def @func_1558() -> (Tensor[(640), float32], Tensor[(640), float32]) {
  %804 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %805 = @func_1502() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
  %806 = %804.2;
  %807 = %805.2;
  (%806, %807)
}

def @func_5127() -> (Tensor[(14, 15, 4), float64],) {
  @func_5125() /* ty=(Tensor[(14, 15, 4), float64],) */
}

def @func_5654() -> (Tensor[(640), float32],) {
  %812 = fn () -> (Tensor[(640), float32],) {
    %808 = @func_3652() /* ty=(Tensor[(640), float32],) */;
    %809 = %808.0;
    %810 = cast(%809, dtype="float32") /* ty=Tensor[(640), float32] */;
    %811 = rsqrt(%810) /* ty=Tensor[(640), float32] */;
    (%811,)
  };
  %812() /* ty=(Tensor[(640), float32],) */
}

def @func_2083() -> Tensor[(4, 13, 13), uint64] {
  %814 = fn () -> Tensor[(4, 13, 13), uint64] {
    %813 = @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */;
    %813.1
  };
  %814() /* ty=Tensor[(4, 13, 13), uint64] */
}

def @func_2201() -> (Tensor[(14, 15, 4), bool],) {
  %817 = fn () -> (Tensor[(14, 15, 4), bool],) {
    %815 = @func_1469() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(14, 15, 4), bool]) */;
    %816 = %815.1;
    (%816,)
  };
  %817() /* ty=(Tensor[(14, 15, 4), bool],) */
}

def @func_7366() -> (Tensor[(4, 13, 13), float64],) {
  %822 = fn () -> (Tensor[(4, 13, 13), float64],) {
    %818 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
    %819 = %818.0;
    %820 = cast(%819, dtype="float64") /* ty=Tensor[(4, 13, 13), float64] */;
    %821 = tan(%820) /* ty=Tensor[(4, 13, 13), float64] */;
    (%821,)
  };
  %822() /* ty=(Tensor[(4, 13, 13), float64],) */
}

def @func_7135() -> Tensor[(1120), float64] {
  %823 = fn () -> Tensor[(1120), float64] {
    @func_4560() /* ty=Tensor[(1120), float64] */
  };
  %823() /* ty=Tensor[(1120), float64] */
}

def @func_3490(%var_3471: Tensor[(640), float32]) -> (Tensor[(640), float32], Tensor[(4, 13, 13), int64], Tensor[(640), float32]) {
  %824 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %825 = %824.1;
  %826 = cast(%var_3471, dtype="float32") /* ty=Tensor[(640), float32] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(1), int32] */;
  %828 = cast(%825, dtype="float32") /* ty=Tensor[(640), float32] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?), float32] */;
  %830 = @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */;
  %831 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %832 = floor_mod(%828, %829) /* ty=Tensor[(640), float32] */;
  %833 = %830.0;
  %834 = %831.0;
  (%832, %833, %834)
}

def @func_5007() -> (Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) {
  %844 = fn () -> (Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) {
    %835 = @func_3163() /* ty=Tensor[(8, 16, 5), float32] */;
    %836 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 16, 5), float32] */, dtype="int16") /* ty=Tensor[(8, 16, 5), int16] */;
    %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%835, dtype="int16") /* ty=Tensor[(8, 16, 5), int16] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %840 = cast(meta[relay.Constant][33] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %841 = reshape(%840, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), float32] */;
    %842 = multiply(%838, %839) /* ty=Tensor[(8, 16, 5), int16] */;
    %843 = @func_1979(%841) /* ty=Tensor[(3, 2, 5), float32] */;
    (%842, %843, meta[relay.Constant][33] /* ty=Tensor[(30), float32] */)
  };
  %844() /* ty=(Tensor[(8, 16, 5), int16], Tensor[(3, 2, 5), float32], Tensor[(30), float32]) */
}

def @func_5803() -> Tensor[(8, 16, 5), float32] {
  %846 = fn () -> Tensor[(8, 16, 5), float32] {
    %845 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
    %845.1
  };
  %846() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_2710() -> Tensor[(8, 16, 5), float32] {
  %848 = fn () -> Tensor[(8, 16, 5), float32] {
    %847 = @func_1315() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(8, 16, 5), float32], Tensor[(640), float32]) */;
    %847.1
  };
  %848() /* ty=Tensor[(8, 16, 5), float32] */
}

def @func_817() -> (Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) {
  @func_815() /* ty=(Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) */
}

def @func_6059() -> (Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) {
  %855 = fn () -> (Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) {
    %849 = @func_2200() /* ty=(Tensor[(14, 15, 4), bool],) */;
    %850 = %849.0;
    %851 = cast(%850, dtype="uint64") /* ty=Tensor[(14, 15, 4), uint64] */;
    %852 = reshape(%851, newshape=[840]) /* ty=Tensor[(840), uint64] */;
    %853 = @func_5276(%852) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(14, 15, 4), bool], Tensor[(840), uint64]) */;
    %854 = %853.1;
    (%850, %854)
  };
  %855() /* ty=(Tensor[(14, 15, 4), bool], Tensor[(1120), float64]) */
}

def @func_815() -> (Tensor[(4, 13, 13), int64], Tensor[(4, 13, 13), int64]) {
  %856 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %857 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %860 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %861 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %862 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 13, 13), int64] */, dtype="int64") /* ty=Tensor[(4, 13, 13), int64] */;
  %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %864 = maximum(%858, %859) /* ty=Tensor[(4, 13, 13), int64] */;
  %865 = bitwise_xor(%862, %863) /* ty=Tensor[(4, 13, 13), int64] */;
  (%864, %865)
}

def @func_899() -> (Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) {
  @func_897() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(4, 13, 13), uint64]) */
}

def @func_7809() -> (Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), float64]) {
  @func_7807() /* ty=(Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), float64]) */
}

def @func_4221() -> (Tensor[(4, 13, 13), int8], Tensor[(676), float32], Tensor[(8, 16, 5), bool]) {
  %877 = fn () -> (Tensor[(4, 13, 13), int8], Tensor[(676), float32], Tensor[(8, 16, 5), bool]) {
    %866 = cast(meta[relay.Constant][36] /* ty=Tensor[(676), float32] */, dtype="float32") /* ty=Tensor[(676), float32] */;
    %867 = reshape(%866, newshape=[676, 1]) /* ty=Tensor[(676, 1), float32] */;
    %868 = @func_2542(%867) /* ty=(Tensor[(640), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), float32], Tensor[(4, 13, 13), int8], Tensor[(56, 20), int8], Tensor[(4, 13, 13), int64], Tensor[(1120), int8], Tensor[(676, 1120), uint16], Tensor[(4, 13, 13), float32], Tensor[(1120), float64]) */;
    %869 = @func_3106() /* ty=(Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
    %870 = %869.1;
    %871 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 16, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
    %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
    %873 = cast(%870, dtype="bool") /* ty=Tensor[(8, 16, 5), bool] */;
    %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %875 = %868.3;
    %876 = less(%873, %874) /* ty=Tensor[(8, 16, 5), bool] */;
    (%875, meta[relay.Constant][36] /* ty=Tensor[(676), float32] */, %876)
  };
  %877() /* ty=(Tensor[(4, 13, 13), int8], Tensor[(676), float32], Tensor[(8, 16, 5), bool]) */
}

def @func_4987() -> Tensor[(640), float32] {
  @func_4985() /* ty=Tensor[(640), float32] */
}

def @func_6545() -> (Tensor[(1120), float64], Tensor[(8, 16, 5), float32]) {
  %878 = @func_3234() /* ty=(Tensor[(10, 7, 16), float64], Tensor[(1120), int8], Tensor[(10, 7, 16), bool], Tensor[(1120), float64], Tensor[(4, 13, 13), int64], Tensor[(640), float32], Tensor[(8, 16, 5), float32]) */;
  %879 = %878.6;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %881 = sinh(%880) /* ty=Tensor[(8, 16, 5), float32] */;
  %882 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %883 = shape_of(%881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %884 = cast(%881, dtype="float32") /* ty=Tensor[(8, 16, 5), float32] */;
  %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %886 = @func_4560() /* ty=Tensor[(1120), float64] */;
  %887 = power(%884, %885) /* ty=Tensor[(8, 16, 5), float32] */;
  (%886, %887)
}

def @func_6781(%var_6779: Tensor[(14, 14, 4), float32], %var_6780: Tensor[(14, 14, 4), float32]) -> (Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(640), float32], Tensor[(640), float32], Tensor[(14, 14, 4), uint32], Tensor[(4, 13, 13), uint64], Tensor[(14, 14, 4), float64], Tensor[(14, 14, 4), uint64]) {
  @func_6777(%var_6779, %var_6780) /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(1120), float64], Tensor[(640), float32], Tensor[(640), float32], Tensor[(14, 14, 4), uint32], Tensor[(4, 13, 13), uint64], Tensor[(14, 14, 4), float64], Tensor[(14, 14, 4), uint64]) */
}

def @func_7807() -> (Tensor[(14, 15, 4), float64], Tensor[(4, 13, 13), float64]) {
  %888 = @func_7365() /* ty=(Tensor[(4, 13, 13), float64],) */;
  %889 = @func_2176() /* ty=Tensor[(14, 15, 4), float64] */;
  %890 = %888.0;
  (%889, %890)
}

def @func_7039() -> Tensor[(11, 5, 13), float64] {
  @func_7037() /* ty=Tensor[(11, 5, 13), float64] */
}

def @func_1571() -> Tensor[(640), float32] {
  %892 = fn () -> Tensor[(640), float32] {
    %891 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
    %891.0
  };
  %892() /* ty=Tensor[(640), float32] */
}

def @func_3106() -> (Tensor[(640), float32], Tensor[(8, 16, 5), float32]) {
  %893 = @func_1558() /* ty=(Tensor[(640), float32], Tensor[(640), float32]) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float32") /* ty=Tensor[(640), float32] */;
  %896 = cast(%894, dtype="float32") /* ty=Tensor[(640), float32] */;
  %897 = reshape(%896, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float32] */;
  %898 = atanh(%895) /* ty=Tensor[(640), float32] */;
  %899 = @func_1132(%897) /* ty=Tensor[(8, 16, 5), float32] */;
  (%898, %899)
}

def @func_3163() -> Tensor[(8, 16, 5), float32] {
  %900 = @func_2124() /* ty=(Tensor[(8, 16, 5), float32], Tensor[(4, 13, 13), int64]) */;
  %900.0
}

def @func_7983() -> (Tensor[(4, 13, 13), uint64],) {
  %903 = fn () -> (Tensor[(4, 13, 13), uint64],) {
    %901 = @func_2730() /* ty=(Tensor[(4, 13, 13), uint64], Tensor[(4, 13, 13), int64]) */;
    %902 = %901.0;
    (%902,)
  };
  %903() /* ty=(Tensor[(4, 13, 13), uint64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen245/build/output.py:2650: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen245/build/output.py:2655: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen245/build/output.py:2676: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')

===================================
#[version = "0.0.5"]
def @main() -> ((Tensor[(14, 15, 7), float32],), ()) {
  let %x: Tensor[(14, 15, 7), float32] = meta[relay.Constant][0] /* ty=Tensor[(14, 15, 7), float32] */;
  let %x1: Tensor[(14, 15, 7), float32] = zeros_like(%x) /* ty=Tensor[(14, 15, 7), float32] */;
  let %x2: (Tensor[(14, 15, 7), float32],) = (%x,);
  %0 = zeros(shape=[14, 15, 7], dtype="float32") /* ty=Tensor[(14, 15, 7), float32] */;
  let %x3: (Tensor[(14, 15, 7), float32],) = (%0,);
  %1 = ones(shape=[14, 15, 7], dtype="float32") /* ty=Tensor[(14, 15, 7), float32] */;
  %2 = (%1,);
  %3 = %2.0;
  %4 = (
    let %x4: Tensor[(14, 15, 7), float32] = add(%x1, %3) /* ty=Tensor[(14, 15, 7), float32] */;
    ()
  );
  (%x2, %4)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen245/build/output.py", line 2681, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_zeros_kernel0(float* __restrict__ T_full) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1470) {
    T_full[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = 0.000000e+00f;
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

