==========mod==========
#[version = "0.0.5"]
def @func_874(%var_858: Tensor[(12, 9, 12), float64], %var_869: Tensor[(1040), float32], %var_870: Tensor[(252), int16]) -> (Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 12), float64] */;
  %1 = shape_of(%var_858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_858, dtype="float64") /* ty=Tensor[(12, 9, 12), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %4 = cast(%var_869, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %5 = cast(%var_870, dtype="int16") /* ty=Tensor[(252), int16] */;
  %6 = reshape(%4, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float32] */;
  %7 = reshape(%5, newshape=[126, 2]) /* ty=Tensor[(126, 2), int16] */;
  %8 = @func_249(%6, %7) /* ty=(Tensor[(5, 16, 13), float32], Tensor[(14, 2, 9), uint8], Tensor[(126, 2), int16]) */;
  %9 = mod(%2, %3) /* ty=Tensor[(12, 9, 12), float64] */;
  %10 = %8.2;
  (%9, %10, %var_869, %var_870)
}

def @func_249(%var_238: Tensor[(5, 16, 13), float32], %var_242: Tensor[(126, 2), int16]) -> (Tensor[(5, 16, 13), float32], Tensor[(14, 2, 9), uint8], Tensor[(126, 2), int16]) {
  %11 = cast(%var_238, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
  %12 = cast(%var_242, dtype="int16") /* ty=Tensor[(126, 2), int16] */;
  %13 = reshape(%12, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
  %14 = acos(%11) /* ty=Tensor[(5, 16, 13), float32] */;
  %15 = @func_152(%13) /* ty=Tensor[(14, 2, 9), uint8] */;
  (%14, %15, %var_242)
}

def @func_3625(%var_3597: Tensor[(15, 3, 1), float64], %var_3615: Tensor[(15, 3, 8), int64]) -> (Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(15, 3, 8), uint64]) {
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %17 = reshape(%16, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %18 = cast(%var_3597, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
  %19 = log10(%18) /* ty=Tensor[(15, 3, 1), float64] */;
  %20 = cast(%var_3597, dtype="int64") /* ty=Tensor[(15, 3, 1), int64] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int64") /* ty=Tensor[(15, 3, 1), int64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %24 = maximum(%22, %23) /* ty=Tensor[(15, 3, ?), int64] */;
  %25 = cast(%24, dtype="uint64") /* ty=Tensor[(15, 3, ?), uint64] */;
  %26 = cast(%var_3615, dtype="uint64") /* ty=Tensor[(15, 3, 8), uint64] */;
  %27 = @func_817(%17) /* ty=Tensor[(15, 3, 9), float32] */;
  %28 = bitwise_or(%25, %26) /* ty=Tensor[(15, 3, 8), uint64] */;
  (%27, meta[relay.Constant][1] /* ty=Tensor[(405), float32] */, %28)
}

def @func_513(%var_496: Tensor[(10, 3, 6), float64]) -> (Tensor[(10, 3, 6), float32],) {
  %29 = cast(%var_496, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %30 = asin(%29) /* ty=Tensor[(10, 3, 6), float64] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %32 = atanh(%31) /* ty=Tensor[(10, 3, 6), float32] */;
  (%32,)
}

def @func_5397(%var_5354: Tensor[(6, 16, 3), uint32], %var_5355: Tensor[(6, 16, 3), uint32], %var_5378: uint64, %var_5382: Tensor[(819), int16]) -> (Tensor[(6, 16, 3), uint32], Tensor[(3, 4, 4), bool], Tensor[(4, 12), int32], Tensor[(7, 13, 8), float64], Tensor[(728), uint16], Tensor[(13, 9, 10), uint64], Tensor[(819), int16], Tensor[(819), uint64]) {
  %33 = cast(%var_5355, dtype="uint32") /* ty=Tensor[(6, 16, 3), uint32] */;
  %34 = shape_of(%var_5354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_5354, dtype="uint32") /* ty=Tensor[(6, 16, 3), uint32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 12), int32] */, dtype="int32") /* ty=Tensor[(4, 12), int32] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 12), int32] */, dtype="int32") /* ty=Tensor[(4, 12), int32] */;
  %39 = reshape(%37, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %40 = reshape(%38, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(728), uint16] */, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(728), uint16] */, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %43 = reshape(%41, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), uint16] */;
  %44 = reshape(%42, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), uint16] */;
  %45 = @func_3580(%43, %44) /* ty=(Tensor[(7, 13, 8), uint16], Tensor[(7, 13, 8), float64]) */;
  %46 = cast(%var_5378, dtype="uint64") /* ty=uint64 */;
  %47 = reshape(%46, newshape=[]) /* ty=uint64 */;
  %48 = cast(%var_5382, dtype="int16") /* ty=Tensor[(819), int16] */;
  %49 = reshape(%48, newshape=[819]) /* ty=Tensor[(819), int16] */;
  %50 = @func_2529(%49) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) */;
  %51 = cast(%var_5382, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %52 = cast(%var_5378, dtype="uint64") /* ty=uint64 */;
  %53 = maximum(%35, %36) /* ty=Tensor[(6, 16, 3), uint32] */;
  %54 = @func_3339(%39, %40) /* ty=Tensor[(3, 4, 4), bool] */;
  %55 = %45.1;
  %56 = @func_5300(%47) /* ty=Tensor[(13, 9, 10), uint64] */;
  %57 = %50.3;
  %58 = bitwise_or(%51, %52) /* ty=Tensor[(819), uint64] */;
  (%53, %54, meta[relay.Constant][2] /* ty=Tensor[(4, 12), int32] */, %55, meta[relay.Constant][3] /* ty=Tensor[(728), uint16] */, %56, %57, %58)
}

def @func_5274(%var_5256: Tensor[(9, 16, 7), float32]) -> (Tensor[(9, 16, 7), float32], Tensor[(7, 9, 13), int16], Tensor[(7, 117), int16]) {
  %59 = cast(%var_5256, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 117), int16] */, dtype="int16") /* ty=Tensor[(7, 117), int16] */;
  %61 = reshape(%60, newshape=[819]) /* ty=Tensor[(819), int16] */;
  %62 = @func_2529(%61) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) */;
  %63 = acos(%59) /* ty=Tensor[(9, 16, 7), float32] */;
  %64 = %62.2;
  (%63, %64, meta[relay.Constant][4] /* ty=Tensor[(7, 117), int16] */)
}

def @func_152(%var_140: Tensor[(14, 2, 9), int16]) -> Tensor[(14, 2, 9), uint8] {
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 2, 9), int16] */, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %66 = shape_of(%var_140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%var_140, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = greater(%67, %68) /* ty=Tensor[(14, 2, 9), bool] */;
  %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 2, 9), int16] */, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%72, %73) /* ty=Tensor[(14, 2, 9), uint8] */
}

def @func_6860(%var_6850: Tensor[(10, 10, 1), float64]) -> (Tensor[(10, 10, 1), float64],) {
  %74 = cast(%var_6850, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
  %75 = log(%74) /* ty=Tensor[(10, 10, 1), float64] */;
  (%75,)
}

def @func_7805(%var_7738: Tensor[(15, 11, 4), float32], %var_7746: Tensor[(432), float64]) -> (Tensor[(15, 11, 4), float32], Tensor[(432, 1), float64], Tensor[(2400, 1), int64], Tensor[(432), float64], Tensor[(8, 16, 14), float32], float32, Tensor[(1792), float32], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) {
  %76 = cast(%var_7738, dtype="float32") /* ty=Tensor[(15, 11, 4), float32] */;
  %77 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 11, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 4), float32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(2400, 1), int64] */, dtype="int64") /* ty=Tensor[(2400, 1), int64] */;
  %81 = cast(%var_7746, dtype="float64") /* ty=Tensor[(432), float64] */;
  %82 = reshape(%80, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int64] */;
  %83 = reshape(%81, newshape=[432, 1]) /* ty=Tensor[(432, 1), float64] */;
  %84 = @func_4810(%82, %83) /* ty=(Tensor[(16, 15, 10), bool], Tensor[(9, 16, 3), bool], Tensor[(432, 1), float64]) */;
  %85 = cast(0.675603f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %87 = reshape(%85, newshape=[]) /* ty=float32 */;
  %88 = reshape(%86, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %89 = @func_1291(%87, %88) /* ty=(Tensor[(8, 16, 14), float32],) */;
  %90 = cast(meta[relay.Constant][9] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %91 = cast(meta[relay.Constant][9] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %92 = reshape(%90, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
  %93 = reshape(%91, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
  %94 = @func_1772(%92, %93) /* ty=(Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) */;
  %95 = floor_mod(%78, %79) /* ty=Tensor[(15, 11, 4), float32] */;
  %96 = %84.2;
  %97 = %89.0;
  %98 = %94.0;
  (%95, %96, meta[relay.Constant][7] /* ty=Tensor[(2400, 1), int64] */, %var_7746, %97, 0.675603f /* ty=float32 */, meta[relay.Constant][8] /* ty=Tensor[(1792), float32] */, %98, meta[relay.Constant][9] /* ty=Tensor[(819), int16] */)
}

def @func_6024(%var_5997: Tensor[(16, 12, 1), float64]) -> (Tensor[(16, 12, ?), float64], Tensor[(16, 12, 1), float32]) {
  %99 = cast(%var_5997, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
  %100 = cos(%99) /* ty=Tensor[(16, 12, 1), float64] */;
  %101 = cast(%var_5997, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %105 = cast(%var_5997, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
  %106 = mod(%103, %104) /* ty=Tensor[(16, 12, ?), float64] */;
  %107 = acosh(%105) /* ty=Tensor[(16, 12, 1), float32] */;
  (%106, %107)
}

def @func_6685(%var_6678: Tensor[(14, 4, 4), float32]) -> (Tensor[(14, 4, 4), float32],) {
  %108 = cast(%var_6678, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %109 = exp(%108) /* ty=Tensor[(14, 4, 4), float32] */;
  (%109,)
}

def @func_2529(%var_2522: Tensor[(819), int16]) -> (Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) {
  %110 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
  %111 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
  %112 = cast(%var_2522, dtype="int16") /* ty=Tensor[(819), int16] */;
  %113 = cast(%var_2522, dtype="int16") /* ty=Tensor[(819), int16] */;
  %114 = reshape(%112, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
  %115 = reshape(%113, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
  %116 = @func_1772(%114, %115) /* ty=(Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) */;
  %117 = acosh(%110) /* ty=Tensor[(6, 16, 6), float64] */;
  %118 = exp(%111) /* ty=Tensor[(6, 16, 6), float64] */;
  %119 = %116.0;
  (%117, %118, %119, %var_2522)
}

def @func_2596(%var_2572: Tensor[(1, 6, 11), float32]) -> (Tensor[(?, 6, 11), uint16], Tensor[(1, 6, 11), float64]) {
  %120 = cast(%var_2572, dtype="float32") /* ty=Tensor[(1, 6, 11), float32] */;
  %121 = tan(%120) /* ty=Tensor[(1, 6, 11), float32] */;
  %122 = cast(%121, dtype="uint16") /* ty=Tensor[(1, 6, 11), uint16] */;
  %123 = shape_of(%var_2572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_2572, dtype="uint16") /* ty=Tensor[(1, 6, 11), uint16] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %126 = cast(%121, dtype="float64") /* ty=Tensor[(1, 6, 11), float64] */;
  %127 = multiply(%124, %125) /* ty=Tensor[(?, 6, 11), uint16] */;
  %128 = atanh(%126) /* ty=Tensor[(1, 6, 11), float64] */;
  (%127, %128)
}

def @func_3580(%var_3545: Tensor[(7, 13, 8), uint16], %var_3546: Tensor[(7, 13, 8), uint16]) -> (Tensor[(7, 13, 8), uint16], Tensor[(7, 13, 8), float64]) {
  %129 = cast(%var_3546, dtype="uint16") /* ty=Tensor[(7, 13, 8), uint16] */;
  %130 = shape_of(%var_3545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%var_3545, dtype="uint16") /* ty=Tensor[(7, 13, 8), uint16] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %133 = cast(%var_3545, dtype="float64") /* ty=Tensor[(7, 13, 8), float64] */;
  %134 = multiply(%131, %132) /* ty=Tensor[(7, 13, 8), uint16] */;
  %135 = atan(%133) /* ty=Tensor[(7, 13, 8), float64] */;
  (%134, %135)
}

def @func_3931(%var_3854: Tensor[(4, 5, 1), float32], %var_3894: Tensor[(196), float64], %var_3903: Tensor[(252), int16]) -> (Tensor[(4, 5, 1), float64], Tensor[(432), float64], Tensor[(196), float64], Tensor[(108, 4), float64], Tensor[(10, 13, 16), bool], int16, Tensor[(520, 4), int16], Tensor[(648, 2), float64], Tensor[(252), int16], Tensor[(4, 5, ?), float64], Tensor[(9, 16, 3), bool]) {
  %136 = cast(%var_3854, dtype="float32") /* ty=Tensor[(4, 5, 1), float32] */;
  %137 = atan(%136) /* ty=Tensor[(4, 5, 1), float32] */;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(4, 5, 1), float32] */;
  %139 = log10(%138) /* ty=Tensor[(4, 5, 1), float32] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %141 = cast(%var_3894, dtype="float64") /* ty=Tensor[(196), float64] */;
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(108, 4), float64] */, dtype="float64") /* ty=Tensor[(108, 4), float64] */;
  %143 = reshape(%141, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float64] */;
  %144 = reshape(%142, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %145 = @func_741(%143, %144) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) */;
  %146 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %147 = cast(meta[relay.Constant][13] /* ty=Tensor[(520, 4), int16] */, dtype="int16") /* ty=Tensor[(520, 4), int16] */;
  %148 = cast(meta[relay.Constant][14] /* ty=Tensor[(648, 2), float64] */, dtype="float64") /* ty=Tensor[(648, 2), float64] */;
  %149 = cast(%var_3903, dtype="int16") /* ty=Tensor[(252), int16] */;
  %150 = %145.3;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(432), float64] */;
  %152 = cast(meta[relay.Constant][13] /* ty=Tensor[(520, 4), int16] */, dtype="int16") /* ty=Tensor[(520, 4), int16] */;
  %153 = cast(meta[relay.Constant][14] /* ty=Tensor[(648, 2), float64] */, dtype="float64") /* ty=Tensor[(648, 2), float64] */;
  %154 = reshape(%146, newshape=[]) /* ty=int16 */;
  %155 = reshape(%147, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int16] */;
  %156 = reshape(%148, newshape=[36, 36]) /* ty=Tensor[(36, 36), float64] */;
  %157 = reshape(%149, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %158 = reshape(%151, newshape=[1, 432]) /* ty=Tensor[(1, 432), float64] */;
  %159 = reshape(%152, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int16] */;
  %160 = reshape(%153, newshape=[36, 36]) /* ty=Tensor[(36, 36), float64] */;
  %161 = @func_1994(%154, %155, %156, %157, %158, %159, %160) /* ty=(Tensor[(10, 13, 16), bool], Tensor[(15, 3, 9), float32], Tensor[(550), float32], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(1, 432), float64], Tensor[(36, 36), float64], Tensor[(36, 36), int16], Tensor[(10, 13, 16), int64], Tensor[(36, 36), float64], Tensor[(36, 36), float64], Tensor[(9, 16, 3), float32], Tensor[(14, 2, 9), uint8]) */;
  %162 = cast(%var_3854, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %163 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%139, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %166 = cast(%150, dtype="float64") /* ty=Tensor[(432), float64] */;
  %167 = cast(%150, dtype="float64") /* ty=Tensor[(432), float64] */;
  %168 = reshape(%166, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %169 = reshape(%167, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %170 = @func_129(%168, %169) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %171 = erf(%140) /* ty=Tensor[(4, 5, 1), float64] */;
  %172 = %161.0;
  %173 = mod(%164, %165) /* ty=Tensor[(4, 5, ?), float64] */;
  %174 = %170.0;
  (%171, %150, %var_3894, meta[relay.Constant][11] /* ty=Tensor[(108, 4), float64] */, %172, meta[relay.Constant][12] /* ty=int16 */, meta[relay.Constant][13] /* ty=Tensor[(520, 4), int16] */, meta[relay.Constant][14] /* ty=Tensor[(648, 2), float64] */, %var_3903, %173, %174)
}

def @func_4761(%var_4758: Tensor[(15, 15, 9), float64]) -> Tensor[(15, 15, 9), float64] {
  %175 = cast(%var_4758, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
  atanh(%175) /* ty=Tensor[(15, 15, 9), float64] */
}

def @func_3099(%var_3060: bool, %var_3061: Tensor[(10, 4, 13), bool]) -> (Tensor[(10, 3, 6), float32], Tensor[(180), float64], Tensor[(10, 4, 13), float64]) {
  %176 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %177 = reshape(%176, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %178 = @func_513(%177) /* ty=(Tensor[(10, 3, 6), float32],) */;
  %179 = cast(%var_3060, dtype="bool") /* ty=bool */;
  %180 = cast(%var_3061, dtype="bool") /* ty=Tensor[(10, 4, 13), bool] */;
  %181 = logical_or(%179, %180) /* ty=Tensor[(10, 4, 13), bool] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(10, 4, 13), float32] */;
  %183 = atanh(%182) /* ty=Tensor[(10, 4, 13), float32] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(10, 4, 13), float64] */;
  %185 = %178.0;
  %186 = log10(%184) /* ty=Tensor[(10, 4, 13), float64] */;
  (%185, meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, %186)
}

def @func_5663(%var_5655: Tensor[(11, 6, 12), float32]) -> (Tensor[(11, 6, 12), float32],) {
  %187 = cast(%var_5655, dtype="float32") /* ty=Tensor[(11, 6, 12), float32] */;
  %188 = log(%187) /* ty=Tensor[(11, 6, 12), float32] */;
  (%188,)
}

def @func_7328(%var_7325: Tensor[(4, 3, 7), float32]) -> Tensor[(4, 3, 7), float32] {
  %189 = cast(%var_7325, dtype="float32") /* ty=Tensor[(4, 3, 7), float32] */;
  log10(%189) /* ty=Tensor[(4, 3, 7), float32] */
}

def @main(%var_8146: Tensor[(2, 12, 4), float32]) -> (Tensor[(2, 12, 4), float32],) {
  %190 = cast(%var_8146, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
  %191 = sqrt(%190) /* ty=Tensor[(2, 12, 4), float32] */;
  (%191,)
}

def @func_4735(%var_4730: Tensor[(5, 12, 3), int32], %var_4731: Tensor[(5, 12, 3), int32]) -> Tensor[(5, 12, 3), bool] {
  %192 = cast(%var_4731, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
  %193 = shape_of(%var_4730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_4730, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%194, %195) /* ty=Tensor[(5, 12, 3), bool] */
}

def @func_6175(%var_6084: Tensor[(1, 7, 3), float32], %var_6154: Tensor[(196), float64]) -> (Tensor[(?, 7, 3), float32], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 7, 3), float64], Tensor[(180), float64], Tensor[(196), float64], Tensor[(432), float64], Tensor[(?, 7, 3), bool]) {
  %196 = cast(%var_6084, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
  %197 = sigmoid(%196) /* ty=Tensor[(1, 7, 3), float32] */;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
  %199 = cosh(%198) /* ty=Tensor[(1, 7, 3), float32] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(1, 7, 3), float64] */;
  %201 = rsqrt(%200) /* ty=Tensor[(1, 7, 3), float64] */;
  %202 = cast(%199, dtype="uint8") /* ty=Tensor[(1, 7, 3), uint8] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="uint8") /* ty=Tensor[(1, 7, 3), uint8] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %206 = bitwise_or(%204, %205) /* ty=Tensor[(?, 7, 3), uint8] */;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(?, 7, 3), float32] */;
  %208 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%201, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %212 = reshape(%211, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %213 = cast(%201, dtype="float64") /* ty=Tensor[(1, 7, 3), float64] */;
  %214 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 7, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 3), float64] */;
  %215 = cast(%var_6154, dtype="float64") /* ty=Tensor[(196), float64] */;
  %216 = cast(meta[relay.Constant][18] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %217 = reshape(%215, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float64] */;
  %218 = reshape(%216, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %219 = @func_741(%217, %218) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) */;
  %220 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %221 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%199, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = minimum(%209, %210) /* ty=Tensor[(?, 7, 3), float32] */;
  %225 = @func_817(%212) /* ty=Tensor[(15, 3, 9), float32] */;
  %226 = floor_mod(%213, %214) /* ty=Tensor[(5, 7, 3), float64] */;
  %227 = %219.5;
  %228 = greater(%222, %223) /* ty=Tensor[(?, 7, 3), bool] */;
  (%224, %225, meta[relay.Constant][16] /* ty=Tensor[(405), float32] */, %226, %227, %var_6154, meta[relay.Constant][18] /* ty=Tensor[(432), float64] */, %228)
}

def @func_2753(%var_2643: Tensor[(10, 11, 6), int16], %var_2644: Tensor[(10, 11, 6), int16], %var_2691: Tensor[(1, 550), float32], %var_2692: Tensor[(1296), float64], %var_2706: Tensor[(440), float64], %var_2708: Tensor[(432), float64]) -> (Tensor[(4, 260), float32], Tensor[(1, 550), float32], Tensor[(1296), float64], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(440), float64], Tensor[(49, 4), float64], Tensor[(432), float64], Tensor[(10, 11, 6), float32], Tensor[(15, 3, 9), float32], Tensor[(1040), float32], Tensor[(14, 2, 9), uint8]) {
  %229 = cast(%var_2691, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
  %230 = cast(%var_2692, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %231 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %232 = cast(meta[relay.Constant][21] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %233 = reshape(%229, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %234 = reshape(%230, newshape=[1296]) /* ty=Tensor[(1296), float64] */;
  %235 = reshape(%231, newshape=[126, 2]) /* ty=Tensor[(126, 2), int16] */;
  %236 = reshape(%232, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %237 = @func_1026(%233, %234, %235, %236) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) */;
  %238 = cast(%var_2706, dtype="float64") /* ty=Tensor[(440), float64] */;
  %239 = cast(meta[relay.Constant][22] /* ty=Tensor[(49, 4), float64] */, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
  %240 = cast(%var_2708, dtype="float64") /* ty=Tensor[(432), float64] */;
  %241 = reshape(%238, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
  %242 = reshape(%239, newshape=[1, 196]) /* ty=Tensor[(1, 196), float64] */;
  %243 = reshape(%240, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %244 = @func_1610(%241, %242, %243) /* ty=(Tensor[(8, 5, 11), float64], Tensor[(9, 16, 3), bool], Tensor[(1, 196), float64], Tensor[(432), float64]) */;
  %245 = cast(%var_2644, dtype="float32") /* ty=Tensor[(10, 11, 6), float32] */;
  %246 = asin(%245) /* ty=Tensor[(10, 11, 6), float32] */;
  %247 = cast(%var_2644, dtype="int16") /* ty=Tensor[(10, 11, 6), int16] */;
  %248 = shape_of(%var_2643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_2643, dtype="int16") /* ty=Tensor[(10, 11, 6), int16] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %251 = bitwise_and(%249, %250) /* ty=Tensor[(10, 11, 6), int16] */;
  %252 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 11, 6), int16] */, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %256 = less_equal(%254, %255) /* ty=Tensor[(10, 11, 6), bool] */;
  %257 = cast(%256, dtype="uint64") /* ty=Tensor[(10, 11, 6), uint64] */;
  %258 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%246, dtype="uint64") /* ty=Tensor[(10, 11, 6), uint64] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %261 = bitwise_xor(%259, %260) /* ty=Tensor[(10, 11, 6), uint64] */;
  %262 = cast(%246, dtype="float32") /* ty=Tensor[(10, 11, 6), float32] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="float32") /* ty=Tensor[(10, 11, 6), float32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %266 = cast(meta[relay.Constant][21] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %267 = reshape(%266, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %268 = cast(%var_2692, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %269 = %237.2;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
  %271 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %272 = reshape(%268, newshape=[12, 9, 12]) /* ty=Tensor[(12, 9, 12), float64] */;
  %273 = reshape(%270, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %274 = reshape(%271, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %275 = @func_874(%272, %273, %274) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) */;
  %276 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %277 = reshape(%276, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
  %278 = %244.1;
  %279 = floor_divide(%264, %265) /* ty=Tensor[(10, 11, 6), float32] */;
  %280 = @func_817(%267) /* ty=Tensor[(15, 3, 9), float32] */;
  %281 = %275.2;
  %282 = @func_152(%277) /* ty=Tensor[(14, 2, 9), uint8] */;
  (%269, %var_2691, %var_2692, meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, meta[relay.Constant][21] /* ty=Tensor[(405), float32] */, %278, %var_2706, meta[relay.Constant][22] /* ty=Tensor[(49, 4), float64] */, %var_2708, %279, %280, %281, %282)
}

def @func_5300(%var_5295: uint64) -> Tensor[(13, 9, 10), uint64] {
  %283 = cast(%var_5295, dtype="uint64") /* ty=uint64 */;
  %284 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 9, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 9, 10), uint64] */;
  add(%283, %284) /* ty=Tensor[(13, 9, 10), uint64] */
}

def @func_129(%var_98: Tensor[(9, 16, 3), float64], %var_115: Tensor[(9, 16, 3), float64]) -> (Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) {
  %285 = cast(%var_98, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %286 = atanh(%285) /* ty=Tensor[(9, 16, 3), float64] */;
  %287 = cast(%var_115, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %291 = cast(%var_115, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %292 = cast(%286, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %293 = less(%289, %290) /* ty=Tensor[(9, 16, 3), bool] */;
  %294 = cosh(%291) /* ty=Tensor[(9, 16, 3), float32] */;
  %295 = asinh(%292) /* ty=Tensor[(9, 16, 3), float64] */;
  (%293, %294, %295)
}

def @func_5510(%var_5506: Tensor[(9, 11, 5), float32]) -> Tensor[(9, 11, 5), float32] {
  %296 = cast(%var_5506, dtype="float32") /* ty=Tensor[(9, 11, 5), float32] */;
  atanh(%296) /* ty=Tensor[(9, 11, 5), float32] */
}

def @func_1772(%var_1755: Tensor[(7, 9, 13), int16], %var_1756: Tensor[(7, 9, 13), int16]) -> (Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) {
  %297 = cast(%var_1756, dtype="int16") /* ty=Tensor[(7, 9, 13), int16] */;
  %298 = shape_of(%var_1755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%var_1755, dtype="int16") /* ty=Tensor[(7, 9, 13), int16] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %301 = cast(meta[relay.Constant][25] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %302 = cast(meta[relay.Constant][25] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %303 = reshape(%301, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %304 = reshape(%302, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %305 = @func_129(%303, %304) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %306 = subtract(%299, %300) /* ty=Tensor[(7, 9, 13), int16] */;
  %307 = %305.2;
  (%306, %307, meta[relay.Constant][25] /* ty=Tensor[(432), float64] */)
}

def @func_1291(%var_1280: float32, %var_1281: Tensor[(8, 16, 14), float32]) -> (Tensor[(8, 16, 14), float32],) {
  %308 = cast(%var_1280, dtype="float32") /* ty=float32 */;
  %309 = cast(%var_1281, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %310 = add(%308, %309) /* ty=Tensor[(8, 16, 14), float32] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %312 = atan(%311) /* ty=Tensor[(8, 16, 14), float32] */;
  (%312,)
}

def @func_3723(%var_3710: int16, %var_3711: Tensor[(1, 5, 12), int16]) -> (Tensor[(?, 5, 12), bool],) {
  %313 = cast(%var_3710, dtype="int16") /* ty=int16 */;
  %314 = cast(%var_3711, dtype="int16") /* ty=Tensor[(1, 5, 12), int16] */;
  %315 = bitwise_and(%313, %314) /* ty=Tensor[(1, 5, 12), int16] */;
  %316 = cast(%315, dtype="bool") /* ty=Tensor[(1, 5, 12), bool] */;
  %317 = shape_of(%var_3711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_3711, dtype="bool") /* ty=Tensor[(1, 5, 12), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = less_equal(%318, %319) /* ty=Tensor[(?, 5, 12), bool] */;
  (%320,)
}

def @func_5428(%var_5423: Tensor[(1, 9, 12), float64]) -> Tensor[(1, 9, 12), float64] {
  %321 = cast(%var_5423, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
  exp(%321) /* ty=Tensor[(1, 9, 12), float64] */
}

def @func_4810(%var_4802: Tensor[(16, 15, 10), int64], %var_4807: Tensor[(432, 1), float64]) -> (Tensor[(16, 15, 10), bool], Tensor[(9, 16, 3), bool], Tensor[(432, 1), float64]) {
  %322 = cast(%var_4802, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %323 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(16, 15, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 15, 10), int64] */, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = cast(%var_4807, dtype="float64") /* ty=Tensor[(432, 1), float64] */;
  %327 = cast(%var_4807, dtype="float64") /* ty=Tensor[(432, 1), float64] */;
  %328 = reshape(%326, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %329 = reshape(%327, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %330 = @func_129(%328, %329) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %331 = greater_equal(%324, %325) /* ty=Tensor[(16, 15, 10), bool] */;
  %332 = %330.0;
  (%331, %332, %var_4807)
}

def @func_8118(%var_8084: Tensor[(11, 13, 11), float32], %var_8108: Tensor[(11, 6), float32]) -> (Tensor[(?, 6, 11), uint16], Tensor[(11, 6), float32], Tensor[(11, 13, 11), float64]) {
  %333 = cast(%var_8108, dtype="float32") /* ty=Tensor[(11, 6), float32] */;
  %334 = reshape(%333, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
  %335 = @func_2596(%334) /* ty=(Tensor[(?, 6, 11), uint16], Tensor[(1, 6, 11), float64]) */;
  %336 = cast(%var_8084, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %337 = asinh(%336) /* ty=Tensor[(11, 13, 11), float32] */;
  %338 = cast(%var_8084, dtype="float64") /* ty=Tensor[(11, 13, 11), float64] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="float64") /* ty=Tensor[(11, 13, 11), float64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %342 = %335.0;
  %343 = floor_mod(%340, %341) /* ty=Tensor[(11, 13, 11), float64] */;
  (%342, %var_8108, %343)
}

def @func_3339(%var_3334: Tensor[(3, 4, 4), int32], %var_3335: Tensor[(3, 4, 4), int32]) -> Tensor[(3, 4, 4), bool] {
  %344 = cast(%var_3335, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %345 = shape_of(%var_3334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_3334, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%346, %347) /* ty=Tensor[(3, 4, 4), bool] */
}

def @func_889(%var_882: Tensor[(3, 8, 14), float32]) -> (Tensor[(3, 8, 14), float32],) {
  %348 = cast(%var_882, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %349 = cos(%348) /* ty=Tensor[(3, 8, 14), float32] */;
  (%349,)
}

def @func_1994(%var_1855: int16, %var_1856: Tensor[(10, 13, 16), int16], %var_1863: Tensor[(36, 36), float64], %var_1864: Tensor[(252), int16], %var_1882: Tensor[(1, 432), float64], %var_1951: Tensor[(10, 13, 16), int16], %var_1962: Tensor[(36, 36), float64]) -> (Tensor[(10, 13, 16), bool], Tensor[(15, 3, 9), float32], Tensor[(550), float32], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(1, 432), float64], Tensor[(36, 36), float64], Tensor[(36, 36), int16], Tensor[(10, 13, 16), int64], Tensor[(36, 36), float64], Tensor[(36, 36), float64], Tensor[(9, 16, 3), float32], Tensor[(14, 2, 9), uint8]) {
  %350 = cast(%var_1855, dtype="bool") /* ty=bool */;
  %351 = cast(%var_1856, dtype="bool") /* ty=Tensor[(10, 13, 16), bool] */;
  %352 = cast(meta[relay.Constant][27] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %353 = cast(%var_1863, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %354 = cast(%var_1864, dtype="int16") /* ty=Tensor[(252), int16] */;
  %355 = cast(meta[relay.Constant][28] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %356 = reshape(%352, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %357 = reshape(%353, newshape=[1296]) /* ty=Tensor[(1296), float64] */;
  %358 = reshape(%354, newshape=[126, 2]) /* ty=Tensor[(126, 2), int16] */;
  %359 = reshape(%355, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %360 = @func_1026(%356, %357, %358, %359) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) */;
  %361 = cast(%var_1882, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %362 = cast(%var_1882, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %363 = reshape(%361, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %364 = reshape(%362, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %365 = @func_129(%363, %364) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %366 = cast(%var_1863, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %367 = sin(%366) /* ty=Tensor[(36, 36), float64] */;
  %368 = cast(%367, dtype="float32") /* ty=Tensor[(36, 36), float32] */;
  %369 = rsqrt(%368) /* ty=Tensor[(36, 36), float32] */;
  %370 = cast(%369, dtype="int32") /* ty=Tensor[(36, 36), int32] */;
  %371 = shape_of(%367, dtype="int32") /* ty=Tensor[(2), int32] */;
  %372 = cast(%367, dtype="int32") /* ty=Tensor[(36, 36), int32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %374 = bitwise_xor(%372, %373) /* ty=Tensor[(36, 36), int32] */;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %376 = shape_of(%367, dtype="int32") /* ty=Tensor[(2), int32] */;
  %377 = cast(%367, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %379 = cast(%374, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %380 = acosh(%379) /* ty=Tensor[(36, 36), float64] */;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(36, 36), float32] */;
  %382 = log(%381) /* ty=Tensor[(36, 36), float32] */;
  %383 = cast(%369, dtype="int16") /* ty=Tensor[(36, 36), int16] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %385 = cast(%382, dtype="int16") /* ty=Tensor[(36, 36), int16] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %387 = cast(%var_1951, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
  %388 = shape_of(%var_1856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_1856, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %391 = cast(%var_1962, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %392 = shape_of(%380, dtype="int32") /* ty=Tensor[(2), int32] */;
  %393 = cast(%380, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %395 = cast(%382, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %396 = %365.0;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %398 = cast(%var_1882, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %399 = reshape(%397, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %400 = reshape(%398, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %401 = @func_129(%399, %400) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %402 = cast(%var_1864, dtype="int16") /* ty=Tensor[(252), int16] */;
  %403 = reshape(%402, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
  %404 = less_equal(%350, %351) /* ty=Tensor[(10, 13, 16), bool] */;
  %405 = %360.4;
  %406 = floor_mod(%377, %378) /* ty=Tensor[(36, 36), float64] */;
  %407 = maximum(%385, %386) /* ty=Tensor[(36, 36), int16] */;
  %408 = bitwise_or(%389, %390) /* ty=Tensor[(10, 13, 16), int64] */;
  %409 = floor_divide(%393, %394) /* ty=Tensor[(36, 36), float64] */;
  %410 = asin(%395) /* ty=Tensor[(36, 36), float64] */;
  %411 = %401.1;
  %412 = @func_152(%403) /* ty=Tensor[(14, 2, 9), uint8] */;
  (%404, %405, meta[relay.Constant][27] /* ty=Tensor[(550), float32] */, %var_1864, meta[relay.Constant][28] /* ty=Tensor[(405), float32] */, %396, %var_1882, %406, %407, %408, %409, %410, %411, %412)
}

def @func_5596(%var_5524: Tensor[(6, 14, 11), int8], %var_5541: Tensor[(600), float64], %var_5547: Tensor[(24, 2), int32], %var_5573: float32, %var_5585: Tensor[(336), float32]) -> (Tensor[(6, 14, 11), bool], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(6, 14, 11), float64], Tensor[(252), int16], Tensor[(600), float64], Tensor[(2025), float64], Tensor[(3, 4, 4), bool], Tensor[(24, 2), int32], Tensor[(8, 16, 14), float32], float32, Tensor[(4, 448), float64], Tensor[(336), float32], Tensor[(3, 8, 14), int16]) {
  %413 = cast(%var_5524, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %414 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 14, 11), int8] */, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = cast(meta[relay.Constant][30] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %418 = cast(meta[relay.Constant][30] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %419 = reshape(%417, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %420 = reshape(%418, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %421 = @func_129(%419, %420) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %422 = cast(%var_5524, dtype="float64") /* ty=Tensor[(6, 14, 11), float64] */;
  %423 = cast(%var_5541, dtype="float64") /* ty=Tensor[(600), float64] */;
  %424 = cast(meta[relay.Constant][31] /* ty=Tensor[(2025), float64] */, dtype="float64") /* ty=Tensor[(2025), float64] */;
  %425 = cast(%var_5541, dtype="float32") /* ty=Tensor[(600), float32] */;
  %426 = reshape(%423, newshape=[4, 10, 15]) /* ty=Tensor[(4, 10, 15), float64] */;
  %427 = reshape(%424, newshape=[2025]) /* ty=Tensor[(2025), float64] */;
  %428 = reshape(%425, newshape=[4, 10, 15]) /* ty=Tensor[(4, 10, 15), float32] */;
  %429 = @func_5018(%426, %427, %428) /* ty=(Tensor[(3, 4, 4), bool], Tensor[(48), int32], Tensor[(14, 2, 9), uint8], Tensor[(252), int16], Tensor[(15, 15, 9), float64], Tensor[(2025), float64], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool]) */;
  %430 = cast(%var_5547, dtype="int32") /* ty=Tensor[(24, 2), int32] */;
  %431 = cast(%var_5547, dtype="int32") /* ty=Tensor[(24, 2), int32] */;
  %432 = reshape(%430, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %433 = reshape(%431, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %434 = cast(%var_5573, dtype="float32") /* ty=float32 */;
  %435 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
  %436 = reshape(%434, newshape=[]) /* ty=float32 */;
  %437 = reshape(%435, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %438 = @func_1291(%436, %437) /* ty=(Tensor[(8, 16, 14), float32],) */;
  %439 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 448), float32] */, dtype="float64") /* ty=Tensor[(4, 448), float64] */;
  %440 = cast(%var_5585, dtype="float32") /* ty=Tensor[(336), float32] */;
  %441 = reshape(%440, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %442 = @func_889(%441) /* ty=(Tensor[(3, 8, 14), float32],) */;
  %443 = %442.0;
  %444 = cast(%var_5585, dtype="float32") /* ty=Tensor[(336), float32] */;
  %445 = reshape(%444, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
  %446 = @func_889(%445) /* ty=(Tensor[(3, 8, 14), float32],) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="int16") /* ty=Tensor[(3, 8, 14), int16] */;
  %449 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%443, dtype="int16") /* ty=Tensor[(3, 8, 14), int16] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %452 = not_equal(%415, %416) /* ty=Tensor[(6, 14, 11), bool] */;
  %453 = %421.0;
  %454 = cosh(%422) /* ty=Tensor[(6, 14, 11), float64] */;
  %455 = %429.3;
  %456 = @func_3339(%432, %433) /* ty=Tensor[(3, 4, 4), bool] */;
  %457 = %438.0;
  %458 = log10(%439) /* ty=Tensor[(4, 448), float64] */;
  %459 = minimum(%450, %451) /* ty=Tensor[(3, 8, 14), int16] */;
  (%452, %453, meta[relay.Constant][30] /* ty=Tensor[(432), float64] */, %454, %455, %var_5541, meta[relay.Constant][31] /* ty=Tensor[(2025), float64] */, %456, %var_5547, %457, %var_5573, %458, %var_5585, %459)
}

def @func_1610(%var_1585: Tensor[(8, 5, 11), float64], %var_1606: Tensor[(1, 196), float64], %var_1607: Tensor[(432), float64]) -> (Tensor[(8, 5, 11), float64], Tensor[(9, 16, 3), bool], Tensor[(1, 196), float64], Tensor[(432), float64]) {
  %460 = cast(%var_1585, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %461 = log10(%460) /* ty=Tensor[(8, 5, 11), float64] */;
  %462 = cast(%var_1585, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %466 = cast(%var_1606, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
  %467 = cast(%var_1607, dtype="float64") /* ty=Tensor[(432), float64] */;
  %468 = reshape(%466, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float64] */;
  %469 = reshape(%467, newshape=[432]) /* ty=Tensor[(432), float64] */;
  %470 = @func_741(%468, %469) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) */;
  %471 = maximum(%464, %465) /* ty=Tensor[(8, 5, 11), float64] */;
  %472 = %470.2;
  (%471, %472, %var_1606, %var_1607)
}

def @func_817(%var_788: Tensor[(15, 3, 9), float32]) -> Tensor[(15, 3, 9), float32] {
  %473 = cast(%var_788, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
  exp(%473) /* ty=Tensor[(15, 3, 9), float32] */
}

def @func_1026(%var_1002: Tensor[(5, 10, 11), float32], %var_1006: Tensor[(1296), float64], %var_1008: Tensor[(126, 2), int16], %var_1018: Tensor[(405), float32]) -> (Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) {
  %474 = cast(%var_1006, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %475 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 260), float32] */, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
  %476 = cast(%var_1008, dtype="int16") /* ty=Tensor[(126, 2), int16] */;
  %477 = reshape(%474, newshape=[12, 9, 12]) /* ty=Tensor[(12, 9, 12), float64] */;
  %478 = reshape(%475, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %479 = reshape(%476, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %480 = @func_874(%477, %478, %479) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) */;
  %481 = cast(%var_1018, dtype="float32") /* ty=Tensor[(405), float32] */;
  %482 = reshape(%481, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %483 = cast(%var_1002, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
  %484 = sinh(%483) /* ty=Tensor[(5, 10, 11), float32] */;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
  %486 = %480.0;
  %487 = @func_817(%482) /* ty=Tensor[(15, 3, 9), float32] */;
  %488 = log2(%485) /* ty=Tensor[(5, 10, 11), float32] */;
  (%486, %var_1006, meta[relay.Constant][33] /* ty=Tensor[(4, 260), float32] */, %var_1008, %487, %var_1018, %488)
}

def @func_741(%var_689: Tensor[(2, 14, 7), float64], %var_735: Tensor[(432), float64]) -> (Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) {
  %489 = cast(%var_689, dtype="float64") /* ty=Tensor[(2, 14, 7), float64] */;
  %490 = cosh(%489) /* ty=Tensor[(2, 14, 7), float64] */;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %492 = cos(%491) /* ty=Tensor[(2, 14, 7), float32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = cast(%490, dtype="float64") /* ty=Tensor[(2, 14, 7), float64] */;
  %498 = cast(%var_735, dtype="float64") /* ty=Tensor[(432), float64] */;
  %499 = cast(%var_735, dtype="float64") /* ty=Tensor[(432), float64] */;
  %500 = reshape(%498, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %501 = reshape(%499, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %502 = @func_129(%500, %501) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %503 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %504 = reshape(%503, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %505 = @func_513(%504) /* ty=(Tensor[(10, 3, 6), float32],) */;
  %506 = less(%495, %496) /* ty=Tensor[(2, 14, 7), bool] */;
  %507 = rsqrt(%497) /* ty=Tensor[(2, 14, 7), float64] */;
  %508 = %502.0;
  %509 = %505.0;
  (%506, %507, %508, %var_735, %509, meta[relay.Constant][34] /* ty=Tensor[(180), float64] */)
}

def @func_5018(%var_4893: Tensor[(4, 10, 15), float64], %var_4919: Tensor[(2025), float64], %var_4998: Tensor[(4, 10, 15), float32]) -> (Tensor[(3, 4, 4), bool], Tensor[(48), int32], Tensor[(14, 2, 9), uint8], Tensor[(252), int16], Tensor[(15, 15, 9), float64], Tensor[(2025), float64], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool]) {
  %510 = cast(meta[relay.Constant][35] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %511 = cast(meta[relay.Constant][35] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
  %512 = reshape(%510, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %513 = reshape(%511, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %514 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %515 = reshape(%514, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
  %516 = cast(%var_4919, dtype="float64") /* ty=Tensor[(2025), float64] */;
  %517 = reshape(%516, newshape=[15, 15, 9]) /* ty=Tensor[(15, 15, 9), float64] */;
  %518 = cast(%var_4893, dtype="float64") /* ty=Tensor[(4, 10, 15), float64] */;
  %519 = acosh(%518) /* ty=Tensor[(4, 10, 15), float64] */;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
  %521 = cos(%520) /* ty=Tensor[(4, 10, 15), float32] */;
  %522 = cast(%519, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = cast(%var_4893, dtype="float64") /* ty=Tensor[(4, 10, 15), float64] */;
  %527 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%519, dtype="float64") /* ty=Tensor[(4, 10, 15), float64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %530 = divide(%528, %529) /* ty=Tensor[(4, 10, 15), float64] */;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
  %532 = erf(%531) /* ty=Tensor[(4, 10, 15), float32] */;
  %533 = cast(%532, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %534 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%530, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = cast(%521, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %538 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%519, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = greater(%539, %540) /* ty=Tensor[(4, 10, 15), bool] */;
  %542 = cast(%541, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %543 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%519, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = cast(%541, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
  %547 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%519, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %550 = mod(%548, %549) /* ty=Tensor[(4, 10, 15), float32] */;
  %551 = cast(%var_4998, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = @func_3339(%512, %513) /* ty=Tensor[(3, 4, 4), bool] */;
  %556 = @func_152(%515) /* ty=Tensor[(14, 2, 9), uint8] */;
  %557 = @func_4761(%517) /* ty=Tensor[(15, 15, 9), float64] */;
  %558 = equal(%524, %525) /* ty=Tensor[(4, 10, 15), bool] */;
  %559 = logical_and(%535, %536) /* ty=Tensor[(4, 10, 15), bool] */;
  %560 = logical_or(%544, %545) /* ty=Tensor[(4, 10, 15), bool] */;
  %561 = not_equal(%553, %554) /* ty=Tensor[(4, 10, 15), bool] */;
  (%555, meta[relay.Constant][35] /* ty=Tensor[(48), int32] */, %556, meta[relay.Constant][36] /* ty=Tensor[(252), int16] */, %557, %var_4919, %558, %559, %560, %561)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5302(%var_5301: uint64) -> Tensor[(13, 9, 10), uint64] {
  %2 = fn (%var_5295: uint64) -> Tensor[(13, 9, 10), uint64] {
    %0 = cast(%var_5295, dtype="uint64") /* ty=uint64 */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 9, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 9, 10), uint64] */;
    add(%0, %1) /* ty=Tensor[(13, 9, 10), uint64] */
  };
  %2(%var_5301) /* ty=Tensor[(13, 9, 10), uint64] */
}

def @func_5276(%var_5275: Tensor[(9, 16, 7), float32]) -> (Tensor[(9, 16, 7), float32], Tensor[(7, 9, 13), int16], Tensor[(7, 117), int16]) {
  %9 = fn (%var_5256: Tensor[(9, 16, 7), float32]) -> (Tensor[(9, 16, 7), float32], Tensor[(7, 9, 13), int16], Tensor[(7, 117), int16]) {
    %3 = cast(%var_5256, dtype="float32") /* ty=Tensor[(9, 16, 7), float32] */;
    %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 117), int16] */, dtype="int16") /* ty=Tensor[(7, 117), int16] */;
    %5 = reshape(%4, newshape=[819]) /* ty=Tensor[(819), int16] */;
    %6 = @func_2529(%5) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) */;
    %7 = acos(%3) /* ty=Tensor[(9, 16, 7), float32] */;
    %8 = %6.2;
    (%7, %8, meta[relay.Constant][1] /* ty=Tensor[(7, 117), int16] */)
  };
  %9(%var_5275) /* ty=(Tensor[(9, 16, 7), float32], Tensor[(7, 9, 13), int16], Tensor[(7, 117), int16]) */
}

def @func_6685(%var_6678: Tensor[(14, 4, 4), float32]) -> (Tensor[(14, 4, 4), float32],) {
  %10 = cast(%var_6678, dtype="float32") /* ty=Tensor[(14, 4, 4), float32] */;
  %11 = exp(%10) /* ty=Tensor[(14, 4, 4), float32] */;
  (%11,)
}

def @func_3339(%var_3334: Tensor[(3, 4, 4), int32], %var_3335: Tensor[(3, 4, 4), int32]) -> Tensor[(3, 4, 4), bool] {
  %12 = cast(%var_3335, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %13 = shape_of(%var_3334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_3334, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%14, %15) /* ty=Tensor[(3, 4, 4), bool] */
}

def @func_1291(%var_1280: float32, %var_1281: Tensor[(8, 16, 14), float32]) -> (Tensor[(8, 16, 14), float32],) {
  %16 = cast(%var_1280, dtype="float32") /* ty=float32 */;
  %17 = cast(%var_1281, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %18 = add(%16, %17) /* ty=Tensor[(8, 16, 14), float32] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %20 = atan(%19) /* ty=Tensor[(8, 16, 14), float32] */;
  (%20,)
}

def @func_3580(%var_3545: Tensor[(7, 13, 8), uint16], %var_3546: Tensor[(7, 13, 8), uint16]) -> (Tensor[(7, 13, 8), uint16], Tensor[(7, 13, 8), float64]) {
  %21 = cast(%var_3546, dtype="uint16") /* ty=Tensor[(7, 13, 8), uint16] */;
  %22 = shape_of(%var_3545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_3545, dtype="uint16") /* ty=Tensor[(7, 13, 8), uint16] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %25 = cast(%var_3545, dtype="float64") /* ty=Tensor[(7, 13, 8), float64] */;
  %26 = multiply(%23, %24) /* ty=Tensor[(7, 13, 8), uint16] */;
  %27 = atan(%25) /* ty=Tensor[(7, 13, 8), float64] */;
  (%26, %27)
}

def @func_1295(%var_1293: float32, %var_1294: Tensor[(8, 16, 14), float32]) -> (Tensor[(8, 16, 14), float32],) {
  @func_1291(%var_1293, %var_1294) /* ty=(Tensor[(8, 16, 14), float32],) */
}

def @func_252(%var_250: Tensor[(5, 16, 13), float32], %var_251: Tensor[(126, 2), int16]) -> (Tensor[(5, 16, 13), float32], Tensor[(14, 2, 9), uint8], Tensor[(126, 2), int16]) {
  %33 = fn (%var_238: Tensor[(5, 16, 13), float32], %var_242: Tensor[(126, 2), int16]) -> (Tensor[(5, 16, 13), float32], Tensor[(14, 2, 9), uint8], Tensor[(126, 2), int16]) {
    %28 = cast(%var_238, dtype="float32") /* ty=Tensor[(5, 16, 13), float32] */;
    %29 = cast(%var_242, dtype="int16") /* ty=Tensor[(126, 2), int16] */;
    %30 = reshape(%29, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
    %31 = acos(%28) /* ty=Tensor[(5, 16, 13), float32] */;
    %32 = @func_152(%30) /* ty=Tensor[(14, 2, 9), uint8] */;
    (%31, %32, %var_242)
  };
  %33(%var_250, %var_251) /* ty=(Tensor[(5, 16, 13), float32], Tensor[(14, 2, 9), uint8], Tensor[(126, 2), int16]) */
}

def @func_2531(%var_2530: Tensor[(819), int16]) -> (Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) {
  %44 = fn (%var_2522: Tensor[(819), int16]) -> (Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) {
    %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
    %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
    %36 = cast(%var_2522, dtype="int16") /* ty=Tensor[(819), int16] */;
    %37 = cast(%var_2522, dtype="int16") /* ty=Tensor[(819), int16] */;
    %38 = reshape(%36, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
    %39 = reshape(%37, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
    %40 = @func_1772(%38, %39) /* ty=(Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) */;
    %41 = acosh(%34) /* ty=Tensor[(6, 16, 6), float64] */;
    %42 = exp(%35) /* ty=Tensor[(6, 16, 6), float64] */;
    %43 = %40.0;
    (%41, %42, %43, %var_2522)
  };
  %44(%var_2530) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) */
}

def @func_3727(%var_3725: int16, %var_3726: Tensor[(1, 5, 12), int16]) -> (Tensor[(?, 5, 12), bool],) {
  @func_3723(%var_3725, %var_3726) /* ty=(Tensor[(?, 5, 12), bool],) */
}

def @func_129(%var_98: Tensor[(9, 16, 3), float64], %var_115: Tensor[(9, 16, 3), float64]) -> (Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) {
  %45 = cast(%var_98, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %46 = atanh(%45) /* ty=Tensor[(9, 16, 3), float64] */;
  %47 = cast(%var_115, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = cast(%var_115, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %52 = cast(%46, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %53 = less(%49, %50) /* ty=Tensor[(9, 16, 3), bool] */;
  %54 = cosh(%51) /* ty=Tensor[(9, 16, 3), float32] */;
  %55 = asinh(%52) /* ty=Tensor[(9, 16, 3), float64] */;
  (%53, %54, %55)
}

def @func_878(%var_875: Tensor[(12, 9, 12), float64], %var_876: Tensor[(1040), float32], %var_877: Tensor[(252), int16]) -> (Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) {
  %67 = fn (%var_858: Tensor[(12, 9, 12), float64], %var_869: Tensor[(1040), float32], %var_870: Tensor[(252), int16]) -> (Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) {
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 12), float64] */;
    %57 = shape_of(%var_858, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(%var_858, dtype="float64") /* ty=Tensor[(12, 9, 12), float64] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %60 = cast(%var_869, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %61 = cast(%var_870, dtype="int16") /* ty=Tensor[(252), int16] */;
    %62 = reshape(%60, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), float32] */;
    %63 = reshape(%61, newshape=[126, 2]) /* ty=Tensor[(126, 2), int16] */;
    %64 = @func_249(%62, %63) /* ty=(Tensor[(5, 16, 13), float32], Tensor[(14, 2, 9), uint8], Tensor[(126, 2), int16]) */;
    %65 = mod(%58, %59) /* ty=Tensor[(12, 9, 12), float64] */;
    %66 = %64.2;
    (%65, %66, %var_869, %var_870)
  };
  %67(%var_875, %var_876, %var_877) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) */
}

def @func_1994(%var_1855: int16, %var_1856: Tensor[(10, 13, 16), int16], %var_1863: Tensor[(36, 36), float64], %var_1864: Tensor[(252), int16], %var_1882: Tensor[(1, 432), float64], %var_1951: Tensor[(10, 13, 16), int16], %var_1962: Tensor[(36, 36), float64]) -> (Tensor[(10, 13, 16), bool], Tensor[(15, 3, 9), float32], Tensor[(550), float32], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(1, 432), float64], Tensor[(36, 36), float64], Tensor[(36, 36), int16], Tensor[(10, 13, 16), int64], Tensor[(36, 36), float64], Tensor[(36, 36), float64], Tensor[(9, 16, 3), float32], Tensor[(14, 2, 9), uint8]) {
  %68 = cast(%var_1855, dtype="bool") /* ty=bool */;
  %69 = cast(%var_1856, dtype="bool") /* ty=Tensor[(10, 13, 16), bool] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(550), float32] */, dtype="float32") /* ty=Tensor[(550), float32] */;
  %71 = cast(%var_1863, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %72 = cast(%var_1864, dtype="int16") /* ty=Tensor[(252), int16] */;
  %73 = cast(meta[relay.Constant][5] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %74 = reshape(%70, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
  %75 = reshape(%71, newshape=[1296]) /* ty=Tensor[(1296), float64] */;
  %76 = reshape(%72, newshape=[126, 2]) /* ty=Tensor[(126, 2), int16] */;
  %77 = reshape(%73, newshape=[405]) /* ty=Tensor[(405), float32] */;
  %78 = @func_1026(%74, %75, %76, %77) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) */;
  %79 = cast(%var_1882, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %80 = cast(%var_1882, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %81 = reshape(%79, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %82 = reshape(%80, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %83 = @func_129(%81, %82) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %84 = cast(%var_1863, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %85 = sin(%84) /* ty=Tensor[(36, 36), float64] */;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(36, 36), float32] */;
  %87 = rsqrt(%86) /* ty=Tensor[(36, 36), float32] */;
  %88 = cast(%87, dtype="int32") /* ty=Tensor[(36, 36), int32] */;
  %89 = shape_of(%85, dtype="int32") /* ty=Tensor[(2), int32] */;
  %90 = cast(%85, dtype="int32") /* ty=Tensor[(36, 36), int32] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %92 = bitwise_xor(%90, %91) /* ty=Tensor[(36, 36), int32] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %94 = shape_of(%85, dtype="int32") /* ty=Tensor[(2), int32] */;
  %95 = cast(%85, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %97 = cast(%92, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %98 = acosh(%97) /* ty=Tensor[(36, 36), float64] */;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(36, 36), float32] */;
  %100 = log(%99) /* ty=Tensor[(36, 36), float32] */;
  %101 = cast(%87, dtype="int16") /* ty=Tensor[(36, 36), int16] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(2), int32] */;
  %103 = cast(%100, dtype="int16") /* ty=Tensor[(36, 36), int16] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %105 = cast(%var_1951, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
  %106 = shape_of(%var_1856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_1856, dtype="int64") /* ty=Tensor[(10, 13, 16), int64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %109 = cast(%var_1962, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %110 = shape_of(%98, dtype="int32") /* ty=Tensor[(2), int32] */;
  %111 = cast(%98, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %113 = cast(%100, dtype="float64") /* ty=Tensor[(36, 36), float64] */;
  %114 = %83.0;
  %115 = cast(%114, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %116 = cast(%var_1882, dtype="float64") /* ty=Tensor[(1, 432), float64] */;
  %117 = reshape(%115, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %118 = reshape(%116, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %119 = @func_129(%117, %118) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %120 = cast(%var_1864, dtype="int16") /* ty=Tensor[(252), int16] */;
  %121 = reshape(%120, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
  %122 = less_equal(%68, %69) /* ty=Tensor[(10, 13, 16), bool] */;
  %123 = %78.4;
  %124 = floor_mod(%95, %96) /* ty=Tensor[(36, 36), float64] */;
  %125 = maximum(%103, %104) /* ty=Tensor[(36, 36), int16] */;
  %126 = bitwise_or(%107, %108) /* ty=Tensor[(10, 13, 16), int64] */;
  %127 = floor_divide(%111, %112) /* ty=Tensor[(36, 36), float64] */;
  %128 = asin(%113) /* ty=Tensor[(36, 36), float64] */;
  %129 = %119.1;
  %130 = @func_152(%121) /* ty=Tensor[(14, 2, 9), uint8] */;
  (%122, %123, meta[relay.Constant][4] /* ty=Tensor[(550), float32] */, %var_1864, meta[relay.Constant][5] /* ty=Tensor[(405), float32] */, %114, %var_1882, %124, %125, %126, %127, %128, %129, %130)
}

def @func_3099(%var_3060: bool, %var_3061: Tensor[(10, 4, 13), bool]) -> (Tensor[(10, 3, 6), float32], Tensor[(180), float64], Tensor[(10, 4, 13), float64]) {
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %132 = reshape(%131, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %133 = @func_513(%132) /* ty=(Tensor[(10, 3, 6), float32],) */;
  %134 = cast(%var_3060, dtype="bool") /* ty=bool */;
  %135 = cast(%var_3061, dtype="bool") /* ty=Tensor[(10, 4, 13), bool] */;
  %136 = logical_or(%134, %135) /* ty=Tensor[(10, 4, 13), bool] */;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(10, 4, 13), float32] */;
  %138 = atanh(%137) /* ty=Tensor[(10, 4, 13), float32] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(10, 4, 13), float64] */;
  %140 = %133.0;
  %141 = log10(%139) /* ty=Tensor[(10, 4, 13), float64] */;
  (%140, meta[relay.Constant][6] /* ty=Tensor[(180), float64] */, %141)
}

def @func_819(%var_818: Tensor[(15, 3, 9), float32]) -> Tensor[(15, 3, 9), float32] {
  %143 = fn (%var_788: Tensor[(15, 3, 9), float32]) -> Tensor[(15, 3, 9), float32] {
    %142 = cast(%var_788, dtype="float32") /* ty=Tensor[(15, 3, 9), float32] */;
    exp(%142) /* ty=Tensor[(15, 3, 9), float32] */
  };
  %143(%var_818) /* ty=Tensor[(15, 3, 9), float32] */
}

def @func_2003(%var_1996: int16, %var_1997: Tensor[(10, 13, 16), int16], %var_1998: Tensor[(36, 36), float64], %var_1999: Tensor[(252), int16], %var_2000: Tensor[(1, 432), float64], %var_2001: Tensor[(10, 13, 16), int16], %var_2002: Tensor[(36, 36), float64]) -> (Tensor[(10, 13, 16), bool], Tensor[(15, 3, 9), float32], Tensor[(550), float32], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(1, 432), float64], Tensor[(36, 36), float64], Tensor[(36, 36), int16], Tensor[(10, 13, 16), int64], Tensor[(36, 36), float64], Tensor[(36, 36), float64], Tensor[(9, 16, 3), float32], Tensor[(14, 2, 9), uint8]) {
  @func_1994(%var_1996, %var_1997, %var_1998, %var_1999, %var_2000, %var_2001, %var_2002) /* ty=(Tensor[(10, 13, 16), bool], Tensor[(15, 3, 9), float32], Tensor[(550), float32], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(1, 432), float64], Tensor[(36, 36), float64], Tensor[(36, 36), int16], Tensor[(10, 13, 16), int64], Tensor[(36, 36), float64], Tensor[(36, 36), float64], Tensor[(9, 16, 3), float32], Tensor[(14, 2, 9), uint8]) */
}

def @func_3723(%var_3710: int16, %var_3711: Tensor[(1, 5, 12), int16]) -> (Tensor[(?, 5, 12), bool],) {
  %144 = cast(%var_3710, dtype="int16") /* ty=int16 */;
  %145 = cast(%var_3711, dtype="int16") /* ty=Tensor[(1, 5, 12), int16] */;
  %146 = bitwise_and(%144, %145) /* ty=Tensor[(1, 5, 12), int16] */;
  %147 = cast(%146, dtype="bool") /* ty=Tensor[(1, 5, 12), bool] */;
  %148 = shape_of(%var_3711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_3711, dtype="bool") /* ty=Tensor[(1, 5, 12), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = less_equal(%149, %150) /* ty=Tensor[(?, 5, 12), bool] */;
  (%151,)
}

def @func_741(%var_689: Tensor[(2, 14, 7), float64], %var_735: Tensor[(432), float64]) -> (Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) {
  %152 = cast(%var_689, dtype="float64") /* ty=Tensor[(2, 14, 7), float64] */;
  %153 = cosh(%152) /* ty=Tensor[(2, 14, 7), float64] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %155 = cos(%154) /* ty=Tensor[(2, 14, 7), float32] */;
  %156 = cast(%153, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="bool") /* ty=Tensor[(2, 14, 7), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = cast(%153, dtype="float64") /* ty=Tensor[(2, 14, 7), float64] */;
  %161 = cast(%var_735, dtype="float64") /* ty=Tensor[(432), float64] */;
  %162 = cast(%var_735, dtype="float64") /* ty=Tensor[(432), float64] */;
  %163 = reshape(%161, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %164 = reshape(%162, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %165 = @func_129(%163, %164) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %167 = reshape(%166, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %168 = @func_513(%167) /* ty=(Tensor[(10, 3, 6), float32],) */;
  %169 = less(%158, %159) /* ty=Tensor[(2, 14, 7), bool] */;
  %170 = rsqrt(%160) /* ty=Tensor[(2, 14, 7), float64] */;
  %171 = %165.0;
  %172 = %168.0;
  (%169, %170, %171, %var_735, %172, meta[relay.Constant][7] /* ty=Tensor[(180), float64] */)
}

def @func_6178(%var_6176: Tensor[(1, 7, 3), float32], %var_6177: Tensor[(196), float64]) -> (Tensor[(?, 7, 3), float32], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 7, 3), float64], Tensor[(180), float64], Tensor[(196), float64], Tensor[(432), float64], Tensor[(?, 7, 3), bool]) {
  %206 = fn (%var_6084: Tensor[(1, 7, 3), float32], %var_6154: Tensor[(196), float64]) -> (Tensor[(?, 7, 3), float32], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 7, 3), float64], Tensor[(180), float64], Tensor[(196), float64], Tensor[(432), float64], Tensor[(?, 7, 3), bool]) {
    %173 = cast(%var_6084, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
    %174 = sigmoid(%173) /* ty=Tensor[(1, 7, 3), float32] */;
    %175 = cast(%174, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
    %176 = cosh(%175) /* ty=Tensor[(1, 7, 3), float32] */;
    %177 = cast(%176, dtype="float64") /* ty=Tensor[(1, 7, 3), float64] */;
    %178 = rsqrt(%177) /* ty=Tensor[(1, 7, 3), float64] */;
    %179 = cast(%176, dtype="uint8") /* ty=Tensor[(1, 7, 3), uint8] */;
    %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(%178, dtype="uint8") /* ty=Tensor[(1, 7, 3), uint8] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %183 = bitwise_or(%181, %182) /* ty=Tensor[(?, 7, 3), uint8] */;
    %184 = cast(%183, dtype="float32") /* ty=Tensor[(?, 7, 3), float32] */;
    %185 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %186 = cast(%178, dtype="float32") /* ty=Tensor[(1, 7, 3), float32] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %188 = cast(meta[relay.Constant][8] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %189 = reshape(%188, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %190 = cast(%178, dtype="float64") /* ty=Tensor[(1, 7, 3), float64] */;
    %191 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 7, 3), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 3), float64] */;
    %192 = cast(%var_6154, dtype="float64") /* ty=Tensor[(196), float64] */;
    %193 = cast(meta[relay.Constant][10] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %194 = reshape(%192, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float64] */;
    %195 = reshape(%193, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %196 = @func_741(%194, %195) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) */;
    %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 7, 3), float32] */, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
    %198 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%176, dtype="bool") /* ty=Tensor[(1, 7, 3), bool] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %201 = minimum(%186, %187) /* ty=Tensor[(?, 7, 3), float32] */;
    %202 = @func_817(%189) /* ty=Tensor[(15, 3, 9), float32] */;
    %203 = floor_mod(%190, %191) /* ty=Tensor[(5, 7, 3), float64] */;
    %204 = %196.5;
    %205 = greater(%199, %200) /* ty=Tensor[(?, 7, 3), bool] */;
    (%201, %202, meta[relay.Constant][8] /* ty=Tensor[(405), float32] */, %203, %204, %var_6154, meta[relay.Constant][10] /* ty=Tensor[(432), float64] */, %205)
  };
  %206(%var_6176, %var_6177) /* ty=(Tensor[(?, 7, 3), float32], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 7, 3), float64], Tensor[(180), float64], Tensor[(196), float64], Tensor[(432), float64], Tensor[(?, 7, 3), bool]) */
}

def @func_5666(%var_5664: Tensor[(11, 6, 12), float32]) -> (Tensor[(11, 6, 12), float32],) {
  @func_5663(%var_5664) /* ty=(Tensor[(11, 6, 12), float32],) */
}

def @func_5430(%var_5429: Tensor[(1, 9, 12), float64]) -> Tensor[(1, 9, 12), float64] {
  %208 = fn (%var_5423: Tensor[(1, 9, 12), float64]) -> Tensor[(1, 9, 12), float64] {
    %207 = cast(%var_5423, dtype="float64") /* ty=Tensor[(1, 9, 12), float64] */;
    exp(%207) /* ty=Tensor[(1, 9, 12), float64] */
  };
  %208(%var_5429) /* ty=Tensor[(1, 9, 12), float64] */
}

def @func_133(%var_131: Tensor[(9, 16, 3), float64], %var_132: Tensor[(9, 16, 3), float64]) -> (Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) {
  @func_129(%var_131, %var_132) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */
}

def @func_7809(%var_7807: Tensor[(15, 11, 4), float32], %var_7808: Tensor[(432), float64]) -> (Tensor[(15, 11, 4), float32], Tensor[(432, 1), float64], Tensor[(2400, 1), int64], Tensor[(432), float64], Tensor[(8, 16, 14), float32], float32, Tensor[(1792), float32], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) {
  @func_7805(%var_7807, %var_7808) /* ty=(Tensor[(15, 11, 4), float32], Tensor[(432, 1), float64], Tensor[(2400, 1), int64], Tensor[(432), float64], Tensor[(8, 16, 14), float32], float32, Tensor[(1792), float32], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) */
}

def @func_5602(%var_5597: Tensor[(6, 14, 11), int8], %var_5598: Tensor[(600), float64], %var_5599: Tensor[(24, 2), int32], %var_5600: float32, %var_5601: Tensor[(336), float32]) -> (Tensor[(6, 14, 11), bool], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(6, 14, 11), float64], Tensor[(252), int16], Tensor[(600), float64], Tensor[(2025), float64], Tensor[(3, 4, 4), bool], Tensor[(24, 2), int32], Tensor[(8, 16, 14), float32], float32, Tensor[(4, 448), float64], Tensor[(336), float32], Tensor[(3, 8, 14), int16]) {
  %256 = fn (%var_5524: Tensor[(6, 14, 11), int8], %var_5541: Tensor[(600), float64], %var_5547: Tensor[(24, 2), int32], %var_5573: float32, %var_5585: Tensor[(336), float32]) -> (Tensor[(6, 14, 11), bool], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(6, 14, 11), float64], Tensor[(252), int16], Tensor[(600), float64], Tensor[(2025), float64], Tensor[(3, 4, 4), bool], Tensor[(24, 2), int32], Tensor[(8, 16, 14), float32], float32, Tensor[(4, 448), float64], Tensor[(336), float32], Tensor[(3, 8, 14), int16]) {
    %209 = cast(%var_5524, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
    %210 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 14, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %211 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 14, 11), int8] */, dtype="bool") /* ty=Tensor[(6, 14, 11), bool] */;
    %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %213 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
    %215 = reshape(%213, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
    %216 = reshape(%214, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
    %217 = @func_129(%215, %216) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
    %218 = cast(%var_5524, dtype="float64") /* ty=Tensor[(6, 14, 11), float64] */;
    %219 = cast(%var_5541, dtype="float64") /* ty=Tensor[(600), float64] */;
    %220 = cast(meta[relay.Constant][14] /* ty=Tensor[(2025), float64] */, dtype="float64") /* ty=Tensor[(2025), float64] */;
    %221 = cast(%var_5541, dtype="float32") /* ty=Tensor[(600), float32] */;
    %222 = reshape(%219, newshape=[4, 10, 15]) /* ty=Tensor[(4, 10, 15), float64] */;
    %223 = reshape(%220, newshape=[2025]) /* ty=Tensor[(2025), float64] */;
    %224 = reshape(%221, newshape=[4, 10, 15]) /* ty=Tensor[(4, 10, 15), float32] */;
    %225 = @func_5018(%222, %223, %224) /* ty=(Tensor[(3, 4, 4), bool], Tensor[(48), int32], Tensor[(14, 2, 9), uint8], Tensor[(252), int16], Tensor[(15, 15, 9), float64], Tensor[(2025), float64], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool]) */;
    %226 = cast(%var_5547, dtype="int32") /* ty=Tensor[(24, 2), int32] */;
    %227 = cast(%var_5547, dtype="int32") /* ty=Tensor[(24, 2), int32] */;
    %228 = reshape(%226, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
    %229 = reshape(%227, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
    %230 = cast(%var_5573, dtype="float32") /* ty=float32 */;
    %231 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
    %232 = reshape(%230, newshape=[]) /* ty=float32 */;
    %233 = reshape(%231, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
    %234 = @func_1291(%232, %233) /* ty=(Tensor[(8, 16, 14), float32],) */;
    %235 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 448), float32] */, dtype="float64") /* ty=Tensor[(4, 448), float64] */;
    %236 = cast(%var_5585, dtype="float32") /* ty=Tensor[(336), float32] */;
    %237 = reshape(%236, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
    %238 = @func_889(%237) /* ty=(Tensor[(3, 8, 14), float32],) */;
    %239 = %238.0;
    %240 = cast(%var_5585, dtype="float32") /* ty=Tensor[(336), float32] */;
    %241 = reshape(%240, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), float32] */;
    %242 = @func_889(%241) /* ty=(Tensor[(3, 8, 14), float32],) */;
    %243 = %242.0;
    %244 = cast(%243, dtype="int16") /* ty=Tensor[(3, 8, 14), int16] */;
    %245 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(%239, dtype="int16") /* ty=Tensor[(3, 8, 14), int16] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %248 = not_equal(%211, %212) /* ty=Tensor[(6, 14, 11), bool] */;
    %249 = %217.0;
    %250 = cosh(%218) /* ty=Tensor[(6, 14, 11), float64] */;
    %251 = %225.3;
    %252 = @func_3339(%228, %229) /* ty=Tensor[(3, 4, 4), bool] */;
    %253 = %234.0;
    %254 = log10(%235) /* ty=Tensor[(4, 448), float64] */;
    %255 = minimum(%246, %247) /* ty=Tensor[(3, 8, 14), int16] */;
    (%248, %249, meta[relay.Constant][13] /* ty=Tensor[(432), float64] */, %250, %251, %var_5541, meta[relay.Constant][14] /* ty=Tensor[(2025), float64] */, %252, %var_5547, %253, %var_5573, %254, %var_5585, %255)
  };
  %256(%var_5597, %var_5598, %var_5599, %var_5600, %var_5601) /* ty=(Tensor[(6, 14, 11), bool], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(6, 14, 11), float64], Tensor[(252), int16], Tensor[(600), float64], Tensor[(2025), float64], Tensor[(3, 4, 4), bool], Tensor[(24, 2), int32], Tensor[(8, 16, 14), float32], float32, Tensor[(4, 448), float64], Tensor[(336), float32], Tensor[(3, 8, 14), int16]) */
}

def @func_6027(%var_6025: Tensor[(16, 12, 1), float64]) -> (Tensor[(16, 12, ?), float64], Tensor[(16, 12, 1), float32]) {
  @func_6024(%var_6025) /* ty=(Tensor[(16, 12, ?), float64], Tensor[(16, 12, 1), float32]) */
}

def @func_892(%var_890: Tensor[(3, 8, 14), float32]) -> (Tensor[(3, 8, 14), float32],) {
  @func_889(%var_890) /* ty=(Tensor[(3, 8, 14), float32],) */
}

def @func_8118(%var_8084: Tensor[(11, 13, 11), float32], %var_8108: Tensor[(11, 6), float32]) -> (Tensor[(?, 6, 11), uint16], Tensor[(11, 6), float32], Tensor[(11, 13, 11), float64]) {
  %257 = cast(%var_8108, dtype="float32") /* ty=Tensor[(11, 6), float32] */;
  %258 = reshape(%257, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
  %259 = @func_2596(%258) /* ty=(Tensor[(?, 6, 11), uint16], Tensor[(1, 6, 11), float64]) */;
  %260 = cast(%var_8084, dtype="float32") /* ty=Tensor[(11, 13, 11), float32] */;
  %261 = asinh(%260) /* ty=Tensor[(11, 13, 11), float32] */;
  %262 = cast(%var_8084, dtype="float64") /* ty=Tensor[(11, 13, 11), float64] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="float64") /* ty=Tensor[(11, 13, 11), float64] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %266 = %259.0;
  %267 = floor_mod(%264, %265) /* ty=Tensor[(11, 13, 11), float64] */;
  (%266, %var_8108, %267)
}

def @func_3584(%var_3582: Tensor[(7, 13, 8), uint16], %var_3583: Tensor[(7, 13, 8), uint16]) -> (Tensor[(7, 13, 8), uint16], Tensor[(7, 13, 8), float64]) {
  @func_3580(%var_3582, %var_3583) /* ty=(Tensor[(7, 13, 8), uint16], Tensor[(7, 13, 8), float64]) */
}

def @func_3103(%var_3101: bool, %var_3102: Tensor[(10, 4, 13), bool]) -> (Tensor[(10, 3, 6), float32], Tensor[(180), float64], Tensor[(10, 4, 13), float64]) {
  @func_3099(%var_3101, %var_3102) /* ty=(Tensor[(10, 3, 6), float32], Tensor[(180), float64], Tensor[(10, 4, 13), float64]) */
}

def @func_6863(%var_6861: Tensor[(10, 10, 1), float64]) -> (Tensor[(10, 10, 1), float64],) {
  @func_6860(%var_6861) /* ty=(Tensor[(10, 10, 1), float64],) */
}

def @func_515(%var_514: Tensor[(10, 3, 6), float64]) -> (Tensor[(10, 3, 6), float32],) {
  %272 = fn (%var_496: Tensor[(10, 3, 6), float64]) -> (Tensor[(10, 3, 6), float32],) {
    %268 = cast(%var_496, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
    %269 = asin(%268) /* ty=Tensor[(10, 3, 6), float64] */;
    %270 = cast(%269, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
    %271 = atanh(%270) /* ty=Tensor[(10, 3, 6), float32] */;
    (%271,)
  };
  %272(%var_514) /* ty=(Tensor[(10, 3, 6), float32],) */
}

def @func_1031(%var_1027: Tensor[(5, 10, 11), float32], %var_1028: Tensor[(1296), float64], %var_1029: Tensor[(126, 2), int16], %var_1030: Tensor[(405), float32]) -> (Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) {
  %288 = fn (%var_1002: Tensor[(5, 10, 11), float32], %var_1006: Tensor[(1296), float64], %var_1008: Tensor[(126, 2), int16], %var_1018: Tensor[(405), float32]) -> (Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) {
    %273 = cast(%var_1006, dtype="float64") /* ty=Tensor[(1296), float64] */;
    %274 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 260), float32] */, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
    %275 = cast(%var_1008, dtype="int16") /* ty=Tensor[(126, 2), int16] */;
    %276 = reshape(%273, newshape=[12, 9, 12]) /* ty=Tensor[(12, 9, 12), float64] */;
    %277 = reshape(%274, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
    %278 = reshape(%275, newshape=[252]) /* ty=Tensor[(252), int16] */;
    %279 = @func_874(%276, %277, %278) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) */;
    %280 = cast(%var_1018, dtype="float32") /* ty=Tensor[(405), float32] */;
    %281 = reshape(%280, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %282 = cast(%var_1002, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
    %283 = sinh(%282) /* ty=Tensor[(5, 10, 11), float32] */;
    %284 = cast(%283, dtype="float32") /* ty=Tensor[(5, 10, 11), float32] */;
    %285 = %279.0;
    %286 = @func_817(%281) /* ty=Tensor[(15, 3, 9), float32] */;
    %287 = log2(%284) /* ty=Tensor[(5, 10, 11), float32] */;
    (%285, %var_1006, meta[relay.Constant][16] /* ty=Tensor[(4, 260), float32] */, %var_1008, %286, %var_1018, %287)
  };
  %288(%var_1027, %var_1028, %var_1029, %var_1030) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) */
}

def @func_4761(%var_4758: Tensor[(15, 15, 9), float64]) -> Tensor[(15, 15, 9), float64] {
  %289 = cast(%var_4758, dtype="float64") /* ty=Tensor[(15, 15, 9), float64] */;
  atanh(%289) /* ty=Tensor[(15, 15, 9), float64] */
}

def @func_2598(%var_2597: Tensor[(1, 6, 11), float32]) -> (Tensor[(?, 6, 11), uint16], Tensor[(1, 6, 11), float64]) {
  %299 = fn (%var_2572: Tensor[(1, 6, 11), float32]) -> (Tensor[(?, 6, 11), uint16], Tensor[(1, 6, 11), float64]) {
    %290 = cast(%var_2572, dtype="float32") /* ty=Tensor[(1, 6, 11), float32] */;
    %291 = tan(%290) /* ty=Tensor[(1, 6, 11), float32] */;
    %292 = cast(%291, dtype="uint16") /* ty=Tensor[(1, 6, 11), uint16] */;
    %293 = shape_of(%var_2572, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%var_2572, dtype="uint16") /* ty=Tensor[(1, 6, 11), uint16] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %296 = cast(%291, dtype="float64") /* ty=Tensor[(1, 6, 11), float64] */;
    %297 = multiply(%294, %295) /* ty=Tensor[(?, 6, 11), uint16] */;
    %298 = atanh(%296) /* ty=Tensor[(1, 6, 11), float64] */;
    (%297, %298)
  };
  %299(%var_2597) /* ty=(Tensor[(?, 6, 11), uint16], Tensor[(1, 6, 11), float64]) */
}

def @func_5397(%var_5354: Tensor[(6, 16, 3), uint32], %var_5355: Tensor[(6, 16, 3), uint32], %var_5378: uint64, %var_5382: Tensor[(819), int16]) -> (Tensor[(6, 16, 3), uint32], Tensor[(3, 4, 4), bool], Tensor[(4, 12), int32], Tensor[(7, 13, 8), float64], Tensor[(728), uint16], Tensor[(13, 9, 10), uint64], Tensor[(819), int16], Tensor[(819), uint64]) {
  %300 = cast(%var_5355, dtype="uint32") /* ty=Tensor[(6, 16, 3), uint32] */;
  %301 = shape_of(%var_5354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_5354, dtype="uint32") /* ty=Tensor[(6, 16, 3), uint32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %304 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 12), int32] */, dtype="int32") /* ty=Tensor[(4, 12), int32] */;
  %305 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 12), int32] */, dtype="int32") /* ty=Tensor[(4, 12), int32] */;
  %306 = reshape(%304, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %307 = reshape(%305, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
  %308 = cast(meta[relay.Constant][18] /* ty=Tensor[(728), uint16] */, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %309 = cast(meta[relay.Constant][18] /* ty=Tensor[(728), uint16] */, dtype="uint16") /* ty=Tensor[(728), uint16] */;
  %310 = reshape(%308, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), uint16] */;
  %311 = reshape(%309, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), uint16] */;
  %312 = @func_3580(%310, %311) /* ty=(Tensor[(7, 13, 8), uint16], Tensor[(7, 13, 8), float64]) */;
  %313 = cast(%var_5378, dtype="uint64") /* ty=uint64 */;
  %314 = reshape(%313, newshape=[]) /* ty=uint64 */;
  %315 = cast(%var_5382, dtype="int16") /* ty=Tensor[(819), int16] */;
  %316 = reshape(%315, newshape=[819]) /* ty=Tensor[(819), int16] */;
  %317 = @func_2529(%316) /* ty=(Tensor[(6, 16, 6), float64], Tensor[(6, 16, 6), float64], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) */;
  %318 = cast(%var_5382, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %319 = cast(%var_5378, dtype="uint64") /* ty=uint64 */;
  %320 = maximum(%302, %303) /* ty=Tensor[(6, 16, 3), uint32] */;
  %321 = @func_3339(%306, %307) /* ty=Tensor[(3, 4, 4), bool] */;
  %322 = %312.1;
  %323 = @func_5300(%314) /* ty=Tensor[(13, 9, 10), uint64] */;
  %324 = %317.3;
  %325 = bitwise_or(%318, %319) /* ty=Tensor[(819), uint64] */;
  (%320, %321, meta[relay.Constant][17] /* ty=Tensor[(4, 12), int32] */, %322, meta[relay.Constant][18] /* ty=Tensor[(728), uint16] */, %323, %324, %325)
}

def @func_6860(%var_6850: Tensor[(10, 10, 1), float64]) -> (Tensor[(10, 10, 1), float64],) {
  %326 = cast(%var_6850, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
  %327 = log(%326) /* ty=Tensor[(10, 10, 1), float64] */;
  (%327,)
}

def @func_5512(%var_5511: Tensor[(9, 11, 5), float32]) -> Tensor[(9, 11, 5), float32] {
  %329 = fn (%var_5506: Tensor[(9, 11, 5), float32]) -> Tensor[(9, 11, 5), float32] {
    %328 = cast(%var_5506, dtype="float32") /* ty=Tensor[(9, 11, 5), float32] */;
    atanh(%328) /* ty=Tensor[(9, 11, 5), float32] */
  };
  %329(%var_5511) /* ty=Tensor[(9, 11, 5), float32] */
}

def @func_1614(%var_1611: Tensor[(8, 5, 11), float64], %var_1612: Tensor[(1, 196), float64], %var_1613: Tensor[(432), float64]) -> (Tensor[(8, 5, 11), float64], Tensor[(9, 16, 3), bool], Tensor[(1, 196), float64], Tensor[(432), float64]) {
  %343 = fn (%var_1585: Tensor[(8, 5, 11), float64], %var_1606: Tensor[(1, 196), float64], %var_1607: Tensor[(432), float64]) -> (Tensor[(8, 5, 11), float64], Tensor[(9, 16, 3), bool], Tensor[(1, 196), float64], Tensor[(432), float64]) {
    %330 = cast(%var_1585, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
    %331 = log10(%330) /* ty=Tensor[(8, 5, 11), float64] */;
    %332 = cast(%var_1585, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
    %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
    %334 = cast(%331, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
    %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %336 = cast(%var_1606, dtype="float64") /* ty=Tensor[(1, 196), float64] */;
    %337 = cast(%var_1607, dtype="float64") /* ty=Tensor[(432), float64] */;
    %338 = reshape(%336, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float64] */;
    %339 = reshape(%337, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %340 = @func_741(%338, %339) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) */;
    %341 = maximum(%334, %335) /* ty=Tensor[(8, 5, 11), float64] */;
    %342 = %340.2;
    (%341, %342, %var_1606, %var_1607)
  };
  %343(%var_1611, %var_1612, %var_1613) /* ty=(Tensor[(8, 5, 11), float64], Tensor[(9, 16, 3), bool], Tensor[(1, 196), float64], Tensor[(432), float64]) */
}

def @func_4764(%var_4762: Tensor[(15, 15, 9), float64]) -> Tensor[(15, 15, 9), float64] {
  @func_4761(%var_4762) /* ty=Tensor[(15, 15, 9), float64] */
}

def @func_4813(%var_4811: Tensor[(16, 15, 10), int64], %var_4812: Tensor[(432, 1), float64]) -> (Tensor[(16, 15, 10), bool], Tensor[(9, 16, 3), bool], Tensor[(432, 1), float64]) {
  %355 = fn (%var_4802: Tensor[(16, 15, 10), int64], %var_4807: Tensor[(432, 1), float64]) -> (Tensor[(16, 15, 10), bool], Tensor[(9, 16, 3), bool], Tensor[(432, 1), float64]) {
    %344 = cast(%var_4802, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
    %345 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(16, 15, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 15, 10), int64] */, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %348 = cast(%var_4807, dtype="float64") /* ty=Tensor[(432, 1), float64] */;
    %349 = cast(%var_4807, dtype="float64") /* ty=Tensor[(432, 1), float64] */;
    %350 = reshape(%348, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
    %351 = reshape(%349, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
    %352 = @func_129(%350, %351) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
    %353 = greater_equal(%346, %347) /* ty=Tensor[(16, 15, 10), bool] */;
    %354 = %352.0;
    (%353, %354, %var_4807)
  };
  %355(%var_4811, %var_4812) /* ty=(Tensor[(16, 15, 10), bool], Tensor[(9, 16, 3), bool], Tensor[(432, 1), float64]) */
}

def @func_2760(%var_2754: Tensor[(10, 11, 6), int16], %var_2755: Tensor[(10, 11, 6), int16], %var_2756: Tensor[(1, 550), float32], %var_2757: Tensor[(1296), float64], %var_2758: Tensor[(440), float64], %var_2759: Tensor[(432), float64]) -> (Tensor[(4, 260), float32], Tensor[(1, 550), float32], Tensor[(1296), float64], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(440), float64], Tensor[(49, 4), float64], Tensor[(432), float64], Tensor[(10, 11, 6), float32], Tensor[(15, 3, 9), float32], Tensor[(1040), float32], Tensor[(14, 2, 9), uint8]) {
  %410 = fn (%var_2643: Tensor[(10, 11, 6), int16], %var_2644: Tensor[(10, 11, 6), int16], %var_2691: Tensor[(1, 550), float32], %var_2692: Tensor[(1296), float64], %var_2706: Tensor[(440), float64], %var_2708: Tensor[(432), float64]) -> (Tensor[(4, 260), float32], Tensor[(1, 550), float32], Tensor[(1296), float64], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(440), float64], Tensor[(49, 4), float64], Tensor[(432), float64], Tensor[(10, 11, 6), float32], Tensor[(15, 3, 9), float32], Tensor[(1040), float32], Tensor[(14, 2, 9), uint8]) {
    %356 = cast(%var_2691, dtype="float32") /* ty=Tensor[(1, 550), float32] */;
    %357 = cast(%var_2692, dtype="float64") /* ty=Tensor[(1296), float64] */;
    %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %359 = cast(meta[relay.Constant][21] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %360 = reshape(%356, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), float32] */;
    %361 = reshape(%357, newshape=[1296]) /* ty=Tensor[(1296), float64] */;
    %362 = reshape(%358, newshape=[126, 2]) /* ty=Tensor[(126, 2), int16] */;
    %363 = reshape(%359, newshape=[405]) /* ty=Tensor[(405), float32] */;
    %364 = @func_1026(%360, %361, %362, %363) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(1296), float64], Tensor[(4, 260), float32], Tensor[(126, 2), int16], Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(5, 10, 11), float32]) */;
    %365 = cast(%var_2706, dtype="float64") /* ty=Tensor[(440), float64] */;
    %366 = cast(meta[relay.Constant][22] /* ty=Tensor[(49, 4), float64] */, dtype="float64") /* ty=Tensor[(49, 4), float64] */;
    %367 = cast(%var_2708, dtype="float64") /* ty=Tensor[(432), float64] */;
    %368 = reshape(%365, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), float64] */;
    %369 = reshape(%366, newshape=[1, 196]) /* ty=Tensor[(1, 196), float64] */;
    %370 = reshape(%367, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %371 = @func_1610(%368, %369, %370) /* ty=(Tensor[(8, 5, 11), float64], Tensor[(9, 16, 3), bool], Tensor[(1, 196), float64], Tensor[(432), float64]) */;
    %372 = cast(%var_2644, dtype="float32") /* ty=Tensor[(10, 11, 6), float32] */;
    %373 = asin(%372) /* ty=Tensor[(10, 11, 6), float32] */;
    %374 = cast(%var_2644, dtype="int16") /* ty=Tensor[(10, 11, 6), int16] */;
    %375 = shape_of(%var_2643, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%var_2643, dtype="int16") /* ty=Tensor[(10, 11, 6), int16] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %378 = bitwise_and(%376, %377) /* ty=Tensor[(10, 11, 6), int16] */;
    %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 11, 6), int16] */, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
    %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(%378, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %383 = less_equal(%381, %382) /* ty=Tensor[(10, 11, 6), bool] */;
    %384 = cast(%383, dtype="uint64") /* ty=Tensor[(10, 11, 6), uint64] */;
    %385 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%373, dtype="uint64") /* ty=Tensor[(10, 11, 6), uint64] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %388 = bitwise_xor(%386, %387) /* ty=Tensor[(10, 11, 6), uint64] */;
    %389 = cast(%373, dtype="float32") /* ty=Tensor[(10, 11, 6), float32] */;
    %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(%388, dtype="float32") /* ty=Tensor[(10, 11, 6), float32] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
    %394 = reshape(%393, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
    %395 = cast(%var_2692, dtype="float64") /* ty=Tensor[(1296), float64] */;
    %396 = %364.2;
    %397 = cast(%396, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
    %398 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %399 = reshape(%395, newshape=[12, 9, 12]) /* ty=Tensor[(12, 9, 12), float64] */;
    %400 = reshape(%397, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
    %401 = reshape(%398, newshape=[252]) /* ty=Tensor[(252), int16] */;
    %402 = @func_874(%399, %400, %401) /* ty=(Tensor[(12, 9, 12), float64], Tensor[(126, 2), int16], Tensor[(1040), float32], Tensor[(252), int16]) */;
    %403 = cast(meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %404 = reshape(%403, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
    %405 = %371.1;
    %406 = floor_divide(%391, %392) /* ty=Tensor[(10, 11, 6), float32] */;
    %407 = @func_817(%394) /* ty=Tensor[(15, 3, 9), float32] */;
    %408 = %402.2;
    %409 = @func_152(%404) /* ty=Tensor[(14, 2, 9), uint8] */;
    (%396, %var_2691, %var_2692, meta[relay.Constant][20] /* ty=Tensor[(252), int16] */, meta[relay.Constant][21] /* ty=Tensor[(405), float32] */, %405, %var_2706, meta[relay.Constant][22] /* ty=Tensor[(49, 4), float64] */, %var_2708, %406, %407, %408, %409)
  };
  %410(%var_2754, %var_2755, %var_2756, %var_2757, %var_2758, %var_2759) /* ty=(Tensor[(4, 260), float32], Tensor[(1, 550), float32], Tensor[(1296), float64], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(440), float64], Tensor[(49, 4), float64], Tensor[(432), float64], Tensor[(10, 11, 6), float32], Tensor[(15, 3, 9), float32], Tensor[(1040), float32], Tensor[(14, 2, 9), uint8]) */
}

def @func_3935(%var_3932: Tensor[(4, 5, 1), float32], %var_3933: Tensor[(196), float64], %var_3934: Tensor[(252), int16]) -> (Tensor[(4, 5, 1), float64], Tensor[(432), float64], Tensor[(196), float64], Tensor[(108, 4), float64], Tensor[(10, 13, 16), bool], int16, Tensor[(520, 4), int16], Tensor[(648, 2), float64], Tensor[(252), int16], Tensor[(4, 5, ?), float64], Tensor[(9, 16, 3), bool]) {
  %450 = fn (%var_3854: Tensor[(4, 5, 1), float32], %var_3894: Tensor[(196), float64], %var_3903: Tensor[(252), int16]) -> (Tensor[(4, 5, 1), float64], Tensor[(432), float64], Tensor[(196), float64], Tensor[(108, 4), float64], Tensor[(10, 13, 16), bool], int16, Tensor[(520, 4), int16], Tensor[(648, 2), float64], Tensor[(252), int16], Tensor[(4, 5, ?), float64], Tensor[(9, 16, 3), bool]) {
    %411 = cast(%var_3854, dtype="float32") /* ty=Tensor[(4, 5, 1), float32] */;
    %412 = atan(%411) /* ty=Tensor[(4, 5, 1), float32] */;
    %413 = cast(%412, dtype="float32") /* ty=Tensor[(4, 5, 1), float32] */;
    %414 = log10(%413) /* ty=Tensor[(4, 5, 1), float32] */;
    %415 = cast(%414, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
    %416 = cast(%var_3894, dtype="float64") /* ty=Tensor[(196), float64] */;
    %417 = cast(meta[relay.Constant][24] /* ty=Tensor[(108, 4), float64] */, dtype="float64") /* ty=Tensor[(108, 4), float64] */;
    %418 = reshape(%416, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float64] */;
    %419 = reshape(%417, newshape=[432]) /* ty=Tensor[(432), float64] */;
    %420 = @func_741(%418, %419) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) */;
    %421 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %422 = cast(meta[relay.Constant][26] /* ty=Tensor[(520, 4), int16] */, dtype="int16") /* ty=Tensor[(520, 4), int16] */;
    %423 = cast(meta[relay.Constant][27] /* ty=Tensor[(648, 2), float64] */, dtype="float64") /* ty=Tensor[(648, 2), float64] */;
    %424 = cast(%var_3903, dtype="int16") /* ty=Tensor[(252), int16] */;
    %425 = %420.3;
    %426 = cast(%425, dtype="float64") /* ty=Tensor[(432), float64] */;
    %427 = cast(meta[relay.Constant][26] /* ty=Tensor[(520, 4), int16] */, dtype="int16") /* ty=Tensor[(520, 4), int16] */;
    %428 = cast(meta[relay.Constant][27] /* ty=Tensor[(648, 2), float64] */, dtype="float64") /* ty=Tensor[(648, 2), float64] */;
    %429 = reshape(%421, newshape=[]) /* ty=int16 */;
    %430 = reshape(%422, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int16] */;
    %431 = reshape(%423, newshape=[36, 36]) /* ty=Tensor[(36, 36), float64] */;
    %432 = reshape(%424, newshape=[252]) /* ty=Tensor[(252), int16] */;
    %433 = reshape(%426, newshape=[1, 432]) /* ty=Tensor[(1, 432), float64] */;
    %434 = reshape(%427, newshape=[10, 13, 16]) /* ty=Tensor[(10, 13, 16), int16] */;
    %435 = reshape(%428, newshape=[36, 36]) /* ty=Tensor[(36, 36), float64] */;
    %436 = @func_1994(%429, %430, %431, %432, %433, %434, %435) /* ty=(Tensor[(10, 13, 16), bool], Tensor[(15, 3, 9), float32], Tensor[(550), float32], Tensor[(252), int16], Tensor[(405), float32], Tensor[(9, 16, 3), bool], Tensor[(1, 432), float64], Tensor[(36, 36), float64], Tensor[(36, 36), int16], Tensor[(10, 13, 16), int64], Tensor[(36, 36), float64], Tensor[(36, 36), float64], Tensor[(9, 16, 3), float32], Tensor[(14, 2, 9), uint8]) */;
    %437 = cast(%var_3854, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
    %438 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%414, dtype="float64") /* ty=Tensor[(4, 5, 1), float64] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %441 = cast(%425, dtype="float64") /* ty=Tensor[(432), float64] */;
    %442 = cast(%425, dtype="float64") /* ty=Tensor[(432), float64] */;
    %443 = reshape(%441, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
    %444 = reshape(%442, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
    %445 = @func_129(%443, %444) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
    %446 = erf(%415) /* ty=Tensor[(4, 5, 1), float64] */;
    %447 = %436.0;
    %448 = mod(%439, %440) /* ty=Tensor[(4, 5, ?), float64] */;
    %449 = %445.0;
    (%446, %425, %var_3894, meta[relay.Constant][24] /* ty=Tensor[(108, 4), float64] */, %447, meta[relay.Constant][25] /* ty=int16 */, meta[relay.Constant][26] /* ty=Tensor[(520, 4), int16] */, meta[relay.Constant][27] /* ty=Tensor[(648, 2), float64] */, %var_3903, %448, %449)
  };
  %450(%var_3932, %var_3933, %var_3934) /* ty=(Tensor[(4, 5, 1), float64], Tensor[(432), float64], Tensor[(196), float64], Tensor[(108, 4), float64], Tensor[(10, 13, 16), bool], int16, Tensor[(520, 4), int16], Tensor[(648, 2), float64], Tensor[(252), int16], Tensor[(4, 5, ?), float64], Tensor[(9, 16, 3), bool]) */
}

def @func_889(%var_882: Tensor[(3, 8, 14), float32]) -> (Tensor[(3, 8, 14), float32],) {
  %451 = cast(%var_882, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %452 = cos(%451) /* ty=Tensor[(3, 8, 14), float32] */;
  (%452,)
}

def @func_1776(%var_1774: Tensor[(7, 9, 13), int16], %var_1775: Tensor[(7, 9, 13), int16]) -> (Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) {
  @func_1772(%var_1774, %var_1775) /* ty=(Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) */
}

def @func_3625(%var_3597: Tensor[(15, 3, 1), float64], %var_3615: Tensor[(15, 3, 8), int64]) -> (Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(15, 3, 8), uint64]) {
  %453 = cast(meta[relay.Constant][28] /* ty=Tensor[(405), float32] */, dtype="float32") /* ty=Tensor[(405), float32] */;
  %454 = reshape(%453, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float32] */;
  %455 = cast(%var_3597, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
  %456 = log10(%455) /* ty=Tensor[(15, 3, 1), float64] */;
  %457 = cast(%var_3597, dtype="int64") /* ty=Tensor[(15, 3, 1), int64] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="int64") /* ty=Tensor[(15, 3, 1), int64] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %461 = maximum(%459, %460) /* ty=Tensor[(15, 3, ?), int64] */;
  %462 = cast(%461, dtype="uint64") /* ty=Tensor[(15, 3, ?), uint64] */;
  %463 = cast(%var_3615, dtype="uint64") /* ty=Tensor[(15, 3, 8), uint64] */;
  %464 = @func_817(%454) /* ty=Tensor[(15, 3, 9), float32] */;
  %465 = bitwise_or(%462, %463) /* ty=Tensor[(15, 3, 8), uint64] */;
  (%464, meta[relay.Constant][28] /* ty=Tensor[(405), float32] */, %465)
}

def @func_6024(%var_5997: Tensor[(16, 12, 1), float64]) -> (Tensor[(16, 12, ?), float64], Tensor[(16, 12, 1), float32]) {
  %466 = cast(%var_5997, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
  %467 = cos(%466) /* ty=Tensor[(16, 12, 1), float64] */;
  %468 = cast(%var_5997, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="float64") /* ty=Tensor[(16, 12, 1), float64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %472 = cast(%var_5997, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
  %473 = mod(%470, %471) /* ty=Tensor[(16, 12, ?), float64] */;
  %474 = acosh(%472) /* ty=Tensor[(16, 12, 1), float32] */;
  (%473, %474)
}

def @func_154(%var_153: Tensor[(14, 2, 9), int16]) -> Tensor[(14, 2, 9), uint8] {
  %484 = fn (%var_140: Tensor[(14, 2, 9), int16]) -> Tensor[(14, 2, 9), uint8] {
    %475 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 2, 9), int16] */, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
    %476 = shape_of(%var_140, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%var_140, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %479 = greater(%477, %478) /* ty=Tensor[(14, 2, 9), bool] */;
    %480 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 2, 9), int16] */, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
    %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%479, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%482, %483) /* ty=Tensor[(14, 2, 9), uint8] */
  };
  %484(%var_153) /* ty=Tensor[(14, 2, 9), uint8] */
}

def @func_8122(%var_8120: Tensor[(11, 13, 11), float32], %var_8121: Tensor[(11, 6), float32]) -> (Tensor[(?, 6, 11), uint16], Tensor[(11, 6), float32], Tensor[(11, 13, 11), float64]) {
  @func_8118(%var_8120, %var_8121) /* ty=(Tensor[(?, 6, 11), uint16], Tensor[(11, 6), float32], Tensor[(11, 13, 11), float64]) */
}

def @func_7805(%var_7738: Tensor[(15, 11, 4), float32], %var_7746: Tensor[(432), float64]) -> (Tensor[(15, 11, 4), float32], Tensor[(432, 1), float64], Tensor[(2400, 1), int64], Tensor[(432), float64], Tensor[(8, 16, 14), float32], float32, Tensor[(1792), float32], Tensor[(7, 9, 13), int16], Tensor[(819), int16]) {
  %485 = cast(%var_7738, dtype="float32") /* ty=Tensor[(15, 11, 4), float32] */;
  %486 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(15, 11, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 11, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 4), float32] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %489 = cast(meta[relay.Constant][31] /* ty=Tensor[(2400, 1), int64] */, dtype="int64") /* ty=Tensor[(2400, 1), int64] */;
  %490 = cast(%var_7746, dtype="float64") /* ty=Tensor[(432), float64] */;
  %491 = reshape(%489, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int64] */;
  %492 = reshape(%490, newshape=[432, 1]) /* ty=Tensor[(432, 1), float64] */;
  %493 = @func_4810(%491, %492) /* ty=(Tensor[(16, 15, 10), bool], Tensor[(9, 16, 3), bool], Tensor[(432, 1), float64]) */;
  %494 = cast(0.675603f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %495 = cast(meta[relay.Constant][32] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %496 = reshape(%494, newshape=[]) /* ty=float32 */;
  %497 = reshape(%495, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %498 = @func_1291(%496, %497) /* ty=(Tensor[(8, 16, 14), float32],) */;
  %499 = cast(meta[relay.Constant][33] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %500 = cast(meta[relay.Constant][33] /* ty=Tensor[(819), int16] */, dtype="int16") /* ty=Tensor[(819), int16] */;
  %501 = reshape(%499, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
  %502 = reshape(%500, newshape=[7, 9, 13]) /* ty=Tensor[(7, 9, 13), int16] */;
  %503 = @func_1772(%501, %502) /* ty=(Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) */;
  %504 = floor_mod(%487, %488) /* ty=Tensor[(15, 11, 4), float32] */;
  %505 = %493.2;
  %506 = %498.0;
  %507 = %503.0;
  (%504, %505, meta[relay.Constant][31] /* ty=Tensor[(2400, 1), int64] */, %var_7746, %506, 0.675603f /* ty=float32 */, meta[relay.Constant][32] /* ty=Tensor[(1792), float32] */, %507, meta[relay.Constant][33] /* ty=Tensor[(819), int16] */)
}

def @func_1772(%var_1755: Tensor[(7, 9, 13), int16], %var_1756: Tensor[(7, 9, 13), int16]) -> (Tensor[(7, 9, 13), int16], Tensor[(9, 16, 3), float64], Tensor[(432), float64]) {
  %508 = cast(%var_1756, dtype="int16") /* ty=Tensor[(7, 9, 13), int16] */;
  %509 = shape_of(%var_1755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%var_1755, dtype="int16") /* ty=Tensor[(7, 9, 13), int16] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %512 = cast(meta[relay.Constant][34] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %513 = cast(meta[relay.Constant][34] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %514 = reshape(%512, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %515 = reshape(%513, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float64] */;
  %516 = @func_129(%514, %515) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(9, 16, 3), float32], Tensor[(9, 16, 3), float64]) */;
  %517 = subtract(%510, %511) /* ty=Tensor[(7, 9, 13), int16] */;
  %518 = %516.2;
  (%517, %518, meta[relay.Constant][34] /* ty=Tensor[(432), float64] */)
}

def @func_7330(%var_7329: Tensor[(4, 3, 7), float32]) -> Tensor[(4, 3, 7), float32] {
  %520 = fn (%var_7325: Tensor[(4, 3, 7), float32]) -> Tensor[(4, 3, 7), float32] {
    %519 = cast(%var_7325, dtype="float32") /* ty=Tensor[(4, 3, 7), float32] */;
    log10(%519) /* ty=Tensor[(4, 3, 7), float32] */
  };
  %520(%var_7329) /* ty=Tensor[(4, 3, 7), float32] */
}

def @func_4738(%var_4736: Tensor[(5, 12, 3), int32], %var_4737: Tensor[(5, 12, 3), int32]) -> Tensor[(5, 12, 3), bool] {
  %525 = fn (%var_4730: Tensor[(5, 12, 3), int32], %var_4731: Tensor[(5, 12, 3), int32]) -> Tensor[(5, 12, 3), bool] {
    %521 = cast(%var_4731, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
    %522 = shape_of(%var_4730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(%var_4730, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%523, %524) /* ty=Tensor[(5, 12, 3), bool] */
  };
  %525(%var_4736, %var_4737) /* ty=Tensor[(5, 12, 3), bool] */
}

def @func_5663(%var_5655: Tensor[(11, 6, 12), float32]) -> (Tensor[(11, 6, 12), float32],) {
  %526 = cast(%var_5655, dtype="float32") /* ty=Tensor[(11, 6, 12), float32] */;
  %527 = log(%526) /* ty=Tensor[(11, 6, 12), float32] */;
  (%527,)
}

def @func_745(%var_743: Tensor[(2, 14, 7), float64], %var_744: Tensor[(432), float64]) -> (Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) {
  @func_741(%var_743, %var_744) /* ty=(Tensor[(2, 14, 7), bool], Tensor[(2, 14, 7), float64], Tensor[(9, 16, 3), bool], Tensor[(432), float64], Tensor[(10, 3, 6), float32], Tensor[(180), float64]) */
}

def @func_3343(%var_3341: Tensor[(3, 4, 4), int32], %var_3342: Tensor[(3, 4, 4), int32]) -> Tensor[(3, 4, 4), bool] {
  @func_3339(%var_3341, %var_3342) /* ty=Tensor[(3, 4, 4), bool] */
}

def @func_5403(%var_5399: Tensor[(6, 16, 3), uint32], %var_5400: Tensor[(6, 16, 3), uint32], %var_5401: uint64, %var_5402: Tensor[(819), int16]) -> (Tensor[(6, 16, 3), uint32], Tensor[(3, 4, 4), bool], Tensor[(4, 12), int32], Tensor[(7, 13, 8), float64], Tensor[(728), uint16], Tensor[(13, 9, 10), uint64], Tensor[(819), int16], Tensor[(819), uint64]) {
  @func_5397(%var_5399, %var_5400, %var_5401, %var_5402) /* ty=(Tensor[(6, 16, 3), uint32], Tensor[(3, 4, 4), bool], Tensor[(4, 12), int32], Tensor[(7, 13, 8), float64], Tensor[(728), uint16], Tensor[(13, 9, 10), uint64], Tensor[(819), int16], Tensor[(819), uint64]) */
}

def @func_5022(%var_5019: Tensor[(4, 10, 15), float64], %var_5020: Tensor[(2025), float64], %var_5021: Tensor[(4, 10, 15), float32]) -> (Tensor[(3, 4, 4), bool], Tensor[(48), int32], Tensor[(14, 2, 9), uint8], Tensor[(252), int16], Tensor[(15, 15, 9), float64], Tensor[(2025), float64], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool]) {
  %580 = fn (%var_4893: Tensor[(4, 10, 15), float64], %var_4919: Tensor[(2025), float64], %var_4998: Tensor[(4, 10, 15), float32]) -> (Tensor[(3, 4, 4), bool], Tensor[(48), int32], Tensor[(14, 2, 9), uint8], Tensor[(252), int16], Tensor[(15, 15, 9), float64], Tensor[(2025), float64], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool]) {
    %528 = cast(meta[relay.Constant][35] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
    %529 = cast(meta[relay.Constant][35] /* ty=Tensor[(48), int32] */, dtype="int32") /* ty=Tensor[(48), int32] */;
    %530 = reshape(%528, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
    %531 = reshape(%529, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), int32] */;
    %532 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %533 = reshape(%532, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int16] */;
    %534 = cast(%var_4919, dtype="float64") /* ty=Tensor[(2025), float64] */;
    %535 = reshape(%534, newshape=[15, 15, 9]) /* ty=Tensor[(15, 15, 9), float64] */;
    %536 = cast(%var_4893, dtype="float64") /* ty=Tensor[(4, 10, 15), float64] */;
    %537 = acosh(%536) /* ty=Tensor[(4, 10, 15), float64] */;
    %538 = cast(%537, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
    %539 = cos(%538) /* ty=Tensor[(4, 10, 15), float32] */;
    %540 = cast(%537, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %542 = cast(%539, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %544 = cast(%var_4893, dtype="float64") /* ty=Tensor[(4, 10, 15), float64] */;
    %545 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%537, dtype="float64") /* ty=Tensor[(4, 10, 15), float64] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %548 = divide(%546, %547) /* ty=Tensor[(4, 10, 15), float64] */;
    %549 = cast(%548, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
    %550 = erf(%549) /* ty=Tensor[(4, 10, 15), float32] */;
    %551 = cast(%550, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %552 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%548, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %555 = cast(%539, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %556 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%537, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %559 = greater(%557, %558) /* ty=Tensor[(4, 10, 15), bool] */;
    %560 = cast(%559, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %561 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%537, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %564 = cast(%559, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
    %565 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%537, dtype="float32") /* ty=Tensor[(4, 10, 15), float32] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %568 = mod(%566, %567) /* ty=Tensor[(4, 10, 15), float32] */;
    %569 = cast(%var_4998, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %571 = cast(%568, dtype="bool") /* ty=Tensor[(4, 10, 15), bool] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %573 = @func_3339(%530, %531) /* ty=Tensor[(3, 4, 4), bool] */;
    %574 = @func_152(%533) /* ty=Tensor[(14, 2, 9), uint8] */;
    %575 = @func_4761(%535) /* ty=Tensor[(15, 15, 9), float64] */;
    %576 = equal(%542, %543) /* ty=Tensor[(4, 10, 15), bool] */;
    %577 = logical_and(%553, %554) /* ty=Tensor[(4, 10, 15), bool] */;
    %578 = logical_or(%562, %563) /* ty=Tensor[(4, 10, 15), bool] */;
    %579 = not_equal(%571, %572) /* ty=Tensor[(4, 10, 15), bool] */;
    (%573, meta[relay.Constant][35] /* ty=Tensor[(48), int32] */, %574, meta[relay.Constant][36] /* ty=Tensor[(252), int16] */, %575, %var_4919, %576, %577, %578, %579)
  };
  %580(%var_5019, %var_5020, %var_5021) /* ty=(Tensor[(3, 4, 4), bool], Tensor[(48), int32], Tensor[(14, 2, 9), uint8], Tensor[(252), int16], Tensor[(15, 15, 9), float64], Tensor[(2025), float64], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool], Tensor[(4, 10, 15), bool]) */
}

def @func_6688(%var_6686: Tensor[(14, 4, 4), float32]) -> (Tensor[(14, 4, 4), float32],) {
  @func_6685(%var_6686) /* ty=(Tensor[(14, 4, 4), float32],) */
}

def @main(%var_8146: Tensor[(2, 12, 4), float32]) -> (Tensor[(2, 12, 4), float32],) {
  %581 = cast(%var_8146, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
  %582 = sqrt(%581) /* ty=Tensor[(2, 12, 4), float32] */;
  (%582,)
}

def @func_3629(%var_3627: Tensor[(15, 3, 1), float64], %var_3628: Tensor[(15, 3, 8), int64]) -> (Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(15, 3, 8), uint64]) {
  @func_3625(%var_3627, %var_3628) /* ty=(Tensor[(15, 3, 9), float32], Tensor[(405), float32], Tensor[(15, 3, 8), uint64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen80/build/output.py:942: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen80/build/output.py", line 947, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(96) tvmgen_default_fused_sqrt_kernel0(float* __restrict__ T_sqrt, float* __restrict__ placeholder) {
  T_sqrt[(((int)threadIdx.x))] = sqrtf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

