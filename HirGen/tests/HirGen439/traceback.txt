==========mod==========
#[version = "0.0.5"]
def @func_2239() -> Tensor[(2, 13, 4), float32] {
  %0 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %0.0
}

def @func_2667() -> (Tensor[(2, 13, 4), float32],) {
  %1 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
  (%1,)
}

def @func_3267() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) {
  %2 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %4 = cast(%2, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %5 = atan(%4) /* ty=Tensor[(2, 13, 4), float64] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 4), float32] */, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
  %7 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%2, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %10 = subtract(%8, %9) /* ty=Tensor[(2, 13, 4), int64] */;
  %11 = cast(%10, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %12 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%5, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %15 = cos(%3) /* ty=Tensor[(2, 13, 4), float32] */;
  %16 = greater_equal(%13, %14) /* ty=Tensor[(2, 13, 4), bool] */;
  (%15, %16)
}

def @func_6219() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %17 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %18 = @func_5006() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %19 = %17.0;
  %20 = %18.0;
  (%19, %20)
}

def @func_6418() -> Tensor[(2, 13, 4), float32] {
  %21 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %21.0
}

def @func_2386(%var_2356: Tensor[(3072), float64], %var_2357: float32) -> (Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) {
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %23 = cast(%var_2356, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %24 = cast(%var_2357, dtype="float32") /* ty=float32 */;
  %25 = reshape(%22, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
  %26 = reshape(%23, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %27 = reshape(%24, newshape=[]) /* ty=float32 */;
  %28 = @func_2039(%25, %26, %27) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %30 = reshape(%29, newshape=[12, 3, 15]) /* ty=Tensor[(12, 3, 15), uint8] */;
  %31 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %32 = %31.0;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %34 = acosh(%33) /* ty=Tensor[(2, 13, 4), float64] */;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %36 = cast(%var_2356, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %37 = %28.4;
  %38 = @func_1472(%30) /* ty=Tensor[(12, 3, 15), bool] */;
  %39 = sinh(%35) /* ty=Tensor[(2, 13, 4), float32] */;
  %40 = asinh(%36) /* ty=Tensor[(3072), float32] */;
  (%37, meta[relay.Constant][1] /* ty=Tensor[(88), float32] */, %var_2357, %38, meta[relay.Constant][2] /* ty=Tensor[(540), uint8] */, %39, %40)
}

def @func_5548(%var_5526: Tensor[(88), float32], %var_5527: Tensor[(3072), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(12, 16, 16), float64], Tensor[(88), float32], Tensor[(3072), float64], float32, Tensor[(2, 13, 4), bool]) {
  %41 = @func_5138() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(112), float32], Tensor[(2, 13, 4), float32]) */;
  %42 = cast(%var_5526, dtype="float32") /* ty=Tensor[(88), float32] */;
  %43 = cast(%var_5527, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %44 = cast(-3.72701f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %45 = reshape(%42, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
  %46 = reshape(%43, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %47 = reshape(%44, newshape=[]) /* ty=float32 */;
  %48 = @func_2039(%45, %46, %47) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
  %49 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
  %50 = %41.3;
  %51 = %48.0;
  %52 = %49.0;
  (%50, %51, %var_5526, %var_5527, -3.72701f /* ty=float32 */, %52)
}

def @func_4297() -> Tensor[(12, 16, 16), float64] {
  %53 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
  %53.1
}

def @func_7049() -> (Tensor[(12, 16, 16), float32], Tensor[(2, 13, 4), float32]) {
  %54 = @func_6990() /* ty=Tensor[(12, 16, 16), float64] */;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %56 = acos(%55) /* ty=Tensor[(12, 16, 16), float32] */;
  %57 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  (%56, %57)
}

def @func_5038() -> (Tensor[(96, 32), float64],) {
  %58 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
  %59 = %58.2;
  (%59,)
}

def @func_5896() -> Tensor[(3072), uint8] {
  %60 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %61 = %60.1;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %63 = sinh(%62) /* ty=Tensor[(3072), float64] */;
  %64 = cast(%61, dtype="uint8") /* ty=Tensor[(3072), uint8] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(1), int32] */;
  %66 = cast(%63, dtype="uint8") /* ty=Tensor[(3072), uint8] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?), uint8] */;
  minimum(%66, %67) /* ty=Tensor[(3072), uint8] */
}

def @func_7244() -> (Tensor[(2, 13, 4), float32],) {
  %68 = @func_6418() /* ty=Tensor[(2, 13, 4), float32] */;
  (%68,)
}

def @func_5402() -> Tensor[(2, 13, 4), float32] {
  %69 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %69.0
}

def @func_4038() -> (Tensor[(12, 11, 14), float32],) {
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
  %71 = sinh(%70) /* ty=Tensor[(12, 11, 14), float32] */;
  (%71,)
}

def @func_180(%var_162: Tensor[(10, 1, 9), float32]) -> (Tensor[(10, 9, 9), bool],) {
  %72 = cast(%var_162, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 9, 9), float32] */, dtype="bool") /* ty=Tensor[(10, 9, 9), bool] */;
  %74 = less(%72, %73) /* ty=Tensor[(10, 9, 9), bool] */;
  %75 = cast(%var_162, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %76 = cast(%74, dtype="bool") /* ty=Tensor[(10, 9, 9), bool] */;
  %77 = logical_or(%75, %76) /* ty=Tensor[(10, 9, 9), bool] */;
  (%77,)
}

def @func_5782() -> Tensor[(12, 11, 14), int32] {
  %78 = @func_4038() /* ty=(Tensor[(12, 11, 14), float32],) */;
  %79 = %78.0;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 11, 14), float32] */, dtype="int32") /* ty=Tensor[(12, 11, 14), int32] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="int32") /* ty=Tensor[(12, 11, 14), int32] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%82, %83) /* ty=Tensor[(12, 11, 14), int32] */
}

def @func_5512() -> (Tensor[(12, 11, 14), float32], Tensor[(2, 13, 4), float32]) {
  %84 = @func_4038() /* ty=(Tensor[(12, 11, 14), float32],) */;
  %85 = %84.0;
  %86 = @func_4487() /* ty=Tensor[(2, 13, 4), float32] */;
  (%85, %86)
}

def @func_6557(%var_6482: Tensor[(8, 3, 9), uint64], %var_6483: Tensor[(8, 3, 9), uint64], %var_6500: Tensor[(3072), float64]) -> (Tensor[(8, 3, 9), bool], Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(120, 8), float64], Tensor[(3072), float64], Tensor[(2, 13, 4), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(8, 3, 9), float64]) {
  %87 = cast(%var_6483, dtype="bool") /* ty=Tensor[(8, 3, 9), bool] */;
  %88 = shape_of(%var_6482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_6482, dtype="bool") /* ty=Tensor[(8, 3, 9), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = @func_5721() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */;
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
  %93 = cast(%var_6500, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %94 = reshape(%92, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %95 = reshape(%93, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %96 = @func_4852(%94, %95) /* ty=(Tensor[(12, 11, 14), float32], Tensor[(960), float64], Tensor[(960), float64], Tensor[(3072), bool], Tensor[(3072), float64], Tensor[(960), float64]) */;
  %97 = cast(%var_6500, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %98 = cast(4.83732f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %99 = reshape(%97, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %100 = reshape(%98, newshape=[]) /* ty=float32 */;
  %101 = @func_3632(%99, %100) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(88), float32], Tensor[(3072), float64], float32) */;
  %102 = cast(%var_6500, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %103 = cast(4.83732f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %104 = reshape(%102, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %105 = reshape(%103, newshape=[]) /* ty=float32 */;
  %106 = @func_2386(%104, %105) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */;
  %107 = cast(%var_6482, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
  %108 = less_equal(%89, %90) /* ty=Tensor[(8, 3, 9), bool] */;
  %109 = %91.0;
  %110 = %96.1;
  %111 = %101.0;
  %112 = %106.3;
  %113 = sqrt(%107) /* ty=Tensor[(8, 3, 9), float64] */;
  (%108, %109, %110, meta[relay.Constant][6] /* ty=Tensor[(120, 8), float64] */, %var_6500, %111, 4.83732f /* ty=float32 */, %112, %113)
}

def @func_4099(%var_4070: float32, %var_4071: Tensor[(1, 13, 5), float32]) -> Tensor[(1, 13, 5), float64] {
  %114 = cast(%var_4070, dtype="float32") /* ty=float32 */;
  %115 = cast(%var_4071, dtype="float32") /* ty=Tensor[(1, 13, 5), float32] */;
  %116 = divide(%114, %115) /* ty=Tensor[(1, 13, 5), float32] */;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
  sigmoid(%117) /* ty=Tensor[(1, 13, 5), float64] */
}

def @func_3465() -> (Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) {
  %118 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(880), int64] */, dtype="int64") /* ty=Tensor[(880), int64] */;
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(880), int64] */, dtype="int64") /* ty=Tensor[(880), int64] */;
  %121 = reshape(%119, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
  %122 = reshape(%120, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
  %123 = @func_3168(%121, %122) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(11, 7, 7), float32], Tensor[(539), float32]) */;
  %124 = %123.1;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(11, 7, 7), float64] */;
  %126 = %118.0;
  %127 = rsqrt(%125) /* ty=Tensor[(11, 7, 7), float64] */;
  (%126, meta[relay.Constant][7] /* ty=Tensor[(880), int64] */, %127)
}

def @func_124(%var_104: Tensor[(12, 16, 16), float64], %var_105: Tensor[(12, 16, 16), float64]) -> (Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) {
  %128 = cast(%var_105, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  %129 = shape_of(%var_104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_104, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %132 = cast(%var_105, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %133 = multiply(%130, %131) /* ty=Tensor[(12, 16, 16), float64] */;
  %134 = log(%132) /* ty=Tensor[(12, 16, 16), float32] */;
  (%133, %134)
}

def @func_625(%var_608: Tensor[(11, 7, 7), float32], %var_609: Tensor[(11, 7, 7), float32]) -> Tensor[(11, 7, 7), float32] {
  %135 = cast(%var_609, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
  %136 = shape_of(%var_608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_608, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%137, %138) /* ty=Tensor[(11, 7, 7), float32] */
}

def @func_1472(%var_1465: Tensor[(12, 3, 15), uint8]) -> Tensor[(12, 3, 15), bool] {
  %139 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 3, 15), uint8] */, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
  %140 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_1465, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%141, %142) /* ty=Tensor[(12, 3, 15), bool] */
}

def @func_2972(%var_2967: Tensor[(44, 2), float32], %var_2968: Tensor[(3072), float64], %var_2969: float32) -> (Tensor[(2, 13, 4), float32], float32, Tensor[(44, 2), float32], Tensor[(3072), float64], float32) {
  %143 = cast(%var_2967, dtype="float32") /* ty=Tensor[(44, 2), float32] */;
  %144 = cast(%var_2968, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %145 = cast(%var_2969, dtype="float32") /* ty=float32 */;
  %146 = reshape(%143, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
  %147 = reshape(%144, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %148 = reshape(%145, newshape=[]) /* ty=float32 */;
  %149 = @func_2039(%146, %147, %148) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
  %150 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  %151 = %149.3;
  (%150, %151, %var_2967, %var_2968, %var_2969)
}

def @func_3445() -> (Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) {
  %152 = cast(meta[relay.Constant][9] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %153 = cast(meta[relay.Constant][9] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %154 = reshape(%152, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %155 = reshape(%153, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %156 = @func_124(%154, %155) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %157 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %158 = %157.0;
  %159 = cast(%158, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %160 = asinh(%159) /* ty=Tensor[(2, 13, 4), float64] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %162 = %156.1;
  %163 = acos(%161) /* ty=Tensor[(2, 13, 4), float32] */;
  (%162, meta[relay.Constant][9] /* ty=Tensor[(3072), float64] */, %163)
}

def @func_2281(%var_2268: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), float32] {
  %164 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %165 = %164.0;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %167 = tan(%166) /* ty=Tensor[(2, 13, 4), float64] */;
  %168 = cast(%var_2268, dtype="int8") /* ty=Tensor[(2, 13, 4), int8] */;
  %169 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%165, dtype="int8") /* ty=Tensor[(2, 13, 4), int8] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %172 = add(%170, %171) /* ty=Tensor[(2, 13, 4), int8] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %174 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%167, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%175, %176) /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_4536() -> Tensor[(2, 13, 4), float32] {
  %177 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %177.0
}

def @func_5296() -> Tensor[(2, 13, 4), float32] {
  %178 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %178.0
}

def @func_6017(%var_5996: Tensor[(10, 1, 16), uint64], %var_5997: Tensor[(10, 1, 16), uint64], %var_6014: float32, %var_6015: Tensor[(65), float32]) -> (Tensor[(10, ?, 16), uint64], Tensor[(2, 13, 4), bool], Tensor[(52, 2), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32]) {
  %179 = cast(%var_5997, dtype="uint64") /* ty=Tensor[(10, 1, 16), uint64] */;
  %180 = shape_of(%var_5996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_5996, dtype="uint64") /* ty=Tensor[(10, 1, 16), uint64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %183 = cast(meta[relay.Constant][10] /* ty=Tensor[(52, 2), float32] */, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
  %184 = cast(meta[relay.Constant][10] /* ty=Tensor[(52, 2), float32] */, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
  %185 = reshape(%183, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %186 = reshape(%184, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %187 = @func_2484(%185, %186) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
  %188 = cast(%var_6014, dtype="float32") /* ty=float32 */;
  %189 = cast(%var_6015, dtype="float32") /* ty=Tensor[(65), float32] */;
  %190 = reshape(%188, newshape=[]) /* ty=float32 */;
  %191 = reshape(%189, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %192 = maximum(%181, %182) /* ty=Tensor[(10, ?, 16), uint64] */;
  %193 = %187.0;
  %194 = @func_4099(%190, %191) /* ty=Tensor[(1, 13, 5), float64] */;
  (%192, %193, meta[relay.Constant][10] /* ty=Tensor[(52, 2), float32] */, %194, %var_6014, %var_6015)
}

def @func_4717() -> Tensor[(2, 13, 4), float64] {
  %195 = @func_2899() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */;
  %195.1
}

def @func_3985() -> (Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) {
  %196 = cast(meta[relay.Constant][11] /* ty=Tensor[(96, 32), float64] */, dtype="float64") /* ty=Tensor[(96, 32), float64] */;
  %197 = cast(meta[relay.Constant][11] /* ty=Tensor[(96, 32), float64] */, dtype="float64") /* ty=Tensor[(96, 32), float64] */;
  %198 = reshape(%196, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %199 = reshape(%197, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %200 = @func_124(%198, %199) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %201 = @func_3795() /* ty=Tensor[(12, 3, 15), bool] */;
  %202 = %200.0;
  (%201, %202, meta[relay.Constant][11] /* ty=Tensor[(96, 32), float64] */)
}

def @func_5936() -> Tensor[(2, 13, 4), bool] {
  %203 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
  %203.0
}

def @func_6900(%var_6824: Tensor[(12, 11, 14), float64], %var_6868: Tensor[(12, 11, 14), float64], %var_6875: float32, %var_6876: Tensor[(65), float32]) -> (Tensor[(12, 11, 14), float32], Tensor[(12, 11, 14), bool], Tensor[(12, 11, 14), int8], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(12, 11, 14), float64]) {
  %204 = @func_5782() /* ty=Tensor[(12, 11, 14), int32] */;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %206 = rsqrt(%205) /* ty=Tensor[(12, 11, 14), float64] */;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %208 = cos(%207) /* ty=Tensor[(12, 11, 14), float64] */;
  %209 = cast(%var_6824, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %213 = cast(%var_6824, dtype="uint16") /* ty=Tensor[(12, 11, 14), uint16] */;
  %214 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%206, dtype="uint16") /* ty=Tensor[(12, 11, 14), uint16] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %217 = maximum(%215, %216) /* ty=Tensor[(12, 11, 14), uint16] */;
  %218 = cast(%217, dtype="bool") /* ty=Tensor[(12, 11, 14), bool] */;
  %219 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%206, dtype="bool") /* ty=Tensor[(12, 11, 14), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = cast(%var_6868, dtype="int8") /* ty=Tensor[(12, 11, 14), int8] */;
  %223 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%208, dtype="int8") /* ty=Tensor[(12, 11, 14), int8] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %226 = cast(%var_6875, dtype="float32") /* ty=float32 */;
  %227 = cast(%var_6876, dtype="float32") /* ty=Tensor[(65), float32] */;
  %228 = reshape(%226, newshape=[]) /* ty=float32 */;
  %229 = reshape(%227, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %230 = cast(%217, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %231 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%208, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %234 = floor_mod(%232, %233) /* ty=Tensor[(12, 11, 14), float64] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %236 = divide(%211, %212) /* ty=Tensor[(12, 11, 14), float32] */;
  %237 = equal(%220, %221) /* ty=Tensor[(12, 11, 14), bool] */;
  %238 = minimum(%224, %225) /* ty=Tensor[(12, 11, 14), int8] */;
  %239 = @func_4099(%228, %229) /* ty=Tensor[(1, 13, 5), float64] */;
  %240 = log2(%235) /* ty=Tensor[(12, 11, 14), float64] */;
  (%236, %237, %238, %239, %var_6875, %var_6876, %240)
}

def @func_5380() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %241 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %242 = %241.0;
  %243 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
  %244 = @func_5296() /* ty=Tensor[(2, 13, 4), float32] */;
  (%242, %243, %244)
}

def @func_3311(%var_3285: Tensor[(112), float32]) -> (Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) {
  %245 = cast(%var_3285, dtype="float32") /* ty=Tensor[(112), float32] */;
  %246 = reshape(%245, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
  %247 = @func_565(%246) /* ty=Tensor[(1, 7, 16), float32] */;
  %248 = cast(%var_3285, dtype="bool") /* ty=Tensor[(112), bool] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="bool") /* ty=Tensor[(1, 7, 16), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
  %253 = greater(%250, %251) /* ty=Tensor[(?, 7, 16), bool] */;
  (%252, %253)
}

def @func_6390(%var_6375: int64, %var_6376: Tensor[(11, 4, 4), int64], %var_6388: Tensor[(385), float64]) -> (Tensor[(11, 4, 4), float64], Tensor[(7, 11, 5), float64], Tensor[(385), float64]) {
  %254 = cast(%var_6375, dtype="bool") /* ty=bool */;
  %255 = cast(%var_6376, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
  %256 = less(%254, %255) /* ty=Tensor[(11, 4, 4), bool] */;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
  %258 = cast(%var_6388, dtype="float64") /* ty=Tensor[(385), float64] */;
  %259 = reshape(%258, newshape=[7, 11, 5]) /* ty=Tensor[(7, 11, 5), float64] */;
  %260 = asinh(%257) /* ty=Tensor[(11, 4, 4), float64] */;
  %261 = @func_235(%259) /* ty=Tensor[(7, 11, 5), float64] */;
  (%260, %261, %var_6388)
}

def @func_4852(%var_4787: Tensor[(960), float64], %var_4815: Tensor[(3072), float64]) -> (Tensor[(12, 11, 14), float32], Tensor[(960), float64], Tensor[(960), float64], Tensor[(3072), bool], Tensor[(3072), float64], Tensor[(960), float64]) {
  %262 = @func_4038() /* ty=(Tensor[(12, 11, 14), float32],) */;
  %263 = cast(%var_4787, dtype="float64") /* ty=Tensor[(960), float64] */;
  %264 = reshape(%263, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %265 = @func_3533(%264) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %266 = @func_4578() /* ty=Tensor[(3072), float64] */;
  %267 = cast(%var_4815, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(1), int32] */;
  %269 = cast(%266, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?), bool] */;
  %271 = cast(%var_4815, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %272 = @func_4775() /* ty=(Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) */;
  %273 = %262.0;
  %274 = %265.1;
  %275 = less(%269, %270) /* ty=Tensor[(3072), bool] */;
  %276 = acosh(%271) /* ty=Tensor[(3072), float64] */;
  %277 = %272.1;
  (%273, %274, %var_4787, %275, %276, %277)
}

def @func_3398() -> Tensor[(2, 13, 4), float32] {
  %278 = @func_3267() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) */;
  %278.0
}

def @func_5483() -> (Tensor[(2, 13, 4), float32], Tensor[(8, ?, 3), int64], float32, Tensor[(24, 1), float32]) {
  %279 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %280 = cast(-3.95655f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %281 = cast(meta[relay.Constant][12] /* ty=Tensor[(24, 1), float32] */, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
  %282 = reshape(%280, newshape=[]) /* ty=float32 */;
  %283 = reshape(%281, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), float32] */;
  %284 = %279.0;
  %285 = @func_1204(%282, %283) /* ty=Tensor[(8, ?, 3), int64] */;
  (%284, %285, -3.95655f /* ty=float32 */, meta[relay.Constant][12] /* ty=Tensor[(24, 1), float32] */)
}

def @func_5317() -> (Tensor[(3072), float64],) {
  %286 = @func_4578() /* ty=Tensor[(3072), float64] */;
  (%286,)
}

def @func_2183() -> (Tensor[(2, 13, 4), float32],) {
  %287 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %288 = %287.0;
  (%288,)
}

def @func_4487() -> Tensor[(2, 13, 4), float32] {
  @func_2239() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5838(%var_5828: Tensor[(10, 5, 6), float64]) -> (Tensor[(10, 5, 6), float32],) {
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 6), float64] */;
  %290 = sigmoid(%289) /* ty=Tensor[(10, 5, 6), float64] */;
  %291 = cast(%var_5828, dtype="float32") /* ty=Tensor[(10, 5, 6), float32] */;
  %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%290, dtype="float32") /* ty=Tensor[(10, 5, 6), float32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %295 = floor_mod(%293, %294) /* ty=Tensor[(10, 5, 6), float32] */;
  (%295,)
}

def @func_5006() -> (Tensor[(2, 13, 4), float32],) {
  %296 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %297 = %296.0;
  (%297,)
}

def @func_6617(%var_6581: Tensor[(3360), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(3360), float64], Tensor[(1815), uint32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) {
  %298 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  %299 = cast(%298, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %300 = cast(%var_6581, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %301 = cast(meta[relay.Constant][14] /* ty=Tensor[(1815), uint32] */, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %302 = reshape(%299, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %303 = reshape(%300, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %304 = reshape(%301, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %305 = @func_2700(%302, %303, %304) /* ty=(Tensor[(2, 13, 4), uint32], Tensor[(2, 13, 4), float32], Tensor[(11, 7, 7), float32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1815), uint32]) */;
  %306 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
  %307 = %305.1;
  %308 = %306.0;
  %309 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  (%298, %307, %var_6581, meta[relay.Constant][14] /* ty=Tensor[(1815), uint32] */, %308, %309)
}

def @func_6990() -> Tensor[(12, 16, 16), float64] {
  %310 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
  %310.1
}

def @func_7315(%var_7297: Tensor[(12, 3, 2), float32]) -> (Tensor[(12, 3, 2), uint64],) {
  %311 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 2), float32] */;
  %312 = shape_of(%var_7297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%var_7297, dtype="float32") /* ty=Tensor[(12, 3, 2), float32] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %315 = divide(%313, %314) /* ty=Tensor[(12, 3, 2), float32] */;
  %316 = cast(%315, dtype="uint64") /* ty=Tensor[(12, 3, 2), uint64] */;
  %317 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(12, 3, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 3, 2), float32] */, dtype="uint64") /* ty=Tensor[(12, 3, 2), uint64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %320 = maximum(%318, %319) /* ty=Tensor[(12, 3, 2), uint64] */;
  (%320,)
}

def @func_7784(%var_7761: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), int64] {
  %321 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %322 = %321.0;
  %323 = cast(%var_7761, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%325, %326) /* ty=Tensor[(2, 13, 4), int64] */
}

def @func_7518(%var_7497: Tensor[(14, 6, 12), int8], %var_7514: float32) -> (Tensor[(14, 6, 12), int8], Tensor[(1815), uint32], Tensor[(1, 13, 5), float64], float32, Tensor[(65, 1), float32]) {
  %327 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 6, 12), int8] */, dtype="int8") /* ty=Tensor[(14, 6, 12), int8] */;
  %328 = shape_of(%var_7497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%var_7497, dtype="int8") /* ty=Tensor[(14, 6, 12), int8] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %331 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
  %332 = cast(%var_7514, dtype="float32") /* ty=float32 */;
  %333 = cast(meta[relay.Constant][17] /* ty=Tensor[(65, 1), float32] */, dtype="float32") /* ty=Tensor[(65, 1), float32] */;
  %334 = reshape(%332, newshape=[]) /* ty=float32 */;
  %335 = reshape(%333, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %336 = right_shift(%329, %330) /* ty=Tensor[(14, 6, 12), int8] */;
  %337 = %331.1;
  %338 = @func_4099(%334, %335) /* ty=Tensor[(1, 13, 5), float64] */;
  (%336, %337, %338, %var_7514, meta[relay.Constant][17] /* ty=Tensor[(65, 1), float32] */)
}

def @func_7110() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) {
  %339 = @func_5512() /* ty=(Tensor[(12, 11, 14), float32], Tensor[(2, 13, 4), float32]) */;
  %340 = @func_5006() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %343 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  %344 = %339.1;
  %345 = log(%342) /* ty=Tensor[(2, 13, 4), float64] */;
  (%343, %344, %345)
}

def @func_671(%var_648: Tensor[(11, 11, 15), uint32], %var_649: Tensor[(11, 11, 15), uint32], %var_669: Tensor[(960), float64]) -> (Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) {
  %346 = cast(%var_649, dtype="uint32") /* ty=Tensor[(11, 11, 15), uint32] */;
  %347 = shape_of(%var_648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_648, dtype="uint32") /* ty=Tensor[(11, 11, 15), uint32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %350 = cast(%var_649, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
  %351 = shape_of(%var_648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_648, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = cast(%var_669, dtype="float64") /* ty=Tensor[(960), float64] */;
  %355 = reshape(%354, newshape=[15, 8, 8]) /* ty=Tensor[(15, 8, 8), float64] */;
  %356 = @func_545(%355) /* ty=(Tensor[(15, 8, 8), float64],) */;
  %357 = right_shift(%348, %349) /* ty=Tensor[(11, 11, 15), uint32] */;
  %358 = less_equal(%352, %353) /* ty=Tensor[(11, 11, 15), bool] */;
  %359 = %356.0;
  (%357, %358, %359, %var_669)
}

def @func_7896() -> (Tensor[(2, 13, 4), float32],) {
  %360 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %361 = %360.0;
  (%361,)
}

def @func_5182() -> (Tensor[(3072), float64], Tensor[(3072), float64], Tensor[(12, 3, 15), float32]) {
  %362 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %363 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
  %364 = %363.5;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %366 = acosh(%365) /* ty=Tensor[(12, 3, 15), float64] */;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(12, 3, 15), float32] */;
  %368 = @func_4578() /* ty=Tensor[(3072), float64] */;
  %369 = %362.1;
  %370 = log10(%367) /* ty=Tensor[(12, 3, 15), float32] */;
  (%368, %369, %370)
}

def @func_2647(%var_2602: Tensor[(2, 8, 11), float32]) -> (Tensor[(2, 13, 4), float32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 8, 11), float64]) {
  %371 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %372 = cast(meta[relay.Constant][18] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %373 = reshape(%372, newshape=[12, 3, 15]) /* ty=Tensor[(12, 3, 15), uint8] */;
  %374 = cast(%var_2602, dtype="float32") /* ty=Tensor[(2, 8, 11), float32] */;
  %375 = log10(%374) /* ty=Tensor[(2, 8, 11), float32] */;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(2, 8, 11), float64] */;
  %377 = %371.0;
  %378 = @func_1472(%373) /* ty=Tensor[(12, 3, 15), bool] */;
  %379 = atanh(%376) /* ty=Tensor[(2, 8, 11), float64] */;
  (%377, %378, meta[relay.Constant][18] /* ty=Tensor[(540), uint8] */, %379)
}

def @func_2484(%var_2468: Tensor[(2, 13, 4), float32], %var_2475: Tensor[(2, 13, 4), float32]) -> (Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) {
  %380 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %381 = %380.0;
  %382 = cast(%var_2468, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %386 = cast(%var_2475, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %387 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%381, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %390 = logical_or(%384, %385) /* ty=Tensor[(2, 13, 4), bool] */;
  %391 = less(%388, %389) /* ty=Tensor[(2, 13, 4), bool] */;
  (%390, %391)
}

def @func_3533(%var_3531: Tensor[(960), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) {
  %392 = @func_2899() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */;
  %393 = %392.0;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %395 = cast(meta[relay.Constant][19] /* ty=Tensor[(1815), uint32] */, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %396 = cast(meta[relay.Constant][19] /* ty=Tensor[(1815), uint32] */, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %397 = cast(%var_3531, dtype="float64") /* ty=Tensor[(960), float64] */;
  %398 = reshape(%395, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %399 = reshape(%396, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %400 = reshape(%397, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %401 = @func_671(%398, %399, %400) /* ty=(Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) */;
  %402 = sigmoid(%394) /* ty=Tensor[(2, 13, 4), float32] */;
  %403 = %401.3;
  (%402, %403, meta[relay.Constant][19] /* ty=Tensor[(1815), uint32] */, %var_3531)
}

def @func_235(%var_214: Tensor[(7, 11, 5), float64]) -> Tensor[(7, 11, 5), float64] {
  %404 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 11, 5), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 5), bool] */;
  %405 = cast(%var_214, dtype="bool") /* ty=Tensor[(7, 11, 5), bool] */;
  %406 = equal(%404, %405) /* ty=Tensor[(7, 11, 5), bool] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(7, 11, 5), float64] */;
  %408 = cos(%407) /* ty=Tensor[(7, 11, 5), float64] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(7, 11, 5), float64] */;
  atanh(%409) /* ty=Tensor[(7, 11, 5), float64] */
}

def @func_5138() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(112), float32], Tensor[(2, 13, 4), float32]) {
  %410 = cast(meta[relay.Constant][21] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %411 = reshape(%410, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %412 = @func_3311(%411) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) */;
  %413 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %414 = @func_4487() /* ty=Tensor[(2, 13, 4), float32] */;
  %415 = %412.0;
  %416 = %413.0;
  (%414, %415, meta[relay.Constant][21] /* ty=Tensor[(112), float32] */, %416)
}

def @func_2792(%var_2738: Tensor[(2, 1536), float64], %var_2773: Tensor[(112), float32], %var_2782: Tensor[(2, 44), float32]) -> (Tensor[(2, 1536), float64], Tensor[(2, 13, 4), bool], Tensor[(12, 16, 16), int64], Tensor[(1, 7, 16), float32], Tensor[(112), float32], Tensor[(2, 4, 11), float32], Tensor[(2, 44), float32], float32, Tensor[(2, 13, 4), float32]) {
  %417 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %418 = %417.0;
  %419 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %420 = %419.0;
  %421 = cast(%420, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %422 = shape_of(%418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%418, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = cast(%var_2738, dtype="float64") /* ty=Tensor[(2, 1536), float64] */;
  %426 = cast(%var_2738, dtype="float64") /* ty=Tensor[(2, 1536), float64] */;
  %427 = reshape(%425, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %428 = reshape(%426, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %429 = @func_124(%427, %428) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %430 = %429.1;
  %431 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 16), float32] */, dtype="int64") /* ty=Tensor[(12, 16, 16), int64] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="int64") /* ty=Tensor[(12, 16, 16), int64] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %435 = cast(%var_2773, dtype="float32") /* ty=Tensor[(112), float32] */;
  %436 = reshape(%435, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
  %437 = cast(%var_2782, dtype="float32") /* ty=Tensor[(2, 44), float32] */;
  %438 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 16), float32] */, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  %439 = cast(-3.44529f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %440 = reshape(%437, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
  %441 = reshape(%438, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %442 = reshape(%439, newshape=[]) /* ty=float32 */;
  %443 = @func_2039(%440, %441, %442) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
  %444 = not_equal(%423, %424) /* ty=Tensor[(2, 13, 4), bool] */;
  %445 = bitwise_xor(%433, %434) /* ty=Tensor[(12, 16, 16), int64] */;
  %446 = @func_565(%436) /* ty=Tensor[(1, 7, 16), float32] */;
  %447 = %443.5;
  %448 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  (%var_2738, %444, %445, %446, %var_2773, %447, %var_2782, -3.44529f /* ty=float32 */, %448)
}

def @func_6114(%var_6099: Tensor[(16, 16, 9), float32]) -> (Tensor[(16, 16, 9), float32], Tensor[(10, 5, 6), float32], Tensor[(5, 60), float64]) {
  %449 = cast(%var_6099, dtype="float32") /* ty=Tensor[(16, 16, 9), float32] */;
  %450 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 60), float64] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %451 = reshape(%450, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float64] */;
  %452 = @func_5838(%451) /* ty=(Tensor[(10, 5, 6), float32],) */;
  %453 = atanh(%449) /* ty=Tensor[(16, 16, 9), float32] */;
  %454 = %452.0;
  (%453, %454, meta[relay.Constant][23] /* ty=Tensor[(5, 60), float64] */)
}

def @func_5609(%var_5573: Tensor[(104, 1), float32], %var_5605: Tensor[(3360), float64], %var_5606: Tensor[(539), float32], %var_5607: Tensor[(1, 1815), uint32]) -> (Tensor[(960), float64], Tensor[(880), int64], Tensor[(104, 1), float32], Tensor[(2, 13, 4), float32], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1, 1815), uint32]) {
  %455 = @func_4775() /* ty=(Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) */;
  %456 = cast(%var_5573, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
  %457 = reshape(%456, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %458 = @func_3691(%457) /* ty=(Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) */;
  %459 = @func_5380() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */;
  %460 = cast(%var_5605, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %461 = cast(%var_5606, dtype="float32") /* ty=Tensor[(539), float32] */;
  %462 = cast(%var_5607, dtype="uint32") /* ty=Tensor[(1, 1815), uint32] */;
  %463 = reshape(%460, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %464 = reshape(%461, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %465 = reshape(%462, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %466 = @func_1322(%463, %464, %465) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %467 = %455.1;
  %468 = %458.0;
  %469 = %459.0;
  %470 = %466.4;
  (%467, %468, %var_5573, %469, %470, %var_5605, %var_5606, %var_5607)
}

def @func_4282(%var_4187: Tensor[(2, 13, 4), bool], %var_4206: float32, %var_4207: Tensor[(65), float32], %var_4275: Tensor[(112), float32]) -> (Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), uint16], Tensor[(2, 13, 4), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(11, 7, 7), float32], Tensor[(539, 1), float32], Tensor[(880), int64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool], Tensor[(112), float32]) {
  %471 = @func_2899() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */;
  %472 = %471.1;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %474 = cast(%472, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %475 = reshape(%473, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %476 = reshape(%474, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %477 = @func_2484(%475, %476) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
  %478 = %477.1;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %480 = cast(%478, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %481 = reshape(%479, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %482 = reshape(%480, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %483 = @func_2484(%481, %482) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
  %484 = %483.0;
  %485 = cast(%var_4187, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %489 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %490 = cast(%var_4206, dtype="float32") /* ty=float32 */;
  %491 = cast(%var_4207, dtype="float32") /* ty=Tensor[(65), float32] */;
  %492 = reshape(%490, newshape=[]) /* ty=float32 */;
  %493 = reshape(%491, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %494 = cast(meta[relay.Constant][24] /* ty=Tensor[(539, 1), float32] */, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
  %495 = cast(meta[relay.Constant][24] /* ty=Tensor[(539, 1), float32] */, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
  %496 = reshape(%494, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %497 = reshape(%495, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %498 = @func_3465() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) */;
  %499 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %500 = cast(%var_4275, dtype="float32") /* ty=Tensor[(112), float32] */;
  %501 = reshape(%500, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %502 = @func_3311(%501) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) */;
  %503 = bitwise_xor(%487, %488) /* ty=Tensor[(2, 13, 4), uint16] */;
  %504 = %489.0;
  %505 = @func_4099(%492, %493) /* ty=Tensor[(1, 13, 5), float64] */;
  %506 = @func_625(%496, %497) /* ty=Tensor[(11, 7, 7), float32] */;
  %507 = %498.1;
  %508 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  %509 = %499.0;
  %510 = %502.1;
  (%472, %478, %503, %504, %505, %var_4206, %var_4207, %506, meta[relay.Constant][24] /* ty=Tensor[(539, 1), float32] */, %507, %508, %509, %510, %var_4275)
}

def @func_6472() -> (Tensor[(2, 13, 4), float32],) {
  %511 = @func_6418() /* ty=Tensor[(2, 13, 4), float32] */;
  (%511,)
}

def @func_4775() -> (Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) {
  %512 = cast(meta[relay.Constant][25] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %513 = reshape(%512, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %514 = @func_3533(%513) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %515 = @func_4297() /* ty=Tensor[(12, 16, 16), float64] */;
  %516 = %514.3;
  (%515, %516, meta[relay.Constant][25] /* ty=Tensor[(960), float64] */)
}

def @func_545(%var_526: Tensor[(15, 8, 8), float64]) -> (Tensor[(15, 8, 8), float64],) {
  %517 = cast(%var_526, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
  %518 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(15, 8, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %521 = mod(%519, %520) /* ty=Tensor[(15, 8, 8), float64] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
  %523 = shape_of(%var_526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_526, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %526 = minimum(%524, %525) /* ty=Tensor[(15, 8, 8), float64] */;
  (%526,)
}

def @func_4667() -> (Tensor[(2, 13, 4), bool],) {
  %527 = @func_4536() /* ty=Tensor[(2, 13, 4), float32] */;
  %528 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = logical_and(%530, %531) /* ty=Tensor[(2, 13, 4), bool] */;
  (%532,)
}

def @func_3913() -> Tensor[(2, 13, 4), float32] {
  %533 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %533.0
}

def @func_7132() -> (Tensor[(14, 10, 1), float32],) {
  %534 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
  %535 = exp(%534) /* ty=Tensor[(14, 10, 1), float32] */;
  (%535,)
}

def @func_6354(%var_6346: Tensor[(3, 12, 15), float32]) -> Tensor[(3, 12, 15), float32] {
  %536 = cast(%var_6346, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
  sqrt(%536) /* ty=Tensor[(3, 12, 15), float32] */
}

def @func_3576() -> Tensor[(2, 13, 4), float32] {
  %537 = @func_3267() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) */;
  %537.0
}

def @func_3632(%var_3615: Tensor[(3072), float64], %var_3616: float32) -> (Tensor[(2, 13, 4), float32], Tensor[(88), float32], Tensor[(3072), float64], float32) {
  %538 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %541 = cast(%var_3615, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %542 = cast(%var_3616, dtype="float32") /* ty=float32 */;
  %543 = reshape(%541, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %544 = reshape(%542, newshape=[]) /* ty=float32 */;
  %545 = @func_2386(%543, %544) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */;
  %546 = atanh(%540) /* ty=Tensor[(2, 13, 4), float32] */;
  %547 = %545.1;
  (%546, %547, %var_3615, %var_3616)
}

def @func_5674(%var_5649: Tensor[(16, 7, 13), float64]) -> (Tensor[(16, 7, 13), float64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %548 = cast(%var_5649, dtype="float64") /* ty=Tensor[(16, 7, 13), float64] */;
  %549 = asinh(%548) /* ty=Tensor[(16, 7, 13), float64] */;
  %550 = @func_4487() /* ty=Tensor[(2, 13, 4), float32] */;
  %551 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  (%549, %550, %551)
}

def @func_4468() -> (Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) {
  %552 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %553 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %554 = %552.1;
  %555 = %553.0;
  (%554, %555)
}

def @func_6758() -> (Tensor[(12, 11, 14), int32], Tensor[(3072), uint8]) {
  %556 = @func_5782() /* ty=Tensor[(12, 11, 14), int32] */;
  %557 = @func_5896() /* ty=Tensor[(3072), uint8] */;
  (%556, %557)
}

def @func_7404() -> (Tensor[(2, 13, 4), float32], Tensor[(1815), bool], Tensor[(1815), float32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) {
  %558 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %559 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
  %560 = %559.1;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(1815), float32] */;
  %562 = log2(%561) /* ty=Tensor[(1815), float32] */;
  %563 = cast(%560, dtype="bool") /* ty=Tensor[(1815), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(1), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(1815), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?), bool] */;
  %567 = cast(%560, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %568 = acos(%567) /* ty=Tensor[(1815), float64] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(1815), float32] */;
  %570 = shape_of(%562, dtype="int32") /* ty=Tensor[(1), int32] */;
  %571 = cast(%562, dtype="float32") /* ty=Tensor[(1815), float32] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?), float32] */;
  %573 = %558.0;
  %574 = greater(%565, %566) /* ty=Tensor[(1815), bool] */;
  %575 = multiply(%571, %572) /* ty=Tensor[(1815), float32] */;
  %576 = @func_5936() /* ty=Tensor[(2, 13, 4), bool] */;
  %577 = @func_4536() /* ty=Tensor[(2, 13, 4), float32] */;
  (%573, %574, %575, %576, %577)
}

def @func_4578() -> Tensor[(3072), float64] {
  %578 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %578.1
}

def @func_3691(%var_3664: Tensor[(104), float32]) -> (Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) {
  %579 = @func_3465() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) */;
  %580 = cast(%var_3664, dtype="float32") /* ty=Tensor[(104), float32] */;
  %581 = reshape(%580, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %582 = @func_3465() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) */;
  %583 = %579.1;
  %584 = @func_3128(%581) /* ty=Tensor[(2, 13, 4), uint16] */;
  %585 = %582.1;
  (%583, %584, %var_3664, %585)
}

def @func_7633() -> (Tensor[(3072), float64], Tensor[(12, 16, 16), float32]) {
  %586 = @func_4578() /* ty=Tensor[(3072), float64] */;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %588 = cast(%586, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %589 = reshape(%587, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %590 = reshape(%588, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %591 = @func_124(%589, %590) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %592 = %591.1;
  (%586, %592)
}

def @func_565(%var_562: Tensor[(1, 7, 16), float32]) -> Tensor[(1, 7, 16), float32] {
  %593 = cast(%var_562, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
  exp(%593) /* ty=Tensor[(1, 7, 16), float32] */
}

def @func_3795() -> Tensor[(12, 3, 15), bool] {
  %594 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
  %594.5
}

def @main(%var_7915: Tensor[(1815), uint32]) -> (Tensor[(96, 32), float64], Tensor[(14, 240), float64], Tensor[(1815), uint32], Tensor[(10, 9, 9), bool], Tensor[(15, 6), float32], Tensor[(2, 13, 4), float32], float32, Tensor[(2, 13, 4), bool], Tensor[(539), float64]) {
  %595 = @func_5038() /* ty=(Tensor[(96, 32), float64],) */;
  %596 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
  %597 = reshape(%596, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float32] */;
  %598 = @func_180(%597) /* ty=(Tensor[(10, 9, 9), bool],) */;
  %599 = %595.0;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(96, 32), float64] */;
  %601 = cast(-7.00386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %602 = reshape(%600, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %603 = reshape(%601, newshape=[]) /* ty=float32 */;
  %604 = @func_2386(%602, %603) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */;
  %605 = %604.5;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %607 = cast(%605, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %608 = reshape(%606, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %609 = reshape(%607, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %610 = @func_2484(%608, %609) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
  %611 = cast(meta[relay.Constant][31] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %612 = tan(%611) /* ty=Tensor[(539), float32] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(539), float64] */;
  %614 = cos(%613) /* ty=Tensor[(539), float64] */;
  %615 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 240), float64] */, dtype="float64") /* ty=Tensor[(14, 240), float64] */;
  %616 = cast(meta[relay.Constant][31] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %617 = cast(%var_7915, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %618 = reshape(%615, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %619 = reshape(%616, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %620 = reshape(%617, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %621 = @func_1322(%618, %619, %620) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %622 = %621.1;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(11, 7, 7), float64] */;
  %624 = shape_of(%612, dtype="int32") /* ty=Tensor[(1), int32] */;
  %625 = cast(%612, dtype="float64") /* ty=Tensor[(539), float64] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?), float64] */;
  %627 = multiply(%625, %626) /* ty=Tensor[(539), float64] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(539), float64] */;
  %629 = shape_of(%614, dtype="int32") /* ty=Tensor[(1), int32] */;
  %630 = cast(%614, dtype="float64") /* ty=Tensor[(539), float64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?), float64] */;
  %632 = %598.0;
  %633 = %610.1;
  %634 = divide(%630, %631) /* ty=Tensor[(539), float64] */;
  (%599, meta[relay.Constant][29] /* ty=Tensor[(14, 240), float64] */, %var_7915, %632, meta[relay.Constant][30] /* ty=Tensor[(15, 6), float32] */, %605, -7.00386f /* ty=float32 */, %633, %634)
}

def @func_2899() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) {
  %635 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %636 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %639 = log10(%638) /* ty=Tensor[(2, 13, 4), float64] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %641 = %635.0;
  %642 = rsqrt(%640) /* ty=Tensor[(2, 13, 4), float64] */;
  (%641, %642)
}

def @func_2559() -> Tensor[(2, 13, 4), float32] {
  @func_2239() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5736() -> Tensor[(2, 13, 4), float32] {
  @func_2239() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_2700(%var_2682: Tensor[(2, 13, 4), float32], %var_2696: Tensor[(3360), float64], %var_2698: Tensor[(1815), uint32]) -> (Tensor[(2, 13, 4), uint32], Tensor[(2, 13, 4), float32], Tensor[(11, 7, 7), float32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1815), uint32]) {
  %643 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  %644 = cast(%var_2682, dtype="uint32") /* ty=Tensor[(2, 13, 4), uint32] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="uint32") /* ty=Tensor[(2, 13, 4), uint32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %648 = cast(%643, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %649 = cast(%var_2696, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %650 = cast(meta[relay.Constant][32] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %651 = cast(%var_2698, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %652 = reshape(%649, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %653 = reshape(%650, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %654 = reshape(%651, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %655 = @func_1322(%652, %653, %654) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %656 = bitwise_and(%646, %647) /* ty=Tensor[(2, 13, 4), uint32] */;
  %657 = erf(%648) /* ty=Tensor[(2, 13, 4), float32] */;
  %658 = %655.1;
  (%656, %657, %658, %var_2696, meta[relay.Constant][32] /* ty=Tensor[(539), float32] */, %var_2698)
}

def @func_5984() -> (Tensor[(3072), float64], Tensor[(112), float32], Tensor[(112), float32], Tensor[(3072), bool], Tensor[(88), float32]) {
  %659 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %660 = %659.1;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %662 = cast(meta[relay.Constant][33] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %663 = cast(meta[relay.Constant][34] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %664 = reshape(%661, newshape=[2, 1536]) /* ty=Tensor[(2, 1536), float64] */;
  %665 = reshape(%662, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %666 = reshape(%663, newshape=[2, 44]) /* ty=Tensor[(2, 44), float32] */;
  %667 = @func_2792(%664, %665, %666) /* ty=(Tensor[(2, 1536), float64], Tensor[(2, 13, 4), bool], Tensor[(12, 16, 16), int64], Tensor[(1, 7, 16), float32], Tensor[(112), float32], Tensor[(2, 4, 11), float32], Tensor[(2, 44), float32], float32, Tensor[(2, 13, 4), float32]) */;
  %668 = cast(%660, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %669 = reshape(%668, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %670 = @func_5448(%669) /* ty=(Tensor[(3072), bool],) */;
  %671 = cast(meta[relay.Constant][34] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %672 = %667.4;
  %673 = %670.0;
  %674 = rsqrt(%671) /* ty=Tensor[(88), float32] */;
  (%660, %672, meta[relay.Constant][33] /* ty=Tensor[(112), float32] */, %673, %674)
}

def @func_2148() -> (Tensor[(2, 13, 4), float32],) {
  %675 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %676 = asin(%675) /* ty=Tensor[(2, 13, 4), float32] */;
  (%676,)
}

def @func_3192() -> (Tensor[(2, 13, 4), float32],) {
  %677 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  (%677,)
}

def @func_2039(%var_1999: Tensor[(2, 4, 11), float32], %var_2003: Tensor[(3072), float64], %var_2012: float32) -> (Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) {
  %678 = cast(%var_2003, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %679 = cast(%var_2003, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %680 = reshape(%678, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %681 = reshape(%679, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %682 = @func_124(%680, %681) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %683 = cast(%var_2012, dtype="float32") /* ty=float32 */;
  %684 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %685 = reshape(%683, newshape=[]) /* ty=float32 */;
  %686 = reshape(%684, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), float32] */;
  %687 = cast(%var_1999, dtype="float32") /* ty=Tensor[(2, 4, 11), float32] */;
  %688 = acosh(%687) /* ty=Tensor[(2, 4, 11), float32] */;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(2, 4, 11), float32] */;
  %690 = %682.0;
  %691 = @func_1204(%685, %686) /* ty=Tensor[(8, ?, 3), int64] */;
  %692 = sin(%689) /* ty=Tensor[(2, 4, 11), float32] */;
  (%690, %var_2003, %691, %var_2012, meta[relay.Constant][36] /* ty=Tensor[(24), float32] */, %692)
}

def @func_3332() -> (Tensor[(2, 13, 4), float32],) {
  %693 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %694 = %693.0;
  (%694,)
}

def @func_3168(%var_3147: Tensor[(5, 16, 11), int64], %var_3148: Tensor[(5, 16, 11), int64]) -> (Tensor[(5, 16, 11), bool], Tensor[(11, 7, 7), float32], Tensor[(539), float32]) {
  %695 = cast(%var_3148, dtype="int64") /* ty=Tensor[(5, 16, 11), int64] */;
  %696 = shape_of(%var_3147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_3147, dtype="int64") /* ty=Tensor[(5, 16, 11), int64] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %699 = bitwise_xor(%697, %698) /* ty=Tensor[(5, 16, 11), int64] */;
  %700 = cast(%699, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %701 = shape_of(%var_3147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_3147, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %704 = cast(meta[relay.Constant][37] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %705 = cast(meta[relay.Constant][37] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %706 = reshape(%704, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %707 = reshape(%705, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %708 = logical_or(%702, %703) /* ty=Tensor[(5, 16, 11), bool] */;
  %709 = @func_625(%706, %707) /* ty=Tensor[(11, 7, 7), float32] */;
  (%708, %709, meta[relay.Constant][37] /* ty=Tensor[(539), float32] */)
}

def @func_3128(%var_3120: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), uint16] {
  %710 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %711 = %710.0;
  %712 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%711, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%714, %715) /* ty=Tensor[(2, 13, 4), uint16] */
}

def @func_6923() -> Tensor[(2, 13, 4), float32] {
  @func_4487() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5721() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %716 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %717 = %716.0;
  %718 = @func_3398() /* ty=Tensor[(2, 13, 4), float32] */;
  (%717, %718)
}

def @func_7486() -> (Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), bool], Tensor[(3072), float64]) {
  %719 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
  %720 = cast(meta[relay.Constant][38] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %721 = cast(meta[relay.Constant][38] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %722 = reshape(%720, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %723 = reshape(%721, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %724 = @func_124(%722, %723) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %725 = %724.0;
  %726 = cast(meta[relay.Constant][38] /* ty=Tensor[(3072), float64] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %730 = %719.0;
  %731 = logical_and(%728, %729) /* ty=Tensor[(12, 16, 16), bool] */;
  %732 = @func_4578() /* ty=Tensor[(3072), float64] */;
  (%730, %731, %732)
}

def @func_2938(%var_2930: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), float32],) {
  %733 = cast(%var_2930, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %734 = atan(%733) /* ty=Tensor[(7, 15, 9), float32] */;
  (%734,)
}

def @func_3751() -> (Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) {
  %735 = @func_3267() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) */;
  %736 = cast(meta[relay.Constant][39] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %737 = cast(meta[relay.Constant][40] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %738 = cast(meta[relay.Constant][41] /* ty=Tensor[(605, 3), uint32] */, dtype="uint32") /* ty=Tensor[(605, 3), uint32] */;
  %739 = reshape(%736, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %740 = reshape(%737, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %741 = reshape(%738, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %742 = @func_1322(%739, %740, %741) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %743 = cast(meta[relay.Constant][42] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %744 = reshape(%743, newshape=[12, 3, 15]) /* ty=Tensor[(12, 3, 15), uint8] */;
  %745 = %735.1;
  %746 = %742.4;
  %747 = @func_1472(%744) /* ty=Tensor[(12, 3, 15), bool] */;
  (%745, %746, meta[relay.Constant][39] /* ty=Tensor[(3360), float64] */, meta[relay.Constant][40] /* ty=Tensor[(539), float32] */, meta[relay.Constant][41] /* ty=Tensor[(605, 3), uint32] */, %747, meta[relay.Constant][42] /* ty=Tensor[(540), uint8] */)
}

def @func_4989() -> (Tensor[(2, 13, 4), float32],) {
  %748 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  (%748,)
}

def @func_7192() -> (Tensor[(2, 13, 4), float32],) {
  %749 = @func_3913() /* ty=Tensor[(2, 13, 4), float32] */;
  (%749,)
}

def @func_5448(%var_5442: Tensor[(3072), float64]) -> (Tensor[(3072), bool],) {
  %750 = @func_4578() /* ty=Tensor[(3072), float64] */;
  %751 = cast(%var_5442, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(1), int32] */;
  %753 = cast(%750, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?), bool] */;
  %755 = logical_and(%753, %754) /* ty=Tensor[(3072), bool] */;
  (%755,)
}

def @func_6234() -> Tensor[(11, 14, 6), float32] {
  %756 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 6), float32] */;
  exp(%756) /* ty=Tensor[(11, 14, 6), float32] */
}

def @func_2569() -> Tensor[(2, 13, 4), float32] {
  %757 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %757.0
}

def @func_1204(%var_1176: float32, %var_1177: Tensor[(8, 1, 3), float32]) -> Tensor[(8, ?, 3), int64] {
  %758 = cast(%var_1176, dtype="float32") /* ty=float32 */;
  %759 = cast(%var_1177, dtype="float32") /* ty=Tensor[(8, 1, 3), float32] */;
  %760 = power(%758, %759) /* ty=Tensor[(8, 1, 3), float32] */;
  %761 = cast(%760, dtype="int64") /* ty=Tensor[(8, 1, 3), int64] */;
  %762 = shape_of(%var_1177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_1177, dtype="int64") /* ty=Tensor[(8, 1, 3), int64] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%763, %764) /* ty=Tensor[(8, ?, 3), int64] */
}

def @func_6285() -> Tensor[(2, 13, 4), bool] {
  %765 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
  %765.0
}

def @func_7742() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %766 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %767 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %768 = @func_6923() /* ty=Tensor[(2, 13, 4), float32] */;
  %769 = %766.0;
  %770 = %767.0;
  (%768, %769, %770)
}

def @func_5693() -> Tensor[(2, 13, 4), float32] {
  %771 = @func_5380() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */;
  %771.1
}

def @func_7705() -> (Tensor[(880), int64], Tensor[(104), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(1815), float32], Tensor[(3072), float64]) {
  %772 = cast(meta[relay.Constant][44] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
  %773 = reshape(%772, newshape=[104]) /* ty=Tensor[(104), float32] */;
  %774 = @func_3691(%773) /* ty=(Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) */;
  %775 = cast(-0.266995f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %776 = cast(meta[relay.Constant][45] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %777 = reshape(%775, newshape=[]) /* ty=float32 */;
  %778 = reshape(%776, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %779 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
  %780 = %779.1;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(1815), float32] */;
  %782 = @func_7633() /* ty=(Tensor[(3072), float64], Tensor[(12, 16, 16), float32]) */;
  %783 = %774.3;
  %784 = @func_4099(%777, %778) /* ty=Tensor[(1, 13, 5), float64] */;
  %785 = sin(%781) /* ty=Tensor[(1815), float32] */;
  %786 = %782.0;
  (%783, meta[relay.Constant][44] /* ty=Tensor[(104), float32] */, %784, -0.266995f /* ty=float32 */, meta[relay.Constant][45] /* ty=Tensor[(65), float32] */, %785, %786)
}

def @func_1322(%var_1302: Tensor[(15, 16, 14), float64], %var_1308: Tensor[(539), float32], %var_1312: Tensor[(1815), uint32]) -> (Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) {
  %787 = cast(%var_1302, dtype="float64") /* ty=Tensor[(15, 16, 14), float64] */;
  %788 = cast(%var_1308, dtype="float32") /* ty=Tensor[(539), float32] */;
  %789 = cast(%var_1308, dtype="float32") /* ty=Tensor[(539), float32] */;
  %790 = reshape(%788, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %791 = reshape(%789, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %792 = cast(%var_1312, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %793 = cast(%var_1312, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %794 = cast(meta[relay.Constant][46] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %795 = reshape(%792, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %796 = reshape(%793, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %797 = reshape(%794, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %798 = @func_671(%795, %796, %797) /* ty=(Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) */;
  %799 = log10(%787) /* ty=Tensor[(15, 16, 14), float64] */;
  %800 = @func_625(%790, %791) /* ty=Tensor[(11, 7, 7), float32] */;
  %801 = %798.0;
  (%799, %800, %var_1308, %801, %var_1312, meta[relay.Constant][46] /* ty=Tensor[(960), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7786(%var_7785: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), int64] {
  %6 = fn (%var_7761: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), int64] {
    %0 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %1 = %0.0;
    %2 = cast(%var_7761, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
    %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%1, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    left_shift(%4, %5) /* ty=Tensor[(2, 13, 4), int64] */
  };
  %6(%var_7785) /* ty=Tensor[(2, 13, 4), int64] */
}

def @func_7521(%var_7519: Tensor[(14, 6, 12), int8], %var_7520: float32) -> (Tensor[(14, 6, 12), int8], Tensor[(1815), uint32], Tensor[(1, 13, 5), float64], float32, Tensor[(65, 1), float32]) {
  %19 = fn (%var_7497: Tensor[(14, 6, 12), int8], %var_7514: float32) -> (Tensor[(14, 6, 12), int8], Tensor[(1815), uint32], Tensor[(1, 13, 5), float64], float32, Tensor[(65, 1), float32]) {
    %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 12), int8] */, dtype="int8") /* ty=Tensor[(14, 6, 12), int8] */;
    %8 = shape_of(%var_7497, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%var_7497, dtype="int8") /* ty=Tensor[(14, 6, 12), int8] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %11 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
    %12 = cast(%var_7514, dtype="float32") /* ty=float32 */;
    %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(65, 1), float32] */, dtype="float32") /* ty=Tensor[(65, 1), float32] */;
    %14 = reshape(%12, newshape=[]) /* ty=float32 */;
    %15 = reshape(%13, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
    %16 = right_shift(%9, %10) /* ty=Tensor[(14, 6, 12), int8] */;
    %17 = %11.1;
    %18 = @func_4099(%14, %15) /* ty=Tensor[(1, 13, 5), float64] */;
    (%16, %17, %18, %var_7514, meta[relay.Constant][1] /* ty=Tensor[(65, 1), float32] */)
  };
  %19(%var_7519, %var_7520) /* ty=(Tensor[(14, 6, 12), int8], Tensor[(1815), uint32], Tensor[(1, 13, 5), float64], float32, Tensor[(65, 1), float32]) */
}

def @func_5451(%var_5449: Tensor[(3072), float64]) -> (Tensor[(3072), bool],) {
  @func_5448(%var_5449) /* ty=(Tensor[(3072), bool],) */
}

def @func_1204(%var_1176: float32, %var_1177: Tensor[(8, 1, 3), float32]) -> Tensor[(8, ?, 3), int64] {
  %20 = cast(%var_1176, dtype="float32") /* ty=float32 */;
  %21 = cast(%var_1177, dtype="float32") /* ty=Tensor[(8, 1, 3), float32] */;
  %22 = power(%20, %21) /* ty=Tensor[(8, 1, 3), float32] */;
  %23 = cast(%22, dtype="int64") /* ty=Tensor[(8, 1, 3), int64] */;
  %24 = shape_of(%var_1177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%var_1177, dtype="int64") /* ty=Tensor[(8, 1, 3), int64] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%25, %26) /* ty=Tensor[(8, ?, 3), int64] */
}

def @func_7110() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) {
  %27 = @func_5512() /* ty=(Tensor[(12, 11, 14), float32], Tensor[(2, 13, 4), float32]) */;
  %28 = @func_5006() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %29 = %28.0;
  %30 = cast(%29, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %31 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  %32 = %27.1;
  %33 = log(%30) /* ty=Tensor[(2, 13, 4), float64] */;
  (%31, %32, %33)
}

def @func_3987() -> (Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) {
  @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */
}

def @func_7245() -> (Tensor[(2, 13, 4), float32],) {
  %35 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %34 = @func_6418() /* ty=Tensor[(2, 13, 4), float32] */;
    (%34,)
  };
  %35() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_5782() -> Tensor[(12, 11, 14), int32] {
  %36 = @func_4038() /* ty=(Tensor[(12, 11, 14), float32],) */;
  %37 = %36.0;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 11, 14), float32] */, dtype="int32") /* ty=Tensor[(12, 11, 14), int32] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="int32") /* ty=Tensor[(12, 11, 14), int32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%40, %41) /* ty=Tensor[(12, 11, 14), int32] */
}

def @func_2241() -> Tensor[(2, 13, 4), float32] {
  @func_2239() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_4040() -> (Tensor[(12, 11, 14), float32],) {
  @func_4038() /* ty=(Tensor[(12, 11, 14), float32],) */
}

def @func_7634() -> (Tensor[(3072), float64], Tensor[(12, 16, 16), float32]) {
  %49 = fn () -> (Tensor[(3072), float64], Tensor[(12, 16, 16), float32]) {
    %42 = @func_4578() /* ty=Tensor[(3072), float64] */;
    %43 = cast(%42, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %44 = cast(%42, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %45 = reshape(%43, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
    %46 = reshape(%44, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
    %47 = @func_124(%45, %46) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
    %48 = %47.1;
    (%42, %48)
  };
  %49() /* ty=(Tensor[(3072), float64], Tensor[(12, 16, 16), float32]) */
}

def @func_7192() -> (Tensor[(2, 13, 4), float32],) {
  %50 = @func_3913() /* ty=Tensor[(2, 13, 4), float32] */;
  (%50,)
}

def @func_2900() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) {
  %59 = fn () -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) {
    %51 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %52 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %53 = %52.0;
    %54 = cast(%53, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
    %55 = log10(%54) /* ty=Tensor[(2, 13, 4), float64] */;
    %56 = cast(%55, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
    %57 = %51.0;
    %58 = rsqrt(%56) /* ty=Tensor[(2, 13, 4), float64] */;
    (%57, %58)
  };
  %59() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */
}

def @func_5184() -> (Tensor[(3072), float64], Tensor[(3072), float64], Tensor[(12, 3, 15), float32]) {
  @func_5182() /* ty=(Tensor[(3072), float64], Tensor[(3072), float64], Tensor[(12, 3, 15), float32]) */
}

def @func_5614(%var_5610: Tensor[(104, 1), float32], %var_5611: Tensor[(3360), float64], %var_5612: Tensor[(539), float32], %var_5613: Tensor[(1, 1815), uint32]) -> (Tensor[(960), float64], Tensor[(880), int64], Tensor[(104, 1), float32], Tensor[(2, 13, 4), float32], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1, 1815), uint32]) {
  %76 = fn (%var_5573: Tensor[(104, 1), float32], %var_5605: Tensor[(3360), float64], %var_5606: Tensor[(539), float32], %var_5607: Tensor[(1, 1815), uint32]) -> (Tensor[(960), float64], Tensor[(880), int64], Tensor[(104, 1), float32], Tensor[(2, 13, 4), float32], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1, 1815), uint32]) {
    %60 = @func_4775() /* ty=(Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) */;
    %61 = cast(%var_5573, dtype="float32") /* ty=Tensor[(104, 1), float32] */;
    %62 = reshape(%61, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %63 = @func_3691(%62) /* ty=(Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) */;
    %64 = @func_5380() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */;
    %65 = cast(%var_5605, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %66 = cast(%var_5606, dtype="float32") /* ty=Tensor[(539), float32] */;
    %67 = cast(%var_5607, dtype="uint32") /* ty=Tensor[(1, 1815), uint32] */;
    %68 = reshape(%65, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
    %69 = reshape(%66, newshape=[539]) /* ty=Tensor[(539), float32] */;
    %70 = reshape(%67, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
    %71 = @func_1322(%68, %69, %70) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
    %72 = %60.1;
    %73 = %63.0;
    %74 = %64.0;
    %75 = %71.4;
    (%72, %73, %var_5573, %74, %75, %var_5605, %var_5606, %var_5607)
  };
  %76(%var_5610, %var_5611, %var_5612, %var_5613) /* ty=(Tensor[(960), float64], Tensor[(880), int64], Tensor[(104, 1), float32], Tensor[(2, 13, 4), float32], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1, 1815), uint32]) */
}

def @func_6419() -> Tensor[(2, 13, 4), float32] {
  %78 = fn () -> Tensor[(2, 13, 4), float32] {
    %77 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %77.0
  };
  %78() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_3269() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) {
  @func_3267() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) */
}

def @func_5381() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %83 = fn () -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
    %79 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %80 = %79.0;
    %81 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
    %82 = @func_5296() /* ty=Tensor[(2, 13, 4), float32] */;
    (%80, %81, %82)
  };
  %83() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_3467() -> (Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) {
  @func_3465() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) */
}

def @func_180(%var_162: Tensor[(10, 1, 9), float32]) -> (Tensor[(10, 9, 9), bool],) {
  %84 = cast(%var_162, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %85 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 9, 9), float32] */, dtype="bool") /* ty=Tensor[(10, 9, 9), bool] */;
  %86 = less(%84, %85) /* ty=Tensor[(10, 9, 9), bool] */;
  %87 = cast(%var_162, dtype="bool") /* ty=Tensor[(10, 1, 9), bool] */;
  %88 = cast(%86, dtype="bool") /* ty=Tensor[(10, 9, 9), bool] */;
  %89 = logical_or(%87, %88) /* ty=Tensor[(10, 9, 9), bool] */;
  (%89,)
}

def @func_6562(%var_6559: Tensor[(8, 3, 9), uint64], %var_6560: Tensor[(8, 3, 9), uint64], %var_6561: Tensor[(3072), float64]) -> (Tensor[(8, 3, 9), bool], Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(120, 8), float64], Tensor[(3072), float64], Tensor[(2, 13, 4), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(8, 3, 9), float64]) {
  @func_6557(%var_6559, %var_6560, %var_6561) /* ty=(Tensor[(8, 3, 9), bool], Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(120, 8), float64], Tensor[(3072), float64], Tensor[(2, 13, 4), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(8, 3, 9), float64]) */
}

def @func_3333() -> (Tensor[(2, 13, 4), float32],) {
  %92 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %90 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %91 = %90.0;
    (%91,)
  };
  %92() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_4488() -> Tensor[(2, 13, 4), float32] {
  %93 = fn () -> Tensor[(2, 13, 4), float32] {
    @func_2239() /* ty=Tensor[(2, 13, 4), float32] */
  };
  %93() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_7896() -> (Tensor[(2, 13, 4), float32],) {
  %94 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %95 = %94.0;
  (%95,)
}

def @func_2390(%var_2388: Tensor[(3072), float64], %var_2389: float32) -> (Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) {
  @func_2386(%var_2388, %var_2389) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */
}

def @func_2570() -> Tensor[(2, 13, 4), float32] {
  %97 = fn () -> Tensor[(2, 13, 4), float32] {
    %96 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %96.0
  };
  %97() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5721() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %98 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %99 = %98.0;
  %100 = @func_3398() /* ty=Tensor[(2, 13, 4), float32] */;
  (%99, %100)
}

def @func_6925() -> Tensor[(2, 13, 4), float32] {
  @func_6923() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_128(%var_126: Tensor[(12, 16, 16), float64], %var_127: Tensor[(12, 16, 16), float64]) -> (Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) {
  @func_124(%var_126, %var_127) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */
}

def @func_7898() -> (Tensor[(2, 13, 4), float32],) {
  @func_7896() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_4468() -> (Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) {
  %101 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %102 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %103 = %101.1;
  %104 = %102.0;
  (%103, %104)
}

def @func_2484(%var_2468: Tensor[(2, 13, 4), float32], %var_2475: Tensor[(2, 13, 4), float32]) -> (Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) {
  %105 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %106 = %105.0;
  %107 = cast(%var_2468, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %111 = cast(%var_2475, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %112 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%106, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = logical_or(%109, %110) /* ty=Tensor[(2, 13, 4), bool] */;
  %116 = less(%113, %114) /* ty=Tensor[(2, 13, 4), bool] */;
  (%115, %116)
}

def @func_3168(%var_3147: Tensor[(5, 16, 11), int64], %var_3148: Tensor[(5, 16, 11), int64]) -> (Tensor[(5, 16, 11), bool], Tensor[(11, 7, 7), float32], Tensor[(539), float32]) {
  %117 = cast(%var_3148, dtype="int64") /* ty=Tensor[(5, 16, 11), int64] */;
  %118 = shape_of(%var_3147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_3147, dtype="int64") /* ty=Tensor[(5, 16, 11), int64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %121 = bitwise_xor(%119, %120) /* ty=Tensor[(5, 16, 11), int64] */;
  %122 = cast(%121, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %123 = shape_of(%var_3147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_3147, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %127 = cast(meta[relay.Constant][4] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %128 = reshape(%126, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %129 = reshape(%127, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %130 = logical_or(%124, %125) /* ty=Tensor[(5, 16, 11), bool] */;
  %131 = @func_625(%128, %129) /* ty=Tensor[(11, 7, 7), float32] */;
  (%130, %131, meta[relay.Constant][4] /* ty=Tensor[(539), float32] */)
}

def @func_5737() -> Tensor[(2, 13, 4), float32] {
  %132 = fn () -> Tensor[(2, 13, 4), float32] {
    @func_2239() /* ty=Tensor[(2, 13, 4), float32] */
  };
  %132() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_3533(%var_3531: Tensor[(960), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) {
  %133 = @func_2899() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */;
  %134 = %133.0;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %136 = cast(meta[relay.Constant][5] /* ty=Tensor[(1815), uint32] */, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %137 = cast(meta[relay.Constant][5] /* ty=Tensor[(1815), uint32] */, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %138 = cast(%var_3531, dtype="float64") /* ty=Tensor[(960), float64] */;
  %139 = reshape(%136, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %140 = reshape(%137, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %141 = reshape(%138, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %142 = @func_671(%139, %140, %141) /* ty=(Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) */;
  %143 = sigmoid(%135) /* ty=Tensor[(2, 13, 4), float32] */;
  %144 = %142.3;
  (%143, %144, meta[relay.Constant][5] /* ty=Tensor[(1815), uint32] */, %var_3531)
}

def @func_547(%var_546: Tensor[(15, 8, 8), float64]) -> (Tensor[(15, 8, 8), float64],) {
  %155 = fn (%var_526: Tensor[(15, 8, 8), float64]) -> (Tensor[(15, 8, 8), float64],) {
    %145 = cast(%var_526, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
    %146 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 8, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %149 = mod(%147, %148) /* ty=Tensor[(15, 8, 8), float64] */;
    %150 = cast(%149, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
    %151 = shape_of(%var_526, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%var_526, dtype="float64") /* ty=Tensor[(15, 8, 8), float64] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %154 = minimum(%152, %153) /* ty=Tensor[(15, 8, 8), float64] */;
    (%154,)
  };
  %155(%var_546) /* ty=(Tensor[(15, 8, 8), float64],) */
}

def @func_567(%var_566: Tensor[(1, 7, 16), float32]) -> Tensor[(1, 7, 16), float32] {
  %157 = fn (%var_562: Tensor[(1, 7, 16), float32]) -> Tensor[(1, 7, 16), float32] {
    %156 = cast(%var_562, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
    exp(%156) /* ty=Tensor[(1, 7, 16), float32] */
  };
  %157(%var_566) /* ty=Tensor[(1, 7, 16), float32] */
}

def @func_2792(%var_2738: Tensor[(2, 1536), float64], %var_2773: Tensor[(112), float32], %var_2782: Tensor[(2, 44), float32]) -> (Tensor[(2, 1536), float64], Tensor[(2, 13, 4), bool], Tensor[(12, 16, 16), int64], Tensor[(1, 7, 16), float32], Tensor[(112), float32], Tensor[(2, 4, 11), float32], Tensor[(2, 44), float32], float32, Tensor[(2, 13, 4), float32]) {
  %158 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %159 = %158.0;
  %160 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %163 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%159, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = cast(%var_2738, dtype="float64") /* ty=Tensor[(2, 1536), float64] */;
  %167 = cast(%var_2738, dtype="float64") /* ty=Tensor[(2, 1536), float64] */;
  %168 = reshape(%166, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %169 = reshape(%167, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %170 = @func_124(%168, %169) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %171 = %170.1;
  %172 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 16, 16), float32] */, dtype="int64") /* ty=Tensor[(12, 16, 16), int64] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="int64") /* ty=Tensor[(12, 16, 16), int64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %176 = cast(%var_2773, dtype="float32") /* ty=Tensor[(112), float32] */;
  %177 = reshape(%176, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
  %178 = cast(%var_2782, dtype="float32") /* ty=Tensor[(2, 44), float32] */;
  %179 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 16, 16), float32] */, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  %180 = cast(-3.44529f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %181 = reshape(%178, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
  %182 = reshape(%179, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %183 = reshape(%180, newshape=[]) /* ty=float32 */;
  %184 = @func_2039(%181, %182, %183) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
  %185 = not_equal(%164, %165) /* ty=Tensor[(2, 13, 4), bool] */;
  %186 = bitwise_xor(%174, %175) /* ty=Tensor[(12, 16, 16), int64] */;
  %187 = @func_565(%177) /* ty=Tensor[(1, 7, 16), float32] */;
  %188 = %184.5;
  %189 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  (%var_2738, %185, %186, %187, %var_2773, %188, %var_2782, -3.44529f /* ty=float32 */, %189)
}

def @func_3914() -> Tensor[(2, 13, 4), float32] {
  %191 = fn () -> Tensor[(2, 13, 4), float32] {
    %190 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %190.0
  };
  %191() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_4775() -> (Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) {
  %192 = cast(meta[relay.Constant][8] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %193 = reshape(%192, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %194 = @func_3533(%193) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %195 = @func_4297() /* ty=Tensor[(12, 16, 16), float64] */;
  %196 = %194.3;
  (%195, %196, meta[relay.Constant][8] /* ty=Tensor[(960), float64] */)
}

def @func_4038() -> (Tensor[(12, 11, 14), float32],) {
  %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
  %198 = sinh(%197) /* ty=Tensor[(12, 11, 14), float32] */;
  (%198,)
}

def @func_6394(%var_6391: int64, %var_6392: Tensor[(11, 4, 4), int64], %var_6393: Tensor[(385), float64]) -> (Tensor[(11, 4, 4), float64], Tensor[(7, 11, 5), float64], Tensor[(385), float64]) {
  %207 = fn (%var_6375: int64, %var_6376: Tensor[(11, 4, 4), int64], %var_6388: Tensor[(385), float64]) -> (Tensor[(11, 4, 4), float64], Tensor[(7, 11, 5), float64], Tensor[(385), float64]) {
    %199 = cast(%var_6375, dtype="bool") /* ty=bool */;
    %200 = cast(%var_6376, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
    %201 = less(%199, %200) /* ty=Tensor[(11, 4, 4), bool] */;
    %202 = cast(%201, dtype="float64") /* ty=Tensor[(11, 4, 4), float64] */;
    %203 = cast(%var_6388, dtype="float64") /* ty=Tensor[(385), float64] */;
    %204 = reshape(%203, newshape=[7, 11, 5]) /* ty=Tensor[(7, 11, 5), float64] */;
    %205 = asinh(%202) /* ty=Tensor[(11, 4, 4), float64] */;
    %206 = @func_235(%204) /* ty=Tensor[(7, 11, 5), float64] */;
    (%205, %206, %var_6388)
  };
  %207(%var_6391, %var_6392, %var_6393) /* ty=(Tensor[(11, 4, 4), float64], Tensor[(7, 11, 5), float64], Tensor[(385), float64]) */
}

def @func_3751() -> (Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) {
  %208 = @func_3267() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) */;
  %209 = cast(meta[relay.Constant][10] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %210 = cast(meta[relay.Constant][11] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %211 = cast(meta[relay.Constant][12] /* ty=Tensor[(605, 3), uint32] */, dtype="uint32") /* ty=Tensor[(605, 3), uint32] */;
  %212 = reshape(%209, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %213 = reshape(%210, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %214 = reshape(%211, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %215 = @func_1322(%212, %213, %214) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %217 = reshape(%216, newshape=[12, 3, 15]) /* ty=Tensor[(12, 3, 15), uint8] */;
  %218 = %208.1;
  %219 = %215.4;
  %220 = @func_1472(%217) /* ty=Tensor[(12, 3, 15), bool] */;
  (%218, %219, meta[relay.Constant][10] /* ty=Tensor[(3360), float64] */, meta[relay.Constant][11] /* ty=Tensor[(539), float32] */, meta[relay.Constant][12] /* ty=Tensor[(605, 3), uint32] */, %220, meta[relay.Constant][13] /* ty=Tensor[(540), uint8] */)
}

def @func_3267() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) {
  %221 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %223 = cast(%221, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %224 = atan(%223) /* ty=Tensor[(2, 13, 4), float64] */;
  %225 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 13, 4), float32] */, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
  %226 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%221, dtype="int64") /* ty=Tensor[(2, 13, 4), int64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %229 = subtract(%227, %228) /* ty=Tensor[(2, 13, 4), int64] */;
  %230 = cast(%229, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %231 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%224, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = cos(%222) /* ty=Tensor[(2, 13, 4), float32] */;
  %235 = greater_equal(%232, %233) /* ty=Tensor[(2, 13, 4), bool] */;
  (%234, %235)
}

def @func_2149() -> (Tensor[(2, 13, 4), float32],) {
  %238 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
    %237 = asin(%236) /* ty=Tensor[(2, 13, 4), float32] */;
    (%237,)
  };
  %238() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_2488(%var_2486: Tensor[(2, 13, 4), float32], %var_2487: Tensor[(2, 13, 4), float32]) -> (Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) {
  @func_2484(%var_2486, %var_2487) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */
}

def @func_2043(%var_2040: Tensor[(2, 4, 11), float32], %var_2041: Tensor[(3072), float64], %var_2042: float32) -> (Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) {
  %254 = fn (%var_1999: Tensor[(2, 4, 11), float32], %var_2003: Tensor[(3072), float64], %var_2012: float32) -> (Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) {
    %239 = cast(%var_2003, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %240 = cast(%var_2003, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %241 = reshape(%239, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
    %242 = reshape(%240, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
    %243 = @func_124(%241, %242) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
    %244 = cast(%var_2012, dtype="float32") /* ty=float32 */;
    %245 = cast(meta[relay.Constant][16] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
    %246 = reshape(%244, newshape=[]) /* ty=float32 */;
    %247 = reshape(%245, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), float32] */;
    %248 = cast(%var_1999, dtype="float32") /* ty=Tensor[(2, 4, 11), float32] */;
    %249 = acosh(%248) /* ty=Tensor[(2, 4, 11), float32] */;
    %250 = cast(%249, dtype="float32") /* ty=Tensor[(2, 4, 11), float32] */;
    %251 = %243.0;
    %252 = @func_1204(%246, %247) /* ty=Tensor[(8, ?, 3), int64] */;
    %253 = sin(%250) /* ty=Tensor[(2, 4, 11), float32] */;
    (%251, %var_2003, %252, %var_2012, meta[relay.Constant][16] /* ty=Tensor[(24), float32] */, %253)
  };
  %254(%var_2040, %var_2041, %var_2042) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */
}

def @func_7317(%var_7316: Tensor[(12, 3, 2), float32]) -> (Tensor[(12, 3, 2), uint64],) {
  %265 = fn (%var_7297: Tensor[(12, 3, 2), float32]) -> (Tensor[(12, 3, 2), uint64],) {
    %255 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 2), float32] */;
    %256 = shape_of(%var_7297, dtype="int32") /* ty=Tensor[(3), int32] */;
    %257 = cast(%var_7297, dtype="float32") /* ty=Tensor[(12, 3, 2), float32] */;
    %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %259 = divide(%257, %258) /* ty=Tensor[(12, 3, 2), float32] */;
    %260 = cast(%259, dtype="uint64") /* ty=Tensor[(12, 3, 2), uint64] */;
    %261 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(12, 3, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 3, 2), float32] */, dtype="uint64") /* ty=Tensor[(12, 3, 2), uint64] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %264 = maximum(%262, %263) /* ty=Tensor[(12, 3, 2), uint64] */;
    (%264,)
  };
  %265(%var_7316) /* ty=(Tensor[(12, 3, 2), uint64],) */
}

def @func_4990() -> (Tensor[(2, 13, 4), float32],) {
  %267 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %266 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
    (%266,)
  };
  %267() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_5139() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(112), float32], Tensor[(2, 13, 4), float32]) {
  %275 = fn () -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(112), float32], Tensor[(2, 13, 4), float32]) {
    %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %269 = reshape(%268, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %270 = @func_3311(%269) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) */;
    %271 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %272 = @func_4487() /* ty=Tensor[(2, 13, 4), float32] */;
    %273 = %270.0;
    %274 = %271.0;
    (%272, %273, meta[relay.Constant][18] /* ty=Tensor[(112), float32] */, %274)
  };
  %275() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(112), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_124(%var_104: Tensor[(12, 16, 16), float64], %var_105: Tensor[(12, 16, 16), float64]) -> (Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) {
  %276 = cast(%var_105, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  %277 = shape_of(%var_104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%var_104, dtype="float64") /* ty=Tensor[(12, 16, 16), float64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %280 = cast(%var_105, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %281 = multiply(%278, %279) /* ty=Tensor[(12, 16, 16), float64] */;
  %282 = log(%280) /* ty=Tensor[(12, 16, 16), float32] */;
  (%281, %282)
}

def @func_2668() -> (Tensor[(2, 13, 4), float32],) {
  %284 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %283 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
    (%283,)
  };
  %284() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_4852(%var_4787: Tensor[(960), float64], %var_4815: Tensor[(3072), float64]) -> (Tensor[(12, 11, 14), float32], Tensor[(960), float64], Tensor[(960), float64], Tensor[(3072), bool], Tensor[(3072), float64], Tensor[(960), float64]) {
  %285 = @func_4038() /* ty=(Tensor[(12, 11, 14), float32],) */;
  %286 = cast(%var_4787, dtype="float64") /* ty=Tensor[(960), float64] */;
  %287 = reshape(%286, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %288 = @func_3533(%287) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %289 = @func_4578() /* ty=Tensor[(3072), float64] */;
  %290 = cast(%var_4815, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(1), int32] */;
  %292 = cast(%289, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?), bool] */;
  %294 = cast(%var_4815, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %295 = @func_4775() /* ty=(Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) */;
  %296 = %285.0;
  %297 = %288.1;
  %298 = less(%292, %293) /* ty=Tensor[(3072), bool] */;
  %299 = acosh(%294) /* ty=Tensor[(3072), float64] */;
  %300 = %295.1;
  (%296, %297, %var_4787, %298, %299, %300)
}

def @func_4287(%var_4283: Tensor[(2, 13, 4), bool], %var_4284: float32, %var_4285: Tensor[(65), float32], %var_4286: Tensor[(112), float32]) -> (Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), uint16], Tensor[(2, 13, 4), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(11, 7, 7), float32], Tensor[(539, 1), float32], Tensor[(880), int64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool], Tensor[(112), float32]) {
  %341 = fn (%var_4187: Tensor[(2, 13, 4), bool], %var_4206: float32, %var_4207: Tensor[(65), float32], %var_4275: Tensor[(112), float32]) -> (Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), uint16], Tensor[(2, 13, 4), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(11, 7, 7), float32], Tensor[(539, 1), float32], Tensor[(880), int64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool], Tensor[(112), float32]) {
    %301 = @func_2899() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */;
    %302 = %301.1;
    %303 = cast(%302, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
    %304 = cast(%302, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
    %305 = reshape(%303, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
    %306 = reshape(%304, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
    %307 = @func_2484(%305, %306) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
    %308 = %307.1;
    %309 = cast(%308, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
    %310 = cast(%308, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
    %311 = reshape(%309, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
    %312 = reshape(%310, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
    %313 = @func_2484(%311, %312) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
    %314 = %313.0;
    %315 = cast(%var_4187, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
    %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%314, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %319 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %320 = cast(%var_4206, dtype="float32") /* ty=float32 */;
    %321 = cast(%var_4207, dtype="float32") /* ty=Tensor[(65), float32] */;
    %322 = reshape(%320, newshape=[]) /* ty=float32 */;
    %323 = reshape(%321, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
    %324 = cast(meta[relay.Constant][19] /* ty=Tensor[(539, 1), float32] */, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
    %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(539, 1), float32] */, dtype="float32") /* ty=Tensor[(539, 1), float32] */;
    %326 = reshape(%324, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
    %327 = reshape(%325, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
    %328 = @func_3465() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) */;
    %329 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %330 = cast(%var_4275, dtype="float32") /* ty=Tensor[(112), float32] */;
    %331 = reshape(%330, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %332 = @func_3311(%331) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) */;
    %333 = bitwise_xor(%317, %318) /* ty=Tensor[(2, 13, 4), uint16] */;
    %334 = %319.0;
    %335 = @func_4099(%322, %323) /* ty=Tensor[(1, 13, 5), float64] */;
    %336 = @func_625(%326, %327) /* ty=Tensor[(11, 7, 7), float32] */;
    %337 = %328.1;
    %338 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
    %339 = %329.0;
    %340 = %332.1;
    (%302, %308, %333, %334, %335, %var_4206, %var_4207, %336, meta[relay.Constant][19] /* ty=Tensor[(539, 1), float32] */, %337, %338, %339, %340, %var_4275)
  };
  %341(%var_4283, %var_4284, %var_4285, %var_4286) /* ty=(Tensor[(2, 13, 4), float64], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), uint16], Tensor[(2, 13, 4), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(11, 7, 7), float32], Tensor[(539, 1), float32], Tensor[(880), int64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool], Tensor[(112), float32]) */
}

def @func_3445() -> (Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) {
  %342 = cast(meta[relay.Constant][20] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %344 = reshape(%342, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %345 = reshape(%343, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %346 = @func_124(%344, %345) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %347 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %350 = asinh(%349) /* ty=Tensor[(2, 13, 4), float64] */;
  %351 = cast(%350, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %352 = %346.1;
  %353 = acos(%351) /* ty=Tensor[(2, 13, 4), float32] */;
  (%352, meta[relay.Constant][20] /* ty=Tensor[(3072), float64] */, %353)
}

def @func_6905(%var_6901: Tensor[(12, 11, 14), float64], %var_6902: Tensor[(12, 11, 14), float64], %var_6903: float32, %var_6904: Tensor[(65), float32]) -> (Tensor[(12, 11, 14), float32], Tensor[(12, 11, 14), bool], Tensor[(12, 11, 14), int8], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(12, 11, 14), float64]) {
  %391 = fn (%var_6824: Tensor[(12, 11, 14), float64], %var_6868: Tensor[(12, 11, 14), float64], %var_6875: float32, %var_6876: Tensor[(65), float32]) -> (Tensor[(12, 11, 14), float32], Tensor[(12, 11, 14), bool], Tensor[(12, 11, 14), int8], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(12, 11, 14), float64]) {
    %354 = @func_5782() /* ty=Tensor[(12, 11, 14), int32] */;
    %355 = cast(%354, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
    %356 = rsqrt(%355) /* ty=Tensor[(12, 11, 14), float64] */;
    %357 = cast(%356, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
    %358 = cos(%357) /* ty=Tensor[(12, 11, 14), float64] */;
    %359 = cast(%var_6824, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
    %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%358, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %363 = cast(%var_6824, dtype="uint16") /* ty=Tensor[(12, 11, 14), uint16] */;
    %364 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%356, dtype="uint16") /* ty=Tensor[(12, 11, 14), uint16] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %367 = maximum(%365, %366) /* ty=Tensor[(12, 11, 14), uint16] */;
    %368 = cast(%367, dtype="bool") /* ty=Tensor[(12, 11, 14), bool] */;
    %369 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %370 = cast(%356, dtype="bool") /* ty=Tensor[(12, 11, 14), bool] */;
    %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %372 = cast(%var_6868, dtype="int8") /* ty=Tensor[(12, 11, 14), int8] */;
    %373 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%358, dtype="int8") /* ty=Tensor[(12, 11, 14), int8] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %376 = cast(%var_6875, dtype="float32") /* ty=float32 */;
    %377 = cast(%var_6876, dtype="float32") /* ty=Tensor[(65), float32] */;
    %378 = reshape(%376, newshape=[]) /* ty=float32 */;
    %379 = reshape(%377, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
    %380 = cast(%367, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
    %381 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%358, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %384 = floor_mod(%382, %383) /* ty=Tensor[(12, 11, 14), float64] */;
    %385 = cast(%384, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
    %386 = divide(%361, %362) /* ty=Tensor[(12, 11, 14), float32] */;
    %387 = equal(%370, %371) /* ty=Tensor[(12, 11, 14), bool] */;
    %388 = minimum(%374, %375) /* ty=Tensor[(12, 11, 14), int8] */;
    %389 = @func_4099(%378, %379) /* ty=Tensor[(1, 13, 5), float64] */;
    %390 = log2(%385) /* ty=Tensor[(12, 11, 14), float64] */;
    (%386, %387, %388, %389, %var_6875, %var_6876, %390)
  };
  %391(%var_6901, %var_6902, %var_6903, %var_6904) /* ty=(Tensor[(12, 11, 14), float32], Tensor[(12, 11, 14), bool], Tensor[(12, 11, 14), int8], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(12, 11, 14), float64]) */
}

def @func_6022(%var_6018: Tensor[(10, 1, 16), uint64], %var_6019: Tensor[(10, 1, 16), uint64], %var_6020: float32, %var_6021: Tensor[(65), float32]) -> (Tensor[(10, ?, 16), uint64], Tensor[(2, 13, 4), bool], Tensor[(52, 2), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32]) {
  %408 = fn (%var_5996: Tensor[(10, 1, 16), uint64], %var_5997: Tensor[(10, 1, 16), uint64], %var_6014: float32, %var_6015: Tensor[(65), float32]) -> (Tensor[(10, ?, 16), uint64], Tensor[(2, 13, 4), bool], Tensor[(52, 2), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32]) {
    %392 = cast(%var_5997, dtype="uint64") /* ty=Tensor[(10, 1, 16), uint64] */;
    %393 = shape_of(%var_5996, dtype="int32") /* ty=Tensor[(3), int32] */;
    %394 = cast(%var_5996, dtype="uint64") /* ty=Tensor[(10, 1, 16), uint64] */;
    %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %396 = cast(meta[relay.Constant][21] /* ty=Tensor[(52, 2), float32] */, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
    %397 = cast(meta[relay.Constant][21] /* ty=Tensor[(52, 2), float32] */, dtype="float32") /* ty=Tensor[(52, 2), float32] */;
    %398 = reshape(%396, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
    %399 = reshape(%397, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
    %400 = @func_2484(%398, %399) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
    %401 = cast(%var_6014, dtype="float32") /* ty=float32 */;
    %402 = cast(%var_6015, dtype="float32") /* ty=Tensor[(65), float32] */;
    %403 = reshape(%401, newshape=[]) /* ty=float32 */;
    %404 = reshape(%402, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
    %405 = maximum(%394, %395) /* ty=Tensor[(10, ?, 16), uint64] */;
    %406 = %400.0;
    %407 = @func_4099(%403, %404) /* ty=Tensor[(1, 13, 5), float64] */;
    (%405, %406, meta[relay.Constant][21] /* ty=Tensor[(52, 2), float32] */, %407, %var_6014, %var_6015)
  };
  %408(%var_6018, %var_6019, %var_6020, %var_6021) /* ty=(Tensor[(10, ?, 16), uint64], Tensor[(2, 13, 4), bool], Tensor[(52, 2), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32]) */
}

def @func_6923() -> Tensor[(2, 13, 4), float32] {
  @func_4487() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5898() -> Tensor[(3072), uint8] {
  @func_5896() /* ty=Tensor[(3072), uint8] */
}

def @func_7743() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %414 = fn () -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
    %409 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %410 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %411 = @func_6923() /* ty=Tensor[(2, 13, 4), float32] */;
    %412 = %409.0;
    %413 = %410.0;
    (%411, %412, %413)
  };
  %414() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_2700(%var_2682: Tensor[(2, 13, 4), float32], %var_2696: Tensor[(3360), float64], %var_2698: Tensor[(1815), uint32]) -> (Tensor[(2, 13, 4), uint32], Tensor[(2, 13, 4), float32], Tensor[(11, 7, 7), float32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1815), uint32]) {
  %415 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  %416 = cast(%var_2682, dtype="uint32") /* ty=Tensor[(2, 13, 4), uint32] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="uint32") /* ty=Tensor[(2, 13, 4), uint32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %420 = cast(%415, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %421 = cast(%var_2696, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %422 = cast(meta[relay.Constant][22] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %423 = cast(%var_2698, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %424 = reshape(%421, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %425 = reshape(%422, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %426 = reshape(%423, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %427 = @func_1322(%424, %425, %426) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %428 = bitwise_and(%418, %419) /* ty=Tensor[(2, 13, 4), uint32] */;
  %429 = erf(%420) /* ty=Tensor[(2, 13, 4), float32] */;
  %430 = %427.1;
  (%428, %429, %430, %var_2696, meta[relay.Constant][22] /* ty=Tensor[(539), float32] */, %var_2698)
}

def @func_2561() -> Tensor[(2, 13, 4), float32] {
  @func_2559() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_6117(%var_6115: Tensor[(16, 16, 9), float32]) -> (Tensor[(16, 16, 9), float32], Tensor[(10, 5, 6), float32], Tensor[(5, 60), float64]) {
  @func_6114(%var_6115) /* ty=(Tensor[(16, 16, 9), float32], Tensor[(10, 5, 6), float32], Tensor[(5, 60), float64]) */
}

def @func_625(%var_608: Tensor[(11, 7, 7), float32], %var_609: Tensor[(11, 7, 7), float32]) -> Tensor[(11, 7, 7), float32] {
  %431 = cast(%var_609, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
  %432 = shape_of(%var_608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_608, dtype="float32") /* ty=Tensor[(11, 7, 7), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%433, %434) /* ty=Tensor[(11, 7, 7), float32] */
}

def @func_4579() -> Tensor[(3072), float64] {
  %436 = fn () -> Tensor[(3072), float64] {
    %435 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
    %435.1
  };
  %436() /* ty=Tensor[(3072), float64] */
}

def @func_5693() -> Tensor[(2, 13, 4), float32] {
  %437 = @func_5380() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */;
  %437.1
}

def @func_4102(%var_4100: float32, %var_4101: Tensor[(1, 13, 5), float32]) -> Tensor[(1, 13, 5), float64] {
  %442 = fn (%var_4070: float32, %var_4071: Tensor[(1, 13, 5), float32]) -> Tensor[(1, 13, 5), float64] {
    %438 = cast(%var_4070, dtype="float32") /* ty=float32 */;
    %439 = cast(%var_4071, dtype="float32") /* ty=Tensor[(1, 13, 5), float32] */;
    %440 = divide(%438, %439) /* ty=Tensor[(1, 13, 5), float32] */;
    %441 = cast(%440, dtype="float64") /* ty=Tensor[(1, 13, 5), float64] */;
    sigmoid(%441) /* ty=Tensor[(1, 13, 5), float64] */
  };
  %442(%var_4100, %var_4101) /* ty=Tensor[(1, 13, 5), float64] */
}

def @func_1322(%var_1302: Tensor[(15, 16, 14), float64], %var_1308: Tensor[(539), float32], %var_1312: Tensor[(1815), uint32]) -> (Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) {
  %443 = cast(%var_1302, dtype="float64") /* ty=Tensor[(15, 16, 14), float64] */;
  %444 = cast(%var_1308, dtype="float32") /* ty=Tensor[(539), float32] */;
  %445 = cast(%var_1308, dtype="float32") /* ty=Tensor[(539), float32] */;
  %446 = reshape(%444, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %447 = reshape(%445, newshape=[11, 7, 7]) /* ty=Tensor[(11, 7, 7), float32] */;
  %448 = cast(%var_1312, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %449 = cast(%var_1312, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %450 = cast(meta[relay.Constant][23] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %451 = reshape(%448, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %452 = reshape(%449, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), uint32] */;
  %453 = reshape(%450, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %454 = @func_671(%451, %452, %453) /* ty=(Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) */;
  %455 = log10(%443) /* ty=Tensor[(15, 16, 14), float64] */;
  %456 = @func_625(%446, %447) /* ty=Tensor[(11, 7, 7), float32] */;
  %457 = %454.0;
  (%455, %456, %var_1308, %457, %var_1312, meta[relay.Constant][23] /* ty=Tensor[(960), float64] */)
}

def @func_2281(%var_2268: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), float32] {
  %458 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %461 = tan(%460) /* ty=Tensor[(2, 13, 4), float64] */;
  %462 = cast(%var_2268, dtype="int8") /* ty=Tensor[(2, 13, 4), int8] */;
  %463 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%459, dtype="int8") /* ty=Tensor[(2, 13, 4), int8] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %466 = add(%464, %465) /* ty=Tensor[(2, 13, 4), int8] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %468 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%461, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%469, %470) /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_6287() -> Tensor[(2, 13, 4), bool] {
  @func_6285() /* ty=Tensor[(2, 13, 4), bool] */
}

def @func_5007() -> (Tensor[(2, 13, 4), float32],) {
  %473 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %471 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %472 = %471.0;
    (%472,)
  };
  %473() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_3172(%var_3170: Tensor[(5, 16, 11), int64], %var_3171: Tensor[(5, 16, 11), int64]) -> (Tensor[(5, 16, 11), bool], Tensor[(11, 7, 7), float32], Tensor[(539), float32]) {
  @func_3168(%var_3170, %var_3171) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(11, 7, 7), float32], Tensor[(539), float32]) */
}

def @func_675(%var_672: Tensor[(11, 11, 15), uint32], %var_673: Tensor[(11, 11, 15), uint32], %var_674: Tensor[(960), float64]) -> (Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) {
  %488 = fn (%var_648: Tensor[(11, 11, 15), uint32], %var_649: Tensor[(11, 11, 15), uint32], %var_669: Tensor[(960), float64]) -> (Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) {
    %474 = cast(%var_649, dtype="uint32") /* ty=Tensor[(11, 11, 15), uint32] */;
    %475 = shape_of(%var_648, dtype="int32") /* ty=Tensor[(3), int32] */;
    %476 = cast(%var_648, dtype="uint32") /* ty=Tensor[(11, 11, 15), uint32] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %478 = cast(%var_649, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
    %479 = shape_of(%var_648, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%var_648, dtype="bool") /* ty=Tensor[(11, 11, 15), bool] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %482 = cast(%var_669, dtype="float64") /* ty=Tensor[(960), float64] */;
    %483 = reshape(%482, newshape=[15, 8, 8]) /* ty=Tensor[(15, 8, 8), float64] */;
    %484 = @func_545(%483) /* ty=(Tensor[(15, 8, 8), float64],) */;
    %485 = right_shift(%476, %477) /* ty=Tensor[(11, 11, 15), uint32] */;
    %486 = less_equal(%480, %481) /* ty=Tensor[(11, 11, 15), bool] */;
    %487 = %484.0;
    (%485, %486, %487, %var_669)
  };
  %488(%var_672, %var_673, %var_674) /* ty=(Tensor[(11, 11, 15), uint32], Tensor[(11, 11, 15), bool], Tensor[(15, 8, 8), float64], Tensor[(960), float64]) */
}

def @func_2386(%var_2356: Tensor[(3072), float64], %var_2357: float32) -> (Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) {
  %489 = cast(meta[relay.Constant][24] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %490 = cast(%var_2356, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %491 = cast(%var_2357, dtype="float32") /* ty=float32 */;
  %492 = reshape(%489, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
  %493 = reshape(%490, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %494 = reshape(%491, newshape=[]) /* ty=float32 */;
  %495 = @func_2039(%492, %493, %494) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
  %496 = cast(meta[relay.Constant][25] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
  %497 = reshape(%496, newshape=[12, 3, 15]) /* ty=Tensor[(12, 3, 15), uint8] */;
  %498 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %499 = %498.0;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(2, 13, 4), float64] */;
  %501 = acosh(%500) /* ty=Tensor[(2, 13, 4), float64] */;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %503 = cast(%var_2356, dtype="float32") /* ty=Tensor[(3072), float32] */;
  %504 = %495.4;
  %505 = @func_1472(%497) /* ty=Tensor[(12, 3, 15), bool] */;
  %506 = sinh(%502) /* ty=Tensor[(2, 13, 4), float32] */;
  %507 = asinh(%503) /* ty=Tensor[(3072), float32] */;
  (%504, meta[relay.Constant][24] /* ty=Tensor[(88), float32] */, %var_2357, %505, meta[relay.Constant][25] /* ty=Tensor[(540), uint8] */, %506, %507)
}

def @func_3694(%var_3692: Tensor[(104), float32]) -> (Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) {
  @func_3691(%var_3692) /* ty=(Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) */
}

def @func_7405() -> (Tensor[(2, 13, 4), float32], Tensor[(1815), bool], Tensor[(1815), float32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) {
  %528 = fn () -> (Tensor[(2, 13, 4), float32], Tensor[(1815), bool], Tensor[(1815), float32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) {
    %508 = @func_4989() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %509 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
    %510 = %509.1;
    %511 = cast(%510, dtype="float32") /* ty=Tensor[(1815), float32] */;
    %512 = log2(%511) /* ty=Tensor[(1815), float32] */;
    %513 = cast(%510, dtype="bool") /* ty=Tensor[(1815), bool] */;
    %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(1), int32] */;
    %515 = cast(%512, dtype="bool") /* ty=Tensor[(1815), bool] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?), bool] */;
    %517 = cast(%510, dtype="float64") /* ty=Tensor[(1815), float64] */;
    %518 = acos(%517) /* ty=Tensor[(1815), float64] */;
    %519 = cast(%518, dtype="float32") /* ty=Tensor[(1815), float32] */;
    %520 = shape_of(%512, dtype="int32") /* ty=Tensor[(1), int32] */;
    %521 = cast(%512, dtype="float32") /* ty=Tensor[(1815), float32] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?), float32] */;
    %523 = %508.0;
    %524 = greater(%515, %516) /* ty=Tensor[(1815), bool] */;
    %525 = multiply(%521, %522) /* ty=Tensor[(1815), float32] */;
    %526 = @func_5936() /* ty=Tensor[(2, 13, 4), bool] */;
    %527 = @func_4536() /* ty=Tensor[(2, 13, 4), float32] */;
    (%523, %524, %525, %526, %527)
  };
  %528() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(1815), bool], Tensor[(1815), float32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) */
}

def @func_4668() -> (Tensor[(2, 13, 4), bool],) {
  %535 = fn () -> (Tensor[(2, 13, 4), bool],) {
    %529 = @func_4536() /* ty=Tensor[(2, 13, 4), float32] */;
    %530 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
    %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%529, dtype="bool") /* ty=Tensor[(2, 13, 4), bool] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %534 = logical_and(%532, %533) /* ty=Tensor[(2, 13, 4), bool] */;
    (%534,)
  };
  %535() /* ty=(Tensor[(2, 13, 4), bool],) */
}

def @func_5784() -> Tensor[(12, 11, 14), int32] {
  @func_5782() /* ty=Tensor[(12, 11, 14), int32] */
}

def @func_4536() -> Tensor[(2, 13, 4), float32] {
  %536 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %536.0
}

def @func_237(%var_236: Tensor[(7, 11, 5), float64]) -> Tensor[(7, 11, 5), float64] {
  %543 = fn (%var_214: Tensor[(7, 11, 5), float64]) -> Tensor[(7, 11, 5), float64] {
    %537 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 11, 5), float64] */, dtype="bool") /* ty=Tensor[(1, 11, 5), bool] */;
    %538 = cast(%var_214, dtype="bool") /* ty=Tensor[(7, 11, 5), bool] */;
    %539 = equal(%537, %538) /* ty=Tensor[(7, 11, 5), bool] */;
    %540 = cast(%539, dtype="float64") /* ty=Tensor[(7, 11, 5), float64] */;
    %541 = cos(%540) /* ty=Tensor[(7, 11, 5), float64] */;
    %542 = cast(%541, dtype="float64") /* ty=Tensor[(7, 11, 5), float64] */;
    atanh(%542) /* ty=Tensor[(7, 11, 5), float64] */
  };
  %543(%var_236) /* ty=Tensor[(7, 11, 5), float64] */
}

def @func_5984() -> (Tensor[(3072), float64], Tensor[(112), float32], Tensor[(112), float32], Tensor[(3072), bool], Tensor[(88), float32]) {
  %544 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %545 = %544.1;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %547 = cast(meta[relay.Constant][28] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %548 = cast(meta[relay.Constant][29] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %549 = reshape(%546, newshape=[2, 1536]) /* ty=Tensor[(2, 1536), float64] */;
  %550 = reshape(%547, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %551 = reshape(%548, newshape=[2, 44]) /* ty=Tensor[(2, 44), float32] */;
  %552 = @func_2792(%549, %550, %551) /* ty=(Tensor[(2, 1536), float64], Tensor[(2, 13, 4), bool], Tensor[(12, 16, 16), int64], Tensor[(1, 7, 16), float32], Tensor[(112), float32], Tensor[(2, 4, 11), float32], Tensor[(2, 44), float32], float32, Tensor[(2, 13, 4), float32]) */;
  %553 = cast(%545, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %554 = reshape(%553, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %555 = @func_5448(%554) /* ty=(Tensor[(3072), bool],) */;
  %556 = cast(meta[relay.Constant][29] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %557 = %552.4;
  %558 = %555.0;
  %559 = rsqrt(%556) /* ty=Tensor[(88), float32] */;
  (%545, %557, meta[relay.Constant][28] /* ty=Tensor[(112), float32] */, %558, %559)
}

def @func_7051() -> (Tensor[(12, 16, 16), float32], Tensor[(2, 13, 4), float32]) {
  @func_7049() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_7706() -> (Tensor[(880), int64], Tensor[(104), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(1815), float32], Tensor[(3072), float64]) {
  %575 = fn () -> (Tensor[(880), int64], Tensor[(104), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(1815), float32], Tensor[(3072), float64]) {
    %560 = cast(meta[relay.Constant][30] /* ty=Tensor[(104), float32] */, dtype="float32") /* ty=Tensor[(104), float32] */;
    %561 = reshape(%560, newshape=[104]) /* ty=Tensor[(104), float32] */;
    %562 = @func_3691(%561) /* ty=(Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) */;
    %563 = cast(-0.266995f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %564 = cast(meta[relay.Constant][31] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %565 = reshape(%563, newshape=[]) /* ty=float32 */;
    %566 = reshape(%564, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
    %567 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
    %568 = %567.1;
    %569 = cast(%568, dtype="float32") /* ty=Tensor[(1815), float32] */;
    %570 = @func_7633() /* ty=(Tensor[(3072), float64], Tensor[(12, 16, 16), float32]) */;
    %571 = %562.3;
    %572 = @func_4099(%565, %566) /* ty=Tensor[(1, 13, 5), float64] */;
    %573 = sin(%569) /* ty=Tensor[(1815), float32] */;
    %574 = %570.0;
    (%571, meta[relay.Constant][30] /* ty=Tensor[(104), float32] */, %572, -0.266995f /* ty=float32 */, meta[relay.Constant][31] /* ty=Tensor[(65), float32] */, %573, %574)
  };
  %575() /* ty=(Tensor[(880), int64], Tensor[(104), float32], Tensor[(1, 13, 5), float64], float32, Tensor[(65), float32], Tensor[(1815), float32], Tensor[(3072), float64]) */
}

def @func_3398() -> Tensor[(2, 13, 4), float32] {
  %576 = @func_3267() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) */;
  %576.0
}

def @func_3400() -> Tensor[(2, 13, 4), float32] {
  @func_3398() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5896() -> Tensor[(3072), uint8] {
  %577 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %578 = %577.1;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %580 = sinh(%579) /* ty=Tensor[(3072), float64] */;
  %581 = cast(%578, dtype="uint8") /* ty=Tensor[(3072), uint8] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(1), int32] */;
  %583 = cast(%580, dtype="uint8") /* ty=Tensor[(3072), uint8] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?), uint8] */;
  minimum(%583, %584) /* ty=Tensor[(3072), uint8] */
}

def @func_3635(%var_3633: Tensor[(3072), float64], %var_3634: float32) -> (Tensor[(2, 13, 4), float32], Tensor[(88), float32], Tensor[(3072), float64], float32) {
  %595 = fn (%var_3615: Tensor[(3072), float64], %var_3616: float32) -> (Tensor[(2, 13, 4), float32], Tensor[(88), float32], Tensor[(3072), float64], float32) {
    %585 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %586 = %585.0;
    %587 = cast(%586, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
    %588 = cast(%var_3615, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %589 = cast(%var_3616, dtype="float32") /* ty=float32 */;
    %590 = reshape(%588, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
    %591 = reshape(%589, newshape=[]) /* ty=float32 */;
    %592 = @func_2386(%590, %591) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */;
    %593 = atanh(%587) /* ty=Tensor[(2, 13, 4), float32] */;
    %594 = %592.1;
    (%593, %594, %var_3615, %var_3616)
  };
  %595(%var_3633, %var_3634) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(88), float32], Tensor[(3072), float64], float32) */
}

def @func_3193() -> (Tensor[(2, 13, 4), float32],) {
  %597 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %596 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
    (%596,)
  };
  %597() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_3577() -> Tensor[(2, 13, 4), float32] {
  %599 = fn () -> Tensor[(2, 13, 4), float32] {
    %598 = @func_3267() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), bool]) */;
    %598.0
  };
  %599() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_4856(%var_4854: Tensor[(960), float64], %var_4855: Tensor[(3072), float64]) -> (Tensor[(12, 11, 14), float32], Tensor[(960), float64], Tensor[(960), float64], Tensor[(3072), bool], Tensor[(3072), float64], Tensor[(960), float64]) {
  @func_4852(%var_4854, %var_4855) /* ty=(Tensor[(12, 11, 14), float32], Tensor[(960), float64], Tensor[(960), float64], Tensor[(3072), bool], Tensor[(3072), float64], Tensor[(960), float64]) */
}

def @func_2977(%var_2974: Tensor[(44, 2), float32], %var_2975: Tensor[(3072), float64], %var_2976: float32) -> (Tensor[(2, 13, 4), float32], float32, Tensor[(44, 2), float32], Tensor[(3072), float64], float32) {
  @func_2972(%var_2974, %var_2975, %var_2976) /* ty=(Tensor[(2, 13, 4), float32], float32, Tensor[(44, 2), float32], Tensor[(3072), float64], float32) */
}

def @func_5513() -> (Tensor[(12, 11, 14), float32], Tensor[(2, 13, 4), float32]) {
  %603 = fn () -> (Tensor[(12, 11, 14), float32], Tensor[(2, 13, 4), float32]) {
    %600 = @func_4038() /* ty=(Tensor[(12, 11, 14), float32],) */;
    %601 = %600.0;
    %602 = @func_4487() /* ty=Tensor[(2, 13, 4), float32] */;
    (%601, %602)
  };
  %603() /* ty=(Tensor[(12, 11, 14), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_3536(%var_3534: Tensor[(960), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) {
  @func_3533(%var_3534) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(1815), uint32], Tensor[(960), float64]) */
}

def @func_6620(%var_6618: Tensor[(3360), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(3360), float64], Tensor[(1815), uint32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) {
  @func_6617(%var_6618) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(3360), float64], Tensor[(1815), uint32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) */
}

def @func_3447() -> (Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) {
  @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */
}

def @main(%var_7915: Tensor[(1815), uint32]) -> (Tensor[(96, 32), float64], Tensor[(14, 240), float64], Tensor[(1815), uint32], Tensor[(10, 9, 9), bool], Tensor[(15, 6), float32], Tensor[(2, 13, 4), float32], float32, Tensor[(2, 13, 4), bool], Tensor[(539), float64]) {
  %604 = @func_5039() /* ty=(Tensor[(96, 32), float64],) */;
  %605 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
  %606 = reshape(%605, newshape=[10, 1, 9]) /* ty=Tensor[(10, 1, 9), float32] */;
  %607 = @func_183(%606) /* ty=(Tensor[(10, 9, 9), bool],) */;
  %608 = @func_5038() /* ty=(Tensor[(96, 32), float64],) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(96, 32), float64] */;
  %611 = cast(-7.00386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %612 = reshape(%610, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %613 = reshape(%611, newshape=[]) /* ty=float32 */;
  %614 = @func_2390(%612, %613) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */;
  %615 = cast(%609, dtype="float64") /* ty=Tensor[(96, 32), float64] */;
  %616 = cast(-7.00386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %617 = reshape(%615, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %618 = reshape(%616, newshape=[]) /* ty=float32 */;
  %619 = @func_2386(%617, %618) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */;
  %620 = %619.5;
  %621 = cast(%620, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %622 = cast(%620, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %623 = reshape(%621, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %624 = reshape(%622, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %625 = @func_2488(%623, %624) /* ty=(Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), bool]) */;
  %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %627 = tan(%626) /* ty=Tensor[(539), float32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(539), float64] */;
  %629 = cos(%628) /* ty=Tensor[(539), float64] */;
  %630 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 240), float64] */, dtype="float64") /* ty=Tensor[(14, 240), float64] */;
  %631 = cast(meta[relay.Constant][34] /* ty=Tensor[(539), float32] */, dtype="float32") /* ty=Tensor[(539), float32] */;
  %632 = cast(%var_7915, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %633 = reshape(%630, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %634 = reshape(%631, newshape=[539]) /* ty=Tensor[(539), float32] */;
  %635 = reshape(%632, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %636 = @func_1327(%633, %634, %635) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */;
  %637 = %636.1;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(11, 7, 7), float64] */;
  %639 = shape_of(%627, dtype="int32") /* ty=Tensor[(1), int32] */;
  %640 = cast(%627, dtype="float64") /* ty=Tensor[(539), float64] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?), float64] */;
  %642 = multiply(%640, %641) /* ty=Tensor[(539), float64] */;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(539), float64] */;
  %644 = shape_of(%629, dtype="int32") /* ty=Tensor[(1), int32] */;
  %645 = cast(%629, dtype="float64") /* ty=Tensor[(539), float64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?), float64] */;
  %647 = %604.0;
  %648 = %607.0;
  %649 = %614.5;
  %650 = %625.1;
  %651 = divide(%645, %646) /* ty=Tensor[(539), float64] */;
  (%647, meta[relay.Constant][32] /* ty=Tensor[(14, 240), float64] */, %var_7915, %648, meta[relay.Constant][33] /* ty=Tensor[(15, 6), float32] */, %649, -7.00386f /* ty=float32 */, %650, %651)
}

def @func_1327(%var_1324: Tensor[(15, 16, 14), float64], %var_1325: Tensor[(539), float32], %var_1326: Tensor[(1815), uint32]) -> (Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) {
  @func_1322(%var_1324, %var_1325, %var_1326) /* ty=(Tensor[(15, 16, 14), float64], Tensor[(11, 7, 7), float32], Tensor[(539), float32], Tensor[(11, 11, 15), uint32], Tensor[(1815), uint32], Tensor[(960), float64]) */
}

def @func_6114(%var_6099: Tensor[(16, 16, 9), float32]) -> (Tensor[(16, 16, 9), float32], Tensor[(10, 5, 6), float32], Tensor[(5, 60), float64]) {
  %652 = cast(%var_6099, dtype="float32") /* ty=Tensor[(16, 16, 9), float32] */;
  %653 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 60), float64] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %654 = reshape(%653, newshape=[10, 5, 6]) /* ty=Tensor[(10, 5, 6), float64] */;
  %655 = @func_5838(%654) /* ty=(Tensor[(10, 5, 6), float32],) */;
  %656 = atanh(%652) /* ty=Tensor[(16, 16, 9), float32] */;
  %657 = %655.0;
  (%656, %657, meta[relay.Constant][35] /* ty=Tensor[(5, 60), float64] */)
}

def @func_7049() -> (Tensor[(12, 16, 16), float32], Tensor[(2, 13, 4), float32]) {
  %658 = @func_6990() /* ty=Tensor[(12, 16, 16), float64] */;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(12, 16, 16), float32] */;
  %660 = acos(%659) /* ty=Tensor[(12, 16, 16), float32] */;
  %661 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  (%660, %661)
}

def @func_5484() -> (Tensor[(2, 13, 4), float32], Tensor[(8, ?, 3), int64], float32, Tensor[(24, 1), float32]) {
  %669 = fn () -> (Tensor[(2, 13, 4), float32], Tensor[(8, ?, 3), int64], float32, Tensor[(24, 1), float32]) {
    %662 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %663 = cast(-3.95655f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %664 = cast(meta[relay.Constant][36] /* ty=Tensor[(24, 1), float32] */, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
    %665 = reshape(%663, newshape=[]) /* ty=float32 */;
    %666 = reshape(%664, newshape=[8, 1, 3]) /* ty=Tensor[(8, 1, 3), float32] */;
    %667 = %662.0;
    %668 = @func_1204(%665, %666) /* ty=Tensor[(8, ?, 3), int64] */;
    (%667, %668, -3.95655f /* ty=float32 */, meta[relay.Constant][36] /* ty=Tensor[(24, 1), float32] */)
  };
  %669() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(8, ?, 3), int64], float32, Tensor[(24, 1), float32]) */
}

def @func_5986() -> (Tensor[(3072), float64], Tensor[(112), float32], Tensor[(112), float32], Tensor[(3072), bool], Tensor[(88), float32]) {
  @func_5984() /* ty=(Tensor[(3072), float64], Tensor[(112), float32], Tensor[(112), float32], Tensor[(3072), bool], Tensor[(88), float32]) */
}

def @func_1208(%var_1206: float32, %var_1207: Tensor[(8, 1, 3), float32]) -> Tensor[(8, ?, 3), int64] {
  @func_1204(%var_1206, %var_1207) /* ty=Tensor[(8, ?, 3), int64] */
}

def @func_2972(%var_2967: Tensor[(44, 2), float32], %var_2968: Tensor[(3072), float64], %var_2969: float32) -> (Tensor[(2, 13, 4), float32], float32, Tensor[(44, 2), float32], Tensor[(3072), float64], float32) {
  %670 = cast(%var_2967, dtype="float32") /* ty=Tensor[(44, 2), float32] */;
  %671 = cast(%var_2968, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %672 = cast(%var_2969, dtype="float32") /* ty=float32 */;
  %673 = reshape(%670, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
  %674 = reshape(%671, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %675 = reshape(%672, newshape=[]) /* ty=float32 */;
  %676 = @func_2039(%673, %674, %675) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
  %677 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  %678 = %676.3;
  (%677, %678, %var_2967, %var_2968, %var_2969)
}

def @func_5297() -> Tensor[(2, 13, 4), float32] {
  %680 = fn () -> Tensor[(2, 13, 4), float32] {
    %679 = @func_2667() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %679.0
  };
  %680() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_3753() -> (Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) {
  @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */
}

def @func_5404() -> Tensor[(2, 13, 4), float32] {
  @func_5402() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5318() -> (Tensor[(3072), float64],) {
  %682 = fn () -> (Tensor[(3072), float64],) {
    %681 = @func_4578() /* ty=Tensor[(3072), float64] */;
    (%681,)
  };
  %682() /* ty=(Tensor[(3072), float64],) */
}

def @func_6221() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  @func_6219() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_5840(%var_5839: Tensor[(10, 5, 6), float64]) -> (Tensor[(10, 5, 6), float32],) {
  %690 = fn (%var_5828: Tensor[(10, 5, 6), float64]) -> (Tensor[(10, 5, 6), float32],) {
    %683 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 6), float64] */;
    %684 = sigmoid(%683) /* ty=Tensor[(10, 5, 6), float64] */;
    %685 = cast(%var_5828, dtype="float32") /* ty=Tensor[(10, 5, 6), float32] */;
    %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%684, dtype="float32") /* ty=Tensor[(10, 5, 6), float32] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %689 = floor_mod(%687, %688) /* ty=Tensor[(10, 5, 6), float32] */;
    (%689,)
  };
  %690(%var_5839) /* ty=(Tensor[(10, 5, 6), float32],) */
}

def @func_5448(%var_5442: Tensor[(3072), float64]) -> (Tensor[(3072), bool],) {
  %691 = @func_4578() /* ty=Tensor[(3072), float64] */;
  %692 = cast(%var_5442, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(1), int32] */;
  %694 = cast(%691, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), bool] */;
  %696 = logical_and(%694, %695) /* ty=Tensor[(3072), bool] */;
  (%696,)
}

def @func_5937() -> Tensor[(2, 13, 4), bool] {
  %698 = fn () -> Tensor[(2, 13, 4), bool] {
    %697 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
    %697.0
  };
  %698() /* ty=Tensor[(2, 13, 4), bool] */
}

def @func_3985() -> (Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) {
  %699 = cast(meta[relay.Constant][38] /* ty=Tensor[(96, 32), float64] */, dtype="float64") /* ty=Tensor[(96, 32), float64] */;
  %700 = cast(meta[relay.Constant][38] /* ty=Tensor[(96, 32), float64] */, dtype="float64") /* ty=Tensor[(96, 32), float64] */;
  %701 = reshape(%699, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %702 = reshape(%700, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
  %703 = @func_124(%701, %702) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
  %704 = @func_3795() /* ty=Tensor[(12, 3, 15), bool] */;
  %705 = %703.0;
  (%704, %705, meta[relay.Constant][38] /* ty=Tensor[(96, 32), float64] */)
}

def @func_5182() -> (Tensor[(3072), float64], Tensor[(3072), float64], Tensor[(12, 3, 15), float32]) {
  %706 = @func_3445() /* ty=(Tensor[(12, 16, 16), float32], Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */;
  %707 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
  %708 = %707.5;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %710 = acosh(%709) /* ty=Tensor[(12, 3, 15), float64] */;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(12, 3, 15), float32] */;
  %712 = @func_4578() /* ty=Tensor[(3072), float64] */;
  %713 = %706.1;
  %714 = log10(%711) /* ty=Tensor[(12, 3, 15), float32] */;
  (%712, %713, %714)
}

def @func_6557(%var_6482: Tensor[(8, 3, 9), uint64], %var_6483: Tensor[(8, 3, 9), uint64], %var_6500: Tensor[(3072), float64]) -> (Tensor[(8, 3, 9), bool], Tensor[(2, 13, 4), float32], Tensor[(960), float64], Tensor[(120, 8), float64], Tensor[(3072), float64], Tensor[(2, 13, 4), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(8, 3, 9), float64]) {
  %715 = cast(%var_6483, dtype="bool") /* ty=Tensor[(8, 3, 9), bool] */;
  %716 = shape_of(%var_6482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_6482, dtype="bool") /* ty=Tensor[(8, 3, 9), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %719 = @func_5721() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */;
  %720 = cast(meta[relay.Constant][39] /* ty=Tensor[(120, 8), float64] */, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
  %721 = cast(%var_6500, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %722 = reshape(%720, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %723 = reshape(%721, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %724 = @func_4852(%722, %723) /* ty=(Tensor[(12, 11, 14), float32], Tensor[(960), float64], Tensor[(960), float64], Tensor[(3072), bool], Tensor[(3072), float64], Tensor[(960), float64]) */;
  %725 = cast(%var_6500, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %726 = cast(4.83732f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %727 = reshape(%725, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %728 = reshape(%726, newshape=[]) /* ty=float32 */;
  %729 = @func_3632(%727, %728) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(88), float32], Tensor[(3072), float64], float32) */;
  %730 = cast(%var_6500, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %731 = cast(4.83732f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %732 = reshape(%730, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %733 = reshape(%731, newshape=[]) /* ty=float32 */;
  %734 = @func_2386(%732, %733) /* ty=(Tensor[(24), float32], Tensor[(88), float32], float32, Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 13, 4), float32], Tensor[(3072), float32]) */;
  %735 = cast(%var_6482, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
  %736 = less_equal(%717, %718) /* ty=Tensor[(8, 3, 9), bool] */;
  %737 = %719.0;
  %738 = %724.1;
  %739 = %729.0;
  %740 = %734.3;
  %741 = sqrt(%735) /* ty=Tensor[(8, 3, 9), float64] */;
  (%736, %737, %738, meta[relay.Constant][39] /* ty=Tensor[(120, 8), float64] */, %var_6500, %739, 4.83732f /* ty=float32 */, %740, %741)
}

def @func_2649(%var_2648: Tensor[(2, 8, 11), float32]) -> (Tensor[(2, 13, 4), float32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 8, 11), float64]) {
  %751 = fn (%var_2602: Tensor[(2, 8, 11), float32]) -> (Tensor[(2, 13, 4), float32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 8, 11), float64]) {
    %742 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %743 = cast(meta[relay.Constant][40] /* ty=Tensor[(540), uint8] */, dtype="uint8") /* ty=Tensor[(540), uint8] */;
    %744 = reshape(%743, newshape=[12, 3, 15]) /* ty=Tensor[(12, 3, 15), uint8] */;
    %745 = cast(%var_2602, dtype="float32") /* ty=Tensor[(2, 8, 11), float32] */;
    %746 = log10(%745) /* ty=Tensor[(2, 8, 11), float32] */;
    %747 = cast(%746, dtype="float64") /* ty=Tensor[(2, 8, 11), float64] */;
    %748 = %742.0;
    %749 = @func_1472(%744) /* ty=Tensor[(12, 3, 15), bool] */;
    %750 = atanh(%747) /* ty=Tensor[(2, 8, 11), float64] */;
    (%748, %749, meta[relay.Constant][40] /* ty=Tensor[(540), uint8] */, %750)
  };
  %751(%var_2648) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8], Tensor[(2, 8, 11), float64]) */
}

def @func_4298() -> Tensor[(12, 16, 16), float64] {
  %753 = fn () -> Tensor[(12, 16, 16), float64] {
    %752 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
    %752.1
  };
  %753() /* ty=Tensor[(12, 16, 16), float64] */
}

def @func_3691(%var_3664: Tensor[(104), float32]) -> (Tensor[(880), int64], Tensor[(2, 13, 4), uint16], Tensor[(104), float32], Tensor[(880), int64]) {
  %754 = @func_3465() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) */;
  %755 = cast(%var_3664, dtype="float32") /* ty=Tensor[(104), float32] */;
  %756 = reshape(%755, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %757 = @func_3465() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) */;
  %758 = %754.1;
  %759 = @func_3128(%756) /* ty=Tensor[(2, 13, 4), uint16] */;
  %760 = %757.1;
  (%758, %759, %var_3664, %760)
}

def @func_5039() -> (Tensor[(96, 32), float64],) {
  %763 = fn () -> (Tensor[(96, 32), float64],) {
    %761 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
    %762 = %761.2;
    (%762,)
  };
  %763() /* ty=(Tensor[(96, 32), float64],) */
}

def @func_5676(%var_5675: Tensor[(16, 7, 13), float64]) -> (Tensor[(16, 7, 13), float64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %768 = fn (%var_5649: Tensor[(16, 7, 13), float64]) -> (Tensor[(16, 7, 13), float64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
    %764 = cast(%var_5649, dtype="float64") /* ty=Tensor[(16, 7, 13), float64] */;
    %765 = asinh(%764) /* ty=Tensor[(16, 7, 13), float64] */;
    %766 = @func_4487() /* ty=Tensor[(2, 13, 4), float32] */;
    %767 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
    (%765, %766, %767)
  };
  %768(%var_5675) /* ty=(Tensor[(16, 7, 13), float64], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_2184() -> (Tensor[(2, 13, 4), float32],) {
  %771 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %769 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %770 = %769.0;
    (%770,)
  };
  %771() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_7487() -> (Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), bool], Tensor[(3072), float64]) {
  %786 = fn () -> (Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), bool], Tensor[(3072), float64]) {
    %772 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
    %773 = cast(meta[relay.Constant][41] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %774 = cast(meta[relay.Constant][41] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %775 = reshape(%773, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
    %776 = reshape(%774, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), float64] */;
    %777 = @func_124(%775, %776) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(12, 16, 16), float32]) */;
    %778 = %777.0;
    %779 = cast(meta[relay.Constant][41] /* ty=Tensor[(3072), float64] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
    %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%778, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %783 = %772.0;
    %784 = logical_and(%781, %782) /* ty=Tensor[(12, 16, 16), bool] */;
    %785 = @func_4578() /* ty=Tensor[(3072), float64] */;
    (%783, %784, %785)
  };
  %786() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), bool], Tensor[(3072), float64]) */
}

def @func_3797() -> Tensor[(12, 3, 15), bool] {
  @func_3795() /* ty=Tensor[(12, 3, 15), bool] */
}

def @func_4470() -> (Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) {
  @func_4468() /* ty=(Tensor[(3072), float64], Tensor[(2, 13, 4), float32]) */
}

def @func_6219() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  %787 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %788 = @func_5006() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %789 = %787.0;
  %790 = %788.0;
  (%789, %790)
}

def @func_5551(%var_5549: Tensor[(88), float32], %var_5550: Tensor[(3072), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(12, 16, 16), float64], Tensor[(88), float32], Tensor[(3072), float64], float32, Tensor[(2, 13, 4), bool]) {
  %803 = fn (%var_5526: Tensor[(88), float32], %var_5527: Tensor[(3072), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(12, 16, 16), float64], Tensor[(88), float32], Tensor[(3072), float64], float32, Tensor[(2, 13, 4), bool]) {
    %791 = @func_5138() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(112), float32], Tensor[(2, 13, 4), float32]) */;
    %792 = cast(%var_5526, dtype="float32") /* ty=Tensor[(88), float32] */;
    %793 = cast(%var_5527, dtype="float64") /* ty=Tensor[(3072), float64] */;
    %794 = cast(-3.72701f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %795 = reshape(%792, newshape=[2, 4, 11]) /* ty=Tensor[(2, 4, 11), float32] */;
    %796 = reshape(%793, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
    %797 = reshape(%794, newshape=[]) /* ty=float32 */;
    %798 = @func_2039(%795, %796, %797) /* ty=(Tensor[(12, 16, 16), float64], Tensor[(3072), float64], Tensor[(8, ?, 3), int64], float32, Tensor[(24), float32], Tensor[(2, 4, 11), float32]) */;
    %799 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
    %800 = %791.3;
    %801 = %798.0;
    %802 = %799.0;
    (%800, %801, %var_5526, %var_5527, -3.72701f /* ty=float32 */, %802)
  };
  %803(%var_5549, %var_5550) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(12, 16, 16), float64], Tensor[(88), float32], Tensor[(3072), float64], float32, Tensor[(2, 13, 4), bool]) */
}

def @func_629(%var_627: Tensor[(11, 7, 7), float32], %var_628: Tensor[(11, 7, 7), float32]) -> Tensor[(11, 7, 7), float32] {
  @func_625(%var_627, %var_628) /* ty=Tensor[(11, 7, 7), float32] */
}

def @func_5695() -> Tensor[(2, 13, 4), float32] {
  @func_5693() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_4718() -> Tensor[(2, 13, 4), float64] {
  %805 = fn () -> Tensor[(2, 13, 4), float64] {
    %804 = @func_2899() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */;
    %804.1
  };
  %805() /* ty=Tensor[(2, 13, 4), float64] */
}

def @func_3314(%var_3312: Tensor[(112), float32]) -> (Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) {
  @func_3311(%var_3312) /* ty=(Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) */
}

def @func_4538() -> Tensor[(2, 13, 4), float32] {
  @func_4536() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_2938(%var_2930: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), float32],) {
  %806 = cast(%var_2930, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %807 = atan(%806) /* ty=Tensor[(7, 15, 9), float32] */;
  (%807,)
}

def @func_3130(%var_3129: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), uint16] {
  %814 = fn (%var_3120: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), uint16] {
    %808 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
    %809 = %808.0;
    %810 = cast(%var_3120, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
    %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%809, dtype="uint16") /* ty=Tensor[(2, 13, 4), uint16] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    maximum(%812, %813) /* ty=Tensor[(2, 13, 4), uint16] */
  };
  %814(%var_3129) /* ty=Tensor[(2, 13, 4), uint16] */
}

def @func_7133() -> (Tensor[(14, 10, 1), float32],) {
  %817 = fn () -> (Tensor[(14, 10, 1), float32],) {
    %815 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
    %816 = exp(%815) /* ty=Tensor[(14, 10, 1), float32] */;
    (%816,)
  };
  %817() /* ty=(Tensor[(14, 10, 1), float32],) */
}

def @func_6617(%var_6581: Tensor[(3360), float64]) -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(3360), float64], Tensor[(1815), uint32], Tensor[(2, 13, 4), bool], Tensor[(2, 13, 4), float32]) {
  %818 = @func_2239() /* ty=Tensor[(2, 13, 4), float32] */;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(2, 13, 4), float32] */;
  %820 = cast(%var_6581, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %821 = cast(meta[relay.Constant][43] /* ty=Tensor[(1815), uint32] */, dtype="uint32") /* ty=Tensor[(1815), uint32] */;
  %822 = reshape(%819, newshape=[2, 13, 4]) /* ty=Tensor[(2, 13, 4), float32] */;
  %823 = reshape(%820, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %824 = reshape(%821, newshape=[1815]) /* ty=Tensor[(1815), uint32] */;
  %825 = @func_2700(%822, %823, %824) /* ty=(Tensor[(2, 13, 4), uint32], Tensor[(2, 13, 4), float32], Tensor[(11, 7, 7), float32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1815), uint32]) */;
  %826 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
  %827 = %825.1;
  %828 = %826.0;
  %829 = @func_2569() /* ty=Tensor[(2, 13, 4), float32] */;
  (%818, %827, %var_6581, meta[relay.Constant][43] /* ty=Tensor[(1815), uint32] */, %828, %829)
}

def @func_6473() -> (Tensor[(2, 13, 4), float32],) {
  %831 = fn () -> (Tensor[(2, 13, 4), float32],) {
    %830 = @func_6418() /* ty=Tensor[(2, 13, 4), float32] */;
    (%830,)
  };
  %831() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_7112() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) {
  @func_7110() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float64]) */
}

def @func_6285() -> Tensor[(2, 13, 4), bool] {
  %832 = @func_4667() /* ty=(Tensor[(2, 13, 4), bool],) */;
  %832.0
}

def @func_6356(%var_6355: Tensor[(3, 12, 15), float32]) -> Tensor[(3, 12, 15), float32] {
  %834 = fn (%var_6346: Tensor[(3, 12, 15), float32]) -> Tensor[(3, 12, 15), float32] {
    %833 = cast(%var_6346, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
    sqrt(%833) /* ty=Tensor[(3, 12, 15), float32] */
  };
  %834(%var_6355) /* ty=Tensor[(3, 12, 15), float32] */
}

def @func_6234() -> Tensor[(11, 14, 6), float32] {
  %835 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 6), float32] */;
  exp(%835) /* ty=Tensor[(11, 14, 6), float32] */
}

def @func_3465() -> (Tensor[(2, 13, 4), float32], Tensor[(880), int64], Tensor[(11, 7, 7), float64]) {
  %836 = @func_2148() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %837 = cast(meta[relay.Constant][45] /* ty=Tensor[(880), int64] */, dtype="int64") /* ty=Tensor[(880), int64] */;
  %838 = cast(meta[relay.Constant][45] /* ty=Tensor[(880), int64] */, dtype="int64") /* ty=Tensor[(880), int64] */;
  %839 = reshape(%837, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
  %840 = reshape(%838, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
  %841 = @func_3168(%839, %840) /* ty=(Tensor[(5, 16, 11), bool], Tensor[(11, 7, 7), float32], Tensor[(539), float32]) */;
  %842 = %841.1;
  %843 = cast(%842, dtype="float64") /* ty=Tensor[(11, 7, 7), float64] */;
  %844 = %836.0;
  %845 = rsqrt(%843) /* ty=Tensor[(11, 7, 7), float64] */;
  (%844, meta[relay.Constant][45] /* ty=Tensor[(880), int64] */, %845)
}

def @func_6759() -> (Tensor[(12, 11, 14), int32], Tensor[(3072), uint8]) {
  %848 = fn () -> (Tensor[(12, 11, 14), int32], Tensor[(3072), uint8]) {
    %846 = @func_5782() /* ty=Tensor[(12, 11, 14), int32] */;
    %847 = @func_5896() /* ty=Tensor[(3072), uint8] */;
    (%846, %847)
  };
  %848() /* ty=(Tensor[(12, 11, 14), int32], Tensor[(3072), uint8]) */
}

def @func_2797(%var_2794: Tensor[(2, 1536), float64], %var_2795: Tensor[(112), float32], %var_2796: Tensor[(2, 44), float32]) -> (Tensor[(2, 1536), float64], Tensor[(2, 13, 4), bool], Tensor[(12, 16, 16), int64], Tensor[(1, 7, 16), float32], Tensor[(112), float32], Tensor[(2, 4, 11), float32], Tensor[(2, 44), float32], float32, Tensor[(2, 13, 4), float32]) {
  @func_2792(%var_2794, %var_2795, %var_2796) /* ty=(Tensor[(2, 1536), float64], Tensor[(2, 13, 4), bool], Tensor[(12, 16, 16), int64], Tensor[(1, 7, 16), float32], Tensor[(112), float32], Tensor[(2, 4, 11), float32], Tensor[(2, 44), float32], float32, Tensor[(2, 13, 4), float32]) */
}

def @func_5723() -> (Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) {
  @func_5721() /* ty=(Tensor[(2, 13, 4), float32], Tensor[(2, 13, 4), float32]) */
}

def @func_1474(%var_1473: Tensor[(12, 3, 15), uint8]) -> Tensor[(12, 3, 15), bool] {
  %853 = fn (%var_1465: Tensor[(12, 3, 15), uint8]) -> Tensor[(12, 3, 15), bool] {
    %849 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 3, 15), uint8] */, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
    %850 = shape_of(%var_1465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%var_1465, dtype="bool") /* ty=Tensor[(12, 3, 15), bool] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%851, %852) /* ty=Tensor[(12, 3, 15), bool] */
  };
  %853(%var_1473) /* ty=Tensor[(12, 3, 15), bool] */
}

def @func_4777() -> (Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) {
  @func_4775() /* ty=(Tensor[(12, 16, 16), float64], Tensor[(960), float64], Tensor[(960), float64]) */
}

def @func_2559() -> Tensor[(2, 13, 4), float32] {
  @func_2239() /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_5402() -> Tensor[(2, 13, 4), float32] {
  %854 = @func_3192() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %854.0
}

def @func_2284(%var_2282: Tensor[(2, 13, 4), float32]) -> Tensor[(2, 13, 4), float32] {
  @func_2281(%var_2282) /* ty=Tensor[(2, 13, 4), float32] */
}

def @func_6991() -> Tensor[(12, 16, 16), float64] {
  %856 = fn () -> Tensor[(12, 16, 16), float64] {
    %855 = @func_3985() /* ty=(Tensor[(12, 3, 15), bool], Tensor[(12, 16, 16), float64], Tensor[(96, 32), float64]) */;
    %855.1
  };
  %856() /* ty=Tensor[(12, 16, 16), float64] */
}

def @func_2705(%var_2702: Tensor[(2, 13, 4), float32], %var_2703: Tensor[(3360), float64], %var_2704: Tensor[(1815), uint32]) -> (Tensor[(2, 13, 4), uint32], Tensor[(2, 13, 4), float32], Tensor[(11, 7, 7), float32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1815), uint32]) {
  @func_2700(%var_2702, %var_2703, %var_2704) /* ty=(Tensor[(2, 13, 4), uint32], Tensor[(2, 13, 4), float32], Tensor[(11, 7, 7), float32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(1815), uint32]) */
}

def @func_7194() -> (Tensor[(2, 13, 4), float32],) {
  @func_7192() /* ty=(Tensor[(2, 13, 4), float32],) */
}

def @func_2239() -> Tensor[(2, 13, 4), float32] {
  %857 = @func_2183() /* ty=(Tensor[(2, 13, 4), float32],) */;
  %857.0
}

def @func_183(%var_181: Tensor[(10, 1, 9), float32]) -> (Tensor[(10, 9, 9), bool],) {
  @func_180(%var_181) /* ty=(Tensor[(10, 9, 9), bool],) */
}

def @func_3311(%var_3285: Tensor[(112), float32]) -> (Tensor[(2, 13, 4), float32], Tensor[(?, 7, 16), bool]) {
  %858 = cast(%var_3285, dtype="float32") /* ty=Tensor[(112), float32] */;
  %859 = reshape(%858, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
  %860 = @func_565(%859) /* ty=Tensor[(1, 7, 16), float32] */;
  %861 = cast(%var_3285, dtype="bool") /* ty=Tensor[(112), bool] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="bool") /* ty=Tensor[(1, 7, 16), bool] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %865 = @func_2559() /* ty=Tensor[(2, 13, 4), float32] */;
  %866 = greater(%863, %864) /* ty=Tensor[(?, 7, 16), bool] */;
  (%865, %866)
}

def @func_2941(%var_2939: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), float32],) {
  @func_2938(%var_2939) /* ty=(Tensor[(7, 15, 9), float32],) */
}

def @func_6236() -> Tensor[(11, 14, 6), float32] {
  @func_6234() /* ty=Tensor[(11, 14, 6), float32] */
}

def @func_3795() -> Tensor[(12, 3, 15), bool] {
  %867 = @func_3751() /* ty=(Tensor[(2, 13, 4), bool], Tensor[(1815), uint32], Tensor[(3360), float64], Tensor[(539), float32], Tensor[(605, 3), uint32], Tensor[(12, 3, 15), bool], Tensor[(540), uint8]) */;
  %867.5
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen439/build/output.py", line 2247, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:17:44] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

