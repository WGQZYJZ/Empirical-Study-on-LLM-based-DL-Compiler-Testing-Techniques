==========mod==========
#[version = "0.0.5"]
def @func_5093() -> (Tensor[(462), int16], Tensor[(180), uint64]) {
  %0 = @func_3932() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %1 = @func_2227() /* ty=Tensor[(462), int16] */;
  %2 = %0.1;
  (%1, %2)
}

def @func_6830(%var_6792: Tensor[(630), float32]) -> (Tensor[(180), uint64], Tensor[(462), int16], Tensor[(630), float32], Tensor[(180), uint64]) {
  %3 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %4 = cast(%var_6792, dtype="float32") /* ty=Tensor[(630), float32] */;
  %5 = reshape(%4, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float32] */;
  %6 = @func_4595(%5) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %7 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %8 = %3.0;
  %9 = %6.3;
  %10 = %7.0;
  (%8, %9, %var_6792, %10)
}

def @func_7665() -> Tensor[(1, 6, 15), float64] {
  %11 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %11.0
}

def @func_2227() -> Tensor[(462), int16] {
  @func_1468() /* ty=Tensor[(462), int16] */
}

def @func_11911(%var_11905: Tensor[(13, 140), int32]) -> Tensor[(13, 140), bool] {
  %12 = @func_7640() /* ty=(Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) */;
  %13 = %12.0;
  %14 = cast(%13, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
  %15 = cast(%var_11905, dtype="bool") /* ty=Tensor[(13, 140), bool] */;
  less(%14, %15) /* ty=Tensor[(13, 140), bool] */
}

def @func_5525() -> (Tensor[(1, 6, 15), float64],) {
  %16 = @func_3734() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %17 = %16.1;
  (%17,)
}

def @func_7640() -> (Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) {
  %18 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
  %19 = @func_5519() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %20 = %19.0;
  %21 = cast(%20, dtype="uint64") /* ty=Tensor[(1, 6, 15), uint64] */;
  %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 15), float64] */, dtype="uint64") /* ty=Tensor[(14, 6, 15), uint64] */;
  %23 = add(%21, %22) /* ty=Tensor[(14, 6, 15), uint64] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 6, 15), float64] */, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = %18.2;
  %29 = less(%26, %27) /* ty=Tensor[(14, 6, 15), bool] */;
  (%28, %29)
}

def @func_4279(%var_4270: Tensor[(5, 6, 15), float64]) -> (Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) {
  %30 = @func_3259() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %33 = cast(%var_4270, dtype="int64") /* ty=Tensor[(5, 6, 15), int64] */;
  %34 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %35 = minimum(%32, %33) /* ty=Tensor[(5, 6, 15), int64] */;
  (%34, %35)
}

def @func_8677(%var_8666: Tensor[(1152), int8]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1152), int8]) {
  %36 = @func_8637() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %37 = cast(%var_8666, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %38 = cast(%var_8666, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %39 = reshape(%37, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), int8] */;
  %40 = reshape(%38, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), int8] */;
  %41 = @func_7541(%39, %40) /* ty=(Tensor[(12, 12, 8), int8], Tensor[(1, 6, 15), float64]) */;
  %42 = %36.0;
  %43 = %41.1;
  (%42, %43, %var_8666)
}

def @func_11286() -> Tensor[(14, 8, 2), float32] {
  %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 8, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  %45 = cosh(%44) /* ty=Tensor[(14, 8, 2), float32] */;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  asin(%46) /* ty=Tensor[(14, 8, 2), float32] */
}

def @func_9419(%var_9404: Tensor[(16, 7, 15), float64]) -> (Tensor[(16, 7, 15), float64],) {
  %47 = cast(%var_9404, dtype="float64") /* ty=Tensor[(16, 7, 15), float64] */;
  %48 = atanh(%47) /* ty=Tensor[(16, 7, 15), float64] */;
  (%48,)
}

def @func_10407() -> Tensor[(180), uint64] {
  @func_1947() /* ty=Tensor[(180), uint64] */
}

def @func_7330() -> (Tensor[(180), uint64],) {
  %49 = @func_5031() /* ty=(Tensor[(180), uint64],) */;
  %50 = %49.0;
  (%50,)
}

def @func_7160() -> Tensor[(462), int16] {
  @func_4292() /* ty=Tensor[(462), int16] */
}

def @func_7956(%var_7938: Tensor[(1, 1, 14), float32], %var_7939: Tensor[(13, 3, 14), float32]) -> Tensor[(13, 3, 14), float32] {
  %51 = cast(%var_7938, dtype="float32") /* ty=Tensor[(1, 1, 14), float32] */;
  %52 = cast(%var_7939, dtype="float32") /* ty=Tensor[(13, 3, 14), float32] */;
  floor_divide(%51, %52) /* ty=Tensor[(13, 3, 14), float32] */
}

def @func_5503() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %53 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %54 = @func_5308() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %55 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %56 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %59 = %53.0;
  %60 = %54.0;
  %61 = %55.0;
  %62 = cosh(%58) /* ty=Tensor[(1, 6, 15), float64] */;
  (%59, %60, %61, %62)
}

def @func_3613() -> (Tensor[(1, 6, 15), float32],) {
  %63 = @func_2941() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %64 = %63.0;
  (%64,)
}

def @func_6555() -> (Tensor[(462), int16],) {
  %65 = @func_4901() /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) */;
  %66 = %65.1;
  (%66,)
}

def @func_2587() -> Tensor[(?, 6, 15), float64] {
  %67 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %69 = sinh(%68) /* ty=Tensor[(1, 6, 15), float32] */;
  %70 = cast(%67, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %74 = floor_divide(%72, %73) /* ty=Tensor[(?, 6, 15), float32] */;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(?, 6, 15), float64] */;
  %76 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%69, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%77, %78) /* ty=Tensor[(?, 6, 15), float64] */
}

def @func_4595(%var_4546: Tensor[(7, 6, 15), float32]) -> (Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
  %79 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
  %80 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %81 = %80.0;
  %82 = cast(%81, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  %83 = cast(%var_4546, dtype="int8") /* ty=Tensor[(7, 6, 15), int8] */;
  %84 = right_shift(%82, %83) /* ty=Tensor[(7, 6, 15), int8] */;
  %85 = cast(%84, dtype="int16") /* ty=Tensor[(7, 6, 15), int16] */;
  %86 = shape_of(%var_4546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_4546, dtype="int16") /* ty=Tensor[(7, 6, 15), int16] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %89 = %79.1;
  %90 = maximum(%87, %88) /* ty=Tensor[(7, 6, 15), int16] */;
  %91 = @func_3700() /* ty=Tensor[(1, 6, 15), float64] */;
  %92 = @func_3301() /* ty=Tensor[(462), int16] */;
  (%89, %90, %91, %92)
}

def @func_8211() -> Tensor[(180), uint64] {
  %93 = @func_7415() /* ty=(Tensor[(180), uint64],) */;
  %93.0
}

def @func_9297(%var_9275: Tensor[(5, 13, 9), float64]) -> Tensor[(5, 13, 9), float64] {
  %94 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 9), float64] */;
  %95 = shape_of(%var_9275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_9275, dtype="float64") /* ty=Tensor[(5, 13, 9), float64] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%96, %97) /* ty=Tensor[(5, 13, 9), float64] */
}

def @func_5865(%var_5848: Tensor[(450), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(5, 6, 15), int64], Tensor[(450), float64], Tensor[(1, 6, 15), float32]) {
  %98 = cast(%var_5848, dtype="float64") /* ty=Tensor[(450), float64] */;
  %99 = reshape(%98, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %100 = @func_4279(%99) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) */;
  %101 = @func_2941() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %102 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
  %103 = %100.1;
  %104 = %101.0;
  (%102, %103, %var_5848, %104)
}

def @func_8252() -> (Tensor[(462), int16], Tensor[(462), int16]) {
  %105 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %106 = @func_7479() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %107 = %105.0;
  %108 = %106.1;
  (%107, %108)
}

def @func_9767() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  %109 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %110 = @func_8507() /* ty=Tensor[(180), uint64] */;
  %111 = %109.0;
  (%110, %111)
}

def @func_13026(%var_13020: Tensor[(13, 1, 7), float64]) -> (Tensor[(13, 1, 7), float64], Tensor[(180), uint64]) {
  %112 = cast(%var_13020, dtype="float64") /* ty=Tensor[(13, 1, 7), float64] */;
  %113 = @func_10178() /* ty=(Tensor[(180), uint64],) */;
  %114 = atanh(%112) /* ty=Tensor[(13, 1, 7), float64] */;
  %115 = %113.0;
  (%114, %115)
}

def @func_1088(%var_1056: Tensor[(30, 6), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) {
  %116 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %118 = cast(%var_1056, dtype="uint64") /* ty=Tensor[(30, 6), uint64] */;
  %119 = reshape(%118, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), uint64] */;
  %120 = @func_447(%119) /* ty=(Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) */;
  %121 = asin(%117) /* ty=Tensor[(1, 6, 15), float64] */;
  %122 = %120.0;
  %123 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  (%121, %122, %var_1056, %123)
}

def @func_10668(%var_10663: Tensor[(13, 9, 3), float64], %var_10664: Tensor[(13, 9, 3), float64]) -> Tensor[(13, 9, 3), float64] {
  %124 = cast(%var_10664, dtype="float64") /* ty=Tensor[(13, 9, 3), float64] */;
  %125 = shape_of(%var_10663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_10663, dtype="float64") /* ty=Tensor[(13, 9, 3), float64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%126, %127) /* ty=Tensor[(13, 9, 3), float64] */
}

def @func_10947() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %128 = @func_7415() /* ty=(Tensor[(180), uint64],) */;
  %129 = @func_10407() /* ty=Tensor[(180), uint64] */;
  %130 = %128.0;
  (%129, %130)
}

def @func_6078() -> Tensor[(1, 6, 15), float64] {
  %131 = @func_5503() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %132 = %131.3;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  tan(%133) /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_7204() -> (Tensor[(180), uint64],) {
  %134 = @func_4916() /* ty=Tensor[(180), uint64] */;
  (%134,)
}

def @func_8507() -> Tensor[(180), uint64] {
  %135 = @func_5031() /* ty=(Tensor[(180), uint64],) */;
  %135.0
}

def @func_9224(%var_9213: Tensor[(462), int16]) -> Tensor[(462), float32] {
  %136 = @func_6555() /* ty=(Tensor[(462), int16],) */;
  %137 = %136.0;
  %138 = cast(%var_9213, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(1), int32] */;
  %140 = cast(%137, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %142 = bitwise_xor(%140, %141) /* ty=Tensor[(462), uint16] */;
  %143 = cast(%var_9213, dtype="float32") /* ty=Tensor[(462), float32] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(1), int32] */;
  %145 = cast(%142, dtype="float32") /* ty=Tensor[(462), float32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?), float32] */;
  mod(%145, %146) /* ty=Tensor[(462), float32] */
}

def @func_7146() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %147 = @func_1456() /* ty=Tensor[(180), uint64] */;
  %148 = @func_1947() /* ty=Tensor[(180), uint64] */;
  (%147, %148)
}

def @func_12590() -> Tensor[(462), int16] {
  @func_4292() /* ty=Tensor[(462), int16] */
}

def @func_1033() -> Tensor[(1, 6, 15), float64] {
  %149 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  exp(%149) /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_3908() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) {
  %150 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %151 = @func_2473() /* ty=Tensor[(180), uint64] */;
  %152 = cast(%151, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %153 = reshape(%152, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %154 = @func_1139(%153) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %155 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
  %156 = %150.0;
  %157 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
  %158 = %154.0;
  %159 = %155.9;
  (%151, %156, %157, %158, %159)
}

def @func_6303() -> (Tensor[(462), int16],) {
  %160 = @func_2227() /* ty=Tensor[(462), int16] */;
  (%160,)
}

def @func_8637() -> (Tensor[(1, 6, 15), float64],) {
  %161 = @func_7524() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
  %162 = %161.1;
  (%162,)
}

def @func_12711() -> Tensor[(180), uint64] {
  @func_4916() /* ty=Tensor[(180), uint64] */
}

def @func_5722() -> Tensor[(180), uint64] {
  @func_3081() /* ty=Tensor[(180), uint64] */
}

def @func_6455() -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) {
  %163 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %164 = %163.0;
  %165 = @func_3734() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %166 = %165.1;
  %167 = cast(%166, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %168 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%164, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %171 = power(%169, %170) /* ty=Tensor[(?, 6, 15), float64] */;
  %172 = @func_4916() /* ty=Tensor[(180), uint64] */;
  (%171, %172)
}

def @func_4155() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %173 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %174 = %173.1;
  %175 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  (%174, %175)
}

def @func_7849() -> (Tensor[(462), int16],) {
  %176 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
  %177 = %176.0;
  (%177,)
}

def @func_9042(%var_9020: float32, %var_9021: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %178 = cast(%var_9020, dtype="float32") /* ty=float32 */;
  %179 = cast(%var_9021, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %180 = @func_5374() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %181 = mod(%178, %179) /* ty=Tensor[(2, 14, 14), float32] */;
  %182 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %183 = %180.1;
  (%181, %182, %183)
}

def @func_3259() -> (Tensor[(1, 6, 15), float64],) {
  %184 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %185 = %184.0;
  (%185,)
}

def @func_10801() -> Tensor[(1, 6, 15), float64] {
  %186 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %186.0
}

def @func_5261() -> (Tensor[(180), uint64],) {
  %187 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
  %188 = %187.0;
  (%188,)
}

def @func_5339() -> (Tensor[(462), int16],) {
  %189 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
  %190 = %189.0;
  (%190,)
}

def @func_5418(%var_5397: Tensor[(14, 6, 15), float64], %var_5403: uint16) -> (Tensor[(462), int16], Tensor[(14, 6, 15), uint8], Tensor[(3, 5, 3), float32], uint16, Tensor[(45), uint16]) {
  %191 = @func_4025() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %192 = %191.0;
  %193 = cast(%192, dtype="uint8") /* ty=Tensor[(1, 6, 15), uint8] */;
  %194 = cast(%var_5397, dtype="uint8") /* ty=Tensor[(14, 6, 15), uint8] */;
  %195 = cast(%var_5403, dtype="uint16") /* ty=uint16 */;
  %196 = cast(meta[relay.Constant][4] /* ty=Tensor[(45), uint16] */, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %197 = reshape(%195, newshape=[]) /* ty=uint16 */;
  %198 = reshape(%196, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), uint16] */;
  %199 = @func_2034(%197, %198) /* ty=(Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) */;
  %200 = @func_4292() /* ty=Tensor[(462), int16] */;
  %201 = bitwise_or(%193, %194) /* ty=Tensor[(14, 6, 15), uint8] */;
  %202 = %199.1;
  (%200, %201, %202, %var_5403, meta[relay.Constant][4] /* ty=Tensor[(45), uint16] */)
}

def @func_1592() -> (Tensor[(180), uint64],) {
  %203 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %204 = %203.1;
  (%204,)
}

def @func_5308() -> (Tensor[(1, 6, 15), float64],) {
  %205 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %208 = asinh(%207) /* ty=Tensor[(1, 6, 15), float64] */;
  (%208,)
}

def @func_8146() -> (Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  %209 = @func_5622() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) */;
  %210 = @func_4084() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %211 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
  %212 = %209.0;
  %213 = %210.0;
  %214 = %211.0;
  (%212, %213, %214)
}

def @func_10115() -> (Tensor[(462), int16], Tensor[(11, 11, 8), float32]) {
  %215 = @func_5780() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %216 = @func_8405() /* ty=Tensor[(462), int16] */;
  %217 = %215.0;
  (%216, %217)
}

def @func_7906() -> (Tensor[(462), int16], Tensor[(462), int16]) {
  %218 = @func_3301() /* ty=Tensor[(462), int16] */;
  %219 = @func_6689() /* ty=Tensor[(462), int16] */;
  (%218, %219)
}

def @func_9655() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), int64], Tensor[(90), float64]) {
  %220 = @func_5374() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %221 = @func_8146() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %222 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %223 = reshape(%222, newshape=[1, 6, 15]) /* ty=Tensor[(1, 6, 15), float64] */;
  %224 = %220.1;
  %225 = %221.2;
  %226 = @func_9554(%223) /* ty=Tensor[(?, 6, 15), int64] */;
  (%224, %225, %226, meta[relay.Constant][5] /* ty=Tensor[(90), float64] */)
}

def @func_9695() -> Tensor[(180), uint64] {
  %227 = @func_6533() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %227.1
}

def @func_7524() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %228 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %229 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %230 = %228.0;
  %231 = %229.0;
  (%230, %231)
}

def @func_4429() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %232 = @func_2620() /* ty=(Tensor[(180), uint64],) */;
  %233 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %234 = %232.0;
  %235 = %233.1;
  (%234, %235)
}

def @func_6041() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %236 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %237 = @func_2698() /* ty=(Tensor[(180), uint64],) */;
  %238 = %236.0;
  %239 = %237.0;
  (%238, %239)
}

def @func_11260() -> (Tensor[(?, 6, 15), float64], Tensor[(?, 6, 15), int64]) {
  %240 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(?, 6, 15), float64] */;
  %242 = reshape(%241, newshape=[1, 6, 15]) /* ty=Tensor[(1, 6, 15), float64] */;
  %243 = @func_9554(%242) /* ty=Tensor[(?, 6, 15), int64] */;
  (%240, %243)
}

def @func_12065(%var_12049: Tensor[(1, 14), float32], %var_12050: Tensor[(546), float32]) -> (Tensor[(180), uint64], Tensor[(462), float32], Tensor[(13, 3, 14), float32], Tensor[(1, 14), float32], Tensor[(546), float32]) {
  %244 = @func_9676() /* ty=(Tensor[(180), uint64],) */;
  %245 = @func_7849() /* ty=(Tensor[(462), int16],) */;
  %246 = %245.0;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(462), float32] */;
  %248 = cast(%var_12049, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
  %249 = cast(%var_12050, dtype="float32") /* ty=Tensor[(546), float32] */;
  %250 = reshape(%248, newshape=[1, 1, 14]) /* ty=Tensor[(1, 1, 14), float32] */;
  %251 = reshape(%249, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float32] */;
  %252 = %244.0;
  %253 = exp(%247) /* ty=Tensor[(462), float32] */;
  %254 = @func_7956(%250, %251) /* ty=Tensor[(13, 3, 14), float32] */;
  (%252, %253, %254, %var_12049, %var_12050)
}

def @func_9267(%var_9261: Tensor[(462), int16]) -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(1, 6, 15), float64], Tensor[(462), bool]) {
  %255 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %256 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %257 = @func_5480() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %258 = @func_8252() /* ty=(Tensor[(462), int16], Tensor[(462), int16]) */;
  %259 = %258.1;
  %260 = cast(%var_9261, dtype="bool") /* ty=Tensor[(462), bool] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(1), int32] */;
  %262 = cast(%259, dtype="bool") /* ty=Tensor[(462), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?), bool] */;
  %264 = %255.0;
  %265 = %256.0;
  %266 = %257.1;
  %267 = equal(%262, %263) /* ty=Tensor[(462), bool] */;
  (%264, %265, %266, %267)
}

def @func_11951() -> (Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) {
  %268 = @func_5669() /* ty=(Tensor[(180), uint64],) */;
  %269 = @func_9106() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) */;
  %270 = %268.0;
  %271 = %269.2;
  (%270, %271)
}

def @main(%var_13232: Tensor[(180, 1), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180, 1), uint64], Tensor[(462), int16], Tensor[(?, 6, 15), int8]) {
  %272 = @func_1940() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %273 = cast(%var_13232, dtype="uint64") /* ty=Tensor[(180, 1), uint64] */;
  %274 = reshape(%273, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %275 = @func_2163(%274) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %276 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %277 = @func_4025() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %278 = %277.0;
  %279 = @func_10801() /* ty=Tensor[(1, 6, 15), float64] */;
  %280 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %283 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%279, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %286 = subtract(%284, %285) /* ty=Tensor[(?, 6, 15), int64] */;
  %287 = cast(%286, dtype="int8") /* ty=Tensor[(?, 6, 15), int8] */;
  %288 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%278, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %291 = %272.1;
  %292 = %275.1;
  %293 = %276.0;
  %294 = right_shift(%289, %290) /* ty=Tensor[(?, 6, 15), int8] */;
  (%291, %292, %var_13232, %293, %294)
}

def @func_9588() -> Tensor[(?, 6, 15), float64] {
  @func_2587() /* ty=Tensor[(?, 6, 15), float64] */
}

def @func_4084() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  %295 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %296 = %295.0;
  %297 = @func_3301() /* ty=Tensor[(462), int16] */;
  (%296, %297)
}

def @func_9808() -> Tensor[(1, 6, 15), float64] {
  %298 = @func_7524() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
  %298.1
}

def @func_2473() -> Tensor[(180), uint64] {
  %299 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %299.0
}

def @func_13172() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(16, 6, 15), int16], Tensor[(180), uint64]) {
  %300 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %301 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
  %302 = %301.6;
  %303 = cast(%302, dtype="int16") /* ty=Tensor[(1, 6, 15), int16] */;
  %304 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 6, 15), float64] */, dtype="int16") /* ty=Tensor[(16, 6, 15), int16] */;
  %305 = @func_9808() /* ty=Tensor[(1, 6, 15), float64] */;
  %306 = %300.0;
  %307 = bitwise_and(%303, %304) /* ty=Tensor[(16, 6, 15), int16] */;
  %308 = @func_10229() /* ty=Tensor[(180), uint64] */;
  (%305, %306, %307, %308)
}

def @func_11571(%var_11476: Tensor[(4, 6, 15), float64], %var_11496: Tensor[(630), float32]) -> (Tensor[(4, 6, 15), int32], Tensor[(630), float32], Tensor[(630), float32], Tensor[(1, 6, 15), float64], Tensor[(4, 6, 15), float32], Tensor[(180), uint64], Tensor[(4, 6, 15), float64], Tensor[(4, 6, 15), int8]) {
  %309 = @func_7404() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="int32") /* ty=Tensor[(1, 6, 15), int32] */;
  %312 = cast(%var_11476, dtype="int32") /* ty=Tensor[(4, 6, 15), int32] */;
  %313 = cast(%var_11496, dtype="float32") /* ty=Tensor[(630), float32] */;
  %314 = reshape(%313, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %315 = @func_6830(%314) /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(630), float32], Tensor[(180), uint64]) */;
  %316 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %317 = cast(%var_11476, dtype="float32") /* ty=Tensor[(4, 6, 15), float32] */;
  %318 = atanh(%317) /* ty=Tensor[(4, 6, 15), float32] */;
  %319 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 6, 15), float32] */, dtype="uint32") /* ty=Tensor[(4, 6, 15), uint32] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="uint32") /* ty=Tensor[(4, 6, 15), uint32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %323 = left_shift(%321, %322) /* ty=Tensor[(4, 6, 15), uint32] */;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(4, 6, 15), float32] */;
  %325 = @func_8301() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %326 = %325.1;
  %327 = cast(%318, dtype="bool") /* ty=Tensor[(4, 6, 15), bool] */;
  %328 = cast(%326, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
  %329 = not_equal(%327, %328) /* ty=Tensor[(4, 6, 15), bool] */;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(4, 6, 15), float64] */;
  %331 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 6, 15), float32] */, dtype="bool") /* ty=Tensor[(4, 6, 15), bool] */;
  %332 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%323, dtype="bool") /* ty=Tensor[(4, 6, 15), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = less_equal(%333, %334) /* ty=Tensor[(4, 6, 15), bool] */;
  %336 = cast(%335, dtype="int8") /* ty=Tensor[(4, 6, 15), int8] */;
  %337 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%323, dtype="int8") /* ty=Tensor[(4, 6, 15), int8] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %340 = multiply(%311, %312) /* ty=Tensor[(4, 6, 15), int32] */;
  %341 = %315.2;
  %342 = %316.0;
  %343 = log10(%324) /* ty=Tensor[(4, 6, 15), float32] */;
  %344 = @func_10229() /* ty=Tensor[(180), uint64] */;
  %345 = sqrt(%330) /* ty=Tensor[(4, 6, 15), float64] */;
  %346 = bitwise_xor(%338, %339) /* ty=Tensor[(4, 6, 15), int8] */;
  (%340, %341, %var_11496, %342, %343, %344, %345, %346)
}

def @func_10888() -> (Tensor[(1, 140), int32], Tensor[(180), uint64]) {
  %347 = @func_7640() /* ty=(Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) */;
  %348 = %347.0;
  %349 = @func_8507() /* ty=Tensor[(180), uint64] */;
  (%348, %349)
}

def @func_9554(%var_9545: Tensor[(1, 6, 15), float64]) -> Tensor[(?, 6, 15), int64] {
  %350 = @func_5811() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %351 = %350.0;
  %352 = cast(%var_9545, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%354, %355) /* ty=Tensor[(?, 6, 15), int64] */
}

def @func_2532() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %356 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %357 = %356.0;
  %358 = @func_1947() /* ty=Tensor[(180), uint64] */;
  (%357, %358)
}

def @func_11786() -> (Tensor[(12, 8, 14), float64],) {
  %359 = @func_6850() /* ty=(Tensor[(12, 8, 1), float32],) */;
  %360 = %359.0;
  %361 = cast(%360, dtype="bool") /* ty=Tensor[(12, 8, 1), bool] */;
  %362 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 8, 14), bool] */;
  %363 = logical_and(%361, %362) /* ty=Tensor[(12, 8, 14), bool] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(12, 8, 14), float64] */;
  %365 = sinh(%364) /* ty=Tensor[(12, 8, 14), float64] */;
  (%365,)
}

def @func_1947() -> Tensor[(180), uint64] {
  %366 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %366.0
}

def @func_1940() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %367 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %368 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %369 = %367.0;
  %370 = %368.0;
  (%369, %370)
}

def @func_1843(%var_1762: Tensor[(1, 6, 15), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(180, 1), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(180, ?), int16], Tensor[(180, 1), float64], Tensor[(180, 1), float32], Tensor[(462), int16]) {
  %371 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
  %372 = cast(%var_1762, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %376 = cast(meta[relay.Constant][9] /* ty=Tensor[(180, 1), uint64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %377 = asin(%376) /* ty=Tensor[(180, 1), float64] */;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %379 = cast(meta[relay.Constant][10] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %380 = reshape(%379, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), int16] */;
  %381 = cast(%377, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %382 = log2(%381) /* ty=Tensor[(180, 1), float32] */;
  %383 = cast(%382, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %384 = log10(%383) /* ty=Tensor[(180, 1), float64] */;
  %385 = cast(meta[relay.Constant][9] /* ty=Tensor[(180, 1), uint64] */, dtype="uint64") /* ty=Tensor[(180, 1), uint64] */;
  %386 = reshape(%385, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
  %387 = @func_1088(%386) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
  %388 = %387.2;
  %389 = cast(%388, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
  %390 = shape_of(%384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %391 = cast(%384, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %393 = cast(%384, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %394 = cast(%377, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %395 = mod(%374, %375) /* ty=Tensor[(?, 6, 15), float64] */;
  %396 = atanh(%378) /* ty=Tensor[(180, 1), float64] */;
  %397 = @func_488(%380) /* ty=Tensor[(3, 14, 11), int16] */;
  %398 = maximum(%391, %392) /* ty=Tensor[(180, ?), int16] */;
  %399 = acosh(%393) /* ty=Tensor[(180, 1), float64] */;
  %400 = asinh(%394) /* ty=Tensor[(180, 1), float32] */;
  %401 = @func_1468() /* ty=Tensor[(462), int16] */;
  (%395, %396, %397, meta[relay.Constant][10] /* ty=Tensor[(462), int16] */, %398, %399, %400, %401)
}

def @func_2868() -> Tensor[(1, 6, 15), float64] {
  %402 = @func_1690() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %402.1
}

def @func_5175(%var_5127: Tensor[(630), float32], %var_5141: Tensor[(6, 6, 15), float64], %var_5165: uint16, %var_5166: Tensor[(45), uint16]) -> (Tensor[(180), uint64], Tensor[(630), float32], Tensor[(6, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(180), uint64], uint16, Tensor[(45), uint16]) {
  %403 = cast(%var_5127, dtype="float32") /* ty=Tensor[(630), float32] */;
  %404 = reshape(%403, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float32] */;
  %405 = @func_4595(%404) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %406 = %405.2;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %408 = cast(%var_5141, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %409 = cast(%var_5127, dtype="float32") /* ty=Tensor[(630), float32] */;
  %410 = reshape(%409, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float32] */;
  %411 = @func_4595(%410) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %412 = cast(%var_5165, dtype="uint16") /* ty=uint16 */;
  %413 = cast(%var_5166, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %414 = reshape(%412, newshape=[]) /* ty=uint16 */;
  %415 = reshape(%413, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), uint16] */;
  %416 = @func_2034(%414, %415) /* ty=(Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) */;
  %417 = @func_4519() /* ty=Tensor[(180), uint64] */;
  %418 = multiply(%407, %408) /* ty=Tensor[(6, 6, 15), float64] */;
  %419 = %411.0;
  %420 = %416.2;
  (%417, %var_5127, %418, %419, %420, %var_5165, %var_5166)
}

def @func_1468() -> Tensor[(462), int16] {
  %421 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %421.2
}

def @func_1341(%var_1293: Tensor[(7, 66), int16], %var_1320: Tensor[(7, 66), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(7, 66), bool], Tensor[(7, 66), float32]) {
  %422 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %423 = cast(%var_1293, dtype="int16") /* ty=Tensor[(7, 66), int16] */;
  %424 = reshape(%423, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), int16] */;
  %425 = cast(%var_1320, dtype="bool") /* ty=Tensor[(7, 66), bool] */;
  %426 = shape_of(%var_1293, dtype="int32") /* ty=Tensor[(2), int32] */;
  %427 = cast(%var_1293, dtype="bool") /* ty=Tensor[(7, 66), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %429 = cast(%var_1320, dtype="float32") /* ty=Tensor[(7, 66), float32] */;
  %430 = %422.0;
  %431 = @func_488(%424) /* ty=Tensor[(3, 14, 11), int16] */;
  %432 = logical_and(%427, %428) /* ty=Tensor[(7, 66), bool] */;
  %433 = atanh(%429) /* ty=Tensor[(7, 66), float32] */;
  (%430, %431, %432, %433)
}

def @func_9725() -> Tensor[(180), uint64] {
  %434 = @func_6862() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %434.0
}

def @func_7603() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) {
  %435 = @func_6533() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %436 = %435.2;
  %437 = cast(%436, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %438 = reshape(%437, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), uint64] */;
  %439 = @func_447(%438) /* ty=(Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) */;
  %440 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %441 = %439.2;
  (%436, %440, %441)
}

def @func_10099() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %442 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %443 = @func_3987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %444 = %442.0;
  %445 = %443.0;
  (%444, %445)
}

def @func_6850() -> (Tensor[(12, 8, 1), float32],) {
  %446 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 8, 1), float32] */;
  %447 = erf(%446) /* ty=Tensor[(12, 8, 1), float32] */;
  (%447,)
}

def @func_8405() -> Tensor[(462), int16] {
  @func_7160() /* ty=Tensor[(462), int16] */
}

def @func_12431() -> (Tensor[(1, 6, 15), float64],) {
  %448 = @func_7603() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) */;
  %449 = %448.1;
  (%449,)
}

def @func_10509() -> (Tensor[(180), uint64],) {
  %450 = @func_9767() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %451 = %450.0;
  (%451,)
}

def @func_9106() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) {
  %452 = @func_5374() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %453 = @func_7330() /* ty=(Tensor[(180), uint64],) */;
  %454 = @func_8948() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) */;
  %455 = @func_6850() /* ty=(Tensor[(12, 8, 1), float32],) */;
  %456 = %452.0;
  %457 = %453.0;
  %458 = %454.0;
  %459 = %455.0;
  (%456, %457, %458, %459)
}

def @func_2698() -> (Tensor[(180), uint64],) {
  %460 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %461 = %460.0;
  (%461,)
}

def @func_5519() -> (Tensor[(1, 6, 15), float64],) {
  %462 = @func_4854() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %463 = %462.0;
  (%463,)
}

def @func_10652() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %464 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %465 = %464.0;
  %466 = @func_7703() /* ty=Tensor[(1, 6, 15), float64] */;
  %467 = @func_6110() /* ty=Tensor[(1, 6, 15), float64] */;
  (%465, %466, %467)
}

def @func_11834() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(14, 6, 15), bool]) {
  %468 = @func_3908() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) */;
  %469 = @func_7640() /* ty=(Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) */;
  %470 = %468.0;
  %471 = @func_3081() /* ty=Tensor[(180), uint64] */;
  %472 = %469.1;
  (%470, %471, %472)
}

def @func_11295() -> Tensor[(1, 6, 15), float64] {
  %473 = @func_1940() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %473.1
}

def @func_11111() -> (Tensor[(11, 11, 8), float32], Tensor[(180), uint64], Tensor[(462), int16]) {
  %474 = @func_11066() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(11, 11, 8), float32]) */;
  %475 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %476 = %474.2;
  %477 = @func_4519() /* ty=Tensor[(180), uint64] */;
  %478 = %475.0;
  (%476, %477, %478)
}

def @func_12738() -> (Tensor[(462), int16],) {
  %479 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %480 = %479.0;
  (%480,)
}

def @func_8049(%var_8037: Tensor[(10, 8, 10), float32]) -> (Tensor[(10, 8, 10), float32], Tensor[(10, 8, 10), float32]) {
  %481 = cast(%var_8037, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %482 = atanh(%481) /* ty=Tensor[(10, 8, 10), float32] */;
  %483 = cast(%var_8037, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %487 = cast(%482, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %488 = power(%485, %486) /* ty=Tensor[(10, 8, 10), float32] */;
  %489 = sigmoid(%487) /* ty=Tensor[(10, 8, 10), float32] */;
  (%488, %489)
}

def @func_10178() -> (Tensor[(180), uint64],) {
  %490 = @func_8146() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %491 = %490.2;
  (%491,)
}

def @func_12995() -> (Tensor[(462), int16],) {
  %492 = @func_7906() /* ty=(Tensor[(462), int16], Tensor[(462), int16]) */;
  %493 = %492.0;
  (%493,)
}

def @func_488(%var_481: Tensor[(3, 14, 11), int16]) -> Tensor[(3, 14, 11), int16] {
  %494 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 14, 11), int16] */, dtype="int16") /* ty=Tensor[(3, 14, 11), int16] */;
  %495 = shape_of(%var_481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%var_481, dtype="int16") /* ty=Tensor[(3, 14, 11), int16] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%496, %497) /* ty=Tensor[(3, 14, 11), int16] */
}

def @func_6110() -> Tensor[(1, 6, 15), float64] {
  @func_6078() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_1208() -> Tensor[(1, 6, 15), float64] {
  @func_1033() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_12362() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %498 = @func_5031() /* ty=(Tensor[(180), uint64],) */;
  %499 = @func_10907() /* ty=Tensor[(1, 6, 15), float64] */;
  %500 = %498.0;
  (%499, %500)
}

def @func_5007() -> (Tensor[(462), int16],) {
  %501 = @func_2254() /* ty=Tensor[(462), int16] */;
  (%501,)
}

def @func_6533() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  %502 = @func_2620() /* ty=(Tensor[(180), uint64],) */;
  %503 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %504 = %502.0;
  %505 = @func_3081() /* ty=Tensor[(180), uint64] */;
  %506 = %503.1;
  (%504, %505, %506)
}

def @func_6700() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %507 = @func_4155() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %508 = @func_6689() /* ty=Tensor[(462), int16] */;
  %509 = %507.1;
  (%508, %509)
}

def @func_5565(%var_5530: Tensor[(12, 11, 9), float32], %var_5551: Tensor[(450), float64]) -> (Tensor[(12, 11, 9), float32], Tensor[(462), int16], Tensor[(?, 6, 15), int8], Tensor[(1, 6, 15), float64], Tensor[(450), float64]) {
  %510 = cast(%var_5530, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %511 = @func_5047() /* ty=(Tensor[(?, 6, 15), int8],) */;
  %512 = cast(%var_5551, dtype="float64") /* ty=Tensor[(450), float64] */;
  %513 = reshape(%512, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %514 = @func_4279(%513) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) */;
  %515 = acos(%510) /* ty=Tensor[(12, 11, 9), float32] */;
  %516 = @func_1468() /* ty=Tensor[(462), int16] */;
  %517 = %511.0;
  %518 = %514.0;
  (%515, %516, %517, %518, %var_5551)
}

def @func_7541(%var_7533: Tensor[(12, 12, 8), int8], %var_7534: Tensor[(12, 12, 8), int8]) -> (Tensor[(12, 12, 8), int8], Tensor[(1, 6, 15), float64]) {
  %519 = cast(%var_7534, dtype="int8") /* ty=Tensor[(12, 12, 8), int8] */;
  %520 = shape_of(%var_7533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_7533, dtype="int8") /* ty=Tensor[(12, 12, 8), int8] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %523 = @func_7404() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %524 = bitwise_or(%521, %522) /* ty=Tensor[(12, 12, 8), int8] */;
  %525 = %523.0;
  (%524, %525)
}

def @func_12125(%var_12085: Tensor[(12, 8, 15), float32], %var_12105: Tensor[(1680), uint8]) -> (Tensor[(12, 8, 15), bool], Tensor[(180), uint64], Tensor[(1680), uint8]) {
  %526 = @func_9106() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) */;
  %527 = %526.3;
  %528 = cast(%527, dtype="bool") /* ty=Tensor[(12, 8, 1), bool] */;
  %529 = cast(%var_12085, dtype="bool") /* ty=Tensor[(12, 8, 15), bool] */;
  %530 = cast(%var_12105, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %531 = cast(%var_12105, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %532 = reshape(%530, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
  %533 = reshape(%531, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
  %534 = @func_7746(%532, %533) /* ty=(Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) */;
  %535 = logical_or(%528, %529) /* ty=Tensor[(12, 8, 15), bool] */;
  %536 = %534.1;
  (%535, %536, %var_12105)
}

def @func_8782(%var_8740: Tensor[(15, 9, 4), float64], %var_8768: Tensor[(968), float32]) -> (Tensor[(15, 9, 4), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(968), float64]) {
  %537 = cast(%var_8740, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
  %538 = cast(meta[relay.Constant][13] /* ty=Tensor[(968), float32] */, dtype="float32") /* ty=Tensor[(968), float32] */;
  %539 = cast(%var_8740, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
  %540 = reshape(%538, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float32] */;
  %541 = reshape(%539, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %542 = @func_5978(%540, %541) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(11, 11, 8), bool], Tensor[(180), uint64], Tensor[(70, 9), float32], Tensor[(540), float64], uint16, Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(45), float32]) */;
  %543 = cast(%var_8768, dtype="float64") /* ty=Tensor[(968), float64] */;
  %544 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(968), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %545 = cast(meta[relay.Constant][13] /* ty=Tensor[(968), float32] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?), float64] */;
  %547 = acosh(%537) /* ty=Tensor[(15, 9, 4), float64] */;
  %548 = %542.7;
  %549 = @func_1456() /* ty=Tensor[(180), uint64] */;
  %550 = power(%545, %546) /* ty=Tensor[(968), float64] */;
  (%547, %548, %549, %550)
}

def @func_4519() -> Tensor[(180), uint64] {
  %551 = @func_2698() /* ty=(Tensor[(180), uint64],) */;
  %551.0
}

def @func_3585() -> (Tensor[(1, 6, 15), float64],) {
  %552 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
  (%552,)
}

def @func_3427() -> (Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) {
  %553 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 140), int32] */, dtype="int32") /* ty=Tensor[(1, 140), int32] */;
  %554 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 140), int32] */, dtype="int32") /* ty=Tensor[(1, 140), int32] */;
  %555 = reshape(%553, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
  %556 = reshape(%554, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
  %557 = @func_1393(%555, %556) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) */;
  %558 = @func_2473() /* ty=Tensor[(180), uint64] */;
  %559 = cast(%558, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %560 = reshape(%559, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %561 = @func_1139(%560) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %562 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %563 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %564 = cast(meta[relay.Constant][16] /* ty=Tensor[(1320), uint64] */, dtype="uint64") /* ty=Tensor[(1320), uint64] */;
  %565 = reshape(%563, newshape=[]) /* ty=uint64 */;
  %566 = reshape(%564, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint64] */;
  %567 = @func_3301() /* ty=Tensor[(462), int16] */;
  %568 = %557.0;
  %569 = @func_1456() /* ty=Tensor[(180), uint64] */;
  %570 = %561.1;
  %571 = %562.0;
  %572 = @func_1559(%565, %566) /* ty=Tensor[(12, 10, 11), bool] */;
  %573 = @func_1456() /* ty=Tensor[(180), uint64] */;
  (%567, %568, meta[relay.Constant][14] /* ty=Tensor[(1, 140), int32] */, %569, %558, %570, %571, %572, meta[relay.Constant][15] /* ty=uint64 */, meta[relay.Constant][16] /* ty=Tensor[(1320), uint64] */, %573)
}

def @func_7746(%var_7713: Tensor[(10, 14, 12), uint8], %var_7714: Tensor[(10, 14, 12), uint8]) -> (Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) {
  %574 = cast(%var_7714, dtype="uint8") /* ty=Tensor[(10, 14, 12), uint8] */;
  %575 = shape_of(%var_7713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_7713, dtype="uint8") /* ty=Tensor[(10, 14, 12), uint8] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %578 = @func_5811() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %579 = cast(%var_7713, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %580 = minimum(%576, %577) /* ty=Tensor[(10, 14, 12), uint8] */;
  %581 = %578.1;
  %582 = sin(%579) /* ty=Tensor[(10, 14, 12), float64] */;
  (%580, %581, %582)
}

def @func_4629() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %583 = @func_2856() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %584 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %585 = %583.2;
  %586 = %584.0;
  (%585, %586)
}

def @func_3987() -> (Tensor[(1, 6, 15), float64],) {
  %587 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %588 = %587.0;
  (%588,)
}

def @func_4224() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32]) {
  %589 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %592 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %593 = log(%591) /* ty=Tensor[(1, 6, 15), float32] */;
  (%592, %593)
}

def @func_447(%var_423: Tensor[(10, 2, 9), uint64]) -> (Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) {
  %594 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
  %595 = shape_of(%var_423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%var_423, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %598 = cast(%var_423, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %599 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %602 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
  %603 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %606 = right_shift(%596, %597) /* ty=Tensor[(10, 2, 9), uint64] */;
  %607 = power(%600, %601) /* ty=Tensor[(10, 2, 9), float64] */;
  %608 = multiply(%604, %605) /* ty=Tensor[(10, 2, 9), uint64] */;
  (%606, %607, %608)
}

def @func_8884(%var_8874: Tensor[(2, 6, 15), float64]) -> Tensor[(2, 6, 15), bool] {
  %609 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %610 = %609.0;
  %611 = cast(%610, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
  %612 = cast(%var_8874, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
  logical_and(%611, %612) /* ty=Tensor[(2, 6, 15), bool] */
}

def @func_3700() -> Tensor[(1, 6, 15), float64] {
  %613 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %613.0
}

def @func_8377() -> (Tensor[(1, 6, 15), float64],) {
  %614 = @func_4155() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %615 = %614.1;
  (%615,)
}

def @func_9534() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %616 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %617 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %618 = %616.1;
  %619 = %617.0;
  (%618, %619)
}

def @func_2163(%var_2144: Tensor[(180), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %620 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %621 = cast(%var_2144, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %622 = reshape(%621, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %623 = @func_1139(%622) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %624 = %620.0;
  %625 = %623.1;
  (%624, %625, %var_2144)
}

def @func_5047() -> (Tensor[(?, 6, 15), int8],) {
  %626 = @func_2389() /* ty=(Tensor[(462), int16], Tensor[(?, 6, 15), int8]) */;
  %627 = %626.1;
  (%627,)
}

def @func_11148() -> (Tensor[(1, 6, 15), float64],) {
  %628 = @func_8637() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %629 = %628.0;
  (%629,)
}

def @func_11066() -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(11, 11, 8), float32]) {
  %630 = @func_7479() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %631 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
  %632 = @func_7665() /* ty=Tensor[(1, 6, 15), float64] */;
  %633 = %630.1;
  %634 = %631.1;
  (%632, %633, %634)
}

def @func_7927() -> (Tensor[(180), uint64],) {
  %635 = @func_5480() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %636 = %635.0;
  (%636,)
}

def @func_11721() -> (Tensor[(180), uint64], Tensor[(16, 7, 15), float64], Tensor[(1680), float64], Tensor[(1, 6, 15), float64]) {
  %637 = cast(meta[relay.Constant][19] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %638 = reshape(%637, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), float64] */;
  %639 = @func_9419(%638) /* ty=(Tensor[(16, 7, 15), float64],) */;
  %640 = @func_4519() /* ty=Tensor[(180), uint64] */;
  %641 = %639.0;
  %642 = @func_6078() /* ty=Tensor[(1, 6, 15), float64] */;
  (%640, %641, meta[relay.Constant][19] /* ty=Tensor[(1680), float64] */, %642)
}

def @func_10229() -> Tensor[(180), uint64] {
  %643 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
  %643.1
}

def @func_4025() -> (Tensor[(1, 6, 15), float64],) {
  %644 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %645 = %644.0;
  (%645,)
}

def @func_4901() -> (Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) {
  %646 = @func_4009() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %647 = @func_2698() /* ty=(Tensor[(180), uint64],) */;
  %648 = %646.1;
  %649 = @func_2227() /* ty=Tensor[(462), int16] */;
  %650 = %647.0;
  (%648, %649, %650)
}

def @func_10907() -> Tensor[(1, 6, 15), float64] {
  @func_6110() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_10472(%var_10458: Tensor[(16, 6, 15), float64]) -> (Tensor[(462), int16], Tensor[(462), int16], Tensor[(16, 6, 15), uint64]) {
  %651 = @func_5007() /* ty=(Tensor[(462), int16],) */;
  %652 = @func_4084() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %653 = @func_5503() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %654 = %653.2;
  %655 = cast(%654, dtype="uint64") /* ty=Tensor[(1, 6, 15), uint64] */;
  %656 = cast(%var_10458, dtype="uint64") /* ty=Tensor[(16, 6, 15), uint64] */;
  %657 = %651.0;
  %658 = %652.1;
  %659 = maximum(%655, %656) /* ty=Tensor[(16, 6, 15), uint64] */;
  (%657, %658, %659)
}

def @func_8729() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %660 = @func_3932() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %661 = %660.0;
  %662 = cast(%661, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %663 = reshape(%662, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %664 = @func_2163(%663) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %665 = @func_7603() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) */;
  %666 = %664.0;
  %667 = %665.1;
  (%661, %666, %667)
}

def @func_2389() -> (Tensor[(462), int16], Tensor[(?, 6, 15), int8]) {
  %668 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %669 = %668.0;
  %670 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %671 = %670.0;
  %672 = cast(%671, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  %673 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%669, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %676 = @func_2254() /* ty=Tensor[(462), int16] */;
  %677 = bitwise_xor(%674, %675) /* ty=Tensor[(?, 6, 15), int8] */;
  (%676, %677)
}

def @func_1744() -> (Tensor[(1, 6, 15), float64],) {
  %678 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  (%678,)
}

def @func_1185(%var_1178: Tensor[(462), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %679 = cast(%var_1178, dtype="int16") /* ty=Tensor[(462), int16] */;
  %680 = reshape(%679, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), int16] */;
  %681 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %682 = reshape(%681, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
  %683 = @func_1088(%682) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
  %684 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  %685 = @func_488(%680) /* ty=Tensor[(3, 14, 11), int16] */;
  %686 = %683.3;
  (%684, %685, %var_1178, %686, meta[relay.Constant][20] /* ty=Tensor[(180), uint64] */)
}

def @func_1690() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
  %687 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %688 = cast(meta[relay.Constant][21] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %689 = cast(meta[relay.Constant][21] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %690 = reshape(%688, newshape=[7, 66]) /* ty=Tensor[(7, 66), int16] */;
  %691 = reshape(%689, newshape=[7, 66]) /* ty=Tensor[(7, 66), int16] */;
  %692 = @func_1341(%690, %691) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(7, 66), bool], Tensor[(7, 66), float32]) */;
  %693 = %687.0;
  %694 = %692.0;
  (%693, %694, meta[relay.Constant][21] /* ty=Tensor[(462), int16] */)
}

def @func_6356() -> Tensor[(180), uint64] {
  @func_1947() /* ty=Tensor[(180), uint64] */
}

def @func_7404() -> (Tensor[(1, 6, 15), float64],) {
  %695 = @func_4854() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %698 = cos(%697) /* ty=Tensor[(1, 6, 15), float64] */;
  (%698,)
}

def @func_1866() -> (Tensor[(1, 6, 15), float64],) {
  %699 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %700 = %699.0;
  (%700,)
}

def @func_7342() -> (Tensor[(1, 6, 15), float32],) {
  %701 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %702 = %701.0;
  (%702,)
}

def @func_4200() -> Tensor[(462), int16] {
  @func_3464() /* ty=Tensor[(462), int16] */
}

def @func_10149() -> Tensor[(180), uint64] {
  %703 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %703.1
}

def @func_5780() -> (Tensor[(11, 11, 8), float32],) {
  %704 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
  %705 = %704.1;
  (%705,)
}

def @func_1894() -> (Tensor[(1, 6, 15), float64],) {
  %706 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %707 = %706.0;
  (%707,)
}

def @func_2096() -> (Tensor[(1, 6, 15), float64],) {
  %708 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
  (%708,)
}

def @func_2920() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %709 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %710 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %711 = %709.0;
  %712 = %710.0;
  (%711, %712)
}

def @func_2191() -> (Tensor[(1, 6, 15), float64],) {
  %713 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %714 = %713.0;
  (%714,)
}

def @func_3932() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %715 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
  %716 = @func_2473() /* ty=Tensor[(180), uint64] */;
  %717 = %715.0;
  (%716, %717)
}

def @func_1456() -> Tensor[(180), uint64] {
  %718 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %718.1
}

def @func_4754(%var_4738: uint64) -> (Tensor[(180), uint64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(11, 10, 5), float32], Tensor[(1, 6, 15), float64]) {
  %719 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %720 = cast(%var_4738, dtype="uint64") /* ty=uint64 */;
  %721 = cast(meta[relay.Constant][22] /* ty=Tensor[(1320), uint64] */, dtype="uint64") /* ty=Tensor[(1320), uint64] */;
  %722 = reshape(%720, newshape=[]) /* ty=uint64 */;
  %723 = reshape(%721, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint64] */;
  %724 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
  %725 = exp(%724) /* ty=Tensor[(11, 10, 5), float64] */;
  %726 = cast(%725, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
  %727 = rsqrt(%726) /* ty=Tensor[(11, 10, 5), float64] */;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
  %729 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %730 = %719.0;
  %731 = @func_1559(%722, %723) /* ty=Tensor[(12, 10, 11), bool] */;
  %732 = acosh(%728) /* ty=Tensor[(11, 10, 5), float32] */;
  %733 = %729.0;
  (%730, %731, %var_4738, meta[relay.Constant][22] /* ty=Tensor[(1320), uint64] */, %732, %733)
}

def @func_1559(%var_1544: uint64, %var_1545: Tensor[(12, 10, 11), uint64]) -> Tensor[(12, 10, 11), bool] {
  %734 = cast(%var_1544, dtype="bool") /* ty=bool */;
  %735 = cast(%var_1545, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  greater_equal(%734, %735) /* ty=Tensor[(12, 10, 11), bool] */
}

def @func_7096() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %736 = @func_6700() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
  %737 = @func_3081() /* ty=Tensor[(180), uint64] */;
  %738 = %736.1;
  (%737, %738)
}

def @func_8948() -> (Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) {
  %739 = @func_5780() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %740 = %739.0;
  %741 = @func_5722() /* ty=Tensor[(180), uint64] */;
  (%740, %741)
}

def @func_7703() -> Tensor[(1, 6, 15), float64] {
  %742 = @func_5308() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %742.0
}

def @func_2986() -> (Tensor[(1, 6, 15), float64],) {
  %743 = @func_2856() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %744 = %743.0;
  (%744,)
}

def @func_12469() -> (Tensor[(462), int16],) {
  %745 = @func_6689() /* ty=Tensor[(462), int16] */;
  (%745,)
}

def @func_6882() -> Tensor[(180), uint64] {
  %746 = @func_6455() /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) */;
  %746.1
}

def @func_8105() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %747 = @func_5480() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %748 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %749 = %747.1;
  %750 = %748.0;
  (%749, %750)
}

def @func_8836() -> (Tensor[(462), int16],) {
  %751 = @func_4200() /* ty=Tensor[(462), int16] */;
  (%751,)
}

def @func_12405(%var_12388: Tensor[(8, 16, 7), float64]) -> (Tensor[(8, 16, 7), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %752 = cast(%var_12388, dtype="float64") /* ty=Tensor[(8, 16, 7), float64] */;
  %753 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %754 = cos(%752) /* ty=Tensor[(8, 16, 7), float64] */;
  %755 = @func_4292() /* ty=Tensor[(462), int16] */;
  %756 = %753.0;
  (%754, %755, %756)
}

def @func_1987() -> (Tensor[(1, 6, 15), float64],) {
  %757 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %758 = %757.0;
  (%758,)
}

def @func_5622() -> (Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) {
  %759 = @func_3908() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) */;
  %760 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %761 = cast(meta[relay.Constant][24] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %762 = reshape(%761, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %763 = @func_1185(%762) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %764 = @func_2856() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %765 = %759.4;
  %766 = %760.1;
  %767 = %763.3;
  %768 = %764.1;
  (%765, %766, %767, meta[relay.Constant][24] /* ty=Tensor[(462), int16] */, %768)
}

def @func_3081() -> Tensor[(180), uint64] {
  %769 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %769.1
}

def @func_3464() -> Tensor[(462), int16] {
  @func_2254() /* ty=Tensor[(462), int16] */
}

def @func_9676() -> (Tensor[(180), uint64],) {
  %770 = @func_2473() /* ty=Tensor[(180), uint64] */;
  (%770,)
}

def @func_5811() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %771 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %772 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %773 = %771.0;
  %774 = %772.1;
  (%773, %774)
}

def @func_3734() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %775 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %776 = %775.0;
  %777 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  (%776, %777)
}

def @func_4854() -> (Tensor[(1, 6, 15), float64],) {
  %778 = @func_3734() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %779 = %778.0;
  (%779,)
}

def @func_3301() -> Tensor[(462), int16] {
  @func_1468() /* ty=Tensor[(462), int16] */
}

def @func_12318() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  %780 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %781 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %782 = @func_9767() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %783 = %780.0;
  %784 = %781.0;
  %785 = @func_1947() /* ty=Tensor[(180), uint64] */;
  %786 = %782.0;
  (%783, %784, %785, %786)
}

def @func_9897() -> Tensor[(1, 6, 15), float64] {
  %787 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %787.0
}

def @func_4916() -> Tensor[(180), uint64] {
  %788 = @func_4009() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %788.0
}

def @func_12880(%var_12855: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64],) {
  %789 = cast(%var_12855, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %790 = sqrt(%789) /* ty=Tensor[(7, 8, 12), float64] */;
  %791 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %795 = floor_divide(%793, %794) /* ty=Tensor[(7, 8, 12), float64] */;
  (%795,)
}

def @func_6689() -> Tensor[(462), int16] {
  %796 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
  %796.0
}

def @func_10380(%var_10372: Tensor[(2, 6, 15), float64]) -> (Tensor[(180), uint64], Tensor[(2, 6, 15), int64]) {
  %797 = @func_6533() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %798 = @func_8386() /* ty=Tensor[(1, 6, 15), float64] */;
  %799 = cast(%798, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %800 = cast(%var_10372, dtype="int64") /* ty=Tensor[(2, 6, 15), int64] */;
  %801 = %797.0;
  %802 = logical_xor(%799, %800) /* ty=Tensor[(2, 6, 15), int64] */;
  (%801, %802)
}

def @func_4801(%var_4770: Tensor[(462), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(462), float32]) {
  %803 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %804 = @func_4292() /* ty=Tensor[(462), int16] */;
  %805 = cast(%var_4770, dtype="float64") /* ty=Tensor[(462), float64] */;
  %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(1), int32] */;
  %807 = cast(%804, dtype="float64") /* ty=Tensor[(462), float64] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?), float64] */;
  %809 = divide(%807, %808) /* ty=Tensor[(462), float64] */;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(462), float32] */;
  %811 = %803.0;
  %812 = atan(%810) /* ty=Tensor[(462), float32] */;
  (%811, %812)
}

def @func_7479() -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
  %813 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %814 = %813.0;
  %815 = @func_3301() /* ty=Tensor[(462), int16] */;
  (%814, %815)
}

def @func_13014() -> Tensor[(180), uint64] {
  %816 = @func_1690() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %816.0
}

def @func_7415() -> (Tensor[(180), uint64],) {
  %817 = @func_6882() /* ty=Tensor[(180), uint64] */;
  (%817,)
}

def @func_5978(%var_5911: Tensor[(11, 11, 8), float32], %var_5935: Tensor[(540), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(11, 11, 8), bool], Tensor[(180), uint64], Tensor[(70, 9), float32], Tensor[(540), float64], uint16, Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(45), float32]) {
  %818 = @func_4155() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %819 = @func_5780() /* ty=(Tensor[(11, 11, 8), float32],) */;
  %820 = %819.0;
  %821 = cast(%var_5911, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %825 = cast(meta[relay.Constant][26] /* ty=Tensor[(70, 9), float32] */, dtype="float32") /* ty=Tensor[(70, 9), float32] */;
  %826 = cast(%var_5935, dtype="float64") /* ty=Tensor[(540), float64] */;
  %827 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %828 = cast(meta[relay.Constant][28] /* ty=Tensor[(45), uint16] */, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %829 = reshape(%825, newshape=[630]) /* ty=Tensor[(630), float32] */;
  %830 = reshape(%826, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float64] */;
  %831 = reshape(%827, newshape=[]) /* ty=uint16 */;
  %832 = reshape(%828, newshape=[45]) /* ty=Tensor[(45), uint16] */;
  %833 = @func_5175(%829, %830, %831, %832) /* ty=(Tensor[(180), uint64], Tensor[(630), float32], Tensor[(6, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(180), uint64], uint16, Tensor[(45), uint16]) */;
  %834 = %818.0;
  %835 = cast(%834, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %836 = reshape(%835, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %837 = @func_2163(%836) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %838 = @func_4629() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
  %839 = cast(meta[relay.Constant][28] /* ty=Tensor[(45), uint16] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %840 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
  %841 = not_equal(%823, %824) /* ty=Tensor[(11, 11, 8), bool] */;
  %842 = %833.0;
  %843 = %837.1;
  %844 = %838.1;
  %845 = rsqrt(%839) /* ty=Tensor[(45), float32] */;
  (%840, %834, %841, %842, meta[relay.Constant][26] /* ty=Tensor[(70, 9), float32] */, %var_5935, meta[relay.Constant][27] /* ty=uint16 */, %843, %844, %845)
}

def @func_1260() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) {
  %846 = cast(meta[relay.Constant][29] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %847 = reshape(%846, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %848 = @func_1185(%847) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %849 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  %850 = %848.4;
  (%849, %850, meta[relay.Constant][29] /* ty=Tensor[(462), int16] */)
}

def @func_2034(%var_1993: uint16, %var_1994: Tensor[(3, 5, 3), uint16]) -> (Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) {
  %851 = cast(%var_1993, dtype="bool") /* ty=bool */;
  %852 = cast(%var_1994, dtype="bool") /* ty=Tensor[(3, 5, 3), bool] */;
  %853 = equal(%851, %852) /* ty=Tensor[(3, 5, 3), bool] */;
  %854 = cast(%853, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
  %855 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %856 = @func_1456() /* ty=Tensor[(180), uint64] */;
  %857 = sigmoid(%854) /* ty=Tensor[(3, 5, 3), float32] */;
  %858 = %855.0;
  (%856, %857, %858)
}

def @func_2856() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) {
  %859 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %860 = %859.0;
  %861 = @func_1456() /* ty=Tensor[(180), uint64] */;
  %862 = @func_1468() /* ty=Tensor[(462), int16] */;
  (%860, %861, %862)
}

def @func_1139(%var_1131: Tensor[(180), uint64]) -> (Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %863 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  %864 = cast(%var_1131, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %865 = reshape(%864, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
  %866 = @func_1088(%865) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
  %867 = sinh(%863) /* ty=Tensor[(11, 11, 8), float32] */;
  %868 = %866.3;
  (%867, %868, %var_1131)
}

def @func_3045(%var_2994: Tensor[(9, 6, 15), float64], %var_3006: Tensor[(1260), float64], %var_3023: Tensor[(462), int16]) -> (Tensor[(9, 6, 15), bool], Tensor[(180), uint64], Tensor[(3, 60), uint64], Tensor[(1260), float64], Tensor[(3, 6, 15), float32], Tensor[(10, 2, 9), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) {
  %869 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %870 = cast(%869, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
  %871 = cast(%var_2994, dtype="bool") /* ty=Tensor[(9, 6, 15), bool] */;
  %872 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 60), uint64] */, dtype="uint64") /* ty=Tensor[(3, 60), uint64] */;
  %873 = cast(%var_3006, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %874 = reshape(%872, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %875 = reshape(%873, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), float64] */;
  %876 = @func_2818(%874, %875) /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32], Tensor[(14, 6, 15), bool]) */;
  %877 = cast(%869, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %878 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 6, 15), float64] */, dtype="float32") /* ty=Tensor[(3, 6, 15), float32] */;
  %879 = %876.1;
  %880 = cast(%879, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %881 = reshape(%880, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
  %882 = @func_1088(%881) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
  %883 = cast(%var_3023, dtype="int16") /* ty=Tensor[(462), int16] */;
  %884 = reshape(%883, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %885 = @func_1185(%884) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %886 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %887 = logical_or(%870, %871) /* ty=Tensor[(9, 6, 15), bool] */;
  %888 = mod(%877, %878) /* ty=Tensor[(3, 6, 15), float32] */;
  %889 = %882.1;
  %890 = %885.0;
  %891 = %886.1;
  (%887, %879, meta[relay.Constant][31] /* ty=Tensor[(3, 60), uint64] */, %var_3006, %888, %889, %890, %var_3023, %891)
}

def @func_6862() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  %892 = @func_3908() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) */;
  %893 = %892.1;
  %894 = @func_2227() /* ty=Tensor[(462), int16] */;
  (%893, %894)
}

def @func_5669() -> (Tensor[(180), uint64],) {
  %895 = @func_2620() /* ty=(Tensor[(180), uint64],) */;
  %896 = %895.0;
  (%896,)
}

def @func_2254() -> Tensor[(462), int16] {
  %897 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %897.2
}

def @func_10830() -> Tensor[(180), uint64] {
  %898 = @func_5669() /* ty=(Tensor[(180), uint64],) */;
  %898.0
}

def @func_3247() -> (Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) {
  %899 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %900 = %899.0;
  %901 = cast(%900, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %902 = reshape(%901, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %903 = @func_1139(%902) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %904 = %903.0;
  (%900, %904)
}

def @func_5480() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %905 = @func_3259() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %906 = @func_3081() /* ty=Tensor[(180), uint64] */;
  %907 = %905.0;
  (%906, %907)
}

def @func_10747(%var_10732: Tensor[(462), int16]) -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(462), int16], Tensor[(12, 10, 11), bool]) {
  %908 = @func_8948() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) */;
  %909 = @func_6041() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %910 = @func_5669() /* ty=(Tensor[(180), uint64],) */;
  %911 = cast(%var_10732, dtype="int16") /* ty=Tensor[(462), int16] */;
  %912 = reshape(%911, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %913 = @func_9267(%912) /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(1, 6, 15), float64], Tensor[(462), bool]) */;
  %914 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
  %915 = %908.1;
  %916 = %909.1;
  %917 = %910.0;
  %918 = %913.1;
  %919 = %914.7;
  (%915, %916, %917, %918, %var_10732, %919)
}

def @func_12973(%var_12901: Tensor[(180), uint64], %var_12939: Tensor[(450), float64], %var_12948: Tensor[(840, 2), uint8]) -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(10, 2, 9), float32], Tensor[(1, 6, 15), float64], Tensor[(?, 6, 15), float64], Tensor[(450), float64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), uint8], Tensor[(1, 6, 15), float64]) {
  %920 = @func_6455() /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) */;
  %921 = cast(%var_12901, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %922 = reshape(%921, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), uint64] */;
  %923 = @func_447(%922) /* ty=(Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) */;
  %924 = %923.0;
  %925 = cast(%924, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %926 = @func_3987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %927 = cast(%var_12939, dtype="float64") /* ty=Tensor[(450), float64] */;
  %928 = reshape(%927, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %929 = @func_5865(%928) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(5, 6, 15), int64], Tensor[(450), float64], Tensor[(1, 6, 15), float32]) */;
  %930 = cast(%var_12948, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
  %931 = cast(%var_12948, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
  %932 = reshape(%930, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
  %933 = reshape(%931, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
  %934 = @func_7746(%932, %933) /* ty=(Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) */;
  %935 = %920.0;
  %936 = log10(%925) /* ty=Tensor[(10, 2, 9), float32] */;
  %937 = %926.0;
  %938 = %929.0;
  %939 = %934.2;
  %940 = @func_7665() /* ty=Tensor[(1, 6, 15), float64] */;
  (%935, %var_12901, %936, %937, %938, %var_12939, %939, %var_12948, %940)
}

def @func_9986(%var_9974: Tensor[(968), float32]) -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(540), float64], Tensor[(968), float32], Tensor[(10, 2, 9), uint64]) {
  %941 = @func_5503() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %942 = @func_6862() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %943 = cast(meta[relay.Constant][33] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %944 = cast(%var_9974, dtype="float32") /* ty=Tensor[(968), float32] */;
  %945 = reshape(%943, newshape=[15, 9, 4]) /* ty=Tensor[(15, 9, 4), float64] */;
  %946 = reshape(%944, newshape=[968]) /* ty=Tensor[(968), float32] */;
  %947 = @func_8782(%945, %946) /* ty=(Tensor[(15, 9, 4), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(968), float64]) */;
  %948 = @func_7603() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) */;
  %949 = %941.2;
  %950 = %942.1;
  %951 = %947.1;
  %952 = %948.2;
  (%949, %950, %951, meta[relay.Constant][33] /* ty=Tensor[(540), float64] */, %var_9974, %952)
}

def @func_2818(%var_2736: Tensor[(180), uint64], %var_2785: Tensor[(14, 6, 15), float64]) -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32], Tensor[(14, 6, 15), bool]) {
  %953 = cast(%var_2736, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %954 = reshape(%953, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %955 = @func_2163(%954) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %956 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %957 = %956.0;
  %958 = cast(%957, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %959 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %960 = %959.0;
  %961 = cast(%960, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %962 = cast(%957, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
  %963 = cast(%var_2785, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %964 = %955.2;
  %965 = log2(%958) /* ty=Tensor[(1, 6, 15), float64] */;
  %966 = erf(%961) /* ty=Tensor[(1, 6, 15), float32] */;
  %967 = greater(%962, %963) /* ty=Tensor[(14, 6, 15), bool] */;
  (%964, %var_2736, %965, %966, %967)
}

def @func_8301() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %968 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %969 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %970 = %968.0;
  %971 = %969.0;
  (%970, %971)
}

def @func_8386() -> Tensor[(1, 6, 15), float64] {
  %972 = @func_4224() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32]) */;
  %972.0
}

def @func_2620() -> (Tensor[(180), uint64],) {
  %973 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %974 = %973.1;
  (%974,)
}

def @func_5374() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %975 = @func_1947() /* ty=Tensor[(180), uint64] */;
  %976 = @func_3081() /* ty=Tensor[(180), uint64] */;
  (%975, %976)
}

def @func_1393(%var_1370: Tensor[(5, 7, 4), int32], %var_1371: Tensor[(5, 7, 4), int32]) -> (Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) {
  %977 = cast(%var_1371, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
  %978 = shape_of(%var_1370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %979 = cast(%var_1370, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
  %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %981 = greater(%979, %980) /* ty=Tensor[(5, 7, 4), bool] */;
  %982 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
  (%981, %982)
}

def @func_5031() -> (Tensor[(180), uint64],) {
  %983 = @func_4009() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %984 = %983.1;
  (%984,)
}

def @func_4009() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %985 = @func_3932() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %986 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %987 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %988 = %985.0;
  %989 = %986.1;
  %990 = %987.0;
  (%988, %989, %990)
}

def @func_4292() -> Tensor[(462), int16] {
  @func_2254() /* ty=Tensor[(462), int16] */
}

def @func_11633(%var_11582: Tensor[(11, 8, 5), uint32], %var_11583: Tensor[(11, 8, 5), uint32], %var_11619: Tensor[(11, 8, 5), uint32]) -> (Tensor[(180), uint64], Tensor[(11, 8, 5), float32], Tensor[(11, 8, 5), float32]) {
  %991 = @func_8146() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %992 = cast(%var_11583, dtype="float32") /* ty=Tensor[(11, 8, 5), float32] */;
  %993 = cast(%var_11583, dtype="uint32") /* ty=Tensor[(11, 8, 5), uint32] */;
  %994 = shape_of(%var_11582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %995 = cast(%var_11582, dtype="uint32") /* ty=Tensor[(11, 8, 5), uint32] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %997 = right_shift(%995, %996) /* ty=Tensor[(11, 8, 5), uint32] */;
  %998 = cast(%var_11619, dtype="float32") /* ty=Tensor[(11, 8, 5), float32] */;
  %999 = shape_of(%997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1000 = cast(%997, dtype="float32") /* ty=Tensor[(11, 8, 5), float32] */;
  %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1002 = %991.1;
  %1003 = sin(%992) /* ty=Tensor[(11, 8, 5), float32] */;
  %1004 = minimum(%1000, %1001) /* ty=Tensor[(11, 8, 5), float32] */;
  (%1002, %1003, %1004)
}

def @func_1720() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %1005 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %1006 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %1007 = %1005.1;
  %1008 = %1006.0;
  (%1007, %1008)
}

def @func_2941() -> (Tensor[(1, 6, 15), float32],) {
  %1009 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %1010 = %1009.0;
  %1011 = cast(%1010, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %1012 = sin(%1011) /* ty=Tensor[(1, 6, 15), float32] */;
  (%1012,)
}

def @func_6501(%var_6479: Tensor[(140), int32]) -> (Tensor[(5, 7, 4), bool], Tensor[(140), int32], Tensor[(1, 6, 15), float64]) {
  %1013 = cast(%var_6479, dtype="int32") /* ty=Tensor[(140), int32] */;
  %1014 = cast(%var_6479, dtype="int32") /* ty=Tensor[(140), int32] */;
  %1015 = reshape(%1013, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
  %1016 = reshape(%1014, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
  %1017 = @func_1393(%1015, %1016) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) */;
  %1018 = @func_6110() /* ty=Tensor[(1, 6, 15), float64] */;
  %1019 = cast(%1018, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %1020 = %1017.0;
  %1021 = log10(%1019) /* ty=Tensor[(1, 6, 15), float64] */;
  (%1020, %var_6479, %1021)
}

def @func_11390() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %1022 = @func_5308() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %1023 = @func_4901() /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) */;
  %1024 = %1022.0;
  %1025 = %1023.2;
  (%1024, %1025)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7666() -> Tensor[(1, 6, 15), float64] {
  %1 = fn () -> Tensor[(1, 6, 15), float64] {
    %0 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %0.0
  };
  %1() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_4025() -> (Tensor[(1, 6, 15), float64],) {
  %2 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %3 = %2.0;
  (%3,)
}

def @func_8052(%var_8050: Tensor[(10, 8, 10), float32]) -> (Tensor[(10, 8, 10), float32], Tensor[(10, 8, 10), float32]) {
  @func_8049(%var_8050) /* ty=(Tensor[(10, 8, 10), float32], Tensor[(10, 8, 10), float32]) */
}

def @func_8837() -> (Tensor[(462), int16],) {
  %5 = fn () -> (Tensor[(462), int16],) {
    %4 = @func_4200() /* ty=Tensor[(462), int16] */;
    (%4,)
  };
  %5() /* ty=(Tensor[(462), int16],) */
}

def @func_6533() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  %6 = @func_2620() /* ty=(Tensor[(180), uint64],) */;
  %7 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %8 = %6.0;
  %9 = @func_3081() /* ty=Tensor[(180), uint64] */;
  %10 = %7.1;
  (%8, %9, %10)
}

def @func_4901() -> (Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) {
  %11 = @func_4009() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %12 = @func_2698() /* ty=(Tensor[(180), uint64],) */;
  %13 = %11.1;
  %14 = @func_2227() /* ty=Tensor[(462), int16] */;
  %15 = %12.0;
  (%13, %14, %15)
}

def @func_10801() -> Tensor[(1, 6, 15), float64] {
  %16 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %16.0
}

def @func_10150() -> Tensor[(180), uint64] {
  %18 = fn () -> Tensor[(180), uint64] {
    %17 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %17.1
  };
  %18() /* ty=Tensor[(180), uint64] */
}

def @func_11261() -> (Tensor[(?, 6, 15), float64], Tensor[(?, 6, 15), int64]) {
  %23 = fn () -> (Tensor[(?, 6, 15), float64], Tensor[(?, 6, 15), int64]) {
    %19 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
    %20 = cast(%19, dtype="float64") /* ty=Tensor[(?, 6, 15), float64] */;
    %21 = reshape(%20, newshape=[1, 6, 15]) /* ty=Tensor[(1, 6, 15), float64] */;
    %22 = @func_9554(%21) /* ty=Tensor[(?, 6, 15), int64] */;
    (%19, %22)
  };
  %23() /* ty=(Tensor[(?, 6, 15), float64], Tensor[(?, 6, 15), int64]) */
}

def @func_3303() -> Tensor[(462), int16] {
  @func_3301() /* ty=Tensor[(462), int16] */
}

def @func_8147() -> (Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  %30 = fn () -> (Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) {
    %24 = @func_5622() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) */;
    %25 = @func_4084() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
    %26 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
    %27 = %24.0;
    %28 = %25.0;
    %29 = %26.0;
    (%27, %28, %29)
  };
  %30() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_488(%var_481: Tensor[(3, 14, 11), int16]) -> Tensor[(3, 14, 11), int16] {
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 14, 11), int16] */, dtype="int16") /* ty=Tensor[(3, 14, 11), int16] */;
  %32 = shape_of(%var_481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_481, dtype="int16") /* ty=Tensor[(3, 14, 11), int16] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%33, %34) /* ty=Tensor[(3, 14, 11), int16] */
}

def @func_12069(%var_12067: Tensor[(1, 14), float32], %var_12068: Tensor[(546), float32]) -> (Tensor[(180), uint64], Tensor[(462), float32], Tensor[(13, 3, 14), float32], Tensor[(1, 14), float32], Tensor[(546), float32]) {
  @func_12065(%var_12067, %var_12068) /* ty=(Tensor[(180), uint64], Tensor[(462), float32], Tensor[(13, 3, 14), float32], Tensor[(1, 14), float32], Tensor[(546), float32]) */
}

def @func_6830(%var_6792: Tensor[(630), float32]) -> (Tensor[(180), uint64], Tensor[(462), int16], Tensor[(630), float32], Tensor[(180), uint64]) {
  %35 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %36 = cast(%var_6792, dtype="float32") /* ty=Tensor[(630), float32] */;
  %37 = reshape(%36, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float32] */;
  %38 = @func_4595(%37) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %39 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %40 = %35.0;
  %41 = %38.3;
  %42 = %39.0;
  (%40, %41, %var_6792, %42)
}

def @func_1261() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) {
  %48 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) {
    %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
    %44 = reshape(%43, newshape=[462]) /* ty=Tensor[(462), int16] */;
    %45 = @func_1185(%44) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %46 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
    %47 = %45.4;
    (%46, %47, meta[relay.Constant][1] /* ty=Tensor[(462), int16] */)
  };
  %48() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */
}

def @func_7098() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  @func_7096() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */
}

def @func_1949() -> Tensor[(180), uint64] {
  @func_1947() /* ty=Tensor[(180), uint64] */
}

def @func_3465() -> Tensor[(462), int16] {
  %49 = fn () -> Tensor[(462), int16] {
    @func_2254() /* ty=Tensor[(462), int16] */
  };
  %49() /* ty=Tensor[(462), int16] */
}

def @func_2229() -> Tensor[(462), int16] {
  @func_2227() /* ty=Tensor[(462), int16] */
}

def @func_9897() -> Tensor[(1, 6, 15), float64] {
  %50 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %50.0
}

def @func_9046(%var_9044: float32, %var_9045: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  @func_9042(%var_9044, %var_9045) /* ty=(Tensor[(2, 14, 14), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_4085() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  %54 = fn () -> (Tensor[(180), uint64], Tensor[(462), int16]) {
    %51 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %52 = %51.0;
    %53 = @func_3301() /* ty=Tensor[(462), int16] */;
    (%52, %53)
  };
  %54() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */
}

def @func_11390() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %55 = @func_5308() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %56 = @func_4901() /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) */;
  %57 = %55.0;
  %58 = %56.2;
  (%57, %58)
}

def @func_9676() -> (Tensor[(180), uint64],) {
  %59 = @func_2473() /* ty=Tensor[(180), uint64] */;
  (%59,)
}

def @func_1468() -> Tensor[(462), int16] {
  %60 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %60.2
}

def @func_12362() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %61 = @func_5031() /* ty=(Tensor[(180), uint64],) */;
  %62 = @func_10907() /* ty=Tensor[(1, 6, 15), float64] */;
  %63 = %61.0;
  (%62, %63)
}

def @func_10229() -> Tensor[(180), uint64] {
  %64 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
  %64.1
}

def @func_5671() -> (Tensor[(180), uint64],) {
  @func_5669() /* ty=(Tensor[(180), uint64],) */
}

def @func_3260() -> (Tensor[(1, 6, 15), float64],) {
  %67 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %65 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %66 = %65.0;
    (%66,)
  };
  %67() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_10474(%var_10473: Tensor[(16, 6, 15), float64]) -> (Tensor[(462), int16], Tensor[(462), int16], Tensor[(16, 6, 15), uint64]) {
  %77 = fn (%var_10458: Tensor[(16, 6, 15), float64]) -> (Tensor[(462), int16], Tensor[(462), int16], Tensor[(16, 6, 15), uint64]) {
    %68 = @func_5007() /* ty=(Tensor[(462), int16],) */;
    %69 = @func_4084() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
    %70 = @func_5503() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
    %71 = %70.2;
    %72 = cast(%71, dtype="uint64") /* ty=Tensor[(1, 6, 15), uint64] */;
    %73 = cast(%var_10458, dtype="uint64") /* ty=Tensor[(16, 6, 15), uint64] */;
    %74 = %68.0;
    %75 = %69.1;
    %76 = maximum(%72, %73) /* ty=Tensor[(16, 6, 15), uint64] */;
    (%74, %75, %76)
  };
  %77(%var_10473) /* ty=(Tensor[(462), int16], Tensor[(462), int16], Tensor[(16, 6, 15), uint64]) */
}

def @func_5049() -> (Tensor[(?, 6, 15), int8],) {
  @func_5047() /* ty=(Tensor[(?, 6, 15), int8],) */
}

def @func_5340() -> (Tensor[(462), int16],) {
  %80 = fn () -> (Tensor[(462), int16],) {
    %78 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
    %79 = %78.0;
    (%79,)
  };
  %80() /* ty=(Tensor[(462), int16],) */
}

def @func_1456() -> Tensor[(180), uint64] {
  %81 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %81.1
}

def @func_6042() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %86 = fn () -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
    %82 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
    %83 = @func_2698() /* ty=(Tensor[(180), uint64],) */;
    %84 = %82.0;
    %85 = %83.0;
    (%84, %85)
  };
  %86() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_9809() -> Tensor[(1, 6, 15), float64] {
  %88 = fn () -> Tensor[(1, 6, 15), float64] {
    %87 = @func_7524() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
    %87.1
  };
  %88() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_9678() -> (Tensor[(180), uint64],) {
  @func_9676() /* ty=(Tensor[(180), uint64],) */
}

def @func_12977(%var_12974: Tensor[(180), uint64], %var_12975: Tensor[(450), float64], %var_12976: Tensor[(840, 2), uint8]) -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(10, 2, 9), float32], Tensor[(1, 6, 15), float64], Tensor[(?, 6, 15), float64], Tensor[(450), float64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), uint8], Tensor[(1, 6, 15), float64]) {
  %110 = fn (%var_12901: Tensor[(180), uint64], %var_12939: Tensor[(450), float64], %var_12948: Tensor[(840, 2), uint8]) -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(10, 2, 9), float32], Tensor[(1, 6, 15), float64], Tensor[(?, 6, 15), float64], Tensor[(450), float64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), uint8], Tensor[(1, 6, 15), float64]) {
    %89 = @func_6455() /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) */;
    %90 = cast(%var_12901, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %91 = reshape(%90, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), uint64] */;
    %92 = @func_447(%91) /* ty=(Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) */;
    %93 = %92.0;
    %94 = cast(%93, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %95 = @func_3987() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %96 = cast(%var_12939, dtype="float64") /* ty=Tensor[(450), float64] */;
    %97 = reshape(%96, newshape=[450]) /* ty=Tensor[(450), float64] */;
    %98 = @func_5865(%97) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(5, 6, 15), int64], Tensor[(450), float64], Tensor[(1, 6, 15), float32]) */;
    %99 = cast(%var_12948, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
    %100 = cast(%var_12948, dtype="uint8") /* ty=Tensor[(840, 2), uint8] */;
    %101 = reshape(%99, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
    %102 = reshape(%100, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
    %103 = @func_7746(%101, %102) /* ty=(Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) */;
    %104 = %89.0;
    %105 = log10(%94) /* ty=Tensor[(10, 2, 9), float32] */;
    %106 = %95.0;
    %107 = %98.0;
    %108 = %103.2;
    %109 = @func_7665() /* ty=Tensor[(1, 6, 15), float64] */;
    (%104, %var_12901, %105, %106, %107, %var_12939, %108, %var_12948, %109)
  };
  %110(%var_12974, %var_12975, %var_12976) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(10, 2, 9), float32], Tensor[(1, 6, 15), float64], Tensor[(?, 6, 15), float64], Tensor[(450), float64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), uint8], Tensor[(1, 6, 15), float64]) */
}

def @func_12431() -> (Tensor[(1, 6, 15), float64],) {
  %111 = @func_7603() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) */;
  %112 = %111.1;
  (%112,)
}

def @func_9590() -> Tensor[(?, 6, 15), float64] {
  @func_9588() /* ty=Tensor[(?, 6, 15), float64] */
}

def @func_7928() -> (Tensor[(180), uint64],) {
  %115 = fn () -> (Tensor[(180), uint64],) {
    %113 = @func_5480() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
    %114 = %113.0;
    (%114,)
  };
  %115() /* ty=(Tensor[(180), uint64],) */
}

def @func_12740() -> (Tensor[(462), int16],) {
  @func_12738() /* ty=(Tensor[(462), int16],) */
}

def @func_11111() -> (Tensor[(11, 11, 8), float32], Tensor[(180), uint64], Tensor[(462), int16]) {
  %116 = @func_11066() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(11, 11, 8), float32]) */;
  %117 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %118 = %116.2;
  %119 = @func_4519() /* ty=Tensor[(180), uint64] */;
  %120 = %117.0;
  (%118, %119, %120)
}

def @func_4521() -> Tensor[(180), uint64] {
  @func_4519() /* ty=Tensor[(180), uint64] */
}

def @func_9988(%var_9987: Tensor[(968), float32]) -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(540), float64], Tensor[(968), float32], Tensor[(10, 2, 9), uint64]) {
  %133 = fn (%var_9974: Tensor[(968), float32]) -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(540), float64], Tensor[(968), float32], Tensor[(10, 2, 9), uint64]) {
    %121 = @func_5503() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
    %122 = @func_6862() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
    %123 = cast(meta[relay.Constant][2] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %124 = cast(%var_9974, dtype="float32") /* ty=Tensor[(968), float32] */;
    %125 = reshape(%123, newshape=[15, 9, 4]) /* ty=Tensor[(15, 9, 4), float64] */;
    %126 = reshape(%124, newshape=[968]) /* ty=Tensor[(968), float32] */;
    %127 = @func_8782(%125, %126) /* ty=(Tensor[(15, 9, 4), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(968), float64]) */;
    %128 = @func_7603() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) */;
    %129 = %121.2;
    %130 = %122.1;
    %131 = %127.1;
    %132 = %128.2;
    (%129, %130, %131, meta[relay.Constant][2] /* ty=Tensor[(540), float64] */, %var_9974, %132)
  };
  %133(%var_9987) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(540), float64], Tensor[(968), float32], Tensor[(10, 2, 9), uint64]) */
}

def @func_9270(%var_9268: Tensor[(462), int16]) -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(1, 6, 15), float64], Tensor[(462), bool]) {
  @func_9267(%var_9268) /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(1, 6, 15), float64], Tensor[(462), bool]) */
}

def @func_12125(%var_12085: Tensor[(12, 8, 15), float32], %var_12105: Tensor[(1680), uint8]) -> (Tensor[(12, 8, 15), bool], Tensor[(180), uint64], Tensor[(1680), uint8]) {
  %134 = @func_9106() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) */;
  %135 = %134.3;
  %136 = cast(%135, dtype="bool") /* ty=Tensor[(12, 8, 1), bool] */;
  %137 = cast(%var_12085, dtype="bool") /* ty=Tensor[(12, 8, 15), bool] */;
  %138 = cast(%var_12105, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %139 = cast(%var_12105, dtype="uint8") /* ty=Tensor[(1680), uint8] */;
  %140 = reshape(%138, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
  %141 = reshape(%139, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), uint8] */;
  %142 = @func_7746(%140, %141) /* ty=(Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) */;
  %143 = logical_or(%136, %137) /* ty=Tensor[(12, 8, 15), bool] */;
  %144 = %142.1;
  (%143, %144, %var_12105)
}

def @func_11286() -> Tensor[(14, 8, 2), float32] {
  %145 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 8, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  %146 = cosh(%145) /* ty=Tensor[(14, 8, 2), float32] */;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  asin(%147) /* ty=Tensor[(14, 8, 2), float32] */
}

def @func_10947() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %148 = @func_7415() /* ty=(Tensor[(180), uint64],) */;
  %149 = @func_10407() /* ty=Tensor[(180), uint64] */;
  %150 = %148.0;
  (%149, %150)
}

def @func_8509() -> Tensor[(180), uint64] {
  @func_8507() /* ty=Tensor[(180), uint64] */
}

def @func_4224() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32]) {
  %151 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %154 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %155 = log(%153) /* ty=Tensor[(1, 6, 15), float32] */;
  (%154, %155)
}

def @func_11574(%var_11572: Tensor[(4, 6, 15), float64], %var_11573: Tensor[(630), float32]) -> (Tensor[(4, 6, 15), int32], Tensor[(630), float32], Tensor[(630), float32], Tensor[(1, 6, 15), float64], Tensor[(4, 6, 15), float32], Tensor[(180), uint64], Tensor[(4, 6, 15), float64], Tensor[(4, 6, 15), int8]) {
  %194 = fn (%var_11476: Tensor[(4, 6, 15), float64], %var_11496: Tensor[(630), float32]) -> (Tensor[(4, 6, 15), int32], Tensor[(630), float32], Tensor[(630), float32], Tensor[(1, 6, 15), float64], Tensor[(4, 6, 15), float32], Tensor[(180), uint64], Tensor[(4, 6, 15), float64], Tensor[(4, 6, 15), int8]) {
    %156 = @func_7404() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %157 = %156.0;
    %158 = cast(%157, dtype="int32") /* ty=Tensor[(1, 6, 15), int32] */;
    %159 = cast(%var_11476, dtype="int32") /* ty=Tensor[(4, 6, 15), int32] */;
    %160 = cast(%var_11496, dtype="float32") /* ty=Tensor[(630), float32] */;
    %161 = reshape(%160, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %162 = @func_6830(%161) /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(630), float32], Tensor[(180), uint64]) */;
    %163 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %164 = cast(%var_11476, dtype="float32") /* ty=Tensor[(4, 6, 15), float32] */;
    %165 = atanh(%164) /* ty=Tensor[(4, 6, 15), float32] */;
    %166 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 6, 15), float32] */, dtype="uint32") /* ty=Tensor[(4, 6, 15), uint32] */;
    %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %168 = cast(%165, dtype="uint32") /* ty=Tensor[(4, 6, 15), uint32] */;
    %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %170 = left_shift(%168, %169) /* ty=Tensor[(4, 6, 15), uint32] */;
    %171 = cast(%170, dtype="float32") /* ty=Tensor[(4, 6, 15), float32] */;
    %172 = @func_8301() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
    %173 = %172.1;
    %174 = cast(%165, dtype="bool") /* ty=Tensor[(4, 6, 15), bool] */;
    %175 = cast(%173, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
    %176 = not_equal(%174, %175) /* ty=Tensor[(4, 6, 15), bool] */;
    %177 = cast(%176, dtype="float64") /* ty=Tensor[(4, 6, 15), float64] */;
    %178 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 6, 15), float32] */, dtype="bool") /* ty=Tensor[(4, 6, 15), bool] */;
    %179 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %180 = cast(%170, dtype="bool") /* ty=Tensor[(4, 6, 15), bool] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %182 = less_equal(%180, %181) /* ty=Tensor[(4, 6, 15), bool] */;
    %183 = cast(%182, dtype="int8") /* ty=Tensor[(4, 6, 15), int8] */;
    %184 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%170, dtype="int8") /* ty=Tensor[(4, 6, 15), int8] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %187 = multiply(%158, %159) /* ty=Tensor[(4, 6, 15), int32] */;
    %188 = %162.2;
    %189 = %163.0;
    %190 = log10(%171) /* ty=Tensor[(4, 6, 15), float32] */;
    %191 = @func_10229() /* ty=Tensor[(180), uint64] */;
    %192 = sqrt(%177) /* ty=Tensor[(4, 6, 15), float64] */;
    %193 = bitwise_xor(%185, %186) /* ty=Tensor[(4, 6, 15), int8] */;
    (%187, %188, %var_11496, %189, %190, %191, %192, %193)
  };
  %194(%var_11572, %var_11573) /* ty=(Tensor[(4, 6, 15), int32], Tensor[(630), float32], Tensor[(630), float32], Tensor[(1, 6, 15), float64], Tensor[(4, 6, 15), float32], Tensor[(180), uint64], Tensor[(4, 6, 15), float64], Tensor[(4, 6, 15), int8]) */
}

def @func_2255() -> Tensor[(462), int16] {
  %196 = fn () -> Tensor[(462), int16] {
    %195 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
    %195.2
  };
  %196() /* ty=Tensor[(462), int16] */
}

def @func_5865(%var_5848: Tensor[(450), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(5, 6, 15), int64], Tensor[(450), float64], Tensor[(1, 6, 15), float32]) {
  %197 = cast(%var_5848, dtype="float64") /* ty=Tensor[(450), float64] */;
  %198 = reshape(%197, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %199 = @func_4279(%198) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) */;
  %200 = @func_2941() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %201 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
  %202 = %199.1;
  %203 = %200.0;
  (%201, %202, %var_5848, %203)
}

def @func_9042(%var_9020: float32, %var_9021: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %204 = cast(%var_9020, dtype="float32") /* ty=float32 */;
  %205 = cast(%var_9021, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %206 = @func_5374() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %207 = mod(%204, %205) /* ty=Tensor[(2, 14, 14), float32] */;
  %208 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %209 = %206.1;
  (%207, %208, %209)
}

def @func_11913(%var_11912: Tensor[(13, 140), int32]) -> Tensor[(13, 140), bool] {
  %214 = fn (%var_11905: Tensor[(13, 140), int32]) -> Tensor[(13, 140), bool] {
    %210 = @func_7640() /* ty=(Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) */;
    %211 = %210.0;
    %212 = cast(%211, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
    %213 = cast(%var_11905, dtype="bool") /* ty=Tensor[(13, 140), bool] */;
    less(%212, %213) /* ty=Tensor[(13, 140), bool] */
  };
  %214(%var_11912) /* ty=Tensor[(13, 140), bool] */
}

def @func_13028(%var_13027: Tensor[(13, 1, 7), float64]) -> (Tensor[(13, 1, 7), float64], Tensor[(180), uint64]) {
  %219 = fn (%var_13020: Tensor[(13, 1, 7), float64]) -> (Tensor[(13, 1, 7), float64], Tensor[(180), uint64]) {
    %215 = cast(%var_13020, dtype="float64") /* ty=Tensor[(13, 1, 7), float64] */;
    %216 = @func_10178() /* ty=(Tensor[(180), uint64],) */;
    %217 = atanh(%215) /* ty=Tensor[(13, 1, 7), float64] */;
    %218 = %216.0;
    (%217, %218)
  };
  %219(%var_13027) /* ty=(Tensor[(13, 1, 7), float64], Tensor[(180), uint64]) */
}

def @func_9588() -> Tensor[(?, 6, 15), float64] {
  @func_2587() /* ty=Tensor[(?, 6, 15), float64] */
}

def @func_10654() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  @func_10652() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_4027() -> (Tensor[(1, 6, 15), float64],) {
  @func_4025() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_6862() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  %220 = @func_3908() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) */;
  %221 = %220.1;
  %222 = @func_2227() /* ty=Tensor[(462), int16] */;
  (%221, %222)
}

def @func_3989() -> (Tensor[(1, 6, 15), float64],) {
  @func_3987() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_5175(%var_5127: Tensor[(630), float32], %var_5141: Tensor[(6, 6, 15), float64], %var_5165: uint16, %var_5166: Tensor[(45), uint16]) -> (Tensor[(180), uint64], Tensor[(630), float32], Tensor[(6, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(180), uint64], uint16, Tensor[(45), uint16]) {
  %223 = cast(%var_5127, dtype="float32") /* ty=Tensor[(630), float32] */;
  %224 = reshape(%223, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float32] */;
  %225 = @func_4595(%224) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %226 = %225.2;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %228 = cast(%var_5141, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %229 = cast(%var_5127, dtype="float32") /* ty=Tensor[(630), float32] */;
  %230 = reshape(%229, newshape=[7, 6, 15]) /* ty=Tensor[(7, 6, 15), float32] */;
  %231 = @func_4595(%230) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %232 = cast(%var_5165, dtype="uint16") /* ty=uint16 */;
  %233 = cast(%var_5166, dtype="uint16") /* ty=Tensor[(45), uint16] */;
  %234 = reshape(%232, newshape=[]) /* ty=uint16 */;
  %235 = reshape(%233, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), uint16] */;
  %236 = @func_2034(%234, %235) /* ty=(Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) */;
  %237 = @func_4519() /* ty=Tensor[(180), uint64] */;
  %238 = multiply(%227, %228) /* ty=Tensor[(6, 6, 15), float64] */;
  %239 = %231.0;
  %240 = %236.2;
  (%237, %var_5127, %238, %239, %240, %var_5165, %var_5166)
}

def @func_5565(%var_5530: Tensor[(12, 11, 9), float32], %var_5551: Tensor[(450), float64]) -> (Tensor[(12, 11, 9), float32], Tensor[(462), int16], Tensor[(?, 6, 15), int8], Tensor[(1, 6, 15), float64], Tensor[(450), float64]) {
  %241 = cast(%var_5530, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %242 = @func_5047() /* ty=(Tensor[(?, 6, 15), int8],) */;
  %243 = cast(%var_5551, dtype="float64") /* ty=Tensor[(450), float64] */;
  %244 = reshape(%243, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %245 = @func_4279(%244) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) */;
  %246 = acos(%241) /* ty=Tensor[(12, 11, 9), float32] */;
  %247 = @func_1468() /* ty=Tensor[(462), int16] */;
  %248 = %242.0;
  %249 = %245.0;
  (%246, %247, %248, %249, %var_5551)
}

def @func_2818(%var_2736: Tensor[(180), uint64], %var_2785: Tensor[(14, 6, 15), float64]) -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32], Tensor[(14, 6, 15), bool]) {
  %250 = cast(%var_2736, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %251 = reshape(%250, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %252 = @func_2163(%251) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %253 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %256 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %259 = cast(%254, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
  %260 = cast(%var_2785, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %261 = %252.2;
  %262 = log2(%255) /* ty=Tensor[(1, 6, 15), float64] */;
  %263 = erf(%258) /* ty=Tensor[(1, 6, 15), float32] */;
  %264 = greater(%259, %260) /* ty=Tensor[(14, 6, 15), bool] */;
  (%261, %var_2736, %262, %263, %264)
}

def @func_5094() -> (Tensor[(462), int16], Tensor[(180), uint64]) {
  %268 = fn () -> (Tensor[(462), int16], Tensor[(180), uint64]) {
    %265 = @func_3932() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %266 = @func_2227() /* ty=Tensor[(462), int16] */;
    %267 = %265.1;
    (%266, %267)
  };
  %268() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */
}

def @func_9727() -> Tensor[(180), uint64] {
  @func_9725() /* ty=Tensor[(180), uint64] */
}

def @func_9535() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %273 = fn () -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
    %269 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %270 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %271 = %269.1;
    %272 = %270.0;
    (%271, %272)
  };
  %273() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */
}

def @func_2389() -> (Tensor[(462), int16], Tensor[(?, 6, 15), int8]) {
  %274 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %275 = %274.0;
  %276 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  %279 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%275, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %282 = @func_2254() /* ty=Tensor[(462), int16] */;
  %283 = bitwise_xor(%280, %281) /* ty=Tensor[(?, 6, 15), int8] */;
  (%282, %283)
}

def @func_8301() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %284 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %285 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %286 = %284.0;
  %287 = %285.0;
  (%286, %287)
}

def @func_5033() -> (Tensor[(180), uint64],) {
  @func_5031() /* ty=(Tensor[(180), uint64],) */
}

def @func_8507() -> Tensor[(180), uint64] {
  %288 = @func_5031() /* ty=(Tensor[(180), uint64],) */;
  %288.0
}

def @func_5009() -> (Tensor[(462), int16],) {
  @func_5007() /* ty=(Tensor[(462), int16],) */
}

def @func_4597(%var_4596: Tensor[(7, 6, 15), float32]) -> (Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
  %303 = fn (%var_4546: Tensor[(7, 6, 15), float32]) -> (Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
    %289 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
    %290 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
    %291 = %290.0;
    %292 = cast(%291, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
    %293 = cast(%var_4546, dtype="int8") /* ty=Tensor[(7, 6, 15), int8] */;
    %294 = right_shift(%292, %293) /* ty=Tensor[(7, 6, 15), int8] */;
    %295 = cast(%294, dtype="int16") /* ty=Tensor[(7, 6, 15), int16] */;
    %296 = shape_of(%var_4546, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%var_4546, dtype="int16") /* ty=Tensor[(7, 6, 15), int16] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %299 = %289.1;
    %300 = maximum(%297, %298) /* ty=Tensor[(7, 6, 15), int16] */;
    %301 = @func_3700() /* ty=Tensor[(1, 6, 15), float64] */;
    %302 = @func_3301() /* ty=Tensor[(462), int16] */;
    (%299, %300, %301, %302)
  };
  %303(%var_4596) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(7, 6, 15), int16], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */
}

def @func_10907() -> Tensor[(1, 6, 15), float64] {
  @func_6110() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_2588() -> Tensor[(?, 6, 15), float64] {
  %316 = fn () -> Tensor[(?, 6, 15), float64] {
    %304 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
    %306 = sinh(%305) /* ty=Tensor[(1, 6, 15), float32] */;
    %307 = cast(%304, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%306, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %311 = floor_divide(%309, %310) /* ty=Tensor[(?, 6, 15), float32] */;
    %312 = cast(%311, dtype="float64") /* ty=Tensor[(?, 6, 15), float64] */;
    %313 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%306, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%314, %315) /* ty=Tensor[(?, 6, 15), float64] */
  };
  %316() /* ty=Tensor[(?, 6, 15), float64] */
}

def @func_6080() -> Tensor[(1, 6, 15), float64] {
  @func_6078() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_8639() -> (Tensor[(1, 6, 15), float64],) {
  @func_8637() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_7906() -> (Tensor[(462), int16], Tensor[(462), int16]) {
  %317 = @func_3301() /* ty=Tensor[(462), int16] */;
  %318 = @func_6689() /* ty=Tensor[(462), int16] */;
  (%317, %318)
}

def @func_5868(%var_5866: Tensor[(450), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(5, 6, 15), int64], Tensor[(450), float64], Tensor[(1, 6, 15), float32]) {
  @func_5865(%var_5866) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(5, 6, 15), int64], Tensor[(450), float64], Tensor[(1, 6, 15), float32]) */
}

def @func_2391() -> (Tensor[(462), int16], Tensor[(?, 6, 15), int8]) {
  @func_2389() /* ty=(Tensor[(462), int16], Tensor[(?, 6, 15), int8]) */
}

def @func_10671(%var_10669: Tensor[(13, 9, 3), float64], %var_10670: Tensor[(13, 9, 3), float64]) -> Tensor[(13, 9, 3), float64] {
  %323 = fn (%var_10663: Tensor[(13, 9, 3), float64], %var_10664: Tensor[(13, 9, 3), float64]) -> Tensor[(13, 9, 3), float64] {
    %319 = cast(%var_10664, dtype="float64") /* ty=Tensor[(13, 9, 3), float64] */;
    %320 = shape_of(%var_10663, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%var_10663, dtype="float64") /* ty=Tensor[(13, 9, 3), float64] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%321, %322) /* ty=Tensor[(13, 9, 3), float64] */
  };
  %323(%var_10669, %var_10670) /* ty=Tensor[(13, 9, 3), float64] */
}

def @func_1470() -> Tensor[(462), int16] {
  @func_1468() /* ty=Tensor[(462), int16] */
}

def @func_7481() -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
  @func_7479() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */
}

def @func_6356() -> Tensor[(180), uint64] {
  @func_1947() /* ty=Tensor[(180), uint64] */
}

def @func_12364() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  @func_12362() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_7749(%var_7747: Tensor[(10, 14, 12), uint8], %var_7748: Tensor[(10, 14, 12), uint8]) -> (Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) {
  %333 = fn (%var_7713: Tensor[(10, 14, 12), uint8], %var_7714: Tensor[(10, 14, 12), uint8]) -> (Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) {
    %324 = cast(%var_7714, dtype="uint8") /* ty=Tensor[(10, 14, 12), uint8] */;
    %325 = shape_of(%var_7713, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%var_7713, dtype="uint8") /* ty=Tensor[(10, 14, 12), uint8] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %328 = @func_5811() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %329 = cast(%var_7713, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
    %330 = minimum(%326, %327) /* ty=Tensor[(10, 14, 12), uint8] */;
    %331 = %328.1;
    %332 = sin(%329) /* ty=Tensor[(10, 14, 12), float64] */;
    (%330, %331, %332)
  };
  %333(%var_7747, %var_7748) /* ty=(Tensor[(10, 14, 12), uint8], Tensor[(180), uint64], Tensor[(10, 14, 12), float64]) */
}

def @func_7705() -> Tensor[(1, 6, 15), float64] {
  @func_7703() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_12407(%var_12406: Tensor[(8, 16, 7), float64]) -> (Tensor[(8, 16, 7), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %339 = fn (%var_12388: Tensor[(8, 16, 7), float64]) -> (Tensor[(8, 16, 7), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
    %334 = cast(%var_12388, dtype="float64") /* ty=Tensor[(8, 16, 7), float64] */;
    %335 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
    %336 = cos(%334) /* ty=Tensor[(8, 16, 7), float64] */;
    %337 = @func_4292() /* ty=Tensor[(462), int16] */;
    %338 = %335.0;
    (%336, %337, %338)
  };
  %339(%var_12406) /* ty=(Tensor[(8, 16, 7), float64], Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */
}

def @func_12065(%var_12049: Tensor[(1, 14), float32], %var_12050: Tensor[(546), float32]) -> (Tensor[(180), uint64], Tensor[(462), float32], Tensor[(13, 3, 14), float32], Tensor[(1, 14), float32], Tensor[(546), float32]) {
  %340 = @func_9676() /* ty=(Tensor[(180), uint64],) */;
  %341 = @func_7849() /* ty=(Tensor[(462), int16],) */;
  %342 = %341.0;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(462), float32] */;
  %344 = cast(%var_12049, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
  %345 = cast(%var_12050, dtype="float32") /* ty=Tensor[(546), float32] */;
  %346 = reshape(%344, newshape=[1, 1, 14]) /* ty=Tensor[(1, 1, 14), float32] */;
  %347 = reshape(%345, newshape=[13, 3, 14]) /* ty=Tensor[(13, 3, 14), float32] */;
  %348 = %340.0;
  %349 = exp(%343) /* ty=Tensor[(462), float32] */;
  %350 = @func_7956(%346, %347) /* ty=Tensor[(13, 3, 14), float32] */;
  (%348, %349, %350, %var_12049, %var_12050)
}

def @func_5525() -> (Tensor[(1, 6, 15), float64],) {
  %351 = @func_3734() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %352 = %351.1;
  (%352,)
}

def @func_7416() -> (Tensor[(180), uint64],) {
  %354 = fn () -> (Tensor[(180), uint64],) {
    %353 = @func_6882() /* ty=Tensor[(180), uint64] */;
    (%353,)
  };
  %354() /* ty=(Tensor[(180), uint64],) */
}

def @func_12711() -> Tensor[(180), uint64] {
  @func_4916() /* ty=Tensor[(180), uint64] */
}

def @func_3909() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) {
  %365 = fn () -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) {
    %355 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %356 = @func_2473() /* ty=Tensor[(180), uint64] */;
    %357 = cast(%356, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %358 = reshape(%357, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %359 = @func_1139(%358) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %360 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
    %361 = %355.0;
    %362 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
    %363 = %359.0;
    %364 = %360.9;
    (%356, %361, %362, %363, %364)
  };
  %365() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) */
}

def @func_5181(%var_5177: Tensor[(630), float32], %var_5178: Tensor[(6, 6, 15), float64], %var_5179: uint16, %var_5180: Tensor[(45), uint16]) -> (Tensor[(180), uint64], Tensor[(630), float32], Tensor[(6, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(180), uint64], uint16, Tensor[(45), uint16]) {
  @func_5175(%var_5177, %var_5178, %var_5179, %var_5180) /* ty=(Tensor[(180), uint64], Tensor[(630), float32], Tensor[(6, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(180), uint64], uint16, Tensor[(45), uint16]) */
}

def @func_7404() -> (Tensor[(1, 6, 15), float64],) {
  %366 = @func_4854() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %367 = %366.0;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %369 = cos(%368) /* ty=Tensor[(1, 6, 15), float64] */;
  (%369,)
}

def @func_4756(%var_4755: uint64) -> (Tensor[(180), uint64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(11, 10, 5), float32], Tensor[(1, 6, 15), float64]) {
  %385 = fn (%var_4738: uint64) -> (Tensor[(180), uint64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(11, 10, 5), float32], Tensor[(1, 6, 15), float64]) {
    %370 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
    %371 = cast(%var_4738, dtype="uint64") /* ty=uint64 */;
    %372 = cast(meta[relay.Constant][5] /* ty=Tensor[(1320), uint64] */, dtype="uint64") /* ty=Tensor[(1320), uint64] */;
    %373 = reshape(%371, newshape=[]) /* ty=uint64 */;
    %374 = reshape(%372, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint64] */;
    %375 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 10, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
    %376 = exp(%375) /* ty=Tensor[(11, 10, 5), float64] */;
    %377 = cast(%376, dtype="float64") /* ty=Tensor[(11, 10, 5), float64] */;
    %378 = rsqrt(%377) /* ty=Tensor[(11, 10, 5), float64] */;
    %379 = cast(%378, dtype="float32") /* ty=Tensor[(11, 10, 5), float32] */;
    %380 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %381 = %370.0;
    %382 = @func_1559(%373, %374) /* ty=Tensor[(12, 10, 11), bool] */;
    %383 = acosh(%379) /* ty=Tensor[(11, 10, 5), float32] */;
    %384 = %380.0;
    (%381, %382, %var_4738, meta[relay.Constant][5] /* ty=Tensor[(1320), uint64] */, %383, %384)
  };
  %385(%var_4755) /* ty=(Tensor[(180), uint64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(11, 10, 5), float32], Tensor[(1, 6, 15), float64]) */
}

def @func_6833(%var_6831: Tensor[(630), float32]) -> (Tensor[(180), uint64], Tensor[(462), int16], Tensor[(630), float32], Tensor[(180), uint64]) {
  @func_6830(%var_6831) /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(630), float32], Tensor[(180), uint64]) */
}

def @func_12738() -> (Tensor[(462), int16],) {
  %386 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %387 = %386.0;
  (%387,)
}

def @func_3987() -> (Tensor[(1, 6, 15), float64],) {
  %388 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %389 = %388.0;
  (%389,)
}

def @func_10749(%var_10748: Tensor[(462), int16]) -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(462), int16], Tensor[(12, 10, 11), bool]) {
  %402 = fn (%var_10732: Tensor[(462), int16]) -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(462), int16], Tensor[(12, 10, 11), bool]) {
    %390 = @func_8948() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) */;
    %391 = @func_6041() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %392 = @func_5669() /* ty=(Tensor[(180), uint64],) */;
    %393 = cast(%var_10732, dtype="int16") /* ty=Tensor[(462), int16] */;
    %394 = reshape(%393, newshape=[462]) /* ty=Tensor[(462), int16] */;
    %395 = @func_9267(%394) /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(1, 6, 15), float64], Tensor[(462), bool]) */;
    %396 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
    %397 = %390.1;
    %398 = %391.1;
    %399 = %392.0;
    %400 = %395.1;
    %401 = %396.7;
    (%397, %398, %399, %400, %var_10732, %401)
  };
  %402(%var_10748) /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(462), int16], Tensor[(12, 10, 11), bool]) */
}

def @func_11288() -> Tensor[(14, 8, 2), float32] {
  @func_11286() /* ty=Tensor[(14, 8, 2), float32] */
}

def @func_1845(%var_1844: Tensor[(1, 6, 15), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(180, 1), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(180, ?), int16], Tensor[(180, 1), float64], Tensor[(180, 1), float32], Tensor[(462), int16]) {
  %434 = fn (%var_1762: Tensor[(1, 6, 15), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(180, 1), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(180, ?), int16], Tensor[(180, 1), float64], Tensor[(180, 1), float32], Tensor[(462), int16]) {
    %403 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
    %404 = cast(%var_1762, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
    %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %406 = cast(%403, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %408 = cast(meta[relay.Constant][7] /* ty=Tensor[(180, 1), uint64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
    %409 = asin(%408) /* ty=Tensor[(180, 1), float64] */;
    %410 = cast(%409, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
    %411 = cast(meta[relay.Constant][8] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
    %412 = reshape(%411, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), int16] */;
    %413 = cast(%409, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
    %414 = log2(%413) /* ty=Tensor[(180, 1), float32] */;
    %415 = cast(%414, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
    %416 = log10(%415) /* ty=Tensor[(180, 1), float64] */;
    %417 = cast(meta[relay.Constant][7] /* ty=Tensor[(180, 1), uint64] */, dtype="uint64") /* ty=Tensor[(180, 1), uint64] */;
    %418 = reshape(%417, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
    %419 = @func_1088(%418) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
    %420 = %419.2;
    %421 = cast(%420, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
    %422 = shape_of(%416, dtype="int32") /* ty=Tensor[(2), int32] */;
    %423 = cast(%416, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %425 = cast(%416, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
    %426 = cast(%409, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
    %427 = mod(%406, %407) /* ty=Tensor[(?, 6, 15), float64] */;
    %428 = atanh(%410) /* ty=Tensor[(180, 1), float64] */;
    %429 = @func_488(%412) /* ty=Tensor[(3, 14, 11), int16] */;
    %430 = maximum(%423, %424) /* ty=Tensor[(180, ?), int16] */;
    %431 = acosh(%425) /* ty=Tensor[(180, 1), float64] */;
    %432 = asinh(%426) /* ty=Tensor[(180, 1), float32] */;
    %433 = @func_1468() /* ty=Tensor[(462), int16] */;
    (%427, %428, %429, meta[relay.Constant][8] /* ty=Tensor[(462), int16] */, %430, %431, %432, %433)
  };
  %434(%var_1844) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180, 1), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(180, ?), int16], Tensor[(180, 1), float64], Tensor[(180, 1), float32], Tensor[(462), int16]) */
}

def @func_8405() -> Tensor[(462), int16] {
  @func_7160() /* ty=Tensor[(462), int16] */
}

def @func_10407() -> Tensor[(180), uint64] {
  @func_1947() /* ty=Tensor[(180), uint64] */
}

def @func_12471() -> (Tensor[(462), int16],) {
  @func_12469() /* ty=(Tensor[(462), int16],) */
}

def @func_3932() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %435 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
  %436 = @func_2473() /* ty=Tensor[(180), uint64] */;
  %437 = %435.0;
  (%436, %437)
}

def @func_8049(%var_8037: Tensor[(10, 8, 10), float32]) -> (Tensor[(10, 8, 10), float32], Tensor[(10, 8, 10), float32]) {
  %438 = cast(%var_8037, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %439 = atanh(%438) /* ty=Tensor[(10, 8, 10), float32] */;
  %440 = cast(%var_8037, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %444 = cast(%439, dtype="float32") /* ty=Tensor[(10, 8, 10), float32] */;
  %445 = power(%442, %443) /* ty=Tensor[(10, 8, 10), float32] */;
  %446 = sigmoid(%444) /* ty=Tensor[(10, 8, 10), float32] */;
  (%445, %446)
}

def @func_5981(%var_5979: Tensor[(11, 11, 8), float32], %var_5980: Tensor[(540), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(11, 11, 8), bool], Tensor[(180), uint64], Tensor[(70, 9), float32], Tensor[(540), float64], uint16, Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(45), float32]) {
  %475 = fn (%var_5911: Tensor[(11, 11, 8), float32], %var_5935: Tensor[(540), float64]) -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(11, 11, 8), bool], Tensor[(180), uint64], Tensor[(70, 9), float32], Tensor[(540), float64], uint16, Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(45), float32]) {
    %447 = @func_4155() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
    %448 = @func_5780() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %449 = %448.0;
    %450 = cast(%var_5911, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
    %452 = cast(%449, dtype="bool") /* ty=Tensor[(11, 11, 8), bool] */;
    %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %454 = cast(meta[relay.Constant][9] /* ty=Tensor[(70, 9), float32] */, dtype="float32") /* ty=Tensor[(70, 9), float32] */;
    %455 = cast(%var_5935, dtype="float64") /* ty=Tensor[(540), float64] */;
    %456 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %457 = cast(meta[relay.Constant][11] /* ty=Tensor[(45), uint16] */, dtype="uint16") /* ty=Tensor[(45), uint16] */;
    %458 = reshape(%454, newshape=[630]) /* ty=Tensor[(630), float32] */;
    %459 = reshape(%455, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float64] */;
    %460 = reshape(%456, newshape=[]) /* ty=uint16 */;
    %461 = reshape(%457, newshape=[45]) /* ty=Tensor[(45), uint16] */;
    %462 = @func_5175(%458, %459, %460, %461) /* ty=(Tensor[(180), uint64], Tensor[(630), float32], Tensor[(6, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(180), uint64], uint16, Tensor[(45), uint16]) */;
    %463 = %447.0;
    %464 = cast(%463, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %465 = reshape(%464, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %466 = @func_2163(%465) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %467 = @func_4629() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
    %468 = cast(meta[relay.Constant][11] /* ty=Tensor[(45), uint16] */, dtype="float32") /* ty=Tensor[(45), float32] */;
    %469 = @func_2587() /* ty=Tensor[(?, 6, 15), float64] */;
    %470 = not_equal(%452, %453) /* ty=Tensor[(11, 11, 8), bool] */;
    %471 = %462.0;
    %472 = %466.1;
    %473 = %467.1;
    %474 = rsqrt(%468) /* ty=Tensor[(45), float32] */;
    (%469, %463, %470, %471, meta[relay.Constant][9] /* ty=Tensor[(70, 9), float32] */, %var_5935, meta[relay.Constant][10] /* ty=uint16 */, %472, %473, %474)
  };
  %475(%var_5979, %var_5980) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(11, 11, 8), bool], Tensor[(180), uint64], Tensor[(70, 9), float32], Tensor[(540), float64], uint16, Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(45), float32]) */
}

def @func_7344() -> (Tensor[(1, 6, 15), float32],) {
  @func_7342() /* ty=(Tensor[(1, 6, 15), float32],) */
}

def @func_3082() -> Tensor[(180), uint64] {
  %477 = fn () -> Tensor[(180), uint64] {
    %476 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %476.1
  };
  %477() /* ty=Tensor[(180), uint64] */
}

def @func_1867() -> (Tensor[(1, 6, 15), float64],) {
  %480 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %478 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %479 = %478.0;
    (%479,)
  };
  %480() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_5480() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %481 = @func_3259() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %482 = @func_3081() /* ty=Tensor[(180), uint64] */;
  %483 = %481.0;
  (%482, %483)
}

def @func_1035() -> Tensor[(1, 6, 15), float64] {
  @func_1033() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_10511() -> (Tensor[(180), uint64],) {
  @func_10509() /* ty=(Tensor[(180), uint64],) */
}

def @func_4630() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %488 = fn () -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
    %484 = @func_2856() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
    %485 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %486 = %484.2;
    %487 = %485.0;
    (%486, %487)
  };
  %488() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */
}

def @func_5047() -> (Tensor[(?, 6, 15), int8],) {
  %489 = @func_2389() /* ty=(Tensor[(462), int16], Tensor[(?, 6, 15), int8]) */;
  %490 = %489.1;
  (%490,)
}

def @func_8211() -> Tensor[(180), uint64] {
  %491 = @func_7415() /* ty=(Tensor[(180), uint64],) */;
  %491.0
}

def @func_12713() -> Tensor[(180), uint64] {
  @func_12711() /* ty=Tensor[(180), uint64] */
}

def @func_4294() -> Tensor[(462), int16] {
  @func_4292() /* ty=Tensor[(462), int16] */
}

def @func_10116() -> (Tensor[(462), int16], Tensor[(11, 11, 8), float32]) {
  %495 = fn () -> (Tensor[(462), int16], Tensor[(11, 11, 8), float32]) {
    %492 = @func_5780() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %493 = @func_8405() /* ty=Tensor[(462), int16] */;
    %494 = %492.0;
    (%493, %494)
  };
  %495() /* ty=(Tensor[(462), int16], Tensor[(11, 11, 8), float32]) */
}

def @func_3701() -> Tensor[(1, 6, 15), float64] {
  %497 = fn () -> Tensor[(1, 6, 15), float64] {
    %496 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %496.0
  };
  %497() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_5624() -> (Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) {
  @func_5622() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) */
}

def @func_7204() -> (Tensor[(180), uint64],) {
  %498 = @func_4916() /* ty=Tensor[(180), uint64] */;
  (%498,)
}

def @func_12590() -> Tensor[(462), int16] {
  @func_4292() /* ty=Tensor[(462), int16] */
}

def @func_4917() -> Tensor[(180), uint64] {
  %500 = fn () -> Tensor[(180), uint64] {
    %499 = @func_4009() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
    %499.0
  };
  %500() /* ty=Tensor[(180), uint64] */
}

def @func_7959(%var_7957: Tensor[(1, 1, 14), float32], %var_7958: Tensor[(13, 3, 14), float32]) -> Tensor[(13, 3, 14), float32] {
  %503 = fn (%var_7938: Tensor[(1, 1, 14), float32], %var_7939: Tensor[(13, 3, 14), float32]) -> Tensor[(13, 3, 14), float32] {
    %501 = cast(%var_7938, dtype="float32") /* ty=Tensor[(1, 1, 14), float32] */;
    %502 = cast(%var_7939, dtype="float32") /* ty=Tensor[(13, 3, 14), float32] */;
    floor_divide(%501, %502) /* ty=Tensor[(13, 3, 14), float32] */
  };
  %503(%var_7957, %var_7958) /* ty=Tensor[(13, 3, 14), float32] */
}

def @func_6457() -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) {
  @func_6455() /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_7479() -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
  %504 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %505 = %504.0;
  %506 = @func_3301() /* ty=Tensor[(462), int16] */;
  (%505, %506)
}

def @func_1941() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %511 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
    %507 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %508 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %509 = %507.0;
    %510 = %508.0;
    (%509, %510)
  };
  %511() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_5781() -> (Tensor[(11, 11, 8), float32],) {
  %514 = fn () -> (Tensor[(11, 11, 8), float32],) {
    %512 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
    %513 = %512.1;
    (%513,)
  };
  %514() /* ty=(Tensor[(11, 11, 8), float32],) */
}

def @func_2474() -> Tensor[(180), uint64] {
  %516 = fn () -> Tensor[(180), uint64] {
    %515 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
    %515.0
  };
  %516() /* ty=Tensor[(180), uint64] */
}

def @func_12592() -> Tensor[(462), int16] {
  @func_12590() /* ty=Tensor[(462), int16] */
}

def @func_1139(%var_1131: Tensor[(180), uint64]) -> (Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %517 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 8), float32] */;
  %518 = cast(%var_1131, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %519 = reshape(%518, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
  %520 = @func_1088(%519) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
  %521 = sinh(%517) /* ty=Tensor[(11, 11, 8), float32] */;
  %522 = %520.3;
  (%521, %522, %var_1131)
}

def @func_1091(%var_1089: Tensor[(30, 6), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) {
  @func_1088(%var_1089) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */
}

def @func_8106() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %527 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
    %523 = @func_5480() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
    %524 = @func_3585() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %525 = %523.1;
    %526 = %524.0;
    (%525, %526)
  };
  %527() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_6535() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  @func_6533() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_11392() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  @func_11390() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_10382(%var_10381: Tensor[(2, 6, 15), float64]) -> (Tensor[(180), uint64], Tensor[(2, 6, 15), int64]) {
  %534 = fn (%var_10372: Tensor[(2, 6, 15), float64]) -> (Tensor[(180), uint64], Tensor[(2, 6, 15), int64]) {
    %528 = @func_6533() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %529 = @func_8386() /* ty=Tensor[(1, 6, 15), float64] */;
    %530 = cast(%529, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
    %531 = cast(%var_10372, dtype="int64") /* ty=Tensor[(2, 6, 15), int64] */;
    %532 = %528.0;
    %533 = logical_xor(%530, %531) /* ty=Tensor[(2, 6, 15), int64] */;
    (%532, %533)
  };
  %534(%var_10381) /* ty=(Tensor[(180), uint64], Tensor[(2, 6, 15), int64]) */
}

def @func_9224(%var_9213: Tensor[(462), int16]) -> Tensor[(462), float32] {
  %535 = @func_6555() /* ty=(Tensor[(462), int16],) */;
  %536 = %535.0;
  %537 = cast(%var_9213, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(1), int32] */;
  %539 = cast(%536, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %541 = bitwise_xor(%539, %540) /* ty=Tensor[(462), uint16] */;
  %542 = cast(%var_9213, dtype="float32") /* ty=Tensor[(462), float32] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(1), int32] */;
  %544 = cast(%541, dtype="float32") /* ty=Tensor[(462), float32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?), float32] */;
  mod(%544, %545) /* ty=Tensor[(462), float32] */
}

def @func_4281(%var_4280: Tensor[(5, 6, 15), float64]) -> (Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) {
  %552 = fn (%var_4270: Tensor[(5, 6, 15), float64]) -> (Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) {
    %546 = @func_3259() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %547 = %546.0;
    %548 = cast(%547, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
    %549 = cast(%var_4270, dtype="int64") /* ty=Tensor[(5, 6, 15), int64] */;
    %550 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
    %551 = minimum(%548, %549) /* ty=Tensor[(5, 6, 15), int64] */;
    (%550, %551)
  };
  %552(%var_4280) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(5, 6, 15), int64]) */
}

def @func_4156() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %556 = fn () -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
    %553 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %554 = %553.1;
    %555 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
    (%554, %555)
  };
  %556() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */
}

def @func_5308() -> (Tensor[(1, 6, 15), float64],) {
  %557 = @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %558 = %557.0;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %560 = asinh(%559) /* ty=Tensor[(1, 6, 15), float64] */;
  (%560,)
}

def @func_2700() -> (Tensor[(180), uint64],) {
  @func_2698() /* ty=(Tensor[(180), uint64],) */
}

def @func_7641() -> (Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) {
  %573 = fn () -> (Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) {
    %561 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
    %562 = @func_5519() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %563 = %562.0;
    %564 = cast(%563, dtype="uint64") /* ty=Tensor[(1, 6, 15), uint64] */;
    %565 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 6, 15), float64] */, dtype="uint64") /* ty=Tensor[(14, 6, 15), uint64] */;
    %566 = add(%564, %565) /* ty=Tensor[(14, 6, 15), uint64] */;
    %567 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 6, 15), float64] */, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
    %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
    %569 = cast(%566, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
    %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %571 = %561.2;
    %572 = less(%569, %570) /* ty=Tensor[(14, 6, 15), bool] */;
    (%571, %572)
  };
  %573() /* ty=(Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) */
}

def @func_11149() -> (Tensor[(1, 6, 15), float64],) {
  %576 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %574 = @func_8637() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %575 = %574.0;
    (%575,)
  };
  %576() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_4009() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %577 = @func_3932() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %578 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %579 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %580 = %577.0;
  %581 = %578.1;
  %582 = %579.0;
  (%580, %581, %582)
}

def @func_2857() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) {
  %587 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) {
    %583 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %584 = %583.0;
    %585 = @func_1456() /* ty=Tensor[(180), uint64] */;
    %586 = @func_1468() /* ty=Tensor[(462), int16] */;
    (%584, %585, %586)
  };
  %587() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */
}

def @func_6864() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  @func_6862() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */
}

def @func_9227(%var_9225: Tensor[(462), int16]) -> Tensor[(462), float32] {
  @func_9224(%var_9225) /* ty=Tensor[(462), float32] */
}

def @func_6555() -> (Tensor[(462), int16],) {
  %588 = @func_4901() /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) */;
  %589 = %588.1;
  (%589,)
}

def @func_10909() -> Tensor[(1, 6, 15), float64] {
  @func_10907() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_2698() -> (Tensor[(180), uint64],) {
  %590 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %591 = %590.0;
  (%591,)
}

def @func_13014() -> Tensor[(180), uint64] {
  %592 = @func_1690() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %592.0
}

def @func_4201() -> Tensor[(462), int16] {
  %593 = fn () -> Tensor[(462), int16] {
    @func_3464() /* ty=Tensor[(462), int16] */
  };
  %593() /* ty=Tensor[(462), int16] */
}

def @func_9697() -> Tensor[(180), uint64] {
  @func_9695() /* ty=Tensor[(180), uint64] */
}

def @func_7525() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %598 = fn () -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
    %594 = @func_5339() /* ty=(Tensor[(462), int16],) */;
    %595 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %596 = %594.0;
    %597 = %595.0;
    (%596, %597)
  };
  %598() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */
}

def @func_1894() -> (Tensor[(1, 6, 15), float64],) {
  %599 = @func_1866() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %600 = %599.0;
  (%600,)
}

def @func_1458() -> Tensor[(180), uint64] {
  @func_1456() /* ty=Tensor[(180), uint64] */
}

def @func_9267(%var_9261: Tensor[(462), int16]) -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float32], Tensor[(1, 6, 15), float64], Tensor[(462), bool]) {
  %601 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %602 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %603 = @func_5480() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %604 = @func_8252() /* ty=(Tensor[(462), int16], Tensor[(462), int16]) */;
  %605 = %604.1;
  %606 = cast(%var_9261, dtype="bool") /* ty=Tensor[(462), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(1), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(462), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?), bool] */;
  %610 = %601.0;
  %611 = %602.0;
  %612 = %603.1;
  %613 = equal(%608, %609) /* ty=Tensor[(462), bool] */;
  (%610, %611, %612, %613)
}

def @func_4855() -> (Tensor[(1, 6, 15), float64],) {
  %616 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %614 = @func_3734() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
    %615 = %614.0;
    (%615,)
  };
  %616() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_10509() -> (Tensor[(180), uint64],) {
  %617 = @func_9767() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %618 = %617.0;
  (%618,)
}

def @func_9421(%var_9420: Tensor[(16, 7, 15), float64]) -> (Tensor[(16, 7, 15), float64],) {
  %621 = fn (%var_9404: Tensor[(16, 7, 15), float64]) -> (Tensor[(16, 7, 15), float64],) {
    %619 = cast(%var_9404, dtype="float64") /* ty=Tensor[(16, 7, 15), float64] */;
    %620 = atanh(%619) /* ty=Tensor[(16, 7, 15), float64] */;
    (%620,)
  };
  %621(%var_9420) /* ty=(Tensor[(16, 7, 15), float64],) */
}

def @func_7342() -> (Tensor[(1, 6, 15), float32],) {
  %622 = @func_3613() /* ty=(Tensor[(1, 6, 15), float32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_12882(%var_12881: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64],) {
  %631 = fn (%var_12855: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64],) {
    %624 = cast(%var_12855, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
    %625 = sqrt(%624) /* ty=Tensor[(7, 8, 12), float64] */;
    %626 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(%625, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %630 = floor_divide(%628, %629) /* ty=Tensor[(7, 8, 12), float64] */;
    (%630,)
  };
  %631(%var_12881) /* ty=(Tensor[(7, 8, 12), float64],) */
}

def @func_5482() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  @func_5480() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */
}

def @func_5421(%var_5419: Tensor[(14, 6, 15), float64], %var_5420: uint16) -> (Tensor[(462), int16], Tensor[(14, 6, 15), uint8], Tensor[(3, 5, 3), float32], uint16, Tensor[(45), uint16]) {
  %644 = fn (%var_5397: Tensor[(14, 6, 15), float64], %var_5403: uint16) -> (Tensor[(462), int16], Tensor[(14, 6, 15), uint8], Tensor[(3, 5, 3), float32], uint16, Tensor[(45), uint16]) {
    %632 = @func_4025() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %633 = %632.0;
    %634 = cast(%633, dtype="uint8") /* ty=Tensor[(1, 6, 15), uint8] */;
    %635 = cast(%var_5397, dtype="uint8") /* ty=Tensor[(14, 6, 15), uint8] */;
    %636 = cast(%var_5403, dtype="uint16") /* ty=uint16 */;
    %637 = cast(meta[relay.Constant][15] /* ty=Tensor[(45), uint16] */, dtype="uint16") /* ty=Tensor[(45), uint16] */;
    %638 = reshape(%636, newshape=[]) /* ty=uint16 */;
    %639 = reshape(%637, newshape=[3, 5, 3]) /* ty=Tensor[(3, 5, 3), uint16] */;
    %640 = @func_2034(%638, %639) /* ty=(Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) */;
    %641 = @func_4292() /* ty=Tensor[(462), int16] */;
    %642 = bitwise_or(%634, %635) /* ty=Tensor[(14, 6, 15), uint8] */;
    %643 = %640.1;
    (%641, %642, %643, %var_5403, meta[relay.Constant][15] /* ty=Tensor[(45), uint16] */)
  };
  %644(%var_5419, %var_5420) /* ty=(Tensor[(462), int16], Tensor[(14, 6, 15), uint8], Tensor[(3, 5, 3), float32], uint16, Tensor[(45), uint16]) */
}

def @func_12129(%var_12127: Tensor[(12, 8, 15), float32], %var_12128: Tensor[(1680), uint8]) -> (Tensor[(12, 8, 15), bool], Tensor[(180), uint64], Tensor[(1680), uint8]) {
  @func_12125(%var_12127, %var_12128) /* ty=(Tensor[(12, 8, 15), bool], Tensor[(180), uint64], Tensor[(1680), uint8]) */
}

def @func_6701() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
  %648 = fn () -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64]) {
    %645 = @func_4155() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
    %646 = @func_6689() /* ty=Tensor[(462), int16] */;
    %647 = %645.1;
    (%646, %647)
  };
  %648() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */
}

def @func_4803(%var_4802: Tensor[(462), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(462), float32]) {
  %659 = fn (%var_4770: Tensor[(462), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(462), float32]) {
    %649 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %650 = @func_4292() /* ty=Tensor[(462), int16] */;
    %651 = cast(%var_4770, dtype="float64") /* ty=Tensor[(462), float64] */;
    %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(1), int32] */;
    %653 = cast(%650, dtype="float64") /* ty=Tensor[(462), float64] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?), float64] */;
    %655 = divide(%653, %654) /* ty=Tensor[(462), float64] */;
    %656 = cast(%655, dtype="float32") /* ty=Tensor[(462), float32] */;
    %657 = %649.0;
    %658 = atan(%656) /* ty=Tensor[(462), float32] */;
    (%657, %658)
  };
  %659(%var_4802) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), float32]) */
}

def @func_4431() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_4903() -> (Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) {
  @func_4901() /* ty=(Tensor[(180), uint64], Tensor[(462), int16], Tensor[(180), uint64]) */
}

def @func_6689() -> Tensor[(462), int16] {
  %660 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
  %660.0
}

def @func_8680(%var_8678: Tensor[(1152), int8]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1152), int8]) {
  @func_8677(%var_8678) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1152), int8]) */
}

def @func_1088(%var_1056: Tensor[(30, 6), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) {
  %661 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %663 = cast(%var_1056, dtype="uint64") /* ty=Tensor[(30, 6), uint64] */;
  %664 = reshape(%663, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), uint64] */;
  %665 = @func_447(%664) /* ty=(Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) */;
  %666 = asin(%662) /* ty=Tensor[(1, 6, 15), float64] */;
  %667 = %665.0;
  %668 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  (%666, %667, %var_1056, %668)
}

def @func_11296() -> Tensor[(1, 6, 15), float64] {
  %670 = fn () -> Tensor[(1, 6, 15), float64] {
    %669 = @func_1940() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
    %669.1
  };
  %670() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_4292() -> Tensor[(462), int16] {
  @func_2254() /* ty=Tensor[(462), int16] */
}

def @func_8252() -> (Tensor[(462), int16], Tensor[(462), int16]) {
  %671 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %672 = @func_7479() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
  %673 = %671.0;
  %674 = %672.1;
  (%673, %674)
}

def @func_9300(%var_9298: Tensor[(5, 13, 9), float64]) -> Tensor[(5, 13, 9), float64] {
  @func_9297(%var_9298) /* ty=Tensor[(5, 13, 9), float64] */
}

def @func_491(%var_489: Tensor[(3, 14, 11), int16]) -> Tensor[(3, 14, 11), int16] {
  @func_488(%var_489) /* ty=Tensor[(3, 14, 11), int16] */
}

def @func_8677(%var_8666: Tensor[(1152), int8]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1152), int8]) {
  %675 = @func_8637() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %676 = cast(%var_8666, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %677 = cast(%var_8666, dtype="int8") /* ty=Tensor[(1152), int8] */;
  %678 = reshape(%676, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), int8] */;
  %679 = reshape(%677, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), int8] */;
  %680 = @func_7541(%678, %679) /* ty=(Tensor[(12, 12, 8), int8], Tensor[(1, 6, 15), float64]) */;
  %681 = %675.0;
  %682 = %680.1;
  (%681, %682, %var_8666)
}

def @func_7908() -> (Tensor[(462), int16], Tensor[(462), int16]) {
  @func_7906() /* ty=(Tensor[(462), int16], Tensor[(462), int16]) */
}

def @func_8377() -> (Tensor[(1, 6, 15), float64],) {
  %683 = @func_4155() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %684 = %683.1;
  (%684,)
}

def @func_9297(%var_9275: Tensor[(5, 13, 9), float64]) -> Tensor[(5, 13, 9), float64] {
  %685 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 13, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 9), float64] */;
  %686 = shape_of(%var_9275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_9275, dtype="float64") /* ty=Tensor[(5, 13, 9), float64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%687, %688) /* ty=Tensor[(5, 13, 9), float64] */
}

def @func_3249() -> (Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) {
  @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */
}

def @func_8254() -> (Tensor[(462), int16], Tensor[(462), int16]) {
  @func_8252() /* ty=(Tensor[(462), int16], Tensor[(462), int16]) */
}

def @func_6078() -> Tensor[(1, 6, 15), float64] {
  %689 = @func_5503() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %690 = %689.3;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  tan(%691) /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_5504() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %702 = fn () -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
    %692 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
    %693 = @func_5308() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %694 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %695 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %696 = %695.0;
    %697 = cast(%696, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
    %698 = %692.0;
    %699 = %693.0;
    %700 = %694.0;
    %701 = cosh(%697) /* ty=Tensor[(1, 6, 15), float64] */;
    (%698, %699, %700, %701)
  };
  %702() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_7160() -> Tensor[(462), int16] {
  @func_4292() /* ty=Tensor[(462), int16] */
}

def @func_8387() -> Tensor[(1, 6, 15), float64] {
  %704 = fn () -> Tensor[(1, 6, 15), float64] {
    %703 = @func_4224() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32]) */;
    %703.0
  };
  %704() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_8949() -> (Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) {
  %708 = fn () -> (Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) {
    %705 = @func_5780() /* ty=(Tensor[(11, 11, 8), float32],) */;
    %706 = %705.0;
    %707 = @func_5722() /* ty=Tensor[(180), uint64] */;
    (%706, %707)
  };
  %708() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) */
}

def @func_1691() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
  %717 = fn () -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) {
    %709 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
    %710 = cast(meta[relay.Constant][17] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
    %711 = cast(meta[relay.Constant][17] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
    %712 = reshape(%710, newshape=[7, 66]) /* ty=Tensor[(7, 66), int16] */;
    %713 = reshape(%711, newshape=[7, 66]) /* ty=Tensor[(7, 66), int16] */;
    %714 = @func_1341(%712, %713) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(7, 66), bool], Tensor[(7, 66), float32]) */;
    %715 = %709.0;
    %716 = %714.0;
    (%715, %716, meta[relay.Constant][17] /* ty=Tensor[(462), int16] */)
  };
  %717() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */
}

def @func_6851() -> (Tensor[(12, 8, 1), float32],) {
  %720 = fn () -> (Tensor[(12, 8, 1), float32],) {
    %718 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 8, 1), float32] */;
    %719 = erf(%718) /* ty=Tensor[(12, 8, 1), float32] */;
    (%719,)
  };
  %720() /* ty=(Tensor[(12, 8, 1), float32],) */
}

def @func_13174() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(16, 6, 15), int16], Tensor[(180), uint64]) {
  @func_13172() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(16, 6, 15), int16], Tensor[(180), uint64]) */
}

def @func_12997() -> (Tensor[(462), int16],) {
  @func_12995() /* ty=(Tensor[(462), int16],) */
}

def @func_7544(%var_7542: Tensor[(12, 12, 8), int8], %var_7543: Tensor[(12, 12, 8), int8]) -> (Tensor[(12, 12, 8), int8], Tensor[(1, 6, 15), float64]) {
  %728 = fn (%var_7533: Tensor[(12, 12, 8), int8], %var_7534: Tensor[(12, 12, 8), int8]) -> (Tensor[(12, 12, 8), int8], Tensor[(1, 6, 15), float64]) {
    %721 = cast(%var_7534, dtype="int8") /* ty=Tensor[(12, 12, 8), int8] */;
    %722 = shape_of(%var_7533, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%var_7533, dtype="int8") /* ty=Tensor[(12, 12, 8), int8] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %725 = @func_7404() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %726 = bitwise_or(%723, %724) /* ty=Tensor[(12, 12, 8), int8] */;
    %727 = %725.0;
    (%726, %727)
  };
  %728(%var_7542, %var_7543) /* ty=(Tensor[(12, 12, 8), int8], Tensor[(1, 6, 15), float64]) */
}

def @func_10831() -> Tensor[(180), uint64] {
  %730 = fn () -> Tensor[(180), uint64] {
    %729 = @func_5669() /* ty=(Tensor[(180), uint64],) */;
    %729.0
  };
  %730() /* ty=Tensor[(180), uint64] */
}

def @func_1987() -> (Tensor[(1, 6, 15), float64],) {
  %731 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %732 = %731.0;
  (%732,)
}

def @func_7406() -> (Tensor[(1, 6, 15), float64],) {
  @func_7404() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_3301() -> Tensor[(462), int16] {
  @func_1468() /* ty=Tensor[(462), int16] */
}

def @func_5669() -> (Tensor[(180), uint64],) {
  %733 = @func_2620() /* ty=(Tensor[(180), uint64],) */;
  %734 = %733.0;
  (%734,)
}

def @func_8637() -> (Tensor[(1, 6, 15), float64],) {
  %735 = @func_7524() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
  %736 = %735.1;
  (%736,)
}

def @func_2987() -> (Tensor[(1, 6, 15), float64],) {
  %739 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %737 = @func_2856() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
    %738 = %737.0;
    (%738,)
  };
  %739() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_1745() -> (Tensor[(1, 6, 15), float64],) {
  %741 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %740 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
    (%740,)
  };
  %741() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_2038(%var_2036: uint16, %var_2037: Tensor[(3, 5, 3), uint16]) -> (Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) {
  @func_2034(%var_2036, %var_2037) /* ty=(Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) */
}

def @func_7850() -> (Tensor[(462), int16],) {
  %744 = fn () -> (Tensor[(462), int16],) {
    %742 = @func_5093() /* ty=(Tensor[(462), int16], Tensor[(180), uint64]) */;
    %743 = %742.0;
    (%743,)
  };
  %744() /* ty=(Tensor[(462), int16],) */
}

def @func_12469() -> (Tensor[(462), int16],) {
  %745 = @func_6689() /* ty=Tensor[(462), int16] */;
  (%745,)
}

def @func_3247() -> (Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) {
  %746 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %747 = %746.0;
  %748 = cast(%747, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %749 = reshape(%748, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %750 = @func_1139(%749) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %751 = %750.0;
  (%747, %751)
}

def @func_3735() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %755 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
    %752 = @func_2191() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %753 = %752.0;
    %754 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
    (%753, %754)
  };
  %755() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_1142(%var_1140: Tensor[(180), uint64]) -> (Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  @func_1139(%var_1140) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_2192() -> (Tensor[(1, 6, 15), float64],) {
  %758 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %756 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %757 = %756.0;
    (%757,)
  };
  %758() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_3934() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  @func_3932() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_1344(%var_1342: Tensor[(7, 66), int16], %var_1343: Tensor[(7, 66), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(7, 66), bool], Tensor[(7, 66), float32]) {
  %771 = fn (%var_1293: Tensor[(7, 66), int16], %var_1320: Tensor[(7, 66), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(7, 66), bool], Tensor[(7, 66), float32]) {
    %759 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
    %760 = cast(%var_1293, dtype="int16") /* ty=Tensor[(7, 66), int16] */;
    %761 = reshape(%760, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), int16] */;
    %762 = cast(%var_1320, dtype="bool") /* ty=Tensor[(7, 66), bool] */;
    %763 = shape_of(%var_1293, dtype="int32") /* ty=Tensor[(2), int32] */;
    %764 = cast(%var_1293, dtype="bool") /* ty=Tensor[(7, 66), bool] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %766 = cast(%var_1320, dtype="float32") /* ty=Tensor[(7, 66), float32] */;
    %767 = %759.0;
    %768 = @func_488(%761) /* ty=Tensor[(3, 14, 11), int16] */;
    %769 = logical_and(%764, %765) /* ty=Tensor[(7, 66), bool] */;
    %770 = atanh(%766) /* ty=Tensor[(7, 66), float32] */;
    (%767, %768, %769, %770)
  };
  %771(%var_1342, %var_1343) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(7, 66), bool], Tensor[(7, 66), float32]) */
}

def @func_5310() -> (Tensor[(1, 6, 15), float64],) {
  @func_5308() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_1210() -> Tensor[(1, 6, 15), float64] {
  @func_1208() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_2534() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_3586() -> (Tensor[(1, 6, 15), float64],) {
  %773 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %772 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
    (%772,)
  };
  %773() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_5723() -> Tensor[(180), uint64] {
  %774 = fn () -> Tensor[(180), uint64] {
    @func_3081() /* ty=Tensor[(180), uint64] */
  };
  %774() /* ty=Tensor[(180), uint64] */
}

def @func_5031() -> (Tensor[(180), uint64],) {
  %775 = @func_4009() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */;
  %776 = %775.1;
  (%776,)
}

def @func_6883() -> Tensor[(180), uint64] {
  %778 = fn () -> Tensor[(180), uint64] {
    %777 = @func_6455() /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) */;
    %777.1
  };
  %778() /* ty=Tensor[(180), uint64] */
}

def @func_7206() -> (Tensor[(180), uint64],) {
  @func_7204() /* ty=(Tensor[(180), uint64],) */
}

def @func_7703() -> Tensor[(1, 6, 15), float64] {
  %779 = @func_5308() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %779.0
}

def @func_10179() -> (Tensor[(180), uint64],) {
  %782 = fn () -> (Tensor[(180), uint64],) {
    %780 = @func_8146() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %781 = %780.2;
    (%781,)
  };
  %782() /* ty=(Tensor[(180), uint64],) */
}

def @func_10803() -> Tensor[(1, 6, 15), float64] {
  @func_10801() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_3428() -> (Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) {
  %804 = fn () -> (Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) {
    %783 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 140), int32] */, dtype="int32") /* ty=Tensor[(1, 140), int32] */;
    %784 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 140), int32] */, dtype="int32") /* ty=Tensor[(1, 140), int32] */;
    %785 = reshape(%783, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
    %786 = reshape(%784, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
    %787 = @func_1393(%785, %786) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) */;
    %788 = @func_2473() /* ty=Tensor[(180), uint64] */;
    %789 = cast(%788, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %790 = reshape(%789, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %791 = @func_1139(%790) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %792 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %793 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %794 = cast(meta[relay.Constant][21] /* ty=Tensor[(1320), uint64] */, dtype="uint64") /* ty=Tensor[(1320), uint64] */;
    %795 = reshape(%793, newshape=[]) /* ty=uint64 */;
    %796 = reshape(%794, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), uint64] */;
    %797 = @func_3301() /* ty=Tensor[(462), int16] */;
    %798 = %787.0;
    %799 = @func_1456() /* ty=Tensor[(180), uint64] */;
    %800 = %791.1;
    %801 = %792.0;
    %802 = @func_1559(%795, %796) /* ty=Tensor[(12, 10, 11), bool] */;
    %803 = @func_1456() /* ty=Tensor[(180), uint64] */;
    (%797, %798, meta[relay.Constant][19] /* ty=Tensor[(1, 140), int32] */, %799, %788, %800, %801, %802, meta[relay.Constant][20] /* ty=uint64 */, meta[relay.Constant][21] /* ty=Tensor[(1320), uint64] */, %803)
  };
  %804() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */
}

def @func_9899() -> Tensor[(1, 6, 15), float64] {
  @func_9897() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_5375() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %807 = fn () -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
    %805 = @func_1947() /* ty=Tensor[(180), uint64] */;
    %806 = @func_3081() /* ty=Tensor[(180), uint64] */;
    (%805, %806)
  };
  %807() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_11787() -> (Tensor[(12, 8, 14), float64],) {
  %815 = fn () -> (Tensor[(12, 8, 14), float64],) {
    %808 = @func_6850() /* ty=(Tensor[(12, 8, 1), float32],) */;
    %809 = %808.0;
    %810 = cast(%809, dtype="bool") /* ty=Tensor[(12, 8, 1), bool] */;
    %811 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(12, 8, 14), bool] */;
    %812 = logical_and(%810, %811) /* ty=Tensor[(12, 8, 14), bool] */;
    %813 = cast(%812, dtype="float64") /* ty=Tensor[(12, 8, 14), float64] */;
    %814 = sinh(%813) /* ty=Tensor[(12, 8, 14), float64] */;
    (%814,)
  };
  %815() /* ty=(Tensor[(12, 8, 14), float64],) */
}

def @func_12995() -> (Tensor[(462), int16],) {
  %816 = @func_7906() /* ty=(Tensor[(462), int16], Tensor[(462), int16]) */;
  %817 = %816.0;
  (%817,)
}

def @func_1185(%var_1178: Tensor[(462), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %818 = cast(%var_1178, dtype="int16") /* ty=Tensor[(462), int16] */;
  %819 = reshape(%818, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), int16] */;
  %820 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %821 = reshape(%820, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
  %822 = @func_1088(%821) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
  %823 = @func_1033() /* ty=Tensor[(1, 6, 15), float64] */;
  %824 = @func_488(%819) /* ty=Tensor[(3, 14, 11), int16] */;
  %825 = %822.3;
  (%823, %824, %var_1178, %825, meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */)
}

def @func_1396(%var_1394: Tensor[(5, 7, 4), int32], %var_1395: Tensor[(5, 7, 4), int32]) -> (Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) {
  %832 = fn (%var_1370: Tensor[(5, 7, 4), int32], %var_1371: Tensor[(5, 7, 4), int32]) -> (Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) {
    %826 = cast(%var_1371, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
    %827 = shape_of(%var_1370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%var_1370, dtype="bool") /* ty=Tensor[(5, 7, 4), bool] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %830 = greater(%828, %829) /* ty=Tensor[(5, 7, 4), bool] */;
    %831 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
    (%830, %831)
  };
  %832(%var_1394, %var_1395) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) */
}

def @func_2097() -> (Tensor[(1, 6, 15), float64],) {
  %834 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %833 = @func_1208() /* ty=Tensor[(1, 6, 15), float64] */;
    (%833,)
  };
  %834() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_8407() -> Tensor[(462), int16] {
  @func_8405() /* ty=Tensor[(462), int16] */
}

def @func_2869() -> Tensor[(1, 6, 15), float64] {
  %836 = fn () -> Tensor[(1, 6, 15), float64] {
    %835 = @func_1690() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
    %835.1
  };
  %836() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_8730() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %845 = fn () -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
    %837 = @func_3932() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %838 = %837.0;
    %839 = cast(%838, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %840 = reshape(%839, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %841 = @func_2163(%840) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %842 = @func_7603() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) */;
    %843 = %841.0;
    %844 = %842.1;
    (%838, %843, %844)
  };
  %845() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_1188(%var_1186: Tensor[(462), int16]) -> (Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  @func_1185(%var_1186) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_11723() -> (Tensor[(180), uint64], Tensor[(16, 7, 15), float64], Tensor[(1680), float64], Tensor[(1, 6, 15), float64]) {
  @func_11721() /* ty=(Tensor[(180), uint64], Tensor[(16, 7, 15), float64], Tensor[(1680), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_7331() -> (Tensor[(180), uint64],) {
  %848 = fn () -> (Tensor[(180), uint64],) {
    %846 = @func_5031() /* ty=(Tensor[(180), uint64],) */;
    %847 = %846.0;
    (%847,)
  };
  %848() /* ty=(Tensor[(180), uint64],) */
}

def @func_10949() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  @func_10947() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_12320() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  @func_12318() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_1721() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %853 = fn () -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
    %849 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
    %850 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
    %851 = %849.1;
    %852 = %850.0;
    (%851, %852)
  };
  %853() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_10409() -> Tensor[(180), uint64] {
  @func_10407() /* ty=Tensor[(180), uint64] */
}

def @func_7096() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  %854 = @func_6700() /* ty=(Tensor[(462), int16], Tensor[(1, 6, 15), float64]) */;
  %855 = @func_3081() /* ty=Tensor[(180), uint64] */;
  %856 = %854.1;
  (%855, %856)
}

def @func_4519() -> Tensor[(180), uint64] {
  %857 = @func_2698() /* ty=(Tensor[(180), uint64],) */;
  %857.0
}

def @func_2532() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %858 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %859 = %858.0;
  %860 = @func_1947() /* ty=Tensor[(180), uint64] */;
  (%859, %860)
}

def @func_6455() -> (Tensor[(?, 6, 15), float64], Tensor[(180), uint64]) {
  %861 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %862 = %861.0;
  %863 = @func_3734() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %864 = %863.1;
  %865 = cast(%864, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %866 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = cast(%862, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %869 = power(%867, %868) /* ty=Tensor[(?, 6, 15), float64] */;
  %870 = @func_4916() /* ty=Tensor[(180), uint64] */;
  (%869, %870)
}

def @func_9556(%var_9555: Tensor[(1, 6, 15), float64]) -> Tensor[(?, 6, 15), int64] {
  %877 = fn (%var_9545: Tensor[(1, 6, 15), float64]) -> Tensor[(?, 6, 15), int64] {
    %871 = @func_5811() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %872 = %871.0;
    %873 = cast(%var_9545, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
    %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %875 = cast(%872, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
    %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    multiply(%875, %876) /* ty=Tensor[(?, 6, 15), int64] */
  };
  %877(%var_9555) /* ty=Tensor[(?, 6, 15), int64] */
}

def @func_1562(%var_1560: uint64, %var_1561: Tensor[(12, 10, 11), uint64]) -> Tensor[(12, 10, 11), bool] {
  %880 = fn (%var_1544: uint64, %var_1545: Tensor[(12, 10, 11), uint64]) -> Tensor[(12, 10, 11), bool] {
    %878 = cast(%var_1544, dtype="bool") /* ty=bool */;
    %879 = cast(%var_1545, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
    greater_equal(%878, %879) /* ty=Tensor[(12, 10, 11), bool] */
  };
  %880(%var_1560, %var_1561) /* ty=Tensor[(12, 10, 11), bool] */
}

def @func_13016() -> Tensor[(180), uint64] {
  @func_13014() /* ty=Tensor[(180), uint64] */
}

def @func_1947() -> Tensor[(180), uint64] {
  %881 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
  %881.0
}

def @func_7603() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) {
  %882 = @func_6533() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %883 = %882.2;
  %884 = cast(%883, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %885 = reshape(%884, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), uint64] */;
  %886 = @func_447(%885) /* ty=(Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) */;
  %887 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
  %888 = %886.2;
  (%883, %887, %888)
}

def @func_3049(%var_3046: Tensor[(9, 6, 15), float64], %var_3047: Tensor[(1260), float64], %var_3048: Tensor[(462), int16]) -> (Tensor[(9, 6, 15), bool], Tensor[(180), uint64], Tensor[(3, 60), uint64], Tensor[(1260), float64], Tensor[(3, 6, 15), float32], Tensor[(10, 2, 9), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) {
  %912 = fn (%var_2994: Tensor[(9, 6, 15), float64], %var_3006: Tensor[(1260), float64], %var_3023: Tensor[(462), int16]) -> (Tensor[(9, 6, 15), bool], Tensor[(180), uint64], Tensor[(3, 60), uint64], Tensor[(1260), float64], Tensor[(3, 6, 15), float32], Tensor[(10, 2, 9), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) {
    %889 = @func_2868() /* ty=Tensor[(1, 6, 15), float64] */;
    %890 = cast(%889, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
    %891 = cast(%var_2994, dtype="bool") /* ty=Tensor[(9, 6, 15), bool] */;
    %892 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 60), uint64] */, dtype="uint64") /* ty=Tensor[(3, 60), uint64] */;
    %893 = cast(%var_3006, dtype="float64") /* ty=Tensor[(1260), float64] */;
    %894 = reshape(%892, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %895 = reshape(%893, newshape=[14, 6, 15]) /* ty=Tensor[(14, 6, 15), float64] */;
    %896 = @func_2818(%894, %895) /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32], Tensor[(14, 6, 15), bool]) */;
    %897 = cast(%889, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
    %898 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 6, 15), float64] */, dtype="float32") /* ty=Tensor[(3, 6, 15), float32] */;
    %899 = %896.1;
    %900 = cast(%899, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %901 = reshape(%900, newshape=[30, 6]) /* ty=Tensor[(30, 6), uint64] */;
    %902 = @func_1088(%901) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64], Tensor[(30, 6), uint64], Tensor[(1, 6, 15), float64]) */;
    %903 = cast(%var_3023, dtype="int16") /* ty=Tensor[(462), int16] */;
    %904 = reshape(%903, newshape=[462]) /* ty=Tensor[(462), int16] */;
    %905 = @func_1185(%904) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %906 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %907 = logical_or(%890, %891) /* ty=Tensor[(9, 6, 15), bool] */;
    %908 = mod(%897, %898) /* ty=Tensor[(3, 6, 15), float32] */;
    %909 = %902.1;
    %910 = %905.0;
    %911 = %906.1;
    (%907, %899, meta[relay.Constant][24] /* ty=Tensor[(3, 60), uint64] */, %var_3006, %908, %909, %910, %var_3023, %911)
  };
  %912(%var_3046, %var_3047, %var_3048) /* ty=(Tensor[(9, 6, 15), bool], Tensor[(180), uint64], Tensor[(3, 60), uint64], Tensor[(1260), float64], Tensor[(3, 6, 15), float32], Tensor[(10, 2, 9), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) */
}

def @func_9769() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  @func_9767() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */
}

def @func_1592() -> (Tensor[(180), uint64],) {
  %913 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %914 = %913.1;
  (%914,)
}

def @func_1594() -> (Tensor[(180), uint64],) {
  @func_1592() /* ty=(Tensor[(180), uint64],) */
}

def @func_11835() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(14, 6, 15), bool]) {
  %920 = fn () -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(14, 6, 15), bool]) {
    %915 = @func_3908() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) */;
    %916 = @func_7640() /* ty=(Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) */;
    %917 = %915.0;
    %918 = @func_3081() /* ty=Tensor[(180), uint64] */;
    %919 = %916.1;
    (%917, %918, %919)
  };
  %920() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(14, 6, 15), bool]) */
}

def @func_5007() -> (Tensor[(462), int16],) {
  %921 = @func_2254() /* ty=Tensor[(462), int16] */;
  (%921,)
}

def @func_7162() -> Tensor[(462), int16] {
  @func_7160() /* ty=Tensor[(462), int16] */
}

def @func_8785(%var_8783: Tensor[(15, 9, 4), float64], %var_8784: Tensor[(968), float32]) -> (Tensor[(15, 9, 4), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(968), float64]) {
  %936 = fn (%var_8740: Tensor[(15, 9, 4), float64], %var_8768: Tensor[(968), float32]) -> (Tensor[(15, 9, 4), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(968), float64]) {
    %922 = cast(%var_8740, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
    %923 = cast(meta[relay.Constant][26] /* ty=Tensor[(968), float32] */, dtype="float32") /* ty=Tensor[(968), float32] */;
    %924 = cast(%var_8740, dtype="float64") /* ty=Tensor[(15, 9, 4), float64] */;
    %925 = reshape(%923, newshape=[11, 11, 8]) /* ty=Tensor[(11, 11, 8), float32] */;
    %926 = reshape(%924, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %927 = @func_5978(%925, %926) /* ty=(Tensor[(?, 6, 15), float64], Tensor[(180), uint64], Tensor[(11, 11, 8), bool], Tensor[(180), uint64], Tensor[(70, 9), float32], Tensor[(540), float64], uint16, Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(45), float32]) */;
    %928 = cast(%var_8768, dtype="float64") /* ty=Tensor[(968), float64] */;
    %929 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(968), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %930 = cast(meta[relay.Constant][26] /* ty=Tensor[(968), float32] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?), float64] */;
    %932 = acosh(%922) /* ty=Tensor[(15, 9, 4), float64] */;
    %933 = %927.7;
    %934 = @func_1456() /* ty=Tensor[(180), uint64] */;
    %935 = power(%930, %931) /* ty=Tensor[(968), float64] */;
    (%932, %933, %934, %935)
  };
  %936(%var_8783, %var_8784) /* ty=(Tensor[(15, 9, 4), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(968), float64]) */
}

def @func_11113() -> (Tensor[(11, 11, 8), float32], Tensor[(180), uint64], Tensor[(462), int16]) {
  @func_11111() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(180), uint64], Tensor[(462), int16]) */
}

def @func_4226() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32]) {
  @func_4224() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32]) */
}

def @func_9106() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) {
  %937 = @func_5374() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %938 = @func_7330() /* ty=(Tensor[(180), uint64],) */;
  %939 = @func_8948() /* ty=(Tensor[(11, 11, 8), float32], Tensor[(180), uint64]) */;
  %940 = @func_6850() /* ty=(Tensor[(12, 8, 1), float32],) */;
  %941 = %937.0;
  %942 = %938.0;
  %943 = %939.0;
  %944 = %940.0;
  (%941, %942, %943, %944)
}

def @func_9695() -> Tensor[(180), uint64] {
  %945 = @func_6533() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %945.1
}

def @func_2165(%var_2164: Tensor[(180), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %952 = fn (%var_2144: Tensor[(180), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
    %946 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %947 = cast(%var_2144, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %948 = reshape(%947, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %949 = @func_1139(%948) /* ty=(Tensor[(11, 11, 8), float32], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %950 = %946.0;
    %951 = %949.1;
    (%950, %951, %var_2144)
  };
  %952(%var_2164) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_11721() -> (Tensor[(180), uint64], Tensor[(16, 7, 15), float64], Tensor[(1680), float64], Tensor[(1, 6, 15), float64]) {
  %953 = cast(meta[relay.Constant][27] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %954 = reshape(%953, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), float64] */;
  %955 = @func_9419(%954) /* ty=(Tensor[(16, 7, 15), float64],) */;
  %956 = @func_4519() /* ty=Tensor[(180), uint64] */;
  %957 = %955.0;
  %958 = @func_6078() /* ty=Tensor[(1, 6, 15), float64] */;
  (%956, %957, meta[relay.Constant][27] /* ty=Tensor[(1680), float64] */, %958)
}

def @func_6303() -> (Tensor[(462), int16],) {
  %959 = @func_2227() /* ty=Tensor[(462), int16] */;
  (%959,)
}

def @func_12318() -> (Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(180), uint64]) {
  %960 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %961 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %962 = @func_9767() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %963 = %960.0;
  %964 = %961.0;
  %965 = @func_1947() /* ty=Tensor[(180), uint64] */;
  %966 = %962.0;
  (%963, %964, %965, %966)
}

def @func_8379() -> (Tensor[(1, 6, 15), float64],) {
  @func_8377() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_10652() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %967 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %968 = %967.0;
  %969 = @func_7703() /* ty=Tensor[(1, 6, 15), float64] */;
  %970 = @func_6110() /* ty=Tensor[(1, 6, 15), float64] */;
  (%968, %969, %970)
}

def @func_5813() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  @func_5811() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_11637(%var_11634: Tensor[(11, 8, 5), uint32], %var_11635: Tensor[(11, 8, 5), uint32], %var_11636: Tensor[(11, 8, 5), uint32]) -> (Tensor[(180), uint64], Tensor[(11, 8, 5), float32], Tensor[(11, 8, 5), float32]) {
  %985 = fn (%var_11582: Tensor[(11, 8, 5), uint32], %var_11583: Tensor[(11, 8, 5), uint32], %var_11619: Tensor[(11, 8, 5), uint32]) -> (Tensor[(180), uint64], Tensor[(11, 8, 5), float32], Tensor[(11, 8, 5), float32]) {
    %971 = @func_8146() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %972 = cast(%var_11583, dtype="float32") /* ty=Tensor[(11, 8, 5), float32] */;
    %973 = cast(%var_11583, dtype="uint32") /* ty=Tensor[(11, 8, 5), uint32] */;
    %974 = shape_of(%var_11582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %975 = cast(%var_11582, dtype="uint32") /* ty=Tensor[(11, 8, 5), uint32] */;
    %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %977 = right_shift(%975, %976) /* ty=Tensor[(11, 8, 5), uint32] */;
    %978 = cast(%var_11619, dtype="float32") /* ty=Tensor[(11, 8, 5), float32] */;
    %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(3), int32] */;
    %980 = cast(%977, dtype="float32") /* ty=Tensor[(11, 8, 5), float32] */;
    %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %982 = %971.1;
    %983 = sin(%972) /* ty=Tensor[(11, 8, 5), float32] */;
    %984 = minimum(%980, %981) /* ty=Tensor[(11, 8, 5), float32] */;
    (%982, %983, %984)
  };
  %985(%var_11634, %var_11635, %var_11636) /* ty=(Tensor[(180), uint64], Tensor[(11, 8, 5), float32], Tensor[(11, 8, 5), float32]) */
}

def @func_5262() -> (Tensor[(180), uint64],) {
  %988 = fn () -> (Tensor[(180), uint64],) {
    %986 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
    %987 = %986.0;
    (%987,)
  };
  %988() /* ty=(Tensor[(180), uint64],) */
}

def @func_1989() -> (Tensor[(1, 6, 15), float64],) {
  @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_8886(%var_8885: Tensor[(2, 6, 15), float64]) -> Tensor[(2, 6, 15), bool] {
  %993 = fn (%var_8874: Tensor[(2, 6, 15), float64]) -> Tensor[(2, 6, 15), bool] {
    %989 = @func_2986() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %990 = %989.0;
    %991 = cast(%990, dtype="bool") /* ty=Tensor[(1, 6, 15), bool] */;
    %992 = cast(%var_8874, dtype="bool") /* ty=Tensor[(2, 6, 15), bool] */;
    logical_and(%991, %992) /* ty=Tensor[(2, 6, 15), bool] */
  };
  %993(%var_8885) /* ty=Tensor[(2, 6, 15), bool] */
}

def @func_7147() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %996 = fn () -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
    %994 = @func_1456() /* ty=Tensor[(180), uint64] */;
    %995 = @func_1947() /* ty=Tensor[(180), uint64] */;
    (%994, %995)
  };
  %996() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */
}

def @func_11953() -> (Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) {
  @func_11951() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */
}

def @func_2621() -> (Tensor[(180), uint64],) {
  %999 = fn () -> (Tensor[(180), uint64],) {
    %997 = @func_1260() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
    %998 = %997.1;
    (%998,)
  };
  %999() /* ty=(Tensor[(180), uint64],) */
}

def @func_13172() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(16, 6, 15), int16], Tensor[(180), uint64]) {
  %1000 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %1001 = @func_3427() /* ty=(Tensor[(462), int16], Tensor[(5, 7, 4), bool], Tensor[(1, 140), int32], Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(12, 10, 11), bool], uint64, Tensor[(1320), uint64], Tensor[(180), uint64]) */;
  %1002 = %1001.6;
  %1003 = cast(%1002, dtype="int16") /* ty=Tensor[(1, 6, 15), int16] */;
  %1004 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 6, 15), float64] */, dtype="int16") /* ty=Tensor[(16, 6, 15), int16] */;
  %1005 = @func_9808() /* ty=Tensor[(1, 6, 15), float64] */;
  %1006 = %1000.0;
  %1007 = bitwise_and(%1003, %1004) /* ty=Tensor[(16, 6, 15), int16] */;
  %1008 = @func_10229() /* ty=Tensor[(180), uint64] */;
  (%1005, %1006, %1007, %1008)
}

def @func_7605() -> (Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) {
  @func_7603() /* ty=(Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(10, 2, 9), uint64]) */
}

def @func_11951() -> (Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) {
  %1009 = @func_5669() /* ty=(Tensor[(180), uint64],) */;
  %1010 = @func_9106() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) */;
  %1011 = %1009.0;
  %1012 = %1010.2;
  (%1011, %1012)
}

def @func_5527() -> (Tensor[(1, 6, 15), float64],) {
  @func_5525() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_6358() -> Tensor[(180), uint64] {
  @func_6356() /* ty=Tensor[(180), uint64] */
}

def @func_6503(%var_6502: Tensor[(140), int32]) -> (Tensor[(5, 7, 4), bool], Tensor[(140), int32], Tensor[(1, 6, 15), float64]) {
  %1022 = fn (%var_6479: Tensor[(140), int32]) -> (Tensor[(5, 7, 4), bool], Tensor[(140), int32], Tensor[(1, 6, 15), float64]) {
    %1013 = cast(%var_6479, dtype="int32") /* ty=Tensor[(140), int32] */;
    %1014 = cast(%var_6479, dtype="int32") /* ty=Tensor[(140), int32] */;
    %1015 = reshape(%1013, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
    %1016 = reshape(%1014, newshape=[5, 7, 4]) /* ty=Tensor[(5, 7, 4), int32] */;
    %1017 = @func_1393(%1015, %1016) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(1, 6, 15), float64]) */;
    %1018 = @func_6110() /* ty=Tensor[(1, 6, 15), float64] */;
    %1019 = cast(%1018, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
    %1020 = %1017.0;
    %1021 = log10(%1019) /* ty=Tensor[(1, 6, 15), float64] */;
    (%1020, %var_6479, %1021)
  };
  %1022(%var_6502) /* ty=(Tensor[(5, 7, 4), bool], Tensor[(140), int32], Tensor[(1, 6, 15), float64]) */
}

def @func_8303() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  @func_8301() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @func_1896() -> (Tensor[(1, 6, 15), float64],) {
  @func_1894() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_5520() -> (Tensor[(1, 6, 15), float64],) {
  %1025 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %1023 = @func_4854() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %1024 = %1023.0;
    (%1024,)
  };
  %1025() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_1208() -> Tensor[(1, 6, 15), float64] {
  @func_1033() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_5811() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %1026 = @func_2096() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %1027 = @func_4429() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %1028 = %1026.0;
  %1029 = %1027.1;
  (%1028, %1029)
}

def @func_9725() -> Tensor[(180), uint64] {
  %1030 = @func_6862() /* ty=(Tensor[(180), uint64], Tensor[(462), int16]) */;
  %1030.0
}

def @func_12433() -> (Tensor[(1, 6, 15), float64],) {
  @func_12431() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_10889() -> (Tensor[(1, 140), int32], Tensor[(180), uint64]) {
  %1034 = fn () -> (Tensor[(1, 140), int32], Tensor[(180), uint64]) {
    %1031 = @func_7640() /* ty=(Tensor[(1, 140), int32], Tensor[(14, 6, 15), bool]) */;
    %1032 = %1031.0;
    %1033 = @func_8507() /* ty=Tensor[(180), uint64] */;
    (%1032, %1033)
  };
  %1034() /* ty=(Tensor[(1, 140), int32], Tensor[(180), uint64]) */
}

def @func_4429() -> (Tensor[(180), uint64], Tensor[(180), uint64]) {
  %1035 = @func_2620() /* ty=(Tensor[(180), uint64],) */;
  %1036 = @func_2532() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %1037 = %1035.0;
  %1038 = %1036.1;
  (%1037, %1038)
}

def @func_449(%var_448: Tensor[(10, 2, 9), uint64]) -> (Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) {
  %1054 = fn (%var_423: Tensor[(10, 2, 9), uint64]) -> (Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) {
    %1039 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
    %1040 = shape_of(%var_423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1041 = cast(%var_423, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
    %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1043 = cast(%var_423, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %1044 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1045 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %1046 = dyn.reshape(%1043, %1044, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1047 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
    %1048 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1049 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 9), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
    %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1051 = right_shift(%1041, %1042) /* ty=Tensor[(10, 2, 9), uint64] */;
    %1052 = power(%1045, %1046) /* ty=Tensor[(10, 2, 9), float64] */;
    %1053 = multiply(%1049, %1050) /* ty=Tensor[(10, 2, 9), uint64] */;
    (%1051, %1052, %1053)
  };
  %1054(%var_448) /* ty=(Tensor[(10, 2, 9), uint64], Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), uint64]) */
}

def @func_11067() -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(11, 11, 8), float32]) {
  %1060 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(11, 11, 8), float32]) {
    %1055 = @func_7479() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16]) */;
    %1056 = @func_3247() /* ty=(Tensor[(180), uint64], Tensor[(11, 11, 8), float32]) */;
    %1057 = @func_7665() /* ty=Tensor[(1, 6, 15), float64] */;
    %1058 = %1055.1;
    %1059 = %1056.1;
    (%1057, %1058, %1059)
  };
  %1060() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(11, 11, 8), float32]) */
}

def @func_4011() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) {
  @func_4009() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64]) */
}

def @func_8213() -> Tensor[(180), uint64] {
  @func_8211() /* ty=Tensor[(180), uint64] */
}

def @func_2942() -> (Tensor[(1, 6, 15), float32],) {
  %1065 = fn () -> (Tensor[(1, 6, 15), float32],) {
    %1061 = @func_1987() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %1062 = %1061.0;
    %1063 = cast(%1062, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
    %1064 = sin(%1063) /* ty=Tensor[(1, 6, 15), float32] */;
    (%1064,)
  };
  %1065() /* ty=(Tensor[(1, 6, 15), float32],) */
}

def @func_6557() -> (Tensor[(462), int16],) {
  @func_6555() /* ty=(Tensor[(462), int16],) */
}

def @func_5569(%var_5567: Tensor[(12, 11, 9), float32], %var_5568: Tensor[(450), float64]) -> (Tensor[(12, 11, 9), float32], Tensor[(462), int16], Tensor[(?, 6, 15), int8], Tensor[(1, 6, 15), float64], Tensor[(450), float64]) {
  @func_5565(%var_5567, %var_5568) /* ty=(Tensor[(12, 11, 9), float32], Tensor[(462), int16], Tensor[(?, 6, 15), int8], Tensor[(1, 6, 15), float64], Tensor[(450), float64]) */
}

def @func_6305() -> (Tensor[(462), int16],) {
  @func_6303() /* ty=(Tensor[(462), int16],) */
}

def @func_6691() -> Tensor[(462), int16] {
  @func_6689() /* ty=Tensor[(462), int16] */
}

def @func_6111() -> Tensor[(1, 6, 15), float64] {
  %1066 = fn () -> Tensor[(1, 6, 15), float64] {
    @func_6078() /* ty=Tensor[(1, 6, 15), float64] */
  };
  %1066() /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_5622() -> (Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(462), int16], Tensor[(180), uint64]) {
  %1067 = @func_3908() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), float64], Tensor[(11, 11, 8), float32], Tensor[(1320), uint64]) */;
  %1068 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %1069 = cast(meta[relay.Constant][31] /* ty=Tensor[(462), int16] */, dtype="int16") /* ty=Tensor[(462), int16] */;
  %1070 = reshape(%1069, newshape=[462]) /* ty=Tensor[(462), int16] */;
  %1071 = @func_1185(%1070) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(3, 14, 11), int16], Tensor[(462), int16], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %1072 = @func_2856() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64], Tensor[(462), int16]) */;
  %1073 = %1067.4;
  %1074 = %1068.1;
  %1075 = %1071.3;
  %1076 = %1072.1;
  (%1073, %1074, %1075, meta[relay.Constant][31] /* ty=Tensor[(462), int16] */, %1076)
}

def @func_2034(%var_1993: uint16, %var_1994: Tensor[(3, 5, 3), uint16]) -> (Tensor[(180), uint64], Tensor[(3, 5, 3), float32], Tensor[(180), uint64]) {
  %1077 = cast(%var_1993, dtype="bool") /* ty=bool */;
  %1078 = cast(%var_1994, dtype="bool") /* ty=Tensor[(3, 5, 3), bool] */;
  %1079 = equal(%1077, %1078) /* ty=Tensor[(3, 5, 3), bool] */;
  %1080 = cast(%1079, dtype="float32") /* ty=Tensor[(3, 5, 3), float32] */;
  %1081 = @func_1720() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
  %1082 = @func_1456() /* ty=Tensor[(180), uint64] */;
  %1083 = sigmoid(%1080) /* ty=Tensor[(3, 5, 3), float32] */;
  %1084 = %1081.0;
  (%1082, %1083, %1084)
}

def @func_2921() -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
  %1089 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) {
    %1085 = @func_1744() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %1086 = @func_1592() /* ty=(Tensor[(180), uint64],) */;
    %1087 = %1085.0;
    %1088 = %1086.0;
    (%1087, %1088)
  };
  %1089() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */
}

def @func_9767() -> (Tensor[(180), uint64], Tensor[(462), int16]) {
  %1090 = @func_5339() /* ty=(Tensor[(462), int16],) */;
  %1091 = @func_8507() /* ty=Tensor[(180), uint64] */;
  %1092 = %1090.0;
  (%1091, %1092)
}

def @func_3614() -> (Tensor[(1, 6, 15), float32],) {
  %1095 = fn () -> (Tensor[(1, 6, 15), float32],) {
    %1093 = @func_2941() /* ty=(Tensor[(1, 6, 15), float32],) */;
    %1094 = %1093.0;
    (%1094,)
  };
  %1095() /* ty=(Tensor[(1, 6, 15), float32],) */
}

def @func_2822(%var_2820: Tensor[(180), uint64], %var_2821: Tensor[(14, 6, 15), float64]) -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32], Tensor[(14, 6, 15), bool]) {
  @func_2818(%var_2820, %var_2821) /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float32], Tensor[(14, 6, 15), bool]) */
}

def @func_1033() -> Tensor[(1, 6, 15), float64] {
  %1096 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  exp(%1096) /* ty=Tensor[(1, 6, 15), float64] */
}

def @func_10100() -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
  %1101 = fn () -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) {
    %1097 = @func_2920() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
    %1098 = @func_3987() /* ty=(Tensor[(1, 6, 15), float64],) */;
    %1099 = %1097.0;
    %1100 = %1098.0;
    (%1099, %1100)
  };
  %1101() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */
}

def @main(%var_13232: Tensor[(180, 1), uint64]) -> (Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180, 1), uint64], Tensor[(462), int16], Tensor[(?, 6, 15), int8]) {
  %1102 = @func_1941() /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64]) */;
  %1103 = cast(%var_13232, dtype="uint64") /* ty=Tensor[(180, 1), uint64] */;
  %1104 = reshape(%1103, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %1105 = @func_2165(%1104) /* ty=(Tensor[(1, 6, 15), float64], Tensor[(1, 6, 15), float64], Tensor[(180), uint64]) */;
  %1106 = @func_5340() /* ty=(Tensor[(462), int16],) */;
  %1107 = @func_4027() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %1108 = %1107.0;
  %1109 = @func_10801() /* ty=Tensor[(1, 6, 15), float64] */;
  %1110 = @func_3586() /* ty=(Tensor[(1, 6, 15), float64],) */;
  %1111 = %1110.0;
  %1112 = cast(%1111, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %1113 = shape_of(%1109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1114 = cast(%1109, dtype="int64") /* ty=Tensor[(1, 6, 15), int64] */;
  %1115 = dyn.reshape(%1112, %1113, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1116 = subtract(%1114, %1115) /* ty=Tensor[(?, 6, 15), int64] */;
  %1117 = cast(%1116, dtype="int8") /* ty=Tensor[(?, 6, 15), int8] */;
  %1118 = shape_of(%1108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1119 = cast(%1108, dtype="int8") /* ty=Tensor[(1, 6, 15), int8] */;
  %1120 = dyn.reshape(%1117, %1118, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1121 = %1102.1;
  %1122 = %1105.1;
  %1123 = %1106.0;
  %1124 = right_shift(%1119, %1120) /* ty=Tensor[(?, 6, 15), int8] */;
  (%1121, %1122, %var_13232, %1123, %1124)
}

def @func_10231() -> Tensor[(180), uint64] {
  @func_10229() /* ty=Tensor[(180), uint64] */
}

def @func_9108() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) {
  @func_9106() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(11, 11, 8), float32], Tensor[(12, 8, 1), float32]) */
}

def @func_2227() -> Tensor[(462), int16] {
  @func_1468() /* ty=Tensor[(462), int16] */
}

def @func_9656() -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), int64], Tensor[(90), float64]) {
  %1132 = fn () -> (Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), int64], Tensor[(90), float64]) {
    %1125 = @func_5374() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %1126 = @func_8146() /* ty=(Tensor[(1320), uint64], Tensor[(180), uint64], Tensor[(180), uint64]) */;
    %1127 = cast(meta[relay.Constant][33] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %1128 = reshape(%1127, newshape=[1, 6, 15]) /* ty=Tensor[(1, 6, 15), float64] */;
    %1129 = %1125.1;
    %1130 = %1126.2;
    %1131 = @func_9554(%1128) /* ty=Tensor[(?, 6, 15), int64] */;
    (%1129, %1130, %1131, meta[relay.Constant][33] /* ty=Tensor[(90), float64] */)
  };
  %1132() /* ty=(Tensor[(180), uint64], Tensor[(180), uint64], Tensor[(?, 6, 15), int64], Tensor[(90), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen569/build/output.py", line 4142, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:33:55] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

