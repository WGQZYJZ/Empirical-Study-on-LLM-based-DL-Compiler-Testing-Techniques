==========mod==========
#[version = "0.0.5"]
def @func_7482(%var_7411: Tensor[(160), uint64]) -> (Tensor[(528), float32], Tensor[(8, 10, 2), uint64], Tensor[(160), uint64], Tensor[(11, 8, 4), float64], Tensor[(8, 44), float64], Tensor[(33), float32]) {
  %0 = @func_4398() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
  %1 = cast(%var_7411, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %2 = cast(%var_7411, dtype="uint64") /* ty=Tensor[(160), uint64] */;
  %3 = reshape(%1, newshape=[8, 10, 2]) /* ty=Tensor[(8, 10, 2), uint64] */;
  %4 = reshape(%2, newshape=[8, 10, 2]) /* ty=Tensor[(8, 10, 2), uint64] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 44), float64] */, dtype="float64") /* ty=Tensor[(8, 44), float64] */;
  %6 = reshape(%5, newshape=[11, 8, 4]) /* ty=Tensor[(11, 8, 4), float64] */;
  %7 = @func_4106() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) */;
  %8 = %0.0;
  %9 = @func_2014(%3, %4) /* ty=Tensor[(8, 10, 2), uint64] */;
  %10 = @func_2490(%6) /* ty=Tensor[(11, 8, 4), float64] */;
  %11 = %7.1;
  (%8, %9, %var_7411, %10, meta[relay.Constant][0] /* ty=Tensor[(8, 44), float64] */, %11)
}

def @func_824(%var_819: Tensor[(33), float64]) -> Tensor[(33), bool] {
  %12 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %13 = %12.0;
  %14 = cast(%var_819, dtype="bool") /* ty=Tensor[(33), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(1), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(33), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?), bool] */;
  not_equal(%16, %17) /* ty=Tensor[(33), bool] */
}

def @func_2824() -> (Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) {
  %18 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(10080), float32] */, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %21 = reshape(%19, newshape=[1, 1680]) /* ty=Tensor[(1, 1680), float32] */;
  %22 = reshape(%20, newshape=[6, 1680]) /* ty=Tensor[(6, 1680), float32] */;
  %23 = @func_1486(%21, %22) /* ty=(Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) */;
  %24 = %18.2;
  %25 = %23.5;
  (%24, %25, meta[relay.Constant][1] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][2] /* ty=Tensor[(10080), float32] */)
}

def @func_970() -> (Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) {
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(33), float32] */, dtype="float32") /* ty=Tensor[(33), float32] */;
  %27 = @func_752() /* ty=Tensor[(528), float32] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(528), float32] */;
  %29 = reshape(%26, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
  %30 = reshape(%28, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %31 = @func_458(%29, %30) /* ty=(Tensor[(11, 16, 3), float32],) */;
  %32 = %31.0;
  (%27, %32, meta[relay.Constant][3] /* ty=Tensor[(33), float32] */)
}

def @func_4335() -> (Tensor[(33), float64],) {
  %33 = @func_542() /* ty=Tensor[(33), float64] */;
  (%33,)
}

def @func_7879(%var_7836: Tensor[(10, 3, 15), float64]) -> (Tensor[(10, 3, 15), float64], Tensor[(10, 3, 15), float64]) {
  %34 = cast(%var_7836, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
  %35 = cast(%var_7836, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
  %36 = erf(%34) /* ty=Tensor[(10, 3, 15), float64] */;
  %37 = tan(%35) /* ty=Tensor[(10, 3, 15), float64] */;
  (%36, %37)
}

def @func_3861(%var_3831: Tensor[(33), float64]) -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(1680), float32]) {
  %38 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %39 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
  %40 = %39.0;
  %41 = cast(%var_3831, dtype="int16") /* ty=Tensor[(33), int16] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(1), int32] */;
  %43 = cast(%40, dtype="int16") /* ty=Tensor[(33), int16] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), int16] */;
  %45 = multiply(%43, %44) /* ty=Tensor[(33), int16] */;
  %46 = cast(%var_3831, dtype="float64") /* ty=Tensor[(33), float64] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(1), int32] */;
  %48 = cast(%45, dtype="float64") /* ty=Tensor[(33), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?), float64] */;
  %50 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %51 = %38.0;
  %52 = mod(%48, %49) /* ty=Tensor[(33), float64] */;
  %53 = %50.2;
  (%51, %52, %53)
}

def @func_8224() -> Tensor[(2640), float64] {
  %54 = @func_2768() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) */;
  %54.5
}

def @func_5495(%var_5483: Tensor[(33), float64]) -> (Tensor[(6, 1680), float32], Tensor[(33), int32]) {
  %55 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %56 = %55.1;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(6, 1680), float32] */;
  %58 = @func_1704() /* ty=Tensor[(33), float64] */;
  %59 = cast(%var_5483, dtype="bool") /* ty=Tensor[(33), bool] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(1), int32] */;
  %61 = cast(%58, dtype="bool") /* ty=Tensor[(33), bool] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?), bool] */;
  %63 = logical_or(%61, %62) /* ty=Tensor[(33), bool] */;
  %64 = cast(%58, dtype="int32") /* ty=Tensor[(33), int32] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(1), int32] */;
  %66 = cast(%63, dtype="int32") /* ty=Tensor[(33), int32] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?), int32] */;
  %68 = sin(%57) /* ty=Tensor[(6, 1680), float32] */;
  %69 = add(%66, %67) /* ty=Tensor[(33), int32] */;
  (%68, %69)
}

def @func_669() -> Tensor[(528), float32] {
  %70 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %70.2
}

def @func_2014(%var_2004: Tensor[(8, 10, 2), uint64], %var_2005: Tensor[(8, 10, 2), uint64]) -> Tensor[(8, 10, 2), uint64] {
  %71 = cast(%var_2005, dtype="uint64") /* ty=Tensor[(8, 10, 2), uint64] */;
  %72 = shape_of(%var_2004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_2004, dtype="uint64") /* ty=Tensor[(8, 10, 2), uint64] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%73, %74) /* ty=Tensor[(8, 10, 2), uint64] */
}

def @func_8178() -> (Tensor[(1680), float32],) {
  %75 = @func_3583() /* ty=Tensor[(1680), float32] */;
  (%75,)
}

def @func_5538() -> Tensor[(528), float32] {
  %76 = @func_2459() /* ty=(Tensor[(528), float32],) */;
  %76.0
}

def @func_5805(%var_5801: Tensor[(480), uint64]) -> (Tensor[(33), bool], Tensor[(8, 6, 10), uint64], Tensor[(480), uint64]) {
  %77 = cast(%var_5801, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %78 = cast(%var_5801, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %79 = reshape(%77, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
  %80 = reshape(%78, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
  %81 = @func_5195(%79, %80) /* ty=(Tensor[(8, 6, 10), uint64],) */;
  %82 = @func_3347() /* ty=Tensor[(33), bool] */;
  %83 = %81.0;
  (%82, %83, %var_5801)
}

def @func_2897(%var_2892: Tensor[(4, 2, 15), int64]) -> Tensor[(4, 2, 15), bool] {
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 2, 15), int64] */, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
  %85 = shape_of(%var_2892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_2892, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%86, %87) /* ty=Tensor[(4, 2, 15), bool] */
}

def @func_4121() -> Tensor[(1680), float32] {
  %88 = @func_3638() /* ty=(Tensor[(1680), float32], Tensor[(528), float32]) */;
  %88.0
}

def @func_6140() -> (Tensor[(528), float32], Tensor[(528), float32]) {
  %89 = @func_3101() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %90 = @func_4435() /* ty=(Tensor[(528), float32],) */;
  %91 = %89.1;
  %92 = %90.0;
  (%91, %92)
}

def @func_7919() -> (Tensor[(11, 16, 3), float32],) {
  %93 = @func_6887() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %94 = %93.0;
  (%94,)
}

def @func_3347() -> Tensor[(33), bool] {
  %95 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %95.3
}

def @func_7749() -> Tensor[(528), float32] {
  %96 = @func_6785() /* ty=(Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
  %96.0
}

def @func_8528() -> (Tensor[(33), float64],) {
  %97 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %98 = %97.1;
  (%98,)
}

def @func_3195() -> (Tensor[(528), float32],) {
  %99 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %100 = %99.0;
  (%100,)
}

def @func_8560() -> Tensor[(528), float32] {
  %101 = @func_6732() /* ty=(Tensor[(528), float32],) */;
  %101.0
}

def @func_5654(%var_5567: Tensor[(10080), uint32], %var_5580: Tensor[(10080), uint32], %var_5647: Tensor[(360), float64]) -> (Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(10080), bool], Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(528), float32], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) {
  %102 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %103 = %102.0;
  %104 = cast(%var_5567, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %105 = shape_of(%103, dtype="int32") /* ty=Tensor[(1), int32] */;
  %106 = cast(%103, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %108 = cast(%var_5580, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %109 = shape_of(%103, dtype="int32") /* ty=Tensor[(1), int32] */;
  %110 = cast(%103, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?), float32] */;
  %112 = floor_divide(%110, %111) /* ty=Tensor[(10080), float32] */;
  %113 = cast(%103, dtype="bool") /* ty=Tensor[(10080), bool] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(1), int32] */;
  %115 = cast(%112, dtype="bool") /* ty=Tensor[(10080), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?), bool] */;
  %117 = cast(%112, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %118 = sigmoid(%117) /* ty=Tensor[(10080), float32] */;
  %119 = cast(%112, dtype="int16") /* ty=Tensor[(10080), int16] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(1), int32] */;
  %121 = cast(%118, dtype="int16") /* ty=Tensor[(10080), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), int16] */;
  %123 = bitwise_and(%121, %122) /* ty=Tensor[(10080), int16] */;
  %124 = cast(%var_5567, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %125 = shape_of(%103, dtype="int32") /* ty=Tensor[(1), int32] */;
  %126 = cast(%103, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?), float32] */;
  %128 = divide(%126, %127) /* ty=Tensor[(10080), float32] */;
  %129 = cast(%128, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %130 = shape_of(%123, dtype="int32") /* ty=Tensor[(1), int32] */;
  %131 = cast(%123, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %133 = @func_3719() /* ty=(Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) */;
  %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %135 = cast(%var_5647, dtype="float64") /* ty=Tensor[(360), float64] */;
  %136 = reshape(%134, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %137 = reshape(%135, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), float64] */;
  %138 = @func_2373(%136, %137) /* ty=(Tensor[(9, 8, 5), float64],) */;
  %139 = @func_752() /* ty=Tensor[(528), float32] */;
  %140 = subtract(%106, %107) /* ty=Tensor[(10080), uint16] */;
  %141 = logical_or(%115, %116) /* ty=Tensor[(10080), bool] */;
  %142 = @func_752() /* ty=Tensor[(528), float32] */;
  %143 = left_shift(%131, %132) /* ty=Tensor[(10080), uint16] */;
  %144 = %133.3;
  %145 = %138.0;
  (%139, %140, %141, %142, %143, %144, %145, meta[relay.Constant][5] /* ty=Tensor[(40), float64] */, %var_5647)
}

def @func_6802() -> Tensor[(33), float64] {
  %146 = @func_4335() /* ty=(Tensor[(33), float64],) */;
  %146.0
}

def @func_6926(%var_6906: Tensor[(2640), float64], %var_6923: Tensor[(120, 4), uint64]) -> (Tensor[(528), float32], Tensor[(2640), float64], Tensor[(8, 6, 10), uint64], Tensor[(120, 4), uint64]) {
  %147 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %148 = %147.0;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(528), float32] */;
  %150 = @func_4546() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(33), bool], Tensor[(2640), float64]) */;
  %151 = %150.3;
  %152 = cast(%var_6906, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %153 = shape_of(%151, dtype="int32") /* ty=Tensor[(1), int32] */;
  %154 = cast(%151, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?), float64] */;
  %156 = cast(%var_6923, dtype="uint64") /* ty=Tensor[(120, 4), uint64] */;
  %157 = cast(%var_6923, dtype="uint64") /* ty=Tensor[(120, 4), uint64] */;
  %158 = reshape(%156, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
  %159 = reshape(%157, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
  %160 = @func_5195(%158, %159) /* ty=(Tensor[(8, 6, 10), uint64],) */;
  %161 = atanh(%149) /* ty=Tensor[(528), float32] */;
  %162 = divide(%154, %155) /* ty=Tensor[(2640), float64] */;
  %163 = %160.0;
  (%161, %162, %163, %var_6923)
}

def @func_4254(%var_4246: Tensor[(3, 1, 5), float32]) -> (Tensor[(3, ?, 5), float32], Tensor[(33), float64]) {
  %164 = cast(%var_4246, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
  %165 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 1, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %168 = @func_1052() /* ty=(Tensor[(33), float32], Tensor[(33), float64]) */;
  %169 = floor_mod(%166, %167) /* ty=Tensor[(3, ?, 5), float32] */;
  %170 = %168.1;
  (%169, %170)
}

def @func_2888() -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) {
  %171 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %172 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %173 = @func_1541() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) */;
  %174 = %173.1;
  %175 = cast(%174, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %176 = %171.0;
  %177 = %172.0;
  %178 = log(%175) /* ty=Tensor[(10, 14, 12), float64] */;
  (%176, %177, %178)
}

def @func_3111() -> (Tensor[(528), float32],) {
  %179 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %180 = %179.0;
  (%180,)
}

def @func_458(%var_452: Tensor[(11, 1, 3), float32], %var_453: Tensor[(11, 16, 3), float32]) -> (Tensor[(11, 16, 3), float32],) {
  %181 = cast(%var_452, dtype="float32") /* ty=Tensor[(11, 1, 3), float32] */;
  %182 = cast(%var_453, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
  %183 = divide(%181, %182) /* ty=Tensor[(11, 16, 3), float32] */;
  (%183,)
}

def @func_1132() -> (Tensor[(11, 16, 3), float32],) {
  %184 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %185 = %184.1;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
  %187 = asinh(%186) /* ty=Tensor[(11, 16, 3), float32] */;
  (%187,)
}

def @func_4739() -> (Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) {
  %188 = cast(meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %189 = cast(meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %190 = reshape(%188, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %191 = reshape(%189, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %192 = cast(meta[relay.Constant][8] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %193 = reshape(%192, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), float32] */;
  %194 = @func_4254(%193) /* ty=(Tensor[(3, ?, 5), float32], Tensor[(33), float64]) */;
  %195 = @func_2888() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) */;
  %196 = %195.1;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(33), float32] */;
  %198 = cos(%197) /* ty=Tensor[(33), float32] */;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(33), float32] */;
  %200 = sinh(%199) /* ty=Tensor[(33), float32] */;
  %201 = cast(%196, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(1), int32] */;
  %203 = cast(%200, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %205 = @func_4121() /* ty=Tensor[(1680), float32] */;
  %206 = @func_427(%190, %191) /* ty=Tensor[(4, 8, 2), bool] */;
  %207 = %194.0;
  %208 = right_shift(%203, %204) /* ty=Tensor[(33), uint16] */;
  (%205, %206, meta[relay.Constant][7] /* ty=Tensor[(64), float32] */, %207, meta[relay.Constant][8] /* ty=Tensor[(15), float32] */, %208)
}

def @func_6743() -> Tensor[(11, 16, 3), float32] {
  %209 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %209.0
}

def @func_8458(%var_8454: Tensor[(40), float64]) -> (Tensor[(33), bool], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) {
  %210 = @func_3719() /* ty=(Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) */;
  %211 = cast(%var_8454, dtype="float64") /* ty=Tensor[(40), float64] */;
  %212 = cast(meta[relay.Constant][9] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %213 = reshape(%211, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %214 = reshape(%212, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), float64] */;
  %215 = @func_2373(%213, %214) /* ty=(Tensor[(9, 8, 5), float64],) */;
  %216 = %210.7;
  %217 = %215.0;
  (%216, %217, %var_8454, meta[relay.Constant][9] /* ty=Tensor[(360), float64] */)
}

def @func_1704() -> Tensor[(33), float64] {
  %218 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %218.0
}

def @func_5279() -> Tensor[(528), float32] {
  %219 = @func_4398() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
  %219.0
}

def @func_5763(%var_5707: Tensor[(9, 4, 8), uint32], %var_5759: Tensor[(98), float32], %var_5760: Tensor[(11, 3), float32], %var_5761: Tensor[(1320, 2), float64]) -> (Tensor[(9, 4, 8), uint32], Tensor[(9, 4, 8), bool], Tensor[(528), float32], Tensor[(12, 220), float64], Tensor[(98), float32], Tensor[(11, 3), float32], Tensor[(1320, 2), float64]) {
  %220 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 4, 8), uint32] */, dtype="uint32") /* ty=Tensor[(9, 4, 8), uint32] */;
  %221 = shape_of(%var_5707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_5707, dtype="uint32") /* ty=Tensor[(9, 4, 8), uint32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %224 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 4, 8), uint32] */, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %225 = shape_of(%var_5707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_5707, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = cast(%var_5759, dtype="float32") /* ty=Tensor[(98), float32] */;
  %229 = cast(%var_5760, dtype="float32") /* ty=Tensor[(11, 3), float32] */;
  %230 = cast(%var_5761, dtype="float64") /* ty=Tensor[(1320, 2), float64] */;
  %231 = reshape(%228, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), float32] */;
  %232 = reshape(%229, newshape=[33]) /* ty=Tensor[(33), float32] */;
  %233 = reshape(%230, newshape=[12, 220]) /* ty=Tensor[(12, 220), float64] */;
  %234 = @func_2075(%231, %232, %233) /* ty=(Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) */;
  %235 = right_shift(%222, %223) /* ty=Tensor[(9, 4, 8), uint32] */;
  %236 = less(%226, %227) /* ty=Tensor[(9, 4, 8), bool] */;
  %237 = @func_4608() /* ty=Tensor[(528), float32] */;
  %238 = %234.5;
  (%235, %236, %237, %238, %var_5759, %var_5760, %var_5761)
}

def @func_6406() -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32]) {
  %239 = @func_4335() /* ty=(Tensor[(33), float64],) */;
  %240 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %241 = %239.0;
  %242 = %240.1;
  (%241, %242)
}

def @func_6785() -> (Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) {
  %243 = cast(meta[relay.Constant][11] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %244 = reshape(%243, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %245 = @func_1113(%244) /* ty=(Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
  %246 = @func_4494() /* ty=Tensor[(528), float32] */;
  %247 = %245.2;
  (%246, %247, meta[relay.Constant][11] /* ty=Tensor[(325), uint8] */)
}

def @func_6847() -> Tensor[(528), float32] {
  @func_5692() /* ty=Tensor[(528), float32] */
}

def @func_7169(%var_7163: Tensor[(8, 15, 5), uint32]) -> Tensor[(8, 15, 5), uint32] {
  %248 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(8, 15, 5), uint32] */;
  %249 = shape_of(%var_7163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%var_7163, dtype="uint32") /* ty=Tensor[(8, 15, 5), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%250, %251) /* ty=Tensor[(8, 15, 5), uint32] */
}

def @func_4188() -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(1680), float32], Tensor[(7, 7, 9), uint64], Tensor[(10080), float32]) {
  %252 = @func_4106() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) */;
  %253 = @func_2569() /* ty=(Tensor[(1680), float32],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %256 = cast(meta[relay.Constant][13] /* ty=Tensor[(10080), float32] */, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %257 = reshape(%255, newshape=[1, 1680]) /* ty=Tensor[(1, 1680), float32] */;
  %258 = reshape(%256, newshape=[6, 1680]) /* ty=Tensor[(6, 1680), float32] */;
  %259 = @func_1486(%257, %258) /* ty=(Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) */;
  %260 = @func_752() /* ty=Tensor[(528), float32] */;
  %261 = %252.1;
  %262 = %259.2;
  (%260, %261, %254, %262, meta[relay.Constant][13] /* ty=Tensor[(10080), float32] */)
}

def @func_5863() -> Tensor[(528), float32] {
  @func_5430() /* ty=Tensor[(528), float32] */
}

def @func_5028() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(33), float64], Tensor[(33), bool], Tensor[(11, 16, 3), float32]) {
  %263 = @func_3101() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %264 = @func_4371() /* ty=(Tensor[(33), bool],) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(33), float64] */;
  %267 = @func_1541() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) */;
  %268 = %263.0;
  %269 = @func_1074() /* ty=Tensor[(528), float32] */;
  %270 = acosh(%266) /* ty=Tensor[(33), float64] */;
  %271 = @func_4627() /* ty=Tensor[(33), bool] */;
  %272 = %267.0;
  (%268, %269, %270, %271, %272)
}

def @func_4608() -> Tensor[(528), float32] {
  @func_669() /* ty=Tensor[(528), float32] */
}

def @func_8606() -> Tensor[(15), float32] {
  %273 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
  %273.4
}

def @func_4371() -> (Tensor[(33), bool],) {
  %274 = @func_3565() /* ty=Tensor[(33), bool] */;
  (%274,)
}

def @func_6321() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %275 = @func_4829() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(12, 16, 11), float32], Tensor[(220), float32], Tensor[(2112), float64]) */;
  %276 = @func_4335() /* ty=(Tensor[(33), float64],) */;
  %277 = %275.0;
  %278 = %276.0;
  (%277, %278)
}

def @func_3380() -> (Tensor[(528), float32], Tensor[(6, 1680), bool], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), bool]) {
  %279 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %280 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %281 = %280.1;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(6, 1680), float64] */;
  %283 = cosh(%282) /* ty=Tensor[(6, 1680), float64] */;
  %284 = cast(%281, dtype="bool") /* ty=Tensor[(6, 1680), bool] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(2), int32] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(6, 1680), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %288 = @func_2459() /* ty=(Tensor[(528), float32],) */;
  %289 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %290 = %279.0;
  %291 = less(%286, %287) /* ty=Tensor[(6, 1680), bool] */;
  %292 = @func_542() /* ty=Tensor[(33), float64] */;
  %293 = %288.0;
  %294 = %289.3;
  (%290, %291, %292, %293, %294)
}

def @func_7616() -> (Tensor[(11, 16, 3), float32], Tensor[(10080), uint32]) {
  %295 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %296 = @func_6823() /* ty=Tensor[(11, 16, 3), float32] */;
  %297 = %295.0;
  (%296, %297)
}

def @func_1816(%var_1770: Tensor[(33), float64]) -> (Tensor[(33), int16],) {
  %298 = @func_1704() /* ty=Tensor[(33), float64] */;
  %299 = cast(%var_1770, dtype="int16") /* ty=Tensor[(33), int16] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(1), int32] */;
  %301 = cast(%298, dtype="int16") /* ty=Tensor[(33), int16] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?), int16] */;
  %303 = bitwise_and(%301, %302) /* ty=Tensor[(33), int16] */;
  (%303,)
}

def @func_4931(%var_4909: Tensor[(33), float64]) -> (Tensor[(33), uint16], Tensor[(10080), float32]) {
  %304 = @func_4335() /* ty=(Tensor[(33), float64],) */;
  %305 = %304.0;
  %306 = cast(%var_4909, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(1), int32] */;
  %308 = cast(%305, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %310 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %311 = %310.0;
  %312 = cast(%311, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %313 = minimum(%308, %309) /* ty=Tensor[(33), uint16] */;
  %314 = log10(%312) /* ty=Tensor[(10080), float32] */;
  (%313, %314)
}

def @func_7189(%var_7184: Tensor[(1, 12, 15), uint32], %var_7185: Tensor[(2, 12, 15), uint32]) -> Tensor[(2, 12, 15), uint32] {
  %315 = cast(%var_7184, dtype="uint32") /* ty=Tensor[(1, 12, 15), uint32] */;
  %316 = cast(%var_7185, dtype="uint32") /* ty=Tensor[(2, 12, 15), uint32] */;
  bitwise_xor(%315, %316) /* ty=Tensor[(2, 12, 15), uint32] */
}

def @func_7389() -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(528), float32]) {
  %317 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %318 = @func_6802() /* ty=Tensor[(33), float64] */;
  %319 = @func_6823() /* ty=Tensor[(11, 16, 3), float32] */;
  %320 = @func_1359() /* ty=Tensor[(528), float32] */;
  %321 = %317.0;
  (%318, %319, %320, %321)
}

def @func_503() -> (Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) {
  %322 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 8), float64] */;
  %323 = rsqrt(%322) /* ty=Tensor[(1, 8, 8), float64] */;
  %324 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 8), float64] */;
  %325 = asinh(%324) /* ty=Tensor[(1, 8, 8), float64] */;
  %326 = cast(%325, dtype="int16") /* ty=Tensor[(1, 8, 8), int16] */;
  %327 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%323, dtype="int16") /* ty=Tensor[(1, 8, 8), int16] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %330 = cast(meta[relay.Constant][15] /* ty=Tensor[(33), float32] */, dtype="float32") /* ty=Tensor[(33), float32] */;
  %331 = cast(meta[relay.Constant][16] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %332 = reshape(%330, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
  %333 = reshape(%331, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %334 = @func_458(%332, %333) /* ty=(Tensor[(11, 16, 3), float32],) */;
  %335 = subtract(%328, %329) /* ty=Tensor[(?, 8, 8), int16] */;
  %336 = %334.0;
  (%335, %336, meta[relay.Constant][15] /* ty=Tensor[(33), float32] */, meta[relay.Constant][16] /* ty=Tensor[(528), float32] */)
}

def @func_7117() -> Tensor[(528), float32] {
  %337 = @func_5831() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %337.0
}

def @func_1330(%var_1308: Tensor[(7, 7, 9), uint64], %var_1309: Tensor[(7, 7, 9), uint64], %var_1327: Tensor[(840, 2), float32]) -> (Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) {
  %338 = cast(%var_1309, dtype="uint64") /* ty=Tensor[(7, 7, 9), uint64] */;
  %339 = shape_of(%var_1308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_1308, dtype="uint64") /* ty=Tensor[(7, 7, 9), uint64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %342 = cast(%var_1327, dtype="float32") /* ty=Tensor[(840, 2), float32] */;
  %343 = reshape(%342, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
  %344 = @func_898(%343) /* ty=(Tensor[(10, 14, 12), float64],) */;
  %345 = bitwise_and(%340, %341) /* ty=Tensor[(7, 7, 9), uint64] */;
  %346 = %344.0;
  (%345, %346, %var_1327)
}

def @func_6823() -> Tensor[(11, 16, 3), float32] {
  %347 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %347.0
}

def @func_5040() -> (Tensor[(10080), float32],) {
  %348 = @func_4188() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(1680), float32], Tensor[(7, 7, 9), uint64], Tensor[(10080), float32]) */;
  %349 = %348.4;
  (%349,)
}

def @func_3310(%var_3298: Tensor[(6, 1, 5), float64], %var_3299: Tensor[(6, 3, 5), float64]) -> (Tensor[(6, 3, 5), float64], Tensor[(33), float64]) {
  %350 = cast(%var_3298, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %351 = cast(%var_3299, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
  %352 = power(%350, %351) /* ty=Tensor[(6, 3, 5), float64] */;
  %353 = @func_542() /* ty=Tensor[(33), float64] */;
  (%352, %353)
}

def @func_5430() -> Tensor[(528), float32] {
  %354 = @func_4435() /* ty=(Tensor[(528), float32],) */;
  %354.0
}

def @func_3965(%var_3936: Tensor[(16, 7, 3), uint8], %var_3937: Tensor[(16, 7, 3), uint8]) -> (Tensor[(16, 7, 3), uint8], Tensor[(16, 7, 3), float64]) {
  %355 = cast(%var_3937, dtype="uint8") /* ty=Tensor[(16, 7, 3), uint8] */;
  %356 = shape_of(%var_3936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_3936, dtype="uint8") /* ty=Tensor[(16, 7, 3), uint8] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %359 = cast(%var_3936, dtype="float64") /* ty=Tensor[(16, 7, 3), float64] */;
  %360 = bitwise_xor(%357, %358) /* ty=Tensor[(16, 7, 3), uint8] */;
  %361 = cosh(%359) /* ty=Tensor[(16, 7, 3), float64] */;
  (%360, %361)
}

def @func_1486(%var_1449: Tensor[(1, 1680), float32], %var_1461: Tensor[(6, 1680), float32]) -> (Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) {
  %362 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %363 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 63), uint64] */, dtype="uint64") /* ty=Tensor[(7, 63), uint64] */;
  %364 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 63), uint64] */, dtype="uint64") /* ty=Tensor[(7, 63), uint64] */;
  %365 = cast(%var_1449, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
  %366 = reshape(%363, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
  %367 = reshape(%364, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
  %368 = reshape(%365, newshape=[840, 2]) /* ty=Tensor[(840, 2), float32] */;
  %369 = @func_1330(%366, %367, %368) /* ty=(Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) */;
  %370 = cast(%var_1449, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
  %371 = cast(%var_1461, dtype="float32") /* ty=Tensor[(6, 1680), float32] */;
  %372 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %373 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %374 = @func_1359() /* ty=Tensor[(528), float32] */;
  %375 = %362.0;
  %376 = %369.0;
  %377 = @func_669() /* ty=Tensor[(528), float32] */;
  %378 = divide(%370, %371) /* ty=Tensor[(6, 1680), float32] */;
  %379 = @func_1359() /* ty=Tensor[(528), float32] */;
  %380 = %372.0;
  %381 = %373.1;
  (%374, %375, %376, meta[relay.Constant][17] /* ty=Tensor[(7, 63), uint64] */, %377, %378, %379, %380, %381)
}

def @func_4435() -> (Tensor[(528), float32],) {
  %382 = @func_3323() /* ty=Tensor[(528), float32] */;
  (%382,)
}

def @func_3565() -> Tensor[(33), bool] {
  @func_3347() /* ty=Tensor[(33), bool] */
}

def @func_3242(%var_3198: Tensor[(12, 16, 11), uint16], %var_3199: Tensor[(12, 16, 11), uint16], %var_3225: Tensor[(220), float32]) -> (Tensor[(12, 16, 11), bool], Tensor[(33), int16], Tensor[(11, 3), float64], Tensor[(33), float64], Tensor[(220), float32], Tensor[(12, 16, 11), float32], Tensor[(11, 16, 3), float64], Tensor[(8, 66), float32]) {
  %383 = cast(%var_3199, dtype="bool") /* ty=Tensor[(12, 16, 11), bool] */;
  %384 = shape_of(%var_3198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_3198, dtype="bool") /* ty=Tensor[(12, 16, 11), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 3), float64] */;
  %388 = reshape(%387, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %389 = @func_1816(%388) /* ty=(Tensor[(33), int16],) */;
  %390 = cast(%var_3225, dtype="float32") /* ty=Tensor[(220), float32] */;
  %391 = reshape(%390, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float32] */;
  %392 = @func_1949(%391) /* ty=(Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(4, 5, 11), float64]) */;
  %393 = cast(%var_3198, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
  %394 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 66), float32] */, dtype="float32") /* ty=Tensor[(8, 66), float32] */;
  %395 = reshape(%394, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %396 = @func_1237(%395) /* ty=(Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) */;
  %397 = greater_equal(%385, %386) /* ty=Tensor[(12, 16, 11), bool] */;
  %398 = %389.0;
  %399 = %392.0;
  %400 = sin(%393) /* ty=Tensor[(12, 16, 11), float32] */;
  %401 = %396.0;
  (%397, %398, meta[relay.Constant][18] /* ty=Tensor[(11, 3), float64] */, %399, %var_3225, %400, %401, meta[relay.Constant][19] /* ty=Tensor[(8, 66), float32] */)
}

def @func_542() -> Tensor[(33), float64] {
  %402 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
  %403 = %402.2;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(33), float64] */;
  atanh(%404) /* ty=Tensor[(33), float64] */
}

def @func_1074() -> Tensor[(528), float32] {
  %405 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %405.2
}

def @func_1419() -> (Tensor[(528), float32],) {
  %406 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %407 = %406.0;
  (%407,)
}

def @func_6651() -> (Tensor[(528), float32],) {
  %408 = @func_4494() /* ty=Tensor[(528), float32] */;
  (%408,)
}

def @func_4021() -> (Tensor[(1680), float32],) {
  %409 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
  %410 = %409.2;
  (%410,)
}

def @func_8416(%var_8414: Tensor[(1, 160), uint64]) -> (Tensor[(528), float32], Tensor[(528), float32], Tensor[(33), bool], Tensor[(528), float32], Tensor[(8, 44), float64], Tensor[(1, 160), uint64]) {
  %411 = @func_3101() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %412 = @func_6785() /* ty=(Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
  %413 = cast(%var_8414, dtype="uint64") /* ty=Tensor[(1, 160), uint64] */;
  %414 = reshape(%413, newshape=[160]) /* ty=Tensor[(160), uint64] */;
  %415 = @func_7482(%414) /* ty=(Tensor[(528), float32], Tensor[(8, 10, 2), uint64], Tensor[(160), uint64], Tensor[(11, 8, 4), float64], Tensor[(8, 44), float64], Tensor[(33), float32]) */;
  %416 = @func_4608() /* ty=Tensor[(528), float32] */;
  %417 = %411.1;
  %418 = @func_4627() /* ty=Tensor[(33), bool] */;
  %419 = %412.0;
  %420 = %415.4;
  (%416, %417, %418, %419, %420, %var_8414)
}

def @func_1206(%var_1180: Tensor[(3, 10, 6), float32]) -> Tensor[(3, 10, 6), float32] {
  %421 = cast(%var_1180, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  acos(%421) /* ty=Tensor[(3, 10, 6), float32] */
}

def @func_2490(%var_2485: Tensor[(11, 8, 4), float64]) -> Tensor[(11, 8, 4), float64] {
  %422 = cast(%var_2485, dtype="float64") /* ty=Tensor[(11, 8, 4), float64] */;
  atan(%422) /* ty=Tensor[(11, 8, 4), float64] */
}

def @func_5938(%var_5886: Tensor[(15), float32]) -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(15), float32], Tensor[(33), bool], Tensor[(5, 11, 15), uint8], Tensor[(825), uint8], Tensor[(528), float32], Tensor[(528), float32], Tensor[(10080), uint32]) {
  %423 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %424 = cast(%var_5886, dtype="float32") /* ty=Tensor[(15), float32] */;
  %425 = reshape(%424, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), float32] */;
  %426 = @func_4254(%425) /* ty=(Tensor[(3, ?, 5), float32], Tensor[(33), float64]) */;
  %427 = cast(meta[relay.Constant][20] /* ty=Tensor[(825), uint8] */, dtype="uint8") /* ty=Tensor[(825), uint8] */;
  %428 = reshape(%427, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), uint8] */;
  %429 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %430 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %431 = %423.0;
  %432 = %426.1;
  %433 = @func_4627() /* ty=Tensor[(33), bool] */;
  %434 = @func_2667(%428) /* ty=Tensor[(5, 11, 15), uint8] */;
  %435 = %429.0;
  %436 = @func_1074() /* ty=Tensor[(528), float32] */;
  %437 = %430.0;
  (%431, %432, %var_5886, %433, %434, meta[relay.Constant][20] /* ty=Tensor[(825), uint8] */, %435, %436, %437)
}

def @func_6613() -> (Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64], Tensor[(64), float32]) {
  %438 = cast(meta[relay.Constant][21] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %439 = reshape(%438, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %440 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
  %441 = @func_1359() /* ty=Tensor[(528), float32] */;
  %442 = @func_824(%439) /* ty=Tensor[(33), bool] */;
  %443 = %440.2;
  (%441, %442, meta[relay.Constant][21] /* ty=Tensor[(33), float64] */, %443)
}

def @func_7980() -> (Tensor[(528), float32], Tensor[(528), float32]) {
  %444 = @func_6321() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %445 = %444.0;
  %446 = @func_5863() /* ty=Tensor[(528), float32] */;
  (%445, %446)
}

def @func_7154(%var_7150: Tensor[(4, 5, 9), float64]) -> Tensor[(4, 5, 9), float64] {
  %447 = cast(%var_7150, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  atan(%447) /* ty=Tensor[(4, 5, 9), float64] */
}

def @func_1541() -> (Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) {
  %448 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %449 = cast(meta[relay.Constant][22] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %450 = reshape(%449, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
  %451 = @func_898(%450) /* ty=(Tensor[(10, 14, 12), float64],) */;
  %452 = %448.0;
  %453 = %451.0;
  (%452, %453, meta[relay.Constant][22] /* ty=Tensor[(1680), float32] */)
}

def @func_3336(%var_3325: Tensor[(8, 12, 16), float32], %var_3329: Tensor[(3, 60), float32]) -> (Tensor[(8, 12, 16), float32], Tensor[(3, 10, 6), float32], Tensor[(3, 60), float32]) {
  %454 = cast(%var_3325, dtype="float32") /* ty=Tensor[(8, 12, 16), float32] */;
  %455 = cast(%var_3329, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %456 = reshape(%455, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %457 = sinh(%454) /* ty=Tensor[(8, 12, 16), float32] */;
  %458 = @func_1206(%456) /* ty=Tensor[(3, 10, 6), float32] */;
  (%457, %458, %var_3329)
}

def @func_4474() -> (Tensor[(10080), uint32],) {
  %459 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %460 = %459.3;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(10080), float64] */;
  %462 = exp(%461) /* ty=Tensor[(10080), float64] */;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %464 = cosh(%463) /* ty=Tensor[(10080), float32] */;
  %465 = cast(%462, dtype="uint32") /* ty=Tensor[(10080), uint32] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(1), int32] */;
  %467 = cast(%464, dtype="uint32") /* ty=Tensor[(10080), uint32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %469 = multiply(%467, %468) /* ty=Tensor[(10080), uint32] */;
  (%469,)
}

def @func_5325(%var_5317: Tensor[(528), float32]) -> (Tensor[(33), bool], Tensor[(528), float32], Tensor[(528), float32]) {
  %470 = cast(%var_5317, dtype="float32") /* ty=Tensor[(528), float32] */;
  %471 = reshape(%470, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %472 = @func_1237(%471) /* ty=(Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) */;
  %473 = @func_3347() /* ty=Tensor[(33), bool] */;
  %474 = %472.1;
  (%473, %474, %var_5317)
}

def @func_8084(%var_8077: Tensor[(33), float64]) -> (Tensor[(528), float32], Tensor[(1680), float32], Tensor[(33), int16], Tensor[(33), float64]) {
  %475 = @func_5363() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %476 = cast(%var_8077, dtype="float64") /* ty=Tensor[(33), float64] */;
  %477 = reshape(%476, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %478 = @func_1816(%477) /* ty=(Tensor[(33), int16],) */;
  %479 = %475.0;
  %480 = @func_3583() /* ty=Tensor[(1680), float32] */;
  %481 = %478.0;
  (%479, %480, %481, %var_8077)
}

def @func_8127() -> (Tensor[(528), float32],) {
  %482 = @func_3111() /* ty=(Tensor[(528), float32],) */;
  %483 = %482.0;
  (%483,)
}

def @func_2569() -> (Tensor[(1680), float32],) {
  %484 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
  %485 = %484.2;
  (%485,)
}

def @func_2131() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  %486 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %487 = %486.0;
  %488 = @func_1359() /* ty=Tensor[(528), float32] */;
  (%487, %488)
}

def @func_7075() -> (Tensor[(10, 14, 12), uint16],) {
  %489 = @func_4236() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(528), float32]) */;
  %490 = %489.0;
  %491 = @func_4121() /* ty=Tensor[(1680), float32] */;
  %492 = cast(%491, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %493 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%490, dtype="uint16") /* ty=Tensor[(10, 14, 12), uint16] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %496 = add(%494, %495) /* ty=Tensor[(10, 14, 12), uint16] */;
  (%496,)
}

def @func_2483() -> Tensor[(11, 16, 3), float32] {
  %497 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %497.0
}

def @func_5363() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %498 = @func_4335() /* ty=(Tensor[(33), float64],) */;
  %499 = @func_669() /* ty=Tensor[(528), float32] */;
  %500 = %498.0;
  (%499, %500)
}

def @func_4567() -> (Tensor[(528), float32], Tensor[(33), bool]) {
  %501 = @func_3111() /* ty=(Tensor[(528), float32],) */;
  %502 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %503 = %501.0;
  %504 = %502.3;
  (%503, %504)
}

def @func_6732() -> (Tensor[(528), float32],) {
  %505 = @func_5863() /* ty=Tensor[(528), float32] */;
  (%505,)
}

def @main() -> (Tensor[(33), int8],) {
  %506 = @func_4649() /* ty=(Tensor[(10080), float32], Tensor[(33), bool]) */;
  %507 = %506.1;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(33), float32] */;
  %509 = log(%508) /* ty=Tensor[(33), float32] */;
  %510 = cast(%507, dtype="int8") /* ty=Tensor[(33), int8] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(1), int32] */;
  %512 = cast(%509, dtype="int8") /* ty=Tensor[(33), int8] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?), int8] */;
  %514 = bitwise_xor(%512, %513) /* ty=Tensor[(33), int8] */;
  (%514,)
}

def @func_2459() -> (Tensor[(528), float32],) {
  %515 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %516 = %515.0;
  (%516,)
}

def @func_2667(%var_2662: Tensor[(5, 11, 15), uint8]) -> Tensor[(5, 11, 15), uint8] {
  %517 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 11, 15), uint8] */, dtype="uint8") /* ty=Tensor[(5, 11, 15), uint8] */;
  %518 = shape_of(%var_2662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%var_2662, dtype="uint8") /* ty=Tensor[(5, 11, 15), uint8] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  maximum(%519, %520) /* ty=Tensor[(5, 11, 15), uint8] */
}

def @func_4829() -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(12, 16, 11), float32], Tensor[(220), float32], Tensor[(2112), float64]) {
  %521 = @func_4106() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) */;
  %522 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), uint16] */, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
  %523 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), uint16] */, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
  %524 = cast(meta[relay.Constant][25] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
  %525 = reshape(%522, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), uint16] */;
  %526 = reshape(%523, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), uint16] */;
  %527 = reshape(%524, newshape=[220]) /* ty=Tensor[(220), float32] */;
  %528 = @func_3242(%525, %526, %527) /* ty=(Tensor[(12, 16, 11), bool], Tensor[(33), int16], Tensor[(11, 3), float64], Tensor[(33), float64], Tensor[(220), float32], Tensor[(12, 16, 11), float32], Tensor[(11, 16, 3), float64], Tensor[(8, 66), float32]) */;
  %529 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), uint16] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %530 = @func_3323() /* ty=Tensor[(528), float32] */;
  %531 = %521.1;
  %532 = %528.5;
  %533 = rsqrt(%529) /* ty=Tensor[(2112), float64] */;
  (%530, %531, %532, meta[relay.Constant][25] /* ty=Tensor[(220), float32] */, %533)
}

def @func_5195(%var_5182: Tensor[(8, 6, 10), uint64], %var_5183: Tensor[(8, 6, 10), uint64]) -> (Tensor[(8, 6, 10), uint64],) {
  %534 = cast(%var_5183, dtype="uint64") /* ty=Tensor[(8, 6, 10), uint64] */;
  %535 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%var_5182, dtype="uint64") /* ty=Tensor[(8, 6, 10), uint64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %538 = minimum(%536, %537) /* ty=Tensor[(8, 6, 10), uint64] */;
  (%538,)
}

def @func_2075(%var_2057: Tensor[(7, 7, 2), float32], %var_2061: Tensor[(33), float32], %var_2070: Tensor[(12, 220), float64]) -> (Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) {
  %539 = cast(%var_2057, dtype="float32") /* ty=Tensor[(7, 7, 2), float32] */;
  %540 = cast(%var_2061, dtype="float32") /* ty=Tensor[(33), float32] */;
  %541 = cast(meta[relay.Constant][26] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %542 = reshape(%540, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
  %543 = reshape(%541, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %544 = @func_458(%542, %543) /* ty=(Tensor[(11, 16, 3), float32],) */;
  %545 = cast(%var_2070, dtype="float64") /* ty=Tensor[(12, 220), float64] */;
  %546 = cast(meta[relay.Constant][27] /* ty=Tensor[(325, 1), uint8] */, dtype="uint8") /* ty=Tensor[(325, 1), uint8] */;
  %547 = reshape(%545, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %548 = reshape(%546, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %549 = @func_1645(%547, %548) /* ty=(Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) */;
  %550 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %551 = acosh(%539) /* ty=Tensor[(7, 7, 2), float32] */;
  %552 = %544.0;
  %553 = %549.0;
  %554 = %550.0;
  (%551, %552, %var_2061, meta[relay.Constant][26] /* ty=Tensor[(528), float32] */, %553, %var_2070, meta[relay.Constant][27] /* ty=Tensor[(325, 1), uint8] */, %554)
}

def @func_6709() -> Tensor[(528), float32] {
  %555 = @func_2459() /* ty=(Tensor[(528), float32],) */;
  %555.0
}

def @func_1912() -> Tensor[(528), float32] {
  @func_752() /* ty=Tensor[(528), float32] */
}

def @func_4398() -> (Tensor[(528), float32], Tensor[(33), bool]) {
  %556 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %557 = @func_3380() /* ty=(Tensor[(528), float32], Tensor[(6, 1680), bool], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), bool]) */;
  %558 = %556.2;
  %559 = %557.4;
  (%558, %559)
}

def @func_6157() -> (Tensor[(33), float64],) {
  %560 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %561 = %560.2;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(33), float64] */;
  %563 = tan(%562) /* ty=Tensor[(33), float64] */;
  (%563,)
}

def @func_1052() -> (Tensor[(33), float32], Tensor[(33), float64]) {
  %564 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(33), float32] */;
  %567 = rsqrt(%566) /* ty=Tensor[(33), float32] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(33), float32] */;
  %569 = cast(%567, dtype="float64") /* ty=Tensor[(33), float64] */;
  %570 = log10(%568) /* ty=Tensor[(33), float32] */;
  %571 = sin(%569) /* ty=Tensor[(33), float64] */;
  (%570, %571)
}

def @func_8244() -> Tensor[(2640), float64] {
  %572 = @func_8224() /* ty=Tensor[(2640), float64] */;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(2640), float64] */;
  tan(%573) /* ty=Tensor[(2640), float64] */
}

def @func_1645(%var_1601: Tensor[(2640), float64], %var_1615: Tensor[(325), uint8]) -> (Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) {
  %574 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %575 = %574.0;
  %576 = cast(meta[relay.Constant][28] /* ty=Tensor[(33), float64] */, dtype="int8") /* ty=Tensor[(33), int8] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(1), int32] */;
  %578 = cast(%575, dtype="int8") /* ty=Tensor[(33), int8] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?), int8] */;
  %580 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %581 = cast(%var_1601, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %582 = reshape(%581, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %583 = @func_1157(%582) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) */;
  %584 = cast(%var_1615, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %585 = reshape(%584, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %586 = @func_1113(%585) /* ty=(Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
  %587 = %580.1;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
  %589 = reshape(%588, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %590 = @func_1237(%589) /* ty=(Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) */;
  %591 = maximum(%578, %579) /* ty=Tensor[(33), int8] */;
  %592 = %583.0;
  %593 = %586.0;
  %594 = %590.2;
  (%591, %587, %592, %var_1601, %593, %var_1615, %594)
}

def @func_1880(%var_1849: Tensor[(2640), float64]) -> (Tensor[(528), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(325), uint8]) {
  %595 = cast(%var_1849, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %596 = cast(meta[relay.Constant][29] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %597 = reshape(%595, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %598 = reshape(%596, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %599 = @func_1645(%597, %598) /* ty=(Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) */;
  %600 = @func_1359() /* ty=Tensor[(528), float32] */;
  %601 = %599.5;
  (%600, %601, %var_1849, meta[relay.Constant][29] /* ty=Tensor[(325), uint8] */)
}

def @func_3583() -> Tensor[(1680), float32] {
  %602 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %602.2
}

def @func_782() -> (Tensor[(33), float64],) {
  %603 = @func_542() /* ty=Tensor[(33), float64] */;
  (%603,)
}

def @func_6000() -> (Tensor[(10, 14, 12), float64],) {
  %604 = @func_2888() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) */;
  %605 = %604.2;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %607 = tan(%606) /* ty=Tensor[(10, 14, 12), float64] */;
  (%607,)
}

def @func_1270() -> (Tensor[(528), float32],) {
  %608 = @func_752() /* ty=Tensor[(528), float32] */;
  (%608,)
}

def @func_1113(%var_1111: Tensor[(325), uint8]) -> (Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) {
  %609 = @func_542() /* ty=Tensor[(33), float64] */;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(33), float64] */;
  %611 = @func_1052() /* ty=(Tensor[(33), float32], Tensor[(33), float64]) */;
  %612 = cast(%var_1111, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %613 = cast(%var_1111, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %614 = reshape(%612, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %615 = reshape(%613, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %616 = @func_774(%614, %615) /* ty=(Tensor[(5, 13, 5), bool],) */;
  %617 = sigmoid(%610) /* ty=Tensor[(33), float64] */;
  %618 = %611.0;
  %619 = %616.0;
  (%617, %618, %619, %var_1111)
}

def @func_4627() -> Tensor[(33), bool] {
  @func_3565() /* ty=Tensor[(33), bool] */
}

def @func_1999() -> (Tensor[(528), float32],) {
  %620 = @func_1912() /* ty=Tensor[(528), float32] */;
  (%620,)
}

def @func_7592() -> Tensor[(528), float32] {
  @func_5692() /* ty=Tensor[(528), float32] */
}

def @func_1237(%var_1219: Tensor[(11, 16, 3), float32]) -> (Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) {
  %621 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %622 = %621.1;
  %623 = cast(%var_1219, dtype="float64") /* ty=Tensor[(11, 16, 3), float64] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="float64") /* ty=Tensor[(11, 16, 3), float64] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %627 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %628 = maximum(%625, %626) /* ty=Tensor[(11, 16, 3), float64] */;
  %629 = @func_669() /* ty=Tensor[(528), float32] */;
  %630 = %627.2;
  (%628, %629, %630)
}

def @func_6538(%var_6515: Tensor[(3, 14, 5), float32]) -> (Tensor[(3, 14, 5), uint16], Tensor[(3, 14, 5), uint64]) {
  %631 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
  %632 = %631.3;
  %633 = cast(%632, dtype="uint16") /* ty=Tensor[(3, ?, 5), uint16] */;
  %634 = cast(%var_6515, dtype="uint16") /* ty=Tensor[(3, 14, 5), uint16] */;
  %635 = cast(%632, dtype="uint64") /* ty=Tensor[(3, ?, 5), uint64] */;
  %636 = cast(%var_6515, dtype="uint64") /* ty=Tensor[(3, 14, 5), uint64] */;
  %637 = multiply(%633, %634) /* ty=Tensor[(3, 14, 5), uint16] */;
  %638 = logical_xor(%635, %636) /* ty=Tensor[(3, 14, 5), uint64] */;
  (%637, %638)
}

def @func_3323() -> Tensor[(528), float32] {
  @func_752() /* ty=Tensor[(528), float32] */
}

def @func_3024() -> (Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) {
  %639 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
  %640 = %639.2;
  %641 = cast(meta[relay.Constant][30] /* ty=Tensor[(33), float32] */, dtype="bool") /* ty=Tensor[(33), bool] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(1), int32] */;
  %643 = cast(%640, dtype="bool") /* ty=Tensor[(33), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?), bool] */;
  %645 = less(%643, %644) /* ty=Tensor[(33), bool] */;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(33), float64] */;
  %647 = reshape(%646, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %648 = @func_1816(%647) /* ty=(Tensor[(33), int16],) */;
  %649 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %650 = cast(%640, dtype="bool") /* ty=Tensor[(33), bool] */;
  %651 = shape_of(%645, dtype="int32") /* ty=Tensor[(1), int32] */;
  %652 = cast(%645, dtype="bool") /* ty=Tensor[(33), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?), bool] */;
  %654 = @func_669() /* ty=Tensor[(528), float32] */;
  %655 = %648.0;
  %656 = %649.0;
  %657 = less_equal(%652, %653) /* ty=Tensor[(33), bool] */;
  (%654, %655, %656, %657)
}

def @func_3101() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  %658 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %659 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %660 = %658.1;
  %661 = %659.0;
  (%660, %661)
}

def @func_752() -> Tensor[(528), float32] {
  @func_669() /* ty=Tensor[(528), float32] */
}

def @func_8217() -> (Tensor[(33), float64], Tensor[(3, 14, 5), bool]) {
  %662 = @func_6321() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %663 = cast(meta[relay.Constant][31] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %664 = reshape(%663, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
  %665 = @func_6538(%664) /* ty=(Tensor[(3, 14, 5), uint16], Tensor[(3, 14, 5), uint64]) */;
  %666 = %665.1;
  %667 = cast(meta[relay.Constant][31] /* ty=Tensor[(210), float32] */, dtype="bool") /* ty=Tensor[(210), bool] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = %662.1;
  %672 = not_equal(%669, %670) /* ty=Tensor[(3, 14, 5), bool] */;
  (%671, %672)
}

def @func_4594() -> (Tensor[(528), float32],) {
  %673 = @func_2768() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) */;
  %674 = %673.2;
  (%674,)
}

def @func_4649() -> (Tensor[(10080), float32], Tensor[(33), bool]) {
  %675 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %676 = %675.0;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %678 = @func_4398() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
  %679 = asin(%677) /* ty=Tensor[(10080), float32] */;
  %680 = %678.1;
  (%679, %680)
}

def @func_1157(%var_1147: Tensor[(16, 15, 11), float64]) -> (Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) {
  %681 = cast(%var_1147, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %682 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 33), float64] */, dtype="float64") /* ty=Tensor[(1, 33), float64] */;
  %683 = reshape(%682, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %684 = sin(%681) /* ty=Tensor[(16, 15, 11), float64] */;
  %685 = @func_824(%683) /* ty=Tensor[(33), bool] */;
  (%684, %685, meta[relay.Constant][32] /* ty=Tensor[(1, 33), float64] */)
}

def @func_1949(%var_1917: Tensor[(4, 5, 11), float32]) -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(4, 5, 11), float64]) {
  %686 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %687 = cast(%var_1917, dtype="float32") /* ty=Tensor[(4, 5, 11), float32] */;
  %688 = sinh(%687) /* ty=Tensor[(4, 5, 11), float32] */;
  %689 = cast(%688, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
  %690 = @func_1704() /* ty=Tensor[(33), float64] */;
  %691 = %686.0;
  %692 = acos(%689) /* ty=Tensor[(4, 5, 11), float64] */;
  (%690, %691, %692)
}

def @func_4236() -> (Tensor[(10, 14, 12), float64], Tensor[(528), float32]) {
  %693 = @func_2888() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) */;
  %694 = @func_3195() /* ty=(Tensor[(528), float32],) */;
  %695 = %693.2;
  %696 = %694.0;
  (%695, %696)
}

def @func_3719() -> (Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) {
  %697 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %698 = cast(meta[relay.Constant][33] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %699 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 25), uint8] */, dtype="uint8") /* ty=Tensor[(13, 25), uint8] */;
  %700 = reshape(%698, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %701 = reshape(%699, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %702 = @func_1645(%700, %701) /* ty=(Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) */;
  %703 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %704 = @func_3184() /* ty=(Tensor[(33), float32], Tensor[(528), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(11, 16, 3), float32]) */;
  %705 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 25), uint8] */, dtype="float64") /* ty=Tensor[(13, 25), float64] */;
  %706 = asin(%705) /* ty=Tensor[(13, 25), float64] */;
  %707 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 25), uint8] */, dtype="float32") /* ty=Tensor[(13, 25), float32] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(2), int32] */;
  %709 = cast(%706, dtype="float32") /* ty=Tensor[(13, 25), float32] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %711 = %697.0;
  %712 = %702.6;
  %713 = %703.0;
  %714 = %704.3;
  %715 = @func_1074() /* ty=Tensor[(528), float32] */;
  %716 = maximum(%709, %710) /* ty=Tensor[(13, 25), float32] */;
  %717 = @func_3347() /* ty=Tensor[(33), bool] */;
  (%711, %712, meta[relay.Constant][33] /* ty=Tensor[(2640), float64] */, %713, %714, %715, %716, %717)
}

def @func_8313(%var_8257: Tensor[(15, 6, 3), float64], %var_8267: Tensor[(1, 325), uint8]) -> (Tensor[(15, 6, 3), float32], Tensor[(11, 16, 3), float32], Tensor[(1680), float32], Tensor[(?, 325), bool], Tensor[(33), bool], Tensor[(33), bool]) {
  %718 = cast(%var_8257, dtype="float64") /* ty=Tensor[(15, 6, 3), float64] */;
  %719 = cosh(%718) /* ty=Tensor[(15, 6, 3), float64] */;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %721 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %722 = @func_8178() /* ty=(Tensor[(1680), float32],) */;
  %723 = cast(%var_8267, dtype="uint8") /* ty=Tensor[(1, 325), uint8] */;
  %724 = cast(%var_8267, dtype="uint8") /* ty=Tensor[(1, 325), uint8] */;
  %725 = reshape(%723, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %726 = reshape(%724, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %727 = @func_774(%725, %726) /* ty=(Tensor[(5, 13, 5), bool],) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %730 = shape_of(%var_8267, dtype="int32") /* ty=Tensor[(2), int32] */;
  %731 = cast(%var_8267, dtype="bool") /* ty=Tensor[(1, 325), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %733 = @func_7666() /* ty=(Tensor[(33), bool],) */;
  %734 = @func_4567() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
  %735 = exp(%720) /* ty=Tensor[(15, 6, 3), float32] */;
  %736 = %721.0;
  %737 = %722.0;
  %738 = not_equal(%731, %732) /* ty=Tensor[(?, 325), bool] */;
  %739 = %733.0;
  %740 = %734.1;
  (%735, %736, %737, %738, %739, %740)
}

def @func_3184() -> (Tensor[(33), float32], Tensor[(528), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(11, 16, 3), float32]) {
  %741 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %742 = @func_3111() /* ty=(Tensor[(528), float32],) */;
  %743 = cast(meta[relay.Constant][35] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %744 = reshape(%743, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
  %745 = @func_898(%744) /* ty=(Tensor[(10, 14, 12), float64],) */;
  %746 = @func_1541() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) */;
  %747 = %741.0;
  %748 = %742.0;
  %749 = %745.0;
  %750 = %746.0;
  (%747, %748, %749, meta[relay.Constant][35] /* ty=Tensor[(1680), float32] */, %750)
}

def @func_2373(%var_2367: Tensor[(1, 8, 5), float64], %var_2368: Tensor[(9, 8, 5), float64]) -> (Tensor[(9, 8, 5), float64],) {
  %751 = cast(%var_2367, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
  %752 = cast(%var_2368, dtype="float64") /* ty=Tensor[(9, 8, 5), float64] */;
  %753 = divide(%751, %752) /* ty=Tensor[(9, 8, 5), float64] */;
  (%753,)
}

def @func_1359() -> Tensor[(528), float32] {
  @func_752() /* ty=Tensor[(528), float32] */
}

def @func_4106() -> (Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) {
  %754 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %755 = %754.2;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %757 = reshape(%756, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
  %758 = @func_898(%757) /* ty=(Tensor[(10, 14, 12), float64],) */;
  %759 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %760 = %759.0;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(33), float64] */;
  %762 = reshape(%761, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %763 = @func_3861(%762) /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(1680), float32]) */;
  %764 = %763.2;
  %765 = cast(%764, dtype="uint32") /* ty=Tensor[(1680), uint32] */;
  %766 = shape_of(%755, dtype="int32") /* ty=Tensor[(1), int32] */;
  %767 = cast(%755, dtype="uint32") /* ty=Tensor[(1680), uint32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %769 = %758.0;
  %770 = left_shift(%767, %768) /* ty=Tensor[(1680), uint32] */;
  (%769, %760, %770)
}

def @func_2768() -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) {
  %771 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %772 = cast(meta[relay.Constant][36] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %773 = reshape(%772, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %774 = @func_1157(%773) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) */;
  %775 = @func_1912() /* ty=Tensor[(528), float32] */;
  %776 = @func_1704() /* ty=Tensor[(33), float64] */;
  %777 = @func_1074() /* ty=Tensor[(528), float32] */;
  %778 = %771.1;
  %779 = %774.0;
  (%775, %776, %777, %778, %779, meta[relay.Constant][36] /* ty=Tensor[(2640), float64] */)
}

def @func_5692() -> Tensor[(528), float32] {
  @func_4494() /* ty=Tensor[(528), float32] */
}

def @func_3638() -> (Tensor[(1680), float32], Tensor[(528), float32]) {
  %780 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %781 = @func_3583() /* ty=Tensor[(1680), float32] */;
  %782 = %780.0;
  (%781, %782)
}

def @func_3801(%var_3796: Tensor[(441, 1), uint64], %var_3797: Tensor[(1680), float32]) -> (Tensor[(6, 1680), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(2640), float64], Tensor[(10, 14, 12), float64], Tensor[(441, 1), uint64], Tensor[(1680), float32]) {
  %783 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %784 = cast(meta[relay.Constant][37] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %785 = reshape(%784, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %786 = @func_1880(%785) /* ty=(Tensor[(528), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(325), uint8]) */;
  %787 = cast(meta[relay.Constant][37] /* ty=Tensor[(2640), float64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %788 = rsqrt(%787) /* ty=Tensor[(2640), float32] */;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %790 = cast(%788, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %791 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(2640), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %792 = cast(meta[relay.Constant][37] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?), float64] */;
  %794 = cast(%var_3796, dtype="uint64") /* ty=Tensor[(441, 1), uint64] */;
  %795 = cast(%var_3796, dtype="uint64") /* ty=Tensor[(441, 1), uint64] */;
  %796 = cast(%var_3797, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %797 = reshape(%794, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
  %798 = reshape(%795, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
  %799 = reshape(%796, newshape=[840, 2]) /* ty=Tensor[(840, 2), float32] */;
  %800 = @func_1330(%797, %798, %799) /* ty=(Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) */;
  %801 = %783.1;
  %802 = %786.1;
  %803 = cos(%789) /* ty=Tensor[(2640), float64] */;
  %804 = maximum(%792, %793) /* ty=Tensor[(2640), float64] */;
  %805 = %800.1;
  (%801, %802, %803, %804, %805, %var_3796, %var_3797)
}

def @func_6887() -> (Tensor[(11, 16, 3), float32],) {
  %806 = @func_6823() /* ty=Tensor[(11, 16, 3), float32] */;
  (%806,)
}

def @func_602() -> (Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  %807 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
  %808 = %807.2;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(33), float32] */;
  %810 = cast(meta[relay.Constant][38] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %811 = reshape(%809, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
  %812 = reshape(%810, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %813 = @func_458(%811, %812) /* ty=(Tensor[(11, 16, 3), float32],) */;
  %814 = %813.0;
  (%808, %814, meta[relay.Constant][38] /* ty=Tensor[(528), float32] */)
}

def @func_898(%var_879: Tensor[(10, 14, 12), float32]) -> (Tensor[(10, 14, 12), float64],) {
  %815 = cast(%var_879, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %816 = sigmoid(%815) /* ty=Tensor[(10, 14, 12), float32] */;
  %817 = cast(%816, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %818 = log2(%817) /* ty=Tensor[(10, 14, 12), float64] */;
  (%818,)
}

def @func_6673() -> (Tensor[(11, 16, 3), float32],) {
  %819 = @func_6406() /* ty=(Tensor[(33), float64], Tensor[(11, 16, 3), float32]) */;
  %820 = %819.1;
  (%820,)
}

def @func_5831() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %821 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %822 = @func_5028() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(33), float64], Tensor[(33), bool], Tensor[(11, 16, 3), float32]) */;
  %823 = %821.0;
  %824 = %822.2;
  (%823, %824)
}

def @func_774(%var_768: Tensor[(5, 13, 5), uint8], %var_769: Tensor[(5, 13, 5), uint8]) -> (Tensor[(5, 13, 5), bool],) {
  %825 = cast(%var_769, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %826 = shape_of(%var_768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%var_768, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %829 = less(%827, %828) /* ty=Tensor[(5, 13, 5), bool] */;
  (%829,)
}

def @func_7303(%var_7225: Tensor[(7, 7, 2), float32]) -> (Tensor[(33), int16], Tensor[(2640), float64], Tensor[(?, 98), uint8], Tensor[(?, 98), bool]) {
  %830 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %831 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, dtype="float32") /* ty=Tensor[(1, 98), float32] */;
  %832 = %830.1;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(33), float32] */;
  %834 = cast(meta[relay.Constant][39] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %835 = reshape(%831, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), float32] */;
  %836 = reshape(%833, newshape=[33]) /* ty=Tensor[(33), float32] */;
  %837 = reshape(%834, newshape=[12, 220]) /* ty=Tensor[(12, 220), float64] */;
  %838 = @func_2075(%835, %836, %837) /* ty=(Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) */;
  %839 = %838.0;
  %840 = cast(%var_7225, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
  %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%839, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %844 = less(%842, %843) /* ty=Tensor[(7, 7, 2), bool] */;
  %845 = cast(%844, dtype="uint8") /* ty=Tensor[(7, 7, 2), uint8] */;
  %846 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %847 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, dtype="uint8") /* ty=Tensor[(1, 98), uint8] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %849 = cast(%844, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
  %850 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %851 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, dtype="bool") /* ty=Tensor[(1, 98), bool] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %853 = bitwise_xor(%847, %848) /* ty=Tensor[(?, 98), uint8] */;
  %854 = logical_and(%851, %852) /* ty=Tensor[(?, 98), bool] */;
  (%832, meta[relay.Constant][39] /* ty=Tensor[(2640), float64] */, %853, %854)
}

def @func_4072() -> (Tensor[(528), uint8], Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(33), uint16]) {
  %855 = @func_1074() /* ty=Tensor[(528), float32] */;
  %856 = cast(meta[relay.Constant][41] /* ty=Tensor[(528), float32] */, dtype="uint8") /* ty=Tensor[(528), uint8] */;
  %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(1), int32] */;
  %858 = cast(%855, dtype="uint8") /* ty=Tensor[(528), uint8] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %860 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %861 = cast(meta[relay.Constant][42] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %862 = cast(meta[relay.Constant][42] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %863 = reshape(%861, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %864 = reshape(%862, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %865 = @func_774(%863, %864) /* ty=(Tensor[(5, 13, 5), bool],) */;
  %866 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
  %867 = %866.0;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(33), float64] */;
  %869 = acos(%868) /* ty=Tensor[(33), float64] */;
  %870 = cast(%867, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(1), int32] */;
  %872 = cast(%869, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %874 = multiply(%858, %859) /* ty=Tensor[(528), uint8] */;
  %875 = %860.1;
  %876 = %865.0;
  %877 = left_shift(%872, %873) /* ty=Tensor[(33), uint16] */;
  (%874, %875, %876, meta[relay.Constant][42] /* ty=Tensor[(325), uint8] */, %877)
}

def @func_6216() -> (Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64]) {
  %878 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %879 = cast(meta[relay.Constant][43] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %880 = reshape(%879, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %881 = %878.1;
  %882 = @func_824(%880) /* ty=Tensor[(33), bool] */;
  (%881, %882, meta[relay.Constant][43] /* ty=Tensor[(33), float64] */)
}

def @func_4546() -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(33), bool], Tensor[(2640), float64]) {
  %883 = @func_1270() /* ty=(Tensor[(528), float32],) */;
  %884 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
  %885 = cast(meta[relay.Constant][44] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %886 = reshape(%885, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %887 = @func_1157(%886) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) */;
  %888 = %883.0;
  %889 = %884.2;
  %890 = %887.1;
  (%888, %889, %890, meta[relay.Constant][44] /* ty=Tensor[(2640), float64] */)
}

def @func_7138() -> (Tensor[(64), float32],) {
  %891 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
  %892 = %891.2;
  (%892,)
}

def @func_427(%var_420: Tensor[(4, 8, 2), float32], %var_421: Tensor[(4, 8, 2), float32]) -> Tensor[(4, 8, 2), bool] {
  %893 = cast(%var_421, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %894 = shape_of(%var_420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%var_420, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%895, %896) /* ty=Tensor[(4, 8, 2), bool] */
}

def @func_8566() -> Tensor[(528), float32] {
  %897 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %897.0
}

def @func_2277() -> (Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) {
  %898 = cast(meta[relay.Constant][45] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %899 = reshape(%898, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
  %900 = @func_898(%899) /* ty=(Tensor[(10, 14, 12), float64],) */;
  %901 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %902 = @func_1704() /* ty=Tensor[(33), float64] */;
  %903 = %900.0;
  %904 = %901.0;
  (%902, %903, meta[relay.Constant][45] /* ty=Tensor[(1680), float32] */, %904)
}

def @func_7666() -> (Tensor[(33), bool],) {
  %905 = @func_4627() /* ty=Tensor[(33), bool] */;
  (%905,)
}

def @func_2556() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %906 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %907 = %906.1;
  %908 = @func_1704() /* ty=Tensor[(33), float64] */;
  (%907, %908)
}

def @func_4494() -> Tensor[(528), float32] {
  %909 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %909.0
}

def @func_8341() -> (Tensor[(7, 16, 9), float32], Tensor[(16, 7, 3), uint8], Tensor[(168, 2), uint8]) {
  %910 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 16, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 9), float32] */;
  %911 = cast(meta[relay.Constant][47] /* ty=Tensor[(168, 2), uint8] */, dtype="uint8") /* ty=Tensor[(168, 2), uint8] */;
  %912 = cast(meta[relay.Constant][47] /* ty=Tensor[(168, 2), uint8] */, dtype="uint8") /* ty=Tensor[(168, 2), uint8] */;
  %913 = reshape(%911, newshape=[16, 7, 3]) /* ty=Tensor[(16, 7, 3), uint8] */;
  %914 = reshape(%912, newshape=[16, 7, 3]) /* ty=Tensor[(16, 7, 3), uint8] */;
  %915 = @func_3965(%913, %914) /* ty=(Tensor[(16, 7, 3), uint8], Tensor[(16, 7, 3), float64]) */;
  %916 = sigmoid(%910) /* ty=Tensor[(7, 16, 9), float32] */;
  %917 = %915.0;
  (%916, %917, meta[relay.Constant][47] /* ty=Tensor[(168, 2), uint8] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5832() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %4 = fn () -> (Tensor[(528), float32], Tensor[(33), float64]) {
    %0 = @func_1419() /* ty=(Tensor[(528), float32],) */;
    %1 = @func_5028() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(33), float64], Tensor[(33), bool], Tensor[(11, 16, 3), float32]) */;
    %2 = %0.0;
    %3 = %1.2;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */
}

def @func_7921() -> (Tensor[(11, 16, 3), float32],) {
  @func_7919() /* ty=(Tensor[(11, 16, 3), float32],) */
}

def @func_4336() -> (Tensor[(33), float64],) {
  %6 = fn () -> (Tensor[(33), float64],) {
    %5 = @func_542() /* ty=Tensor[(33), float64] */;
    (%5,)
  };
  %6() /* ty=(Tensor[(33), float64],) */
}

def @func_6159() -> (Tensor[(33), float64],) {
  @func_6157() /* ty=(Tensor[(33), float64],) */
}

def @func_8218() -> (Tensor[(33), float64], Tensor[(3, 14, 5), bool]) {
  %18 = fn () -> (Tensor[(33), float64], Tensor[(3, 14, 5), bool]) {
    %7 = @func_6321() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %9 = reshape(%8, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), float32] */;
    %10 = @func_6538(%9) /* ty=(Tensor[(3, 14, 5), uint16], Tensor[(3, 14, 5), uint64]) */;
    %11 = %10.1;
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(210), float32] */, dtype="bool") /* ty=Tensor[(210), bool] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%11, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %16 = %7.1;
    %17 = not_equal(%14, %15) /* ty=Tensor[(3, 14, 5), bool] */;
    (%16, %17)
  };
  %18() /* ty=(Tensor[(33), float64], Tensor[(3, 14, 5), bool]) */
}

def @func_8530() -> (Tensor[(33), float64],) {
  @func_8528() /* ty=(Tensor[(33), float64],) */
}

def @func_3336(%var_3325: Tensor[(8, 12, 16), float32], %var_3329: Tensor[(3, 60), float32]) -> (Tensor[(8, 12, 16), float32], Tensor[(3, 10, 6), float32], Tensor[(3, 60), float32]) {
  %19 = cast(%var_3325, dtype="float32") /* ty=Tensor[(8, 12, 16), float32] */;
  %20 = cast(%var_3329, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %21 = reshape(%20, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %22 = sinh(%19) /* ty=Tensor[(8, 12, 16), float32] */;
  %23 = @func_1206(%21) /* ty=Tensor[(3, 10, 6), float32] */;
  (%22, %23, %var_3329)
}

def @func_670() -> Tensor[(528), float32] {
  %25 = fn () -> Tensor[(528), float32] {
    %24 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %24.2
  };
  %25() /* ty=Tensor[(528), float32] */
}

def @func_5041() -> (Tensor[(10080), float32],) {
  %28 = fn () -> (Tensor[(10080), float32],) {
    %26 = @func_4188() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(1680), float32], Tensor[(7, 7, 9), uint64], Tensor[(10080), float32]) */;
    %27 = %26.4;
    (%27,)
  };
  %28() /* ty=(Tensor[(10080), float32],) */
}

def @func_6140() -> (Tensor[(528), float32], Tensor[(528), float32]) {
  %29 = @func_3101() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %30 = @func_4435() /* ty=(Tensor[(528), float32],) */;
  %31 = %29.1;
  %32 = %30.0;
  (%31, %32)
}

def @func_5030() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(33), float64], Tensor[(33), bool], Tensor[(11, 16, 3), float32]) {
  @func_5028() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(33), float64], Tensor[(33), bool], Tensor[(11, 16, 3), float32]) */
}

def @func_1704() -> Tensor[(33), float64] {
  %33 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %33.0
}

def @func_4495() -> Tensor[(528), float32] {
  %35 = fn () -> Tensor[(528), float32] {
    %34 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
    %34.0
  };
  %35() /* ty=Tensor[(528), float32] */
}

def @func_5941(%var_5939: Tensor[(15), float32]) -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(15), float32], Tensor[(33), bool], Tensor[(5, 11, 15), uint8], Tensor[(825), uint8], Tensor[(528), float32], Tensor[(528), float32], Tensor[(10080), uint32]) {
  @func_5938(%var_5939) /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(15), float32], Tensor[(33), bool], Tensor[(5, 11, 15), uint8], Tensor[(825), uint8], Tensor[(528), float32], Tensor[(528), float32], Tensor[(10080), uint32]) */
}

def @func_604() -> (Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */
}

def @func_8561() -> Tensor[(528), float32] {
  %37 = fn () -> Tensor[(528), float32] {
    %36 = @func_6732() /* ty=(Tensor[(528), float32],) */;
    %36.0
  };
  %37() /* ty=Tensor[(528), float32] */
}

def @func_4651() -> (Tensor[(10080), float32], Tensor[(33), bool]) {
  @func_4649() /* ty=(Tensor[(10080), float32], Tensor[(33), bool]) */
}

def @func_3719() -> (Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) {
  %38 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 25), uint8] */, dtype="uint8") /* ty=Tensor[(13, 25), uint8] */;
  %41 = reshape(%39, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %42 = reshape(%40, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %43 = @func_1645(%41, %42) /* ty=(Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) */;
  %44 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %45 = @func_3184() /* ty=(Tensor[(33), float32], Tensor[(528), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(11, 16, 3), float32]) */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 25), uint8] */, dtype="float64") /* ty=Tensor[(13, 25), float64] */;
  %47 = asin(%46) /* ty=Tensor[(13, 25), float64] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 25), uint8] */, dtype="float32") /* ty=Tensor[(13, 25), float32] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(2), int32] */;
  %50 = cast(%47, dtype="float32") /* ty=Tensor[(13, 25), float32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %52 = %38.0;
  %53 = %43.6;
  %54 = %44.0;
  %55 = %45.3;
  %56 = @func_1074() /* ty=Tensor[(528), float32] */;
  %57 = maximum(%50, %51) /* ty=Tensor[(13, 25), float32] */;
  %58 = @func_3347() /* ty=Tensor[(33), bool] */;
  (%52, %53, meta[relay.Constant][1] /* ty=Tensor[(2640), float64] */, %54, %55, %56, %57, %58)
}

def @func_1115(%var_1114: Tensor[(325), uint8]) -> (Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) {
  %70 = fn (%var_1111: Tensor[(325), uint8]) -> (Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) {
    %59 = @func_542() /* ty=Tensor[(33), float64] */;
    %60 = cast(%59, dtype="float64") /* ty=Tensor[(33), float64] */;
    %61 = @func_1052() /* ty=(Tensor[(33), float32], Tensor[(33), float64]) */;
    %62 = cast(%var_1111, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %63 = cast(%var_1111, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %64 = reshape(%62, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %65 = reshape(%63, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %66 = @func_774(%64, %65) /* ty=(Tensor[(5, 13, 5), bool],) */;
    %67 = sigmoid(%60) /* ty=Tensor[(33), float64] */;
    %68 = %61.0;
    %69 = %66.0;
    (%67, %68, %69, %var_1111)
  };
  %70(%var_1114) /* ty=(Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */
}

def @func_2277() -> (Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) {
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %72 = reshape(%71, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
  %73 = @func_898(%72) /* ty=(Tensor[(10, 14, 12), float64],) */;
  %74 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %75 = @func_1704() /* ty=Tensor[(33), float64] */;
  %76 = %73.0;
  %77 = %74.0;
  (%75, %76, meta[relay.Constant][3] /* ty=Tensor[(1680), float32] */, %77)
}

def @func_7390() -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(528), float32]) {
  %83 = fn () -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(528), float32]) {
    %78 = @func_1999() /* ty=(Tensor[(528), float32],) */;
    %79 = @func_6802() /* ty=Tensor[(33), float64] */;
    %80 = @func_6823() /* ty=Tensor[(11, 16, 3), float32] */;
    %81 = @func_1359() /* ty=Tensor[(528), float32] */;
    %82 = %78.0;
    (%79, %80, %81, %82)
  };
  %83() /* ty=(Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(528), float32]) */
}

def @func_2900(%var_2898: Tensor[(4, 2, 15), int64]) -> Tensor[(4, 2, 15), bool] {
  @func_2897(%var_2898) /* ty=Tensor[(4, 2, 15), bool] */
}

def @func_504() -> (Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) {
  %99 = fn () -> (Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) {
    %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 8), float64] */;
    %85 = rsqrt(%84) /* ty=Tensor[(1, 8, 8), float64] */;
    %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 8, 8), float64] */;
    %87 = asinh(%86) /* ty=Tensor[(1, 8, 8), float64] */;
    %88 = cast(%87, dtype="int16") /* ty=Tensor[(1, 8, 8), int16] */;
    %89 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
    %90 = cast(%85, dtype="int16") /* ty=Tensor[(1, 8, 8), int16] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(33), float32] */, dtype="float32") /* ty=Tensor[(33), float32] */;
    %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
    %94 = reshape(%92, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
    %95 = reshape(%93, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
    %96 = @func_458(%94, %95) /* ty=(Tensor[(11, 16, 3), float32],) */;
    %97 = subtract(%90, %91) /* ty=Tensor[(?, 8, 8), int16] */;
    %98 = %96.0;
    (%97, %98, meta[relay.Constant][5] /* ty=Tensor[(33), float32] */, meta[relay.Constant][6] /* ty=Tensor[(528), float32] */)
  };
  %99() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */
}

def @func_4595() -> (Tensor[(528), float32],) {
  %102 = fn () -> (Tensor[(528), float32],) {
    %100 = @func_2768() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) */;
    %101 = %100.2;
    (%101,)
  };
  %102() /* ty=(Tensor[(528), float32],) */
}

def @func_2889() -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) {
  %111 = fn () -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) {
    %103 = @func_1999() /* ty=(Tensor[(528), float32],) */;
    %104 = @func_782() /* ty=(Tensor[(33), float64],) */;
    %105 = @func_1541() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) */;
    %106 = %105.1;
    %107 = cast(%106, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
    %108 = %103.0;
    %109 = %104.0;
    %110 = log(%107) /* ty=Tensor[(10, 14, 12), float64] */;
    (%108, %109, %110)
  };
  %111() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) */
}

def @func_5938(%var_5886: Tensor[(15), float32]) -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(15), float32], Tensor[(33), bool], Tensor[(5, 11, 15), uint8], Tensor[(825), uint8], Tensor[(528), float32], Tensor[(528), float32], Tensor[(10080), uint32]) {
  %112 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %113 = cast(%var_5886, dtype="float32") /* ty=Tensor[(15), float32] */;
  %114 = reshape(%113, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), float32] */;
  %115 = @func_4254(%114) /* ty=(Tensor[(3, ?, 5), float32], Tensor[(33), float64]) */;
  %116 = cast(meta[relay.Constant][7] /* ty=Tensor[(825), uint8] */, dtype="uint8") /* ty=Tensor[(825), uint8] */;
  %117 = reshape(%116, newshape=[5, 11, 15]) /* ty=Tensor[(5, 11, 15), uint8] */;
  %118 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %119 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %120 = %112.0;
  %121 = %115.1;
  %122 = @func_4627() /* ty=Tensor[(33), bool] */;
  %123 = @func_2667(%117) /* ty=Tensor[(5, 11, 15), uint8] */;
  %124 = %118.0;
  %125 = @func_1074() /* ty=Tensor[(528), float32] */;
  %126 = %119.0;
  (%120, %121, %var_5886, %122, %123, meta[relay.Constant][7] /* ty=Tensor[(825), uint8] */, %124, %125, %126)
}

def @func_4236() -> (Tensor[(10, 14, 12), float64], Tensor[(528), float32]) {
  %127 = @func_2888() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) */;
  %128 = @func_3195() /* ty=(Tensor[(528), float32],) */;
  %129 = %127.2;
  %130 = %128.0;
  (%129, %130)
}

def @func_6541(%var_6539: Tensor[(3, 14, 5), float32]) -> (Tensor[(3, 14, 5), uint16], Tensor[(3, 14, 5), uint64]) {
  @func_6538(%var_6539) /* ty=(Tensor[(3, 14, 5), uint16], Tensor[(3, 14, 5), uint64]) */
}

def @func_1334(%var_1331: Tensor[(7, 7, 9), uint64], %var_1332: Tensor[(7, 7, 9), uint64], %var_1333: Tensor[(840, 2), float32]) -> (Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) {
  %140 = fn (%var_1308: Tensor[(7, 7, 9), uint64], %var_1309: Tensor[(7, 7, 9), uint64], %var_1327: Tensor[(840, 2), float32]) -> (Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) {
    %131 = cast(%var_1309, dtype="uint64") /* ty=Tensor[(7, 7, 9), uint64] */;
    %132 = shape_of(%var_1308, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%var_1308, dtype="uint64") /* ty=Tensor[(7, 7, 9), uint64] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %135 = cast(%var_1327, dtype="float32") /* ty=Tensor[(840, 2), float32] */;
    %136 = reshape(%135, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
    %137 = @func_898(%136) /* ty=(Tensor[(10, 14, 12), float64],) */;
    %138 = bitwise_and(%133, %134) /* ty=Tensor[(7, 7, 9), uint64] */;
    %139 = %137.0;
    (%138, %139, %var_1327)
  };
  %140(%var_1331, %var_1332, %var_1333) /* ty=(Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) */
}

def @func_3324() -> Tensor[(528), float32] {
  %141 = fn () -> Tensor[(528), float32] {
    @func_752() /* ty=Tensor[(528), float32] */
  };
  %141() /* ty=Tensor[(528), float32] */
}

def @func_2492(%var_2491: Tensor[(11, 8, 4), float64]) -> Tensor[(11, 8, 4), float64] {
  %143 = fn (%var_2485: Tensor[(11, 8, 4), float64]) -> Tensor[(11, 8, 4), float64] {
    %142 = cast(%var_2485, dtype="float64") /* ty=Tensor[(11, 8, 4), float64] */;
    atan(%142) /* ty=Tensor[(11, 8, 4), float64] */
  };
  %143(%var_2491) /* ty=Tensor[(11, 8, 4), float64] */
}

def @func_4739() -> (Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) {
  %144 = cast(meta[relay.Constant][8] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %145 = cast(meta[relay.Constant][8] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %146 = reshape(%144, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %147 = reshape(%145, newshape=[4, 8, 2]) /* ty=Tensor[(4, 8, 2), float32] */;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %149 = reshape(%148, newshape=[3, 1, 5]) /* ty=Tensor[(3, 1, 5), float32] */;
  %150 = @func_4254(%149) /* ty=(Tensor[(3, ?, 5), float32], Tensor[(33), float64]) */;
  %151 = @func_2888() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) */;
  %152 = %151.1;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(33), float32] */;
  %154 = cos(%153) /* ty=Tensor[(33), float32] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(33), float32] */;
  %156 = sinh(%155) /* ty=Tensor[(33), float32] */;
  %157 = cast(%152, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(1), int32] */;
  %159 = cast(%156, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %161 = @func_4121() /* ty=Tensor[(1680), float32] */;
  %162 = @func_427(%146, %147) /* ty=Tensor[(4, 8, 2), bool] */;
  %163 = %150.0;
  %164 = right_shift(%159, %160) /* ty=Tensor[(33), uint16] */;
  (%161, %162, meta[relay.Constant][8] /* ty=Tensor[(64), float32] */, %163, meta[relay.Constant][9] /* ty=Tensor[(15), float32] */, %164)
}

def @func_8528() -> (Tensor[(33), float64],) {
  %165 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %166 = %165.1;
  (%166,)
}

def @func_7593() -> Tensor[(528), float32] {
  %167 = fn () -> Tensor[(528), float32] {
    @func_5692() /* ty=Tensor[(528), float32] */
  };
  %167() /* ty=Tensor[(528), float32] */
}

def @func_1420() -> (Tensor[(528), float32],) {
  %170 = fn () -> (Tensor[(528), float32],) {
    %168 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
    %169 = %168.0;
    (%169,)
  };
  %170() /* ty=(Tensor[(528), float32],) */
}

def @func_1883(%var_1881: Tensor[(2640), float64]) -> (Tensor[(528), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(325), uint8]) {
  @func_1880(%var_1881) /* ty=(Tensor[(528), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(325), uint8]) */
}

def @func_1951(%var_1950: Tensor[(4, 5, 11), float32]) -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(4, 5, 11), float64]) {
  %178 = fn (%var_1917: Tensor[(4, 5, 11), float32]) -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(4, 5, 11), float64]) {
    %171 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
    %172 = cast(%var_1917, dtype="float32") /* ty=Tensor[(4, 5, 11), float32] */;
    %173 = sinh(%172) /* ty=Tensor[(4, 5, 11), float32] */;
    %174 = cast(%173, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
    %175 = @func_1704() /* ty=Tensor[(33), float64] */;
    %176 = %171.0;
    %177 = acos(%174) /* ty=Tensor[(4, 5, 11), float64] */;
    (%175, %176, %177)
  };
  %178(%var_1950) /* ty=(Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(4, 5, 11), float64]) */
}

def @func_4107() -> (Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) {
  %196 = fn () -> (Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) {
    %179 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
    %180 = %179.2;
    %181 = cast(%180, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %182 = reshape(%181, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
    %183 = @func_898(%182) /* ty=(Tensor[(10, 14, 12), float64],) */;
    %184 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
    %185 = %184.0;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(33), float64] */;
    %187 = reshape(%186, newshape=[33]) /* ty=Tensor[(33), float64] */;
    %188 = @func_3861(%187) /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(1680), float32]) */;
    %189 = %188.2;
    %190 = cast(%189, dtype="uint32") /* ty=Tensor[(1680), uint32] */;
    %191 = shape_of(%180, dtype="int32") /* ty=Tensor[(1), int32] */;
    %192 = cast(%180, dtype="uint32") /* ty=Tensor[(1680), uint32] */;
    %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %194 = %183.0;
    %195 = left_shift(%192, %193) /* ty=Tensor[(1680), uint32] */;
    (%194, %185, %195)
  };
  %196() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) */
}

def @func_8086(%var_8085: Tensor[(33), float64]) -> (Tensor[(528), float32], Tensor[(1680), float32], Tensor[(33), int16], Tensor[(33), float64]) {
  %204 = fn (%var_8077: Tensor[(33), float64]) -> (Tensor[(528), float32], Tensor[(1680), float32], Tensor[(33), int16], Tensor[(33), float64]) {
    %197 = @func_5363() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
    %198 = cast(%var_8077, dtype="float64") /* ty=Tensor[(33), float64] */;
    %199 = reshape(%198, newshape=[33]) /* ty=Tensor[(33), float64] */;
    %200 = @func_1816(%199) /* ty=(Tensor[(33), int16],) */;
    %201 = %197.0;
    %202 = @func_3583() /* ty=Tensor[(1680), float32] */;
    %203 = %200.0;
    (%201, %202, %203, %var_8077)
  };
  %204(%var_8085) /* ty=(Tensor[(528), float32], Tensor[(1680), float32], Tensor[(33), int16], Tensor[(33), float64]) */
}

def @func_6322() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %209 = fn () -> (Tensor[(528), float32], Tensor[(33), float64]) {
    %205 = @func_4829() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(12, 16, 11), float32], Tensor[(220), float32], Tensor[(2112), float64]) */;
    %206 = @func_4335() /* ty=(Tensor[(33), float64],) */;
    %207 = %205.0;
    %208 = %206.0;
    (%207, %208)
  };
  %209() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */
}

def @func_6652() -> (Tensor[(528), float32],) {
  %211 = fn () -> (Tensor[(528), float32],) {
    %210 = @func_4494() /* ty=Tensor[(528), float32] */;
    (%210,)
  };
  %211() /* ty=(Tensor[(528), float32],) */
}

def @func_6930(%var_6928: Tensor[(2640), float64], %var_6929: Tensor[(120, 4), uint64]) -> (Tensor[(528), float32], Tensor[(2640), float64], Tensor[(8, 6, 10), uint64], Tensor[(120, 4), uint64]) {
  @func_6926(%var_6928, %var_6929) /* ty=(Tensor[(528), float32], Tensor[(2640), float64], Tensor[(8, 6, 10), uint64], Tensor[(120, 4), uint64]) */
}

def @func_7305(%var_7304: Tensor[(7, 7, 2), float32]) -> (Tensor[(33), int16], Tensor[(2640), float64], Tensor[(?, 98), uint8], Tensor[(?, 98), bool]) {
  %237 = fn (%var_7225: Tensor[(7, 7, 2), float32]) -> (Tensor[(33), int16], Tensor[(2640), float64], Tensor[(?, 98), uint8], Tensor[(?, 98), bool]) {
    %212 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
    %213 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 98), float32] */, dtype="float32") /* ty=Tensor[(1, 98), float32] */;
    %214 = %212.1;
    %215 = cast(%214, dtype="float32") /* ty=Tensor[(33), float32] */;
    %216 = cast(meta[relay.Constant][10] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
    %217 = reshape(%213, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), float32] */;
    %218 = reshape(%215, newshape=[33]) /* ty=Tensor[(33), float32] */;
    %219 = reshape(%216, newshape=[12, 220]) /* ty=Tensor[(12, 220), float64] */;
    %220 = @func_2075(%217, %218, %219) /* ty=(Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) */;
    %221 = %220.0;
    %222 = cast(%var_7225, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
    %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%221, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %226 = less(%224, %225) /* ty=Tensor[(7, 7, 2), bool] */;
    %227 = cast(%226, dtype="uint8") /* ty=Tensor[(7, 7, 2), uint8] */;
    %228 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(1, 98), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %229 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 98), float32] */, dtype="uint8") /* ty=Tensor[(1, 98), uint8] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %231 = cast(%226, dtype="bool") /* ty=Tensor[(7, 7, 2), bool] */;
    %232 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(1, 98), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %233 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 98), float32] */, dtype="bool") /* ty=Tensor[(1, 98), bool] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %235 = bitwise_xor(%229, %230) /* ty=Tensor[(?, 98), uint8] */;
    %236 = logical_and(%233, %234) /* ty=Tensor[(?, 98), bool] */;
    (%214, meta[relay.Constant][10] /* ty=Tensor[(2640), float64] */, %235, %236)
  };
  %237(%var_7304) /* ty=(Tensor[(33), int16], Tensor[(2640), float64], Tensor[(?, 98), uint8], Tensor[(?, 98), bool]) */
}

def @func_2769() -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) {
  %247 = fn () -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) {
    %238 = @func_2556() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
    %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
    %240 = reshape(%239, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
    %241 = @func_1157(%240) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) */;
    %242 = @func_1912() /* ty=Tensor[(528), float32] */;
    %243 = @func_1704() /* ty=Tensor[(33), float64] */;
    %244 = @func_1074() /* ty=Tensor[(528), float32] */;
    %245 = %238.1;
    %246 = %241.0;
    (%242, %243, %244, %245, %246, meta[relay.Constant][12] /* ty=Tensor[(2640), float64] */)
  };
  %247() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) */
}

def @func_1270() -> (Tensor[(528), float32],) {
  %248 = @func_752() /* ty=Tensor[(528), float32] */;
  (%248,)
}

def @func_3801(%var_3796: Tensor[(441, 1), uint64], %var_3797: Tensor[(1680), float32]) -> (Tensor[(6, 1680), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(2640), float64], Tensor[(10, 14, 12), float64], Tensor[(441, 1), uint64], Tensor[(1680), float32]) {
  %249 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %250 = cast(meta[relay.Constant][13] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %251 = reshape(%250, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %252 = @func_1880(%251) /* ty=(Tensor[(528), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(325), uint8]) */;
  %253 = cast(meta[relay.Constant][13] /* ty=Tensor[(2640), float64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %254 = rsqrt(%253) /* ty=Tensor[(2640), float32] */;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %256 = cast(%254, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %257 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2640), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %258 = cast(meta[relay.Constant][13] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?), float64] */;
  %260 = cast(%var_3796, dtype="uint64") /* ty=Tensor[(441, 1), uint64] */;
  %261 = cast(%var_3796, dtype="uint64") /* ty=Tensor[(441, 1), uint64] */;
  %262 = cast(%var_3797, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %263 = reshape(%260, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
  %264 = reshape(%261, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
  %265 = reshape(%262, newshape=[840, 2]) /* ty=Tensor[(840, 2), float32] */;
  %266 = @func_1330(%263, %264, %265) /* ty=(Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) */;
  %267 = %249.1;
  %268 = %252.1;
  %269 = cos(%255) /* ty=Tensor[(2640), float64] */;
  %270 = maximum(%258, %259) /* ty=Tensor[(2640), float64] */;
  %271 = %266.1;
  (%267, %268, %269, %270, %271, %var_3796, %var_3797)
}

def @func_2018(%var_2016: Tensor[(8, 10, 2), uint64], %var_2017: Tensor[(8, 10, 2), uint64]) -> Tensor[(8, 10, 2), uint64] {
  @func_2014(%var_2016, %var_2017) /* ty=Tensor[(8, 10, 2), uint64] */
}

def @func_6825() -> Tensor[(11, 16, 3), float32] {
  @func_6823() /* ty=Tensor[(11, 16, 3), float32] */
}

def @func_5768(%var_5764: Tensor[(9, 4, 8), uint32], %var_5765: Tensor[(98), float32], %var_5766: Tensor[(11, 3), float32], %var_5767: Tensor[(1320, 2), float64]) -> (Tensor[(9, 4, 8), uint32], Tensor[(9, 4, 8), bool], Tensor[(528), float32], Tensor[(12, 220), float64], Tensor[(98), float32], Tensor[(11, 3), float32], Tensor[(1320, 2), float64]) {
  %291 = fn (%var_5707: Tensor[(9, 4, 8), uint32], %var_5759: Tensor[(98), float32], %var_5760: Tensor[(11, 3), float32], %var_5761: Tensor[(1320, 2), float64]) -> (Tensor[(9, 4, 8), uint32], Tensor[(9, 4, 8), bool], Tensor[(528), float32], Tensor[(12, 220), float64], Tensor[(98), float32], Tensor[(11, 3), float32], Tensor[(1320, 2), float64]) {
    %272 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 4, 8), uint32] */, dtype="uint32") /* ty=Tensor[(9, 4, 8), uint32] */;
    %273 = shape_of(%var_5707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %274 = cast(%var_5707, dtype="uint32") /* ty=Tensor[(9, 4, 8), uint32] */;
    %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 4, 8), uint32] */, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
    %277 = shape_of(%var_5707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%var_5707, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %280 = cast(%var_5759, dtype="float32") /* ty=Tensor[(98), float32] */;
    %281 = cast(%var_5760, dtype="float32") /* ty=Tensor[(11, 3), float32] */;
    %282 = cast(%var_5761, dtype="float64") /* ty=Tensor[(1320, 2), float64] */;
    %283 = reshape(%280, newshape=[7, 7, 2]) /* ty=Tensor[(7, 7, 2), float32] */;
    %284 = reshape(%281, newshape=[33]) /* ty=Tensor[(33), float32] */;
    %285 = reshape(%282, newshape=[12, 220]) /* ty=Tensor[(12, 220), float64] */;
    %286 = @func_2075(%283, %284, %285) /* ty=(Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) */;
    %287 = right_shift(%274, %275) /* ty=Tensor[(9, 4, 8), uint32] */;
    %288 = less(%278, %279) /* ty=Tensor[(9, 4, 8), bool] */;
    %289 = @func_4608() /* ty=Tensor[(528), float32] */;
    %290 = %286.5;
    (%287, %288, %289, %290, %var_5759, %var_5760, %var_5761)
  };
  %291(%var_5764, %var_5765, %var_5766, %var_5767) /* ty=(Tensor[(9, 4, 8), uint32], Tensor[(9, 4, 8), bool], Tensor[(528), float32], Tensor[(12, 220), float64], Tensor[(98), float32], Tensor[(11, 3), float32], Tensor[(1320, 2), float64]) */
}

def @func_6744() -> Tensor[(11, 16, 3), float32] {
  %293 = fn () -> Tensor[(11, 16, 3), float32] {
    %292 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
    %292.0
  };
  %293() /* ty=Tensor[(11, 16, 3), float32] */
}

def @func_542() -> Tensor[(33), float64] {
  %294 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
  %295 = %294.2;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(33), float64] */;
  atanh(%296) /* ty=Tensor[(33), float64] */
}

def @func_8418(%var_8417: Tensor[(1, 160), uint64]) -> (Tensor[(528), float32], Tensor[(528), float32], Tensor[(33), bool], Tensor[(528), float32], Tensor[(8, 44), float64], Tensor[(1, 160), uint64]) {
  %307 = fn (%var_8414: Tensor[(1, 160), uint64]) -> (Tensor[(528), float32], Tensor[(528), float32], Tensor[(33), bool], Tensor[(528), float32], Tensor[(8, 44), float64], Tensor[(1, 160), uint64]) {
    %297 = @func_3101() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %298 = @func_6785() /* ty=(Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
    %299 = cast(%var_8414, dtype="uint64") /* ty=Tensor[(1, 160), uint64] */;
    %300 = reshape(%299, newshape=[160]) /* ty=Tensor[(160), uint64] */;
    %301 = @func_7482(%300) /* ty=(Tensor[(528), float32], Tensor[(8, 10, 2), uint64], Tensor[(160), uint64], Tensor[(11, 8, 4), float64], Tensor[(8, 44), float64], Tensor[(33), float32]) */;
    %302 = @func_4608() /* ty=Tensor[(528), float32] */;
    %303 = %297.1;
    %304 = @func_4627() /* ty=Tensor[(33), bool] */;
    %305 = %298.0;
    %306 = %301.4;
    (%302, %303, %304, %305, %306, %var_8414)
  };
  %307(%var_8417) /* ty=(Tensor[(528), float32], Tensor[(528), float32], Tensor[(33), bool], Tensor[(528), float32], Tensor[(8, 44), float64], Tensor[(1, 160), uint64]) */
}

def @func_3566() -> Tensor[(33), bool] {
  %308 = fn () -> Tensor[(33), bool] {
    @func_3347() /* ty=Tensor[(33), bool] */
  };
  %308() /* ty=Tensor[(33), bool] */
}

def @func_5363() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %309 = @func_4335() /* ty=(Tensor[(33), float64],) */;
  %310 = @func_669() /* ty=Tensor[(528), float32] */;
  %311 = %309.0;
  (%310, %311)
}

def @func_3246(%var_3243: Tensor[(12, 16, 11), uint16], %var_3244: Tensor[(12, 16, 11), uint16], %var_3245: Tensor[(220), float32]) -> (Tensor[(12, 16, 11), bool], Tensor[(33), int16], Tensor[(11, 3), float64], Tensor[(33), float64], Tensor[(220), float32], Tensor[(12, 16, 11), float32], Tensor[(11, 16, 3), float64], Tensor[(8, 66), float32]) {
  %331 = fn (%var_3198: Tensor[(12, 16, 11), uint16], %var_3199: Tensor[(12, 16, 11), uint16], %var_3225: Tensor[(220), float32]) -> (Tensor[(12, 16, 11), bool], Tensor[(33), int16], Tensor[(11, 3), float64], Tensor[(33), float64], Tensor[(220), float32], Tensor[(12, 16, 11), float32], Tensor[(11, 16, 3), float64], Tensor[(8, 66), float32]) {
    %312 = cast(%var_3199, dtype="bool") /* ty=Tensor[(12, 16, 11), bool] */;
    %313 = shape_of(%var_3198, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%var_3198, dtype="bool") /* ty=Tensor[(12, 16, 11), bool] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %316 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 3), float64] */;
    %317 = reshape(%316, newshape=[33]) /* ty=Tensor[(33), float64] */;
    %318 = @func_1816(%317) /* ty=(Tensor[(33), int16],) */;
    %319 = cast(%var_3225, dtype="float32") /* ty=Tensor[(220), float32] */;
    %320 = reshape(%319, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float32] */;
    %321 = @func_1949(%320) /* ty=(Tensor[(33), float64], Tensor[(11, 16, 3), float32], Tensor[(4, 5, 11), float64]) */;
    %322 = cast(%var_3198, dtype="float32") /* ty=Tensor[(12, 16, 11), float32] */;
    %323 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 66), float32] */, dtype="float32") /* ty=Tensor[(8, 66), float32] */;
    %324 = reshape(%323, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
    %325 = @func_1237(%324) /* ty=(Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) */;
    %326 = greater_equal(%314, %315) /* ty=Tensor[(12, 16, 11), bool] */;
    %327 = %318.0;
    %328 = %321.0;
    %329 = sin(%322) /* ty=Tensor[(12, 16, 11), float32] */;
    %330 = %325.0;
    (%326, %327, meta[relay.Constant][15] /* ty=Tensor[(11, 3), float64] */, %328, %var_3225, %329, %330, meta[relay.Constant][16] /* ty=Tensor[(8, 66), float32] */)
  };
  %331(%var_3243, %var_3244, %var_3245) /* ty=(Tensor[(12, 16, 11), bool], Tensor[(33), int16], Tensor[(11, 3), float64], Tensor[(33), float64], Tensor[(220), float32], Tensor[(12, 16, 11), float32], Tensor[(11, 16, 3), float64], Tensor[(8, 66), float32]) */
}

def @func_1272() -> (Tensor[(528), float32],) {
  @func_1270() /* ty=(Tensor[(528), float32],) */
}

def @func_4435() -> (Tensor[(528), float32],) {
  %332 = @func_3323() /* ty=Tensor[(528), float32] */;
  (%332,)
}

def @main() -> (Tensor[(33), int8],) {
  %333 = @func_4651() /* ty=(Tensor[(10080), float32], Tensor[(33), bool]) */;
  %334 = %333.1;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(33), float32] */;
  %336 = log(%335) /* ty=Tensor[(33), float32] */;
  %337 = cast(%334, dtype="int8") /* ty=Tensor[(33), int8] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(1), int32] */;
  %339 = cast(%336, dtype="int8") /* ty=Tensor[(33), int8] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?), int8] */;
  %341 = bitwise_xor(%339, %340) /* ty=Tensor[(33), int8] */;
  (%341,)
}

def @func_6711() -> Tensor[(528), float32] {
  @func_6709() /* ty=Tensor[(528), float32] */
}

def @func_6157() -> (Tensor[(33), float64],) {
  %342 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %343 = %342.2;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(33), float64] */;
  %345 = tan(%344) /* ty=Tensor[(33), float64] */;
  (%345,)
}

def @func_754() -> Tensor[(528), float32] {
  @func_752() /* ty=Tensor[(528), float32] */
}

def @func_3101() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  %346 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %347 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %348 = %346.1;
  %349 = %347.0;
  (%348, %349)
}

def @func_1648(%var_1646: Tensor[(2640), float64], %var_1647: Tensor[(325), uint8]) -> (Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) {
  %371 = fn (%var_1601: Tensor[(2640), float64], %var_1615: Tensor[(325), uint8]) -> (Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) {
    %350 = @func_782() /* ty=(Tensor[(33), float64],) */;
    %351 = %350.0;
    %352 = cast(meta[relay.Constant][17] /* ty=Tensor[(33), float64] */, dtype="int8") /* ty=Tensor[(33), int8] */;
    %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(1), int32] */;
    %354 = cast(%351, dtype="int8") /* ty=Tensor[(33), int8] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?), int8] */;
    %356 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %357 = cast(%var_1601, dtype="float64") /* ty=Tensor[(2640), float64] */;
    %358 = reshape(%357, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
    %359 = @func_1157(%358) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) */;
    %360 = cast(%var_1615, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %361 = reshape(%360, newshape=[325]) /* ty=Tensor[(325), uint8] */;
    %362 = @func_1113(%361) /* ty=(Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
    %363 = %356.1;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
    %365 = reshape(%364, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
    %366 = @func_1237(%365) /* ty=(Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) */;
    %367 = maximum(%354, %355) /* ty=Tensor[(33), int8] */;
    %368 = %359.0;
    %369 = %362.0;
    %370 = %366.2;
    (%367, %363, %368, %var_1601, %369, %var_1615, %370)
  };
  %371(%var_1646, %var_1647) /* ty=(Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) */
}

def @func_774(%var_768: Tensor[(5, 13, 5), uint8], %var_769: Tensor[(5, 13, 5), uint8]) -> (Tensor[(5, 13, 5), bool],) {
  %372 = cast(%var_769, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %373 = shape_of(%var_768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_768, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = less(%374, %375) /* ty=Tensor[(5, 13, 5), bool] */;
  (%376,)
}

def @func_2669(%var_2668: Tensor[(5, 11, 15), uint8]) -> Tensor[(5, 11, 15), uint8] {
  %381 = fn (%var_2662: Tensor[(5, 11, 15), uint8]) -> Tensor[(5, 11, 15), uint8] {
    %377 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 11, 15), uint8] */, dtype="uint8") /* ty=Tensor[(5, 11, 15), uint8] */;
    %378 = shape_of(%var_2662, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%var_2662, dtype="uint8") /* ty=Tensor[(5, 11, 15), uint8] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    maximum(%379, %380) /* ty=Tensor[(5, 11, 15), uint8] */
  };
  %381(%var_2668) /* ty=Tensor[(5, 11, 15), uint8] */
}

def @func_458(%var_452: Tensor[(11, 1, 3), float32], %var_453: Tensor[(11, 16, 3), float32]) -> (Tensor[(11, 16, 3), float32],) {
  %382 = cast(%var_452, dtype="float32") /* ty=Tensor[(11, 1, 3), float32] */;
  %383 = cast(%var_453, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
  %384 = divide(%382, %383) /* ty=Tensor[(11, 16, 3), float32] */;
  (%384,)
}

def @func_6675() -> (Tensor[(11, 16, 3), float32],) {
  @func_6673() /* ty=(Tensor[(11, 16, 3), float32],) */
}

def @func_4628() -> Tensor[(33), bool] {
  %385 = fn () -> Tensor[(33), bool] {
    @func_3565() /* ty=Tensor[(33), bool] */
  };
  %385() /* ty=Tensor[(33), bool] */
}

def @func_3112() -> (Tensor[(528), float32],) {
  %388 = fn () -> (Tensor[(528), float32],) {
    %386 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
    %387 = %386.0;
    (%387,)
  };
  %388() /* ty=(Tensor[(528), float32],) */
}

def @func_2461() -> (Tensor[(528), float32],) {
  @func_2459() /* ty=(Tensor[(528), float32],) */
}

def @func_5654(%var_5567: Tensor[(10080), uint32], %var_5580: Tensor[(10080), uint32], %var_5647: Tensor[(360), float64]) -> (Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(10080), bool], Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(528), float32], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) {
  %389 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %390 = %389.0;
  %391 = cast(%var_5567, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(1), int32] */;
  %393 = cast(%390, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %395 = cast(%var_5580, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %396 = shape_of(%390, dtype="int32") /* ty=Tensor[(1), int32] */;
  %397 = cast(%390, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?), float32] */;
  %399 = floor_divide(%397, %398) /* ty=Tensor[(10080), float32] */;
  %400 = cast(%390, dtype="bool") /* ty=Tensor[(10080), bool] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(1), int32] */;
  %402 = cast(%399, dtype="bool") /* ty=Tensor[(10080), bool] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?), bool] */;
  %404 = cast(%399, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %405 = sigmoid(%404) /* ty=Tensor[(10080), float32] */;
  %406 = cast(%399, dtype="int16") /* ty=Tensor[(10080), int16] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(1), int32] */;
  %408 = cast(%405, dtype="int16") /* ty=Tensor[(10080), int16] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?), int16] */;
  %410 = bitwise_and(%408, %409) /* ty=Tensor[(10080), int16] */;
  %411 = cast(%var_5567, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %412 = shape_of(%390, dtype="int32") /* ty=Tensor[(1), int32] */;
  %413 = cast(%390, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?), float32] */;
  %415 = divide(%413, %414) /* ty=Tensor[(10080), float32] */;
  %416 = cast(%415, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %417 = shape_of(%410, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = cast(%410, dtype="uint16") /* ty=Tensor[(10080), uint16] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %420 = @func_3719() /* ty=(Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) */;
  %421 = cast(meta[relay.Constant][19] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %422 = cast(%var_5647, dtype="float64") /* ty=Tensor[(360), float64] */;
  %423 = reshape(%421, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
  %424 = reshape(%422, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), float64] */;
  %425 = @func_2373(%423, %424) /* ty=(Tensor[(9, 8, 5), float64],) */;
  %426 = @func_752() /* ty=Tensor[(528), float32] */;
  %427 = subtract(%393, %394) /* ty=Tensor[(10080), uint16] */;
  %428 = logical_or(%402, %403) /* ty=Tensor[(10080), bool] */;
  %429 = @func_752() /* ty=Tensor[(528), float32] */;
  %430 = left_shift(%418, %419) /* ty=Tensor[(10080), uint16] */;
  %431 = %420.3;
  %432 = %425.0;
  (%426, %427, %428, %429, %430, %431, %432, meta[relay.Constant][19] /* ty=Tensor[(40), float64] */, %var_5647)
}

def @func_462(%var_460: Tensor[(11, 1, 3), float32], %var_461: Tensor[(11, 16, 3), float32]) -> (Tensor[(11, 16, 3), float32],) {
  @func_458(%var_460, %var_461) /* ty=(Tensor[(11, 16, 3), float32],) */
}

def @func_3584() -> Tensor[(1680), float32] {
  %434 = fn () -> Tensor[(1680), float32] {
    %433 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
    %433.2
  };
  %434() /* ty=Tensor[(1680), float32] */
}

def @func_3721() -> (Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) {
  @func_3719() /* ty=(Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) */
}

def @func_4022() -> (Tensor[(1680), float32],) {
  %437 = fn () -> (Tensor[(1680), float32],) {
    %435 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
    %436 = %435.2;
    (%436,)
  };
  %437() /* ty=(Tensor[(1680), float32],) */
}

def @func_3185() -> (Tensor[(33), float32], Tensor[(528), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(11, 16, 3), float32]) {
  %448 = fn () -> (Tensor[(33), float32], Tensor[(528), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(11, 16, 3), float32]) {
    %438 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %439 = @func_3111() /* ty=(Tensor[(528), float32],) */;
    %440 = cast(meta[relay.Constant][20] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %441 = reshape(%440, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
    %442 = @func_898(%441) /* ty=(Tensor[(10, 14, 12), float64],) */;
    %443 = @func_1541() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) */;
    %444 = %438.0;
    %445 = %439.0;
    %446 = %442.0;
    %447 = %443.0;
    (%444, %445, %446, meta[relay.Constant][20] /* ty=Tensor[(1680), float32] */, %447)
  };
  %448() /* ty=(Tensor[(33), float32], Tensor[(528), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(11, 16, 3), float32]) */
}

def @func_3025() -> (Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) {
  %468 = fn () -> (Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) {
    %449 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
    %450 = %449.2;
    %451 = cast(meta[relay.Constant][21] /* ty=Tensor[(33), float32] */, dtype="bool") /* ty=Tensor[(33), bool] */;
    %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(1), int32] */;
    %453 = cast(%450, dtype="bool") /* ty=Tensor[(33), bool] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?), bool] */;
    %455 = less(%453, %454) /* ty=Tensor[(33), bool] */;
    %456 = cast(%455, dtype="float64") /* ty=Tensor[(33), float64] */;
    %457 = reshape(%456, newshape=[33]) /* ty=Tensor[(33), float64] */;
    %458 = @func_1816(%457) /* ty=(Tensor[(33), int16],) */;
    %459 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %460 = cast(%450, dtype="bool") /* ty=Tensor[(33), bool] */;
    %461 = shape_of(%455, dtype="int32") /* ty=Tensor[(1), int32] */;
    %462 = cast(%455, dtype="bool") /* ty=Tensor[(33), bool] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?), bool] */;
    %464 = @func_669() /* ty=Tensor[(528), float32] */;
    %465 = %458.0;
    %466 = %459.0;
    %467 = less_equal(%462, %463) /* ty=Tensor[(33), bool] */;
    (%464, %465, %466, %467)
  };
  %468() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */
}

def @func_1054() -> (Tensor[(33), float32], Tensor[(33), float64]) {
  @func_1052() /* ty=(Tensor[(33), float32], Tensor[(33), float64]) */
}

def @func_3805(%var_3803: Tensor[(441, 1), uint64], %var_3804: Tensor[(1680), float32]) -> (Tensor[(6, 1680), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(2640), float64], Tensor[(10, 14, 12), float64], Tensor[(441, 1), uint64], Tensor[(1680), float32]) {
  @func_3801(%var_3803, %var_3804) /* ty=(Tensor[(6, 1680), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(2640), float64], Tensor[(10, 14, 12), float64], Tensor[(441, 1), uint64], Tensor[(1680), float32]) */
}

def @func_3968(%var_3966: Tensor[(16, 7, 3), uint8], %var_3967: Tensor[(16, 7, 3), uint8]) -> (Tensor[(16, 7, 3), uint8], Tensor[(16, 7, 3), float64]) {
  %476 = fn (%var_3936: Tensor[(16, 7, 3), uint8], %var_3937: Tensor[(16, 7, 3), uint8]) -> (Tensor[(16, 7, 3), uint8], Tensor[(16, 7, 3), float64]) {
    %469 = cast(%var_3937, dtype="uint8") /* ty=Tensor[(16, 7, 3), uint8] */;
    %470 = shape_of(%var_3936, dtype="int32") /* ty=Tensor[(3), int32] */;
    %471 = cast(%var_3936, dtype="uint8") /* ty=Tensor[(16, 7, 3), uint8] */;
    %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %473 = cast(%var_3936, dtype="float64") /* ty=Tensor[(16, 7, 3), float64] */;
    %474 = bitwise_xor(%471, %472) /* ty=Tensor[(16, 7, 3), uint8] */;
    %475 = cosh(%473) /* ty=Tensor[(16, 7, 3), float64] */;
    (%474, %475)
  };
  %476(%var_3966, %var_3967) /* ty=(Tensor[(16, 7, 3), uint8], Tensor[(16, 7, 3), float64]) */
}

def @func_778(%var_776: Tensor[(5, 13, 5), uint8], %var_777: Tensor[(5, 13, 5), uint8]) -> (Tensor[(5, 13, 5), bool],) {
  @func_774(%var_776, %var_777) /* ty=(Tensor[(5, 13, 5), bool],) */
}

def @func_6002() -> (Tensor[(10, 14, 12), float64],) {
  @func_6000() /* ty=(Tensor[(10, 14, 12), float64],) */
}

def @func_1160(%var_1158: Tensor[(16, 15, 11), float64]) -> (Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) {
  @func_1157(%var_1158) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) */
}

def @func_5365() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  @func_5363() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */
}

def @func_826(%var_825: Tensor[(33), float64]) -> Tensor[(33), bool] {
  %483 = fn (%var_819: Tensor[(33), float64]) -> Tensor[(33), bool] {
    %477 = @func_782() /* ty=(Tensor[(33), float64],) */;
    %478 = %477.0;
    %479 = cast(%var_819, dtype="bool") /* ty=Tensor[(33), bool] */;
    %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(1), int32] */;
    %481 = cast(%478, dtype="bool") /* ty=Tensor[(33), bool] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?), bool] */;
    not_equal(%481, %482) /* ty=Tensor[(33), bool] */
  };
  %483(%var_825) /* ty=Tensor[(33), bool] */
}

def @func_2075(%var_2057: Tensor[(7, 7, 2), float32], %var_2061: Tensor[(33), float32], %var_2070: Tensor[(12, 220), float64]) -> (Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) {
  %484 = cast(%var_2057, dtype="float32") /* ty=Tensor[(7, 7, 2), float32] */;
  %485 = cast(%var_2061, dtype="float32") /* ty=Tensor[(33), float32] */;
  %486 = cast(meta[relay.Constant][22] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %487 = reshape(%485, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
  %488 = reshape(%486, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %489 = @func_458(%487, %488) /* ty=(Tensor[(11, 16, 3), float32],) */;
  %490 = cast(%var_2070, dtype="float64") /* ty=Tensor[(12, 220), float64] */;
  %491 = cast(meta[relay.Constant][23] /* ty=Tensor[(325, 1), uint8] */, dtype="uint8") /* ty=Tensor[(325, 1), uint8] */;
  %492 = reshape(%490, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %493 = reshape(%491, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %494 = @func_1645(%492, %493) /* ty=(Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) */;
  %495 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %496 = acosh(%484) /* ty=Tensor[(7, 7, 2), float32] */;
  %497 = %489.0;
  %498 = %494.0;
  %499 = %495.0;
  (%496, %497, %var_2061, meta[relay.Constant][22] /* ty=Tensor[(528), float32] */, %498, %var_2070, meta[relay.Constant][23] /* ty=Tensor[(325, 1), uint8] */, %499)
}

def @func_4830() -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(12, 16, 11), float32], Tensor[(220), float32], Tensor[(2112), float64]) {
  %513 = fn () -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(12, 16, 11), float32], Tensor[(220), float32], Tensor[(2112), float64]) {
    %500 = @func_4106() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) */;
    %501 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), uint16] */, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
    %502 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), uint16] */, dtype="uint16") /* ty=Tensor[(2112), uint16] */;
    %503 = cast(meta[relay.Constant][25] /* ty=Tensor[(220), float32] */, dtype="float32") /* ty=Tensor[(220), float32] */;
    %504 = reshape(%501, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), uint16] */;
    %505 = reshape(%502, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), uint16] */;
    %506 = reshape(%503, newshape=[220]) /* ty=Tensor[(220), float32] */;
    %507 = @func_3242(%504, %505, %506) /* ty=(Tensor[(12, 16, 11), bool], Tensor[(33), int16], Tensor[(11, 3), float64], Tensor[(33), float64], Tensor[(220), float32], Tensor[(12, 16, 11), float32], Tensor[(11, 16, 3), float64], Tensor[(8, 66), float32]) */;
    %508 = cast(meta[relay.Constant][24] /* ty=Tensor[(2112), uint16] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %509 = @func_3323() /* ty=Tensor[(528), float32] */;
    %510 = %500.1;
    %511 = %507.5;
    %512 = rsqrt(%508) /* ty=Tensor[(2112), float64] */;
    (%509, %510, %511, meta[relay.Constant][25] /* ty=Tensor[(220), float32] */, %512)
  };
  %513() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(12, 16, 11), float32], Tensor[(220), float32], Tensor[(2112), float64]) */
}

def @func_8568() -> Tensor[(528), float32] {
  @func_8566() /* ty=Tensor[(528), float32] */
}

def @func_5280() -> Tensor[(528), float32] {
  %515 = fn () -> Tensor[(528), float32] {
    %514 = @func_4398() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
    %514.0
  };
  %515() /* ty=Tensor[(528), float32] */
}

def @func_7077() -> (Tensor[(10, 14, 12), uint16],) {
  @func_7075() /* ty=(Tensor[(10, 14, 12), uint16],) */
}

def @func_5807(%var_5806: Tensor[(480), uint64]) -> (Tensor[(33), bool], Tensor[(8, 6, 10), uint64], Tensor[(480), uint64]) {
  %523 = fn (%var_5801: Tensor[(480), uint64]) -> (Tensor[(33), bool], Tensor[(8, 6, 10), uint64], Tensor[(480), uint64]) {
    %516 = cast(%var_5801, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %517 = cast(%var_5801, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %518 = reshape(%516, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
    %519 = reshape(%517, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
    %520 = @func_5195(%518, %519) /* ty=(Tensor[(8, 6, 10), uint64],) */;
    %521 = @func_3347() /* ty=Tensor[(33), bool] */;
    %522 = %520.0;
    (%521, %522, %var_5801)
  };
  %523(%var_5806) /* ty=(Tensor[(33), bool], Tensor[(8, 6, 10), uint64], Tensor[(480), uint64]) */
}

def @func_6734() -> (Tensor[(528), float32],) {
  @func_6732() /* ty=(Tensor[(528), float32],) */
}

def @func_6823() -> Tensor[(11, 16, 3), float32] {
  %524 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %524.0
}

def @func_8342() -> (Tensor[(7, 16, 9), float32], Tensor[(16, 7, 3), uint8], Tensor[(168, 2), uint8]) {
  %533 = fn () -> (Tensor[(7, 16, 9), float32], Tensor[(16, 7, 3), uint8], Tensor[(168, 2), uint8]) {
    %525 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 16, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 9), float32] */;
    %526 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 2), uint8] */, dtype="uint8") /* ty=Tensor[(168, 2), uint8] */;
    %527 = cast(meta[relay.Constant][27] /* ty=Tensor[(168, 2), uint8] */, dtype="uint8") /* ty=Tensor[(168, 2), uint8] */;
    %528 = reshape(%526, newshape=[16, 7, 3]) /* ty=Tensor[(16, 7, 3), uint8] */;
    %529 = reshape(%527, newshape=[16, 7, 3]) /* ty=Tensor[(16, 7, 3), uint8] */;
    %530 = @func_3965(%528, %529) /* ty=(Tensor[(16, 7, 3), uint8], Tensor[(16, 7, 3), float64]) */;
    %531 = sigmoid(%525) /* ty=Tensor[(7, 16, 9), float32] */;
    %532 = %530.0;
    (%531, %532, meta[relay.Constant][27] /* ty=Tensor[(168, 2), uint8] */)
  };
  %533() /* ty=(Tensor[(7, 16, 9), float32], Tensor[(16, 7, 3), uint8], Tensor[(168, 2), uint8]) */
}

def @func_901(%var_899: Tensor[(10, 14, 12), float32]) -> (Tensor[(10, 14, 12), float64],) {
  @func_898(%var_899) /* ty=(Tensor[(10, 14, 12), float64],) */
}

def @func_7750() -> Tensor[(528), float32] {
  %535 = fn () -> Tensor[(528), float32] {
    %534 = @func_6785() /* ty=(Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
    %534.0
  };
  %535() /* ty=Tensor[(528), float32] */
}

def @func_430(%var_428: Tensor[(4, 8, 2), float32], %var_429: Tensor[(4, 8, 2), float32]) -> Tensor[(4, 8, 2), bool] {
  %540 = fn (%var_420: Tensor[(4, 8, 2), float32], %var_421: Tensor[(4, 8, 2), float32]) -> Tensor[(4, 8, 2), bool] {
    %536 = cast(%var_421, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
    %537 = shape_of(%var_420, dtype="int32") /* ty=Tensor[(3), int32] */;
    %538 = cast(%var_420, dtype="bool") /* ty=Tensor[(4, 8, 2), bool] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%538, %539) /* ty=Tensor[(4, 8, 2), bool] */
  };
  %540(%var_428, %var_429) /* ty=Tensor[(4, 8, 2), bool] */
}

def @func_7919() -> (Tensor[(11, 16, 3), float32],) {
  %541 = @func_6887() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %542 = %541.0;
  (%542,)
}

def @func_1914() -> Tensor[(528), float32] {
  @func_1912() /* ty=Tensor[(528), float32] */
}

def @func_6218() -> (Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64]) {
  @func_6216() /* ty=(Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64]) */
}

def @func_5863() -> Tensor[(528), float32] {
  @func_5430() /* ty=Tensor[(528), float32] */
}

def @func_7118() -> Tensor[(528), float32] {
  %544 = fn () -> Tensor[(528), float32] {
    %543 = @func_5831() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
    %543.0
  };
  %544() /* ty=Tensor[(528), float32] */
}

def @func_6142() -> (Tensor[(528), float32], Tensor[(528), float32]) {
  @func_6140() /* ty=(Tensor[(528), float32], Tensor[(528), float32]) */
}

def @func_6709() -> Tensor[(528), float32] {
  %545 = @func_2459() /* ty=(Tensor[(528), float32],) */;
  %545.0
}

def @func_8128() -> (Tensor[(528), float32],) {
  %548 = fn () -> (Tensor[(528), float32],) {
    %546 = @func_3111() /* ty=(Tensor[(528), float32],) */;
    %547 = %546.0;
    (%547,)
  };
  %548() /* ty=(Tensor[(528), float32],) */
}

def @func_4373() -> (Tensor[(33), bool],) {
  @func_4371() /* ty=(Tensor[(33), bool],) */
}

def @func_7140() -> (Tensor[(64), float32],) {
  @func_7138() /* ty=(Tensor[(64), float32],) */
}

def @func_3861(%var_3831: Tensor[(33), float64]) -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(1680), float32]) {
  %549 = @func_1999() /* ty=(Tensor[(528), float32],) */;
  %550 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
  %551 = %550.0;
  %552 = cast(%var_3831, dtype="int16") /* ty=Tensor[(33), int16] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(1), int32] */;
  %554 = cast(%551, dtype="int16") /* ty=Tensor[(33), int16] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?), int16] */;
  %556 = multiply(%554, %555) /* ty=Tensor[(33), int16] */;
  %557 = cast(%var_3831, dtype="float64") /* ty=Tensor[(33), float64] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(1), int32] */;
  %559 = cast(%556, dtype="float64") /* ty=Tensor[(33), float64] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?), float64] */;
  %561 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %562 = %549.0;
  %563 = mod(%559, %560) /* ty=Tensor[(33), float64] */;
  %564 = %561.2;
  (%562, %563, %564)
}

def @func_2131() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  %565 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %566 = %565.0;
  %567 = @func_1359() /* ty=Tensor[(528), float32] */;
  (%566, %567)
}

def @func_4399() -> (Tensor[(528), float32], Tensor[(33), bool]) {
  %572 = fn () -> (Tensor[(528), float32], Tensor[(33), bool]) {
    %568 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %569 = @func_3380() /* ty=(Tensor[(528), float32], Tensor[(6, 1680), bool], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), bool]) */;
    %570 = %568.2;
    %571 = %569.4;
    (%570, %571)
  };
  %572() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */
}

def @func_5028() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32], Tensor[(33), float64], Tensor[(33), bool], Tensor[(11, 16, 3), float32]) {
  %573 = @func_3101() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %574 = @func_4371() /* ty=(Tensor[(33), bool],) */;
  %575 = %574.0;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(33), float64] */;
  %577 = @func_1541() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) */;
  %578 = %573.0;
  %579 = @func_1074() /* ty=Tensor[(528), float32] */;
  %580 = acosh(%576) /* ty=Tensor[(33), float64] */;
  %581 = @func_4627() /* ty=Tensor[(33), bool] */;
  %582 = %577.0;
  (%578, %579, %580, %581, %582)
}

def @func_2000() -> (Tensor[(528), float32],) {
  %584 = fn () -> (Tensor[(528), float32],) {
    %583 = @func_1912() /* ty=Tensor[(528), float32] */;
    (%583,)
  };
  %584() /* ty=(Tensor[(528), float32],) */
}

def @func_8244() -> Tensor[(2640), float64] {
  %585 = @func_8224() /* ty=Tensor[(2640), float64] */;
  %586 = cast(%585, dtype="float64") /* ty=Tensor[(2640), float64] */;
  tan(%586) /* ty=Tensor[(2640), float64] */
}

def @func_2570() -> (Tensor[(1680), float32],) {
  %589 = fn () -> (Tensor[(1680), float32],) {
    %587 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
    %588 = %587.2;
    (%588,)
  };
  %589() /* ty=(Tensor[(1680), float32],) */
}

def @func_4189() -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(1680), float32], Tensor[(7, 7, 9), uint64], Tensor[(10080), float32]) {
  %601 = fn () -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(1680), float32], Tensor[(7, 7, 9), uint64], Tensor[(10080), float32]) {
    %590 = @func_4106() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) */;
    %591 = @func_2569() /* ty=(Tensor[(1680), float32],) */;
    %592 = %591.0;
    %593 = cast(%592, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %594 = cast(meta[relay.Constant][28] /* ty=Tensor[(10080), float32] */, dtype="float32") /* ty=Tensor[(10080), float32] */;
    %595 = reshape(%593, newshape=[1, 1680]) /* ty=Tensor[(1, 1680), float32] */;
    %596 = reshape(%594, newshape=[6, 1680]) /* ty=Tensor[(6, 1680), float32] */;
    %597 = @func_1486(%595, %596) /* ty=(Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) */;
    %598 = @func_752() /* ty=Tensor[(528), float32] */;
    %599 = %590.1;
    %600 = %597.2;
    (%598, %599, %592, %600, meta[relay.Constant][28] /* ty=Tensor[(10080), float32] */)
  };
  %601() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(1680), float32], Tensor[(7, 7, 9), uint64], Tensor[(10080), float32]) */
}

def @func_5327(%var_5326: Tensor[(528), float32]) -> (Tensor[(33), bool], Tensor[(528), float32], Tensor[(528), float32]) {
  %607 = fn (%var_5317: Tensor[(528), float32]) -> (Tensor[(33), bool], Tensor[(528), float32], Tensor[(528), float32]) {
    %602 = cast(%var_5317, dtype="float32") /* ty=Tensor[(528), float32] */;
    %603 = reshape(%602, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
    %604 = @func_1237(%603) /* ty=(Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) */;
    %605 = @func_3347() /* ty=Tensor[(33), bool] */;
    %606 = %604.1;
    (%605, %606, %var_5317)
  };
  %607(%var_5326) /* ty=(Tensor[(33), bool], Tensor[(528), float32], Tensor[(528), float32]) */
}

def @func_752() -> Tensor[(528), float32] {
  @func_669() /* ty=Tensor[(528), float32] */
}

def @func_6848() -> Tensor[(528), float32] {
  %608 = fn () -> Tensor[(528), float32] {
    @func_5692() /* ty=Tensor[(528), float32] */
  };
  %608() /* ty=Tensor[(528), float32] */
}

def @func_1541() -> (Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) {
  %609 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
  %610 = cast(meta[relay.Constant][29] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %611 = reshape(%610, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float32] */;
  %612 = @func_898(%611) /* ty=(Tensor[(10, 14, 12), float64],) */;
  %613 = %609.0;
  %614 = %612.0;
  (%613, %614, meta[relay.Constant][29] /* ty=Tensor[(1680), float32] */)
}

def @func_6408() -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32]) {
  @func_6406() /* ty=(Tensor[(33), float64], Tensor[(11, 16, 3), float32]) */
}

def @func_2373(%var_2367: Tensor[(1, 8, 5), float64], %var_2368: Tensor[(9, 8, 5), float64]) -> (Tensor[(9, 8, 5), float64],) {
  %615 = cast(%var_2367, dtype="float64") /* ty=Tensor[(1, 8, 5), float64] */;
  %616 = cast(%var_2368, dtype="float64") /* ty=Tensor[(9, 8, 5), float64] */;
  %617 = divide(%615, %616) /* ty=Tensor[(9, 8, 5), float64] */;
  (%617,)
}

def @func_6538(%var_6515: Tensor[(3, 14, 5), float32]) -> (Tensor[(3, 14, 5), uint16], Tensor[(3, 14, 5), uint64]) {
  %618 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
  %619 = %618.3;
  %620 = cast(%619, dtype="uint16") /* ty=Tensor[(3, ?, 5), uint16] */;
  %621 = cast(%var_6515, dtype="uint16") /* ty=Tensor[(3, 14, 5), uint16] */;
  %622 = cast(%619, dtype="uint64") /* ty=Tensor[(3, ?, 5), uint64] */;
  %623 = cast(%var_6515, dtype="uint64") /* ty=Tensor[(3, 14, 5), uint64] */;
  %624 = multiply(%620, %621) /* ty=Tensor[(3, 14, 5), uint16] */;
  %625 = logical_xor(%622, %623) /* ty=Tensor[(3, 14, 5), uint64] */;
  (%624, %625)
}

def @func_4609() -> Tensor[(528), float32] {
  %626 = fn () -> Tensor[(528), float32] {
    @func_669() /* ty=Tensor[(528), float32] */
  };
  %626() /* ty=Tensor[(528), float32] */
}

def @func_2825() -> (Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) {
  %635 = fn () -> (Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) {
    %627 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
    %628 = cast(meta[relay.Constant][30] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %629 = cast(meta[relay.Constant][31] /* ty=Tensor[(10080), float32] */, dtype="float32") /* ty=Tensor[(10080), float32] */;
    %630 = reshape(%628, newshape=[1, 1680]) /* ty=Tensor[(1, 1680), float32] */;
    %631 = reshape(%629, newshape=[6, 1680]) /* ty=Tensor[(6, 1680), float32] */;
    %632 = @func_1486(%630, %631) /* ty=(Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) */;
    %633 = %627.2;
    %634 = %632.5;
    (%633, %634, meta[relay.Constant][30] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][31] /* ty=Tensor[(10080), float32] */)
  };
  %635() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */
}

def @func_8608() -> Tensor[(15), float32] {
  @func_8606() /* ty=Tensor[(15), float32] */
}

def @func_2484() -> Tensor[(11, 16, 3), float32] {
  %637 = fn () -> Tensor[(11, 16, 3), float32] {
    %636 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %636.0
  };
  %637() /* ty=Tensor[(11, 16, 3), float32] */
}

def @func_6926(%var_6906: Tensor[(2640), float64], %var_6923: Tensor[(120, 4), uint64]) -> (Tensor[(528), float32], Tensor[(2640), float64], Tensor[(8, 6, 10), uint64], Tensor[(120, 4), uint64]) {
  %638 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(528), float32] */;
  %641 = @func_4546() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(33), bool], Tensor[(2640), float64]) */;
  %642 = %641.3;
  %643 = cast(%var_6906, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(1), int32] */;
  %645 = cast(%642, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?), float64] */;
  %647 = cast(%var_6923, dtype="uint64") /* ty=Tensor[(120, 4), uint64] */;
  %648 = cast(%var_6923, dtype="uint64") /* ty=Tensor[(120, 4), uint64] */;
  %649 = reshape(%647, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
  %650 = reshape(%648, newshape=[8, 6, 10]) /* ty=Tensor[(8, 6, 10), uint64] */;
  %651 = @func_5195(%649, %650) /* ty=(Tensor[(8, 6, 10), uint64],) */;
  %652 = atanh(%640) /* ty=Tensor[(528), float32] */;
  %653 = divide(%645, %646) /* ty=Tensor[(2640), float64] */;
  %654 = %651.0;
  (%652, %653, %654, %var_6923)
}

def @func_3864(%var_3862: Tensor[(33), float64]) -> (Tensor[(528), float32], Tensor[(33), float64], Tensor[(1680), float32]) {
  @func_3861(%var_3862) /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(1680), float32]) */
}

def @func_4649() -> (Tensor[(10080), float32], Tensor[(33), bool]) {
  %655 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %658 = @func_4398() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
  %659 = asin(%657) /* ty=Tensor[(10080), float32] */;
  %660 = %658.1;
  (%659, %660)
}

def @func_4476() -> (Tensor[(10080), uint32],) {
  @func_4474() /* ty=(Tensor[(10080), uint32],) */
}

def @func_5199(%var_5197: Tensor[(8, 6, 10), uint64], %var_5198: Tensor[(8, 6, 10), uint64]) -> (Tensor[(8, 6, 10), uint64],) {
  @func_5195(%var_5197, %var_5198) /* ty=(Tensor[(8, 6, 10), uint64],) */
}

def @func_5431() -> Tensor[(528), float32] {
  %662 = fn () -> Tensor[(528), float32] {
    %661 = @func_4435() /* ty=(Tensor[(528), float32],) */;
    %661.0
  };
  %662() /* ty=Tensor[(528), float32] */
}

def @func_3348() -> Tensor[(33), bool] {
  %664 = fn () -> Tensor[(33), bool] {
    %663 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
    %663.3
  };
  %664() /* ty=Tensor[(33), bool] */
}

def @func_3381() -> (Tensor[(528), float32], Tensor[(6, 1680), bool], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), bool]) {
  %681 = fn () -> (Tensor[(528), float32], Tensor[(6, 1680), bool], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), bool]) {
    %665 = @func_1999() /* ty=(Tensor[(528), float32],) */;
    %666 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
    %667 = %666.1;
    %668 = cast(%667, dtype="float64") /* ty=Tensor[(6, 1680), float64] */;
    %669 = cosh(%668) /* ty=Tensor[(6, 1680), float64] */;
    %670 = cast(%667, dtype="bool") /* ty=Tensor[(6, 1680), bool] */;
    %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(2), int32] */;
    %672 = cast(%669, dtype="bool") /* ty=Tensor[(6, 1680), bool] */;
    %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %674 = @func_2459() /* ty=(Tensor[(528), float32],) */;
    %675 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
    %676 = %665.0;
    %677 = less(%672, %673) /* ty=Tensor[(6, 1680), bool] */;
    %678 = @func_542() /* ty=Tensor[(33), float64] */;
    %679 = %674.0;
    %680 = %675.3;
    (%676, %677, %678, %679, %680)
  };
  %681() /* ty=(Tensor[(528), float32], Tensor[(6, 1680), bool], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), bool]) */
}

def @func_1912() -> Tensor[(528), float32] {
  @func_752() /* ty=Tensor[(528), float32] */
}

def @func_7169(%var_7163: Tensor[(8, 15, 5), uint32]) -> Tensor[(8, 15, 5), uint32] {
  %682 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 15, 5), uint32] */, dtype="uint32") /* ty=Tensor[(8, 15, 5), uint32] */;
  %683 = shape_of(%var_7163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%var_7163, dtype="uint32") /* ty=Tensor[(8, 15, 5), uint32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%684, %685) /* ty=Tensor[(8, 15, 5), uint32] */
}

def @func_8316(%var_8314: Tensor[(15, 6, 3), float64], %var_8315: Tensor[(1, 325), uint8]) -> (Tensor[(15, 6, 3), float32], Tensor[(11, 16, 3), float32], Tensor[(1680), float32], Tensor[(?, 325), bool], Tensor[(33), bool], Tensor[(33), bool]) {
  %709 = fn (%var_8257: Tensor[(15, 6, 3), float64], %var_8267: Tensor[(1, 325), uint8]) -> (Tensor[(15, 6, 3), float32], Tensor[(11, 16, 3), float32], Tensor[(1680), float32], Tensor[(?, 325), bool], Tensor[(33), bool], Tensor[(33), bool]) {
    %686 = cast(%var_8257, dtype="float64") /* ty=Tensor[(15, 6, 3), float64] */;
    %687 = cosh(%686) /* ty=Tensor[(15, 6, 3), float64] */;
    %688 = cast(%687, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
    %689 = @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */;
    %690 = @func_8178() /* ty=(Tensor[(1680), float32],) */;
    %691 = cast(%var_8267, dtype="uint8") /* ty=Tensor[(1, 325), uint8] */;
    %692 = cast(%var_8267, dtype="uint8") /* ty=Tensor[(1, 325), uint8] */;
    %693 = reshape(%691, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %694 = reshape(%692, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %695 = @func_774(%693, %694) /* ty=(Tensor[(5, 13, 5), bool],) */;
    %696 = %695.0;
    %697 = cast(%696, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
    %698 = shape_of(%var_8267, dtype="int32") /* ty=Tensor[(2), int32] */;
    %699 = cast(%var_8267, dtype="bool") /* ty=Tensor[(1, 325), bool] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %701 = @func_7666() /* ty=(Tensor[(33), bool],) */;
    %702 = @func_4567() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
    %703 = exp(%688) /* ty=Tensor[(15, 6, 3), float32] */;
    %704 = %689.0;
    %705 = %690.0;
    %706 = not_equal(%699, %700) /* ty=Tensor[(?, 325), bool] */;
    %707 = %701.0;
    %708 = %702.1;
    (%703, %704, %705, %706, %707, %708)
  };
  %709(%var_8314, %var_8315) /* ty=(Tensor[(15, 6, 3), float32], Tensor[(11, 16, 3), float32], Tensor[(1680), float32], Tensor[(?, 325), bool], Tensor[(33), bool], Tensor[(33), bool]) */
}

def @func_3310(%var_3298: Tensor[(6, 1, 5), float64], %var_3299: Tensor[(6, 3, 5), float64]) -> (Tensor[(6, 3, 5), float64], Tensor[(33), float64]) {
  %710 = cast(%var_3298, dtype="float64") /* ty=Tensor[(6, 1, 5), float64] */;
  %711 = cast(%var_3299, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
  %712 = power(%710, %711) /* ty=Tensor[(6, 3, 5), float64] */;
  %713 = @func_542() /* ty=Tensor[(33), float64] */;
  (%712, %713)
}

def @func_7980() -> (Tensor[(528), float32], Tensor[(528), float32]) {
  %714 = @func_6321() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */;
  %715 = %714.0;
  %716 = @func_5863() /* ty=Tensor[(528), float32] */;
  (%715, %716)
}

def @func_8566() -> Tensor[(528), float32] {
  %717 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %717.0
}

def @func_8606() -> Tensor[(15), float32] {
  %718 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
  %718.4
}

def @func_898(%var_879: Tensor[(10, 14, 12), float32]) -> (Tensor[(10, 14, 12), float64],) {
  %719 = cast(%var_879, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %720 = sigmoid(%719) /* ty=Tensor[(10, 14, 12), float32] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %722 = log2(%721) /* ty=Tensor[(10, 14, 12), float64] */;
  (%722,)
}

def @func_2377(%var_2375: Tensor[(1, 8, 5), float64], %var_2376: Tensor[(9, 8, 5), float64]) -> (Tensor[(9, 8, 5), float64],) {
  @func_2373(%var_2375, %var_2376) /* ty=(Tensor[(9, 8, 5), float64],) */
}

def @func_2897(%var_2892: Tensor[(4, 2, 15), int64]) -> Tensor[(4, 2, 15), bool] {
  %723 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 2, 15), int64] */, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
  %724 = shape_of(%var_2892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%var_2892, dtype="bool") /* ty=Tensor[(4, 2, 15), bool] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%725, %726) /* ty=Tensor[(4, 2, 15), bool] */
}

def @func_7484(%var_7483: Tensor[(160), uint64]) -> (Tensor[(528), float32], Tensor[(8, 10, 2), uint64], Tensor[(160), uint64], Tensor[(11, 8, 4), float64], Tensor[(8, 44), float64], Tensor[(33), float32]) {
  %739 = fn (%var_7411: Tensor[(160), uint64]) -> (Tensor[(528), float32], Tensor[(8, 10, 2), uint64], Tensor[(160), uint64], Tensor[(11, 8, 4), float64], Tensor[(8, 44), float64], Tensor[(33), float32]) {
    %727 = @func_4398() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */;
    %728 = cast(%var_7411, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %729 = cast(%var_7411, dtype="uint64") /* ty=Tensor[(160), uint64] */;
    %730 = reshape(%728, newshape=[8, 10, 2]) /* ty=Tensor[(8, 10, 2), uint64] */;
    %731 = reshape(%729, newshape=[8, 10, 2]) /* ty=Tensor[(8, 10, 2), uint64] */;
    %732 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 44), float64] */, dtype="float64") /* ty=Tensor[(8, 44), float64] */;
    %733 = reshape(%732, newshape=[11, 8, 4]) /* ty=Tensor[(11, 8, 4), float64] */;
    %734 = @func_4106() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(33), float32], Tensor[(1680), uint32]) */;
    %735 = %727.0;
    %736 = @func_2014(%730, %731) /* ty=Tensor[(8, 10, 2), uint64] */;
    %737 = @func_2490(%733) /* ty=Tensor[(11, 8, 4), float64] */;
    %738 = %734.1;
    (%735, %736, %var_7411, %737, meta[relay.Constant][34] /* ty=Tensor[(8, 44), float64] */, %738)
  };
  %739(%var_7483) /* ty=(Tensor[(528), float32], Tensor[(8, 10, 2), uint64], Tensor[(160), uint64], Tensor[(11, 8, 4), float64], Tensor[(8, 44), float64], Tensor[(33), float32]) */
}

def @func_7666() -> (Tensor[(33), bool],) {
  %740 = @func_4627() /* ty=Tensor[(33), bool] */;
  (%740,)
}

def @func_3103() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  @func_3101() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */
}

def @func_2557() -> (Tensor[(528), float32], Tensor[(33), float64]) {
  %744 = fn () -> (Tensor[(528), float32], Tensor[(33), float64]) {
    %741 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %742 = %741.1;
    %743 = @func_1704() /* ty=Tensor[(33), float64] */;
    (%742, %743)
  };
  %744() /* ty=(Tensor[(528), float32], Tensor[(33), float64]) */
}

def @func_7075() -> (Tensor[(10, 14, 12), uint16],) {
  %745 = @func_4236() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(528), float32]) */;
  %746 = %745.0;
  %747 = @func_4121() /* ty=Tensor[(1680), float32] */;
  %748 = cast(%747, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %749 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%746, dtype="uint16") /* ty=Tensor[(10, 14, 12), uint16] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %752 = add(%750, %751) /* ty=Tensor[(10, 14, 12), uint16] */;
  (%752,)
}

def @func_1239(%var_1238: Tensor[(11, 16, 3), float32]) -> (Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) {
  %763 = fn (%var_1219: Tensor[(11, 16, 3), float32]) -> (Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) {
    %753 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
    %754 = %753.1;
    %755 = cast(%var_1219, dtype="float64") /* ty=Tensor[(11, 16, 3), float64] */;
    %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
    %757 = cast(%754, dtype="float64") /* ty=Tensor[(11, 16, 3), float64] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %759 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %760 = maximum(%757, %758) /* ty=Tensor[(11, 16, 3), float64] */;
    %761 = @func_669() /* ty=Tensor[(528), float32] */;
    %762 = %759.2;
    (%760, %761, %762)
  };
  %763(%var_1238) /* ty=(Tensor[(11, 16, 3), float64], Tensor[(528), float32], Tensor[(528), float32]) */
}

def @func_6888() -> (Tensor[(11, 16, 3), float32],) {
  %765 = fn () -> (Tensor[(11, 16, 3), float32],) {
    %764 = @func_6823() /* ty=Tensor[(11, 16, 3), float32] */;
    (%764,)
  };
  %765() /* ty=(Tensor[(11, 16, 3), float32],) */
}

def @func_970() -> (Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) {
  %766 = cast(meta[relay.Constant][35] /* ty=Tensor[(33), float32] */, dtype="float32") /* ty=Tensor[(33), float32] */;
  %767 = @func_752() /* ty=Tensor[(528), float32] */;
  %768 = cast(%767, dtype="float32") /* ty=Tensor[(528), float32] */;
  %769 = reshape(%766, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
  %770 = reshape(%768, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %771 = @func_458(%769, %770) /* ty=(Tensor[(11, 16, 3), float32],) */;
  %772 = %771.0;
  (%767, %772, meta[relay.Constant][35] /* ty=Tensor[(33), float32] */)
}

def @func_3340(%var_3338: Tensor[(8, 12, 16), float32], %var_3339: Tensor[(3, 60), float32]) -> (Tensor[(8, 12, 16), float32], Tensor[(3, 10, 6), float32], Tensor[(3, 60), float32]) {
  @func_3336(%var_3338, %var_3339) /* ty=(Tensor[(8, 12, 16), float32], Tensor[(3, 10, 6), float32], Tensor[(3, 60), float32]) */
}

def @func_8460(%var_8459: Tensor[(40), float64]) -> (Tensor[(33), bool], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) {
  %781 = fn (%var_8454: Tensor[(40), float64]) -> (Tensor[(33), bool], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) {
    %773 = @func_3719() /* ty=(Tensor[(33), float64], Tensor[(528), float32], Tensor[(2640), float64], Tensor[(528), float32], Tensor[(1680), float32], Tensor[(528), float32], Tensor[(13, 25), float32], Tensor[(33), bool]) */;
    %774 = cast(%var_8454, dtype="float64") /* ty=Tensor[(40), float64] */;
    %775 = cast(meta[relay.Constant][36] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %776 = reshape(%774, newshape=[1, 8, 5]) /* ty=Tensor[(1, 8, 5), float64] */;
    %777 = reshape(%775, newshape=[9, 8, 5]) /* ty=Tensor[(9, 8, 5), float64] */;
    %778 = @func_2373(%776, %777) /* ty=(Tensor[(9, 8, 5), float64],) */;
    %779 = %773.7;
    %780 = %778.0;
    (%779, %780, %var_8454, meta[relay.Constant][36] /* ty=Tensor[(360), float64] */)
  };
  %781(%var_8459) /* ty=(Tensor[(33), bool], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) */
}

def @func_5693() -> Tensor[(528), float32] {
  %782 = fn () -> Tensor[(528), float32] {
    @func_4494() /* ty=Tensor[(528), float32] */
  };
  %782() /* ty=Tensor[(528), float32] */
}

def @func_5865() -> Tensor[(528), float32] {
  @func_5863() /* ty=Tensor[(528), float32] */
}

def @func_1132() -> (Tensor[(11, 16, 3), float32],) {
  %783 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %784 = %783.1;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(11, 16, 3), float32] */;
  %786 = asinh(%785) /* ty=Tensor[(11, 16, 3), float32] */;
  (%786,)
}

def @func_6732() -> (Tensor[(528), float32],) {
  %787 = @func_5863() /* ty=Tensor[(528), float32] */;
  (%787,)
}

def @func_8225() -> Tensor[(2640), float64] {
  %789 = fn () -> Tensor[(2640), float64] {
    %788 = @func_2768() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(528), float32], Tensor[(33), float64], Tensor[(16, 15, 11), float64], Tensor[(2640), float64]) */;
    %788.5
  };
  %789() /* ty=Tensor[(2640), float64] */
}

def @func_1360() -> Tensor[(528), float32] {
  %790 = fn () -> Tensor[(528), float32] {
    @func_752() /* ty=Tensor[(528), float32] */
  };
  %790() /* ty=Tensor[(528), float32] */
}

def @func_2279() -> (Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) {
  @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */
}

def @func_4933(%var_4932: Tensor[(33), float64]) -> (Tensor[(33), uint16], Tensor[(10080), float32]) {
  %802 = fn (%var_4909: Tensor[(33), float64]) -> (Tensor[(33), uint16], Tensor[(10080), float32]) {
    %791 = @func_4335() /* ty=(Tensor[(33), float64],) */;
    %792 = %791.0;
    %793 = cast(%var_4909, dtype="uint16") /* ty=Tensor[(33), uint16] */;
    %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(1), int32] */;
    %795 = cast(%792, dtype="uint16") /* ty=Tensor[(33), uint16] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %797 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
    %798 = %797.0;
    %799 = cast(%798, dtype="float32") /* ty=Tensor[(10080), float32] */;
    %800 = minimum(%795, %796) /* ty=Tensor[(33), uint16] */;
    %801 = log10(%799) /* ty=Tensor[(10080), float32] */;
    (%800, %801)
  };
  %802(%var_4932) /* ty=(Tensor[(33), uint16], Tensor[(10080), float32]) */
}

def @func_7881(%var_7880: Tensor[(10, 3, 15), float64]) -> (Tensor[(10, 3, 15), float64], Tensor[(10, 3, 15), float64]) {
  %807 = fn (%var_7836: Tensor[(10, 3, 15), float64]) -> (Tensor[(10, 3, 15), float64], Tensor[(10, 3, 15), float64]) {
    %803 = cast(%var_7836, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
    %804 = cast(%var_7836, dtype="float64") /* ty=Tensor[(10, 3, 15), float64] */;
    %805 = erf(%803) /* ty=Tensor[(10, 3, 15), float64] */;
    %806 = tan(%804) /* ty=Tensor[(10, 3, 15), float64] */;
    (%805, %806)
  };
  %807(%var_7880) /* ty=(Tensor[(10, 3, 15), float64], Tensor[(10, 3, 15), float64]) */
}

def @func_1052() -> (Tensor[(33), float32], Tensor[(33), float64]) {
  %808 = @func_782() /* ty=(Tensor[(33), float64],) */;
  %809 = %808.0;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(33), float32] */;
  %811 = rsqrt(%810) /* ty=Tensor[(33), float32] */;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(33), float32] */;
  %813 = cast(%811, dtype="float64") /* ty=Tensor[(33), float64] */;
  %814 = log10(%812) /* ty=Tensor[(33), float32] */;
  %815 = sin(%813) /* ty=Tensor[(33), float64] */;
  (%814, %815)
}

def @func_7618() -> (Tensor[(11, 16, 3), float32], Tensor[(10080), uint32]) {
  @func_7616() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10080), uint32]) */
}

def @func_6216() -> (Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64]) {
  %816 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
  %817 = cast(meta[relay.Constant][37] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %818 = reshape(%817, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %819 = %816.1;
  %820 = @func_824(%818) /* ty=Tensor[(33), bool] */;
  (%819, %820, meta[relay.Constant][37] /* ty=Tensor[(33), float64] */)
}

def @func_1134() -> (Tensor[(11, 16, 3), float32],) {
  @func_1132() /* ty=(Tensor[(11, 16, 3), float32],) */
}

def @func_6406() -> (Tensor[(33), float64], Tensor[(11, 16, 3), float32]) {
  %821 = @func_4335() /* ty=(Tensor[(33), float64],) */;
  %822 = @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */;
  %823 = %821.0;
  %824 = %822.1;
  (%823, %824)
}

def @func_3197() -> (Tensor[(528), float32],) {
  @func_3195() /* ty=(Tensor[(528), float32],) */
}

def @func_1543() -> (Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) {
  @func_1541() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(10, 14, 12), float64], Tensor[(1680), float32]) */
}

def @func_1157(%var_1147: Tensor[(16, 15, 11), float64]) -> (Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) {
  %825 = cast(%var_1147, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %826 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 33), float64] */, dtype="float64") /* ty=Tensor[(1, 33), float64] */;
  %827 = reshape(%826, newshape=[33]) /* ty=Tensor[(33), float64] */;
  %828 = sin(%825) /* ty=Tensor[(16, 15, 11), float64] */;
  %829 = @func_824(%827) /* ty=Tensor[(33), bool] */;
  (%828, %829, meta[relay.Constant][38] /* ty=Tensor[(1, 33), float64] */)
}

def @func_4257(%var_4255: Tensor[(3, 1, 5), float32]) -> (Tensor[(3, ?, 5), float32], Tensor[(33), float64]) {
  @func_4254(%var_4255) /* ty=(Tensor[(3, ?, 5), float32], Tensor[(33), float64]) */
}

def @func_3639() -> (Tensor[(1680), float32], Tensor[(528), float32]) {
  %833 = fn () -> (Tensor[(1680), float32], Tensor[(528), float32]) {
    %830 = @func_1419() /* ty=(Tensor[(528), float32],) */;
    %831 = @func_3583() /* ty=Tensor[(1680), float32] */;
    %832 = %830.0;
    (%831, %832)
  };
  %833() /* ty=(Tensor[(1680), float32], Tensor[(528), float32]) */
}

def @func_7172(%var_7170: Tensor[(8, 15, 5), uint32]) -> Tensor[(8, 15, 5), uint32] {
  @func_7169(%var_7170) /* ty=Tensor[(8, 15, 5), uint32] */
}

def @func_4371() -> (Tensor[(33), bool],) {
  %834 = @func_3565() /* ty=Tensor[(33), bool] */;
  (%834,)
}

def @func_6785() -> (Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) {
  %835 = cast(meta[relay.Constant][39] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %836 = reshape(%835, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %837 = @func_1113(%836) /* ty=(Tensor[(33), float64], Tensor[(33), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */;
  %838 = @func_4494() /* ty=Tensor[(528), float32] */;
  %839 = %837.2;
  (%838, %839, meta[relay.Constant][39] /* ty=Tensor[(325), uint8] */)
}

def @func_3314(%var_3312: Tensor[(6, 1, 5), float64], %var_3313: Tensor[(6, 3, 5), float64]) -> (Tensor[(6, 3, 5), float64], Tensor[(33), float64]) {
  @func_3310(%var_3312, %var_3313) /* ty=(Tensor[(6, 3, 5), float64], Tensor[(33), float64]) */
}

def @func_7616() -> (Tensor[(11, 16, 3), float32], Tensor[(10080), uint32]) {
  %840 = @func_4474() /* ty=(Tensor[(10080), uint32],) */;
  %841 = @func_6823() /* ty=Tensor[(11, 16, 3), float32] */;
  %842 = %840.0;
  (%841, %842)
}

def @func_972() -> (Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) {
  @func_970() /* ty=(Tensor[(528), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32]) */
}

def @func_6614() -> (Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64], Tensor[(64), float32]) {
  %849 = fn () -> (Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64], Tensor[(64), float32]) {
    %843 = cast(meta[relay.Constant][40] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
    %844 = reshape(%843, newshape=[33]) /* ty=Tensor[(33), float64] */;
    %845 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
    %846 = @func_1359() /* ty=Tensor[(528), float32] */;
    %847 = @func_824(%844) /* ty=Tensor[(33), bool] */;
    %848 = %845.2;
    (%846, %847, meta[relay.Constant][40] /* ty=Tensor[(33), float64] */, %848)
  };
  %849() /* ty=(Tensor[(528), float32], Tensor[(33), bool], Tensor[(33), float64], Tensor[(64), float32]) */
}

def @func_1489(%var_1487: Tensor[(1, 1680), float32], %var_1488: Tensor[(6, 1680), float32]) -> (Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) {
  %870 = fn (%var_1449: Tensor[(1, 1680), float32], %var_1461: Tensor[(6, 1680), float32]) -> (Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) {
    %850 = @func_1419() /* ty=(Tensor[(528), float32],) */;
    %851 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 63), uint64] */, dtype="uint64") /* ty=Tensor[(7, 63), uint64] */;
    %852 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 63), uint64] */, dtype="uint64") /* ty=Tensor[(7, 63), uint64] */;
    %853 = cast(%var_1449, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
    %854 = reshape(%851, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
    %855 = reshape(%852, newshape=[7, 7, 9]) /* ty=Tensor[(7, 7, 9), uint64] */;
    %856 = reshape(%853, newshape=[840, 2]) /* ty=Tensor[(840, 2), float32] */;
    %857 = @func_1330(%854, %855, %856) /* ty=(Tensor[(7, 7, 9), uint64], Tensor[(10, 14, 12), float64], Tensor[(840, 2), float32]) */;
    %858 = cast(%var_1449, dtype="float32") /* ty=Tensor[(1, 1680), float32] */;
    %859 = cast(%var_1461, dtype="float32") /* ty=Tensor[(6, 1680), float32] */;
    %860 = @func_1419() /* ty=(Tensor[(528), float32],) */;
    %861 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %862 = @func_1359() /* ty=Tensor[(528), float32] */;
    %863 = %850.0;
    %864 = %857.0;
    %865 = @func_669() /* ty=Tensor[(528), float32] */;
    %866 = divide(%858, %859) /* ty=Tensor[(6, 1680), float32] */;
    %867 = @func_1359() /* ty=Tensor[(528), float32] */;
    %868 = %860.0;
    %869 = %861.1;
    (%862, %863, %864, meta[relay.Constant][41] /* ty=Tensor[(7, 63), uint64] */, %865, %866, %867, %868, %869)
  };
  %870(%var_1487, %var_1488) /* ty=(Tensor[(528), float32], Tensor[(528), float32], Tensor[(7, 7, 9), uint64], Tensor[(7, 63), uint64], Tensor[(528), float32], Tensor[(6, 1680), float32], Tensor[(528), float32], Tensor[(528), float32], Tensor[(11, 16, 3), float32]) */
}

def @func_5195(%var_5182: Tensor[(8, 6, 10), uint64], %var_5183: Tensor[(8, 6, 10), uint64]) -> (Tensor[(8, 6, 10), uint64],) {
  %871 = cast(%var_5183, dtype="uint64") /* ty=Tensor[(8, 6, 10), uint64] */;
  %872 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%var_5182, dtype="uint64") /* ty=Tensor[(8, 6, 10), uint64] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %875 = minimum(%873, %874) /* ty=Tensor[(8, 6, 10), uint64] */;
  (%875,)
}

def @func_2133() -> (Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */
}

def @func_4547() -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(33), bool], Tensor[(2640), float64]) {
  %884 = fn () -> (Tensor[(528), float32], Tensor[(33), float32], Tensor[(33), bool], Tensor[(2640), float64]) {
    %876 = @func_1270() /* ty=(Tensor[(528), float32],) */;
    %877 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
    %878 = cast(meta[relay.Constant][42] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
    %879 = reshape(%878, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
    %880 = @func_1157(%879) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(33), bool], Tensor[(1, 33), float64]) */;
    %881 = %876.0;
    %882 = %877.2;
    %883 = %880.1;
    (%881, %882, %883, meta[relay.Constant][42] /* ty=Tensor[(2640), float64] */)
  };
  %884() /* ty=(Tensor[(528), float32], Tensor[(33), float32], Tensor[(33), bool], Tensor[(2640), float64]) */
}

def @func_6803() -> Tensor[(33), float64] {
  %886 = fn () -> Tensor[(33), float64] {
    %885 = @func_4335() /* ty=(Tensor[(33), float64],) */;
    %885.0
  };
  %886() /* ty=Tensor[(33), float64] */
}

def @func_1880(%var_1849: Tensor[(2640), float64]) -> (Tensor[(528), float32], Tensor[(325), uint8], Tensor[(2640), float64], Tensor[(325), uint8]) {
  %887 = cast(%var_1849, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %888 = cast(meta[relay.Constant][43] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %889 = reshape(%887, newshape=[2640]) /* ty=Tensor[(2640), float64] */;
  %890 = reshape(%888, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %891 = @func_1645(%889, %890) /* ty=(Tensor[(33), int8], Tensor[(11, 16, 3), float32], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(33), float64], Tensor[(325), uint8], Tensor[(528), float32]) */;
  %892 = @func_1359() /* ty=Tensor[(528), float32] */;
  %893 = %891.5;
  (%892, %893, %var_1849, meta[relay.Constant][43] /* ty=Tensor[(325), uint8] */)
}

def @func_6000() -> (Tensor[(10, 14, 12), float64],) {
  %894 = @func_2888() /* ty=(Tensor[(528), float32], Tensor[(33), float64], Tensor[(10, 14, 12), float64]) */;
  %895 = %894.2;
  %896 = cast(%895, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %897 = tan(%896) /* ty=Tensor[(10, 14, 12), float64] */;
  (%897,)
}

def @func_784() -> (Tensor[(33), float64],) {
  @func_782() /* ty=(Tensor[(33), float64],) */
}

def @func_1075() -> Tensor[(528), float32] {
  %899 = fn () -> Tensor[(528), float32] {
    %898 = @func_602() /* ty=(Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %898.2
  };
  %899() /* ty=Tensor[(528), float32] */
}

def @func_4474() -> (Tensor[(10080), uint32],) {
  %900 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
  %901 = %900.3;
  %902 = cast(%901, dtype="float64") /* ty=Tensor[(10080), float64] */;
  %903 = exp(%902) /* ty=Tensor[(10080), float64] */;
  %904 = cast(%903, dtype="float32") /* ty=Tensor[(10080), float32] */;
  %905 = cosh(%904) /* ty=Tensor[(10080), float32] */;
  %906 = cast(%903, dtype="uint32") /* ty=Tensor[(10080), uint32] */;
  %907 = shape_of(%905, dtype="int32") /* ty=Tensor[(1), int32] */;
  %908 = cast(%905, dtype="uint32") /* ty=Tensor[(10080), uint32] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %910 = multiply(%908, %909) /* ty=Tensor[(10080), uint32] */;
  (%910,)
}

def @func_602() -> (Tensor[(33), float32], Tensor[(11, 16, 3), float32], Tensor[(528), float32]) {
  %911 = @func_503() /* ty=(Tensor[(?, 8, 8), int16], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32]) */;
  %912 = %911.2;
  %913 = cast(%912, dtype="float32") /* ty=Tensor[(33), float32] */;
  %914 = cast(meta[relay.Constant][44] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %915 = reshape(%913, newshape=[11, 1, 3]) /* ty=Tensor[(11, 1, 3), float32] */;
  %916 = reshape(%914, newshape=[11, 16, 3]) /* ty=Tensor[(11, 16, 3), float32] */;
  %917 = @func_458(%915, %916) /* ty=(Tensor[(11, 16, 3), float32],) */;
  %918 = %917.0;
  (%912, %918, meta[relay.Constant][44] /* ty=Tensor[(528), float32] */)
}

def @func_4567() -> (Tensor[(528), float32], Tensor[(33), bool]) {
  %919 = @func_3111() /* ty=(Tensor[(528), float32],) */;
  %920 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %921 = %919.0;
  %922 = %920.3;
  (%921, %922)
}

def @func_2459() -> (Tensor[(528), float32],) {
  %923 = @func_1419() /* ty=(Tensor[(528), float32],) */;
  %924 = %923.0;
  (%924,)
}

def @func_7192(%var_7190: Tensor[(1, 12, 15), uint32], %var_7191: Tensor[(2, 12, 15), uint32]) -> Tensor[(2, 12, 15), uint32] {
  %927 = fn (%var_7184: Tensor[(1, 12, 15), uint32], %var_7185: Tensor[(2, 12, 15), uint32]) -> Tensor[(2, 12, 15), uint32] {
    %925 = cast(%var_7184, dtype="uint32") /* ty=Tensor[(1, 12, 15), uint32] */;
    %926 = cast(%var_7185, dtype="uint32") /* ty=Tensor[(2, 12, 15), uint32] */;
    bitwise_xor(%925, %926) /* ty=Tensor[(2, 12, 15), uint32] */
  };
  %927(%var_7190, %var_7191) /* ty=Tensor[(2, 12, 15), uint32] */
}

def @func_1706() -> Tensor[(33), float64] {
  @func_1704() /* ty=Tensor[(33), float64] */
}

def @func_4254(%var_4246: Tensor[(3, 1, 5), float32]) -> (Tensor[(3, ?, 5), float32], Tensor[(33), float64]) {
  %928 = cast(%var_4246, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
  %929 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(3, 1, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %930 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %932 = @func_1052() /* ty=(Tensor[(33), float32], Tensor[(33), float64]) */;
  %933 = floor_mod(%930, %931) /* ty=Tensor[(3, ?, 5), float32] */;
  %934 = %932.1;
  (%933, %934)
}

def @func_6673() -> (Tensor[(11, 16, 3), float32],) {
  %935 = @func_6406() /* ty=(Tensor[(33), float64], Tensor[(11, 16, 3), float32]) */;
  %936 = %935.1;
  (%936,)
}

def @func_7138() -> (Tensor[(64), float32],) {
  %937 = @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */;
  %938 = %937.2;
  (%938,)
}

def @func_5659(%var_5656: Tensor[(10080), uint32], %var_5657: Tensor[(10080), uint32], %var_5658: Tensor[(360), float64]) -> (Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(10080), bool], Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(528), float32], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) {
  @func_5654(%var_5656, %var_5657, %var_5658) /* ty=(Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(10080), bool], Tensor[(528), float32], Tensor[(10080), uint16], Tensor[(528), float32], Tensor[(9, 8, 5), float64], Tensor[(40), float64], Tensor[(360), float64]) */
}

def @func_7982() -> (Tensor[(528), float32], Tensor[(528), float32]) {
  @func_7980() /* ty=(Tensor[(528), float32], Tensor[(528), float32]) */
}

def @func_8179() -> (Tensor[(1680), float32],) {
  %940 = fn () -> (Tensor[(1680), float32],) {
    %939 = @func_3583() /* ty=Tensor[(1680), float32] */;
    (%939,)
  };
  %940() /* ty=(Tensor[(1680), float32],) */
}

def @func_5539() -> Tensor[(528), float32] {
  %942 = fn () -> Tensor[(528), float32] {
    %941 = @func_2459() /* ty=(Tensor[(528), float32],) */;
    %941.0
  };
  %942() /* ty=Tensor[(528), float32] */
}

def @func_4569() -> (Tensor[(528), float32], Tensor[(33), bool]) {
  @func_4567() /* ty=(Tensor[(528), float32], Tensor[(33), bool]) */
}

def @func_782() -> (Tensor[(33), float64],) {
  %943 = @func_542() /* ty=Tensor[(33), float64] */;
  (%943,)
}

def @func_8246() -> Tensor[(2640), float64] {
  @func_8244() /* ty=Tensor[(2640), float64] */
}

def @func_4437() -> (Tensor[(528), float32],) {
  @func_4435() /* ty=(Tensor[(528), float32],) */
}

def @func_2080(%var_2077: Tensor[(7, 7, 2), float32], %var_2078: Tensor[(33), float32], %var_2079: Tensor[(12, 220), float64]) -> (Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) {
  @func_2075(%var_2077, %var_2078, %var_2079) /* ty=(Tensor[(7, 7, 2), float32], Tensor[(11, 16, 3), float32], Tensor[(33), float32], Tensor[(528), float32], Tensor[(33), int8], Tensor[(12, 220), float64], Tensor[(325, 1), uint8], Tensor[(528), float32]) */
}

def @func_1818(%var_1817: Tensor[(33), float64]) -> (Tensor[(33), int16],) {
  %950 = fn (%var_1770: Tensor[(33), float64]) -> (Tensor[(33), int16],) {
    %944 = @func_1704() /* ty=Tensor[(33), float64] */;
    %945 = cast(%var_1770, dtype="int16") /* ty=Tensor[(33), int16] */;
    %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(1), int32] */;
    %947 = cast(%944, dtype="int16") /* ty=Tensor[(33), int16] */;
    %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?), int16] */;
    %949 = bitwise_and(%947, %948) /* ty=Tensor[(33), int16] */;
    (%949,)
  };
  %950(%var_1817) /* ty=(Tensor[(33), int16],) */
}

def @func_4073() -> (Tensor[(528), uint8], Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(33), uint16]) {
  %974 = fn () -> (Tensor[(528), uint8], Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(33), uint16]) {
    %951 = @func_1074() /* ty=Tensor[(528), float32] */;
    %952 = cast(meta[relay.Constant][46] /* ty=Tensor[(528), float32] */, dtype="uint8") /* ty=Tensor[(528), uint8] */;
    %953 = shape_of(%951, dtype="int32") /* ty=Tensor[(1), int32] */;
    %954 = cast(%951, dtype="uint8") /* ty=Tensor[(528), uint8] */;
    %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %956 = @func_2131() /* ty=(Tensor[(11, 16, 3), float32], Tensor[(528), float32]) */;
    %957 = cast(meta[relay.Constant][47] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %958 = cast(meta[relay.Constant][47] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %959 = reshape(%957, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %960 = reshape(%958, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %961 = @func_774(%959, %960) /* ty=(Tensor[(5, 13, 5), bool],) */;
    %962 = @func_2277() /* ty=(Tensor[(33), float64], Tensor[(10, 14, 12), float64], Tensor[(1680), float32], Tensor[(528), float32]) */;
    %963 = %962.0;
    %964 = cast(%963, dtype="float64") /* ty=Tensor[(33), float64] */;
    %965 = acos(%964) /* ty=Tensor[(33), float64] */;
    %966 = cast(%963, dtype="uint16") /* ty=Tensor[(33), uint16] */;
    %967 = shape_of(%965, dtype="int32") /* ty=Tensor[(1), int32] */;
    %968 = cast(%965, dtype="uint16") /* ty=Tensor[(33), uint16] */;
    %969 = dyn.reshape(%966, %967, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %970 = multiply(%954, %955) /* ty=Tensor[(528), uint8] */;
    %971 = %956.1;
    %972 = %961.0;
    %973 = left_shift(%968, %969) /* ty=Tensor[(33), uint16] */;
    (%970, %971, %972, meta[relay.Constant][47] /* ty=Tensor[(325), uint8] */, %973)
  };
  %974() /* ty=(Tensor[(528), uint8], Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(33), uint16]) */
}

def @func_1208(%var_1207: Tensor[(3, 10, 6), float32]) -> Tensor[(3, 10, 6), float32] {
  %976 = fn (%var_1180: Tensor[(3, 10, 6), float32]) -> Tensor[(3, 10, 6), float32] {
    %975 = cast(%var_1180, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
    acos(%975) /* ty=Tensor[(3, 10, 6), float32] */
  };
  %976(%var_1207) /* ty=Tensor[(3, 10, 6), float32] */
}

def @func_544() -> Tensor[(33), float64] {
  @func_542() /* ty=Tensor[(33), float64] */
}

def @func_3195() -> (Tensor[(528), float32],) {
  %977 = @func_3024() /* ty=(Tensor[(528), float32], Tensor[(33), int16], Tensor[(33), float32], Tensor[(33), bool]) */;
  %978 = %977.0;
  (%978,)
}

def @func_4741() -> (Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) {
  @func_4739() /* ty=(Tensor[(1680), float32], Tensor[(4, 8, 2), bool], Tensor[(64), float32], Tensor[(3, ?, 5), float32], Tensor[(15), float32], Tensor[(33), uint16]) */
}

def @func_2014(%var_2004: Tensor[(8, 10, 2), uint64], %var_2005: Tensor[(8, 10, 2), uint64]) -> Tensor[(8, 10, 2), uint64] {
  %979 = cast(%var_2005, dtype="uint64") /* ty=Tensor[(8, 10, 2), uint64] */;
  %980 = shape_of(%var_2004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%var_2004, dtype="uint64") /* ty=Tensor[(8, 10, 2), uint64] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%981, %982) /* ty=Tensor[(8, 10, 2), uint64] */
}

def @func_7156(%var_7155: Tensor[(4, 5, 9), float64]) -> Tensor[(4, 5, 9), float64] {
  %984 = fn (%var_7150: Tensor[(4, 5, 9), float64]) -> Tensor[(4, 5, 9), float64] {
    %983 = cast(%var_7150, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
    atan(%983) /* ty=Tensor[(4, 5, 9), float64] */
  };
  %984(%var_7155) /* ty=Tensor[(4, 5, 9), float64] */
}

def @func_6787() -> (Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) {
  @func_6785() /* ty=(Tensor[(528), float32], Tensor[(5, 13, 5), bool], Tensor[(325), uint8]) */
}

def @func_5497(%var_5496: Tensor[(33), float64]) -> (Tensor[(6, 1680), float32], Tensor[(33), int32]) {
  %1000 = fn (%var_5483: Tensor[(33), float64]) -> (Tensor[(6, 1680), float32], Tensor[(33), int32]) {
    %985 = @func_2824() /* ty=(Tensor[(33), float32], Tensor[(6, 1680), float32], Tensor[(1680), float32], Tensor[(10080), float32]) */;
    %986 = %985.1;
    %987 = cast(%986, dtype="float32") /* ty=Tensor[(6, 1680), float32] */;
    %988 = @func_1704() /* ty=Tensor[(33), float64] */;
    %989 = cast(%var_5483, dtype="bool") /* ty=Tensor[(33), bool] */;
    %990 = shape_of(%988, dtype="int32") /* ty=Tensor[(1), int32] */;
    %991 = cast(%988, dtype="bool") /* ty=Tensor[(33), bool] */;
    %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?), bool] */;
    %993 = logical_or(%991, %992) /* ty=Tensor[(33), bool] */;
    %994 = cast(%988, dtype="int32") /* ty=Tensor[(33), int32] */;
    %995 = shape_of(%993, dtype="int32") /* ty=Tensor[(1), int32] */;
    %996 = cast(%993, dtype="int32") /* ty=Tensor[(33), int32] */;
    %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?), int32] */;
    %998 = sin(%987) /* ty=Tensor[(6, 1680), float32] */;
    %999 = add(%996, %997) /* ty=Tensor[(33), int32] */;
    (%998, %999)
  };
  %1000(%var_5496) /* ty=(Tensor[(6, 1680), float32], Tensor[(33), int32]) */
}

def @func_4238() -> (Tensor[(10, 14, 12), float64], Tensor[(528), float32]) {
  @func_4236() /* ty=(Tensor[(10, 14, 12), float64], Tensor[(528), float32]) */
}

def @func_4122() -> Tensor[(1680), float32] {
  %1002 = fn () -> Tensor[(1680), float32] {
    %1001 = @func_3638() /* ty=(Tensor[(1680), float32], Tensor[(528), float32]) */;
    %1001.0
  };
  %1002() /* ty=Tensor[(1680), float32] */
}

def @func_7668() -> (Tensor[(33), bool],) {
  @func_7666() /* ty=(Tensor[(33), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen299/build/output.py", line 3066, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:04:51] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

