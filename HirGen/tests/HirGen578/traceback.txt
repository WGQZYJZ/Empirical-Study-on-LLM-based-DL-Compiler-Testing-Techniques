==========mod==========
#[version = "0.0.5"]
def @func_5438() -> (Tensor[(11, 12, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(11, 12, 10), float64], Tensor[(11, 12, 10), float32], Tensor[(64, 1), bool], Tensor[(256), bool]) {
  %0 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="float64") /* ty=Tensor[(11, 12, 10), float64] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="float32") /* ty=Tensor[(11, 12, 10), float32] */;
  %7 = cast(meta[relay.Constant][2] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
  %8 = reshape(%7, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %9 = @func_3326(%8) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) */;
  %10 = equal(%2, %3) /* ty=Tensor[(11, 12, 10), bool] */;
  %11 = %4.0;
  %12 = asinh(%5) /* ty=Tensor[(11, 12, 10), float64] */;
  %13 = rsqrt(%6) /* ty=Tensor[(11, 12, 10), float32] */;
  %14 = %9.1;
  (%10, %11, %12, %13, %14, meta[relay.Constant][2] /* ty=Tensor[(256), bool] */)
}

def @func_2430() -> (Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) {
  %15 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %16 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  (%15, %16)
}

def @func_1362() -> (Tensor[(6, 1, 8), float64],) {
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 8), float64] */;
  %18 = sin(%17) /* ty=Tensor[(6, 1, 8), float64] */;
  (%18,)
}

def @func_295() -> (Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) {
  %19 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="uint16") /* ty=Tensor[(4, 11, 7), uint16] */;
  %20 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="uint16") /* ty=Tensor[(4, 11, 7), uint16] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %23 = cast(meta[relay.Constant][6] /* ty=Tensor[(64, 1), bool] */, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %24 = reshape(%23, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
  %25 = bitwise_xor(%21, %22) /* ty=Tensor[(4, 11, 7), uint16] */;
  %26 = @func_105(%24) /* ty=Tensor[(16, 1, 4), bool] */;
  (%25, %26, meta[relay.Constant][6] /* ty=Tensor[(64, 1), bool] */)
}

def @func_6164() -> (Tensor[(64, 6), uint32],) {
  %27 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %29 = log2(%28) /* ty=Tensor[(64, 6), float64] */;
  %30 = cast(meta[relay.Constant][7] /* ty=Tensor[(64, 6), float64] */, dtype="uint32") /* ty=Tensor[(64, 6), uint32] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(2), int32] */;
  %32 = cast(%29, dtype="uint32") /* ty=Tensor[(64, 6), uint32] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %34 = minimum(%32, %33) /* ty=Tensor[(64, 6), uint32] */;
  (%34,)
}

def @func_1095(%var_1065: Tensor[(48), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) {
  %35 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %37 = cast(%var_1065, dtype="bool") /* ty=Tensor[(48), bool] */;
  %38 = reshape(%37, newshape=[12, 2, 2]) /* ty=Tensor[(12, 2, 2), bool] */;
  %39 = cast(%35, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %40 = erf(%39) /* ty=Tensor[(64, 6), float64] */;
  %41 = cast(%35, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %42 = asinh(%41) /* ty=Tensor[(64, 6), float64] */;
  %43 = cast(%42, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %44 = shape_of(%40, dtype="int32") /* ty=Tensor[(2), int32] */;
  %45 = cast(%40, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %47 = cast(%40, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %48 = shape_of(%35, dtype="int32") /* ty=Tensor[(2), int32] */;
  %49 = cast(%35, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %51 = atanh(%36) /* ty=Tensor[(64, 6), float32] */;
  %52 = @func_348(%38) /* ty=Tensor[(12, 2, 2), bool] */;
  %53 = less_equal(%45, %46) /* ty=Tensor[(64, 6), bool] */;
  %54 = equal(%49, %50) /* ty=Tensor[(64, 6), bool] */;
  (%51, %52, %var_1065, %53, %54)
}

def @func_5594(%var_5566: Tensor[(15, 16, 3), float32], %var_5567: Tensor[(15, 16, 3), float32], %var_5575: Tensor[(120), float64], %var_5576: Tensor[(1560), float64], %var_5577: Tensor[(1920), float64]) -> (Tensor[(15, 16, 3), float32], Tensor[(96, 20), float64], Tensor[(120), float64], Tensor[(1560), float64], Tensor[(1920), float64], Tensor[(16, 1, 4), bool]) {
  %55 = cast(%var_5567, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %56 = shape_of(%var_5566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_5566, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %59 = cast(%var_5575, dtype="float64") /* ty=Tensor[(120), float64] */;
  %60 = cast(%var_5576, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %61 = cast(%var_5577, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %62 = reshape(%59, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
  %63 = reshape(%60, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %64 = reshape(%61, newshape=[96, 20]) /* ty=Tensor[(96, 20), float64] */;
  %65 = @func_2596(%62, %63, %64) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) */;
  %66 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %67 = mod(%57, %58) /* ty=Tensor[(15, 16, 3), float32] */;
  %68 = %65.2;
  %69 = %66.1;
  (%67, %68, %var_5575, %var_5576, %var_5577, %69)
}

def @func_2414() -> (Tensor[(16, 10, 4), float64],) {
  %70 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  (%70,)
}

def @func_4087(%var_4067: Tensor[(64, 6), bool]) -> (Tensor[(64, 6), int8], Tensor[(64, 8), uint32]) {
  %71 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
  %72 = cast(%var_4067, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
  %73 = shape_of(%71, dtype="int32") /* ty=Tensor[(2), int32] */;
  %74 = cast(%71, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %76 = cast(meta[relay.Constant][8] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %77 = reshape(%76, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
  %78 = @func_900(%77) /* ty=(Tensor[(64, 8), float32],) */;
  %79 = %78.0;
  %80 = cast(meta[relay.Constant][8] /* ty=Tensor[(512), bool] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
  %82 = cast(%79, dtype="uint32") /* ty=Tensor[(64, 8), uint32] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %84 = bitwise_and(%74, %75) /* ty=Tensor[(64, 6), int8] */;
  %85 = bitwise_xor(%82, %83) /* ty=Tensor[(64, 8), uint32] */;
  (%84, %85)
}

def @func_4771(%var_4749: Tensor[(64), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %86 = cast(%var_4749, dtype="bool") /* ty=Tensor[(64), bool] */;
  %87 = reshape(%86, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
  %88 = @func_2414() /* ty=(Tensor[(16, 10, 4), float64],) */;
  %89 = @func_4246() /* ty=(Tensor[(64, 6), bool],) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %92 = cosh(%91) /* ty=Tensor[(64, 6), float64] */;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %94 = @func_105(%87) /* ty=Tensor[(16, 1, 4), bool] */;
  %95 = %88.0;
  %96 = exp(%93) /* ty=Tensor[(64, 6), float32] */;
  (%94, %var_4749, %95, %96)
}

def @func_467(%var_453: Tensor[(11, 11, 1), float64]) -> (Tensor[(11, 11, 1), float64],) {
  %97 = cast(%var_453, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
  %98 = log2(%97) /* ty=Tensor[(11, 11, 1), float64] */;
  (%98,)
}

def @func_3013() -> Tensor[(64, 6), bool] {
  %99 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %100 = cast(meta[relay.Constant][9] /* ty=Tensor[(64, 6), float32] */, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(2), int32] */;
  %102 = cast(%99, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%102, %103) /* ty=Tensor[(64, 6), bool] */
}

def @func_1580(%var_1568: Tensor[(64, 8), float64]) -> (Tensor[(64, 8), float32],) {
  %104 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %105 = %104.0;
  %106 = cast(%var_1568, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(2), int32] */;
  %108 = cast(%105, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %110 = floor_divide(%108, %109) /* ty=Tensor[(64, 8), float32] */;
  (%110,)
}

def @func_3854(%var_3819: Tensor[(384), bool]) -> (Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool]) {
  %111 = cast(%var_3819, dtype="bool") /* ty=Tensor[(384), bool] */;
  %112 = reshape(%111, newshape=[384]) /* ty=Tensor[(384), bool] */;
  %113 = @func_3503(%112) /* ty=(Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool], Tensor[(48), bool]) */;
  %114 = @func_3425() /* ty=Tensor[(64, 8), float64] */;
  %115 = %113.1;
  (%114, %115, %var_3819)
}

def @func_5767() -> (Tensor[(4, 16, 14), float64], Tensor[(16, 10, 4), float64]) {
  %116 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
  %117 = @func_2430() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) */;
  %118 = rsqrt(%116) /* ty=Tensor[(4, 16, 14), float64] */;
  %119 = %117.1;
  (%118, %119)
}

def @func_4319() -> (Tensor[(16, 10, 4), float64],) {
  %120 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  (%120,)
}

def @func_1718() -> (Tensor[(16, 1, 4), bool],) {
  %121 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %122 = %121.0;
  (%122,)
}

def @func_3326(%var_3265: Tensor[(256), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) {
  %123 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %124 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %125 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %126 = cast(%var_3265, dtype="bool") /* ty=Tensor[(256), bool] */;
  %127 = reshape(%125, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %128 = reshape(%126, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %129 = @func_2094(%127, %128) /* ty=(Tensor[(64, 9), float32], Tensor[(576), bool], Tensor[(6, 1, 8), float64], Tensor[(640), float64], Tensor[(256), bool], Tensor[(121, 1), float64], Tensor[(4, 11, 7), float64]) */;
  %130 = cast(meta[relay.Constant][12] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %131 = reshape(%130, newshape=[64, 8]) /* ty=Tensor[(64, 8), float64] */;
  %132 = @func_1580(%131) /* ty=(Tensor[(64, 8), float32],) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="int8") /* ty=Tensor[(64, 8), int8] */;
  %135 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(512), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %136 = cast(meta[relay.Constant][12] /* ty=Tensor[(512), float64] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?), int8] */;
  %138 = cast(meta[relay.Constant][12] /* ty=Tensor[(512), float64] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %139 = cast(%var_3265, dtype="bool") /* ty=Tensor[(256), bool] */;
  %140 = reshape(%138, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %141 = reshape(%139, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %142 = @func_1433(%140, %141) /* ty=(Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) */;
  %143 = cast(meta[relay.Constant][13] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %144 = reshape(%143, newshape=[6, 4, 1]) /* ty=Tensor[(6, 4, 1), float64] */;
  %145 = @func_874(%144) /* ty=(Tensor[(6, 4, 15), bool], Tensor[(64, 6), float32]) */;
  %146 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %147 = %123.1;
  %148 = %124.2;
  %149 = %129.4;
  %150 = logical_xor(%136, %137) /* ty=Tensor[(512), int8] */;
  %151 = %142.4;
  %152 = %145.1;
  %153 = %146.0;
  (%147, %148, %149, meta[relay.Constant][11] /* ty=Tensor[(576), bool] */, %var_3265, %150, %151, %152, meta[relay.Constant][13] /* ty=Tensor[(24), float64] */, %153)
}

def @func_3396(%var_3386: Tensor[(64, 6), bool], %var_3392: Tensor[(48), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool]) {
  %154 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
  %155 = cast(%var_3386, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(2), int32] */;
  %157 = cast(%154, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %159 = cast(%var_3392, dtype="bool") /* ty=Tensor[(48), bool] */;
  %160 = reshape(%159, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %161 = @func_1095(%160) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
  %162 = power(%157, %158) /* ty=Tensor[(64, 6), float32] */;
  %163 = %161.1;
  (%162, %163, %var_3392)
}

def @func_5783() -> Tensor[(16, 1, 4), bool] {
  %164 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %164.0
}

def @func_655(%var_627: Tensor[(16, 10, 4), float64], %var_633: Tensor[(11, 11), float64]) -> (Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) {
  %165 = cast(%var_633, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
  %166 = reshape(%165, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %167 = @func_467(%166) /* ty=(Tensor[(11, 11, 1), float64],) */;
  %168 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %169 = cast(%var_627, dtype="uint64") /* ty=Tensor[(16, 10, 4), uint64] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="uint64") /* ty=Tensor[(16, 10, 4), uint64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %173 = minimum(%171, %172) /* ty=Tensor[(16, 10, 4), uint64] */;
  %174 = cast(%173, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
  %175 = %167.0;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
  %177 = reshape(%176, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %178 = @func_467(%177) /* ty=(Tensor[(11, 11, 1), float64],) */;
  %179 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %180 = erf(%174) /* ty=Tensor[(16, 10, 4), float64] */;
  %181 = %178.0;
  %182 = %179.1;
  (%175, %var_633, %180, %181, %182)
}

def @func_3109(%var_3087: Tensor[(5, 1, 7), uint64], %var_3096: Tensor[(8, 8), bool]) -> (Tensor[(5, 1, 7), uint64], Tensor[(16, 1, 4), bool], Tensor[(8, 8), bool], Tensor[(4, 11, 7), int16]) {
  %183 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %184 = cast(%var_3087, dtype="uint64") /* ty=Tensor[(5, 1, 7), uint64] */;
  %185 = cast(%var_3096, dtype="bool") /* ty=Tensor[(8, 8), bool] */;
  %186 = reshape(%185, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
  %187 = @func_3079() /* ty=(Tensor[(4, 11, 7), int16],) */;
  %188 = bitwise_xor(%183, %184) /* ty=Tensor[(5, 1, 7), uint64] */;
  %189 = @func_105(%186) /* ty=Tensor[(16, 1, 4), bool] */;
  %190 = %187.0;
  (%188, %189, %var_3096, %190)
}

def @func_1755(%var_1741: Tensor[(15, 16, 8), float64]) -> (Tensor[(15, 16, 8), float64],) {
  %191 = cast(%var_1741, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %192 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(15, 16, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %195 = floor_divide(%193, %194) /* ty=Tensor[(15, 16, 8), float64] */;
  (%195,)
}

def @func_2677() -> (Tensor[(16, ?, 4), bool],) {
  %196 = @func_2482() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) */;
  %197 = %196.0;
  %198 = @func_2482() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) */;
  %199 = %198.0;
  %200 = cast(%199, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %201 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%197, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %204 = logical_or(%202, %203) /* ty=Tensor[(16, ?, 4), bool] */;
  (%204,)
}

def @func_6045() -> (Tensor[(16, 10, 4), float64],) {
  %205 = @func_4797() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %206 = %205.0;
  (%206,)
}

def @func_1017() -> (Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) {
  %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %208 = reshape(%207, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
  %209 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %210 = @func_105(%208) /* ty=Tensor[(16, 1, 4), bool] */;
  %211 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  (%209, %210, meta[relay.Constant][16] /* ty=Tensor[(64), bool] */, %211)
}

def @func_6320(%var_6299: Tensor[(1, 3, 1), float32], %var_6314: Tensor[(32, 8), bool], %var_6315: Tensor[(121), float64]) -> (Tensor[(1, 3, 1), float32], Tensor[(640), float64], Tensor[(32, 8), bool], Tensor[(121), float64]) {
  %212 = cast(%var_6299, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %213 = cast(%var_6314, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %214 = cast(%var_6315, dtype="float64") /* ty=Tensor[(121), float64] */;
  %215 = reshape(%213, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %216 = reshape(%214, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %217 = @func_959(%215, %216) /* ty=(Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) */;
  %218 = rsqrt(%212) /* ty=Tensor[(1, 3, 1), float32] */;
  %219 = %217.3;
  (%218, %219, %var_6314, %var_6315)
}

def @func_3676() -> (Tensor[(64, 6), float32], Tensor[(64, 6), float64], Tensor[(16, ?, 4), bool]) {
  %220 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %222 = @func_2677() /* ty=(Tensor[(16, ?, 4), bool],) */;
  %223 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %224 = sin(%221) /* ty=Tensor[(64, 6), float64] */;
  %225 = %222.0;
  (%223, %224, %225)
}

def @func_4797() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %226 = @func_4033() /* ty=(Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) */;
  %227 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %228 = %226.1;
  %229 = %227.0;
  (%228, %229)
}

def @func_6400() -> (Tensor[(64, 8), float64],) {
  %230 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %231 = %230.0;
  (%231,)
}

def @func_4509(%var_4475: Tensor[(7, 8, 15), float32], %var_4505: Tensor[(512), bool]) -> (Tensor[(7, 8, 15), float32], Tensor[(64, 6), float32], Tensor[(512), bool]) {
  %232 = cast(%var_4475, dtype="float32") /* ty=Tensor[(7, 8, 15), float32] */;
  %233 = cast(%var_4505, dtype="bool") /* ty=Tensor[(512), bool] */;
  %234 = reshape(%233, newshape=[512, 1]) /* ty=Tensor[(512, 1), bool] */;
  %235 = @func_1634(%234) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) */;
  %236 = rsqrt(%232) /* ty=Tensor[(7, 8, 15), float32] */;
  %237 = %235.0;
  (%236, %237, %var_4505)
}

def @func_1227() -> (Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) {
  %238 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %239 = %238.0;
  %240 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="int16") /* ty=Tensor[(4, 11, 7), int16] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="int16") /* ty=Tensor[(4, 11, 7), int16] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %244 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %245 = left_shift(%242, %243) /* ty=Tensor[(4, 11, 7), int16] */;
  (%244, %245)
}

def @func_3425() -> Tensor[(64, 8), float64] {
  %246 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %246.0
}

def @func_5148(%var_5111: Tensor[(1, 330), float32]) -> (Tensor[(256), bool], Tensor[(16, 10, 4), float64], Tensor[(1, 330), float32]) {
  %247 = @func_4559() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 4), float32], Tensor[(256), bool]) */;
  %248 = cast(%var_5111, dtype="float32") /* ty=Tensor[(1, 330), float32] */;
  %249 = reshape(%248, newshape=[3, 10, 11]) /* ty=Tensor[(3, 10, 11), float32] */;
  %250 = @func_3979(%249) /* ty=(Tensor[(3, 10, 11), int32], Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(?, 256), float64], Tensor[(16, 1, 4), bool], Tensor[(35), uint64], Tensor[(?, 256), bool], Tensor[(16, ?, 4), bool], Tensor[(3, 10, 11), bool]) */;
  %251 = %247.2;
  %252 = %250.3;
  (%251, %252, %var_5111)
}

def @func_1530(%var_1522: Tensor[(1, 48), bool]) -> (Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(1, 48), bool]) {
  %253 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %254 = cast(%var_1522, dtype="bool") /* ty=Tensor[(1, 48), bool] */;
  %255 = reshape(%254, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %256 = @func_1095(%255) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
  %257 = %253.0;
  %258 = %256.0;
  (%257, %258, %var_1522)
}

def @func_2782() -> (Tensor[(16, 1, 4), bool],) {
  %259 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %260 = %259.1;
  (%260,)
}

def @func_2094(%var_2054: Tensor[(576), bool], %var_2073: Tensor[(256), bool]) -> (Tensor[(64, 9), float32], Tensor[(576), bool], Tensor[(6, 1, 8), float64], Tensor[(640), float64], Tensor[(256), bool], Tensor[(121, 1), float64], Tensor[(4, 11, 7), float64]) {
  %261 = cast(%var_2054, dtype="bool") /* ty=Tensor[(576), bool] */;
  %262 = reshape(%261, newshape=[64, 9]) /* ty=Tensor[(64, 9), bool] */;
  %263 = @func_1823(%262) /* ty=(Tensor[(64, 9), float32], Tensor[(64, ?), float64]) */;
  %264 = @func_1362() /* ty=(Tensor[(6, 1, 8), float64],) */;
  %265 = cast(%var_2073, dtype="bool") /* ty=Tensor[(256), bool] */;
  %266 = cast(meta[relay.Constant][18] /* ty=Tensor[(121, 1), float64] */, dtype="float64") /* ty=Tensor[(121, 1), float64] */;
  %267 = reshape(%265, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %268 = reshape(%266, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %269 = @func_959(%267, %268) /* ty=(Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) */;
  %270 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(4, 11, 7), float64] */;
  %273 = asinh(%272) /* ty=Tensor[(4, 11, 7), float64] */;
  %274 = cast(%271, dtype="float64") /* ty=Tensor[(4, 11, 7), float64] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="float64") /* ty=Tensor[(4, 11, 7), float64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %278 = %263.0;
  %279 = %264.0;
  %280 = %269.3;
  %281 = power(%276, %277) /* ty=Tensor[(4, 11, 7), float64] */;
  (%278, %var_2054, %279, %280, %var_2073, meta[relay.Constant][18] /* ty=Tensor[(121, 1), float64] */, %281)
}

def @func_874(%var_803: Tensor[(6, 4, 1), float64]) -> (Tensor[(6, 4, 15), bool], Tensor[(64, 6), float32]) {
  %282 = cast(%var_803, dtype="float64") /* ty=Tensor[(6, 4, 1), float64] */;
  %283 = atanh(%282) /* ty=Tensor[(6, 4, 1), float64] */;
  %284 = cast(%283, dtype="bool") /* ty=Tensor[(6, 4, 1), bool] */;
  %285 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(6, 4, 15), bool] */;
  %286 = equal(%284, %285) /* ty=Tensor[(6, 4, 15), bool] */;
  %287 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  (%286, %287)
}

def @func_1178(%var_1126: Tensor[(64, 4), bool]) -> (Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) {
  %288 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %289 = %288.2;
  %290 = cast(%289, dtype="uint64") /* ty=Tensor[(64, 1), uint64] */;
  %291 = cast(%var_1126, dtype="uint64") /* ty=Tensor[(64, 4), uint64] */;
  %292 = cast(%289, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %293 = cast(%var_1126, dtype="float32") /* ty=Tensor[(64, 4), float32] */;
  %294 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %295 = reshape(%294, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %296 = @func_1095(%295) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
  %297 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 64), bool] */, dtype="bool") /* ty=Tensor[(8, 64), bool] */;
  %298 = reshape(%297, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
  %299 = @func_900(%298) /* ty=(Tensor[(64, 8), float32],) */;
  %300 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %301 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 64), bool] */, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
  %302 = rsqrt(%301) /* ty=Tensor[(8, 64), float64] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
  %304 = tan(%303) /* ty=Tensor[(8, 64), float64] */;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
  %306 = shape_of(%302, dtype="int32") /* ty=Tensor[(2), int32] */;
  %307 = cast(%302, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %309 = bitwise_xor(%290, %291) /* ty=Tensor[(64, 4), uint64] */;
  %310 = power(%292, %293) /* ty=Tensor[(64, 4), float32] */;
  %311 = %296.2;
  %312 = %299.0;
  %313 = %300.0;
  %314 = power(%307, %308) /* ty=Tensor[(8, 64), float64] */;
  (%309, %310, %311, meta[relay.Constant][20] /* ty=Tensor[(48), bool] */, %312, %313, %314)
}

def @func_4417(%var_4389: Tensor[(16, 10, 4), float64]) -> (Tensor[(16, 10, 4), int8], Tensor[(64, 8), float64]) {
  %315 = @func_4319() /* ty=(Tensor[(16, 10, 4), float64],) */;
  %316 = %315.0;
  %317 = cast(%var_4389, dtype="int8") /* ty=Tensor[(16, 10, 4), int8] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="int8") /* ty=Tensor[(16, 10, 4), int8] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %321 = @func_2982() /* ty=(Tensor[(64, 8), float64],) */;
  %322 = left_shift(%319, %320) /* ty=Tensor[(16, 10, 4), int8] */;
  %323 = %321.0;
  (%322, %323)
}

def @func_1107() -> (Tensor[(16, 1, 4), bool],) {
  %324 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %325 = %324.1;
  (%325,)
}

def @func_1305() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) {
  %326 = cast(meta[relay.Constant][22] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %327 = reshape(%326, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
  %328 = @func_900(%327) /* ty=(Tensor[(64, 8), float32],) */;
  %329 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %330 = %328.0;
  (%329, %330, meta[relay.Constant][22] /* ty=Tensor[(512), bool] */)
}

def @func_959(%var_938: Tensor[(64, 4), bool], %var_951: Tensor[(121), float64]) -> (Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) {
  %331 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %332 = %331.2;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %334 = cast(%var_938, dtype="float32") /* ty=Tensor[(64, 4), float32] */;
  %335 = cast(%var_938, dtype="float64") /* ty=Tensor[(64, 4), float64] */;
  %336 = cast(meta[relay.Constant][23] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %337 = cast(%var_951, dtype="float64") /* ty=Tensor[(121), float64] */;
  %338 = reshape(%336, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
  %339 = reshape(%337, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %340 = @func_655(%338, %339) /* ty=(Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) */;
  %341 = floor_divide(%333, %334) /* ty=Tensor[(64, 4), float32] */;
  %342 = atan(%335) /* ty=Tensor[(64, 4), float64] */;
  %343 = %340.3;
  (%341, %342, %343, meta[relay.Constant][23] /* ty=Tensor[(640), float64] */, %var_951)
}

def @func_4706(%var_4681: Tensor[(10, 13, 6), uint8], %var_4682: Tensor[(10, 13, 6), uint8]) -> (Tensor[(10, 13, 6), bool], Tensor[(64, 6), float32], Tensor[(4, 11, 7), int16], Tensor[(16, 10, 4), float32]) {
  %344 = cast(%var_4682, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
  %345 = shape_of(%var_4681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_4681, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %348 = @func_3079() /* ty=(Tensor[(4, 11, 7), int16],) */;
  %349 = @func_3729() /* ty=(Tensor[(16, 10, 4), float32],) */;
  %350 = less(%346, %347) /* ty=Tensor[(10, 13, 6), bool] */;
  %351 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %352 = %348.0;
  %353 = %349.0;
  (%350, %351, %352, %353)
}

def @func_3626() -> Tensor[(16, 10, 4), float64] {
  @func_439() /* ty=Tensor[(16, 10, 4), float64] */
}

def @func_3079() -> (Tensor[(4, 11, 7), int16],) {
  %354 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %355 = %354.1;
  (%355,)
}

def @func_1823(%var_1802: Tensor[(64, 9), bool]) -> (Tensor[(64, 9), float32], Tensor[(64, ?), float64]) {
  %356 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %357 = %356.2;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %359 = cast(%var_1802, dtype="float32") /* ty=Tensor[(64, 9), float32] */;
  %360 = cast(%357, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %361 = atan(%360) /* ty=Tensor[(64, 1), float32] */;
  %362 = cast(%357, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(2), int32] */;
  %364 = cast(%361, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %366 = subtract(%358, %359) /* ty=Tensor[(64, 9), float32] */;
  %367 = multiply(%364, %365) /* ty=Tensor[(64, ?), float64] */;
  (%366, %367)
}

def @func_706(%var_687: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), float64], Tensor[(16, 10, 4), float64], Tensor[(640), float64], Tensor[(1, 121), float64]) {
  %368 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 10, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %369 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_687, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %372 = cast(meta[relay.Constant][25] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %373 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 121), float64] */, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
  %374 = reshape(%372, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
  %375 = reshape(%373, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %376 = @func_655(%374, %375) /* ty=(Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) */;
  %377 = floor_divide(%370, %371) /* ty=Tensor[(11, 10, 6), float64] */;
  %378 = %376.2;
  (%377, %378, meta[relay.Constant][25] /* ty=Tensor[(640), float64] */, meta[relay.Constant][26] /* ty=Tensor[(1, 121), float64] */)
}

def @func_5650(%var_5643: Tensor[(64, 6), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %379 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %380 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
  %381 = cast(%var_5643, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(2), int32] */;
  %383 = cast(%380, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %385 = %379.1;
  %386 = @func_4637() /* ty=Tensor[(16, 10, 4), float64] */;
  %387 = add(%383, %384) /* ty=Tensor[(64, 6), float32] */;
  (%385, %386, %387)
}

def @func_2482() -> (Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) {
  %388 = @func_1718() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %389 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 8, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 11), float64] */;
  %390 = log(%389) /* ty=Tensor[(4, 8, 11), float64] */;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(4, 8, 11), float64] */;
  %392 = %388.0;
  %393 = exp(%391) /* ty=Tensor[(4, 8, 11), float64] */;
  (%392, %393)
}

def @func_3590() -> (Tensor[(15, 10, 1), float64],) {
  %394 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %395 = sigmoid(%394) /* ty=Tensor[(15, 10, 1), float64] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %397 = cos(%396) /* ty=Tensor[(15, 10, 1), float64] */;
  (%397,)
}

def @func_2891(%var_2883: Tensor[(12, 48), bool]) -> (Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) {
  %398 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %399 = cast(%var_2883, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
  %400 = reshape(%399, newshape=[64, 9]) /* ty=Tensor[(64, 9), bool] */;
  %401 = @func_1823(%400) /* ty=(Tensor[(64, 9), float32], Tensor[(64, ?), float64]) */;
  %402 = %398.0;
  %403 = %401.0;
  (%402, %403, %var_2883)
}

def @main(%var_6432: Tensor[(64, 8), float64]) -> (Tensor[(64, 8), float32], Tensor[(64, 8), uint8]) {
  %404 = @func_2982() /* ty=(Tensor[(64, 8), float64],) */;
  %405 = %404.0;
  %406 = cast(%var_6432, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(2), int32] */;
  %408 = cast(%405, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %410 = multiply(%408, %409) /* ty=Tensor[(64, 8), uint16] */;
  %411 = cast(%var_6432, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(2), int32] */;
  %413 = cast(%410, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %415 = cast(%410, dtype="uint8") /* ty=Tensor[(64, 8), uint8] */;
  %416 = shape_of(%405, dtype="int32") /* ty=Tensor[(2), int32] */;
  %417 = cast(%405, dtype="uint8") /* ty=Tensor[(64, 8), uint8] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %419 = power(%413, %414) /* ty=Tensor[(64, 8), float32] */;
  %420 = logical_xor(%417, %418) /* ty=Tensor[(64, 8), uint8] */;
  (%419, %420)
}

def @func_1260() -> (Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
  %421 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %422 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %423 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %424 = %421.1;
  %425 = %422.0;
  (%423, %424, %425)
}

def @func_6208() -> Tensor[(4, 11, 7), uint16] {
  %426 = @func_5724() /* ty=(Tensor[(4, 11, 7), uint16],) */;
  %426.0
}

def @func_348(%var_329: Tensor[(12, 2, 2), bool]) -> Tensor[(12, 2, 2), bool] {
  %427 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 2, 2), bool] */, dtype="bool") /* ty=Tensor[(1, 2, 2), bool] */;
  %428 = cast(%var_329, dtype="bool") /* ty=Tensor[(12, 2, 2), bool] */;
  logical_and(%427, %428) /* ty=Tensor[(12, 2, 2), bool] */
}

def @func_5248(%var_5201: int32, %var_5202: Tensor[(5, 10, 10), int32], %var_5221: Tensor[(5, 10, 10), int32], %var_5237: Tensor[(512), bool], %var_5238: Tensor[(256), bool]) -> (Tensor[(5, 10, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(5, 10, 10), bool], Tensor[(384), float32], Tensor[(512), bool], Tensor[(256), bool]) {
  %429 = cast(%var_5201, dtype="bool") /* ty=bool */;
  %430 = cast(%var_5202, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
  %431 = @func_4319() /* ty=(Tensor[(16, 10, 4), float64],) */;
  %432 = cast(%var_5221, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
  %433 = shape_of(%var_5202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%var_5202, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = cast(%var_5237, dtype="bool") /* ty=Tensor[(512), bool] */;
  %437 = cast(%var_5238, dtype="bool") /* ty=Tensor[(256), bool] */;
  %438 = reshape(%436, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %439 = reshape(%437, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %440 = @func_1433(%438, %439) /* ty=(Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) */;
  %441 = greater_equal(%429, %430) /* ty=Tensor[(5, 10, 10), bool] */;
  %442 = %431.0;
  %443 = not_equal(%434, %435) /* ty=Tensor[(5, 10, 10), bool] */;
  %444 = %440.2;
  (%441, %442, %443, %444, %var_5237, %var_5238)
}

def @func_5281() -> (Tensor[(64, 6), float32],) {
  %445 = @func_3676() /* ty=(Tensor[(64, 6), float32], Tensor[(64, 6), float64], Tensor[(16, ?, 4), bool]) */;
  %446 = %445.0;
  (%446,)
}

def @func_4559() -> (Tensor[(16, 1, 4), bool], Tensor[(64, 4), float32], Tensor[(256), bool]) {
  %447 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %448 = cast(meta[relay.Constant][30] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
  %449 = reshape(%448, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %450 = @func_1178(%449) /* ty=(Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) */;
  %451 = %447.0;
  %452 = %450.1;
  (%451, %452, meta[relay.Constant][30] /* ty=Tensor[(256), bool] */)
}

def @func_3729() -> (Tensor[(16, 10, 4), float32],) {
  %453 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %454 = %453.0;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(16, 10, 4), float32] */;
  %456 = sigmoid(%455) /* ty=Tensor[(16, 10, 4), float32] */;
  (%456,)
}

def @func_1634(%var_1611: Tensor[(512, 1), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) {
  %457 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %458 = cast(meta[relay.Constant][31] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %459 = reshape(%458, newshape=[12, 2, 2]) /* ty=Tensor[(12, 2, 2), bool] */;
  %460 = cast(%var_1611, dtype="bool") /* ty=Tensor[(512, 1), bool] */;
  %461 = reshape(%460, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
  %462 = @func_900(%461) /* ty=(Tensor[(64, 8), float32],) */;
  %463 = %462.0;
  %464 = cast(%var_1611, dtype="uint16") /* ty=Tensor[(512, 1), uint16] */;
  %465 = shape_of(%463, dtype="int32") /* ty=Tensor[(2), int32] */;
  %466 = cast(%463, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %468 = %457.0;
  %469 = @func_348(%459) /* ty=Tensor[(12, 2, 2), bool] */;
  %470 = left_shift(%466, %467) /* ty=Tensor[(64, 8), uint16] */;
  (%468, %469, meta[relay.Constant][31] /* ty=Tensor[(48), bool] */, %470)
}

def @func_4159() -> (Tensor[(64, 8), float64], Tensor[(64, 8), float64], Tensor[(16, 10, 4), float64]) {
  %471 = @func_2982() /* ty=(Tensor[(64, 8), float64],) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %474 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %475 = @func_2414() /* ty=(Tensor[(16, 10, 4), float64],) */;
  %476 = tan(%473) /* ty=Tensor[(64, 8), float64] */;
  %477 = %474.0;
  %478 = %475.0;
  (%476, %477, %478)
}

def @func_2331(%var_2313: Tensor[(6, 7, 8), float64]) -> Tensor[(6, 7, 8), int16] {
  %479 = @func_1362() /* ty=(Tensor[(6, 1, 8), float64],) */;
  %480 = %479.0;
  %481 = cast(%480, dtype="int16") /* ty=Tensor[(6, 1, 8), int16] */;
  %482 = cast(%var_2313, dtype="int16") /* ty=Tensor[(6, 7, 8), int16] */;
  maximum(%481, %482) /* ty=Tensor[(6, 7, 8), int16] */
}

def @func_5059() -> (Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) {
  %483 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %484 = @func_2430() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) */;
  %485 = %483.0;
  %486 = %484.1;
  %487 = @func_3626() /* ty=Tensor[(16, 10, 4), float64] */;
  (%485, %486, %487)
}

def @func_900(%var_895: Tensor[(64, 8), bool]) -> (Tensor[(64, 8), float32],) {
  %488 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %489 = %488.2;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %491 = cast(%var_895, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %492 = maximum(%490, %491) /* ty=Tensor[(64, 8), float32] */;
  (%492,)
}

def @func_5941(%var_5857: Tensor[(144, 4), bool], %var_5860: Tensor[(64, 6), bool], %var_5881: Tensor[(64, 6), float64], %var_5921: Tensor[(660), float64]) -> (Tensor[(64, 9), float32], Tensor[(144, 4), bool], Tensor[(64, 6), float32], Tensor[(64, 6), bool], Tensor[(64, 8), float64], Tensor[(512, 1), float32], Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(640), float64], Tensor[(660), float64], Tensor[(64, 6), float32]) {
  %493 = cast(%var_5857, dtype="bool") /* ty=Tensor[(144, 4), bool] */;
  %494 = reshape(%493, newshape=[12, 48]) /* ty=Tensor[(12, 48), bool] */;
  %495 = @func_2891(%494) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) */;
  %496 = @func_4033() /* ty=(Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) */;
  %497 = %496.0;
  %498 = cast(%var_5860, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(2), int32] */;
  %500 = cast(%497, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %502 = floor_divide(%500, %501) /* ty=Tensor[(64, 6), float64] */;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %504 = shape_of(%var_5860, dtype="int32") /* ty=Tensor[(2), int32] */;
  %505 = cast(%var_5860, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %507 = cast(%var_5860, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %508 = asin(%507) /* ty=Tensor[(64, 6), float64] */;
  %509 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(2), int32] */;
  %511 = cast(%508, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %513 = right_shift(%511, %512) /* ty=Tensor[(64, 6), uint8] */;
  %514 = cast(%497, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(2), int32] */;
  %516 = cast(%513, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %518 = cast(meta[relay.Constant][32] /* ty=Tensor[(512, 1), float32] */, dtype="float32") /* ty=Tensor[(512, 1), float32] */;
  %519 = reshape(%518, newshape=[64, 8]) /* ty=Tensor[(64, 8), float32] */;
  %520 = @func_2866(%519) /* ty=(Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64], Tensor[(16, 1, 4), bool]) */;
  %521 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %522 = @func_5724() /* ty=(Tensor[(4, 11, 7), uint16],) */;
  %523 = cast(%513, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %524 = cast(%var_5921, dtype="float64") /* ty=Tensor[(660), float64] */;
  %525 = reshape(%524, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float64] */;
  %526 = @func_706(%525) /* ty=(Tensor[(11, 10, 6), float64], Tensor[(16, 10, 4), float64], Tensor[(640), float64], Tensor[(1, 121), float64]) */;
  %527 = cast(%508, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %528 = %495.1;
  %529 = mod(%505, %506) /* ty=Tensor[(64, 6), float32] */;
  %530 = logical_and(%516, %517) /* ty=Tensor[(64, 6), bool] */;
  %531 = %520.1;
  %532 = %521.0;
  %533 = %522.0;
  %534 = tan(%523) /* ty=Tensor[(64, 6), float32] */;
  %535 = %526.2;
  %536 = atan(%527) /* ty=Tensor[(64, 6), float32] */;
  (%528, %var_5857, %529, %530, %531, meta[relay.Constant][32] /* ty=Tensor[(512, 1), float32] */, %532, %533, %534, %535, %var_5921, %536)
}

def @func_3464(%var_3445: Tensor[(256), bool]) -> (Tensor[(4, 11, 7), int16], Tensor[(256), bool], Tensor[(256), bool]) {
  %537 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %538 = cast(%var_3445, dtype="bool") /* ty=Tensor[(256), bool] */;
  %539 = reshape(%538, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %540 = @func_3326(%539) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) */;
  %541 = %537.1;
  %542 = %540.2;
  (%541, %542, %var_3445)
}

def @func_578(%var_571: Tensor[(64, 6), float32]) -> (Tensor[(16, 10, 4), float64], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), uint64]) {
  %543 = cast(meta[relay.Constant][33] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %544 = reshape(%543, newshape=[12, 2, 2]) /* ty=Tensor[(12, 2, 2), bool] */;
  %545 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %546 = cast(%var_571, dtype="uint64") /* ty=Tensor[(64, 6), uint64] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(2), int32] */;
  %548 = cast(%545, dtype="uint64") /* ty=Tensor[(64, 6), uint64] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %550 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %551 = @func_348(%544) /* ty=Tensor[(12, 2, 2), bool] */;
  %552 = multiply(%548, %549) /* ty=Tensor[(64, 6), uint64] */;
  (%550, %551, meta[relay.Constant][33] /* ty=Tensor[(48), bool] */, %552)
}

def @func_6291(%var_6285: Tensor[(9, 8, 7), float32], %var_6286: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), float32],) {
  %553 = cast(%var_6286, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %554 = shape_of(%var_6285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_6285, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %557 = floor_divide(%555, %556) /* ty=Tensor[(9, 8, 7), float32] */;
  (%557,)
}

def @func_6386() -> Tensor[(64, 8), uint16] {
  %558 = @func_4159() /* ty=(Tensor[(64, 8), float64], Tensor[(64, 8), float64], Tensor[(16, 10, 4), float64]) */;
  %559 = %558.0;
  %560 = cast(meta[relay.Constant][34] /* ty=Tensor[(64, 8), float64] */, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(2), int32] */;
  %562 = cast(%559, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  subtract(%562, %563) /* ty=Tensor[(64, 8), uint16] */
}

def @func_3555() -> (Tensor[(64, ?), bool],) {
  %564 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %565 = %564.2;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %567 = tan(%566) /* ty=Tensor[(64, 1), float32] */;
  %568 = cast(%565, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(2), int32] */;
  %570 = cast(%567, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %572 = greater(%570, %571) /* ty=Tensor[(64, ?), bool] */;
  %573 = cast(%567, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(2), int32] */;
  %575 = cast(%572, dtype="bool") /* ty=Tensor[(64, ?), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %577 = greater_equal(%575, %576) /* ty=Tensor[(64, ?), bool] */;
  (%577,)
}

def @func_4214() -> (Tensor[(4, 11, 7), float32], Tensor[(16, 1, 4), bool]) {
  %578 = @func_1684() /* ty=(Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) */;
  %579 = @func_1718() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %580 = %578.1;
  %581 = %579.0;
  (%580, %581)
}

def @func_1433(%var_1383: Tensor[(512), bool], %var_1403: Tensor[(256), bool]) -> (Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) {
  %582 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
  %583 = %582.2;
  %584 = cast(%var_1383, dtype="float32") /* ty=Tensor[(512), float32] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(1), int32] */;
  %586 = cast(%583, dtype="float32") /* ty=Tensor[(512), float32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?), float32] */;
  %588 = cast(meta[relay.Constant][35] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %589 = reshape(%588, newshape=[64, 6]) /* ty=Tensor[(64, 6), float32] */;
  %590 = @func_578(%589) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), uint64]) */;
  %591 = cast(%var_1403, dtype="bool") /* ty=Tensor[(256), bool] */;
  %592 = cast(meta[relay.Constant][36] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %593 = reshape(%591, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %594 = reshape(%592, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %595 = @func_959(%593, %594) /* ty=(Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) */;
  %596 = cast(meta[relay.Constant][37] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %597 = reshape(%596, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %598 = @func_1095(%597) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
  %599 = floor_mod(%586, %587) /* ty=Tensor[(512), float32] */;
  %600 = %590.3;
  %601 = %595.4;
  %602 = %598.3;
  (%599, %600, meta[relay.Constant][35] /* ty=Tensor[(384), float32] */, %601, %var_1403, meta[relay.Constant][36] /* ty=Tensor[(121), float64] */, %602, meta[relay.Constant][37] /* ty=Tensor[(48), bool] */)
}

def @func_439() -> Tensor[(16, 10, 4), float64] {
  %603 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %604 = %603.1;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
  %606 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 10, 4), bool] */, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
  divide(%605, %606) /* ty=Tensor[(16, 10, 4), float64] */
}

def @func_2146() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %607 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %608 = %607.0;
  %609 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  (%608, %609)
}

def @func_391() -> Tensor[(64, 6), float32] {
  %610 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %611 = %610.2;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %613 = cast(meta[relay.Constant][39] /* ty=Tensor[(64, 6), bool] */, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  floor_mod(%612, %613) /* ty=Tensor[(64, 6), float32] */
}

def @func_3979(%var_3884: Tensor[(3, 10, 11), float32]) -> (Tensor[(3, 10, 11), int32], Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(?, 256), float64], Tensor[(16, 1, 4), bool], Tensor[(35), uint64], Tensor[(?, 256), bool], Tensor[(16, ?, 4), bool], Tensor[(3, 10, 11), bool]) {
  %614 = cast(%var_3884, dtype="float32") /* ty=Tensor[(3, 10, 11), float32] */;
  %615 = log(%614) /* ty=Tensor[(3, 10, 11), float32] */;
  %616 = cast(%var_3884, dtype="int32") /* ty=Tensor[(3, 10, 11), int32] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="int32") /* ty=Tensor[(3, 10, 11), int32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %620 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 256), bool] */, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
  %621 = reshape(%620, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %622 = @func_1178(%621) /* ty=(Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) */;
  %623 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %624 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %625 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 256), bool] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %626 = log(%625) /* ty=Tensor[(1, 256), float64] */;
  %627 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 256), bool] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(2), int32] */;
  %629 = cast(%626, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %631 = cast(meta[relay.Constant][41] /* ty=Tensor[(35), uint64] */, dtype="uint64") /* ty=Tensor[(35), uint64] */;
  %632 = %622.5;
  %633 = cast(%632, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %634 = reshape(%631, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), uint64] */;
  %635 = reshape(%633, newshape=[8, 8]) /* ty=Tensor[(8, 8), bool] */;
  %636 = @func_3109(%634, %635) /* ty=(Tensor[(5, 1, 7), uint64], Tensor[(16, 1, 4), bool], Tensor[(8, 8), bool], Tensor[(4, 11, 7), int16]) */;
  %637 = cast(%626, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
  %638 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(1, 256), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %639 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 256), bool] */, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %641 = @func_2677() /* ty=(Tensor[(16, ?, 4), bool],) */;
  %642 = cast(%var_3884, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %643 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%615, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %646 = right_shift(%618, %619) /* ty=Tensor[(3, 10, 11), int32] */;
  %647 = %623.0;
  %648 = %624.0;
  %649 = divide(%629, %630) /* ty=Tensor[(?, 256), float64] */;
  %650 = %636.1;
  %651 = less(%639, %640) /* ty=Tensor[(?, 256), bool] */;
  %652 = %641.0;
  %653 = less_equal(%644, %645) /* ty=Tensor[(3, 10, 11), bool] */;
  (%646, %632, %647, %648, %649, %650, meta[relay.Constant][41] /* ty=Tensor[(35), uint64] */, %651, %652, %653)
}

def @func_1547() -> (Tensor[(64, 8), float64],) {
  %654 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
  %655 = %654.1;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %657 = atanh(%656) /* ty=Tensor[(64, 8), float64] */;
  (%657,)
}

def @func_1684() -> (Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) {
  %658 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %659 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="float32") /* ty=Tensor[(4, 11, 7), float32] */;
  %662 = %658.0;
  %663 = atan(%661) /* ty=Tensor[(4, 11, 7), float32] */;
  (%662, %663)
}

def @func_2866(%var_2849: Tensor[(64, 8), float32]) -> (Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64], Tensor[(16, 1, 4), bool]) {
  %664 = @func_1684() /* ty=(Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) */;
  %665 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
  %666 = %665.1;
  %667 = cast(%var_2849, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(2), int32] */;
  %669 = cast(%666, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %671 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %672 = %664.1;
  %673 = mod(%669, %670) /* ty=Tensor[(64, 8), float64] */;
  %674 = %671.1;
  (%672, %673, %674)
}

def @func_105(%var_64: Tensor[(16, 1, 4), bool]) -> Tensor[(16, 1, 4), bool] {
  %675 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %676 = cast(%var_64, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  logical_and(%675, %676) /* ty=Tensor[(16, 1, 4), bool] */
}

def @func_2596(%var_2579: Tensor[(1, 8, 15), float64], %var_2580: Tensor[(13, 8, 15), float64], %var_2594: Tensor[(96, 20), float64]) -> (Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) {
  %677 = cast(%var_2579, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
  %678 = cast(%var_2580, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
  %679 = cast(%var_2594, dtype="float64") /* ty=Tensor[(96, 20), float64] */;
  %680 = reshape(%679, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
  %681 = @func_1755(%680) /* ty=(Tensor[(15, 16, 8), float64],) */;
  %682 = floor_divide(%677, %678) /* ty=Tensor[(13, 8, 15), float64] */;
  %683 = %681.0;
  (%682, %683, %var_2594)
}

def @func_2958(%var_2933: Tensor[(480, 4), float64], %var_2936: Tensor[(16, 8, 4), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(6, 7, 8), int16], Tensor[(336), float64], Tensor[(15, 16, 8), float64], Tensor[(30, 4), float64], Tensor[(1560), float64], Tensor[(480, 4), float64], Tensor[(16, 8, 4), bool], Tensor[(12, 48), bool], Tensor[(12, 48), bool]) {
  %684 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %685 = cast(meta[relay.Constant][42] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %686 = reshape(%685, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float64] */;
  %687 = cast(meta[relay.Constant][43] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %688 = cast(meta[relay.Constant][44] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %689 = cast(%var_2933, dtype="float64") /* ty=Tensor[(480, 4), float64] */;
  %690 = reshape(%687, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
  %691 = reshape(%688, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %692 = reshape(%689, newshape=[96, 20]) /* ty=Tensor[(96, 20), float64] */;
  %693 = @func_2596(%690, %691, %692) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) */;
  %694 = @func_1718() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %697 = cast(%var_2936, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %698 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 48), bool] */, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
  %699 = reshape(%698, newshape=[12, 48]) /* ty=Tensor[(12, 48), bool] */;
  %700 = @func_2891(%699) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) */;
  %701 = %684.1;
  %702 = @func_2331(%686) /* ty=Tensor[(6, 7, 8), int16] */;
  %703 = %693.1;
  %704 = less(%696, %697) /* ty=Tensor[(16, 8, 4), bool] */;
  %705 = %700.2;
  (%701, %702, meta[relay.Constant][42] /* ty=Tensor[(336), float64] */, %703, meta[relay.Constant][43] /* ty=Tensor[(30, 4), float64] */, meta[relay.Constant][44] /* ty=Tensor[(1560), float64] */, %var_2933, %704, %705, meta[relay.Constant][45] /* ty=Tensor[(12, 48), bool] */)
}

def @func_3368() -> Tensor[(16, 1, 4), bool] {
  %706 = @func_2482() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) */;
  %706.0
}

def @func_5981() -> (Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
  %707 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %708 = @func_5308() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 8), float64]) */;
  %709 = %707.0;
  %710 = %708.0;
  (%709, %710)
}

def @func_5501(%var_5457: Tensor[(64, 6), bool]) -> (Tensor[(64, 6), int64], Tensor[(64, 6), int8]) {
  %711 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
  %712 = cast(%711, dtype="int64") /* ty=Tensor[(64, 6), int64] */;
  %713 = shape_of(%var_5457, dtype="int32") /* ty=Tensor[(2), int32] */;
  %714 = cast(%var_5457, dtype="int64") /* ty=Tensor[(64, 6), int64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %716 = cast(%var_5457, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
  %717 = shape_of(%711, dtype="int32") /* ty=Tensor[(2), int32] */;
  %718 = cast(%711, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %720 = bitwise_or(%718, %719) /* ty=Tensor[(64, 6), uint8] */;
  %721 = cast(%var_5457, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(2), int32] */;
  %723 = cast(%720, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %725 = logical_xor(%714, %715) /* ty=Tensor[(64, 6), int64] */;
  %726 = bitwise_xor(%723, %724) /* ty=Tensor[(64, 6), int8] */;
  (%725, %726)
}

def @func_2814() -> (Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
  %727 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %728 = @func_2782() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %729 = %727.1;
  %730 = %728.0;
  (%729, %730)
}

def @func_3503(%var_3493: Tensor[(384), bool]) -> (Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool], Tensor[(48), bool]) {
  %731 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %732 = cast(%var_3493, dtype="bool") /* ty=Tensor[(384), bool] */;
  %733 = cast(meta[relay.Constant][46] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %734 = reshape(%732, newshape=[64, 6]) /* ty=Tensor[(64, 6), bool] */;
  %735 = reshape(%733, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %736 = @func_3396(%734, %735) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool]) */;
  %737 = %731.0;
  %738 = %736.2;
  (%737, %738, %var_3493, meta[relay.Constant][46] /* ty=Tensor[(48), bool] */)
}

def @func_4637() -> Tensor[(16, 10, 4), float64] {
  %739 = @func_4319() /* ty=(Tensor[(16, 10, 4), float64],) */;
  %739.0
}

def @func_4246() -> (Tensor[(64, 6), bool],) {
  %740 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
  (%740,)
}

def @func_4596() -> (Tensor[(16, 1, 4), bool],) {
  %741 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %742 = %741.0;
  (%742,)
}

def @func_5308() -> (Tensor[(16, 1, 4), bool], Tensor[(64, 8), float64]) {
  %743 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %744 = @func_1684() /* ty=(Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) */;
  %745 = %743.1;
  %746 = %744.0;
  (%745, %746)
}

def @func_5724() -> (Tensor[(4, 11, 7), uint16],) {
  %747 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %748 = %747.0;
  (%748,)
}

def @func_6370() -> (Tensor[(64, 6), float32], Tensor[(64, 6), float32]) {
  %749 = @func_5281() /* ty=(Tensor[(64, 6), float32],) */;
  %750 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %751 = %749.0;
  %752 = %750.0;
  (%751, %752)
}

def @func_6240() -> (Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64]) {
  %753 = @func_5767() /* ty=(Tensor[(4, 16, 14), float64], Tensor[(16, 10, 4), float64]) */;
  %754 = @func_6208() /* ty=Tensor[(4, 11, 7), uint16] */;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(4, 11, 7), float32] */;
  %756 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %757 = %753.1;
  %758 = log2(%755) /* ty=Tensor[(4, 11, 7), float32] */;
  %759 = %756.0;
  (%757, %758, %759)
}

def @func_4033() -> (Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) {
  %760 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %761 = cast(%760, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %762 = cos(%761) /* ty=Tensor[(64, 6), float32] */;
  %763 = cast(%760, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(2), int32] */;
  %765 = cast(%762, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %767 = less(%765, %766) /* ty=Tensor[(64, 6), bool] */;
  %768 = @func_3626() /* ty=Tensor[(16, 10, 4), float64] */;
  (%767, %768)
}

def @func_1949(%var_1942: Tensor[(64, 8), bool]) -> (Tensor[(16, 10, 4), float64], Tensor[(48), bool], Tensor[(64, 8), bool]) {
  %769 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
  %770 = cast(%var_1942, dtype="bool") /* ty=Tensor[(64, 8), bool] */;
  %771 = reshape(%770, newshape=[512, 1]) /* ty=Tensor[(512, 1), bool] */;
  %772 = @func_1634(%771) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) */;
  %773 = %769.0;
  %774 = %772.2;
  (%773, %774, %var_1942)
}

def @func_2982() -> (Tensor[(64, 8), float64],) {
  %775 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %778 = erf(%777) /* ty=Tensor[(64, 8), float64] */;
  (%778,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5151(%var_5149: Tensor[(1, 330), float32]) -> (Tensor[(256), bool], Tensor[(16, 10, 4), float64], Tensor[(1, 330), float32]) {
  @func_5148(%var_5149) /* ty=(Tensor[(256), bool], Tensor[(16, 10, 4), float64], Tensor[(1, 330), float32]) */
}

def @func_2679() -> (Tensor[(16, ?, 4), bool],) {
  @func_2677() /* ty=(Tensor[(16, ?, 4), bool],) */
}

def @func_4215() -> (Tensor[(4, 11, 7), float32], Tensor[(16, 1, 4), bool]) {
  %4 = fn () -> (Tensor[(4, 11, 7), float32], Tensor[(16, 1, 4), bool]) {
    %0 = @func_1684() /* ty=(Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) */;
    %1 = @func_1718() /* ty=(Tensor[(16, 1, 4), bool],) */;
    %2 = %0.1;
    %3 = %1.0;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(4, 11, 7), float32], Tensor[(16, 1, 4), bool]) */
}

def @func_2414() -> (Tensor[(16, 10, 4), float64],) {
  %5 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  (%5,)
}

def @func_6291(%var_6285: Tensor[(9, 8, 7), float32], %var_6286: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), float32],) {
  %6 = cast(%var_6286, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %7 = shape_of(%var_6285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_6285, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %10 = floor_divide(%8, %9) /* ty=Tensor[(9, 8, 7), float32] */;
  (%10,)
}

def @func_3590() -> (Tensor[(15, 10, 1), float64],) {
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %12 = sigmoid(%11) /* ty=Tensor[(15, 10, 1), float64] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %14 = cos(%13) /* ty=Tensor[(15, 10, 1), float64] */;
  (%14,)
}

def @func_1227() -> (Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) {
  %15 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %16 = %15.0;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="int16") /* ty=Tensor[(4, 11, 7), int16] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="int16") /* ty=Tensor[(4, 11, 7), int16] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %21 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %22 = left_shift(%19, %20) /* ty=Tensor[(4, 11, 7), int16] */;
  (%21, %22)
}

def @func_1261() -> (Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
  %28 = fn () -> (Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
    %23 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
    %24 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
    %25 = @func_391() /* ty=Tensor[(64, 6), float32] */;
    %26 = %23.1;
    %27 = %24.0;
    (%25, %26, %27)
  };
  %28() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */
}

def @func_1684() -> (Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) {
  %29 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %30 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(4, 11, 7), float32] */;
  %33 = %29.0;
  %34 = atan(%32) /* ty=Tensor[(4, 11, 7), float32] */;
  (%33, %34)
}

def @func_3329(%var_3327: Tensor[(256), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) {
  @func_3326(%var_3327) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) */
}

def @func_877(%var_875: Tensor[(6, 4, 1), float64]) -> (Tensor[(6, 4, 15), bool], Tensor[(64, 6), float32]) {
  @func_874(%var_875) /* ty=(Tensor[(6, 4, 15), bool], Tensor[(64, 6), float32]) */
}

def @func_2416() -> (Tensor[(16, 10, 4), float64],) {
  @func_2414() /* ty=(Tensor[(16, 10, 4), float64],) */
}

def @func_440() -> Tensor[(16, 10, 4), float64] {
  %39 = fn () -> Tensor[(16, 10, 4), float64] {
    %35 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %36 = %35.1;
    %37 = cast(%36, dtype="float64") /* ty=Tensor[(16, 1, 4), float64] */;
    %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 10, 4), bool] */, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
    divide(%37, %38) /* ty=Tensor[(16, 10, 4), float64] */
  };
  %39() /* ty=Tensor[(16, 10, 4), float64] */
}

def @func_6240() -> (Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64]) {
  %40 = @func_5767() /* ty=(Tensor[(4, 16, 14), float64], Tensor[(16, 10, 4), float64]) */;
  %41 = @func_6208() /* ty=Tensor[(4, 11, 7), uint16] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(4, 11, 7), float32] */;
  %43 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %44 = %40.1;
  %45 = log2(%42) /* ty=Tensor[(4, 11, 7), float32] */;
  %46 = %43.0;
  (%44, %45, %46)
}

def @func_4320() -> (Tensor[(16, 10, 4), float64],) {
  %48 = fn () -> (Tensor[(16, 10, 4), float64],) {
    %47 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
    (%47,)
  };
  %48() /* ty=(Tensor[(16, 10, 4), float64],) */
}

def @func_295() -> (Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) {
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="uint16") /* ty=Tensor[(4, 11, 7), uint16] */;
  %50 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 11, 7), uint16] */, dtype="uint16") /* ty=Tensor[(4, 11, 7), uint16] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(64, 1), bool] */, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %54 = reshape(%53, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
  %55 = bitwise_xor(%51, %52) /* ty=Tensor[(4, 11, 7), uint16] */;
  %56 = @func_105(%54) /* ty=Tensor[(16, 1, 4), bool] */;
  (%55, %56, meta[relay.Constant][5] /* ty=Tensor[(64, 1), bool] */)
}

def @func_3854(%var_3819: Tensor[(384), bool]) -> (Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool]) {
  %57 = cast(%var_3819, dtype="bool") /* ty=Tensor[(384), bool] */;
  %58 = reshape(%57, newshape=[384]) /* ty=Tensor[(384), bool] */;
  %59 = @func_3503(%58) /* ty=(Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool], Tensor[(48), bool]) */;
  %60 = @func_3425() /* ty=Tensor[(64, 8), float64] */;
  %61 = %59.1;
  (%60, %61, %var_3819)
}

def @func_3013() -> Tensor[(64, 6), bool] {
  %62 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %63 = cast(meta[relay.Constant][6] /* ty=Tensor[(64, 6), float32] */, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(2), int32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%65, %66) /* ty=Tensor[(64, 6), bool] */
}

def @func_3730() -> (Tensor[(16, 10, 4), float32],) {
  %71 = fn () -> (Tensor[(16, 10, 4), float32],) {
    %67 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
    %68 = %67.0;
    %69 = cast(%68, dtype="float32") /* ty=Tensor[(16, 10, 4), float32] */;
    %70 = sigmoid(%69) /* ty=Tensor[(16, 10, 4), float32] */;
    (%70,)
  };
  %71() /* ty=(Tensor[(16, 10, 4), float32],) */
}

def @main(%var_6432: Tensor[(64, 8), float64]) -> (Tensor[(64, 8), float32], Tensor[(64, 8), uint8]) {
  %72 = @func_2984() /* ty=(Tensor[(64, 8), float64],) */;
  %73 = %72.0;
  %74 = cast(%var_6432, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(2), int32] */;
  %76 = cast(%73, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %78 = multiply(%76, %77) /* ty=Tensor[(64, 8), uint16] */;
  %79 = cast(%var_6432, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(2), int32] */;
  %81 = cast(%78, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %83 = cast(%78, dtype="uint8") /* ty=Tensor[(64, 8), uint8] */;
  %84 = shape_of(%73, dtype="int32") /* ty=Tensor[(2), int32] */;
  %85 = cast(%73, dtype="uint8") /* ty=Tensor[(64, 8), uint8] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %87 = power(%81, %82) /* ty=Tensor[(64, 8), float32] */;
  %88 = logical_xor(%85, %86) /* ty=Tensor[(64, 8), uint8] */;
  (%87, %88)
}

def @func_5309() -> (Tensor[(16, 1, 4), bool], Tensor[(64, 8), float64]) {
  %93 = fn () -> (Tensor[(16, 1, 4), bool], Tensor[(64, 8), float64]) {
    %89 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %90 = @func_1684() /* ty=(Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) */;
    %91 = %89.1;
    %92 = %90.0;
    (%91, %92)
  };
  %93() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 8), float64]) */
}

def @func_1634(%var_1611: Tensor[(512, 1), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) {
  %94 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %96 = reshape(%95, newshape=[12, 2, 2]) /* ty=Tensor[(12, 2, 2), bool] */;
  %97 = cast(%var_1611, dtype="bool") /* ty=Tensor[(512, 1), bool] */;
  %98 = reshape(%97, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
  %99 = @func_900(%98) /* ty=(Tensor[(64, 8), float32],) */;
  %100 = %99.0;
  %101 = cast(%var_1611, dtype="uint16") /* ty=Tensor[(512, 1), uint16] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(2), int32] */;
  %103 = cast(%100, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %105 = %94.0;
  %106 = @func_348(%96) /* ty=Tensor[(12, 2, 2), bool] */;
  %107 = left_shift(%103, %104) /* ty=Tensor[(64, 8), uint16] */;
  (%105, %106, meta[relay.Constant][7] /* ty=Tensor[(48), bool] */, %107)
}

def @func_5982() -> (Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
  %112 = fn () -> (Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
    %108 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
    %109 = @func_5308() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 8), float64]) */;
    %110 = %108.0;
    %111 = %109.0;
    (%110, %111)
  };
  %112() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */
}

def @func_1951(%var_1950: Tensor[(64, 8), bool]) -> (Tensor[(16, 10, 4), float64], Tensor[(48), bool], Tensor[(64, 8), bool]) {
  %119 = fn (%var_1942: Tensor[(64, 8), bool]) -> (Tensor[(16, 10, 4), float64], Tensor[(48), bool], Tensor[(64, 8), bool]) {
    %113 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
    %114 = cast(%var_1942, dtype="bool") /* ty=Tensor[(64, 8), bool] */;
    %115 = reshape(%114, newshape=[512, 1]) /* ty=Tensor[(512, 1), bool] */;
    %116 = @func_1634(%115) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) */;
    %117 = %113.0;
    %118 = %116.2;
    (%117, %118, %var_1942)
  };
  %119(%var_1950) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(48), bool], Tensor[(64, 8), bool]) */
}

def @func_4771(%var_4749: Tensor[(64), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %120 = cast(%var_4749, dtype="bool") /* ty=Tensor[(64), bool] */;
  %121 = reshape(%120, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
  %122 = @func_2414() /* ty=(Tensor[(16, 10, 4), float64],) */;
  %123 = @func_4246() /* ty=(Tensor[(64, 6), bool],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %126 = cosh(%125) /* ty=Tensor[(64, 6), float64] */;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %128 = @func_105(%121) /* ty=Tensor[(16, 1, 4), bool] */;
  %129 = %122.0;
  %130 = exp(%127) /* ty=Tensor[(64, 6), float32] */;
  (%128, %var_4749, %129, %130)
}

def @func_3678() -> (Tensor[(64, 6), float32], Tensor[(64, 6), float64], Tensor[(16, ?, 4), bool]) {
  @func_3676() /* ty=(Tensor[(64, 6), float32], Tensor[(64, 6), float64], Tensor[(16, ?, 4), bool]) */
}

def @func_1825(%var_1824: Tensor[(64, 9), bool]) -> (Tensor[(64, 9), float32], Tensor[(64, ?), float64]) {
  %143 = fn (%var_1802: Tensor[(64, 9), bool]) -> (Tensor[(64, 9), float32], Tensor[(64, ?), float64]) {
    %131 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %132 = %131.2;
    %133 = cast(%132, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
    %134 = cast(%var_1802, dtype="float32") /* ty=Tensor[(64, 9), float32] */;
    %135 = cast(%132, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
    %136 = atan(%135) /* ty=Tensor[(64, 1), float32] */;
    %137 = cast(%132, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
    %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(2), int32] */;
    %139 = cast(%136, dtype="float64") /* ty=Tensor[(64, 1), float64] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %141 = subtract(%133, %134) /* ty=Tensor[(64, 9), float32] */;
    %142 = multiply(%139, %140) /* ty=Tensor[(64, ?), float64] */;
    (%141, %142)
  };
  %143(%var_1824) /* ty=(Tensor[(64, 9), float32], Tensor[(64, ?), float64]) */
}

def @func_4513(%var_4511: Tensor[(7, 8, 15), float32], %var_4512: Tensor[(512), bool]) -> (Tensor[(7, 8, 15), float32], Tensor[(64, 6), float32], Tensor[(512), bool]) {
  @func_4509(%var_4511, %var_4512) /* ty=(Tensor[(7, 8, 15), float32], Tensor[(64, 6), float32], Tensor[(512), bool]) */
}

def @func_6209() -> Tensor[(4, 11, 7), uint16] {
  %145 = fn () -> Tensor[(4, 11, 7), uint16] {
    %144 = @func_5724() /* ty=(Tensor[(4, 11, 7), uint16],) */;
    %144.0
  };
  %145() /* ty=Tensor[(4, 11, 7), uint16] */
}

def @func_6047() -> (Tensor[(16, 10, 4), float64],) {
  @func_6045() /* ty=(Tensor[(16, 10, 4), float64],) */
}

def @func_2600(%var_2597: Tensor[(1, 8, 15), float64], %var_2598: Tensor[(13, 8, 15), float64], %var_2599: Tensor[(96, 20), float64]) -> (Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) {
  %153 = fn (%var_2579: Tensor[(1, 8, 15), float64], %var_2580: Tensor[(13, 8, 15), float64], %var_2594: Tensor[(96, 20), float64]) -> (Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) {
    %146 = cast(%var_2579, dtype="float64") /* ty=Tensor[(1, 8, 15), float64] */;
    %147 = cast(%var_2580, dtype="float64") /* ty=Tensor[(13, 8, 15), float64] */;
    %148 = cast(%var_2594, dtype="float64") /* ty=Tensor[(96, 20), float64] */;
    %149 = reshape(%148, newshape=[15, 16, 8]) /* ty=Tensor[(15, 16, 8), float64] */;
    %150 = @func_1755(%149) /* ty=(Tensor[(15, 16, 8), float64],) */;
    %151 = floor_divide(%146, %147) /* ty=Tensor[(13, 8, 15), float64] */;
    %152 = %150.0;
    (%151, %152, %var_2594)
  };
  %153(%var_2597, %var_2598, %var_2599) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) */
}

def @func_2097(%var_2095: Tensor[(576), bool], %var_2096: Tensor[(256), bool]) -> (Tensor[(64, 9), float32], Tensor[(576), bool], Tensor[(6, 1, 8), float64], Tensor[(640), float64], Tensor[(256), bool], Tensor[(121, 1), float64], Tensor[(4, 11, 7), float64]) {
  %175 = fn (%var_2054: Tensor[(576), bool], %var_2073: Tensor[(256), bool]) -> (Tensor[(64, 9), float32], Tensor[(576), bool], Tensor[(6, 1, 8), float64], Tensor[(640), float64], Tensor[(256), bool], Tensor[(121, 1), float64], Tensor[(4, 11, 7), float64]) {
    %154 = cast(%var_2054, dtype="bool") /* ty=Tensor[(576), bool] */;
    %155 = reshape(%154, newshape=[64, 9]) /* ty=Tensor[(64, 9), bool] */;
    %156 = @func_1823(%155) /* ty=(Tensor[(64, 9), float32], Tensor[(64, ?), float64]) */;
    %157 = @func_1362() /* ty=(Tensor[(6, 1, 8), float64],) */;
    %158 = cast(%var_2073, dtype="bool") /* ty=Tensor[(256), bool] */;
    %159 = cast(meta[relay.Constant][8] /* ty=Tensor[(121, 1), float64] */, dtype="float64") /* ty=Tensor[(121, 1), float64] */;
    %160 = reshape(%158, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
    %161 = reshape(%159, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %162 = @func_959(%160, %161) /* ty=(Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) */;
    %163 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
    %164 = %163.1;
    %165 = cast(%164, dtype="float64") /* ty=Tensor[(4, 11, 7), float64] */;
    %166 = asinh(%165) /* ty=Tensor[(4, 11, 7), float64] */;
    %167 = cast(%164, dtype="float64") /* ty=Tensor[(4, 11, 7), float64] */;
    %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
    %169 = cast(%166, dtype="float64") /* ty=Tensor[(4, 11, 7), float64] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %171 = %156.0;
    %172 = %157.0;
    %173 = %162.3;
    %174 = power(%169, %170) /* ty=Tensor[(4, 11, 7), float64] */;
    (%171, %var_2054, %172, %173, %var_2073, meta[relay.Constant][8] /* ty=Tensor[(121, 1), float64] */, %174)
  };
  %175(%var_2095, %var_2096) /* ty=(Tensor[(64, 9), float32], Tensor[(576), bool], Tensor[(6, 1, 8), float64], Tensor[(640), float64], Tensor[(256), bool], Tensor[(121, 1), float64], Tensor[(4, 11, 7), float64]) */
}

def @func_1364() -> (Tensor[(6, 1, 8), float64],) {
  @func_1362() /* ty=(Tensor[(6, 1, 8), float64],) */
}

def @func_1095(%var_1065: Tensor[(48), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) {
  %176 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
  %178 = cast(%var_1065, dtype="bool") /* ty=Tensor[(48), bool] */;
  %179 = reshape(%178, newshape=[12, 2, 2]) /* ty=Tensor[(12, 2, 2), bool] */;
  %180 = cast(%176, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %181 = erf(%180) /* ty=Tensor[(64, 6), float64] */;
  %182 = cast(%176, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %183 = asinh(%182) /* ty=Tensor[(64, 6), float64] */;
  %184 = cast(%183, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %185 = shape_of(%181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %186 = cast(%181, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %188 = cast(%181, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %189 = shape_of(%176, dtype="int32") /* ty=Tensor[(2), int32] */;
  %190 = cast(%176, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %192 = atanh(%177) /* ty=Tensor[(64, 6), float32] */;
  %193 = @func_348(%179) /* ty=Tensor[(12, 2, 2), bool] */;
  %194 = less_equal(%186, %187) /* ty=Tensor[(64, 6), bool] */;
  %195 = equal(%190, %191) /* ty=Tensor[(64, 6), bool] */;
  (%192, %193, %var_1065, %194, %195)
}

def @func_470(%var_468: Tensor[(11, 11, 1), float64]) -> (Tensor[(11, 11, 1), float64],) {
  @func_467(%var_468) /* ty=(Tensor[(11, 11, 1), float64],) */
}

def @func_1686() -> (Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) {
  @func_1684() /* ty=(Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) */
}

def @func_5148(%var_5111: Tensor[(1, 330), float32]) -> (Tensor[(256), bool], Tensor[(16, 10, 4), float64], Tensor[(1, 330), float32]) {
  %196 = @func_4559() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 4), float32], Tensor[(256), bool]) */;
  %197 = cast(%var_5111, dtype="float32") /* ty=Tensor[(1, 330), float32] */;
  %198 = reshape(%197, newshape=[3, 10, 11]) /* ty=Tensor[(3, 10, 11), float32] */;
  %199 = @func_3979(%198) /* ty=(Tensor[(3, 10, 11), int32], Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(?, 256), float64], Tensor[(16, 1, 4), bool], Tensor[(35), uint64], Tensor[(?, 256), bool], Tensor[(16, ?, 4), bool], Tensor[(3, 10, 11), bool]) */;
  %200 = %196.2;
  %201 = %199.3;
  (%200, %201, %var_5111)
}

def @func_6320(%var_6299: Tensor[(1, 3, 1), float32], %var_6314: Tensor[(32, 8), bool], %var_6315: Tensor[(121), float64]) -> (Tensor[(1, 3, 1), float32], Tensor[(640), float64], Tensor[(32, 8), bool], Tensor[(121), float64]) {
  %202 = cast(%var_6299, dtype="float32") /* ty=Tensor[(1, 3, 1), float32] */;
  %203 = cast(%var_6314, dtype="bool") /* ty=Tensor[(32, 8), bool] */;
  %204 = cast(%var_6315, dtype="float64") /* ty=Tensor[(121), float64] */;
  %205 = reshape(%203, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %206 = reshape(%204, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %207 = @func_959(%205, %206) /* ty=(Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) */;
  %208 = rsqrt(%202) /* ty=Tensor[(1, 3, 1), float32] */;
  %209 = %207.3;
  (%208, %209, %var_6314, %var_6315)
}

def @func_6295(%var_6293: Tensor[(9, 8, 7), float32], %var_6294: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), float32],) {
  @func_6291(%var_6293, %var_6294) /* ty=(Tensor[(9, 8, 7), float32],) */
}

def @func_578(%var_571: Tensor[(64, 6), float32]) -> (Tensor[(16, 10, 4), float64], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), uint64]) {
  %210 = cast(meta[relay.Constant][9] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %211 = reshape(%210, newshape=[12, 2, 2]) /* ty=Tensor[(12, 2, 2), bool] */;
  %212 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %213 = cast(%var_571, dtype="uint64") /* ty=Tensor[(64, 6), uint64] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(2), int32] */;
  %215 = cast(%212, dtype="uint64") /* ty=Tensor[(64, 6), uint64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %217 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %218 = @func_348(%211) /* ty=Tensor[(12, 2, 2), bool] */;
  %219 = multiply(%215, %216) /* ty=Tensor[(64, 6), uint64] */;
  (%217, %218, meta[relay.Constant][9] /* ty=Tensor[(48), bool] */, %219)
}

def @func_107(%var_106: Tensor[(16, 1, 4), bool]) -> Tensor[(16, 1, 4), bool] {
  %222 = fn (%var_64: Tensor[(16, 1, 4), bool]) -> Tensor[(16, 1, 4), bool] {
    %220 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %221 = cast(%var_64, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
    logical_and(%220, %221) /* ty=Tensor[(16, 1, 4), bool] */
  };
  %222(%var_106) /* ty=Tensor[(16, 1, 4), bool] */
}

def @func_2962(%var_2960: Tensor[(480, 4), float64], %var_2961: Tensor[(16, 8, 4), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(6, 7, 8), int16], Tensor[(336), float64], Tensor[(15, 16, 8), float64], Tensor[(30, 4), float64], Tensor[(1560), float64], Tensor[(480, 4), float64], Tensor[(16, 8, 4), bool], Tensor[(12, 48), bool], Tensor[(12, 48), bool]) {
  @func_2958(%var_2960, %var_2961) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(6, 7, 8), int16], Tensor[(336), float64], Tensor[(15, 16, 8), float64], Tensor[(30, 4), float64], Tensor[(1560), float64], Tensor[(480, 4), float64], Tensor[(16, 8, 4), bool], Tensor[(12, 48), bool], Tensor[(12, 48), bool]) */
}

def @func_5061() -> (Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) {
  @func_5059() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) */
}

def @func_581(%var_579: Tensor[(64, 6), float32]) -> (Tensor[(16, 10, 4), float64], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), uint64]) {
  @func_578(%var_579) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), uint64]) */
}

def @func_5059() -> (Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) {
  %223 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %224 = @func_2430() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) */;
  %225 = %223.0;
  %226 = %224.1;
  %227 = @func_3626() /* ty=Tensor[(16, 10, 4), float64] */;
  (%225, %226, %227)
}

def @func_3506(%var_3504: Tensor[(384), bool]) -> (Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool], Tensor[(48), bool]) {
  @func_3503(%var_3504) /* ty=(Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool], Tensor[(48), bool]) */
}

def @func_2893(%var_2892: Tensor[(12, 48), bool]) -> (Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) {
  %234 = fn (%var_2883: Tensor[(12, 48), bool]) -> (Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) {
    %228 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
    %229 = cast(%var_2883, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
    %230 = reshape(%229, newshape=[64, 9]) /* ty=Tensor[(64, 9), bool] */;
    %231 = @func_1823(%230) /* ty=(Tensor[(64, 9), float32], Tensor[(64, ?), float64]) */;
    %232 = %228.0;
    %233 = %231.0;
    (%232, %233, %var_2883)
  };
  %234(%var_2892) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) */
}

def @func_1433(%var_1383: Tensor[(512), bool], %var_1403: Tensor[(256), bool]) -> (Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) {
  %235 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
  %236 = %235.2;
  %237 = cast(%var_1383, dtype="float32") /* ty=Tensor[(512), float32] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = cast(%236, dtype="float32") /* ty=Tensor[(512), float32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?), float32] */;
  %241 = cast(meta[relay.Constant][10] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %242 = reshape(%241, newshape=[64, 6]) /* ty=Tensor[(64, 6), float32] */;
  %243 = @func_578(%242) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), uint64]) */;
  %244 = cast(%var_1403, dtype="bool") /* ty=Tensor[(256), bool] */;
  %245 = cast(meta[relay.Constant][11] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %246 = reshape(%244, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %247 = reshape(%245, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %248 = @func_959(%246, %247) /* ty=(Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) */;
  %249 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %250 = reshape(%249, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %251 = @func_1095(%250) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
  %252 = floor_mod(%239, %240) /* ty=Tensor[(512), float32] */;
  %253 = %243.3;
  %254 = %248.4;
  %255 = %251.3;
  (%252, %253, meta[relay.Constant][10] /* ty=Tensor[(384), float32] */, %254, %var_1403, meta[relay.Constant][11] /* ty=Tensor[(121), float64] */, %255, meta[relay.Constant][12] /* ty=Tensor[(48), bool] */)
}

def @func_1719() -> (Tensor[(16, 1, 4), bool],) {
  %258 = fn () -> (Tensor[(16, 1, 4), bool],) {
    %256 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
    %257 = %256.0;
    (%257,)
  };
  %258() /* ty=(Tensor[(16, 1, 4), bool],) */
}

def @func_1637(%var_1635: Tensor[(512, 1), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) {
  @func_1634(%var_1635) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) */
}

def @func_4638() -> Tensor[(16, 10, 4), float64] {
  %260 = fn () -> Tensor[(16, 10, 4), float64] {
    %259 = @func_4319() /* ty=(Tensor[(16, 10, 4), float64],) */;
    %259.0
  };
  %260() /* ty=Tensor[(16, 10, 4), float64] */
}

def @func_5652(%var_5651: Tensor[(64, 6), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %270 = fn (%var_5643: Tensor[(64, 6), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
    %261 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
    %262 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
    %263 = cast(%var_5643, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(2), int32] */;
    %265 = cast(%262, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %267 = %261.1;
    %268 = @func_4637() /* ty=Tensor[(16, 10, 4), float64] */;
    %269 = add(%265, %266) /* ty=Tensor[(64, 6), float32] */;
    (%267, %268, %269)
  };
  %270(%var_5651) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */
}

def @func_959(%var_938: Tensor[(64, 4), bool], %var_951: Tensor[(121), float64]) -> (Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) {
  %271 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %272 = %271.2;
  %273 = cast(%272, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %274 = cast(%var_938, dtype="float32") /* ty=Tensor[(64, 4), float32] */;
  %275 = cast(%var_938, dtype="float64") /* ty=Tensor[(64, 4), float64] */;
  %276 = cast(meta[relay.Constant][13] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %277 = cast(%var_951, dtype="float64") /* ty=Tensor[(121), float64] */;
  %278 = reshape(%276, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
  %279 = reshape(%277, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %280 = @func_655(%278, %279) /* ty=(Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) */;
  %281 = floor_divide(%273, %274) /* ty=Tensor[(64, 4), float32] */;
  %282 = atan(%275) /* ty=Tensor[(64, 4), float64] */;
  %283 = %280.3;
  (%281, %282, %283, meta[relay.Constant][13] /* ty=Tensor[(640), float64] */, %var_951)
}

def @func_3080() -> (Tensor[(4, 11, 7), int16],) {
  %286 = fn () -> (Tensor[(4, 11, 7), int16],) {
    %284 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
    %285 = %284.1;
    (%285,)
  };
  %286() /* ty=(Tensor[(4, 11, 7), int16],) */
}

def @func_4089(%var_4088: Tensor[(64, 6), bool]) -> (Tensor[(64, 6), int8], Tensor[(64, 8), uint32]) {
  %302 = fn (%var_4067: Tensor[(64, 6), bool]) -> (Tensor[(64, 6), int8], Tensor[(64, 8), uint32]) {
    %287 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
    %288 = cast(%var_4067, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
    %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(2), int32] */;
    %290 = cast(%287, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
    %293 = reshape(%292, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
    %294 = @func_900(%293) /* ty=(Tensor[(64, 8), float32],) */;
    %295 = %294.0;
    %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(512), bool] */, dtype="uint32") /* ty=Tensor[(512), uint32] */;
    %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(2), int32] */;
    %298 = cast(%295, dtype="uint32") /* ty=Tensor[(64, 8), uint32] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %300 = bitwise_and(%290, %291) /* ty=Tensor[(64, 6), int8] */;
    %301 = bitwise_xor(%298, %299) /* ty=Tensor[(64, 8), uint32] */;
    (%300, %301)
  };
  %302(%var_4088) /* ty=(Tensor[(64, 6), int8], Tensor[(64, 8), uint32]) */
}

def @func_467(%var_453: Tensor[(11, 11, 1), float64]) -> (Tensor[(11, 11, 1), float64],) {
  %303 = cast(%var_453, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
  %304 = log2(%303) /* ty=Tensor[(11, 11, 1), float64] */;
  (%304,)
}

def @func_5601(%var_5596: Tensor[(15, 16, 3), float32], %var_5597: Tensor[(15, 16, 3), float32], %var_5598: Tensor[(120), float64], %var_5599: Tensor[(1560), float64], %var_5600: Tensor[(1920), float64]) -> (Tensor[(15, 16, 3), float32], Tensor[(96, 20), float64], Tensor[(120), float64], Tensor[(1560), float64], Tensor[(1920), float64], Tensor[(16, 1, 4), bool]) {
  @func_5594(%var_5596, %var_5597, %var_5598, %var_5599, %var_5600) /* ty=(Tensor[(15, 16, 3), float32], Tensor[(96, 20), float64], Tensor[(120), float64], Tensor[(1560), float64], Tensor[(1920), float64], Tensor[(16, 1, 4), bool]) */
}

def @func_3979(%var_3884: Tensor[(3, 10, 11), float32]) -> (Tensor[(3, 10, 11), int32], Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(?, 256), float64], Tensor[(16, 1, 4), bool], Tensor[(35), uint64], Tensor[(?, 256), bool], Tensor[(16, ?, 4), bool], Tensor[(3, 10, 11), bool]) {
  %305 = cast(%var_3884, dtype="float32") /* ty=Tensor[(3, 10, 11), float32] */;
  %306 = log(%305) /* ty=Tensor[(3, 10, 11), float32] */;
  %307 = cast(%var_3884, dtype="int32") /* ty=Tensor[(3, 10, 11), int32] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="int32") /* ty=Tensor[(3, 10, 11), int32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %311 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 256), bool] */, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
  %312 = reshape(%311, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
  %313 = @func_1178(%312) /* ty=(Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) */;
  %314 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %315 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %316 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 256), bool] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %317 = log(%316) /* ty=Tensor[(1, 256), float64] */;
  %318 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 256), bool] */, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(2), int32] */;
  %320 = cast(%317, dtype="float64") /* ty=Tensor[(1, 256), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %322 = cast(meta[relay.Constant][16] /* ty=Tensor[(35), uint64] */, dtype="uint64") /* ty=Tensor[(35), uint64] */;
  %323 = %313.5;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %325 = reshape(%322, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), uint64] */;
  %326 = reshape(%324, newshape=[8, 8]) /* ty=Tensor[(8, 8), bool] */;
  %327 = @func_3109(%325, %326) /* ty=(Tensor[(5, 1, 7), uint64], Tensor[(16, 1, 4), bool], Tensor[(8, 8), bool], Tensor[(4, 11, 7), int16]) */;
  %328 = cast(%317, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
  %329 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1, 256), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %330 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 256), bool] */, dtype="bool") /* ty=Tensor[(1, 256), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %332 = @func_2677() /* ty=(Tensor[(16, ?, 4), bool],) */;
  %333 = cast(%var_3884, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %334 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%306, dtype="bool") /* ty=Tensor[(3, 10, 11), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %337 = right_shift(%309, %310) /* ty=Tensor[(3, 10, 11), int32] */;
  %338 = %314.0;
  %339 = %315.0;
  %340 = divide(%320, %321) /* ty=Tensor[(?, 256), float64] */;
  %341 = %327.1;
  %342 = less(%330, %331) /* ty=Tensor[(?, 256), bool] */;
  %343 = %332.0;
  %344 = less_equal(%335, %336) /* ty=Tensor[(3, 10, 11), bool] */;
  (%337, %323, %338, %339, %340, %341, meta[relay.Constant][16] /* ty=Tensor[(35), uint64] */, %342, %343, %344)
}

def @func_1362() -> (Tensor[(6, 1, 8), float64],) {
  %345 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 8), float64] */;
  %346 = sin(%345) /* ty=Tensor[(6, 1, 8), float64] */;
  (%346,)
}

def @func_4798() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %351 = fn () -> (Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
    %347 = @func_4033() /* ty=(Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) */;
    %348 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
    %349 = %347.1;
    %350 = %348.0;
    (%349, %350)
  };
  %351() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */
}

def @func_5281() -> (Tensor[(64, 6), float32],) {
  %352 = @func_3676() /* ty=(Tensor[(64, 6), float32], Tensor[(64, 6), float64], Tensor[(16, ?, 4), bool]) */;
  %353 = %352.0;
  (%353,)
}

def @func_6045() -> (Tensor[(16, 10, 4), float64],) {
  %354 = @func_4797() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %355 = %354.0;
  (%355,)
}

def @func_5283() -> (Tensor[(64, 6), float32],) {
  @func_5281() /* ty=(Tensor[(64, 6), float32],) */
}

def @func_3857(%var_3855: Tensor[(384), bool]) -> (Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool]) {
  @func_3854(%var_3855) /* ty=(Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool]) */
}

def @func_902(%var_901: Tensor[(64, 8), bool]) -> (Tensor[(64, 8), float32],) {
  %361 = fn (%var_895: Tensor[(64, 8), bool]) -> (Tensor[(64, 8), float32],) {
    %356 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %357 = %356.2;
    %358 = cast(%357, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
    %359 = cast(%var_895, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
    %360 = maximum(%358, %359) /* ty=Tensor[(64, 8), float32] */;
    (%360,)
  };
  %361(%var_901) /* ty=(Tensor[(64, 8), float32],) */
}

def @func_3368() -> Tensor[(16, 1, 4), bool] {
  %362 = @func_2482() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) */;
  %362.0
}

def @func_2482() -> (Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) {
  %363 = @func_1718() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %364 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 8, 11), float64] */, dtype="float64") /* ty=Tensor[(4, 8, 11), float64] */;
  %365 = log(%364) /* ty=Tensor[(4, 8, 11), float64] */;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(4, 8, 11), float64] */;
  %367 = %363.0;
  %368 = exp(%366) /* ty=Tensor[(4, 8, 11), float64] */;
  (%367, %368)
}

def @func_5784() -> Tensor[(16, 1, 4), bool] {
  %370 = fn () -> Tensor[(16, 1, 4), bool] {
    %369 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
    %369.0
  };
  %370() /* ty=Tensor[(16, 1, 4), bool] */
}

def @func_1098(%var_1096: Tensor[(48), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) {
  @func_1095(%var_1096) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */
}

def @func_3113(%var_3111: Tensor[(5, 1, 7), uint64], %var_3112: Tensor[(8, 8), bool]) -> (Tensor[(5, 1, 7), uint64], Tensor[(16, 1, 4), bool], Tensor[(8, 8), bool], Tensor[(4, 11, 7), int16]) {
  @func_3109(%var_3111, %var_3112) /* ty=(Tensor[(5, 1, 7), uint64], Tensor[(16, 1, 4), bool], Tensor[(8, 8), bool], Tensor[(4, 11, 7), int16]) */
}

def @func_2783() -> (Tensor[(16, 1, 4), bool],) {
  %373 = fn () -> (Tensor[(16, 1, 4), bool],) {
    %371 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
    %372 = %371.1;
    (%372,)
  };
  %373() /* ty=(Tensor[(16, 1, 4), bool],) */
}

def @func_2484() -> (Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) {
  @func_2482() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) */
}

def @func_1583(%var_1581: Tensor[(64, 8), float64]) -> (Tensor[(64, 8), float32],) {
  @func_1580(%var_1581) /* ty=(Tensor[(64, 8), float32],) */
}

def @func_3326(%var_3265: Tensor[(256), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) {
  %374 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %375 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %376 = cast(meta[relay.Constant][19] /* ty=Tensor[(576), bool] */, dtype="bool") /* ty=Tensor[(576), bool] */;
  %377 = cast(%var_3265, dtype="bool") /* ty=Tensor[(256), bool] */;
  %378 = reshape(%376, newshape=[576]) /* ty=Tensor[(576), bool] */;
  %379 = reshape(%377, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %380 = @func_2094(%378, %379) /* ty=(Tensor[(64, 9), float32], Tensor[(576), bool], Tensor[(6, 1, 8), float64], Tensor[(640), float64], Tensor[(256), bool], Tensor[(121, 1), float64], Tensor[(4, 11, 7), float64]) */;
  %381 = cast(meta[relay.Constant][20] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %382 = reshape(%381, newshape=[64, 8]) /* ty=Tensor[(64, 8), float64] */;
  %383 = @func_1580(%382) /* ty=(Tensor[(64, 8), float32],) */;
  %384 = %383.0;
  %385 = cast(%384, dtype="int8") /* ty=Tensor[(64, 8), int8] */;
  %386 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(512), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %387 = cast(meta[relay.Constant][20] /* ty=Tensor[(512), float64] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?), int8] */;
  %389 = cast(meta[relay.Constant][20] /* ty=Tensor[(512), float64] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %390 = cast(%var_3265, dtype="bool") /* ty=Tensor[(256), bool] */;
  %391 = reshape(%389, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %392 = reshape(%390, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %393 = @func_1433(%391, %392) /* ty=(Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) */;
  %394 = cast(meta[relay.Constant][21] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %395 = reshape(%394, newshape=[6, 4, 1]) /* ty=Tensor[(6, 4, 1), float64] */;
  %396 = @func_874(%395) /* ty=(Tensor[(6, 4, 15), bool], Tensor[(64, 6), float32]) */;
  %397 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %398 = %374.1;
  %399 = %375.2;
  %400 = %380.4;
  %401 = logical_xor(%387, %388) /* ty=Tensor[(512), int8] */;
  %402 = %393.4;
  %403 = %396.1;
  %404 = %397.0;
  (%398, %399, %400, meta[relay.Constant][19] /* ty=Tensor[(576), bool] */, %var_3265, %401, %402, %403, meta[relay.Constant][21] /* ty=Tensor[(24), float64] */, %404)
}

def @func_3109(%var_3087: Tensor[(5, 1, 7), uint64], %var_3096: Tensor[(8, 8), bool]) -> (Tensor[(5, 1, 7), uint64], Tensor[(16, 1, 4), bool], Tensor[(8, 8), bool], Tensor[(4, 11, 7), int16]) {
  %405 = cast(meta[relay.Constant][22] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %406 = cast(%var_3087, dtype="uint64") /* ty=Tensor[(5, 1, 7), uint64] */;
  %407 = cast(%var_3096, dtype="bool") /* ty=Tensor[(8, 8), bool] */;
  %408 = reshape(%407, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
  %409 = @func_3079() /* ty=(Tensor[(4, 11, 7), int16],) */;
  %410 = bitwise_xor(%405, %406) /* ty=Tensor[(5, 1, 7), uint64] */;
  %411 = @func_105(%408) /* ty=Tensor[(16, 1, 4), bool] */;
  %412 = %409.0;
  (%410, %411, %var_3096, %412)
}

def @func_5724() -> (Tensor[(4, 11, 7), uint16],) {
  %413 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %414 = %413.0;
  (%414,)
}

def @func_6401() -> (Tensor[(64, 8), float64],) {
  %417 = fn () -> (Tensor[(64, 8), float64],) {
    %415 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
    %416 = %415.0;
    (%416,)
  };
  %417() /* ty=(Tensor[(64, 8), float64],) */
}

def @func_4247() -> (Tensor[(64, 6), bool],) {
  %419 = fn () -> (Tensor[(64, 6), bool],) {
    %418 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
    (%418,)
  };
  %419() /* ty=(Tensor[(64, 6), bool],) */
}

def @func_658(%var_656: Tensor[(16, 10, 4), float64], %var_657: Tensor[(11, 11), float64]) -> (Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) {
  %438 = fn (%var_627: Tensor[(16, 10, 4), float64], %var_633: Tensor[(11, 11), float64]) -> (Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) {
    %420 = cast(%var_633, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
    %421 = reshape(%420, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
    %422 = @func_467(%421) /* ty=(Tensor[(11, 11, 1), float64],) */;
    %423 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
    %424 = cast(%var_627, dtype="uint64") /* ty=Tensor[(16, 10, 4), uint64] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="uint64") /* ty=Tensor[(16, 10, 4), uint64] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %428 = minimum(%426, %427) /* ty=Tensor[(16, 10, 4), uint64] */;
    %429 = cast(%428, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
    %430 = %422.0;
    %431 = cast(%430, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
    %432 = reshape(%431, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
    %433 = @func_467(%432) /* ty=(Tensor[(11, 11, 1), float64],) */;
    %434 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %435 = erf(%429) /* ty=Tensor[(16, 10, 4), float64] */;
    %436 = %433.0;
    %437 = %434.1;
    (%430, %var_633, %435, %436, %437)
  };
  %438(%var_656, %var_657) /* ty=(Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) */
}

def @func_2148() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */
}

def @func_5594(%var_5566: Tensor[(15, 16, 3), float32], %var_5567: Tensor[(15, 16, 3), float32], %var_5575: Tensor[(120), float64], %var_5576: Tensor[(1560), float64], %var_5577: Tensor[(1920), float64]) -> (Tensor[(15, 16, 3), float32], Tensor[(96, 20), float64], Tensor[(120), float64], Tensor[(1560), float64], Tensor[(1920), float64], Tensor[(16, 1, 4), bool]) {
  %439 = cast(%var_5567, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %440 = shape_of(%var_5566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_5566, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %443 = cast(%var_5575, dtype="float64") /* ty=Tensor[(120), float64] */;
  %444 = cast(%var_5576, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %445 = cast(%var_5577, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %446 = reshape(%443, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
  %447 = reshape(%444, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %448 = reshape(%445, newshape=[96, 20]) /* ty=Tensor[(96, 20), float64] */;
  %449 = @func_2596(%446, %447, %448) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) */;
  %450 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %451 = mod(%441, %442) /* ty=Tensor[(15, 16, 3), float32] */;
  %452 = %449.2;
  %453 = %450.1;
  (%451, %452, %var_5575, %var_5576, %var_5577, %453)
}

def @func_2333(%var_2332: Tensor[(6, 7, 8), float64]) -> Tensor[(6, 7, 8), int16] {
  %458 = fn (%var_2313: Tensor[(6, 7, 8), float64]) -> Tensor[(6, 7, 8), int16] {
    %454 = @func_1362() /* ty=(Tensor[(6, 1, 8), float64],) */;
    %455 = %454.0;
    %456 = cast(%455, dtype="int16") /* ty=Tensor[(6, 1, 8), int16] */;
    %457 = cast(%var_2313, dtype="int16") /* ty=Tensor[(6, 7, 8), int16] */;
    maximum(%456, %457) /* ty=Tensor[(6, 7, 8), int16] */
  };
  %458(%var_2332) /* ty=Tensor[(6, 7, 8), int16] */
}

def @func_3557() -> (Tensor[(64, ?), bool],) {
  @func_3555() /* ty=(Tensor[(64, ?), bool],) */
}

def @func_4709(%var_4707: Tensor[(10, 13, 6), uint8], %var_4708: Tensor[(10, 13, 6), uint8]) -> (Tensor[(10, 13, 6), bool], Tensor[(64, 6), float32], Tensor[(4, 11, 7), int16], Tensor[(16, 10, 4), float32]) {
  %469 = fn (%var_4681: Tensor[(10, 13, 6), uint8], %var_4682: Tensor[(10, 13, 6), uint8]) -> (Tensor[(10, 13, 6), bool], Tensor[(64, 6), float32], Tensor[(4, 11, 7), int16], Tensor[(16, 10, 4), float32]) {
    %459 = cast(%var_4682, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
    %460 = shape_of(%var_4681, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%var_4681, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %463 = @func_3079() /* ty=(Tensor[(4, 11, 7), int16],) */;
    %464 = @func_3729() /* ty=(Tensor[(16, 10, 4), float32],) */;
    %465 = less(%461, %462) /* ty=Tensor[(10, 13, 6), bool] */;
    %466 = @func_391() /* ty=Tensor[(64, 6), float32] */;
    %467 = %463.0;
    %468 = %464.0;
    (%465, %466, %467, %468)
  };
  %469(%var_4707, %var_4708) /* ty=(Tensor[(10, 13, 6), bool], Tensor[(64, 6), float32], Tensor[(4, 11, 7), int16], Tensor[(16, 10, 4), float32]) */
}

def @func_1580(%var_1568: Tensor[(64, 8), float64]) -> (Tensor[(64, 8), float32],) {
  %470 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %471 = %470.0;
  %472 = cast(%var_1568, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(2), int32] */;
  %474 = cast(%471, dtype="float32") /* ty=Tensor[(64, 8), float32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %476 = floor_divide(%474, %475) /* ty=Tensor[(64, 8), float32] */;
  (%476,)
}

def @func_6164() -> (Tensor[(64, 6), uint32],) {
  %477 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %479 = log2(%478) /* ty=Tensor[(64, 6), float64] */;
  %480 = cast(meta[relay.Constant][23] /* ty=Tensor[(64, 6), float64] */, dtype="uint32") /* ty=Tensor[(64, 6), uint32] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(2), int32] */;
  %482 = cast(%479, dtype="uint32") /* ty=Tensor[(64, 6), uint32] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %484 = minimum(%482, %483) /* ty=Tensor[(64, 6), uint32] */;
  (%484,)
}

def @func_3676() -> (Tensor[(64, 6), float32], Tensor[(64, 6), float64], Tensor[(16, ?, 4), bool]) {
  %485 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
  %487 = @func_2677() /* ty=(Tensor[(16, ?, 4), bool],) */;
  %488 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  %489 = sin(%486) /* ty=Tensor[(64, 6), float64] */;
  %490 = %487.0;
  (%488, %489, %490)
}

def @func_2431() -> (Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) {
  %493 = fn () -> (Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) {
    %491 = @func_391() /* ty=Tensor[(64, 6), float32] */;
    %492 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
    (%491, %492)
  };
  %493() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) */
}

def @func_1758(%var_1756: Tensor[(15, 16, 8), float64]) -> (Tensor[(15, 16, 8), float64],) {
  @func_1755(%var_1756) /* ty=(Tensor[(15, 16, 8), float64],) */
}

def @func_1229() -> (Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) {
  @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */
}

def @func_3626() -> Tensor[(16, 10, 4), float64] {
  @func_439() /* ty=Tensor[(16, 10, 4), float64] */
}

def @func_3015() -> Tensor[(64, 6), bool] {
  @func_3013() /* ty=Tensor[(64, 6), bool] */
}

def @func_6242() -> (Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64]) {
  @func_6240() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64]) */
}

def @func_1755(%var_1741: Tensor[(15, 16, 8), float64]) -> (Tensor[(15, 16, 8), float64],) {
  %494 = cast(%var_1741, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %495 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(15, 16, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %498 = floor_divide(%496, %497) /* ty=Tensor[(15, 16, 8), float64] */;
  (%498,)
}

def @func_1530(%var_1522: Tensor[(1, 48), bool]) -> (Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(1, 48), bool]) {
  %499 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %500 = cast(%var_1522, dtype="bool") /* ty=Tensor[(1, 48), bool] */;
  %501 = reshape(%500, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %502 = @func_1095(%501) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
  %503 = %499.0;
  %504 = %502.0;
  (%503, %504, %var_1522)
}

def @func_2814() -> (Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
  %505 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
  %506 = @func_2782() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %507 = %505.1;
  %508 = %506.0;
  (%507, %508)
}

def @func_4560() -> (Tensor[(16, 1, 4), bool], Tensor[(64, 4), float32], Tensor[(256), bool]) {
  %515 = fn () -> (Tensor[(16, 1, 4), bool], Tensor[(64, 4), float32], Tensor[(256), bool]) {
    %509 = @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
    %510 = cast(meta[relay.Constant][25] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
    %511 = reshape(%510, newshape=[64, 4]) /* ty=Tensor[(64, 4), bool] */;
    %512 = @func_1178(%511) /* ty=(Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) */;
    %513 = %509.0;
    %514 = %512.1;
    (%513, %514, meta[relay.Constant][25] /* ty=Tensor[(256), bool] */)
  };
  %515() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 4), float32], Tensor[(256), bool]) */
}

def @func_5254(%var_5249: int32, %var_5250: Tensor[(5, 10, 10), int32], %var_5251: Tensor[(5, 10, 10), int32], %var_5252: Tensor[(512), bool], %var_5253: Tensor[(256), bool]) -> (Tensor[(5, 10, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(5, 10, 10), bool], Tensor[(384), float32], Tensor[(512), bool], Tensor[(256), bool]) {
  %532 = fn (%var_5201: int32, %var_5202: Tensor[(5, 10, 10), int32], %var_5221: Tensor[(5, 10, 10), int32], %var_5237: Tensor[(512), bool], %var_5238: Tensor[(256), bool]) -> (Tensor[(5, 10, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(5, 10, 10), bool], Tensor[(384), float32], Tensor[(512), bool], Tensor[(256), bool]) {
    %516 = cast(%var_5201, dtype="bool") /* ty=bool */;
    %517 = cast(%var_5202, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
    %518 = @func_4319() /* ty=(Tensor[(16, 10, 4), float64],) */;
    %519 = cast(%var_5221, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
    %520 = shape_of(%var_5202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(%var_5202, dtype="bool") /* ty=Tensor[(5, 10, 10), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %523 = cast(%var_5237, dtype="bool") /* ty=Tensor[(512), bool] */;
    %524 = cast(%var_5238, dtype="bool") /* ty=Tensor[(256), bool] */;
    %525 = reshape(%523, newshape=[512]) /* ty=Tensor[(512), bool] */;
    %526 = reshape(%524, newshape=[256]) /* ty=Tensor[(256), bool] */;
    %527 = @func_1433(%525, %526) /* ty=(Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) */;
    %528 = greater_equal(%516, %517) /* ty=Tensor[(5, 10, 10), bool] */;
    %529 = %518.0;
    %530 = not_equal(%521, %522) /* ty=Tensor[(5, 10, 10), bool] */;
    %531 = %527.2;
    (%528, %529, %530, %531, %var_5237, %var_5238)
  };
  %532(%var_5249, %var_5250, %var_5251, %var_5252, %var_5253) /* ty=(Tensor[(5, 10, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(5, 10, 10), bool], Tensor[(384), float32], Tensor[(512), bool], Tensor[(256), bool]) */
}

def @func_5440() -> (Tensor[(11, 12, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(11, 12, 10), float64], Tensor[(11, 12, 10), float32], Tensor[(64, 1), bool], Tensor[(256), bool]) {
  @func_5438() /* ty=(Tensor[(11, 12, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(11, 12, 10), float64], Tensor[(11, 12, 10), float32], Tensor[(64, 1), bool], Tensor[(256), bool]) */
}

def @func_1018() -> (Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) {
  %538 = fn () -> (Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) {
    %533 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), bool] */, dtype="bool") /* ty=Tensor[(64), bool] */;
    %534 = reshape(%533, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), bool] */;
    %535 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
    %536 = @func_105(%534) /* ty=Tensor[(16, 1, 4), bool] */;
    %537 = @func_391() /* ty=Tensor[(64, 6), float32] */;
    (%535, %536, meta[relay.Constant][26] /* ty=Tensor[(64), bool] */, %537)
  };
  %538() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */
}

def @func_6371() -> (Tensor[(64, 6), float32], Tensor[(64, 6), float32]) {
  %543 = fn () -> (Tensor[(64, 6), float32], Tensor[(64, 6), float32]) {
    %539 = @func_5281() /* ty=(Tensor[(64, 6), float32],) */;
    %540 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
    %541 = %539.0;
    %542 = %540.0;
    (%541, %542)
  };
  %543() /* ty=(Tensor[(64, 6), float32], Tensor[(64, 6), float32]) */
}

def @func_392() -> Tensor[(64, 6), float32] {
  %548 = fn () -> Tensor[(64, 6), float32] {
    %544 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %545 = %544.2;
    %546 = cast(%545, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
    %547 = cast(meta[relay.Constant][27] /* ty=Tensor[(64, 6), bool] */, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    floor_mod(%546, %547) /* ty=Tensor[(64, 6), float32] */
  };
  %548() /* ty=Tensor[(64, 6), float32] */
}

def @func_1305() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) {
  %549 = cast(meta[relay.Constant][28] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %550 = reshape(%549, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
  %551 = @func_900(%550) /* ty=(Tensor[(64, 8), float32],) */;
  %552 = @func_439() /* ty=Tensor[(16, 10, 4), float64] */;
  %553 = %551.0;
  (%552, %553, meta[relay.Constant][28] /* ty=Tensor[(512), bool] */)
}

def @func_4774(%var_4772: Tensor[(64), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  @func_4771(%var_4772) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */
}

def @func_3370() -> Tensor[(16, 1, 4), bool] {
  @func_3368() /* ty=Tensor[(16, 1, 4), bool] */
}

def @func_3399(%var_3397: Tensor[(64, 6), bool], %var_3398: Tensor[(48), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool]) {
  %564 = fn (%var_3386: Tensor[(64, 6), bool], %var_3392: Tensor[(48), bool]) -> (Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool]) {
    %554 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
    %555 = cast(%var_3386, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(2), int32] */;
    %557 = cast(%554, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %559 = cast(%var_3392, dtype="bool") /* ty=Tensor[(48), bool] */;
    %560 = reshape(%559, newshape=[48]) /* ty=Tensor[(48), bool] */;
    %561 = @func_1095(%560) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
    %562 = power(%557, %558) /* ty=Tensor[(64, 6), float32] */;
    %563 = %561.1;
    (%562, %563, %var_3392)
  };
  %564(%var_3397, %var_3398) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool]) */
}

def @func_4160() -> (Tensor[(64, 8), float64], Tensor[(64, 8), float64], Tensor[(16, 10, 4), float64]) {
  %573 = fn () -> (Tensor[(64, 8), float64], Tensor[(64, 8), float64], Tensor[(16, 10, 4), float64]) {
    %565 = @func_2982() /* ty=(Tensor[(64, 8), float64],) */;
    %566 = %565.0;
    %567 = cast(%566, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
    %568 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
    %569 = @func_2414() /* ty=(Tensor[(16, 10, 4), float64],) */;
    %570 = tan(%567) /* ty=Tensor[(64, 8), float64] */;
    %571 = %568.0;
    %572 = %569.0;
    (%570, %571, %572)
  };
  %573() /* ty=(Tensor[(64, 8), float64], Tensor[(64, 8), float64], Tensor[(16, 10, 4), float64]) */
}

def @func_3427() -> Tensor[(64, 8), float64] {
  @func_3425() /* ty=Tensor[(64, 8), float64] */
}

def @func_2984() -> (Tensor[(64, 8), float64],) {
  @func_2982() /* ty=(Tensor[(64, 8), float64],) */
}

def @func_3503(%var_3493: Tensor[(384), bool]) -> (Tensor[(64, 8), float64], Tensor[(48), bool], Tensor[(384), bool], Tensor[(48), bool]) {
  %574 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %575 = cast(%var_3493, dtype="bool") /* ty=Tensor[(384), bool] */;
  %576 = cast(meta[relay.Constant][29] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
  %577 = reshape(%575, newshape=[64, 6]) /* ty=Tensor[(64, 6), bool] */;
  %578 = reshape(%576, newshape=[48]) /* ty=Tensor[(48), bool] */;
  %579 = @func_3396(%577, %578) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool]) */;
  %580 = %574.0;
  %581 = %579.2;
  (%580, %581, %var_3493, meta[relay.Constant][29] /* ty=Tensor[(48), bool] */)
}

def @func_2868(%var_2867: Tensor[(64, 8), float32]) -> (Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64], Tensor[(16, 1, 4), bool]) {
  %593 = fn (%var_2849: Tensor[(64, 8), float32]) -> (Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64], Tensor[(16, 1, 4), bool]) {
    %582 = @func_1684() /* ty=(Tensor[(64, 8), float64], Tensor[(4, 11, 7), float32]) */;
    %583 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
    %584 = %583.1;
    %585 = cast(%var_2849, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(2), int32] */;
    %587 = cast(%584, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %589 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %590 = %582.1;
    %591 = mod(%587, %588) /* ty=Tensor[(64, 8), float64] */;
    %592 = %589.1;
    (%590, %591, %592)
  };
  %593(%var_2867) /* ty=(Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64], Tensor[(16, 1, 4), bool]) */
}

def @func_2146() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) {
  %594 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
  %595 = %594.0;
  %596 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  (%595, %596)
}

def @func_4509(%var_4475: Tensor[(7, 8, 15), float32], %var_4505: Tensor[(512), bool]) -> (Tensor[(7, 8, 15), float32], Tensor[(64, 6), float32], Tensor[(512), bool]) {
  %597 = cast(%var_4475, dtype="float32") /* ty=Tensor[(7, 8, 15), float32] */;
  %598 = cast(%var_4505, dtype="bool") /* ty=Tensor[(512), bool] */;
  %599 = reshape(%598, newshape=[512, 1]) /* ty=Tensor[(512, 1), bool] */;
  %600 = @func_1634(%599) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 8), uint16]) */;
  %601 = rsqrt(%597) /* ty=Tensor[(7, 8, 15), float32] */;
  %602 = %600.0;
  (%601, %602, %var_4505)
}

def @func_1437(%var_1435: Tensor[(512), bool], %var_1436: Tensor[(256), bool]) -> (Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) {
  @func_1433(%var_1435, %var_1436) /* ty=(Tensor[(512), float32], Tensor[(64, 6), uint64], Tensor[(384), float32], Tensor[(121), float64], Tensor[(256), bool], Tensor[(121), float64], Tensor[(64, 6), bool], Tensor[(48), bool]) */
}

def @func_1307() -> (Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) {
  @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */
}

def @func_1108() -> (Tensor[(16, 1, 4), bool],) {
  %605 = fn () -> (Tensor[(16, 1, 4), bool],) {
    %603 = @func_1017() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 1, 4), bool], Tensor[(64), bool], Tensor[(64, 6), float32]) */;
    %604 = %603.1;
    (%604,)
  };
  %605() /* ty=(Tensor[(16, 1, 4), bool],) */
}

def @func_1548() -> (Tensor[(64, 8), float64],) {
  %610 = fn () -> (Tensor[(64, 8), float64],) {
    %606 = @func_1305() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 8), float32], Tensor[(512), bool]) */;
    %607 = %606.1;
    %608 = cast(%607, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
    %609 = atanh(%608) /* ty=Tensor[(64, 8), float64] */;
    (%609,)
  };
  %610() /* ty=(Tensor[(64, 8), float64],) */
}

def @func_4034() -> (Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) {
  %620 = fn () -> (Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) {
    %611 = @func_391() /* ty=Tensor[(64, 6), float32] */;
    %612 = cast(%611, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %613 = cos(%612) /* ty=Tensor[(64, 6), float32] */;
    %614 = cast(%611, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
    %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(2), int32] */;
    %616 = cast(%613, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
    %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %618 = less(%616, %617) /* ty=Tensor[(64, 6), bool] */;
    %619 = @func_3626() /* ty=Tensor[(16, 10, 4), float64] */;
    (%618, %619)
  };
  %620() /* ty=(Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) */
}

def @func_2816() -> (Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) {
  @func_2814() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */
}

def @func_4597() -> (Tensor[(16, 1, 4), bool],) {
  %623 = fn () -> (Tensor[(16, 1, 4), bool],) {
    %621 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
    %622 = %621.0;
    (%622,)
  };
  %623() /* ty=(Tensor[(16, 1, 4), bool],) */
}

def @func_6387() -> Tensor[(64, 8), uint16] {
  %630 = fn () -> Tensor[(64, 8), uint16] {
    %624 = @func_4159() /* ty=(Tensor[(64, 8), float64], Tensor[(64, 8), float64], Tensor[(16, 10, 4), float64]) */;
    %625 = %624.0;
    %626 = cast(meta[relay.Constant][30] /* ty=Tensor[(64, 8), float64] */, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
    %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(2), int32] */;
    %628 = cast(%625, dtype="uint16") /* ty=Tensor[(64, 8), uint16] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    subtract(%628, %629) /* ty=Tensor[(64, 8), uint16] */
  };
  %630() /* ty=Tensor[(64, 8), uint16] */
}

def @func_5438() -> (Tensor[(11, 12, 10), bool], Tensor[(16, 10, 4), float64], Tensor[(11, 12, 10), float64], Tensor[(11, 12, 10), float32], Tensor[(64, 1), bool], Tensor[(256), bool]) {
  %631 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %632 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="bool") /* ty=Tensor[(11, 12, 10), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
  %636 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="float64") /* ty=Tensor[(11, 12, 10), float64] */;
  %637 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 12, 10), uint16] */, dtype="float32") /* ty=Tensor[(11, 12, 10), float32] */;
  %638 = cast(meta[relay.Constant][33] /* ty=Tensor[(256), bool] */, dtype="bool") /* ty=Tensor[(256), bool] */;
  %639 = reshape(%638, newshape=[256]) /* ty=Tensor[(256), bool] */;
  %640 = @func_3326(%639) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) */;
  %641 = equal(%633, %634) /* ty=Tensor[(11, 12, 10), bool] */;
  %642 = %635.0;
  %643 = asinh(%636) /* ty=Tensor[(11, 12, 10), float64] */;
  %644 = rsqrt(%637) /* ty=Tensor[(11, 12, 10), float32] */;
  %645 = %640.1;
  (%641, %642, %643, %644, %645, meta[relay.Constant][33] /* ty=Tensor[(256), bool] */)
}

def @func_1533(%var_1531: Tensor[(1, 48), bool]) -> (Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(1, 48), bool]) {
  @func_1530(%var_1531) /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(1, 48), bool]) */
}

def @func_5726() -> (Tensor[(4, 11, 7), uint16],) {
  @func_5724() /* ty=(Tensor[(4, 11, 7), uint16],) */
}

def @func_2677() -> (Tensor[(16, ?, 4), bool],) {
  %646 = @func_2482() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) */;
  %647 = %646.0;
  %648 = @func_2482() /* ty=(Tensor[(16, 1, 4), bool], Tensor[(4, 8, 11), float64]) */;
  %649 = %648.0;
  %650 = cast(%649, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %651 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%647, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = logical_or(%652, %653) /* ty=Tensor[(16, ?, 4), bool] */;
  (%654,)
}

def @func_3466(%var_3465: Tensor[(256), bool]) -> (Tensor[(4, 11, 7), int16], Tensor[(256), bool], Tensor[(256), bool]) {
  %661 = fn (%var_3445: Tensor[(256), bool]) -> (Tensor[(4, 11, 7), int16], Tensor[(256), bool], Tensor[(256), bool]) {
    %655 = @func_1227() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), int16]) */;
    %656 = cast(%var_3445, dtype="bool") /* ty=Tensor[(256), bool] */;
    %657 = reshape(%656, newshape=[256]) /* ty=Tensor[(256), bool] */;
    %658 = @func_3326(%657) /* ty=(Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool], Tensor[(256), bool], Tensor[(576), bool], Tensor[(256), bool], Tensor[(512), int8], Tensor[(256), bool], Tensor[(64, 6), float32], Tensor[(24), float64], Tensor[(16, 1, 4), bool]) */;
    %659 = %655.1;
    %660 = %658.2;
    (%659, %660, %var_3445)
  };
  %661(%var_3465) /* ty=(Tensor[(4, 11, 7), int16], Tensor[(256), bool], Tensor[(256), bool]) */
}

def @func_3982(%var_3980: Tensor[(3, 10, 11), float32]) -> (Tensor[(3, 10, 11), int32], Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(?, 256), float64], Tensor[(16, 1, 4), bool], Tensor[(35), uint64], Tensor[(?, 256), bool], Tensor[(16, ?, 4), bool], Tensor[(3, 10, 11), bool]) {
  @func_3979(%var_3980) /* ty=(Tensor[(3, 10, 11), int32], Tensor[(16, 1, 4), bool], Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64], Tensor[(?, 256), float64], Tensor[(16, 1, 4), bool], Tensor[(35), uint64], Tensor[(?, 256), bool], Tensor[(16, ?, 4), bool], Tensor[(3, 10, 11), bool]) */
}

def @func_5503(%var_5502: Tensor[(64, 6), bool]) -> (Tensor[(64, 6), int64], Tensor[(64, 6), int8]) {
  %678 = fn (%var_5457: Tensor[(64, 6), bool]) -> (Tensor[(64, 6), int64], Tensor[(64, 6), int8]) {
    %662 = @func_3013() /* ty=Tensor[(64, 6), bool] */;
    %663 = cast(%662, dtype="int64") /* ty=Tensor[(64, 6), int64] */;
    %664 = shape_of(%var_5457, dtype="int32") /* ty=Tensor[(2), int32] */;
    %665 = cast(%var_5457, dtype="int64") /* ty=Tensor[(64, 6), int64] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %667 = cast(%var_5457, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
    %668 = shape_of(%662, dtype="int32") /* ty=Tensor[(2), int32] */;
    %669 = cast(%662, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %671 = bitwise_or(%669, %670) /* ty=Tensor[(64, 6), uint8] */;
    %672 = cast(%var_5457, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
    %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(2), int32] */;
    %674 = cast(%671, dtype="int8") /* ty=Tensor[(64, 6), int8] */;
    %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %676 = logical_xor(%665, %666) /* ty=Tensor[(64, 6), int64] */;
    %677 = bitwise_xor(%674, %675) /* ty=Tensor[(64, 6), int8] */;
    (%676, %677)
  };
  %678(%var_5502) /* ty=(Tensor[(64, 6), int64], Tensor[(64, 6), int8]) */
}

def @func_5768() -> (Tensor[(4, 16, 14), float64], Tensor[(16, 10, 4), float64]) {
  %683 = fn () -> (Tensor[(4, 16, 14), float64], Tensor[(16, 10, 4), float64]) {
    %679 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 16, 14), float64] */;
    %680 = @func_2430() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 10, 4), float64]) */;
    %681 = rsqrt(%679) /* ty=Tensor[(4, 16, 14), float64] */;
    %682 = %680.1;
    (%681, %682)
  };
  %683() /* ty=(Tensor[(4, 16, 14), float64], Tensor[(16, 10, 4), float64]) */
}

def @func_351(%var_349: Tensor[(12, 2, 2), bool]) -> Tensor[(12, 2, 2), bool] {
  @func_348(%var_349) /* ty=Tensor[(12, 2, 2), bool] */
}

def @func_3628() -> Tensor[(16, 10, 4), float64] {
  @func_3626() /* ty=Tensor[(16, 10, 4), float64] */
}

def @func_6166() -> (Tensor[(64, 6), uint32],) {
  @func_6164() /* ty=(Tensor[(64, 6), uint32],) */
}

def @func_3555() -> (Tensor[(64, ?), bool],) {
  %684 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
  %685 = %684.2;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
  %687 = tan(%686) /* ty=Tensor[(64, 1), float32] */;
  %688 = cast(%685, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(2), int32] */;
  %690 = cast(%687, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %692 = greater(%690, %691) /* ty=Tensor[(64, ?), bool] */;
  %693 = cast(%687, dtype="bool") /* ty=Tensor[(64, 1), bool] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(2), int32] */;
  %695 = cast(%692, dtype="bool") /* ty=Tensor[(64, ?), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %697 = greater_equal(%695, %696) /* ty=Tensor[(64, ?), bool] */;
  (%697,)
}

def @func_6325(%var_6322: Tensor[(1, 3, 1), float32], %var_6323: Tensor[(32, 8), bool], %var_6324: Tensor[(121), float64]) -> (Tensor[(1, 3, 1), float32], Tensor[(640), float64], Tensor[(32, 8), bool], Tensor[(121), float64]) {
  @func_6320(%var_6322, %var_6323, %var_6324) /* ty=(Tensor[(1, 3, 1), float32], Tensor[(640), float64], Tensor[(32, 8), bool], Tensor[(121), float64]) */
}

def @func_2982() -> (Tensor[(64, 8), float64],) {
  %698 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(64, 8), float64] */;
  %701 = erf(%700) /* ty=Tensor[(64, 8), float64] */;
  (%701,)
}

def @func_2958(%var_2933: Tensor[(480, 4), float64], %var_2936: Tensor[(16, 8, 4), bool]) -> (Tensor[(16, 1, 4), bool], Tensor[(6, 7, 8), int16], Tensor[(336), float64], Tensor[(15, 16, 8), float64], Tensor[(30, 4), float64], Tensor[(1560), float64], Tensor[(480, 4), float64], Tensor[(16, 8, 4), bool], Tensor[(12, 48), bool], Tensor[(12, 48), bool]) {
  %702 = @func_1260() /* ty=(Tensor[(64, 6), float32], Tensor[(16, 1, 4), bool], Tensor[(16, 1, 4), bool]) */;
  %703 = cast(meta[relay.Constant][35] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %704 = reshape(%703, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float64] */;
  %705 = cast(meta[relay.Constant][36] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %706 = cast(meta[relay.Constant][37] /* ty=Tensor[(1560), float64] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %707 = cast(%var_2933, dtype="float64") /* ty=Tensor[(480, 4), float64] */;
  %708 = reshape(%705, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), float64] */;
  %709 = reshape(%706, newshape=[13, 8, 15]) /* ty=Tensor[(13, 8, 15), float64] */;
  %710 = reshape(%707, newshape=[96, 20]) /* ty=Tensor[(96, 20), float64] */;
  %711 = @func_2596(%708, %709, %710) /* ty=(Tensor[(13, 8, 15), float64], Tensor[(15, 16, 8), float64], Tensor[(96, 20), float64]) */;
  %712 = @func_1718() /* ty=(Tensor[(16, 1, 4), bool],) */;
  %713 = %712.0;
  %714 = cast(%713, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %715 = cast(%var_2936, dtype="bool") /* ty=Tensor[(16, 8, 4), bool] */;
  %716 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 48), bool] */, dtype="bool") /* ty=Tensor[(12, 48), bool] */;
  %717 = reshape(%716, newshape=[12, 48]) /* ty=Tensor[(12, 48), bool] */;
  %718 = @func_2891(%717) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) */;
  %719 = %702.1;
  %720 = @func_2331(%704) /* ty=Tensor[(6, 7, 8), int16] */;
  %721 = %711.1;
  %722 = less(%714, %715) /* ty=Tensor[(16, 8, 4), bool] */;
  %723 = %718.2;
  (%719, %720, meta[relay.Constant][35] /* ty=Tensor[(336), float64] */, %721, meta[relay.Constant][36] /* ty=Tensor[(30, 4), float64] */, meta[relay.Constant][37] /* ty=Tensor[(1560), float64] */, %var_2933, %722, %723, meta[relay.Constant][38] /* ty=Tensor[(12, 48), bool] */)
}

def @func_348(%var_329: Tensor[(12, 2, 2), bool]) -> Tensor[(12, 2, 2), bool] {
  %724 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 2, 2), bool] */, dtype="bool") /* ty=Tensor[(1, 2, 2), bool] */;
  %725 = cast(%var_329, dtype="bool") /* ty=Tensor[(12, 2, 2), bool] */;
  logical_and(%724, %725) /* ty=Tensor[(12, 2, 2), bool] */
}

def @func_3425() -> Tensor[(64, 8), float64] {
  %726 = @func_1547() /* ty=(Tensor[(64, 8), float64],) */;
  %726.0
}

def @func_1180(%var_1179: Tensor[(64, 4), bool]) -> (Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) {
  %754 = fn (%var_1126: Tensor[(64, 4), bool]) -> (Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) {
    %727 = @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */;
    %728 = %727.2;
    %729 = cast(%728, dtype="uint64") /* ty=Tensor[(64, 1), uint64] */;
    %730 = cast(%var_1126, dtype="uint64") /* ty=Tensor[(64, 4), uint64] */;
    %731 = cast(%728, dtype="float32") /* ty=Tensor[(64, 1), float32] */;
    %732 = cast(%var_1126, dtype="float32") /* ty=Tensor[(64, 4), float32] */;
    %733 = cast(meta[relay.Constant][40] /* ty=Tensor[(48), bool] */, dtype="bool") /* ty=Tensor[(48), bool] */;
    %734 = reshape(%733, newshape=[48]) /* ty=Tensor[(48), bool] */;
    %735 = @func_1095(%734) /* ty=(Tensor[(64, 6), float32], Tensor[(12, 2, 2), bool], Tensor[(48), bool], Tensor[(64, 6), bool], Tensor[(64, 6), bool]) */;
    %736 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 64), bool] */, dtype="bool") /* ty=Tensor[(8, 64), bool] */;
    %737 = reshape(%736, newshape=[64, 8]) /* ty=Tensor[(64, 8), bool] */;
    %738 = @func_900(%737) /* ty=(Tensor[(64, 8), float32],) */;
    %739 = @func_1107() /* ty=(Tensor[(16, 1, 4), bool],) */;
    %740 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 64), bool] */, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
    %741 = rsqrt(%740) /* ty=Tensor[(8, 64), float64] */;
    %742 = cast(%741, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
    %743 = tan(%742) /* ty=Tensor[(8, 64), float64] */;
    %744 = cast(%743, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
    %745 = shape_of(%741, dtype="int32") /* ty=Tensor[(2), int32] */;
    %746 = cast(%741, dtype="float64") /* ty=Tensor[(8, 64), float64] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %748 = bitwise_xor(%729, %730) /* ty=Tensor[(64, 4), uint64] */;
    %749 = power(%731, %732) /* ty=Tensor[(64, 4), float32] */;
    %750 = %735.2;
    %751 = %738.0;
    %752 = %739.0;
    %753 = power(%746, %747) /* ty=Tensor[(8, 64), float64] */;
    (%748, %749, %750, meta[relay.Constant][40] /* ty=Tensor[(48), bool] */, %751, %752, %753)
  };
  %754(%var_1179) /* ty=(Tensor[(64, 4), uint64], Tensor[(64, 4), float32], Tensor[(48), bool], Tensor[(48), bool], Tensor[(64, 8), float32], Tensor[(16, 1, 4), bool], Tensor[(8, 64), float64]) */
}

def @func_963(%var_961: Tensor[(64, 4), bool], %var_962: Tensor[(121), float64]) -> (Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) {
  @func_959(%var_961, %var_962) /* ty=(Tensor[(64, 4), float32], Tensor[(64, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(640), float64], Tensor[(121), float64]) */
}

def @func_297() -> (Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) {
  @func_295() /* ty=(Tensor[(4, 11, 7), uint16], Tensor[(16, 1, 4), bool], Tensor[(64, 1), bool]) */
}

def @func_874(%var_803: Tensor[(6, 4, 1), float64]) -> (Tensor[(6, 4, 15), bool], Tensor[(64, 6), float32]) {
  %755 = cast(%var_803, dtype="float64") /* ty=Tensor[(6, 4, 1), float64] */;
  %756 = atanh(%755) /* ty=Tensor[(6, 4, 1), float64] */;
  %757 = cast(%756, dtype="bool") /* ty=Tensor[(6, 4, 1), bool] */;
  %758 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 4, 15), float64] */, dtype="bool") /* ty=Tensor[(6, 4, 15), bool] */;
  %759 = equal(%757, %758) /* ty=Tensor[(6, 4, 15), bool] */;
  %760 = @func_391() /* ty=Tensor[(64, 6), float32] */;
  (%759, %760)
}

def @func_708(%var_707: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), float64], Tensor[(16, 10, 4), float64], Tensor[(640), float64], Tensor[(1, 121), float64]) {
  %772 = fn (%var_687: Tensor[(11, 10, 6), float64]) -> (Tensor[(11, 10, 6), float64], Tensor[(16, 10, 4), float64], Tensor[(640), float64], Tensor[(1, 121), float64]) {
    %761 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 10, 6), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
    %762 = shape_of(%var_687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %763 = cast(%var_687, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
    %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %765 = cast(meta[relay.Constant][44] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %766 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 121), float64] */, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
    %767 = reshape(%765, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
    %768 = reshape(%766, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
    %769 = @func_655(%767, %768) /* ty=(Tensor[(11, 11, 1), float64], Tensor[(11, 11), float64], Tensor[(16, 10, 4), float64], Tensor[(11, 11, 1), float64], Tensor[(16, 1, 4), bool]) */;
    %770 = floor_divide(%763, %764) /* ty=Tensor[(11, 10, 6), float64] */;
    %771 = %769.2;
    (%770, %771, meta[relay.Constant][44] /* ty=Tensor[(640), float64] */, meta[relay.Constant][45] /* ty=Tensor[(1, 121), float64] */)
  };
  %772(%var_707) /* ty=(Tensor[(11, 10, 6), float64], Tensor[(16, 10, 4), float64], Tensor[(640), float64], Tensor[(1, 121), float64]) */
}

def @func_4419(%var_4418: Tensor[(16, 10, 4), float64]) -> (Tensor[(16, 10, 4), int8], Tensor[(64, 8), float64]) {
  %782 = fn (%var_4389: Tensor[(16, 10, 4), float64]) -> (Tensor[(16, 10, 4), int8], Tensor[(64, 8), float64]) {
    %773 = @func_4319() /* ty=(Tensor[(16, 10, 4), float64],) */;
    %774 = %773.0;
    %775 = cast(%var_4389, dtype="int8") /* ty=Tensor[(16, 10, 4), int8] */;
    %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
    %777 = cast(%774, dtype="int8") /* ty=Tensor[(16, 10, 4), int8] */;
    %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %779 = @func_2982() /* ty=(Tensor[(64, 8), float64],) */;
    %780 = left_shift(%777, %778) /* ty=Tensor[(16, 10, 4), int8] */;
    %781 = %779.0;
    (%780, %781)
  };
  %782(%var_4418) /* ty=(Tensor[(16, 10, 4), int8], Tensor[(64, 8), float64]) */
}

def @func_3592() -> (Tensor[(15, 10, 1), float64],) {
  @func_3590() /* ty=(Tensor[(15, 10, 1), float64],) */
}

def @func_5946(%var_5942: Tensor[(144, 4), bool], %var_5943: Tensor[(64, 6), bool], %var_5944: Tensor[(64, 6), float64], %var_5945: Tensor[(660), float64]) -> (Tensor[(64, 9), float32], Tensor[(144, 4), bool], Tensor[(64, 6), float32], Tensor[(64, 6), bool], Tensor[(64, 8), float64], Tensor[(512, 1), float32], Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(640), float64], Tensor[(660), float64], Tensor[(64, 6), float32]) {
  %827 = fn (%var_5857: Tensor[(144, 4), bool], %var_5860: Tensor[(64, 6), bool], %var_5881: Tensor[(64, 6), float64], %var_5921: Tensor[(660), float64]) -> (Tensor[(64, 9), float32], Tensor[(144, 4), bool], Tensor[(64, 6), float32], Tensor[(64, 6), bool], Tensor[(64, 8), float64], Tensor[(512, 1), float32], Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(640), float64], Tensor[(660), float64], Tensor[(64, 6), float32]) {
    %783 = cast(%var_5857, dtype="bool") /* ty=Tensor[(144, 4), bool] */;
    %784 = reshape(%783, newshape=[12, 48]) /* ty=Tensor[(12, 48), bool] */;
    %785 = @func_2891(%784) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 9), float32], Tensor[(12, 48), bool]) */;
    %786 = @func_4033() /* ty=(Tensor[(64, 6), bool], Tensor[(16, 10, 4), float64]) */;
    %787 = %786.0;
    %788 = cast(%var_5860, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
    %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(2), int32] */;
    %790 = cast(%787, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %792 = floor_divide(%790, %791) /* ty=Tensor[(64, 6), float64] */;
    %793 = cast(%792, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %794 = shape_of(%var_5860, dtype="int32") /* ty=Tensor[(2), int32] */;
    %795 = cast(%var_5860, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %797 = cast(%var_5860, dtype="float64") /* ty=Tensor[(64, 6), float64] */;
    %798 = asin(%797) /* ty=Tensor[(64, 6), float64] */;
    %799 = cast(%var_5881, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(2), int32] */;
    %801 = cast(%798, dtype="uint8") /* ty=Tensor[(64, 6), uint8] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %803 = right_shift(%801, %802) /* ty=Tensor[(64, 6), uint8] */;
    %804 = cast(%787, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
    %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(2), int32] */;
    %806 = cast(%803, dtype="bool") /* ty=Tensor[(64, 6), bool] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %808 = cast(meta[relay.Constant][46] /* ty=Tensor[(512, 1), float32] */, dtype="float32") /* ty=Tensor[(512, 1), float32] */;
    %809 = reshape(%808, newshape=[64, 8]) /* ty=Tensor[(64, 8), float32] */;
    %810 = @func_2866(%809) /* ty=(Tensor[(4, 11, 7), float32], Tensor[(64, 8), float64], Tensor[(16, 1, 4), bool]) */;
    %811 = @func_2146() /* ty=(Tensor[(16, 10, 4), float64], Tensor[(64, 6), float32]) */;
    %812 = @func_5724() /* ty=(Tensor[(4, 11, 7), uint16],) */;
    %813 = cast(%803, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %814 = cast(%var_5921, dtype="float64") /* ty=Tensor[(660), float64] */;
    %815 = reshape(%814, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), float64] */;
    %816 = @func_706(%815) /* ty=(Tensor[(11, 10, 6), float64], Tensor[(16, 10, 4), float64], Tensor[(640), float64], Tensor[(1, 121), float64]) */;
    %817 = cast(%798, dtype="float32") /* ty=Tensor[(64, 6), float32] */;
    %818 = %785.1;
    %819 = mod(%795, %796) /* ty=Tensor[(64, 6), float32] */;
    %820 = logical_and(%806, %807) /* ty=Tensor[(64, 6), bool] */;
    %821 = %810.1;
    %822 = %811.0;
    %823 = %812.0;
    %824 = tan(%813) /* ty=Tensor[(64, 6), float32] */;
    %825 = %816.2;
    %826 = atan(%817) /* ty=Tensor[(64, 6), float32] */;
    (%818, %var_5857, %819, %820, %821, meta[relay.Constant][46] /* ty=Tensor[(512, 1), float32] */, %822, %823, %824, %825, %var_5921, %826)
  };
  %827(%var_5942, %var_5943, %var_5944, %var_5945) /* ty=(Tensor[(64, 9), float32], Tensor[(144, 4), bool], Tensor[(64, 6), float32], Tensor[(64, 6), bool], Tensor[(64, 8), float64], Tensor[(512, 1), float32], Tensor[(16, 10, 4), float64], Tensor[(4, 11, 7), uint16], Tensor[(64, 6), float32], Tensor[(640), float64], Tensor[(660), float64], Tensor[(64, 6), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen578/build/output.py", line 2138, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:35:11] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

