==========mod==========
#[version = "0.0.5"]
def @func_6900(%var_6891: Tensor[(65), float32]) -> (Tensor[(2, 13, 10), uint8], Tensor[(176), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32]) {
  %0 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %1 = @func_6151() /* ty=(Tensor[(176), bool],) */;
  %2 = cast(%var_6891, dtype="float32") /* ty=Tensor[(65), float32] */;
  %3 = reshape(%2, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %4 = %0.0;
  %5 = %1.0;
  %6 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %7 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
  %8 = @func_1451(%3) /* ty=Tensor[(5, 13), float32] */;
  (%4, %5, %6, %7, %8, %var_6891)
}

def @func_3223() -> (Tensor[(11, 15, 10), float64],) {
  %9 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%9,)
}

def @func_2893() -> Tensor[(2, 13, 10), uint8] {
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(2, 13, 10), uint8] */;
  %11 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(2, 13, 10), uint8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  subtract(%12, %13) /* ty=Tensor[(2, 13, 10), uint8] */
}

def @func_3181() -> (Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
  %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %15 = reshape(%14, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %16 = @func_808(%15) /* ty=(Tensor[(13, 13, 5), float64],) */;
  %17 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %18 = %16.0;
  (%17, %18, meta[relay.Constant][2] /* ty=Tensor[(845), float64] */)
}

def @func_1451(%var_1447: Tensor[(5, 13), float32]) -> Tensor[(5, 13), float32] {
  %19 = cast(%var_1447, dtype="float32") /* ty=Tensor[(5, 13), float32] */;
  acos(%19) /* ty=Tensor[(5, 13), float32] */
}

def @func_3254() -> Tensor[(11, 15, 10), float64] {
  @func_2779() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_7829() -> Tensor[(5, 13), float32] {
  %20 = @func_5831() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) */;
  %20.1
}

def @func_808(%var_797: Tensor[(13, 13, 5), float64]) -> (Tensor[(13, 13, 5), float64],) {
  %21 = cast(%var_797, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %22 = tan(%21) /* ty=Tensor[(13, 13, 5), float64] */;
  (%22,)
}

def @func_3870() -> (Tensor[(11, 15, 10), int32],) {
  %23 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %24 = %23.0;
  (%24,)
}

def @func_2548() -> Tensor[(11, 15, 10), float64] {
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  erf(%25) /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_4662() -> (Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) {
  %26 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %27 = cast(meta[relay.Constant][4] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %28 = reshape(%27, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %29 = @func_2975(%28) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(14, 10, 11), bool], Tensor[(1540), int16]) */;
  %30 = %26.0;
  %31 = %29.2;
  (%30, %31, meta[relay.Constant][4] /* ty=Tensor[(1540), int16] */)
}

def @func_5278() -> (Tensor[(2, 13, 10), uint8],) {
  %32 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %33 = %32.0;
  (%33,)
}

def @func_6499(%var_6486: Tensor[(7, 9, 14), float32]) -> Tensor[(7, 9, 14), float32] {
  %34 = cast(%var_6486, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
  %35 = erf(%34) /* ty=Tensor[(7, 9, 14), float32] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
  %37 = atanh(%36) /* ty=Tensor[(7, 9, 14), float32] */;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
  log2(%38) /* ty=Tensor[(7, 9, 14), float32] */
}

def @func_4427() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %39 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %40 = %39.0;
  %41 = cast(%40, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %42 = reshape(%41, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
  %43 = @func_3069(%42) /* ty=Tensor[(11, 15, 10), int32] */;
  (%40, %43)
}

def @func_4793() -> Tensor[(1540), int16] {
  %44 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
  %44.2
}

def @func_5062() -> (Tensor[(11, 15, 10), float64],) {
  %45 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %46 = %45.0;
  (%46,)
}

def @func_2858(%var_2850: Tensor[(14, 10, 11), int16], %var_2851: Tensor[(14, 10, 11), int16]) -> (Tensor[(14, 10, 11), bool],) {
  %47 = cast(%var_2851, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
  %48 = shape_of(%var_2850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_2850, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = equal(%49, %50) /* ty=Tensor[(14, 10, 11), bool] */;
  (%51,)
}

def @func_5602() -> (Tensor[(1540), int16],) {
  %52 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
  %53 = %52.1;
  (%53,)
}

def @func_5906(%var_5883: Tensor[(10, 12, 5), float32], %var_5892: bool) -> (Tensor[(10, 12, 5), float32], Tensor[(2, 9, 6), bool], Tensor[(176), int64], bool) {
  %54 = cast(%var_5883, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
  %55 = cast(meta[relay.Constant][5] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
  %56 = cast(%var_5892, dtype="bool") /* ty=bool */;
  %57 = reshape(%55, newshape=[176]) /* ty=Tensor[(176), int64] */;
  %58 = reshape(%56, newshape=[]) /* ty=bool */;
  %59 = @func_4469(%57, %58) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) */;
  %60 = rsqrt(%54) /* ty=Tensor[(10, 12, 5), float32] */;
  %61 = %59.1;
  (%60, %61, meta[relay.Constant][5] /* ty=Tensor[(176), int64] */, %var_5892)
}

def @func_5919(%var_5914: Tensor[(3, 2, 2), int64]) -> (Tensor[(3, 2, 2), int64],) {
  %62 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 2, 2), int64] */, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
  %63 = shape_of(%var_5914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_5914, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %66 = bitwise_or(%64, %65) /* ty=Tensor[(3, 2, 2), int64] */;
  (%66,)
}

def @func_6271(%var_6258: Tensor[(600), float32], %var_6259: bool) -> (Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64], bool, Tensor[(600), float32], bool) {
  %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %68 = reshape(%67, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %69 = @func_808(%68) /* ty=(Tensor[(13, 13, 5), float64],) */;
  %70 = cast(%var_6258, dtype="float32") /* ty=Tensor[(600), float32] */;
  %71 = cast(%var_6259, dtype="bool") /* ty=bool */;
  %72 = reshape(%70, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), float32] */;
  %73 = reshape(%71, newshape=[]) /* ty=bool */;
  %74 = @func_5906(%72, %73) /* ty=(Tensor[(10, 12, 5), float32], Tensor[(2, 9, 6), bool], Tensor[(176), int64], bool) */;
  %75 = @func_5690() /* ty=Tensor[(11, 15, 10), float64] */;
  %76 = %69.0;
  %77 = %74.3;
  (%75, %76, meta[relay.Constant][7] /* ty=Tensor[(845), float64] */, %77, %var_6258, %var_6259)
}

def @func_6786() -> (Tensor[(176), bool], Tensor[(11, 15, 10), int8]) {
  %78 = @func_6151() /* ty=(Tensor[(176), bool],) */;
  %79 = %78.0;
  %80 = @func_6310() /* ty=Tensor[(11, 15, 10), int8] */;
  (%79, %80)
}

def @func_3088() -> (Tensor[(11, 15, 10), float64],) {
  %81 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%81,)
}

def @func_2975(%var_2965: Tensor[(1540), int16]) -> (Tensor[(11, 15, 10), float32], Tensor[(14, 10, 11), bool], Tensor[(1540), int16]) {
  %82 = cast(%var_2965, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %83 = cast(%var_2965, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %84 = reshape(%82, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %85 = reshape(%83, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %86 = @func_2858(%84, %85) /* ty=(Tensor[(14, 10, 11), bool],) */;
  %87 = @func_2652() /* ty=Tensor[(11, 15, 10), float32] */;
  %88 = %86.0;
  (%87, %88, %var_2965)
}

def @func_3357() -> (Tensor[(11, 15, 10), int32],) {
  %89 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
  %90 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %94 = bitwise_xor(%92, %93) /* ty=Tensor[(11, 15, 10), int32] */;
  (%94,)
}

def @func_4601() -> (Tensor[(11, 15, 10), float64],) {
  %95 = @func_4100() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %96 = %95.0;
  (%96,)
}

def @func_7714() -> (Tensor[(11, 15, 10), int8],) {
  %97 = @func_7118() /* ty=Tensor[(11, 15, 10), int8] */;
  (%97,)
}

def @func_163(%var_132: float32, %var_133: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float64] {
  %98 = cast(%var_132, dtype="float32") /* ty=float32 */;
  %99 = cast(%var_133, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %100 = subtract(%98, %99) /* ty=Tensor[(3, 9, 7), float32] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  sin(%101) /* ty=Tensor[(3, 9, 7), float64] */
}

def @func_7036() -> (Tensor[(1540), bool],) {
  %102 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %103 = cast(meta[relay.Constant][9] /* ty=Tensor[(1540), int16] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(1), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?), bool] */;
  %107 = logical_or(%105, %106) /* ty=Tensor[(1540), bool] */;
  (%107,)
}

def @func_3145(%var_3122: Tensor[(2, 9, 6), int32], %var_3123: Tensor[(2, 9, 6), int32], %var_3132: Tensor[(4, 44), int64], %var_3133: bool) -> (Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) {
  %108 = cast(%var_3123, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %109 = shape_of(%var_3122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_3122, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = cast(meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %114 = reshape(%112, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float32] */;
  %115 = reshape(%113, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %116 = @func_676(%114, %115) /* ty=(Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) */;
  %117 = cast(%var_3132, dtype="int64") /* ty=Tensor[(4, 44), int64] */;
  %118 = cast(%var_3133, dtype="bool") /* ty=bool */;
  %119 = reshape(%117, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %120 = reshape(%118, newshape=[]) /* ty=bool */;
  %121 = @func_761(%119, %120) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %122 = %121.1;
  %123 = cast(%var_3133, dtype="uint32") /* ty=uint32 */;
  %124 = cast(%122, dtype="uint32") /* ty=Tensor[(16, 1, 13), uint32] */;
  %125 = equal(%110, %111) /* ty=Tensor[(2, 9, 6), bool] */;
  %126 = %116.1;
  %127 = left_shift(%123, %124) /* ty=Tensor[(16, 1, 13), uint32] */;
  (%125, %var_3132, %126, meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, meta[relay.Constant][11] /* ty=Tensor[(189), float32] */, %127)
}

def @func_3094() -> (Tensor[(2, 13, 10), uint8],) {
  %128 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  (%128,)
}

def @func_2722(%var_2690: Tensor[(65), float32]) -> (Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(11, 15, 10), bool], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
  %129 = cast(%var_2690, dtype="float32") /* ty=Tensor[(65), float32] */;
  %130 = reshape(%129, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %131 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %132 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = cast(%131, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %137 = cast(meta[relay.Constant][13] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %138 = reshape(%137, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %139 = @func_808(%138) /* ty=(Tensor[(13, 13, 5), float64],) */;
  %140 = @func_1451(%130) /* ty=Tensor[(5, 13), float32] */;
  %141 = equal(%134, %135) /* ty=Tensor[(11, 15, 10), bool] */;
  %142 = asin(%136) /* ty=Tensor[(11, 15, 10), float64] */;
  %143 = %139.0;
  (%140, %var_2690, %141, %142, %143, meta[relay.Constant][13] /* ty=Tensor[(845), float64] */)
}

def @func_4732(%var_4698: Tensor[(10, 2, 16), float64], %var_4699: Tensor[(10, 2, 16), float64]) -> (Tensor[(10, 2, 16), float64], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(10, 2, 16), float32]) {
  %144 = cast(%var_4699, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %145 = shape_of(%var_4698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_4698, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %148 = @func_4100() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %149 = @func_4601() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %150 = cast(%var_4699, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %151 = tan(%150) /* ty=Tensor[(10, 2, 16), float64] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
  %153 = atan(%152) /* ty=Tensor[(10, 2, 16), float64] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
  %155 = floor_mod(%146, %147) /* ty=Tensor[(10, 2, 16), float64] */;
  %156 = %148.0;
  %157 = %149.0;
  %158 = acosh(%154) /* ty=Tensor[(10, 2, 16), float32] */;
  (%155, %156, %157, %158)
}

def @func_6048() -> (Tensor[(11, 15, 10), float64],) {
  %159 = @func_4427() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %160 = %159.0;
  (%160,)
}

def @func_371(%var_362: Tensor[(8, 4, 7), bool]) -> Tensor[(8, 4, 7), bool] {
  %161 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 4, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
  %162 = cast(%var_362, dtype="bool") /* ty=Tensor[(8, 4, 7), bool] */;
  logical_and(%161, %162) /* ty=Tensor[(8, 4, 7), bool] */
}

def @func_4290() -> (Tensor[(11, 15, 10), float64],) {
  %163 = @func_3744() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) */;
  %164 = %163.0;
  (%164,)
}

def @func_1187(%var_1124: Tensor[(13, 14, 10), float64], %var_1131: Tensor[(13, 14, 10), float64], %var_1148: Tensor[(13, 14, 10), float64], %var_1185: bool) -> (Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float32], Tensor[(2, 11, 16), int64], Tensor[(176), int64], bool) {
  %165 = cast(%var_1124, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
  %166 = erf(%165) /* ty=Tensor[(13, 14, 10), float64] */;
  %167 = cast(%var_1131, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %171 = power(%169, %170) /* ty=Tensor[(13, 14, 10), float32] */;
  %172 = cast(%var_1148, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
  %173 = shape_of(%var_1131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_1131, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = greater_equal(%174, %175) /* ty=Tensor[(13, 14, 10), bool] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %178 = acosh(%177) /* ty=Tensor[(13, 14, 10), float32] */;
  %179 = cast(%178, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %180 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%171, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %183 = add(%181, %182) /* ty=Tensor[(13, 14, 10), float32] */;
  %184 = cast(%171, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %188 = cast(%178, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
  %189 = cast(meta[relay.Constant][15] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
  %190 = cast(%var_1185, dtype="bool") /* ty=bool */;
  %191 = reshape(%189, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %192 = reshape(%190, newshape=[]) /* ty=bool */;
  %193 = @func_761(%191, %192) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %194 = multiply(%186, %187) /* ty=Tensor[(13, 14, 10), float32] */;
  %195 = acos(%188) /* ty=Tensor[(13, 14, 10), float32] */;
  %196 = %193.0;
  (%194, %195, %196, meta[relay.Constant][15] /* ty=Tensor[(176), int64] */, %var_1185)
}

def @func_4569(%var_4564: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(224), bool]) {
  %197 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %199 = cast(%var_4564, dtype="bool") /* ty=Tensor[(224), bool] */;
  %200 = reshape(%198, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
  %201 = reshape(%199, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %202 = @func_4535(%200, %201) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(2, 13, 10), uint8], Tensor[(1, 28), float64]) */;
  %203 = %202.2;
  (%197, %203, %var_4564)
}

def @func_3469(%var_3458: Tensor[(2, 13, 10), uint8]) -> (Tensor[(11, 15, 10), uint16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int8]) {
  %204 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
  %205 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 15, 10), float64] */, dtype="uint16") /* ty=Tensor[(11, 15, 10), uint16] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="uint16") /* ty=Tensor[(11, 15, 10), uint16] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %209 = cast(%204, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %210 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %211 = cast(%var_3458, dtype="int8") /* ty=Tensor[(2, 13, 10), int8] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="int8") /* ty=Tensor[(2, 13, 10), int8] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %215 = logical_xor(%207, %208) /* ty=Tensor[(11, 15, 10), uint16] */;
  %216 = sin(%209) /* ty=Tensor[(11, 15, 10), float64] */;
  %217 = maximum(%213, %214) /* ty=Tensor[(2, 13, 10), int8] */;
  (%215, %216, %217)
}

def @func_5009(%var_4997: Tensor[(3, 660), float32], %var_5002: Tensor[(15, 11, 12), float32]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32], Tensor[(3, 660), float32], Tensor[(15, 11, 12), float32], Tensor[(11, 15, 10), float64]) {
  %218 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %219 = cast(%var_4997, dtype="float32") /* ty=Tensor[(3, 660), float32] */;
  %220 = reshape(%219, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %221 = @func_4774(%220) /* ty=Tensor[(15, 11, 12), float32] */;
  %222 = cast(%var_5002, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %226 = @func_3921() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) */;
  %227 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %228 = %218.0;
  %229 = power(%224, %225) /* ty=Tensor[(15, 11, 12), float32] */;
  %230 = %226.4;
  (%227, %228, %var_4997, %229, %230)
}

def @func_5119(%var_5110: Tensor[(990, 2), float32]) -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(990, 2), float32]) {
  %231 = @func_5040() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %232 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
  %233 = cast(%var_5110, dtype="float32") /* ty=Tensor[(990, 2), float32] */;
  %234 = cast(%var_5110, dtype="float32") /* ty=Tensor[(990, 2), float32] */;
  %235 = reshape(%233, newshape=[3, 660]) /* ty=Tensor[(3, 660), float32] */;
  %236 = reshape(%234, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %237 = @func_5009(%235, %236) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32], Tensor[(3, 660), float32], Tensor[(15, 11, 12), float32], Tensor[(11, 15, 10), float64]) */;
  %238 = %231.1;
  %239 = %232.0;
  %240 = %237.0;
  (%238, %239, %240, %var_5110)
}

def @func_3744() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) {
  %241 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %242 = @func_2652() /* ty=Tensor[(11, 15, 10), float32] */;
  (%241, %242)
}

def @func_5448() -> Tensor[(10, 15, 15), float64] {
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 15), float32] */;
  %244 = sqrt(%243) /* ty=Tensor[(10, 15, 15), float32] */;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %246 = sin(%245) /* ty=Tensor[(10, 15, 15), float64] */;
  %247 = cast(%244, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%249, %250) /* ty=Tensor[(10, 15, 15), float64] */
}

def @func_3848(%var_3841: Tensor[(2, 13, 10), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int32]) {
  %251 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %252 = cast(meta[relay.Constant][18] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %253 = cast(meta[relay.Constant][18] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %254 = reshape(%252, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %255 = reshape(%253, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %256 = @func_2858(%254, %255) /* ty=(Tensor[(14, 10, 11), bool],) */;
  %257 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %258 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(2, 13, 10), float64] */;
  %260 = atanh(%259) /* ty=Tensor[(2, 13, 10), float64] */;
  %261 = cast(%var_3841, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %265 = %251.0;
  %266 = %256.0;
  %267 = %257.0;
  %268 = bitwise_xor(%263, %264) /* ty=Tensor[(2, 13, 10), int32] */;
  (%265, %266, meta[relay.Constant][18] /* ty=Tensor[(1540), int16] */, %267, %268)
}

def @func_2758() -> (Tensor[(11, 15, 10), float64],) {
  %269 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%269,)
}

def @func_4758() -> (Tensor[(11, 15, 10), int8],) {
  %270 = @func_2758() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %271 = %270.0;
  %272 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 15, 10), float64] */, dtype="int8") /* ty=Tensor[(11, 15, 10), int8] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="int8") /* ty=Tensor[(11, 15, 10), int8] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %276 = add(%274, %275) /* ty=Tensor[(11, 15, 10), int8] */;
  (%276,)
}

def @func_7118() -> Tensor[(11, 15, 10), int8] {
  @func_6310() /* ty=Tensor[(11, 15, 10), int8] */
}

def @func_6846(%var_6810: Tensor[(12, 16, 1), float32], %var_6830: Tensor[(12, 16, 8), float32]) -> (Tensor[(1540), int16], Tensor[(28), float64], Tensor[(28), float64], Tensor[(12, 16, 8), float32], Tensor[(12, 16, 1), float64]) {
  %277 = cast(meta[relay.Constant][20] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %278 = reshape(%277, newshape=[28]) /* ty=Tensor[(28), float64] */;
  %279 = @func_4268(%278) /* ty=(Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) */;
  %280 = cast(%var_6810, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  %281 = cast(%var_6830, dtype="float32") /* ty=Tensor[(12, 16, 8), float32] */;
  %282 = cast(%var_6810, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  %283 = atan(%282) /* ty=Tensor[(12, 16, 1), float32] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(12, 16, 1), float64] */;
  %285 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %286 = %279.1;
  %287 = floor_mod(%280, %281) /* ty=Tensor[(12, 16, 8), float32] */;
  %288 = exp(%284) /* ty=Tensor[(12, 16, 1), float64] */;
  (%285, %286, meta[relay.Constant][20] /* ty=Tensor[(28), float64] */, %287, %288)
}

def @func_2779() -> Tensor[(11, 15, 10), float64] {
  %289 = @func_2758() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %289.0
}

def @func_7363(%var_7350: bool) -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), bool], Tensor[(224), bool], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool) {
  %290 = @func_4601() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %291 = %290.0;
  %292 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %296 = cast(meta[relay.Constant][22] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %297 = reshape(%296, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %298 = @func_2606(%297) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %299 = cast(%var_7350, dtype="bool") /* ty=bool */;
  %300 = reshape(%299, newshape=[]) /* ty=bool */;
  %301 = @func_5654() /* ty=Tensor[(11, 15, 10), int32] */;
  %302 = less(%294, %295) /* ty=Tensor[(11, 15, 10), bool] */;
  %303 = %298.1;
  %304 = @func_595(%300) /* ty=Tensor[(16, 1, 13), bool] */;
  (%301, %302, %303, meta[relay.Constant][22] /* ty=Tensor[(224), bool] */, %304, %var_7350)
}

def @func_5654() -> Tensor[(11, 15, 10), int32] {
  %305 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %305.0
}

def @func_7135() -> (Tensor[(11, 15, 10), int32],) {
  %306 = @func_6111() /* ty=Tensor[(11, 15, 10), int32] */;
  (%306,)
}

def @func_2006(%var_1977: Tensor[(3, 14, 3), uint8], %var_1978: Tensor[(3, 14, 3), uint8], %var_2003: float32, %var_2004: Tensor[(189), float32]) -> (Tensor[(3, 14, 3), uint8], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) {
  %307 = cast(%var_1978, dtype="uint8") /* ty=Tensor[(3, 14, 3), uint8] */;
  %308 = shape_of(%var_1977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%var_1977, dtype="uint8") /* ty=Tensor[(3, 14, 3), uint8] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %311 = cast(%var_2003, dtype="float32") /* ty=float32 */;
  %312 = cast(%var_2004, dtype="float32") /* ty=Tensor[(189), float32] */;
  %313 = reshape(%311, newshape=[]) /* ty=float32 */;
  %314 = reshape(%312, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %315 = multiply(%309, %310) /* ty=Tensor[(3, 14, 3), uint8] */;
  %316 = @func_163(%313, %314) /* ty=Tensor[(3, 9, 7), float64] */;
  (%315, %316, %var_2003, %var_2004)
}

def @func_5871() -> Tensor[(11, 15, 10), float64] {
  %317 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %317.0
}

def @func_5040() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %318 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %320 = reshape(%319, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
  %321 = @func_3069(%320) /* ty=Tensor[(11, 15, 10), int32] */;
  (%318, %321)
}

def @func_7643(%var_7618: Tensor[(224), bool], %var_7622: Tensor[(189, 1), float32], %var_7641: Tensor[(12), int64]) -> (Tensor[(2, 13, 10), int16], Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189, 1), float32], Tensor[(3, 2, 2), int64], Tensor[(12), int64]) {
  %322 = @func_5278() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %323 = %322.0;
  %324 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="int16") /* ty=Tensor[(2, 13, 10), int16] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="int16") /* ty=Tensor[(2, 13, 10), int16] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %328 = cast(%var_7618, dtype="bool") /* ty=Tensor[(224), bool] */;
  %329 = reshape(%328, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %330 = @func_3577(%329) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) */;
  %331 = cast(5.89632f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %332 = cast(%var_7622, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
  %333 = reshape(%331, newshape=[]) /* ty=float32 */;
  %334 = reshape(%332, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %335 = cast(%var_7641, dtype="int64") /* ty=Tensor[(12), int64] */;
  %336 = reshape(%335, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), int64] */;
  %337 = @func_5919(%336) /* ty=(Tensor[(3, 2, 2), int64],) */;
  %338 = right_shift(%326, %327) /* ty=Tensor[(2, 13, 10), int16] */;
  %339 = %330.0;
  %340 = @func_163(%333, %334) /* ty=Tensor[(3, 9, 7), float64] */;
  %341 = %337.0;
  (%338, %339, %var_7618, %340, 5.89632f /* ty=float32 */, %var_7622, %341, %var_7641)
}

def @func_6984(%var_6966: Tensor[(11, 15, 10), float64], %var_6975: float32, %var_6976: Tensor[(189), float32]) -> (Tensor[(11, 15, 10), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) {
  %342 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %343 = %342.0;
  %344 = cast(%var_6966, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %348 = cast(%var_6975, dtype="float32") /* ty=float32 */;
  %349 = cast(%var_6976, dtype="float32") /* ty=Tensor[(189), float32] */;
  %350 = reshape(%348, newshape=[]) /* ty=float32 */;
  %351 = reshape(%349, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %352 = logical_and(%346, %347) /* ty=Tensor[(11, 15, 10), bool] */;
  %353 = @func_163(%350, %351) /* ty=Tensor[(3, 9, 7), float64] */;
  (%352, %353, %var_6975, %var_6976)
}

def @func_3921() -> (Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) {
  %354 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %355 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %356 = reshape(%355, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %357 = @func_1451(%356) /* ty=Tensor[(5, 13), float32] */;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(5, 13), float32] */;
  %359 = reshape(%358, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %360 = @func_3223() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %361 = %354.3;
  %362 = @func_1451(%359) /* ty=Tensor[(5, 13), float32] */;
  %363 = %360.0;
  (%361, %357, meta[relay.Constant][24] /* ty=Tensor[(65), float32] */, %362, %363)
}

def @func_3517(%var_3488: Tensor[(14, 10, 11), bool], %var_3495: Tensor[(130), float64], %var_3497: Tensor[(112, 2), bool]) -> (Tensor[(14, 10, 11), bool], Tensor[(10, 13, 11), bool], Tensor[(130), float64], Tensor[(1430), float64], Tensor[(112, 2), bool], Tensor[(11, 15, 10), float64]) {
  %364 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %365 = %364.1;
  %366 = cast(%var_3488, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %370 = cast(%var_3495, dtype="float64") /* ty=Tensor[(130), float64] */;
  %371 = cast(meta[relay.Constant][25] /* ty=Tensor[(1430), float64] */, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %372 = cast(%var_3497, dtype="bool") /* ty=Tensor[(112, 2), bool] */;
  %373 = reshape(%370, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %374 = reshape(%371, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), float64] */;
  %375 = reshape(%372, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %376 = @func_1864(%373, %374, %375) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(8, 4, 7), bool], Tensor[(224), bool]) */;
  %377 = greater(%368, %369) /* ty=Tensor[(14, 10, 11), bool] */;
  %378 = %376.0;
  %379 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  (%377, %378, %var_3495, meta[relay.Constant][25] /* ty=Tensor[(1430), float64] */, %var_3497, %379)
}

def @func_2606(%var_2596: Tensor[(224), bool]) -> (Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) {
  %380 = cast(%var_2596, dtype="bool") /* ty=Tensor[(224), bool] */;
  %381 = reshape(%380, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), bool] */;
  %382 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %383 = cast(%382, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %384 = log10(%383) /* ty=Tensor[(11, 15, 10), float64] */;
  %385 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %389 = bitwise_or(%387, %388) /* ty=Tensor[(11, 15, 10), int32] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %391 = @func_371(%381) /* ty=Tensor[(8, 4, 7), bool] */;
  %392 = asinh(%390) /* ty=Tensor[(11, 15, 10), float64] */;
  (%391, %var_2596, %392)
}

def @func_5831() -> (Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) {
  %393 = cast(meta[relay.Constant][27] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
  %394 = reshape(%393, newshape=[176, 1]) /* ty=Tensor[(176, 1), int64] */;
  %395 = @func_4919(%394) /* ty=(Tensor[(5, 13), float32], bool, bool, Tensor[(176, 1), float32]) */;
  %396 = cast(meta[relay.Constant][27] /* ty=Tensor[(176), int64] */, dtype="float32") /* ty=Tensor[(176), float32] */;
  %397 = asinh(%396) /* ty=Tensor[(176), float32] */;
  %398 = cast(meta[relay.Constant][27] /* ty=Tensor[(176), int64] */, dtype="int32") /* ty=Tensor[(176), int32] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(1), int32] */;
  %400 = cast(%397, dtype="int32") /* ty=Tensor[(176), int32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?), int32] */;
  %402 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 14), bool] */;
  %403 = reshape(%402, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %404 = @func_2606(%403) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %405 = cast(meta[relay.Constant][29] /* ty=Tensor[(176), float32] */, dtype="bool") /* ty=Tensor[(176), bool] */;
  %406 = shape_of(%397, dtype="int32") /* ty=Tensor[(1), int32] */;
  %407 = cast(%397, dtype="bool") /* ty=Tensor[(176), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?), bool] */;
  %409 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %410 = %395.0;
  %411 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %412 = bitwise_xor(%400, %401) /* ty=Tensor[(176), int32] */;
  %413 = %404.1;
  %414 = logical_or(%407, %408) /* ty=Tensor[(176), bool] */;
  (%409, %410, %411, %412, %413, meta[relay.Constant][28] /* ty=Tensor[(16, 14), bool] */, %414)
}

def @func_6541() -> Tensor[(1540), int16] {
  %415 = @func_5602() /* ty=(Tensor[(1540), int16],) */;
  %415.0
}

def @func_2082(%var_2054: int64, %var_2055: Tensor[(4, 14, 1), int64], %var_2071: Tensor[(4, 14, 1), int64]) -> (bool, Tensor[(176), int64], Tensor[(4, 14, ?), bool]) {
  %416 = cast(meta[relay.Constant][30] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
  %417 = cast(%var_2054, dtype="bool") /* ty=bool */;
  %418 = reshape(%416, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %419 = reshape(%417, newshape=[]) /* ty=bool */;
  %420 = @func_761(%418, %419) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %421 = cast(%var_2054, dtype="int64") /* ty=int64 */;
  %422 = cast(%var_2055, dtype="int64") /* ty=Tensor[(4, 14, 1), int64] */;
  %423 = add(%421, %422) /* ty=Tensor[(4, 14, 1), int64] */;
  %424 = cast(%var_2071, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = %420.2;
  %429 = equal(%426, %427) /* ty=Tensor[(4, 14, ?), bool] */;
  (%428, meta[relay.Constant][30] /* ty=Tensor[(176), int64] */, %429)
}

def @func_7505(%var_7466: Tensor[(6, 7, 2), float64], %var_7486: Tensor[(1540), bool], %var_7500: Tensor[(189), float32]) -> (Tensor[(6, 7, 2), float32], Tensor[(2, 13, 10), uint8], Tensor[(130), float64], Tensor[(1540), bool], Tensor[(130), float64], Tensor[(224), bool], Tensor[(990, 2), float32], Tensor[(1980), float32], bool, Tensor[(189), float32]) {
  %430 = cast(%var_7466, dtype="float64") /* ty=Tensor[(6, 7, 2), float64] */;
  %431 = asinh(%430) /* ty=Tensor[(6, 7, 2), float64] */;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(6, 7, 2), float32] */;
  %433 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %434 = cast(%var_7486, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %435 = cast(meta[relay.Constant][31] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %436 = cast(meta[relay.Constant][32] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %437 = reshape(%434, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), bool] */;
  %438 = reshape(%435, newshape=[130]) /* ty=Tensor[(130), float64] */;
  %439 = reshape(%436, newshape=[112, 2]) /* ty=Tensor[(112, 2), bool] */;
  %440 = @func_3517(%437, %438, %439) /* ty=(Tensor[(14, 10, 11), bool], Tensor[(10, 13, 11), bool], Tensor[(130), float64], Tensor[(1430), float64], Tensor[(112, 2), bool], Tensor[(11, 15, 10), float64]) */;
  %441 = cast(meta[relay.Constant][33] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %442 = reshape(%441, newshape=[990, 2]) /* ty=Tensor[(990, 2), float32] */;
  %443 = @func_5119(%442) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(990, 2), float32]) */;
  %444 = cast(meta[relay.Constant][32] /* ty=Tensor[(224), bool] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %445 = cast(%var_7500, dtype="float32") /* ty=Tensor[(189), float32] */;
  %446 = reshape(%444, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float32] */;
  %447 = reshape(%445, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %448 = @func_676(%446, %447) /* ty=(Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) */;
  %449 = atan(%432) /* ty=Tensor[(6, 7, 2), float32] */;
  %450 = %433.0;
  %451 = %440.2;
  %452 = %443.3;
  %453 = %448.1;
  (%449, %450, %451, %var_7486, meta[relay.Constant][31] /* ty=Tensor[(130), float64] */, meta[relay.Constant][32] /* ty=Tensor[(224), bool] */, %452, meta[relay.Constant][33] /* ty=Tensor[(1980), float32] */, %453, %var_7500)
}

def @func_676(%var_627: Tensor[(16, 1, 14), float32], %var_646: Tensor[(189), float32]) -> (Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) {
  %454 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %455 = reshape(%454, newshape=[]) /* ty=bool */;
  %456 = cast(False /* ty=bool */, dtype="float32") /* ty=float32 */;
  %457 = cast(%var_646, dtype="float32") /* ty=Tensor[(189), float32] */;
  %458 = reshape(%456, newshape=[]) /* ty=float32 */;
  %459 = reshape(%457, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %460 = cast(%var_627, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
  %461 = exp(%460) /* ty=Tensor[(16, 1, 14), float32] */;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
  %463 = @func_595(%455) /* ty=Tensor[(16, 1, 13), bool] */;
  %464 = @func_163(%458, %459) /* ty=Tensor[(3, 9, 7), float64] */;
  %465 = acosh(%462) /* ty=Tensor[(16, 1, 14), float32] */;
  (%463, False /* ty=bool */, %464, %var_646, %465)
}

def @func_4774(%var_4764: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), float32] {
  %466 = cast(%var_4764, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  exp(%466) /* ty=Tensor[(15, 11, 12), float32] */
}

def @func_3035() -> (Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) {
  %467 = cast(meta[relay.Constant][34] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %468 = cast(meta[relay.Constant][34] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %469 = reshape(%467, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %470 = reshape(%468, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %471 = @func_2858(%469, %470) /* ty=(Tensor[(14, 10, 11), bool],) */;
  %472 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %473 = %471.0;
  %474 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%472, %473, meta[relay.Constant][34] /* ty=Tensor[(1540), int16] */, %474)
}

def @func_4209(%var_4202: Tensor[(4, 7), float64]) -> (Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) {
  %475 = cast(%var_4202, dtype="float64") /* ty=Tensor[(4, 7), float64] */;
  %476 = cos(%475) /* ty=Tensor[(4, 7), float64] */;
  %477 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  (%476, %477)
}

def @func_4100() -> (Tensor[(11, 15, 10), float64],) {
  %478 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  (%478,)
}

def @func_3069(%var_3052: Tensor[(11, 15, 10), float64]) -> Tensor[(11, 15, 10), int32] {
  %479 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %480 = %479.0;
  %481 = cast(%var_3052, dtype="int16") /* ty=Tensor[(11, 15, 10), int16] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="int16") /* ty=Tensor[(11, 15, 10), int16] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %485 = maximum(%483, %484) /* ty=Tensor[(11, 15, 10), int16] */;
  %486 = cast(%480, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_and(%488, %489) /* ty=Tensor[(11, 15, 10), int32] */
}

def @func_6627() -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1540), float64]) {
  %490 = @func_3870() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %491 = @func_3223() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %492 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %493 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %495 = %490.0;
  %496 = %491.0;
  %497 = %492.0;
  %498 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %499 = @func_5871() /* ty=Tensor[(11, 15, 10), float64] */;
  %500 = log(%494) /* ty=Tensor[(1540), float64] */;
  (%495, %496, %497, %498, %499, %500)
}

def @func_4437() -> Tensor[(2, 13, 10), uint8] {
  %501 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %501.0
}

def @func_7575(%var_7540: Tensor[(14, 4, 16), int64], %var_7541: Tensor[(14, 4, 16), int64], %var_7546: Tensor[(176), int64], %var_7547: bool) -> (Tensor[(14, 4, 16), int64], Tensor[(2, 13, 10), uint8], Tensor[(176), int64], bool, Tensor[(14, 4, 16), float64]) {
  %502 = cast(%var_7541, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
  %503 = shape_of(%var_7540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_7540, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %506 = cast(%var_7546, dtype="int64") /* ty=Tensor[(176), int64] */;
  %507 = cast(%var_7547, dtype="bool") /* ty=bool */;
  %508 = reshape(%506, newshape=[176]) /* ty=Tensor[(176), int64] */;
  %509 = reshape(%507, newshape=[]) /* ty=bool */;
  %510 = @func_4469(%508, %509) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) */;
  %511 = cast(%var_7541, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %512 = multiply(%504, %505) /* ty=Tensor[(14, 4, 16), int64] */;
  %513 = %510.5;
  %514 = erf(%511) /* ty=Tensor[(14, 4, 16), float64] */;
  (%512, %513, %var_7546, %var_7547, %514)
}

def @func_2652() -> Tensor[(11, 15, 10), float32] {
  %515 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  rsqrt(%516) /* ty=Tensor[(11, 15, 10), float32] */
}

def @func_1864(%var_1844: Tensor[(10, 13, 1), float64], %var_1845: Tensor[(10, 13, 11), float64], %var_1862: Tensor[(224), bool]) -> (Tensor[(10, 13, 11), bool], Tensor[(8, 4, 7), bool], Tensor[(224), bool]) {
  %517 = cast(%var_1844, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %518 = cast(%var_1845, dtype="float64") /* ty=Tensor[(10, 13, 11), float64] */;
  %519 = floor_mod(%517, %518) /* ty=Tensor[(10, 13, 11), float64] */;
  %520 = cast(%519, dtype="bool") /* ty=Tensor[(10, 13, 11), bool] */;
  %521 = cast(%var_1844, dtype="bool") /* ty=Tensor[(10, 13, 1), bool] */;
  %522 = cast(%var_1862, dtype="bool") /* ty=Tensor[(224), bool] */;
  %523 = reshape(%522, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), bool] */;
  %524 = greater(%520, %521) /* ty=Tensor[(10, 13, 11), bool] */;
  %525 = @func_371(%523) /* ty=Tensor[(8, 4, 7), bool] */;
  (%524, %525, %var_1862)
}

def @func_5690() -> Tensor[(11, 15, 10), float64] {
  @func_3254() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_5518() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %526 = @func_3870() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %527 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %528 = %526.0;
  (%527, %528)
}

def @main() -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64]) {
  %529 = @func_4601() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %532 = @func_5654() /* ty=Tensor[(11, 15, 10), int32] */;
  %533 = atan(%531) /* ty=Tensor[(11, 15, 10), float64] */;
  (%532, %533)
}

def @func_4268(%var_4247: Tensor[(28), float64]) -> (Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) {
  %534 = cast(%var_4247, dtype="float64") /* ty=Tensor[(28), float64] */;
  %535 = reshape(%534, newshape=[4, 7]) /* ty=Tensor[(4, 7), float64] */;
  %536 = @func_4209(%535) /* ty=(Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) */;
  %537 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %539 = %536.0;
  %540 = acos(%538) /* ty=Tensor[(11, 15, 10), float32] */;
  (%539, %var_4247, %540)
}

def @func_4469(%var_4453: Tensor[(176), int64], %var_4454: bool) -> (Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) {
  %541 = @func_3744() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) */;
  %542 = cast(meta[relay.Constant][35] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
  %543 = cast(meta[relay.Constant][35] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
  %544 = cast(%var_4453, dtype="int64") /* ty=Tensor[(176), int64] */;
  %545 = cast(%var_4454, dtype="bool") /* ty=bool */;
  %546 = reshape(%542, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
  %547 = reshape(%543, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
  %548 = reshape(%544, newshape=[4, 44]) /* ty=Tensor[(4, 44), int64] */;
  %549 = reshape(%545, newshape=[]) /* ty=bool */;
  %550 = @func_3145(%546, %547, %548, %549) /* ty=(Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) */;
  %551 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %552 = %541.1;
  %553 = %550.0;
  %554 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %555 = %551.0;
  (%552, %553, meta[relay.Constant][35] /* ty=Tensor[(18, 6), int32] */, %var_4453, %var_4454, %554, %555)
}

def @func_4919(%var_4889: Tensor[(176, 1), int64]) -> (Tensor[(5, 13), float32], bool, bool, Tensor[(176, 1), float32]) {
  %556 = @func_3921() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) */;
  %557 = cast(%var_4889, dtype="int64") /* ty=Tensor[(176, 1), int64] */;
  %558 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %559 = reshape(%557, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %560 = reshape(%558, newshape=[]) /* ty=bool */;
  %561 = @func_761(%559, %560) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %562 = cast(%var_4889, dtype="float32") /* ty=Tensor[(176, 1), float32] */;
  %563 = %556.1;
  %564 = %561.2;
  %565 = sinh(%562) /* ty=Tensor[(176, 1), float32] */;
  (%563, %564, True /* ty=bool */, %565)
}

def @func_5240(%var_5224: Tensor[(8, 4, 14), float64], %var_5225: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), bool],) {
  %566 = cast(%var_5225, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
  %567 = shape_of(%var_5224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_5224, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = less(%568, %569) /* ty=Tensor[(8, 4, 14), bool] */;
  (%570,)
}

def @func_4334() -> (Tensor[(11, 15, 10), float64],) {
  %571 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  (%571,)
}

def @func_595(%var_590: bool) -> Tensor[(16, 1, 13), bool] {
  %572 = cast(%var_590, dtype="bool") /* ty=bool */;
  %573 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 1, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
  logical_and(%572, %573) /* ty=Tensor[(16, 1, 13), bool] */
}

def @func_7091(%var_7069: Tensor[(12, 13, 15), uint8], %var_7070: Tensor[(12, 13, 15), uint8], %var_7086: bool) -> (Tensor[(12, 13, 15), uint8], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(16, 1, 13), bool], bool) {
  %574 = cast(%var_7070, dtype="uint8") /* ty=Tensor[(12, 13, 15), uint8] */;
  %575 = shape_of(%var_7069, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_7069, dtype="uint8") /* ty=Tensor[(12, 13, 15), uint8] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %578 = cast(meta[relay.Constant][37] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %579 = cast(meta[relay.Constant][37] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %580 = reshape(%578, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %581 = reshape(%579, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %582 = @func_2858(%580, %581) /* ty=(Tensor[(14, 10, 11), bool],) */;
  %583 = cast(%var_7086, dtype="bool") /* ty=bool */;
  %584 = reshape(%583, newshape=[]) /* ty=bool */;
  %585 = bitwise_or(%576, %577) /* ty=Tensor[(12, 13, 15), uint8] */;
  %586 = %582.0;
  %587 = @func_595(%584) /* ty=Tensor[(16, 1, 13), bool] */;
  (%585, %586, meta[relay.Constant][37] /* ty=Tensor[(1540), int16] */, %587, %var_7086)
}

def @func_5956() -> (Tensor[(11, 15, 10), float32],) {
  %588 = @func_5518() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %589 = %588.1;
  %590 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 15, 10), int32] */, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %594 = power(%592, %593) /* ty=Tensor[(11, 15, 10), float32] */;
  (%594,)
}

def @func_7843() -> (Tensor[(11, 15, 10), int32],) {
  %595 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %596 = %595.0;
  (%596,)
}

def @func_4978(%var_4950: bool) -> (Tensor[(11, 15, 10), int32], Tensor[(16, 1, 13), bool], Tensor[(176), int64], bool, Tensor[(11, 15, 10), int8]) {
  %597 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %598 = cast(meta[relay.Constant][39] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
  %599 = cast(%var_4950, dtype="bool") /* ty=bool */;
  %600 = reshape(%598, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %601 = reshape(%599, newshape=[]) /* ty=bool */;
  %602 = @func_761(%600, %601) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %603 = @func_4758() /* ty=(Tensor[(11, 15, 10), int8],) */;
  %604 = %597.0;
  %605 = %602.1;
  %606 = %603.0;
  (%604, %605, meta[relay.Constant][39] /* ty=Tensor[(176), int64] */, %var_4950, %606)
}

def @func_6343() -> Tensor[(1540), int16] {
  %607 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %607.2
}

def @func_7264() -> Tensor[(11, 15, 10), int32] {
  %608 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %608.0
}

def @func_3577(%var_3560: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
  %609 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %610 = cast(%var_3560, dtype="bool") /* ty=Tensor[(224), bool] */;
  %611 = reshape(%610, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %612 = @func_2606(%611) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %613 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %614 = %609.0;
  %615 = %612.1;
  %616 = %613.0;
  %617 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%614, %615, %var_3560, %616, %617)
}

def @func_4020() -> (Tensor[(11, 15, 10), float32],) {
  %618 = @func_2652() /* ty=Tensor[(11, 15, 10), float32] */;
  (%618,)
}

def @func_6401() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
  %619 = @func_5062() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %620 = %619.0;
  %621 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
  (%620, %621)
}

def @func_4627(%var_4609: Tensor[(15, 12), uint16]) -> (Tensor[(15, 12), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %622 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 12), uint16] */, dtype="bool") /* ty=Tensor[(15, 12), bool] */;
  %623 = shape_of(%var_4609, dtype="int32") /* ty=Tensor[(2), int32] */;
  %624 = cast(%var_4609, dtype="bool") /* ty=Tensor[(15, 12), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %626 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %627 = %626.0;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %629 = reshape(%628, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
  %630 = greater(%624, %625) /* ty=Tensor[(15, 12), bool] */;
  %631 = @func_3069(%629) /* ty=Tensor[(11, 15, 10), int32] */;
  (%630, %627, %631)
}

def @func_6111() -> Tensor[(11, 15, 10), int32] {
  %632 = @func_5518() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %632.1
}

def @func_7241(%var_7178: Tensor[(2, 13, 10), uint8], %var_7200: Tensor[(28, 1), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32], Tensor[(28, 1), float64], Tensor[(2, 13, 10), int32], Tensor[(2, 13, 10), float32]) {
  %633 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %634 = cast(%var_7200, dtype="float64") /* ty=Tensor[(28, 1), float64] */;
  %635 = reshape(%634, newshape=[28]) /* ty=Tensor[(28), float64] */;
  %636 = @func_4268(%635) /* ty=(Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) */;
  %637 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %638 = shape_of(%var_7178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%var_7178, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %641 = power(%639, %640) /* ty=Tensor[(2, 13, 10), float32] */;
  %642 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %646 = @func_4437() /* ty=Tensor[(2, 13, 10), uint8] */;
  %647 = cast(%var_7178, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %651 = less(%649, %650) /* ty=Tensor[(2, 13, 10), bool] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %653 = %633.0;
  %654 = %636.2;
  %655 = left_shift(%644, %645) /* ty=Tensor[(2, 13, 10), int32] */;
  %656 = log10(%652) /* ty=Tensor[(2, 13, 10), float32] */;
  (%653, %654, %var_7200, %655, %656)
}

def @func_4153(%var_4114: float32, %var_4115: Tensor[(4, 1, 15), float32]) -> (Tensor[(4, ?, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
  %657 = cast(%var_4114, dtype="float32") /* ty=float32 */;
  %658 = cast(%var_4115, dtype="float32") /* ty=Tensor[(4, 1, 15), float32] */;
  %659 = power(%657, %658) /* ty=Tensor[(4, 1, 15), float32] */;
  %660 = cast(%659, dtype="float64") /* ty=Tensor[(4, 1, 15), float64] */;
  %661 = shape_of(%var_4115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_4115, dtype="float64") /* ty=Tensor[(4, 1, 15), float64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %664 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %665 = cast(meta[relay.Constant][42] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %666 = reshape(%665, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %667 = @func_3986(%666) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), bool], Tensor[(13, 13, 5), float64], Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool, Tensor[(13, 13, 5), float64]) */;
  %668 = mod(%662, %663) /* ty=Tensor[(4, ?, 15), float64] */;
  %669 = %664.0;
  %670 = %667.3;
  (%668, %669, %670, meta[relay.Constant][42] /* ty=Tensor[(845), float64] */)
}

def @func_7046() -> (Tensor[(11, 15, 10), float64],) {
  %671 = @func_5062() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %672 = %671.0;
  (%672,)
}

def @func_5401() -> (Tensor[(1540), int16], Tensor[(11, 15, 10), int32]) {
  %673 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %674 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %675 = %673.0;
  (%674, %675)
}

def @func_7462(%var_7457: Tensor[(5, 10, 15), float64]) -> (Tensor[(5, 10, 15), float64],) {
  %676 = cast(%var_7457, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
  %677 = acos(%676) /* ty=Tensor[(5, 10, 15), float64] */;
  (%677,)
}

def @func_3986(%var_3930: Tensor[(13, 13, 5), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), bool], Tensor[(13, 13, 5), float64], Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool, Tensor[(13, 13, 5), float64]) {
  %678 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %679 = @func_2758() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %680 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %681 = %680.1;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %683 = erf(%682) /* ty=Tensor[(13, 13, 5), float64] */;
  %684 = cast(%681, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = cast(%var_3930, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %689 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%681, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %692 = mod(%690, %691) /* ty=Tensor[(13, 13, 5), float32] */;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %694 = log2(%693) /* ty=Tensor[(13, 13, 5), float32] */;
  %695 = cast(%692, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %699 = cast(meta[relay.Constant][43] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %700 = reshape(%699, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %701 = @func_2606(%700) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %702 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %703 = reshape(%702, newshape=[]) /* ty=bool */;
  %704 = cast(%681, dtype="int16") /* ty=Tensor[(13, 13, 5), int16] */;
  %705 = shape_of(%var_3930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%var_3930, dtype="int16") /* ty=Tensor[(13, 13, 5), int16] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %708 = bitwise_and(%706, %707) /* ty=Tensor[(13, 13, 5), int16] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %710 = %678.0;
  %711 = %679.0;
  %712 = logical_and(%686, %687) /* ty=Tensor[(13, 13, 5), bool] */;
  %713 = floor_divide(%697, %698) /* ty=Tensor[(13, 13, 5), float64] */;
  %714 = %701.2;
  %715 = @func_595(%703) /* ty=Tensor[(16, 1, 13), bool] */;
  %716 = log10(%709) /* ty=Tensor[(13, 13, 5), float64] */;
  (%710, %711, %712, %713, %714, meta[relay.Constant][43] /* ty=Tensor[(224), bool] */, %715, False /* ty=bool */, %716)
}

def @func_7432(%var_7393: Tensor[(224), bool], %var_7408: Tensor[(320), float64]) -> (Tensor[(2, 13, 10), uint8], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(10, 15, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(320), float64], Tensor[(11, 15, 10), float32], Tensor[(11, 15, 10), int32]) {
  %717 = cast(%var_7393, dtype="bool") /* ty=Tensor[(224), bool] */;
  %718 = reshape(%717, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %719 = @func_2606(%718) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %720 = cast(%var_7408, dtype="float64") /* ty=Tensor[(320), float64] */;
  %721 = cast(%var_7408, dtype="float64") /* ty=Tensor[(320), float64] */;
  %722 = reshape(%720, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
  %723 = reshape(%721, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
  %724 = @func_4732(%722, %723) /* ty=(Tensor[(10, 2, 16), float64], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(10, 2, 16), float32]) */;
  %725 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %726 = %725.0;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %728 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %729 = %719.0;
  %730 = @func_5448() /* ty=Tensor[(10, 15, 15), float64] */;
  %731 = %724.2;
  %732 = cosh(%727) /* ty=Tensor[(11, 15, 10), float32] */;
  %733 = @func_5654() /* ty=Tensor[(11, 15, 10), int32] */;
  (%728, %729, %var_7393, %730, %731, %var_7408, %732, %733)
}

def @func_1933(%var_1889: Tensor[(1, 2, 11), float64], %var_1913: Tensor[(1820), float64]) -> (Tensor[(?, 2, 11), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float64], bool, Tensor[(5, 13), float32], Tensor[(65), float32]) {
  %734 = cast(%var_1889, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %735 = atan(%734) /* ty=Tensor[(1, 2, 11), float64] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
  %737 = shape_of(%var_1889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%var_1889, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %740 = cast(%var_1913, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %741 = cast(%var_1913, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %742 = cast(%var_1913, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %743 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %744 = reshape(%740, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float64] */;
  %745 = reshape(%741, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float64] */;
  %746 = reshape(%742, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float64] */;
  %747 = reshape(%743, newshape=[]) /* ty=bool */;
  %748 = @func_1187(%744, %745, %746, %747) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float32], Tensor[(2, 11, 16), int64], Tensor[(176), int64], bool) */;
  %749 = cast(meta[relay.Constant][44] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %750 = reshape(%749, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %751 = power(%738, %739) /* ty=Tensor[(?, 2, 11), float32] */;
  %752 = %748.1;
  %753 = @func_1451(%750) /* ty=Tensor[(5, 13), float32] */;
  (%751, %752, %var_1913, True /* ty=bool */, %753, meta[relay.Constant][44] /* ty=Tensor[(65), float32] */)
}

def @func_761(%var_748: Tensor[(1, 11, 16), int64], %var_755: bool) -> (Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) {
  %754 = cast(%var_748, dtype="int64") /* ty=Tensor[(1, 11, 16), int64] */;
  %755 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 11, 16), int64] */, dtype="int64") /* ty=Tensor[(2, 11, 16), int64] */;
  %756 = cast(%var_755, dtype="bool") /* ty=bool */;
  %757 = reshape(%756, newshape=[]) /* ty=bool */;
  %758 = bitwise_and(%754, %755) /* ty=Tensor[(2, 11, 16), int64] */;
  %759 = @func_595(%757) /* ty=Tensor[(16, 1, 13), bool] */;
  (%758, %759, %var_755)
}

def @func_4535(%var_4497: Tensor[(11, 15, 10), float64], %var_4511: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), float32], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(2, 13, 10), uint8], Tensor[(1, 28), float64]) {
  %760 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %761 = %760.0;
  %762 = cast(%var_4497, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %766 = cast(%var_4511, dtype="bool") /* ty=Tensor[(224), bool] */;
  %767 = reshape(%766, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %768 = @func_2606(%767) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %769 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 28), float64] */, dtype="float64") /* ty=Tensor[(1, 28), float64] */;
  %770 = reshape(%769, newshape=[4, 7]) /* ty=Tensor[(4, 7), float64] */;
  %771 = @func_4209(%770) /* ty=(Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) */;
  %772 = mod(%764, %765) /* ty=Tensor[(11, 15, 10), float32] */;
  %773 = %768.0;
  %774 = %771.1;
  (%772, %773, %var_4511, %774, meta[relay.Constant][46] /* ty=Tensor[(1, 28), float64] */)
}

def @func_4865(%var_4833: Tensor[(108), int32]) -> (Tensor[(189), float32], Tensor[(108), int32], Tensor[(176), int64], bool, Tensor[(11, 15, 10), float32]) {
  %775 = cast(%var_4833, dtype="int32") /* ty=Tensor[(108), int32] */;
  %776 = cast(%var_4833, dtype="int32") /* ty=Tensor[(108), int32] */;
  %777 = cast(meta[relay.Constant][47] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
  %778 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %779 = reshape(%775, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
  %780 = reshape(%776, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
  %781 = reshape(%777, newshape=[4, 44]) /* ty=Tensor[(4, 44), int64] */;
  %782 = reshape(%778, newshape=[]) /* ty=bool */;
  %783 = @func_3145(%779, %780, %781, %782) /* ty=(Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) */;
  %784 = @func_3223() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %785 = %784.0;
  %786 = cast(%785, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %787 = acosh(%786) /* ty=Tensor[(11, 15, 10), float64] */;
  %788 = cast(%785, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %792 = %783.4;
  %793 = floor_mod(%790, %791) /* ty=Tensor[(11, 15, 10), float32] */;
  (%792, %var_4833, meta[relay.Constant][47] /* ty=Tensor[(176), int64] */, False /* ty=bool */, %793)
}

def @func_6934() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
  %794 = @func_6241() /* ty=(Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %795 = @func_5690() /* ty=Tensor[(11, 15, 10), float64] */;
  %796 = %794.1;
  (%795, %796)
}

def @func_6241() -> (Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) {
  %797 = @func_5602() /* ty=(Tensor[(1540), int16],) */;
  %798 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %799 = %797.0;
  %800 = %798.0;
  (%799, %800)
}

def @func_6310() -> Tensor[(11, 15, 10), int8] {
  %801 = @func_4758() /* ty=(Tensor[(11, 15, 10), int8],) */;
  %801.0
}

def @func_6446() -> (Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1, 65), float32]) {
  %802 = @func_5278() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %803 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 65), float32] */, dtype="float32") /* ty=Tensor[(1, 65), float32] */;
  %804 = reshape(%803, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %805 = @func_2722(%804) /* ty=(Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(11, 15, 10), bool], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %806 = %802.0;
  %807 = %805.3;
  (%806, %807, meta[relay.Constant][48] /* ty=Tensor[(1, 65), float32] */)
}

def @func_6691(%var_6661: Tensor[(1540), int16]) -> (Tensor[(1540), bool],) {
  %808 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
  %809 = %808.1;
  %810 = cast(%var_6661, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(1), int32] */;
  %812 = cast(%809, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?), bool] */;
  %814 = less_equal(%812, %813) /* ty=Tensor[(1540), bool] */;
  (%814,)
}

def @func_6151() -> (Tensor[(176), bool],) {
  %815 = @func_5831() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) */;
  %816 = %815.6;
  (%816,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5692() -> Tensor[(11, 15, 10), float64] {
  @func_5690() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_3254() -> Tensor[(11, 15, 10), float64] {
  @func_2779() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_3145(%var_3122: Tensor[(2, 9, 6), int32], %var_3123: Tensor[(2, 9, 6), int32], %var_3132: Tensor[(4, 44), int64], %var_3133: bool) -> (Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) {
  %0 = cast(%var_3123, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %1 = shape_of(%var_3122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_3122, dtype="bool") /* ty=Tensor[(2, 9, 6), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %6 = reshape(%4, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float32] */;
  %7 = reshape(%5, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %8 = @func_676(%6, %7) /* ty=(Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) */;
  %9 = cast(%var_3132, dtype="int64") /* ty=Tensor[(4, 44), int64] */;
  %10 = cast(%var_3133, dtype="bool") /* ty=bool */;
  %11 = reshape(%9, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %12 = reshape(%10, newshape=[]) /* ty=bool */;
  %13 = @func_761(%11, %12) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %14 = %13.1;
  %15 = cast(%var_3133, dtype="uint32") /* ty=uint32 */;
  %16 = cast(%14, dtype="uint32") /* ty=Tensor[(16, 1, 13), uint32] */;
  %17 = equal(%2, %3) /* ty=Tensor[(2, 9, 6), bool] */;
  %18 = %8.1;
  %19 = left_shift(%15, %16) /* ty=Tensor[(16, 1, 13), uint32] */;
  (%17, %var_3132, %18, meta[relay.Constant][0] /* ty=Tensor[(224), float32] */, meta[relay.Constant][1] /* ty=Tensor[(189), float32] */, %19)
}

def @func_2609(%var_2607: Tensor[(224), bool]) -> (Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) {
  @func_2606(%var_2607) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */
}

def @func_2606(%var_2596: Tensor[(224), bool]) -> (Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) {
  %20 = cast(%var_2596, dtype="bool") /* ty=Tensor[(224), bool] */;
  %21 = reshape(%20, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), bool] */;
  %22 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %24 = log10(%23) /* ty=Tensor[(11, 15, 10), float64] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %29 = bitwise_or(%27, %28) /* ty=Tensor[(11, 15, 10), int32] */;
  %30 = cast(%29, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %31 = @func_371(%21) /* ty=Tensor[(8, 4, 7), bool] */;
  %32 = asinh(%30) /* ty=Tensor[(11, 15, 10), float64] */;
  (%31, %var_2596, %32)
}

def @func_4867(%var_4866: Tensor[(108), int32]) -> (Tensor[(189), float32], Tensor[(108), int32], Tensor[(176), int64], bool, Tensor[(11, 15, 10), float32]) {
  %52 = fn (%var_4833: Tensor[(108), int32]) -> (Tensor[(189), float32], Tensor[(108), int32], Tensor[(176), int64], bool, Tensor[(11, 15, 10), float32]) {
    %33 = cast(%var_4833, dtype="int32") /* ty=Tensor[(108), int32] */;
    %34 = cast(%var_4833, dtype="int32") /* ty=Tensor[(108), int32] */;
    %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
    %36 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %37 = reshape(%33, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
    %38 = reshape(%34, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
    %39 = reshape(%35, newshape=[4, 44]) /* ty=Tensor[(4, 44), int64] */;
    %40 = reshape(%36, newshape=[]) /* ty=bool */;
    %41 = @func_3145(%37, %38, %39, %40) /* ty=(Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) */;
    %42 = @func_3223() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %43 = %42.0;
    %44 = cast(%43, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
    %45 = acosh(%44) /* ty=Tensor[(11, 15, 10), float64] */;
    %46 = cast(%43, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
    %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
    %48 = cast(%45, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
    %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %50 = %41.4;
    %51 = floor_mod(%48, %49) /* ty=Tensor[(11, 15, 10), float32] */;
    (%50, %var_4833, meta[relay.Constant][3] /* ty=Tensor[(176), int64] */, False /* ty=bool */, %51)
  };
  %52(%var_4866) /* ty=(Tensor[(189), float32], Tensor[(108), int32], Tensor[(176), int64], bool, Tensor[(11, 15, 10), float32]) */
}

def @func_4919(%var_4889: Tensor[(176, 1), int64]) -> (Tensor[(5, 13), float32], bool, bool, Tensor[(176, 1), float32]) {
  %53 = @func_3921() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) */;
  %54 = cast(%var_4889, dtype="int64") /* ty=Tensor[(176, 1), int64] */;
  %55 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %56 = reshape(%54, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %57 = reshape(%55, newshape=[]) /* ty=bool */;
  %58 = @func_761(%56, %57) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %59 = cast(%var_4889, dtype="float32") /* ty=Tensor[(176, 1), float32] */;
  %60 = %53.1;
  %61 = %58.2;
  %62 = sinh(%59) /* ty=Tensor[(176, 1), float32] */;
  (%60, %61, True /* ty=bool */, %62)
}

def @func_2086(%var_2083: int64, %var_2084: Tensor[(4, 14, 1), int64], %var_2085: Tensor[(4, 14, 1), int64]) -> (bool, Tensor[(176), int64], Tensor[(4, 14, ?), bool]) {
  %77 = fn (%var_2054: int64, %var_2055: Tensor[(4, 14, 1), int64], %var_2071: Tensor[(4, 14, 1), int64]) -> (bool, Tensor[(176), int64], Tensor[(4, 14, ?), bool]) {
    %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
    %64 = cast(%var_2054, dtype="bool") /* ty=bool */;
    %65 = reshape(%63, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
    %66 = reshape(%64, newshape=[]) /* ty=bool */;
    %67 = @func_761(%65, %66) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
    %68 = cast(%var_2054, dtype="int64") /* ty=int64 */;
    %69 = cast(%var_2055, dtype="int64") /* ty=Tensor[(4, 14, 1), int64] */;
    %70 = add(%68, %69) /* ty=Tensor[(4, 14, 1), int64] */;
    %71 = cast(%var_2071, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
    %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%70, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %75 = %67.2;
    %76 = equal(%73, %74) /* ty=Tensor[(4, 14, ?), bool] */;
    (%75, meta[relay.Constant][4] /* ty=Tensor[(176), int64] */, %76)
  };
  %77(%var_2083, %var_2084, %var_2085) /* ty=(bool, Tensor[(176), int64], Tensor[(4, 14, ?), bool]) */
}

def @func_4735(%var_4733: Tensor[(10, 2, 16), float64], %var_4734: Tensor[(10, 2, 16), float64]) -> (Tensor[(10, 2, 16), float64], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(10, 2, 16), float32]) {
  %93 = fn (%var_4698: Tensor[(10, 2, 16), float64], %var_4699: Tensor[(10, 2, 16), float64]) -> (Tensor[(10, 2, 16), float64], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(10, 2, 16), float32]) {
    %78 = cast(%var_4699, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %79 = shape_of(%var_4698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%var_4698, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %82 = @func_4100() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %83 = @func_4601() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %84 = cast(%var_4699, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %85 = tan(%84) /* ty=Tensor[(10, 2, 16), float64] */;
    %86 = cast(%85, dtype="float64") /* ty=Tensor[(10, 2, 16), float64] */;
    %87 = atan(%86) /* ty=Tensor[(10, 2, 16), float64] */;
    %88 = cast(%87, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
    %89 = floor_mod(%80, %81) /* ty=Tensor[(10, 2, 16), float64] */;
    %90 = %82.0;
    %91 = %83.0;
    %92 = acosh(%88) /* ty=Tensor[(10, 2, 16), float32] */;
    (%89, %90, %91, %92)
  };
  %93(%var_4733, %var_4734) /* ty=(Tensor[(10, 2, 16), float64], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(10, 2, 16), float32]) */
}

def @func_5279() -> (Tensor[(2, 13, 10), uint8],) {
  %96 = fn () -> (Tensor[(2, 13, 10), uint8],) {
    %94 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
    %95 = %94.0;
    (%95,)
  };
  %96() /* ty=(Tensor[(2, 13, 10), uint8],) */
}

def @func_765(%var_763: Tensor[(1, 11, 16), int64], %var_764: bool) -> (Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) {
  @func_761(%var_763, %var_764) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */
}

def @func_4469(%var_4453: Tensor[(176), int64], %var_4454: bool) -> (Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) {
  %97 = @func_3744() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
  %99 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 6), int32] */, dtype="int32") /* ty=Tensor[(18, 6), int32] */;
  %100 = cast(%var_4453, dtype="int64") /* ty=Tensor[(176), int64] */;
  %101 = cast(%var_4454, dtype="bool") /* ty=bool */;
  %102 = reshape(%98, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
  %103 = reshape(%99, newshape=[2, 9, 6]) /* ty=Tensor[(2, 9, 6), int32] */;
  %104 = reshape(%100, newshape=[4, 44]) /* ty=Tensor[(4, 44), int64] */;
  %105 = reshape(%101, newshape=[]) /* ty=bool */;
  %106 = @func_3145(%102, %103, %104, %105) /* ty=(Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) */;
  %107 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %108 = %97.1;
  %109 = %106.0;
  %110 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %111 = %107.0;
  (%108, %109, meta[relay.Constant][5] /* ty=Tensor[(18, 6), int32] */, %var_4453, %var_4454, %110, %111)
}

def @func_6151() -> (Tensor[(176), bool],) {
  %112 = @func_5831() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) */;
  %113 = %112.6;
  (%113,)
}

def @func_5603() -> (Tensor[(1540), int16],) {
  %116 = fn () -> (Tensor[(1540), int16],) {
    %114 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
    %115 = %114.1;
    (%115,)
  };
  %116() /* ty=(Tensor[(1540), int16],) */
}

def @func_7038() -> (Tensor[(1540), bool],) {
  @func_7036() /* ty=(Tensor[(1540), bool],) */
}

def @func_7245(%var_7243: Tensor[(2, 13, 10), uint8], %var_7244: Tensor[(28, 1), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32], Tensor[(28, 1), float64], Tensor[(2, 13, 10), int32], Tensor[(2, 13, 10), float32]) {
  @func_7241(%var_7243, %var_7244) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32], Tensor[(28, 1), float64], Tensor[(2, 13, 10), int32], Tensor[(2, 13, 10), float32]) */
}

def @func_6274(%var_6272: Tensor[(600), float32], %var_6273: bool) -> (Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64], bool, Tensor[(600), float32], bool) {
  %128 = fn (%var_6258: Tensor[(600), float32], %var_6259: bool) -> (Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64], bool, Tensor[(600), float32], bool) {
    %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
    %118 = reshape(%117, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
    %119 = @func_808(%118) /* ty=(Tensor[(13, 13, 5), float64],) */;
    %120 = cast(%var_6258, dtype="float32") /* ty=Tensor[(600), float32] */;
    %121 = cast(%var_6259, dtype="bool") /* ty=bool */;
    %122 = reshape(%120, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), float32] */;
    %123 = reshape(%121, newshape=[]) /* ty=bool */;
    %124 = @func_5906(%122, %123) /* ty=(Tensor[(10, 12, 5), float32], Tensor[(2, 9, 6), bool], Tensor[(176), int64], bool) */;
    %125 = @func_5690() /* ty=Tensor[(11, 15, 10), float64] */;
    %126 = %119.0;
    %127 = %124.3;
    (%125, %126, meta[relay.Constant][6] /* ty=Tensor[(845), float64] */, %127, %var_6258, %var_6259)
  };
  %128(%var_6272, %var_6273) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64], bool, Tensor[(600), float32], bool) */
}

def @func_2781() -> Tensor[(11, 15, 10), float64] {
  @func_2779() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_810(%var_809: Tensor[(13, 13, 5), float64]) -> (Tensor[(13, 13, 5), float64],) {
  %131 = fn (%var_797: Tensor[(13, 13, 5), float64]) -> (Tensor[(13, 13, 5), float64],) {
    %129 = cast(%var_797, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    %130 = tan(%129) /* ty=Tensor[(13, 13, 5), float64] */;
    (%130,)
  };
  %131(%var_809) /* ty=(Tensor[(13, 13, 5), float64],) */
}

def @func_7509(%var_7506: Tensor[(6, 7, 2), float64], %var_7507: Tensor[(1540), bool], %var_7508: Tensor[(189), float32]) -> (Tensor[(6, 7, 2), float32], Tensor[(2, 13, 10), uint8], Tensor[(130), float64], Tensor[(1540), bool], Tensor[(130), float64], Tensor[(224), bool], Tensor[(990, 2), float32], Tensor[(1980), float32], bool, Tensor[(189), float32]) {
  %156 = fn (%var_7466: Tensor[(6, 7, 2), float64], %var_7486: Tensor[(1540), bool], %var_7500: Tensor[(189), float32]) -> (Tensor[(6, 7, 2), float32], Tensor[(2, 13, 10), uint8], Tensor[(130), float64], Tensor[(1540), bool], Tensor[(130), float64], Tensor[(224), bool], Tensor[(990, 2), float32], Tensor[(1980), float32], bool, Tensor[(189), float32]) {
    %132 = cast(%var_7466, dtype="float64") /* ty=Tensor[(6, 7, 2), float64] */;
    %133 = asinh(%132) /* ty=Tensor[(6, 7, 2), float64] */;
    %134 = cast(%133, dtype="float32") /* ty=Tensor[(6, 7, 2), float32] */;
    %135 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
    %136 = cast(%var_7486, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %137 = cast(meta[relay.Constant][7] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %138 = cast(meta[relay.Constant][8] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
    %139 = reshape(%136, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), bool] */;
    %140 = reshape(%137, newshape=[130]) /* ty=Tensor[(130), float64] */;
    %141 = reshape(%138, newshape=[112, 2]) /* ty=Tensor[(112, 2), bool] */;
    %142 = @func_3517(%139, %140, %141) /* ty=(Tensor[(14, 10, 11), bool], Tensor[(10, 13, 11), bool], Tensor[(130), float64], Tensor[(1430), float64], Tensor[(112, 2), bool], Tensor[(11, 15, 10), float64]) */;
    %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
    %144 = reshape(%143, newshape=[990, 2]) /* ty=Tensor[(990, 2), float32] */;
    %145 = @func_5119(%144) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(990, 2), float32]) */;
    %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(224), bool] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %147 = cast(%var_7500, dtype="float32") /* ty=Tensor[(189), float32] */;
    %148 = reshape(%146, newshape=[16, 1, 14]) /* ty=Tensor[(16, 1, 14), float32] */;
    %149 = reshape(%147, newshape=[189]) /* ty=Tensor[(189), float32] */;
    %150 = @func_676(%148, %149) /* ty=(Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) */;
    %151 = atan(%134) /* ty=Tensor[(6, 7, 2), float32] */;
    %152 = %135.0;
    %153 = %142.2;
    %154 = %145.3;
    %155 = %150.1;
    (%151, %152, %153, %var_7486, meta[relay.Constant][7] /* ty=Tensor[(130), float64] */, meta[relay.Constant][8] /* ty=Tensor[(224), bool] */, %154, meta[relay.Constant][9] /* ty=Tensor[(1980), float32] */, %155, %var_7500)
  };
  %156(%var_7506, %var_7507, %var_7508) /* ty=(Tensor[(6, 7, 2), float32], Tensor[(2, 13, 10), uint8], Tensor[(130), float64], Tensor[(1540), bool], Tensor[(130), float64], Tensor[(224), bool], Tensor[(990, 2), float32], Tensor[(1980), float32], bool, Tensor[(189), float32]) */
}

def @func_3517(%var_3488: Tensor[(14, 10, 11), bool], %var_3495: Tensor[(130), float64], %var_3497: Tensor[(112, 2), bool]) -> (Tensor[(14, 10, 11), bool], Tensor[(10, 13, 11), bool], Tensor[(130), float64], Tensor[(1430), float64], Tensor[(112, 2), bool], Tensor[(11, 15, 10), float64]) {
  %157 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %158 = %157.1;
  %159 = cast(%var_3488, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %163 = cast(%var_3495, dtype="float64") /* ty=Tensor[(130), float64] */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(1430), float64] */, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %165 = cast(%var_3497, dtype="bool") /* ty=Tensor[(112, 2), bool] */;
  %166 = reshape(%163, newshape=[10, 13, 1]) /* ty=Tensor[(10, 13, 1), float64] */;
  %167 = reshape(%164, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), float64] */;
  %168 = reshape(%165, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %169 = @func_1864(%166, %167, %168) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(8, 4, 7), bool], Tensor[(224), bool]) */;
  %170 = greater(%161, %162) /* ty=Tensor[(14, 10, 11), bool] */;
  %171 = %169.0;
  %172 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  (%170, %171, %var_3495, meta[relay.Constant][10] /* ty=Tensor[(1430), float64] */, %var_3497, %172)
}

def @func_3745() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) {
  %175 = fn () -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) {
    %173 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
    %174 = @func_2652() /* ty=Tensor[(11, 15, 10), float32] */;
    (%173, %174)
  };
  %175() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) */
}

def @func_4572(%var_4570: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(224), bool]) {
  @func_4569(%var_4570) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(224), bool]) */
}

def @func_595(%var_590: bool) -> Tensor[(16, 1, 13), bool] {
  %176 = cast(%var_590, dtype="bool") /* ty=bool */;
  %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 1, 13), bool] */, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
  logical_and(%176, %177) /* ty=Tensor[(16, 1, 13), bool] */
}

def @func_761(%var_748: Tensor[(1, 11, 16), int64], %var_755: bool) -> (Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) {
  %178 = cast(%var_748, dtype="int64") /* ty=Tensor[(1, 11, 16), int64] */;
  %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 11, 16), int64] */, dtype="int64") /* ty=Tensor[(2, 11, 16), int64] */;
  %180 = cast(%var_755, dtype="bool") /* ty=bool */;
  %181 = reshape(%180, newshape=[]) /* ty=bool */;
  %182 = bitwise_and(%178, %179) /* ty=Tensor[(2, 11, 16), int64] */;
  %183 = @func_595(%181) /* ty=Tensor[(16, 1, 13), bool] */;
  (%182, %183, %var_755)
}

def @func_4981(%var_4979: bool) -> (Tensor[(11, 15, 10), int32], Tensor[(16, 1, 13), bool], Tensor[(176), int64], bool, Tensor[(11, 15, 10), int8]) {
  @func_4978(%var_4979) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(16, 1, 13), bool], Tensor[(176), int64], bool, Tensor[(11, 15, 10), int8]) */
}

def @func_7829() -> Tensor[(5, 13), float32] {
  %184 = @func_5831() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) */;
  %184.1
}

def @func_7120() -> Tensor[(11, 15, 10), int8] {
  @func_7118() /* ty=Tensor[(11, 15, 10), int8] */
}

def @func_4627(%var_4609: Tensor[(15, 12), uint16]) -> (Tensor[(15, 12), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %185 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 12), uint16] */, dtype="bool") /* ty=Tensor[(15, 12), bool] */;
  %186 = shape_of(%var_4609, dtype="int32") /* ty=Tensor[(2), int32] */;
  %187 = cast(%var_4609, dtype="bool") /* ty=Tensor[(15, 12), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %189 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %190 = %189.0;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %192 = reshape(%191, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
  %193 = greater(%187, %188) /* ty=Tensor[(15, 12), bool] */;
  %194 = @func_3069(%192) /* ty=Tensor[(11, 15, 10), int32] */;
  (%193, %190, %194)
}

def @func_4211(%var_4210: Tensor[(4, 7), float64]) -> (Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) {
  %198 = fn (%var_4202: Tensor[(4, 7), float64]) -> (Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) {
    %195 = cast(%var_4202, dtype="float64") /* ty=Tensor[(4, 7), float64] */;
    %196 = cos(%195) /* ty=Tensor[(4, 7), float64] */;
    %197 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
    (%196, %197)
  };
  %198(%var_4210) /* ty=(Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) */
}

def @func_1451(%var_1447: Tensor[(5, 13), float32]) -> Tensor[(5, 13), float32] {
  %199 = cast(%var_1447, dtype="float32") /* ty=Tensor[(5, 13), float32] */;
  acos(%199) /* ty=Tensor[(5, 13), float32] */
}

def @func_5450() -> Tensor[(10, 15, 15), float64] {
  @func_5448() /* ty=Tensor[(10, 15, 15), float64] */
}

def @func_5832() -> (Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) {
  %222 = fn () -> (Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) {
    %200 = cast(meta[relay.Constant][14] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
    %201 = reshape(%200, newshape=[176, 1]) /* ty=Tensor[(176, 1), int64] */;
    %202 = @func_4919(%201) /* ty=(Tensor[(5, 13), float32], bool, bool, Tensor[(176, 1), float32]) */;
    %203 = cast(meta[relay.Constant][14] /* ty=Tensor[(176), int64] */, dtype="float32") /* ty=Tensor[(176), float32] */;
    %204 = asinh(%203) /* ty=Tensor[(176), float32] */;
    %205 = cast(meta[relay.Constant][14] /* ty=Tensor[(176), int64] */, dtype="int32") /* ty=Tensor[(176), int32] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(1), int32] */;
    %207 = cast(%204, dtype="int32") /* ty=Tensor[(176), int32] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?), int32] */;
    %209 = cast(meta[relay.Constant][15] /* ty=Tensor[(16, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 14), bool] */;
    %210 = reshape(%209, newshape=[224]) /* ty=Tensor[(224), bool] */;
    %211 = @func_2606(%210) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
    %212 = cast(meta[relay.Constant][16] /* ty=Tensor[(176), float32] */, dtype="bool") /* ty=Tensor[(176), bool] */;
    %213 = shape_of(%204, dtype="int32") /* ty=Tensor[(1), int32] */;
    %214 = cast(%204, dtype="bool") /* ty=Tensor[(176), bool] */;
    %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?), bool] */;
    %216 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
    %217 = %202.0;
    %218 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
    %219 = bitwise_xor(%207, %208) /* ty=Tensor[(176), int32] */;
    %220 = %211.1;
    %221 = logical_or(%214, %215) /* ty=Tensor[(176), bool] */;
    (%216, %217, %218, %219, %220, meta[relay.Constant][15] /* ty=Tensor[(16, 14), bool] */, %221)
  };
  %222() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64], Tensor[(176), int32], Tensor[(224), bool], Tensor[(16, 14), bool], Tensor[(176), bool]) */
}

def @func_6502(%var_6500: Tensor[(7, 9, 14), float32]) -> Tensor[(7, 9, 14), float32] {
  @func_6499(%var_6500) /* ty=Tensor[(7, 9, 14), float32] */
}

def @func_4102() -> (Tensor[(11, 15, 10), float64],) {
  @func_4100() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_163(%var_132: float32, %var_133: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float64] {
  %223 = cast(%var_132, dtype="float32") /* ty=float32 */;
  %224 = cast(%var_133, dtype="float32") /* ty=Tensor[(3, 9, 7), float32] */;
  %225 = subtract(%223, %224) /* ty=Tensor[(3, 9, 7), float32] */;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(3, 9, 7), float64] */;
  sin(%226) /* ty=Tensor[(3, 9, 7), float64] */
}

def @func_3522(%var_3519: Tensor[(14, 10, 11), bool], %var_3520: Tensor[(130), float64], %var_3521: Tensor[(112, 2), bool]) -> (Tensor[(14, 10, 11), bool], Tensor[(10, 13, 11), bool], Tensor[(130), float64], Tensor[(1430), float64], Tensor[(112, 2), bool], Tensor[(11, 15, 10), float64]) {
  @func_3517(%var_3519, %var_3520, %var_3521) /* ty=(Tensor[(14, 10, 11), bool], Tensor[(10, 13, 11), bool], Tensor[(130), float64], Tensor[(1430), float64], Tensor[(112, 2), bool], Tensor[(11, 15, 10), float64]) */
}

def @func_676(%var_627: Tensor[(16, 1, 14), float32], %var_646: Tensor[(189), float32]) -> (Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) {
  %227 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %228 = reshape(%227, newshape=[]) /* ty=bool */;
  %229 = cast(False /* ty=bool */, dtype="float32") /* ty=float32 */;
  %230 = cast(%var_646, dtype="float32") /* ty=Tensor[(189), float32] */;
  %231 = reshape(%229, newshape=[]) /* ty=float32 */;
  %232 = reshape(%230, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %233 = cast(%var_627, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
  %234 = exp(%233) /* ty=Tensor[(16, 1, 14), float32] */;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(16, 1, 14), float32] */;
  %236 = @func_595(%228) /* ty=Tensor[(16, 1, 13), bool] */;
  %237 = @func_163(%231, %232) /* ty=Tensor[(3, 9, 7), float64] */;
  %238 = acosh(%235) /* ty=Tensor[(16, 1, 14), float32] */;
  (%236, False /* ty=bool */, %237, %var_646, %238)
}

def @func_4100() -> (Tensor[(11, 15, 10), float64],) {
  %239 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  (%239,)
}

def @func_4157(%var_4155: float32, %var_4156: Tensor[(4, 1, 15), float32]) -> (Tensor[(4, ?, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
  @func_4153(%var_4155, %var_4156) /* ty=(Tensor[(4, ?, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */
}

def @func_4664() -> (Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) {
  @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */
}

def @func_6900(%var_6891: Tensor[(65), float32]) -> (Tensor[(2, 13, 10), uint8], Tensor[(176), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32]) {
  %240 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %241 = @func_6151() /* ty=(Tensor[(176), bool],) */;
  %242 = cast(%var_6891, dtype="float32") /* ty=Tensor[(65), float32] */;
  %243 = reshape(%242, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %244 = %240.0;
  %245 = %241.0;
  %246 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %247 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
  %248 = @func_1451(%243) /* ty=Tensor[(5, 13), float32] */;
  (%244, %245, %246, %247, %248, %var_6891)
}

def @func_4760() -> (Tensor[(11, 15, 10), int8],) {
  @func_4758() /* ty=(Tensor[(11, 15, 10), int8],) */
}

def @func_5909(%var_5907: Tensor[(10, 12, 5), float32], %var_5908: bool) -> (Tensor[(10, 12, 5), float32], Tensor[(2, 9, 6), bool], Tensor[(176), int64], bool) {
  %257 = fn (%var_5883: Tensor[(10, 12, 5), float32], %var_5892: bool) -> (Tensor[(10, 12, 5), float32], Tensor[(2, 9, 6), bool], Tensor[(176), int64], bool) {
    %249 = cast(%var_5883, dtype="float32") /* ty=Tensor[(10, 12, 5), float32] */;
    %250 = cast(meta[relay.Constant][17] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
    %251 = cast(%var_5892, dtype="bool") /* ty=bool */;
    %252 = reshape(%250, newshape=[176]) /* ty=Tensor[(176), int64] */;
    %253 = reshape(%251, newshape=[]) /* ty=bool */;
    %254 = @func_4469(%252, %253) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) */;
    %255 = rsqrt(%249) /* ty=Tensor[(10, 12, 5), float32] */;
    %256 = %254.1;
    (%255, %256, meta[relay.Constant][17] /* ty=Tensor[(176), int64] */, %var_5892)
  };
  %257(%var_5907, %var_5908) /* ty=(Tensor[(10, 12, 5), float32], Tensor[(2, 9, 6), bool], Tensor[(176), int64], bool) */
}

def @func_6499(%var_6486: Tensor[(7, 9, 14), float32]) -> Tensor[(7, 9, 14), float32] {
  %258 = cast(%var_6486, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
  %259 = erf(%258) /* ty=Tensor[(7, 9, 14), float32] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
  %261 = atanh(%260) /* ty=Tensor[(7, 9, 14), float32] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(7, 9, 14), float32] */;
  log2(%262) /* ty=Tensor[(7, 9, 14), float32] */
}

def @func_4153(%var_4114: float32, %var_4115: Tensor[(4, 1, 15), float32]) -> (Tensor[(4, ?, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
  %263 = cast(%var_4114, dtype="float32") /* ty=float32 */;
  %264 = cast(%var_4115, dtype="float32") /* ty=Tensor[(4, 1, 15), float32] */;
  %265 = power(%263, %264) /* ty=Tensor[(4, 1, 15), float32] */;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(4, 1, 15), float64] */;
  %267 = shape_of(%var_4115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_4115, dtype="float64") /* ty=Tensor[(4, 1, 15), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %272 = reshape(%271, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %273 = @func_3986(%272) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), bool], Tensor[(13, 13, 5), float64], Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool, Tensor[(13, 13, 5), float64]) */;
  %274 = mod(%268, %269) /* ty=Tensor[(4, ?, 15), float64] */;
  %275 = %270.0;
  %276 = %273.3;
  (%274, %275, %276, meta[relay.Constant][18] /* ty=Tensor[(845), float64] */)
}

def @func_6542() -> Tensor[(1540), int16] {
  %278 = fn () -> Tensor[(1540), int16] {
    %277 = @func_5602() /* ty=(Tensor[(1540), int16],) */;
    %277.0
  };
  %278() /* ty=Tensor[(1540), int16] */
}

def @main() -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64]) {
  %279 = @func_4603() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %280 = %279.0;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %282 = @func_5654() /* ty=Tensor[(11, 15, 10), int32] */;
  %283 = atan(%281) /* ty=Tensor[(11, 15, 10), float64] */;
  (%282, %283)
}

def @func_3151(%var_3147: Tensor[(2, 9, 6), int32], %var_3148: Tensor[(2, 9, 6), int32], %var_3149: Tensor[(4, 44), int64], %var_3150: bool) -> (Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) {
  @func_3145(%var_3147, %var_3148, %var_3149, %var_3150) /* ty=(Tensor[(2, 9, 6), bool], Tensor[(4, 44), int64], bool, Tensor[(224), float32], Tensor[(189), float32], Tensor[(16, 1, 13), uint32]) */
}

def @func_4439() -> Tensor[(2, 13, 10), uint8] {
  @func_4437() /* ty=Tensor[(2, 13, 10), uint8] */
}

def @func_3035() -> (Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) {
  %284 = cast(meta[relay.Constant][19] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %285 = cast(meta[relay.Constant][19] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %286 = reshape(%284, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %287 = reshape(%285, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %288 = @func_2858(%286, %287) /* ty=(Tensor[(14, 10, 11), bool],) */;
  %289 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %290 = %288.0;
  %291 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%289, %290, meta[relay.Constant][19] /* ty=Tensor[(1540), int16] */, %291)
}

def @func_680(%var_678: Tensor[(16, 1, 14), float32], %var_679: Tensor[(189), float32]) -> (Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) {
  @func_676(%var_678, %var_679) /* ty=(Tensor[(16, 1, 13), bool], bool, Tensor[(3, 9, 7), float64], Tensor[(189), float32], Tensor[(16, 1, 14), float32]) */
}

def @func_7831() -> Tensor[(5, 13), float32] {
  @func_7829() /* ty=Tensor[(5, 13), float32] */
}

def @func_6113() -> Tensor[(11, 15, 10), int32] {
  @func_6111() /* ty=Tensor[(11, 15, 10), int32] */
}

def @func_7716() -> (Tensor[(11, 15, 10), int8],) {
  @func_7714() /* ty=(Tensor[(11, 15, 10), int8],) */
}

def @func_3580(%var_3578: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
  @func_3577(%var_3578) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) */
}

def @func_5956() -> (Tensor[(11, 15, 10), float32],) {
  %292 = @func_5518() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %293 = %292.1;
  %294 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 15, 10), int32] */, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %298 = power(%296, %297) /* ty=Tensor[(11, 15, 10), float32] */;
  (%298,)
}

def @func_5119(%var_5110: Tensor[(990, 2), float32]) -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(990, 2), float32]) {
  %299 = @func_5040() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %300 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
  %301 = cast(%var_5110, dtype="float32") /* ty=Tensor[(990, 2), float32] */;
  %302 = cast(%var_5110, dtype="float32") /* ty=Tensor[(990, 2), float32] */;
  %303 = reshape(%301, newshape=[3, 660]) /* ty=Tensor[(3, 660), float32] */;
  %304 = reshape(%302, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %305 = @func_5009(%303, %304) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32], Tensor[(3, 660), float32], Tensor[(15, 11, 12), float32], Tensor[(11, 15, 10), float64]) */;
  %306 = %299.1;
  %307 = %300.0;
  %308 = %305.0;
  (%306, %307, %308, %var_5110)
}

def @func_6787() -> (Tensor[(176), bool], Tensor[(11, 15, 10), int8]) {
  %312 = fn () -> (Tensor[(176), bool], Tensor[(11, 15, 10), int8]) {
    %309 = @func_6151() /* ty=(Tensor[(176), bool],) */;
    %310 = %309.0;
    %311 = @func_6310() /* ty=Tensor[(11, 15, 10), int8] */;
    (%310, %311)
  };
  %312() /* ty=(Tensor[(176), bool], Tensor[(11, 15, 10), int8]) */
}

def @func_5013(%var_5011: Tensor[(3, 660), float32], %var_5012: Tensor[(15, 11, 12), float32]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32], Tensor[(3, 660), float32], Tensor[(15, 11, 12), float32], Tensor[(11, 15, 10), float64]) {
  @func_5009(%var_5011, %var_5012) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32], Tensor[(3, 660), float32], Tensor[(15, 11, 12), float32], Tensor[(11, 15, 10), float64]) */
}

def @func_6048() -> (Tensor[(11, 15, 10), float64],) {
  %313 = @func_4427() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %314 = %313.0;
  (%314,)
}

def @func_2861(%var_2859: Tensor[(14, 10, 11), int16], %var_2860: Tensor[(14, 10, 11), int16]) -> (Tensor[(14, 10, 11), bool],) {
  %320 = fn (%var_2850: Tensor[(14, 10, 11), int16], %var_2851: Tensor[(14, 10, 11), int16]) -> (Tensor[(14, 10, 11), bool],) {
    %315 = cast(%var_2851, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
    %316 = shape_of(%var_2850, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%var_2850, dtype="bool") /* ty=Tensor[(14, 10, 11), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %319 = equal(%317, %318) /* ty=Tensor[(14, 10, 11), bool] */;
    (%319,)
  };
  %320(%var_2859, %var_2860) /* ty=(Tensor[(14, 10, 11), bool],) */
}

def @func_7095(%var_7092: Tensor[(12, 13, 15), uint8], %var_7093: Tensor[(12, 13, 15), uint8], %var_7094: bool) -> (Tensor[(12, 13, 15), uint8], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(16, 1, 13), bool], bool) {
  %335 = fn (%var_7069: Tensor[(12, 13, 15), uint8], %var_7070: Tensor[(12, 13, 15), uint8], %var_7086: bool) -> (Tensor[(12, 13, 15), uint8], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(16, 1, 13), bool], bool) {
    %321 = cast(%var_7070, dtype="uint8") /* ty=Tensor[(12, 13, 15), uint8] */;
    %322 = shape_of(%var_7069, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%var_7069, dtype="uint8") /* ty=Tensor[(12, 13, 15), uint8] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %325 = cast(meta[relay.Constant][21] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
    %326 = cast(meta[relay.Constant][21] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
    %327 = reshape(%325, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
    %328 = reshape(%326, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
    %329 = @func_2858(%327, %328) /* ty=(Tensor[(14, 10, 11), bool],) */;
    %330 = cast(%var_7086, dtype="bool") /* ty=bool */;
    %331 = reshape(%330, newshape=[]) /* ty=bool */;
    %332 = bitwise_or(%323, %324) /* ty=Tensor[(12, 13, 15), uint8] */;
    %333 = %329.0;
    %334 = @func_595(%331) /* ty=Tensor[(16, 1, 13), bool] */;
    (%332, %333, meta[relay.Constant][21] /* ty=Tensor[(1540), int16] */, %334, %var_7086)
  };
  %335(%var_7092, %var_7093, %var_7094) /* ty=(Tensor[(12, 13, 15), uint8], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(16, 1, 13), bool], bool) */
}

def @func_5872() -> Tensor[(11, 15, 10), float64] {
  %337 = fn () -> Tensor[(11, 15, 10), float64] {
    %336 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %336.0
  };
  %337() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_6989(%var_6986: Tensor[(11, 15, 10), float64], %var_6987: float32, %var_6988: Tensor[(189), float32]) -> (Tensor[(11, 15, 10), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) {
  @func_6984(%var_6986, %var_6987, %var_6988) /* ty=(Tensor[(11, 15, 10), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) */
}

def @func_4794() -> Tensor[(1540), int16] {
  %339 = fn () -> Tensor[(1540), int16] {
    %338 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
    %338.2
  };
  %339() /* ty=Tensor[(1540), int16] */
}

def @func_4662() -> (Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) {
  %340 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %341 = cast(meta[relay.Constant][22] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %342 = reshape(%341, newshape=[1540]) /* ty=Tensor[(1540), int16] */;
  %343 = @func_2975(%342) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(14, 10, 11), bool], Tensor[(1540), int16]) */;
  %344 = %340.0;
  %345 = %343.2;
  (%344, %345, meta[relay.Constant][22] /* ty=Tensor[(1540), int16] */)
}

def @func_5401() -> (Tensor[(1540), int16], Tensor[(11, 15, 10), int32]) {
  %346 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %347 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %348 = %346.0;
  (%347, %348)
}

def @func_6311() -> Tensor[(11, 15, 10), int8] {
  %350 = fn () -> Tensor[(11, 15, 10), int8] {
    %349 = @func_4758() /* ty=(Tensor[(11, 15, 10), int8],) */;
    %349.0
  };
  %350() /* ty=Tensor[(11, 15, 10), int8] */
}

def @func_3577(%var_3560: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
  %351 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %352 = cast(%var_3560, dtype="bool") /* ty=Tensor[(224), bool] */;
  %353 = reshape(%352, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %354 = @func_2606(%353) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %355 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %356 = %351.0;
  %357 = %354.1;
  %358 = %355.0;
  %359 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%356, %357, %var_3560, %358, %359)
}

def @func_1454(%var_1452: Tensor[(5, 13), float32]) -> Tensor[(5, 13), float32] {
  @func_1451(%var_1452) /* ty=Tensor[(5, 13), float32] */
}

def @func_2652() -> Tensor[(11, 15, 10), float32] {
  %360 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  rsqrt(%361) /* ty=Tensor[(11, 15, 10), float32] */
}

def @func_3357() -> (Tensor[(11, 15, 10), int32],) {
  %362 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
  %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 15, 10), float64] */, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %367 = bitwise_xor(%365, %366) /* ty=Tensor[(11, 15, 10), int32] */;
  (%367,)
}

def @func_1933(%var_1889: Tensor[(1, 2, 11), float64], %var_1913: Tensor[(1820), float64]) -> (Tensor[(?, 2, 11), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float64], bool, Tensor[(5, 13), float32], Tensor[(65), float32]) {
  %368 = cast(%var_1889, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %369 = atan(%368) /* ty=Tensor[(1, 2, 11), float64] */;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
  %371 = shape_of(%var_1889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%var_1889, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %374 = cast(%var_1913, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %375 = cast(%var_1913, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %376 = cast(%var_1913, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %377 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %378 = reshape(%374, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float64] */;
  %379 = reshape(%375, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float64] */;
  %380 = reshape(%376, newshape=[13, 14, 10]) /* ty=Tensor[(13, 14, 10), float64] */;
  %381 = reshape(%377, newshape=[]) /* ty=bool */;
  %382 = @func_1187(%378, %379, %380, %381) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float32], Tensor[(2, 11, 16), int64], Tensor[(176), int64], bool) */;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %384 = reshape(%383, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %385 = power(%372, %373) /* ty=Tensor[(?, 2, 11), float32] */;
  %386 = %382.1;
  %387 = @func_1451(%384) /* ty=Tensor[(5, 13), float32] */;
  (%385, %386, %var_1913, True /* ty=bool */, %387, meta[relay.Constant][24] /* ty=Tensor[(65), float32] */)
}

def @func_6153() -> (Tensor[(176), bool],) {
  @func_6151() /* ty=(Tensor[(176), bool],) */
}

def @func_3359() -> (Tensor[(11, 15, 10), int32],) {
  @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */
}

def @func_3071(%var_3070: Tensor[(11, 15, 10), float64]) -> Tensor[(11, 15, 10), int32] {
  %399 = fn (%var_3052: Tensor[(11, 15, 10), float64]) -> Tensor[(11, 15, 10), int32] {
    %388 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
    %389 = %388.0;
    %390 = cast(%var_3052, dtype="int16") /* ty=Tensor[(11, 15, 10), int16] */;
    %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%389, dtype="int16") /* ty=Tensor[(11, 15, 10), int16] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %394 = maximum(%392, %393) /* ty=Tensor[(11, 15, 10), int16] */;
    %395 = cast(%389, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
    %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %397 = cast(%394, dtype="int32") /* ty=Tensor[(11, 15, 10), int32] */;
    %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_and(%397, %398) /* ty=Tensor[(11, 15, 10), int32] */
  };
  %399(%var_3070) /* ty=Tensor[(11, 15, 10), int32] */
}

def @func_5519() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %403 = fn () -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
    %400 = @func_3870() /* ty=(Tensor[(11, 15, 10), int32],) */;
    %401 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
    %402 = %400.0;
    (%401, %402)
  };
  %403() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */
}

def @func_3095() -> (Tensor[(2, 13, 10), uint8],) {
  %405 = fn () -> (Tensor[(2, 13, 10), uint8],) {
    %404 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
    (%404,)
  };
  %405() /* ty=(Tensor[(2, 13, 10), uint8],) */
}

def @func_5009(%var_4997: Tensor[(3, 660), float32], %var_5002: Tensor[(15, 11, 12), float32]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32], Tensor[(3, 660), float32], Tensor[(15, 11, 12), float32], Tensor[(11, 15, 10), float64]) {
  %406 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %407 = cast(%var_4997, dtype="float32") /* ty=Tensor[(3, 660), float32] */;
  %408 = reshape(%407, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %409 = @func_4774(%408) /* ty=Tensor[(15, 11, 12), float32] */;
  %410 = cast(%var_5002, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%409, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %414 = @func_3921() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) */;
  %415 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %416 = %406.0;
  %417 = power(%412, %413) /* ty=Tensor[(15, 11, 12), float32] */;
  %418 = %414.4;
  (%415, %416, %var_4997, %417, %418)
}

def @func_4758() -> (Tensor[(11, 15, 10), int8],) {
  %419 = @func_2758() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %420 = %419.0;
  %421 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 15, 10), float64] */, dtype="int8") /* ty=Tensor[(11, 15, 10), int8] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%420, dtype="int8") /* ty=Tensor[(11, 15, 10), int8] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %425 = add(%423, %424) /* ty=Tensor[(11, 15, 10), int8] */;
  (%425,)
}

def @func_6691(%var_6661: Tensor[(1540), int16]) -> (Tensor[(1540), bool],) {
  %426 = @func_4662() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(1540), int16], Tensor[(1540), int16]) */;
  %427 = %426.1;
  %428 = cast(%var_6661, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(1), int32] */;
  %430 = cast(%427, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?), bool] */;
  %432 = less_equal(%430, %431) /* ty=Tensor[(1540), bool] */;
  (%432,)
}

def @func_5041() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %437 = fn () -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
    %433 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
    %434 = cast(%433, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
    %435 = reshape(%434, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
    %436 = @func_3069(%435) /* ty=Tensor[(11, 15, 10), int32] */;
    (%433, %436)
  };
  %437() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */
}

def @func_6694(%var_6692: Tensor[(1540), int16]) -> (Tensor[(1540), bool],) {
  @func_6691(%var_6692) /* ty=(Tensor[(1540), bool],) */
}

def @func_2975(%var_2965: Tensor[(1540), int16]) -> (Tensor[(11, 15, 10), float32], Tensor[(14, 10, 11), bool], Tensor[(1540), int16]) {
  %438 = cast(%var_2965, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %439 = cast(%var_2965, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %440 = reshape(%438, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %441 = reshape(%439, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %442 = @func_2858(%440, %441) /* ty=(Tensor[(14, 10, 11), bool],) */;
  %443 = @func_2652() /* ty=Tensor[(11, 15, 10), float32] */;
  %444 = %442.0;
  (%443, %444, %var_2965)
}

def @func_3256() -> Tensor[(11, 15, 10), float64] {
  @func_3254() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_2654() -> Tensor[(11, 15, 10), float32] {
  @func_2652() /* ty=Tensor[(11, 15, 10), float32] */
}

def @func_4291() -> (Tensor[(11, 15, 10), float64],) {
  %447 = fn () -> (Tensor[(11, 15, 10), float64],) {
    %445 = @func_3744() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32]) */;
    %446 = %445.0;
    (%446,)
  };
  %447() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_3923() -> (Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) {
  @func_3921() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) */
}

def @func_2759() -> (Tensor[(11, 15, 10), float64],) {
  %449 = fn () -> (Tensor[(11, 15, 10), float64],) {
    %448 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
    (%448,)
  };
  %449() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_3986(%var_3930: Tensor[(13, 13, 5), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), bool], Tensor[(13, 13, 5), float64], Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool, Tensor[(13, 13, 5), float64]) {
  %450 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %451 = @func_2758() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %452 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %453 = %452.1;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %455 = erf(%454) /* ty=Tensor[(13, 13, 5), float64] */;
  %456 = cast(%453, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = cast(%var_3930, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %461 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%453, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %464 = mod(%462, %463) /* ty=Tensor[(13, 13, 5), float32] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %466 = log2(%465) /* ty=Tensor[(13, 13, 5), float32] */;
  %467 = cast(%464, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %471 = cast(meta[relay.Constant][26] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %472 = reshape(%471, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %473 = @func_2606(%472) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %474 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %475 = reshape(%474, newshape=[]) /* ty=bool */;
  %476 = cast(%453, dtype="int16") /* ty=Tensor[(13, 13, 5), int16] */;
  %477 = shape_of(%var_3930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%var_3930, dtype="int16") /* ty=Tensor[(13, 13, 5), int16] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %480 = bitwise_and(%478, %479) /* ty=Tensor[(13, 13, 5), int16] */;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %482 = %450.0;
  %483 = %451.0;
  %484 = logical_and(%458, %459) /* ty=Tensor[(13, 13, 5), bool] */;
  %485 = floor_divide(%469, %470) /* ty=Tensor[(13, 13, 5), float64] */;
  %486 = %473.2;
  %487 = @func_595(%475) /* ty=Tensor[(16, 1, 13), bool] */;
  %488 = log10(%481) /* ty=Tensor[(13, 13, 5), float64] */;
  (%482, %483, %484, %485, %486, meta[relay.Constant][26] /* ty=Tensor[(224), bool] */, %487, False /* ty=bool */, %488)
}

def @func_3871() -> (Tensor[(11, 15, 10), int32],) {
  %491 = fn () -> (Tensor[(11, 15, 10), int32],) {
    %489 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
    %490 = %489.0;
    (%490,)
  };
  %491() /* ty=(Tensor[(11, 15, 10), int32],) */
}

def @func_4429() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  @func_4427() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */
}

def @func_7363(%var_7350: bool) -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), bool], Tensor[(224), bool], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool) {
  %492 = @func_4601() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %493 = %492.0;
  %494 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = cast(meta[relay.Constant][28] /* ty=Tensor[(224), bool] */, dtype="bool") /* ty=Tensor[(224), bool] */;
  %499 = reshape(%498, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %500 = @func_2606(%499) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %501 = cast(%var_7350, dtype="bool") /* ty=bool */;
  %502 = reshape(%501, newshape=[]) /* ty=bool */;
  %503 = @func_5654() /* ty=Tensor[(11, 15, 10), int32] */;
  %504 = less(%496, %497) /* ty=Tensor[(11, 15, 10), bool] */;
  %505 = %500.1;
  %506 = @func_595(%502) /* ty=Tensor[(16, 1, 13), bool] */;
  (%503, %504, %505, meta[relay.Constant][28] /* ty=Tensor[(224), bool] */, %506, %var_7350)
}

def @func_7265() -> Tensor[(11, 15, 10), int32] {
  %508 = fn () -> Tensor[(11, 15, 10), int32] {
    %507 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
    %507.0
  };
  %508() /* ty=Tensor[(11, 15, 10), int32] */
}

def @func_7464(%var_7463: Tensor[(5, 10, 15), float64]) -> (Tensor[(5, 10, 15), float64],) {
  %511 = fn (%var_7457: Tensor[(5, 10, 15), float64]) -> (Tensor[(5, 10, 15), float64],) {
    %509 = cast(%var_7457, dtype="float64") /* ty=Tensor[(5, 10, 15), float64] */;
    %510 = acos(%509) /* ty=Tensor[(5, 10, 15), float64] */;
    (%510,)
  };
  %511(%var_7463) /* ty=(Tensor[(5, 10, 15), float64],) */
}

def @func_3848(%var_3841: Tensor[(2, 13, 10), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int32]) {
  %512 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %513 = cast(meta[relay.Constant][29] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %514 = cast(meta[relay.Constant][29] /* ty=Tensor[(1540), int16] */, dtype="int16") /* ty=Tensor[(1540), int16] */;
  %515 = reshape(%513, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %516 = reshape(%514, newshape=[14, 10, 11]) /* ty=Tensor[(14, 10, 11), int16] */;
  %517 = @func_2858(%515, %516) /* ty=(Tensor[(14, 10, 11), bool],) */;
  %518 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %519 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(2, 13, 10), float64] */;
  %521 = atanh(%520) /* ty=Tensor[(2, 13, 10), float64] */;
  %522 = cast(%var_3841, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %526 = %512.0;
  %527 = %517.0;
  %528 = %518.0;
  %529 = bitwise_xor(%524, %525) /* ty=Tensor[(2, 13, 10), int32] */;
  (%526, %527, meta[relay.Constant][29] /* ty=Tensor[(1540), int16] */, %528, %529)
}

def @func_7036() -> (Tensor[(1540), bool],) {
  %530 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %531 = cast(meta[relay.Constant][30] /* ty=Tensor[(1540), int16] */, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(1), int32] */;
  %533 = cast(%530, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?), bool] */;
  %535 = logical_or(%533, %534) /* ty=Tensor[(1540), bool] */;
  (%535,)
}

def @func_4922(%var_4920: Tensor[(176, 1), int64]) -> (Tensor[(5, 13), float32], bool, bool, Tensor[(176, 1), float32]) {
  @func_4919(%var_4920) /* ty=(Tensor[(5, 13), float32], bool, bool, Tensor[(176, 1), float32]) */
}

def @func_3182() -> (Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
  %541 = fn () -> (Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
    %536 = cast(meta[relay.Constant][31] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
    %537 = reshape(%536, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
    %538 = @func_808(%537) /* ty=(Tensor[(13, 13, 5), float64],) */;
    %539 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
    %540 = %538.0;
    (%539, %540, meta[relay.Constant][31] /* ty=Tensor[(845), float64] */)
  };
  %541() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */
}

def @func_1869(%var_1866: Tensor[(10, 13, 1), float64], %var_1867: Tensor[(10, 13, 11), float64], %var_1868: Tensor[(224), bool]) -> (Tensor[(10, 13, 11), bool], Tensor[(8, 4, 7), bool], Tensor[(224), bool]) {
  @func_1864(%var_1866, %var_1867, %var_1868) /* ty=(Tensor[(10, 13, 11), bool], Tensor[(8, 4, 7), bool], Tensor[(224), bool]) */
}

def @func_3472(%var_3470: Tensor[(2, 13, 10), uint8]) -> (Tensor[(11, 15, 10), uint16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int8]) {
  @func_3469(%var_3470) /* ty=(Tensor[(11, 15, 10), uint16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int8]) */
}

def @func_5122(%var_5120: Tensor[(990, 2), float32]) -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(990, 2), float32]) {
  @func_5119(%var_5120) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(990, 2), float32]) */
}

def @func_3989(%var_3987: Tensor[(13, 13, 5), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), bool], Tensor[(13, 13, 5), float64], Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool, Tensor[(13, 13, 5), float64]) {
  @func_3986(%var_3987) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), bool], Tensor[(13, 13, 5), float64], Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool, Tensor[(13, 13, 5), float64]) */
}

def @func_6627() -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1540), float64]) {
  %542 = @func_3870() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %543 = @func_3223() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %544 = @func_4290() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %545 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(1540), float64] */;
  %547 = %542.0;
  %548 = %543.0;
  %549 = %544.0;
  %550 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %551 = @func_5871() /* ty=Tensor[(11, 15, 10), float64] */;
  %552 = log(%546) /* ty=Tensor[(1540), float64] */;
  (%547, %548, %549, %550, %551, %552)
}

def @func_6984(%var_6966: Tensor[(11, 15, 10), float64], %var_6975: float32, %var_6976: Tensor[(189), float32]) -> (Tensor[(11, 15, 10), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) {
  %553 = @func_3181() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
  %554 = %553.0;
  %555 = cast(%var_6966, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = cast(%var_6975, dtype="float32") /* ty=float32 */;
  %560 = cast(%var_6976, dtype="float32") /* ty=Tensor[(189), float32] */;
  %561 = reshape(%559, newshape=[]) /* ty=float32 */;
  %562 = reshape(%560, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
  %563 = logical_and(%557, %558) /* ty=Tensor[(11, 15, 10), bool] */;
  %564 = @func_163(%561, %562) /* ty=Tensor[(3, 9, 7), float64] */;
  (%563, %564, %var_6975, %var_6976)
}

def @func_7844() -> (Tensor[(11, 15, 10), int32],) {
  %567 = fn () -> (Tensor[(11, 15, 10), int32],) {
    %565 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
    %566 = %565.0;
    (%566,)
  };
  %567() /* ty=(Tensor[(11, 15, 10), int32],) */
}

def @func_7714() -> (Tensor[(11, 15, 10), int8],) {
  %568 = @func_7118() /* ty=Tensor[(11, 15, 10), int8] */;
  (%568,)
}

def @func_6629() -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1540), float64]) {
  @func_6627() /* ty=(Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1540), float64]) */
}

def @func_4603() -> (Tensor[(11, 15, 10), float64],) {
  @func_4601() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_4630(%var_4628: Tensor[(15, 12), uint16]) -> (Tensor[(15, 12), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  @func_4627(%var_4628) /* ty=(Tensor[(15, 12), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */
}

def @func_3851(%var_3849: Tensor[(2, 13, 10), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int32]) {
  @func_3848(%var_3849) /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int32]) */
}

def @func_7647(%var_7644: Tensor[(224), bool], %var_7645: Tensor[(189, 1), float32], %var_7646: Tensor[(12), int64]) -> (Tensor[(2, 13, 10), int16], Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189, 1), float32], Tensor[(3, 2, 2), int64], Tensor[(12), int64]) {
  %589 = fn (%var_7618: Tensor[(224), bool], %var_7622: Tensor[(189, 1), float32], %var_7641: Tensor[(12), int64]) -> (Tensor[(2, 13, 10), int16], Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189, 1), float32], Tensor[(3, 2, 2), int64], Tensor[(12), int64]) {
    %569 = @func_5278() /* ty=(Tensor[(2, 13, 10), uint8],) */;
    %570 = %569.0;
    %571 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="int16") /* ty=Tensor[(2, 13, 10), int16] */;
    %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(%570, dtype="int16") /* ty=Tensor[(2, 13, 10), int16] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %575 = cast(%var_7618, dtype="bool") /* ty=Tensor[(224), bool] */;
    %576 = reshape(%575, newshape=[224]) /* ty=Tensor[(224), bool] */;
    %577 = @func_3577(%576) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) */;
    %578 = cast(5.89632f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %579 = cast(%var_7622, dtype="float32") /* ty=Tensor[(189, 1), float32] */;
    %580 = reshape(%578, newshape=[]) /* ty=float32 */;
    %581 = reshape(%579, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %582 = cast(%var_7641, dtype="int64") /* ty=Tensor[(12), int64] */;
    %583 = reshape(%582, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), int64] */;
    %584 = @func_5919(%583) /* ty=(Tensor[(3, 2, 2), int64],) */;
    %585 = right_shift(%573, %574) /* ty=Tensor[(2, 13, 10), int16] */;
    %586 = %577.0;
    %587 = @func_163(%580, %581) /* ty=Tensor[(3, 9, 7), float64] */;
    %588 = %584.0;
    (%585, %586, %var_7618, %587, 5.89632f /* ty=float32 */, %var_7622, %588, %var_7641)
  };
  %589(%var_7644, %var_7645, %var_7646) /* ty=(Tensor[(2, 13, 10), int16], Tensor[(11, 15, 10), int32], Tensor[(224), bool], Tensor[(3, 9, 7), float64], float32, Tensor[(189, 1), float32], Tensor[(3, 2, 2), int64], Tensor[(12), int64]) */
}

def @func_3225() -> (Tensor[(11, 15, 10), float64],) {
  @func_3223() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_4427() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) {
  %590 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %593 = reshape(%592, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
  %594 = @func_3069(%593) /* ty=Tensor[(11, 15, 10), int32] */;
  (%591, %594)
}

def @func_5655() -> Tensor[(11, 15, 10), int32] {
  %596 = fn () -> Tensor[(11, 15, 10), int32] {
    %595 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
    %595.0
  };
  %596() /* ty=Tensor[(11, 15, 10), int32] */
}

def @func_4022() -> (Tensor[(11, 15, 10), float32],) {
  @func_4020() /* ty=(Tensor[(11, 15, 10), float32],) */
}

def @func_6850(%var_6848: Tensor[(12, 16, 1), float32], %var_6849: Tensor[(12, 16, 8), float32]) -> (Tensor[(1540), int16], Tensor[(28), float64], Tensor[(28), float64], Tensor[(12, 16, 8), float32], Tensor[(12, 16, 1), float64]) {
  @func_6846(%var_6848, %var_6849) /* ty=(Tensor[(1540), int16], Tensor[(28), float64], Tensor[(28), float64], Tensor[(12, 16, 8), float32], Tensor[(12, 16, 1), float64]) */
}

def @func_373(%var_372: Tensor[(8, 4, 7), bool]) -> Tensor[(8, 4, 7), bool] {
  %599 = fn (%var_362: Tensor[(8, 4, 7), bool]) -> Tensor[(8, 4, 7), bool] {
    %597 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 4, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
    %598 = cast(%var_362, dtype="bool") /* ty=Tensor[(8, 4, 7), bool] */;
    logical_and(%597, %598) /* ty=Tensor[(8, 4, 7), bool] */
  };
  %599(%var_372) /* ty=Tensor[(8, 4, 7), bool] */
}

def @func_6050() -> (Tensor[(11, 15, 10), float64],) {
  @func_6048() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_4535(%var_4497: Tensor[(11, 15, 10), float64], %var_4511: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), float32], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(2, 13, 10), uint8], Tensor[(1, 28), float64]) {
  %600 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %601 = %600.0;
  %602 = cast(%var_4497, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %606 = cast(%var_4511, dtype="bool") /* ty=Tensor[(224), bool] */;
  %607 = reshape(%606, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %608 = @func_2606(%607) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
  %609 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 28), float64] */, dtype="float64") /* ty=Tensor[(1, 28), float64] */;
  %610 = reshape(%609, newshape=[4, 7]) /* ty=Tensor[(4, 7), float64] */;
  %611 = @func_4209(%610) /* ty=(Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) */;
  %612 = mod(%604, %605) /* ty=Tensor[(11, 15, 10), float32] */;
  %613 = %608.0;
  %614 = %611.1;
  (%612, %613, %var_4511, %614, meta[relay.Constant][34] /* ty=Tensor[(1, 28), float64] */)
}

def @func_6344() -> Tensor[(1540), int16] {
  %616 = fn () -> Tensor[(1540), int16] {
    %615 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
    %615.2
  };
  %616() /* ty=Tensor[(1540), int16] */
}

def @func_6935() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
  %620 = fn () -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
    %617 = @func_6241() /* ty=(Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
    %618 = @func_5690() /* ty=Tensor[(11, 15, 10), float64] */;
    %619 = %617.1;
    (%618, %619)
  };
  %620() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) */
}

def @func_4539(%var_4537: Tensor[(11, 15, 10), float64], %var_4538: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), float32], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(2, 13, 10), uint8], Tensor[(1, 28), float64]) {
  @func_4535(%var_4537, %var_4538) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(2, 13, 10), uint8], Tensor[(1, 28), float64]) */
}

def @func_5958() -> (Tensor[(11, 15, 10), float32],) {
  @func_5956() /* ty=(Tensor[(11, 15, 10), float32],) */
}

def @func_7137() -> (Tensor[(11, 15, 10), int32],) {
  @func_7135() /* ty=(Tensor[(11, 15, 10), int32],) */
}

def @func_3037() -> (Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) {
  @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */
}

def @func_4270(%var_4269: Tensor[(28), float64]) -> (Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) {
  %628 = fn (%var_4247: Tensor[(28), float64]) -> (Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) {
    %621 = cast(%var_4247, dtype="float64") /* ty=Tensor[(28), float64] */;
    %622 = reshape(%621, newshape=[4, 7]) /* ty=Tensor[(4, 7), float64] */;
    %623 = @func_4209(%622) /* ty=(Tensor[(4, 7), float64], Tensor[(2, 13, 10), uint8]) */;
    %624 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
    %625 = cast(%624, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
    %626 = %623.0;
    %627 = acos(%625) /* ty=Tensor[(11, 15, 10), float32] */;
    (%626, %var_4247, %627)
  };
  %628(%var_4269) /* ty=(Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) */
}

def @func_3090() -> (Tensor[(11, 15, 10), float64],) {
  @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_4335() -> (Tensor[(11, 15, 10), float64],) {
  %630 = fn () -> (Tensor[(11, 15, 10), float64],) {
    %629 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
    (%629,)
  };
  %630() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_2894() -> Tensor[(2, 13, 10), uint8] {
  %635 = fn () -> Tensor[(2, 13, 10), uint8] {
    %631 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(2, 13, 10), uint8] */;
    %632 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="uint8") /* ty=Tensor[(2, 13, 10), uint8] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    subtract(%633, %634) /* ty=Tensor[(2, 13, 10), uint8] */
  };
  %635() /* ty=Tensor[(2, 13, 10), uint8] */
}

def @func_7135() -> (Tensor[(11, 15, 10), int32],) {
  %636 = @func_6111() /* ty=Tensor[(11, 15, 10), int32] */;
  (%636,)
}

def @func_2779() -> Tensor[(11, 15, 10), float64] {
  %637 = @func_2758() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %637.0
}

def @func_4978(%var_4950: bool) -> (Tensor[(11, 15, 10), int32], Tensor[(16, 1, 13), bool], Tensor[(176), int64], bool, Tensor[(11, 15, 10), int8]) {
  %638 = @func_3357() /* ty=(Tensor[(11, 15, 10), int32],) */;
  %639 = cast(meta[relay.Constant][37] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
  %640 = cast(%var_4950, dtype="bool") /* ty=bool */;
  %641 = reshape(%639, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
  %642 = reshape(%640, newshape=[]) /* ty=bool */;
  %643 = @func_761(%641, %642) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
  %644 = @func_4758() /* ty=(Tensor[(11, 15, 10), int8],) */;
  %645 = %638.0;
  %646 = %643.1;
  %647 = %644.0;
  (%645, %646, meta[relay.Constant][37] /* ty=Tensor[(176), int64] */, %var_4950, %647)
}

def @func_7047() -> (Tensor[(11, 15, 10), float64],) {
  %650 = fn () -> (Tensor[(11, 15, 10), float64],) {
    %648 = @func_5062() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %649 = %648.0;
    (%649,)
  };
  %650() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_5448() -> Tensor[(10, 15, 15), float64] {
  %651 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 15, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 15), float32] */;
  %652 = sqrt(%651) /* ty=Tensor[(10, 15, 15), float32] */;
  %653 = cast(%652, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %654 = sin(%653) /* ty=Tensor[(10, 15, 15), float64] */;
  %655 = cast(%652, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%657, %658) /* ty=Tensor[(10, 15, 15), float64] */
}

def @func_2724(%var_2723: Tensor[(65), float32]) -> (Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(11, 15, 10), bool], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
  %674 = fn (%var_2690: Tensor[(65), float32]) -> (Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(11, 15, 10), bool], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) {
    %659 = cast(%var_2690, dtype="float32") /* ty=Tensor[(65), float32] */;
    %660 = reshape(%659, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
    %661 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
    %662 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 15, 10), float64] */, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="bool") /* ty=Tensor[(11, 15, 10), bool] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %666 = cast(%661, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
    %667 = cast(meta[relay.Constant][40] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
    %668 = reshape(%667, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
    %669 = @func_808(%668) /* ty=(Tensor[(13, 13, 5), float64],) */;
    %670 = @func_1451(%660) /* ty=Tensor[(5, 13), float32] */;
    %671 = equal(%664, %665) /* ty=Tensor[(11, 15, 10), bool] */;
    %672 = asin(%666) /* ty=Tensor[(11, 15, 10), float64] */;
    %673 = %669.0;
    (%670, %var_2690, %671, %672, %673, meta[relay.Constant][40] /* ty=Tensor[(845), float64] */)
  };
  %674(%var_2723) /* ty=(Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(11, 15, 10), bool], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */
}

def @func_3469(%var_3458: Tensor[(2, 13, 10), uint8]) -> (Tensor[(11, 15, 10), uint16], Tensor[(11, 15, 10), float64], Tensor[(2, 13, 10), int8]) {
  %675 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
  %676 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 15, 10), float64] */, dtype="uint16") /* ty=Tensor[(11, 15, 10), uint16] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="uint16") /* ty=Tensor[(11, 15, 10), uint16] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %680 = cast(%675, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %681 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
  %682 = cast(%var_3458, dtype="int8") /* ty=Tensor[(2, 13, 10), int8] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="int8") /* ty=Tensor[(2, 13, 10), int8] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %686 = logical_xor(%678, %679) /* ty=Tensor[(11, 15, 10), uint16] */;
  %687 = sin(%680) /* ty=Tensor[(11, 15, 10), float64] */;
  %688 = maximum(%684, %685) /* ty=Tensor[(2, 13, 10), int8] */;
  (%686, %687, %688)
}

def @func_1864(%var_1844: Tensor[(10, 13, 1), float64], %var_1845: Tensor[(10, 13, 11), float64], %var_1862: Tensor[(224), bool]) -> (Tensor[(10, 13, 11), bool], Tensor[(8, 4, 7), bool], Tensor[(224), bool]) {
  %689 = cast(%var_1844, dtype="float64") /* ty=Tensor[(10, 13, 1), float64] */;
  %690 = cast(%var_1845, dtype="float64") /* ty=Tensor[(10, 13, 11), float64] */;
  %691 = floor_mod(%689, %690) /* ty=Tensor[(10, 13, 11), float64] */;
  %692 = cast(%691, dtype="bool") /* ty=Tensor[(10, 13, 11), bool] */;
  %693 = cast(%var_1844, dtype="bool") /* ty=Tensor[(10, 13, 1), bool] */;
  %694 = cast(%var_1862, dtype="bool") /* ty=Tensor[(224), bool] */;
  %695 = reshape(%694, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), bool] */;
  %696 = greater(%692, %693) /* ty=Tensor[(10, 13, 11), bool] */;
  %697 = @func_371(%695) /* ty=Tensor[(8, 4, 7), bool] */;
  (%696, %697, %var_1862)
}

def @func_2549() -> Tensor[(11, 15, 10), float64] {
  %699 = fn () -> Tensor[(11, 15, 10), float64] {
    %698 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 15, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
    erf(%698) /* ty=Tensor[(11, 15, 10), float64] */
  };
  %699() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_4777(%var_4775: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), float32] {
  @func_4774(%var_4775) /* ty=Tensor[(15, 11, 12), float32] */
}

def @func_4437() -> Tensor[(2, 13, 10), uint8] {
  %700 = @func_3094() /* ty=(Tensor[(2, 13, 10), uint8],) */;
  %700.0
}

def @func_3223() -> (Tensor[(11, 15, 10), float64],) {
  %701 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%701,)
}

def @func_598(%var_596: bool) -> Tensor[(16, 1, 13), bool] {
  @func_595(%var_596) /* ty=Tensor[(16, 1, 13), bool] */
}

def @func_3921() -> (Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(5, 13), float32], Tensor[(11, 15, 10), float64]) {
  %702 = @func_3035() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(14, 10, 11), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */;
  %703 = cast(meta[relay.Constant][43] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %704 = reshape(%703, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %705 = @func_1451(%704) /* ty=Tensor[(5, 13), float32] */;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(5, 13), float32] */;
  %707 = reshape(%706, newshape=[5, 13]) /* ty=Tensor[(5, 13), float32] */;
  %708 = @func_3223() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %709 = %702.3;
  %710 = @func_1451(%707) /* ty=Tensor[(5, 13), float32] */;
  %711 = %708.0;
  (%709, %705, meta[relay.Constant][43] /* ty=Tensor[(65), float32] */, %710, %711)
}

def @func_5243(%var_5241: Tensor[(8, 4, 14), float64], %var_5242: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), bool],) {
  %717 = fn (%var_5224: Tensor[(8, 4, 14), float64], %var_5225: Tensor[(8, 4, 14), float64]) -> (Tensor[(8, 4, 14), bool],) {
    %712 = cast(%var_5225, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
    %713 = shape_of(%var_5224, dtype="int32") /* ty=Tensor[(3), int32] */;
    %714 = cast(%var_5224, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
    %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %716 = less(%714, %715) /* ty=Tensor[(8, 4, 14), bool] */;
    (%716,)
  };
  %717(%var_5241, %var_5242) /* ty=(Tensor[(8, 4, 14), bool],) */
}

def @func_6402() -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
  %721 = fn () -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) {
    %718 = @func_5062() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %719 = %718.0;
    %720 = @func_2779() /* ty=Tensor[(11, 15, 10), float64] */;
    (%719, %720)
  };
  %721() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64]) */
}

def @func_7241(%var_7178: Tensor[(2, 13, 10), uint8], %var_7200: Tensor[(28, 1), float64]) -> (Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float32], Tensor[(28, 1), float64], Tensor[(2, 13, 10), int32], Tensor[(2, 13, 10), float32]) {
  %722 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %723 = cast(%var_7200, dtype="float64") /* ty=Tensor[(28, 1), float64] */;
  %724 = reshape(%723, newshape=[28]) /* ty=Tensor[(28), float64] */;
  %725 = @func_4268(%724) /* ty=(Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) */;
  %726 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %727 = shape_of(%var_7178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%var_7178, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %730 = power(%728, %729) /* ty=Tensor[(2, 13, 10), float32] */;
  %731 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 13, 10), uint8] */, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="int32") /* ty=Tensor[(2, 13, 10), int32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %735 = @func_4437() /* ty=Tensor[(2, 13, 10), uint8] */;
  %736 = cast(%var_7178, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = less(%738, %739) /* ty=Tensor[(2, 13, 10), bool] */;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %742 = %722.0;
  %743 = %725.2;
  %744 = left_shift(%733, %734) /* ty=Tensor[(2, 13, 10), int32] */;
  %745 = log10(%741) /* ty=Tensor[(2, 13, 10), float32] */;
  (%742, %743, %var_7200, %744, %745)
}

def @func_7366(%var_7364: bool) -> (Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), bool], Tensor[(224), bool], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool) {
  @func_7363(%var_7364) /* ty=(Tensor[(11, 15, 10), int32], Tensor[(11, 15, 10), bool], Tensor[(224), bool], Tensor[(224), bool], Tensor[(16, 1, 13), bool], bool) */
}

def @func_7580(%var_7576: Tensor[(14, 4, 16), int64], %var_7577: Tensor[(14, 4, 16), int64], %var_7578: Tensor[(176), int64], %var_7579: bool) -> (Tensor[(14, 4, 16), int64], Tensor[(2, 13, 10), uint8], Tensor[(176), int64], bool, Tensor[(14, 4, 16), float64]) {
  %759 = fn (%var_7540: Tensor[(14, 4, 16), int64], %var_7541: Tensor[(14, 4, 16), int64], %var_7546: Tensor[(176), int64], %var_7547: bool) -> (Tensor[(14, 4, 16), int64], Tensor[(2, 13, 10), uint8], Tensor[(176), int64], bool, Tensor[(14, 4, 16), float64]) {
    %746 = cast(%var_7541, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
    %747 = shape_of(%var_7540, dtype="int32") /* ty=Tensor[(3), int32] */;
    %748 = cast(%var_7540, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %750 = cast(%var_7546, dtype="int64") /* ty=Tensor[(176), int64] */;
    %751 = cast(%var_7547, dtype="bool") /* ty=bool */;
    %752 = reshape(%750, newshape=[176]) /* ty=Tensor[(176), int64] */;
    %753 = reshape(%751, newshape=[]) /* ty=bool */;
    %754 = @func_4469(%752, %753) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) */;
    %755 = cast(%var_7541, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %756 = multiply(%748, %749) /* ty=Tensor[(14, 4, 16), int64] */;
    %757 = %754.5;
    %758 = erf(%755) /* ty=Tensor[(14, 4, 16), float64] */;
    (%756, %757, %var_7546, %var_7547, %758)
  };
  %759(%var_7576, %var_7577, %var_7578, %var_7579) /* ty=(Tensor[(14, 4, 16), int64], Tensor[(2, 13, 10), uint8], Tensor[(176), int64], bool, Tensor[(14, 4, 16), float64]) */
}

def @func_7118() -> Tensor[(11, 15, 10), int8] {
  @func_6310() /* ty=Tensor[(11, 15, 10), int8] */
}

def @func_5690() -> Tensor[(11, 15, 10), float64] {
  @func_3254() /* ty=Tensor[(11, 15, 10), float64] */
}

def @func_4601() -> (Tensor[(11, 15, 10), float64],) {
  %760 = @func_4100() /* ty=(Tensor[(11, 15, 10), float64],) */;
  %761 = %760.0;
  (%761,)
}

def @func_3088() -> (Tensor[(11, 15, 10), float64],) {
  %762 = @func_2548() /* ty=Tensor[(11, 15, 10), float64] */;
  (%762,)
}

def @func_4473(%var_4471: Tensor[(176), int64], %var_4472: bool) -> (Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) {
  @func_4469(%var_4471, %var_4472) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(2, 9, 6), bool], Tensor[(18, 6), int32], Tensor[(176), int64], bool, Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64]) */
}

def @func_7435(%var_7433: Tensor[(224), bool], %var_7434: Tensor[(320), float64]) -> (Tensor[(2, 13, 10), uint8], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(10, 15, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(320), float64], Tensor[(11, 15, 10), float32], Tensor[(11, 15, 10), int32]) {
  %780 = fn (%var_7393: Tensor[(224), bool], %var_7408: Tensor[(320), float64]) -> (Tensor[(2, 13, 10), uint8], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(10, 15, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(320), float64], Tensor[(11, 15, 10), float32], Tensor[(11, 15, 10), int32]) {
    %763 = cast(%var_7393, dtype="bool") /* ty=Tensor[(224), bool] */;
    %764 = reshape(%763, newshape=[224]) /* ty=Tensor[(224), bool] */;
    %765 = @func_2606(%764) /* ty=(Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(11, 15, 10), float64]) */;
    %766 = cast(%var_7408, dtype="float64") /* ty=Tensor[(320), float64] */;
    %767 = cast(%var_7408, dtype="float64") /* ty=Tensor[(320), float64] */;
    %768 = reshape(%766, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
    %769 = reshape(%767, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float64] */;
    %770 = @func_4732(%768, %769) /* ty=(Tensor[(10, 2, 16), float64], Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), float64], Tensor[(10, 2, 16), float32]) */;
    %771 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %772 = %771.0;
    %773 = cast(%772, dtype="float32") /* ty=Tensor[(11, 15, 10), float32] */;
    %774 = @func_2893() /* ty=Tensor[(2, 13, 10), uint8] */;
    %775 = %765.0;
    %776 = @func_5448() /* ty=Tensor[(10, 15, 15), float64] */;
    %777 = %770.2;
    %778 = cosh(%773) /* ty=Tensor[(11, 15, 10), float32] */;
    %779 = @func_5654() /* ty=Tensor[(11, 15, 10), int32] */;
    (%774, %775, %var_7393, %776, %777, %var_7408, %778, %779)
  };
  %780(%var_7433, %var_7434) /* ty=(Tensor[(2, 13, 10), uint8], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(10, 15, 15), float64], Tensor[(11, 15, 10), float64], Tensor[(320), float64], Tensor[(11, 15, 10), float32], Tensor[(11, 15, 10), int32]) */
}

def @func_5403() -> (Tensor[(1540), int16], Tensor[(11, 15, 10), int32]) {
  @func_5401() /* ty=(Tensor[(1540), int16], Tensor[(11, 15, 10), int32]) */
}

def @func_2011(%var_2007: Tensor[(3, 14, 3), uint8], %var_2008: Tensor[(3, 14, 3), uint8], %var_2009: float32, %var_2010: Tensor[(189), float32]) -> (Tensor[(3, 14, 3), uint8], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) {
  %791 = fn (%var_1977: Tensor[(3, 14, 3), uint8], %var_1978: Tensor[(3, 14, 3), uint8], %var_2003: float32, %var_2004: Tensor[(189), float32]) -> (Tensor[(3, 14, 3), uint8], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) {
    %781 = cast(%var_1978, dtype="uint8") /* ty=Tensor[(3, 14, 3), uint8] */;
    %782 = shape_of(%var_1977, dtype="int32") /* ty=Tensor[(3), int32] */;
    %783 = cast(%var_1977, dtype="uint8") /* ty=Tensor[(3, 14, 3), uint8] */;
    %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %785 = cast(%var_2003, dtype="float32") /* ty=float32 */;
    %786 = cast(%var_2004, dtype="float32") /* ty=Tensor[(189), float32] */;
    %787 = reshape(%785, newshape=[]) /* ty=float32 */;
    %788 = reshape(%786, newshape=[3, 9, 7]) /* ty=Tensor[(3, 9, 7), float32] */;
    %789 = multiply(%783, %784) /* ty=Tensor[(3, 14, 3), uint8] */;
    %790 = @func_163(%787, %788) /* ty=Tensor[(3, 9, 7), float64] */;
    (%789, %790, %var_2003, %var_2004)
  };
  %791(%var_2007, %var_2008, %var_2009, %var_2010) /* ty=(Tensor[(3, 14, 3), uint8], Tensor[(3, 9, 7), float64], float32, Tensor[(189), float32]) */
}

def @func_4774(%var_4764: Tensor[(15, 11, 12), float32]) -> Tensor[(15, 11, 12), float32] {
  %792 = cast(%var_4764, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  exp(%792) /* ty=Tensor[(15, 11, 12), float32] */
}

def @func_6903(%var_6901: Tensor[(65), float32]) -> (Tensor[(2, 13, 10), uint8], Tensor[(176), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32]) {
  @func_6900(%var_6901) /* ty=(Tensor[(2, 13, 10), uint8], Tensor[(176), bool], Tensor[(1540), int16], Tensor[(11, 15, 10), float64], Tensor[(5, 13), float32], Tensor[(65), float32]) */
}

def @func_167(%var_165: float32, %var_166: Tensor[(3, 9, 7), float32]) -> Tensor[(3, 9, 7), float64] {
  @func_163(%var_165, %var_166) /* ty=Tensor[(3, 9, 7), float64] */
}

def @func_6111() -> Tensor[(11, 15, 10), int32] {
  %793 = @func_5518() /* ty=(Tensor[(11, 15, 10), float64], Tensor[(11, 15, 10), int32]) */;
  %793.1
}

def @func_4020() -> (Tensor[(11, 15, 10), float32],) {
  %794 = @func_2652() /* ty=Tensor[(11, 15, 10), float32] */;
  (%794,)
}

def @func_5921(%var_5920: Tensor[(3, 2, 2), int64]) -> (Tensor[(3, 2, 2), int64],) {
  %800 = fn (%var_5914: Tensor[(3, 2, 2), int64]) -> (Tensor[(3, 2, 2), int64],) {
    %795 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 2, 2), int64] */, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
    %796 = shape_of(%var_5914, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%var_5914, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %799 = bitwise_or(%797, %798) /* ty=Tensor[(3, 2, 2), int64] */;
    (%799,)
  };
  %800(%var_5920) /* ty=(Tensor[(3, 2, 2), int64],) */
}

def @func_4569(%var_4564: Tensor[(224), bool]) -> (Tensor[(11, 15, 10), float64], Tensor[(224), bool], Tensor[(224), bool]) {
  %801 = @func_3254() /* ty=Tensor[(11, 15, 10), float64] */;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(11, 15, 10), float64] */;
  %803 = cast(%var_4564, dtype="bool") /* ty=Tensor[(224), bool] */;
  %804 = reshape(%802, newshape=[11, 15, 10]) /* ty=Tensor[(11, 15, 10), float64] */;
  %805 = reshape(%803, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %806 = @func_4535(%804, %805) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(8, 4, 7), bool], Tensor[(224), bool], Tensor[(2, 13, 10), uint8], Tensor[(1, 28), float64]) */;
  %807 = %806.2;
  (%801, %807, %var_4564)
}

def @func_5063() -> (Tensor[(11, 15, 10), float64],) {
  %810 = fn () -> (Tensor[(11, 15, 10), float64],) {
    %808 = @func_4334() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %809 = %808.0;
    (%809,)
  };
  %810() /* ty=(Tensor[(11, 15, 10), float64],) */
}

def @func_6242() -> (Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) {
  %815 = fn () -> (Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) {
    %811 = @func_5602() /* ty=(Tensor[(1540), int16],) */;
    %812 = @func_3088() /* ty=(Tensor[(11, 15, 10), float64],) */;
    %813 = %811.0;
    %814 = %812.0;
    (%813, %814)
  };
  %815() /* ty=(Tensor[(1540), int16], Tensor[(11, 15, 10), float64]) */
}

def @func_1192(%var_1188: Tensor[(13, 14, 10), float64], %var_1189: Tensor[(13, 14, 10), float64], %var_1190: Tensor[(13, 14, 10), float64], %var_1191: bool) -> (Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float32], Tensor[(2, 11, 16), int64], Tensor[(176), int64], bool) {
  %848 = fn (%var_1124: Tensor[(13, 14, 10), float64], %var_1131: Tensor[(13, 14, 10), float64], %var_1148: Tensor[(13, 14, 10), float64], %var_1185: bool) -> (Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float32], Tensor[(2, 11, 16), int64], Tensor[(176), int64], bool) {
    %816 = cast(%var_1124, dtype="float64") /* ty=Tensor[(13, 14, 10), float64] */;
    %817 = erf(%816) /* ty=Tensor[(13, 14, 10), float64] */;
    %818 = cast(%var_1131, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(%817, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %822 = power(%820, %821) /* ty=Tensor[(13, 14, 10), float32] */;
    %823 = cast(%var_1148, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
    %824 = shape_of(%var_1131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %825 = cast(%var_1131, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %827 = greater_equal(%825, %826) /* ty=Tensor[(13, 14, 10), bool] */;
    %828 = cast(%827, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %829 = acosh(%828) /* ty=Tensor[(13, 14, 10), float32] */;
    %830 = cast(%829, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %831 = shape_of(%822, dtype="int32") /* ty=Tensor[(3), int32] */;
    %832 = cast(%822, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %834 = add(%832, %833) /* ty=Tensor[(13, 14, 10), float32] */;
    %835 = cast(%822, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
    %837 = cast(%834, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %839 = cast(%829, dtype="float32") /* ty=Tensor[(13, 14, 10), float32] */;
    %840 = cast(meta[relay.Constant][46] /* ty=Tensor[(176), int64] */, dtype="int64") /* ty=Tensor[(176), int64] */;
    %841 = cast(%var_1185, dtype="bool") /* ty=bool */;
    %842 = reshape(%840, newshape=[1, 11, 16]) /* ty=Tensor[(1, 11, 16), int64] */;
    %843 = reshape(%841, newshape=[]) /* ty=bool */;
    %844 = @func_761(%842, %843) /* ty=(Tensor[(2, 11, 16), int64], Tensor[(16, 1, 13), bool], bool) */;
    %845 = multiply(%837, %838) /* ty=Tensor[(13, 14, 10), float32] */;
    %846 = acos(%839) /* ty=Tensor[(13, 14, 10), float32] */;
    %847 = %844.0;
    (%845, %846, %847, meta[relay.Constant][46] /* ty=Tensor[(176), int64] */, %var_1185)
  };
  %848(%var_1188, %var_1189, %var_1190, %var_1191) /* ty=(Tensor[(13, 14, 10), float32], Tensor[(13, 14, 10), float32], Tensor[(2, 11, 16), int64], Tensor[(176), int64], bool) */
}

def @func_2978(%var_2976: Tensor[(1540), int16]) -> (Tensor[(11, 15, 10), float32], Tensor[(14, 10, 11), bool], Tensor[(1540), int16]) {
  @func_2975(%var_2976) /* ty=(Tensor[(11, 15, 10), float32], Tensor[(14, 10, 11), bool], Tensor[(1540), int16]) */
}

def @func_1937(%var_1935: Tensor[(1, 2, 11), float64], %var_1936: Tensor[(1820), float64]) -> (Tensor[(?, 2, 11), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float64], bool, Tensor[(5, 13), float32], Tensor[(65), float32]) {
  @func_1933(%var_1935, %var_1936) /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 14, 10), float32], Tensor[(1820), float64], bool, Tensor[(5, 13), float32], Tensor[(65), float32]) */
}

def @func_6447() -> (Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1, 65), float32]) {
  %855 = fn () -> (Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1, 65), float32]) {
    %849 = @func_5278() /* ty=(Tensor[(2, 13, 10), uint8],) */;
    %850 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 65), float32] */, dtype="float32") /* ty=Tensor[(1, 65), float32] */;
    %851 = reshape(%850, newshape=[65]) /* ty=Tensor[(65), float32] */;
    %852 = @func_2722(%851) /* ty=(Tensor[(5, 13), float32], Tensor[(65), float32], Tensor[(11, 15, 10), bool], Tensor[(11, 15, 10), float64], Tensor[(13, 13, 5), float64], Tensor[(845), float64]) */;
    %853 = %849.0;
    %854 = %852.3;
    (%853, %854, meta[relay.Constant][47] /* ty=Tensor[(1, 65), float32] */)
  };
  %855() /* ty=(Tensor[(2, 13, 10), uint8], Tensor[(11, 15, 10), float64], Tensor[(1, 65), float32]) */
}

def @func_6846(%var_6810: Tensor[(12, 16, 1), float32], %var_6830: Tensor[(12, 16, 8), float32]) -> (Tensor[(1540), int16], Tensor[(28), float64], Tensor[(28), float64], Tensor[(12, 16, 8), float32], Tensor[(12, 16, 1), float64]) {
  %856 = cast(meta[relay.Constant][48] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %857 = reshape(%856, newshape=[28]) /* ty=Tensor[(28), float64] */;
  %858 = @func_4268(%857) /* ty=(Tensor[(4, 7), float64], Tensor[(28), float64], Tensor[(11, 15, 10), float32]) */;
  %859 = cast(%var_6810, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  %860 = cast(%var_6830, dtype="float32") /* ty=Tensor[(12, 16, 8), float32] */;
  %861 = cast(%var_6810, dtype="float32") /* ty=Tensor[(12, 16, 1), float32] */;
  %862 = atan(%861) /* ty=Tensor[(12, 16, 1), float32] */;
  %863 = cast(%862, dtype="float64") /* ty=Tensor[(12, 16, 1), float64] */;
  %864 = @func_4793() /* ty=Tensor[(1540), int16] */;
  %865 = %858.1;
  %866 = floor_mod(%859, %860) /* ty=Tensor[(12, 16, 8), float32] */;
  %867 = exp(%863) /* ty=Tensor[(12, 16, 1), float64] */;
  (%864, %865, meta[relay.Constant][48] /* ty=Tensor[(28), float64] */, %866, %867)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen21/build/output.py", line 2400, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:44:34] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

