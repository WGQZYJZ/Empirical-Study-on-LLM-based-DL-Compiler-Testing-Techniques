==========mod==========
#[version = "0.0.5"]
def @func_7467() -> (Tensor[(6, 7, 4), float64],) {
  %0 = @func_4679() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(12, 2, 15), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */;
  %1 = %0.0;
  (%1,)
}

def @func_2843() -> (Tensor[(845), float64],) {
  %2 = @func_1718() /* ty=(Tensor[(936), float32], Tensor[(845), float64]) */;
  %3 = %2.1;
  (%3,)
}

def @func_666() -> Tensor[(6, 7, 4), float64] {
  @func_621() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_4174(%var_4164: Tensor[(6, 12, 13), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), bool]) {
  %4 = @func_3799() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) */;
  %5 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
  %6 = cast(%var_4164, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = %4.1;
  %11 = @func_2690() /* ty=Tensor[(6, 7, 4), float64] */;
  %12 = not_equal(%8, %9) /* ty=Tensor[(6, 12, 13), bool] */;
  (%10, %11, %12)
}

def @func_2071(%var_2062: Tensor[(14, 2, 14), float64], %var_2063: Tensor[(14, 2, 14), float64], %var_2069: Tensor[(845), float64]) -> (Tensor[(14, 2, 14), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
  %13 = cast(%var_2063, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
  %14 = shape_of(%var_2062, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%var_2062, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %17 = cast(%var_2069, dtype="float64") /* ty=Tensor[(845), float64] */;
  %18 = reshape(%17, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %19 = @func_732(%18) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %20 = floor_divide(%15, %16) /* ty=Tensor[(14, 2, 14), float64] */;
  %21 = %19.1;
  (%20, %21, %var_2069)
}

def @func_6989() -> (Tensor[(6, 7, 4), int8], Tensor[(6, 12, 13), bool]) {
  %22 = @func_2953() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %23 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %25 = log2(%24) /* ty=Tensor[(6, 12, 13), float32] */;
  %26 = cast(%25, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
  %27 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%23, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %30 = right_shift(%28, %29) /* ty=Tensor[(6, 12, 13), int64] */;
  %31 = cast(%25, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = %22.0;
  %36 = greater_equal(%33, %34) /* ty=Tensor[(6, 12, 13), bool] */;
  (%35, %36)
}

def @func_3384() -> Tensor[(845), float32] {
  %37 = @func_1458() /* ty=Tensor[(845), bool] */;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(845), float32] */;
  sqrt(%38) /* ty=Tensor[(845), float32] */
}

def @func_1572() -> Tensor[(6, 12, 13), float64] {
  %39 = @func_1197() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %39.1
}

def @func_3213(%var_3133: Tensor[(1, 7, 16), float32]) -> (Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) {
  %40 = cast(%var_3133, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
  %41 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 16), float32] */;
  %42 = mod(%40, %41) /* ty=Tensor[(2, 7, 16), float32] */;
  %43 = cast(%var_3133, dtype="uint16") /* ty=Tensor[(1, 7, 16), uint16] */;
  %44 = cast(%42, dtype="uint16") /* ty=Tensor[(2, 7, 16), uint16] */;
  %45 = @func_3007() /* ty=(Tensor[(845), float64],) */;
  %46 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 7, 16), float32] */, dtype="float64") /* ty=Tensor[(2, 7, 16), float64] */;
  %47 = add(%43, %44) /* ty=Tensor[(2, 7, 16), uint16] */;
  %48 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %49 = %45.0;
  %50 = atan(%46) /* ty=Tensor[(2, 7, 16), float64] */;
  (%47, %48, %49, %50)
}

def @func_7463() -> Tensor[(845), float64] {
  @func_1021() /* ty=Tensor[(845), float64] */
}

def @func_7233() -> (Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64]) {
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(192), float64] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %53 = reshape(%51, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %54 = reshape(%52, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %55 = @func_2590(%53, %54) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
  %56 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %57 = %55.0;
  (%56, %57, meta[relay.Constant][1] /* ty=Tensor[(192), float64] */)
}

def @func_6313() -> (Tensor[(845), float64], Tensor[(6, 12, 13), float32], Tensor[(845), float32], Tensor[(845), float64]) {
  %58 = @func_5677() /* ty=(Tensor[(6, 12, 13), float32],) */;
  %59 = @func_2258() /* ty=(Tensor[(845), float64],) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(845), float32] */;
  %62 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
  %63 = @func_4193() /* ty=Tensor[(845), float64] */;
  %64 = %58.0;
  %65 = atan(%61) /* ty=Tensor[(845), float32] */;
  %66 = %62.0;
  (%63, %64, %65, %66)
}

def @func_5447() -> (Tensor[(6, 7, 4), float64],) {
  %67 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %68 = %67.0;
  (%68,)
}

def @func_7577(%var_7574: Tensor[(16, 14, 2), float32]) -> (Tensor[(16, 14, 2), float32],) {
  %69 = cast(%var_7574, dtype="float32") /* ty=Tensor[(16, 14, 2), float32] */;
  %70 = sinh(%69) /* ty=Tensor[(16, 14, 2), float32] */;
  (%70,)
}

def @func_7519() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %71 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %72 = @func_2843() /* ty=(Tensor[(845), float64],) */;
  %73 = %71.0;
  %74 = %72.0;
  (%73, %74)
}

def @func_5782() -> (Tensor[(6, 7, 4), float64],) {
  %75 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  (%75,)
}

def @func_3453() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
  %76 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
  %77 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
  (%76, %77)
}

def @func_7423(%var_7404: Tensor[(845), float64]) -> (Tensor[(845), float64], Tensor[(845), float64]) {
  %78 = @func_6142() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(196, 2), float64]) */;
  %79 = @func_4193() /* ty=Tensor[(845), float64] */;
  %80 = cast(%var_7404, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(1), int32] */;
  %82 = cast(%79, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %84 = add(%82, %83) /* ty=Tensor[(845), uint32] */;
  %85 = cast(%79, dtype="float64") /* ty=Tensor[(845), float64] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(1), int32] */;
  %87 = cast(%84, dtype="float64") /* ty=Tensor[(845), float64] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?), float64] */;
  %89 = %78.0;
  %90 = floor_mod(%87, %88) /* ty=Tensor[(845), float64] */;
  (%89, %90)
}

def @func_2335(%var_2305: Tensor[(6, 7, 4), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(3, 4, 8), float32]) {
  %91 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %92 = cast(%var_2305, dtype="float64") /* ty=Tensor[(6, 7, 4), float64] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="float64") /* ty=Tensor[(6, 7, 4), float64] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %96 = cast(meta[relay.Constant][2] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %97 = reshape(%96, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int16] */;
  %98 = @func_1796(%97) /* ty=(Tensor[(9, 16, 7), int16],) */;
  %99 = @func_2273() /* ty=Tensor[(3, 4, 8), float32] */;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %101 = cos(%100) /* ty=Tensor[(3, 4, 8), float32] */;
  %102 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %106 = floor_mod(%94, %95) /* ty=Tensor[(6, 7, 4), float64] */;
  %107 = %98.0;
  %108 = divide(%104, %105) /* ty=Tensor[(3, 4, 8), float32] */;
  (%106, %107, meta[relay.Constant][2] /* ty=Tensor[(1008), int16] */, %108)
}

def @func_2435(%var_2416: Tensor[(32, 24), float64], %var_2419: Tensor[(32, 24), float64]) -> (Tensor[(3, 4, 8), float32], Tensor[(6, 7, 4), int8], Tensor[(845), float64], Tensor[(32, 24), bool]) {
  %109 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %110 = cast(%var_2416, dtype="float64") /* ty=Tensor[(32, 24), float64] */;
  %111 = reshape(%110, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), float64] */;
  %112 = @func_2177(%111) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8]) */;
  %113 = cast(%var_2419, dtype="bool") /* ty=Tensor[(32, 24), bool] */;
  %114 = shape_of(%var_2416, dtype="int32") /* ty=Tensor[(2), int32] */;
  %115 = cast(%var_2416, dtype="bool") /* ty=Tensor[(32, 24), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %117 = @func_2273() /* ty=Tensor[(3, 4, 8), float32] */;
  %118 = %109.4;
  %119 = %112.3;
  %120 = logical_or(%115, %116) /* ty=Tensor[(32, 24), bool] */;
  (%117, %118, %119, %120)
}

def @func_5630() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64]) {
  %121 = @func_4318() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %122 = @func_2258() /* ty=(Tensor[(845), float64],) */;
  %123 = @func_2953() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %124 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %125 = %121.0;
  %126 = %122.0;
  %127 = %123.0;
  %128 = %124.0;
  (%125, %126, %127, %128)
}

def @func_621() -> Tensor[(6, 7, 4), float64] {
  %129 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 4), float64] */;
  asinh(%129) /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_4603(%var_4590: Tensor[(1800), uint8]) -> (Tensor[(6, 7, 4), float64], Tensor[(1800), uint8], Tensor[(1800), uint8]) {
  %130 = cast(%var_4590, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %131 = reshape(%130, newshape=[1800]) /* ty=Tensor[(1800), uint8] */;
  %132 = @func_4360(%131) /* ty=(Tensor[(1800), uint8], Tensor[(6, 12, 13), float32]) */;
  %133 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %134 = %132.0;
  (%133, %134, %var_4590)
}

def @func_6734() -> Tensor[(6, 7, 4), float64] {
  %135 = @func_5447() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %135.0
}

def @func_3950() -> (Tensor[(845), bool], Tensor[(6, 12, 13), float64]) {
  %136 = @func_3103() /* ty=(Tensor[(845), float32], Tensor[(845), bool]) */;
  %137 = @func_3824() /* ty=(Tensor[(6, 12, 13), float64],) */;
  %138 = %136.1;
  %139 = %137.0;
  (%138, %139)
}

def @func_1197() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
  %140 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %141 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %142 = %140.0;
  %143 = %141.0;
  (%142, %143)
}

def @func_566(%var_497: Tensor[(13, 13, 5), float64]) -> (Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) {
  %144 = cast(%var_497, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %145 = acosh(%144) /* ty=Tensor[(13, 13, 5), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %147 = cast(%var_497, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %148 = cast(meta[relay.Constant][5] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %149 = reshape(%148, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
  %150 = atan(%146) /* ty=Tensor[(13, 13, 5), float32] */;
  %151 = sigmoid(%147) /* ty=Tensor[(13, 13, 5), float32] */;
  %152 = @func_99(%149) /* ty=Tensor[(6, 12, 13), float64] */;
  (%150, %151, %152, meta[relay.Constant][5] /* ty=Tensor[(936), float32] */)
}

def @func_7352(%var_7333: Tensor[(1, 11, 13), bool], %var_7334: Tensor[(13, 11, 13), bool]) -> Tensor[(13, 11, 13), bool] {
  %153 = cast(%var_7333, dtype="bool") /* ty=Tensor[(1, 11, 13), bool] */;
  %154 = cast(%var_7334, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
  logical_or(%153, %154) /* ty=Tensor[(13, 11, 13), bool] */
}

def @func_2953() -> (Tensor[(6, 7, 4), int8],) {
  %155 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %156 = %155.4;
  (%156,)
}

def @func_5744() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(28, 4), float32]) {
  %157 = @func_3896() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64]) */;
  %158 = @func_1281() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
  %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(28, 4), float32] */, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %160 = reshape(%159, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
  %161 = @func_3213(%160) /* ty=(Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) */;
  %162 = %157.1;
  %163 = %158.1;
  %164 = %161.2;
  (%162, %163, %164, meta[relay.Constant][6] /* ty=Tensor[(28, 4), float32] */)
}

def @func_3843(%var_3827: Tensor[(11, 14, 12), float64]) -> (Tensor[(11, 14, 12), float64],) {
  %165 = cast(%var_3827, dtype="float64") /* ty=Tensor[(11, 14, 12), float64] */;
  %166 = acos(%165) /* ty=Tensor[(11, 14, 12), float64] */;
  (%166,)
}

def @func_3309() -> (Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) {
  %167 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %168 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 28), float32] */, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %169 = reshape(%168, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
  %170 = @func_3213(%169) /* ty=(Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) */;
  %171 = %167.0;
  %172 = %170.3;
  (%171, %172, meta[relay.Constant][7] /* ty=Tensor[(4, 28), float32] */)
}

def @func_6092() -> (Tensor[(845), float32], Tensor[(845), bool], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) {
  %173 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %174 = @func_3752() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) */;
  %175 = @func_3384() /* ty=Tensor[(845), float32] */;
  %176 = @func_4464() /* ty=Tensor[(845), bool] */;
  %177 = %173.0;
  %178 = %174.0;
  %179 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  (%175, %176, %177, %178, %179)
}

def @func_2245() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) {
  %180 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %181 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %182 = %180.0;
  %183 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
  %184 = %181.2;
  (%182, %183, %184)
}

def @func_7156() -> Tensor[(936), float32] {
  %185 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %185.1
}

def @func_2651(%var_2626: Tensor[(11, 3, 6), float64]) -> (Tensor[(11, 3, 6), float64], Tensor[(6, 7, 4), float64]) {
  %186 = cast(%var_2626, dtype="float64") /* ty=Tensor[(11, 3, 6), float64] */;
  %187 = exp(%186) /* ty=Tensor[(11, 3, 6), float64] */;
  %188 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  (%187, %188)
}

def @func_4437(%var_4371: Tensor[(13, 11, 15), float32]) -> (Tensor[(845), float64], Tensor[(13, 11, 15), bool], Tensor[(13, 11, 15), float64]) {
  %189 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %190 = cast(%var_4371, dtype="float32") /* ty=Tensor[(13, 11, 15), float32] */;
  %191 = sigmoid(%190) /* ty=Tensor[(13, 11, 15), float32] */;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
  %193 = asinh(%192) /* ty=Tensor[(13, 11, 15), float64] */;
  %194 = cast(%191, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %198 = mod(%196, %197) /* ty=Tensor[(13, 11, 15), float64] */;
  %199 = cast(%191, dtype="bool") /* ty=Tensor[(13, 11, 15), bool] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="bool") /* ty=Tensor[(13, 11, 15), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = cast(%191, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
  %204 = %189.0;
  %205 = not_equal(%201, %202) /* ty=Tensor[(13, 11, 15), bool] */;
  %206 = asin(%203) /* ty=Tensor[(13, 11, 15), float64] */;
  (%204, %205, %206)
}

def @func_7307() -> (Tensor[(845), float64], Tensor[(845), float64]) {
  %207 = @func_6704() /* ty=(Tensor[(845), float64],) */;
  %208 = @func_7145() /* ty=(Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(845), float64]) */;
  %209 = %208.1;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(845), float64] */;
  %211 = log10(%210) /* ty=Tensor[(845), float64] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(845), float64] */;
  %213 = %207.0;
  %214 = tan(%212) /* ty=Tensor[(845), float64] */;
  (%213, %214)
}

def @func_5202() -> (Tensor[(845), float64],) {
  %215 = @func_3896() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64]) */;
  %216 = %215.0;
  (%216,)
}

def @func_7394() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
  %217 = @func_3824() /* ty=(Tensor[(6, 12, 13), float64],) */;
  %218 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %219 = %217.0;
  (%218, %219)
}

def @func_2818(%var_2702: Tensor[(15, 8, 15), uint8], %var_2703: Tensor[(15, 8, 15), uint8], %var_2723: Tensor[(15, 8, 15), uint8]) -> (Tensor[(845), bool], Tensor[(6, 7, 4), float64], Tensor[(936), float32], Tensor[(15, 8, 15), float32], Tensor[(15, 8, 15), float64], Tensor[(845), float64], Tensor[(6, 12, 13), float64]) {
  %220 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(845), float64] */;
  %223 = reshape(%222, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %224 = @func_566(%223) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
  %225 = cast(%var_2723, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %226 = shape_of(%var_2702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_2702, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %229 = mod(%227, %228) /* ty=Tensor[(15, 8, 15), float32] */;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(15, 8, 15), float64] */;
  %231 = sin(%230) /* ty=Tensor[(15, 8, 15), float64] */;
  %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 8, 15), uint8] */, dtype="int16") /* ty=Tensor[(15, 8, 15), int16] */;
  %233 = shape_of(%var_2703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_2703, dtype="int16") /* ty=Tensor[(15, 8, 15), int16] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %236 = bitwise_and(%234, %235) /* ty=Tensor[(15, 8, 15), int16] */;
  %237 = cast(%236, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %238 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%231, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = greater_equal(%239, %240) /* ty=Tensor[(15, 8, 15), bool] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %243 = cast(%var_2703, dtype="uint8") /* ty=Tensor[(15, 8, 15), uint8] */;
  %244 = shape_of(%var_2702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%var_2702, dtype="uint8") /* ty=Tensor[(15, 8, 15), uint8] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %247 = logical_xor(%245, %246) /* ty=Tensor[(15, 8, 15), uint8] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %249 = cos(%248) /* ty=Tensor[(15, 8, 15), float32] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(15, 8, 15), float64] */;
  %251 = @func_1718() /* ty=(Tensor[(936), float32], Tensor[(845), float64]) */;
  %252 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
  %253 = %224.3;
  %254 = log2(%242) /* ty=Tensor[(15, 8, 15), float32] */;
  %255 = tan(%250) /* ty=Tensor[(15, 8, 15), float64] */;
  %256 = %251.1;
  %257 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
  (%221, %252, %253, %254, %255, %256, %257)
}

def @func_6704() -> (Tensor[(845), float64],) {
  %258 = @func_3007() /* ty=(Tensor[(845), float64],) */;
  %259 = %258.0;
  (%259,)
}

def @func_943() -> (Tensor[(6, 7, 4), int8],) {
  %260 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %261 = %260.1;
  (%261,)
}

def @func_4230() -> Tensor[(6, 7, 4), float64] {
  @func_2690() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_5677() -> (Tensor[(6, 12, 13), float32],) {
  %262 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %264 = atanh(%263) /* ty=Tensor[(6, 12, 13), float32] */;
  (%264,)
}

def @func_4318() -> (Tensor[(6, 7, 4), float64],) {
  %265 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  (%265,)
}

def @func_2258() -> (Tensor[(845), float64],) {
  %266 = @func_1021() /* ty=Tensor[(845), float64] */;
  (%266,)
}

def @func_3896() -> (Tensor[(845), float64], Tensor[(6, 7, 4), float64]) {
  %267 = @func_1021() /* ty=Tensor[(845), float64] */;
  %268 = @func_2502() /* ty=Tensor[(6, 7, 4), float64] */;
  (%267, %268)
}

def @func_4798() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) {
  %269 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %270 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %271 = %269.0;
  (%270, %271)
}

def @func_3637(%var_3623: Tensor[(845), float64]) -> (Tensor[(845), float64],) {
  %272 = @func_1021() /* ty=Tensor[(845), float64] */;
  %273 = cast(%var_3623, dtype="float64") /* ty=Tensor[(845), float64] */;
  %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(1), int32] */;
  %275 = cast(%272, dtype="float64") /* ty=Tensor[(845), float64] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?), float64] */;
  %277 = divide(%275, %276) /* ty=Tensor[(845), float64] */;
  (%277,)
}

def @func_1458() -> Tensor[(845), bool] {
  %278 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %278.2
}

def @func_3478() -> (Tensor[(10, 15, 5), float32], Tensor[(10, 15, 5), float64]) {
  %279 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 5), float32] */;
  %280 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 15, 5), float32] */, dtype="float64") /* ty=Tensor[(10, 15, 5), float64] */;
  %281 = cos(%279) /* ty=Tensor[(10, 15, 5), float32] */;
  %282 = log2(%280) /* ty=Tensor[(10, 15, 5), float64] */;
  (%281, %282)
}

def @func_6492() -> Tensor[(845), float64] {
  %283 = @func_2258() /* ty=(Tensor[(845), float64],) */;
  %283.0
}

def @func_1718() -> (Tensor[(936), float32], Tensor[(845), float64]) {
  %284 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %285 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %286 = %284.1;
  %287 = %285.0;
  (%286, %287)
}

def @func_6142() -> (Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(196, 2), float64]) {
  %288 = @func_4893() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) */;
  %289 = @func_4318() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %290 = @func_5782() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %291 = cast(meta[relay.Constant][10] /* ty=Tensor[(196, 2), float64] */, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %292 = cast(meta[relay.Constant][10] /* ty=Tensor[(196, 2), float64] */, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
  %293 = %288.0;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(845), float64] */;
  %295 = reshape(%291, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float64] */;
  %296 = reshape(%292, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float64] */;
  %297 = reshape(%294, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %298 = @func_2071(%295, %296, %297) /* ty=(Tensor[(14, 2, 14), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %299 = %289.0;
  %300 = %290.0;
  %301 = %298.1;
  (%293, %299, %300, %301, meta[relay.Constant][10] /* ty=Tensor[(196, 2), float64] */)
}

def @func_1641(%var_1603: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) {
  %302 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %303 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %304 = %303.2;
  %305 = cast(%var_1603, dtype="bool") /* ty=Tensor[(845), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(1), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(845), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?), bool] */;
  %309 = greater(%307, %308) /* ty=Tensor[(845), bool] */;
  %310 = cast(%309, dtype="float64") /* ty=Tensor[(845), float64] */;
  %311 = sin(%310) /* ty=Tensor[(845), float64] */;
  %312 = cast(%var_1603, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(1), int32] */;
  %314 = cast(%311, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %316 = %302.0;
  %317 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
  %318 = bitwise_and(%314, %315) /* ty=Tensor[(845), uint32] */;
  (%316, %317, %318)
}

def @func_6563() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %319 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %320 = @func_4193() /* ty=Tensor[(845), float64] */;
  (%319, %320)
}

def @func_3007() -> (Tensor[(845), float64],) {
  %321 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %322 = %321.0;
  (%322,)
}

def @func_4300() -> (Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) {
  %323 = @func_3978() /* ty=(Tensor[(2, 7, 16), float64],) */;
  %324 = %323.0;
  %325 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 7, 16), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
  %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%324, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %329 = @func_2502() /* ty=Tensor[(6, 7, 4), float64] */;
  %330 = logical_or(%327, %328) /* ty=Tensor[(2, 7, 16), bool] */;
  (%329, %330)
}

def @func_6242() -> Tensor[(6, 12, 13), float64] {
  @func_1572() /* ty=Tensor[(6, 12, 13), float64] */
}

def @func_5033(%var_5008: Tensor[(48, 4), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(48, 4), float64], Tensor[(6, 7, 4), float32], Tensor[(6, 12, 13), float64], Tensor[(880), int64]) {
  %331 = cast(%var_5008, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %332 = cast(%var_5008, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %333 = reshape(%331, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %334 = reshape(%332, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %335 = @func_2590(%333, %334) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
  %336 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(6, 7, 4), float32] */;
  %338 = cast(meta[relay.Constant][12] /* ty=Tensor[(880), int64] */, dtype="int64") /* ty=Tensor[(880), int64] */;
  %339 = reshape(%338, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
  %340 = @func_4062(%339) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) */;
  %341 = @func_2502() /* ty=Tensor[(6, 7, 4), float64] */;
  %342 = %335.1;
  %343 = asin(%337) /* ty=Tensor[(6, 7, 4), float32] */;
  %344 = %340.1;
  (%341, %342, %var_5008, %343, %344, meta[relay.Constant][12] /* ty=Tensor[(880), int64] */)
}

def @func_1504() -> (Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) {
  %345 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %346 = cast(meta[relay.Constant][13] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %347 = reshape(%346, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %348 = @func_732(%347) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %349 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %350 = %345.0;
  %351 = %348.1;
  %352 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
  %353 = %349.0;
  (%350, %351, meta[relay.Constant][13] /* ty=Tensor[(845), float64] */, %352, %353)
}

def @func_1847() -> Tensor[(6, 7, 4), float64] {
  @func_666() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_2590(%var_2544: Tensor[(2, 6, 16), float64], %var_2567: Tensor[(2, 6, 16), float32]) -> (Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) {
  %354 = cast(%var_2544, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %355 = cast(%var_2544, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %356 = tan(%355) /* ty=Tensor[(2, 6, 16), float64] */;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %358 = asinh(%357) /* ty=Tensor[(2, 6, 16), float32] */;
  %359 = cast(%var_2567, dtype="int16") /* ty=Tensor[(2, 6, 16), int16] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="int16") /* ty=Tensor[(2, 6, 16), int16] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %363 = log(%354) /* ty=Tensor[(2, 6, 16), float32] */;
  %364 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
  %365 = bitwise_or(%361, %362) /* ty=Tensor[(2, 6, 16), int16] */;
  (%363, %364, %365)
}

def @func_6624() -> (Tensor[(6, 7, 4), float64],) {
  %366 = @func_4724() /* ty=(Tensor[(4, 28), float32], Tensor[(6, 7, 4), float64]) */;
  %367 = %366.1;
  (%367,)
}

def @func_2522() -> Tensor[(6, 12, 13), float64] {
  %368 = @func_1197() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %368.1
}

def @func_6667() -> (Tensor[(6, 12, 13), float64],) {
  %369 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %370 = %369.1;
  (%370,)
}

def @func_6935() -> (Tensor[(845), uint32],) {
  %371 = @func_3752() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) */;
  %372 = %371.2;
  (%372,)
}

def @func_3103() -> (Tensor[(845), float32], Tensor[(845), bool]) {
  %373 = @func_2843() /* ty=(Tensor[(845), float64],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(845), float32] */;
  %376 = exp(%375) /* ty=Tensor[(845), float32] */;
  %377 = @func_1458() /* ty=Tensor[(845), bool] */;
  (%376, %377)
}

def @func_1066() -> (Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) {
  %378 = cast(meta[relay.Constant][14] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %379 = reshape(%378, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
  %380 = @func_1021() /* ty=Tensor[(845), float64] */;
  %381 = cast(meta[relay.Constant][15] /* ty=Tensor[(845), float64] */, dtype="bool") /* ty=Tensor[(845), bool] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(1), int32] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(845), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?), bool] */;
  %385 = @func_99(%379) /* ty=Tensor[(6, 12, 13), float64] */;
  %386 = logical_and(%383, %384) /* ty=Tensor[(845), bool] */;
  (%385, meta[relay.Constant][14] /* ty=Tensor[(936), float32] */, %386)
}

def @func_5872(%var_5862: Tensor[(8, 3, 5), float64]) -> (Tensor[(8, 3, 5), float64], Tensor[(845, 1), float64]) {
  %387 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
  %388 = shape_of(%var_5862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_5862, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %391 = @func_3752() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) */;
  %392 = multiply(%389, %390) /* ty=Tensor[(8, 3, 5), float64] */;
  %393 = %391.3;
  (%392, %393)
}

def @func_1441(%var_1408: Tensor[(13, 65), float64]) -> (Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) {
  %394 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %395 = %394.0;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %397 = reshape(%396, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
  %398 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
  %399 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(6, 7, 4), float32] */;
  %402 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%398, dtype="float32") /* ty=Tensor[(6, 7, 4), float32] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %405 = cast(%var_1408, dtype="float64") /* ty=Tensor[(13, 65), float64] */;
  %406 = reshape(%405, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %407 = @func_732(%406) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %408 = %407.1;
  %409 = cast(%var_1408, dtype="uint16") /* ty=Tensor[(13, 65), uint16] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %413 = logical_xor(%411, %412) /* ty=Tensor[(13, 13, 5), uint16] */;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %415 = reshape(%414, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %416 = @func_566(%415) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
  %417 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %418 = @func_99(%397) /* ty=Tensor[(6, 12, 13), float64] */;
  %419 = mod(%403, %404) /* ty=Tensor[(6, 7, 4), float32] */;
  %420 = %416.1;
  %421 = %417.1;
  %422 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
  (%395, %418, %419, %413, %420, %421, %422)
}

def @func_1021() -> Tensor[(845), float64] {
  %423 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %423.3
}

def @func_1336() -> Tensor[(6, 7, 4), float64] {
  %424 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %424.0
}

def @func_2273() -> Tensor[(3, 4, 8), float32] {
  %425 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  cosh(%425) /* ty=Tensor[(3, 4, 8), float32] */
}

def @func_4919() -> (Tensor[(845), float32], Tensor[(6, 12, 13), float32]) {
  %426 = @func_4893() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) */;
  %427 = %426.1;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %429 = @func_3384() /* ty=Tensor[(845), float32] */;
  %430 = cosh(%428) /* ty=Tensor[(6, 12, 13), float32] */;
  (%429, %430)
}

def @main(%var_7637: Tensor[(936), float32], %var_7664: Tensor[(192), float64]) -> (Tensor[(845), float64], Tensor[(6, 12, 13), float64], Tensor[(192), float64], Tensor[(936), bool], Tensor[(936), bool]) {
  %431 = @func_2843() /* ty=(Tensor[(845), float64],) */;
  %432 = cast(%var_7664, dtype="float64") /* ty=Tensor[(192), float64] */;
  %433 = cast(%var_7664, dtype="float64") /* ty=Tensor[(192), float64] */;
  %434 = reshape(%432, newshape=[96, 2]) /* ty=Tensor[(96, 2), float64] */;
  %435 = reshape(%433, newshape=[96, 2]) /* ty=Tensor[(96, 2), float64] */;
  %436 = @func_5181(%434, %435) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(6, 12, 13), float64], Tensor[(96, 2), uint32]) */;
  %437 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %438 = %437.1;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(936), float64] */;
  %440 = asin(%439) /* ty=Tensor[(936), float64] */;
  %441 = cast(%var_7637, dtype="float64") /* ty=Tensor[(936), float64] */;
  %442 = shape_of(%438, dtype="int32") /* ty=Tensor[(1), int32] */;
  %443 = cast(%438, dtype="float64") /* ty=Tensor[(936), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?), float64] */;
  %445 = divide(%443, %444) /* ty=Tensor[(936), float64] */;
  %446 = cast(%445, dtype="bool") /* ty=Tensor[(936), bool] */;
  %447 = shape_of(%440, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(%440, dtype="bool") /* ty=Tensor[(936), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), bool] */;
  %450 = cast(%440, dtype="float32") /* ty=Tensor[(936), float32] */;
  %451 = sin(%450) /* ty=Tensor[(936), float32] */;
  %452 = cast(%440, dtype="bool") /* ty=Tensor[(936), bool] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
  %454 = cast(%451, dtype="bool") /* ty=Tensor[(936), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), bool] */;
  %456 = %431.0;
  %457 = %436.3;
  %458 = not_equal(%448, %449) /* ty=Tensor[(936), bool] */;
  %459 = less(%454, %455) /* ty=Tensor[(936), bool] */;
  (%456, %457, %var_7664, %458, %459)
}

def @func_732(%var_712: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
  %460 = cast(%var_712, dtype="float64") /* ty=Tensor[(845), float64] */;
  %461 = reshape(%460, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %462 = @func_566(%461) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
  %463 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %464 = %462.0;
  (%463, %464, %var_712)
}

def @func_1880(%var_1869: Tensor[(845), bool]) -> (Tensor[(845), bool], Tensor[(6, 7, 4), float64]) {
  %465 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %466 = %465.2;
  %467 = cast(%var_1869, dtype="bool") /* ty=Tensor[(845), bool] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(1), int32] */;
  %469 = cast(%466, dtype="bool") /* ty=Tensor[(845), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?), bool] */;
  %471 = logical_or(%469, %470) /* ty=Tensor[(845), bool] */;
  %472 = cast(%471, dtype="float64") /* ty=Tensor[(845), float64] */;
  %473 = reshape(%472, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %474 = @func_1641(%473) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) */;
  %475 = %474.0;
  (%471, %475)
}

def @func_4724() -> (Tensor[(4, 28), float32], Tensor[(6, 7, 4), float64]) {
  %476 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
  %477 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %478 = %476.2;
  %479 = %477.0;
  (%478, %479)
}

def @func_4193() -> Tensor[(845), float64] {
  %480 = @func_2245() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */;
  %480.2
}

def @func_3978() -> (Tensor[(2, 7, 16), float64],) {
  %481 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
  %482 = %481.1;
  (%482,)
}

def @func_5832() -> (Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), int8]) {
  %483 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %484 = @func_3799() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) */;
  %485 = %483.1;
  %486 = %484.0;
  (%485, %486)
}

def @func_4062(%var_4004: Tensor[(5, 16, 11), int64]) -> (Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) {
  %487 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %488 = cast(meta[relay.Constant][18] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %489 = reshape(%488, newshape=[13, 65]) /* ty=Tensor[(13, 65), float64] */;
  %490 = @func_1441(%489) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) */;
  %491 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 16, 11), int64] */, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %492 = shape_of(%var_4004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%var_4004, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = greater(%493, %494) /* ty=Tensor[(5, 16, 11), bool] */;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(5, 16, 11), float64] */;
  %497 = cast(meta[relay.Constant][18] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %498 = reshape(%497, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %499 = @func_3637(%498) /* ty=(Tensor[(845), float64],) */;
  %500 = %487.1;
  %501 = %490.1;
  %502 = atan(%496) /* ty=Tensor[(5, 16, 11), float64] */;
  %503 = %499.0;
  (%500, %501, meta[relay.Constant][18] /* ty=Tensor[(845), float64] */, %502, %503)
}

def @func_2914() -> (Tensor[(845), bool],) {
  %504 = @func_2245() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */;
  %505 = %504.2;
  %506 = cast(meta[relay.Constant][20] /* ty=Tensor[(845), float64] */, dtype="bool") /* ty=Tensor[(845), bool] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(1), int32] */;
  %508 = cast(%505, dtype="bool") /* ty=Tensor[(845), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?), bool] */;
  %510 = greater_equal(%508, %509) /* ty=Tensor[(845), bool] */;
  (%510,)
}

def @func_676() -> (Tensor[(6, 7, 4), float64],) {
  %511 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  (%511,)
}

def @func_5181(%var_5166: Tensor[(96, 2), float64], %var_5168: Tensor[(96, 2), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(6, 12, 13), float64], Tensor[(96, 2), uint32]) {
  %512 = cast(meta[relay.Constant][21] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %513 = reshape(%512, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int16] */;
  %514 = @func_1796(%513) /* ty=(Tensor[(9, 16, 7), int16],) */;
  %515 = cast(%var_5166, dtype="float64") /* ty=Tensor[(96, 2), float64] */;
  %516 = reshape(%515, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
  %517 = @func_5033(%516) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(48, 4), float64], Tensor[(6, 7, 4), float32], Tensor[(6, 12, 13), float64], Tensor[(880), int64]) */;
  %518 = cast(%var_5168, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %519 = shape_of(%var_5166, dtype="int32") /* ty=Tensor[(2), int32] */;
  %520 = cast(%var_5166, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %522 = @func_2690() /* ty=Tensor[(6, 7, 4), float64] */;
  %523 = %514.0;
  %524 = %517.1;
  %525 = bitwise_and(%520, %521) /* ty=Tensor[(96, 2), uint32] */;
  (%522, %523, meta[relay.Constant][21] /* ty=Tensor[(1008), int16] */, %524, %525)
}

def @func_4893() -> (Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) {
  %526 = @func_1021() /* ty=Tensor[(845), float64] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(845), float32] */;
  %528 = erf(%527) /* ty=Tensor[(845), float32] */;
  %529 = cast(%526, dtype="int64") /* ty=Tensor[(845), int64] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(1), int32] */;
  %531 = cast(%528, dtype="int64") /* ty=Tensor[(845), int64] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?), int64] */;
  %533 = bitwise_xor(%531, %532) /* ty=Tensor[(845), int64] */;
  %534 = cast(%533, dtype="float64") /* ty=Tensor[(845), float64] */;
  %535 = cast(meta[relay.Constant][22] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
  %536 = reshape(%535, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float64] */;
  %537 = @func_4174(%536) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), bool]) */;
  %538 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %539 = acos(%534) /* ty=Tensor[(845), float64] */;
  %540 = %537.2;
  %541 = %538.0;
  (%539, %540, meta[relay.Constant][22] /* ty=Tensor[(936), float64] */, %541)
}

def @func_4527(%var_4482: Tensor[(845), float64]) -> (Tensor[(845), bool], Tensor[(845), float64]) {
  %542 = @func_2843() /* ty=(Tensor[(845), float64],) */;
  %543 = %542.0;
  %544 = cast(%var_4482, dtype="bool") /* ty=Tensor[(845), bool] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(1), int32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(845), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?), bool] */;
  %548 = cast(%var_4482, dtype="float64") /* ty=Tensor[(845), float64] */;
  %549 = shape_of(%543, dtype="int32") /* ty=Tensor[(1), int32] */;
  %550 = cast(%543, dtype="float64") /* ty=Tensor[(845), float64] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?), float64] */;
  %552 = not_equal(%546, %547) /* ty=Tensor[(845), bool] */;
  %553 = mod(%550, %551) /* ty=Tensor[(845), float64] */;
  (%552, %553)
}

def @func_6697() -> Tensor[(845), float64] {
  %554 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(845), float64] */;
  acosh(%556) /* ty=Tensor[(845), float64] */
}

def @func_4931(%var_4922: Tensor[(1, 1, 9), int64]) -> Tensor[(15, 1, 9), int64] {
  %557 = cast(%var_4922, dtype="int64") /* ty=Tensor[(1, 1, 9), int64] */;
  %558 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 1, 9), int64] */, dtype="int64") /* ty=Tensor[(15, 1, 9), int64] */;
  logical_xor(%557, %558) /* ty=Tensor[(15, 1, 9), int64] */
}

def @func_6799() -> (Tensor[(6, 7, 4), int8], Tensor[(11, 14, 12), float64], Tensor[(1848), float64]) {
  %559 = @func_2953() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %560 = cast(meta[relay.Constant][24] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %561 = reshape(%560, newshape=[11, 14, 12]) /* ty=Tensor[(11, 14, 12), float64] */;
  %562 = @func_3843(%561) /* ty=(Tensor[(11, 14, 12), float64],) */;
  %563 = %559.0;
  %564 = %562.0;
  (%563, %564, meta[relay.Constant][24] /* ty=Tensor[(1848), float64] */)
}

def @func_2502() -> Tensor[(6, 7, 4), float64] {
  @func_1847() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_7572() -> Tensor[(6, 7, 4), int8] {
  %565 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %565.0
}

def @func_1957() -> (Tensor[(845), float64],) {
  %566 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %567 = %566.2;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(845), float32] */;
  %569 = atanh(%568) /* ty=Tensor[(845), float32] */;
  %570 = cast(%569, dtype="float64") /* ty=Tensor[(845), float64] */;
  %571 = cosh(%570) /* ty=Tensor[(845), float64] */;
  (%571,)
}

def @func_7178() -> (Tensor[(845), float64],) {
  %572 = @func_6563() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
  %573 = %572.1;
  (%573,)
}

def @func_6411(%var_6393: Tensor[(845), float64]) -> (Tensor[(845), float64], Tensor[(845), uint32], Tensor[(845), int64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16]) {
  %574 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %575 = @func_1021() /* ty=Tensor[(845), float64] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(845), float64] */;
  %577 = asin(%576) /* ty=Tensor[(845), float64] */;
  %578 = cast(%575, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(1), int32] */;
  %580 = cast(%577, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %582 = cast(%var_6393, dtype="int64") /* ty=Tensor[(845), int64] */;
  %583 = shape_of(%575, dtype="int32") /* ty=Tensor[(1), int32] */;
  %584 = cast(%575, dtype="int64") /* ty=Tensor[(845), int64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?), int64] */;
  %586 = cast(meta[relay.Constant][25] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %587 = reshape(%586, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int16] */;
  %588 = @func_1796(%587) /* ty=(Tensor[(9, 16, 7), int16],) */;
  %589 = %574.3;
  %590 = logical_xor(%580, %581) /* ty=Tensor[(845), uint32] */;
  %591 = right_shift(%584, %585) /* ty=Tensor[(845), int64] */;
  %592 = %588.0;
  (%589, %590, %591, %592, meta[relay.Constant][25] /* ty=Tensor[(1008), int16] */)
}

def @func_1796(%var_1784: Tensor[(9, 16, 7), int16]) -> (Tensor[(9, 16, 7), int16],) {
  %593 = cast(%var_1784, dtype="int16") /* ty=Tensor[(9, 16, 7), int16] */;
  %594 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(9, 16, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 16, 7), int16] */, dtype="int16") /* ty=Tensor[(9, 16, 7), int16] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %597 = bitwise_and(%595, %596) /* ty=Tensor[(9, 16, 7), int16] */;
  (%597,)
}

def @func_7145() -> (Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(845), float64]) {
  %598 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %599 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %600 = %598.1;
  %601 = @func_1021() /* ty=Tensor[(845), float64] */;
  %602 = %599.0;
  (%600, %601, %602)
}

def @func_7588() -> (Tensor[(4, 28), float32],) {
  %603 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
  %604 = %603.2;
  (%604,)
}

def @func_1675() -> (Tensor[(845), float64],) {
  %605 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %606 = %605.3;
  (%606,)
}

def @func_7539() -> Tensor[(845), float64] {
  @func_7463() /* ty=Tensor[(845), float64] */
}

def @func_7036() -> (Tensor[(845), float64],) {
  %607 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %608 = %607.0;
  (%608,)
}

def @func_6651() -> Tensor[(6, 7, 4), float64] {
  @func_1847() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_6882() -> (Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), float64]) {
  %609 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %610 = @func_5782() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %611 = %609.1;
  %612 = %610.0;
  (%611, %612)
}

def @func_2177(%var_2116: Tensor[(12, 16, 4), float64]) -> (Tensor[(12, 16, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8]) {
  %613 = cast(%var_2116, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %614 = @func_1957() /* ty=(Tensor[(845), float64],) */;
  %615 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %616 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %617 = log2(%613) /* ty=Tensor[(12, 16, 4), float64] */;
  %618 = %614.0;
  %619 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %620 = %615.2;
  %621 = @func_1021() /* ty=Tensor[(845), float64] */;
  %622 = %616.0;
  (%617, %618, %619, %620, %621, %622)
}

def @func_822() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
  %623 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %624 = %623.0;
  %625 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
  %626 = cast(%625, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %627 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%624, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %630 = subtract(%628, %629) /* ty=Tensor[(6, 7, 4), int8] */;
  %631 = cast(%624, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %635 = cast(meta[relay.Constant][27] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %636 = reshape(%635, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %637 = @func_566(%636) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
  %638 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %639 = right_shift(%633, %634) /* ty=Tensor[(6, 7, 4), int8] */;
  %640 = %637.1;
  (%638, %639, %640, meta[relay.Constant][27] /* ty=Tensor[(845), float64] */)
}

def @func_3824() -> (Tensor[(6, 12, 13), float64],) {
  %641 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %642 = %641.1;
  (%642,)
}

def @func_4360(%var_4336: Tensor[(1800), uint8]) -> (Tensor[(1800), uint8], Tensor[(6, 12, 13), float32]) {
  %643 = cast(%var_4336, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %644 = cast(%var_4336, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %645 = cast(%var_4336, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %646 = reshape(%643, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), uint8] */;
  %647 = reshape(%644, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), uint8] */;
  %648 = reshape(%645, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), uint8] */;
  %649 = @func_2818(%646, %647, %648) /* ty=(Tensor[(845), bool], Tensor[(6, 7, 4), float64], Tensor[(936), float32], Tensor[(15, 8, 15), float32], Tensor[(15, 8, 15), float64], Tensor[(845), float64], Tensor[(6, 12, 13), float64]) */;
  %650 = %649.6;
  %651 = @func_3824() /* ty=(Tensor[(6, 12, 13), float64],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %654 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%650, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %657 = subtract(%655, %656) /* ty=Tensor[(6, 12, 13), float32] */;
  (%var_4336, %657)
}

def @func_99(%var_86: Tensor[(6, 12, 13), float32]) -> Tensor[(6, 12, 13), float64] {
  %658 = cast(%var_86, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %659 = atan(%658) /* ty=Tensor[(6, 12, 13), float32] */;
  %660 = cast(%var_86, dtype="float64") /* ty=Tensor[(6, 12, 13), float64] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="float64") /* ty=Tensor[(6, 12, 13), float64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%662, %663) /* ty=Tensor[(6, 12, 13), float64] */
}

def @func_6456() -> (Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float64]) {
  %664 = @func_6313() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), float32], Tensor[(845), float32], Tensor[(845), float64]) */;
  %665 = @func_4919() /* ty=(Tensor[(845), float32], Tensor[(6, 12, 13), float32]) */;
  %666 = %664.1;
  %667 = %665.1;
  %668 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
  (%666, %667, %668)
}

def @func_1281() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %669 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
  %670 = @func_1021() /* ty=Tensor[(845), float64] */;
  (%669, %670)
}

def @func_5542(%var_5539: Tensor[(880), int64]) -> (Tensor[(3, 1, 8), float32], Tensor[(5, 16, 11), float64], Tensor[(880), int64]) {
  %671 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
  %672 = cast(%var_5539, dtype="int64") /* ty=Tensor[(880), int64] */;
  %673 = reshape(%672, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
  %674 = @func_4062(%673) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) */;
  %675 = erf(%671) /* ty=Tensor[(3, 1, 8), float32] */;
  %676 = %674.3;
  (%675, %676, %var_5539)
}

def @func_3600(%var_3527: Tensor[(7, 14, 11), int16], %var_3528: Tensor[(7, 14, 11), int16], %var_3595: Tensor[(198), float64]) -> (Tensor[(845), float64], Tensor[(7, 14, 11), float64], Tensor[(7, 14, 11), float32], Tensor[(6, 7, 4), float64], Tensor[(198), float64]) {
  %677 = @func_1281() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
  %678 = cast(%var_3528, dtype="int16") /* ty=Tensor[(7, 14, 11), int16] */;
  %679 = shape_of(%var_3527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%var_3527, dtype="int16") /* ty=Tensor[(7, 14, 11), int16] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %682 = add(%680, %681) /* ty=Tensor[(7, 14, 11), int16] */;
  %683 = cast(%var_3528, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%682, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %687 = equal(%685, %686) /* ty=Tensor[(7, 14, 11), bool] */;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(7, 14, 11), float64] */;
  %689 = shape_of(%var_3528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_3528, dtype="float64") /* ty=Tensor[(7, 14, 11), float64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %692 = cast(%var_3527, dtype="float32") /* ty=Tensor[(7, 14, 11), float32] */;
  %693 = cast(%var_3595, dtype="float64") /* ty=Tensor[(198), float64] */;
  %694 = reshape(%693, newshape=[11, 3, 6]) /* ty=Tensor[(11, 3, 6), float64] */;
  %695 = @func_2651(%694) /* ty=(Tensor[(11, 3, 6), float64], Tensor[(6, 7, 4), float64]) */;
  %696 = %677.1;
  %697 = minimum(%690, %691) /* ty=Tensor[(7, 14, 11), float64] */;
  %698 = acosh(%692) /* ty=Tensor[(7, 14, 11), float32] */;
  %699 = %695.1;
  (%696, %697, %698, %699, %var_3595)
}

def @func_2967() -> (Tensor[(3, 4, 8), float32], Tensor[(845), float64]) {
  %700 = @func_2258() /* ty=(Tensor[(845), float64],) */;
  %701 = @func_2273() /* ty=Tensor[(3, 4, 8), float32] */;
  %702 = %700.0;
  (%701, %702)
}

def @func_4464() -> Tensor[(845), bool] {
  %703 = @func_3103() /* ty=(Tensor[(845), float32], Tensor[(845), bool]) */;
  %703.1
}

def @func_3752() -> (Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) {
  %704 = @func_2967() /* ty=(Tensor[(3, 4, 8), float32], Tensor[(845), float64]) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
  %707 = cast(meta[relay.Constant][29] /* ty=Tensor[(845, 1), float64] */, dtype="float64") /* ty=Tensor[(845, 1), float64] */;
  %708 = reshape(%707, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %709 = @func_1641(%708) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) */;
  %710 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
  %711 = erf(%706) /* ty=Tensor[(3, 4, 8), float64] */;
  %712 = %709.2;
  (%710, %711, %712, meta[relay.Constant][29] /* ty=Tensor[(845, 1), float64] */)
}

def @func_2473(%var_2468: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %713 = @func_1281() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
  %714 = @func_1458() /* ty=Tensor[(845), bool] */;
  %715 = cast(meta[relay.Constant][30] /* ty=Tensor[(845), bool] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(%714, dtype="float64") /* ty=Tensor[(845), float64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), float64] */;
  %719 = power(%717, %718) /* ty=Tensor[(845), float64] */;
  %720 = cast(%var_2468, dtype="float64") /* ty=Tensor[(845), float64] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = cast(%719, dtype="float64") /* ty=Tensor[(845), float64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?), float64] */;
  %724 = %713.0;
  %725 = minimum(%722, %723) /* ty=Tensor[(845), float64] */;
  (%724, %725)
}

def @func_3698() -> (Tensor[(845), float64],) {
  %726 = @func_1021() /* ty=Tensor[(845), float64] */;
  (%726,)
}

def @func_2690() -> Tensor[(6, 7, 4), float64] {
  %727 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %727.0
}

def @func_4679() -> (Tensor[(6, 7, 4), float64], Tensor[(12, 2, 15), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) {
  %728 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %729 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 15), float64] */;
  %730 = log2(%729) /* ty=Tensor[(12, 2, 15), float64] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(12, 2, 15), float64] */;
  %732 = cast(meta[relay.Constant][32] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %733 = reshape(%732, newshape=[13, 65]) /* ty=Tensor[(13, 65), float64] */;
  %734 = @func_1441(%733) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) */;
  %735 = %728.0;
  %736 = erf(%731) /* ty=Tensor[(12, 2, 15), float64] */;
  %737 = %734.0;
  (%735, %736, %737, meta[relay.Constant][32] /* ty=Tensor[(845), float64] */)
}

def @func_5339(%var_5281: Tensor[(192), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64], Tensor[(6, 12, 13), bool], Tensor[(845), float64], Tensor[(2, 6, 16), float32]) {
  %738 = @func_3896() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64]) */;
  %739 = cast(%var_5281, dtype="float64") /* ty=Tensor[(192), float64] */;
  %740 = cast(%var_5281, dtype="float32") /* ty=Tensor[(192), float32] */;
  %741 = reshape(%739, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %742 = reshape(%740, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %743 = @func_2590(%741, %742) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
  %744 = @func_4893() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) */;
  %745 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %746 = %745.0;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(845), float64] */;
  %748 = %743.0;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %750 = cast(%748, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %751 = reshape(%749, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %752 = reshape(%750, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %753 = @func_2590(%751, %752) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
  %754 = %738.1;
  %755 = %744.1;
  %756 = rsqrt(%747) /* ty=Tensor[(845), float64] */;
  %757 = %753.0;
  (%754, %748, %var_5281, %755, %756, %757)
}

def @func_3799() -> (Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) {
  %758 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %759 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %760 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %761 = %760.2;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %763 = %758.0;
  %764 = %759.3;
  %765 = asin(%762) /* ty=Tensor[(13, 13, 5), float64] */;
  (%763, %764, %765)
}

def @func_7442() -> Tensor[(2, 7, 16), float64] {
  %766 = @func_3978() /* ty=(Tensor[(2, 7, 16), float64],) */;
  %766.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7395() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
  %3 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
    %0 = @func_3824() /* ty=(Tensor[(6, 12, 13), float64],) */;
    %1 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
    %2 = %0.0;
    (%1, %2)
  };
  %3() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */
}

def @func_3104() -> (Tensor[(845), float32], Tensor[(845), bool]) {
  %9 = fn () -> (Tensor[(845), float32], Tensor[(845), bool]) {
    %4 = @func_2843() /* ty=(Tensor[(845), float64],) */;
    %5 = %4.0;
    %6 = cast(%5, dtype="float32") /* ty=Tensor[(845), float32] */;
    %7 = exp(%6) /* ty=Tensor[(845), float32] */;
    %8 = @func_1458() /* ty=Tensor[(845), bool] */;
    (%7, %8)
  };
  %9() /* ty=(Tensor[(845), float32], Tensor[(845), bool]) */
}

def @func_1443(%var_1442: Tensor[(13, 65), float64]) -> (Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) {
  %39 = fn (%var_1408: Tensor[(13, 65), float64]) -> (Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) {
    %10 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
    %11 = %10.0;
    %12 = cast(%11, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    %13 = reshape(%12, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
    %14 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
    %15 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
    %16 = %15.0;
    %17 = cast(%16, dtype="float32") /* ty=Tensor[(6, 7, 4), float32] */;
    %18 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%14, dtype="float32") /* ty=Tensor[(6, 7, 4), float32] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %21 = cast(%var_1408, dtype="float64") /* ty=Tensor[(13, 65), float64] */;
    %22 = reshape(%21, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %23 = @func_732(%22) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
    %24 = %23.1;
    %25 = cast(%var_1408, dtype="uint16") /* ty=Tensor[(13, 65), uint16] */;
    %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%24, dtype="uint16") /* ty=Tensor[(13, 13, 5), uint16] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %29 = logical_xor(%27, %28) /* ty=Tensor[(13, 13, 5), uint16] */;
    %30 = cast(%29, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    %31 = reshape(%30, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
    %32 = @func_566(%31) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
    %33 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
    %34 = @func_99(%13) /* ty=Tensor[(6, 12, 13), float64] */;
    %35 = mod(%19, %20) /* ty=Tensor[(6, 7, 4), float32] */;
    %36 = %32.1;
    %37 = %33.1;
    %38 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
    (%11, %34, %35, %29, %36, %37, %38)
  };
  %39(%var_1442) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) */
}

def @func_2180(%var_2178: Tensor[(12, 16, 4), float64]) -> (Tensor[(12, 16, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8]) {
  @func_2177(%var_2178) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8]) */
}

def @func_5832() -> (Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), int8]) {
  %40 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %41 = @func_3799() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) */;
  %42 = %40.1;
  %43 = %41.0;
  (%42, %43)
}

def @func_6493() -> Tensor[(845), float64] {
  %45 = fn () -> Tensor[(845), float64] {
    %44 = @func_2258() /* ty=(Tensor[(845), float64],) */;
    %44.0
  };
  %45() /* ty=Tensor[(845), float64] */
}

def @func_3950() -> (Tensor[(845), bool], Tensor[(6, 12, 13), float64]) {
  %46 = @func_3103() /* ty=(Tensor[(845), float32], Tensor[(845), bool]) */;
  %47 = @func_3824() /* ty=(Tensor[(6, 12, 13), float64],) */;
  %48 = %46.1;
  %49 = %47.0;
  (%48, %49)
}

def @func_7442() -> Tensor[(2, 7, 16), float64] {
  %50 = @func_3978() /* ty=(Tensor[(2, 7, 16), float64],) */;
  %50.0
}

def @func_4798() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) {
  %51 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %52 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %53 = %51.0;
  (%52, %53)
}

def @func_7588() -> (Tensor[(4, 28), float32],) {
  %54 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
  %55 = %54.2;
  (%55,)
}

def @func_678() -> (Tensor[(6, 7, 4), float64],) {
  @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */
}

def @func_1199() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
  @func_1197() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */
}

def @func_2969() -> (Tensor[(3, 4, 8), float32], Tensor[(845), float64]) {
  @func_2967() /* ty=(Tensor[(3, 4, 8), float32], Tensor[(845), float64]) */
}

def @func_2439(%var_2437: Tensor[(32, 24), float64], %var_2438: Tensor[(32, 24), float64]) -> (Tensor[(3, 4, 8), float32], Tensor[(6, 7, 4), int8], Tensor[(845), float64], Tensor[(32, 24), bool]) {
  @func_2435(%var_2437, %var_2438) /* ty=(Tensor[(3, 4, 8), float32], Tensor[(6, 7, 4), int8], Tensor[(845), float64], Tensor[(32, 24), bool]) */
}

def @func_6653() -> Tensor[(6, 7, 4), float64] {
  @func_6651() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_6243() -> Tensor[(6, 12, 13), float64] {
  %56 = fn () -> Tensor[(6, 12, 13), float64] {
    @func_1572() /* ty=Tensor[(6, 12, 13), float64] */
  };
  %56() /* ty=Tensor[(6, 12, 13), float64] */
}

def @func_4174(%var_4164: Tensor[(6, 12, 13), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), bool]) {
  %57 = @func_3799() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) */;
  %58 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
  %59 = cast(%var_4164, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %61 = cast(%58, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %63 = %57.1;
  %64 = @func_2690() /* ty=Tensor[(6, 7, 4), float64] */;
  %65 = not_equal(%61, %62) /* ty=Tensor[(6, 12, 13), bool] */;
  (%63, %64, %65)
}

def @func_6458() -> (Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float64]) {
  @func_6456() /* ty=(Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float64]) */
}

def @func_6651() -> Tensor[(6, 7, 4), float64] {
  @func_1847() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_6989() -> (Tensor[(6, 7, 4), int8], Tensor[(6, 12, 13), bool]) {
  %66 = @func_2953() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %67 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %69 = log2(%68) /* ty=Tensor[(6, 12, 13), float32] */;
  %70 = cast(%69, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
  %71 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%67, dtype="int64") /* ty=Tensor[(6, 12, 13), int64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %74 = right_shift(%72, %73) /* ty=Tensor[(6, 12, 13), int64] */;
  %75 = cast(%69, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%74, dtype="bool") /* ty=Tensor[(6, 12, 13), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = %66.0;
  %80 = greater_equal(%77, %78) /* ty=Tensor[(6, 12, 13), bool] */;
  (%79, %80)
}

def @func_1505() -> (Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) {
  %90 = fn () -> (Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) {
    %81 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
    %82 = cast(meta[relay.Constant][0] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
    %83 = reshape(%82, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %84 = @func_732(%83) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
    %85 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
    %86 = %81.0;
    %87 = %84.1;
    %88 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
    %89 = %85.0;
    (%86, %87, meta[relay.Constant][0] /* ty=Tensor[(845), float64] */, %88, %89)
  };
  %90() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */
}

def @func_3009() -> (Tensor[(845), float64],) {
  @func_3007() /* ty=(Tensor[(845), float64],) */
}

def @func_1197() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
  %91 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %92 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %93 = %91.0;
  %94 = %92.0;
  (%93, %94)
}

def @func_6704() -> (Tensor[(845), float64],) {
  %95 = @func_3007() /* ty=(Tensor[(845), float64],) */;
  %96 = %95.0;
  (%96,)
}

def @func_7590() -> (Tensor[(4, 28), float32],) {
  @func_7588() /* ty=(Tensor[(4, 28), float32],) */
}

def @func_1677() -> (Tensor[(845), float64],) {
  @func_1675() /* ty=(Tensor[(845), float64],) */
}

def @func_5630() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64]) {
  %97 = @func_4318() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %98 = @func_2258() /* ty=(Tensor[(845), float64],) */;
  %99 = @func_2953() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %100 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %101 = %97.0;
  %102 = %98.0;
  %103 = %99.0;
  %104 = %100.0;
  (%101, %102, %103, %104)
}

def @func_7464() -> Tensor[(845), float64] {
  %105 = fn () -> Tensor[(845), float64] {
    @func_1021() /* ty=Tensor[(845), float64] */
  };
  %105() /* ty=Tensor[(845), float64] */
}

def @func_2690() -> Tensor[(6, 7, 4), float64] {
  %106 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %106.0
}

def @func_4439(%var_4438: Tensor[(13, 11, 15), float32]) -> (Tensor[(845), float64], Tensor[(13, 11, 15), bool], Tensor[(13, 11, 15), float64]) {
  %125 = fn (%var_4371: Tensor[(13, 11, 15), float32]) -> (Tensor[(845), float64], Tensor[(13, 11, 15), bool], Tensor[(13, 11, 15), float64]) {
    %107 = @func_1675() /* ty=(Tensor[(845), float64],) */;
    %108 = cast(%var_4371, dtype="float32") /* ty=Tensor[(13, 11, 15), float32] */;
    %109 = sigmoid(%108) /* ty=Tensor[(13, 11, 15), float32] */;
    %110 = cast(%109, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
    %111 = asinh(%110) /* ty=Tensor[(13, 11, 15), float64] */;
    %112 = cast(%109, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
    %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%111, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %116 = mod(%114, %115) /* ty=Tensor[(13, 11, 15), float64] */;
    %117 = cast(%109, dtype="bool") /* ty=Tensor[(13, 11, 15), bool] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%116, dtype="bool") /* ty=Tensor[(13, 11, 15), bool] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %121 = cast(%109, dtype="float64") /* ty=Tensor[(13, 11, 15), float64] */;
    %122 = %107.0;
    %123 = not_equal(%119, %120) /* ty=Tensor[(13, 11, 15), bool] */;
    %124 = asin(%121) /* ty=Tensor[(13, 11, 15), float64] */;
    (%122, %123, %124)
  };
  %125(%var_4438) /* ty=(Tensor[(845), float64], Tensor[(13, 11, 15), bool], Tensor[(13, 11, 15), float64]) */
}

def @func_7156() -> Tensor[(936), float32] {
  %126 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %126.1
}

def @func_4603(%var_4590: Tensor[(1800), uint8]) -> (Tensor[(6, 7, 4), float64], Tensor[(1800), uint8], Tensor[(1800), uint8]) {
  %127 = cast(%var_4590, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %128 = reshape(%127, newshape=[1800]) /* ty=Tensor[(1800), uint8] */;
  %129 = @func_4360(%128) /* ty=(Tensor[(1800), uint8], Tensor[(6, 12, 13), float32]) */;
  %130 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %131 = %129.0;
  (%130, %131, %var_4590)
}

def @func_566(%var_497: Tensor[(13, 13, 5), float64]) -> (Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) {
  %132 = cast(%var_497, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
  %133 = acosh(%132) /* ty=Tensor[(13, 13, 5), float64] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %135 = cast(%var_497, dtype="float32") /* ty=Tensor[(13, 13, 5), float32] */;
  %136 = cast(meta[relay.Constant][1] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
  %137 = reshape(%136, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
  %138 = atan(%134) /* ty=Tensor[(13, 13, 5), float32] */;
  %139 = sigmoid(%135) /* ty=Tensor[(13, 13, 5), float32] */;
  %140 = @func_99(%137) /* ty=Tensor[(6, 12, 13), float64] */;
  (%138, %139, %140, meta[relay.Constant][1] /* ty=Tensor[(936), float32] */)
}

def @func_2967() -> (Tensor[(3, 4, 8), float32], Tensor[(845), float64]) {
  %141 = @func_2258() /* ty=(Tensor[(845), float64],) */;
  %142 = @func_2273() /* ty=Tensor[(3, 4, 8), float32] */;
  %143 = %141.0;
  (%142, %143)
}

def @func_4680() -> (Tensor[(6, 7, 4), float64], Tensor[(12, 2, 15), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) {
  %154 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(12, 2, 15), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) {
    %144 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
    %145 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 15), float64] */;
    %146 = log2(%145) /* ty=Tensor[(12, 2, 15), float64] */;
    %147 = cast(%146, dtype="float64") /* ty=Tensor[(12, 2, 15), float64] */;
    %148 = cast(meta[relay.Constant][3] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
    %149 = reshape(%148, newshape=[13, 65]) /* ty=Tensor[(13, 65), float64] */;
    %150 = @func_1441(%149) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) */;
    %151 = %144.0;
    %152 = erf(%147) /* ty=Tensor[(12, 2, 15), float64] */;
    %153 = %150.0;
    (%151, %152, %153, meta[relay.Constant][3] /* ty=Tensor[(845), float64] */)
  };
  %154() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(12, 2, 15), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */
}

def @func_1283() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  @func_1281() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */
}

def @func_6564() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %157 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
    %155 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
    %156 = @func_4193() /* ty=Tensor[(845), float64] */;
    (%155, %156)
  };
  %157() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */
}

def @func_7180() -> (Tensor[(845), float64],) {
  @func_7178() /* ty=(Tensor[(845), float64],) */
}

def @func_2590(%var_2544: Tensor[(2, 6, 16), float64], %var_2567: Tensor[(2, 6, 16), float32]) -> (Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) {
  %158 = cast(%var_2544, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %159 = cast(%var_2544, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %160 = tan(%159) /* ty=Tensor[(2, 6, 16), float64] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %162 = asinh(%161) /* ty=Tensor[(2, 6, 16), float32] */;
  %163 = cast(%var_2567, dtype="int16") /* ty=Tensor[(2, 6, 16), int16] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="int16") /* ty=Tensor[(2, 6, 16), int16] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %167 = log(%158) /* ty=Tensor[(2, 6, 16), float32] */;
  %168 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
  %169 = bitwise_or(%165, %166) /* ty=Tensor[(2, 6, 16), int16] */;
  (%167, %168, %169)
}

def @func_4062(%var_4004: Tensor[(5, 16, 11), int64]) -> (Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) {
  %170 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %171 = cast(meta[relay.Constant][4] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %172 = reshape(%171, newshape=[13, 65]) /* ty=Tensor[(13, 65), float64] */;
  %173 = @func_1441(%172) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(6, 7, 4), float32], Tensor[(13, 13, 5), uint16], Tensor[(13, 13, 5), float32], Tensor[(936), float32], Tensor[(6, 7, 4), float64]) */;
  %174 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 16, 11), int64] */, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %175 = shape_of(%var_4004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%var_4004, dtype="bool") /* ty=Tensor[(5, 16, 11), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = greater(%176, %177) /* ty=Tensor[(5, 16, 11), bool] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(5, 16, 11), float64] */;
  %180 = cast(meta[relay.Constant][4] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %181 = reshape(%180, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %182 = @func_3637(%181) /* ty=(Tensor[(845), float64],) */;
  %183 = %170.1;
  %184 = %173.1;
  %185 = atan(%179) /* ty=Tensor[(5, 16, 11), float64] */;
  %186 = %182.0;
  (%183, %184, meta[relay.Constant][4] /* ty=Tensor[(845), float64] */, %185, %186)
}

def @func_1643(%var_1642: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) {
  %204 = fn (%var_1603: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) {
    %187 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
    %188 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
    %189 = %188.2;
    %190 = cast(%var_1603, dtype="bool") /* ty=Tensor[(845), bool] */;
    %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(1), int32] */;
    %192 = cast(%189, dtype="bool") /* ty=Tensor[(845), bool] */;
    %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?), bool] */;
    %194 = greater(%192, %193) /* ty=Tensor[(845), bool] */;
    %195 = cast(%194, dtype="float64") /* ty=Tensor[(845), float64] */;
    %196 = sin(%195) /* ty=Tensor[(845), float64] */;
    %197 = cast(%var_1603, dtype="uint32") /* ty=Tensor[(845), uint32] */;
    %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(1), int32] */;
    %199 = cast(%196, dtype="uint32") /* ty=Tensor[(845), uint32] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %201 = %187.0;
    %202 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
    %203 = bitwise_and(%199, %200) /* ty=Tensor[(845), uint32] */;
    (%201, %202, %203)
  };
  %204(%var_1642) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) */
}

def @func_1572() -> Tensor[(6, 12, 13), float64] {
  %205 = @func_1197() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %205.1
}

def @func_5342(%var_5340: Tensor[(192), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64], Tensor[(6, 12, 13), bool], Tensor[(845), float64], Tensor[(2, 6, 16), float32]) {
  @func_5339(%var_5340) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64], Tensor[(6, 12, 13), bool], Tensor[(845), float64], Tensor[(2, 6, 16), float32]) */
}

def @func_2955() -> (Tensor[(6, 7, 4), int8],) {
  @func_2953() /* ty=(Tensor[(6, 7, 4), int8],) */
}

def @func_2653(%var_2652: Tensor[(11, 3, 6), float64]) -> (Tensor[(11, 3, 6), float64], Tensor[(6, 7, 4), float64]) {
  %209 = fn (%var_2626: Tensor[(11, 3, 6), float64]) -> (Tensor[(11, 3, 6), float64], Tensor[(6, 7, 4), float64]) {
    %206 = cast(%var_2626, dtype="float64") /* ty=Tensor[(11, 3, 6), float64] */;
    %207 = exp(%206) /* ty=Tensor[(11, 3, 6), float64] */;
    %208 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
    (%207, %208)
  };
  %209(%var_2652) /* ty=(Tensor[(11, 3, 6), float64], Tensor[(6, 7, 4), float64]) */
}

def @func_5544(%var_5543: Tensor[(880), int64]) -> (Tensor[(3, 1, 8), float32], Tensor[(5, 16, 11), float64], Tensor[(880), int64]) {
  %216 = fn (%var_5539: Tensor[(880), int64]) -> (Tensor[(3, 1, 8), float32], Tensor[(5, 16, 11), float64], Tensor[(880), int64]) {
    %210 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
    %211 = cast(%var_5539, dtype="int64") /* ty=Tensor[(880), int64] */;
    %212 = reshape(%211, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
    %213 = @func_4062(%212) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) */;
    %214 = erf(%210) /* ty=Tensor[(3, 1, 8), float32] */;
    %215 = %213.3;
    (%214, %215, %var_5539)
  };
  %216(%var_5543) /* ty=(Tensor[(3, 1, 8), float32], Tensor[(5, 16, 11), float64], Tensor[(880), int64]) */
}

def @func_622() -> Tensor[(6, 7, 4), float64] {
  %218 = fn () -> Tensor[(6, 7, 4), float64] {
    %217 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 7, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 7, 4), float64] */;
    asinh(%217) /* ty=Tensor[(6, 7, 4), float64] */
  };
  %218() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_5035(%var_5034: Tensor[(48, 4), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(48, 4), float64], Tensor[(6, 7, 4), float32], Tensor[(6, 12, 13), float64], Tensor[(880), int64]) {
  %233 = fn (%var_5008: Tensor[(48, 4), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(48, 4), float64], Tensor[(6, 7, 4), float32], Tensor[(6, 12, 13), float64], Tensor[(880), int64]) {
    %219 = cast(%var_5008, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
    %220 = cast(%var_5008, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %221 = reshape(%219, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
    %222 = reshape(%220, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %223 = @func_2590(%221, %222) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
    %224 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
    %225 = cast(%224, dtype="float32") /* ty=Tensor[(6, 7, 4), float32] */;
    %226 = cast(meta[relay.Constant][8] /* ty=Tensor[(880), int64] */, dtype="int64") /* ty=Tensor[(880), int64] */;
    %227 = reshape(%226, newshape=[5, 16, 11]) /* ty=Tensor[(5, 16, 11), int64] */;
    %228 = @func_4062(%227) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) */;
    %229 = @func_2502() /* ty=Tensor[(6, 7, 4), float64] */;
    %230 = %223.1;
    %231 = asin(%225) /* ty=Tensor[(6, 7, 4), float32] */;
    %232 = %228.1;
    (%229, %230, %var_5008, %231, %232, meta[relay.Constant][8] /* ty=Tensor[(880), int64] */)
  };
  %233(%var_5034) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(48, 4), float64], Tensor[(6, 7, 4), float32], Tensor[(6, 12, 13), float64], Tensor[(880), int64]) */
}

def @func_569(%var_567: Tensor[(13, 13, 5), float64]) -> (Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) {
  @func_566(%var_567) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */
}

def @func_3479() -> (Tensor[(10, 15, 5), float32], Tensor[(10, 15, 5), float64]) {
  %238 = fn () -> (Tensor[(10, 15, 5), float32], Tensor[(10, 15, 5), float64]) {
    %234 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 15, 5), float32] */;
    %235 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 15, 5), float32] */, dtype="float64") /* ty=Tensor[(10, 15, 5), float64] */;
    %236 = cos(%234) /* ty=Tensor[(10, 15, 5), float32] */;
    %237 = log2(%235) /* ty=Tensor[(10, 15, 5), float64] */;
    (%236, %237)
  };
  %238() /* ty=(Tensor[(10, 15, 5), float32], Tensor[(10, 15, 5), float64]) */
}

def @func_4606(%var_4604: Tensor[(1800), uint8]) -> (Tensor[(6, 7, 4), float64], Tensor[(1800), uint8], Tensor[(1800), uint8]) {
  @func_4603(%var_4604) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(1800), uint8], Tensor[(1800), uint8]) */
}

def @func_4726() -> (Tensor[(4, 28), float32], Tensor[(6, 7, 4), float64]) {
  @func_4724() /* ty=(Tensor[(4, 28), float32], Tensor[(6, 7, 4), float64]) */
}

def @func_824() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
  @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */
}

def @func_3384() -> Tensor[(845), float32] {
  %239 = @func_1458() /* ty=Tensor[(845), bool] */;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(845), float32] */;
  sqrt(%240) /* ty=Tensor[(845), float32] */
}

def @func_2953() -> (Tensor[(6, 7, 4), int8],) {
  %241 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %242 = %241.4;
  (%242,)
}

def @func_2823(%var_2820: Tensor[(15, 8, 15), uint8], %var_2821: Tensor[(15, 8, 15), uint8], %var_2822: Tensor[(15, 8, 15), uint8]) -> (Tensor[(845), bool], Tensor[(6, 7, 4), float64], Tensor[(936), float32], Tensor[(15, 8, 15), float32], Tensor[(15, 8, 15), float64], Tensor[(845), float64], Tensor[(6, 12, 13), float64]) {
  @func_2818(%var_2820, %var_2821, %var_2822) /* ty=(Tensor[(845), bool], Tensor[(6, 7, 4), float64], Tensor[(936), float32], Tensor[(15, 8, 15), float32], Tensor[(15, 8, 15), float64], Tensor[(845), float64], Tensor[(6, 12, 13), float64]) */
}

def @func_734(%var_733: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
  %248 = fn (%var_712: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
    %243 = cast(%var_712, dtype="float64") /* ty=Tensor[(845), float64] */;
    %244 = reshape(%243, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
    %245 = @func_566(%244) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
    %246 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
    %247 = %245.0;
    (%246, %247, %var_712)
  };
  %248(%var_733) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */
}

def @func_5204() -> (Tensor[(845), float64],) {
  @func_5202() /* ty=(Tensor[(845), float64],) */
}

def @func_7234() -> (Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64]) {
  %256 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64]) {
    %249 = cast(meta[relay.Constant][10] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %250 = cast(meta[relay.Constant][10] /* ty=Tensor[(192), float64] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %251 = reshape(%249, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
    %252 = reshape(%250, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
    %253 = @func_2590(%251, %252) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
    %254 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
    %255 = %253.0;
    (%254, %255, meta[relay.Constant][10] /* ty=Tensor[(192), float64] */)
  };
  %256() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64]) */
}

def @func_2435(%var_2416: Tensor[(32, 24), float64], %var_2419: Tensor[(32, 24), float64]) -> (Tensor[(3, 4, 8), float32], Tensor[(6, 7, 4), int8], Tensor[(845), float64], Tensor[(32, 24), bool]) {
  %257 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %258 = cast(%var_2416, dtype="float64") /* ty=Tensor[(32, 24), float64] */;
  %259 = reshape(%258, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), float64] */;
  %260 = @func_2177(%259) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8]) */;
  %261 = cast(%var_2419, dtype="bool") /* ty=Tensor[(32, 24), bool] */;
  %262 = shape_of(%var_2416, dtype="int32") /* ty=Tensor[(2), int32] */;
  %263 = cast(%var_2416, dtype="bool") /* ty=Tensor[(32, 24), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %265 = @func_2273() /* ty=Tensor[(3, 4, 8), float32] */;
  %266 = %257.4;
  %267 = %260.3;
  %268 = logical_or(%263, %264) /* ty=Tensor[(32, 24), bool] */;
  (%265, %266, %267, %268)
}

def @func_5448() -> (Tensor[(6, 7, 4), float64],) {
  %271 = fn () -> (Tensor[(6, 7, 4), float64],) {
    %269 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
    %270 = %269.0;
    (%270,)
  };
  %271() /* ty=(Tensor[(6, 7, 4), float64],) */
}

def @func_7355(%var_7353: Tensor[(1, 11, 13), bool], %var_7354: Tensor[(13, 11, 13), bool]) -> Tensor[(13, 11, 13), bool] {
  %274 = fn (%var_7333: Tensor[(1, 11, 13), bool], %var_7334: Tensor[(13, 11, 13), bool]) -> Tensor[(13, 11, 13), bool] {
    %272 = cast(%var_7333, dtype="bool") /* ty=Tensor[(1, 11, 13), bool] */;
    %273 = cast(%var_7334, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
    logical_or(%272, %273) /* ty=Tensor[(13, 11, 13), bool] */
  };
  %274(%var_7353, %var_7354) /* ty=Tensor[(13, 11, 13), bool] */
}

def @func_2473(%var_2468: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %275 = @func_1281() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
  %276 = @func_1458() /* ty=Tensor[(845), bool] */;
  %277 = cast(meta[relay.Constant][11] /* ty=Tensor[(845), bool] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(1), int32] */;
  %279 = cast(%276, dtype="float64") /* ty=Tensor[(845), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?), float64] */;
  %281 = power(%279, %280) /* ty=Tensor[(845), float64] */;
  %282 = cast(%var_2468, dtype="float64") /* ty=Tensor[(845), float64] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(1), int32] */;
  %284 = cast(%281, dtype="float64") /* ty=Tensor[(845), float64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?), float64] */;
  %286 = %275.0;
  %287 = minimum(%284, %285) /* ty=Tensor[(845), float64] */;
  (%286, %287)
}

def @func_3753() -> (Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) {
  %297 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) {
    %288 = @func_2967() /* ty=(Tensor[(3, 4, 8), float32], Tensor[(845), float64]) */;
    %289 = %288.0;
    %290 = cast(%289, dtype="float64") /* ty=Tensor[(3, 4, 8), float64] */;
    %291 = cast(meta[relay.Constant][12] /* ty=Tensor[(845, 1), float64] */, dtype="float64") /* ty=Tensor[(845, 1), float64] */;
    %292 = reshape(%291, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %293 = @func_1641(%292) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) */;
    %294 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
    %295 = erf(%290) /* ty=Tensor[(3, 4, 8), float64] */;
    %296 = %293.2;
    (%294, %295, %296, meta[relay.Constant][12] /* ty=Tensor[(845, 1), float64] */)
  };
  %297() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) */
}

def @func_945() -> (Tensor[(6, 7, 4), int8],) {
  @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */
}

def @func_3309() -> (Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) {
  %298 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %299 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 28), float32] */, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %300 = reshape(%299, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
  %301 = @func_3213(%300) /* ty=(Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) */;
  %302 = %298.0;
  %303 = %301.3;
  (%302, %303, meta[relay.Constant][13] /* ty=Tensor[(4, 28), float32] */)
}

def @func_943() -> (Tensor[(6, 7, 4), int8],) {
  %304 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %305 = %304.1;
  (%305,)
}

def @func_3896() -> (Tensor[(845), float64], Tensor[(6, 7, 4), float64]) {
  %306 = @func_1021() /* ty=Tensor[(845), float64] */;
  %307 = @func_2502() /* ty=Tensor[(6, 7, 4), float64] */;
  (%306, %307)
}

def @func_822() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
  %308 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %309 = %308.0;
  %310 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
  %311 = cast(%310, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %312 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%309, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %315 = subtract(%313, %314) /* ty=Tensor[(6, 7, 4), int8] */;
  %316 = cast(%309, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="int8") /* ty=Tensor[(6, 7, 4), int8] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %320 = cast(meta[relay.Constant][14] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %321 = reshape(%320, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %322 = @func_566(%321) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
  %323 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %324 = right_shift(%318, %319) /* ty=Tensor[(6, 7, 4), int8] */;
  %325 = %322.1;
  (%323, %324, %325, meta[relay.Constant][14] /* ty=Tensor[(845), float64] */)
}

def @func_668() -> Tensor[(6, 7, 4), float64] {
  @func_666() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_4724() -> (Tensor[(4, 28), float32], Tensor[(6, 7, 4), float64]) {
  %326 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
  %327 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %328 = %326.2;
  %329 = %327.0;
  (%328, %329)
}

def @func_5202() -> (Tensor[(845), float64],) {
  %330 = @func_3896() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64]) */;
  %331 = %330.0;
  (%331,)
}

def @func_2177(%var_2116: Tensor[(12, 16, 4), float64]) -> (Tensor[(12, 16, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8]) {
  %332 = cast(%var_2116, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %333 = @func_1957() /* ty=(Tensor[(845), float64],) */;
  %334 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
  %335 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %336 = log2(%332) /* ty=Tensor[(12, 16, 4), float64] */;
  %337 = %333.0;
  %338 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %339 = %334.2;
  %340 = @func_1021() /* ty=Tensor[(845), float64] */;
  %341 = %335.0;
  (%336, %337, %338, %339, %340, %341)
}

def @func_4232() -> Tensor[(6, 7, 4), float64] {
  @func_4230() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_4530(%var_4528: Tensor[(845), float64]) -> (Tensor[(845), bool], Tensor[(845), float64]) {
  @func_4527(%var_4528) /* ty=(Tensor[(845), bool], Tensor[(845), float64]) */
}

def @func_6882() -> (Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), float64]) {
  %342 = @func_4300() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */;
  %343 = @func_5782() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %344 = %342.1;
  %345 = %343.0;
  (%344, %345)
}

def @func_4194() -> Tensor[(845), float64] {
  %347 = fn () -> Tensor[(845), float64] {
    %346 = @func_2245() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */;
    %346.2
  };
  %347() /* ty=Tensor[(845), float64] */
}

def @func_7036() -> (Tensor[(845), float64],) {
  %348 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %349 = %348.0;
  (%349,)
}

def @func_6734() -> Tensor[(6, 7, 4), float64] {
  %350 = @func_5447() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %350.0
}

def @func_6936() -> (Tensor[(845), uint32],) {
  %353 = fn () -> (Tensor[(845), uint32],) {
    %351 = @func_3752() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) */;
    %352 = %351.2;
    (%352,)
  };
  %353() /* ty=(Tensor[(845), uint32],) */
}

def @func_5745() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(28, 4), float32]) {
  %362 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(28, 4), float32]) {
    %354 = @func_3896() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64]) */;
    %355 = @func_1281() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
    %356 = cast(meta[relay.Constant][15] /* ty=Tensor[(28, 4), float32] */, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
    %357 = reshape(%356, newshape=[1, 7, 16]) /* ty=Tensor[(1, 7, 16), float32] */;
    %358 = @func_3213(%357) /* ty=(Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) */;
    %359 = %354.1;
    %360 = %355.1;
    %361 = %358.2;
    (%359, %360, %361, meta[relay.Constant][15] /* ty=Tensor[(28, 4), float32] */)
  };
  %362() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(845), float64], Tensor[(28, 4), float32]) */
}

def @func_7444() -> Tensor[(2, 7, 16), float64] {
  @func_7442() /* ty=Tensor[(2, 7, 16), float64] */
}

def @func_1882(%var_1881: Tensor[(845), bool]) -> (Tensor[(845), bool], Tensor[(6, 7, 4), float64]) {
  %374 = fn (%var_1869: Tensor[(845), bool]) -> (Tensor[(845), bool], Tensor[(6, 7, 4), float64]) {
    %363 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
    %364 = %363.2;
    %365 = cast(%var_1869, dtype="bool") /* ty=Tensor[(845), bool] */;
    %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(1), int32] */;
    %367 = cast(%364, dtype="bool") /* ty=Tensor[(845), bool] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?), bool] */;
    %369 = logical_or(%367, %368) /* ty=Tensor[(845), bool] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(845), float64] */;
    %371 = reshape(%370, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %372 = @func_1641(%371) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(845), uint32]) */;
    %373 = %372.0;
    (%369, %373)
  };
  %374(%var_1881) /* ty=(Tensor[(845), bool], Tensor[(6, 7, 4), float64]) */
}

def @func_7577(%var_7574: Tensor[(16, 14, 2), float32]) -> (Tensor[(16, 14, 2), float32],) {
  %375 = cast(%var_7574, dtype="float32") /* ty=Tensor[(16, 14, 2), float32] */;
  %376 = sinh(%375) /* ty=Tensor[(16, 14, 2), float32] */;
  (%376,)
}

def @func_1719() -> (Tensor[(936), float32], Tensor[(845), float64]) {
  %381 = fn () -> (Tensor[(936), float32], Tensor[(845), float64]) {
    %377 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
    %378 = @func_1675() /* ty=(Tensor[(845), float64],) */;
    %379 = %377.1;
    %380 = %378.0;
    (%379, %380)
  };
  %381() /* ty=(Tensor[(936), float32], Tensor[(845), float64]) */
}

def @func_5184(%var_5182: Tensor[(96, 2), float64], %var_5183: Tensor[(96, 2), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(6, 12, 13), float64], Tensor[(96, 2), uint32]) {
  %396 = fn (%var_5166: Tensor[(96, 2), float64], %var_5168: Tensor[(96, 2), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(6, 12, 13), float64], Tensor[(96, 2), uint32]) {
    %382 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
    %383 = reshape(%382, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int16] */;
    %384 = @func_1796(%383) /* ty=(Tensor[(9, 16, 7), int16],) */;
    %385 = cast(%var_5166, dtype="float64") /* ty=Tensor[(96, 2), float64] */;
    %386 = reshape(%385, newshape=[48, 4]) /* ty=Tensor[(48, 4), float64] */;
    %387 = @func_5033(%386) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(48, 4), float64], Tensor[(6, 7, 4), float32], Tensor[(6, 12, 13), float64], Tensor[(880), int64]) */;
    %388 = cast(%var_5168, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
    %389 = shape_of(%var_5166, dtype="int32") /* ty=Tensor[(2), int32] */;
    %390 = cast(%var_5166, dtype="uint32") /* ty=Tensor[(96, 2), uint32] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %392 = @func_2690() /* ty=Tensor[(6, 7, 4), float64] */;
    %393 = %384.0;
    %394 = %387.1;
    %395 = bitwise_and(%390, %391) /* ty=Tensor[(96, 2), uint32] */;
    (%392, %393, meta[relay.Constant][16] /* ty=Tensor[(1008), int16] */, %394, %395)
  };
  %396(%var_5182, %var_5183) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(6, 12, 13), float64], Tensor[(96, 2), uint32]) */
}

def @func_3640(%var_3638: Tensor[(845), float64]) -> (Tensor[(845), float64],) {
  @func_3637(%var_3638) /* ty=(Tensor[(845), float64],) */
}

def @func_3311() -> (Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) {
  @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */
}

def @func_3604(%var_3601: Tensor[(7, 14, 11), int16], %var_3602: Tensor[(7, 14, 11), int16], %var_3603: Tensor[(198), float64]) -> (Tensor[(845), float64], Tensor[(7, 14, 11), float64], Tensor[(7, 14, 11), float32], Tensor[(6, 7, 4), float64], Tensor[(198), float64]) {
  %420 = fn (%var_3527: Tensor[(7, 14, 11), int16], %var_3528: Tensor[(7, 14, 11), int16], %var_3595: Tensor[(198), float64]) -> (Tensor[(845), float64], Tensor[(7, 14, 11), float64], Tensor[(7, 14, 11), float32], Tensor[(6, 7, 4), float64], Tensor[(198), float64]) {
    %397 = @func_1281() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
    %398 = cast(%var_3528, dtype="int16") /* ty=Tensor[(7, 14, 11), int16] */;
    %399 = shape_of(%var_3527, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%var_3527, dtype="int16") /* ty=Tensor[(7, 14, 11), int16] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %402 = add(%400, %401) /* ty=Tensor[(7, 14, 11), int16] */;
    %403 = cast(%var_3528, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
    %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(%402, dtype="bool") /* ty=Tensor[(7, 14, 11), bool] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %407 = equal(%405, %406) /* ty=Tensor[(7, 14, 11), bool] */;
    %408 = cast(%407, dtype="float64") /* ty=Tensor[(7, 14, 11), float64] */;
    %409 = shape_of(%var_3528, dtype="int32") /* ty=Tensor[(3), int32] */;
    %410 = cast(%var_3528, dtype="float64") /* ty=Tensor[(7, 14, 11), float64] */;
    %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %412 = cast(%var_3527, dtype="float32") /* ty=Tensor[(7, 14, 11), float32] */;
    %413 = cast(%var_3595, dtype="float64") /* ty=Tensor[(198), float64] */;
    %414 = reshape(%413, newshape=[11, 3, 6]) /* ty=Tensor[(11, 3, 6), float64] */;
    %415 = @func_2651(%414) /* ty=(Tensor[(11, 3, 6), float64], Tensor[(6, 7, 4), float64]) */;
    %416 = %397.1;
    %417 = minimum(%410, %411) /* ty=Tensor[(7, 14, 11), float64] */;
    %418 = acosh(%412) /* ty=Tensor[(7, 14, 11), float32] */;
    %419 = %415.1;
    (%416, %417, %418, %419, %var_3595)
  };
  %420(%var_3601, %var_3602, %var_3603) /* ty=(Tensor[(845), float64], Tensor[(7, 14, 11), float64], Tensor[(7, 14, 11), float32], Tensor[(6, 7, 4), float64], Tensor[(198), float64]) */
}

def @func_4527(%var_4482: Tensor[(845), float64]) -> (Tensor[(845), bool], Tensor[(845), float64]) {
  %421 = @func_2843() /* ty=(Tensor[(845), float64],) */;
  %422 = %421.0;
  %423 = cast(%var_4482, dtype="bool") /* ty=Tensor[(845), bool] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(1), int32] */;
  %425 = cast(%422, dtype="bool") /* ty=Tensor[(845), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?), bool] */;
  %427 = cast(%var_4482, dtype="float64") /* ty=Tensor[(845), float64] */;
  %428 = shape_of(%422, dtype="int32") /* ty=Tensor[(1), int32] */;
  %429 = cast(%422, dtype="float64") /* ty=Tensor[(845), float64] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?), float64] */;
  %431 = not_equal(%425, %426) /* ty=Tensor[(845), bool] */;
  %432 = mod(%429, %430) /* ty=Tensor[(845), float64] */;
  (%431, %432)
}

def @func_3454() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
  %435 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) {
    %433 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
    %434 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
    (%433, %434)
  };
  %435() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */
}

def @func_3979() -> (Tensor[(2, 7, 16), float64],) {
  %438 = fn () -> (Tensor[(2, 7, 16), float64],) {
    %436 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
    %437 = %436.1;
    (%437,)
  };
  %438() /* ty=(Tensor[(2, 7, 16), float64],) */
}

def @func_1848() -> Tensor[(6, 7, 4), float64] {
  %439 = fn () -> Tensor[(6, 7, 4), float64] {
    @func_666() /* ty=Tensor[(6, 7, 4), float64] */
  };
  %439() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_1798(%var_1797: Tensor[(9, 16, 7), int16]) -> (Tensor[(9, 16, 7), int16],) {
  %445 = fn (%var_1784: Tensor[(9, 16, 7), int16]) -> (Tensor[(9, 16, 7), int16],) {
    %440 = cast(%var_1784, dtype="int16") /* ty=Tensor[(9, 16, 7), int16] */;
    %441 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(9, 16, 7), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 16, 7), int16] */, dtype="int16") /* ty=Tensor[(9, 16, 7), int16] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %444 = bitwise_and(%442, %443) /* ty=Tensor[(9, 16, 7), int16] */;
    (%444,)
  };
  %445(%var_1797) /* ty=(Tensor[(9, 16, 7), int16],) */
}

def @func_6706() -> (Tensor[(845), float64],) {
  @func_6704() /* ty=(Tensor[(845), float64],) */
}

def @func_5678() -> (Tensor[(6, 12, 13), float32],) {
  %449 = fn () -> (Tensor[(6, 12, 13), float32],) {
    %446 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
    %447 = cast(%446, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    %448 = atanh(%447) /* ty=Tensor[(6, 12, 13), float32] */;
    (%448,)
  };
  %449() /* ty=(Tensor[(6, 12, 13), float32],) */
}

def @func_6736() -> Tensor[(6, 7, 4), float64] {
  @func_6734() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_2522() -> Tensor[(6, 12, 13), float64] {
  %450 = @func_1197() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %450.1
}

def @main(%var_7637: Tensor[(936), float32], %var_7664: Tensor[(192), float64]) -> (Tensor[(845), float64], Tensor[(6, 12, 13), float64], Tensor[(192), float64], Tensor[(936), bool], Tensor[(936), bool]) {
  %451 = @func_2845() /* ty=(Tensor[(845), float64],) */;
  %452 = cast(%var_7664, dtype="float64") /* ty=Tensor[(192), float64] */;
  %453 = cast(%var_7664, dtype="float64") /* ty=Tensor[(192), float64] */;
  %454 = reshape(%452, newshape=[96, 2]) /* ty=Tensor[(96, 2), float64] */;
  %455 = reshape(%453, newshape=[96, 2]) /* ty=Tensor[(96, 2), float64] */;
  %456 = @func_5184(%454, %455) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(6, 12, 13), float64], Tensor[(96, 2), uint32]) */;
  %457 = @func_1067() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %458 = %457.1;
  %459 = cast(%458, dtype="float64") /* ty=Tensor[(936), float64] */;
  %460 = asin(%459) /* ty=Tensor[(936), float64] */;
  %461 = cast(%var_7637, dtype="float64") /* ty=Tensor[(936), float64] */;
  %462 = shape_of(%458, dtype="int32") /* ty=Tensor[(1), int32] */;
  %463 = cast(%458, dtype="float64") /* ty=Tensor[(936), float64] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?), float64] */;
  %465 = divide(%463, %464) /* ty=Tensor[(936), float64] */;
  %466 = cast(%465, dtype="bool") /* ty=Tensor[(936), bool] */;
  %467 = shape_of(%460, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(%460, dtype="bool") /* ty=Tensor[(936), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), bool] */;
  %470 = cast(%460, dtype="float32") /* ty=Tensor[(936), float32] */;
  %471 = sin(%470) /* ty=Tensor[(936), float32] */;
  %472 = cast(%460, dtype="bool") /* ty=Tensor[(936), bool] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(1), int32] */;
  %474 = cast(%471, dtype="bool") /* ty=Tensor[(936), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?), bool] */;
  %476 = %451.0;
  %477 = %456.3;
  %478 = not_equal(%468, %469) /* ty=Tensor[(936), bool] */;
  %479 = less(%474, %475) /* ty=Tensor[(936), bool] */;
  (%476, %477, %var_7664, %478, %479)
}

def @func_1675() -> (Tensor[(845), float64],) {
  %480 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %481 = %480.3;
  (%481,)
}

def @func_4894() -> (Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) {
  %498 = fn () -> (Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) {
    %482 = @func_1021() /* ty=Tensor[(845), float64] */;
    %483 = cast(%482, dtype="float32") /* ty=Tensor[(845), float32] */;
    %484 = erf(%483) /* ty=Tensor[(845), float32] */;
    %485 = cast(%482, dtype="int64") /* ty=Tensor[(845), int64] */;
    %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(1), int32] */;
    %487 = cast(%484, dtype="int64") /* ty=Tensor[(845), int64] */;
    %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?), int64] */;
    %489 = bitwise_xor(%487, %488) /* ty=Tensor[(845), int64] */;
    %490 = cast(%489, dtype="float64") /* ty=Tensor[(845), float64] */;
    %491 = cast(meta[relay.Constant][18] /* ty=Tensor[(936), float64] */, dtype="float64") /* ty=Tensor[(936), float64] */;
    %492 = reshape(%491, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float64] */;
    %493 = @func_4174(%492) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), bool]) */;
    %494 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
    %495 = acos(%490) /* ty=Tensor[(845), float64] */;
    %496 = %493.2;
    %497 = %494.0;
    (%495, %496, meta[relay.Constant][18] /* ty=Tensor[(936), float64] */, %497)
  };
  %498() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) */
}

def @func_2524() -> Tensor[(6, 12, 13), float64] {
  @func_2522() /* ty=Tensor[(6, 12, 13), float64] */
}

def @func_1337() -> Tensor[(6, 7, 4), float64] {
  %500 = fn () -> Tensor[(6, 7, 4), float64] {
    %499 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
    %499.0
  };
  %500() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_3898() -> (Tensor[(845), float64], Tensor[(6, 7, 4), float64]) {
  @func_3896() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64]) */
}

def @func_7469() -> (Tensor[(6, 7, 4), float64],) {
  @func_7467() /* ty=(Tensor[(6, 7, 4), float64],) */
}

def @func_4921() -> (Tensor[(845), float32], Tensor[(6, 12, 13), float32]) {
  @func_4919() /* ty=(Tensor[(845), float32], Tensor[(6, 12, 13), float32]) */
}

def @func_2692() -> Tensor[(6, 7, 4), float64] {
  @func_2690() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_1067() -> (Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) {
  %510 = fn () -> (Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) {
    %501 = cast(meta[relay.Constant][19] /* ty=Tensor[(936), float32] */, dtype="float32") /* ty=Tensor[(936), float32] */;
    %502 = reshape(%501, newshape=[6, 12, 13]) /* ty=Tensor[(6, 12, 13), float32] */;
    %503 = @func_1021() /* ty=Tensor[(845), float64] */;
    %504 = cast(meta[relay.Constant][20] /* ty=Tensor[(845), float64] */, dtype="bool") /* ty=Tensor[(845), bool] */;
    %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(1), int32] */;
    %506 = cast(%503, dtype="bool") /* ty=Tensor[(845), bool] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?), bool] */;
    %508 = @func_99(%502) /* ty=Tensor[(6, 12, 13), float64] */;
    %509 = logical_and(%506, %507) /* ty=Tensor[(845), bool] */;
    (%508, meta[relay.Constant][19] /* ty=Tensor[(936), float32] */, %509)
  };
  %510() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */
}

def @func_1281() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %511 = @func_666() /* ty=Tensor[(6, 7, 4), float64] */;
  %512 = @func_1021() /* ty=Tensor[(845), float64] */;
  (%511, %512)
}

def @func_2594(%var_2592: Tensor[(2, 6, 16), float64], %var_2593: Tensor[(2, 6, 16), float32]) -> (Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) {
  @func_2590(%var_2592, %var_2593) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */
}

def @func_3845(%var_3844: Tensor[(11, 14, 12), float64]) -> (Tensor[(11, 14, 12), float64],) {
  %515 = fn (%var_3827: Tensor[(11, 14, 12), float64]) -> (Tensor[(11, 14, 12), float64],) {
    %513 = cast(%var_3827, dtype="float64") /* ty=Tensor[(11, 14, 12), float64] */;
    %514 = acos(%513) /* ty=Tensor[(11, 14, 12), float64] */;
    (%514,)
  };
  %515(%var_3844) /* ty=(Tensor[(11, 14, 12), float64],) */
}

def @func_5339(%var_5281: Tensor[(192), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(2, 6, 16), float32], Tensor[(192), float64], Tensor[(6, 12, 13), bool], Tensor[(845), float64], Tensor[(2, 6, 16), float32]) {
  %516 = @func_3896() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64]) */;
  %517 = cast(%var_5281, dtype="float64") /* ty=Tensor[(192), float64] */;
  %518 = cast(%var_5281, dtype="float32") /* ty=Tensor[(192), float32] */;
  %519 = reshape(%517, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %520 = reshape(%518, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %521 = @func_2590(%519, %520) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
  %522 = @func_4893() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) */;
  %523 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(845), float64] */;
  %526 = %521.0;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(2, 6, 16), float64] */;
  %528 = cast(%526, dtype="float32") /* ty=Tensor[(2, 6, 16), float32] */;
  %529 = reshape(%527, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float64] */;
  %530 = reshape(%528, newshape=[2, 6, 16]) /* ty=Tensor[(2, 6, 16), float32] */;
  %531 = @func_2590(%529, %530) /* ty=(Tensor[(2, 6, 16), float32], Tensor[(6, 12, 13), float64], Tensor[(2, 6, 16), int16]) */;
  %532 = %516.1;
  %533 = %522.1;
  %534 = rsqrt(%525) /* ty=Tensor[(845), float64] */;
  %535 = %531.0;
  (%532, %526, %var_5281, %533, %534, %535)
}

def @func_2818(%var_2702: Tensor[(15, 8, 15), uint8], %var_2703: Tensor[(15, 8, 15), uint8], %var_2723: Tensor[(15, 8, 15), uint8]) -> (Tensor[(845), bool], Tensor[(6, 7, 4), float64], Tensor[(936), float32], Tensor[(15, 8, 15), float32], Tensor[(15, 8, 15), float64], Tensor[(845), float64], Tensor[(6, 12, 13), float64]) {
  %536 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
  %537 = %536.2;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(845), float64] */;
  %539 = reshape(%538, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float64] */;
  %540 = @func_566(%539) /* ty=(Tensor[(13, 13, 5), float32], Tensor[(13, 13, 5), float32], Tensor[(6, 12, 13), float64], Tensor[(936), float32]) */;
  %541 = cast(%var_2723, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %542 = shape_of(%var_2702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%var_2702, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %545 = mod(%543, %544) /* ty=Tensor[(15, 8, 15), float32] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(15, 8, 15), float64] */;
  %547 = sin(%546) /* ty=Tensor[(15, 8, 15), float64] */;
  %548 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 15), uint8] */, dtype="int16") /* ty=Tensor[(15, 8, 15), int16] */;
  %549 = shape_of(%var_2703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%var_2703, dtype="int16") /* ty=Tensor[(15, 8, 15), int16] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %552 = bitwise_and(%550, %551) /* ty=Tensor[(15, 8, 15), int16] */;
  %553 = cast(%552, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %554 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%547, dtype="bool") /* ty=Tensor[(15, 8, 15), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %557 = greater_equal(%555, %556) /* ty=Tensor[(15, 8, 15), bool] */;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %559 = cast(%var_2703, dtype="uint8") /* ty=Tensor[(15, 8, 15), uint8] */;
  %560 = shape_of(%var_2702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_2702, dtype="uint8") /* ty=Tensor[(15, 8, 15), uint8] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %563 = logical_xor(%561, %562) /* ty=Tensor[(15, 8, 15), uint8] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(15, 8, 15), float32] */;
  %565 = cos(%564) /* ty=Tensor[(15, 8, 15), float32] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(15, 8, 15), float64] */;
  %567 = @func_1718() /* ty=(Tensor[(936), float32], Tensor[(845), float64]) */;
  %568 = @func_1336() /* ty=Tensor[(6, 7, 4), float64] */;
  %569 = %540.3;
  %570 = log2(%558) /* ty=Tensor[(15, 8, 15), float32] */;
  %571 = tan(%566) /* ty=Tensor[(15, 8, 15), float64] */;
  %572 = %567.1;
  %573 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
  (%537, %568, %569, %570, %571, %572, %573)
}

def @func_6143() -> (Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(196, 2), float64]) {
  %588 = fn () -> (Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(196, 2), float64]) {
    %574 = @func_4893() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) */;
    %575 = @func_4318() /* ty=(Tensor[(6, 7, 4), float64],) */;
    %576 = @func_5782() /* ty=(Tensor[(6, 7, 4), float64],) */;
    %577 = cast(meta[relay.Constant][22] /* ty=Tensor[(196, 2), float64] */, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
    %578 = cast(meta[relay.Constant][22] /* ty=Tensor[(196, 2), float64] */, dtype="float64") /* ty=Tensor[(196, 2), float64] */;
    %579 = %574.0;
    %580 = cast(%579, dtype="float64") /* ty=Tensor[(845), float64] */;
    %581 = reshape(%577, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float64] */;
    %582 = reshape(%578, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), float64] */;
    %583 = reshape(%580, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %584 = @func_2071(%581, %582, %583) /* ty=(Tensor[(14, 2, 14), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
    %585 = %575.0;
    %586 = %576.0;
    %587 = %584.1;
    (%579, %585, %586, %587, meta[relay.Constant][22] /* ty=Tensor[(196, 2), float64] */)
  };
  %588() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(196, 2), float64]) */
}

def @func_7158() -> Tensor[(936), float32] {
  @func_7156() /* ty=Tensor[(936), float32] */
}

def @func_1574() -> Tensor[(6, 12, 13), float64] {
  @func_1572() /* ty=Tensor[(6, 12, 13), float64] */
}

def @func_6456() -> (Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float32], Tensor[(6, 12, 13), float64]) {
  %589 = @func_6313() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), float32], Tensor[(845), float32], Tensor[(845), float64]) */;
  %590 = @func_4919() /* ty=(Tensor[(845), float32], Tensor[(6, 12, 13), float32]) */;
  %591 = %589.1;
  %592 = %590.1;
  %593 = @func_2522() /* ty=Tensor[(6, 12, 13), float64] */;
  (%591, %592, %593)
}

def @func_7178() -> (Tensor[(845), float64],) {
  %594 = @func_6563() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */;
  %595 = %594.1;
  (%595,)
}

def @func_4230() -> Tensor[(6, 7, 4), float64] {
  @func_2690() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_2259() -> (Tensor[(845), float64],) {
  %597 = fn () -> (Tensor[(845), float64],) {
    %596 = @func_1021() /* ty=Tensor[(845), float64] */;
    (%596,)
  };
  %597() /* ty=(Tensor[(845), float64],) */
}

def @func_6697() -> Tensor[(845), float64] {
  %598 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(845), float64] */;
  acosh(%600) /* ty=Tensor[(845), float64] */
}

def @func_4177(%var_4175: Tensor[(6, 12, 13), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), bool]) {
  @func_4174(%var_4175) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), bool]) */
}

def @func_2476(%var_2474: Tensor[(845), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  @func_2473(%var_2474) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */
}

def @func_3952() -> (Tensor[(845), bool], Tensor[(6, 12, 13), float64]) {
  @func_3950() /* ty=(Tensor[(845), bool], Tensor[(6, 12, 13), float64]) */
}

def @func_5874(%var_5873: Tensor[(8, 3, 5), float64]) -> (Tensor[(8, 3, 5), float64], Tensor[(845, 1), float64]) {
  %608 = fn (%var_5862: Tensor[(8, 3, 5), float64]) -> (Tensor[(8, 3, 5), float64], Tensor[(845, 1), float64]) {
    %601 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
    %602 = shape_of(%var_5862, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%var_5862, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %605 = @func_3752() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) */;
    %606 = multiply(%603, %604) /* ty=Tensor[(8, 3, 5), float64] */;
    %607 = %605.3;
    (%606, %607)
  };
  %608(%var_5873) /* ty=(Tensor[(8, 3, 5), float64], Tensor[(845, 1), float64]) */
}

def @func_3386() -> Tensor[(845), float32] {
  @func_3384() /* ty=Tensor[(845), float32] */
}

def @func_6092() -> (Tensor[(845), float32], Tensor[(845), bool], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) {
  %609 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
  %610 = @func_3752() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(3, 4, 8), float64], Tensor[(845), uint32], Tensor[(845, 1), float64]) */;
  %611 = @func_3384() /* ty=Tensor[(845), float32] */;
  %612 = @func_4464() /* ty=Tensor[(845), bool] */;
  %613 = %609.0;
  %614 = %610.0;
  %615 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  (%611, %612, %613, %614, %615)
}

def @func_2503() -> Tensor[(6, 7, 4), float64] {
  %616 = fn () -> Tensor[(6, 7, 4), float64] {
    @func_1847() /* ty=Tensor[(6, 7, 4), float64] */
  };
  %616() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_7038() -> (Tensor[(845), float64],) {
  @func_7036() /* ty=(Tensor[(845), float64],) */
}

def @func_2915() -> (Tensor[(845), bool],) {
  %624 = fn () -> (Tensor[(845), bool],) {
    %617 = @func_2245() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */;
    %618 = %617.2;
    %619 = cast(meta[relay.Constant][24] /* ty=Tensor[(845), float64] */, dtype="bool") /* ty=Tensor[(845), bool] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(1), int32] */;
    %621 = cast(%618, dtype="bool") /* ty=Tensor[(845), bool] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?), bool] */;
    %623 = greater_equal(%621, %622) /* ty=Tensor[(845), bool] */;
    (%623,)
  };
  %624() /* ty=(Tensor[(845), bool],) */
}

def @func_7521() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  @func_7519() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64]) */
}

def @func_7580(%var_7578: Tensor[(16, 14, 2), float32]) -> (Tensor[(16, 14, 2), float32],) {
  @func_7577(%var_7578) /* ty=(Tensor[(16, 14, 2), float32],) */
}

def @func_2338(%var_2336: Tensor[(6, 7, 4), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(3, 4, 8), float32]) {
  @func_2335(%var_2336) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(3, 4, 8), float32]) */
}

def @func_7467() -> (Tensor[(6, 7, 4), float64],) {
  %625 = @func_4679() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(12, 2, 15), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */;
  %626 = %625.0;
  (%626,)
}

def @func_7425(%var_7424: Tensor[(845), float64]) -> (Tensor[(845), float64], Tensor[(845), float64]) {
  %640 = fn (%var_7404: Tensor[(845), float64]) -> (Tensor[(845), float64], Tensor[(845), float64]) {
    %627 = @func_6142() /* ty=(Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(196, 2), float64]) */;
    %628 = @func_4193() /* ty=Tensor[(845), float64] */;
    %629 = cast(%var_7404, dtype="uint32") /* ty=Tensor[(845), uint32] */;
    %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(1), int32] */;
    %631 = cast(%628, dtype="uint32") /* ty=Tensor[(845), uint32] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %633 = add(%631, %632) /* ty=Tensor[(845), uint32] */;
    %634 = cast(%628, dtype="float64") /* ty=Tensor[(845), float64] */;
    %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(1), int32] */;
    %636 = cast(%633, dtype="float64") /* ty=Tensor[(845), float64] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?), float64] */;
    %638 = %627.0;
    %639 = floor_mod(%636, %637) /* ty=Tensor[(845), float64] */;
    (%638, %639)
  };
  %640(%var_7424) /* ty=(Tensor[(845), float64], Tensor[(845), float64]) */
}

def @func_3826() -> (Tensor[(6, 12, 13), float64],) {
  @func_3824() /* ty=(Tensor[(6, 12, 13), float64],) */
}

def @func_1459() -> Tensor[(845), bool] {
  %642 = fn () -> Tensor[(845), bool] {
    %641 = @func_1066() /* ty=(Tensor[(6, 12, 13), float64], Tensor[(936), float32], Tensor[(845), bool]) */;
    %641.2
  };
  %642() /* ty=Tensor[(845), bool] */
}

def @func_6884() -> (Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), float64]) {
  @func_6882() /* ty=(Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), float64]) */
}

def @func_3213(%var_3133: Tensor[(1, 7, 16), float32]) -> (Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) {
  %643 = cast(%var_3133, dtype="float32") /* ty=Tensor[(1, 7, 16), float32] */;
  %644 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 16), float32] */;
  %645 = mod(%643, %644) /* ty=Tensor[(2, 7, 16), float32] */;
  %646 = cast(%var_3133, dtype="uint16") /* ty=Tensor[(1, 7, 16), uint16] */;
  %647 = cast(%645, dtype="uint16") /* ty=Tensor[(2, 7, 16), uint16] */;
  %648 = @func_3007() /* ty=(Tensor[(845), float64],) */;
  %649 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 7, 16), float32] */, dtype="float64") /* ty=Tensor[(2, 7, 16), float64] */;
  %650 = add(%646, %647) /* ty=Tensor[(2, 7, 16), uint16] */;
  %651 = @func_1847() /* ty=Tensor[(6, 7, 4), float64] */;
  %652 = %648.0;
  %653 = atan(%649) /* ty=Tensor[(2, 7, 16), float64] */;
  (%650, %651, %652, %653)
}

def @func_2274() -> Tensor[(3, 4, 8), float32] {
  %655 = fn () -> Tensor[(3, 4, 8), float32] {
    %654 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
    cosh(%654) /* ty=Tensor[(3, 4, 8), float32] */
  };
  %655() /* ty=Tensor[(3, 4, 8), float32] */
}

def @func_3699() -> (Tensor[(845), float64],) {
  %657 = fn () -> (Tensor[(845), float64],) {
    %656 = @func_1021() /* ty=Tensor[(845), float64] */;
    (%656,)
  };
  %657() /* ty=(Tensor[(845), float64],) */
}

def @func_3824() -> (Tensor[(6, 12, 13), float64],) {
  %658 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
  %659 = %658.1;
  (%659,)
}

def @func_4065(%var_4063: Tensor[(5, 16, 11), int64]) -> (Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) {
  @func_4062(%var_4063) /* ty=(Tensor[(6, 12, 13), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64], Tensor[(5, 16, 11), float64], Tensor[(845), float64]) */
}

def @func_4933(%var_4932: Tensor[(1, 1, 9), int64]) -> Tensor[(15, 1, 9), int64] {
  %662 = fn (%var_4922: Tensor[(1, 1, 9), int64]) -> Tensor[(15, 1, 9), int64] {
    %660 = cast(%var_4922, dtype="int64") /* ty=Tensor[(1, 1, 9), int64] */;
    %661 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 1, 9), int64] */, dtype="int64") /* ty=Tensor[(15, 1, 9), int64] */;
    logical_xor(%660, %661) /* ty=Tensor[(15, 1, 9), int64] */
  };
  %662(%var_4932) /* ty=Tensor[(15, 1, 9), int64] */
}

def @func_1021() -> Tensor[(845), float64] {
  %663 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %663.3
}

def @func_7308() -> (Tensor[(845), float64], Tensor[(845), float64]) {
  %672 = fn () -> (Tensor[(845), float64], Tensor[(845), float64]) {
    %664 = @func_6704() /* ty=(Tensor[(845), float64],) */;
    %665 = @func_7145() /* ty=(Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(845), float64]) */;
    %666 = %665.1;
    %667 = cast(%666, dtype="float64") /* ty=Tensor[(845), float64] */;
    %668 = log10(%667) /* ty=Tensor[(845), float64] */;
    %669 = cast(%668, dtype="float64") /* ty=Tensor[(845), float64] */;
    %670 = %664.0;
    %671 = tan(%669) /* ty=Tensor[(845), float64] */;
    (%670, %671)
  };
  %672() /* ty=(Tensor[(845), float64], Tensor[(845), float64]) */
}

def @func_3800() -> (Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) {
  %681 = fn () -> (Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) {
    %673 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
    %674 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
    %675 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
    %676 = %675.2;
    %677 = cast(%676, dtype="float64") /* ty=Tensor[(13, 13, 5), float64] */;
    %678 = %673.0;
    %679 = %674.3;
    %680 = asin(%677) /* ty=Tensor[(13, 13, 5), float64] */;
    (%678, %679, %680)
  };
  %681() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float64]) */
}

def @func_6625() -> (Tensor[(6, 7, 4), float64],) {
  %684 = fn () -> (Tensor[(6, 7, 4), float64],) {
    %682 = @func_4724() /* ty=(Tensor[(4, 28), float32], Tensor[(6, 7, 4), float64]) */;
    %683 = %682.1;
    (%683,)
  };
  %684() /* ty=(Tensor[(6, 7, 4), float64],) */
}

def @func_99(%var_86: Tensor[(6, 12, 13), float32]) -> Tensor[(6, 12, 13), float64] {
  %685 = cast(%var_86, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %686 = atan(%685) /* ty=Tensor[(6, 12, 13), float32] */;
  %687 = cast(%var_86, dtype="float64") /* ty=Tensor[(6, 12, 13), float64] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="float64") /* ty=Tensor[(6, 12, 13), float64] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%689, %690) /* ty=Tensor[(6, 12, 13), float64] */
}

def @func_666() -> Tensor[(6, 7, 4), float64] {
  @func_621() /* ty=Tensor[(6, 7, 4), float64] */
}

def @func_3007() -> (Tensor[(845), float64],) {
  %691 = @func_1675() /* ty=(Tensor[(845), float64],) */;
  %692 = %691.0;
  (%692,)
}

def @func_5834() -> (Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), int8]) {
  @func_5832() /* ty=(Tensor[(2, 7, 16), bool], Tensor[(6, 7, 4), int8]) */
}

def @func_2246() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) {
  %698 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) {
    %693 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
    %694 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
    %695 = %693.0;
    %696 = @func_1572() /* ty=Tensor[(6, 12, 13), float64] */;
    %697 = %694.2;
    (%695, %696, %697)
  };
  %698() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64], Tensor[(845), float64]) */
}

def @func_6699() -> Tensor[(845), float64] {
  @func_6697() /* ty=Tensor[(845), float64] */
}

def @func_5632() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64]) {
  @func_5630() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64]) */
}

def @func_6094() -> (Tensor[(845), float32], Tensor[(845), bool], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) {
  @func_6092() /* ty=(Tensor[(845), float32], Tensor[(845), bool], Tensor[(6, 7, 4), int8], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) */
}

def @func_6315() -> (Tensor[(845), float64], Tensor[(6, 12, 13), float32], Tensor[(845), float32], Tensor[(845), float64]) {
  @func_6313() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), float32], Tensor[(845), float32], Tensor[(845), float64]) */
}

def @func_2335(%var_2305: Tensor[(6, 7, 4), float64]) -> (Tensor[(6, 7, 4), float64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16], Tensor[(3, 4, 8), float32]) {
  %699 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  %700 = cast(%var_2305, dtype="float64") /* ty=Tensor[(6, 7, 4), float64] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="float64") /* ty=Tensor[(6, 7, 4), float64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %704 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %705 = reshape(%704, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int16] */;
  %706 = @func_1796(%705) /* ty=(Tensor[(9, 16, 7), int16],) */;
  %707 = @func_2273() /* ty=Tensor[(3, 4, 8), float32] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %709 = cos(%708) /* ty=Tensor[(3, 4, 8), float32] */;
  %710 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="float32") /* ty=Tensor[(3, 4, 8), float32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %714 = floor_mod(%702, %703) /* ty=Tensor[(6, 7, 4), float64] */;
  %715 = %706.0;
  %716 = divide(%712, %713) /* ty=Tensor[(3, 4, 8), float32] */;
  (%714, %715, meta[relay.Constant][28] /* ty=Tensor[(1008), int16] */, %716)
}

def @func_4800() -> (Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) {
  @func_4798() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), float64]) */
}

def @func_3637(%var_3623: Tensor[(845), float64]) -> (Tensor[(845), float64],) {
  %717 = @func_1021() /* ty=Tensor[(845), float64] */;
  %718 = cast(%var_3623, dtype="float64") /* ty=Tensor[(845), float64] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(1), int32] */;
  %720 = cast(%717, dtype="float64") /* ty=Tensor[(845), float64] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?), float64] */;
  %722 = divide(%720, %721) /* ty=Tensor[(845), float64] */;
  (%722,)
}

def @func_3216(%var_3214: Tensor[(1, 7, 16), float32]) -> (Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) {
  @func_3213(%var_3214) /* ty=(Tensor[(2, 7, 16), uint16], Tensor[(6, 7, 4), float64], Tensor[(845), float64], Tensor[(2, 7, 16), float64]) */
}

def @func_6411(%var_6393: Tensor[(845), float64]) -> (Tensor[(845), float64], Tensor[(845), uint32], Tensor[(845), int64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16]) {
  %723 = @func_822() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
  %724 = @func_1021() /* ty=Tensor[(845), float64] */;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(845), float64] */;
  %726 = asin(%725) /* ty=Tensor[(845), float64] */;
  %727 = cast(%724, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(1), int32] */;
  %729 = cast(%726, dtype="uint32") /* ty=Tensor[(845), uint32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %731 = cast(%var_6393, dtype="int64") /* ty=Tensor[(845), int64] */;
  %732 = shape_of(%724, dtype="int32") /* ty=Tensor[(1), int32] */;
  %733 = cast(%724, dtype="int64") /* ty=Tensor[(845), int64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?), int64] */;
  %735 = cast(meta[relay.Constant][30] /* ty=Tensor[(1008), int16] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %736 = reshape(%735, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int16] */;
  %737 = @func_1796(%736) /* ty=(Tensor[(9, 16, 7), int16],) */;
  %738 = %723.3;
  %739 = logical_xor(%729, %730) /* ty=Tensor[(845), uint32] */;
  %740 = right_shift(%733, %734) /* ty=Tensor[(845), int64] */;
  %741 = %737.0;
  (%738, %739, %740, %741, meta[relay.Constant][30] /* ty=Tensor[(1008), int16] */)
}

def @func_7539() -> Tensor[(845), float64] {
  @func_7463() /* ty=Tensor[(845), float64] */
}

def @func_4319() -> (Tensor[(6, 7, 4), float64],) {
  %743 = fn () -> (Tensor[(6, 7, 4), float64],) {
    %742 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
    (%742,)
  };
  %743() /* ty=(Tensor[(6, 7, 4), float64],) */
}

def @func_7519() -> (Tensor[(6, 7, 4), float64], Tensor[(845), float64]) {
  %744 = @func_676() /* ty=(Tensor[(6, 7, 4), float64],) */;
  %745 = @func_2843() /* ty=(Tensor[(845), float64],) */;
  %746 = %744.0;
  %747 = %745.0;
  (%746, %747)
}

def @func_102(%var_100: Tensor[(6, 12, 13), float32]) -> Tensor[(6, 12, 13), float64] {
  @func_99(%var_100) /* ty=Tensor[(6, 12, 13), float64] */
}

def @func_2075(%var_2072: Tensor[(14, 2, 14), float64], %var_2073: Tensor[(14, 2, 14), float64], %var_2074: Tensor[(845), float64]) -> (Tensor[(14, 2, 14), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
  %757 = fn (%var_2062: Tensor[(14, 2, 14), float64], %var_2063: Tensor[(14, 2, 14), float64], %var_2069: Tensor[(845), float64]) -> (Tensor[(14, 2, 14), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) {
    %748 = cast(%var_2063, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
    %749 = shape_of(%var_2062, dtype="int32") /* ty=Tensor[(3), int32] */;
    %750 = cast(%var_2062, dtype="float64") /* ty=Tensor[(14, 2, 14), float64] */;
    %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %752 = cast(%var_2069, dtype="float64") /* ty=Tensor[(845), float64] */;
    %753 = reshape(%752, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %754 = @func_732(%753) /* ty=(Tensor[(6, 7, 4), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */;
    %755 = floor_divide(%750, %751) /* ty=Tensor[(14, 2, 14), float64] */;
    %756 = %754.1;
    (%755, %756, %var_2069)
  };
  %757(%var_2072, %var_2073, %var_2074) /* ty=(Tensor[(14, 2, 14), float64], Tensor[(13, 13, 5), float32], Tensor[(845), float64]) */
}

def @func_4301() -> (Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) {
  %766 = fn () -> (Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) {
    %758 = @func_3978() /* ty=(Tensor[(2, 7, 16), float64],) */;
    %759 = %758.0;
    %760 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 7, 16), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
    %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
    %762 = cast(%759, dtype="bool") /* ty=Tensor[(2, 7, 16), bool] */;
    %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %764 = @func_2502() /* ty=Tensor[(6, 7, 4), float64] */;
    %765 = logical_or(%762, %763) /* ty=Tensor[(2, 7, 16), bool] */;
    (%764, %765)
  };
  %766() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(2, 7, 16), bool]) */
}

def @func_6313() -> (Tensor[(845), float64], Tensor[(6, 12, 13), float32], Tensor[(845), float32], Tensor[(845), float64]) {
  %767 = @func_5677() /* ty=(Tensor[(6, 12, 13), float32],) */;
  %768 = @func_2258() /* ty=(Tensor[(845), float64],) */;
  %769 = %768.0;
  %770 = cast(%769, dtype="float32") /* ty=Tensor[(845), float32] */;
  %771 = @func_3309() /* ty=(Tensor[(845), float64], Tensor[(2, 7, 16), float64], Tensor[(4, 28), float32]) */;
  %772 = @func_4193() /* ty=Tensor[(845), float64] */;
  %773 = %767.0;
  %774 = atan(%770) /* ty=Tensor[(845), float32] */;
  %775 = %771.0;
  (%772, %773, %774, %775)
}

def @func_2845() -> (Tensor[(845), float64],) {
  @func_2843() /* ty=(Tensor[(845), float64],) */
}

def @func_5784() -> (Tensor[(6, 7, 4), float64],) {
  @func_5782() /* ty=(Tensor[(6, 7, 4), float64],) */
}

def @func_7146() -> (Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(845), float64]) {
  %781 = fn () -> (Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(845), float64]) {
    %776 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
    %777 = @func_1675() /* ty=(Tensor[(845), float64],) */;
    %778 = %776.1;
    %779 = @func_1021() /* ty=Tensor[(845), float64] */;
    %780 = %777.0;
    (%778, %779, %780)
  };
  %781() /* ty=(Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(845), float64]) */
}

def @func_7541() -> Tensor[(845), float64] {
  @func_7539() /* ty=Tensor[(845), float64] */
}

def @func_2843() -> (Tensor[(845), float64],) {
  %782 = @func_1718() /* ty=(Tensor[(936), float32], Tensor[(845), float64]) */;
  %783 = %782.1;
  (%783,)
}

def @func_4362(%var_4361: Tensor[(1800), uint8]) -> (Tensor[(1800), uint8], Tensor[(6, 12, 13), float32]) {
  %799 = fn (%var_4336: Tensor[(1800), uint8]) -> (Tensor[(1800), uint8], Tensor[(6, 12, 13), float32]) {
    %784 = cast(%var_4336, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
    %785 = cast(%var_4336, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
    %786 = cast(%var_4336, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
    %787 = reshape(%784, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), uint8] */;
    %788 = reshape(%785, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), uint8] */;
    %789 = reshape(%786, newshape=[15, 8, 15]) /* ty=Tensor[(15, 8, 15), uint8] */;
    %790 = @func_2818(%787, %788, %789) /* ty=(Tensor[(845), bool], Tensor[(6, 7, 4), float64], Tensor[(936), float32], Tensor[(15, 8, 15), float32], Tensor[(15, 8, 15), float64], Tensor[(845), float64], Tensor[(6, 12, 13), float64]) */;
    %791 = %790.6;
    %792 = @func_3824() /* ty=(Tensor[(6, 12, 13), float64],) */;
    %793 = %792.0;
    %794 = cast(%793, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    %795 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%791, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %798 = subtract(%796, %797) /* ty=Tensor[(6, 12, 13), float32] */;
    (%var_4336, %798)
  };
  %799(%var_4361) /* ty=(Tensor[(1800), uint8], Tensor[(6, 12, 13), float32]) */
}

def @func_6414(%var_6412: Tensor[(845), float64]) -> (Tensor[(845), float64], Tensor[(845), uint32], Tensor[(845), int64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16]) {
  @func_6411(%var_6412) /* ty=(Tensor[(845), float64], Tensor[(845), uint32], Tensor[(845), int64], Tensor[(9, 16, 7), int16], Tensor[(1008), int16]) */
}

def @func_4465() -> Tensor[(845), bool] {
  %801 = fn () -> Tensor[(845), bool] {
    %800 = @func_3103() /* ty=(Tensor[(845), float32], Tensor[(845), bool]) */;
    %800.1
  };
  %801() /* ty=Tensor[(845), bool] */
}

def @func_5782() -> (Tensor[(6, 7, 4), float64],) {
  %802 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  (%802,)
}

def @func_4919() -> (Tensor[(845), float32], Tensor[(6, 12, 13), float32]) {
  %803 = @func_4893() /* ty=(Tensor[(845), float64], Tensor[(6, 12, 13), bool], Tensor[(936), float64], Tensor[(6, 7, 4), int8]) */;
  %804 = %803.1;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(6, 12, 13), float32] */;
  %806 = @func_3384() /* ty=Tensor[(845), float32] */;
  %807 = cosh(%805) /* ty=Tensor[(6, 12, 13), float32] */;
  (%806, %807)
}

def @func_7573() -> Tensor[(6, 7, 4), int8] {
  %809 = fn () -> Tensor[(6, 7, 4), int8] {
    %808 = @func_943() /* ty=(Tensor[(6, 7, 4), int8],) */;
    %808.0
  };
  %809() /* ty=Tensor[(6, 7, 4), int8] */
}

def @func_1958() -> (Tensor[(845), float64],) {
  %816 = fn () -> (Tensor[(845), float64],) {
    %810 = @func_1504() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(13, 13, 5), float32], Tensor[(845), float64], Tensor[(6, 7, 4), float64], Tensor[(6, 7, 4), int8]) */;
    %811 = %810.2;
    %812 = cast(%811, dtype="float32") /* ty=Tensor[(845), float32] */;
    %813 = atanh(%812) /* ty=Tensor[(845), float32] */;
    %814 = cast(%813, dtype="float64") /* ty=Tensor[(845), float64] */;
    %815 = cosh(%814) /* ty=Tensor[(845), float64] */;
    (%815,)
  };
  %816() /* ty=(Tensor[(845), float64],) */
}

def @func_1023() -> Tensor[(845), float64] {
  @func_1021() /* ty=Tensor[(845), float64] */
}

def @func_676() -> (Tensor[(6, 7, 4), float64],) {
  %817 = @func_621() /* ty=Tensor[(6, 7, 4), float64] */;
  (%817,)
}

def @func_6991() -> (Tensor[(6, 7, 4), int8], Tensor[(6, 12, 13), bool]) {
  @func_6989() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(6, 12, 13), bool]) */
}

def @func_6668() -> (Tensor[(6, 12, 13), float64],) {
  %820 = fn () -> (Tensor[(6, 12, 13), float64],) {
    %818 = @func_3453() /* ty=(Tensor[(6, 7, 4), float64], Tensor[(6, 12, 13), float64]) */;
    %819 = %818.1;
    (%819,)
  };
  %820() /* ty=(Tensor[(6, 12, 13), float64],) */
}

def @func_6800() -> (Tensor[(6, 7, 4), int8], Tensor[(11, 14, 12), float64], Tensor[(1848), float64]) {
  %827 = fn () -> (Tensor[(6, 7, 4), int8], Tensor[(11, 14, 12), float64], Tensor[(1848), float64]) {
    %821 = @func_2953() /* ty=(Tensor[(6, 7, 4), int8],) */;
    %822 = cast(meta[relay.Constant][32] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
    %823 = reshape(%822, newshape=[11, 14, 12]) /* ty=Tensor[(11, 14, 12), float64] */;
    %824 = @func_3843(%823) /* ty=(Tensor[(11, 14, 12), float64],) */;
    %825 = %821.0;
    %826 = %824.0;
    (%825, %826, meta[relay.Constant][32] /* ty=Tensor[(1848), float64] */)
  };
  %827() /* ty=(Tensor[(6, 7, 4), int8], Tensor[(11, 14, 12), float64], Tensor[(1848), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen342/build/output.py", line 2525, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:08:35] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

