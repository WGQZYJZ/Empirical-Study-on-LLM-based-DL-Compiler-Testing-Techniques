==========mod==========
#[version = "0.0.5"]
def @func_6619(%var_6608: uint32) -> (Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], uint32, Tensor[(112), uint8], Tensor[(140), uint8]) {
  %0 = @func_3676() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %1 = cast(%var_6608, dtype="uint32") /* ty=uint32 */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %5 = reshape(%1, newshape=[]) /* ty=uint32 */;
  %6 = reshape(%2, newshape=[28, 4]) /* ty=Tensor[(28, 4), uint8] */;
  %7 = reshape(%3, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %8 = reshape(%4, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %9 = @func_3143(%5, %6, %7, %8) /* ty=(Tensor[(?, 7, ?), int64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], Tensor[(1, 7, 140), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 7, 1), float32], Tensor[(10, 14, 13), float64]) */;
  %10 = %0.0;
  %11 = %9.4;
  (%10, %11, %var_6608, meta[relay.Constant][0] /* ty=Tensor[(112), uint8] */, meta[relay.Constant][1] /* ty=Tensor[(140), uint8] */)
}

def @func_1873() -> (Tensor[(10, 14, 13), float64],) {
  %12 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %13 = %12.0;
  (%13,)
}

def @func_2736(%var_2703: Tensor[(10, 14, 13), float64], %var_2728: Tensor[(112), uint8], %var_2729: Tensor[(35, 4), uint8]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) {
  %14 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %15 = %14.0;
  %16 = cast(%var_2703, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %20 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(14), uint8] */, dtype="uint8") /* ty=Tensor[(14), uint8] */;
  %22 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %23 = cast(%var_2729, dtype="uint8") /* ty=Tensor[(35, 4), uint8] */;
  %24 = reshape(%21, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), uint8] */;
  %25 = reshape(%22, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), uint8] */;
  %26 = reshape(%23, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint8] */;
  %27 = @func_1530(%24, %25, %26) /* ty=(Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) */;
  %28 = multiply(%18, %19) /* ty=Tensor[(10, 14, 13), float64] */;
  %29 = %20.0;
  %30 = %27.0;
  (%28, %29, %30, meta[relay.Constant][2] /* ty=Tensor[(14), uint8] */, %var_2728, %var_2729)
}

def @func_3143(%var_3067: uint32, %var_3101: Tensor[(28, 4), uint8], %var_3102: Tensor[(140), uint8], %var_3109: Tensor[(140), uint8]) -> (Tensor[(?, 7, ?), int64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], Tensor[(1, 7, 140), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 7, 1), float32], Tensor[(10, 14, 13), float64]) {
  %31 = cast(%var_3067, dtype="uint32") /* ty=uint32 */;
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
  %33 = multiply(%31, %32) /* ty=Tensor[(1, 7, 1), uint32] */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="int64") /* ty=Tensor[(1, 7, 1), int64] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="int64") /* ty=Tensor[(1, 7, 1), int64] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %38 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
  %39 = cast(%38, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %40 = cast(%var_3101, dtype="uint8") /* ty=Tensor[(28, 4), uint8] */;
  %41 = cast(%var_3102, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %42 = reshape(%39, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %43 = reshape(%40, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %44 = reshape(%41, newshape=[35, 4]) /* ty=Tensor[(35, 4), uint8] */;
  %45 = @func_2736(%42, %43, %44) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) */;
  %46 = cast(%var_3109, dtype="int8") /* ty=Tensor[(140), int8] */;
  %47 = shape_of(%var_3102, dtype="int32") /* ty=Tensor[(1), int32] */;
  %48 = cast(%var_3102, dtype="int8") /* ty=Tensor[(140), int8] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?), int8] */;
  %50 = multiply(%48, %49) /* ty=Tensor[(140), int8] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(140), float64] */;
  %52 = cast(%33, dtype="float64") /* ty=Tensor[(1, 7, 1), float64] */;
  %53 = @func_1634() /* ty=(Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %55 = @func_1873() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %56 = add(%36, %37) /* ty=Tensor[(?, 7, ?), int64] */;
  %57 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %58 = %45.0;
  %59 = divide(%51, %52) /* ty=Tensor[(1, 7, 140), float64] */;
  %60 = %53.2;
  %61 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %62 = asinh(%54) /* ty=Tensor[(1, 7, 1), float32] */;
  %63 = %55.0;
  (%56, %38, %57, %58, %var_3101, %59, %60, %61, %62, %63)
}

def @func_2359() -> Tensor[(10, 14, 13), float64] {
  @func_1188() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_1744(%var_1720: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) {
  %64 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %65 = %64.0;
  %66 = cast(%var_1720, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(14), uint8] */, dtype="uint8") /* ty=Tensor[(14), uint8] */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %72 = cast(meta[relay.Constant][6] /* ty=Tensor[(70, 2), uint8] */, dtype="uint8") /* ty=Tensor[(70, 2), uint8] */;
  %73 = reshape(%70, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), uint8] */;
  %74 = reshape(%71, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), uint8] */;
  %75 = reshape(%72, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint8] */;
  %76 = @func_1530(%73, %74, %75) /* ty=(Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) */;
  %77 = minimum(%68, %69) /* ty=Tensor[(10, 14, 13), int32] */;
  %78 = %76.0;
  (%77, %78, meta[relay.Constant][4] /* ty=Tensor[(14), uint8] */, meta[relay.Constant][5] /* ty=Tensor[(112), uint8] */, meta[relay.Constant][6] /* ty=Tensor[(70, 2), uint8] */)
}

def @func_6802() -> (Tensor[(1, 3, 10), float64],) {
  %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 10), float64] */;
  %80 = sigmoid(%79) /* ty=Tensor[(1, 3, 10), float64] */;
  (%80,)
}

def @func_1686() -> Tensor[(10, 14, 13), float64] {
  %81 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %81.0
}

def @func_7400(%var_7387: Tensor[(13, 15, 7), float64]) -> (Tensor[(13, 15, 7), float64],) {
  %82 = cast(%var_7387, dtype="float64") /* ty=Tensor[(13, 15, 7), float64] */;
  %83 = tan(%82) /* ty=Tensor[(13, 15, 7), float64] */;
  (%83,)
}

def @func_3214() -> Tensor[(10, 14, 13), float64] {
  %84 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %84.0
}

def @func_3440(%var_3437: Tensor[(300, 2), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(300, 2), float64]) {
  %85 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %86 = cast(%var_3437, dtype="float64") /* ty=Tensor[(300, 2), float64] */;
  %87 = reshape(%86, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %88 = @func_1490(%87) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) */;
  %89 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
  %90 = %85.0;
  %91 = %88.1;
  (%89, %90, %91, %var_3437)
}

def @func_2866() -> Tensor[(10, 14, 13), float64] {
  %92 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %92.0
}

def @func_2616(%var_2609: Tensor[(112), uint8], %var_2610: Tensor[(140), uint8]) -> (Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) {
  %93 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %94 = %93.0;
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 14, 13), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = cast(meta[relay.Constant][9] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %100 = logical_and(%97, %98) /* ty=Tensor[(10, 14, 13), bool] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %102 = cast(%94, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %103 = reshape(%99, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %104 = reshape(%101, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %105 = reshape(%102, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %106 = @func_1396(%103, %104, %105) /* ty=(Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) */;
  %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %108 = reshape(%107, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %109 = @func_703(%108) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %110 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 14), uint8] */, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %111 = cast(%var_2609, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %112 = cast(%var_2610, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %113 = reshape(%110, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), uint8] */;
  %114 = reshape(%111, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), uint8] */;
  %115 = reshape(%112, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint8] */;
  %116 = @func_1530(%113, %114, %115) /* ty=(Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) */;
  %117 = %106.4;
  %118 = %109.0;
  %119 = %116.0;
  (%100, %117, meta[relay.Constant][9] /* ty=Tensor[(600), float64] */, %118, %119, meta[relay.Constant][10] /* ty=Tensor[(1, 14), uint8] */, %var_2609, %var_2610)
}

def @main(%var_7480: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), float32] {
  %120 = cast(%var_7480, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %121 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(10, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%122, %123) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_3268() -> (Tensor[(10, 14, 13), float64],) {
  %124 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  (%124,)
}

def @func_3538() -> Tensor[(10, 14, 13), float64] {
  %125 = @func_1955() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %125.0
}

def @func_7050(%var_7042: Tensor[(234), bool], %var_7044: Tensor[(1, 36), uint64], %var_7045: Tensor[(126, 1), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(140), uint8], Tensor[(1, 36), uint64], Tensor[(126, 1), int32], Tensor[(234), float64]) {
  %126 = @func_4355() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %127 = cast(%var_7042, dtype="bool") /* ty=Tensor[(234), bool] */;
  %128 = cast(meta[relay.Constant][12] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %129 = cast(%var_7044, dtype="uint64") /* ty=Tensor[(1, 36), uint64] */;
  %130 = cast(%var_7045, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
  %131 = reshape(%127, newshape=[234]) /* ty=Tensor[(234), bool] */;
  %132 = reshape(%128, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %133 = reshape(%129, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %134 = reshape(%130, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %135 = @func_3661(%131, %132, %133, %134) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(2, 9, 13), bool], Tensor[(234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126), int32]) */;
  %136 = cast(%var_7042, dtype="float64") /* ty=Tensor[(234), float64] */;
  %137 = %126.0;
  %138 = %135.3;
  %139 = sqrt(%136) /* ty=Tensor[(234), float64] */;
  (%137, %138, meta[relay.Constant][12] /* ty=Tensor[(140), uint8] */, %var_7044, %var_7045, %139)
}

def @func_5339() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  %140 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %141 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %142 = %140.2;
  %143 = @func_3723() /* ty=Tensor[(10, 14, 13), bool] */;
  %144 = %141.0;
  (%142, %143, %144)
}

def @func_1300() -> (Tensor[(10, 14, 13), float64],) {
  %145 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %146 = %145.0;
  (%146,)
}

def @func_1634() -> (Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %147 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %148 = %147.0;
  %149 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 14, 13), float64] */, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %153 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %154 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%148, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %157 = mod(%155, %156) /* ty=Tensor[(10, 14, 13), float64] */;
  %158 = cast(%148, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %162 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %163 = bitwise_or(%151, %152) /* ty=Tensor[(10, 14, 13), uint16] */;
  %164 = floor_divide(%160, %161) /* ty=Tensor[(10, 14, 13), float64] */;
  %165 = %162.0;
  (%163, %164, %165)
}

def @func_2407() -> (Tensor[(10, 14, 13), float64],) {
  %166 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %167 = %166.0;
  (%167,)
}

def @func_451(%var_399: Tensor[(16, 16, 12), bool], %var_417: Tensor[(63, 2), int32]) -> (Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) {
  %168 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 16, 12), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %169 = shape_of(%var_399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%var_399, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = cast(%var_417, dtype="int32") /* ty=Tensor[(63, 2), int32] */;
  %173 = cast(%var_417, dtype="int32") /* ty=Tensor[(63, 2), int32] */;
  %174 = reshape(%172, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %175 = reshape(%173, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %176 = @func_286(%174, %175) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %177 = %176.0;
  %178 = cast(%177, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %179 = cast(%177, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %180 = reshape(%178, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %181 = reshape(%179, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %182 = @func_286(%180, %181) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %183 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 16, 12), bool] */, dtype="float64") /* ty=Tensor[(16, 16, 12), float64] */;
  %184 = sigmoid(%183) /* ty=Tensor[(16, 16, 12), float64] */;
  %185 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 16, 12), bool] */, dtype="int64") /* ty=Tensor[(16, 16, 12), int64] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="int64") /* ty=Tensor[(16, 16, 12), int64] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %189 = cast(%var_399, dtype="float64") /* ty=Tensor[(16, 16, 12), float64] */;
  %190 = logical_or(%170, %171) /* ty=Tensor[(16, 16, 12), bool] */;
  %191 = %182.0;
  %192 = left_shift(%187, %188) /* ty=Tensor[(16, 16, 12), int64] */;
  %193 = sinh(%189) /* ty=Tensor[(16, 16, 12), float64] */;
  (%190, %177, %var_417, %191, %192, %193)
}

def @func_3676() -> (Tensor[(10, 14, 13), float64],) {
  %194 = @func_2407() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %195 = %194.0;
  (%195,)
}

def @func_4384() -> (Tensor[(15, 11, 6), float32],) {
  %196 = @func_2679() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %197 = %196.0;
  (%197,)
}

def @func_4881() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %198 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  %199 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
  (%198, %199)
}

def @func_3024() -> (Tensor[(10, 14, 13), float64],) {
  %200 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
  (%200,)
}

def @func_2647(%var_2622: Tensor[(4, 9, 5), float32]) -> (Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), uint32], Tensor[(600), float64], Tensor[(1820), float64], Tensor[(10, 14, 13), float64], Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), float64]) {
  %201 = cast(%var_2622, dtype="float64") /* ty=Tensor[(4, 9, 5), float64] */;
  %202 = cast(meta[relay.Constant][15] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %203 = cast(meta[relay.Constant][16] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %204 = cast(meta[relay.Constant][16] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %205 = reshape(%202, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %206 = reshape(%203, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %207 = reshape(%204, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %208 = @func_1396(%205, %206, %207) /* ty=(Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) */;
  %209 = cast(%var_2622, dtype="float32") /* ty=Tensor[(4, 9, 5), float32] */;
  %210 = atanh(%209) /* ty=Tensor[(4, 9, 5), float32] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(4, 9, 5), float64] */;
  %212 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %213 = cosh(%201) /* ty=Tensor[(4, 9, 5), float64] */;
  %214 = %208.2;
  %215 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %216 = acos(%211) /* ty=Tensor[(4, 9, 5), float64] */;
  %217 = %212.0;
  (%213, %214, meta[relay.Constant][15] /* ty=Tensor[(600), float64] */, meta[relay.Constant][16] /* ty=Tensor[(1820), float64] */, %215, %216, %217)
}

def @func_3808() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %218 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %219 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %220 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %221 = %218.0;
  %222 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
  %223 = %219.0;
  %224 = %220.0;
  (%221, %222, %223, %224)
}

def @func_5804(%var_5798: Tensor[(3072), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(16, 16, 12), bool], Tensor[(3072), bool], Tensor[(126), int32]) {
  %225 = cast(%var_5798, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %226 = cast(meta[relay.Constant][17] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
  %227 = reshape(%225, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), bool] */;
  %228 = reshape(%226, newshape=[63, 2]) /* ty=Tensor[(63, 2), int32] */;
  %229 = @func_451(%227, %228) /* ty=(Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) */;
  %230 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  %231 = %229.0;
  (%230, %231, %var_5798, meta[relay.Constant][17] /* ty=Tensor[(126), int32] */)
}

def @func_6756(%var_6734: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) {
  %232 = @func_4005() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %233 = cast(%var_6734, dtype="int32") /* ty=Tensor[(126), int32] */;
  %234 = cast(%var_6734, dtype="int32") /* ty=Tensor[(126), int32] */;
  %235 = reshape(%233, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %236 = reshape(%234, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %237 = @func_286(%235, %236) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %238 = @func_6223() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %239 = %232.0;
  %240 = %237.0;
  %241 = %238.0;
  (%239, %240, %var_6734, %241)
}

def @func_2188(%var_2176: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float32], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) {
  %242 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %243 = %242.0;
  %244 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 14, 13), float64] */, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %248 = logical_xor(%246, %247) /* ty=Tensor[(10, 14, 13), uint32] */;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %250 = cast(%var_2176, dtype="int32") /* ty=Tensor[(126), int32] */;
  %251 = cast(%var_2176, dtype="int32") /* ty=Tensor[(126), int32] */;
  %252 = reshape(%250, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %253 = reshape(%251, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %254 = @func_286(%252, %253) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %256 = acosh(%255) /* ty=Tensor[(10, 14, 13), float64] */;
  %257 = cast(%248, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %261 = maximum(%259, %260) /* ty=Tensor[(10, 14, 13), int32] */;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %263 = asin(%249) /* ty=Tensor[(10, 14, 13), float32] */;
  %264 = %254.0;
  %265 = acos(%262) /* ty=Tensor[(10, 14, 13), float64] */;
  (%263, %264, %var_2176, %265)
}

def @func_7378() -> (Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(5, 198), float32]) {
  %266 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %267 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 198), float32] */, dtype="float32") /* ty=Tensor[(5, 198), float32] */;
  %268 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 198), float32] */, dtype="uint8") /* ty=Tensor[(5, 198), uint8] */;
  %269 = reshape(%267, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), float32] */;
  %270 = reshape(%268, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), uint8] */;
  %271 = @func_5474(%269, %270) /* ty=(Tensor[(15, 11, 6), int32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 11, 6), bool]) */;
  %272 = @func_5017() /* ty=Tensor[(756), float64] */;
  %273 = %266.0;
  %274 = %271.2;
  (%272, %273, %274, meta[relay.Constant][19] /* ty=Tensor[(5, 198), float32] */)
}

def @func_5585(%var_5553: Tensor[(8, 8, 10), float32], %var_5568: Tensor[(8, 8, 10), uint16]) -> (Tensor[(8, 8, 10), uint64],) {
  %275 = cast(%var_5553, dtype="float32") /* ty=Tensor[(8, 8, 10), float32] */;
  %276 = tan(%275) /* ty=Tensor[(8, 8, 10), float32] */;
  %277 = cast(%276, dtype="uint16") /* ty=Tensor[(8, 8, 10), uint16] */;
  %278 = shape_of(%var_5553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%var_5553, dtype="uint16") /* ty=Tensor[(8, 8, 10), uint16] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %281 = bitwise_and(%279, %280) /* ty=Tensor[(8, 8, 10), uint16] */;
  %282 = cast(%var_5568, dtype="uint64") /* ty=Tensor[(8, 8, 10), uint64] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="uint64") /* ty=Tensor[(8, 8, 10), uint64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %286 = minimum(%284, %285) /* ty=Tensor[(8, 8, 10), uint64] */;
  (%286,)
}

def @func_6449() -> (Tensor[(10, 14, 13), float64],) {
  %287 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
  (%287,)
}

def @func_7273() -> (Tensor[(756), float64], Tensor[(10, 14, 13), float64]) {
  %288 = @func_4961() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) */;
  %289 = @func_4961() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) */;
  %290 = %288.2;
  %291 = %289.0;
  (%290, %291)
}

def @func_4193(%var_4184: bool, %var_4185: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) {
  %292 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %293 = %292.0;
  %294 = cast(%293, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %295 = sqrt(%294) /* ty=Tensor[(10, 14, 13), float32] */;
  %296 = cast(%293, dtype="uint8") /* ty=Tensor[(10, 14, 13), uint8] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="uint8") /* ty=Tensor[(10, 14, 13), uint8] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %300 = cast(%var_4184, dtype="bool") /* ty=bool */;
  %301 = cast(%var_4185, dtype="bool") /* ty=Tensor[(80), bool] */;
  %302 = reshape(%300, newshape=[]) /* ty=bool */;
  %303 = reshape(%301, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), bool] */;
  %304 = @func_3974() /* ty=(Tensor[(16, 15, 10), bool],) */;
  %305 = bitwise_and(%298, %299) /* ty=Tensor[(10, 14, 13), uint8] */;
  %306 = @func_3491(%302, %303) /* ty=Tensor[(1, 5, 16), bool] */;
  %307 = %304.0;
  (%305, %306, %var_4184, %var_4185, %307)
}

def @func_5095() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %308 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
  %309 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
  (%308, %309)
}

def @func_6223() -> (Tensor[(10, 14, 13), float64],) {
  %310 = @func_3268() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %311 = %310.0;
  (%311,)
}

def @func_5928(%var_5897: Tensor[(9, 15), float32], %var_5911: Tensor[(600), float64]) -> (Tensor[(9, 15), float32], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float64]) {
  %312 = cast(%var_5897, dtype="float32") /* ty=Tensor[(9, 15), float32] */;
  %313 = cast(%var_5911, dtype="float64") /* ty=Tensor[(600), float64] */;
  %314 = reshape(%313, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %315 = @func_1490(%314) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) */;
  %316 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 12), float64] */;
  %317 = reshape(%316, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float64] */;
  %318 = sqrt(%312) /* ty=Tensor[(9, 15), float32] */;
  %319 = %315.1;
  %320 = @func_3556(%317) /* ty=Tensor[(3, 6, 4), float64] */;
  (%318, %319, %var_5911, %320, meta[relay.Constant][20] /* ty=Tensor[(6, 12), float64] */)
}

def @func_6936(%var_6922: Tensor[(126, 1), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(1, 234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126, 1), int32]) {
  %321 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 234), bool] */, dtype="bool") /* ty=Tensor[(1, 234), bool] */;
  %322 = cast(meta[relay.Constant][22] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %323 = cast(meta[relay.Constant][23] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %324 = cast(%var_6922, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
  %325 = reshape(%321, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), bool] */;
  %326 = reshape(%322, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %327 = reshape(%323, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %328 = reshape(%324, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %329 = @func_3360(%325, %326, %327, %328) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) */;
  %330 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  %331 = %329.5;
  (%330, %331, meta[relay.Constant][21] /* ty=Tensor[(1, 234), bool] */, meta[relay.Constant][22] /* ty=Tensor[(140), uint8] */, meta[relay.Constant][23] /* ty=Tensor[(36), uint64] */, %var_6922)
}

def @func_2544(%var_2537: Tensor[(3, 7, 15), float64], %var_2540: Tensor[(3, 7, 15), float64]) -> (Tensor[(3, 7, 15), float64], Tensor[(3, 7, 15), bool]) {
  %332 = cast(%var_2537, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %333 = cast(%var_2540, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %334 = shape_of(%var_2537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%var_2537, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %337 = atan(%332) /* ty=Tensor[(3, 7, 15), float64] */;
  %338 = less_equal(%335, %336) /* ty=Tensor[(3, 7, 15), bool] */;
  (%337, %338)
}

def @func_1659() -> Tensor[(10, 14, 13), float64] {
  @func_1188() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_3621(%var_3591: Tensor[(8, 1, 15), int32], %var_3592: Tensor[(8, 3, 15), int32]) -> (Tensor[(8, 3, 15), int32], Tensor[(8, 1, 15), float32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %339 = cast(%var_3591, dtype="int32") /* ty=Tensor[(8, 1, 15), int32] */;
  %340 = cast(%var_3592, dtype="int32") /* ty=Tensor[(8, 3, 15), int32] */;
  %341 = cast(%var_3591, dtype="float32") /* ty=Tensor[(8, 1, 15), float32] */;
  %342 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %343 = maximum(%339, %340) /* ty=Tensor[(8, 3, 15), int32] */;
  %344 = asin(%341) /* ty=Tensor[(8, 1, 15), float32] */;
  %345 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
  %346 = %342.0;
  (%343, %344, %345, %346)
}

def @func_3944(%var_3931: Tensor[(72), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64], Tensor[(10, 14, 13), float32]) {
  %347 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %348 = cast(%var_3931, dtype="float64") /* ty=Tensor[(72), float64] */;
  %349 = reshape(%348, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float64] */;
  %350 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %353 = atan(%352) /* ty=Tensor[(10, 14, 13), float32] */;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %355 = %347.0;
  %356 = @func_3556(%349) /* ty=Tensor[(3, 6, 4), float64] */;
  %357 = log10(%354) /* ty=Tensor[(10, 14, 13), float32] */;
  (%355, %356, %var_3931, %357)
}

def @func_4399(%var_4386: Tensor[(13, 3, 10), int16], %var_4387: Tensor[(13, 3, 10), int16], %var_4391: Tensor[(13, 3, 10), int16]) -> (Tensor[(13, 3, 10), bool], Tensor[(13, 3, 10), uint32]) {
  %358 = cast(%var_4387, dtype="bool") /* ty=Tensor[(13, 3, 10), bool] */;
  %359 = shape_of(%var_4386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%var_4386, dtype="bool") /* ty=Tensor[(13, 3, 10), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = cast(%var_4391, dtype="uint32") /* ty=Tensor[(13, 3, 10), uint32] */;
  %363 = shape_of(%var_4386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_4386, dtype="uint32") /* ty=Tensor[(13, 3, 10), uint32] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %366 = not_equal(%360, %361) /* ty=Tensor[(13, 3, 10), bool] */;
  %367 = bitwise_and(%364, %365) /* ty=Tensor[(13, 3, 10), uint32] */;
  (%366, %367)
}

def @func_3420(%var_3379: Tensor[(10, 14, 13), float64]) -> Tensor[(10, 14, 13), uint16] {
  %368 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
  %369 = cast(%var_3379, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%371, %372) /* ty=Tensor[(10, 14, 13), uint16] */
}

def @func_5608() -> (Tensor[(10, 14, 13), float64],) {
  %373 = @func_5404() /* ty=Tensor[(10, 14, 13), float64] */;
  (%373,)
}

def @func_1066() -> (Tensor[(10, 14, 13), float64],) {
  %374 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %375 = tan(%374) /* ty=Tensor[(10, 14, 13), float64] */;
  (%375,)
}

def @func_3222() -> Tensor[(10, 14, 13), float64] {
  %376 = @func_2947() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %376.0
}

def @func_4061(%var_4051: Tensor[(112), uint8], %var_4052: Tensor[(70, 2), uint8]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) {
  %377 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %378 = cast(%var_4051, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %379 = cast(%var_4052, dtype="uint8") /* ty=Tensor[(70, 2), uint8] */;
  %380 = reshape(%378, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %381 = reshape(%379, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %382 = @func_2616(%380, %381) /* ty=(Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) */;
  %383 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  %384 = %377.2;
  %385 = %382.7;
  (%383, %384, %385, %var_4051, %var_4052)
}

def @func_3062(%var_3042: uint8) -> (Tensor[(10, 9, 7), uint8], Tensor[(10, 14, 13), float64]) {
  %386 = cast(%var_3042, dtype="uint8") /* ty=uint8 */;
  %387 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 9, 7), uint8] */, dtype="uint8") /* ty=Tensor[(10, 9, 7), uint8] */;
  %388 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %389 = bitwise_and(%386, %387) /* ty=Tensor[(10, 9, 7), uint8] */;
  %390 = %388.0;
  (%389, %390)
}

def @func_3183() -> Tensor[(10, 14, 13), float64] {
  %391 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %391.0
}

def @func_3749() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %392 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %393 = %392.0;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %395 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  %396 = cosh(%394) /* ty=Tensor[(10, 14, 13), float64] */;
  (%395, %396)
}

def @func_500(%var_466: Tensor[(4, 9), uint64], %var_475: Tensor[(126), int32], %var_495: Tensor[(3072), float64]) -> (Tensor[(4, 9), bool], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(6, 7, 3), int32], Tensor[(3072), int64]) {
  %397 = cast(%var_466, dtype="bool") /* ty=Tensor[(4, 9), bool] */;
  %398 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 9), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %399 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 9), uint64] */, dtype="bool") /* ty=Tensor[(4, 9), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %401 = cast(meta[relay.Constant][27] /* ty=Tensor[(3072), bool] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %402 = cast(%var_475, dtype="int32") /* ty=Tensor[(126), int32] */;
  %403 = reshape(%401, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), bool] */;
  %404 = reshape(%402, newshape=[63, 2]) /* ty=Tensor[(63, 2), int32] */;
  %405 = @func_451(%403, %404) /* ty=(Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) */;
  %406 = %405.1;
  %407 = cast(%406, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %408 = cast(%406, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %409 = reshape(%407, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %410 = reshape(%408, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %411 = @func_286(%409, %410) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %412 = cast(meta[relay.Constant][28] /* ty=Tensor[(3072), bool] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %413 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(3072), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %414 = cast(meta[relay.Constant][27] /* ty=Tensor[(3072), bool] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?), int8] */;
  %416 = right_shift(%414, %415) /* ty=Tensor[(3072), int8] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %418 = log(%417) /* ty=Tensor[(3072), float64] */;
  %419 = cast(%var_495, dtype="int64") /* ty=Tensor[(3072), int64] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(1), int32] */;
  %421 = cast(%418, dtype="int64") /* ty=Tensor[(3072), int64] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?), int64] */;
  %423 = less_equal(%399, %400) /* ty=Tensor[(4, 9), bool] */;
  %424 = %411.0;
  %425 = maximum(%421, %422) /* ty=Tensor[(3072), int64] */;
  (%423, %406, %var_475, %424, %425)
}

def @func_4820(%var_4794: Tensor[(8, 6, 5), float32], %var_4804: Tensor[(8, 6, 5), float32], %var_4816: Tensor[(8, 6, 5), bool]) -> (Tensor[(8, 6, 5), int16], Tensor[(8, 6, 5), bool]) {
  %426 = cast(%var_4794, dtype="float32") /* ty=Tensor[(8, 6, 5), float32] */;
  %427 = atanh(%426) /* ty=Tensor[(8, 6, 5), float32] */;
  %428 = cast(%427, dtype="int16") /* ty=Tensor[(8, 6, 5), int16] */;
  %429 = shape_of(%var_4794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_4794, dtype="int16") /* ty=Tensor[(8, 6, 5), int16] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %432 = cast(%var_4804, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
  %433 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%427, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = not_equal(%434, %435) /* ty=Tensor[(8, 6, 5), bool] */;
  %437 = cast(%var_4816, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = bitwise_or(%430, %431) /* ty=Tensor[(8, 6, 5), int16] */;
  %442 = less(%439, %440) /* ty=Tensor[(8, 6, 5), bool] */;
  (%441, %442)
}

def @func_5977(%var_5965: bool, %var_5966: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(80), bool], bool, Tensor[(80), bool]) {
  %443 = cast(%var_5965, dtype="bool") /* ty=bool */;
  %444 = cast(%var_5966, dtype="bool") /* ty=Tensor[(80), bool] */;
  %445 = reshape(%443, newshape=[]) /* ty=bool */;
  %446 = reshape(%444, newshape=[80]) /* ty=Tensor[(80), bool] */;
  %447 = @func_4193(%445, %446) /* ty=(Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) */;
  %448 = @func_1659() /* ty=Tensor[(10, 14, 13), float64] */;
  %449 = @func_5017() /* ty=Tensor[(756), float64] */;
  %450 = @func_5404() /* ty=Tensor[(10, 14, 13), float64] */;
  %451 = %447.3;
  (%448, %449, %450, %451, %var_5965, %var_5966)
}

def @func_5072() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %452 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
  %453 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
  (%452, %453)
}

def @func_7118() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %454 = @func_2947() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %455 = %454.0;
  %456 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  (%455, %456)
}

def @func_6230() -> Tensor[(10, 14, 13), float64] {
  %457 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %457.0
}

def @func_4254(%var_4214: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  %458 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %459 = %458.0;
  %460 = cast(%var_4214, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %464 = add(%462, %463) /* ty=Tensor[(10, 14, 13), uint32] */;
  %465 = cast(%459, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = less(%467, %468) /* ty=Tensor[(10, 14, 13), bool] */;
  %470 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  (%469, %470)
}

def @func_703(%var_697: Tensor[(15, 4, 10), float64]) -> (Tensor[(15, 4, 10), float64],) {
  %471 = cast(%var_697, dtype="float64") /* ty=Tensor[(15, 4, 10), float64] */;
  %472 = sin(%471) /* ty=Tensor[(15, 4, 10), float64] */;
  (%472,)
}

def @func_1241(%var_1235: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), float64],) {
  %473 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %474 = %473.0;
  %475 = cast(%var_1235, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %479 = floor_mod(%477, %478) /* ty=Tensor[(10, 14, 13), float64] */;
  (%479,)
}

def @func_5543() -> Tensor[(10, 14, 13), float64] {
  %480 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %480.2
}

def @func_2324() -> (Tensor[(10, 14, 13), float64],) {
  %481 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %482 = %481.0;
  (%482,)
}

def @func_5404() -> Tensor[(10, 14, 13), float64] {
  %483 = @func_4881() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %483.1
}

def @func_6883() -> (Tensor[(10, 14, 13), float64],) {
  %484 = @func_1659() /* ty=Tensor[(10, 14, 13), float64] */;
  (%484,)
}

def @func_2212() -> Tensor[(10, 14, 13), float64] {
  %485 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  sigmoid(%487) /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_2010() -> (Tensor[(10, 14, 13), float64],) {
  %488 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %490 = exp(%489) /* ty=Tensor[(10, 14, 13), float64] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %492 = cos(%491) /* ty=Tensor[(10, 14, 13), float64] */;
  (%492,)
}

def @func_4683() -> Tensor[(10, 14, 13), float32] {
  %493 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %494 = %493.2;
  %495 = cast(%494, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  atanh(%495) /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_4005() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %496 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %497 = @func_3268() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %498 = %496.0;
  %499 = %497.0;
  (%498, %499)
}

def @func_1120() -> (Tensor[(10, 14, 13), float64],) {
  %500 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %501 = %500.0;
  (%501,)
}

def @func_3188() -> Tensor[(10, 14, 13), float64] {
  %502 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %502.0
}

def @func_4150() -> (Tensor[(16, 13, 2), float32],) {
  %503 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 13, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 2), float32] */;
  %504 = exp(%503) /* ty=Tensor[(16, 13, 2), float32] */;
  (%504,)
}

def @func_286(%var_275: Tensor[(6, 7, 3), int32], %var_276: Tensor[(6, 7, 3), int32]) -> (Tensor[(6, 7, 3), int32],) {
  %505 = cast(%var_276, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %506 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_275, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %509 = left_shift(%507, %508) /* ty=Tensor[(6, 7, 3), int32] */;
  (%509,)
}

def @func_3556(%var_3545: Tensor[(3, 6, 4), float64]) -> Tensor[(3, 6, 4), float64] {
  %510 = cast(%var_3545, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
  sigmoid(%510) /* ty=Tensor[(3, 6, 4), float64] */
}

def @func_7020(%var_7009: Tensor[(12, 50), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64], Tensor[(15, 4, 10), float64], Tensor[(12, 50), float64]) {
  %511 = cast(meta[relay.Constant][30] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %512 = cast(meta[relay.Constant][30] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %513 = reshape(%511, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %514 = reshape(%512, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %515 = cast(%var_7009, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %516 = reshape(%515, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %517 = @func_703(%516) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %518 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
  %519 = @func_4702(%513, %514) /* ty=Tensor[(14, 6, 9), float64] */;
  %520 = %517.0;
  (%518, %519, meta[relay.Constant][30] /* ty=Tensor[(756), float64] */, %520, %var_7009)
}

def @func_5175(%var_5172: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool]) {
  %521 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %522 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %523 = cast(%var_5172, dtype="bool") /* ty=Tensor[(80), bool] */;
  %524 = reshape(%522, newshape=[]) /* ty=bool */;
  %525 = reshape(%523, newshape=[80]) /* ty=Tensor[(80), bool] */;
  %526 = @func_4193(%524, %525) /* ty=(Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) */;
  %527 = %521.0;
  %528 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  %529 = %526.1;
  (%527, %528, %529, True /* ty=bool */, %var_5172)
}

def @func_4702(%var_4690: Tensor[(14, 6, 9), float64], %var_4691: Tensor[(14, 6, 9), float64]) -> Tensor[(14, 6, 9), float64] {
  %530 = cast(%var_4691, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
  %531 = shape_of(%var_4690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_4690, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%532, %533) /* ty=Tensor[(14, 6, 9), float64] */
}

def @func_6349() -> Tensor[(10, 14, 13), float32] {
  @func_6195() /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_4284() -> Tensor[(10, 14, 13), float64] {
  %534 = @func_2407() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %534.0
}

def @func_1188() -> Tensor[(10, 14, 13), float64] {
  %535 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %535.0
}

def @func_1530(%var_1510: Tensor[(2, 7, 1), uint8], %var_1511: Tensor[(2, 7, 8), uint8], %var_1519: Tensor[(2, 7, 10), uint8]) -> (Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) {
  %536 = cast(%var_1510, dtype="uint8") /* ty=Tensor[(2, 7, 1), uint8] */;
  %537 = cast(%var_1511, dtype="uint8") /* ty=Tensor[(2, 7, 8), uint8] */;
  %538 = cast(%var_1510, dtype="bool") /* ty=Tensor[(2, 7, 1), bool] */;
  %539 = cast(%var_1519, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
  %540 = left_shift(%536, %537) /* ty=Tensor[(2, 7, 8), uint8] */;
  %541 = less(%538, %539) /* ty=Tensor[(2, 7, 10), bool] */;
  (%540, %541)
}

def @func_821(%var_802: Tensor[(10, 9, 11), int8]) -> (Tensor[(10, 9, 11), bool],) {
  %542 = cast(%var_802, dtype="int8") /* ty=Tensor[(10, 9, 11), int8] */;
  %543 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 11), int8] */, dtype="int8") /* ty=Tensor[(10, 9, 11), int8] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %546 = minimum(%544, %545) /* ty=Tensor[(10, 9, 11), int8] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
  %548 = sinh(%547) /* ty=Tensor[(10, 9, 11), float32] */;
  %549 = cast(%546, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %553 = not_equal(%551, %552) /* ty=Tensor[(10, 9, 11), bool] */;
  (%553,)
}

def @func_5237(%var_5227: bool) -> (Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(40, 2), float64]) {
  %554 = @func_4496() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) */;
  %555 = cast(%var_5227, dtype="bool") /* ty=bool */;
  %556 = cast(meta[relay.Constant][32] /* ty=Tensor[(40, 2), bool] */, dtype="bool") /* ty=Tensor[(40, 2), bool] */;
  %557 = reshape(%555, newshape=[]) /* ty=bool */;
  %558 = reshape(%556, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), bool] */;
  %559 = cast(meta[relay.Constant][32] /* ty=Tensor[(40, 2), bool] */, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
  %560 = %554.0;
  %561 = @func_3491(%557, %558) /* ty=Tensor[(1, 5, 16), bool] */;
  %562 = rsqrt(%559) /* ty=Tensor[(40, 2), float64] */;
  (%560, %561, %var_5227, %562)
}

def @func_4582() -> (Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  %563 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %565 = cast(%563, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %566 = reshape(%565, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float32] */;
  %567 = @func_2313(%566) /* ty=(Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) */;
  %568 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %569 = erf(%564) /* ty=Tensor[(10, 14, 13), float32] */;
  %570 = %567.1;
  %571 = %568.0;
  (%569, %570, %571)
}

def @func_1216() -> (Tensor[(10, 14, 13), float64],) {
  %572 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  (%572,)
}

def @func_1955() -> (Tensor[(10, 14, 13), float64],) {
  %573 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %574 = %573.0;
  (%574,)
}

def @func_5725() -> (Tensor[(10, 14, 13), int8],) {
  %575 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  %576 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 14, 13), float64] */, dtype="int8") /* ty=Tensor[(10, 14, 13), int8] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="int8") /* ty=Tensor[(10, 14, 13), int8] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %580 = subtract(%578, %579) /* ty=Tensor[(10, 14, 13), int8] */;
  (%580,)
}

def @func_3491(%var_3485: bool, %var_3486: Tensor[(1, 5, 16), bool]) -> Tensor[(1, 5, 16), bool] {
  %581 = cast(%var_3485, dtype="bool") /* ty=bool */;
  %582 = cast(%var_3486, dtype="bool") /* ty=Tensor[(1, 5, 16), bool] */;
  logical_or(%581, %582) /* ty=Tensor[(1, 5, 16), bool] */
}

def @func_6195() -> Tensor[(10, 14, 13), float32] {
  %583 = @func_4496() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) */;
  %584 = %583.1;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  log2(%585) /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_6162() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %586 = @func_3234() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %587 = %586.0;
  %588 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
  (%587, %588)
}

def @func_3360(%var_3302: Tensor[(2, 9, 13), bool], %var_3326: Tensor[(140), uint8], %var_3350: Tensor[(36), uint64], %var_3351: Tensor[(126), int32]) -> (Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) {
  %589 = cast(%var_3302, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %590 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = cast(%var_3302, dtype="int16") /* ty=Tensor[(2, 9, 13), int16] */;
  %594 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int16") /* ty=Tensor[(2, 9, 13), int16] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %597 = logical_xor(%595, %596) /* ty=Tensor[(2, 9, 13), int16] */;
  %598 = cast(%597, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %599 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(112, 1), uint8] */, dtype="uint8") /* ty=Tensor[(112, 1), uint8] */;
  %603 = cast(%var_3326, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %604 = reshape(%602, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %605 = reshape(%603, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %606 = @func_2616(%604, %605) /* ty=(Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) */;
  %607 = cast(%var_3350, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %608 = cast(%var_3351, dtype="int32") /* ty=Tensor[(126), int32] */;
  %609 = cast(meta[relay.Constant][36] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %610 = reshape(%607, newshape=[4, 9]) /* ty=Tensor[(4, 9), uint64] */;
  %611 = reshape(%608, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %612 = reshape(%609, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %613 = @func_500(%610, %611, %612) /* ty=(Tensor[(4, 9), bool], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(6, 7, 3), int32], Tensor[(3072), int64]) */;
  %614 = logical_and(%591, %592) /* ty=Tensor[(2, 9, 13), bool] */;
  %615 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
  %616 = equal(%600, %601) /* ty=Tensor[(2, 9, 13), bool] */;
  %617 = %606.1;
  %618 = %613.4;
  (%614, %615, %616, %617, meta[relay.Constant][35] /* ty=Tensor[(112, 1), uint8] */, %var_3326, %618, %var_3350, %var_3351, meta[relay.Constant][36] /* ty=Tensor[(3072), float64] */)
}

def @func_2313(%var_2307: Tensor[(10, 14, 13), float32]) -> (Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) {
  %619 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %622 = reshape(%621, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %623 = @func_1744(%622) /* ty=(Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) */;
  %624 = cast(%620, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %625 = rsqrt(%624) /* ty=Tensor[(10, 14, 13), float32] */;
  %626 = cast(%var_2307, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %630 = %623.2;
  %631 = greater(%628, %629) /* ty=Tensor[(10, 14, 13), bool] */;
  (%630, %631)
}

def @func_7201(%var_7163: Tensor[(9, 13, 11), float64], %var_7164: Tensor[(9, 13, 11), float64]) -> (Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float32], Tensor[(10, 14, 13), float64], Tensor[(9, 13, 11), float32]) {
  %632 = cast(%var_7164, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
  %633 = shape_of(%var_7163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%var_7163, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %636 = cast(%var_7164, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %637 = cast(%var_7163, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %638 = power(%634, %635) /* ty=Tensor[(9, 13, 11), float64] */;
  %639 = tan(%636) /* ty=Tensor[(9, 13, 11), float32] */;
  %640 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
  %641 = asinh(%637) /* ty=Tensor[(9, 13, 11), float32] */;
  (%638, %639, %640, %641)
}

def @func_5474(%var_5414: Tensor[(15, 11, 6), float32], %var_5462: Tensor[(15, 11, 6), uint8]) -> (Tensor[(15, 11, 6), int32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 11, 6), bool]) {
  %642 = @func_4384() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %643 = %642.0;
  %644 = cast(%var_5414, dtype="uint8") /* ty=Tensor[(15, 11, 6), uint8] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="uint8") /* ty=Tensor[(15, 11, 6), uint8] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %648 = logical_xor(%646, %647) /* ty=Tensor[(15, 11, 6), uint8] */;
  %649 = cast(%var_5414, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %653 = @func_2407() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %654 = cast(%var_5462, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %655 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%648, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %658 = right_shift(%651, %652) /* ty=Tensor[(15, 11, 6), int32] */;
  %659 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  %660 = %653.0;
  %661 = equal(%656, %657) /* ty=Tensor[(15, 11, 6), bool] */;
  (%658, %659, %660, %661)
}

def @func_5756() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %662 = @func_1634() /* ty=(Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %663 = @func_4582() /* ty=(Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) */;
  %664 = %662.1;
  %665 = %663.2;
  (%664, %665)
}

def @func_2679() -> (Tensor[(15, 11, 6), float32],) {
  %666 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %667 = atan(%666) /* ty=Tensor[(15, 11, 6), float32] */;
  (%667,)
}

def @func_3974() -> (Tensor[(16, 15, 10), bool],) {
  %668 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 15, 10), int16] */, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %669 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(16, 15, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 15, 10), int16] */, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = less(%670, %671) /* ty=Tensor[(16, 15, 10), bool] */;
  (%672,)
}

def @func_1490(%var_1484: Tensor[(600), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) {
  %673 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %674 = cast(%var_1484, dtype="float64") /* ty=Tensor[(600), float64] */;
  %675 = reshape(%674, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %676 = @func_703(%675) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %677 = %673.0;
  %678 = %676.0;
  (%677, %678, %var_1484)
}

def @func_3234() -> (Tensor[(10, 14, 13), float64],) {
  %679 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  (%679,)
}

def @func_6083(%var_6071: Tensor[(72), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64]) {
  %680 = @func_3268() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %681 = cast(%var_6071, dtype="float64") /* ty=Tensor[(72), float64] */;
  %682 = reshape(%681, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float64] */;
  %683 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
  %684 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %685 = %680.0;
  %686 = @func_3556(%682) /* ty=Tensor[(3, 6, 4), float64] */;
  (%683, %684, %685, %686, %var_6071)
}

def @func_5878() -> (Tensor[(10, 14, 13), float32], Tensor[(70, 2), uint8]) {
  %687 = @func_4683() /* ty=Tensor[(10, 14, 13), float32] */;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %689 = reshape(%688, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %690 = @func_1744(%689) /* ty=(Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) */;
  %691 = %690.4;
  (%687, %691)
}

def @func_3855(%var_3830: int32, %var_3831: Tensor[(4, 10, 6), int32]) -> (Tensor[(4, 10, 6), bool],) {
  %692 = cast(%var_3830, dtype="bool") /* ty=bool */;
  %693 = cast(%var_3831, dtype="bool") /* ty=Tensor[(4, 10, 6), bool] */;
  %694 = greater(%692, %693) /* ty=Tensor[(4, 10, 6), bool] */;
  (%694,)
}

def @func_6254() -> (Tensor[(10, 14, 13), int8], Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), float64]) {
  %695 = @func_5725() /* ty=(Tensor[(10, 14, 13), int8],) */;
  %696 = @func_6195() /* ty=Tensor[(10, 14, 13), float32] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %698 = reshape(%697, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %699 = @func_1241(%698) /* ty=(Tensor[(10, 14, 13), float64],) */;
  %700 = %695.0;
  %701 = %699.0;
  (%700, %696, %701)
}

def @func_1396(%var_1353: Tensor[(600), float64], %var_1359: Tensor[(10, 14, 13), float64], %var_1389: Tensor[(10, 14, 13), float64]) -> (Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) {
  %702 = cast(%var_1353, dtype="float64") /* ty=Tensor[(600), float64] */;
  %703 = reshape(%702, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %704 = @func_703(%703) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %705 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %708 = log(%707) /* ty=Tensor[(10, 14, 13), float64] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %710 = asinh(%709) /* ty=Tensor[(10, 14, 13), float64] */;
  %711 = cast(%var_1359, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %715 = power(%713, %714) /* ty=Tensor[(10, 14, 13), float32] */;
  %716 = cast(%715, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %717 = shape_of(%var_1359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%var_1359, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %720 = cast(%var_1389, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %721 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%710, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %724 = %704.0;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(15, 4, 10), float64] */;
  %726 = reshape(%725, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %727 = @func_703(%726) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %728 = right_shift(%718, %719) /* ty=Tensor[(10, 14, 13), uint32] */;
  %729 = logical_or(%722, %723) /* ty=Tensor[(10, 14, 13), bool] */;
  %730 = %727.0;
  (%724, %var_1353, %728, %729, %730)
}

def @func_5017() -> Tensor[(756), float64] {
  %731 = @func_4961() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) */;
  %731.2
}

def @func_2578(%var_2552: Tensor[(9, 3, 4), float32]) -> (Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), bool], Tensor[(10, 14, 13), float64], Tensor[(21, 6), int32]) {
  %732 = cast(%var_2552, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
  %733 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(9, 3, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %736 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 3, 4), float32] */, dtype="bool") /* ty=Tensor[(9, 3, 4), bool] */;
  %737 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(9, 3, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 3, 4), float32] */, dtype="bool") /* ty=Tensor[(9, 3, 4), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = cast(meta[relay.Constant][42] /* ty=Tensor[(21, 6), int32] */, dtype="int32") /* ty=Tensor[(21, 6), int32] */;
  %741 = reshape(%740, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %742 = @func_2188(%741) /* ty=(Tensor[(10, 14, 13), float32], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) */;
  %743 = floor_mod(%734, %735) /* ty=Tensor[(9, 3, 4), float32] */;
  %744 = equal(%738, %739) /* ty=Tensor[(9, 3, 4), bool] */;
  %745 = %742.3;
  (%743, %744, %745, meta[relay.Constant][42] /* ty=Tensor[(21, 6), int32] */)
}

def @func_6686(%var_6627: Tensor[(112), uint8], %var_6628: Tensor[(140), uint8], %var_6657: bool, %var_6658: Tensor[(80), bool], %var_6681: Tensor[(3072), bool]) -> (Tensor[(35, 4), uint8], Tensor[(112), uint8], Tensor[(140), uint8], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(10, 14, 13), float32], Tensor[(3072), bool], Tensor[(3072), bool]) {
  %746 = @func_6195() /* ty=Tensor[(10, 14, 13), float32] */;
  %747 = cast(%746, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %748 = cast(%var_6627, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %749 = cast(%var_6628, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %750 = reshape(%747, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %751 = reshape(%748, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %752 = reshape(%749, newshape=[35, 4]) /* ty=Tensor[(35, 4), uint8] */;
  %753 = @func_2736(%750, %751, %752) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) */;
  %754 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %755 = cast(%var_6657, dtype="bool") /* ty=bool */;
  %756 = cast(%var_6658, dtype="bool") /* ty=Tensor[(80), bool] */;
  %757 = reshape(%755, newshape=[]) /* ty=bool */;
  %758 = reshape(%756, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), bool] */;
  %759 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
  %760 = cast(%746, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %764 = cast(%var_6681, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %765 = reshape(%764, newshape=[3072]) /* ty=Tensor[(3072), bool] */;
  %766 = @func_5804(%765) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(16, 16, 12), bool], Tensor[(3072), bool], Tensor[(126), int32]) */;
  %767 = %753.5;
  %768 = %754.0;
  %769 = @func_3491(%757, %758) /* ty=Tensor[(1, 5, 16), bool] */;
  %770 = divide(%762, %763) /* ty=Tensor[(10, 14, 13), float32] */;
  %771 = %766.2;
  (%767, %var_6627, %var_6628, %768, %769, %var_6657, %var_6658, %770, %771, %var_6681)
}

def @func_3480() -> (Tensor[(10, 14, 13), bool],) {
  %772 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %773 = %772.0;
  %774 = @func_2947() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %775 = %774.0;
  %776 = cast(%775, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %777 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%773, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = greater_equal(%778, %779) /* ty=Tensor[(10, 14, 13), bool] */;
  (%780,)
}

def @func_2024(%var_2021: Tensor[(9, 13, 11), float32]) -> (Tensor[(9, 13, 11), float32],) {
  %781 = cast(%var_2021, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %782 = asin(%781) /* ty=Tensor[(9, 13, 11), float32] */;
  (%782,)
}

def @func_2947() -> (Tensor[(10, 14, 13), float64],) {
  %783 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
  (%783,)
}

def @func_4904() -> (Tensor[(15, 11, 6), float32],) {
  %784 = @func_4384() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %785 = %784.0;
  (%785,)
}

def @func_2760() -> (Tensor[(10, 14, 13), float64],) {
  %786 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %787 = %786.0;
  (%787,)
}

def @func_4496() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) {
  %788 = @func_4355() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %789 = %788.0;
  %790 = @func_3723() /* ty=Tensor[(10, 14, 13), bool] */;
  (%789, %790)
}

def @func_6413(%var_6398: Tensor[(7, 1, 16), uint64]) -> Tensor[(7, 10, 16), uint64] {
  %791 = cast(%var_6398, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
  %792 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 10, 16), uint64] */, dtype="uint64") /* ty=Tensor[(7, 10, 16), uint64] */;
  add(%791, %792) /* ty=Tensor[(7, 10, 16), uint64] */
}

def @func_6849() -> (Tensor[(10, 14, 13), float64], Tensor[(7, 10, 16), uint64], Tensor[(56, 2), uint64]) {
  %793 = @func_3749() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %794 = cast(meta[relay.Constant][44] /* ty=Tensor[(56, 2), uint64] */, dtype="uint64") /* ty=Tensor[(56, 2), uint64] */;
  %795 = reshape(%794, newshape=[7, 1, 16]) /* ty=Tensor[(7, 1, 16), uint64] */;
  %796 = %793.1;
  %797 = @func_6413(%795) /* ty=Tensor[(7, 10, 16), uint64] */;
  (%796, %797, meta[relay.Constant][44] /* ty=Tensor[(56, 2), uint64] */)
}

def @func_6501() -> Tensor[(10, 14, 13), float64] {
  %798 = @func_3676() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %798.0
}

def @func_3290() -> Tensor[(10, 14, 13), float64] {
  %799 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %799.0
}

def @func_6598() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 80), bool]) {
  %800 = @func_6223() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %801 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 80), bool] */, dtype="bool") /* ty=Tensor[(1, 80), bool] */;
  %802 = reshape(%801, newshape=[80]) /* ty=Tensor[(80), bool] */;
  %803 = @func_5175(%802) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool]) */;
  %804 = %800.0;
  %805 = %803.1;
  (%804, %805, meta[relay.Constant][45] /* ty=Tensor[(1, 80), bool] */)
}

def @func_3723() -> Tensor[(10, 14, 13), bool] {
  %806 = @func_3480() /* ty=(Tensor[(10, 14, 13), bool],) */;
  %806.0
}

def @func_4355() -> (Tensor[(10, 14, 13), float64],) {
  %807 = @func_1873() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %808 = %807.0;
  (%808,)
}

def @func_3661(%var_3649: Tensor[(234), bool], %var_3650: Tensor[(140), uint8], %var_3651: Tensor[(36), uint64], %var_3652: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(2, 9, 13), bool], Tensor[(234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126), int32]) {
  %809 = @func_1873() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %810 = %809.0;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %812 = reshape(%811, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float32] */;
  %813 = @func_2313(%812) /* ty=(Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) */;
  %814 = cast(%var_3649, dtype="bool") /* ty=Tensor[(234), bool] */;
  %815 = cast(%var_3650, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %816 = cast(%var_3651, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %817 = cast(%var_3652, dtype="int32") /* ty=Tensor[(126), int32] */;
  %818 = reshape(%814, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), bool] */;
  %819 = reshape(%815, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %820 = reshape(%816, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %821 = reshape(%817, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %822 = @func_3360(%818, %819, %820, %821) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) */;
  %823 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  %824 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  %825 = %813.1;
  %826 = %822.2;
  (%823, %810, %824, %825, %826, %var_3649, %var_3650, %var_3651, %var_3652)
}

def @func_4961() -> (Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) {
  %827 = cast(meta[relay.Constant][46] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %828 = cast(meta[relay.Constant][46] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %829 = reshape(%827, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %830 = reshape(%828, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %831 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  %832 = @func_4702(%829, %830) /* ty=Tensor[(14, 6, 9), float64] */;
  (%831, %832, meta[relay.Constant][46] /* ty=Tensor[(756), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6195() -> Tensor[(10, 14, 13), float32] {
  %0 = @func_4496() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  log2(%2) /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_2867() -> Tensor[(10, 14, 13), float64] {
  %4 = fn () -> Tensor[(10, 14, 13), float64] {
    %3 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %3.0
  };
  %4() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_5178(%var_5176: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool]) {
  @func_5175(%var_5176) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool]) */
}

def @func_7055(%var_7052: Tensor[(234), bool], %var_7053: Tensor[(1, 36), uint64], %var_7054: Tensor[(126, 1), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(140), uint8], Tensor[(1, 36), uint64], Tensor[(126, 1), int32], Tensor[(234), float64]) {
  @func_7050(%var_7052, %var_7053, %var_7054) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(140), uint8], Tensor[(1, 36), uint64], Tensor[(126, 1), int32], Tensor[(234), float64]) */
}

def @func_5341() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  @func_5339() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) */
}

def @func_4583() -> (Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  %14 = fn () -> (Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
    %5 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
    %6 = cast(%5, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %7 = cast(%5, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %8 = reshape(%7, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float32] */;
    %9 = @func_2313(%8) /* ty=(Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) */;
    %10 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %11 = erf(%6) /* ty=Tensor[(10, 14, 13), float32] */;
    %12 = %9.1;
    %13 = %10.0;
    (%11, %12, %13)
  };
  %14() /* ty=(Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) */
}

def @func_5981(%var_5979: bool, %var_5980: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(80), bool], bool, Tensor[(80), bool]) {
  @func_5977(%var_5979, %var_5980) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(80), bool], bool, Tensor[(80), bool]) */
}

def @func_505(%var_502: Tensor[(4, 9), uint64], %var_503: Tensor[(126), int32], %var_504: Tensor[(3072), float64]) -> (Tensor[(4, 9), bool], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(6, 7, 3), int32], Tensor[(3072), int64]) {
  @func_500(%var_502, %var_503, %var_504) /* ty=(Tensor[(4, 9), bool], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(6, 7, 3), int32], Tensor[(3072), int64]) */
}

def @func_4357() -> (Tensor[(10, 14, 13), float64],) {
  @func_4355() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_2761() -> (Tensor[(10, 14, 13), float64],) {
  %17 = fn () -> (Tensor[(10, 14, 13), float64],) {
    %15 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %16 = %15.0;
    (%16,)
  };
  %17() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_5878() -> (Tensor[(10, 14, 13), float32], Tensor[(70, 2), uint8]) {
  %18 = @func_4683() /* ty=Tensor[(10, 14, 13), float32] */;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %20 = reshape(%19, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %21 = @func_1744(%20) /* ty=(Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) */;
  %22 = %21.4;
  (%18, %22)
}

def @func_1659() -> Tensor[(10, 14, 13), float64] {
  @func_1188() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_7402(%var_7401: Tensor[(13, 15, 7), float64]) -> (Tensor[(13, 15, 7), float64],) {
  %25 = fn (%var_7387: Tensor[(13, 15, 7), float64]) -> (Tensor[(13, 15, 7), float64],) {
    %23 = cast(%var_7387, dtype="float64") /* ty=Tensor[(13, 15, 7), float64] */;
    %24 = tan(%23) /* ty=Tensor[(13, 15, 7), float64] */;
    (%24,)
  };
  %25(%var_7401) /* ty=(Tensor[(13, 15, 7), float64],) */
}

def @func_3065(%var_3063: uint8) -> (Tensor[(10, 9, 7), uint8], Tensor[(10, 14, 13), float64]) {
  @func_3062(%var_3063) /* ty=(Tensor[(10, 9, 7), uint8], Tensor[(10, 14, 13), float64]) */
}

def @func_4961() -> (Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) {
  %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %27 = cast(meta[relay.Constant][0] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %28 = reshape(%26, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %29 = reshape(%27, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %30 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  %31 = @func_4702(%28, %29) /* ty=Tensor[(14, 6, 9), float64] */;
  (%30, %31, meta[relay.Constant][0] /* ty=Tensor[(756), float64] */)
}

def @func_2949() -> (Tensor[(10, 14, 13), float64],) {
  @func_2947() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_2616(%var_2609: Tensor[(112), uint8], %var_2610: Tensor[(140), uint8]) -> (Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) {
  %32 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %33 = %32.0;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 14, 13), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %39 = logical_and(%36, %37) /* ty=Tensor[(10, 14, 13), bool] */;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %41 = cast(%33, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %42 = reshape(%38, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %43 = reshape(%40, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %44 = reshape(%41, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %45 = @func_1396(%42, %43, %44) /* ty=(Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %47 = reshape(%46, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %48 = @func_703(%47) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 14), uint8] */, dtype="uint8") /* ty=Tensor[(1, 14), uint8] */;
  %50 = cast(%var_2609, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %51 = cast(%var_2610, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %52 = reshape(%49, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), uint8] */;
  %53 = reshape(%50, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), uint8] */;
  %54 = reshape(%51, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint8] */;
  %55 = @func_1530(%52, %53, %54) /* ty=(Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) */;
  %56 = %45.4;
  %57 = %48.0;
  %58 = %55.0;
  (%39, %56, meta[relay.Constant][2] /* ty=Tensor[(600), float64] */, %57, %58, meta[relay.Constant][3] /* ty=Tensor[(1, 14), uint8] */, %var_2609, %var_2610)
}

def @func_6850() -> (Tensor[(10, 14, 13), float64], Tensor[(7, 10, 16), uint64], Tensor[(56, 2), uint64]) {
  %64 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(7, 10, 16), uint64], Tensor[(56, 2), uint64]) {
    %59 = @func_3749() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
    %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(56, 2), uint64] */, dtype="uint64") /* ty=Tensor[(56, 2), uint64] */;
    %61 = reshape(%60, newshape=[7, 1, 16]) /* ty=Tensor[(7, 1, 16), uint64] */;
    %62 = %59.1;
    %63 = @func_6413(%61) /* ty=Tensor[(7, 10, 16), uint64] */;
    (%62, %63, meta[relay.Constant][4] /* ty=Tensor[(56, 2), uint64] */)
  };
  %64() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(7, 10, 16), uint64], Tensor[(56, 2), uint64]) */
}

def @func_6230() -> Tensor[(10, 14, 13), float64] {
  %65 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %65.0
}

def @func_7378() -> (Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(5, 198), float32]) {
  %66 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 198), float32] */, dtype="float32") /* ty=Tensor[(5, 198), float32] */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 198), float32] */, dtype="uint8") /* ty=Tensor[(5, 198), uint8] */;
  %69 = reshape(%67, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), float32] */;
  %70 = reshape(%68, newshape=[15, 11, 6]) /* ty=Tensor[(15, 11, 6), uint8] */;
  %71 = @func_5474(%69, %70) /* ty=(Tensor[(15, 11, 6), int32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 11, 6), bool]) */;
  %72 = @func_5017() /* ty=Tensor[(756), float64] */;
  %73 = %66.0;
  %74 = %71.2;
  (%72, %73, %74, meta[relay.Constant][5] /* ty=Tensor[(5, 198), float32] */)
}

def @func_2547(%var_2545: Tensor[(3, 7, 15), float64], %var_2546: Tensor[(3, 7, 15), float64]) -> (Tensor[(3, 7, 15), float64], Tensor[(3, 7, 15), bool]) {
  %82 = fn (%var_2537: Tensor[(3, 7, 15), float64], %var_2540: Tensor[(3, 7, 15), float64]) -> (Tensor[(3, 7, 15), float64], Tensor[(3, 7, 15), bool]) {
    %75 = cast(%var_2537, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
    %76 = cast(%var_2540, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
    %77 = shape_of(%var_2537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%var_2537, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %80 = atan(%75) /* ty=Tensor[(3, 7, 15), float64] */;
    %81 = less_equal(%78, %79) /* ty=Tensor[(3, 7, 15), bool] */;
    (%80, %81)
  };
  %82(%var_2545, %var_2546) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(3, 7, 15), bool]) */
}

def @func_1955() -> (Tensor[(10, 14, 13), float64],) {
  %83 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %84 = %83.0;
  (%84,)
}

def @func_3423(%var_3421: Tensor[(10, 14, 13), float64]) -> Tensor[(10, 14, 13), uint16] {
  @func_3420(%var_3421) /* ty=Tensor[(10, 14, 13), uint16] */
}

def @func_1636() -> (Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  @func_1634() /* ty=(Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_3678() -> (Tensor[(10, 14, 13), float64],) {
  @func_3676() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_3143(%var_3067: uint32, %var_3101: Tensor[(28, 4), uint8], %var_3102: Tensor[(140), uint8], %var_3109: Tensor[(140), uint8]) -> (Tensor[(?, 7, ?), int64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], Tensor[(1, 7, 140), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 7, 1), float32], Tensor[(10, 14, 13), float64]) {
  %85 = cast(%var_3067, dtype="uint32") /* ty=uint32 */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="uint32") /* ty=Tensor[(1, 7, 1), uint32] */;
  %87 = multiply(%85, %86) /* ty=Tensor[(1, 7, 1), uint32] */;
  %88 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="int64") /* ty=Tensor[(1, 7, 1), int64] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="int64") /* ty=Tensor[(1, 7, 1), int64] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %92 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %94 = cast(%var_3101, dtype="uint8") /* ty=Tensor[(28, 4), uint8] */;
  %95 = cast(%var_3102, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %96 = reshape(%93, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %97 = reshape(%94, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %98 = reshape(%95, newshape=[35, 4]) /* ty=Tensor[(35, 4), uint8] */;
  %99 = @func_2736(%96, %97, %98) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) */;
  %100 = cast(%var_3109, dtype="int8") /* ty=Tensor[(140), int8] */;
  %101 = shape_of(%var_3102, dtype="int32") /* ty=Tensor[(1), int32] */;
  %102 = cast(%var_3102, dtype="int8") /* ty=Tensor[(140), int8] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?), int8] */;
  %104 = multiply(%102, %103) /* ty=Tensor[(140), int8] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(140), float64] */;
  %106 = cast(%87, dtype="float64") /* ty=Tensor[(1, 7, 1), float64] */;
  %107 = @func_1634() /* ty=(Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %108 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 7, 1), uint32] */, dtype="float32") /* ty=Tensor[(1, 7, 1), float32] */;
  %109 = @func_1873() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %110 = add(%90, %91) /* ty=Tensor[(?, 7, ?), int64] */;
  %111 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %112 = %99.0;
  %113 = divide(%105, %106) /* ty=Tensor[(1, 7, 140), float64] */;
  %114 = %107.2;
  %115 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %116 = asinh(%108) /* ty=Tensor[(1, 7, 1), float32] */;
  %117 = %109.0;
  (%110, %92, %111, %112, %var_3101, %113, %114, %115, %116, %117)
}

def @func_5589(%var_5587: Tensor[(8, 8, 10), float32], %var_5588: Tensor[(8, 8, 10), uint16]) -> (Tensor[(8, 8, 10), uint64],) {
  @func_5585(%var_5587, %var_5588) /* ty=(Tensor[(8, 8, 10), uint64],) */
}

def @func_1120() -> (Tensor[(10, 14, 13), float64],) {
  %118 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %119 = %118.0;
  (%119,)
}

def @func_705(%var_704: Tensor[(15, 4, 10), float64]) -> (Tensor[(15, 4, 10), float64],) {
  %122 = fn (%var_697: Tensor[(15, 4, 10), float64]) -> (Tensor[(15, 4, 10), float64],) {
    %120 = cast(%var_697, dtype="float64") /* ty=Tensor[(15, 4, 10), float64] */;
    %121 = sin(%120) /* ty=Tensor[(15, 4, 10), float64] */;
    (%121,)
  };
  %122(%var_704) /* ty=(Tensor[(15, 4, 10), float64],) */
}

def @func_2316(%var_2314: Tensor[(10, 14, 13), float32]) -> (Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) {
  @func_2313(%var_2314) /* ty=(Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) */
}

def @func_6197() -> Tensor[(10, 14, 13), float32] {
  @func_6195() /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_1122() -> (Tensor[(10, 14, 13), float64],) {
  @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_7118() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %123 = @func_2947() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %124 = %123.0;
  %125 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  (%124, %125)
}

def @func_3481() -> (Tensor[(10, 14, 13), bool],) {
  %135 = fn () -> (Tensor[(10, 14, 13), bool],) {
    %126 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %127 = %126.0;
    %128 = @func_2947() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %129 = %128.0;
    %130 = cast(%129, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
    %131 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%127, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %134 = greater_equal(%132, %133) /* ty=Tensor[(10, 14, 13), bool] */;
    (%134,)
  };
  %135() /* ty=(Tensor[(10, 14, 13), bool],) */
}

def @func_3723() -> Tensor[(10, 14, 13), bool] {
  %136 = @func_3480() /* ty=(Tensor[(10, 14, 13), bool],) */;
  %136.0
}

def @func_3269() -> (Tensor[(10, 14, 13), float64],) {
  %138 = fn () -> (Tensor[(10, 14, 13), float64],) {
    %137 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
    (%137,)
  };
  %138() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_5608() -> (Tensor[(10, 14, 13), float64],) {
  %139 = @func_5404() /* ty=Tensor[(10, 14, 13), float64] */;
  (%139,)
}

def @func_4403(%var_4400: Tensor[(13, 3, 10), int16], %var_4401: Tensor[(13, 3, 10), int16], %var_4402: Tensor[(13, 3, 10), int16]) -> (Tensor[(13, 3, 10), bool], Tensor[(13, 3, 10), uint32]) {
  %150 = fn (%var_4386: Tensor[(13, 3, 10), int16], %var_4387: Tensor[(13, 3, 10), int16], %var_4391: Tensor[(13, 3, 10), int16]) -> (Tensor[(13, 3, 10), bool], Tensor[(13, 3, 10), uint32]) {
    %140 = cast(%var_4387, dtype="bool") /* ty=Tensor[(13, 3, 10), bool] */;
    %141 = shape_of(%var_4386, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(%var_4386, dtype="bool") /* ty=Tensor[(13, 3, 10), bool] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %144 = cast(%var_4391, dtype="uint32") /* ty=Tensor[(13, 3, 10), uint32] */;
    %145 = shape_of(%var_4386, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%var_4386, dtype="uint32") /* ty=Tensor[(13, 3, 10), uint32] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %148 = not_equal(%142, %143) /* ty=Tensor[(13, 3, 10), bool] */;
    %149 = bitwise_and(%146, %147) /* ty=Tensor[(13, 3, 10), uint32] */;
    (%148, %149)
  };
  %150(%var_4400, %var_4401, %var_4402) /* ty=(Tensor[(13, 3, 10), bool], Tensor[(13, 3, 10), uint32]) */
}

def @func_1396(%var_1353: Tensor[(600), float64], %var_1359: Tensor[(10, 14, 13), float64], %var_1389: Tensor[(10, 14, 13), float64]) -> (Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) {
  %151 = cast(%var_1353, dtype="float64") /* ty=Tensor[(600), float64] */;
  %152 = reshape(%151, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %153 = @func_703(%152) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %154 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %155 = %154.0;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %157 = log(%156) /* ty=Tensor[(10, 14, 13), float64] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %159 = asinh(%158) /* ty=Tensor[(10, 14, 13), float64] */;
  %160 = cast(%var_1359, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %164 = power(%162, %163) /* ty=Tensor[(10, 14, 13), float32] */;
  %165 = cast(%164, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %166 = shape_of(%var_1359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_1359, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %169 = cast(%var_1389, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %170 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%159, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = %153.0;
  %174 = cast(%173, dtype="float64") /* ty=Tensor[(15, 4, 10), float64] */;
  %175 = reshape(%174, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %176 = @func_703(%175) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %177 = right_shift(%167, %168) /* ty=Tensor[(10, 14, 13), uint32] */;
  %178 = logical_or(%171, %172) /* ty=Tensor[(10, 14, 13), bool] */;
  %179 = %176.0;
  (%173, %var_1353, %177, %178, %179)
}

def @func_6883() -> (Tensor[(10, 14, 13), float64],) {
  %180 = @func_1659() /* ty=Tensor[(10, 14, 13), float64] */;
  (%180,)
}

def @func_4006() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %185 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
    %181 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %182 = @func_3268() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %183 = %181.0;
    %184 = %182.0;
    (%183, %184)
  };
  %185() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_2360() -> Tensor[(10, 14, 13), float64] {
  %186 = fn () -> Tensor[(10, 14, 13), float64] {
    @func_1188() /* ty=Tensor[(10, 14, 13), float64] */
  };
  %186() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_3749() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %187 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %188 = %187.0;
  %189 = cast(%188, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %190 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  %191 = cosh(%189) /* ty=Tensor[(10, 14, 13), float64] */;
  (%190, %191)
}

def @func_6413(%var_6398: Tensor[(7, 1, 16), uint64]) -> Tensor[(7, 10, 16), uint64] {
  %192 = cast(%var_6398, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
  %193 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 10, 16), uint64] */, dtype="uint64") /* ty=Tensor[(7, 10, 16), uint64] */;
  add(%192, %193) /* ty=Tensor[(7, 10, 16), uint64] */
}

def @func_7275() -> (Tensor[(756), float64], Tensor[(10, 14, 13), float64]) {
  @func_7273() /* ty=(Tensor[(756), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_3539() -> Tensor[(10, 14, 13), float64] {
  %195 = fn () -> Tensor[(10, 14, 13), float64] {
    %194 = @func_1955() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %194.0
  };
  %195() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_3661(%var_3649: Tensor[(234), bool], %var_3650: Tensor[(140), uint8], %var_3651: Tensor[(36), uint64], %var_3652: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(2, 9, 13), bool], Tensor[(234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126), int32]) {
  %196 = @func_1873() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %199 = reshape(%198, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float32] */;
  %200 = @func_2313(%199) /* ty=(Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) */;
  %201 = cast(%var_3649, dtype="bool") /* ty=Tensor[(234), bool] */;
  %202 = cast(%var_3650, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %203 = cast(%var_3651, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %204 = cast(%var_3652, dtype="int32") /* ty=Tensor[(126), int32] */;
  %205 = reshape(%201, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), bool] */;
  %206 = reshape(%202, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %207 = reshape(%203, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %208 = reshape(%204, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %209 = @func_3360(%205, %206, %207, %208) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) */;
  %210 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  %211 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  %212 = %200.1;
  %213 = %209.2;
  (%210, %197, %211, %212, %213, %var_3649, %var_3650, %var_3651, %var_3652)
}

def @func_6351() -> Tensor[(10, 14, 13), float32] {
  @func_6349() /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_6622(%var_6620: uint32) -> (Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], uint32, Tensor[(112), uint8], Tensor[(140), uint8]) {
  @func_6619(%var_6620) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], uint32, Tensor[(112), uint8], Tensor[(140), uint8]) */
}

def @func_1661() -> Tensor[(10, 14, 13), float64] {
  @func_1659() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_7023(%var_7021: Tensor[(12, 50), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64], Tensor[(15, 4, 10), float64], Tensor[(12, 50), float64]) {
  @func_7020(%var_7021) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64], Tensor[(15, 4, 10), float64], Tensor[(12, 50), float64]) */
}

def @func_2026(%var_2025: Tensor[(9, 13, 11), float32]) -> (Tensor[(9, 13, 11), float32],) {
  %216 = fn (%var_2021: Tensor[(9, 13, 11), float32]) -> (Tensor[(9, 13, 11), float32],) {
    %214 = cast(%var_2021, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
    %215 = asin(%214) /* ty=Tensor[(9, 13, 11), float32] */;
    (%215,)
  };
  %216(%var_2025) /* ty=(Tensor[(9, 13, 11), float32],) */
}

def @func_4285() -> Tensor[(10, 14, 13), float64] {
  %218 = fn () -> Tensor[(10, 14, 13), float64] {
    %217 = @func_2407() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %217.0
  };
  %218() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_5096() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %221 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
    %219 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
    %220 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
    (%219, %220)
  };
  %221() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_4385() -> (Tensor[(15, 11, 6), float32],) {
  %224 = fn () -> (Tensor[(15, 11, 6), float32],) {
    %222 = @func_2679() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %223 = %222.0;
    (%223,)
  };
  %224() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_4061(%var_4051: Tensor[(112), uint8], %var_4052: Tensor[(70, 2), uint8]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) {
  %225 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %226 = cast(%var_4051, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %227 = cast(%var_4052, dtype="uint8") /* ty=Tensor[(70, 2), uint8] */;
  %228 = reshape(%226, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %229 = reshape(%227, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %230 = @func_2616(%228, %229) /* ty=(Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) */;
  %231 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  %232 = %225.2;
  %233 = %230.7;
  (%231, %232, %233, %var_4051, %var_4052)
}

def @func_6223() -> (Tensor[(10, 14, 13), float64],) {
  %234 = @func_3268() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %235 = %234.0;
  (%235,)
}

def @func_5405() -> Tensor[(10, 14, 13), float64] {
  %237 = fn () -> Tensor[(10, 14, 13), float64] {
    %236 = @func_4881() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
    %236.1
  };
  %237() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_1300() -> (Tensor[(10, 14, 13), float64],) {
  %238 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %239 = %238.0;
  (%239,)
}

def @func_1302() -> (Tensor[(10, 14, 13), float64],) {
  @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_3725() -> Tensor[(10, 14, 13), bool] {
  @func_3723() /* ty=Tensor[(10, 14, 13), bool] */
}

def @func_4684() -> Tensor[(10, 14, 13), float32] {
  %243 = fn () -> Tensor[(10, 14, 13), float32] {
    %240 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
    %241 = %240.2;
    %242 = cast(%241, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    atanh(%242) /* ty=Tensor[(10, 14, 13), float32] */
  };
  %243() /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_4881() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %244 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  %245 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
  (%244, %245)
}

def @func_1875() -> (Tensor[(10, 14, 13), float64],) {
  @func_1873() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_5544() -> Tensor[(10, 14, 13), float64] {
  %247 = fn () -> Tensor[(10, 14, 13), float64] {
    %246 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
    %246.2
  };
  %247() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_6599() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 80), bool]) {
  %254 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 80), bool]) {
    %248 = @func_6223() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %249 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 80), bool] */, dtype="bool") /* ty=Tensor[(1, 80), bool] */;
    %250 = reshape(%249, newshape=[80]) /* ty=Tensor[(80), bool] */;
    %251 = @func_5175(%250) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool]) */;
    %252 = %248.0;
    %253 = %251.1;
    (%252, %253, meta[relay.Constant][8] /* ty=Tensor[(1, 80), bool] */)
  };
  %254() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 80), bool]) */
}

def @func_1066() -> (Tensor[(10, 14, 13), float64],) {
  %255 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %256 = tan(%255) /* ty=Tensor[(10, 14, 13), float64] */;
  (%256,)
}

def @func_3025() -> (Tensor[(10, 14, 13), float64],) {
  %258 = fn () -> (Tensor[(10, 14, 13), float64],) {
    %257 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
    (%257,)
  };
  %258() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_5477(%var_5475: Tensor[(15, 11, 6), float32], %var_5476: Tensor[(15, 11, 6), uint8]) -> (Tensor[(15, 11, 6), int32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 11, 6), bool]) {
  %279 = fn (%var_5414: Tensor[(15, 11, 6), float32], %var_5462: Tensor[(15, 11, 6), uint8]) -> (Tensor[(15, 11, 6), int32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 11, 6), bool]) {
    %259 = @func_4384() /* ty=(Tensor[(15, 11, 6), float32],) */;
    %260 = %259.0;
    %261 = cast(%var_5414, dtype="uint8") /* ty=Tensor[(15, 11, 6), uint8] */;
    %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%260, dtype="uint8") /* ty=Tensor[(15, 11, 6), uint8] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %265 = logical_xor(%263, %264) /* ty=Tensor[(15, 11, 6), uint8] */;
    %266 = cast(%var_5414, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
    %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
    %268 = cast(%265, dtype="int32") /* ty=Tensor[(15, 11, 6), int32] */;
    %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %270 = @func_2407() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %271 = cast(%var_5462, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %272 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%265, dtype="bool") /* ty=Tensor[(15, 11, 6), bool] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %275 = right_shift(%268, %269) /* ty=Tensor[(15, 11, 6), int32] */;
    %276 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
    %277 = %270.0;
    %278 = equal(%273, %274) /* ty=Tensor[(15, 11, 6), bool] */;
    (%275, %276, %277, %278)
  };
  %279(%var_5475, %var_5476) /* ty=(Tensor[(15, 11, 6), int32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 11, 6), bool]) */
}

def @func_2212() -> Tensor[(10, 14, 13), float64] {
  %280 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %281 = %280.0;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  sigmoid(%282) /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_2407() -> (Tensor[(10, 14, 13), float64],) {
  %283 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %284 = %283.0;
  (%284,)
}

def @func_5806(%var_5805: Tensor[(3072), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(16, 16, 12), bool], Tensor[(3072), bool], Tensor[(126), int32]) {
  %292 = fn (%var_5798: Tensor[(3072), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(16, 16, 12), bool], Tensor[(3072), bool], Tensor[(126), int32]) {
    %285 = cast(%var_5798, dtype="bool") /* ty=Tensor[(3072), bool] */;
    %286 = cast(meta[relay.Constant][10] /* ty=Tensor[(126), int32] */, dtype="int32") /* ty=Tensor[(126), int32] */;
    %287 = reshape(%285, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), bool] */;
    %288 = reshape(%286, newshape=[63, 2]) /* ty=Tensor[(63, 2), int32] */;
    %289 = @func_451(%287, %288) /* ty=(Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) */;
    %290 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
    %291 = %289.0;
    (%290, %291, %var_5798, meta[relay.Constant][10] /* ty=Tensor[(126), int32] */)
  };
  %292(%var_5805) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(16, 16, 12), bool], Tensor[(3072), bool], Tensor[(126), int32]) */
}

def @func_6450() -> (Tensor[(10, 14, 13), float64],) {
  %294 = fn () -> (Tensor[(10, 14, 13), float64],) {
    %293 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
    (%293,)
  };
  %294() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_4906() -> (Tensor[(15, 11, 6), float32],) {
  @func_4904() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_5175(%var_5172: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool]) {
  %295 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %296 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %297 = cast(%var_5172, dtype="bool") /* ty=Tensor[(80), bool] */;
  %298 = reshape(%296, newshape=[]) /* ty=bool */;
  %299 = reshape(%297, newshape=[80]) /* ty=Tensor[(80), bool] */;
  %300 = @func_4193(%298, %299) /* ty=(Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) */;
  %301 = %295.0;
  %302 = @func_3538() /* ty=Tensor[(10, 14, 13), float64] */;
  %303 = %300.1;
  (%301, %302, %303, True /* ty=bool */, %var_5172)
}

def @func_7020(%var_7009: Tensor[(12, 50), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64], Tensor[(15, 4, 10), float64], Tensor[(12, 50), float64]) {
  %304 = cast(meta[relay.Constant][11] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %305 = cast(meta[relay.Constant][11] /* ty=Tensor[(756), float64] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %306 = reshape(%304, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %307 = reshape(%305, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float64] */;
  %308 = cast(%var_7009, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %309 = reshape(%308, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %310 = @func_703(%309) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %311 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
  %312 = @func_4702(%306, %307) /* ty=Tensor[(14, 6, 9), float64] */;
  %313 = %310.0;
  (%311, %312, meta[relay.Constant][11] /* ty=Tensor[(756), float64] */, %313, %var_7009)
}

def @func_6225() -> (Tensor[(10, 14, 13), float64],) {
  @func_6223() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_7380() -> (Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(5, 198), float32]) {
  @func_7378() /* ty=(Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(5, 198), float32]) */
}

def @func_1217() -> (Tensor[(10, 14, 13), float64],) {
  %315 = fn () -> (Tensor[(10, 14, 13), float64],) {
    %314 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
    (%314,)
  };
  %315() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_1493(%var_1491: Tensor[(600), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) {
  @func_1490(%var_1491) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) */
}

def @func_2326() -> (Tensor[(10, 14, 13), float64],) {
  @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_2313(%var_2307: Tensor[(10, 14, 13), float32]) -> (Tensor[(14), uint8], Tensor[(10, 14, 13), bool]) {
  %316 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %317 = %316.0;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %319 = reshape(%318, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %320 = @func_1744(%319) /* ty=(Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) */;
  %321 = cast(%317, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
  %322 = rsqrt(%321) /* ty=Tensor[(10, 14, 13), float32] */;
  %323 = cast(%var_2307, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = %320.2;
  %328 = greater(%325, %326) /* ty=Tensor[(10, 14, 13), bool] */;
  (%327, %328)
}

def @func_5977(%var_5965: bool, %var_5966: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), float64], Tensor[(756), float64], Tensor[(10, 14, 13), float64], Tensor[(80), bool], bool, Tensor[(80), bool]) {
  %329 = cast(%var_5965, dtype="bool") /* ty=bool */;
  %330 = cast(%var_5966, dtype="bool") /* ty=Tensor[(80), bool] */;
  %331 = reshape(%329, newshape=[]) /* ty=bool */;
  %332 = reshape(%330, newshape=[80]) /* ty=Tensor[(80), bool] */;
  %333 = @func_4193(%331, %332) /* ty=(Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) */;
  %334 = @func_1659() /* ty=Tensor[(10, 14, 13), float64] */;
  %335 = @func_5017() /* ty=Tensor[(756), float64] */;
  %336 = @func_5404() /* ty=Tensor[(10, 14, 13), float64] */;
  %337 = %333.3;
  (%334, %335, %336, %337, %var_5965, %var_5966)
}

def @func_2947() -> (Tensor[(10, 14, 13), float64],) {
  %338 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
  (%338,)
}

def @func_3751() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  @func_3749() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_6759(%var_6757: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) {
  @func_6756(%var_6757) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) */
}

def @func_3676() -> (Tensor[(10, 14, 13), float64],) {
  %339 = @func_2407() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %340 = %339.0;
  (%340,)
}

def @func_3062(%var_3042: uint8) -> (Tensor[(10, 9, 7), uint8], Tensor[(10, 14, 13), float64]) {
  %341 = cast(%var_3042, dtype="uint8") /* ty=uint8 */;
  %342 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 9, 7), uint8] */, dtype="uint8") /* ty=Tensor[(10, 9, 7), uint8] */;
  %343 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %344 = bitwise_and(%341, %342) /* ty=Tensor[(10, 9, 7), uint8] */;
  %345 = %343.0;
  (%344, %345)
}

def @func_6803() -> (Tensor[(1, 3, 10), float64],) {
  %348 = fn () -> (Tensor[(1, 3, 10), float64],) {
    %346 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 10), float64] */;
    %347 = sigmoid(%346) /* ty=Tensor[(1, 3, 10), float64] */;
    (%347,)
  };
  %348() /* ty=(Tensor[(1, 3, 10), float64],) */
}

def @func_7204(%var_7202: Tensor[(9, 13, 11), float64], %var_7203: Tensor[(9, 13, 11), float64]) -> (Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float32], Tensor[(10, 14, 13), float64], Tensor[(9, 13, 11), float32]) {
  %359 = fn (%var_7163: Tensor[(9, 13, 11), float64], %var_7164: Tensor[(9, 13, 11), float64]) -> (Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float32], Tensor[(10, 14, 13), float64], Tensor[(9, 13, 11), float32]) {
    %349 = cast(%var_7164, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
    %350 = shape_of(%var_7163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%var_7163, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %353 = cast(%var_7164, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
    %354 = cast(%var_7163, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
    %355 = power(%351, %352) /* ty=Tensor[(9, 13, 11), float64] */;
    %356 = tan(%353) /* ty=Tensor[(9, 13, 11), float32] */;
    %357 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
    %358 = asinh(%354) /* ty=Tensor[(9, 13, 11), float32] */;
    (%355, %356, %357, %358)
  };
  %359(%var_7202, %var_7203) /* ty=(Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float32], Tensor[(10, 14, 13), float64], Tensor[(9, 13, 11), float32]) */
}

def @func_6083(%var_6071: Tensor[(72), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64]) {
  %360 = @func_3268() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %361 = cast(%var_6071, dtype="float64") /* ty=Tensor[(72), float64] */;
  %362 = reshape(%361, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float64] */;
  %363 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
  %364 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %365 = %360.0;
  %366 = @func_3556(%362) /* ty=Tensor[(3, 6, 4), float64] */;
  (%363, %364, %365, %366, %var_6071)
}

def @func_5932(%var_5930: Tensor[(9, 15), float32], %var_5931: Tensor[(600), float64]) -> (Tensor[(9, 15), float32], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float64]) {
  @func_5928(%var_5930, %var_5931) /* ty=(Tensor[(9, 15), float32], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float64]) */
}

def @func_5017() -> Tensor[(756), float64] {
  %367 = @func_4961() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) */;
  %367.2
}

def @func_3667(%var_3663: Tensor[(234), bool], %var_3664: Tensor[(140), uint8], %var_3665: Tensor[(36), uint64], %var_3666: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(2, 9, 13), bool], Tensor[(234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126), int32]) {
  @func_3661(%var_3663, %var_3664, %var_3665, %var_3666) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(2, 9, 13), bool], Tensor[(234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126), int32]) */
}

def @func_1688() -> Tensor[(10, 14, 13), float64] {
  @func_1686() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_6255() -> (Tensor[(10, 14, 13), int8], Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), float64]) {
  %375 = fn () -> (Tensor[(10, 14, 13), int8], Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), float64]) {
    %368 = @func_5725() /* ty=(Tensor[(10, 14, 13), int8],) */;
    %369 = @func_6195() /* ty=Tensor[(10, 14, 13), float32] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %371 = reshape(%370, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
    %372 = @func_1241(%371) /* ty=(Tensor[(10, 14, 13), float64],) */;
    %373 = %368.0;
    %374 = %372.0;
    (%373, %369, %374)
  };
  %375() /* ty=(Tensor[(10, 14, 13), int8], Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), float64]) */
}

def @func_6502() -> Tensor[(10, 14, 13), float64] {
  %377 = fn () -> Tensor[(10, 14, 13), float64] {
    %376 = @func_3676() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %376.0
  };
  %377() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_2620(%var_2618: Tensor[(112), uint8], %var_2619: Tensor[(140), uint8]) -> (Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) {
  @func_2616(%var_2618, %var_2619) /* ty=(Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) */
}

def @func_7120() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  @func_7118() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_3495(%var_3493: bool, %var_3494: Tensor[(1, 5, 16), bool]) -> Tensor[(1, 5, 16), bool] {
  @func_3491(%var_3493, %var_3494) /* ty=Tensor[(1, 5, 16), bool] */
}

def @func_1686() -> Tensor[(10, 14, 13), float64] {
  %378 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %378.0
}

def @func_3149(%var_3145: uint32, %var_3146: Tensor[(28, 4), uint8], %var_3147: Tensor[(140), uint8], %var_3148: Tensor[(140), uint8]) -> (Tensor[(?, 7, ?), int64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], Tensor[(1, 7, 140), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 7, 1), float32], Tensor[(10, 14, 13), float64]) {
  @func_3143(%var_3145, %var_3146, %var_3147, %var_3148) /* ty=(Tensor[(?, 7, ?), int64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], Tensor[(1, 7, 140), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 7, 1), float32], Tensor[(10, 14, 13), float64]) */
}

def @func_4883() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  @func_4881() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @main(%var_7480: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), float32] {
  %379 = cast(%var_7480, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %380 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(10, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%381, %382) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_1957() -> (Tensor[(10, 14, 13), float64],) {
  @func_1955() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_3558(%var_3557: Tensor[(3, 6, 4), float64]) -> Tensor[(3, 6, 4), float64] {
  %384 = fn (%var_3545: Tensor[(3, 6, 4), float64]) -> Tensor[(3, 6, 4), float64] {
    %383 = cast(%var_3545, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
    sigmoid(%383) /* ty=Tensor[(3, 6, 4), float64] */
  };
  %384(%var_3557) /* ty=Tensor[(3, 6, 4), float64] */
}

def @func_4257(%var_4255: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  @func_4254(%var_4255) /* ty=(Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) */
}

def @func_5237(%var_5227: bool) -> (Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(40, 2), float64]) {
  %385 = @func_4496() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) */;
  %386 = cast(%var_5227, dtype="bool") /* ty=bool */;
  %387 = cast(meta[relay.Constant][15] /* ty=Tensor[(40, 2), bool] */, dtype="bool") /* ty=Tensor[(40, 2), bool] */;
  %388 = reshape(%386, newshape=[]) /* ty=bool */;
  %389 = reshape(%387, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), bool] */;
  %390 = cast(meta[relay.Constant][15] /* ty=Tensor[(40, 2), bool] */, dtype="float64") /* ty=Tensor[(40, 2), float64] */;
  %391 = %385.0;
  %392 = @func_3491(%388, %389) /* ty=Tensor[(1, 5, 16), bool] */;
  %393 = rsqrt(%390) /* ty=Tensor[(40, 2), float64] */;
  (%391, %392, %var_5227, %393)
}

def @func_4963() -> (Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) {
  @func_4961() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) */
}

def @func_3234() -> (Tensor[(10, 14, 13), float64],) {
  %394 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
  (%394,)
}

def @func_5240(%var_5238: bool) -> (Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(40, 2), float64]) {
  @func_5237(%var_5238) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(40, 2), float64]) */
}

def @func_3292() -> Tensor[(10, 14, 13), float64] {
  @func_3290() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_6619(%var_6608: uint32) -> (Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], uint32, Tensor[(112), uint8], Tensor[(140), uint8]) {
  %395 = @func_3676() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %396 = cast(%var_6608, dtype="uint32") /* ty=uint32 */;
  %397 = cast(meta[relay.Constant][16] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %398 = cast(meta[relay.Constant][17] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %399 = cast(meta[relay.Constant][17] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %400 = reshape(%396, newshape=[]) /* ty=uint32 */;
  %401 = reshape(%397, newshape=[28, 4]) /* ty=Tensor[(28, 4), uint8] */;
  %402 = reshape(%398, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %403 = reshape(%399, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %404 = @func_3143(%400, %401, %402, %403) /* ty=(Tensor[(?, 7, ?), int64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(28, 4), uint8], Tensor[(1, 7, 140), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(1, 7, 1), float32], Tensor[(10, 14, 13), float64]) */;
  %405 = %395.0;
  %406 = %404.4;
  (%405, %406, %var_6608, meta[relay.Constant][16] /* ty=Tensor[(112), uint8] */, meta[relay.Constant][17] /* ty=Tensor[(140), uint8] */)
}

def @func_455(%var_453: Tensor[(16, 16, 12), bool], %var_454: Tensor[(63, 2), int32]) -> (Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) {
  @func_451(%var_453, %var_454) /* ty=(Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) */
}

def @func_5928(%var_5897: Tensor[(9, 15), float32], %var_5911: Tensor[(600), float64]) -> (Tensor[(9, 15), float32], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float64]) {
  %407 = cast(%var_5897, dtype="float32") /* ty=Tensor[(9, 15), float32] */;
  %408 = cast(%var_5911, dtype="float64") /* ty=Tensor[(600), float64] */;
  %409 = reshape(%408, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %410 = @func_1490(%409) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) */;
  %411 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 12), float64] */, dtype="float64") /* ty=Tensor[(6, 12), float64] */;
  %412 = reshape(%411, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float64] */;
  %413 = sqrt(%407) /* ty=Tensor[(9, 15), float32] */;
  %414 = %410.1;
  %415 = @func_3556(%412) /* ty=Tensor[(3, 6, 4), float64] */;
  (%413, %414, %var_5911, %415, meta[relay.Constant][18] /* ty=Tensor[(6, 12), float64] */)
}

def @func_3215() -> Tensor[(10, 14, 13), float64] {
  %417 = fn () -> Tensor[(10, 14, 13), float64] {
    %416 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %416.0
  };
  %417() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_1634() -> (Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %418 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %419 = %418.0;
  %420 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 14, 13), float64] */, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %424 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %425 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%419, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %428 = mod(%426, %427) /* ty=Tensor[(10, 14, 13), float64] */;
  %429 = cast(%419, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%428, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %433 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %434 = bitwise_or(%422, %423) /* ty=Tensor[(10, 14, 13), uint16] */;
  %435 = floor_divide(%431, %432) /* ty=Tensor[(10, 14, 13), float64] */;
  %436 = %433.0;
  (%434, %435, %436)
}

def @func_2650(%var_2648: Tensor[(4, 9, 5), float32]) -> (Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), uint32], Tensor[(600), float64], Tensor[(1820), float64], Tensor[(10, 14, 13), float64], Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), float64]) {
  @func_2647(%var_2648) /* ty=(Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), uint32], Tensor[(600), float64], Tensor[(1820), float64], Tensor[(10, 14, 13), float64], Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_2580(%var_2579: Tensor[(9, 3, 4), float32]) -> (Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), bool], Tensor[(10, 14, 13), float64], Tensor[(21, 6), int32]) {
  %451 = fn (%var_2552: Tensor[(9, 3, 4), float32]) -> (Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), bool], Tensor[(10, 14, 13), float64], Tensor[(21, 6), int32]) {
    %437 = cast(%var_2552, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
    %438 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 4), float32] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %441 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 3, 4), float32] */, dtype="bool") /* ty=Tensor[(9, 3, 4), bool] */;
    %442 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 3, 4), float32] */, dtype="bool") /* ty=Tensor[(9, 3, 4), bool] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %445 = cast(meta[relay.Constant][22] /* ty=Tensor[(21, 6), int32] */, dtype="int32") /* ty=Tensor[(21, 6), int32] */;
    %446 = reshape(%445, newshape=[126]) /* ty=Tensor[(126), int32] */;
    %447 = @func_2188(%446) /* ty=(Tensor[(10, 14, 13), float32], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) */;
    %448 = floor_mod(%439, %440) /* ty=Tensor[(9, 3, 4), float32] */;
    %449 = equal(%443, %444) /* ty=Tensor[(9, 3, 4), bool] */;
    %450 = %447.3;
    (%448, %449, %450, meta[relay.Constant][22] /* ty=Tensor[(21, 6), int32] */)
  };
  %451(%var_2579) /* ty=(Tensor[(9, 3, 4), float32], Tensor[(9, 3, 4), bool], Tensor[(10, 14, 13), float64], Tensor[(21, 6), int32]) */
}

def @func_1401(%var_1398: Tensor[(600), float64], %var_1399: Tensor[(10, 14, 13), float64], %var_1400: Tensor[(10, 14, 13), float64]) -> (Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) {
  @func_1396(%var_1398, %var_1399, %var_1400) /* ty=(Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) */
}

def @func_4706(%var_4704: Tensor[(14, 6, 9), float64], %var_4705: Tensor[(14, 6, 9), float64]) -> Tensor[(14, 6, 9), float64] {
  @func_4702(%var_4704, %var_4705) /* ty=Tensor[(14, 6, 9), float64] */
}

def @func_5610() -> (Tensor[(10, 14, 13), float64],) {
  @func_5608() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_7273() -> (Tensor[(756), float64], Tensor[(10, 14, 13), float64]) {
  %452 = @func_4961() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) */;
  %453 = @func_4961() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(14, 6, 9), float64], Tensor[(756), float64]) */;
  %454 = %452.2;
  %455 = %453.0;
  (%454, %455)
}

def @func_500(%var_466: Tensor[(4, 9), uint64], %var_475: Tensor[(126), int32], %var_495: Tensor[(3072), float64]) -> (Tensor[(4, 9), bool], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(6, 7, 3), int32], Tensor[(3072), int64]) {
  %456 = cast(%var_466, dtype="bool") /* ty=Tensor[(4, 9), bool] */;
  %457 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(4, 9), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %458 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 9), uint64] */, dtype="bool") /* ty=Tensor[(4, 9), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %460 = cast(meta[relay.Constant][24] /* ty=Tensor[(3072), bool] */, dtype="bool") /* ty=Tensor[(3072), bool] */;
  %461 = cast(%var_475, dtype="int32") /* ty=Tensor[(126), int32] */;
  %462 = reshape(%460, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), bool] */;
  %463 = reshape(%461, newshape=[63, 2]) /* ty=Tensor[(63, 2), int32] */;
  %464 = @func_451(%462, %463) /* ty=(Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) */;
  %465 = %464.1;
  %466 = cast(%465, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %467 = cast(%465, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %468 = reshape(%466, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %469 = reshape(%467, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %470 = @func_286(%468, %469) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %471 = cast(meta[relay.Constant][25] /* ty=Tensor[(3072), bool] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %472 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3072), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %473 = cast(meta[relay.Constant][24] /* ty=Tensor[(3072), bool] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?), int8] */;
  %475 = right_shift(%473, %474) /* ty=Tensor[(3072), int8] */;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %477 = log(%476) /* ty=Tensor[(3072), float64] */;
  %478 = cast(%var_495, dtype="int64") /* ty=Tensor[(3072), int64] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(1), int32] */;
  %480 = cast(%477, dtype="int64") /* ty=Tensor[(3072), int64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?), int64] */;
  %482 = less_equal(%458, %459) /* ty=Tensor[(4, 9), bool] */;
  %483 = %470.0;
  %484 = maximum(%480, %481) /* ty=Tensor[(3072), int64] */;
  (%482, %465, %var_475, %483, %484)
}

def @func_2011() -> (Tensor[(10, 14, 13), float64],) {
  %490 = fn () -> (Tensor[(10, 14, 13), float64],) {
    %485 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
    %486 = cast(%485, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %487 = exp(%486) /* ty=Tensor[(10, 14, 13), float64] */;
    %488 = cast(%487, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %489 = cos(%488) /* ty=Tensor[(10, 14, 13), float64] */;
    (%489,)
  };
  %490() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_1873() -> (Tensor[(10, 14, 13), float64],) {
  %491 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %492 = %491.0;
  (%492,)
}

def @func_1534(%var_1531: Tensor[(2, 7, 1), uint8], %var_1532: Tensor[(2, 7, 8), uint8], %var_1533: Tensor[(2, 7, 10), uint8]) -> (Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) {
  %499 = fn (%var_1510: Tensor[(2, 7, 1), uint8], %var_1511: Tensor[(2, 7, 8), uint8], %var_1519: Tensor[(2, 7, 10), uint8]) -> (Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) {
    %493 = cast(%var_1510, dtype="uint8") /* ty=Tensor[(2, 7, 1), uint8] */;
    %494 = cast(%var_1511, dtype="uint8") /* ty=Tensor[(2, 7, 8), uint8] */;
    %495 = cast(%var_1510, dtype="bool") /* ty=Tensor[(2, 7, 1), bool] */;
    %496 = cast(%var_1519, dtype="bool") /* ty=Tensor[(2, 7, 10), bool] */;
    %497 = left_shift(%493, %494) /* ty=Tensor[(2, 7, 8), uint8] */;
    %498 = less(%495, %496) /* ty=Tensor[(2, 7, 10), bool] */;
    (%497, %498)
  };
  %499(%var_1531, %var_1532, %var_1533) /* ty=(Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) */
}

def @func_2647(%var_2622: Tensor[(4, 9, 5), float32]) -> (Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), uint32], Tensor[(600), float64], Tensor[(1820), float64], Tensor[(10, 14, 13), float64], Tensor[(4, 9, 5), float64], Tensor[(10, 14, 13), float64]) {
  %500 = cast(%var_2622, dtype="float64") /* ty=Tensor[(4, 9, 5), float64] */;
  %501 = cast(meta[relay.Constant][26] /* ty=Tensor[(600), float64] */, dtype="float64") /* ty=Tensor[(600), float64] */;
  %502 = cast(meta[relay.Constant][27] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %503 = cast(meta[relay.Constant][27] /* ty=Tensor[(1820), float64] */, dtype="float64") /* ty=Tensor[(1820), float64] */;
  %504 = reshape(%501, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %505 = reshape(%502, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %506 = reshape(%503, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
  %507 = @func_1396(%504, %505, %506) /* ty=(Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(10, 14, 13), uint32], Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64]) */;
  %508 = cast(%var_2622, dtype="float32") /* ty=Tensor[(4, 9, 5), float32] */;
  %509 = atanh(%508) /* ty=Tensor[(4, 9, 5), float32] */;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(4, 9, 5), float64] */;
  %511 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %512 = cosh(%500) /* ty=Tensor[(4, 9, 5), float64] */;
  %513 = %507.2;
  %514 = @func_1188() /* ty=Tensor[(10, 14, 13), float64] */;
  %515 = acos(%510) /* ty=Tensor[(4, 9, 5), float64] */;
  %516 = %511.0;
  (%512, %513, meta[relay.Constant][26] /* ty=Tensor[(600), float64] */, meta[relay.Constant][27] /* ty=Tensor[(1820), float64] */, %514, %515, %516)
}

def @func_4152() -> (Tensor[(16, 13, 2), float32],) {
  @func_4150() /* ty=(Tensor[(16, 13, 2), float32],) */
}

def @func_4355() -> (Tensor[(10, 14, 13), float64],) {
  %517 = @func_1873() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %518 = %517.0;
  (%518,)
}

def @func_3809() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %526 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
    %519 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %520 = @func_2010() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %521 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %522 = %519.0;
    %523 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
    %524 = %520.0;
    %525 = %521.0;
    (%522, %523, %524, %525)
  };
  %526() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_4824(%var_4821: Tensor[(8, 6, 5), float32], %var_4822: Tensor[(8, 6, 5), float32], %var_4823: Tensor[(8, 6, 5), bool]) -> (Tensor[(8, 6, 5), int16], Tensor[(8, 6, 5), bool]) {
  %544 = fn (%var_4794: Tensor[(8, 6, 5), float32], %var_4804: Tensor[(8, 6, 5), float32], %var_4816: Tensor[(8, 6, 5), bool]) -> (Tensor[(8, 6, 5), int16], Tensor[(8, 6, 5), bool]) {
    %527 = cast(%var_4794, dtype="float32") /* ty=Tensor[(8, 6, 5), float32] */;
    %528 = atanh(%527) /* ty=Tensor[(8, 6, 5), float32] */;
    %529 = cast(%528, dtype="int16") /* ty=Tensor[(8, 6, 5), int16] */;
    %530 = shape_of(%var_4794, dtype="int32") /* ty=Tensor[(3), int32] */;
    %531 = cast(%var_4794, dtype="int16") /* ty=Tensor[(8, 6, 5), int16] */;
    %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %533 = cast(%var_4804, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
    %534 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
    %535 = cast(%528, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
    %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %537 = not_equal(%535, %536) /* ty=Tensor[(8, 6, 5), bool] */;
    %538 = cast(%var_4816, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
    %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%537, dtype="bool") /* ty=Tensor[(8, 6, 5), bool] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %542 = bitwise_or(%531, %532) /* ty=Tensor[(8, 6, 5), int16] */;
    %543 = less(%540, %541) /* ty=Tensor[(8, 6, 5), bool] */;
    (%542, %543)
  };
  %544(%var_4821, %var_4822, %var_4823) /* ty=(Tensor[(8, 6, 5), int16], Tensor[(8, 6, 5), bool]) */
}

def @func_3290() -> Tensor[(10, 14, 13), float64] {
  %545 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %545.0
}

def @func_3975() -> (Tensor[(16, 15, 10), bool],) {
  %551 = fn () -> (Tensor[(16, 15, 10), bool],) {
    %546 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 15, 10), int16] */, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
    %547 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(16, 15, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %548 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 15, 10), int16] */, dtype="bool") /* ty=Tensor[(16, 15, 10), bool] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %550 = less(%548, %549) /* ty=Tensor[(16, 15, 10), bool] */;
    (%550,)
  };
  %551() /* ty=(Tensor[(16, 15, 10), bool],) */
}

def @func_3491(%var_3485: bool, %var_3486: Tensor[(1, 5, 16), bool]) -> Tensor[(1, 5, 16), bool] {
  %552 = cast(%var_3485, dtype="bool") /* ty=bool */;
  %553 = cast(%var_3486, dtype="bool") /* ty=Tensor[(1, 5, 16), bool] */;
  logical_or(%552, %553) /* ty=Tensor[(1, 5, 16), bool] */
}

def @func_2214() -> Tensor[(10, 14, 13), float64] {
  @func_2212() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_4497() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) {
  %557 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) {
    %554 = @func_4355() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %555 = %554.0;
    %556 = @func_3723() /* ty=Tensor[(10, 14, 13), bool] */;
    (%555, %556)
  };
  %557() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool]) */
}

def @func_3859(%var_3857: int32, %var_3858: Tensor[(4, 10, 6), int32]) -> (Tensor[(4, 10, 6), bool],) {
  @func_3855(%var_3857, %var_3858) /* ty=(Tensor[(4, 10, 6), bool],) */
}

def @func_1490(%var_1484: Tensor[(600), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) {
  %558 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %559 = cast(%var_1484, dtype="float64") /* ty=Tensor[(600), float64] */;
  %560 = reshape(%559, newshape=[15, 4, 10]) /* ty=Tensor[(15, 4, 10), float64] */;
  %561 = @func_703(%560) /* ty=(Tensor[(15, 4, 10), float64],) */;
  %562 = %558.0;
  %563 = %561.0;
  (%562, %563, %var_1484)
}

def @func_4702(%var_4690: Tensor[(14, 6, 9), float64], %var_4691: Tensor[(14, 6, 9), float64]) -> Tensor[(14, 6, 9), float64] {
  %564 = cast(%var_4691, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
  %565 = shape_of(%var_4690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_4690, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%566, %567) /* ty=Tensor[(14, 6, 9), float64] */
}

def @func_3440(%var_3437: Tensor[(300, 2), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(300, 2), float64]) {
  %568 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %569 = cast(%var_3437, dtype="float64") /* ty=Tensor[(300, 2), float64] */;
  %570 = reshape(%569, newshape=[600]) /* ty=Tensor[(600), float64] */;
  %571 = @func_1490(%570) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(600), float64]) */;
  %572 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
  %573 = %568.0;
  %574 = %571.1;
  (%572, %573, %574, %var_3437)
}

def @func_3185() -> Tensor[(10, 14, 13), float64] {
  @func_3183() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_6232() -> Tensor[(10, 14, 13), float64] {
  @func_6230() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_824(%var_822: Tensor[(10, 9, 11), int8]) -> (Tensor[(10, 9, 11), bool],) {
  @func_821(%var_822) /* ty=(Tensor[(10, 9, 11), bool],) */
}

def @func_2409() -> (Tensor[(10, 14, 13), float64],) {
  @func_2407() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_2190(%var_2189: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float32], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) {
  %599 = fn (%var_2176: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float32], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) {
    %575 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %576 = %575.0;
    %577 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 14, 13), float64] */, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
    %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %579 = cast(%576, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
    %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %581 = logical_xor(%579, %580) /* ty=Tensor[(10, 14, 13), uint32] */;
    %582 = cast(%581, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %583 = cast(%var_2176, dtype="int32") /* ty=Tensor[(126), int32] */;
    %584 = cast(%var_2176, dtype="int32") /* ty=Tensor[(126), int32] */;
    %585 = reshape(%583, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
    %586 = reshape(%584, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
    %587 = @func_286(%585, %586) /* ty=(Tensor[(6, 7, 3), int32],) */;
    %588 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %589 = acosh(%588) /* ty=Tensor[(10, 14, 13), float64] */;
    %590 = cast(%581, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
    %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(%589, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %594 = maximum(%592, %593) /* ty=Tensor[(10, 14, 13), int32] */;
    %595 = cast(%594, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %596 = asin(%582) /* ty=Tensor[(10, 14, 13), float32] */;
    %597 = %587.0;
    %598 = acos(%595) /* ty=Tensor[(10, 14, 13), float64] */;
    (%596, %597, %var_2176, %598)
  };
  %599(%var_2189) /* ty=(Tensor[(10, 14, 13), float32], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) */
}

def @func_1068() -> (Tensor[(10, 14, 13), float64],) {
  @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_3855(%var_3830: int32, %var_3831: Tensor[(4, 10, 6), int32]) -> (Tensor[(4, 10, 6), bool],) {
  %600 = cast(%var_3830, dtype="bool") /* ty=bool */;
  %601 = cast(%var_3831, dtype="bool") /* ty=Tensor[(4, 10, 6), bool] */;
  %602 = greater(%600, %601) /* ty=Tensor[(4, 10, 6), bool] */;
  (%602,)
}

def @func_5585(%var_5553: Tensor[(8, 8, 10), float32], %var_5568: Tensor[(8, 8, 10), uint16]) -> (Tensor[(8, 8, 10), uint64],) {
  %603 = cast(%var_5553, dtype="float32") /* ty=Tensor[(8, 8, 10), float32] */;
  %604 = tan(%603) /* ty=Tensor[(8, 8, 10), float32] */;
  %605 = cast(%604, dtype="uint16") /* ty=Tensor[(8, 8, 10), uint16] */;
  %606 = shape_of(%var_5553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%var_5553, dtype="uint16") /* ty=Tensor[(8, 8, 10), uint16] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %609 = bitwise_and(%607, %608) /* ty=Tensor[(8, 8, 10), uint16] */;
  %610 = cast(%var_5568, dtype="uint64") /* ty=Tensor[(8, 8, 10), uint64] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="uint64") /* ty=Tensor[(8, 8, 10), uint64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %614 = minimum(%612, %613) /* ty=Tensor[(8, 8, 10), uint64] */;
  (%614,)
}

def @func_2679() -> (Tensor[(15, 11, 6), float32],) {
  %615 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 11, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 6), float32] */;
  %616 = atan(%615) /* ty=Tensor[(15, 11, 6), float32] */;
  (%616,)
}

def @func_1243(%var_1242: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), float64],) {
  %624 = fn (%var_1235: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), float64],) {
    %617 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %618 = %617.0;
    %619 = cast(%var_1235, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %623 = floor_mod(%621, %622) /* ty=Tensor[(10, 14, 13), float64] */;
    (%623,)
  };
  %624(%var_1242) /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_6938(%var_6937: Tensor[(126, 1), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(1, 234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126, 1), int32]) {
  %636 = fn (%var_6922: Tensor[(126, 1), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(1, 234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126, 1), int32]) {
    %625 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 234), bool] */, dtype="bool") /* ty=Tensor[(1, 234), bool] */;
    %626 = cast(meta[relay.Constant][33] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
    %627 = cast(meta[relay.Constant][34] /* ty=Tensor[(36), uint64] */, dtype="uint64") /* ty=Tensor[(36), uint64] */;
    %628 = cast(%var_6922, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
    %629 = reshape(%625, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), bool] */;
    %630 = reshape(%626, newshape=[140]) /* ty=Tensor[(140), uint8] */;
    %631 = reshape(%627, newshape=[36]) /* ty=Tensor[(36), uint64] */;
    %632 = reshape(%628, newshape=[126]) /* ty=Tensor[(126), int32] */;
    %633 = @func_3360(%629, %630, %631, %632) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) */;
    %634 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
    %635 = %633.5;
    (%634, %635, meta[relay.Constant][32] /* ty=Tensor[(1, 234), bool] */, meta[relay.Constant][33] /* ty=Tensor[(140), uint8] */, meta[relay.Constant][34] /* ty=Tensor[(36), uint64] */, %var_6922)
  };
  %636(%var_6937) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(1, 234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126, 1), int32]) */
}

def @func_5880() -> (Tensor[(10, 14, 13), float32], Tensor[(70, 2), uint8]) {
  @func_5878() /* ty=(Tensor[(10, 14, 13), float32], Tensor[(70, 2), uint8]) */
}

def @func_3946(%var_3945: Tensor[(72), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64], Tensor[(10, 14, 13), float32]) {
  %648 = fn (%var_3931: Tensor[(72), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64], Tensor[(10, 14, 13), float32]) {
    %637 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %638 = cast(%var_3931, dtype="float64") /* ty=Tensor[(72), float64] */;
    %639 = reshape(%638, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float64] */;
    %640 = @func_1216() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %641 = %640.0;
    %642 = cast(%641, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %643 = atan(%642) /* ty=Tensor[(10, 14, 13), float32] */;
    %644 = cast(%643, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %645 = %637.0;
    %646 = @func_3556(%639) /* ty=Tensor[(3, 6, 4), float64] */;
    %647 = log10(%644) /* ty=Tensor[(10, 14, 13), float32] */;
    (%645, %646, %var_3931, %647)
  };
  %648(%var_3945) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64], Tensor[(10, 14, 13), float32]) */
}

def @func_6349() -> Tensor[(10, 14, 13), float32] {
  @func_6195() /* ty=Tensor[(10, 14, 13), float32] */
}

def @func_2324() -> (Tensor[(10, 14, 13), float64],) {
  %649 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %650 = %649.0;
  (%650,)
}

def @func_5758() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  @func_5756() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_1188() -> Tensor[(10, 14, 13), float64] {
  %651 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %651.0
}

def @func_1190() -> Tensor[(10, 14, 13), float64] {
  @func_1188() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_4254(%var_4214: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  %652 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %653 = %652.0;
  %654 = cast(%var_4214, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="uint32") /* ty=Tensor[(10, 14, 13), uint32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %658 = add(%656, %657) /* ty=Tensor[(10, 14, 13), uint32] */;
  %659 = cast(%653, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="bool") /* ty=Tensor[(10, 14, 13), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %663 = less(%661, %662) /* ty=Tensor[(10, 14, 13), bool] */;
  %664 = @func_3183() /* ty=Tensor[(10, 14, 13), float64] */;
  (%663, %664)
}

def @func_3420(%var_3379: Tensor[(10, 14, 13), float64]) -> Tensor[(10, 14, 13), uint16] {
  %665 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
  %666 = cast(%var_3379, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="uint16") /* ty=Tensor[(10, 14, 13), uint16] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%668, %669) /* ty=Tensor[(10, 14, 13), uint16] */
}

def @func_3236() -> (Tensor[(10, 14, 13), float64],) {
  @func_3234() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_6885() -> (Tensor[(10, 14, 13), float64],) {
  @func_6883() /* ty=(Tensor[(10, 14, 13), float64],) */
}

def @func_6756(%var_6734: Tensor[(126), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(10, 14, 13), float64]) {
  %670 = @func_4005() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %671 = cast(%var_6734, dtype="int32") /* ty=Tensor[(126), int32] */;
  %672 = cast(%var_6734, dtype="int32") /* ty=Tensor[(126), int32] */;
  %673 = reshape(%671, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %674 = reshape(%672, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %675 = @func_286(%673, %674) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %676 = @func_6223() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %677 = %670.0;
  %678 = %675.0;
  %679 = %676.0;
  (%677, %678, %var_6734, %679)
}

def @func_6086(%var_6084: Tensor[(72), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64]) {
  @func_6083(%var_6084) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float64]) */
}

def @func_3366(%var_3362: Tensor[(2, 9, 13), bool], %var_3363: Tensor[(140), uint8], %var_3364: Tensor[(36), uint64], %var_3365: Tensor[(126), int32]) -> (Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) {
  @func_3360(%var_3362, %var_3363, %var_3364, %var_3365) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) */
}

def @func_6416(%var_6414: Tensor[(7, 1, 16), uint64]) -> Tensor[(7, 10, 16), uint64] {
  @func_6413(%var_6414) /* ty=Tensor[(7, 10, 16), uint64] */
}

def @func_2681() -> (Tensor[(15, 11, 6), float32],) {
  @func_2679() /* ty=(Tensor[(15, 11, 6), float32],) */
}

def @func_4150() -> (Tensor[(16, 13, 2), float32],) {
  %680 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 13, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 2), float32] */;
  %681 = exp(%680) /* ty=Tensor[(16, 13, 2), float32] */;
  (%681,)
}

def @func_3183() -> Tensor[(10, 14, 13), float64] {
  %682 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %682.0
}

def @func_6692(%var_6687: Tensor[(112), uint8], %var_6688: Tensor[(140), uint8], %var_6689: bool, %var_6690: Tensor[(80), bool], %var_6691: Tensor[(3072), bool]) -> (Tensor[(35, 4), uint8], Tensor[(112), uint8], Tensor[(140), uint8], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(10, 14, 13), float32], Tensor[(3072), bool], Tensor[(3072), bool]) {
  %709 = fn (%var_6627: Tensor[(112), uint8], %var_6628: Tensor[(140), uint8], %var_6657: bool, %var_6658: Tensor[(80), bool], %var_6681: Tensor[(3072), bool]) -> (Tensor[(35, 4), uint8], Tensor[(112), uint8], Tensor[(140), uint8], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(10, 14, 13), float32], Tensor[(3072), bool], Tensor[(3072), bool]) {
    %683 = @func_6195() /* ty=Tensor[(10, 14, 13), float32] */;
    %684 = cast(%683, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %685 = cast(%var_6627, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %686 = cast(%var_6628, dtype="uint8") /* ty=Tensor[(140), uint8] */;
    %687 = reshape(%684, newshape=[10, 14, 13]) /* ty=Tensor[(10, 14, 13), float64] */;
    %688 = reshape(%685, newshape=[112]) /* ty=Tensor[(112), uint8] */;
    %689 = reshape(%686, newshape=[35, 4]) /* ty=Tensor[(35, 4), uint8] */;
    %690 = @func_2736(%687, %688, %689) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) */;
    %691 = @func_3024() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %692 = cast(%var_6657, dtype="bool") /* ty=bool */;
    %693 = cast(%var_6658, dtype="bool") /* ty=Tensor[(80), bool] */;
    %694 = reshape(%692, newshape=[]) /* ty=bool */;
    %695 = reshape(%693, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), bool] */;
    %696 = @func_3214() /* ty=Tensor[(10, 14, 13), float64] */;
    %697 = cast(%683, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%696, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %701 = cast(%var_6681, dtype="bool") /* ty=Tensor[(3072), bool] */;
    %702 = reshape(%701, newshape=[3072]) /* ty=Tensor[(3072), bool] */;
    %703 = @func_5804(%702) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(16, 16, 12), bool], Tensor[(3072), bool], Tensor[(126), int32]) */;
    %704 = %690.5;
    %705 = %691.0;
    %706 = @func_3491(%694, %695) /* ty=Tensor[(1, 5, 16), bool] */;
    %707 = divide(%699, %700) /* ty=Tensor[(10, 14, 13), float32] */;
    %708 = %703.2;
    (%704, %var_6627, %var_6628, %705, %706, %var_6657, %var_6658, %707, %708, %var_6681)
  };
  %709(%var_6687, %var_6688, %var_6689, %var_6690, %var_6691) /* ty=(Tensor[(35, 4), uint8], Tensor[(112), uint8], Tensor[(140), uint8], Tensor[(10, 14, 13), float64], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(10, 14, 13), float32], Tensor[(3072), bool], Tensor[(3072), bool]) */
}

def @func_4196(%var_4194: bool, %var_4195: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) {
  %726 = fn (%var_4184: bool, %var_4185: Tensor[(80), bool]) -> (Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) {
    %710 = @func_1066() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %711 = %710.0;
    %712 = cast(%711, dtype="float32") /* ty=Tensor[(10, 14, 13), float32] */;
    %713 = sqrt(%712) /* ty=Tensor[(10, 14, 13), float32] */;
    %714 = cast(%711, dtype="uint8") /* ty=Tensor[(10, 14, 13), uint8] */;
    %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%713, dtype="uint8") /* ty=Tensor[(10, 14, 13), uint8] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %718 = cast(%var_4184, dtype="bool") /* ty=bool */;
    %719 = cast(%var_4185, dtype="bool") /* ty=Tensor[(80), bool] */;
    %720 = reshape(%718, newshape=[]) /* ty=bool */;
    %721 = reshape(%719, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), bool] */;
    %722 = @func_3974() /* ty=(Tensor[(16, 15, 10), bool],) */;
    %723 = bitwise_and(%716, %717) /* ty=Tensor[(10, 14, 13), uint8] */;
    %724 = @func_3491(%720, %721) /* ty=Tensor[(1, 5, 16), bool] */;
    %725 = %722.0;
    (%723, %724, %var_4184, %var_4185, %725)
  };
  %726(%var_4194, %var_4195) /* ty=(Tensor[(10, 14, 13), uint8], Tensor[(1, 5, 16), bool], bool, Tensor[(80), bool], Tensor[(16, 15, 10), bool]) */
}

def @func_3189() -> Tensor[(10, 14, 13), float64] {
  %728 = fn () -> Tensor[(10, 14, 13), float64] {
    %727 = @func_2760() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %727.0
  };
  %728() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_3624(%var_3622: Tensor[(8, 1, 15), int32], %var_3623: Tensor[(8, 3, 15), int32]) -> (Tensor[(8, 3, 15), int32], Tensor[(8, 1, 15), float32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %737 = fn (%var_3591: Tensor[(8, 1, 15), int32], %var_3592: Tensor[(8, 3, 15), int32]) -> (Tensor[(8, 3, 15), int32], Tensor[(8, 1, 15), float32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
    %729 = cast(%var_3591, dtype="int32") /* ty=Tensor[(8, 1, 15), int32] */;
    %730 = cast(%var_3592, dtype="int32") /* ty=Tensor[(8, 3, 15), int32] */;
    %731 = cast(%var_3591, dtype="float32") /* ty=Tensor[(8, 1, 15), float32] */;
    %732 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %733 = maximum(%729, %730) /* ty=Tensor[(8, 3, 15), int32] */;
    %734 = asin(%731) /* ty=Tensor[(8, 1, 15), float32] */;
    %735 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
    %736 = %732.0;
    (%733, %734, %735, %736)
  };
  %737(%var_3622, %var_3623) /* ty=(Tensor[(8, 3, 15), int32], Tensor[(8, 1, 15), float32], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_1746(%var_1745: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) {
  %753 = fn (%var_1720: Tensor[(10, 14, 13), float64]) -> (Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) {
    %738 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %739 = %738.0;
    %740 = cast(%var_1720, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
    %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%739, dtype="int32") /* ty=Tensor[(10, 14, 13), int32] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %744 = cast(meta[relay.Constant][36] /* ty=Tensor[(14), uint8] */, dtype="uint8") /* ty=Tensor[(14), uint8] */;
    %745 = cast(meta[relay.Constant][37] /* ty=Tensor[(112), uint8] */, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %746 = cast(meta[relay.Constant][38] /* ty=Tensor[(70, 2), uint8] */, dtype="uint8") /* ty=Tensor[(70, 2), uint8] */;
    %747 = reshape(%744, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), uint8] */;
    %748 = reshape(%745, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), uint8] */;
    %749 = reshape(%746, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint8] */;
    %750 = @func_1530(%747, %748, %749) /* ty=(Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) */;
    %751 = minimum(%742, %743) /* ty=Tensor[(10, 14, 13), int32] */;
    %752 = %750.0;
    (%751, %752, meta[relay.Constant][36] /* ty=Tensor[(14), uint8] */, meta[relay.Constant][37] /* ty=Tensor[(112), uint8] */, meta[relay.Constant][38] /* ty=Tensor[(70, 2), uint8] */)
  };
  %753(%var_1745) /* ty=(Tensor[(10, 14, 13), int32], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) */
}

def @func_451(%var_399: Tensor[(16, 16, 12), bool], %var_417: Tensor[(63, 2), int32]) -> (Tensor[(16, 16, 12), bool], Tensor[(6, 7, 3), int32], Tensor[(63, 2), int32], Tensor[(6, 7, 3), int32], Tensor[(16, 16, 12), int64], Tensor[(16, 16, 12), float64]) {
  %754 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 16, 12), bool] */, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %755 = shape_of(%var_399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_399, dtype="bool") /* ty=Tensor[(16, 16, 12), bool] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %758 = cast(%var_417, dtype="int32") /* ty=Tensor[(63, 2), int32] */;
  %759 = cast(%var_417, dtype="int32") /* ty=Tensor[(63, 2), int32] */;
  %760 = reshape(%758, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %761 = reshape(%759, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %762 = @func_286(%760, %761) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %763 = %762.0;
  %764 = cast(%763, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %765 = cast(%763, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
  %766 = reshape(%764, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %767 = reshape(%765, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), int32] */;
  %768 = @func_286(%766, %767) /* ty=(Tensor[(6, 7, 3), int32],) */;
  %769 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 16, 12), bool] */, dtype="float64") /* ty=Tensor[(16, 16, 12), float64] */;
  %770 = sigmoid(%769) /* ty=Tensor[(16, 16, 12), float64] */;
  %771 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 16, 12), bool] */, dtype="int64") /* ty=Tensor[(16, 16, 12), int64] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="int64") /* ty=Tensor[(16, 16, 12), int64] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %775 = cast(%var_399, dtype="float64") /* ty=Tensor[(16, 16, 12), float64] */;
  %776 = logical_or(%756, %757) /* ty=Tensor[(16, 16, 12), bool] */;
  %777 = %768.0;
  %778 = left_shift(%773, %774) /* ty=Tensor[(16, 16, 12), int64] */;
  %779 = sinh(%775) /* ty=Tensor[(16, 16, 12), float64] */;
  (%776, %763, %var_417, %777, %778, %779)
}

def @func_4904() -> (Tensor[(15, 11, 6), float32],) {
  %780 = @func_4384() /* ty=(Tensor[(15, 11, 6), float32],) */;
  %781 = %780.0;
  (%781,)
}

def @func_821(%var_802: Tensor[(10, 9, 11), int8]) -> (Tensor[(10, 9, 11), bool],) {
  %782 = cast(%var_802, dtype="int8") /* ty=Tensor[(10, 9, 11), int8] */;
  %783 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(10, 9, 11), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 9, 11), int8] */, dtype="int8") /* ty=Tensor[(10, 9, 11), int8] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %786 = minimum(%784, %785) /* ty=Tensor[(10, 9, 11), int8] */;
  %787 = cast(%786, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
  %788 = sinh(%787) /* ty=Tensor[(10, 9, 11), float32] */;
  %789 = cast(%786, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %793 = not_equal(%791, %792) /* ty=Tensor[(10, 9, 11), bool] */;
  (%793,)
}

def @func_5073() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %796 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
    %794 = @func_2359() /* ty=Tensor[(10, 14, 13), float64] */;
    %795 = @func_1686() /* ty=Tensor[(10, 14, 13), float64] */;
    (%794, %795)
  };
  %796() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

def @func_5019() -> Tensor[(756), float64] {
  @func_5017() /* ty=Tensor[(756), float64] */
}

def @func_3443(%var_3441: Tensor[(300, 2), float64]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(300, 2), float64]) {
  @func_3440(%var_3441) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(15, 4, 10), float64], Tensor[(300, 2), float64]) */
}

def @func_289(%var_287: Tensor[(6, 7, 3), int32], %var_288: Tensor[(6, 7, 3), int32]) -> (Tensor[(6, 7, 3), int32],) {
  %802 = fn (%var_275: Tensor[(6, 7, 3), int32], %var_276: Tensor[(6, 7, 3), int32]) -> (Tensor[(6, 7, 3), int32],) {
    %797 = cast(%var_276, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
    %798 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
    %799 = cast(%var_275, dtype="int32") /* ty=Tensor[(6, 7, 3), int32] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %801 = left_shift(%799, %800) /* ty=Tensor[(6, 7, 3), int32] */;
    (%801,)
  };
  %802(%var_287, %var_288) /* ty=(Tensor[(6, 7, 3), int32],) */
}

def @func_2740(%var_2737: Tensor[(10, 14, 13), float64], %var_2738: Tensor[(112), uint8], %var_2739: Tensor[(35, 4), uint8]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) {
  %820 = fn (%var_2703: Tensor[(10, 14, 13), float64], %var_2728: Tensor[(112), uint8], %var_2729: Tensor[(35, 4), uint8]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) {
    %803 = @func_1120() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %804 = %803.0;
    %805 = cast(%var_2703, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
    %807 = cast(%804, dtype="float64") /* ty=Tensor[(10, 14, 13), float64] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %809 = @func_1300() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %810 = cast(meta[relay.Constant][41] /* ty=Tensor[(14), uint8] */, dtype="uint8") /* ty=Tensor[(14), uint8] */;
    %811 = cast(%var_2728, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %812 = cast(%var_2729, dtype="uint8") /* ty=Tensor[(35, 4), uint8] */;
    %813 = reshape(%810, newshape=[2, 7, 1]) /* ty=Tensor[(2, 7, 1), uint8] */;
    %814 = reshape(%811, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), uint8] */;
    %815 = reshape(%812, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint8] */;
    %816 = @func_1530(%813, %814, %815) /* ty=(Tensor[(2, 7, 8), uint8], Tensor[(2, 7, 10), bool]) */;
    %817 = multiply(%807, %808) /* ty=Tensor[(10, 14, 13), float64] */;
    %818 = %809.0;
    %819 = %816.0;
    (%817, %818, %819, meta[relay.Constant][41] /* ty=Tensor[(14), uint8] */, %var_2728, %var_2729)
  };
  %820(%var_2737, %var_2738, %var_2739) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(2, 7, 8), uint8], Tensor[(14), uint8], Tensor[(112), uint8], Tensor[(35, 4), uint8]) */
}

def @func_3360(%var_3302: Tensor[(2, 9, 13), bool], %var_3326: Tensor[(140), uint8], %var_3350: Tensor[(36), uint64], %var_3351: Tensor[(126), int32]) -> (Tensor[(2, 9, 13), bool], Tensor[(10, 14, 13), float64], Tensor[(2, 9, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(112, 1), uint8], Tensor[(140), uint8], Tensor[(3072), int64], Tensor[(36), uint64], Tensor[(126), int32], Tensor[(3072), float64]) {
  %821 = cast(%var_3302, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %822 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %825 = cast(%var_3302, dtype="int16") /* ty=Tensor[(2, 9, 13), int16] */;
  %826 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int16") /* ty=Tensor[(2, 9, 13), int16] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %829 = logical_xor(%827, %828) /* ty=Tensor[(2, 9, 13), int16] */;
  %830 = cast(%829, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %831 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(2, 9, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 9, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = cast(meta[relay.Constant][43] /* ty=Tensor[(112, 1), uint8] */, dtype="uint8") /* ty=Tensor[(112, 1), uint8] */;
  %835 = cast(%var_3326, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %836 = reshape(%834, newshape=[112]) /* ty=Tensor[(112), uint8] */;
  %837 = reshape(%835, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %838 = @func_2616(%836, %837) /* ty=(Tensor[(10, 14, 13), bool], Tensor[(15, 4, 10), float64], Tensor[(600), float64], Tensor[(15, 4, 10), float64], Tensor[(2, 7, 8), uint8], Tensor[(1, 14), uint8], Tensor[(112), uint8], Tensor[(140), uint8]) */;
  %839 = cast(%var_3350, dtype="uint64") /* ty=Tensor[(36), uint64] */;
  %840 = cast(%var_3351, dtype="int32") /* ty=Tensor[(126), int32] */;
  %841 = cast(meta[relay.Constant][44] /* ty=Tensor[(3072), float64] */, dtype="float64") /* ty=Tensor[(3072), float64] */;
  %842 = reshape(%839, newshape=[4, 9]) /* ty=Tensor[(4, 9), uint64] */;
  %843 = reshape(%840, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %844 = reshape(%841, newshape=[3072]) /* ty=Tensor[(3072), float64] */;
  %845 = @func_500(%842, %843, %844) /* ty=(Tensor[(4, 9), bool], Tensor[(6, 7, 3), int32], Tensor[(126), int32], Tensor[(6, 7, 3), int32], Tensor[(3072), int64]) */;
  %846 = logical_and(%823, %824) /* ty=Tensor[(2, 9, 13), bool] */;
  %847 = @func_3222() /* ty=Tensor[(10, 14, 13), float64] */;
  %848 = equal(%832, %833) /* ty=Tensor[(2, 9, 13), bool] */;
  %849 = %838.1;
  %850 = %845.4;
  (%846, %847, %848, %849, meta[relay.Constant][43] /* ty=Tensor[(112, 1), uint8] */, %var_3326, %850, %var_3350, %var_3351, meta[relay.Constant][44] /* ty=Tensor[(3072), float64] */)
}

def @func_7050(%var_7042: Tensor[(234), bool], %var_7044: Tensor[(1, 36), uint64], %var_7045: Tensor[(126, 1), int32]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(140), uint8], Tensor[(1, 36), uint64], Tensor[(126, 1), int32], Tensor[(234), float64]) {
  %851 = @func_4355() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %852 = cast(%var_7042, dtype="bool") /* ty=Tensor[(234), bool] */;
  %853 = cast(meta[relay.Constant][45] /* ty=Tensor[(140), uint8] */, dtype="uint8") /* ty=Tensor[(140), uint8] */;
  %854 = cast(%var_7044, dtype="uint64") /* ty=Tensor[(1, 36), uint64] */;
  %855 = cast(%var_7045, dtype="int32") /* ty=Tensor[(126, 1), int32] */;
  %856 = reshape(%852, newshape=[234]) /* ty=Tensor[(234), bool] */;
  %857 = reshape(%853, newshape=[140]) /* ty=Tensor[(140), uint8] */;
  %858 = reshape(%854, newshape=[36]) /* ty=Tensor[(36), uint64] */;
  %859 = reshape(%855, newshape=[126]) /* ty=Tensor[(126), int32] */;
  %860 = @func_3661(%856, %857, %858, %859) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(2, 9, 13), bool], Tensor[(234), bool], Tensor[(140), uint8], Tensor[(36), uint64], Tensor[(126), int32]) */;
  %861 = cast(%var_7042, dtype="float64") /* ty=Tensor[(234), float64] */;
  %862 = %851.0;
  %863 = %860.3;
  %864 = sqrt(%861) /* ty=Tensor[(234), float64] */;
  (%862, %863, meta[relay.Constant][45] /* ty=Tensor[(140), uint8] */, %var_7044, %var_7045, %864)
}

def @func_5339() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) {
  %865 = @func_3808() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %866 = @func_2324() /* ty=(Tensor[(10, 14, 13), float64],) */;
  %867 = %865.2;
  %868 = @func_3723() /* ty=Tensor[(10, 14, 13), bool] */;
  %869 = %866.0;
  (%867, %868, %869)
}

def @func_5756() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %870 = @func_1634() /* ty=(Tensor[(10, 14, 13), uint16], Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */;
  %871 = @func_4582() /* ty=(Tensor[(10, 14, 13), float32], Tensor[(10, 14, 13), bool], Tensor[(10, 14, 13), float64]) */;
  %872 = %870.1;
  %873 = %871.2;
  (%872, %873)
}

def @func_4065(%var_4063: Tensor[(112), uint8], %var_4064: Tensor[(70, 2), uint8]) -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) {
  @func_4061(%var_4063, %var_4064) /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64], Tensor[(140), uint8], Tensor[(112), uint8], Tensor[(70, 2), uint8]) */
}

def @func_5726() -> (Tensor[(10, 14, 13), int8],) {
  %880 = fn () -> (Tensor[(10, 14, 13), int8],) {
    %874 = @func_2866() /* ty=Tensor[(10, 14, 13), float64] */;
    %875 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 14, 13), float64] */, dtype="int8") /* ty=Tensor[(10, 14, 13), int8] */;
    %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
    %877 = cast(%874, dtype="int8") /* ty=Tensor[(10, 14, 13), int8] */;
    %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %879 = subtract(%877, %878) /* ty=Tensor[(10, 14, 13), int8] */;
    (%879,)
  };
  %880() /* ty=(Tensor[(10, 14, 13), int8],) */
}

def @func_3223() -> Tensor[(10, 14, 13), float64] {
  %882 = fn () -> Tensor[(10, 14, 13), float64] {
    %881 = @func_2947() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %881.0
  };
  %882() /* ty=Tensor[(10, 14, 13), float64] */
}

def @func_6163() -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
  %886 = fn () -> (Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) {
    %883 = @func_3234() /* ty=(Tensor[(10, 14, 13), float64],) */;
    %884 = %883.0;
    %885 = @func_2212() /* ty=Tensor[(10, 14, 13), float64] */;
    (%884, %885)
  };
  %886() /* ty=(Tensor[(10, 14, 13), float64], Tensor[(10, 14, 13), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen73/build/output.py:2527: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen73/build/output.py", line 2532, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_reshape_floor_divide_kernel0(float* __restrict__ T_floor_divide, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1170) {
    T_floor_divide[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = floorf((placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] / placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]));
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

