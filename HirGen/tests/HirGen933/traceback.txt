==========mod==========
#[version = "0.0.5"]
def @func_7751() -> (Tensor[(16, 11, 11), int8],) {
  %0 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1 = %0.0;
  (%1,)
}

def @func_12293(%var_12282: Tensor[(8, 15, 6), float64]) -> Tensor[(8, 15, 6), float64] {
  %2 = cast(%var_12282, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  erf(%2) /* ty=Tensor[(8, 15, 6), float64] */
}

def @func_8076() -> Tensor[(1, 360), uint32] {
  %3 = @func_7326() /* ty=(Tensor[(1, 360), uint32],) */;
  %3.0
}

def @func_9788() -> Tensor[(7, 16, 1), float32] {
  %4 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %4.0
}

def @func_7104() -> (Tensor[(16, 11, 11), int8],) {
  %5 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  (%5,)
}

def @main(%var_14360: Tensor[(7, 16, 1), float32], %var_14385: Tensor[(48), float32], %var_14387: Tensor[(105), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, ?), bool], Tensor[(16, 11, 11), float32], Tensor[(16, 3, 1), float32], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32], Tensor[(7, 16, ?), float32]) {
  %6 = @func_9323() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %7 = @func_8243() /* ty=Tensor[(7, 16, 1), float32] */;
  %8 = cast(%var_14360, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = @func_8175() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) */;
  %13 = cast(%var_14385, dtype="float32") /* ty=Tensor[(48), float32] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %15 = cast(%var_14387, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %16 = reshape(%13, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %17 = reshape(%14, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %18 = reshape(%15, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %19 = @func_2237(%16, %17, %18) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
  %20 = @func_6921() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %21 = %20.0;
  %22 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %23 = %22.0;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %25 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%21, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %28 = %6.0;
  %29 = less_equal(%10, %11) /* ty=Tensor[(7, 16, ?), bool] */;
  %30 = %12.1;
  %31 = %19.0;
  %32 = floor_mod(%26, %27) /* ty=Tensor[(7, 16, ?), float32] */;
  (%28, %29, %30, %31, %var_14385, meta[relay.Constant][0] /* ty=Tensor[(360), uint32] */, %var_14387, %32)
}

def @func_8124() -> (Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(70, 4), float64], Tensor[(7, 16, 1), float32]) {
  %33 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(70, 4), float64] */, dtype="float64") /* ty=Tensor[(70, 4), float64] */;
  %35 = reshape(%34, newshape=[280]) /* ty=Tensor[(280), float64] */;
  %36 = @func_4450(%35) /* ty=(Tensor[(7, 16, 10), int16], Tensor[(4, 10, 7), float32], Tensor[(280), float64], Tensor[(360), uint32]) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(70, 4), float64] */, dtype="float64") /* ty=Tensor[(70, 4), float64] */;
  %38 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(70, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(70, 4), float64] */, dtype="float64") /* ty=Tensor[(70, 4), float64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %41 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %42 = %33.0;
  %43 = %36.3;
  %44 = floor_mod(%39, %40) /* ty=Tensor[(70, 4), float64] */;
  %45 = %41.0;
  (%42, %43, %44, %45)
}

def @func_9717() -> (Tensor[(7, 16, 1), float32],) {
  %46 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %47 = %46.0;
  (%47,)
}

def @func_2237(%var_2163: Tensor[(16, 3, 1), float32], %var_2176: Tensor[(360), uint32], %var_2224: Tensor[(105), uint32]) -> (Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) {
  %48 = cast(%var_2163, dtype="float32") /* ty=Tensor[(16, 3, 1), float32] */;
  %49 = cast(%var_2176, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %50 = reshape(%49, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %51 = @func_1013(%50) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %52 = %51.1;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %54 = reshape(%53, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %55 = @func_652(%54) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %56 = cast(%var_2224, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %57 = cast(%var_2224, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %58 = cast(%var_2176, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %59 = reshape(%56, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %60 = reshape(%57, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %61 = reshape(%58, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %62 = @func_1673(%59, %60, %61) /* ty=(Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) */;
  %63 = log2(%48) /* ty=Tensor[(16, 3, 1), float32] */;
  %64 = %55.0;
  %65 = %62.1;
  (%63, %52, %var_2176, %64, %65, %var_2224)
}

def @func_13787() -> (Tensor[(7, 16, 1), float32],) {
  %66 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %67 = %66.0;
  (%67,)
}

def @func_10368() -> Tensor[(7, 16, 1), float32] {
  %68 = @func_7733() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %68.0
}

def @func_9897(%var_9895: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) {
  %69 = cast(2.84289f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %70 = cast(%var_9895, dtype="float32") /* ty=Tensor[(6), float32] */;
  %71 = reshape(%69, newshape=[]) /* ty=float32 */;
  %72 = reshape(%70, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %73 = @func_2928(%71, %72) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %74 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %75 = %73.2;
  (%74, %75, 2.84289f /* ty=float32 */, %var_9895)
}

def @func_5913(%var_5852: Tensor[(1575), float64], %var_5865: Tensor[(36), bool], %var_5905: Tensor[(7, 16, 360), float32]) -> (Tensor[(360), uint32], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(7, 16, 105), bool], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], bool, Tensor[(36), bool], float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 360), bool], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32]) {
  %76 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %77 = reshape(%76, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %78 = @func_4775(%77) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %79 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %80 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %81 = %80.0;
  %82 = cast(%79, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = greater(%84, %85) /* ty=Tensor[(7, 16, ?), bool] */;
  %87 = cast(%86, dtype="bool") /* ty=Tensor[(7, 16, ?), bool] */;
  %88 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%79, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = greater_equal(%89, %90) /* ty=Tensor[(7, 16, ?), bool] */;
  %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), uint32] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %93 = cast(%91, dtype="bool") /* ty=Tensor[(7, 16, ?), bool] */;
  %94 = greater_equal(%92, %93) /* ty=Tensor[(7, 16, 360), bool] */;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
  %96 = cast(%91, dtype="float64") /* ty=Tensor[(7, 16, ?), float64] */;
  %97 = cast(meta[relay.Constant][4] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %99 = reshape(%97, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %100 = reshape(%98, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %101 = @func_5251(%99, %100) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
  %102 = cast(%86, dtype="bool") /* ty=Tensor[(7, 16, ?), bool] */;
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(105), uint32] */, dtype="bool") /* ty=Tensor[(105), bool] */;
  %104 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %105 = reshape(%104, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %106 = @func_4775(%105) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %107 = cast(%var_5852, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %108 = reshape(%107, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), float64] */;
  %109 = @func_2589(%108) /* ty=(Tensor[(7, 15, 15), float32],) */;
  %110 = cast(%var_5865, dtype="bool") /* ty=Tensor[(36), bool] */;
  %111 = reshape(%110, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %112 = @func_4323(%111) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %113 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %114 = cast(%var_5865, dtype="bool") /* ty=Tensor[(36), bool] */;
  %115 = reshape(%114, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %116 = @func_4024(%115) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %117 = cast(%86, dtype="uint64") /* ty=Tensor[(7, 16, ?), uint64] */;
  %118 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), uint32] */, dtype="uint64") /* ty=Tensor[(360), uint64] */;
  %119 = logical_xor(%117, %118) /* ty=Tensor[(7, 16, 360), uint64] */;
  %120 = cast(%81, dtype="int16") /* ty=Tensor[(7, 16, 1), int16] */;
  %121 = cast(%119, dtype="int16") /* ty=Tensor[(7, 16, 360), int16] */;
  %122 = multiply(%120, %121) /* ty=Tensor[(7, 16, 360), int16] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
  %124 = erf(%123) /* ty=Tensor[(7, 16, 360), float64] */;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(7, 16, 360), float32] */;
  %126 = sqrt(%125) /* ty=Tensor[(7, 16, 360), float32] */;
  %127 = cast(%124, dtype="bool") /* ty=Tensor[(7, 16, 360), bool] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="bool") /* ty=Tensor[(7, 16, 360), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = cast(%var_5905, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
  %132 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%126, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %135 = %78.2;
  %136 = add(%95, %96) /* ty=Tensor[(7, 16, 360), float64] */;
  %137 = %101.0;
  %138 = less_equal(%102, %103) /* ty=Tensor[(7, 16, 105), bool] */;
  %139 = %106.1;
  %140 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %141 = %109.0;
  %142 = %112.2;
  %143 = %113.2;
  %144 = %116.0;
  %145 = not_equal(%129, %130) /* ty=Tensor[(7, 16, 360), bool] */;
  %146 = floor_mod(%133, %134) /* ty=Tensor[(7, 16, 360), float64] */;
  %147 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  (%135, %136, %137, meta[relay.Constant][4] /* ty=Tensor[(1936), float32] */, %138, %139, %140, %141, %var_5852, %142, %var_5865, %143, %144, %145, %146, %147)
}

def @func_11147() -> (Tensor[(16, 11, 11), int8],) {
  %148 = @func_9355() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %149 = %148.0;
  (%149,)
}

def @func_7710() -> (Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool]) {
  %150 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %151 = reshape(%150, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %152 = @func_4024(%151) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %153 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  %154 = %152.2;
  (%153, %154, meta[relay.Constant][6] /* ty=Tensor[(36), bool] */)
}

def @func_9504(%var_9491: Tensor[(6, 1), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(13, 3), float32], Tensor[(6, 1), float32]) {
  %155 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
  %156 = cast(%var_9491, dtype="float32") /* ty=Tensor[(6, 1), float32] */;
  %157 = reshape(%155, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %158 = reshape(%156, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %159 = @func_6457(%157, %158) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %160 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  %161 = %159.0;
  (%160, %161, meta[relay.Constant][7] /* ty=Tensor[(13, 3), float32] */, %var_9491)
}

def @func_4973() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) {
  %162 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %163 = reshape(%162, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %164 = @func_4775(%163) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %165 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  %166 = %164.1;
  (%165, %166, meta[relay.Constant][8] /* ty=Tensor[(360), uint32] */)
}

def @func_11437() -> (Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32]) {
  %167 = @func_7230() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %168 = %167.0;
  %169 = cast(%168, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %170 = cast(%168, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %171 = reshape(%170, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %172 = @func_652(%171) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %173 = sin(%169) /* ty=Tensor[(16, 11, 11), float64] */;
  %174 = %172.0;
  (%173, %174)
}

def @func_5528() -> (Tensor[(7, 16, 1), float32],) {
  %175 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %176 = %175.0;
  (%176,)
}

def @func_9263() -> (Tensor[(7, 16, 1), float32], float32) {
  %177 = @func_6771() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */;
  %178 = @func_8418() /* ty=(float32,) */;
  %179 = %177.2;
  %180 = %178.0;
  (%179, %180)
}

def @func_12445() -> Tensor[(7, 16, 1), float32] {
  %181 = @func_6632() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %181.0
}

def @func_7548(%var_7537: Tensor[(15, 15, 15), bool], %var_7538: Tensor[(15, 15, 15), bool]) -> (Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) {
  %182 = cast(%var_7538, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
  %183 = shape_of(%var_7537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%var_7537, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %186 = logical_and(%184, %185) /* ty=Tensor[(15, 15, 15), bool] */;
  %187 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  (%186, %187)
}

def @func_12518() -> (float32, Tensor[(7, 16, 1), float32]) {
  %188 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %189 = @func_6869() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %190 = %188.1;
  %191 = %189.1;
  (%190, %191)
}

def @func_12010() -> Tensor[(7, 16, 1), float32] {
  %192 = @func_10975() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %192.1
}

def @func_4251(%var_4235: Tensor[(360), uint32], %var_4236: Tensor[(105), uint32]) -> (Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) {
  %193 = cast(meta[relay.Constant][9] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %194 = cast(%var_4235, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %195 = cast(%var_4236, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %196 = reshape(%193, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %197 = reshape(%194, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %198 = reshape(%195, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %199 = @func_2237(%196, %197, %198) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
  %200 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %201 = %200.0;
  %202 = cast(%var_4235, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %203 = cast(%201, dtype="uint32") /* ty=Tensor[(7, 16, 1), uint32] */;
  %204 = %199.2;
  %205 = minimum(%202, %203) /* ty=Tensor[(7, 16, 360), uint32] */;
  (%204, meta[relay.Constant][9] /* ty=Tensor[(48), float32] */, %var_4236, %205)
}

def @func_4207() -> (Tensor[(7, 16, 1), float32],) {
  %206 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  (%206,)
}

def @func_3897(%var_3860: Tensor[(4, 484), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) {
  %207 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %208 = cast(%var_3860, dtype="float32") /* ty=Tensor[(4, 484), float32] */;
  %209 = reshape(%208, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %210 = @func_652(%209) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %213 = cast(meta[relay.Constant][10] /* ty=Tensor[(180, 2), uint32] */, dtype="uint32") /* ty=Tensor[(180, 2), uint32] */;
  %214 = reshape(%213, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %215 = @func_1013(%214) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %216 = %207.0;
  %217 = log(%212) /* ty=Tensor[(16, 11, 11), float64] */;
  %218 = %215.2;
  (%216, %var_3860, %217, %218, meta[relay.Constant][10] /* ty=Tensor[(180, 2), uint32] */)
}

def @func_8175() -> (Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) {
  %219 = @func_7104() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %220 = %219.0;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %222 = reshape(%221, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %223 = @func_652(%222) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %224 = @func_4973() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %225 = @func_4973() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %226 = %223.0;
  %227 = %224.2;
  %228 = %225.0;
  (%220, %226, %227, %228)
}

def @func_11031() -> (Tensor[(16, 11, 11), int8],) {
  %229 = @func_8318() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %230 = %229.0;
  (%230,)
}

def @func_2928(%var_2885: float32, %var_2886: Tensor[(1, 1, 6), float32]) -> (Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) {
  %231 = cast(%var_2885, dtype="float32") /* ty=float32 */;
  %232 = cast(%var_2886, dtype="float32") /* ty=Tensor[(1, 1, 6), float32] */;
  %233 = cast(meta[relay.Constant][11] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %234 = reshape(%233, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), float64] */;
  %235 = @func_2589(%234) /* ty=(Tensor[(7, 15, 15), float32],) */;
  %236 = divide(%231, %232) /* ty=Tensor[(1, 1, 6), float32] */;
  %237 = %235.0;
  (%236, %237, meta[relay.Constant][11] /* ty=Tensor[(1575), float64] */)
}

def @func_7768(%var_7763: Tensor[(2, 13, 13), int32]) -> (Tensor[(2, 13, 13), bool],) {
  %238 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 13, 13), int32] */, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %239 = shape_of(%var_7763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_7763, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = equal(%240, %241) /* ty=Tensor[(2, 13, 13), bool] */;
  (%242,)
}

def @func_10810(%var_10807: bool) -> (Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) {
  %243 = @func_7733() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %244 = cast(%var_10807, dtype="bool") /* ty=bool */;
  %245 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %246 = reshape(%244, newshape=[]) /* ty=bool */;
  %247 = reshape(%245, newshape=[1, 36]) /* ty=Tensor[(1, 36), bool] */;
  %248 = @func_7314(%246, %247) /* ty=(Tensor[(1, 360), float32], bool, Tensor[(?, 36), uint8]) */;
  %249 = %243.0;
  %250 = %248.2;
  (%249, %250, %var_10807, meta[relay.Constant][13] /* ty=Tensor[(36), bool] */)
}

def @func_8766() -> (Tensor[(7, 16, 1), float32],) {
  %251 = @func_7786() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %252 = %251.0;
  (%252,)
}

def @func_10314(%var_10296: Tensor[(1936), float32]) -> (Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(7, 16, 1936), uint32]) {
  %253 = cast(%var_10296, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %254 = cast(meta[relay.Constant][14] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %255 = reshape(%253, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %256 = reshape(%254, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %257 = @func_5251(%255, %256) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
  %258 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %259 = cast(%var_10296, dtype="uint32") /* ty=Tensor[(1936), uint32] */;
  %260 = cast(%258, dtype="uint32") /* ty=Tensor[(7, 16, 1), uint32] */;
  %261 = %257.4;
  %262 = bitwise_and(%259, %260) /* ty=Tensor[(7, 16, 1936), uint32] */;
  (%261, meta[relay.Constant][14] /* ty=Tensor[(105), uint32] */, %262)
}

def @func_8823() -> (Tensor[(7, 16, 1), float32],) {
  %263 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %264 = %263.4;
  (%264,)
}

def @func_10190(%var_10171: Tensor[(360), uint32]) -> (Tensor[(16, 11, 11), int8], bool, Tensor[(360), uint32], Tensor[(105), uint32]) {
  %265 = cast(%var_10171, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %266 = cast(meta[relay.Constant][15] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %267 = reshape(%265, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %268 = reshape(%266, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %269 = @func_7402(%267, %268) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
  %270 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  %271 = %269.3;
  (%270, %271, %var_10171, meta[relay.Constant][15] /* ty=Tensor[(105), uint32] */)
}

def @func_11583(%var_11538: Tensor[(1575), float64]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], Tensor[(16, 11, 11), int8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(16, 11, 11), int8]) {
  %272 = @func_7671() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %273 = cast(meta[relay.Constant][16] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %274 = reshape(%273, newshape=[6, 1]) /* ty=Tensor[(6, 1), float32] */;
  %275 = @func_9504(%274) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(13, 3), float32], Tensor[(6, 1), float32]) */;
  %276 = cast(%var_11538, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %277 = reshape(%276, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), float64] */;
  %278 = @func_2589(%277) /* ty=(Tensor[(7, 15, 15), float32],) */;
  %279 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %280 = cast(meta[relay.Constant][17] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %281 = reshape(%280, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %282 = @func_4323(%281) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %283 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %284 = %272.0;
  %285 = %275.1;
  %286 = %278.0;
  %287 = %279.0;
  %288 = %282.1;
  %289 = %283.0;
  (%284, %285, meta[relay.Constant][16] /* ty=Tensor[(6), float32] */, %286, %var_11538, %287, %288, meta[relay.Constant][17] /* ty=Tensor[(36), bool] */, %289)
}

def @func_11621() -> Tensor[(7, 16, 1), float32] {
  %290 = @func_10975() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %290.1
}

def @func_13704(%var_13669: Tensor[(1936), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, ?), bool], Tensor[(7, 16, 1), float32]) {
  %291 = cast(%var_13669, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %292 = reshape(%291, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %293 = @func_13132(%292) /* ty=(Tensor[(1, 5, 5), float32], float32, Tensor[(1936), float32]) */;
  %294 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %295 = @func_12758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %296 = %295.0;
  %297 = @func_11874() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %298 = %297.0;
  %299 = cast(%298, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %300 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%296, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %303 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %304 = @func_8227() /* ty=Tensor[(7, 16, 1), float32] */;
  %305 = %293.2;
  %306 = %294.0;
  %307 = logical_and(%301, %302) /* ty=Tensor[(7, 16, ?), bool] */;
  %308 = %303.0;
  (%304, %305, %var_13669, %306, %307, %308)
}

def @func_6553() -> Tensor[(7, 16, 1), float64] {
  %309 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %311 = sigmoid(%310) /* ty=Tensor[(7, 16, 1), float32] */;
  %312 = cast(%311, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  atan(%312) /* ty=Tensor[(7, 16, 1), float64] */
}

def @func_6632() -> (Tensor[(7, 16, 1), float32],) {
  %313 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  (%313,)
}

def @func_4450(%var_4443: Tensor[(280), float64]) -> (Tensor[(7, 16, 10), int16], Tensor[(4, 10, 7), float32], Tensor[(280), float64], Tensor[(360), uint32]) {
  %314 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %315 = cast(%var_4443, dtype="float64") /* ty=Tensor[(280), float64] */;
  %316 = cast(%var_4443, dtype="float64") /* ty=Tensor[(280), float64] */;
  %317 = cast(meta[relay.Constant][18] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %318 = reshape(%315, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %319 = reshape(%316, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %320 = reshape(%317, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %321 = @func_2747(%318, %319, %320) /* ty=(Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) */;
  %322 = %314.0;
  %323 = %321.1;
  (%322, %323, %var_4443, meta[relay.Constant][18] /* ty=Tensor[(360), uint32] */)
}

def @func_9075(%var_9037: Tensor[(2, 180), uint32], %var_9042: Tensor[(4, 484), float32]) -> (float32, Tensor[(7, 16, 105), bool], Tensor[(2, 180), uint32], Tensor[(105), uint32], Tensor[(4, 484), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %324 = @func_8418() /* ty=(float32,) */;
  %325 = cast(%var_9037, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %327 = reshape(%325, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %328 = reshape(%326, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %329 = @func_7402(%327, %328) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
  %330 = @func_8556() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %331 = %330.0;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %333 = reshape(%332, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
  %334 = @func_3897(%333) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) */;
  %335 = %334.1;
  %336 = cast(%var_9042, dtype="float32") /* ty=Tensor[(4, 484), float32] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(2), int32] */;
  %338 = cast(%335, dtype="float32") /* ty=Tensor[(4, 484), float32] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %340 = cast(%var_9037, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %341 = cast(%var_9037, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
  %342 = reshape(%340, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %343 = reshape(%341, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), bool] */;
  %344 = @func_8049(%342, %343) /* ty=(Tensor[(360), uint32], Tensor[(7, 16, 105), int32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), uint64]) */;
  %345 = cast(%331, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %346 = cosh(%345) /* ty=Tensor[(16, 11, 11), float64] */;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %348 = @func_8860() /* ty=(Tensor[(7, 16, 1), float32], bool) */;
  %349 = %324.0;
  %350 = %329.4;
  %351 = floor_mod(%338, %339) /* ty=Tensor[(4, 484), float32] */;
  %352 = %344.3;
  %353 = asinh(%347) /* ty=Tensor[(16, 11, 11), float64] */;
  %354 = %348.0;
  %355 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  (%349, %350, %var_9037, meta[relay.Constant][19] /* ty=Tensor[(105), uint32] */, %351, %352, %353, %354, %355)
}

def @func_11904() -> (Tensor[(16, 11, 11), int8],) {
  %356 = @func_8318() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %357 = %356.0;
  (%357,)
}

def @func_6312() -> Tensor[(7, 16, 1), float32] {
  @func_4052() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_6622() -> (Tensor[(7, 16, 1), float32], Tensor[(36), bool]) {
  %358 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %359 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %360 = %358.2;
  (%359, %360)
}

def @func_7786() -> (Tensor[(7, 16, 1), float32],) {
  %361 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %362 = %361.0;
  (%362,)
}

def @func_4850() -> Tensor[(7, 16, 1), float32] {
  @func_4052() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_9777() -> float32 {
  @func_5633() /* ty=float32 */
}

def @func_4775(%var_4764: Tensor[(360), uint32]) -> (Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) {
  %363 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %364 = cast(%var_4764, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %365 = reshape(%364, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %366 = @func_1013(%365) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %367 = %363.3;
  %368 = %366.1;
  (%367, %368, %var_4764)
}

def @func_4695(%var_4668: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) {
  %369 = cast(-7.66514f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %370 = cast(%var_4668, dtype="float32") /* ty=Tensor[(6), float32] */;
  %371 = reshape(%369, newshape=[]) /* ty=float32 */;
  %372 = reshape(%370, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %373 = @func_2928(%371, %372) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %374 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %375 = %373.2;
  (%374, %375, -7.66514f /* ty=float32 */, %var_4668)
}

def @func_6209() -> (Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) {
  %376 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %377 = cast(meta[relay.Constant][20] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %378 = reshape(%377, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %379 = @func_4024(%378) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %380 = %376.5;
  %381 = %379.2;
  %382 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  (%380, %381, meta[relay.Constant][20] /* ty=Tensor[(36), bool] */, %382)
}

def @func_9453() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %383 = @func_9323() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %384 = @func_8435() /* ty=Tensor[(7, 16, 1), float32] */;
  %385 = %383.0;
  (%384, %385)
}

def @func_10975() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %386 = @func_6869() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %387 = @func_9323() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %388 = %386.0;
  %389 = %387.0;
  (%388, %389)
}

def @func_11135(%var_11103: Tensor[(2, 180), uint32], %var_11104: Tensor[(1936), float32], %var_11123: Tensor[(2, 180), uint32]) -> (bool, Tensor[(2, 180), uint32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(2, 180), uint32]) {
  %390 = @func_8860() /* ty=(Tensor[(7, 16, 1), float32], bool) */;
  %391 = cast(%var_11103, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %392 = cast(%var_11104, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %393 = reshape(%391, newshape=[2, 180]) /* ty=Tensor[(2, 180), uint32] */;
  %394 = reshape(%392, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
  %395 = @func_9075(%393, %394) /* ty=(float32, Tensor[(7, 16, 105), bool], Tensor[(2, 180), uint32], Tensor[(105), uint32], Tensor[(4, 484), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %396 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %397 = cast(%var_11123, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %398 = shape_of(%var_11103, dtype="int32") /* ty=Tensor[(2), int32] */;
  %399 = cast(%var_11103, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %401 = %390.1;
  %402 = %395.2;
  %403 = %396.0;
  %404 = bitwise_or(%399, %400) /* ty=Tensor[(2, 180), uint32] */;
  (%401, %402, %var_11104, %403, %404)
}

def @func_12689(%var_12672: Tensor[(36), bool], %var_12678: Tensor[(1936), float32]) -> (Tensor[(3, 12, 9), float64], Tensor[(162, 2), float32], Tensor[(6), float32], Tensor[(7, 16, 39), bool], Tensor[(13, 3, 4), float32], bool, Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(1936), float32]) {
  %405 = cast(meta[relay.Constant][21] /* ty=Tensor[(162, 2), float32] */, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
  %406 = reshape(%405, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), float32] */;
  %407 = @func_12096(%406) /* ty=(Tensor[(3, 12, 9), float64], Tensor[(3, 12, 9), bool]) */;
  %408 = @func_7733() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %409 = %408.0;
  %410 = cast(meta[relay.Constant][23] /* ty=Tensor[(39), float32] */, dtype="bool") /* ty=Tensor[(39), bool] */;
  %411 = cast(%409, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %412 = cast(meta[relay.Constant][23] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %413 = cast(meta[relay.Constant][22] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %414 = reshape(%412, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %415 = reshape(%413, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %416 = @func_6457(%414, %415) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %417 = %416.0;
  %418 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %422 = cast(%var_12672, dtype="bool") /* ty=Tensor[(36), bool] */;
  %423 = reshape(%422, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %424 = @func_4323(%423) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %425 = cast(%var_12678, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %426 = reshape(%425, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %427 = @func_6086(%426) /* ty=(float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) */;
  %428 = %407.0;
  %429 = greater(%410, %411) /* ty=Tensor[(7, 16, 39), bool] */;
  %430 = minimum(%420, %421) /* ty=Tensor[(13, 3, 4), float32] */;
  %431 = %424.2;
  %432 = %427.2;
  (%428, meta[relay.Constant][21] /* ty=Tensor[(162, 2), float32] */, meta[relay.Constant][22] /* ty=Tensor[(6), float32] */, %429, %430, %431, %var_12672, %432, %var_12678)
}

def @func_13073() -> Tensor[(16, 11, 11), int8] {
  %433 = @func_7671() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %433.1
}

def @func_10392() -> Tensor[(7, 16, 1), float32] {
  %434 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %434.0
}

def @func_3923() -> (Tensor[(7, 16, 1), float32],) {
  %435 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %436 = %435.0;
  (%436,)
}

def @func_7230() -> (Tensor[(16, 11, 11), int8],) {
  %437 = @func_7104() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %438 = %437.0;
  (%438,)
}

def @func_5583() -> Tensor[(7, 16, 1), float32] {
  @func_5105() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8999() -> (Tensor[(1, 360), float32], Tensor[(360), uint32], Tensor[(48), float32], Tensor[(21, 5), uint32], Tensor[(7, 16, 360), uint64], Tensor[(1, 360), float32]) {
  %439 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %440 = cast(meta[relay.Constant][25] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %441 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %442 = %441.0;
  %443 = cast(%442, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %444 = cast(meta[relay.Constant][26] /* ty=Tensor[(21, 5), uint32] */, dtype="uint32") /* ty=Tensor[(21, 5), uint32] */;
  %445 = reshape(%440, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %446 = reshape(%443, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %447 = reshape(%444, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %448 = @func_2237(%445, %446, %447) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
  %449 = cast(%442, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %450 = exp(%449) /* ty=Tensor[(1, 360), float32] */;
  %451 = @func_8435() /* ty=Tensor[(7, 16, 1), float32] */;
  %452 = cast(%450, dtype="uint64") /* ty=Tensor[(1, 360), uint64] */;
  %453 = cast(%451, dtype="uint64") /* ty=Tensor[(7, 16, 1), uint64] */;
  %454 = cast(%450, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %455 = %439.0;
  %456 = %448.2;
  %457 = right_shift(%452, %453) /* ty=Tensor[(7, 16, 360), uint64] */;
  %458 = sin(%454) /* ty=Tensor[(1, 360), float32] */;
  (%455, %456, meta[relay.Constant][25] /* ty=Tensor[(48), float32] */, meta[relay.Constant][26] /* ty=Tensor[(21, 5), uint32] */, %457, %458)
}

def @func_3758() -> (Tensor[(7, 16, 1), float32],) {
  %459 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  %460 = log2(%459) /* ty=Tensor[(7, 16, 1), float64] */;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %462 = sin(%461) /* ty=Tensor[(7, 16, 1), float32] */;
  (%462,)
}

def @func_6086(%var_6074: Tensor[(16, 11, 11), float32]) -> (float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) {
  %463 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %464 = cast(meta[relay.Constant][28] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %465 = reshape(%464, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %466 = @func_652(%465) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %467 = %466.0;
  %468 = cast(%var_6074, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %472 = %463.2;
  %473 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  %474 = greater(%470, %471) /* ty=Tensor[(16, 11, 11), bool] */;
  (%472, meta[relay.Constant][28] /* ty=Tensor[(1936), float32] */, %473, %474)
}

def @func_6680(%var_6662: Tensor[(1, 13, 14), uint16]) -> (Tensor[(4, 13, 14), bool], Tensor[(7, 16, 1), float32]) {
  %475 = cast(%var_6662, dtype="bool") /* ty=Tensor[(1, 13, 14), bool] */;
  %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 13, 14), uint16] */, dtype="bool") /* ty=Tensor[(4, 13, 14), bool] */;
  %477 = not_equal(%475, %476) /* ty=Tensor[(4, 13, 14), bool] */;
  %478 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  (%477, %478)
}

def @func_7671() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) {
  %479 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %480 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  %481 = %479.0;
  (%480, %481)
}

def @func_6771() -> (Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) {
  %482 = @func_6019() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
  %483 = @func_6553() /* ty=Tensor[(7, 16, 1), float64] */;
  %484 = %482.3;
  %485 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  (%483, %484, %485)
}

def @func_6457(%var_6422: Tensor[(13, 3, 1), float32], %var_6434: Tensor[(6), float32]) -> (Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) {
  %486 = cast(%var_6422, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
  %487 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %488 = cast(%var_6434, dtype="float32") /* ty=Tensor[(6), float32] */;
  %489 = reshape(%488, newshape=[3, 2]) /* ty=Tensor[(3, 2), float32] */;
  %490 = @func_6410(%489) /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) */;
  %491 = mod(%486, %487) /* ty=Tensor[(13, 3, 4), float32] */;
  %492 = %490.1;
  (%491, %492, %var_6434)
}

def @func_12233() -> (Tensor[(7, 16, 1), float64], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) {
  %493 = @func_6771() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */;
  %494 = cast(meta[relay.Constant][31] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %495 = cast(meta[relay.Constant][32] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %496 = reshape(%494, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %497 = reshape(%495, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %498 = @func_6457(%496, %497) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %499 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %500 = %493.0;
  %501 = %498.0;
  %502 = %499.0;
  (%500, %501, meta[relay.Constant][31] /* ty=Tensor[(39), float32] */, meta[relay.Constant][32] /* ty=Tensor[(6), float32] */, %502)
}

def @func_4369() -> (Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) {
  %503 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="int16") /* ty=Tensor[(7, 16, 1), int16] */;
  %506 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 16, 10), float32] */, dtype="int16") /* ty=Tensor[(7, 16, 10), int16] */;
  %507 = cast(5.866f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %508 = cast(meta[relay.Constant][34] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %509 = reshape(%507, newshape=[]) /* ty=float32 */;
  %510 = reshape(%508, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %511 = @func_3986(%509, %510) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
  %512 = add(%505, %506) /* ty=Tensor[(7, 16, 10), int16] */;
  %513 = %511.2;
  (%512, %513, 5.866f /* ty=float32 */, meta[relay.Constant][34] /* ty=Tensor[(6), float32] */)
}

def @func_8227() -> Tensor[(7, 16, 1), float32] {
  @func_5583() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8049(%var_7982: Tensor[(360), uint32], %var_8040: Tensor[(12, 15, 2), bool]) -> (Tensor[(360), uint32], Tensor[(7, 16, 105), int32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), uint64]) {
  %514 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %515 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 105), uint32] */, dtype="int32") /* ty=Tensor[(1, 105), int32] */;
  %516 = cast(%514, dtype="int32") /* ty=Tensor[(7, 16, 1), int32] */;
  %517 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %518 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 105), uint32] */, dtype="uint32") /* ty=Tensor[(1, 105), uint32] */;
  %519 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 105), uint32] */, dtype="uint32") /* ty=Tensor[(1, 105), uint32] */;
  %520 = cast(%var_7982, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %521 = reshape(%518, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %522 = reshape(%519, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %523 = reshape(%520, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %524 = @func_1673(%521, %522, %523) /* ty=(Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) */;
  %525 = %524.1;
  %526 = cast(%var_8040, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %530 = multiply(%515, %516) /* ty=Tensor[(7, 16, 105), int32] */;
  %531 = %517.0;
  %532 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %533 = bitwise_and(%528, %529) /* ty=Tensor[(12, 15, 2), uint64] */;
  (%var_7982, %530, %531, %532, %533)
}

def @func_11169() -> (Tensor[(7, 16, 1), float32],) {
  %534 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %535 = %534.0;
  (%535,)
}

def @func_12000() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %536 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %537 = %536.0;
  %538 = @func_8435() /* ty=Tensor[(7, 16, 1), float32] */;
  (%537, %538)
}

def @func_2589(%var_2582: Tensor[(7, 15, 15), float64]) -> (Tensor[(7, 15, 15), float32],) {
  %539 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 15), float64] */;
  %540 = log2(%539) /* ty=Tensor[(7, 15, 15), float64] */;
  %541 = cast(%var_2582, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %545 = floor_mod(%543, %544) /* ty=Tensor[(7, 15, 15), float32] */;
  (%545,)
}

def @func_12258() -> (Tensor[(7, 16, 1), float32],) {
  %546 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  (%546,)
}

def @func_13837() -> Tensor[(16, 11, 11), int8] {
  %547 = @func_11904() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %547.0
}

def @func_6810() -> (Tensor[(7, 16, 1), float32],) {
  %548 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  (%548,)
}

def @func_5412() -> (Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %549 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %550 = cast(meta[relay.Constant][38] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %551 = reshape(%550, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %552 = @func_4695(%551) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) */;
  %553 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %554 = cast(meta[relay.Constant][37] /* ty=Tensor[(18, 2), bool] */, dtype="bool") /* ty=Tensor[(18, 2), bool] */;
  %555 = reshape(%554, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %556 = @func_4323(%555) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %557 = %556.2;
  %558 = cast(%553, dtype="int16") /* ty=Tensor[(7, 16, 1), int16] */;
  %559 = cast(%557, dtype="int16") /* ty=int16 */;
  %560 = logical_xor(%558, %559) /* ty=Tensor[(7, 16, 1), int16] */;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  %562 = atanh(%561) /* ty=Tensor[(7, 16, 1), float64] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %564 = log(%563) /* ty=Tensor[(7, 16, 1), float32] */;
  %565 = cast(%564, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %566 = %549.0;
  %567 = %552.2;
  %568 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %569 = tan(%565) /* ty=Tensor[(7, 16, 1), float32] */;
  (%566, meta[relay.Constant][37] /* ty=Tensor[(18, 2), bool] */, %567, meta[relay.Constant][38] /* ty=Tensor[(6), float32] */, %568, %569)
}

def @func_9993() -> (Tensor[(?, 360), bool], Tensor[(16, 11, 11), int8]) {
  %570 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %573 = asinh(%572) /* ty=Tensor[(1, 360), float64] */;
  %574 = cast(%571, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(2), int32] */;
  %576 = cast(%573, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %578 = greater(%576, %577) /* ty=Tensor[(?, 360), bool] */;
  %579 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  (%578, %579)
}

def @func_8567() -> (Tensor[(6), float32],) {
  %580 = @func_4898() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) */;
  %581 = %580.3;
  (%581,)
}

def @func_7524(%var_7496: Tensor[(15, 12, 4), float32], %var_7501: float32, %var_7509: Tensor[(1936), float32]) -> (Tensor[(15, 12, 4), float32], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(1936), float32]) {
  %582 = cast(%var_7496, dtype="float32") /* ty=Tensor[(15, 12, 4), float32] */;
  %583 = cast(%var_7501, dtype="float32") /* ty=float32 */;
  %584 = cast(meta[relay.Constant][39] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %585 = reshape(%583, newshape=[]) /* ty=float32 */;
  %586 = reshape(%584, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %587 = @func_2928(%585, %586) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %588 = cast(%var_7509, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %589 = reshape(%588, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
  %590 = @func_3897(%589) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) */;
  %591 = cosh(%582) /* ty=Tensor[(15, 12, 4), float32] */;
  %592 = %587.2;
  %593 = %590.0;
  (%591, %592, %var_7501, meta[relay.Constant][39] /* ty=Tensor[(6), float32] */, %593, %var_7509)
}

def @func_4898() -> (Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) {
  %594 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 360), uint32] */, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %595 = reshape(%594, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %596 = @func_1013(%595) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %597 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 360), uint32] */, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %598 = reshape(%597, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %599 = @func_4775(%598) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %600 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %601 = %596.0;
  %602 = %599.0;
  (%600, %601, meta[relay.Constant][40] /* ty=Tensor[(1, 360), uint32] */, %602)
}

def @func_13255() -> (Tensor[(7, 16, 10), int16], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(1575), float64], Tensor[(36), bool], Tensor[(40320), float32]) {
  %603 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %604 = @func_11031() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %605 = cast(meta[relay.Constant][41] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %606 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %607 = cast(meta[relay.Constant][43] /* ty=Tensor[(40320), float32] */, dtype="float32") /* ty=Tensor[(40320), float32] */;
  %608 = reshape(%605, newshape=[1575]) /* ty=Tensor[(1575), float64] */;
  %609 = reshape(%606, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %610 = reshape(%607, newshape=[7, 16, 360]) /* ty=Tensor[(7, 16, 360), float32] */;
  %611 = @func_5913(%608, %609, %610) /* ty=(Tensor[(360), uint32], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(7, 16, 105), bool], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], bool, Tensor[(36), bool], float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 360), bool], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32]) */;
  %612 = %603.0;
  %613 = %604.0;
  %614 = %611.15;
  (%612, %613, %614, meta[relay.Constant][41] /* ty=Tensor[(1575), float64] */, meta[relay.Constant][42] /* ty=Tensor[(36), bool] */, meta[relay.Constant][43] /* ty=Tensor[(40320), float32] */)
}

def @func_9355() -> (Tensor[(16, 11, 11), int8],) {
  %615 = @func_8175() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) */;
  %616 = %615.0;
  (%616,)
}

def @func_3155(%var_3122: Tensor[(3, 10, 12), bool], %var_3130: Tensor[(6), float32]) -> (Tensor[(3, 10, 12), bool], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(280), float64]) {
  %617 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 10, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
  %618 = shape_of(%var_3122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_3122, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(2.45404f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %622 = cast(%var_3130, dtype="float32") /* ty=Tensor[(6), float32] */;
  %623 = reshape(%621, newshape=[]) /* ty=float32 */;
  %624 = reshape(%622, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %625 = @func_2928(%623, %624) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %626 = cast(meta[relay.Constant][45] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %627 = cast(meta[relay.Constant][45] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %628 = cast(%var_3122, dtype="uint32") /* ty=Tensor[(3, 10, 12), uint32] */;
  %629 = reshape(%626, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %630 = reshape(%627, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %631 = reshape(%628, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %632 = @func_2747(%629, %630, %631) /* ty=(Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) */;
  %633 = logical_or(%619, %620) /* ty=Tensor[(3, 10, 12), bool] */;
  %634 = %625.2;
  %635 = %632.2;
  (%633, %634, 2.45404f /* ty=float32 */, %var_3130, %635, meta[relay.Constant][45] /* ty=Tensor[(280), float64] */)
}

def @func_3986(%var_3981: float32, %var_3982: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
  %636 = cast(%var_3981, dtype="float32") /* ty=float32 */;
  %637 = cast(%var_3982, dtype="float32") /* ty=Tensor[(6), float32] */;
  %638 = reshape(%636, newshape=[]) /* ty=float32 */;
  %639 = reshape(%637, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %640 = @func_2928(%638, %639) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %641 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %642 = %640.1;
  (%641, %642, %var_3981, %var_3982)
}

def @func_14021(%var_14002: Tensor[(39), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(8, 242), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) {
  %643 = @func_12758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %644 = cast(%var_14002, dtype="float32") /* ty=Tensor[(39), float32] */;
  %645 = cast(meta[relay.Constant][46] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %646 = reshape(%644, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %647 = reshape(%645, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %648 = @func_6457(%646, %647) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %649 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 242), float32] */, dtype="float32") /* ty=Tensor[(8, 242), float32] */;
  %650 = cast(meta[relay.Constant][48] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %651 = reshape(%649, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %652 = reshape(%650, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %653 = @func_5251(%651, %652) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
  %654 = %643.0;
  %655 = %648.0;
  %656 = %653.3;
  %657 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  (%654, %655, %var_14002, meta[relay.Constant][46] /* ty=Tensor[(6), float32] */, %656, meta[relay.Constant][47] /* ty=Tensor[(8, 242), float32] */, meta[relay.Constant][48] /* ty=Tensor[(105), uint32] */, %657)
}

def @func_9878(%var_9872: Tensor[(1, 360), bool]) -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(3, 10, 12), bool], Tensor[(1, 360), bool], Tensor[(1, 6), float32]) {
  %658 = @func_7104() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %659 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %660 = cast(%var_9872, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %661 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 6), float32] */;
  %662 = reshape(%660, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), bool] */;
  %663 = reshape(%661, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %664 = @func_3155(%662, %663) /* ty=(Tensor[(3, 10, 12), bool], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(280), float64]) */;
  %665 = %658.0;
  %666 = %659.0;
  %667 = %664.0;
  (%665, %666, %667, %var_9872, meta[relay.Constant][49] /* ty=Tensor[(1, 6), float32] */)
}

def @func_11968() -> Tensor[(7, 16, 1), float32] {
  %668 = @func_8860() /* ty=(Tensor[(7, 16, 1), float32], bool) */;
  %668.0
}

def @func_8435() -> Tensor[(7, 16, 1), float32] {
  %669 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %669.0
}

def @func_6215() -> Tensor[(7, 16, 1), float32] {
  @func_5583() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_5251(%var_5232: Tensor[(1936), float32], %var_5247: Tensor[(105), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) {
  %670 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %671 = cast(%var_5232, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %672 = reshape(%671, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
  %673 = @func_3897(%672) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) */;
  %674 = cast(%var_5247, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %675 = cast(%var_5247, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %676 = cast(meta[relay.Constant][50] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %677 = reshape(%674, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %678 = reshape(%675, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %679 = reshape(%676, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %680 = @func_1673(%677, %678, %679) /* ty=(Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) */;
  %681 = %670.0;
  %682 = %673.1;
  %683 = %680.1;
  (%681, %682, %var_5232, %683, %var_5247, meta[relay.Constant][50] /* ty=Tensor[(360), uint32] */)
}

def @func_11720() -> (Tensor[(7, 16, 1), float32],) {
  %684 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %685 = %684.0;
  (%685,)
}

def @func_13767() -> Tensor[(1, 360), uint32] {
  @func_8076() /* ty=Tensor[(1, 360), uint32] */
}

def @func_9323() -> (Tensor[(7, 16, 1), float32],) {
  %686 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %687 = %686.0;
  (%687,)
}

def @func_12765() -> Tensor[(7, 16, 1), float32] {
  %688 = @func_11169() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %688.0
}

def @func_8468() -> (Tensor[(7, 16, 1), float32],) {
  %689 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  (%689,)
}

def @func_13578(%var_13524: Tensor[(9, 360), uint32]) -> (Tensor[(9, 360), float64], Tensor[(6), float32], Tensor[(3, 2), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(9, 360), float32], Tensor[(7, 16, 1), float32]) {
  %690 = @func_8076() /* ty=Tensor[(1, 360), uint32] */;
  %691 = cast(%690, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %692 = cast(%var_13524, dtype="bool") /* ty=Tensor[(9, 360), bool] */;
  %693 = greater(%691, %692) /* ty=Tensor[(9, 360), bool] */;
  %694 = cast(%var_13524, dtype="float64") /* ty=Tensor[(9, 360), float64] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(2), int32] */;
  %696 = cast(%693, dtype="float64") /* ty=Tensor[(9, 360), float64] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %698 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 2), float32] */;
  %699 = reshape(%698, newshape=[3, 2]) /* ty=Tensor[(3, 2), float32] */;
  %700 = @func_6410(%699) /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) */;
  %701 = cast(%690, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %702 = reshape(%701, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint32] */;
  %703 = @func_12130(%702) /* ty=(Tensor[(360), uint32], Tensor[(12, 30), uint32], Tensor[(105), uint32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32]) */;
  %704 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %705 = cast(%693, dtype="float32") /* ty=Tensor[(9, 360), float32] */;
  %706 = @func_9925() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %707 = divide(%696, %697) /* ty=Tensor[(9, 360), float64] */;
  %708 = %700.1;
  %709 = %703.3;
  %710 = %704.1;
  %711 = atan(%705) /* ty=Tensor[(9, 360), float32] */;
  %712 = %706.0;
  (%707, %708, meta[relay.Constant][51] /* ty=Tensor[(3, 2), float32] */, %709, %710, %711, %712)
}

def @func_14077() -> (Tensor[(7, 16, 1), float32], Tensor[(360), uint32], Tensor[(7, 16, 1936), int8]) {
  %713 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %714 = cast(meta[relay.Constant][52] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %715 = cast(meta[relay.Constant][53] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %716 = cast(meta[relay.Constant][52] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %717 = reshape(%714, newshape=[2, 180]) /* ty=Tensor[(2, 180), uint32] */;
  %718 = reshape(%715, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %719 = reshape(%716, newshape=[2, 180]) /* ty=Tensor[(2, 180), uint32] */;
  %720 = @func_11135(%717, %718, %719) /* ty=(bool, Tensor[(2, 180), uint32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(2, 180), uint32]) */;
  %721 = %720.3;
  %722 = cast(meta[relay.Constant][53] /* ty=Tensor[(1936), float32] */, dtype="int8") /* ty=Tensor[(1936), int8] */;
  %723 = cast(%721, dtype="int8") /* ty=Tensor[(7, 16, 1), int8] */;
  %724 = %713.0;
  %725 = minimum(%722, %723) /* ty=Tensor[(7, 16, 1936), int8] */;
  (%724, meta[relay.Constant][52] /* ty=Tensor[(360), uint32] */, %725)
}

def @func_13752() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %726 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %727 = @func_11169() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %728 = @func_9614() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %729 = %726.0;
  %730 = @func_11968() /* ty=Tensor[(7, 16, 1), float32] */;
  %731 = %727.0;
  %732 = %728.0;
  (%729, %730, %731, %732)
}

def @func_7137() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %733 = @func_6260() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %734 = @func_6921() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %735 = %733.0;
  %736 = %734.0;
  (%735, %736)
}

def @func_3958() -> Tensor[(7, 16, 1), float32] {
  %737 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %737.0
}

def @func_12130(%var_12111: Tensor[(12, 30), uint32]) -> (Tensor[(360), uint32], Tensor[(12, 30), uint32], Tensor[(105), uint32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32]) {
  %738 = cast(%var_12111, dtype="uint32") /* ty=Tensor[(12, 30), uint32] */;
  %739 = cast(meta[relay.Constant][54] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %740 = reshape(%738, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %741 = reshape(%739, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %742 = @func_7402(%740, %741) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
  %743 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %746 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %747 = %742.2;
  %748 = sigmoid(%745) /* ty=Tensor[(16, 11, 11), float64] */;
  %749 = %746.0;
  (%747, %var_12111, meta[relay.Constant][54] /* ty=Tensor[(105), uint32] */, %748, %749)
}

def @func_7025(%var_7013: Tensor[(105), uint32]) -> (Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(7, 16, ?), int32], Tensor[(7, 16, 1), float32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) {
  %750 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %751 = cast(meta[relay.Constant][55] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %752 = reshape(%751, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %753 = @func_1013(%752) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %754 = %750.2;
  %755 = cast(%754, dtype="bool") /* ty=Tensor[(36), bool] */;
  %756 = reshape(%755, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %757 = @func_4024(%756) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %758 = %757.0;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %760 = exp(%759) /* ty=Tensor[(7, 16, 1), float32] */;
  %761 = cast(%758, dtype="int32") /* ty=Tensor[(7, 16, 1), int32] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%760, dtype="int32") /* ty=Tensor[(7, 16, 1), int32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %765 = @func_6771() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */;
  %766 = cast(meta[relay.Constant][55] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %767 = cast(%var_7013, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %768 = reshape(%766, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %769 = reshape(%767, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %770 = @func_4251(%768, %769) /* ty=(Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) */;
  %771 = @func_6921() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %772 = %753.1;
  %773 = left_shift(%763, %764) /* ty=Tensor[(7, 16, ?), int32] */;
  %774 = %765.2;
  %775 = %770.1;
  %776 = %771.0;
  (%754, %772, meta[relay.Constant][55] /* ty=Tensor[(360), uint32] */, %773, %774, %775, %var_7013, %776)
}

def @func_7733() -> (Tensor[(7, 16, 1), float32],) {
  %777 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %778 = %777.0;
  (%778,)
}

def @func_10158(%var_10131: Tensor[(338), int32]) -> (Tensor[(7, 16, 1), float32], Tensor[(2, 13, 13), bool], Tensor[(338), int32], Tensor[(48), float32], Tensor[(280), float64], Tensor[(2, 180), uint32], float32) {
  %779 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %780 = cast(%var_10131, dtype="int32") /* ty=Tensor[(338), int32] */;
  %781 = reshape(%780, newshape=[2, 13, 13]) /* ty=Tensor[(2, 13, 13), int32] */;
  %782 = @func_7768(%781) /* ty=(Tensor[(2, 13, 13), bool],) */;
  %783 = cast(meta[relay.Constant][56] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %784 = cast(meta[relay.Constant][56] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %785 = cast(meta[relay.Constant][57] /* ty=Tensor[(2, 180), uint32] */, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %786 = reshape(%783, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %787 = reshape(%784, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %788 = reshape(%785, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %789 = @func_2747(%786, %787, %788) /* ty=(Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) */;
  %790 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %791 = %779.0;
  %792 = %782.0;
  %793 = %789.3;
  %794 = %790.1;
  (%791, %792, %var_10131, %793, meta[relay.Constant][56] /* ty=Tensor[(280), float64] */, meta[relay.Constant][57] /* ty=Tensor[(2, 180), uint32] */, %794)
}

def @func_6410(%var_6405: Tensor[(3, 2), float32]) -> (Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) {
  %795 = @func_6312() /* ty=Tensor[(7, 16, 1), float32] */;
  %796 = cast(%795, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  %797 = cast(%var_6405, dtype="float32") /* ty=Tensor[(3, 2), float32] */;
  %798 = reshape(%797, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %799 = @func_4695(%798) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) */;
  %800 = sqrt(%796) /* ty=Tensor[(7, 16, 1), float64] */;
  %801 = %799.3;
  (%800, %801, %var_6405)
}

def @func_3398(%var_3391: bool, %var_3392: Tensor[(6, 2, 3), bool]) -> (Tensor[(6, 2, 3), bool],) {
  %802 = cast(%var_3391, dtype="bool") /* ty=bool */;
  %803 = cast(%var_3392, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
  %804 = logical_or(%802, %803) /* ty=Tensor[(6, 2, 3), bool] */;
  (%804,)
}

def @func_7882() -> Tensor[(7, 16, 1), float32] {
  %805 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %805.3
}

def @func_12758() -> (Tensor[(7, 16, 1), float32],) {
  %806 = @func_12000() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %807 = %806.0;
  (%807,)
}

def @func_6869() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %808 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %809 = @func_6632() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %810 = %808.0;
  %811 = %809.0;
  (%810, %811)
}

def @func_8860() -> (Tensor[(7, 16, 1), float32], bool) {
  %812 = @func_6260() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %813 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %814 = %812.0;
  %815 = %813.1;
  (%814, %815)
}

def @func_12995() -> Tensor[(6), float32] {
  %816 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %816.3
}

def @func_13467(%var_13445: bool) -> Tensor[(7, 16, 360), float64] {
  %817 = cast(%var_13445, dtype="bool") /* ty=bool */;
  %818 = reshape(%817, newshape=[]) /* ty=bool */;
  %819 = @func_10810(%818) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) */;
  %820 = %819.0;
  %821 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %822 = %821.0;
  %823 = cast(%822, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %824 = cast(%var_13445, dtype="float64") /* ty=float64 */;
  %825 = mod(%823, %824) /* ty=Tensor[(1, 360), float64] */;
  %826 = cast(%820, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  %827 = cast(%825, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  mod(%826, %827) /* ty=Tensor[(7, 16, 360), float64] */
}

def @func_4052() -> Tensor[(7, 16, 1), float32] {
  %828 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %829 = %828.0;
  %830 = cast(%829, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  cos(%830) /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8318() -> (Tensor[(16, 11, 11), int8],) {
  %831 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %832 = %831.0;
  (%832,)
}

def @func_13132(%var_13128: Tensor[(1936), float32]) -> (Tensor[(1, 5, 5), float32], float32, Tensor[(1936), float32]) {
  %833 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 5), float64] */;
  %834 = acos(%833) /* ty=Tensor[(1, 5, 5), float64] */;
  %835 = cast(%834, dtype="float64") /* ty=Tensor[(1, 5, 5), float64] */;
  %836 = asinh(%835) /* ty=Tensor[(1, 5, 5), float64] */;
  %837 = cast(%836, dtype="float32") /* ty=Tensor[(1, 5, 5), float32] */;
  %838 = cast(%var_13128, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %839 = reshape(%838, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %840 = @func_6086(%839) /* ty=(float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) */;
  %841 = exp(%837) /* ty=Tensor[(1, 5, 5), float32] */;
  %842 = %840.0;
  (%841, %842, %var_13128)
}

def @func_11853(%var_11850: Tensor[(1120), float32]) -> (Tensor[(16, 11, 11), float32], Tensor[(7, 16, 10), float32], Tensor[(1120), float32]) {
  %843 = @func_11437() /* ty=(Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32]) */;
  %844 = cast(%var_11850, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %845 = reshape(%844, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), float32] */;
  %846 = %843.1;
  %847 = @func_7959(%845) /* ty=Tensor[(7, 16, 10), float32] */;
  (%846, %847, %var_11850)
}

def @func_4024(%var_4003: Tensor[(36), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) {
  %848 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %849 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %850 = cast(%var_4003, dtype="bool") /* ty=Tensor[(36), bool] */;
  %851 = reshape(%849, newshape=[]) /* ty=bool */;
  %852 = reshape(%850, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %853 = @func_3398(%851, %852) /* ty=(Tensor[(6, 2, 3), bool],) */;
  %854 = %848.0;
  %855 = %853.0;
  (%854, %855, False /* ty=bool */, %var_4003)
}

def @func_4873(%var_4862: float32, %var_4863: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float64]) {
  %856 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %857 = cast(%var_4862, dtype="float32") /* ty=float32 */;
  %858 = cast(%var_4863, dtype="float32") /* ty=Tensor[(6), float32] */;
  %859 = reshape(%857, newshape=[]) /* ty=float32 */;
  %860 = reshape(%858, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %861 = @func_2928(%859, %860) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %862 = %861.1;
  %863 = cast(%var_4862, dtype="float64") /* ty=float64 */;
  %864 = cast(%862, dtype="float64") /* ty=Tensor[(7, 15, 15), float64] */;
  %865 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  %866 = %856.0;
  %867 = mod(%863, %864) /* ty=Tensor[(7, 15, 15), float64] */;
  (%865, %866, %var_4863, %867)
}

def @func_12970() -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(3375), bool]) {
  %868 = @func_11147() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %869 = @func_8468() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %870 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %871 = cast(meta[relay.Constant][59] /* ty=Tensor[(3375), bool] */, dtype="bool") /* ty=Tensor[(3375), bool] */;
  %872 = cast(meta[relay.Constant][59] /* ty=Tensor[(3375), bool] */, dtype="bool") /* ty=Tensor[(3375), bool] */;
  %873 = reshape(%871, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
  %874 = reshape(%872, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
  %875 = @func_7548(%873, %874) /* ty=(Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) */;
  %876 = %868.0;
  %877 = %869.0;
  %878 = %870.1;
  %879 = %875.1;
  (%876, %877, %878, %879, meta[relay.Constant][59] /* ty=Tensor[(3375), bool] */)
}

def @func_8280() -> (float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %880 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %881 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %882 = %880.2;
  %883 = %881.0;
  %884 = @func_6215() /* ty=Tensor[(7, 16, 1), float32] */;
  (%882, %883, %884)
}

def @func_7219() -> (Tensor[(16, 11, 11), int8],) {
  %885 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  (%885,)
}

def @func_8390(%var_8385: Tensor[(1120, 1), float32]) -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 10), float32], Tensor[(1120, 1), float32]) {
  %886 = @func_7671() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %887 = @func_8124() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(70, 4), float64], Tensor[(7, 16, 1), float32]) */;
  %888 = cast(%var_8385, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
  %889 = reshape(%888, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), float32] */;
  %890 = %886.1;
  %891 = %887.3;
  %892 = @func_7959(%889) /* ty=Tensor[(7, 16, 10), float32] */;
  (%890, %891, %892, %var_8385)
}

def @func_8716() -> (Tensor[(36), bool], Tensor[(6), float32]) {
  %893 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %894 = @func_8567() /* ty=(Tensor[(6), float32],) */;
  %895 = %893.2;
  %896 = %894.0;
  (%895, %896)
}

def @func_6158(%var_6133: Tensor[(7, 15), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(2, 840), bool], Tensor[(105), uint32], Tensor[(7, 15), uint32], Tensor[(1936), float64]) {
  %897 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %898 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %899 = reshape(%898, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
  %900 = @func_1734(%899) /* ty=(Tensor[(14, 15, 8), float64],) */;
  %901 = %900.0;
  %902 = cast(%901, dtype="bool") /* ty=Tensor[(14, 15, 8), bool] */;
  %903 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(2, 840), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %904 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 840), float32] */, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %906 = cast(meta[relay.Constant][61] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %907 = cast(%var_6133, dtype="uint32") /* ty=Tensor[(7, 15), uint32] */;
  %908 = reshape(%906, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %909 = reshape(%907, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %910 = @func_5251(%908, %909) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
  %911 = cast(meta[relay.Constant][61] /* ty=Tensor[(1936), float32] */, dtype="float64") /* ty=Tensor[(1936), float64] */;
  %912 = %897.0;
  %913 = logical_and(%904, %905) /* ty=Tensor[(2, 840), bool] */;
  %914 = %910.4;
  %915 = cos(%911) /* ty=Tensor[(1936), float64] */;
  (%912, %913, %914, %var_6133, %915)
}

def @func_6921() -> (Tensor[(7, 16, 1), float32],) {
  %916 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %917 = cast(%916, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %918 = acosh(%917) /* ty=Tensor[(7, 16, 1), float32] */;
  (%918,)
}

def @func_10617(%var_10603: Tensor[(360, 1), uint32], %var_10604: Tensor[(7, 15), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(5, 20), float32], float32, Tensor[(48), float32], Tensor[(360, 1), uint32], Tensor[(7, 15), uint32], Tensor[(16, 11, 11), bool], Tensor[(1936), float32]) {
  %919 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %920 = cast(meta[relay.Constant][62] /* ty=Tensor[(5, 20), float32] */, dtype="float32") /* ty=Tensor[(5, 20), float32] */;
  %921 = cast(-5.12075f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %922 = reshape(%920, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), float32] */;
  %923 = reshape(%921, newshape=[]) /* ty=float32 */;
  %924 = @func_6291(%922, %923) /* ty=(Tensor[(10, 2, 5), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
  %925 = cast(%var_10603, dtype="uint32") /* ty=Tensor[(360, 1), uint32] */;
  %926 = cast(%var_10604, dtype="uint32") /* ty=Tensor[(7, 15), uint32] */;
  %927 = reshape(%925, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %928 = reshape(%926, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %929 = @func_4251(%927, %928) /* ty=(Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) */;
  %930 = cast(meta[relay.Constant][63] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %931 = reshape(%930, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %932 = @func_6086(%931) /* ty=(float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) */;
  %933 = %919.0;
  %934 = %924.1;
  %935 = %929.1;
  %936 = %932.3;
  (%933, %934, meta[relay.Constant][62] /* ty=Tensor[(5, 20), float32] */, -5.12075f /* ty=float32 */, %935, %var_10603, %var_10604, %936, meta[relay.Constant][63] /* ty=Tensor[(1936), float32] */)
}

def @func_2154(%var_2146: Tensor[(12, 10, 1), int32], %var_2147: Tensor[(12, 10, 9), int32]) -> (Tensor[(12, 10, 9), bool],) {
  %937 = cast(%var_2146, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
  %938 = cast(%var_2147, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %939 = less(%937, %938) /* ty=Tensor[(12, 10, 9), bool] */;
  (%939,)
}

def @func_13974() -> (float32, Tensor[(16, 11, 11), int8]) {
  %940 = @func_10057() /* ty=(float32,) */;
  %941 = @func_7230() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %942 = %940.0;
  %943 = %941.0;
  (%942, %943)
}

def @func_10835(%var_10828: Tensor[(1125, 3), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1125, 3), bool], Tensor[(1, 360), uint32]) {
  %944 = cast(%var_10828, dtype="bool") /* ty=Tensor[(1125, 3), bool] */;
  %945 = cast(%var_10828, dtype="bool") /* ty=Tensor[(1125, 3), bool] */;
  %946 = reshape(%944, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
  %947 = reshape(%945, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
  %948 = @func_7548(%946, %947) /* ty=(Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) */;
  %949 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %950 = %948.1;
  %951 = @func_8076() /* ty=Tensor[(1, 360), uint32] */;
  (%949, %950, %var_10828, %951)
}

def @func_652(%var_647: Tensor[(16, 11, 11), float32]) -> (Tensor[(16, 11, 11), float32],) {
  %952 = cast(%var_647, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %953 = cos(%952) /* ty=Tensor[(16, 11, 11), float32] */;
  (%953,)
}

def @func_6235() -> Tensor[(7, 16, 1), float32] {
  %954 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %954.0
}

def @func_9418(%var_9357: Tensor[(14, 12, 3), int8], %var_9358: Tensor[(14, 12, 3), int8], %var_9365: Tensor[(1680), float32]) -> (Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) {
  %955 = cast(%var_9365, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %956 = reshape(%955, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
  %957 = @func_1734(%956) /* ty=(Tensor[(14, 15, 8), float64],) */;
  %958 = %957.0;
  %959 = cast(%958, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
  %960 = reshape(%959, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
  %961 = @func_1734(%960) /* ty=(Tensor[(14, 15, 8), float64],) */;
  %962 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %963 = cast(%var_9358, dtype="int8") /* ty=Tensor[(14, 12, 3), int8] */;
  %964 = shape_of(%var_9357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%var_9357, dtype="int8") /* ty=Tensor[(14, 12, 3), int8] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %967 = bitwise_or(%965, %966) /* ty=Tensor[(14, 12, 3), int8] */;
  %968 = cast(meta[relay.Constant][64] /* ty=Tensor[(14, 12, 3), int8] */, dtype="float64") /* ty=Tensor[(14, 12, 3), float64] */;
  %969 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(%967, dtype="float64") /* ty=Tensor[(14, 12, 3), float64] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %972 = %961.0;
  %973 = cast(%972, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
  %974 = reshape(%973, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
  %975 = @func_1734(%974) /* ty=(Tensor[(14, 15, 8), float64],) */;
  %976 = %962.0;
  %977 = power(%970, %971) /* ty=Tensor[(14, 12, 3), float64] */;
  %978 = %975.0;
  (%958, %var_9365, %972, %976, %977, %978)
}

def @func_14124() -> (Tensor[(7, 16, 1), float32],) {
  %979 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %980 = %979.0;
  (%980,)
}

def @func_5633() -> float32 {
  %981 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %981.2
}

def @func_13384() -> (bool, Tensor[(7, 16, 1936), uint32], Tensor[(1936), float32], Tensor[(16, 11, 11), int8]) {
  %982 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %983 = cast(meta[relay.Constant][65] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %984 = reshape(%983, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %985 = @func_10314(%984) /* ty=(Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(7, 16, 1936), uint32]) */;
  %986 = @func_11904() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %987 = %982.1;
  %988 = %985.2;
  %989 = %986.0;
  (%987, %988, meta[relay.Constant][65] /* ty=Tensor[(1936), float32] */, %989)
}

def @func_5039() -> Tensor[(16, 11, 11), int8] {
  %990 = @func_4973() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %990.1
}

def @func_12953(%var_12951: Tensor[(2, 180), uint32]) -> (Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 180), uint32]) {
  %991 = @func_6019() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
  %992 = cast(%var_12951, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %993 = reshape(%992, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %994 = @func_1013(%993) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %995 = %991.3;
  %996 = %994.0;
  (%995, %996, %var_12951)
}

def @func_1013(%var_971: Tensor[(12, 15, 2), uint32]) -> (Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) {
  %997 = cast(%var_971, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %998 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(12, 15, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %999 = cast(meta[relay.Constant][66] /* ty=Tensor[(12, 15, 2), uint32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1001 = cast(meta[relay.Constant][67] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %1002 = reshape(%1001, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %1003 = @func_652(%1002) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %1004 = %1003.0;
  %1005 = cast(meta[relay.Constant][67] /* ty=Tensor[(1936), float32] */, dtype="int8") /* ty=Tensor[(1936), int8] */;
  %1006 = shape_of(%1004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1007 = cast(%1004, dtype="int8") /* ty=Tensor[(16, 11, 11), int8] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1009 = cast(%1004, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %1010 = reshape(%1009, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %1011 = @func_652(%1010) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %1012 = greater(%999, %1000) /* ty=Tensor[(12, 15, 2), bool] */;
  %1013 = right_shift(%1007, %1008) /* ty=Tensor[(16, 11, 11), int8] */;
  %1014 = %1011.0;
  (%1012, %1013, %1014)
}

def @func_4323(%var_4302: Tensor[(36), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) {
  %1015 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1016 = cast(%var_4302, dtype="bool") /* ty=Tensor[(36), bool] */;
  %1017 = reshape(%1015, newshape=[]) /* ty=bool */;
  %1018 = reshape(%1016, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %1019 = @func_3398(%1017, %1018) /* ty=(Tensor[(6, 2, 3), bool],) */;
  %1020 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %1021 = %1019.0;
  (%1020, %1021, False /* ty=bool */, %var_4302)
}

def @func_6856(%var_6842: Tensor[(360), uint32]) -> (Tensor[(6), float32], Tensor[(360), uint32], Tensor[(360), uint32]) {
  %1022 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %1023 = cast(%var_6842, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %1024 = reshape(%1023, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %1025 = @func_4775(%1024) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %1026 = %1022.3;
  %1027 = %1025.2;
  (%1026, %1027, %var_6842)
}

def @func_7314(%var_7295: bool, %var_7296: Tensor[(1, 36), bool]) -> (Tensor[(1, 360), float32], bool, Tensor[(?, 36), uint8]) {
  %1028 = @func_4898() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) */;
  %1029 = %1028.2;
  %1030 = cast(%1029, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %1031 = cast(%var_7296, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
  %1032 = asinh(%1031) /* ty=Tensor[(1, 36), float64] */;
  %1033 = cast(%var_7295, dtype="bool") /* ty=bool */;
  %1034 = cast(%var_7296, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
  %1035 = reshape(%1033, newshape=[]) /* ty=bool */;
  %1036 = reshape(%1034, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %1037 = @func_3398(%1035, %1036) /* ty=(Tensor[(6, 2, 3), bool],) */;
  %1038 = %1037.0;
  %1039 = cast(%1038, dtype="uint8") /* ty=Tensor[(6, 2, 3), uint8] */;
  %1040 = shape_of(%1032, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1041 = cast(%1032, dtype="uint8") /* ty=Tensor[(1, 36), uint8] */;
  %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %1043 = atanh(%1030) /* ty=Tensor[(1, 360), float32] */;
  %1044 = left_shift(%1041, %1042) /* ty=Tensor[(?, 36), uint8] */;
  (%1043, %var_7295, %1044)
}

def @func_9925() -> (Tensor[(7, 16, 1), float32],) {
  %1045 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %1046 = %1045.0;
  (%1046,)
}

def @func_13060() -> Tensor[(7, 16, 1), float32] {
  @func_6215() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_14302() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], bool, bool, Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
  %1047 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1048 = reshape(%1047, newshape=[]) /* ty=bool */;
  %1049 = @func_10810(%1048) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) */;
  %1050 = @func_7230() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1051 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1052 = @func_7882() /* ty=Tensor[(7, 16, 1), float32] */;
  %1053 = @func_7882() /* ty=Tensor[(7, 16, 1), float32] */;
  %1054 = %1049.2;
  %1055 = %1050.0;
  %1056 = %1051.0;
  (%1052, %1053, %1054, False /* ty=bool */, %1055, %1056)
}

def @func_12096(%var_12077: Tensor[(3, 12, 9), float32]) -> (Tensor[(3, 12, 9), float64], Tensor[(3, 12, 9), bool]) {
  %1057 = cast(meta[relay.Constant][68] /* ty=Tensor[(3, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %1058 = shape_of(%var_12077, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1059 = cast(%var_12077, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1061 = floor_mod(%1059, %1060) /* ty=Tensor[(3, 12, 9), float32] */;
  %1062 = cast(%1061, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %1063 = cast(meta[relay.Constant][69] /* ty=Tensor[(3, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %1064 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(3, 12, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1065 = cast(meta[relay.Constant][68] /* ty=Tensor[(3, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1067 = cos(%1062) /* ty=Tensor[(3, 12, 9), float64] */;
  %1068 = greater(%1065, %1066) /* ty=Tensor[(3, 12, 9), bool] */;
  (%1067, %1068)
}

def @func_6260() -> (Tensor[(7, 16, 1), float32],) {
  %1069 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  (%1069,)
}

def @func_7959(%var_7939: Tensor[(7, 16, 10), float32]) -> Tensor[(7, 16, 10), float32] {
  %1070 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %1071 = cast(%1070, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %1072 = cast(%var_7939, dtype="float32") /* ty=Tensor[(7, 16, 10), float32] */;
  power(%1071, %1072) /* ty=Tensor[(7, 16, 10), float32] */
}

def @func_1673(%var_1664: Tensor[(3, 7, 5), uint32], %var_1665: Tensor[(3, 7, 5), uint32], %var_1670: Tensor[(360), uint32]) -> (Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) {
  %1073 = cast(%var_1665, dtype="uint32") /* ty=Tensor[(3, 7, 5), uint32] */;
  %1074 = shape_of(%var_1664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1075 = cast(%var_1664, dtype="uint32") /* ty=Tensor[(3, 7, 5), uint32] */;
  %1076 = dyn.reshape(%1073, %1074, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1077 = cast(%var_1670, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %1078 = reshape(%1077, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %1079 = @func_1013(%1078) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %1080 = minimum(%1075, %1076) /* ty=Tensor[(3, 7, 5), uint32] */;
  %1081 = %1079.0;
  (%1080, %1081, %var_1670)
}

def @func_6291(%var_6277: Tensor[(10, 2, 5), float32], %var_6285: float32) -> (Tensor[(10, 2, 5), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
  %1082 = cast(%var_6277, dtype="float32") /* ty=Tensor[(10, 2, 5), float32] */;
  %1083 = cast(%var_6285, dtype="float32") /* ty=float32 */;
  %1084 = cast(meta[relay.Constant][70] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1085 = reshape(%1083, newshape=[]) /* ty=float32 */;
  %1086 = reshape(%1084, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %1087 = @func_2928(%1085, %1086) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %1088 = tan(%1082) /* ty=Tensor[(10, 2, 5), float32] */;
  %1089 = %1087.1;
  (%1088, %1089, %var_6285, meta[relay.Constant][70] /* ty=Tensor[(6), float32] */)
}

def @func_10057() -> (float32,) {
  %1090 = @func_8280() /* ty=(float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %1091 = %1090.0;
  (%1091,)
}

def @func_8418() -> (float32,) {
  %1092 = @func_5633() /* ty=float32 */;
  (%1092,)
}

def @func_10446(%var_10444: Tensor[(21, 5), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(48, 1), float32], Tensor[(360, 1), uint32], Tensor[(21, 5), uint32]) {
  %1093 = cast(meta[relay.Constant][71] /* ty=Tensor[(360, 1), uint32] */, dtype="uint32") /* ty=Tensor[(360, 1), uint32] */;
  %1094 = cast(%var_10444, dtype="uint32") /* ty=Tensor[(21, 5), uint32] */;
  %1095 = reshape(%1093, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %1096 = reshape(%1094, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %1097 = @func_7402(%1095, %1096) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
  %1098 = @func_8243() /* ty=Tensor[(7, 16, 1), float32] */;
  %1099 = %1097.1;
  (%1098, %1099, meta[relay.Constant][71] /* ty=Tensor[(360, 1), uint32] */, %var_10444)
}

def @func_8205() -> (Tensor[(1, 360), float32],) {
  %1100 = @func_7326() /* ty=(Tensor[(1, 360), uint32],) */;
  %1101 = %1100.0;
  %1102 = cast(%1101, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %1103 = sinh(%1102) /* ty=Tensor[(1, 360), float32] */;
  (%1103,)
}

def @func_11874() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) {
  %1104 = @func_6260() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1105 = @func_9355() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1106 = %1104.0;
  %1107 = %1105.0;
  (%1106, %1107)
}

def @func_2747(%var_2715: Tensor[(4, 10, 7), float64], %var_2719: Tensor[(4, 10, 7), float64], %var_2734: Tensor[(360), uint32]) -> (Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) {
  %1108 = cast(%var_2715, dtype="float64") /* ty=Tensor[(4, 10, 7), float64] */;
  %1109 = acosh(%1108) /* ty=Tensor[(4, 10, 7), float64] */;
  %1110 = cast(%var_2719, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
  %1111 = shape_of(%1109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1112 = cast(%1109, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
  %1113 = dyn.reshape(%1110, %1111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1114 = cast(%1109, dtype="float32") /* ty=Tensor[(4, 10, 7), float32] */;
  %1115 = cast(meta[relay.Constant][72] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1116 = cast(%var_2734, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %1117 = cast(meta[relay.Constant][73] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %1118 = reshape(%1115, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %1119 = reshape(%1116, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %1120 = reshape(%1117, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %1121 = @func_2237(%1118, %1119, %1120) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
  %1122 = bitwise_xor(%1112, %1113) /* ty=Tensor[(4, 10, 7), uint64] */;
  %1123 = exp(%1114) /* ty=Tensor[(4, 10, 7), float32] */;
  %1124 = %1121.1;
  (%1122, %1123, %1124, meta[relay.Constant][72] /* ty=Tensor[(48), float32] */, %var_2734, meta[relay.Constant][73] /* ty=Tensor[(105), uint32] */)
}

def @func_6019() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
  %1125 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1126 = cast(-6.14315f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1127 = cast(meta[relay.Constant][74] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1128 = reshape(%1126, newshape=[]) /* ty=float32 */;
  %1129 = reshape(%1127, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %1130 = @func_3986(%1128, %1129) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
  %1131 = %1125.0;
  %1132 = %1130.1;
  (%1131, %1132, -6.14315f /* ty=float32 */, meta[relay.Constant][74] /* ty=Tensor[(6), float32] */)
}

def @func_7402(%var_7385: Tensor[(360), uint32], %var_7386: Tensor[(105), uint32]) -> (Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) {
  %1133 = cast(meta[relay.Constant][75] /* ty=Tensor[(48, 1), float32] */, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %1134 = cast(%var_7385, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %1135 = cast(%var_7386, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %1136 = reshape(%1133, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %1137 = reshape(%1134, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %1138 = reshape(%1135, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %1139 = @func_2237(%1136, %1137, %1138) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
  %1140 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %1141 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %1142 = cast(%var_7386, dtype="bool") /* ty=Tensor[(105), bool] */;
  %1143 = cast(%1141, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %1144 = %1139.1;
  %1145 = %1140.1;
  %1146 = greater(%1142, %1143) /* ty=Tensor[(7, 16, 105), bool] */;
  (%1144, meta[relay.Constant][75] /* ty=Tensor[(48, 1), float32] */, %var_7385, %1145, %1146)
}

def @func_8556() -> (Tensor[(16, 11, 11), int8],) {
  %1147 = @func_8318() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1148 = %1147.0;
  (%1148,)
}

def @func_14215(%var_14209: Tensor[(7, 16, 1936), int8]) -> (Tensor[(7, 16, 1936), float32],) {
  %1149 = @func_14077() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(360), uint32], Tensor[(7, 16, 1936), int8]) */;
  %1150 = %1149.2;
  %1151 = cast(%var_14209, dtype="float32") /* ty=Tensor[(7, 16, 1936), float32] */;
  %1152 = shape_of(%1150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1153 = cast(%1150, dtype="float32") /* ty=Tensor[(7, 16, 1936), float32] */;
  %1154 = dyn.reshape(%1151, %1152, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1155 = floor_divide(%1153, %1154) /* ty=Tensor[(7, 16, 1936), float32] */;
  (%1155,)
}

def @func_8243() -> Tensor[(7, 16, 1), float32] {
  %1156 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %1156.0
}

def @func_14256() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %1157 = @func_13060() /* ty=Tensor[(7, 16, 1), float32] */;
  %1158 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  (%1157, %1158)
}

def @func_13602() -> (Tensor[(7, 16, 1), float32], Tensor[(105), uint32], Tensor[(1936), float32]) {
  %1159 = cast(meta[relay.Constant][76] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %1160 = reshape(%1159, newshape=[7, 15]) /* ty=Tensor[(7, 15), uint32] */;
  %1161 = @func_6158(%1160) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(2, 840), bool], Tensor[(105), uint32], Tensor[(7, 15), uint32], Tensor[(1936), float64]) */;
  %1162 = %1161.4;
  %1163 = cast(meta[relay.Constant][77] /* ty=Tensor[(1936), float64] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %1164 = shape_of(%1162, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1165 = cast(%1162, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %1166 = dyn.reshape(%1163, %1164, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1167 = @func_10368() /* ty=Tensor[(7, 16, 1), float32] */;
  %1168 = floor_divide(%1165, %1166) /* ty=Tensor[(1936), float32] */;
  (%1167, meta[relay.Constant][76] /* ty=Tensor[(105), uint32] */, %1168)
}

def @func_9152(%var_9103: Tensor[(6), float32], %var_9147: float32) -> (Tensor[(36), bool], Tensor[(6), float32], Tensor[(13, 3), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32], float32, Tensor[(7, 16, 1), float32]) {
  %1169 = @func_8716() /* ty=(Tensor[(36), bool], Tensor[(6), float32]) */;
  %1170 = cast(meta[relay.Constant][78] /* ty=Tensor[(13, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
  %1171 = cast(%var_9103, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1172 = reshape(%1170, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %1173 = reshape(%1171, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %1174 = @func_6457(%1172, %1173) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %1175 = cast(%var_9147, dtype="float32") /* ty=float32 */;
  %1176 = %1174.1;
  %1177 = cast(%1176, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1178 = reshape(%1175, newshape=[]) /* ty=float32 */;
  %1179 = reshape(%1177, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %1180 = @func_4873(%1178, %1179) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float64]) */;
  %1181 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1182 = %1169.0;
  %1183 = %1180.1;
  %1184 = %1181.0;
  (%1182, %1176, meta[relay.Constant][78] /* ty=Tensor[(13, 3), float32] */, %var_9103, %1183, %var_9147, %1184)
}

def @func_9614() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %1185 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %1186 = @func_7882() /* ty=Tensor[(7, 16, 1), float32] */;
  %1187 = %1185.0;
  (%1186, %1187)
}

def @func_12376(%var_12343: Tensor[(105), uint32], %var_12362: Tensor[(48, 11), float32]) -> (Tensor[(7, 16, 105), bool], Tensor[(7, 16, 1), float32], Tensor[(48, 11), bool]) {
  %1188 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1189 = %1188.0;
  %1190 = cast(%var_12343, dtype="bool") /* ty=Tensor[(105), bool] */;
  %1191 = cast(%1189, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %1192 = cast(%var_12343, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %1193 = reshape(%1192, newshape=[21, 5]) /* ty=Tensor[(21, 5), uint32] */;
  %1194 = @func_10446(%1193) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(48, 1), float32], Tensor[(360, 1), uint32], Tensor[(21, 5), uint32]) */;
  %1195 = %1194.1;
  %1196 = cast(%1195, dtype="bool") /* ty=Tensor[(48, 1), bool] */;
  %1197 = cast(%var_12362, dtype="bool") /* ty=Tensor[(48, 11), bool] */;
  %1198 = not_equal(%1190, %1191) /* ty=Tensor[(7, 16, 105), bool] */;
  %1199 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  %1200 = less_equal(%1196, %1197) /* ty=Tensor[(48, 11), bool] */;
  (%1198, %1199, %1200)
}

def @func_1734(%var_1707: Tensor[(14, 15, 8), float32]) -> (Tensor[(14, 15, 8), float64],) {
  %1201 = cast(%var_1707, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
  %1202 = cosh(%1201) /* ty=Tensor[(14, 15, 8), float32] */;
  %1203 = cast(%1202, dtype="float64") /* ty=Tensor[(14, 15, 8), float64] */;
  %1204 = shape_of(%var_1707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1205 = cast(%var_1707, dtype="float64") /* ty=Tensor[(14, 15, 8), float64] */;
  %1206 = dyn.reshape(%1203, %1204, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1207 = divide(%1205, %1206) /* ty=Tensor[(14, 15, 8), float64] */;
  (%1207,)
}

def @func_5105() -> Tensor[(7, 16, 1), float32] {
  @func_4850() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_11395() -> (Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
  %1208 = @func_8567() /* ty=(Tensor[(6), float32],) */;
  %1209 = @func_11031() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1210 = %1208.0;
  %1211 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %1212 = %1209.0;
  %1213 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  (%1210, %1211, %1212, %1213)
}

def @func_12614() -> (Tensor[(16, 11, 11), int8], Tensor[(14, 15, 8), float64], Tensor[(2, 840), float32], Tensor[(105), uint32], Tensor[(7, 16, 528), bool], Tensor[(48, 11), float32]) {
  %1214 = @func_11147() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1215 = cast(meta[relay.Constant][79] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %1216 = reshape(%1215, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
  %1217 = @func_1734(%1216) /* ty=(Tensor[(14, 15, 8), float64],) */;
  %1218 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %1219 = %1218.0;
  %1220 = cast(%1219, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %1221 = cast(meta[relay.Constant][81] /* ty=Tensor[(528), float32] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %1222 = cast(meta[relay.Constant][80] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %1223 = cast(meta[relay.Constant][81] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %1224 = reshape(%1222, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %1225 = reshape(%1223, newshape=[48, 11]) /* ty=Tensor[(48, 11), float32] */;
  %1226 = @func_12376(%1224, %1225) /* ty=(Tensor[(7, 16, 105), bool], Tensor[(7, 16, 1), float32], Tensor[(48, 11), bool]) */;
  %1227 = %1226.2;
  %1228 = cast(%1227, dtype="float32") /* ty=Tensor[(48, 11), float32] */;
  %1229 = %1214.0;
  %1230 = %1217.0;
  %1231 = greater_equal(%1220, %1221) /* ty=Tensor[(7, 16, 528), bool] */;
  %1232 = log10(%1228) /* ty=Tensor[(48, 11), float32] */;
  (%1229, %1230, meta[relay.Constant][79] /* ty=Tensor[(2, 840), float32] */, meta[relay.Constant][80] /* ty=Tensor[(105), uint32] */, %1231, %1232)
}

def @func_10860() -> Tensor[(7, 16, 1), float32] {
  %1233 = @func_6921() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1233.0
}

def @func_14318() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
  %1234 = @func_8468() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1235 = @func_9355() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1236 = %1234.0;
  %1237 = %1235.0;
  %1238 = @func_6215() /* ty=Tensor[(7, 16, 1), float32] */;
  (%1236, %1237, %1238)
}

def @func_7326() -> (Tensor[(1, 360), uint32],) {
  %1239 = @func_4898() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) */;
  %1240 = %1239.2;
  (%1240,)
}

def @func_12892() -> Tensor[(7, 16, 1), float32] {
  @func_10368() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_9563(%var_9548: Tensor[(6, 84), int8], %var_9549: Tensor[(1680), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(14, 15, 8), float64], Tensor[(6, 84), int8], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(7, 16, 10), int16]) {
  %1241 = @func_6632() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1242 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
  %1243 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
  %1244 = cast(%var_9549, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %1245 = reshape(%1242, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
  %1246 = reshape(%1243, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
  %1247 = reshape(%1244, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %1248 = @func_9418(%1245, %1246, %1247) /* ty=(Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) */;
  %1249 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
  %1250 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
  %1251 = cast(%var_9549, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %1252 = reshape(%1249, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
  %1253 = reshape(%1250, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
  %1254 = reshape(%1251, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %1255 = @func_9418(%1252, %1253, %1254) /* ty=(Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) */;
  %1256 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %1257 = %1241.0;
  %1258 = %1248.0;
  %1259 = %1255.1;
  %1260 = %1256.0;
  (%1257, %1258, %var_9548, %var_9549, %1259, %1260)
}

def @func_12065() -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1, 360), uint32], Tensor[(1, 360), float32]) {
  %1261 = @func_11147() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1262 = @func_6869() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %1263 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1264 = @func_7326() /* ty=(Tensor[(1, 360), uint32],) */;
  %1265 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %1266 = %1261.0;
  %1267 = %1262.1;
  %1268 = %1263.0;
  %1269 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %1270 = %1264.0;
  %1271 = %1265.0;
  (%1266, %1267, %1268, %1269, %1270, %1271)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8205() -> (Tensor[(1, 360), float32],) {
  %0 = @func_7326() /* ty=(Tensor[(1, 360), uint32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %3 = sinh(%2) /* ty=Tensor[(1, 360), float32] */;
  (%3,)
}

def @func_13787() -> (Tensor[(7, 16, 1), float32],) {
  %4 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %5 = %4.0;
  (%5,)
}

def @func_8766() -> (Tensor[(7, 16, 1), float32],) {
  %6 = @func_7786() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %7 = %6.0;
  (%7,)
}

def @func_8567() -> (Tensor[(6), float32],) {
  %8 = @func_4898() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) */;
  %9 = %8.3;
  (%9,)
}

def @func_12692(%var_12690: Tensor[(36), bool], %var_12691: Tensor[(1936), float32]) -> (Tensor[(3, 12, 9), float64], Tensor[(162, 2), float32], Tensor[(6), float32], Tensor[(7, 16, 39), bool], Tensor[(13, 3, 4), float32], bool, Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(1936), float32]) {
  %38 = fn (%var_12672: Tensor[(36), bool], %var_12678: Tensor[(1936), float32]) -> (Tensor[(3, 12, 9), float64], Tensor[(162, 2), float32], Tensor[(6), float32], Tensor[(7, 16, 39), bool], Tensor[(13, 3, 4), float32], bool, Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(1936), float32]) {
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(162, 2), float32] */, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
    %11 = reshape(%10, newshape=[3, 12, 9]) /* ty=Tensor[(3, 12, 9), float32] */;
    %12 = @func_12096(%11) /* ty=(Tensor[(3, 12, 9), float64], Tensor[(3, 12, 9), bool]) */;
    %13 = @func_7733() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %14 = %13.0;
    %15 = cast(meta[relay.Constant][2] /* ty=Tensor[(39), float32] */, dtype="bool") /* ty=Tensor[(39), bool] */;
    %16 = cast(%14, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
    %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
    %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %19 = reshape(%17, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
    %20 = reshape(%18, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %21 = @func_6457(%19, %20) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
    %22 = %21.0;
    %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
    %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %25 = cast(%22, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %27 = cast(%var_12672, dtype="bool") /* ty=Tensor[(36), bool] */;
    %28 = reshape(%27, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %29 = @func_4323(%28) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
    %30 = cast(%var_12678, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %31 = reshape(%30, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
    %32 = @func_6086(%31) /* ty=(float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) */;
    %33 = %12.0;
    %34 = greater(%15, %16) /* ty=Tensor[(7, 16, 39), bool] */;
    %35 = minimum(%25, %26) /* ty=Tensor[(13, 3, 4), float32] */;
    %36 = %29.2;
    %37 = %32.2;
    (%33, meta[relay.Constant][0] /* ty=Tensor[(162, 2), float32] */, meta[relay.Constant][1] /* ty=Tensor[(6), float32] */, %34, %35, %36, %var_12672, %37, %var_12678)
  };
  %38(%var_12690, %var_12691) /* ty=(Tensor[(3, 12, 9), float64], Tensor[(162, 2), float32], Tensor[(6), float32], Tensor[(7, 16, 39), bool], Tensor[(13, 3, 4), float32], bool, Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(1936), float32]) */
}

def @func_11855(%var_11854: Tensor[(1120), float32]) -> (Tensor[(16, 11, 11), float32], Tensor[(7, 16, 10), float32], Tensor[(1120), float32]) {
  %44 = fn (%var_11850: Tensor[(1120), float32]) -> (Tensor[(16, 11, 11), float32], Tensor[(7, 16, 10), float32], Tensor[(1120), float32]) {
    %39 = @func_11437() /* ty=(Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32]) */;
    %40 = cast(%var_11850, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %41 = reshape(%40, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), float32] */;
    %42 = %39.1;
    %43 = @func_7959(%41) /* ty=Tensor[(7, 16, 10), float32] */;
    (%42, %43, %var_11850)
  };
  %44(%var_11854) /* ty=(Tensor[(16, 11, 11), float32], Tensor[(7, 16, 10), float32], Tensor[(1120), float32]) */
}

def @func_12759() -> (Tensor[(7, 16, 1), float32],) {
  %47 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %45 = @func_12000() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %46 = %45.0;
    (%46,)
  };
  %47() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_11622() -> Tensor[(7, 16, 1), float32] {
  %49 = fn () -> Tensor[(7, 16, 1), float32] {
    %48 = @func_10975() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %48.1
  };
  %49() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8437() -> Tensor[(7, 16, 1), float32] {
  @func_8435() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_7753() -> (Tensor[(16, 11, 11), int8],) {
  @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_11721() -> (Tensor[(7, 16, 1), float32],) {
  %52 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %50 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %51 = %50.0;
    (%51,)
  };
  %52() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_12258() -> (Tensor[(7, 16, 1), float32],) {
  %53 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  (%53,)
}

def @func_4777(%var_4776: Tensor[(360), uint32]) -> (Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) {
  %60 = fn (%var_4764: Tensor[(360), uint32]) -> (Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) {
    %54 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
    %55 = cast(%var_4764, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %56 = reshape(%55, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
    %57 = @func_1013(%56) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
    %58 = %54.3;
    %59 = %57.1;
    (%58, %59, %var_4764)
  };
  %60(%var_4776) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */
}

def @func_8281() -> (float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %66 = fn () -> (float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
    %61 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %62 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %63 = %61.2;
    %64 = %62.0;
    %65 = @func_6215() /* ty=Tensor[(7, 16, 1), float32] */;
    (%63, %64, %65)
  };
  %66() /* ty=(float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_11905() -> (Tensor[(16, 11, 11), int8],) {
  %69 = fn () -> (Tensor[(16, 11, 11), int8],) {
    %67 = @func_8318() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %68 = %67.0;
    (%68,)
  };
  %69() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_4975() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) {
  @func_4973() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */
}

def @func_12893() -> Tensor[(7, 16, 1), float32] {
  %70 = fn () -> Tensor[(7, 16, 1), float32] {
    @func_10368() /* ty=Tensor[(7, 16, 1), float32] */
  };
  %70() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_12520() -> (float32, Tensor[(7, 16, 1), float32]) {
  @func_12518() /* ty=(float32, Tensor[(7, 16, 1), float32]) */
}

def @func_8556() -> (Tensor[(16, 11, 11), int8],) {
  %71 = @func_8318() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %72 = %71.0;
  (%72,)
}

def @func_11874() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) {
  %73 = @func_6260() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %74 = @func_9355() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %75 = %73.0;
  %76 = %74.0;
  (%75, %76)
}

def @func_11968() -> Tensor[(7, 16, 1), float32] {
  %77 = @func_8860() /* ty=(Tensor[(7, 16, 1), float32], bool) */;
  %77.0
}

def @func_14024(%var_14022: Tensor[(39), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(8, 242), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) {
  @func_14021(%var_14022) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(8, 242), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) */
}

def @func_14303() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], bool, bool, Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
  %88 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], bool, bool, Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
    %78 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %79 = reshape(%78, newshape=[]) /* ty=bool */;
    %80 = @func_10810(%79) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) */;
    %81 = @func_7230() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %82 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %83 = @func_7882() /* ty=Tensor[(7, 16, 1), float32] */;
    %84 = @func_7882() /* ty=Tensor[(7, 16, 1), float32] */;
    %85 = %80.2;
    %86 = %81.0;
    %87 = %82.0;
    (%83, %84, %85, False /* ty=bool */, %86, %87)
  };
  %88() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], bool, bool, Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) */
}

def @func_13602() -> (Tensor[(7, 16, 1), float32], Tensor[(105), uint32], Tensor[(1936), float32]) {
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %90 = reshape(%89, newshape=[7, 15]) /* ty=Tensor[(7, 15), uint32] */;
  %91 = @func_6158(%90) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(2, 840), bool], Tensor[(105), uint32], Tensor[(7, 15), uint32], Tensor[(1936), float64]) */;
  %92 = %91.4;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(1936), float64] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(1), int32] */;
  %95 = cast(%92, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?), float32] */;
  %97 = @func_10368() /* ty=Tensor[(7, 16, 1), float32] */;
  %98 = floor_divide(%95, %96) /* ty=Tensor[(1936), float32] */;
  (%97, meta[relay.Constant][4] /* ty=Tensor[(105), uint32] */, %98)
}

def @func_13789() -> (Tensor[(7, 16, 1), float32],) {
  @func_13787() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_9455() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  @func_9453() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_8569() -> (Tensor[(6), float32],) {
  @func_8567() /* ty=(Tensor[(6), float32],) */
}

def @func_8469() -> (Tensor[(7, 16, 1), float32],) {
  %100 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %99 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
    (%99,)
  };
  %100() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_12099(%var_12097: Tensor[(3, 12, 9), float32]) -> (Tensor[(3, 12, 9), float64], Tensor[(3, 12, 9), bool]) {
  @func_12096(%var_12097) /* ty=(Tensor[(3, 12, 9), float64], Tensor[(3, 12, 9), bool]) */
}

def @func_6261() -> (Tensor[(7, 16, 1), float32],) {
  %102 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %101 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
    (%101,)
  };
  %102() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_7733() -> (Tensor[(7, 16, 1), float32],) {
  %103 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %104 = %103.0;
  (%104,)
}

def @func_14258() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  @func_14256() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_6161(%var_6159: Tensor[(7, 15), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(2, 840), bool], Tensor[(105), uint32], Tensor[(7, 15), uint32], Tensor[(1936), float64]) {
  @func_6158(%var_6159) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(2, 840), bool], Tensor[(105), uint32], Tensor[(7, 15), uint32], Tensor[(1936), float64]) */
}

def @func_13974() -> (float32, Tensor[(16, 11, 11), int8]) {
  %105 = @func_10057() /* ty=(float32,) */;
  %106 = @func_7230() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %107 = %105.0;
  %108 = %106.0;
  (%107, %108)
}

def @func_11439() -> (Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32]) {
  @func_11437() /* ty=(Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32]) */
}

def @func_12096(%var_12077: Tensor[(3, 12, 9), float32]) -> (Tensor[(3, 12, 9), float64], Tensor[(3, 12, 9), bool]) {
  %109 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %110 = shape_of(%var_12077, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_12077, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %113 = floor_mod(%111, %112) /* ty=Tensor[(3, 12, 9), float32] */;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %116 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(3, 12, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %119 = cos(%114) /* ty=Tensor[(3, 12, 9), float64] */;
  %120 = greater(%117, %118) /* ty=Tensor[(3, 12, 9), bool] */;
  (%119, %120)
}

def @func_3958() -> Tensor[(7, 16, 1), float32] {
  %121 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %121.0
}

def @func_7671() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) {
  %122 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %123 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  %124 = %122.0;
  (%123, %124)
}

def @func_2158(%var_2156: Tensor[(12, 10, 1), int32], %var_2157: Tensor[(12, 10, 9), int32]) -> (Tensor[(12, 10, 9), bool],) {
  @func_2154(%var_2156, %var_2157) /* ty=(Tensor[(12, 10, 9), bool],) */
}

def @func_6869() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %125 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %126 = @func_6632() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %127 = %125.0;
  %128 = %126.0;
  (%127, %128)
}

def @func_4209() -> (Tensor[(7, 16, 1), float32],) {
  @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_6772() -> (Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) {
  %133 = fn () -> (Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) {
    %129 = @func_6019() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
    %130 = @func_6553() /* ty=Tensor[(7, 16, 1), float64] */;
    %131 = %129.3;
    %132 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
    (%130, %131, %132)
  };
  %133() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_8243() -> Tensor[(7, 16, 1), float32] {
  %134 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %134.0
}

def @func_6555() -> Tensor[(7, 16, 1), float64] {
  @func_6553() /* ty=Tensor[(7, 16, 1), float64] */
}

def @func_12518() -> (float32, Tensor[(7, 16, 1), float32]) {
  %135 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %136 = @func_6869() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %137 = %135.1;
  %138 = %136.1;
  (%137, %138)
}

def @func_5039() -> Tensor[(16, 11, 11), int8] {
  %139 = @func_4973() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %139.1
}

def @func_6553() -> Tensor[(7, 16, 1), float64] {
  %140 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %142 = sigmoid(%141) /* ty=Tensor[(7, 16, 1), float32] */;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  atan(%143) /* ty=Tensor[(7, 16, 1), float64] */
}

def @func_4450(%var_4443: Tensor[(280), float64]) -> (Tensor[(7, 16, 10), int16], Tensor[(4, 10, 7), float32], Tensor[(280), float64], Tensor[(360), uint32]) {
  %144 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %145 = cast(%var_4443, dtype="float64") /* ty=Tensor[(280), float64] */;
  %146 = cast(%var_4443, dtype="float64") /* ty=Tensor[(280), float64] */;
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %148 = reshape(%145, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %149 = reshape(%146, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %150 = reshape(%147, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %151 = @func_2747(%148, %149, %150) /* ty=(Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) */;
  %152 = %144.0;
  %153 = %151.1;
  (%152, %153, %var_4443, meta[relay.Constant][8] /* ty=Tensor[(360), uint32] */)
}

def @func_7768(%var_7763: Tensor[(2, 13, 13), int32]) -> (Tensor[(2, 13, 13), bool],) {
  %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 13, 13), int32] */, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %155 = shape_of(%var_7763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_7763, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %158 = equal(%156, %157) /* ty=Tensor[(2, 13, 13), bool] */;
  (%158,)
}

def @func_8393(%var_8391: Tensor[(1120, 1), float32]) -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 10), float32], Tensor[(1120, 1), float32]) {
  @func_8390(%var_8391) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 10), float32], Tensor[(1120, 1), float32]) */
}

def @func_10861() -> Tensor[(7, 16, 1), float32] {
  %160 = fn () -> Tensor[(7, 16, 1), float32] {
    %159 = @func_6921() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %159.0
  };
  %160() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_12380(%var_12378: Tensor[(105), uint32], %var_12379: Tensor[(48, 11), float32]) -> (Tensor[(7, 16, 105), bool], Tensor[(7, 16, 1), float32], Tensor[(48, 11), bool]) {
  @func_12376(%var_12378, %var_12379) /* ty=(Tensor[(7, 16, 105), bool], Tensor[(7, 16, 1), float32], Tensor[(48, 11), bool]) */
}

def @func_6236() -> Tensor[(7, 16, 1), float32] {
  %162 = fn () -> Tensor[(7, 16, 1), float32] {
    %161 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %161.0
  };
  %162() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8418() -> (float32,) {
  %163 = @func_5633() /* ty=float32 */;
  (%163,)
}

def @func_8078() -> Tensor[(1, 360), uint32] {
  @func_8076() /* ty=Tensor[(1, 360), uint32] */
}

def @func_6216() -> Tensor[(7, 16, 1), float32] {
  %164 = fn () -> Tensor[(7, 16, 1), float32] {
    @func_5583() /* ty=Tensor[(7, 16, 1), float32] */
  };
  %164() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_7326() -> (Tensor[(1, 360), uint32],) {
  %165 = @func_4898() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) */;
  %166 = %165.2;
  (%166,)
}

def @func_6622() -> (Tensor[(7, 16, 1), float32], Tensor[(36), bool]) {
  %167 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %168 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %169 = %167.2;
  (%168, %169)
}

def @func_1737(%var_1735: Tensor[(14, 15, 8), float32]) -> (Tensor[(14, 15, 8), float64],) {
  @func_1734(%var_1735) /* ty=(Tensor[(14, 15, 8), float64],) */
}

def @func_13604() -> (Tensor[(7, 16, 1), float32], Tensor[(105), uint32], Tensor[(1936), float32]) {
  @func_13602() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(105), uint32], Tensor[(1936), float32]) */
}

def @func_7884() -> Tensor[(7, 16, 1), float32] {
  @func_7882() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_655(%var_653: Tensor[(16, 11, 11), float32]) -> (Tensor[(16, 11, 11), float32],) {
  @func_652(%var_653) /* ty=(Tensor[(16, 11, 11), float32],) */
}

def @func_13753() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %177 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
    %170 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %171 = @func_11169() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %172 = @func_9614() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %173 = %170.0;
    %174 = @func_11968() /* ty=Tensor[(7, 16, 1), float32] */;
    %175 = %171.0;
    %176 = %172.0;
    (%173, %174, %175, %176)
  };
  %177() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_8318() -> (Tensor[(16, 11, 11), int8],) {
  %178 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %179 = %178.0;
  (%179,)
}

def @func_4876(%var_4874: float32, %var_4875: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float64]) {
  %192 = fn (%var_4862: float32, %var_4863: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float64]) {
    %180 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %181 = cast(%var_4862, dtype="float32") /* ty=float32 */;
    %182 = cast(%var_4863, dtype="float32") /* ty=Tensor[(6), float32] */;
    %183 = reshape(%181, newshape=[]) /* ty=float32 */;
    %184 = reshape(%182, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
    %185 = @func_2928(%183, %184) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
    %186 = %185.1;
    %187 = cast(%var_4862, dtype="float64") /* ty=float64 */;
    %188 = cast(%186, dtype="float64") /* ty=Tensor[(7, 15, 15), float64] */;
    %189 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
    %190 = %180.0;
    %191 = mod(%187, %188) /* ty=Tensor[(7, 15, 15), float64] */;
    (%189, %190, %var_4863, %191)
  };
  %192(%var_4874, %var_4875) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float64]) */
}

def @func_9422(%var_9419: Tensor[(14, 12, 3), int8], %var_9420: Tensor[(14, 12, 3), int8], %var_9421: Tensor[(1680), float32]) -> (Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) {
  %217 = fn (%var_9357: Tensor[(14, 12, 3), int8], %var_9358: Tensor[(14, 12, 3), int8], %var_9365: Tensor[(1680), float32]) -> (Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) {
    %193 = cast(%var_9365, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %194 = reshape(%193, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
    %195 = @func_1734(%194) /* ty=(Tensor[(14, 15, 8), float64],) */;
    %196 = %195.0;
    %197 = cast(%196, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
    %198 = reshape(%197, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
    %199 = @func_1734(%198) /* ty=(Tensor[(14, 15, 8), float64],) */;
    %200 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %201 = cast(%var_9358, dtype="int8") /* ty=Tensor[(14, 12, 3), int8] */;
    %202 = shape_of(%var_9357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%var_9357, dtype="int8") /* ty=Tensor[(14, 12, 3), int8] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %205 = bitwise_or(%203, %204) /* ty=Tensor[(14, 12, 3), int8] */;
    %206 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 12, 3), int8] */, dtype="float64") /* ty=Tensor[(14, 12, 3), float64] */;
    %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
    %208 = cast(%205, dtype="float64") /* ty=Tensor[(14, 12, 3), float64] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %210 = %199.0;
    %211 = cast(%210, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
    %212 = reshape(%211, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
    %213 = @func_1734(%212) /* ty=(Tensor[(14, 15, 8), float64],) */;
    %214 = %200.0;
    %215 = power(%208, %209) /* ty=Tensor[(14, 12, 3), float64] */;
    %216 = %213.0;
    (%196, %var_9365, %210, %214, %215, %216)
  };
  %217(%var_9419, %var_9420, %var_9421) /* ty=(Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) */
}

def @func_13073() -> Tensor[(16, 11, 11), int8] {
  %218 = @func_7671() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %218.1
}

def @func_2928(%var_2885: float32, %var_2886: Tensor[(1, 1, 6), float32]) -> (Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) {
  %219 = cast(%var_2885, dtype="float32") /* ty=float32 */;
  %220 = cast(%var_2886, dtype="float32") /* ty=Tensor[(1, 1, 6), float32] */;
  %221 = cast(meta[relay.Constant][11] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %222 = reshape(%221, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), float64] */;
  %223 = @func_2589(%222) /* ty=(Tensor[(7, 15, 15), float32],) */;
  %224 = divide(%219, %220) /* ty=Tensor[(1, 1, 6), float32] */;
  %225 = %223.0;
  (%224, %225, meta[relay.Constant][11] /* ty=Tensor[(1575), float64] */)
}

def @func_12956(%var_12954: Tensor[(2, 180), uint32]) -> (Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 180), uint32]) {
  @func_12953(%var_12954) /* ty=(Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 180), uint32]) */
}

def @func_6682(%var_6681: Tensor[(1, 13, 14), uint16]) -> (Tensor[(4, 13, 14), bool], Tensor[(7, 16, 1), float32]) {
  %230 = fn (%var_6662: Tensor[(1, 13, 14), uint16]) -> (Tensor[(4, 13, 14), bool], Tensor[(7, 16, 1), float32]) {
    %226 = cast(%var_6662, dtype="bool") /* ty=Tensor[(1, 13, 14), bool] */;
    %227 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 13, 14), uint16] */, dtype="bool") /* ty=Tensor[(4, 13, 14), bool] */;
    %228 = not_equal(%226, %227) /* ty=Tensor[(4, 13, 14), bool] */;
    %229 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
    (%228, %229)
  };
  %230(%var_6681) /* ty=(Tensor[(4, 13, 14), bool], Tensor[(7, 16, 1), float32]) */
}

def @func_7735() -> (Tensor[(7, 16, 1), float32],) {
  @func_7733() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_10448(%var_10447: Tensor[(21, 5), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(48, 1), float32], Tensor[(360, 1), uint32], Tensor[(21, 5), uint32]) {
  %238 = fn (%var_10444: Tensor[(21, 5), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(48, 1), float32], Tensor[(360, 1), uint32], Tensor[(21, 5), uint32]) {
    %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(360, 1), uint32] */, dtype="uint32") /* ty=Tensor[(360, 1), uint32] */;
    %232 = cast(%var_10444, dtype="uint32") /* ty=Tensor[(21, 5), uint32] */;
    %233 = reshape(%231, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %234 = reshape(%232, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %235 = @func_7402(%233, %234) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
    %236 = @func_8243() /* ty=Tensor[(7, 16, 1), float32] */;
    %237 = %235.1;
    (%236, %237, meta[relay.Constant][13] /* ty=Tensor[(360, 1), uint32] */, %var_10444)
  };
  %238(%var_10447) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(48, 1), float32], Tensor[(360, 1), uint32], Tensor[(21, 5), uint32]) */
}

def @func_11032() -> (Tensor[(16, 11, 11), int8],) {
  %241 = fn () -> (Tensor[(16, 11, 11), int8],) {
    %239 = @func_8318() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %240 = %239.0;
    (%240,)
  };
  %241() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_4053() -> Tensor[(7, 16, 1), float32] {
  %245 = fn () -> Tensor[(7, 16, 1), float32] {
    %242 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %243 = %242.0;
    %244 = cast(%243, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
    cos(%244) /* ty=Tensor[(7, 16, 1), float32] */
  };
  %245() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_13384() -> (bool, Tensor[(7, 16, 1936), uint32], Tensor[(1936), float32], Tensor[(16, 11, 11), int8]) {
  %246 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %247 = cast(meta[relay.Constant][14] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %248 = reshape(%247, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %249 = @func_10314(%248) /* ty=(Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(7, 16, 1936), uint32]) */;
  %250 = @func_11904() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %251 = %246.1;
  %252 = %249.2;
  %253 = %250.0;
  (%251, %252, meta[relay.Constant][14] /* ty=Tensor[(1936), float32] */, %253)
}

def @func_7710() -> (Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool]) {
  %254 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %255 = reshape(%254, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %256 = @func_4024(%255) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %257 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  %258 = %256.2;
  (%257, %258, meta[relay.Constant][15] /* ty=Tensor[(36), bool] */)
}

def @func_13470(%var_13468: bool) -> Tensor[(7, 16, 360), float64] {
  @func_13467(%var_13468) /* ty=Tensor[(7, 16, 360), float64] */
}

def @func_10368() -> Tensor[(7, 16, 1), float32] {
  %259 = @func_7733() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %259.0
}

def @func_12995() -> Tensor[(6), float32] {
  %260 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %260.3
}

def @func_12002() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  @func_12000() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_12997() -> Tensor[(6), float32] {
  @func_12995() /* ty=Tensor[(6), float32] */
}

def @func_7106() -> (Tensor[(16, 11, 11), int8],) {
  @func_7104() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_12130(%var_12111: Tensor[(12, 30), uint32]) -> (Tensor[(360), uint32], Tensor[(12, 30), uint32], Tensor[(105), uint32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32]) {
  %261 = cast(%var_12111, dtype="uint32") /* ty=Tensor[(12, 30), uint32] */;
  %262 = cast(meta[relay.Constant][16] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %263 = reshape(%261, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %264 = reshape(%262, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %265 = @func_7402(%263, %264) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
  %266 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %269 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %270 = %265.2;
  %271 = sigmoid(%268) /* ty=Tensor[(16, 11, 11), float64] */;
  %272 = %269.0;
  (%270, %var_12111, meta[relay.Constant][16] /* ty=Tensor[(105), uint32] */, %271, %272)
}

def @func_9779() -> float32 {
  @func_9777() /* ty=float32 */
}

def @func_5106() -> Tensor[(7, 16, 1), float32] {
  %273 = fn () -> Tensor[(7, 16, 1), float32] {
    @func_4850() /* ty=Tensor[(7, 16, 1), float32] */
  };
  %273() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_12066() -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1, 360), uint32], Tensor[(1, 360), float32]) {
  %285 = fn () -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1, 360), uint32], Tensor[(1, 360), float32]) {
    %274 = @func_11147() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %275 = @func_6869() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %276 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %277 = @func_7326() /* ty=(Tensor[(1, 360), uint32],) */;
    %278 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
    %279 = %274.0;
    %280 = %275.1;
    %281 = %276.0;
    %282 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
    %283 = %277.0;
    %284 = %278.0;
    (%279, %280, %281, %282, %283, %284)
  };
  %285() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1, 360), uint32], Tensor[(1, 360), float32]) */
}

def @func_9927() -> (Tensor[(7, 16, 1), float32],) {
  @func_9925() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_13062() -> Tensor[(7, 16, 1), float32] {
  @func_13060() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8053(%var_8051: Tensor[(360), uint32], %var_8052: Tensor[(12, 15, 2), bool]) -> (Tensor[(360), uint32], Tensor[(7, 16, 105), int32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), uint64]) {
  @func_8049(%var_8051, %var_8052) /* ty=(Tensor[(360), uint32], Tensor[(7, 16, 105), int32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), uint64]) */
}

def @func_11397() -> (Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
  @func_11395() /* ty=(Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) */
}

def @func_6158(%var_6133: Tensor[(7, 15), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(2, 840), bool], Tensor[(105), uint32], Tensor[(7, 15), uint32], Tensor[(1936), float64]) {
  %286 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %287 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %288 = reshape(%287, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
  %289 = @func_1734(%288) /* ty=(Tensor[(14, 15, 8), float64],) */;
  %290 = %289.0;
  %291 = cast(%290, dtype="bool") /* ty=Tensor[(14, 15, 8), bool] */;
  %292 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 840), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %293 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 840), float32] */, dtype="bool") /* ty=Tensor[(2, 840), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %295 = cast(meta[relay.Constant][18] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %296 = cast(%var_6133, dtype="uint32") /* ty=Tensor[(7, 15), uint32] */;
  %297 = reshape(%295, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %298 = reshape(%296, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %299 = @func_5251(%297, %298) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
  %300 = cast(meta[relay.Constant][18] /* ty=Tensor[(1936), float32] */, dtype="float64") /* ty=Tensor[(1936), float64] */;
  %301 = %286.0;
  %302 = logical_and(%293, %294) /* ty=Tensor[(2, 840), bool] */;
  %303 = %299.4;
  %304 = cos(%300) /* ty=Tensor[(1936), float64] */;
  (%301, %302, %303, %var_6133, %304)
}

def @func_8207() -> (Tensor[(1, 360), float32],) {
  @func_8205() /* ty=(Tensor[(1, 360), float32],) */
}

def @func_12293(%var_12282: Tensor[(8, 15, 6), float64]) -> Tensor[(8, 15, 6), float64] {
  %305 = cast(%var_12282, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  erf(%305) /* ty=Tensor[(8, 15, 6), float64] */
}

def @func_6210() -> (Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) {
  %313 = fn () -> (Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) {
    %306 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %307 = cast(meta[relay.Constant][19] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
    %308 = reshape(%307, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %309 = @func_4024(%308) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
    %310 = %306.5;
    %311 = %309.2;
    %312 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
    (%310, %311, meta[relay.Constant][19] /* ty=Tensor[(36), bool] */, %312)
  };
  %313() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */
}

def @func_6312() -> Tensor[(7, 16, 1), float32] {
  @func_4052() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_11395() -> (Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
  %314 = @func_8567() /* ty=(Tensor[(6), float32],) */;
  %315 = @func_11031() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %316 = %314.0;
  %317 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %318 = %315.0;
  %319 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  (%316, %317, %318, %319)
}

def @func_4898() -> (Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) {
  %320 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 360), uint32] */, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %321 = reshape(%320, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %322 = @func_1013(%321) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %323 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 360), uint32] */, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %324 = reshape(%323, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %325 = @func_4775(%324) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %326 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %327 = %322.0;
  %328 = %325.0;
  (%326, %327, meta[relay.Constant][20] /* ty=Tensor[(1, 360), uint32] */, %328)
}

def @func_12235() -> (Tensor[(7, 16, 1), float64], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) {
  @func_12233() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_6460(%var_6458: Tensor[(13, 3, 1), float32], %var_6459: Tensor[(6), float32]) -> (Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) {
  %336 = fn (%var_6422: Tensor[(13, 3, 1), float32], %var_6434: Tensor[(6), float32]) -> (Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) {
    %329 = cast(%var_6422, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
    %330 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
    %331 = cast(%var_6434, dtype="float32") /* ty=Tensor[(6), float32] */;
    %332 = reshape(%331, newshape=[3, 2]) /* ty=Tensor[(3, 2), float32] */;
    %333 = @func_6410(%332) /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) */;
    %334 = mod(%329, %330) /* ty=Tensor[(13, 3, 4), float32] */;
    %335 = %333.1;
    (%334, %335, %var_6434)
  };
  %336(%var_6458, %var_6459) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */
}

def @func_4326(%var_4324: Tensor[(36), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) {
  @func_4323(%var_4324) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */
}

def @func_9566(%var_9564: Tensor[(6, 84), int8], %var_9565: Tensor[(1680), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(14, 15, 8), float64], Tensor[(6, 84), int8], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(7, 16, 10), int16]) {
  %357 = fn (%var_9548: Tensor[(6, 84), int8], %var_9549: Tensor[(1680), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(14, 15, 8), float64], Tensor[(6, 84), int8], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(7, 16, 10), int16]) {
    %337 = @func_6632() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %338 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
    %339 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
    %340 = cast(%var_9549, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %341 = reshape(%338, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
    %342 = reshape(%339, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
    %343 = reshape(%340, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %344 = @func_9418(%341, %342, %343) /* ty=(Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) */;
    %345 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
    %346 = cast(%var_9548, dtype="int8") /* ty=Tensor[(6, 84), int8] */;
    %347 = cast(%var_9549, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %348 = reshape(%345, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
    %349 = reshape(%346, newshape=[14, 12, 3]) /* ty=Tensor[(14, 12, 3), int8] */;
    %350 = reshape(%347, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %351 = @func_9418(%348, %349, %350) /* ty=(Tensor[(14, 15, 8), float64], Tensor[(1680), float32], Tensor[(14, 15, 8), float64], Tensor[(16, 11, 11), int8], Tensor[(14, 12, 3), float64], Tensor[(14, 15, 8), float64]) */;
    %352 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
    %353 = %337.0;
    %354 = %344.0;
    %355 = %351.1;
    %356 = %352.0;
    (%353, %354, %var_9548, %var_9549, %355, %356)
  };
  %357(%var_9564, %var_9565) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(14, 15, 8), float64], Tensor[(6, 84), int8], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(7, 16, 10), int16]) */
}

def @func_13768() -> Tensor[(1, 360), uint32] {
  %358 = fn () -> Tensor[(1, 360), uint32] {
    @func_8076() /* ty=Tensor[(1, 360), uint32] */
  };
  %358() /* ty=Tensor[(1, 360), uint32] */
}

def @func_1677(%var_1674: Tensor[(3, 7, 5), uint32], %var_1675: Tensor[(3, 7, 5), uint32], %var_1676: Tensor[(360), uint32]) -> (Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) {
  %368 = fn (%var_1664: Tensor[(3, 7, 5), uint32], %var_1665: Tensor[(3, 7, 5), uint32], %var_1670: Tensor[(360), uint32]) -> (Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) {
    %359 = cast(%var_1665, dtype="uint32") /* ty=Tensor[(3, 7, 5), uint32] */;
    %360 = shape_of(%var_1664, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%var_1664, dtype="uint32") /* ty=Tensor[(3, 7, 5), uint32] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %363 = cast(%var_1670, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %364 = reshape(%363, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
    %365 = @func_1013(%364) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
    %366 = minimum(%361, %362) /* ty=Tensor[(3, 7, 5), uint32] */;
    %367 = %365.0;
    (%366, %367, %var_1670)
  };
  %368(%var_1674, %var_1675, %var_1676) /* ty=(Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) */
}

def @func_7528(%var_7525: Tensor[(15, 12, 4), float32], %var_7526: float32, %var_7527: Tensor[(1936), float32]) -> (Tensor[(15, 12, 4), float32], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(1936), float32]) {
  %381 = fn (%var_7496: Tensor[(15, 12, 4), float32], %var_7501: float32, %var_7509: Tensor[(1936), float32]) -> (Tensor[(15, 12, 4), float32], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(1936), float32]) {
    %369 = cast(%var_7496, dtype="float32") /* ty=Tensor[(15, 12, 4), float32] */;
    %370 = cast(%var_7501, dtype="float32") /* ty=float32 */;
    %371 = cast(meta[relay.Constant][22] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %372 = reshape(%370, newshape=[]) /* ty=float32 */;
    %373 = reshape(%371, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
    %374 = @func_2928(%372, %373) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
    %375 = cast(%var_7509, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %376 = reshape(%375, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
    %377 = @func_3897(%376) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) */;
    %378 = cosh(%369) /* ty=Tensor[(15, 12, 4), float32] */;
    %379 = %374.2;
    %380 = %377.0;
    (%378, %379, %var_7501, meta[relay.Constant][22] /* ty=Tensor[(6), float32] */, %380, %var_7509)
  };
  %381(%var_7525, %var_7526, %var_7527) /* ty=(Tensor[(15, 12, 4), float32], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(1936), float32]) */
}

def @func_8229() -> Tensor[(7, 16, 1), float32] {
  @func_8227() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_5584() -> Tensor[(7, 16, 1), float32] {
  %382 = fn () -> Tensor[(7, 16, 1), float32] {
    @func_5105() /* ty=Tensor[(7, 16, 1), float32] */
  };
  %382() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_4973() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) {
  %383 = cast(meta[relay.Constant][23] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %384 = reshape(%383, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %385 = @func_4775(%384) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %386 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  %387 = %385.1;
  (%386, %387, meta[relay.Constant][23] /* ty=Tensor[(360), uint32] */)
}

def @func_6812() -> (Tensor[(7, 16, 1), float32],) {
  @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_10838(%var_10836: Tensor[(1125, 3), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1125, 3), bool], Tensor[(1, 360), uint32]) {
  @func_10835(%var_10836) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1125, 3), bool], Tensor[(1, 360), uint32]) */
}

def @func_8125() -> (Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(70, 4), float64], Tensor[(7, 16, 1), float32]) {
  %401 = fn () -> (Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(70, 4), float64], Tensor[(7, 16, 1), float32]) {
    %388 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(70, 4), float64] */, dtype="float64") /* ty=Tensor[(70, 4), float64] */;
    %390 = reshape(%389, newshape=[280]) /* ty=Tensor[(280), float64] */;
    %391 = @func_4450(%390) /* ty=(Tensor[(7, 16, 10), int16], Tensor[(4, 10, 7), float32], Tensor[(280), float64], Tensor[(360), uint32]) */;
    %392 = cast(meta[relay.Constant][25] /* ty=Tensor[(70, 4), float64] */, dtype="float64") /* ty=Tensor[(70, 4), float64] */;
    %393 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(70, 4), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %394 = cast(meta[relay.Constant][24] /* ty=Tensor[(70, 4), float64] */, dtype="float64") /* ty=Tensor[(70, 4), float64] */;
    %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %396 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %397 = %388.0;
    %398 = %391.3;
    %399 = floor_mod(%394, %395) /* ty=Tensor[(70, 4), float64] */;
    %400 = %396.0;
    (%397, %398, %399, %400)
  };
  %401() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(70, 4), float64], Tensor[(7, 16, 1), float32]) */
}

def @func_8824() -> (Tensor[(7, 16, 1), float32],) {
  %404 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %402 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %403 = %402.4;
    (%403,)
  };
  %404() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_10977() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  @func_10975() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_5529() -> (Tensor[(7, 16, 1), float32],) {
  %407 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %405 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %406 = %405.0;
    (%406,)
  };
  %407() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_10192(%var_10191: Tensor[(360), uint32]) -> (Tensor[(16, 11, 11), int8], bool, Tensor[(360), uint32], Tensor[(105), uint32]) {
  %415 = fn (%var_10171: Tensor[(360), uint32]) -> (Tensor[(16, 11, 11), int8], bool, Tensor[(360), uint32], Tensor[(105), uint32]) {
    %408 = cast(%var_10171, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %410 = reshape(%408, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %411 = reshape(%409, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %412 = @func_7402(%410, %411) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
    %413 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
    %414 = %412.3;
    (%413, %414, %var_10171, meta[relay.Constant][26] /* ty=Tensor[(105), uint32] */)
  };
  %415(%var_10191) /* ty=(Tensor[(16, 11, 11), int8], bool, Tensor[(360), uint32], Tensor[(105), uint32]) */
}

def @func_7138() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %420 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
    %416 = @func_6260() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %417 = @func_6921() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %418 = %416.0;
    %419 = %417.0;
    (%418, %419)
  };
  %420() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_1015(%var_1014: Tensor[(12, 15, 2), uint32]) -> (Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) {
  %439 = fn (%var_971: Tensor[(12, 15, 2), uint32]) -> (Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) {
    %421 = cast(%var_971, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %422 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(12, 15, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %423 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 15, 2), uint32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %425 = cast(meta[relay.Constant][28] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %426 = reshape(%425, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
    %427 = @func_652(%426) /* ty=(Tensor[(16, 11, 11), float32],) */;
    %428 = %427.0;
    %429 = cast(meta[relay.Constant][28] /* ty=Tensor[(1936), float32] */, dtype="int8") /* ty=Tensor[(1936), int8] */;
    %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(%428, dtype="int8") /* ty=Tensor[(16, 11, 11), int8] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %433 = cast(%428, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
    %434 = reshape(%433, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
    %435 = @func_652(%434) /* ty=(Tensor[(16, 11, 11), float32],) */;
    %436 = greater(%423, %424) /* ty=Tensor[(12, 15, 2), bool] */;
    %437 = right_shift(%431, %432) /* ty=Tensor[(16, 11, 11), int8] */;
    %438 = %435.0;
    (%436, %437, %438)
  };
  %439(%var_1014) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */
}

def @func_14256() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %440 = @func_13060() /* ty=Tensor[(7, 16, 1), float32] */;
  %441 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  (%440, %441)
}

def @func_7219() -> (Tensor[(16, 11, 11), int8],) {
  %442 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  (%442,)
}

def @func_5251(%var_5232: Tensor[(1936), float32], %var_5247: Tensor[(105), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) {
  %443 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %444 = cast(%var_5232, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %445 = reshape(%444, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
  %446 = @func_3897(%445) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) */;
  %447 = cast(%var_5247, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %448 = cast(%var_5247, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %449 = cast(meta[relay.Constant][29] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %450 = reshape(%447, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %451 = reshape(%448, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %452 = reshape(%449, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %453 = @func_1673(%450, %451, %452) /* ty=(Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) */;
  %454 = %443.0;
  %455 = %446.1;
  %456 = %453.1;
  (%454, %455, %var_5232, %456, %var_5247, meta[relay.Constant][29] /* ty=Tensor[(360), uint32] */)
}

def @func_9777() -> float32 {
  @func_5633() /* ty=float32 */
}

def @func_12616() -> (Tensor[(16, 11, 11), int8], Tensor[(14, 15, 8), float64], Tensor[(2, 840), float32], Tensor[(105), uint32], Tensor[(7, 16, 528), bool], Tensor[(48, 11), float32]) {
  @func_12614() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(14, 15, 8), float64], Tensor[(2, 840), float32], Tensor[(105), uint32], Tensor[(7, 16, 528), bool], Tensor[(48, 11), float32]) */
}

def @func_4900() -> (Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) {
  @func_4898() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) */
}

def @func_7751() -> (Tensor[(16, 11, 11), int8],) {
  %457 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %458 = %457.0;
  (%458,)
}

def @func_9264() -> (Tensor[(7, 16, 1), float32], float32) {
  %463 = fn () -> (Tensor[(7, 16, 1), float32], float32) {
    %459 = @func_6771() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */;
    %460 = @func_8418() /* ty=(float32,) */;
    %461 = %459.2;
    %462 = %460.0;
    (%461, %462)
  };
  %463() /* ty=(Tensor[(7, 16, 1), float32], float32) */
}

def @func_13837() -> Tensor[(16, 11, 11), int8] {
  %464 = @func_11904() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %464.0
}

def @func_10058() -> (float32,) {
  %467 = fn () -> (float32,) {
    %465 = @func_8280() /* ty=(float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %466 = %465.0;
    (%466,)
  };
  %467() /* ty=(float32,) */
}

def @func_6634() -> (Tensor[(7, 16, 1), float32],) {
  @func_6632() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_7712() -> (Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool]) {
  @func_7710() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool]) */
}

def @func_7028(%var_7026: Tensor[(105), uint32]) -> (Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(7, 16, ?), int32], Tensor[(7, 16, 1), float32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) {
  @func_7025(%var_7026) /* ty=(Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(7, 16, ?), int32], Tensor[(7, 16, 1), float32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) */
}

def @func_8175() -> (Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) {
  %468 = @func_7104() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %469 = %468.0;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %471 = reshape(%470, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %472 = @func_652(%471) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %473 = @func_4973() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %474 = @func_4973() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
  %475 = %472.0;
  %476 = %473.2;
  %477 = %474.0;
  (%469, %475, %476, %477)
}

def @func_6632() -> (Tensor[(7, 16, 1), float32],) {
  %478 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  (%478,)
}

def @func_4027(%var_4025: Tensor[(36), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) {
  @func_4024(%var_4025) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */
}

def @func_12260() -> (Tensor[(7, 16, 1), float32],) {
  @func_12258() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_3398(%var_3391: bool, %var_3392: Tensor[(6, 2, 3), bool]) -> (Tensor[(6, 2, 3), bool],) {
  %479 = cast(%var_3391, dtype="bool") /* ty=bool */;
  %480 = cast(%var_3392, dtype="bool") /* ty=Tensor[(6, 2, 3), bool] */;
  %481 = logical_or(%479, %480) /* ty=Tensor[(6, 2, 3), bool] */;
  (%481,)
}

def @func_6871() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  @func_6869() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_14126() -> (Tensor[(7, 16, 1), float32],) {
  @func_14124() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_7025(%var_7013: Tensor[(105), uint32]) -> (Tensor[(36), bool], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(7, 16, ?), int32], Tensor[(7, 16, 1), float32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) {
  %482 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %483 = cast(meta[relay.Constant][30] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %484 = reshape(%483, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %485 = @func_1013(%484) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %486 = %482.2;
  %487 = cast(%486, dtype="bool") /* ty=Tensor[(36), bool] */;
  %488 = reshape(%487, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %489 = @func_4024(%488) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %490 = %489.0;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %492 = exp(%491) /* ty=Tensor[(7, 16, 1), float32] */;
  %493 = cast(%490, dtype="int32") /* ty=Tensor[(7, 16, 1), int32] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="int32") /* ty=Tensor[(7, 16, 1), int32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %497 = @func_6771() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */;
  %498 = cast(meta[relay.Constant][30] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %499 = cast(%var_7013, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %500 = reshape(%498, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %501 = reshape(%499, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %502 = @func_4251(%500, %501) /* ty=(Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) */;
  %503 = @func_6921() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %504 = %485.1;
  %505 = left_shift(%495, %496) /* ty=Tensor[(7, 16, ?), int32] */;
  %506 = %497.2;
  %507 = %502.1;
  %508 = %503.0;
  (%486, %504, meta[relay.Constant][30] /* ty=Tensor[(360), uint32] */, %505, %506, %507, %var_7013, %508)
}

def @func_8227() -> Tensor[(7, 16, 1), float32] {
  @func_5583() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_3960() -> Tensor[(7, 16, 1), float32] {
  @func_3958() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8320() -> (Tensor[(16, 11, 11), int8],) {
  @func_8318() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_7104() -> (Tensor[(16, 11, 11), int8],) {
  %509 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  (%509,)
}

def @main(%var_14360: Tensor[(7, 16, 1), float32], %var_14385: Tensor[(48), float32], %var_14387: Tensor[(105), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, ?), bool], Tensor[(16, 11, 11), float32], Tensor[(16, 3, 1), float32], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32], Tensor[(7, 16, ?), float32]) {
  %510 = @func_9324() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %511 = @func_8243() /* ty=Tensor[(7, 16, 1), float32] */;
  %512 = cast(%var_14360, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %516 = @func_8177() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) */;
  %517 = cast(%var_14385, dtype="float32") /* ty=Tensor[(48), float32] */;
  %518 = cast(meta[relay.Constant][31] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %519 = cast(%var_14387, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %520 = reshape(%517, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %521 = reshape(%518, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %522 = reshape(%519, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %523 = @func_2241(%520, %521, %522) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
  %524 = @func_6922() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %525 = %524.0;
  %526 = @func_7138() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %527 = %526.0;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %529 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%525, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %532 = %510.0;
  %533 = less_equal(%514, %515) /* ty=Tensor[(7, 16, ?), bool] */;
  %534 = %516.1;
  %535 = %523.0;
  %536 = floor_mod(%530, %531) /* ty=Tensor[(7, 16, ?), float32] */;
  (%532, %533, %534, %535, %var_14385, meta[relay.Constant][31] /* ty=Tensor[(360), uint32] */, %var_14387, %536)
}

def @func_6410(%var_6405: Tensor[(3, 2), float32]) -> (Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) {
  %537 = @func_6312() /* ty=Tensor[(7, 16, 1), float32] */;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  %539 = cast(%var_6405, dtype="float32") /* ty=Tensor[(3, 2), float32] */;
  %540 = reshape(%539, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %541 = @func_4695(%540) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) */;
  %542 = sqrt(%538) /* ty=Tensor[(7, 16, 1), float64] */;
  %543 = %541.3;
  (%542, %543, %var_6405)
}

def @func_14124() -> (Tensor[(7, 16, 1), float32],) {
  %544 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %545 = %544.0;
  (%545,)
}

def @func_9900(%var_9898: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) {
  @func_9897(%var_9898) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) */
}

def @func_4851() -> Tensor[(7, 16, 1), float32] {
  %546 = fn () -> Tensor[(7, 16, 1), float32] {
    @func_4052() /* ty=Tensor[(7, 16, 1), float32] */
  };
  %546() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_7221() -> (Tensor[(16, 11, 11), int8],) {
  @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_6624() -> (Tensor[(7, 16, 1), float32], Tensor[(36), bool]) {
  @func_6622() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(36), bool]) */
}

def @func_4697(%var_4696: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) {
  %554 = fn (%var_4668: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) {
    %547 = cast(-7.66514f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %548 = cast(%var_4668, dtype="float32") /* ty=Tensor[(6), float32] */;
    %549 = reshape(%547, newshape=[]) /* ty=float32 */;
    %550 = reshape(%548, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
    %551 = @func_2928(%549, %550) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
    %552 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
    %553 = %551.2;
    (%552, %553, -7.66514f /* ty=float32 */, %var_4668)
  };
  %554(%var_4696) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) */
}

def @func_6294(%var_6292: Tensor[(10, 2, 5), float32], %var_6293: float32) -> (Tensor[(10, 2, 5), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
  %563 = fn (%var_6277: Tensor[(10, 2, 5), float32], %var_6285: float32) -> (Tensor[(10, 2, 5), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
    %555 = cast(%var_6277, dtype="float32") /* ty=Tensor[(10, 2, 5), float32] */;
    %556 = cast(%var_6285, dtype="float32") /* ty=float32 */;
    %557 = cast(meta[relay.Constant][32] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %558 = reshape(%556, newshape=[]) /* ty=float32 */;
    %559 = reshape(%557, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
    %560 = @func_2928(%558, %559) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
    %561 = tan(%555) /* ty=Tensor[(10, 2, 5), float32] */;
    %562 = %560.1;
    (%561, %562, %var_6285, meta[relay.Constant][32] /* ty=Tensor[(6), float32] */)
  };
  %563(%var_6292, %var_6293) /* ty=(Tensor[(10, 2, 5), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */
}

def @func_9504(%var_9491: Tensor[(6, 1), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(13, 3), float32], Tensor[(6, 1), float32]) {
  %564 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
  %565 = cast(%var_9491, dtype="float32") /* ty=Tensor[(6, 1), float32] */;
  %566 = reshape(%564, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %567 = reshape(%565, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %568 = @func_6457(%566, %567) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %569 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  %570 = %568.0;
  (%569, %570, meta[relay.Constant][33] /* ty=Tensor[(13, 3), float32] */, %var_9491)
}

def @func_6922() -> (Tensor[(7, 16, 1), float32],) {
  %574 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %571 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
    %572 = cast(%571, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
    %573 = acosh(%572) /* ty=Tensor[(7, 16, 1), float32] */;
    (%573,)
  };
  %574() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_12012() -> Tensor[(7, 16, 1), float32] {
  @func_12010() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_6089(%var_6087: Tensor[(16, 11, 11), float32]) -> (float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) {
  @func_6086(%var_6087) /* ty=(float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) */
}

def @func_5635() -> float32 {
  @func_5633() /* ty=float32 */
}

def @func_12376(%var_12343: Tensor[(105), uint32], %var_12362: Tensor[(48, 11), float32]) -> (Tensor[(7, 16, 105), bool], Tensor[(7, 16, 1), float32], Tensor[(48, 11), bool]) {
  %575 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %576 = %575.0;
  %577 = cast(%var_12343, dtype="bool") /* ty=Tensor[(105), bool] */;
  %578 = cast(%576, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %579 = cast(%var_12343, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %580 = reshape(%579, newshape=[21, 5]) /* ty=Tensor[(21, 5), uint32] */;
  %581 = @func_10446(%580) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(48, 1), float32], Tensor[(360, 1), uint32], Tensor[(21, 5), uint32]) */;
  %582 = %581.1;
  %583 = cast(%582, dtype="bool") /* ty=Tensor[(48, 1), bool] */;
  %584 = cast(%var_12362, dtype="bool") /* ty=Tensor[(48, 11), bool] */;
  %585 = not_equal(%577, %578) /* ty=Tensor[(7, 16, 105), bool] */;
  %586 = @func_6235() /* ty=Tensor[(7, 16, 1), float32] */;
  %587 = less_equal(%583, %584) /* ty=Tensor[(48, 11), bool] */;
  (%585, %586, %587)
}

def @func_10835(%var_10828: Tensor[(1125, 3), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(1125, 3), bool], Tensor[(1, 360), uint32]) {
  %588 = cast(%var_10828, dtype="bool") /* ty=Tensor[(1125, 3), bool] */;
  %589 = cast(%var_10828, dtype="bool") /* ty=Tensor[(1125, 3), bool] */;
  %590 = reshape(%588, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
  %591 = reshape(%589, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
  %592 = @func_7548(%590, %591) /* ty=(Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) */;
  %593 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %594 = %592.1;
  %595 = @func_8076() /* ty=Tensor[(1, 360), uint32] */;
  (%593, %594, %var_10828, %595)
}

def @func_9615() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %599 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
    %596 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
    %597 = @func_7882() /* ty=Tensor[(7, 16, 1), float32] */;
    %598 = %596.0;
    (%597, %598)
  };
  %599() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_8076() -> Tensor[(1, 360), uint32] {
  %600 = @func_7326() /* ty=(Tensor[(1, 360), uint32],) */;
  %600.0
}

def @func_11135(%var_11103: Tensor[(2, 180), uint32], %var_11104: Tensor[(1936), float32], %var_11123: Tensor[(2, 180), uint32]) -> (bool, Tensor[(2, 180), uint32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(2, 180), uint32]) {
  %601 = @func_8860() /* ty=(Tensor[(7, 16, 1), float32], bool) */;
  %602 = cast(%var_11103, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %603 = cast(%var_11104, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %604 = reshape(%602, newshape=[2, 180]) /* ty=Tensor[(2, 180), uint32] */;
  %605 = reshape(%603, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
  %606 = @func_9075(%604, %605) /* ty=(float32, Tensor[(7, 16, 105), bool], Tensor[(2, 180), uint32], Tensor[(105), uint32], Tensor[(4, 484), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %607 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %608 = cast(%var_11123, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %609 = shape_of(%var_11103, dtype="int32") /* ty=Tensor[(2), int32] */;
  %610 = cast(%var_11103, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %612 = %601.1;
  %613 = %606.2;
  %614 = %607.0;
  %615 = bitwise_or(%610, %611) /* ty=Tensor[(2, 180), uint32] */;
  (%612, %613, %var_11104, %614, %615)
}

def @func_12133(%var_12131: Tensor[(12, 30), uint32]) -> (Tensor[(360), uint32], Tensor[(12, 30), uint32], Tensor[(105), uint32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32]) {
  @func_12130(%var_12131) /* ty=(Tensor[(360), uint32], Tensor[(12, 30), uint32], Tensor[(105), uint32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32]) */
}

def @func_3759() -> (Tensor[(7, 16, 1), float32],) {
  %620 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %616 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
    %617 = log2(%616) /* ty=Tensor[(7, 16, 1), float64] */;
    %618 = cast(%617, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
    %619 = sin(%618) /* ty=Tensor[(7, 16, 1), float32] */;
    (%619,)
  };
  %620() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_13704(%var_13669: Tensor[(1936), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, ?), bool], Tensor[(7, 16, 1), float32]) {
  %621 = cast(%var_13669, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %622 = reshape(%621, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %623 = @func_13132(%622) /* ty=(Tensor[(1, 5, 5), float32], float32, Tensor[(1936), float32]) */;
  %624 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %625 = @func_12758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %626 = %625.0;
  %627 = @func_11874() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %630 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%626, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %634 = @func_8227() /* ty=Tensor[(7, 16, 1), float32] */;
  %635 = %623.2;
  %636 = %624.0;
  %637 = logical_and(%631, %632) /* ty=Tensor[(7, 16, ?), bool] */;
  %638 = %633.0;
  (%634, %635, %var_13669, %636, %637, %638)
}

def @func_3924() -> (Tensor[(7, 16, 1), float32],) {
  %641 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %639 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %640 = %639.0;
    (%640,)
  };
  %641() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_8049(%var_7982: Tensor[(360), uint32], %var_8040: Tensor[(12, 15, 2), bool]) -> (Tensor[(360), uint32], Tensor[(7, 16, 105), int32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), uint64]) {
  %642 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %643 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 105), uint32] */, dtype="int32") /* ty=Tensor[(1, 105), int32] */;
  %644 = cast(%642, dtype="int32") /* ty=Tensor[(7, 16, 1), int32] */;
  %645 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %646 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 105), uint32] */, dtype="uint32") /* ty=Tensor[(1, 105), uint32] */;
  %647 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 105), uint32] */, dtype="uint32") /* ty=Tensor[(1, 105), uint32] */;
  %648 = cast(%var_7982, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %649 = reshape(%646, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %650 = reshape(%647, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
  %651 = reshape(%648, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %652 = @func_1673(%649, %650, %651) /* ty=(Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) */;
  %653 = %652.1;
  %654 = cast(%var_8040, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %658 = multiply(%643, %644) /* ty=Tensor[(7, 16, 105), int32] */;
  %659 = %645.0;
  %660 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
  %661 = bitwise_and(%656, %657) /* ty=Tensor[(12, 15, 2), uint64] */;
  (%var_7982, %658, %659, %660, %661)
}

def @func_3986(%var_3981: float32, %var_3982: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
  %662 = cast(%var_3981, dtype="float32") /* ty=float32 */;
  %663 = cast(%var_3982, dtype="float32") /* ty=Tensor[(6), float32] */;
  %664 = reshape(%662, newshape=[]) /* ty=float32 */;
  %665 = reshape(%663, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %666 = @func_2928(%664, %665) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %667 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %668 = %666.1;
  (%667, %668, %var_3981, %var_3982)
}

def @func_3897(%var_3860: Tensor[(4, 484), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) {
  %669 = @func_3758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %670 = cast(%var_3860, dtype="float32") /* ty=Tensor[(4, 484), float32] */;
  %671 = reshape(%670, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %672 = @func_652(%671) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %673 = %672.0;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %675 = cast(meta[relay.Constant][36] /* ty=Tensor[(180, 2), uint32] */, dtype="uint32") /* ty=Tensor[(180, 2), uint32] */;
  %676 = reshape(%675, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %677 = @func_1013(%676) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %678 = %669.0;
  %679 = log(%674) /* ty=Tensor[(16, 11, 11), float64] */;
  %680 = %677.2;
  (%678, %var_3860, %679, %680, meta[relay.Constant][36] /* ty=Tensor[(180, 2), uint32] */)
}

def @func_8768() -> (Tensor[(7, 16, 1), float32],) {
  @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_6314() -> Tensor[(7, 16, 1), float32] {
  @func_6312() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_9356() -> (Tensor[(16, 11, 11), int8],) {
  %683 = fn () -> (Tensor[(16, 11, 11), int8],) {
    %681 = @func_8175() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) */;
    %682 = %681.0;
    (%682,)
  };
  %683() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_2154(%var_2146: Tensor[(12, 10, 1), int32], %var_2147: Tensor[(12, 10, 9), int32]) -> (Tensor[(12, 10, 9), bool],) {
  %684 = cast(%var_2146, dtype="bool") /* ty=Tensor[(12, 10, 1), bool] */;
  %685 = cast(%var_2147, dtype="bool") /* ty=Tensor[(12, 10, 9), bool] */;
  %686 = less(%684, %685) /* ty=Tensor[(12, 10, 9), bool] */;
  (%686,)
}

def @func_8717() -> (Tensor[(36), bool], Tensor[(6), float32]) {
  %691 = fn () -> (Tensor[(36), bool], Tensor[(6), float32]) {
    %687 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
    %688 = @func_8567() /* ty=(Tensor[(6), float32],) */;
    %689 = %687.2;
    %690 = %688.0;
    (%689, %690)
  };
  %691() /* ty=(Tensor[(36), bool], Tensor[(6), float32]) */
}

def @func_8558() -> (Tensor[(16, 11, 11), int8],) {
  @func_8556() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_10975() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %692 = @func_6869() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %693 = @func_9323() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %694 = %692.0;
  %695 = %693.0;
  (%694, %695)
}

def @func_1734(%var_1707: Tensor[(14, 15, 8), float32]) -> (Tensor[(14, 15, 8), float64],) {
  %696 = cast(%var_1707, dtype="float32") /* ty=Tensor[(14, 15, 8), float32] */;
  %697 = cosh(%696) /* ty=Tensor[(14, 15, 8), float32] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(14, 15, 8), float64] */;
  %699 = shape_of(%var_1707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%var_1707, dtype="float64") /* ty=Tensor[(14, 15, 8), float64] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %702 = divide(%700, %701) /* ty=Tensor[(14, 15, 8), float64] */;
  (%702,)
}

def @func_12766() -> Tensor[(7, 16, 1), float32] {
  %704 = fn () -> Tensor[(7, 16, 1), float32] {
    %703 = @func_11169() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %703.0
  };
  %704() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_13135(%var_13133: Tensor[(1936), float32]) -> (Tensor[(1, 5, 5), float32], float32, Tensor[(1936), float32]) {
  @func_13132(%var_13133) /* ty=(Tensor[(1, 5, 5), float32], float32, Tensor[(1936), float32]) */
}

def @func_12296(%var_12294: Tensor[(8, 15, 6), float64]) -> Tensor[(8, 15, 6), float64] {
  @func_12293(%var_12294) /* ty=Tensor[(8, 15, 6), float64] */
}

def @func_4207() -> (Tensor[(7, 16, 1), float32],) {
  %705 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  (%705,)
}

def @func_11140(%var_11137: Tensor[(2, 180), uint32], %var_11138: Tensor[(1936), float32], %var_11139: Tensor[(2, 180), uint32]) -> (bool, Tensor[(2, 180), uint32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(2, 180), uint32]) {
  @func_11135(%var_11137, %var_11138, %var_11139) /* ty=(bool, Tensor[(2, 180), uint32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(2, 180), uint32]) */
}

def @func_11149() -> (Tensor[(16, 11, 11), int8],) {
  @func_11147() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_9925() -> (Tensor[(7, 16, 1), float32],) {
  %706 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %707 = %706.0;
  (%707,)
}

def @func_8435() -> Tensor[(7, 16, 1), float32] {
  %708 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %708.0
}

def @func_652(%var_647: Tensor[(16, 11, 11), float32]) -> (Tensor[(16, 11, 11), float32],) {
  %709 = cast(%var_647, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %710 = cos(%709) /* ty=Tensor[(16, 11, 11), float32] */;
  (%710,)
}

def @func_9453() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %711 = @func_9323() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %712 = @func_8435() /* ty=Tensor[(7, 16, 1), float32] */;
  %713 = %711.0;
  (%712, %713)
}

def @func_10370() -> Tensor[(7, 16, 1), float32] {
  @func_10368() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_5255(%var_5253: Tensor[(1936), float32], %var_5254: Tensor[(105), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) {
  @func_5251(%var_5253, %var_5254) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */
}

def @func_10813(%var_10811: bool) -> (Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) {
  @func_10810(%var_10811) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) */
}

def @func_13257() -> (Tensor[(7, 16, 10), int16], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(1575), float64], Tensor[(36), bool], Tensor[(40320), float32]) {
  @func_13255() /* ty=(Tensor[(7, 16, 10), int16], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(1575), float64], Tensor[(36), bool], Tensor[(40320), float32]) */
}

def @func_13255() -> (Tensor[(7, 16, 10), int16], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(1575), float64], Tensor[(36), bool], Tensor[(40320), float32]) {
  %714 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %715 = @func_11031() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %716 = cast(meta[relay.Constant][37] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %717 = cast(meta[relay.Constant][38] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %718 = cast(meta[relay.Constant][39] /* ty=Tensor[(40320), float32] */, dtype="float32") /* ty=Tensor[(40320), float32] */;
  %719 = reshape(%716, newshape=[1575]) /* ty=Tensor[(1575), float64] */;
  %720 = reshape(%717, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %721 = reshape(%718, newshape=[7, 16, 360]) /* ty=Tensor[(7, 16, 360), float32] */;
  %722 = @func_5913(%719, %720, %721) /* ty=(Tensor[(360), uint32], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(7, 16, 105), bool], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], bool, Tensor[(36), bool], float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 360), bool], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32]) */;
  %723 = %714.0;
  %724 = %715.0;
  %725 = %722.15;
  (%723, %724, %725, meta[relay.Constant][37] /* ty=Tensor[(1575), float64] */, meta[relay.Constant][38] /* ty=Tensor[(36), bool] */, meta[relay.Constant][39] /* ty=Tensor[(40320), float32] */)
}

def @func_9324() -> (Tensor[(7, 16, 1), float32],) {
  %728 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %726 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %727 = %726.0;
    (%727,)
  };
  %728() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_12000() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %729 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %730 = %729.0;
  %731 = @func_8435() /* ty=Tensor[(7, 16, 1), float32] */;
  (%730, %731)
}

def @func_12446() -> Tensor[(7, 16, 1), float32] {
  %733 = fn () -> Tensor[(7, 16, 1), float32] {
    %732 = @func_6632() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %732.0
  };
  %733() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_8861() -> (Tensor[(7, 16, 1), float32], bool) {
  %738 = fn () -> (Tensor[(7, 16, 1), float32], bool) {
    %734 = @func_6260() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %735 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
    %736 = %734.0;
    %737 = %735.1;
    (%736, %737)
  };
  %738() /* ty=(Tensor[(7, 16, 1), float32], bool) */
}

def @func_13386() -> (bool, Tensor[(7, 16, 1936), uint32], Tensor[(1936), float32], Tensor[(16, 11, 11), int8]) {
  @func_13384() /* ty=(bool, Tensor[(7, 16, 1936), uint32], Tensor[(1936), float32], Tensor[(16, 11, 11), int8]) */
}

def @func_10160(%var_10159: Tensor[(338), int32]) -> (Tensor[(7, 16, 1), float32], Tensor[(2, 13, 13), bool], Tensor[(338), int32], Tensor[(48), float32], Tensor[(280), float64], Tensor[(2, 180), uint32], float32) {
  %755 = fn (%var_10131: Tensor[(338), int32]) -> (Tensor[(7, 16, 1), float32], Tensor[(2, 13, 13), bool], Tensor[(338), int32], Tensor[(48), float32], Tensor[(280), float64], Tensor[(2, 180), uint32], float32) {
    %739 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %740 = cast(%var_10131, dtype="int32") /* ty=Tensor[(338), int32] */;
    %741 = reshape(%740, newshape=[2, 13, 13]) /* ty=Tensor[(2, 13, 13), int32] */;
    %742 = @func_7768(%741) /* ty=(Tensor[(2, 13, 13), bool],) */;
    %743 = cast(meta[relay.Constant][40] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %744 = cast(meta[relay.Constant][40] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %745 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 180), uint32] */, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
    %746 = reshape(%743, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
    %747 = reshape(%744, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
    %748 = reshape(%745, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %749 = @func_2747(%746, %747, %748) /* ty=(Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) */;
    %750 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
    %751 = %739.0;
    %752 = %742.0;
    %753 = %749.3;
    %754 = %750.1;
    (%751, %752, %var_10131, %753, meta[relay.Constant][40] /* ty=Tensor[(280), float64] */, meta[relay.Constant][41] /* ty=Tensor[(2, 180), uint32] */, %754)
  };
  %755(%var_10159) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(2, 13, 13), bool], Tensor[(338), int32], Tensor[(48), float32], Tensor[(280), float64], Tensor[(2, 180), uint32], float32) */
}

def @func_8245() -> Tensor[(7, 16, 1), float32] {
  @func_8243() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_9507(%var_9505: Tensor[(6, 1), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(13, 3), float32], Tensor[(6, 1), float32]) {
  @func_9504(%var_9505) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(13, 3), float32], Tensor[(6, 1), float32]) */
}

def @func_9878(%var_9872: Tensor[(1, 360), bool]) -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(3, 10, 12), bool], Tensor[(1, 360), bool], Tensor[(1, 6), float32]) {
  %756 = @func_7104() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %757 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %758 = cast(%var_9872, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %759 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 6), float32] */;
  %760 = reshape(%758, newshape=[3, 10, 12]) /* ty=Tensor[(3, 10, 12), bool] */;
  %761 = reshape(%759, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %762 = @func_3155(%760, %761) /* ty=(Tensor[(3, 10, 12), bool], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(280), float64]) */;
  %763 = %756.0;
  %764 = %757.0;
  %765 = %762.0;
  (%763, %764, %765, %var_9872, meta[relay.Constant][42] /* ty=Tensor[(1, 6), float32] */)
}

def @func_7786() -> (Tensor[(7, 16, 1), float32],) {
  %766 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %767 = %766.0;
  (%767,)
}

def @func_8999() -> (Tensor[(1, 360), float32], Tensor[(360), uint32], Tensor[(48), float32], Tensor[(21, 5), uint32], Tensor[(7, 16, 360), uint64], Tensor[(1, 360), float32]) {
  %768 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %769 = cast(meta[relay.Constant][43] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %770 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %771 = %770.0;
  %772 = cast(%771, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %773 = cast(meta[relay.Constant][44] /* ty=Tensor[(21, 5), uint32] */, dtype="uint32") /* ty=Tensor[(21, 5), uint32] */;
  %774 = reshape(%769, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
  %775 = reshape(%772, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %776 = reshape(%773, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %777 = @func_2237(%774, %775, %776) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
  %778 = cast(%771, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %779 = exp(%778) /* ty=Tensor[(1, 360), float32] */;
  %780 = @func_8435() /* ty=Tensor[(7, 16, 1), float32] */;
  %781 = cast(%779, dtype="uint64") /* ty=Tensor[(1, 360), uint64] */;
  %782 = cast(%780, dtype="uint64") /* ty=Tensor[(7, 16, 1), uint64] */;
  %783 = cast(%779, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
  %784 = %768.0;
  %785 = %777.2;
  %786 = right_shift(%781, %782) /* ty=Tensor[(7, 16, 360), uint64] */;
  %787 = sin(%783) /* ty=Tensor[(1, 360), float32] */;
  (%784, %785, meta[relay.Constant][43] /* ty=Tensor[(48), float32] */, meta[relay.Constant][44] /* ty=Tensor[(21, 5), uint32] */, %786, %787)
}

def @func_10810(%var_10807: bool) -> (Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) {
  %788 = @func_7733() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %789 = cast(%var_10807, dtype="bool") /* ty=bool */;
  %790 = cast(meta[relay.Constant][45] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %791 = reshape(%789, newshape=[]) /* ty=bool */;
  %792 = reshape(%790, newshape=[1, 36]) /* ty=Tensor[(1, 36), bool] */;
  %793 = @func_7314(%791, %792) /* ty=(Tensor[(1, 360), float32], bool, Tensor[(?, 36), uint8]) */;
  %794 = %788.0;
  %795 = %793.2;
  (%794, %795, %var_10807, meta[relay.Constant][45] /* ty=Tensor[(36), bool] */)
}

def @func_6810() -> (Tensor[(7, 16, 1), float32],) {
  %796 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  (%796,)
}

def @func_14217(%var_14216: Tensor[(7, 16, 1936), int8]) -> (Tensor[(7, 16, 1936), float32],) {
  %804 = fn (%var_14209: Tensor[(7, 16, 1936), int8]) -> (Tensor[(7, 16, 1936), float32],) {
    %797 = @func_14077() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(360), uint32], Tensor[(7, 16, 1936), int8]) */;
    %798 = %797.2;
    %799 = cast(%var_14209, dtype="float32") /* ty=Tensor[(7, 16, 1936), float32] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%798, dtype="float32") /* ty=Tensor[(7, 16, 1936), float32] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %803 = floor_divide(%801, %802) /* ty=Tensor[(7, 16, 1936), float32] */;
    (%803,)
  };
  %804(%var_14216) /* ty=(Tensor[(7, 16, 1936), float32],) */
}

def @func_3990(%var_3988: float32, %var_3989: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
  @func_3986(%var_3988, %var_3989) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */
}

def @func_11437() -> (Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32]) {
  %805 = @func_7230() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %806 = %805.0;
  %807 = cast(%806, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
  %808 = cast(%806, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %809 = reshape(%808, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %810 = @func_652(%809) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %811 = sin(%807) /* ty=Tensor[(16, 11, 11), float64] */;
  %812 = %810.0;
  (%811, %812)
}

def @func_3159(%var_3157: Tensor[(3, 10, 12), bool], %var_3158: Tensor[(6), float32]) -> (Tensor[(3, 10, 12), bool], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(280), float64]) {
  @func_3155(%var_3157, %var_3158) /* ty=(Tensor[(3, 10, 12), bool], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(280), float64]) */
}

def @func_11583(%var_11538: Tensor[(1575), float64]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], Tensor[(16, 11, 11), int8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(16, 11, 11), int8]) {
  %813 = @func_7671() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %814 = cast(meta[relay.Constant][46] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %815 = reshape(%814, newshape=[6, 1]) /* ty=Tensor[(6, 1), float32] */;
  %816 = @func_9504(%815) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(13, 3), float32], Tensor[(6, 1), float32]) */;
  %817 = cast(%var_11538, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %818 = reshape(%817, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), float64] */;
  %819 = @func_2589(%818) /* ty=(Tensor[(7, 15, 15), float32],) */;
  %820 = @func_7219() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %821 = cast(meta[relay.Constant][47] /* ty=Tensor[(36), bool] */, dtype="bool") /* ty=Tensor[(36), bool] */;
  %822 = reshape(%821, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %823 = @func_4323(%822) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
  %824 = @func_7751() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %825 = %813.0;
  %826 = %816.1;
  %827 = %819.0;
  %828 = %820.0;
  %829 = %823.1;
  %830 = %824.0;
  (%825, %826, meta[relay.Constant][46] /* ty=Tensor[(6), float32] */, %827, %var_11538, %828, %829, meta[relay.Constant][47] /* ty=Tensor[(36), bool] */, %830)
}

def @func_7551(%var_7549: Tensor[(15, 15, 15), bool], %var_7550: Tensor[(15, 15, 15), bool]) -> (Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) {
  %837 = fn (%var_7537: Tensor[(15, 15, 15), bool], %var_7538: Tensor[(15, 15, 15), bool]) -> (Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) {
    %831 = cast(%var_7538, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
    %832 = shape_of(%var_7537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %833 = cast(%var_7537, dtype="bool") /* ty=Tensor[(15, 15, 15), bool] */;
    %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %835 = logical_and(%833, %834) /* ty=Tensor[(15, 15, 15), bool] */;
    %836 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
    (%835, %836)
  };
  %837(%var_7549, %var_7550) /* ty=(Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) */
}

def @func_3402(%var_3400: bool, %var_3401: Tensor[(6, 2, 3), bool]) -> (Tensor[(6, 2, 3), bool],) {
  @func_3398(%var_3400, %var_3401) /* ty=(Tensor[(6, 2, 3), bool],) */
}

def @func_11876() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) {
  @func_11874() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */
}

def @func_7673() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) {
  @func_7671() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */
}

def @func_5917(%var_5914: Tensor[(1575), float64], %var_5915: Tensor[(36), bool], %var_5916: Tensor[(7, 16, 360), float32]) -> (Tensor[(360), uint32], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(7, 16, 105), bool], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], bool, Tensor[(36), bool], float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 360), bool], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32]) {
  %910 = fn (%var_5852: Tensor[(1575), float64], %var_5865: Tensor[(36), bool], %var_5905: Tensor[(7, 16, 360), float32]) -> (Tensor[(360), uint32], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(7, 16, 105), bool], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], bool, Tensor[(36), bool], float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 360), bool], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32]) {
    %838 = cast(meta[relay.Constant][48] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %839 = reshape(%838, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %840 = @func_4775(%839) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
    %841 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
    %842 = @func_5528() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %843 = %842.0;
    %844 = cast(%841, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
    %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
    %846 = cast(%843, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %848 = greater(%846, %847) /* ty=Tensor[(7, 16, ?), bool] */;
    %849 = cast(%848, dtype="bool") /* ty=Tensor[(7, 16, ?), bool] */;
    %850 = shape_of(%841, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%841, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %853 = greater_equal(%851, %852) /* ty=Tensor[(7, 16, ?), bool] */;
    %854 = cast(meta[relay.Constant][48] /* ty=Tensor[(360), uint32] */, dtype="bool") /* ty=Tensor[(360), bool] */;
    %855 = cast(%853, dtype="bool") /* ty=Tensor[(7, 16, ?), bool] */;
    %856 = greater_equal(%854, %855) /* ty=Tensor[(7, 16, 360), bool] */;
    %857 = cast(%856, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
    %858 = cast(%853, dtype="float64") /* ty=Tensor[(7, 16, ?), float64] */;
    %859 = cast(meta[relay.Constant][49] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %860 = cast(meta[relay.Constant][50] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %861 = reshape(%859, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
    %862 = reshape(%860, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %863 = @func_5251(%861, %862) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
    %864 = cast(%848, dtype="bool") /* ty=Tensor[(7, 16, ?), bool] */;
    %865 = cast(meta[relay.Constant][50] /* ty=Tensor[(105), uint32] */, dtype="bool") /* ty=Tensor[(105), bool] */;
    %866 = cast(meta[relay.Constant][48] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %867 = reshape(%866, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %868 = @func_4775(%867) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
    %869 = cast(%var_5852, dtype="float64") /* ty=Tensor[(1575), float64] */;
    %870 = reshape(%869, newshape=[7, 15, 15]) /* ty=Tensor[(7, 15, 15), float64] */;
    %871 = @func_2589(%870) /* ty=(Tensor[(7, 15, 15), float32],) */;
    %872 = cast(%var_5865, dtype="bool") /* ty=Tensor[(36), bool] */;
    %873 = reshape(%872, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %874 = @func_4323(%873) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
    %875 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %876 = cast(%var_5865, dtype="bool") /* ty=Tensor[(36), bool] */;
    %877 = reshape(%876, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %878 = @func_4024(%877) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
    %879 = cast(%848, dtype="uint64") /* ty=Tensor[(7, 16, ?), uint64] */;
    %880 = cast(meta[relay.Constant][48] /* ty=Tensor[(360), uint32] */, dtype="uint64") /* ty=Tensor[(360), uint64] */;
    %881 = logical_xor(%879, %880) /* ty=Tensor[(7, 16, 360), uint64] */;
    %882 = cast(%843, dtype="int16") /* ty=Tensor[(7, 16, 1), int16] */;
    %883 = cast(%881, dtype="int16") /* ty=Tensor[(7, 16, 360), int16] */;
    %884 = multiply(%882, %883) /* ty=Tensor[(7, 16, 360), int16] */;
    %885 = cast(%884, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
    %886 = erf(%885) /* ty=Tensor[(7, 16, 360), float64] */;
    %887 = cast(%886, dtype="float32") /* ty=Tensor[(7, 16, 360), float32] */;
    %888 = sqrt(%887) /* ty=Tensor[(7, 16, 360), float32] */;
    %889 = cast(%886, dtype="bool") /* ty=Tensor[(7, 16, 360), bool] */;
    %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %891 = cast(%888, dtype="bool") /* ty=Tensor[(7, 16, 360), bool] */;
    %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %893 = cast(%var_5905, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
    %894 = shape_of(%888, dtype="int32") /* ty=Tensor[(3), int32] */;
    %895 = cast(%888, dtype="float64") /* ty=Tensor[(7, 16, 360), float64] */;
    %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %897 = %840.2;
    %898 = add(%857, %858) /* ty=Tensor[(7, 16, 360), float64] */;
    %899 = %863.0;
    %900 = less_equal(%864, %865) /* ty=Tensor[(7, 16, 105), bool] */;
    %901 = %868.1;
    %902 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
    %903 = %871.0;
    %904 = %874.2;
    %905 = %875.2;
    %906 = %878.0;
    %907 = not_equal(%891, %892) /* ty=Tensor[(7, 16, 360), bool] */;
    %908 = floor_mod(%895, %896) /* ty=Tensor[(7, 16, 360), float64] */;
    %909 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
    (%897, %898, %899, meta[relay.Constant][49] /* ty=Tensor[(1936), float32] */, %900, %901, %902, %903, %var_5852, %904, %var_5865, %905, %906, %907, %908, %909)
  };
  %910(%var_5914, %var_5915, %var_5916) /* ty=(Tensor[(360), uint32], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(7, 16, 105), bool], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], bool, Tensor[(36), bool], float32, Tensor[(7, 16, 1), float32], Tensor[(7, 16, 360), bool], Tensor[(7, 16, 360), float64], Tensor[(7, 16, 1), float32]) */
}

def @func_7405(%var_7403: Tensor[(360), uint32], %var_7404: Tensor[(105), uint32]) -> (Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) {
  %925 = fn (%var_7385: Tensor[(360), uint32], %var_7386: Tensor[(105), uint32]) -> (Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) {
    %911 = cast(meta[relay.Constant][51] /* ty=Tensor[(48, 1), float32] */, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
    %912 = cast(%var_7385, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %913 = cast(%var_7386, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %914 = reshape(%911, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
    %915 = reshape(%912, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %916 = reshape(%913, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %917 = @func_2237(%914, %915, %916) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
    %918 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
    %919 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
    %920 = cast(%var_7386, dtype="bool") /* ty=Tensor[(105), bool] */;
    %921 = cast(%919, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
    %922 = %917.1;
    %923 = %918.1;
    %924 = greater(%920, %921) /* ty=Tensor[(7, 16, 105), bool] */;
    (%922, meta[relay.Constant][51] /* ty=Tensor[(48, 1), float32] */, %var_7385, %923, %924)
  };
  %925(%var_7403, %var_7404) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */
}

def @func_4371() -> (Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) {
  @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */
}

def @func_2751(%var_2748: Tensor[(4, 10, 7), float64], %var_2749: Tensor[(4, 10, 7), float64], %var_2750: Tensor[(360), uint32]) -> (Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) {
  %943 = fn (%var_2715: Tensor[(4, 10, 7), float64], %var_2719: Tensor[(4, 10, 7), float64], %var_2734: Tensor[(360), uint32]) -> (Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) {
    %926 = cast(%var_2715, dtype="float64") /* ty=Tensor[(4, 10, 7), float64] */;
    %927 = acosh(%926) /* ty=Tensor[(4, 10, 7), float64] */;
    %928 = cast(%var_2719, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
    %929 = shape_of(%927, dtype="int32") /* ty=Tensor[(3), int32] */;
    %930 = cast(%927, dtype="uint64") /* ty=Tensor[(4, 10, 7), uint64] */;
    %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %932 = cast(%927, dtype="float32") /* ty=Tensor[(4, 10, 7), float32] */;
    %933 = cast(meta[relay.Constant][52] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %934 = cast(%var_2734, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %935 = cast(meta[relay.Constant][53] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %936 = reshape(%933, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
    %937 = reshape(%934, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %938 = reshape(%935, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %939 = @func_2237(%936, %937, %938) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
    %940 = bitwise_xor(%930, %931) /* ty=Tensor[(4, 10, 7), uint64] */;
    %941 = exp(%932) /* ty=Tensor[(4, 10, 7), float32] */;
    %942 = %939.1;
    (%940, %941, %942, meta[relay.Constant][52] /* ty=Tensor[(48), float32] */, %var_2734, meta[relay.Constant][53] /* ty=Tensor[(105), uint32] */)
  };
  %943(%var_2748, %var_2749, %var_2750) /* ty=(Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) */
}

def @func_12971() -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(3375), bool]) {
  %956 = fn () -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(3375), bool]) {
    %944 = @func_11147() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %945 = @func_8468() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %946 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %947 = cast(meta[relay.Constant][54] /* ty=Tensor[(3375), bool] */, dtype="bool") /* ty=Tensor[(3375), bool] */;
    %948 = cast(meta[relay.Constant][54] /* ty=Tensor[(3375), bool] */, dtype="bool") /* ty=Tensor[(3375), bool] */;
    %949 = reshape(%947, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
    %950 = reshape(%948, newshape=[15, 15, 15]) /* ty=Tensor[(15, 15, 15), bool] */;
    %951 = @func_7548(%949, %950) /* ty=(Tensor[(15, 15, 15), bool], Tensor[(7, 16, 1), float32]) */;
    %952 = %944.0;
    %953 = %945.0;
    %954 = %946.1;
    %955 = %951.1;
    (%952, %953, %954, %955, meta[relay.Constant][54] /* ty=Tensor[(3375), bool] */)
  };
  %956() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(3375), bool]) */
}

def @func_7788() -> (Tensor[(7, 16, 1), float32],) {
  @func_7786() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_7882() -> Tensor[(7, 16, 1), float32] {
  %957 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %957.3
}

def @func_13467(%var_13445: bool) -> Tensor[(7, 16, 360), float64] {
  %958 = cast(%var_13445, dtype="bool") /* ty=bool */;
  %959 = reshape(%958, newshape=[]) /* ty=bool */;
  %960 = @func_10810(%959) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(?, 36), uint8], bool, Tensor[(36), bool]) */;
  %961 = %960.0;
  %962 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
  %963 = %962.0;
  %964 = cast(%963, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %965 = cast(%var_13445, dtype="float64") /* ty=float64 */;
  %966 = mod(%964, %965) /* ty=Tensor[(1, 360), float64] */;
  %967 = cast(%961, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
  %968 = cast(%966, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  mod(%967, %968) /* ty=Tensor[(7, 16, 360), float64] */
}

def @func_10316(%var_10315: Tensor[(1936), float32]) -> (Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(7, 16, 1936), uint32]) {
  %979 = fn (%var_10296: Tensor[(1936), float32]) -> (Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(7, 16, 1936), uint32]) {
    %969 = cast(%var_10296, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %970 = cast(meta[relay.Constant][55] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %971 = reshape(%969, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
    %972 = reshape(%970, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %973 = @func_5251(%971, %972) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
    %974 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
    %975 = cast(%var_10296, dtype="uint32") /* ty=Tensor[(1936), uint32] */;
    %976 = cast(%974, dtype="uint32") /* ty=Tensor[(7, 16, 1), uint32] */;
    %977 = %973.4;
    %978 = bitwise_and(%975, %976) /* ty=Tensor[(7, 16, 1936), uint32] */;
    (%977, meta[relay.Constant][55] /* ty=Tensor[(105), uint32] */, %978)
  };
  %979(%var_10315) /* ty=(Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(7, 16, 1936), uint32]) */
}

def @func_10620(%var_10618: Tensor[(360, 1), uint32], %var_10619: Tensor[(7, 15), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(5, 20), float32], float32, Tensor[(48), float32], Tensor[(360, 1), uint32], Tensor[(7, 15), uint32], Tensor[(16, 11, 11), bool], Tensor[(1936), float32]) {
  %998 = fn (%var_10603: Tensor[(360, 1), uint32], %var_10604: Tensor[(7, 15), uint32]) -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(5, 20), float32], float32, Tensor[(48), float32], Tensor[(360, 1), uint32], Tensor[(7, 15), uint32], Tensor[(16, 11, 11), bool], Tensor[(1936), float32]) {
    %980 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %981 = cast(meta[relay.Constant][56] /* ty=Tensor[(5, 20), float32] */, dtype="float32") /* ty=Tensor[(5, 20), float32] */;
    %982 = cast(-5.12075f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %983 = reshape(%981, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), float32] */;
    %984 = reshape(%982, newshape=[]) /* ty=float32 */;
    %985 = @func_6291(%983, %984) /* ty=(Tensor[(10, 2, 5), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
    %986 = cast(%var_10603, dtype="uint32") /* ty=Tensor[(360, 1), uint32] */;
    %987 = cast(%var_10604, dtype="uint32") /* ty=Tensor[(7, 15), uint32] */;
    %988 = reshape(%986, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %989 = reshape(%987, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %990 = @func_4251(%988, %989) /* ty=(Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) */;
    %991 = cast(meta[relay.Constant][57] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %992 = reshape(%991, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
    %993 = @func_6086(%992) /* ty=(float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) */;
    %994 = %980.0;
    %995 = %985.1;
    %996 = %990.1;
    %997 = %993.3;
    (%994, %995, meta[relay.Constant][56] /* ty=Tensor[(5, 20), float32] */, -5.12075f /* ty=float32 */, %996, %var_10603, %var_10604, %997, meta[relay.Constant][57] /* ty=Tensor[(1936), float32] */)
  };
  %998(%var_10618, %var_10619) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], Tensor[(5, 20), float32], float32, Tensor[(48), float32], Tensor[(360, 1), uint32], Tensor[(7, 15), uint32], Tensor[(16, 11, 11), bool], Tensor[(1936), float32]) */
}

def @func_13132(%var_13128: Tensor[(1936), float32]) -> (Tensor[(1, 5, 5), float32], float32, Tensor[(1936), float32]) {
  %999 = cast(meta[relay.Constant][58] /* ty=Tensor[(1, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 5), float64] */;
  %1000 = acos(%999) /* ty=Tensor[(1, 5, 5), float64] */;
  %1001 = cast(%1000, dtype="float64") /* ty=Tensor[(1, 5, 5), float64] */;
  %1002 = asinh(%1001) /* ty=Tensor[(1, 5, 5), float64] */;
  %1003 = cast(%1002, dtype="float32") /* ty=Tensor[(1, 5, 5), float32] */;
  %1004 = cast(%var_13128, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %1005 = reshape(%1004, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %1006 = @func_6086(%1005) /* ty=(float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) */;
  %1007 = exp(%1003) /* ty=Tensor[(1, 5, 5), float32] */;
  %1008 = %1006.0;
  (%1007, %1008, %var_13128)
}

def @func_6086(%var_6074: Tensor[(16, 11, 11), float32]) -> (float32, Tensor[(1936), float32], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), bool]) {
  %1009 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %1010 = cast(meta[relay.Constant][59] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %1011 = reshape(%1010, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
  %1012 = @func_652(%1011) /* ty=(Tensor[(16, 11, 11), float32],) */;
  %1013 = %1012.0;
  %1014 = cast(%var_6074, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %1015 = shape_of(%1013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1016 = cast(%1013, dtype="bool") /* ty=Tensor[(16, 11, 11), bool] */;
  %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1018 = %1009.2;
  %1019 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
  %1020 = greater(%1016, %1017) /* ty=Tensor[(16, 11, 11), bool] */;
  (%1018, meta[relay.Constant][59] /* ty=Tensor[(1936), float32] */, %1019, %1020)
}

def @func_9788() -> Tensor[(7, 16, 1), float32] {
  %1021 = @func_6209() /* ty=(Tensor[(7, 16, 1), float32], bool, Tensor[(36), bool], Tensor[(7, 16, 1), float32]) */;
  %1021.0
}

def @func_13060() -> Tensor[(7, 16, 1), float32] {
  @func_6215() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_4323(%var_4302: Tensor[(36), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) {
  %1022 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1023 = cast(%var_4302, dtype="bool") /* ty=Tensor[(36), bool] */;
  %1024 = reshape(%1022, newshape=[]) /* ty=bool */;
  %1025 = reshape(%1023, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %1026 = @func_3398(%1024, %1025) /* ty=(Tensor[(6, 2, 3), bool],) */;
  %1027 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
  %1028 = %1026.0;
  (%1027, %1028, False /* ty=bool */, %var_4302)
}

def @func_8177() -> (Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) {
  @func_8175() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32], Tensor[(360), uint32], Tensor[(7, 16, 1), float32]) */
}

def @func_12010() -> Tensor[(7, 16, 1), float32] {
  %1029 = @func_10975() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
  %1029.1
}

def @func_2932(%var_2930: float32, %var_2931: Tensor[(1, 1, 6), float32]) -> (Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) {
  @func_2928(%var_2930, %var_2931) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */
}

def @func_9897(%var_9895: Tensor[(6), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) {
  %1030 = cast(2.84289f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1031 = cast(%var_9895, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1032 = reshape(%1030, newshape=[]) /* ty=float32 */;
  %1033 = reshape(%1031, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %1034 = @func_2928(%1032, %1033) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %1035 = @func_5105() /* ty=Tensor[(7, 16, 1), float32] */;
  %1036 = %1034.2;
  (%1035, %1036, 2.84289f /* ty=float32 */, %var_9895)
}

def @func_4254(%var_4252: Tensor[(360), uint32], %var_4253: Tensor[(105), uint32]) -> (Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) {
  %1050 = fn (%var_4235: Tensor[(360), uint32], %var_4236: Tensor[(105), uint32]) -> (Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) {
    %1037 = cast(meta[relay.Constant][60] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %1038 = cast(%var_4235, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %1039 = cast(%var_4236, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %1040 = reshape(%1037, newshape=[16, 3, 1]) /* ty=Tensor[(16, 3, 1), float32] */;
    %1041 = reshape(%1038, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %1042 = reshape(%1039, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %1043 = @func_2237(%1040, %1041, %1042) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */;
    %1044 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1045 = %1044.0;
    %1046 = cast(%var_4235, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %1047 = cast(%1045, dtype="uint32") /* ty=Tensor[(7, 16, 1), uint32] */;
    %1048 = %1043.2;
    %1049 = minimum(%1046, %1047) /* ty=Tensor[(7, 16, 360), uint32] */;
    (%1048, meta[relay.Constant][60] /* ty=Tensor[(48), float32] */, %var_4236, %1049)
  };
  %1050(%var_4252, %var_4253) /* ty=(Tensor[(360), uint32], Tensor[(48), float32], Tensor[(105), uint32], Tensor[(7, 16, 360), uint32]) */
}

def @func_9155(%var_9153: Tensor[(6), float32], %var_9154: float32) -> (Tensor[(36), bool], Tensor[(6), float32], Tensor[(13, 3), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32], float32, Tensor[(7, 16, 1), float32]) {
  %1067 = fn (%var_9103: Tensor[(6), float32], %var_9147: float32) -> (Tensor[(36), bool], Tensor[(6), float32], Tensor[(13, 3), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32], float32, Tensor[(7, 16, 1), float32]) {
    %1051 = @func_8716() /* ty=(Tensor[(36), bool], Tensor[(6), float32]) */;
    %1052 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 3), float32] */;
    %1053 = cast(%var_9103, dtype="float32") /* ty=Tensor[(6), float32] */;
    %1054 = reshape(%1052, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
    %1055 = reshape(%1053, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %1056 = @func_6457(%1054, %1055) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
    %1057 = cast(%var_9147, dtype="float32") /* ty=float32 */;
    %1058 = %1056.1;
    %1059 = cast(%1058, dtype="float32") /* ty=Tensor[(6), float32] */;
    %1060 = reshape(%1057, newshape=[]) /* ty=float32 */;
    %1061 = reshape(%1059, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %1062 = @func_4873(%1060, %1061) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float64]) */;
    %1063 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1064 = %1051.0;
    %1065 = %1062.1;
    %1066 = %1063.0;
    (%1064, %1058, meta[relay.Constant][61] /* ty=Tensor[(13, 3), float32] */, %var_9103, %1065, %var_9147, %1066)
  };
  %1067(%var_9153, %var_9154) /* ty=(Tensor[(36), bool], Tensor[(6), float32], Tensor[(13, 3), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32], float32, Tensor[(7, 16, 1), float32]) */
}

def @func_12953(%var_12951: Tensor[(2, 180), uint32]) -> (Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 180), uint32]) {
  %1068 = @func_6019() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
  %1069 = cast(%var_12951, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %1070 = reshape(%1069, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
  %1071 = @func_1013(%1070) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
  %1072 = %1068.3;
  %1073 = %1071.0;
  (%1072, %1073, %var_12951)
}

def @func_2591(%var_2590: Tensor[(7, 15, 15), float64]) -> (Tensor[(7, 15, 15), float32],) {
  %1081 = fn (%var_2582: Tensor[(7, 15, 15), float64]) -> (Tensor[(7, 15, 15), float32],) {
    %1074 = cast(meta[relay.Constant][62] /* ty=Tensor[(7, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 15, 15), float64] */;
    %1075 = log2(%1074) /* ty=Tensor[(7, 15, 15), float64] */;
    %1076 = cast(%var_2582, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
    %1077 = shape_of(%1075, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1078 = cast(%1075, dtype="float32") /* ty=Tensor[(7, 15, 15), float32] */;
    %1079 = dyn.reshape(%1076, %1077, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1080 = floor_mod(%1078, %1079) /* ty=Tensor[(7, 15, 15), float32] */;
    (%1080,)
  };
  %1081(%var_2590) /* ty=(Tensor[(7, 15, 15), float32],) */
}

def @func_5413() -> (Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %1103 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
    %1082 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1083 = cast(meta[relay.Constant][64] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %1084 = reshape(%1083, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %1085 = @func_4695(%1084) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(1575), float64], float32, Tensor[(6), float32]) */;
    %1086 = @func_3958() /* ty=Tensor[(7, 16, 1), float32] */;
    %1087 = cast(meta[relay.Constant][63] /* ty=Tensor[(18, 2), bool] */, dtype="bool") /* ty=Tensor[(18, 2), bool] */;
    %1088 = reshape(%1087, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %1089 = @func_4323(%1088) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) */;
    %1090 = %1089.2;
    %1091 = cast(%1086, dtype="int16") /* ty=Tensor[(7, 16, 1), int16] */;
    %1092 = cast(%1090, dtype="int16") /* ty=int16 */;
    %1093 = logical_xor(%1091, %1092) /* ty=Tensor[(7, 16, 1), int16] */;
    %1094 = cast(%1093, dtype="float64") /* ty=Tensor[(7, 16, 1), float64] */;
    %1095 = atanh(%1094) /* ty=Tensor[(7, 16, 1), float64] */;
    %1096 = cast(%1095, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
    %1097 = log(%1096) /* ty=Tensor[(7, 16, 1), float32] */;
    %1098 = cast(%1097, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
    %1099 = %1082.0;
    %1100 = %1085.2;
    %1101 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
    %1102 = tan(%1098) /* ty=Tensor[(7, 16, 1), float32] */;
    (%1099, meta[relay.Constant][63] /* ty=Tensor[(18, 2), bool] */, %1100, meta[relay.Constant][64] /* ty=Tensor[(6), float32] */, %1101, %1102)
  };
  %1103() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_12233() -> (Tensor[(7, 16, 1), float64], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) {
  %1104 = @func_6771() /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(7, 16, 1), float32]) */;
  %1105 = cast(meta[relay.Constant][65] /* ty=Tensor[(39), float32] */, dtype="float32") /* ty=Tensor[(39), float32] */;
  %1106 = cast(meta[relay.Constant][66] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1107 = reshape(%1105, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %1108 = reshape(%1106, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %1109 = @func_6457(%1107, %1108) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %1110 = @func_8766() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1111 = %1104.0;
  %1112 = %1109.0;
  %1113 = %1110.0;
  (%1111, %1112, meta[relay.Constant][65] /* ty=Tensor[(39), float32] */, meta[relay.Constant][66] /* ty=Tensor[(6), float32] */, %1113)
}

def @func_13580(%var_13579: Tensor[(9, 360), uint32]) -> (Tensor[(9, 360), float64], Tensor[(6), float32], Tensor[(3, 2), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(9, 360), float32], Tensor[(7, 16, 1), float32]) {
  %1137 = fn (%var_13524: Tensor[(9, 360), uint32]) -> (Tensor[(9, 360), float64], Tensor[(6), float32], Tensor[(3, 2), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(9, 360), float32], Tensor[(7, 16, 1), float32]) {
    %1114 = @func_8076() /* ty=Tensor[(1, 360), uint32] */;
    %1115 = cast(%1114, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
    %1116 = cast(%var_13524, dtype="bool") /* ty=Tensor[(9, 360), bool] */;
    %1117 = greater(%1115, %1116) /* ty=Tensor[(9, 360), bool] */;
    %1118 = cast(%var_13524, dtype="float64") /* ty=Tensor[(9, 360), float64] */;
    %1119 = shape_of(%1117, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1120 = cast(%1117, dtype="float64") /* ty=Tensor[(9, 360), float64] */;
    %1121 = dyn.reshape(%1118, %1119, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1122 = cast(meta[relay.Constant][67] /* ty=Tensor[(3, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 2), float32] */;
    %1123 = reshape(%1122, newshape=[3, 2]) /* ty=Tensor[(3, 2), float32] */;
    %1124 = @func_6410(%1123) /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) */;
    %1125 = cast(%1114, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
    %1126 = reshape(%1125, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint32] */;
    %1127 = @func_12130(%1126) /* ty=(Tensor[(360), uint32], Tensor[(12, 30), uint32], Tensor[(105), uint32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32]) */;
    %1128 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %1129 = cast(%1117, dtype="float32") /* ty=Tensor[(9, 360), float32] */;
    %1130 = @func_9925() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1131 = divide(%1120, %1121) /* ty=Tensor[(9, 360), float64] */;
    %1132 = %1124.1;
    %1133 = %1127.3;
    %1134 = %1128.1;
    %1135 = atan(%1129) /* ty=Tensor[(9, 360), float32] */;
    %1136 = %1130.0;
    (%1131, %1132, meta[relay.Constant][67] /* ty=Tensor[(3, 2), float32] */, %1133, %1134, %1135, %1136)
  };
  %1137(%var_13579) /* ty=(Tensor[(9, 360), float64], Tensor[(6), float32], Tensor[(3, 2), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(9, 360), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_13075() -> Tensor[(16, 11, 11), int8] {
  @func_13073() /* ty=Tensor[(16, 11, 11), int8] */
}

def @func_13839() -> Tensor[(16, 11, 11), int8] {
  @func_13837() /* ty=Tensor[(16, 11, 11), int8] */
}

def @func_13976() -> (float32, Tensor[(16, 11, 11), int8]) {
  @func_13974() /* ty=(float32, Tensor[(16, 11, 11), int8]) */
}

def @func_7328() -> (Tensor[(1, 360), uint32],) {
  @func_7326() /* ty=(Tensor[(1, 360), uint32],) */
}

def @func_9078(%var_9076: Tensor[(2, 180), uint32], %var_9077: Tensor[(4, 484), float32]) -> (float32, Tensor[(7, 16, 105), bool], Tensor[(2, 180), uint32], Tensor[(105), uint32], Tensor[(4, 484), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
  %1170 = fn (%var_9037: Tensor[(2, 180), uint32], %var_9042: Tensor[(4, 484), float32]) -> (float32, Tensor[(7, 16, 105), bool], Tensor[(2, 180), uint32], Tensor[(105), uint32], Tensor[(4, 484), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) {
    %1138 = @func_8418() /* ty=(float32,) */;
    %1139 = cast(%var_9037, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
    %1140 = cast(meta[relay.Constant][68] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %1141 = reshape(%1139, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %1142 = reshape(%1140, newshape=[105]) /* ty=Tensor[(105), uint32] */;
    %1143 = @func_7402(%1141, %1142) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(48, 1), float32], Tensor[(360), uint32], bool, Tensor[(7, 16, 105), bool]) */;
    %1144 = @func_8556() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %1145 = %1144.0;
    %1146 = cast(%1145, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
    %1147 = reshape(%1146, newshape=[4, 484]) /* ty=Tensor[(4, 484), float32] */;
    %1148 = @func_3897(%1147) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) */;
    %1149 = %1148.1;
    %1150 = cast(%var_9042, dtype="float32") /* ty=Tensor[(4, 484), float32] */;
    %1151 = shape_of(%1149, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1152 = cast(%1149, dtype="float32") /* ty=Tensor[(4, 484), float32] */;
    %1153 = dyn.reshape(%1150, %1151, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1154 = cast(%var_9037, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
    %1155 = cast(%var_9037, dtype="bool") /* ty=Tensor[(2, 180), bool] */;
    %1156 = reshape(%1154, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %1157 = reshape(%1155, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), bool] */;
    %1158 = @func_8049(%1156, %1157) /* ty=(Tensor[(360), uint32], Tensor[(7, 16, 105), int32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), uint64]) */;
    %1159 = cast(%1145, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
    %1160 = cosh(%1159) /* ty=Tensor[(16, 11, 11), float64] */;
    %1161 = cast(%1160, dtype="float64") /* ty=Tensor[(16, 11, 11), float64] */;
    %1162 = @func_8860() /* ty=(Tensor[(7, 16, 1), float32], bool) */;
    %1163 = %1138.0;
    %1164 = %1143.4;
    %1165 = floor_mod(%1152, %1153) /* ty=Tensor[(4, 484), float32] */;
    %1166 = %1158.3;
    %1167 = asinh(%1161) /* ty=Tensor[(16, 11, 11), float64] */;
    %1168 = %1162.0;
    %1169 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
    (%1163, %1164, %var_9037, meta[relay.Constant][68] /* ty=Tensor[(105), uint32] */, %1165, %1166, %1167, %1168, %1169)
  };
  %1170(%var_9076, %var_9077) /* ty=(float32, Tensor[(7, 16, 105), bool], Tensor[(2, 180), uint32], Tensor[(105), uint32], Tensor[(4, 484), float32], Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), float64], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */
}

def @func_9881(%var_9879: Tensor[(1, 360), bool]) -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(3, 10, 12), bool], Tensor[(1, 360), bool], Tensor[(1, 6), float32]) {
  @func_9878(%var_9879) /* ty=(Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(3, 10, 12), bool], Tensor[(1, 360), bool], Tensor[(1, 6), float32]) */
}

def @func_14021(%var_14002: Tensor[(39), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(39), float32], Tensor[(6), float32], Tensor[(12, 15, 2), bool], Tensor[(8, 242), float32], Tensor[(105), uint32], Tensor[(7, 16, 1), float32]) {
  %1171 = @func_12758() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1172 = cast(%var_14002, dtype="float32") /* ty=Tensor[(39), float32] */;
  %1173 = cast(meta[relay.Constant][69] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1174 = reshape(%1172, newshape=[13, 3, 1]) /* ty=Tensor[(13, 3, 1), float32] */;
  %1175 = reshape(%1173, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %1176 = @func_6457(%1174, %1175) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %1177 = cast(meta[relay.Constant][70] /* ty=Tensor[(8, 242), float32] */, dtype="float32") /* ty=Tensor[(8, 242), float32] */;
  %1178 = cast(meta[relay.Constant][71] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %1179 = reshape(%1177, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
  %1180 = reshape(%1178, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %1181 = @func_5251(%1179, %1180) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(1936), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32], Tensor[(360), uint32]) */;
  %1182 = %1171.0;
  %1183 = %1176.0;
  %1184 = %1181.3;
  %1185 = @func_4052() /* ty=Tensor[(7, 16, 1), float32] */;
  (%1182, %1183, %var_14002, meta[relay.Constant][69] /* ty=Tensor[(6), float32] */, %1184, meta[relay.Constant][70] /* ty=Tensor[(8, 242), float32] */, meta[relay.Constant][71] /* ty=Tensor[(105), uint32] */, %1185)
}

def @func_7961(%var_7960: Tensor[(7, 16, 10), float32]) -> Tensor[(7, 16, 10), float32] {
  %1189 = fn (%var_7939: Tensor[(7, 16, 10), float32]) -> Tensor[(7, 16, 10), float32] {
    %1186 = @func_4850() /* ty=Tensor[(7, 16, 1), float32] */;
    %1187 = cast(%1186, dtype="float32") /* ty=Tensor[(7, 16, 1), float32] */;
    %1188 = cast(%var_7939, dtype="float32") /* ty=Tensor[(7, 16, 10), float32] */;
    power(%1187, %1188) /* ty=Tensor[(7, 16, 10), float32] */
  };
  %1189(%var_7960) /* ty=Tensor[(7, 16, 10), float32] */
}

def @func_5041() -> Tensor[(16, 11, 11), int8] {
  @func_5039() /* ty=Tensor[(16, 11, 11), int8] */
}

def @func_8420() -> (float32,) {
  @func_8418() /* ty=(float32,) */
}

def @func_4369() -> (Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) {
  %1190 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1191 = %1190.0;
  %1192 = cast(%1191, dtype="int16") /* ty=Tensor[(7, 16, 1), int16] */;
  %1193 = cast(meta[relay.Constant][72] /* ty=Tensor[(7, 16, 10), float32] */, dtype="int16") /* ty=Tensor[(7, 16, 10), int16] */;
  %1194 = cast(5.866f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1195 = cast(meta[relay.Constant][73] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1196 = reshape(%1194, newshape=[]) /* ty=float32 */;
  %1197 = reshape(%1195, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %1198 = @func_3986(%1196, %1197) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
  %1199 = add(%1192, %1193) /* ty=Tensor[(7, 16, 10), int16] */;
  %1200 = %1198.2;
  (%1199, %1200, 5.866f /* ty=float32 */, meta[relay.Constant][73] /* ty=Tensor[(6), float32] */)
}

def @func_12614() -> (Tensor[(16, 11, 11), int8], Tensor[(14, 15, 8), float64], Tensor[(2, 840), float32], Tensor[(105), uint32], Tensor[(7, 16, 528), bool], Tensor[(48, 11), float32]) {
  %1201 = @func_11147() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1202 = cast(meta[relay.Constant][74] /* ty=Tensor[(2, 840), float32] */, dtype="float32") /* ty=Tensor[(2, 840), float32] */;
  %1203 = reshape(%1202, newshape=[14, 15, 8]) /* ty=Tensor[(14, 15, 8), float32] */;
  %1204 = @func_1734(%1203) /* ty=(Tensor[(14, 15, 8), float64],) */;
  %1205 = @func_9263() /* ty=(Tensor[(7, 16, 1), float32], float32) */;
  %1206 = %1205.0;
  %1207 = cast(%1206, dtype="bool") /* ty=Tensor[(7, 16, 1), bool] */;
  %1208 = cast(meta[relay.Constant][76] /* ty=Tensor[(528), float32] */, dtype="bool") /* ty=Tensor[(528), bool] */;
  %1209 = cast(meta[relay.Constant][75] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %1210 = cast(meta[relay.Constant][76] /* ty=Tensor[(528), float32] */, dtype="float32") /* ty=Tensor[(528), float32] */;
  %1211 = reshape(%1209, newshape=[105]) /* ty=Tensor[(105), uint32] */;
  %1212 = reshape(%1210, newshape=[48, 11]) /* ty=Tensor[(48, 11), float32] */;
  %1213 = @func_12376(%1211, %1212) /* ty=(Tensor[(7, 16, 105), bool], Tensor[(7, 16, 1), float32], Tensor[(48, 11), bool]) */;
  %1214 = %1213.2;
  %1215 = cast(%1214, dtype="float32") /* ty=Tensor[(48, 11), float32] */;
  %1216 = %1201.0;
  %1217 = %1204.0;
  %1218 = greater_equal(%1207, %1208) /* ty=Tensor[(7, 16, 528), bool] */;
  %1219 = log10(%1215) /* ty=Tensor[(48, 11), float32] */;
  (%1216, %1217, meta[relay.Constant][74] /* ty=Tensor[(2, 840), float32] */, meta[relay.Constant][75] /* ty=Tensor[(105), uint32] */, %1218, %1219)
}

def @func_4024(%var_4003: Tensor[(36), bool]) -> (Tensor[(7, 16, 1), float32], Tensor[(6, 2, 3), bool], bool, Tensor[(36), bool]) {
  %1220 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
  %1221 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1222 = cast(%var_4003, dtype="bool") /* ty=Tensor[(36), bool] */;
  %1223 = reshape(%1221, newshape=[]) /* ty=bool */;
  %1224 = reshape(%1222, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
  %1225 = @func_3398(%1223, %1224) /* ty=(Tensor[(6, 2, 3), bool],) */;
  %1226 = %1220.0;
  %1227 = %1225.0;
  (%1226, %1227, False /* ty=bool */, %var_4003)
}

def @func_7231() -> (Tensor[(16, 11, 11), int8],) {
  %1230 = fn () -> (Tensor[(16, 11, 11), int8],) {
    %1228 = @func_7104() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %1229 = %1228.0;
    (%1229,)
  };
  %1230() /* ty=(Tensor[(16, 11, 11), int8],) */
}

def @func_6413(%var_6411: Tensor[(3, 2), float32]) -> (Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) {
  @func_6410(%var_6411) /* ty=(Tensor[(7, 16, 1), float64], Tensor[(6), float32], Tensor[(3, 2), float32]) */
}

def @func_5633() -> float32 {
  %1231 = @func_4369() /* ty=(Tensor[(7, 16, 10), int16], float32, float32, Tensor[(6), float32]) */;
  %1231.2
}

def @func_13707(%var_13705: Tensor[(1936), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, ?), bool], Tensor[(7, 16, 1), float32]) {
  @func_13704(%var_13705) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(1936), float32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, ?), bool], Tensor[(7, 16, 1), float32]) */
}

def @func_11970() -> Tensor[(7, 16, 1), float32] {
  @func_11968() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_3900(%var_3898: Tensor[(4, 484), float32]) -> (Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) {
  @func_3897(%var_3898) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(4, 484), float32], Tensor[(16, 11, 11), float64], Tensor[(16, 11, 11), float32], Tensor[(180, 2), uint32]) */
}

def @func_8390(%var_8385: Tensor[(1120, 1), float32]) -> (Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 10), float32], Tensor[(1120, 1), float32]) {
  %1232 = @func_7671() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8]) */;
  %1233 = @func_8124() /* ty=(Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(70, 4), float64], Tensor[(7, 16, 1), float32]) */;
  %1234 = cast(%var_8385, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
  %1235 = reshape(%1234, newshape=[7, 16, 10]) /* ty=Tensor[(7, 16, 10), float32] */;
  %1236 = %1232.1;
  %1237 = %1233.3;
  %1238 = @func_7959(%1235) /* ty=Tensor[(7, 16, 10), float32] */;
  (%1236, %1237, %1238, %var_8385)
}

def @func_2241(%var_2238: Tensor[(16, 3, 1), float32], %var_2239: Tensor[(360), uint32], %var_2240: Tensor[(105), uint32]) -> (Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) {
  %1257 = fn (%var_2163: Tensor[(16, 3, 1), float32], %var_2176: Tensor[(360), uint32], %var_2224: Tensor[(105), uint32]) -> (Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) {
    %1239 = cast(%var_2163, dtype="float32") /* ty=Tensor[(16, 3, 1), float32] */;
    %1240 = cast(%var_2176, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %1241 = reshape(%1240, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), uint32] */;
    %1242 = @func_1013(%1241) /* ty=(Tensor[(12, 15, 2), bool], Tensor[(16, 11, 11), int8], Tensor[(16, 11, 11), float32]) */;
    %1243 = %1242.1;
    %1244 = cast(%1243, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
    %1245 = reshape(%1244, newshape=[16, 11, 11]) /* ty=Tensor[(16, 11, 11), float32] */;
    %1246 = @func_652(%1245) /* ty=(Tensor[(16, 11, 11), float32],) */;
    %1247 = cast(%var_2224, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %1248 = cast(%var_2224, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %1249 = cast(%var_2176, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %1250 = reshape(%1247, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
    %1251 = reshape(%1248, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), uint32] */;
    %1252 = reshape(%1249, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %1253 = @func_1673(%1250, %1251, %1252) /* ty=(Tensor[(3, 7, 5), uint32], Tensor[(12, 15, 2), bool], Tensor[(360), uint32]) */;
    %1254 = log2(%1239) /* ty=Tensor[(16, 3, 1), float32] */;
    %1255 = %1246.0;
    %1256 = %1253.1;
    (%1254, %1243, %var_2176, %1255, %1256, %var_2224)
  };
  %1257(%var_2238, %var_2239, %var_2240) /* ty=(Tensor[(16, 3, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32], Tensor[(16, 11, 11), float32], Tensor[(12, 15, 2), bool], Tensor[(105), uint32]) */
}

def @func_3155(%var_3122: Tensor[(3, 10, 12), bool], %var_3130: Tensor[(6), float32]) -> (Tensor[(3, 10, 12), bool], Tensor[(1575), float64], float32, Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(280), float64]) {
  %1258 = cast(meta[relay.Constant][77] /* ty=Tensor[(3, 10, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
  %1259 = shape_of(%var_3122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1260 = cast(%var_3122, dtype="bool") /* ty=Tensor[(3, 10, 12), bool] */;
  %1261 = dyn.reshape(%1258, %1259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1262 = cast(2.45404f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1263 = cast(%var_3130, dtype="float32") /* ty=Tensor[(6), float32] */;
  %1264 = reshape(%1262, newshape=[]) /* ty=float32 */;
  %1265 = reshape(%1263, newshape=[1, 1, 6]) /* ty=Tensor[(1, 1, 6), float32] */;
  %1266 = @func_2928(%1264, %1265) /* ty=(Tensor[(1, 1, 6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64]) */;
  %1267 = cast(meta[relay.Constant][78] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %1268 = cast(meta[relay.Constant][78] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %1269 = cast(%var_3122, dtype="uint32") /* ty=Tensor[(3, 10, 12), uint32] */;
  %1270 = reshape(%1267, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %1271 = reshape(%1268, newshape=[4, 10, 7]) /* ty=Tensor[(4, 10, 7), float64] */;
  %1272 = reshape(%1269, newshape=[360]) /* ty=Tensor[(360), uint32] */;
  %1273 = @func_2747(%1270, %1271, %1272) /* ty=(Tensor[(4, 10, 7), uint64], Tensor[(4, 10, 7), float32], Tensor[(16, 11, 11), int8], Tensor[(48), float32], Tensor[(360), uint32], Tensor[(105), uint32]) */;
  %1274 = logical_or(%1260, %1261) /* ty=Tensor[(3, 10, 12), bool] */;
  %1275 = %1266.2;
  %1276 = %1273.2;
  (%1274, %1275, 2.45404f /* ty=float32 */, %var_3130, %1276, meta[relay.Constant][78] /* ty=Tensor[(280), float64] */)
}

def @func_6020() -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
  %1285 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) {
    %1277 = @func_4207() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1278 = cast(-6.14315f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1279 = cast(meta[relay.Constant][79] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %1280 = reshape(%1278, newshape=[]) /* ty=float32 */;
    %1281 = reshape(%1279, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %1282 = @func_3986(%1280, %1281) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */;
    %1283 = %1277.0;
    %1284 = %1282.1;
    (%1283, %1284, -6.14315f /* ty=float32 */, meta[relay.Constant][79] /* ty=Tensor[(6), float32] */)
  };
  %1285() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 15, 15), float32], float32, Tensor[(6), float32]) */
}

def @func_9994() -> (Tensor[(?, 360), bool], Tensor[(16, 11, 11), int8]) {
  %1296 = fn () -> (Tensor[(?, 360), bool], Tensor[(16, 11, 11), int8]) {
    %1286 = @func_8205() /* ty=(Tensor[(1, 360), float32],) */;
    %1287 = %1286.0;
    %1288 = cast(%1287, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
    %1289 = asinh(%1288) /* ty=Tensor[(1, 360), float64] */;
    %1290 = cast(%1287, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
    %1291 = shape_of(%1289, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1292 = cast(%1289, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
    %1293 = dyn.reshape(%1290, %1291, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1294 = greater(%1292, %1293) /* ty=Tensor[(?, 360), bool] */;
    %1295 = @func_5039() /* ty=Tensor[(16, 11, 11), int8] */;
    (%1294, %1295)
  };
  %1296() /* ty=(Tensor[(?, 360), bool], Tensor[(16, 11, 11), int8]) */
}

def @func_4453(%var_4451: Tensor[(280), float64]) -> (Tensor[(7, 16, 10), int16], Tensor[(4, 10, 7), float32], Tensor[(280), float64], Tensor[(360), uint32]) {
  @func_4450(%var_4451) /* ty=(Tensor[(7, 16, 10), int16], Tensor[(4, 10, 7), float32], Tensor[(280), float64], Tensor[(360), uint32]) */
}

def @func_11586(%var_11584: Tensor[(1575), float64]) -> (Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], Tensor[(16, 11, 11), int8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(16, 11, 11), int8]) {
  @func_11583(%var_11584) /* ty=(Tensor[(7, 16, 1), float32], Tensor[(13, 3, 4), float32], Tensor[(6), float32], Tensor[(7, 15, 15), float32], Tensor[(1575), float64], Tensor[(16, 11, 11), int8], Tensor[(6, 2, 3), bool], Tensor[(36), bool], Tensor[(16, 11, 11), int8]) */
}

def @func_6858(%var_6857: Tensor[(360), uint32]) -> (Tensor[(6), float32], Tensor[(360), uint32], Tensor[(360), uint32]) {
  %1303 = fn (%var_6842: Tensor[(360), uint32]) -> (Tensor[(6), float32], Tensor[(360), uint32], Tensor[(360), uint32]) {
    %1297 = @func_5412() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(18, 2), bool], float32, Tensor[(6), float32], Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %1298 = cast(%var_6842, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %1299 = reshape(%1298, newshape=[360]) /* ty=Tensor[(360), uint32] */;
    %1300 = @func_4775(%1299) /* ty=(Tensor[(6), float32], Tensor[(16, 11, 11), int8], Tensor[(360), uint32]) */;
    %1301 = %1297.3;
    %1302 = %1300.2;
    (%1301, %1302, %var_6842)
  };
  %1303(%var_6857) /* ty=(Tensor[(6), float32], Tensor[(360), uint32], Tensor[(360), uint32]) */
}

def @func_7317(%var_7315: bool, %var_7316: Tensor[(1, 36), bool]) -> (Tensor[(1, 360), float32], bool, Tensor[(?, 36), uint8]) {
  %1321 = fn (%var_7295: bool, %var_7296: Tensor[(1, 36), bool]) -> (Tensor[(1, 360), float32], bool, Tensor[(?, 36), uint8]) {
    %1304 = @func_4898() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(12, 15, 2), bool], Tensor[(1, 360), uint32], Tensor[(6), float32]) */;
    %1305 = %1304.2;
    %1306 = cast(%1305, dtype="float32") /* ty=Tensor[(1, 360), float32] */;
    %1307 = cast(%var_7296, dtype="float64") /* ty=Tensor[(1, 36), float64] */;
    %1308 = asinh(%1307) /* ty=Tensor[(1, 36), float64] */;
    %1309 = cast(%var_7295, dtype="bool") /* ty=bool */;
    %1310 = cast(%var_7296, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
    %1311 = reshape(%1309, newshape=[]) /* ty=bool */;
    %1312 = reshape(%1310, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), bool] */;
    %1313 = @func_3398(%1311, %1312) /* ty=(Tensor[(6, 2, 3), bool],) */;
    %1314 = %1313.0;
    %1315 = cast(%1314, dtype="uint8") /* ty=Tensor[(6, 2, 3), uint8] */;
    %1316 = shape_of(%1308, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1317 = cast(%1308, dtype="uint8") /* ty=Tensor[(1, 36), uint8] */;
    %1318 = dyn.reshape(%1315, %1316, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %1319 = atanh(%1306) /* ty=Tensor[(1, 360), float32] */;
    %1320 = left_shift(%1317, %1318) /* ty=Tensor[(?, 36), uint8] */;
    (%1319, %var_7295, %1320)
  };
  %1321(%var_7315, %var_7316) /* ty=(Tensor[(1, 360), float32], bool, Tensor[(?, 36), uint8]) */
}

def @func_7771(%var_7769: Tensor[(2, 13, 13), int32]) -> (Tensor[(2, 13, 13), bool],) {
  @func_7768(%var_7769) /* ty=(Tensor[(2, 13, 13), bool],) */
}

def @func_10393() -> Tensor[(7, 16, 1), float32] {
  %1323 = fn () -> Tensor[(7, 16, 1), float32] {
    %1322 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1322.0
  };
  %1323() /* ty=Tensor[(7, 16, 1), float32] */
}

def @func_11170() -> (Tensor[(7, 16, 1), float32],) {
  %1326 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %1324 = @func_7137() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(7, 16, 1), float32]) */;
    %1325 = %1324.0;
    (%1325,)
  };
  %1326() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_9001() -> (Tensor[(1, 360), float32], Tensor[(360), uint32], Tensor[(48), float32], Tensor[(21, 5), uint32], Tensor[(7, 16, 360), uint64], Tensor[(1, 360), float32]) {
  @func_8999() /* ty=(Tensor[(1, 360), float32], Tensor[(360), uint32], Tensor[(48), float32], Tensor[(21, 5), uint32], Tensor[(7, 16, 360), uint64], Tensor[(1, 360), float32]) */
}

def @func_11147() -> (Tensor[(16, 11, 11), int8],) {
  %1327 = @func_9355() /* ty=(Tensor[(16, 11, 11), int8],) */;
  %1328 = %1327.0;
  (%1328,)
}

def @func_14078() -> (Tensor[(7, 16, 1), float32], Tensor[(360), uint32], Tensor[(7, 16, 1936), int8]) {
  %1342 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(360), uint32], Tensor[(7, 16, 1936), int8]) {
    %1329 = @func_6810() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1330 = cast(meta[relay.Constant][80] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %1331 = cast(meta[relay.Constant][81] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %1332 = cast(meta[relay.Constant][80] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
    %1333 = reshape(%1330, newshape=[2, 180]) /* ty=Tensor[(2, 180), uint32] */;
    %1334 = reshape(%1331, newshape=[1936]) /* ty=Tensor[(1936), float32] */;
    %1335 = reshape(%1332, newshape=[2, 180]) /* ty=Tensor[(2, 180), uint32] */;
    %1336 = @func_11135(%1333, %1334, %1335) /* ty=(bool, Tensor[(2, 180), uint32], Tensor[(1936), float32], Tensor[(7, 16, 1), float32], Tensor[(2, 180), uint32]) */;
    %1337 = %1336.3;
    %1338 = cast(meta[relay.Constant][81] /* ty=Tensor[(1936), float32] */, dtype="int8") /* ty=Tensor[(1936), int8] */;
    %1339 = cast(%1337, dtype="int8") /* ty=Tensor[(7, 16, 1), int8] */;
    %1340 = %1329.0;
    %1341 = minimum(%1338, %1339) /* ty=Tensor[(7, 16, 1936), int8] */;
    (%1340, meta[relay.Constant][80] /* ty=Tensor[(360), uint32] */, %1341)
  };
  %1342() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(360), uint32], Tensor[(7, 16, 1936), int8]) */
}

def @func_14319() -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
  %1348 = fn () -> (Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) {
    %1343 = @func_8468() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1344 = @func_9355() /* ty=(Tensor[(16, 11, 11), int8],) */;
    %1345 = %1343.0;
    %1346 = %1344.0;
    %1347 = @func_6215() /* ty=Tensor[(7, 16, 1), float32] */;
    (%1345, %1346, %1347)
  };
  %1348() /* ty=(Tensor[(7, 16, 1), float32], Tensor[(16, 11, 11), int8], Tensor[(7, 16, 1), float32]) */
}

def @func_9718() -> (Tensor[(7, 16, 1), float32],) {
  %1351 = fn () -> (Tensor[(7, 16, 1), float32],) {
    %1349 = @func_3923() /* ty=(Tensor[(7, 16, 1), float32],) */;
    %1350 = %1349.0;
    (%1350,)
  };
  %1351() /* ty=(Tensor[(7, 16, 1), float32],) */
}

def @func_9790() -> Tensor[(7, 16, 1), float32] {
  @func_9788() /* ty=Tensor[(7, 16, 1), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen933/build/output.py", line 3879, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:52:30] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

