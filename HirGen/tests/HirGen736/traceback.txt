==========mod==========
#[version = "0.0.5"]
def @func_13233() -> (Tensor[(10, 5, 16), float64],) {
  %0 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_6816() -> (int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) {
  %2 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %3 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 120), float64] */, dtype="float64") /* ty=Tensor[(1, 120), float64] */;
  %5 = reshape(%4, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %6 = @func_2739(%5) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(?, 14, 11), uint64], Tensor[(1, 14, 11), float32], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(120), float64], Tensor[(1280), int16]) */;
  %7 = %2.1;
  %8 = %3.0;
  %9 = %6.6;
  (%7, %8, %9, meta[relay.Constant][0] /* ty=Tensor[(1, 120), float64] */)
}

def @func_7277(%var_7257: Tensor[(189), float32]) -> (int64, Tensor[(7, 5, 1), float32], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(35), float32], Tensor[(6, 10, 4), bool]) {
  %10 = @func_6816() /* ty=(int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) */;
  %11 = @func_6779() /* ty=Tensor[(35), float32] */;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(35), float32] */;
  %13 = reshape(%12, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %14 = @func_6929(%13) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(7, 5, 1), float32], Tensor[(35), float32]) */;
  %15 = @func_5550() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %16 = cast(%var_7257, dtype="float32") /* ty=Tensor[(189), float32] */;
  %17 = reshape(%16, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), float32] */;
  %18 = cast(%11, dtype="float32") /* ty=Tensor[(35), float32] */;
  %19 = cos(%18) /* ty=Tensor[(35), float32] */;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(35), float32] */;
  %21 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %22 = %10.0;
  %23 = %14.2;
  %24 = %15.0;
  %25 = @func_6353(%17) /* ty=Tensor[(9, 3, 7), float32] */;
  %26 = log(%20) /* ty=Tensor[(35), float32] */;
  %27 = %21.1;
  (%22, %23, %24, %25, %var_7257, %26, %27)
}

def @func_9419(%var_9414: Tensor[(9, 12, 14), int32], %var_9415: Tensor[(9, 12, 14), int32]) -> (Tensor[(9, 12, 14), int32],) {
  %28 = cast(%var_9415, dtype="int32") /* ty=Tensor[(9, 12, 14), int32] */;
  %29 = shape_of(%var_9414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_9414, dtype="int32") /* ty=Tensor[(9, 12, 14), int32] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %32 = multiply(%30, %31) /* ty=Tensor[(9, 12, 14), int32] */;
  (%32,)
}

def @func_1688() -> Tensor[(6, 10, 4), float64] {
  %33 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %33.3
}

def @func_6147() -> (Tensor[(6, 10, 4), bool],) {
  %34 = @func_5351() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %35 = %34.3;
  (%35,)
}

def @func_6081() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(390), float64], int64, Tensor[(7, 5, 1), float32], Tensor[(35), float32]) {
  %36 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %38 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %39 = reshape(%37, newshape=[13, 6, 5]) /* ty=Tensor[(13, 6, 5), float64] */;
  %40 = reshape(%38, newshape=[]) /* ty=int64 */;
  %41 = @func_2170(%39, %40) /* ty=(Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %43 = reshape(%42, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %44 = @func_815(%43) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %45 = %36.0;
  %46 = %41.2;
  %47 = %44.0;
  (%45, %46, meta[relay.Constant][1] /* ty=Tensor[(390), float64] */, 2 /* ty=int64 */, %47, meta[relay.Constant][2] /* ty=Tensor[(35), float32] */)
}

def @func_7029() -> (Tensor[(10, 5, 16), bool],) {
  %48 = @func_2475() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %49 = %48.1;
  (%49,)
}

def @func_9757() -> Tensor[(6, 10, 4), float64] {
  %50 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
  %50.0
}

def @func_9050() -> Tensor[(10, 5, 16), float64] {
  %51 = @func_7583() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) */;
  %51.0
}

def @func_11028() -> (Tensor[(6, 10, 4), bool],) {
  %52 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %53 = %52.0;
  (%53,)
}

def @func_6404() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %54 = @func_5351() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %55 = %54.3;
  %56 = @func_1185() /* ty=Tensor[(6, 10, 4), bool] */;
  (%55, %56)
}

def @func_11660(%var_11625: Tensor[(16, 16, 4), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(16, 16, 4), float32]) {
  %57 = @func_6856() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %58 = @func_10027() /* ty=(Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32]) */;
  %59 = %58.0;
  %60 = cast(%var_11625, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %64 = %57.1;
  %65 = divide(%62, %63) /* ty=Tensor[(16, 16, 4), float32] */;
  (%64, %65)
}

def @func_10584() -> (Tensor[(10, 5, 16), float32],) {
  %66 = @func_8163() /* ty=Tensor[(10, 5, 16), float32] */;
  (%66,)
}

def @func_7954() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %67 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %68 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
  %69 = %67.0;
  (%68, %69)
}

def @func_5843(%var_5796: Tensor[(1, 3, 7), float32], %var_5806: Tensor[(3072), int8]) -> (Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) {
  %70 = cast(%var_5806, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %71 = reshape(%70, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), int8] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %73 = reshape(%72, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), float64] */;
  %74 = @func_5393(%73) /* ty=(Tensor[(11, 3, 3), float64],) */;
  %75 = cast(%var_5796, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %76 = acos(%75) /* ty=Tensor[(1, 3, 7), float32] */;
  %77 = cast(%var_5796, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %78 = sinh(%77) /* ty=Tensor[(1, 3, 7), float32] */;
  %79 = cast(%78, dtype="bool") /* ty=Tensor[(1, 3, 7), bool] */;
  %80 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%76, dtype="bool") /* ty=Tensor[(1, 3, 7), bool] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %83 = @func_4887(%71) /* ty=Tensor[(16, 16, 12), int8] */;
  %84 = %74.0;
  %85 = logical_or(%81, %82) /* ty=Tensor[(?, 3, 7), bool] */;
  (%83, %var_5806, %84, meta[relay.Constant][3] /* ty=Tensor[(99), float64] */, %85)
}

def @func_5910() -> (Tensor[(6, 10, 4), bool],) {
  %86 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  (%86,)
}

def @func_12806() -> (Tensor[(10, 5, 16), uint8], Tensor[(10, 5, 16), int64]) {
  %87 = @func_10344() /* ty=(Tensor[(10, 5, 16), uint8],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %90 = reshape(%89, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float32] */;
  %91 = @func_9295(%90) /* ty=(Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), int64]) */;
  %92 = %91.1;
  (%88, %92)
}

def @func_5061() -> (Tensor[(6, 10, 4), bool],) {
  %93 = @func_3421() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %94 = %93.1;
  (%94,)
}

def @func_9295(%var_9222: Tensor[(10, 5, 16), float32]) -> (Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), int64]) {
  %95 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %96 = %95.0;
  %97 = cast(%var_9222, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%96, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %101 = divide(%99, %100) /* ty=Tensor[(10, 5, 16), float32] */;
  %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %106 = cast(%96, dtype="int64") /* ty=Tensor[(10, 5, 16), int64] */;
  %107 = shape_of(%var_9222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%var_9222, dtype="int64") /* ty=Tensor[(10, 5, 16), int64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %110 = floor_divide(%104, %105) /* ty=Tensor[(10, 5, 16), float32] */;
  %111 = right_shift(%108, %109) /* ty=Tensor[(10, 5, 16), int64] */;
  (%110, %111)
}

def @func_9987(%var_9958: float32) -> (Tensor[(13, 1, 3), float32], Tensor[(10, 5, 16), float64]) {
  %112 = cast(%var_9958, dtype="float32") /* ty=float32 */;
  %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 3), float32] */;
  %114 = @func_6816() /* ty=(int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) */;
  %115 = floor_divide(%112, %113) /* ty=Tensor[(13, 1, 3), float32] */;
  %116 = %114.1;
  (%115, %116)
}

def @func_5268(%var_5262: int64) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(13, 15), int64]) {
  %117 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %118 = cast(%var_5262, dtype="int64") /* ty=int64 */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 15), int64] */, dtype="int64") /* ty=Tensor[(13, 15), int64] */;
  %120 = reshape(%118, newshape=[]) /* ty=int64 */;
  %121 = reshape(%119, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %122 = %117.0;
  %123 = @func_409(%120, %121) /* ty=Tensor[(13, 1, 15), float32] */;
  (%122, %123, %var_5262, meta[relay.Constant][6] /* ty=Tensor[(13, 15), int64] */)
}

def @func_9029() -> (Tensor[(10, 5, 16), bool],) {
  %124 = @func_7029() /* ty=(Tensor[(10, 5, 16), bool],) */;
  %125 = %124.0;
  (%125,)
}

def @func_11523() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %126 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %127 = @func_6009() /* ty=Tensor[(6, 10, 4), bool] */;
  %128 = @func_10671() /* ty=Tensor[(10, 5, 16), float64] */;
  %129 = %126.0;
  (%127, %128, %129)
}

def @func_13067() -> (Tensor[(6, 7, 16), float32], Tensor[(6, 10, 4), bool]) {
  %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 16), float32] */;
  %131 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %132 = log10(%130) /* ty=Tensor[(6, 7, 16), float32] */;
  %133 = %131.0;
  (%132, %133)
}

def @func_5218(%var_5213: Tensor[(120), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(8, 10, 12), float64], Tensor[(5, 16, 16), int16], Tensor[(120), float64], Tensor[(1280), int16]) {
  %134 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %135 = cast(meta[relay.Constant][8] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %136 = reshape(%135, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
  %137 = @func_1910(%136) /* ty=(Tensor[(8, 10, 12), float64],) */;
  %138 = %137.0;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(8, 10, 12), float64] */;
  %140 = cast(%var_5213, dtype="float64") /* ty=Tensor[(120), float64] */;
  %141 = cast(meta[relay.Constant][9] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %142 = reshape(%140, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float64] */;
  %143 = reshape(%141, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %144 = @func_1831(%142, %143) /* ty=(Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) */;
  %145 = %134.0;
  %146 = sin(%139) /* ty=Tensor[(8, 10, 12), float64] */;
  %147 = %144.4;
  (%145, meta[relay.Constant][8] /* ty=Tensor[(960), float64] */, %146, %147, %var_5213, meta[relay.Constant][9] /* ty=Tensor[(1280), int16] */)
}

def @func_1168() -> (Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) {
  %148 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %149 = reshape(%148, newshape=[]) /* ty=int64 */;
  %150 = @func_798(%149) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) */;
  %151 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %152 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %155 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %156 = reshape(%155, newshape=[]) /* ty=int64 */;
  %157 = @func_798(%156) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) */;
  %158 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %159 = %150.0;
  %160 = %151.0;
  %161 = rsqrt(%154) /* ty=Tensor[(6, 10, 4), float64] */;
  %162 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  %163 = %157.2;
  %164 = %158.0;
  (%159, -6 /* ty=int64 */, %160, %161, %162, %163, %164)
}

def @func_4797() -> (Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) {
  %165 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %166 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %167 = %165.2;
  %168 = %166.0;
  (%167, %168)
}

def @func_9646() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %169 = @func_8207() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %170 = %169.0;
  %171 = @func_8411() /* ty=Tensor[(10, 5, 16), float64] */;
  (%170, %171)
}

def @func_798(%var_792: int64) -> (Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) {
  %172 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %173 = cast(meta[relay.Constant][10] /* ty=Tensor[(42, 2), int32] */, dtype="int32") /* ty=Tensor[(42, 2), int32] */;
  %174 = cast(%var_792, dtype="int64") /* ty=int64 */;
  %175 = reshape(%173, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), int32] */;
  %176 = reshape(%174, newshape=[]) /* ty=int64 */;
  %177 = @func_544(%175, %176) /* ty=(Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %178 = %172.0;
  %179 = %177.3;
  (%178, %179, meta[relay.Constant][10] /* ty=Tensor[(42, 2), int32] */, %var_792)
}

def @func_7616() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %180 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %181 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %182 = %180.0;
  %183 = %181.0;
  (%182, %183)
}

def @func_10565() -> Tensor[(6, 10, 4), bool] {
  %184 = @func_9665() /* ty=(Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) */;
  %184.1
}

def @func_10448(%var_10427: Tensor[(11, 4, 5), bool]) -> (Tensor[(11, 4, 5), bool], Tensor[(6, 10, 4), bool]) {
  %185 = cast(%var_10427, dtype="bool") /* ty=Tensor[(11, 4, 5), bool] */;
  %186 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(11, 4, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 4, 5), bool] */, dtype="bool") /* ty=Tensor[(11, 4, 5), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = @func_8390() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %190 = logical_or(%187, %188) /* ty=Tensor[(11, 4, 5), bool] */;
  %191 = %189.0;
  (%190, %191)
}

def @func_5393(%var_5365: Tensor[(11, 3, 3), float64]) -> (Tensor[(11, 3, 3), float64],) {
  %192 = cast(%var_5365, dtype="float64") /* ty=Tensor[(11, 3, 3), float64] */;
  %193 = erf(%192) /* ty=Tensor[(11, 3, 3), float64] */;
  (%193,)
}

def @func_2672() -> Tensor[(10, 5, 16), float64] {
  %194 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %194.0
}

def @func_11423() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(35), float32]) {
  %195 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %196 = @func_8207() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %197 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %198 = cast(meta[relay.Constant][12] /* ty=Tensor[(320, 4), int16] */, dtype="int16") /* ty=Tensor[(320, 4), int16] */;
  %199 = reshape(%198, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %200 = @func_8779(%199) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16]) */;
  %201 = %195.0;
  %202 = %196.0;
  %203 = %197.0;
  %204 = %200.0;
  %205 = @func_10385() /* ty=Tensor[(35), float32] */;
  (%201, %202, %203, %204, meta[relay.Constant][12] /* ty=Tensor[(320, 4), int16] */, %205)
}

def @func_7096(%var_7088: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), uint8], Tensor[(10, 5, 16), float32], Tensor[(1280), int16], Tensor[(1280), int16]) {
  %206 = @func_3761() /* ty=(Tensor[(6, 10, 4), uint8],) */;
  %207 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %208 = %207.0;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %210 = cast(%var_7088, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %211 = reshape(%210, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %212 = @func_4858(%211) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) */;
  %213 = %206.0;
  %214 = log2(%209) /* ty=Tensor[(10, 5, 16), float32] */;
  %215 = %212.1;
  (%213, %214, %215, %var_7088)
}

def @func_2620() -> Tensor[(8, 5, 4), uint64] {
  %216 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %217 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 5, 4), uint64] */, dtype="uint64") /* ty=Tensor[(8, 5, 4), uint64] */;
  add(%216, %217) /* ty=Tensor[(8, 5, 4), uint64] */
}

def @func_2396() -> (Tensor[(10, 5, 16), float64],) {
  %218 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %219 = %218.0;
  (%219,)
}

def @func_8411() -> Tensor[(10, 5, 16), float64] {
  %220 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %220.0
}

def @func_8390() -> (Tensor[(6, 10, 4), bool],) {
  %221 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %222 = %221.0;
  (%222,)
}

def @func_8708() -> (Tensor[(6, 10, 4), bool], int64) {
  %223 = @func_8293() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) */;
  %224 = @func_6816() /* ty=(int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) */;
  %225 = %223.1;
  %226 = %224.0;
  (%225, %226)
}

def @func_5241() -> (Tensor[(6, 10, 4), bool],) {
  %227 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %228 = %227.0;
  (%228,)
}

def @func_9593() -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) {
  %229 = cast(meta[relay.Constant][15] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %230 = reshape(%229, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %231 = @func_7277(%230) /* ty=(int64, Tensor[(7, 5, 1), float32], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(35), float32], Tensor[(6, 10, 4), bool]) */;
  %232 = @func_7323() /* ty=Tensor[(6, 10, 4), bool] */;
  %233 = %231.1;
  %234 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
  (%232, %233, meta[relay.Constant][15] /* ty=Tensor[(189), float32] */, %234)
}

def @func_5895(%var_5879: Tensor[(10, 5, 16), float64]) -> (Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %235 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %236 = %235.0;
  %237 = cast(%var_5879, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
  %242 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %243 = logical_or(%239, %240) /* ty=Tensor[(10, 5, 16), bool] */;
  %244 = %241.2;
  %245 = %242.0;
  (%243, %244, %245)
}

def @func_10822(%var_10779: Tensor[(1, 3, 12), int8], %var_10780: Tensor[(15, 3, 12), int8]) -> (Tensor[(6, 10, 4), bool], Tensor[(15, 3, 12), float32]) {
  %246 = @func_9732() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %247 = cast(%var_10779, dtype="int8") /* ty=Tensor[(1, 3, 12), int8] */;
  %248 = cast(%var_10780, dtype="int8") /* ty=Tensor[(15, 3, 12), int8] */;
  %249 = minimum(%247, %248) /* ty=Tensor[(15, 3, 12), int8] */;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %251 = sin(%250) /* ty=Tensor[(15, 3, 12), float32] */;
  %252 = cast(%var_10780, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %253 = sinh(%252) /* ty=Tensor[(15, 3, 12), float32] */;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %255 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%251, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %258 = %246.0;
  %259 = floor_divide(%256, %257) /* ty=Tensor[(15, 3, 12), float32] */;
  (%258, %259)
}

def @func_8163() -> Tensor[(10, 5, 16), float32] {
  %260 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %260.0
}

def @func_1528() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %261 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %262 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %263 = %261.6;
  %264 = %262.0;
  (%263, %264)
}

def @func_11126() -> Tensor[(6, 10, 4), bool] {
  %265 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %265.0
}

def @func_9395() -> (Tensor[(6, 10, 4), bool],) {
  %266 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %267 = %266.0;
  (%267,)
}

def @func_8042() -> (Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) {
  %268 = @func_6261() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %269 = @func_6977() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
  %270 = %268.0;
  %271 = %269.1;
  (%270, %271)
}

def @func_2752() -> Tensor[(6, 10, 4), bool] {
  %272 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %272.1
}

def @func_3587() -> (Tensor[(6, 10, 4), float64],) {
  %273 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %274 = %273.0;
  (%274,)
}

def @func_1492(%var_1475: Tensor[(195), int64]) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  %275 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %276 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %277 = cast(%var_1475, dtype="int64") /* ty=Tensor[(195), int64] */;
  %278 = reshape(%276, newshape=[]) /* ty=int64 */;
  %279 = reshape(%277, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %280 = %275.0;
  %281 = @func_409(%278, %279) /* ty=Tensor[(13, 1, 15), float32] */;
  (%280, %281, -1 /* ty=int64 */, %var_1475)
}

def @func_10671() -> Tensor[(10, 5, 16), float64] {
  %282 = @func_9940() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %282.0
}

def @func_2553() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) {
  %283 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %284 = @func_2475() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %285 = %283.2;
  %286 = %284.1;
  (%285, %286)
}

def @func_10755() -> (Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %287 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
  %288 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %289 = @func_9395() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %290 = @func_4059() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %291 = %287.0;
  %292 = %288.0;
  %293 = %289.0;
  %294 = %290.0;
  (%291, %292, %293, %294)
}

def @func_3833() -> (Tensor[(6, 10, 4), float64],) {
  %295 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
  %296 = %295.0;
  (%296,)
}

def @func_9612(%var_9607: Tensor[(15, 4, 13), uint16], %var_9608: Tensor[(15, 4, 13), uint16]) -> Tensor[(15, 4, 13), uint16] {
  %297 = cast(%var_9608, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
  %298 = shape_of(%var_9607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%var_9607, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%299, %300) /* ty=Tensor[(15, 4, 13), uint16] */
}

def @func_6714() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %301 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %302 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %303 = %301.0;
  %304 = %302.0;
  (%303, %304)
}

def @func_4346() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) {
  %305 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
  %306 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %307 = %305.1;
  %308 = %306.0;
  (%307, %308)
}

def @func_3761() -> (Tensor[(6, 10, 4), uint8],) {
  %309 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %310 = %309.0;
  %311 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 10, 4), bool] */, dtype="uint8") /* ty=Tensor[(6, 10, 4), uint8] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="uint8") /* ty=Tensor[(6, 10, 4), uint8] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %315 = bitwise_or(%313, %314) /* ty=Tensor[(6, 10, 4), uint8] */;
  (%315,)
}

def @func_9703() -> Tensor[(10, 5, 16), float64] {
  %316 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %316.0
}

def @func_5127(%var_5066: Tensor[(5, 2, 6), float32]) -> (int64, Tensor[(13, 15), int64], Tensor[(13, 1, 15), float32], Tensor[(5, 2, 6), int32], Tensor[(5, 2, 6), float64]) {
  %317 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 15), int64] */, dtype="int64") /* ty=Tensor[(13, 15), int64] */;
  %318 = reshape(%317, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %319 = @func_1492(%318) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %320 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %321 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 2, 6), float32] */;
  %322 = tan(%321) /* ty=Tensor[(1, 2, 6), float32] */;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %324 = cast(%var_5066, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %325 = add(%323, %324) /* ty=Tensor[(5, 2, 6), float64] */;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %327 = cast(%322, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %328 = multiply(%326, %327) /* ty=Tensor[(5, 2, 6), float64] */;
  %329 = cast(%328, dtype="int32") /* ty=Tensor[(5, 2, 6), int32] */;
  %330 = cast(%322, dtype="int32") /* ty=Tensor[(1, 2, 6), int32] */;
  %331 = cast(%var_5066, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %332 = %319.2;
  %333 = %320.2;
  %334 = left_shift(%329, %330) /* ty=Tensor[(5, 2, 6), int32] */;
  %335 = log10(%331) /* ty=Tensor[(5, 2, 6), float64] */;
  (%332, meta[relay.Constant][17] /* ty=Tensor[(13, 15), int64] */, %333, %334, %335)
}

def @func_10520() -> (Tensor[(6, 10, 4), bool],) {
  %336 = @func_9395() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %337 = %336.0;
  (%337,)
}

def @func_103(%var_89: Tensor[(5, 16, 16), int16], %var_90: Tensor[(5, 16, 16), int16]) -> Tensor[(5, 16, 16), int16] {
  %338 = cast(%var_90, dtype="int16") /* ty=Tensor[(5, 16, 16), int16] */;
  %339 = shape_of(%var_89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_89, dtype="int16") /* ty=Tensor[(5, 16, 16), int16] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%340, %341) /* ty=Tensor[(5, 16, 16), int16] */
}

def @func_8293() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) {
  %342 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %343 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %344 = %342.0;
  %345 = %343.0;
  %346 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
  (%344, %345, %346)
}

def @func_5595() -> (Tensor[(6, 10, 4), bool],) {
  %347 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %348 = %347.2;
  (%348,)
}

def @func_12154(%var_12141: int8, %var_12142: Tensor[(8, 16, 9), int8]) -> Tensor[(8, 16, 9), float32] {
  %349 = cast(%var_12141, dtype="int8") /* ty=int8 */;
  %350 = cast(%var_12142, dtype="int8") /* ty=Tensor[(8, 16, 9), int8] */;
  %351 = minimum(%349, %350) /* ty=Tensor[(8, 16, 9), int8] */;
  %352 = cast(%var_12142, dtype="float32") /* ty=Tensor[(8, 16, 9), float32] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="float32") /* ty=Tensor[(8, 16, 9), float32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%354, %355) /* ty=Tensor[(8, 16, 9), float32] */
}

def @func_5992() -> (Tensor[(6, 10, 4), bool],) {
  %356 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
  %357 = %356.2;
  (%357,)
}

def @func_11894() -> Tensor[(6, 10, 4), bool] {
  %358 = @func_11769() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %358.0
}

def @func_4887(%var_4880: Tensor[(16, 16, 12), int8]) -> Tensor[(16, 16, 12), int8] {
  %359 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 12), int8] */, dtype="int8") /* ty=Tensor[(16, 16, 12), int8] */;
  %360 = shape_of(%var_4880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%var_4880, dtype="int8") /* ty=Tensor[(16, 16, 12), int8] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  multiply(%361, %362) /* ty=Tensor[(16, 16, 12), int8] */
}

def @func_815(%var_805: Tensor[(7, 5, 1), float32]) -> (Tensor[(7, 5, 1), float32],) {
  %363 = cast(%var_805, dtype="float32") /* ty=Tensor[(7, 5, 1), float32] */;
  %364 = erf(%363) /* ty=Tensor[(7, 5, 1), float32] */;
  (%364,)
}

def @func_6929(%var_6925: Tensor[(35), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(7, 5, 1), float32], Tensor[(35), float32]) {
  %365 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %366 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %367 = cast(%var_6925, dtype="float32") /* ty=Tensor[(35), float32] */;
  %368 = reshape(%367, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %369 = @func_815(%368) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %370 = %365.0;
  %371 = %366.3;
  %372 = %369.0;
  (%370, %371, %372, %var_6925)
}

def @func_2031(%var_2001: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) {
  %373 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %376 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %377 = cast(%var_2001, dtype="float64") /* ty=Tensor[(960), float64] */;
  %378 = reshape(%377, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
  %379 = @func_1910(%378) /* ty=(Tensor[(8, 10, 12), float64],) */;
  %380 = erf(%375) /* ty=Tensor[(6, 10, 4), float32] */;
  %381 = %376.0;
  %382 = %379.0;
  (%380, %381, %382, %var_2001)
}

def @func_1917() -> (Tensor[(6, 10, 4), bool],) {
  %383 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %384 = %383.0;
  (%384,)
}

def @func_2475() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) {
  %385 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %386 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %388 = sinh(%387) /* ty=Tensor[(10, 5, 16), float32] */;
  %389 = cast(%388, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %390 = cosh(%389) /* ty=Tensor[(10, 5, 16), float32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%390, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = %385.1;
  %396 = logical_and(%393, %394) /* ty=Tensor[(10, 5, 16), bool] */;
  (%395, %396)
}

def @func_11769() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %397 = @func_6569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %398 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %399 = %397.0;
  %400 = %398.0;
  (%399, %400)
}

def @func_11568() -> (Tensor[(6, 10, 4), bool],) {
  %401 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %402 = %401.0;
  (%402,)
}

def @func_3308() -> Tensor[(6, 10, 4), float64] {
  @func_1688() /* ty=Tensor[(6, 10, 4), float64] */
}

def @func_6743() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %403 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %404 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %405 = %403.0;
  %406 = %404.0;
  (%405, %406)
}

def @func_6290() -> Tensor[(6, 10, 4), bool] {
  @func_2425() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_1831(%var_1804: Tensor[(2, 5, 12), float64], %var_1821: Tensor[(1280), int16]) -> (Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) {
  %407 = cast(%var_1804, dtype="float64") /* ty=Tensor[(2, 5, 12), float64] */;
  %408 = cast(meta[relay.Constant][20] /* ty=Tensor[(21, 4), int32] */, dtype="int32") /* ty=Tensor[(21, 4), int32] */;
  %409 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %410 = reshape(%408, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), int32] */;
  %411 = reshape(%409, newshape=[]) /* ty=int64 */;
  %412 = @func_544(%410, %411) /* ty=(Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %413 = cast(%var_1821, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %414 = cast(%var_1821, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %415 = reshape(%413, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %416 = reshape(%414, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %417 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %418 = reshape(%417, newshape=[]) /* ty=int64 */;
  %419 = @func_798(%418) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) */;
  %420 = rsqrt(%407) /* ty=Tensor[(2, 5, 12), float64] */;
  %421 = %412.1;
  %422 = @func_103(%415, %416) /* ty=Tensor[(5, 16, 16), int16] */;
  %423 = %419.0;
  (%420, %421, meta[relay.Constant][20] /* ty=Tensor[(21, 4), int32] */, -4 /* ty=int64 */, %422, %var_1821, %423)
}

def @func_12901(%var_12861: uint64, %var_12862: Tensor[(13, 13, 1), uint64]) -> (Tensor[(13, 13, 1), uint64], Tensor[(6, 10, 4), bool]) {
  %424 = cast(%var_12861, dtype="uint64") /* ty=uint64 */;
  %425 = cast(%var_12862, dtype="uint64") /* ty=Tensor[(13, 13, 1), uint64] */;
  %426 = @func_9732() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %427 = bitwise_xor(%424, %425) /* ty=Tensor[(13, 13, 1), uint64] */;
  %428 = %426.0;
  (%427, %428)
}

def @func_1569() -> (Tensor[(6, 10, 4), bool],) {
  %429 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %430 = %429.0;
  (%430,)
}

def @func_2342(%var_2339: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) {
  %431 = @func_1939() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %432 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %433 = cast(%var_2339, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %434 = cast(%var_2339, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %435 = reshape(%433, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %436 = reshape(%434, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %437 = %431.0;
  %438 = %432.0;
  %439 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  %440 = @func_103(%435, %436) /* ty=Tensor[(5, 16, 16), int16] */;
  (%437, %438, %439, %440, %var_2339)
}

def @func_2739(%var_2735: Tensor[(120), float64]) -> (Tensor[(10, 5, 16), bool], Tensor[(?, 14, 11), uint64], Tensor[(1, 14, 11), float32], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(120), float64], Tensor[(1280), int16]) {
  %441 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %442 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 11), float32] */;
  %443 = tan(%442) /* ty=Tensor[(1, 14, 11), float32] */;
  %444 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 14, 11), float32] */, dtype="bool") /* ty=Tensor[(1, 14, 11), bool] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(1, 14, 11), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = greater(%446, %447) /* ty=Tensor[(?, 14, 11), bool] */;
  %449 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 14, 11), float32] */, dtype="uint64") /* ty=Tensor[(1, 14, 11), uint64] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="uint64") /* ty=Tensor[(?, 14, 11), uint64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %453 = cast(%443, dtype="float32") /* ty=Tensor[(1, 14, 11), float32] */;
  %454 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %455 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %456 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %457 = cast(%var_2735, dtype="float64") /* ty=Tensor[(120), float64] */;
  %458 = cast(meta[relay.Constant][22] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %459 = reshape(%457, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float64] */;
  %460 = reshape(%458, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %461 = @func_1831(%459, %460) /* ty=(Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) */;
  %462 = %441.1;
  %463 = minimum(%451, %452) /* ty=Tensor[(?, 14, 11), uint64] */;
  %464 = asin(%453) /* ty=Tensor[(1, 14, 11), float32] */;
  %465 = %454.1;
  %466 = %455.0;
  %467 = %456.0;
  %468 = %461.2;
  (%462, %463, %464, %465, %466, %467, %468, %var_2735, meta[relay.Constant][22] /* ty=Tensor[(1280), int16] */)
}

def @func_4059() -> (Tensor[(6, 10, 4), bool],) {
  %469 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %470 = %469.0;
  (%470,)
}

def @func_1304() -> (Tensor[(10, 5, 16), float64],) {
  %471 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
  %472 = cos(%471) /* ty=Tensor[(10, 5, 16), float64] */;
  (%472,)
}

def @func_6353(%var_6346: Tensor[(9, 3, 7), float32]) -> Tensor[(9, 3, 7), float32] {
  %473 = cast(%var_6346, dtype="float32") /* ty=Tensor[(9, 3, 7), float32] */;
  rsqrt(%473) /* ty=Tensor[(9, 3, 7), float32] */
}

def @func_4695(%var_4671: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) {
  %474 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
  %475 = cast(%var_4671, dtype="float64") /* ty=Tensor[(960), float64] */;
  %476 = reshape(%475, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %477 = @func_2031(%476) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */;
  %478 = %474.2;
  %479 = %477.0;
  (%478, %479, %var_4671)
}

def @func_6779() -> Tensor[(35), float32] {
  %480 = @func_6081() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(390), float64], int64, Tensor[(7, 5, 1), float32], Tensor[(35), float32]) */;
  %480.5
}

def @func_3670() -> Tensor[(10, 5, 16), float32] {
  %481 = @func_2672() /* ty=Tensor[(10, 5, 16), float64] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  acos(%482) /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_10344() -> (Tensor[(10, 5, 16), uint8],) {
  %483 = @func_4983() /* ty=(Tensor[(10, 5, 16), uint8], Tensor[(195), int64]) */;
  %484 = %483.0;
  (%484,)
}

def @func_1185() -> Tensor[(6, 10, 4), bool] {
  %485 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %485.0
}

def @func_3968() -> (Tensor[(6, 10, 4), bool],) {
  %486 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %487 = %486.0;
  (%487,)
}

def @func_6977() -> (Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) {
  %488 = @func_4797() /* ty=(Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %489 = %488.1;
  %490 = @func_2620() /* ty=Tensor[(8, 5, 4), uint64] */;
  (%489, %490)
}

def @func_9486() -> (Tensor[(6, 10, 4), bool],) {
  %491 = @func_3318() /* ty=Tensor[(6, 10, 4), bool] */;
  (%491,)
}

def @func_3920() -> (Tensor[(6, 10, 4), bool],) {
  %492 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %493 = %492.0;
  (%493,)
}

def @func_8920() -> Tensor[(6, 10, 4), bool] {
  %494 = @func_1594() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %494.0
}

def @func_7228(%var_7190: int8, %var_7209: Tensor[(10, 16, 3), int8]) -> (Tensor[(5, 8, 3), int8], Tensor[(10, 5, 16), float32], Tensor[(10, 16, 3), bool], Tensor[(6, 10, 4), float64], Tensor[(1280), int16]) {
  %495 = cast(%var_7190, dtype="int8") /* ty=int8 */;
  %496 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 8, 3), int8] */, dtype="int8") /* ty=Tensor[(5, 8, 3), int8] */;
  %497 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %498 = cast(%var_7190, dtype="bool") /* ty=bool */;
  %499 = cast(%var_7209, dtype="bool") /* ty=Tensor[(10, 16, 3), bool] */;
  %500 = cast(meta[relay.Constant][25] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %501 = reshape(%500, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %502 = @func_4586(%501) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) */;
  %503 = multiply(%495, %496) /* ty=Tensor[(5, 8, 3), int8] */;
  %504 = %497.0;
  %505 = not_equal(%498, %499) /* ty=Tensor[(10, 16, 3), bool] */;
  %506 = %502.4;
  (%503, %504, %505, %506, meta[relay.Constant][25] /* ty=Tensor[(1280), int16] */)
}

def @func_11184() -> Tensor[(6, 10, 4), bool] {
  %507 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %507.1
}

def @func_5734(%var_5683: Tensor[(1280), int16]) -> (int64, Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(1280), int16], Tensor[(5, 16, 16), int16], Tensor[(30, 4), float64], Tensor[(6, 10, 4), bool]) {
  %508 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %509 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %510 = cast(%var_5683, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %511 = reshape(%510, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %512 = @func_4858(%511) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) */;
  %513 = cast(meta[relay.Constant][26] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
  %514 = reshape(%513, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %515 = @func_5218(%514) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(8, 10, 12), float64], Tensor[(5, 16, 16), int16], Tensor[(120), float64], Tensor[(1280), int16]) */;
  %516 = %508.1;
  %517 = %509.0;
  %518 = %512.1;
  %519 = %515.3;
  %520 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  (%516, %517, %518, %var_5683, %519, meta[relay.Constant][26] /* ty=Tensor[(30, 4), float64] */, %520)
}

def @func_13263() -> (Tensor[(10, 5, 16), float64],) {
  %521 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %522 = %521.0;
  (%522,)
}

def @func_4404(%var_4398: Tensor[(2, 15, 9), float32]) -> (Tensor[(2, 15, 9), float32],) {
  %523 = cast(%var_4398, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %524 = atan(%523) /* ty=Tensor[(2, 15, 9), float32] */;
  (%524,)
}

def @func_8779(%var_8765: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16]) {
  %525 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %526 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %527 = cast(%var_8765, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %528 = reshape(%527, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %529 = @func_4586(%528) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) */;
  %530 = %525.0;
  %531 = %526.0;
  %532 = %529.3;
  (%530, %531, %532, %var_8765)
}

def @func_3398(%var_3388: Tensor[(6, 10, 4), bool]) -> (Tensor[(10, 5, 16), float64], Tensor[(1280), int16], Tensor[(6, 10, 4), float32]) {
  %533 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %534 = cast(meta[relay.Constant][27] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %535 = reshape(%534, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %536 = @func_2342(%535) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
  %537 = %536.0;
  %538 = cast(%var_3388, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %542 = %533.0;
  %543 = power(%540, %541) /* ty=Tensor[(6, 10, 4), float32] */;
  (%542, meta[relay.Constant][27] /* ty=Tensor[(1280), int16] */, %543)
}

def @func_9004(%var_8945: Tensor[(5, 6, 9), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) {
  %544 = cast(%var_8945, dtype="float64") /* ty=Tensor[(5, 6, 9), float64] */;
  %545 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %546 = cast(meta[relay.Constant][28] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %547 = reshape(%546, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), float32] */;
  %548 = @func_7616() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %549 = exp(%544) /* ty=Tensor[(5, 6, 9), float64] */;
  %550 = %545.0;
  %551 = @func_6353(%547) /* ty=Tensor[(9, 3, 7), float32] */;
  %552 = %548.0;
  (%549, %550, %551, meta[relay.Constant][28] /* ty=Tensor[(189), float32] */, %552)
}

def @func_8240() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %553 = @func_4346() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) */;
  %554 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %555 = %553.1;
  %556 = %554.1;
  (%555, %556)
}

def @func_409(%var_344: int64, %var_345: Tensor[(13, 1, 15), int64]) -> Tensor[(13, 1, 15), float32] {
  %557 = cast(%var_344, dtype="int64") /* ty=int64 */;
  %558 = cast(%var_345, dtype="int64") /* ty=Tensor[(13, 1, 15), int64] */;
  %559 = left_shift(%557, %558) /* ty=Tensor[(13, 1, 15), int64] */;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(13, 1, 15), float64] */;
  %561 = atanh(%560) /* ty=Tensor[(13, 1, 15), float64] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(13, 1, 15), float32] */;
  cosh(%562) /* ty=Tensor[(13, 1, 15), float32] */
}

def @func_2285() -> Tensor[(6, 10, 4), bool] {
  %563 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %563.0
}

def @func_3457() -> (Tensor[(10, 5, 16), float64],) {
  %564 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %565 = %564.0;
  (%565,)
}

def @func_1018() -> Tensor[(6, 10, 4), bool] {
  %566 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %566.0
}

def @func_10027() -> (Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32]) {
  %567 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %568 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %569 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %570 = rsqrt(%567) /* ty=Tensor[(16, 16, 4), float32] */;
  %571 = log(%568) /* ty=Tensor[(16, 16, 4), float32] */;
  %572 = log2(%569) /* ty=Tensor[(16, 16, 4), float32] */;
  (%570, %571, %572)
}

def @func_3276() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) {
  %573 = @func_2596() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %574 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %575 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %576 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %577 = %576.1;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %579 = %573.0;
  %580 = %574.0;
  %581 = %575.2;
  %582 = sigmoid(%578) /* ty=Tensor[(10, 5, 16), float32] */;
  (%579, %580, %581, %582)
}

def @func_544(%var_533: Tensor[(7, 4, 3), int32], %var_541: int64) -> (Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  %583 = cast(%var_533, dtype="int32") /* ty=Tensor[(7, 4, 3), int32] */;
  %584 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(7, 4, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 4, 3), int32] */, dtype="int32") /* ty=Tensor[(7, 4, 3), int32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %587 = cast(%var_541, dtype="int64") /* ty=int64 */;
  %588 = cast(meta[relay.Constant][31] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %589 = reshape(%587, newshape=[]) /* ty=int64 */;
  %590 = reshape(%588, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %591 = logical_xor(%585, %586) /* ty=Tensor[(7, 4, 3), int32] */;
  %592 = @func_409(%589, %590) /* ty=Tensor[(13, 1, 15), float32] */;
  (%591, %592, %var_541, meta[relay.Constant][31] /* ty=Tensor[(195), int64] */)
}

def @func_1594() -> (Tensor[(6, 10, 4), bool],) {
  %593 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %594 = %593.0;
  (%594,)
}

def @func_7019(%var_7004: Tensor[(13, 14, 13), float32]) -> (Tensor[(13, 14, 13), float32], Tensor[(6, 10, 4), bool]) {
  %595 = cast(%var_7004, dtype="float32") /* ty=Tensor[(13, 14, 13), float32] */;
  %596 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %597 = atan(%595) /* ty=Tensor[(13, 14, 13), float32] */;
  %598 = %596.0;
  (%597, %598)
}

def @func_11694() -> (Tensor[(6, 10, 4), bool],) {
  %599 = @func_10755() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %600 = %599.2;
  (%600,)
}

def @func_5969() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) {
  %601 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %602 = cast(meta[relay.Constant][32] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %603 = reshape(%602, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %604 = @func_2031(%603) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */;
  %605 = %601.0;
  %606 = %604.0;
  (%605, %606, meta[relay.Constant][32] /* ty=Tensor[(960), float64] */)
}

def @func_2408() -> (Tensor[(10, 5, 16), float64],) {
  %607 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %608 = %607.0;
  (%608,)
}

def @func_12204() -> Tensor[(6, 10, 4), bool] {
  %609 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %609.0
}

def @func_6392(%var_6382: Tensor[(1280), int16]) -> (Tensor[(10, 5, 16), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) {
  %610 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %611 = cast(%var_6382, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %612 = cast(%var_6382, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %613 = reshape(%611, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %614 = reshape(%612, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %615 = %610.4;
  %616 = @func_103(%613, %614) /* ty=Tensor[(5, 16, 16), int16] */;
  (%615, %616, %var_6382)
}

def @func_7886() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %617 = @func_2596() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %618 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %619 = @func_6115() /* ty=Tensor[(6, 10, 4), bool] */;
  %620 = %617.0;
  %621 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
  %622 = @func_6115() /* ty=Tensor[(6, 10, 4), bool] */;
  %623 = %618.2;
  (%619, %620, %621, %622, %623)
}

def @func_6328() -> Tensor[(6, 10, 4), uint8] {
  %624 = @func_3761() /* ty=(Tensor[(6, 10, 4), uint8],) */;
  %624.0
}

def @func_1445() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %625 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %626 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %627 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %628 = %625.0;
  %629 = %626.0;
  %630 = %627.0;
  (%628, %629, %630)
}

def @func_10060() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %631 = @func_8293() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) */;
  %632 = @func_8042() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
  %633 = %631.0;
  %634 = %632.0;
  (%633, %634)
}

def @func_8207() -> (Tensor[(6, 10, 4), bool],) {
  %635 = @func_6404() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %636 = %635.1;
  (%636,)
}

def @func_9161() -> (Tensor[(6, 10, 4), bool],) {
  %637 = @func_6977() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
  %638 = %637.0;
  (%638,)
}

def @func_8890() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %639 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %640 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %641 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %642 = %639.0;
  %643 = %640.0;
  %644 = %641.0;
  (%642, %643, %644)
}

def @func_9152(%var_9131: Tensor[(21), float32], %var_9149: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(99), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) {
  %645 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %646 = cast(%var_9131, dtype="float32") /* ty=Tensor[(21), float32] */;
  %647 = cast(meta[relay.Constant][33] /* ty=Tensor[(3072), int8] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %648 = reshape(%646, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
  %649 = reshape(%647, newshape=[3072]) /* ty=Tensor[(3072), int8] */;
  %650 = @func_5843(%648, %649) /* ty=(Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) */;
  %651 = cast(%var_9149, dtype="float64") /* ty=Tensor[(960), float64] */;
  %652 = reshape(%651, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
  %653 = @func_1910(%652) /* ty=(Tensor[(8, 10, 12), float64],) */;
  %654 = %645.0;
  %655 = %650.3;
  %656 = %653.0;
  (%654, %655, %var_9131, meta[relay.Constant][33] /* ty=Tensor[(3072), int8] */, %656, %var_9149)
}

def @func_7432(%var_7404: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), float32], Tensor[(2, 11, 12), float64]) {
  %657 = cast(%var_7404, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %658 = acos(%657) /* ty=Tensor[(2, 11, 12), float64] */;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(2, 11, 12), float32] */;
  %660 = cast(%658, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
  %661 = asin(%659) /* ty=Tensor[(2, 11, 12), float32] */;
  %662 = acosh(%660) /* ty=Tensor[(2, 11, 12), float64] */;
  (%661, %662)
}

def @func_13129() -> Tensor[(6, 10, 4), bool] {
  %663 = @func_10102() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %663.0
}

def @func_12227() -> Tensor[(10, 5, 16), float32] {
  %664 = @func_10584() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %664.0
}

def @func_10399() -> (Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64]) {
  %665 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %666 = @func_5550() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %667 = @func_9646() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %668 = %665.0;
  %669 = %666.1;
  %670 = %667.1;
  (%668, %669, %670)
}

def @func_13225(%var_13216: Tensor[(99), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(11, 3, 3), float64], Tensor[(99), float64]) {
  %671 = @func_1594() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %672 = @func_11423() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(35), float32]) */;
  %673 = cast(%var_13216, dtype="float64") /* ty=Tensor[(99), float64] */;
  %674 = reshape(%673, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), float64] */;
  %675 = @func_5393(%674) /* ty=(Tensor[(11, 3, 3), float64],) */;
  %676 = %671.0;
  %677 = %672.4;
  %678 = %675.0;
  (%676, %677, %678, %var_13216)
}

def @func_5614() -> (Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) {
  %679 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %680 = cast(meta[relay.Constant][34] /* ty=Tensor[(3072), int8] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %681 = reshape(%680, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), int8] */;
  %682 = %679.0;
  %683 = @func_4887(%681) /* ty=Tensor[(16, 16, 12), int8] */;
  (%682, %683, meta[relay.Constant][34] /* ty=Tensor[(3072), int8] */)
}

def @func_10235() -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(35), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(3, ?, 11), float32]) {
  %684 = @func_6856() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %685 = cast(meta[relay.Constant][35] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %686 = reshape(%685, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %687 = @func_815(%686) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %688 = @func_9646() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %689 = @func_8390() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %690 = %684.1;
  %691 = %687.0;
  %692 = %688.1;
  %693 = %689.0;
  %694 = @func_8474() /* ty=Tensor[(3, ?, 11), float32] */;
  (%690, %691, meta[relay.Constant][35] /* ty=Tensor[(35), float32] */, %692, %693, %694)
}

def @func_1092(%var_1059: Tensor[(1, 6, 4), float32], %var_1060: Tensor[(10, 6, 4), float32], %var_1072: Tensor[(195), int64], %var_1083: Tensor[(84), int32]) -> (Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) {
  %695 = cast(%var_1059, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %696 = cast(%var_1060, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
  %697 = cast(meta[relay.Constant][36] /* ty=Tensor[(1280, 1), int16] */, dtype="int16") /* ty=Tensor[(1280, 1), int16] */;
  %698 = cast(meta[relay.Constant][36] /* ty=Tensor[(1280, 1), int16] */, dtype="int16") /* ty=Tensor[(1280, 1), int16] */;
  %699 = reshape(%697, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %700 = reshape(%698, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %701 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %702 = cast(%var_1072, dtype="int64") /* ty=Tensor[(195), int64] */;
  %703 = reshape(%701, newshape=[]) /* ty=int64 */;
  %704 = reshape(%702, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %705 = cast(%var_1083, dtype="int32") /* ty=Tensor[(84), int32] */;
  %706 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %707 = reshape(%705, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), int32] */;
  %708 = reshape(%706, newshape=[]) /* ty=int64 */;
  %709 = @func_544(%707, %708) /* ty=(Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %710 = less(%695, %696) /* ty=Tensor[(10, 6, 4), bool] */;
  %711 = @func_103(%699, %700) /* ty=Tensor[(5, 16, 16), int16] */;
  %712 = @func_409(%703, %704) /* ty=Tensor[(13, 1, 15), float32] */;
  %713 = %709.1;
  (%710, %711, meta[relay.Constant][36] /* ty=Tensor[(1280, 1), int16] */, %712, 5 /* ty=int64 */, %var_1072, %713, %var_1083)
}

def @func_2651(%var_2636: Tensor[(84), int32]) -> (Tensor[(6, 10, 4), bool], Tensor[(10, 6, 4), bool], Tensor[(12, 2), float32], Tensor[(195), int64], Tensor[(84), int32]) {
  %714 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %715 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 2), float32] */;
  %716 = %714.0;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %718 = cast(meta[relay.Constant][38] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %719 = cast(%var_2636, dtype="int32") /* ty=Tensor[(84), int32] */;
  %720 = reshape(%715, newshape=[1, 6, 4]) /* ty=Tensor[(1, 6, 4), float32] */;
  %721 = reshape(%717, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %722 = reshape(%718, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %723 = reshape(%719, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %724 = @func_1092(%720, %721, %722, %723) /* ty=(Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) */;
  %725 = %724.0;
  (%716, %725, meta[relay.Constant][37] /* ty=Tensor[(12, 2), float32] */, meta[relay.Constant][38] /* ty=Tensor[(195), int64] */, %var_2636)
}

def @func_10140(%var_10112: Tensor[(16, 80), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(6, 10, 4), float64], Tensor[(16, 80), uint32]) {
  %726 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %727 = cast(%var_10112, dtype="int16") /* ty=Tensor[(16, 80), int16] */;
  %728 = reshape(%727, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %729 = @func_5734(%728) /* ty=(int64, Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(1280), int16], Tensor[(5, 16, 16), int16], Tensor[(30, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %730 = @func_4139() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %731 = cast(%var_10112, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %732 = acosh(%731) /* ty=Tensor[(16, 80), float32] */;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %734 = atanh(%733) /* ty=Tensor[(16, 80), float32] */;
  %735 = cast(%732, dtype="uint32") /* ty=Tensor[(16, 80), uint32] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(2), int32] */;
  %737 = cast(%734, dtype="uint32") /* ty=Tensor[(16, 80), uint32] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %739 = %726.0;
  %740 = %729.4;
  %741 = %730.0;
  %742 = right_shift(%737, %738) /* ty=Tensor[(16, 80), uint32] */;
  (%739, %740, %741, %742)
}

def @func_6009() -> Tensor[(6, 10, 4), bool] {
  %743 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %743.0
}

def @func_4586(%var_4472: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) {
  %744 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %745 = cast(%var_4472, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %746 = reshape(%745, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %747 = @func_2342(%746) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
  %748 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %749 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %750 = %749.0;
  %751 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
  %752 = cast(%751, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %753 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%750, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = @func_4059() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %757 = cast(%751, dtype="int8") /* ty=Tensor[(10, 5, 16), int8] */;
  %758 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%750, dtype="int8") /* ty=Tensor[(10, 5, 16), int8] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %761 = %744.0;
  %762 = %747.1;
  %763 = %748.1;
  %764 = @func_3308() /* ty=Tensor[(6, 10, 4), float64] */;
  %765 = greater_equal(%754, %755) /* ty=Tensor[(10, 5, 16), bool] */;
  %766 = %756.0;
  %767 = bitwise_or(%759, %760) /* ty=Tensor[(10, 5, 16), int8] */;
  (%761, %762, %var_4472, %763, %764, %765, %766, %767)
}

def @func_9789() -> Tensor[(6, 10, 4), bool] {
  %768 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %768.1
}

def @func_12186() -> (Tensor[(6, 10, 4), bool],) {
  %769 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %770 = %769.0;
  (%770,)
}

def @func_12266() -> (Tensor[(7, 5, 1), float32],) {
  %771 = @func_10235() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(35), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(3, ?, 11), float32]) */;
  %772 = %771.1;
  (%772,)
}

def @func_6252() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %773 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %774 = @func_5910() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %775 = %773.0;
  %776 = %774.0;
  (%775, %776)
}

def @func_12129(%var_12123: Tensor[(7, 5), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(7, 5), float32], Tensor[(10, 5, 16), float64]) {
  %777 = cast(%var_12123, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
  %778 = reshape(%777, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %779 = @func_815(%778) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %780 = @func_6714() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %781 = @func_2425() /* ty=Tensor[(6, 10, 4), bool] */;
  %782 = %779.0;
  %783 = %780.0;
  (%781, %782, %var_12123, %783)
}

def @func_3421() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %784 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %785 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
  %786 = %784.0;
  (%785, %786)
}

def @func_7974() -> Tensor[(6, 10, 4), bool] {
  %787 = @func_7662() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %787.0
}

def @func_850() -> (Tensor[(6, 10, 4), bool],) {
  %788 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %789 = %788.0;
  (%789,)
}

def @func_4226(%var_4181: Tensor[(10, 5, 16), bool]) -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), uint16], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %790 = @func_2475() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %791 = %790.1;
  %792 = cast(%var_4181, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
  %793 = shape_of(%791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%791, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %796 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %797 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %798 = @func_4125() /* ty=Tensor[(6, 10, 4), bool] */;
  %799 = multiply(%794, %795) /* ty=Tensor[(10, 5, 16), uint16] */;
  %800 = %796.0;
  %801 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
  %802 = @func_3318() /* ty=Tensor[(6, 10, 4), bool] */;
  %803 = %797.0;
  %804 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  (%798, %799, %800, %801, %802, %803, %804)
}

def @func_5550() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %805 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %806 = @func_4125() /* ty=Tensor[(6, 10, 4), bool] */;
  %807 = %805.0;
  (%806, %807)
}

def @func_2967() -> (Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) {
  %808 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 1, 11), float64] */, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
  %809 = acos(%808) /* ty=Tensor[(3, 1, 11), float32] */;
  %810 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %811 = cosh(%810) /* ty=Tensor[(3, 1, 11), float64] */;
  %812 = cast(%811, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
  %813 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%809, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %816 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 1, 11), float64] */, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
  %817 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%811, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %820 = multiply(%818, %819) /* ty=Tensor[(3, ?, 11), uint8] */;
  %821 = cast(%811, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="bool") /* ty=Tensor[(3, ?, 11), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %825 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
  %826 = divide(%814, %815) /* ty=Tensor[(3, ?, 11), float32] */;
  %827 = less(%823, %824) /* ty=Tensor[(3, ?, 11), bool] */;
  %828 = @func_2285() /* ty=Tensor[(6, 10, 4), bool] */;
  (%825, %826, %827, %828)
}

def @func_1910(%var_1894: Tensor[(8, 10, 12), float64]) -> (Tensor[(8, 10, 12), float64],) {
  %829 = cast(%var_1894, dtype="float64") /* ty=Tensor[(8, 10, 12), float64] */;
  %830 = atan(%829) /* ty=Tensor[(8, 10, 12), float64] */;
  (%830,)
}

def @func_6115() -> Tensor[(6, 10, 4), bool] {
  %831 = @func_5992() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %831.0
}

def @func_5527(%var_5475: Tensor[(390), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], int64, Tensor[(390), float64], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %832 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %833 = cast(%var_5475, dtype="float64") /* ty=Tensor[(390), float64] */;
  %834 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %835 = reshape(%833, newshape=[13, 6, 5]) /* ty=Tensor[(13, 6, 5), float64] */;
  %836 = reshape(%834, newshape=[]) /* ty=int64 */;
  %837 = @func_2170(%835, %836) /* ty=(Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) */;
  %838 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %839 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %840 = @func_2752() /* ty=Tensor[(6, 10, 4), bool] */;
  %841 = %832.0;
  %842 = %837.4;
  %843 = %838.4;
  %844 = %839.0;
  (%840, %841, %842, %var_5475, 4 /* ty=int64 */, %843, %844)
}

def @func_2425() -> Tensor[(6, 10, 4), bool] {
  %845 = @func_1917() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %845.0
}

def @func_6856() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %846 = @func_5992() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %847 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %848 = %846.0;
  %849 = %847.0;
  (%848, %849)
}

def @func_7662() -> (Tensor[(6, 10, 4), bool],) {
  %850 = @func_6009() /* ty=Tensor[(6, 10, 4), bool] */;
  (%850,)
}

def @func_12609() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %851 = @func_8708() /* ty=(Tensor[(6, 10, 4), bool], int64) */;
  %852 = @func_2752() /* ty=Tensor[(6, 10, 4), bool] */;
  %853 = %851.0;
  (%852, %853)
}

def @func_12760(%var_12747: Tensor[(16, 1, 15), float64]) -> (Tensor[(16, 15, 15), uint8],) {
  %854 = cast(%var_12747, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
  %855 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 15), float64] */;
  %856 = maximum(%854, %855) /* ty=Tensor[(16, 15, 15), float64] */;
  %857 = cast(%856, dtype="uint8") /* ty=Tensor[(16, 15, 15), uint8] */;
  %858 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(16, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 15, 15), float64] */, dtype="uint8") /* ty=Tensor[(16, 15, 15), uint8] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %861 = add(%859, %860) /* ty=Tensor[(16, 15, 15), uint8] */;
  (%861,)
}

def @func_9603(%var_9600: Tensor[(7, 8, 2), float32]) -> (Tensor[(7, 8, 2), float32],) {
  %862 = cast(%var_9600, dtype="float32") /* ty=Tensor[(7, 8, 2), float32] */;
  %863 = acosh(%862) /* ty=Tensor[(7, 8, 2), float32] */;
  (%863,)
}

def @func_2596() -> (Tensor[(6, 10, 4), bool],) {
  %864 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %865 = %864.0;
  (%865,)
}

def @func_13010() -> (Tensor[(35), float32], Tensor[(7, 5, 84), bool], Tensor[(6, 10, 4), bool]) {
  %866 = @func_7583() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) */;
  %867 = %866.3;
  %868 = cast(meta[relay.Constant][41] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %869 = reshape(%868, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %870 = @func_815(%869) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %871 = %870.0;
  %872 = cast(%867, dtype="bool") /* ty=Tensor[(84), bool] */;
  %873 = cast(%871, dtype="bool") /* ty=Tensor[(7, 5, 1), bool] */;
  %874 = @func_12186() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %875 = equal(%872, %873) /* ty=Tensor[(7, 5, 84), bool] */;
  %876 = %874.0;
  (meta[relay.Constant][41] /* ty=Tensor[(35), float32] */, %875, %876)
}

def @func_9195() -> (Tensor[(6, 10, 4), bool],) {
  %877 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %878 = %877.0;
  (%878,)
}

def @func_715() -> (Tensor[(6, 10, 4), bool],) {
  %879 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %880 = %879.0;
  (%880,)
}

def @func_10948(%var_10894: float32) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], float32, Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64], Tensor[(6, 10, 4), bool]) {
  %881 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %882 = @func_8207() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %883 = cast(%var_10894, dtype="float32") /* ty=float32 */;
  %884 = reshape(%883, newshape=[]) /* ty=float32 */;
  %885 = @func_9987(%884) /* ty=(Tensor[(13, 1, 3), float32], Tensor[(10, 5, 16), float64]) */;
  %886 = @func_4797() /* ty=(Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %887 = @func_3920() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %888 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %889 = %881.0;
  %890 = %882.0;
  %891 = %885.1;
  %892 = %886.0;
  %893 = @func_7323() /* ty=Tensor[(6, 10, 4), bool] */;
  %894 = %887.0;
  %895 = @func_2620() /* ty=Tensor[(8, 5, 4), uint64] */;
  %896 = %888.3;
  (%889, %890, %891, %var_10894, %892, %893, %894, %895, %896)
}

def @func_7516(%var_7498: Tensor[(24), float32], %var_7499: Tensor[(195), int64], %var_7500: Tensor[(84), int32]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8], Tensor[(6, 10, 4), bool], Tensor[(32, 40), int64], Tensor[(24), float32], Tensor[(195), int64], Tensor[(84), int32], Tensor[(1280, ?), int32]) {
  %897 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %898 = @func_6404() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %899 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %900 = cast(meta[relay.Constant][42] /* ty=Tensor[(32, 40), int16] */, dtype="int16") /* ty=Tensor[(32, 40), int16] */;
  %901 = reshape(%900, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %902 = @func_6392(%901) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
  %903 = %902.1;
  %904 = cast(%903, dtype="int64") /* ty=Tensor[(5, 16, 16), int64] */;
  %905 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(32, 40), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %906 = cast(meta[relay.Constant][42] /* ty=Tensor[(32, 40), int16] */, dtype="int64") /* ty=Tensor[(32, 40), int64] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %908 = cast(%var_7498, dtype="float32") /* ty=Tensor[(24), float32] */;
  %909 = %899.0;
  %910 = cast(%909, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %911 = cast(%var_7499, dtype="int64") /* ty=Tensor[(195), int64] */;
  %912 = cast(%var_7500, dtype="int32") /* ty=Tensor[(84), int32] */;
  %913 = reshape(%908, newshape=[1, 6, 4]) /* ty=Tensor[(1, 6, 4), float32] */;
  %914 = reshape(%910, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
  %915 = reshape(%911, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %916 = reshape(%912, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %917 = @func_1092(%913, %914, %915, %916) /* ty=(Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) */;
  %918 = %917.2;
  %919 = cast(meta[relay.Constant][42] /* ty=Tensor[(32, 40), int16] */, dtype="int32") /* ty=Tensor[(32, 40), int32] */;
  %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(2), int32] */;
  %921 = cast(%918, dtype="int32") /* ty=Tensor[(1280, 1), int32] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %923 = %897.1;
  %924 = %898.1;
  %925 = @func_6328() /* ty=Tensor[(6, 10, 4), uint8] */;
  %926 = minimum(%906, %907) /* ty=Tensor[(32, 40), int64] */;
  %927 = bitwise_or(%921, %922) /* ty=Tensor[(1280, ?), int32] */;
  (%923, %924, %925, %909, %926, %var_7498, %var_7499, %var_7500, %927)
}

def @func_7302() -> Tensor[(6, 10, 4), bool] {
  %928 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %928.0
}

def @func_11598() -> (Tensor[(6, 10, 4), bool],) {
  %929 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %930 = %929.0;
  (%930,)
}

def @func_2071() -> Tensor[(10, 5, 16), float64] {
  %931 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %931.0
}

def @func_13415() -> Tensor[(6, 10, 4), bool] {
  %932 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %932.0
}

def @func_1939() -> (Tensor[(6, 10, 4), bool],) {
  %933 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  (%933,)
}

def @func_2901() -> (Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) {
  %934 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %935 = %934.0;
  %936 = cast(%935, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %937 = cast(meta[relay.Constant][43] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %938 = reshape(%937, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %939 = @func_1492(%938) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %940 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %941 = sigmoid(%936) /* ty=Tensor[(6, 10, 4), float32] */;
  %942 = @func_2620() /* ty=Tensor[(8, 5, 4), uint64] */;
  %943 = %939.1;
  %944 = %940.1;
  (%941, %942, %943, meta[relay.Constant][43] /* ty=Tensor[(195), int64] */, %944)
}

def @func_10102() -> (Tensor[(6, 10, 4), bool],) {
  %945 = @func_8708() /* ty=(Tensor[(6, 10, 4), bool], int64) */;
  %946 = %945.0;
  (%946,)
}

def @func_13384() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) {
  %947 = @func_13263() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %948 = @func_5614() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) */;
  %949 = %947.0;
  %950 = %948.0;
  (%949, %950)
}

def @func_11357() -> (Tensor[(6, 10, 4), bool],) {
  %951 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %952 = %951.0;
  (%952,)
}

def @func_1548() -> (Tensor[(10, 5, 16), float64],) {
  %953 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %954 = %953.0;
  (%954,)
}

def @func_4139() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %955 = @func_3421() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %956 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %957 = %955.0;
  %958 = %956.2;
  (%957, %958)
}

def @func_5351() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %959 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %960 = @func_3833() /* ty=(Tensor[(6, 10, 4), float64],) */;
  %961 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %962 = @func_3308() /* ty=Tensor[(6, 10, 4), float64] */;
  %963 = %959.0;
  %964 = %960.0;
  %965 = %961.0;
  (%962, %963, %964, %965)
}

def @func_12051() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %966 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %967 = @func_10755() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %968 = %966.0;
  %969 = %967.1;
  (%968, %969)
}

def @func_11880() -> (Tensor[(35), float32], Tensor[(8, 5, 4), uint64], Tensor[(10, 5, 16), bool], Tensor[(60), float32]) {
  %970 = @func_8042() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
  %971 = cast(meta[relay.Constant][44] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %972 = reshape(%971, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %973 = @func_9545(%972) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(3072), int8], Tensor[(60), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %974 = @func_10385() /* ty=Tensor[(35), float32] */;
  %975 = %970.1;
  %976 = %973.0;
  (%974, %975, %976, meta[relay.Constant][44] /* ty=Tensor[(60), float32] */)
}

def @func_1888() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %977 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %978 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %979 = %977.0;
  %980 = %978.1;
  (%979, %980)
}

def @func_13294() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %981 = @func_11523() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %982 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %983 = %981.1;
  %984 = %982.1;
  (%983, %984)
}

def @func_7323() -> Tensor[(6, 10, 4), bool] {
  @func_2425() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_1276() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %985 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %986 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %987 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %988 = %985.0;
  %989 = %986.0;
  %990 = %987.0;
  (%988, %989, %990)
}

def @func_2101() -> (Tensor[(6, 10, 4), bool],) {
  %991 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %992 = %991.0;
  (%992,)
}

def @func_6569() -> (Tensor[(6, 10, 4), bool],) {
  %993 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %994 = %993.0;
  (%994,)
}

def @func_3318() -> Tensor[(6, 10, 4), bool] {
  %995 = @func_2596() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %995.0
}

def @func_4858(%var_4819: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) {
  %996 = @func_1917() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %997 = cast(meta[relay.Constant][45] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %998 = reshape(%997, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %999 = @func_4404(%998) /* ty=(Tensor[(2, 15, 9), float32],) */;
  %1000 = cast(%var_4819, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %1001 = reshape(%1000, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %1002 = @func_2342(%1001) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
  %1003 = %1002.3;
  %1004 = cast(%1003, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  %1005 = %996.0;
  %1006 = %999.0;
  %1007 = atan(%1004) /* ty=Tensor[(5, 16, 16), float32] */;
  (%1005, %var_4819, %1006, meta[relay.Constant][45] /* ty=Tensor[(270), float32] */, %1007)
}

def @func_581() -> (Tensor[(6, 10, 4), bool],) {
  %1008 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %1009 = acos(%1008) /* ty=Tensor[(6, 10, 4), float32] */;
  %1010 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 10, 4), float32] */, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
  %1011 = shape_of(%1009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1012 = cast(%1009, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1014 = equal(%1012, %1013) /* ty=Tensor[(6, 10, 4), bool] */;
  (%1014,)
}

def @func_6509(%var_6503: int64, %var_6504: Tensor[(195), int64]) -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  %1015 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1016 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1017 = cast(%var_6503, dtype="int64") /* ty=int64 */;
  %1018 = cast(%var_6504, dtype="int64") /* ty=Tensor[(195), int64] */;
  %1019 = reshape(%1017, newshape=[]) /* ty=int64 */;
  %1020 = reshape(%1018, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %1021 = %1015.0;
  %1022 = @func_6115() /* ty=Tensor[(6, 10, 4), bool] */;
  %1023 = %1016.0;
  %1024 = @func_409(%1019, %1020) /* ty=Tensor[(13, 1, 15), float32] */;
  (%1021, %1022, %1023, %1024, %var_6503, %var_6504)
}

def @func_5937() -> (Tensor[(10, 5, 16), float32],) {
  %1025 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %1026 = %1025.4;
  %1027 = cast(%1026, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1028 = atan(%1027) /* ty=Tensor[(10, 5, 16), float32] */;
  (%1028,)
}

def @func_12323(%var_12311: Tensor[(195), int64]) -> (Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(9, 12, 14), int32], Tensor[(1512), int32], Tensor[(6, 10, 4), uint8], Tensor[(24, 1), float32], Tensor[(195), int64]) {
  %1029 = @func_9665() /* ty=(Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) */;
  %1030 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %1031 = cast(meta[relay.Constant][47] /* ty=Tensor[(1512), int32] */, dtype="int32") /* ty=Tensor[(1512), int32] */;
  %1032 = cast(meta[relay.Constant][47] /* ty=Tensor[(1512), int32] */, dtype="int32") /* ty=Tensor[(1512), int32] */;
  %1033 = reshape(%1031, newshape=[9, 12, 14]) /* ty=Tensor[(9, 12, 14), int32] */;
  %1034 = reshape(%1032, newshape=[9, 12, 14]) /* ty=Tensor[(9, 12, 14), int32] */;
  %1035 = @func_9419(%1033, %1034) /* ty=(Tensor[(9, 12, 14), int32],) */;
  %1036 = cast(meta[relay.Constant][48] /* ty=Tensor[(24, 1), float32] */, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
  %1037 = cast(%var_12311, dtype="int64") /* ty=Tensor[(195), int64] */;
  %1038 = %1030.5;
  %1039 = cast(%1038, dtype="int32") /* ty=Tensor[(42, 2), int32] */;
  %1040 = reshape(%1036, newshape=[24]) /* ty=Tensor[(24), float32] */;
  %1041 = reshape(%1037, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %1042 = reshape(%1039, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %1043 = @func_7516(%1040, %1041, %1042) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8], Tensor[(6, 10, 4), bool], Tensor[(32, 40), int64], Tensor[(24), float32], Tensor[(195), int64], Tensor[(84), int32], Tensor[(1280, ?), int32]) */;
  %1044 = %1029.1;
  %1045 = %1035.0;
  %1046 = %1043.2;
  (%1044, %1038, %1045, meta[relay.Constant][47] /* ty=Tensor[(1512), int32] */, %1046, meta[relay.Constant][48] /* ty=Tensor[(24, 1), float32] */, %var_12311)
}

def @func_12468() -> Tensor[(6, 10, 4), bool] {
  @func_2752() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_8813() -> (Tensor[(10, 5, 16), float32],) {
  %1047 = @func_8163() /* ty=Tensor[(10, 5, 16), float32] */;
  (%1047,)
}

def @func_12024(%var_11957: Tensor[(10, 5, 16), float64], %var_11989: Tensor[(10, 5, 16), uint8]) -> (Tensor[(10, 5, 16), uint32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float32], Tensor[(6, 10, 4), bool]) {
  %1048 = @func_6714() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %1049 = %1048.0;
  %1050 = cast(%var_11957, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
  %1051 = shape_of(%1049, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1052 = cast(%1049, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
  %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1054 = @func_5550() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %1055 = cast(%var_11957, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
  %1056 = shape_of(%1049, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1057 = cast(%1049, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1059 = bitwise_xor(%1057, %1058) /* ty=Tensor[(10, 5, 16), uint8] */;
  %1060 = cast(%var_11989, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1061 = shape_of(%1059, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1062 = cast(%1059, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1063 = dyn.reshape(%1060, %1061, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1064 = @func_6569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1065 = subtract(%1052, %1053) /* ty=Tensor[(10, 5, 16), uint32] */;
  %1066 = %1054.1;
  %1067 = mod(%1062, %1063) /* ty=Tensor[(10, 5, 16), float32] */;
  %1068 = %1064.0;
  (%1065, %1066, %1067, %1068)
}

def @func_10385() -> Tensor[(35), float32] {
  @func_6779() /* ty=Tensor[(35), float32] */
}

def @func_9732() -> (Tensor[(6, 10, 4), bool],) {
  %1069 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1070 = %1069.0;
  (%1070,)
}

def @func_13114() -> Tensor[(6, 10, 4), bool] {
  %1071 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1071.1
}

def @func_7583() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) {
  %1072 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1073 = cast(meta[relay.Constant][49] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
  %1074 = reshape(%1073, newshape=[84]) /* ty=Tensor[(84), int32] */;
  %1075 = @func_2651(%1074) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 6, 4), bool], Tensor[(12, 2), float32], Tensor[(195), int64], Tensor[(84), int32]) */;
  %1076 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1077 = %1072.0;
  %1078 = @func_6328() /* ty=Tensor[(6, 10, 4), uint8] */;
  %1079 = %1075.2;
  %1080 = %1076.0;
  (%1077, %1078, %1079, meta[relay.Constant][49] /* ty=Tensor[(84), int32] */, %1080)
}

def @func_9665() -> (Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) {
  %1081 = @func_5614() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) */;
  %1082 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1083 = %1081.2;
  %1084 = %1082.1;
  (%1083, %1084)
}

def @func_2170(%var_2131: Tensor[(13, 6, 5), float64], %var_2163: int64) -> (Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) {
  %1085 = cast(%var_2131, dtype="float64") /* ty=Tensor[(13, 6, 5), float64] */;
  %1086 = log2(%1085) /* ty=Tensor[(13, 6, 5), float64] */;
  %1087 = cast(%1086, dtype="float64") /* ty=Tensor[(13, 6, 5), float64] */;
  %1088 = cast(%var_2163, dtype="int64") /* ty=int64 */;
  %1089 = cast(meta[relay.Constant][50] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %1090 = reshape(%1088, newshape=[]) /* ty=int64 */;
  %1091 = reshape(%1089, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %1092 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1093 = asin(%1087) /* ty=Tensor[(13, 6, 5), float64] */;
  %1094 = @func_1185() /* ty=Tensor[(6, 10, 4), bool] */;
  %1095 = @func_1185() /* ty=Tensor[(6, 10, 4), bool] */;
  %1096 = @func_409(%1090, %1091) /* ty=Tensor[(13, 1, 15), float32] */;
  %1097 = %1092.1;
  (%1093, %1094, %1095, %1096, %var_2163, meta[relay.Constant][50] /* ty=Tensor[(195), int64] */, %1097)
}

def @func_4983() -> (Tensor[(10, 5, 16), uint8], Tensor[(195), int64]) {
  %1098 = @func_2672() /* ty=Tensor[(10, 5, 16), float64] */;
  %1099 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 5, 16), float64] */, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
  %1100 = shape_of(%1098, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1101 = cast(%1098, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
  %1102 = dyn.reshape(%1099, %1100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1103 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %1104 = minimum(%1101, %1102) /* ty=Tensor[(10, 5, 16), uint8] */;
  %1105 = %1103.3;
  (%1104, %1105)
}

def @func_5637(%var_5626: Tensor[(60, 1), float32], %var_5631: Tensor[(5, 2, 6), int32]) -> (Tensor[(3072), int8], Tensor[(60, 1), float32], Tensor[(5, 2, 6), float32]) {
  %1106 = @func_5614() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) */;
  %1107 = cast(%var_5626, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %1108 = reshape(%1107, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), float32] */;
  %1109 = @func_5127(%1108) /* ty=(int64, Tensor[(13, 15), int64], Tensor[(13, 1, 15), float32], Tensor[(5, 2, 6), int32], Tensor[(5, 2, 6), float64]) */;
  %1110 = %1109.3;
  %1111 = cast(%var_5631, dtype="float32") /* ty=Tensor[(5, 2, 6), float32] */;
  %1112 = shape_of(%1110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1113 = cast(%1110, dtype="float32") /* ty=Tensor[(5, 2, 6), float32] */;
  %1114 = dyn.reshape(%1111, %1112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1115 = %1106.2;
  %1116 = power(%1113, %1114) /* ty=Tensor[(5, 2, 6), float32] */;
  (%1115, %var_5626, %1116)
}

def @func_7811() -> (Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64], Tensor[(10, 5, 16), float64]) {
  %1117 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1118 = cast(meta[relay.Constant][52] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %1119 = reshape(%1118, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
  %1120 = @func_1910(%1119) /* ty=(Tensor[(8, 10, 12), float64],) */;
  %1121 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1122 = %1117.0;
  %1123 = %1120.0;
  %1124 = %1121.0;
  (%1122, %1123, meta[relay.Constant][52] /* ty=Tensor[(960), float64] */, %1124)
}

def @func_9940() -> (Tensor[(10, 5, 16), float64],) {
  %1125 = @func_8411() /* ty=Tensor[(10, 5, 16), float64] */;
  (%1125,)
}

def @func_11250(%var_11221: Tensor[(6, 6, 1), float64]) -> (Tensor[(6, 6, 1), float64], Tensor[(6, 10, 4), bool]) {
  %1126 = cast(%var_11221, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
  %1127 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1128 = sin(%1126) /* ty=Tensor[(6, 6, 1), float64] */;
  %1129 = %1127.0;
  (%1128, %1129)
}

def @func_1208() -> (Tensor[(6, 10, 4), bool],) {
  %1130 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  (%1130,)
}

def @func_12389() -> (Tensor[(10, 5, 16), float64], Tensor[(3072), int8]) {
  %1131 = @func_7616() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %1132 = @func_9665() /* ty=(Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) */;
  %1133 = %1131.0;
  %1134 = %1132.0;
  (%1133, %1134)
}

def @func_8622() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8]) {
  %1135 = @func_6290() /* ty=Tensor[(6, 10, 4), bool] */;
  %1136 = @func_6328() /* ty=Tensor[(6, 10, 4), uint8] */;
  (%1135, %1136)
}

def @func_10552(%var_10549: Tensor[(120), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], Tensor[(120), float64], Tensor[(1280), int16]) {
  %1137 = cast(%var_10549, dtype="float64") /* ty=Tensor[(120), float64] */;
  %1138 = cast(meta[relay.Constant][53] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %1139 = reshape(%1137, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float64] */;
  %1140 = reshape(%1138, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %1141 = @func_1831(%1139, %1140) /* ty=(Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) */;
  %1142 = @func_8920() /* ty=Tensor[(6, 10, 4), bool] */;
  %1143 = %1141.1;
  (%1142, %1143, %var_10549, meta[relay.Constant][53] /* ty=Tensor[(1280), int16] */)
}

def @func_12563() -> (Tensor[(6, 10, 4), bool],) {
  %1144 = @func_3318() /* ty=Tensor[(6, 10, 4), bool] */;
  (%1144,)
}

def @func_13105() -> (Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(960), float64]) {
  %1145 = @func_6147() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1146 = cast(meta[relay.Constant][54] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %1147 = reshape(%1146, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %1148 = @func_2031(%1147) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */;
  %1149 = %1145.0;
  %1150 = %1148.3;
  (%1149, %1150, meta[relay.Constant][54] /* ty=Tensor[(960), float64] */)
}

def @main() -> (Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(2366), float32]) {
  %1151 = @func_7029() /* ty=(Tensor[(10, 5, 16), bool],) */;
  %1152 = cast(meta[relay.Constant][55] /* ty=Tensor[(2366), float32] */, dtype="float32") /* ty=Tensor[(2366), float32] */;
  %1153 = reshape(%1152, newshape=[13, 14, 13]) /* ty=Tensor[(13, 14, 13), float32] */;
  %1154 = @func_7019(%1153) /* ty=(Tensor[(13, 14, 13), float32], Tensor[(6, 10, 4), bool]) */;
  %1155 = @func_6856() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1156 = cast(meta[relay.Constant][55] /* ty=Tensor[(2366), float32] */, dtype="float32") /* ty=Tensor[(2366), float32] */;
  %1157 = %1151.0;
  %1158 = %1154.1;
  %1159 = %1155.1;
  %1160 = erf(%1156) /* ty=Tensor[(2366), float32] */;
  (%1157, %1158, %1159, %1160)
}

def @func_6261() -> (Tensor[(6, 10, 4), bool],) {
  %1161 = @func_5992() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1162 = %1161.0;
  (%1162,)
}

def @func_12065() -> Tensor[(11, 5, 2), float64] {
  %1163 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  asinh(%1163) /* ty=Tensor[(11, 5, 2), float64] */
}

def @func_11342() -> Tensor[(6, 10, 4), bool] {
  @func_9789() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_8474() -> Tensor[(3, ?, 11), float32] {
  %1164 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %1164.1
}

def @func_9545(%var_9513: Tensor[(60), float32]) -> (Tensor[(10, 5, 16), bool], Tensor[(3072), int8], Tensor[(60), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %1165 = @func_9029() /* ty=(Tensor[(10, 5, 16), bool],) */;
  %1166 = cast(%var_9513, dtype="float32") /* ty=Tensor[(60), float32] */;
  %1167 = cast(%var_9513, dtype="int32") /* ty=Tensor[(60), int32] */;
  %1168 = reshape(%1166, newshape=[60, 1]) /* ty=Tensor[(60, 1), float32] */;
  %1169 = reshape(%1167, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), int32] */;
  %1170 = @func_5637(%1168, %1169) /* ty=(Tensor[(3072), int8], Tensor[(60, 1), float32], Tensor[(5, 2, 6), float32]) */;
  %1171 = @func_3920() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1172 = %1165.0;
  %1173 = %1170.0;
  %1174 = @func_2672() /* ty=Tensor[(10, 5, 16), float64] */;
  %1175 = %1171.0;
  (%1172, %1173, %var_9513, %1174, %1175)
}

def @func_4125() -> Tensor[(6, 10, 4), bool] {
  %1176 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %1176.2
}

def @func_7146(%var_7121: Tensor[(21), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(11, 3, 3), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(6, 10, 4), uint8]) {
  %1177 = @func_1917() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1178 = @func_4797() /* ty=(Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %1179 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1180 = cast(%var_7121, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1181 = cast(meta[relay.Constant][57] /* ty=Tensor[(3072), int8] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %1182 = reshape(%1180, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
  %1183 = reshape(%1181, newshape=[3072]) /* ty=Tensor[(3072), int8] */;
  %1184 = @func_5843(%1182, %1183) /* ty=(Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) */;
  %1185 = @func_3761() /* ty=(Tensor[(6, 10, 4), uint8],) */;
  %1186 = %1177.0;
  %1187 = %1178.1;
  %1188 = %1179.0;
  %1189 = %1184.2;
  %1190 = %1185.0;
  (%1186, %1187, %1188, %1189, %var_7121, meta[relay.Constant][57] /* ty=Tensor[(3072), int8] */, %1190)
}

def @func_8085(%var_8062: uint8, %var_8063: Tensor[(4, 1, 1), uint8]) -> (Tensor[(4, 1, 1), uint8],) {
  %1191 = cast(%var_8062, dtype="uint8") /* ty=uint8 */;
  %1192 = cast(%var_8063, dtype="uint8") /* ty=Tensor[(4, 1, 1), uint8] */;
  %1193 = bitwise_or(%1191, %1192) /* ty=Tensor[(4, 1, 1), uint8] */;
  (%1193,)
}

def @func_8330() -> Tensor[(6, 10, 4), float64] {
  %1194 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
  %1194.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10345() -> (Tensor[(10, 5, 16), uint8],) {
  %2 = fn () -> (Tensor[(10, 5, 16), uint8],) {
    %0 = @func_4983() /* ty=(Tensor[(10, 5, 16), uint8], Tensor[(195), int64]) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(10, 5, 16), uint8],) */
}

def @func_6329() -> Tensor[(6, 10, 4), uint8] {
  %4 = fn () -> Tensor[(6, 10, 4), uint8] {
    %3 = @func_3761() /* ty=(Tensor[(6, 10, 4), uint8],) */;
    %3.0
  };
  %4() /* ty=Tensor[(6, 10, 4), uint8] */
}

def @func_8782(%var_8780: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16]) {
  @func_8779(%var_8780) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16]) */
}

def @func_9940() -> (Tensor[(10, 5, 16), float64],) {
  %5 = @func_8411() /* ty=Tensor[(10, 5, 16), float64] */;
  (%5,)
}

def @func_10143(%var_10141: Tensor[(16, 80), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(6, 10, 4), float64], Tensor[(16, 80), uint32]) {
  @func_10140(%var_10141) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(6, 10, 4), float64], Tensor[(16, 80), uint32]) */
}

def @func_6714() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %6 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %7 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %8 = %6.0;
  %9 = %7.0;
  (%8, %9)
}

def @func_1092(%var_1059: Tensor[(1, 6, 4), float32], %var_1060: Tensor[(10, 6, 4), float32], %var_1072: Tensor[(195), int64], %var_1083: Tensor[(84), int32]) -> (Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) {
  %10 = cast(%var_1059, dtype="bool") /* ty=Tensor[(1, 6, 4), bool] */;
  %11 = cast(%var_1060, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(1280, 1), int16] */, dtype="int16") /* ty=Tensor[(1280, 1), int16] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(1280, 1), int16] */, dtype="int16") /* ty=Tensor[(1280, 1), int16] */;
  %14 = reshape(%12, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %15 = reshape(%13, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %16 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %17 = cast(%var_1072, dtype="int64") /* ty=Tensor[(195), int64] */;
  %18 = reshape(%16, newshape=[]) /* ty=int64 */;
  %19 = reshape(%17, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %20 = cast(%var_1083, dtype="int32") /* ty=Tensor[(84), int32] */;
  %21 = cast(5 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %22 = reshape(%20, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), int32] */;
  %23 = reshape(%21, newshape=[]) /* ty=int64 */;
  %24 = @func_544(%22, %23) /* ty=(Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %25 = less(%10, %11) /* ty=Tensor[(10, 6, 4), bool] */;
  %26 = @func_103(%14, %15) /* ty=Tensor[(5, 16, 16), int16] */;
  %27 = @func_409(%18, %19) /* ty=Tensor[(13, 1, 15), float32] */;
  %28 = %24.1;
  (%25, %26, meta[relay.Constant][0] /* ty=Tensor[(1280, 1), int16] */, %27, 5 /* ty=int64 */, %var_1072, %28, %var_1083)
}

def @func_3833() -> (Tensor[(6, 10, 4), float64],) {
  %29 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
  %30 = %29.0;
  (%30,)
}

def @func_7303() -> Tensor[(6, 10, 4), bool] {
  %32 = fn () -> Tensor[(6, 10, 4), bool] {
    %31 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %31.0
  };
  %32() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_11696() -> (Tensor[(6, 10, 4), bool],) {
  @func_11694() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_11694() -> (Tensor[(6, 10, 4), bool],) {
  %33 = @func_10755() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %34 = %33.2;
  (%34,)
}

def @func_7618() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  @func_7616() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_4407(%var_4405: Tensor[(2, 15, 9), float32]) -> (Tensor[(2, 15, 9), float32],) {
  @func_4404(%var_4405) /* ty=(Tensor[(2, 15, 9), float32],) */
}

def @func_4797() -> (Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) {
  %35 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %36 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %37 = %35.2;
  %38 = %36.0;
  (%37, %38)
}

def @func_5637(%var_5626: Tensor[(60, 1), float32], %var_5631: Tensor[(5, 2, 6), int32]) -> (Tensor[(3072), int8], Tensor[(60, 1), float32], Tensor[(5, 2, 6), float32]) {
  %39 = @func_5614() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) */;
  %40 = cast(%var_5626, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %41 = reshape(%40, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), float32] */;
  %42 = @func_5127(%41) /* ty=(int64, Tensor[(13, 15), int64], Tensor[(13, 1, 15), float32], Tensor[(5, 2, 6), int32], Tensor[(5, 2, 6), float64]) */;
  %43 = %42.3;
  %44 = cast(%var_5631, dtype="float32") /* ty=Tensor[(5, 2, 6), float32] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="float32") /* ty=Tensor[(5, 2, 6), float32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %48 = %39.2;
  %49 = power(%46, %47) /* ty=Tensor[(5, 2, 6), float32] */;
  (%48, %var_5626, %49)
}

def @func_2968() -> (Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) {
  %71 = fn () -> (Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) {
    %50 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 1, 11), float64] */, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
    %51 = acos(%50) /* ty=Tensor[(3, 1, 11), float32] */;
    %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
    %53 = cosh(%52) /* ty=Tensor[(3, 1, 11), float64] */;
    %54 = cast(%53, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
    %55 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%51, dtype="float32") /* ty=Tensor[(3, 1, 11), float32] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 1, 11), float64] */, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
    %59 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%53, dtype="uint8") /* ty=Tensor[(3, 1, 11), uint8] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %62 = multiply(%60, %61) /* ty=Tensor[(3, ?, 11), uint8] */;
    %63 = cast(%53, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
    %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%62, dtype="bool") /* ty=Tensor[(3, ?, 11), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %67 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
    %68 = divide(%56, %57) /* ty=Tensor[(3, ?, 11), float32] */;
    %69 = less(%65, %66) /* ty=Tensor[(3, ?, 11), bool] */;
    %70 = @func_2285() /* ty=Tensor[(6, 10, 4), bool] */;
    (%67, %68, %69, %70)
  };
  %71() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_11598() -> (Tensor[(6, 10, 4), bool],) {
  %72 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %73 = %72.0;
  (%73,)
}

def @func_5271(%var_5269: int64) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(13, 15), int64]) {
  @func_5268(%var_5269) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(13, 15), int64]) */
}

def @func_10237() -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(35), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(3, ?, 11), float32]) {
  @func_10235() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(35), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(3, ?, 11), float32]) */
}

def @func_12468() -> Tensor[(6, 10, 4), bool] {
  @func_2752() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_5614() -> (Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) {
  %74 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %75 = cast(meta[relay.Constant][2] /* ty=Tensor[(3072), int8] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %76 = reshape(%75, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), int8] */;
  %77 = %74.0;
  %78 = @func_4887(%76) /* ty=Tensor[(16, 16, 12), int8] */;
  (%77, %78, meta[relay.Constant][2] /* ty=Tensor[(3072), int8] */)
}

def @func_1831(%var_1804: Tensor[(2, 5, 12), float64], %var_1821: Tensor[(1280), int16]) -> (Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) {
  %79 = cast(%var_1804, dtype="float64") /* ty=Tensor[(2, 5, 12), float64] */;
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(21, 4), int32] */, dtype="int32") /* ty=Tensor[(21, 4), int32] */;
  %81 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %82 = reshape(%80, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), int32] */;
  %83 = reshape(%81, newshape=[]) /* ty=int64 */;
  %84 = @func_544(%82, %83) /* ty=(Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %85 = cast(%var_1821, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %86 = cast(%var_1821, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %87 = reshape(%85, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %88 = reshape(%86, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %89 = cast(-4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %90 = reshape(%89, newshape=[]) /* ty=int64 */;
  %91 = @func_798(%90) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) */;
  %92 = rsqrt(%79) /* ty=Tensor[(2, 5, 12), float64] */;
  %93 = %84.1;
  %94 = @func_103(%87, %88) /* ty=Tensor[(5, 16, 16), int16] */;
  %95 = %91.0;
  (%92, %93, meta[relay.Constant][3] /* ty=Tensor[(21, 4), int32] */, -4 /* ty=int64 */, %94, %var_1821, %95)
}

def @func_6147() -> (Tensor[(6, 10, 4), bool],) {
  %96 = @func_5351() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %97 = %96.3;
  (%97,)
}

def @func_13106() -> (Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(960), float64]) {
  %104 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(960), float64]) {
    %98 = @func_6147() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
    %100 = reshape(%99, newshape=[960]) /* ty=Tensor[(960), float64] */;
    %101 = @func_2031(%100) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */;
    %102 = %98.0;
    %103 = %101.3;
    (%102, %103, meta[relay.Constant][4] /* ty=Tensor[(960), float64] */)
  };
  %104() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(960), float64]) */
}

def @func_2102() -> (Tensor[(6, 10, 4), bool],) {
  %107 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %105 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %106 = %105.0;
    (%106,)
  };
  %107() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_8332() -> Tensor[(6, 10, 4), float64] {
  @func_8330() /* ty=Tensor[(6, 10, 4), float64] */
}

def @func_8622() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8]) {
  %108 = @func_6290() /* ty=Tensor[(6, 10, 4), bool] */;
  %109 = @func_6328() /* ty=Tensor[(6, 10, 4), uint8] */;
  (%108, %109)
}

def @func_6081() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(390), float64], int64, Tensor[(7, 5, 1), float32], Tensor[(35), float32]) {
  %110 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %112 = cast(2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %113 = reshape(%111, newshape=[13, 6, 5]) /* ty=Tensor[(13, 6, 5), float64] */;
  %114 = reshape(%112, newshape=[]) /* ty=int64 */;
  %115 = @func_2170(%113, %114) /* ty=(Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %117 = reshape(%116, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %118 = @func_815(%117) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %119 = %110.0;
  %120 = %115.2;
  %121 = %118.0;
  (%119, %120, meta[relay.Constant][5] /* ty=Tensor[(390), float64] */, 2 /* ty=int64 */, %121, meta[relay.Constant][6] /* ty=Tensor[(35), float32] */)
}

def @func_1919() -> (Tensor[(6, 10, 4), bool],) {
  @func_1917() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_10673() -> Tensor[(10, 5, 16), float64] {
  @func_10671() /* ty=Tensor[(10, 5, 16), float64] */
}

def @func_5268(%var_5262: int64) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(13, 15), int64]) {
  %122 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %123 = cast(%var_5262, dtype="int64") /* ty=int64 */;
  %124 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 15), int64] */, dtype="int64") /* ty=Tensor[(13, 15), int64] */;
  %125 = reshape(%123, newshape=[]) /* ty=int64 */;
  %126 = reshape(%124, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %127 = %122.0;
  %128 = @func_409(%125, %126) /* ty=Tensor[(13, 1, 15), float32] */;
  (%127, %128, %var_5262, meta[relay.Constant][7] /* ty=Tensor[(13, 15), int64] */)
}

def @func_9051() -> Tensor[(10, 5, 16), float64] {
  %130 = fn () -> Tensor[(10, 5, 16), float64] {
    %129 = @func_7583() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) */;
    %129.0
  };
  %130() /* ty=Tensor[(10, 5, 16), float64] */
}

def @func_5937() -> (Tensor[(10, 5, 16), float32],) {
  %131 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %132 = %131.4;
  %133 = cast(%132, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %134 = atan(%133) /* ty=Tensor[(10, 5, 16), float32] */;
  (%134,)
}

def @func_11896() -> Tensor[(6, 10, 4), bool] {
  @func_11894() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_5595() -> (Tensor[(6, 10, 4), bool],) {
  %135 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %136 = %135.2;
  (%136,)
}

def @func_13227(%var_13226: Tensor[(99), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(11, 3, 3), float64], Tensor[(99), float64]) {
  %145 = fn (%var_13216: Tensor[(99), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(11, 3, 3), float64], Tensor[(99), float64]) {
    %137 = @func_1594() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %138 = @func_11423() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(35), float32]) */;
    %139 = cast(%var_13216, dtype="float64") /* ty=Tensor[(99), float64] */;
    %140 = reshape(%139, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), float64] */;
    %141 = @func_5393(%140) /* ty=(Tensor[(11, 3, 3), float64],) */;
    %142 = %137.0;
    %143 = %138.4;
    %144 = %141.0;
    (%142, %143, %144, %var_13216)
  };
  %145(%var_13226) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(11, 3, 3), float64], Tensor[(99), float64]) */
}

def @func_7616() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %146 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %147 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %148 = %146.0;
  %149 = %147.0;
  (%148, %149)
}

def @func_5993() -> (Tensor[(6, 10, 4), bool],) {
  %152 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %150 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
    %151 = %150.2;
    (%151,)
  };
  %152() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_1492(%var_1475: Tensor[(195), int64]) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  %153 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %154 = cast(-1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %155 = cast(%var_1475, dtype="int64") /* ty=Tensor[(195), int64] */;
  %156 = reshape(%154, newshape=[]) /* ty=int64 */;
  %157 = reshape(%155, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %158 = %153.0;
  %159 = @func_409(%156, %157) /* ty=Tensor[(13, 1, 15), float32] */;
  (%158, %159, -1 /* ty=int64 */, %var_1475)
}

def @func_12052() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %164 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
    %160 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %161 = @func_10755() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %162 = %160.0;
    %163 = %161.1;
    (%162, %163)
  };
  %164() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */
}

def @func_4589(%var_4587: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) {
  @func_4586(%var_4587) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) */
}

def @func_3921() -> (Tensor[(6, 10, 4), bool],) {
  %167 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %165 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %166 = %165.0;
    (%166,)
  };
  %167() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_7888() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  @func_7886() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_7231(%var_7229: int8, %var_7230: Tensor[(10, 16, 3), int8]) -> (Tensor[(5, 8, 3), int8], Tensor[(10, 5, 16), float32], Tensor[(10, 16, 3), bool], Tensor[(6, 10, 4), float64], Tensor[(1280), int16]) {
  %180 = fn (%var_7190: int8, %var_7209: Tensor[(10, 16, 3), int8]) -> (Tensor[(5, 8, 3), int8], Tensor[(10, 5, 16), float32], Tensor[(10, 16, 3), bool], Tensor[(6, 10, 4), float64], Tensor[(1280), int16]) {
    %168 = cast(%var_7190, dtype="int8") /* ty=int8 */;
    %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 3), int8] */, dtype="int8") /* ty=Tensor[(5, 8, 3), int8] */;
    %170 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
    %171 = cast(%var_7190, dtype="bool") /* ty=bool */;
    %172 = cast(%var_7209, dtype="bool") /* ty=Tensor[(10, 16, 3), bool] */;
    %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
    %174 = reshape(%173, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %175 = @func_4586(%174) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) */;
    %176 = multiply(%168, %169) /* ty=Tensor[(5, 8, 3), int8] */;
    %177 = %170.0;
    %178 = not_equal(%171, %172) /* ty=Tensor[(10, 16, 3), bool] */;
    %179 = %175.4;
    (%176, %177, %178, %179, meta[relay.Constant][9] /* ty=Tensor[(1280), int16] */)
  };
  %180(%var_7229, %var_7230) /* ty=(Tensor[(5, 8, 3), int8], Tensor[(10, 5, 16), float32], Tensor[(10, 16, 3), bool], Tensor[(6, 10, 4), float64], Tensor[(1280), int16]) */
}

def @func_3458() -> (Tensor[(10, 5, 16), float64],) {
  %183 = fn () -> (Tensor[(10, 5, 16), float64],) {
    %181 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %182 = %181.0;
    (%182,)
  };
  %183() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_11344() -> Tensor[(6, 10, 4), bool] {
  @func_11342() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_2553() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) {
  %184 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %185 = @func_2475() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %186 = %184.2;
  %187 = %185.1;
  (%186, %187)
}

def @func_6011() -> Tensor[(6, 10, 4), bool] {
  @func_6009() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_6513(%var_6511: int64, %var_6512: Tensor[(195), int64]) -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  @func_6509(%var_6511, %var_6512) /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */
}

def @func_10567() -> Tensor[(6, 10, 4), bool] {
  @func_10565() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_7277(%var_7257: Tensor[(189), float32]) -> (int64, Tensor[(7, 5, 1), float32], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(35), float32], Tensor[(6, 10, 4), bool]) {
  %188 = @func_6816() /* ty=(int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) */;
  %189 = @func_6779() /* ty=Tensor[(35), float32] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(35), float32] */;
  %191 = reshape(%190, newshape=[35]) /* ty=Tensor[(35), float32] */;
  %192 = @func_6929(%191) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(7, 5, 1), float32], Tensor[(35), float32]) */;
  %193 = @func_5550() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %194 = cast(%var_7257, dtype="float32") /* ty=Tensor[(189), float32] */;
  %195 = reshape(%194, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), float32] */;
  %196 = cast(%189, dtype="float32") /* ty=Tensor[(35), float32] */;
  %197 = cos(%196) /* ty=Tensor[(35), float32] */;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(35), float32] */;
  %199 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %200 = %188.0;
  %201 = %192.2;
  %202 = %193.0;
  %203 = @func_6353(%195) /* ty=Tensor[(9, 3, 7), float32] */;
  %204 = log(%198) /* ty=Tensor[(35), float32] */;
  %205 = %199.1;
  (%200, %201, %202, %203, %var_7257, %204, %205)
}

def @func_8920() -> Tensor[(6, 10, 4), bool] {
  %206 = @func_1594() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %206.0
}

def @func_5530(%var_5528: Tensor[(390), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], int64, Tensor[(390), float64], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  @func_5527(%var_5528) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], int64, Tensor[(390), float64], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_1495(%var_1493: Tensor[(195), int64]) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  @func_1492(%var_1493) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */
}

def @func_10104() -> (Tensor[(6, 10, 4), bool],) {
  @func_10102() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_9789() -> Tensor[(6, 10, 4), bool] {
  %207 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %207.1
}

def @func_5352() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %215 = fn () -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
    %208 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %209 = @func_3833() /* ty=(Tensor[(6, 10, 4), float64],) */;
    %210 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %211 = @func_3308() /* ty=Tensor[(6, 10, 4), float64] */;
    %212 = %208.0;
    %213 = %209.0;
    %214 = %210.0;
    (%211, %212, %213, %214)
  };
  %215() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_5969() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) {
  %216 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %217 = cast(meta[relay.Constant][10] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %218 = reshape(%217, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %219 = @func_2031(%218) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */;
  %220 = %216.0;
  %221 = %219.0;
  (%220, %221, meta[relay.Constant][10] /* ty=Tensor[(960), float64] */)
}

def @func_9155(%var_9153: Tensor[(21), float32], %var_9154: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(99), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) {
  %234 = fn (%var_9131: Tensor[(21), float32], %var_9149: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(99), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) {
    %222 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %223 = cast(%var_9131, dtype="float32") /* ty=Tensor[(21), float32] */;
    %224 = cast(meta[relay.Constant][11] /* ty=Tensor[(3072), int8] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
    %225 = reshape(%223, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
    %226 = reshape(%224, newshape=[3072]) /* ty=Tensor[(3072), int8] */;
    %227 = @func_5843(%225, %226) /* ty=(Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) */;
    %228 = cast(%var_9149, dtype="float64") /* ty=Tensor[(960), float64] */;
    %229 = reshape(%228, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
    %230 = @func_1910(%229) /* ty=(Tensor[(8, 10, 12), float64],) */;
    %231 = %222.0;
    %232 = %227.3;
    %233 = %230.0;
    (%231, %232, %var_9131, meta[relay.Constant][11] /* ty=Tensor[(3072), int8] */, %233, %var_9149)
  };
  %234(%var_9153, %var_9154) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(99), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */
}

def @func_5597() -> (Tensor[(6, 10, 4), bool],) {
  @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_12808() -> (Tensor[(10, 5, 16), uint8], Tensor[(10, 5, 16), int64]) {
  @func_12806() /* ty=(Tensor[(10, 5, 16), uint8], Tensor[(10, 5, 16), int64]) */
}

def @func_10027() -> (Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32]) {
  %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %236 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %237 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %238 = rsqrt(%235) /* ty=Tensor[(16, 16, 4), float32] */;
  %239 = log(%236) /* ty=Tensor[(16, 16, 4), float32] */;
  %240 = log2(%237) /* ty=Tensor[(16, 16, 4), float32] */;
  (%238, %239, %240)
}

def @func_9004(%var_8945: Tensor[(5, 6, 9), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) {
  %241 = cast(%var_8945, dtype="float64") /* ty=Tensor[(5, 6, 9), float64] */;
  %242 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %243 = cast(meta[relay.Constant][13] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %244 = reshape(%243, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), float32] */;
  %245 = @func_7616() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %246 = exp(%241) /* ty=Tensor[(5, 6, 9), float64] */;
  %247 = %242.0;
  %248 = @func_6353(%244) /* ty=Tensor[(9, 3, 7), float32] */;
  %249 = %245.0;
  (%246, %247, %248, meta[relay.Constant][13] /* ty=Tensor[(189), float32] */, %249)
}

def @func_10826(%var_10824: Tensor[(1, 3, 12), int8], %var_10825: Tensor[(15, 3, 12), int8]) -> (Tensor[(6, 10, 4), bool], Tensor[(15, 3, 12), float32]) {
  @func_10822(%var_10824, %var_10825) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(15, 3, 12), float32]) */
}

def @func_409(%var_344: int64, %var_345: Tensor[(13, 1, 15), int64]) -> Tensor[(13, 1, 15), float32] {
  %250 = cast(%var_344, dtype="int64") /* ty=int64 */;
  %251 = cast(%var_345, dtype="int64") /* ty=Tensor[(13, 1, 15), int64] */;
  %252 = left_shift(%250, %251) /* ty=Tensor[(13, 1, 15), int64] */;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(13, 1, 15), float64] */;
  %254 = atanh(%253) /* ty=Tensor[(13, 1, 15), float64] */;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(13, 1, 15), float32] */;
  cosh(%255) /* ty=Tensor[(13, 1, 15), float32] */
}

def @func_10521() -> (Tensor[(6, 10, 4), bool],) {
  %258 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %256 = @func_9395() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %257 = %256.0;
    (%257,)
  };
  %258() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_11525() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  @func_11523() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_11342() -> Tensor[(6, 10, 4), bool] {
  @func_9789() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_9990(%var_9988: float32) -> (Tensor[(13, 1, 3), float32], Tensor[(10, 5, 16), float64]) {
  @func_9987(%var_9988) /* ty=(Tensor[(13, 1, 3), float32], Tensor[(10, 5, 16), float64]) */
}

def @func_8085(%var_8062: uint8, %var_8063: Tensor[(4, 1, 1), uint8]) -> (Tensor[(4, 1, 1), uint8],) {
  %259 = cast(%var_8062, dtype="uint8") /* ty=uint8 */;
  %260 = cast(%var_8063, dtype="uint8") /* ty=Tensor[(4, 1, 1), uint8] */;
  %261 = bitwise_or(%259, %260) /* ty=Tensor[(4, 1, 1), uint8] */;
  (%261,)
}

def @func_5241() -> (Tensor[(6, 10, 4), bool],) {
  %262 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %263 = %262.0;
  (%263,)
}

def @func_13234() -> (Tensor[(10, 5, 16), float64],) {
  %266 = fn () -> (Tensor[(10, 5, 16), float64],) {
    %264 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %265 = %264.0;
    (%265,)
  };
  %266() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_12158(%var_12156: int8, %var_12157: Tensor[(8, 16, 9), int8]) -> Tensor[(8, 16, 9), float32] {
  @func_12154(%var_12156, %var_12157) /* ty=Tensor[(8, 16, 9), float32] */
}

def @func_9734() -> (Tensor[(6, 10, 4), bool],) {
  @func_9732() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_12028(%var_12026: Tensor[(10, 5, 16), float64], %var_12027: Tensor[(10, 5, 16), uint8]) -> (Tensor[(10, 5, 16), uint32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float32], Tensor[(6, 10, 4), bool]) {
  @func_12024(%var_12026, %var_12027) /* ty=(Tensor[(10, 5, 16), uint32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float32], Tensor[(6, 10, 4), bool]) */
}

def @func_13265() -> (Tensor[(10, 5, 16), float64],) {
  @func_13263() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_1018() -> Tensor[(6, 10, 4), bool] {
  %267 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %267.0
}

def @func_1304() -> (Tensor[(10, 5, 16), float64],) {
  %268 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 5, 16), float64] */;
  %269 = cos(%268) /* ty=Tensor[(10, 5, 16), float64] */;
  (%269,)
}

def @func_9029() -> (Tensor[(10, 5, 16), bool],) {
  %270 = @func_7029() /* ty=(Tensor[(10, 5, 16), bool],) */;
  %271 = %270.0;
  (%271,)
}

def @func_5218(%var_5213: Tensor[(120), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(8, 10, 12), float64], Tensor[(5, 16, 16), int16], Tensor[(120), float64], Tensor[(1280), int16]) {
  %272 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %273 = cast(meta[relay.Constant][15] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %274 = reshape(%273, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
  %275 = @func_1910(%274) /* ty=(Tensor[(8, 10, 12), float64],) */;
  %276 = %275.0;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(8, 10, 12), float64] */;
  %278 = cast(%var_5213, dtype="float64") /* ty=Tensor[(120), float64] */;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %280 = reshape(%278, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float64] */;
  %281 = reshape(%279, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %282 = @func_1831(%280, %281) /* ty=(Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) */;
  %283 = %272.0;
  %284 = sin(%277) /* ty=Tensor[(8, 10, 12), float64] */;
  %285 = %282.4;
  (%283, meta[relay.Constant][15] /* ty=Tensor[(960), float64] */, %284, %285, %var_5213, meta[relay.Constant][16] /* ty=Tensor[(1280), int16] */)
}

def @func_10554(%var_10553: Tensor[(120), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], Tensor[(120), float64], Tensor[(1280), int16]) {
  %293 = fn (%var_10549: Tensor[(120), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], Tensor[(120), float64], Tensor[(1280), int16]) {
    %286 = cast(%var_10549, dtype="float64") /* ty=Tensor[(120), float64] */;
    %287 = cast(meta[relay.Constant][17] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
    %288 = reshape(%286, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float64] */;
    %289 = reshape(%287, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %290 = @func_1831(%288, %289) /* ty=(Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) */;
    %291 = @func_8920() /* ty=Tensor[(6, 10, 4), bool] */;
    %292 = %290.1;
    (%291, %292, %var_10549, meta[relay.Constant][17] /* ty=Tensor[(1280), int16] */)
  };
  %293(%var_10553) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], Tensor[(120), float64], Tensor[(1280), int16]) */
}

def @func_1098(%var_1094: Tensor[(1, 6, 4), float32], %var_1095: Tensor[(10, 6, 4), float32], %var_1096: Tensor[(195), int64], %var_1097: Tensor[(84), int32]) -> (Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) {
  @func_1092(%var_1094, %var_1095, %var_1096, %var_1097) /* ty=(Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) */
}

def @func_10140(%var_10112: Tensor[(16, 80), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(6, 10, 4), float64], Tensor[(16, 80), uint32]) {
  %294 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %295 = cast(%var_10112, dtype="int16") /* ty=Tensor[(16, 80), int16] */;
  %296 = reshape(%295, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %297 = @func_5734(%296) /* ty=(int64, Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(1280), int16], Tensor[(5, 16, 16), int16], Tensor[(30, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %298 = @func_4139() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %299 = cast(%var_10112, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %300 = acosh(%299) /* ty=Tensor[(16, 80), float32] */;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(16, 80), float32] */;
  %302 = atanh(%301) /* ty=Tensor[(16, 80), float32] */;
  %303 = cast(%300, dtype="uint32") /* ty=Tensor[(16, 80), uint32] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(2), int32] */;
  %305 = cast(%302, dtype="uint32") /* ty=Tensor[(16, 80), uint32] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %307 = %294.0;
  %308 = %297.4;
  %309 = %298.0;
  %310 = right_shift(%305, %306) /* ty=Tensor[(16, 80), uint32] */;
  (%307, %308, %309, %310)
}

def @func_11425() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(35), float32]) {
  @func_11423() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(35), float32]) */
}

def @func_9422(%var_9420: Tensor[(9, 12, 14), int32], %var_9421: Tensor[(9, 12, 14), int32]) -> (Tensor[(9, 12, 14), int32],) {
  %316 = fn (%var_9414: Tensor[(9, 12, 14), int32], %var_9415: Tensor[(9, 12, 14), int32]) -> (Tensor[(9, 12, 14), int32],) {
    %311 = cast(%var_9415, dtype="int32") /* ty=Tensor[(9, 12, 14), int32] */;
    %312 = shape_of(%var_9414, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%var_9414, dtype="int32") /* ty=Tensor[(9, 12, 14), int32] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %315 = multiply(%313, %314) /* ty=Tensor[(9, 12, 14), int32] */;
    (%315,)
  };
  %316(%var_9420, %var_9421) /* ty=(Tensor[(9, 12, 14), int32],) */
}

def @func_7280(%var_7278: Tensor[(189), float32]) -> (int64, Tensor[(7, 5, 1), float32], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(35), float32], Tensor[(6, 10, 4), bool]) {
  @func_7277(%var_7278) /* ty=(int64, Tensor[(7, 5, 1), float32], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(35), float32], Tensor[(6, 10, 4), bool]) */
}

def @func_9031() -> (Tensor[(10, 5, 16), bool],) {
  @func_9029() /* ty=(Tensor[(10, 5, 16), bool],) */
}

def @func_8089(%var_8087: uint8, %var_8088: Tensor[(4, 1, 1), uint8]) -> (Tensor[(4, 1, 1), uint8],) {
  @func_8085(%var_8087, %var_8088) /* ty=(Tensor[(4, 1, 1), uint8],) */
}

def @func_2287() -> Tensor[(6, 10, 4), bool] {
  @func_2285() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_7434(%var_7433: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), float32], Tensor[(2, 11, 12), float64]) {
  %323 = fn (%var_7404: Tensor[(2, 11, 12), float64]) -> (Tensor[(2, 11, 12), float32], Tensor[(2, 11, 12), float64]) {
    %317 = cast(%var_7404, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
    %318 = acos(%317) /* ty=Tensor[(2, 11, 12), float64] */;
    %319 = cast(%318, dtype="float32") /* ty=Tensor[(2, 11, 12), float32] */;
    %320 = cast(%318, dtype="float64") /* ty=Tensor[(2, 11, 12), float64] */;
    %321 = asin(%319) /* ty=Tensor[(2, 11, 12), float32] */;
    %322 = acosh(%320) /* ty=Tensor[(2, 11, 12), float64] */;
    (%321, %322)
  };
  %323(%var_7433) /* ty=(Tensor[(2, 11, 12), float32], Tensor[(2, 11, 12), float64]) */
}

def @func_13417() -> Tensor[(6, 10, 4), bool] {
  @func_13415() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_5616() -> (Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) {
  @func_5614() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) */
}

def @func_6392(%var_6382: Tensor[(1280), int16]) -> (Tensor[(10, 5, 16), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) {
  %324 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %325 = cast(%var_6382, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %326 = cast(%var_6382, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %327 = reshape(%325, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %328 = reshape(%326, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %329 = %324.4;
  %330 = @func_103(%327, %328) /* ty=Tensor[(5, 16, 16), int16] */;
  (%329, %330, %var_6382)
}

def @func_7886() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %331 = @func_2596() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %332 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %333 = @func_6115() /* ty=Tensor[(6, 10, 4), bool] */;
  %334 = %331.0;
  %335 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
  %336 = @func_6115() /* ty=Tensor[(6, 10, 4), bool] */;
  %337 = %332.2;
  (%333, %334, %335, %336, %337)
}

def @func_2408() -> (Tensor[(10, 5, 16), float64],) {
  %338 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %339 = %338.0;
  (%339,)
}

def @func_8476() -> Tensor[(3, ?, 11), float32] {
  @func_8474() /* ty=Tensor[(3, ?, 11), float32] */
}

def @func_8209() -> (Tensor[(6, 10, 4), bool],) {
  @func_8207() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_4061() -> (Tensor[(6, 10, 4), bool],) {
  @func_4059() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_8411() -> Tensor[(10, 5, 16), float64] {
  %340 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %340.0
}

def @func_13114() -> Tensor[(6, 10, 4), bool] {
  %341 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %341.1
}

def @func_8779(%var_8765: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16]) {
  %342 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %343 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %344 = cast(%var_8765, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %345 = reshape(%344, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %346 = @func_4586(%345) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) */;
  %347 = %342.0;
  %348 = %343.0;
  %349 = %346.3;
  (%347, %348, %349, %var_8765)
}

def @func_9665() -> (Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) {
  %350 = @func_5614() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) */;
  %351 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %352 = %350.2;
  %353 = %351.1;
  (%352, %353)
}

def @func_2752() -> Tensor[(6, 10, 4), bool] {
  %354 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %354.1
}

def @func_7021(%var_7020: Tensor[(13, 14, 13), float32]) -> (Tensor[(13, 14, 13), float32], Tensor[(6, 10, 4), bool]) {
  %359 = fn (%var_7004: Tensor[(13, 14, 13), float32]) -> (Tensor[(13, 14, 13), float32], Tensor[(6, 10, 4), bool]) {
    %355 = cast(%var_7004, dtype="float32") /* ty=Tensor[(13, 14, 13), float32] */;
    %356 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %357 = atan(%355) /* ty=Tensor[(13, 14, 13), float32] */;
    %358 = %356.0;
    (%357, %358)
  };
  %359(%var_7020) /* ty=(Tensor[(13, 14, 13), float32], Tensor[(6, 10, 4), bool]) */
}

def @func_11662(%var_11661: Tensor[(16, 16, 4), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(16, 16, 4), float32]) {
  %369 = fn (%var_11625: Tensor[(16, 16, 4), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(16, 16, 4), float32]) {
    %360 = @func_6856() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %361 = @func_10027() /* ty=(Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32]) */;
    %362 = %361.0;
    %363 = cast(%var_11625, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
    %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%362, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %367 = %360.1;
    %368 = divide(%365, %366) /* ty=Tensor[(16, 16, 4), float32] */;
    (%367, %368)
  };
  %369(%var_11661) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(16, 16, 4), float32]) */
}

def @func_9396() -> (Tensor[(6, 10, 4), bool],) {
  %372 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %370 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %371 = %370.0;
    (%371,)
  };
  %372() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_1550() -> (Tensor[(10, 5, 16), float64],) {
  @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_8043() -> (Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) {
  %377 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) {
    %373 = @func_6261() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %374 = @func_6977() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
    %375 = %373.0;
    %376 = %374.1;
    (%375, %376)
  };
  %377() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */
}

def @func_1208() -> (Tensor[(6, 10, 4), bool],) {
  %378 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  (%378,)
}

def @func_6856() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %379 = @func_5992() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %380 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %381 = %379.0;
  %382 = %380.0;
  (%381, %382)
}

def @func_9298(%var_9296: Tensor[(10, 5, 16), float32]) -> (Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), int64]) {
  @func_9295(%var_9296) /* ty=(Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), int64]) */
}

def @func_4799() -> (Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) {
  @func_4797() /* ty=(Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_851() -> (Tensor[(6, 10, 4), bool],) {
  %385 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %383 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %384 = %383.0;
    (%384,)
  };
  %385() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_8709() -> (Tensor[(6, 10, 4), bool], int64) {
  %390 = fn () -> (Tensor[(6, 10, 4), bool], int64) {
    %386 = @func_8293() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) */;
    %387 = @func_6816() /* ty=(int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) */;
    %388 = %386.1;
    %389 = %387.0;
    (%388, %389)
  };
  %390() /* ty=(Tensor[(6, 10, 4), bool], int64) */
}

def @func_5395(%var_5394: Tensor[(11, 3, 3), float64]) -> (Tensor[(11, 3, 3), float64],) {
  %393 = fn (%var_5365: Tensor[(11, 3, 3), float64]) -> (Tensor[(11, 3, 3), float64],) {
    %391 = cast(%var_5365, dtype="float64") /* ty=Tensor[(11, 3, 3), float64] */;
    %392 = erf(%391) /* ty=Tensor[(11, 3, 3), float64] */;
    (%392,)
  };
  %393(%var_5394) /* ty=(Tensor[(11, 3, 3), float64],) */
}

def @func_8891() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %400 = fn () -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
    %394 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %395 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %396 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %397 = %394.0;
    %398 = %395.0;
    %399 = %396.0;
    (%397, %398, %399)
  };
  %400() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */
}

def @func_11771() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  @func_11769() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_2903() -> (Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) {
  @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */
}

def @func_11881() -> (Tensor[(35), float32], Tensor[(8, 5, 4), uint64], Tensor[(10, 5, 16), bool], Tensor[(60), float32]) {
  %408 = fn () -> (Tensor[(35), float32], Tensor[(8, 5, 4), uint64], Tensor[(10, 5, 16), bool], Tensor[(60), float32]) {
    %401 = @func_8042() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
    %402 = cast(meta[relay.Constant][18] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %403 = reshape(%402, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %404 = @func_9545(%403) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(3072), int8], Tensor[(60), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %405 = @func_10385() /* ty=Tensor[(35), float32] */;
    %406 = %401.1;
    %407 = %404.0;
    (%405, %406, %407, meta[relay.Constant][18] /* ty=Tensor[(60), float32] */)
  };
  %408() /* ty=(Tensor[(35), float32], Tensor[(8, 5, 4), uint64], Tensor[(10, 5, 16), bool], Tensor[(60), float32]) */
}

def @func_2033(%var_2032: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) {
  %419 = fn (%var_2001: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) {
    %409 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %410 = %409.0;
    %411 = cast(%410, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %412 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %413 = cast(%var_2001, dtype="float64") /* ty=Tensor[(960), float64] */;
    %414 = reshape(%413, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
    %415 = @func_1910(%414) /* ty=(Tensor[(8, 10, 12), float64],) */;
    %416 = erf(%411) /* ty=Tensor[(6, 10, 4), float32] */;
    %417 = %412.0;
    %418 = %415.0;
    (%416, %417, %418, %var_2001)
  };
  %419(%var_2032) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */
}

def @func_12267() -> (Tensor[(7, 5, 1), float32],) {
  %422 = fn () -> (Tensor[(7, 5, 1), float32],) {
    %420 = @func_10235() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(35), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(3, ?, 11), float32]) */;
    %421 = %420.1;
    (%421,)
  };
  %422() /* ty=(Tensor[(7, 5, 1), float32],) */
}

def @func_2397() -> (Tensor[(10, 5, 16), float64],) {
  %425 = fn () -> (Tensor[(10, 5, 16), float64],) {
    %423 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %424 = %423.0;
    (%424,)
  };
  %425() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_7584() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) {
  %435 = fn () -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) {
    %426 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %427 = cast(meta[relay.Constant][19] /* ty=Tensor[(84), int32] */, dtype="int32") /* ty=Tensor[(84), int32] */;
    %428 = reshape(%427, newshape=[84]) /* ty=Tensor[(84), int32] */;
    %429 = @func_2651(%428) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 6, 4), bool], Tensor[(12, 2), float32], Tensor[(195), int64], Tensor[(84), int32]) */;
    %430 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %431 = %426.0;
    %432 = @func_6328() /* ty=Tensor[(6, 10, 4), uint8] */;
    %433 = %429.2;
    %434 = %430.0;
    (%431, %432, %433, meta[relay.Constant][19] /* ty=Tensor[(84), int32] */, %434)
  };
  %435() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) */
}

def @func_9195() -> (Tensor[(6, 10, 4), bool],) {
  %436 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %437 = %436.0;
  (%437,)
}

def @func_1570() -> (Tensor[(6, 10, 4), bool],) {
  %440 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %438 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %439 = %438.0;
    (%439,)
  };
  %440() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_12904(%var_12902: uint64, %var_12903: Tensor[(13, 13, 1), uint64]) -> (Tensor[(13, 13, 1), uint64], Tensor[(6, 10, 4), bool]) {
  %446 = fn (%var_12861: uint64, %var_12862: Tensor[(13, 13, 1), uint64]) -> (Tensor[(13, 13, 1), uint64], Tensor[(6, 10, 4), bool]) {
    %441 = cast(%var_12861, dtype="uint64") /* ty=uint64 */;
    %442 = cast(%var_12862, dtype="uint64") /* ty=Tensor[(13, 13, 1), uint64] */;
    %443 = @func_9732() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %444 = bitwise_xor(%441, %442) /* ty=Tensor[(13, 13, 1), uint64] */;
    %445 = %443.0;
    (%444, %445)
  };
  %446(%var_12902, %var_12903) /* ty=(Tensor[(13, 13, 1), uint64], Tensor[(6, 10, 4), bool]) */
}

def @func_12806() -> (Tensor[(10, 5, 16), uint8], Tensor[(10, 5, 16), int64]) {
  %447 = @func_10344() /* ty=(Tensor[(10, 5, 16), uint8],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %450 = reshape(%449, newshape=[10, 5, 16]) /* ty=Tensor[(10, 5, 16), float32] */;
  %451 = @func_9295(%450) /* ty=(Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), int64]) */;
  %452 = %451.1;
  (%448, %452)
}

def @func_544(%var_533: Tensor[(7, 4, 3), int32], %var_541: int64) -> (Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  %453 = cast(%var_533, dtype="int32") /* ty=Tensor[(7, 4, 3), int32] */;
  %454 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(7, 4, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 4, 3), int32] */, dtype="int32") /* ty=Tensor[(7, 4, 3), int32] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %457 = cast(%var_541, dtype="int64") /* ty=int64 */;
  %458 = cast(meta[relay.Constant][21] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %459 = reshape(%457, newshape=[]) /* ty=int64 */;
  %460 = reshape(%458, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %461 = logical_xor(%455, %456) /* ty=Tensor[(7, 4, 3), int32] */;
  %462 = @func_409(%459, %460) /* ty=Tensor[(13, 1, 15), float32] */;
  (%461, %462, %var_541, meta[relay.Constant][21] /* ty=Tensor[(195), int64] */)
}

def @func_12227() -> Tensor[(10, 5, 16), float32] {
  %463 = @func_10584() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %463.0
}

def @func_9593() -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) {
  %464 = cast(meta[relay.Constant][22] /* ty=Tensor[(189), float32] */, dtype="float32") /* ty=Tensor[(189), float32] */;
  %465 = reshape(%464, newshape=[189]) /* ty=Tensor[(189), float32] */;
  %466 = @func_7277(%465) /* ty=(int64, Tensor[(7, 5, 1), float32], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(35), float32], Tensor[(6, 10, 4), bool]) */;
  %467 = @func_7323() /* ty=Tensor[(6, 10, 4), bool] */;
  %468 = %466.1;
  %469 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
  (%467, %468, meta[relay.Constant][22] /* ty=Tensor[(189), float32] */, %469)
}

def @func_6744() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %474 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
    %470 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %471 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %472 = %470.0;
    %473 = %471.0;
    (%472, %473)
  };
  %474() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */
}

def @func_10102() -> (Tensor[(6, 10, 4), bool],) {
  %475 = @func_8708() /* ty=(Tensor[(6, 10, 4), bool], int64) */;
  %476 = %475.0;
  (%476,)
}

def @func_9942() -> (Tensor[(10, 5, 16), float64],) {
  @func_9940() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_4984() -> (Tensor[(10, 5, 16), uint8], Tensor[(195), int64]) {
  %485 = fn () -> (Tensor[(10, 5, 16), uint8], Tensor[(195), int64]) {
    %477 = @func_2672() /* ty=Tensor[(10, 5, 16), float64] */;
    %478 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 5, 16), float64] */, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
    %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%477, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %482 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
    %483 = minimum(%480, %481) /* ty=Tensor[(10, 5, 16), uint8] */;
    %484 = %482.3;
    (%483, %484)
  };
  %485() /* ty=(Tensor[(10, 5, 16), uint8], Tensor[(195), int64]) */
}

def @func_10029() -> (Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32]) {
  @func_10027() /* ty=(Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32], Tensor[(16, 16, 4), float32]) */
}

def @func_12763(%var_12761: Tensor[(16, 1, 15), float64]) -> (Tensor[(16, 15, 15), uint8],) {
  @func_12760(%var_12761) /* ty=(Tensor[(16, 15, 15), uint8],) */
}

def @func_13068() -> (Tensor[(6, 7, 16), float32], Tensor[(6, 10, 4), bool]) {
  %490 = fn () -> (Tensor[(6, 7, 16), float32], Tensor[(6, 10, 4), bool]) {
    %486 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 16), float32] */;
    %487 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %488 = log10(%486) /* ty=Tensor[(6, 7, 16), float32] */;
    %489 = %487.0;
    (%488, %489)
  };
  %490() /* ty=(Tensor[(6, 7, 16), float32], Tensor[(6, 10, 4), bool]) */
}

def @func_2476() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) {
  %503 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) {
    %491 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %492 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
    %493 = cast(%492, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
    %494 = sinh(%493) /* ty=Tensor[(10, 5, 16), float32] */;
    %495 = cast(%494, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
    %496 = cosh(%495) /* ty=Tensor[(10, 5, 16), float32] */;
    %497 = cast(%494, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
    %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%496, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %501 = %491.1;
    %502 = logical_and(%499, %500) /* ty=Tensor[(10, 5, 16), bool] */;
    (%501, %502)
  };
  %503() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */
}

def @func_3310() -> Tensor[(6, 10, 4), float64] {
  @func_3308() /* ty=Tensor[(6, 10, 4), float64] */
}

def @func_8164() -> Tensor[(10, 5, 16), float32] {
  %505 = fn () -> Tensor[(10, 5, 16), float32] {
    %504 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
    %504.0
  };
  %505() /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_9612(%var_9607: Tensor[(15, 4, 13), uint16], %var_9608: Tensor[(15, 4, 13), uint16]) -> Tensor[(15, 4, 13), uint16] {
  %506 = cast(%var_9608, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
  %507 = shape_of(%var_9607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_9607, dtype="uint16") /* ty=Tensor[(15, 4, 13), uint16] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%508, %509) /* ty=Tensor[(15, 4, 13), uint16] */
}

def @func_6252() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %510 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %511 = @func_5910() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %512 = %510.0;
  %513 = %511.0;
  (%512, %513)
}

def @func_5641(%var_5639: Tensor[(60, 1), float32], %var_5640: Tensor[(5, 2, 6), int32]) -> (Tensor[(3072), int8], Tensor[(60, 1), float32], Tensor[(5, 2, 6), float32]) {
  @func_5637(%var_5639, %var_5640) /* ty=(Tensor[(3072), int8], Tensor[(60, 1), float32], Tensor[(5, 2, 6), float32]) */
}

def @func_9616(%var_9614: Tensor[(15, 4, 13), uint16], %var_9615: Tensor[(15, 4, 13), uint16]) -> Tensor[(15, 4, 13), uint16] {
  @func_9612(%var_9614, %var_9615) /* ty=Tensor[(15, 4, 13), uint16] */
}

def @func_8413() -> Tensor[(10, 5, 16), float64] {
  @func_8411() /* ty=Tensor[(10, 5, 16), float64] */
}

def @func_5127(%var_5066: Tensor[(5, 2, 6), float32]) -> (int64, Tensor[(13, 15), int64], Tensor[(13, 1, 15), float32], Tensor[(5, 2, 6), int32], Tensor[(5, 2, 6), float64]) {
  %514 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 15), int64] */, dtype="int64") /* ty=Tensor[(13, 15), int64] */;
  %515 = reshape(%514, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %516 = @func_1492(%515) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %517 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %518 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 2, 6), float32] */;
  %519 = tan(%518) /* ty=Tensor[(1, 2, 6), float32] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %521 = cast(%var_5066, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %522 = add(%520, %521) /* ty=Tensor[(5, 2, 6), float64] */;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %524 = cast(%519, dtype="float64") /* ty=Tensor[(1, 2, 6), float64] */;
  %525 = multiply(%523, %524) /* ty=Tensor[(5, 2, 6), float64] */;
  %526 = cast(%525, dtype="int32") /* ty=Tensor[(5, 2, 6), int32] */;
  %527 = cast(%519, dtype="int32") /* ty=Tensor[(1, 2, 6), int32] */;
  %528 = cast(%var_5066, dtype="float64") /* ty=Tensor[(5, 2, 6), float64] */;
  %529 = %516.2;
  %530 = %517.2;
  %531 = left_shift(%526, %527) /* ty=Tensor[(5, 2, 6), int32] */;
  %532 = log10(%528) /* ty=Tensor[(5, 2, 6), float64] */;
  (%529, meta[relay.Constant][25] /* ty=Tensor[(13, 15), int64] */, %530, %531, %532)
}

def @func_9758() -> Tensor[(6, 10, 4), float64] {
  %534 = fn () -> Tensor[(6, 10, 4), float64] {
    %533 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
    %533.0
  };
  %534() /* ty=Tensor[(6, 10, 4), float64] */
}

def @func_10950(%var_10949: float32) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], float32, Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64], Tensor[(6, 10, 4), bool]) {
  %551 = fn (%var_10894: float32) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], float32, Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64], Tensor[(6, 10, 4), bool]) {
    %535 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %536 = @func_8207() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %537 = cast(%var_10894, dtype="float32") /* ty=float32 */;
    %538 = reshape(%537, newshape=[]) /* ty=float32 */;
    %539 = @func_9987(%538) /* ty=(Tensor[(13, 1, 3), float32], Tensor[(10, 5, 16), float64]) */;
    %540 = @func_4797() /* ty=(Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
    %541 = @func_3920() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %542 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
    %543 = %535.0;
    %544 = %536.0;
    %545 = %539.1;
    %546 = %540.0;
    %547 = @func_7323() /* ty=Tensor[(6, 10, 4), bool] */;
    %548 = %541.0;
    %549 = @func_2620() /* ty=Tensor[(8, 5, 4), uint64] */;
    %550 = %542.3;
    (%543, %544, %545, %var_10894, %546, %547, %548, %549, %550)
  };
  %551(%var_10949) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], float32, Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64], Tensor[(6, 10, 4), bool]) */
}

def @func_3276() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) {
  %552 = @func_2596() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %553 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %554 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %555 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %556 = %555.1;
  %557 = cast(%556, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %558 = %552.0;
  %559 = %553.0;
  %560 = %554.2;
  %561 = sigmoid(%557) /* ty=Tensor[(10, 5, 16), float32] */;
  (%558, %559, %560, %561)
}

def @func_2410() -> (Tensor[(10, 5, 16), float64],) {
  @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_1910(%var_1894: Tensor[(8, 10, 12), float64]) -> (Tensor[(8, 10, 12), float64],) {
  %562 = cast(%var_1894, dtype="float64") /* ty=Tensor[(8, 10, 12), float64] */;
  %563 = atan(%562) /* ty=Tensor[(8, 10, 12), float64] */;
  (%563,)
}

def @func_6083() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(390), float64], int64, Tensor[(7, 5, 1), float32], Tensor[(35), float32]) {
  @func_6081() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(390), float64], int64, Tensor[(7, 5, 1), float32], Tensor[(35), float32]) */
}

def @func_5551() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %567 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
    %564 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %565 = @func_4125() /* ty=Tensor[(6, 10, 4), bool] */;
    %566 = %564.0;
    (%565, %566)
  };
  %567() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */
}

def @func_1917() -> (Tensor[(6, 10, 4), bool],) {
  %568 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %569 = %568.0;
  (%569,)
}

def @func_12065() -> Tensor[(11, 5, 2), float64] {
  %570 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  asinh(%570) /* ty=Tensor[(11, 5, 2), float64] */
}

def @func_8390() -> (Tensor[(6, 10, 4), bool],) {
  %571 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %572 = %571.0;
  (%572,)
}

def @func_1940() -> (Tensor[(6, 10, 4), bool],) {
  %574 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %573 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
    (%573,)
  };
  %574() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_5910() -> (Tensor[(6, 10, 4), bool],) {
  %575 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  (%575,)
}

def @func_11570() -> (Tensor[(6, 10, 4), bool],) {
  @func_11568() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_2901() -> (Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) {
  %576 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %577 = %576.0;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %579 = cast(meta[relay.Constant][28] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
  %580 = reshape(%579, newshape=[195]) /* ty=Tensor[(195), int64] */;
  %581 = @func_1492(%580) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
  %582 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %583 = sigmoid(%578) /* ty=Tensor[(6, 10, 4), float32] */;
  %584 = @func_2620() /* ty=Tensor[(8, 5, 4), uint64] */;
  %585 = %581.1;
  %586 = %582.1;
  (%583, %584, %585, meta[relay.Constant][28] /* ty=Tensor[(195), int64] */, %586)
}

def @func_9987(%var_9958: float32) -> (Tensor[(13, 1, 3), float32], Tensor[(10, 5, 16), float64]) {
  %587 = cast(%var_9958, dtype="float32") /* ty=float32 */;
  %588 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 3), float32] */;
  %589 = @func_6816() /* ty=(int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) */;
  %590 = floor_divide(%587, %588) /* ty=Tensor[(13, 1, 3), float32] */;
  %591 = %589.1;
  (%590, %591)
}

def @func_1020() -> Tensor[(6, 10, 4), bool] {
  @func_1018() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_1210() -> (Tensor[(6, 10, 4), bool],) {
  @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_3587() -> (Tensor[(6, 10, 4), float64],) {
  %592 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %593 = %592.0;
  (%593,)
}

def @func_4059() -> (Tensor[(6, 10, 4), bool],) {
  %594 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %595 = %594.0;
  (%595,)
}

def @func_1306() -> (Tensor[(10, 5, 16), float64],) {
  @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */
}

def @func_6395(%var_6393: Tensor[(1280), int16]) -> (Tensor[(10, 5, 16), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) {
  @func_6392(%var_6393) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */
}

def @func_9704() -> Tensor[(10, 5, 16), float64] {
  %597 = fn () -> Tensor[(10, 5, 16), float64] {
    %596 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %596.0
  };
  %597() /* ty=Tensor[(10, 5, 16), float64] */
}

def @func_10822(%var_10779: Tensor[(1, 3, 12), int8], %var_10780: Tensor[(15, 3, 12), int8]) -> (Tensor[(6, 10, 4), bool], Tensor[(15, 3, 12), float32]) {
  %598 = @func_9732() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %599 = cast(%var_10779, dtype="int8") /* ty=Tensor[(1, 3, 12), int8] */;
  %600 = cast(%var_10780, dtype="int8") /* ty=Tensor[(15, 3, 12), int8] */;
  %601 = minimum(%599, %600) /* ty=Tensor[(15, 3, 12), int8] */;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %603 = sin(%602) /* ty=Tensor[(15, 3, 12), float32] */;
  %604 = cast(%var_10780, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %605 = sinh(%604) /* ty=Tensor[(15, 3, 12), float32] */;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %607 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%603, dtype="float32") /* ty=Tensor[(15, 3, 12), float32] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %610 = %598.0;
  %611 = floor_divide(%608, %609) /* ty=Tensor[(15, 3, 12), float32] */;
  (%610, %611)
}

def @func_4889(%var_4888: Tensor[(16, 16, 12), int8]) -> Tensor[(16, 16, 12), int8] {
  %616 = fn (%var_4880: Tensor[(16, 16, 12), int8]) -> Tensor[(16, 16, 12), int8] {
    %612 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 16, 12), int8] */, dtype="int8") /* ty=Tensor[(16, 16, 12), int8] */;
    %613 = shape_of(%var_4880, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(%var_4880, dtype="int8") /* ty=Tensor[(16, 16, 12), int8] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    multiply(%614, %615) /* ty=Tensor[(16, 16, 12), int8] */
  };
  %616(%var_4888) /* ty=Tensor[(16, 16, 12), int8] */
}

def @func_106(%var_104: Tensor[(5, 16, 16), int16], %var_105: Tensor[(5, 16, 16), int16]) -> Tensor[(5, 16, 16), int16] {
  %621 = fn (%var_89: Tensor[(5, 16, 16), int16], %var_90: Tensor[(5, 16, 16), int16]) -> Tensor[(5, 16, 16), int16] {
    %617 = cast(%var_90, dtype="int16") /* ty=Tensor[(5, 16, 16), int16] */;
    %618 = shape_of(%var_89, dtype="int32") /* ty=Tensor[(3), int32] */;
    %619 = cast(%var_89, dtype="int16") /* ty=Tensor[(5, 16, 16), int16] */;
    %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    logical_xor(%619, %620) /* ty=Tensor[(5, 16, 16), int16] */
  };
  %621(%var_104, %var_105) /* ty=Tensor[(5, 16, 16), int16] */
}

def @func_5843(%var_5796: Tensor[(1, 3, 7), float32], %var_5806: Tensor[(3072), int8]) -> (Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) {
  %622 = cast(%var_5806, dtype="int8") /* ty=Tensor[(3072), int8] */;
  %623 = reshape(%622, newshape=[16, 16, 12]) /* ty=Tensor[(16, 16, 12), int8] */;
  %624 = cast(meta[relay.Constant][31] /* ty=Tensor[(99), float64] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %625 = reshape(%624, newshape=[11, 3, 3]) /* ty=Tensor[(11, 3, 3), float64] */;
  %626 = @func_5393(%625) /* ty=(Tensor[(11, 3, 3), float64],) */;
  %627 = cast(%var_5796, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %628 = acos(%627) /* ty=Tensor[(1, 3, 7), float32] */;
  %629 = cast(%var_5796, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %630 = sinh(%629) /* ty=Tensor[(1, 3, 7), float32] */;
  %631 = cast(%630, dtype="bool") /* ty=Tensor[(1, 3, 7), bool] */;
  %632 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%628, dtype="bool") /* ty=Tensor[(1, 3, 7), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = @func_4887(%623) /* ty=Tensor[(16, 16, 12), int8] */;
  %636 = %626.0;
  %637 = logical_or(%633, %634) /* ty=Tensor[(?, 3, 7), bool] */;
  (%635, %var_5806, %636, meta[relay.Constant][31] /* ty=Tensor[(99), float64] */, %637)
}

def @func_5898(%var_5896: Tensor[(10, 5, 16), float64]) -> (Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  @func_5895(%var_5896) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_8330() -> Tensor[(6, 10, 4), float64] {
  %638 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
  %638.0
}

def @func_11185() -> Tensor[(6, 10, 4), bool] {
  %640 = fn () -> Tensor[(6, 10, 4), bool] {
    %639 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %639.1
  };
  %640() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_6716() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  @func_6714() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_2596() -> (Tensor[(6, 10, 4), bool],) {
  %641 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %642 = %641.0;
  (%642,)
}

def @func_2426() -> Tensor[(6, 10, 4), bool] {
  %644 = fn () -> Tensor[(6, 10, 4), bool] {
    %643 = @func_1917() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %643.0
  };
  %644() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_7098(%var_7097: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), uint8], Tensor[(10, 5, 16), float32], Tensor[(1280), int16], Tensor[(1280), int16]) {
  %655 = fn (%var_7088: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), uint8], Tensor[(10, 5, 16), float32], Tensor[(1280), int16], Tensor[(1280), int16]) {
    %645 = @func_3761() /* ty=(Tensor[(6, 10, 4), uint8],) */;
    %646 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %647 = %646.0;
    %648 = cast(%647, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
    %649 = cast(%var_7088, dtype="int16") /* ty=Tensor[(1280), int16] */;
    %650 = reshape(%649, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %651 = @func_4858(%650) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) */;
    %652 = %645.0;
    %653 = log2(%648) /* ty=Tensor[(10, 5, 16), float32] */;
    %654 = %651.1;
    (%652, %653, %654, %var_7088)
  };
  %655(%var_7097) /* ty=(Tensor[(6, 10, 4), uint8], Tensor[(10, 5, 16), float32], Tensor[(1280), int16], Tensor[(1280), int16]) */
}

def @func_3308() -> Tensor[(6, 10, 4), float64] {
  @func_1688() /* ty=Tensor[(6, 10, 4), float64] */
}

def @func_2173(%var_2171: Tensor[(13, 6, 5), float64], %var_2172: int64) -> (Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) {
  %669 = fn (%var_2131: Tensor[(13, 6, 5), float64], %var_2163: int64) -> (Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) {
    %656 = cast(%var_2131, dtype="float64") /* ty=Tensor[(13, 6, 5), float64] */;
    %657 = log2(%656) /* ty=Tensor[(13, 6, 5), float64] */;
    %658 = cast(%657, dtype="float64") /* ty=Tensor[(13, 6, 5), float64] */;
    %659 = cast(%var_2163, dtype="int64") /* ty=int64 */;
    %660 = cast(meta[relay.Constant][32] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
    %661 = reshape(%659, newshape=[]) /* ty=int64 */;
    %662 = reshape(%660, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
    %663 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %664 = asin(%658) /* ty=Tensor[(13, 6, 5), float64] */;
    %665 = @func_1185() /* ty=Tensor[(6, 10, 4), bool] */;
    %666 = @func_1185() /* ty=Tensor[(6, 10, 4), bool] */;
    %667 = @func_409(%661, %662) /* ty=Tensor[(13, 1, 15), float32] */;
    %668 = %663.1;
    (%664, %665, %666, %667, %var_2163, meta[relay.Constant][32] /* ty=Tensor[(195), int64] */, %668)
  };
  %669(%var_2171, %var_2172) /* ty=(Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) */
}

def @func_6290() -> Tensor[(6, 10, 4), bool] {
  @func_2425() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_12470() -> Tensor[(6, 10, 4), bool] {
  @func_12468() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_716() -> (Tensor[(6, 10, 4), bool],) {
  %672 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %670 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %671 = %670.0;
    (%671,)
  };
  %672() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_11568() -> (Tensor[(6, 10, 4), bool],) {
  %673 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %674 = %673.0;
  (%674,)
}

def @func_12186() -> (Tensor[(6, 10, 4), bool],) {
  %675 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %676 = %675.0;
  (%676,)
}

def @func_2653(%var_2652: Tensor[(84), int32]) -> (Tensor[(6, 10, 4), bool], Tensor[(10, 6, 4), bool], Tensor[(12, 2), float32], Tensor[(195), int64], Tensor[(84), int32]) {
  %689 = fn (%var_2636: Tensor[(84), int32]) -> (Tensor[(6, 10, 4), bool], Tensor[(10, 6, 4), bool], Tensor[(12, 2), float32], Tensor[(195), int64], Tensor[(84), int32]) {
    %677 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %678 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 2), float32] */;
    %679 = %677.0;
    %680 = cast(%679, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %681 = cast(meta[relay.Constant][34] /* ty=Tensor[(195), int64] */, dtype="int64") /* ty=Tensor[(195), int64] */;
    %682 = cast(%var_2636, dtype="int32") /* ty=Tensor[(84), int32] */;
    %683 = reshape(%678, newshape=[1, 6, 4]) /* ty=Tensor[(1, 6, 4), float32] */;
    %684 = reshape(%680, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
    %685 = reshape(%681, newshape=[195]) /* ty=Tensor[(195), int64] */;
    %686 = reshape(%682, newshape=[84]) /* ty=Tensor[(84), int32] */;
    %687 = @func_1092(%683, %684, %685, %686) /* ty=(Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) */;
    %688 = %687.0;
    (%679, %688, meta[relay.Constant][33] /* ty=Tensor[(12, 2), float32] */, meta[relay.Constant][34] /* ty=Tensor[(195), int64] */, %var_2636)
  };
  %689(%var_2652) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 6, 4), bool], Tensor[(12, 2), float32], Tensor[(195), int64], Tensor[(84), int32]) */
}

def @func_3423() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  @func_3421() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_5243() -> (Tensor[(6, 10, 4), bool],) {
  @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_800(%var_799: int64) -> (Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) {
  %698 = fn (%var_792: int64) -> (Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) {
    %690 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %691 = cast(meta[relay.Constant][35] /* ty=Tensor[(42, 2), int32] */, dtype="int32") /* ty=Tensor[(42, 2), int32] */;
    %692 = cast(%var_792, dtype="int64") /* ty=int64 */;
    %693 = reshape(%691, newshape=[7, 4, 3]) /* ty=Tensor[(7, 4, 3), int32] */;
    %694 = reshape(%692, newshape=[]) /* ty=int64 */;
    %695 = @func_544(%693, %694) /* ty=(Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */;
    %696 = %690.0;
    %697 = %695.3;
    (%696, %697, meta[relay.Constant][35] /* ty=Tensor[(42, 2), int32] */, %var_792)
  };
  %698(%var_799) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) */
}

def @func_11029() -> (Tensor[(6, 10, 4), bool],) {
  %701 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %699 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %700 = %699.0;
    (%700,)
  };
  %701() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_5971() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) {
  @func_5969() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) */
}

def @func_9667() -> (Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) {
  @func_9665() /* ty=(Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) */
}

def @func_8392() -> (Tensor[(6, 10, 4), bool],) {
  @func_8390() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_413(%var_411: int64, %var_412: Tensor[(13, 1, 15), int64]) -> Tensor[(13, 1, 15), float32] {
  @func_409(%var_411, %var_412) /* ty=Tensor[(13, 1, 15), float32] */
}

def @func_4126() -> Tensor[(6, 10, 4), bool] {
  %703 = fn () -> Tensor[(6, 10, 4), bool] {
    %702 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
    %702.2
  };
  %703() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_12067() -> Tensor[(11, 5, 2), float64] {
  @func_12065() /* ty=Tensor[(11, 5, 2), float64] */
}

def @func_12610() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %707 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
    %704 = @func_8708() /* ty=(Tensor[(6, 10, 4), bool], int64) */;
    %705 = @func_2752() /* ty=Tensor[(6, 10, 4), bool] */;
    %706 = %704.0;
    (%705, %706)
  };
  %707() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_2741(%var_2740: Tensor[(120), float64]) -> (Tensor[(10, 5, 16), bool], Tensor[(?, 14, 11), uint64], Tensor[(1, 14, 11), float32], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(120), float64], Tensor[(1280), int16]) {
  %736 = fn (%var_2735: Tensor[(120), float64]) -> (Tensor[(10, 5, 16), bool], Tensor[(?, 14, 11), uint64], Tensor[(1, 14, 11), float32], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(120), float64], Tensor[(1280), int16]) {
    %708 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
    %709 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 14, 11), float32] */;
    %710 = tan(%709) /* ty=Tensor[(1, 14, 11), float32] */;
    %711 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 14, 11), float32] */, dtype="bool") /* ty=Tensor[(1, 14, 11), bool] */;
    %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(%710, dtype="bool") /* ty=Tensor[(1, 14, 11), bool] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %715 = greater(%713, %714) /* ty=Tensor[(?, 14, 11), bool] */;
    %716 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 14, 11), float32] */, dtype="uint64") /* ty=Tensor[(1, 14, 11), uint64] */;
    %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %718 = cast(%715, dtype="uint64") /* ty=Tensor[(?, 14, 11), uint64] */;
    %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %720 = cast(%710, dtype="float32") /* ty=Tensor[(1, 14, 11), float32] */;
    %721 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %722 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %723 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %724 = cast(%var_2735, dtype="float64") /* ty=Tensor[(120), float64] */;
    %725 = cast(meta[relay.Constant][37] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
    %726 = reshape(%724, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float64] */;
    %727 = reshape(%725, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %728 = @func_1831(%726, %727) /* ty=(Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) */;
    %729 = %708.1;
    %730 = minimum(%718, %719) /* ty=Tensor[(?, 14, 11), uint64] */;
    %731 = asin(%720) /* ty=Tensor[(1, 14, 11), float32] */;
    %732 = %721.1;
    %733 = %722.0;
    %734 = %723.0;
    %735 = %728.2;
    (%729, %730, %731, %732, %733, %734, %735, %var_2735, meta[relay.Constant][37] /* ty=Tensor[(1280), int16] */)
  };
  %736(%var_2740) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(?, 14, 11), uint64], Tensor[(1, 14, 11), float32], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(120), float64], Tensor[(1280), int16]) */
}

def @func_4347() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) {
  %741 = fn () -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) {
    %737 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
    %738 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
    %739 = %737.1;
    %740 = %738.0;
    (%739, %740)
  };
  %741() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) */
}

def @func_4586(%var_4472: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), int8]) {
  %742 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %743 = cast(%var_4472, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %744 = reshape(%743, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %745 = @func_2342(%744) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
  %746 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %747 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %748 = %747.0;
  %749 = @func_2071() /* ty=Tensor[(10, 5, 16), float64] */;
  %750 = cast(%749, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %751 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%748, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %754 = @func_4059() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %755 = cast(%749, dtype="int8") /* ty=Tensor[(10, 5, 16), int8] */;
  %756 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%748, dtype="int8") /* ty=Tensor[(10, 5, 16), int8] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %759 = %742.0;
  %760 = %745.1;
  %761 = %746.1;
  %762 = @func_3308() /* ty=Tensor[(6, 10, 4), float64] */;
  %763 = greater_equal(%752, %753) /* ty=Tensor[(10, 5, 16), bool] */;
  %764 = %754.0;
  %765 = bitwise_or(%757, %758) /* ty=Tensor[(10, 5, 16), int8] */;
  (%759, %760, %var_4472, %761, %762, %763, %764, %765)
}

def @func_11127() -> Tensor[(6, 10, 4), bool] {
  %767 = fn () -> Tensor[(6, 10, 4), bool] {
    %766 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %766.0
  };
  %767() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_9605(%var_9604: Tensor[(7, 8, 2), float32]) -> (Tensor[(7, 8, 2), float32],) {
  %770 = fn (%var_9600: Tensor[(7, 8, 2), float32]) -> (Tensor[(7, 8, 2), float32],) {
    %768 = cast(%var_9600, dtype="float32") /* ty=Tensor[(7, 8, 2), float32] */;
    %769 = acosh(%768) /* ty=Tensor[(7, 8, 2), float32] */;
    (%769,)
  };
  %770(%var_9604) /* ty=(Tensor[(7, 8, 2), float32],) */
}

def @func_12154(%var_12141: int8, %var_12142: Tensor[(8, 16, 9), int8]) -> Tensor[(8, 16, 9), float32] {
  %771 = cast(%var_12141, dtype="int8") /* ty=int8 */;
  %772 = cast(%var_12142, dtype="int8") /* ty=Tensor[(8, 16, 9), int8] */;
  %773 = minimum(%771, %772) /* ty=Tensor[(8, 16, 9), int8] */;
  %774 = cast(%var_12142, dtype="float32") /* ty=Tensor[(8, 16, 9), float32] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="float32") /* ty=Tensor[(8, 16, 9), float32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%776, %777) /* ty=Tensor[(8, 16, 9), float32] */
}

def @func_2598() -> (Tensor[(6, 10, 4), bool],) {
  @func_2596() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_12229() -> Tensor[(10, 5, 16), float32] {
  @func_12227() /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_2622() -> Tensor[(8, 5, 4), uint64] {
  @func_2620() /* ty=Tensor[(8, 5, 4), uint64] */
}

def @func_2620() -> Tensor[(8, 5, 4), uint64] {
  %778 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %779 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 5, 4), uint64] */, dtype="uint64") /* ty=Tensor[(8, 5, 4), uint64] */;
  add(%778, %779) /* ty=Tensor[(8, 5, 4), uint64] */
}

def @func_9007(%var_9005: Tensor[(5, 6, 9), float64]) -> (Tensor[(5, 6, 9), float64], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) {
  @func_9004(%var_9005) /* ty=(Tensor[(5, 6, 9), float64], Tensor[(6, 10, 4), bool], Tensor[(9, 3, 7), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) */
}

def @func_5062() -> (Tensor[(6, 10, 4), bool],) {
  %782 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %780 = @func_3421() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
    %781 = %780.1;
    (%781,)
  };
  %782() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_8294() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) {
  %788 = fn () -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) {
    %783 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
    %784 = @func_5241() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %785 = %783.0;
    %786 = %784.0;
    %787 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
    (%785, %786, %787)
  };
  %788() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) */
}

def @func_2555() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) {
  @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */
}

def @func_1277() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %795 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
    %789 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %790 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %791 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %792 = %789.0;
    %793 = %790.0;
    %794 = %791.0;
    (%792, %793, %794)
  };
  %795() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_10756() -> (Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %804 = fn () -> (Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
    %796 = @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */;
    %797 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %798 = @func_9395() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %799 = @func_4059() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %800 = %796.0;
    %801 = %797.0;
    %802 = %798.0;
    %803 = %799.0;
    (%800, %801, %802, %803)
  };
  %804() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_4228(%var_4227: Tensor[(10, 5, 16), bool]) -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), uint16], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %820 = fn (%var_4181: Tensor[(10, 5, 16), bool]) -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), uint16], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
    %805 = @func_2475() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
    %806 = %805.1;
    %807 = cast(%var_4181, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
    %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(%806, dtype="uint16") /* ty=Tensor[(10, 5, 16), uint16] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %811 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %812 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %813 = @func_4125() /* ty=Tensor[(6, 10, 4), bool] */;
    %814 = multiply(%809, %810) /* ty=Tensor[(10, 5, 16), uint16] */;
    %815 = %811.0;
    %816 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
    %817 = @func_3318() /* ty=Tensor[(6, 10, 4), bool] */;
    %818 = %812.0;
    %819 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
    (%813, %814, %815, %816, %817, %818, %819)
  };
  %820(%var_4227) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), uint16], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_8474() -> Tensor[(3, ?, 11), float32] {
  %821 = @func_2967() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(3, ?, 11), float32], Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
  %821.1
}

def @func_6292() -> Tensor[(6, 10, 4), bool] {
  @func_6290() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_6009() -> Tensor[(6, 10, 4), bool] {
  %822 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %822.0
}

def @func_10565() -> Tensor[(6, 10, 4), bool] {
  %823 = @func_9665() /* ty=(Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) */;
  %823.1
}

def @func_5895(%var_5879: Tensor[(10, 5, 16), float64]) -> (Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %824 = @func_1445() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %825 = %824.0;
  %826 = cast(%var_5879, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%825, dtype="bool") /* ty=Tensor[(10, 5, 16), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %830 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
  %831 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %832 = logical_or(%828, %829) /* ty=Tensor[(10, 5, 16), bool] */;
  %833 = %830.2;
  %834 = %831.0;
  (%832, %833, %834)
}

def @func_3969() -> (Tensor[(6, 10, 4), bool],) {
  %837 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %835 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %836 = %835.0;
    (%836,)
  };
  %837() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_9547(%var_9546: Tensor[(60), float32]) -> (Tensor[(10, 5, 16), bool], Tensor[(3072), int8], Tensor[(60), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %849 = fn (%var_9513: Tensor[(60), float32]) -> (Tensor[(10, 5, 16), bool], Tensor[(3072), int8], Tensor[(60), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
    %838 = @func_9029() /* ty=(Tensor[(10, 5, 16), bool],) */;
    %839 = cast(%var_9513, dtype="float32") /* ty=Tensor[(60), float32] */;
    %840 = cast(%var_9513, dtype="int32") /* ty=Tensor[(60), int32] */;
    %841 = reshape(%839, newshape=[60, 1]) /* ty=Tensor[(60, 1), float32] */;
    %842 = reshape(%840, newshape=[5, 2, 6]) /* ty=Tensor[(5, 2, 6), int32] */;
    %843 = @func_5637(%841, %842) /* ty=(Tensor[(3072), int8], Tensor[(60, 1), float32], Tensor[(5, 2, 6), float32]) */;
    %844 = @func_3920() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %845 = %838.0;
    %846 = %843.0;
    %847 = @func_2672() /* ty=Tensor[(10, 5, 16), float64] */;
    %848 = %844.0;
    (%845, %846, %var_9513, %847, %848)
  };
  %849(%var_9546) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(3072), int8], Tensor[(60), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_13263() -> (Tensor[(10, 5, 16), float64],) {
  %850 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %851 = %850.0;
  (%851,)
}

def @func_13131() -> Tensor[(6, 10, 4), bool] {
  @func_13129() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_13386() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) {
  @func_13384() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) */
}

def @func_11523() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %852 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %853 = @func_6009() /* ty=Tensor[(6, 10, 4), bool] */;
  %854 = @func_10671() /* ty=Tensor[(10, 5, 16), float64] */;
  %855 = %852.0;
  (%853, %854, %855)
}

def @func_9791() -> Tensor[(6, 10, 4), bool] {
  @func_9789() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_11252(%var_11251: Tensor[(6, 6, 1), float64]) -> (Tensor[(6, 6, 1), float64], Tensor[(6, 10, 4), bool]) {
  %860 = fn (%var_11221: Tensor[(6, 6, 1), float64]) -> (Tensor[(6, 6, 1), float64], Tensor[(6, 10, 4), bool]) {
    %856 = cast(%var_11221, dtype="float64") /* ty=Tensor[(6, 6, 1), float64] */;
    %857 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %858 = sin(%856) /* ty=Tensor[(6, 6, 1), float64] */;
    %859 = %857.0;
    (%858, %859)
  };
  %860(%var_11251) /* ty=(Tensor[(6, 6, 1), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_7974() -> Tensor[(6, 10, 4), bool] {
  %861 = @func_7662() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %861.0
}

def @func_2342(%var_2339: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) {
  %862 = @func_1939() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %863 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %864 = cast(%var_2339, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %865 = cast(%var_2339, dtype="int16") /* ty=Tensor[(1280), int16] */;
  %866 = reshape(%864, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %867 = reshape(%865, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), int16] */;
  %868 = %862.0;
  %869 = %863.0;
  %870 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
  %871 = @func_103(%866, %867) /* ty=Tensor[(5, 16, 16), int16] */;
  (%868, %869, %870, %871, %var_2339)
}

def @func_12188() -> (Tensor[(6, 10, 4), bool],) {
  @func_12186() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_12205() -> Tensor[(6, 10, 4), bool] {
  %873 = fn () -> Tensor[(6, 10, 4), bool] {
    %872 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %872.0
  };
  %873() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_9163() -> (Tensor[(6, 10, 4), bool],) {
  @func_9161() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_6929(%var_6925: Tensor[(35), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(7, 5, 1), float32], Tensor[(35), float32]) {
  %874 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %875 = @func_2901() /* ty=(Tensor[(6, 10, 4), float32], Tensor[(8, 5, 4), uint64], Tensor[(13, 1, 15), float32], Tensor[(195), int64], Tensor[(10, 5, 16), bool]) */;
  %876 = cast(%var_6925, dtype="float32") /* ty=Tensor[(35), float32] */;
  %877 = reshape(%876, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %878 = @func_815(%877) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %879 = %874.0;
  %880 = %875.3;
  %881 = %878.0;
  (%879, %880, %881, %var_6925)
}

def @func_5736(%var_5735: Tensor[(1280), int16]) -> (int64, Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(1280), int16], Tensor[(5, 16, 16), int16], Tensor[(30, 4), float64], Tensor[(6, 10, 4), bool]) {
  %895 = fn (%var_5683: Tensor[(1280), int16]) -> (int64, Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(1280), int16], Tensor[(5, 16, 16), int16], Tensor[(30, 4), float64], Tensor[(6, 10, 4), bool]) {
    %882 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
    %883 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %884 = cast(%var_5683, dtype="int16") /* ty=Tensor[(1280), int16] */;
    %885 = reshape(%884, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %886 = @func_4858(%885) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) */;
    %887 = cast(meta[relay.Constant][40] /* ty=Tensor[(30, 4), float64] */, dtype="float64") /* ty=Tensor[(30, 4), float64] */;
    %888 = reshape(%887, newshape=[120]) /* ty=Tensor[(120), float64] */;
    %889 = @func_5218(%888) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(8, 10, 12), float64], Tensor[(5, 16, 16), int16], Tensor[(120), float64], Tensor[(1280), int16]) */;
    %890 = %882.1;
    %891 = %883.0;
    %892 = %886.1;
    %893 = %889.3;
    %894 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
    (%890, %891, %892, %var_5683, %893, meta[relay.Constant][40] /* ty=Tensor[(30, 4), float64] */, %894)
  };
  %895(%var_5735) /* ty=(int64, Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(1280), int16], Tensor[(5, 16, 16), int16], Tensor[(30, 4), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_8624() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8]) {
  @func_8622() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8]) */
}

def @func_7812() -> (Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64], Tensor[(10, 5, 16), float64]) {
  %904 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64], Tensor[(10, 5, 16), float64]) {
    %896 = @func_3968() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %897 = cast(meta[relay.Constant][41] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
    %898 = reshape(%897, newshape=[8, 10, 12]) /* ty=Tensor[(8, 10, 12), float64] */;
    %899 = @func_1910(%898) /* ty=(Tensor[(8, 10, 12), float64],) */;
    %900 = @func_2396() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %901 = %896.0;
    %902 = %899.0;
    %903 = %900.0;
    (%901, %902, meta[relay.Constant][41] /* ty=Tensor[(960), float64] */, %903)
  };
  %904() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64], Tensor[(10, 5, 16), float64]) */
}

def @func_6570() -> (Tensor[(6, 10, 4), bool],) {
  %907 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %905 = @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %906 = %905.0;
    (%906,)
  };
  %907() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_4141() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  @func_4139() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_10235() -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(35), float32], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(3, ?, 11), float32]) {
  %908 = @func_6856() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %909 = cast(meta[relay.Constant][42] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %910 = reshape(%909, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
  %911 = @func_815(%910) /* ty=(Tensor[(7, 5, 1), float32],) */;
  %912 = @func_9646() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %913 = @func_8390() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %914 = %908.1;
  %915 = %911.0;
  %916 = %912.1;
  %917 = %913.0;
  %918 = @func_8474() /* ty=Tensor[(3, ?, 11), float32] */;
  (%914, %915, meta[relay.Constant][42] /* ty=Tensor[(35), float32] */, %916, %917, %918)
}

def @func_7029() -> (Tensor[(10, 5, 16), bool],) {
  %919 = @func_2475() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
  %920 = %919.1;
  (%920,)
}

def @func_7976() -> Tensor[(6, 10, 4), bool] {
  @func_7974() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_9487() -> (Tensor[(6, 10, 4), bool],) {
  %922 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %921 = @func_3318() /* ty=Tensor[(6, 10, 4), bool] */;
    (%921,)
  };
  %922() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_5130(%var_5128: Tensor[(5, 2, 6), float32]) -> (int64, Tensor[(13, 15), int64], Tensor[(13, 1, 15), float32], Tensor[(5, 2, 6), int32], Tensor[(5, 2, 6), float64]) {
  @func_5127(%var_5128) /* ty=(int64, Tensor[(13, 15), int64], Tensor[(13, 1, 15), float32], Tensor[(5, 2, 6), int32], Tensor[(5, 2, 6), float64]) */
}

def @func_6858() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  @func_6856() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_5527(%var_5475: Tensor[(390), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], int64, Tensor[(390), float64], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %923 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %924 = cast(%var_5475, dtype="float64") /* ty=Tensor[(390), float64] */;
  %925 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %926 = reshape(%924, newshape=[13, 6, 5]) /* ty=Tensor[(13, 6, 5), float64] */;
  %927 = reshape(%925, newshape=[]) /* ty=int64 */;
  %928 = @func_2170(%926, %927) /* ty=(Tensor[(13, 6, 5), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(6, 10, 4), bool]) */;
  %929 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
  %930 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %931 = @func_2752() /* ty=Tensor[(6, 10, 4), bool] */;
  %932 = %923.0;
  %933 = %928.4;
  %934 = %929.4;
  %935 = %930.0;
  (%931, %932, %933, %var_5475, 4 /* ty=int64 */, %934, %935)
}

def @func_1835(%var_1833: Tensor[(2, 5, 12), float64], %var_1834: Tensor[(1280), int16]) -> (Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) {
  @func_1831(%var_1833, %var_1834) /* ty=(Tensor[(2, 5, 12), float64], Tensor[(13, 1, 15), float32], Tensor[(21, 4), int32], int64, Tensor[(5, 16, 16), int16], Tensor[(1280), int16], Tensor[(6, 10, 4), bool]) */
}

def @func_9161() -> (Tensor[(6, 10, 4), bool],) {
  %936 = @func_6977() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
  %937 = %936.0;
  (%937,)
}

def @func_7520(%var_7517: Tensor[(24), float32], %var_7518: Tensor[(195), int64], %var_7519: Tensor[(84), int32]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8], Tensor[(6, 10, 4), bool], Tensor[(32, 40), int64], Tensor[(24), float32], Tensor[(195), int64], Tensor[(84), int32], Tensor[(1280, ?), int32]) {
  %969 = fn (%var_7498: Tensor[(24), float32], %var_7499: Tensor[(195), int64], %var_7500: Tensor[(84), int32]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8], Tensor[(6, 10, 4), bool], Tensor[(32, 40), int64], Tensor[(24), float32], Tensor[(195), int64], Tensor[(84), int32], Tensor[(1280, ?), int32]) {
    %938 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %939 = @func_6404() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %940 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %941 = cast(meta[relay.Constant][43] /* ty=Tensor[(32, 40), int16] */, dtype="int16") /* ty=Tensor[(32, 40), int16] */;
    %942 = reshape(%941, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %943 = @func_6392(%942) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
    %944 = %943.1;
    %945 = cast(%944, dtype="int64") /* ty=Tensor[(5, 16, 16), int64] */;
    %946 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(32, 40), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %947 = cast(meta[relay.Constant][43] /* ty=Tensor[(32, 40), int16] */, dtype="int64") /* ty=Tensor[(32, 40), int64] */;
    %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %949 = cast(%var_7498, dtype="float32") /* ty=Tensor[(24), float32] */;
    %950 = %940.0;
    %951 = cast(%950, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %952 = cast(%var_7499, dtype="int64") /* ty=Tensor[(195), int64] */;
    %953 = cast(%var_7500, dtype="int32") /* ty=Tensor[(84), int32] */;
    %954 = reshape(%949, newshape=[1, 6, 4]) /* ty=Tensor[(1, 6, 4), float32] */;
    %955 = reshape(%951, newshape=[10, 6, 4]) /* ty=Tensor[(10, 6, 4), float32] */;
    %956 = reshape(%952, newshape=[195]) /* ty=Tensor[(195), int64] */;
    %957 = reshape(%953, newshape=[84]) /* ty=Tensor[(84), int32] */;
    %958 = @func_1092(%954, %955, %956, %957) /* ty=(Tensor[(10, 6, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280, 1), int16], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64], Tensor[(13, 1, 15), float32], Tensor[(84), int32]) */;
    %959 = %958.2;
    %960 = cast(meta[relay.Constant][43] /* ty=Tensor[(32, 40), int16] */, dtype="int32") /* ty=Tensor[(32, 40), int32] */;
    %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(2), int32] */;
    %962 = cast(%959, dtype="int32") /* ty=Tensor[(1280, 1), int32] */;
    %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %964 = %938.1;
    %965 = %939.1;
    %966 = @func_6328() /* ty=Tensor[(6, 10, 4), uint8] */;
    %967 = minimum(%947, %948) /* ty=Tensor[(32, 40), int64] */;
    %968 = bitwise_or(%962, %963) /* ty=Tensor[(1280, ?), int32] */;
    (%964, %965, %966, %950, %967, %var_7498, %var_7499, %var_7500, %968)
  };
  %969(%var_7517, %var_7518, %var_7519) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8], Tensor[(6, 10, 4), bool], Tensor[(32, 40), int64], Tensor[(24), float32], Tensor[(195), int64], Tensor[(84), int32], Tensor[(1280, ?), int32]) */
}

def @func_9595() -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) {
  @func_9593() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(189), float32], Tensor[(10, 5, 16), float64]) */
}

def @func_4860(%var_4859: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) {
  %982 = fn (%var_4819: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) {
    %970 = @func_1917() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %971 = cast(meta[relay.Constant][44] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %972 = reshape(%971, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
    %973 = @func_4404(%972) /* ty=(Tensor[(2, 15, 9), float32],) */;
    %974 = cast(%var_4819, dtype="int16") /* ty=Tensor[(1280), int16] */;
    %975 = reshape(%974, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %976 = @func_2342(%975) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
    %977 = %976.3;
    %978 = cast(%977, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
    %979 = %970.0;
    %980 = %973.0;
    %981 = atan(%978) /* ty=Tensor[(5, 16, 16), float32] */;
    (%979, %var_4819, %980, meta[relay.Constant][44] /* ty=Tensor[(270), float32] */, %981)
  };
  %982(%var_4859) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(1280), int16], Tensor[(2, 15, 9), float32], Tensor[(270), float32], Tensor[(5, 16, 16), float32]) */
}

def @func_6149() -> (Tensor[(6, 10, 4), bool],) {
  @func_6147() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_11359() -> (Tensor[(6, 10, 4), bool],) {
  @func_11357() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_7031() -> (Tensor[(10, 5, 16), bool],) {
  @func_7029() /* ty=(Tensor[(10, 5, 16), bool],) */
}

def @func_11600() -> (Tensor[(6, 10, 4), bool],) {
  @func_11598() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_6405() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %986 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
    %983 = @func_5351() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
    %984 = %983.3;
    %985 = @func_1185() /* ty=Tensor[(6, 10, 4), bool] */;
    (%984, %985)
  };
  %986() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_12024(%var_11957: Tensor[(10, 5, 16), float64], %var_11989: Tensor[(10, 5, 16), uint8]) -> (Tensor[(10, 5, 16), uint32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float32], Tensor[(6, 10, 4), bool]) {
  %987 = @func_6714() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
  %988 = %987.0;
  %989 = cast(%var_11957, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
  %990 = shape_of(%988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(%988, dtype="uint32") /* ty=Tensor[(10, 5, 16), uint32] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %993 = @func_5550() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %994 = cast(%var_11957, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
  %995 = shape_of(%988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %996 = cast(%988, dtype="uint8") /* ty=Tensor[(10, 5, 16), uint8] */;
  %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %998 = bitwise_xor(%996, %997) /* ty=Tensor[(10, 5, 16), uint8] */;
  %999 = cast(%var_11989, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1000 = shape_of(%998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1001 = cast(%998, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1003 = @func_6569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1004 = subtract(%991, %992) /* ty=Tensor[(10, 5, 16), uint32] */;
  %1005 = %993.1;
  %1006 = mod(%1001, %1002) /* ty=Tensor[(10, 5, 16), float32] */;
  %1007 = %1003.0;
  (%1004, %1005, %1006, %1007)
}

def @func_12325(%var_12324: Tensor[(195), int64]) -> (Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(9, 12, 14), int32], Tensor[(1512), int32], Tensor[(6, 10, 4), uint8], Tensor[(24, 1), float32], Tensor[(195), int64]) {
  %1026 = fn (%var_12311: Tensor[(195), int64]) -> (Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(9, 12, 14), int32], Tensor[(1512), int32], Tensor[(6, 10, 4), uint8], Tensor[(24, 1), float32], Tensor[(195), int64]) {
    %1008 = @func_9665() /* ty=(Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) */;
    %1009 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
    %1010 = cast(meta[relay.Constant][45] /* ty=Tensor[(1512), int32] */, dtype="int32") /* ty=Tensor[(1512), int32] */;
    %1011 = cast(meta[relay.Constant][45] /* ty=Tensor[(1512), int32] */, dtype="int32") /* ty=Tensor[(1512), int32] */;
    %1012 = reshape(%1010, newshape=[9, 12, 14]) /* ty=Tensor[(9, 12, 14), int32] */;
    %1013 = reshape(%1011, newshape=[9, 12, 14]) /* ty=Tensor[(9, 12, 14), int32] */;
    %1014 = @func_9419(%1012, %1013) /* ty=(Tensor[(9, 12, 14), int32],) */;
    %1015 = cast(meta[relay.Constant][46] /* ty=Tensor[(24, 1), float32] */, dtype="float32") /* ty=Tensor[(24, 1), float32] */;
    %1016 = cast(%var_12311, dtype="int64") /* ty=Tensor[(195), int64] */;
    %1017 = %1009.5;
    %1018 = cast(%1017, dtype="int32") /* ty=Tensor[(42, 2), int32] */;
    %1019 = reshape(%1015, newshape=[24]) /* ty=Tensor[(24), float32] */;
    %1020 = reshape(%1016, newshape=[195]) /* ty=Tensor[(195), int64] */;
    %1021 = reshape(%1018, newshape=[84]) /* ty=Tensor[(84), int32] */;
    %1022 = @func_7516(%1019, %1020, %1021) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), uint8], Tensor[(6, 10, 4), bool], Tensor[(32, 40), int64], Tensor[(24), float32], Tensor[(195), int64], Tensor[(84), int32], Tensor[(1280, ?), int32]) */;
    %1023 = %1008.1;
    %1024 = %1014.0;
    %1025 = %1022.2;
    (%1023, %1017, %1024, meta[relay.Constant][45] /* ty=Tensor[(1512), int32] */, %1025, meta[relay.Constant][46] /* ty=Tensor[(24, 1), float32] */, %var_12311)
  };
  %1026(%var_12324) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(9, 12, 14), int32], Tensor[(1512), int32], Tensor[(6, 10, 4), uint8], Tensor[(24, 1), float32], Tensor[(195), int64]) */
}

def @func_2754() -> Tensor[(6, 10, 4), bool] {
  @func_2752() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_6817() -> (int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) {
  %1035 = fn () -> (int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) {
    %1027 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
    %1028 = @func_3457() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %1029 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 120), float64] */, dtype="float64") /* ty=Tensor[(1, 120), float64] */;
    %1030 = reshape(%1029, newshape=[120]) /* ty=Tensor[(120), float64] */;
    %1031 = @func_2739(%1030) /* ty=(Tensor[(10, 5, 16), bool], Tensor[(?, 14, 11), uint64], Tensor[(1, 14, 11), float32], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(120), float64], Tensor[(1280), int16]) */;
    %1032 = %1027.1;
    %1033 = %1028.0;
    %1034 = %1031.6;
    (%1032, %1033, %1034, meta[relay.Constant][47] /* ty=Tensor[(1, 120), float64] */)
  };
  %1035() /* ty=(int64, Tensor[(10, 5, 16), float64], Tensor[(21, 4), int32], Tensor[(1, 120), float64]) */
}

def @func_8922() -> Tensor[(6, 10, 4), bool] {
  @func_8920() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_13295() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  %1040 = fn () -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
    %1036 = @func_11523() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %1037 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %1038 = %1036.1;
    %1039 = %1037.1;
    (%1038, %1039)
  };
  %1040() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_582() -> (Tensor[(6, 10, 4), bool],) {
  %1048 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %1041 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %1042 = acos(%1041) /* ty=Tensor[(6, 10, 4), float32] */;
    %1043 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 10, 4), float32] */, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
    %1044 = shape_of(%1042, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1045 = cast(%1042, dtype="bool") /* ty=Tensor[(6, 10, 4), bool] */;
    %1046 = dyn.reshape(%1043, %1044, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1047 = equal(%1045, %1046) /* ty=Tensor[(6, 10, 4), bool] */;
    (%1047,)
  };
  %1048() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_3589() -> (Tensor[(6, 10, 4), float64],) {
  @func_3587() /* ty=(Tensor[(6, 10, 4), float64],) */
}

def @func_6356(%var_6354: Tensor[(9, 3, 7), float32]) -> Tensor[(9, 3, 7), float32] {
  @func_6353(%var_6354) /* ty=Tensor[(9, 3, 7), float32] */
}

def @func_7955() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %1052 = fn () -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
    %1049 = @func_2553() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), bool]) */;
    %1050 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
    %1051 = %1049.0;
    (%1050, %1051)
  };
  %1052() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_5939() -> (Tensor[(10, 5, 16), float32],) {
  @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */
}

def @func_5221(%var_5219: Tensor[(120), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(8, 10, 12), float64], Tensor[(5, 16, 16), int16], Tensor[(120), float64], Tensor[(1280), int16]) {
  @func_5218(%var_5219) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(960), float64], Tensor[(8, 10, 12), float64], Tensor[(5, 16, 16), int16], Tensor[(120), float64], Tensor[(1280), int16]) */
}

def @func_11357() -> (Tensor[(6, 10, 4), bool],) {
  %1053 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1054 = %1053.0;
  (%1054,)
}

def @func_8241() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %1059 = fn () -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
    %1055 = @func_4346() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) */;
    %1056 = @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %1057 = %1055.1;
    %1058 = %1056.1;
    (%1057, %1058)
  };
  %1059() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_2345(%var_2343: Tensor[(1280), int16]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) {
  @func_2342(%var_2343) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */
}

def @func_4697(%var_4696: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) {
  %1066 = fn (%var_4671: Tensor[(960), float64]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) {
    %1060 = @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */;
    %1061 = cast(%var_4671, dtype="float64") /* ty=Tensor[(960), float64] */;
    %1062 = reshape(%1061, newshape=[960]) /* ty=Tensor[(960), float64] */;
    %1063 = @func_2031(%1062) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 10, 4), bool], Tensor[(8, 10, 12), float64], Tensor[(960), float64]) */;
    %1064 = %1060.2;
    %1065 = %1063.0;
    (%1064, %1065, %var_4671)
  };
  %1066(%var_4696) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float32], Tensor[(960), float64]) */
}

def @func_6509(%var_6503: int64, %var_6504: Tensor[(195), int64]) -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  %1067 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1068 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1069 = cast(%var_6503, dtype="int64") /* ty=int64 */;
  %1070 = cast(%var_6504, dtype="int64") /* ty=Tensor[(195), int64] */;
  %1071 = reshape(%1069, newshape=[]) /* ty=int64 */;
  %1072 = reshape(%1070, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), int64] */;
  %1073 = %1067.0;
  %1074 = @func_6115() /* ty=Tensor[(6, 10, 4), bool] */;
  %1075 = %1068.0;
  %1076 = @func_409(%1071, %1072) /* ty=Tensor[(13, 1, 15), float32] */;
  (%1073, %1074, %1075, %1076, %var_6503, %var_6504)
}

def @func_3835() -> (Tensor[(6, 10, 4), float64],) {
  @func_3833() /* ty=(Tensor[(6, 10, 4), float64],) */
}

def @func_5847(%var_5845: Tensor[(1, 3, 7), float32], %var_5846: Tensor[(3072), int8]) -> (Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) {
  @func_5843(%var_5845, %var_5846) /* ty=(Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) */
}

def @func_9648() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  @func_9646() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */
}

def @func_3670() -> Tensor[(10, 5, 16), float32] {
  %1077 = @func_2672() /* ty=Tensor[(10, 5, 16), float64] */;
  %1078 = cast(%1077, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  acos(%1078) /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_11894() -> Tensor[(6, 10, 4), bool] {
  %1079 = @func_11769() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1079.0
}

def @func_3762() -> (Tensor[(6, 10, 4), uint8],) {
  %1087 = fn () -> (Tensor[(6, 10, 4), uint8],) {
    %1080 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1081 = %1080.0;
    %1082 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 10, 4), bool] */, dtype="uint8") /* ty=Tensor[(6, 10, 4), uint8] */;
    %1083 = shape_of(%1081, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1084 = cast(%1081, dtype="uint8") /* ty=Tensor[(6, 10, 4), uint8] */;
    %1085 = dyn.reshape(%1082, %1083, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1086 = bitwise_or(%1084, %1085) /* ty=Tensor[(6, 10, 4), uint8] */;
    (%1086,)
  };
  %1087() /* ty=(Tensor[(6, 10, 4), uint8],) */
}

def @func_2285() -> Tensor[(6, 10, 4), bool] {
  %1088 = @func_2101() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1088.0
}

def @func_1446() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %1095 = fn () -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
    %1089 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %1090 = @func_1208() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1091 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1092 = %1089.0;
    %1093 = %1090.0;
    %1094 = %1091.0;
    (%1092, %1093, %1094)
  };
  %1095() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_6262() -> (Tensor[(6, 10, 4), bool],) {
  %1098 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %1096 = @func_5992() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1097 = %1096.0;
    (%1097,)
  };
  %1098() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @main() -> (Tensor[(10, 5, 16), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(2366), float32]) {
  %1099 = @func_7031() /* ty=(Tensor[(10, 5, 16), bool],) */;
  %1100 = cast(meta[relay.Constant][50] /* ty=Tensor[(2366), float32] */, dtype="float32") /* ty=Tensor[(2366), float32] */;
  %1101 = reshape(%1100, newshape=[13, 14, 13]) /* ty=Tensor[(13, 14, 13), float32] */;
  %1102 = @func_7021(%1101) /* ty=(Tensor[(13, 14, 13), float32], Tensor[(6, 10, 4), bool]) */;
  %1103 = @func_6858() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1104 = cast(meta[relay.Constant][50] /* ty=Tensor[(2366), float32] */, dtype="float32") /* ty=Tensor[(2366), float32] */;
  %1105 = %1099.0;
  %1106 = %1102.1;
  %1107 = %1103.1;
  %1108 = erf(%1104) /* ty=Tensor[(2366), float32] */;
  (%1105, %1106, %1107, %1108)
}

def @func_11423() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(320, 4), int16], Tensor[(35), float32]) {
  %1109 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1110 = @func_8207() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1111 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1112 = cast(meta[relay.Constant][51] /* ty=Tensor[(320, 4), int16] */, dtype="int16") /* ty=Tensor[(320, 4), int16] */;
  %1113 = reshape(%1112, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
  %1114 = @func_8779(%1113) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(1280), int16]) */;
  %1115 = %1109.0;
  %1116 = %1110.0;
  %1117 = %1111.0;
  %1118 = %1114.0;
  %1119 = @func_10385() /* ty=Tensor[(35), float32] */;
  (%1115, %1116, %1117, %1118, meta[relay.Constant][51] /* ty=Tensor[(320, 4), int16] */, %1119)
}

def @func_7324() -> Tensor[(6, 10, 4), bool] {
  %1120 = fn () -> Tensor[(6, 10, 4), bool] {
    @func_2425() /* ty=Tensor[(6, 10, 4), bool] */
  };
  %1120() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_10450(%var_10449: Tensor[(11, 4, 5), bool]) -> (Tensor[(11, 4, 5), bool], Tensor[(6, 10, 4), bool]) {
  %1128 = fn (%var_10427: Tensor[(11, 4, 5), bool]) -> (Tensor[(11, 4, 5), bool], Tensor[(6, 10, 4), bool]) {
    %1121 = cast(%var_10427, dtype="bool") /* ty=Tensor[(11, 4, 5), bool] */;
    %1122 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(11, 4, 5), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1123 = cast(meta[relay.Constant][52] /* ty=Tensor[(11, 4, 5), bool] */, dtype="bool") /* ty=Tensor[(11, 4, 5), bool] */;
    %1124 = dyn.reshape(%1121, %1122, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1125 = @func_8390() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1126 = logical_or(%1123, %1124) /* ty=Tensor[(11, 4, 5), bool] */;
    %1127 = %1125.0;
    (%1126, %1127)
  };
  %1128(%var_10449) /* ty=(Tensor[(11, 4, 5), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_10386() -> Tensor[(35), float32] {
  %1129 = fn () -> Tensor[(35), float32] {
    @func_6779() /* ty=Tensor[(35), float32] */
  };
  %1129() /* ty=Tensor[(35), float32] */
}

def @func_1186() -> Tensor[(6, 10, 4), bool] {
  %1131 = fn () -> Tensor[(6, 10, 4), bool] {
    %1130 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1130.0
  };
  %1131() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_12131(%var_12130: Tensor[(7, 5), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(7, 5), float32], Tensor[(10, 5, 16), float64]) {
  %1139 = fn (%var_12123: Tensor[(7, 5), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(7, 5), float32], Tensor[(10, 5, 16), float64]) {
    %1132 = cast(%var_12123, dtype="float32") /* ty=Tensor[(7, 5), float32] */;
    %1133 = reshape(%1132, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
    %1134 = @func_815(%1133) /* ty=(Tensor[(7, 5, 1), float32],) */;
    %1135 = @func_6714() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %1136 = @func_2425() /* ty=Tensor[(6, 10, 4), bool] */;
    %1137 = %1134.0;
    %1138 = %1135.0;
    (%1136, %1137, %var_12123, %1138)
  };
  %1139(%var_12130) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(7, 5, 1), float32], Tensor[(7, 5), float32], Tensor[(10, 5, 16), float64]) */
}

def @func_13116() -> Tensor[(6, 10, 4), bool] {
  @func_13114() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_1913(%var_1911: Tensor[(8, 10, 12), float64]) -> (Tensor[(8, 10, 12), float64],) {
  @func_1910(%var_1911) /* ty=(Tensor[(8, 10, 12), float64],) */
}

def @func_13415() -> Tensor[(6, 10, 4), bool] {
  %1140 = @func_5061() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1140.0
}

def @func_6254() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) {
  @func_6252() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_3318() -> Tensor[(6, 10, 4), bool] {
  %1141 = @func_2596() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1141.0
}

def @func_7663() -> (Tensor[(6, 10, 4), bool],) {
  %1143 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %1142 = @func_6009() /* ty=Tensor[(6, 10, 4), bool] */;
    (%1142,)
  };
  %1143() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_10586() -> (Tensor[(10, 5, 16), float32],) {
  @func_10584() /* ty=(Tensor[(10, 5, 16), float32],) */
}

def @func_3400(%var_3399: Tensor[(6, 10, 4), bool]) -> (Tensor[(10, 5, 16), float64], Tensor[(1280), int16], Tensor[(6, 10, 4), float32]) {
  %1155 = fn (%var_3388: Tensor[(6, 10, 4), bool]) -> (Tensor[(10, 5, 16), float64], Tensor[(1280), int16], Tensor[(6, 10, 4), float32]) {
    %1144 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %1145 = cast(meta[relay.Constant][53] /* ty=Tensor[(1280), int16] */, dtype="int16") /* ty=Tensor[(1280), int16] */;
    %1146 = reshape(%1145, newshape=[1280]) /* ty=Tensor[(1280), int16] */;
    %1147 = @func_2342(%1146) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(5, 16, 16), int16], Tensor[(1280), int16]) */;
    %1148 = %1147.0;
    %1149 = cast(%var_3388, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %1150 = shape_of(%1148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1151 = cast(%1148, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %1152 = dyn.reshape(%1149, %1150, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1153 = %1144.0;
    %1154 = power(%1151, %1152) /* ty=Tensor[(6, 10, 4), float32] */;
    (%1153, meta[relay.Constant][53] /* ty=Tensor[(1280), int16] */, %1154)
  };
  %1155(%var_3399) /* ty=(Tensor[(10, 5, 16), float64], Tensor[(1280), int16], Tensor[(6, 10, 4), float32]) */
}

def @func_7148(%var_7147: Tensor[(21), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(11, 3, 3), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(6, 10, 4), uint8]) {
  %1170 = fn (%var_7121: Tensor[(21), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(11, 3, 3), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(6, 10, 4), uint8]) {
    %1156 = @func_1917() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1157 = @func_4797() /* ty=(Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
    %1158 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %1159 = cast(%var_7121, dtype="float32") /* ty=Tensor[(21), float32] */;
    %1160 = cast(meta[relay.Constant][54] /* ty=Tensor[(3072), int8] */, dtype="int8") /* ty=Tensor[(3072), int8] */;
    %1161 = reshape(%1159, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
    %1162 = reshape(%1160, newshape=[3072]) /* ty=Tensor[(3072), int8] */;
    %1163 = @func_5843(%1161, %1162) /* ty=(Tensor[(16, 16, 12), int8], Tensor[(3072), int8], Tensor[(11, 3, 3), float64], Tensor[(99), float64], Tensor[(?, 3, 7), bool]) */;
    %1164 = @func_3761() /* ty=(Tensor[(6, 10, 4), uint8],) */;
    %1165 = %1156.0;
    %1166 = %1157.1;
    %1167 = %1158.0;
    %1168 = %1163.2;
    %1169 = %1164.0;
    (%1165, %1166, %1167, %1168, %var_7121, meta[relay.Constant][54] /* ty=Tensor[(3072), int8] */, %1169)
  };
  %1170(%var_7147) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(11, 3, 3), float64], Tensor[(21), float32], Tensor[(3072), int8], Tensor[(6, 10, 4), uint8]) */
}

def @func_1595() -> (Tensor[(6, 10, 4), bool],) {
  %1173 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %1171 = @func_1528() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
    %1172 = %1171.0;
    (%1172,)
  };
  %1173() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_8207() -> (Tensor[(6, 10, 4), bool],) {
  %1174 = @func_6404() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1175 = %1174.1;
  (%1175,)
}

def @func_9197() -> (Tensor[(6, 10, 4), bool],) {
  @func_9195() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_3278() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) {
  @func_3276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float32]) */
}

def @func_3421() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %1176 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1177 = @func_1688() /* ty=Tensor[(6, 10, 4), float64] */;
  %1178 = %1176.0;
  (%1177, %1178)
}

def @func_5912() -> (Tensor[(6, 10, 4), bool],) {
  @func_5910() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_12564() -> (Tensor[(6, 10, 4), bool],) {
  %1180 = fn () -> (Tensor[(6, 10, 4), bool],) {
    %1179 = @func_3318() /* ty=Tensor[(6, 10, 4), bool] */;
    (%1179,)
  };
  %1180() /* ty=(Tensor[(6, 10, 4), bool],) */
}

def @func_10399() -> (Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64]) {
  %1181 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %1182 = @func_5550() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %1183 = @func_9646() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) */;
  %1184 = %1181.0;
  %1185 = %1182.1;
  %1186 = %1183.1;
  (%1184, %1185, %1186)
}

def @func_10584() -> (Tensor[(10, 5, 16), float32],) {
  %1187 = @func_8163() /* ty=Tensor[(10, 5, 16), float32] */;
  (%1187,)
}

def @func_9295(%var_9222: Tensor[(10, 5, 16), float32]) -> (Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), int64]) {
  %1188 = @func_5937() /* ty=(Tensor[(10, 5, 16), float32],) */;
  %1189 = %1188.0;
  %1190 = cast(%var_9222, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1191 = shape_of(%1189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1192 = cast(%1189, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1193 = dyn.reshape(%1190, %1191, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1194 = divide(%1192, %1193) /* ty=Tensor[(10, 5, 16), float32] */;
  %1195 = cast(meta[relay.Constant][55] /* ty=Tensor[(10, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1196 = shape_of(%1194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1197 = cast(%1194, dtype="float32") /* ty=Tensor[(10, 5, 16), float32] */;
  %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1199 = cast(%1189, dtype="int64") /* ty=Tensor[(10, 5, 16), int64] */;
  %1200 = shape_of(%var_9222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1201 = cast(%var_9222, dtype="int64") /* ty=Tensor[(10, 5, 16), int64] */;
  %1202 = dyn.reshape(%1199, %1200, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1203 = floor_divide(%1197, %1198) /* ty=Tensor[(10, 5, 16), float32] */;
  %1204 = right_shift(%1201, %1202) /* ty=Tensor[(10, 5, 16), int64] */;
  (%1203, %1204)
}

def @func_12390() -> (Tensor[(10, 5, 16), float64], Tensor[(3072), int8]) {
  %1209 = fn () -> (Tensor[(10, 5, 16), float64], Tensor[(3072), int8]) {
    %1205 = @func_7616() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), bool]) */;
    %1206 = @func_9665() /* ty=(Tensor[(3072), int8], Tensor[(6, 10, 4), bool]) */;
    %1207 = %1205.0;
    %1208 = %1206.0;
    (%1207, %1208)
  };
  %1209() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(3072), int8]) */
}

def @func_2072() -> Tensor[(10, 5, 16), float64] {
  %1211 = fn () -> Tensor[(10, 5, 16), float64] {
    %1210 = @func_1548() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %1210.0
  };
  %1211() /* ty=Tensor[(10, 5, 16), float64] */
}

def @func_1548() -> (Tensor[(10, 5, 16), float64],) {
  %1212 = @func_1304() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1213 = %1212.0;
  (%1213,)
}

def @func_4404(%var_4398: Tensor[(2, 15, 9), float32]) -> (Tensor[(2, 15, 9), float32],) {
  %1214 = cast(%var_4398, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %1215 = atan(%1214) /* ty=Tensor[(2, 15, 9), float32] */;
  (%1215,)
}

def @func_10401() -> (Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64]) {
  @func_10399() /* ty=(Tensor[(10, 5, 16), float32], Tensor[(10, 5, 16), float64], Tensor[(10, 5, 16), float64]) */
}

def @func_817(%var_816: Tensor[(7, 5, 1), float32]) -> (Tensor[(7, 5, 1), float32],) {
  %1218 = fn (%var_805: Tensor[(7, 5, 1), float32]) -> (Tensor[(7, 5, 1), float32],) {
    %1216 = cast(%var_805, dtype="float32") /* ty=Tensor[(7, 5, 1), float32] */;
    %1217 = erf(%1216) /* ty=Tensor[(7, 5, 1), float32] */;
    (%1217,)
  };
  %1218(%var_816) /* ty=(Tensor[(7, 5, 1), float32],) */
}

def @func_13129() -> Tensor[(6, 10, 4), bool] {
  %1219 = @func_10102() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1219.0
}

def @func_6978() -> (Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) {
  %1223 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) {
    %1220 = @func_4797() /* ty=(Tensor[(3, ?, 11), bool], Tensor[(6, 10, 4), bool]) */;
    %1221 = %1220.1;
    %1222 = @func_2620() /* ty=Tensor[(8, 5, 4), uint64] */;
    (%1221, %1222)
  };
  %1223() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */
}

def @func_2673() -> Tensor[(10, 5, 16), float64] {
  %1225 = fn () -> Tensor[(10, 5, 16), float64] {
    %1224 = @func_2408() /* ty=(Tensor[(10, 5, 16), float64],) */;
    %1224.0
  };
  %1225() /* ty=Tensor[(10, 5, 16), float64] */
}

def @func_3672() -> Tensor[(10, 5, 16), float32] {
  @func_3670() /* ty=Tensor[(10, 5, 16), float32] */
}

def @func_6353(%var_6346: Tensor[(9, 3, 7), float32]) -> Tensor[(9, 3, 7), float32] {
  %1226 = cast(%var_6346, dtype="float32") /* ty=Tensor[(9, 3, 7), float32] */;
  rsqrt(%1226) /* ty=Tensor[(9, 3, 7), float32] */
}

def @func_6932(%var_6930: Tensor[(35), float32]) -> (Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(7, 5, 1), float32], Tensor[(35), float32]) {
  @func_6929(%var_6930) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(7, 5, 1), float32], Tensor[(35), float32]) */
}

def @func_1689() -> Tensor[(6, 10, 4), float64] {
  %1228 = fn () -> Tensor[(6, 10, 4), float64] {
    %1227 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
    %1227.3
  };
  %1228() /* ty=Tensor[(6, 10, 4), float64] */
}

def @func_1888() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %1229 = @func_1569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1230 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1231 = %1229.0;
  %1232 = %1230.1;
  (%1231, %1232)
}

def @func_548(%var_546: Tensor[(7, 4, 3), int32], %var_547: int64) -> (Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) {
  @func_544(%var_546, %var_547) /* ty=(Tensor[(7, 4, 3), int32], Tensor[(13, 1, 15), float32], int64, Tensor[(195), int64]) */
}

def @func_8814() -> (Tensor[(10, 5, 16), float32],) {
  %1234 = fn () -> (Tensor[(10, 5, 16), float32],) {
    %1233 = @func_8163() /* ty=Tensor[(10, 5, 16), float32] */;
    (%1233,)
  };
  %1234() /* ty=(Tensor[(10, 5, 16), float32],) */
}

def @func_9646() -> (Tensor[(6, 10, 4), bool], Tensor[(10, 5, 16), float64]) {
  %1235 = @func_8207() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1236 = %1235.0;
  %1237 = @func_8411() /* ty=Tensor[(10, 5, 16), float64] */;
  (%1236, %1237)
}

def @func_13384() -> (Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), float64]) {
  %1238 = @func_13263() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1239 = @func_5614() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(16, 16, 12), int8], Tensor[(3072), int8]) */;
  %1240 = %1238.0;
  %1241 = %1239.0;
  (%1240, %1241)
}

def @func_12760(%var_12747: Tensor[(16, 1, 15), float64]) -> (Tensor[(16, 15, 15), uint8],) {
  %1242 = cast(%var_12747, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
  %1243 = cast(meta[relay.Constant][56] /* ty=Tensor[(16, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 15), float64] */;
  %1244 = maximum(%1242, %1243) /* ty=Tensor[(16, 15, 15), float64] */;
  %1245 = cast(%1244, dtype="uint8") /* ty=Tensor[(16, 15, 15), uint8] */;
  %1246 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(16, 15, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1247 = cast(meta[relay.Constant][56] /* ty=Tensor[(16, 15, 15), float64] */, dtype="uint8") /* ty=Tensor[(16, 15, 15), uint8] */;
  %1248 = dyn.reshape(%1245, %1246, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1249 = add(%1247, %1248) /* ty=Tensor[(16, 15, 15), uint8] */;
  (%1249,)
}

def @func_4139() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %1250 = @func_3421() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */;
  %1251 = @func_1276() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */;
  %1252 = %1250.0;
  %1253 = %1251.2;
  (%1252, %1253)
}

def @func_10061() -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
  %1258 = fn () -> (Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) {
    %1254 = @func_8293() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64]) */;
    %1255 = @func_8042() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(8, 5, 4), uint64]) */;
    %1256 = %1254.0;
    %1257 = %1255.0;
    (%1256, %1257)
  };
  %1258() /* ty=(Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool]) */
}

def @func_9732() -> (Tensor[(6, 10, 4), bool],) {
  %1259 = @func_5595() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1260 = %1259.0;
  (%1260,)
}

def @func_1890() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  @func_1888() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_13011() -> (Tensor[(35), float32], Tensor[(7, 5, 84), bool], Tensor[(6, 10, 4), bool]) {
  %1272 = fn () -> (Tensor[(35), float32], Tensor[(7, 5, 84), bool], Tensor[(6, 10, 4), bool]) {
    %1261 = @func_7583() /* ty=(Tensor[(10, 5, 16), float64], Tensor[(6, 10, 4), uint8], Tensor[(12, 2), float32], Tensor[(84), int32], Tensor[(10, 5, 16), float64]) */;
    %1262 = %1261.3;
    %1263 = cast(meta[relay.Constant][57] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
    %1264 = reshape(%1263, newshape=[7, 5, 1]) /* ty=Tensor[(7, 5, 1), float32] */;
    %1265 = @func_815(%1264) /* ty=(Tensor[(7, 5, 1), float32],) */;
    %1266 = %1265.0;
    %1267 = cast(%1262, dtype="bool") /* ty=Tensor[(84), bool] */;
    %1268 = cast(%1266, dtype="bool") /* ty=Tensor[(7, 5, 1), bool] */;
    %1269 = @func_12186() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1270 = equal(%1267, %1268) /* ty=Tensor[(7, 5, 84), bool] */;
    %1271 = %1269.0;
    (meta[relay.Constant][57] /* ty=Tensor[(35), float32] */, %1270, %1271)
  };
  %1272() /* ty=(Tensor[(35), float32], Tensor[(7, 5, 84), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_3320() -> Tensor[(6, 10, 4), bool] {
  @func_3318() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_6116() -> Tensor[(6, 10, 4), bool] {
  %1274 = fn () -> Tensor[(6, 10, 4), bool] {
    %1273 = @func_5992() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1273.0
  };
  %1274() /* ty=Tensor[(6, 10, 4), bool] */
}

def @func_1169() -> (Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) {
  %1292 = fn () -> (Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) {
    %1275 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %1276 = reshape(%1275, newshape=[]) /* ty=int64 */;
    %1277 = @func_798(%1276) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) */;
    %1278 = @func_715() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1279 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1280 = %1279.0;
    %1281 = cast(%1280, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
    %1282 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %1283 = reshape(%1282, newshape=[]) /* ty=int64 */;
    %1284 = @func_798(%1283) /* ty=(Tensor[(6, 10, 4), bool], Tensor[(195), int64], Tensor[(42, 2), int32], int64) */;
    %1285 = @func_850() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1286 = %1277.0;
    %1287 = %1278.0;
    %1288 = rsqrt(%1281) /* ty=Tensor[(6, 10, 4), float64] */;
    %1289 = @func_1018() /* ty=Tensor[(6, 10, 4), bool] */;
    %1290 = %1284.2;
    %1291 = %1285.0;
    (%1286, -6 /* ty=int64 */, %1287, %1288, %1289, %1290, %1291)
  };
  %1292() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */
}

def @func_1529() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %1297 = fn () -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
    %1293 = @func_1168() /* ty=(Tensor[(6, 10, 4), bool], int64, Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), float64], Tensor[(6, 10, 4), bool], Tensor[(42, 2), int32], Tensor[(6, 10, 4), bool]) */;
    %1294 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
    %1295 = %1293.6;
    %1296 = %1294.0;
    (%1295, %1296)
  };
  %1297() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) */
}

def @func_11769() -> (Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool]) {
  %1298 = @func_6569() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1299 = @func_581() /* ty=(Tensor[(6, 10, 4), bool],) */;
  %1300 = %1298.0;
  %1301 = %1299.0;
  (%1300, %1301)
}

def @func_6780() -> Tensor[(35), float32] {
  %1303 = fn () -> Tensor[(35), float32] {
    %1302 = @func_6081() /* ty=(Tensor[(6, 10, 4), bool], Tensor[(6, 10, 4), bool], Tensor[(390), float64], int64, Tensor[(7, 5, 1), float32], Tensor[(35), float32]) */;
    %1302.5
  };
  %1303() /* ty=Tensor[(35), float32] */
}

def @func_10671() -> Tensor[(10, 5, 16), float64] {
  %1304 = @func_9940() /* ty=(Tensor[(10, 5, 16), float64],) */;
  %1304.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen736/build/output.py", line 4472, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:02:23] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

