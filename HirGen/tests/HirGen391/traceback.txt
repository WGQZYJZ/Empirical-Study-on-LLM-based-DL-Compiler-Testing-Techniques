==========mod==========
#[version = "0.0.5"]
def @func_3709(%var_3702: Tensor[(4, 4, 12), uint16]) -> (Tensor[(4, 4, 12), uint16],) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 4, 12), uint16] */, dtype="uint16") /* ty=Tensor[(4, 4, 12), uint16] */;
  %1 = shape_of(%var_3702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_3702, dtype="uint16") /* ty=Tensor[(4, 4, 12), uint16] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %4 = logical_xor(%2, %3) /* ty=Tensor[(4, 4, 12), uint16] */;
  (%4,)
}

def @func_6198(%var_6155: Tensor[(288), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(288), float32], Tensor[(11, 7, 8), bool], Tensor[(616), int64], Tensor[(9, 11, 16), int32]) {
  %5 = @func_5491() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) */;
  %6 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %7 = cast(%var_6155, dtype="float32") /* ty=Tensor[(288), float32] */;
  %8 = cast(%var_6155, dtype="float32") /* ty=Tensor[(288), float32] */;
  %9 = reshape(%7, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %10 = reshape(%8, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %11 = @func_5747(%9, %10) /* ty=(Tensor[(9, 8, 4), bool],) */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(616), int64] */, dtype="int64") /* ty=Tensor[(616), int64] */;
  %13 = reshape(%12, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), int64] */;
  %14 = @func_338(%13) /* ty=(Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %15 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %16 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  %17 = @func_5064() /* ty=Tensor[(9, 11, 16), float64] */;
  %18 = %5.3;
  %19 = %6.1;
  %20 = %11.0;
  %21 = %14.0;
  %22 = %15.0;
  (%16, %17, %18, %19, %20, %var_6155, %21, meta[relay.Constant][1] /* ty=Tensor[(616), int64] */, %22)
}

def @func_7607() -> Tensor[(9, 11, 16), float32] {
  %23 = @func_5491() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) */;
  %23.1
}

def @func_184(%var_104: Tensor[(13, 15, 3), uint32], %var_116: Tensor[(13, 15, 3), uint32]) -> (Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) {
  %24 = cast(%var_116, dtype="uint64") /* ty=Tensor[(13, 15, 3), uint64] */;
  %25 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="uint64") /* ty=Tensor[(13, 15, 3), uint64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %28 = logical_xor(%26, %27) /* ty=Tensor[(13, 15, 3), uint64] */;
  %29 = cast(%var_104, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %34 = shape_of(%var_104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_104, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %37 = bitwise_or(%35, %36) /* ty=Tensor[(13, 15, 3), uint32] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="int64") /* ty=Tensor[(13, 15, 3), int64] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="int64") /* ty=Tensor[(13, 15, 3), int64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %42 = left_shift(%31, %32) /* ty=Tensor[(13, 15, 3), uint32] */;
  %43 = bitwise_and(%40, %41) /* ty=Tensor[(13, 15, 3), int64] */;
  (%42, %43)
}

def @func_8065() -> (Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %44 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
  %45 = @func_5429() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(?, 16, 9), bool]) */;
  %46 = %44.1;
  %47 = %45.0;
  %48 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
  (%46, %47, %48)
}

def @func_7914(%var_7906: int64) -> (Tensor[(9, 11, 16), float32], Tensor[(210), float32], int64, Tensor[(384), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) {
  %49 = cast(%var_7906, dtype="int64") /* ty=int64 */;
  %50 = cast(meta[relay.Constant][4] /* ty=Tensor[(384), int64] */, dtype="int64") /* ty=Tensor[(384), int64] */;
  %51 = cast(meta[relay.Constant][5] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(384), int64] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %53 = reshape(%49, newshape=[]) /* ty=int64 */;
  %54 = reshape(%50, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), int64] */;
  %55 = reshape(%51, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %56 = reshape(%52, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), bool] */;
  %57 = @func_4256(%53, %54, %55, %56) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) */;
  %58 = @func_2201() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %59 = @func_2953() /* ty=Tensor[(9, 11, 16), float32] */;
  %60 = %57.1;
  %61 = %58.0;
  (%59, %60, %var_7906, meta[relay.Constant][4] /* ty=Tensor[(384), int64] */, meta[relay.Constant][5] /* ty=Tensor[(210), float32] */, %61)
}

def @func_570(%var_547: Tensor[(4, 15, 8), uint8]) -> (Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) {
  %62 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 15, 8), uint8] */;
  %63 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 15, 8), uint8] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %66 = cast(meta[relay.Constant][8] /* ty=Tensor[(308, 2), int64] */, dtype="int64") /* ty=Tensor[(308, 2), int64] */;
  %67 = reshape(%66, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), int64] */;
  %68 = @func_338(%67) /* ty=(Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %69 = cast(%var_547, dtype="uint32") /* ty=Tensor[(4, 15, 8), uint32] */;
  %70 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="uint32") /* ty=Tensor[(4, 15, 8), uint32] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %73 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %74 = reshape(%73, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float64] */;
  %75 = logical_xor(%64, %65) /* ty=Tensor[(4, 15, 8), uint8] */;
  %76 = %68.4;
  %77 = left_shift(%71, %72) /* ty=Tensor[(4, 15, 8), uint32] */;
  %78 = @func_240(%74) /* ty=Tensor[(6, 7, 8), float64] */;
  (%75, %76, meta[relay.Constant][8] /* ty=Tensor[(308, 2), int64] */, %77, %78, meta[relay.Constant][9] /* ty=Tensor[(1, 336), float64] */)
}

def @func_3109(%var_3087: Tensor[(7, 10, 8), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) {
  %79 = cast(%var_3087, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
  %80 = sinh(%79) /* ty=Tensor[(7, 10, 8), float32] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
  %82 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %83 = sin(%81) /* ty=Tensor[(7, 10, 8), float64] */;
  (%82, %83)
}

def @func_7017() -> (Tensor[(9, 11, 16), bool],) {
  %84 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
  %85 = %84.3;
  (%85,)
}

def @func_8791(%var_8783: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(210), float32], Tensor[(9, 11, 16), float32]) {
  %86 = @func_3183() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %87 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %88 = cast(-2.23492f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %89 = cast(%var_8783, dtype="float32") /* ty=Tensor[(210), float32] */;
  %90 = reshape(%88, newshape=[]) /* ty=float32 */;
  %91 = reshape(%89, newshape=[14, 1, 15]) /* ty=Tensor[(14, 1, 15), float32] */;
  %92 = @func_2624(%90, %91) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
  %93 = @func_5228() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %94 = %93.0;
  %95 = cast(%94, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %96 = %86.0;
  %97 = %87.0;
  %98 = %92.0;
  %99 = rsqrt(%95) /* ty=Tensor[(9, 11, 16), float32] */;
  (%96, %97, %98, -2.23492f /* ty=float32 */, %var_8783, %99)
}

def @func_9329(%var_9314: Tensor[(2, 13, 8), float32]) -> Tensor[(2, 13, 8), float32] {
  %100 = cast(%var_9314, dtype="float32") /* ty=Tensor[(2, 13, 8), float32] */;
  rsqrt(%100) /* ty=Tensor[(2, 13, 8), float32] */
}

def @func_3359() -> (Tensor[(9, 11, 16), float32],) {
  %101 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %102 = %101.1;
  (%102,)
}

def @func_8680() -> (Tensor[(11, 7, 8), float32],) {
  %103 = @func_6053() /* ty=Tensor[(11, 7, 8), float32] */;
  (%103,)
}

def @func_9212() -> Tensor[(9, 11, 16), int32] {
  %104 = @func_8302() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %104.0
}

def @func_6546() -> (Tensor[(9, 11, 16), float32],) {
  %105 = @func_3156() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %106 = %105.1;
  (%106,)
}

def @func_4518(%var_4505: float32, %var_4506: Tensor[(1, 11, 7), float32]) -> Tensor[(1, 11, 7), float32] {
  %107 = cast(%var_4505, dtype="float32") /* ty=float32 */;
  %108 = cast(%var_4506, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  floor_mod(%107, %108) /* ty=Tensor[(1, 11, 7), float32] */
}

def @func_8233() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %109 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %110 = %109.0;
  %111 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
  %112 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
  (%110, %111, %112)
}

def @func_3068(%var_3057: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), float64], Tensor[(4, 15, 8), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float64]) {
  %113 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
  %114 = cast(%var_3057, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %115 = reshape(%114, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), uint8] */;
  %116 = @func_570(%115) /* ty=(Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) */;
  %117 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
  %118 = %113.0;
  %119 = %116.0;
  %120 = %117.0;
  (%118, %119, %var_3057, %120)
}

def @func_5984() -> Tensor[(9, 11, 16), float64] {
  @func_5064() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_2114() -> Tensor[(9, 11, 16), float64] {
  %121 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %121.0
}

def @func_3869() -> Tensor[(9, 11, 16), int32] {
  %122 = @func_2201() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %122.0
}

def @func_4482() -> (Tensor[(3, 8, 5), bool],) {
  %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %124 = log10(%123) /* ty=Tensor[(3, 8, 5), float32] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 8, 5), float32] */, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %129 = less(%127, %128) /* ty=Tensor[(3, 8, 5), bool] */;
  (%129,)
}

def @func_5452() -> (Tensor[(12, 11, 9), float32],) {
  %130 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %131 = log10(%130) /* ty=Tensor[(12, 11, 9), float32] */;
  (%131,)
}

def @func_8837(%var_8797: Tensor[(4, 4, 6), int64]) -> (Tensor[(4, 4, 6), int64], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 2, 16), float64], Tensor[(1, 448), float64], Tensor[(9, 11, 16), float32]) {
  %132 = cast(%var_8797, dtype="int64") /* ty=Tensor[(4, 4, 6), int64] */;
  %133 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(4, 4, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 4, 6), int64] */, dtype="int64") /* ty=Tensor[(4, 4, 6), int64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %136 = @func_5201() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %137 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 448), float64] */, dtype="float64") /* ty=Tensor[(1, 448), float64] */;
  %138 = reshape(%137, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), float64] */;
  %139 = @func_8329(%138) /* ty=(Tensor[(14, 2, 16), float64], int64) */;
  %140 = @func_8615() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %141 = left_shift(%134, %135) /* ty=Tensor[(4, 4, 6), int64] */;
  %142 = @func_3869() /* ty=Tensor[(9, 11, 16), int32] */;
  %143 = %136.0;
  %144 = %139.0;
  %145 = %140.0;
  (%141, %142, %143, %144, meta[relay.Constant][13] /* ty=Tensor[(1, 448), float64] */, %145)
}

def @func_3965() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  %146 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %147 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  %148 = %146.0;
  %149 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  (%147, %148, %149)
}

def @func_3601(%var_3585: Tensor[(480), uint8]) -> (Tensor[(5, 7, 15), bool], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(6, 7, 8), uint8]) {
  %150 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %151 = cast(%var_3585, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %152 = reshape(%151, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), uint8] */;
  %153 = @func_570(%152) /* ty=(Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) */;
  %154 = %153.4;
  %155 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 7, 8), float64] */, dtype="uint8") /* ty=Tensor[(6, 7, 8), uint8] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="uint8") /* ty=Tensor[(6, 7, 8), uint8] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %159 = %150.0;
  %160 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %161 = bitwise_and(%157, %158) /* ty=Tensor[(6, 7, 8), uint8] */;
  (%159, %var_3585, %160, %161)
}

def @func_4826(%var_4776: float32, %var_4777: Tensor[(1, 77), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) {
  %162 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %163 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %164 = cast(%var_4776, dtype="float32") /* ty=float32 */;
  %165 = cast(%var_4777, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
  %166 = reshape(%164, newshape=[]) /* ty=float32 */;
  %167 = reshape(%165, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), float32] */;
  %168 = cast(%var_4776, dtype="float32") /* ty=float32 */;
  %169 = cast(%var_4777, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
  %170 = reshape(%168, newshape=[]) /* ty=float32 */;
  %171 = reshape(%169, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), float32] */;
  %172 = %162.0;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %174 = reshape(%173, newshape=[9, 11, 16]) /* ty=Tensor[(9, 11, 16), float64] */;
  %175 = @func_2918(%174) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %176 = %163.0;
  %177 = @func_4518(%166, %167) /* ty=Tensor[(1, 11, 7), float32] */;
  %178 = @func_4518(%170, %171) /* ty=Tensor[(1, 11, 7), float32] */;
  %179 = %175.3;
  (%172, %176, %177, %var_4776, %var_4777, %178, %179)
}

def @func_2579() -> (Tensor[(9, 11, 16), float64],) {
  %180 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
  %181 = %180.0;
  (%181,)
}

def @func_1814() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %182 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %183 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %184 = %182.0;
  %185 = %183.0;
  (%184, %185)
}

def @func_5169(%var_5164: float64) -> Tensor[(4, 1), float64] {
  %186 = cast(%var_5164, dtype="float64") /* ty=float64 */;
  %187 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 1), float64] */;
  mod(%186, %187) /* ty=Tensor[(4, 1), float64] */
}

def @func_6784() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 8, 4), float64], Tensor[(288), float32]) {
  %188 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %189 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %190 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %191 = reshape(%189, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %192 = reshape(%190, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %193 = @func_5747(%191, %192) /* ty=(Tensor[(9, 8, 4), bool],) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
  %196 = sin(%195) /* ty=Tensor[(9, 8, 4), float32] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(9, 8, 4), float64] */;
  %198 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %199 = %188.0;
  %200 = @func_2944() /* ty=Tensor[(9, 11, 16), float64] */;
  %201 = tan(%197) /* ty=Tensor[(9, 8, 4), float64] */;
  %202 = atanh(%198) /* ty=Tensor[(288), float32] */;
  (%199, %200, %201, %202)
}

def @func_7578() -> (Tensor[(9, 11, 16), float32],) {
  %203 = @func_6546() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %204 = %203.0;
  (%204,)
}

def @func_2163() -> (Tensor[(9, 11, 16), float32],) {
  %205 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %206 = %205.0;
  (%206,)
}

def @func_3243() -> Tensor[(9, 11, 16), float64] {
  %207 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %207.0
}

def @func_6579() -> (Tensor[(9, 11, 16), float32],) {
  %208 = @func_4608() /* ty=Tensor[(9, 11, 16), float32] */;
  (%208,)
}

def @func_8150() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32]) {
  %209 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %210 = %209.1;
  %211 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
  (%210, %211)
}

def @func_5349() -> Tensor[(9, 11, 16), uint64] {
  %212 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
  %212.2
}

def @func_4608() -> Tensor[(9, 11, 16), float32] {
  %213 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %213.0
}

def @func_7865() -> Tensor[(9, 11, 16), int16] {
  %214 = @func_7802() /* ty=(Tensor[(9, 11, 16), int16],) */;
  %214.0
}

def @func_4256(%var_4228: int64, %var_4229: Tensor[(4, 6, 16), int64], %var_4245: Tensor[(210), float32], %var_4252: Tensor[(4, 6, 16), bool]) -> (Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) {
  %215 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %216 = cast(%var_4228, dtype="float32") /* ty=float32 */;
  %217 = cast(%var_4245, dtype="float32") /* ty=Tensor[(210), float32] */;
  %218 = reshape(%216, newshape=[]) /* ty=float32 */;
  %219 = reshape(%217, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %220 = @func_2664(%218, %219) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) */;
  %221 = cast(%var_4228, dtype="bool") /* ty=bool */;
  %222 = cast(%var_4229, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
  %223 = greater(%221, %222) /* ty=Tensor[(4, 6, 16), bool] */;
  %224 = cast(%var_4252, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = %215.0;
  %229 = %220.4;
  %230 = logical_and(%226, %227) /* ty=Tensor[(4, 6, 16), bool] */;
  (%228, %229, %var_4245, %230)
}

def @func_6263() -> (Tensor[(9, 11, 16), float32],) {
  %231 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %232 = %231.0;
  (%232,)
}

def @func_3183() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %233 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %234 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
  %235 = %233.0;
  %236 = %234.0;
  (%235, %236)
}

def @func_1954(%var_1951: Tensor[(8, 3, 4), float32]) -> Tensor[(8, 3, 4), float32] {
  %237 = cast(%var_1951, dtype="float32") /* ty=Tensor[(8, 3, 4), float32] */;
  sinh(%237) /* ty=Tensor[(8, 3, 4), float32] */
}

def @func_8702() -> Tensor[(9, 11, 16), float64] {
  %238 = @func_5533() /* ty=(Tensor[(9, 11, 16), int32], float32, Tensor[(9, 11, 16), float64]) */;
  %238.2
}

def @func_3000() -> (Tensor[(9, 11, 16), int32],) {
  %239 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  %240 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
  %241 = %240.2;
  %242 = cast(%241, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
  %243 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%239, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %246 = right_shift(%244, %245) /* ty=Tensor[(9, 11, 16), int32] */;
  (%246,)
}

def @func_4566() -> Tensor[(9, 11, 16), float64] {
  @func_4363() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_8191() -> (Tensor[(9, 11, 16), float64],) {
  %247 = @func_4566() /* ty=Tensor[(9, 11, 16), float64] */;
  (%247,)
}

def @func_9243(%var_9219: Tensor[(7, 4, 16), uint32]) -> (Tensor[(7, 4, 16), float32], Tensor[(7, 4, 16), bool]) {
  %248 = cast(%var_9219, dtype="uint32") /* ty=Tensor[(7, 4, 16), uint32] */;
  %249 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(7, 4, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 4, 16), uint32] */, dtype="uint32") /* ty=Tensor[(7, 4, 16), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %252 = multiply(%250, %251) /* ty=Tensor[(7, 4, 16), uint32] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(7, 4, 16), float32] */;
  %254 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 4, 16), uint32] */, dtype="bool") /* ty=Tensor[(7, 4, 16), bool] */;
  %255 = shape_of(%var_9219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_9219, dtype="bool") /* ty=Tensor[(7, 4, 16), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = sin(%253) /* ty=Tensor[(7, 4, 16), float32] */;
  %259 = less(%256, %257) /* ty=Tensor[(7, 4, 16), bool] */;
  (%258, %259)
}

def @func_2302() -> (Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) {
  %260 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %261 = %260.0;
  %262 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 11, 16), float64] */, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %266 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 11, 16), float64] */, dtype="uint64") /* ty=Tensor[(9, 11, 16), uint64] */;
  %267 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%261, dtype="uint64") /* ty=Tensor[(9, 11, 16), uint64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %270 = equal(%264, %265) /* ty=Tensor[(9, 11, 16), bool] */;
  %271 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %272 = add(%268, %269) /* ty=Tensor[(9, 11, 16), uint64] */;
  (%270, %271, %272)
}

def @func_2944() -> Tensor[(9, 11, 16), float64] {
  %273 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %273.0
}

def @func_8865() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(144, 2), float32]) {
  %274 = cast(meta[relay.Constant][20] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %275 = cast(meta[relay.Constant][20] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %276 = reshape(%274, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %277 = reshape(%275, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %278 = @func_5747(%276, %277) /* ty=(Tensor[(9, 8, 4), bool],) */;
  %279 = @func_8468() /* ty=Tensor[(9, 11, 16), float32] */;
  %280 = %278.0;
  (%279, %280, meta[relay.Constant][20] /* ty=Tensor[(144, 2), float32] */)
}

def @func_2682() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) {
  %281 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %282 = %281.0;
  %283 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
  (%282, %283)
}

def @func_2100() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) {
  %284 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %285 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %288 = log10(%287) /* ty=Tensor[(9, 11, 16), float64] */;
  %289 = cast(%286, dtype="int16") /* ty=Tensor[(9, 11, 16), int16] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="int16") /* ty=Tensor[(9, 11, 16), int16] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %293 = %284.0;
  %294 = bitwise_xor(%291, %292) /* ty=Tensor[(9, 11, 16), int16] */;
  (%293, %294)
}

def @func_2918(%var_2801: Tensor[(9, 11, 16), float64]) -> (Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %295 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  %296 = cast(%var_2801, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %300 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %301 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %302 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %303 = cast(%var_2801, dtype="uint8") /* ty=Tensor[(9, 11, 16), uint8] */;
  %304 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%295, dtype="uint8") /* ty=Tensor[(9, 11, 16), uint8] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %307 = bitwise_and(%305, %306) /* ty=Tensor[(9, 11, 16), uint8] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %309 = sigmoid(%308) /* ty=Tensor[(9, 11, 16), float64] */;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %311 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %312 = multiply(%298, %299) /* ty=Tensor[(9, 11, 16), float32] */;
  %313 = %300.0;
  %314 = %301.0;
  %315 = %302.0;
  %316 = atanh(%310) /* ty=Tensor[(9, 11, 16), float32] */;
  %317 = %311.0;
  (%312, %313, %314, %315, %316, %317)
}

def @func_7498() -> (Tensor[(9, 11, 16), float64],) {
  %318 = @func_5064() /* ty=Tensor[(9, 11, 16), float64] */;
  (%318,)
}

def @func_8502() -> (Tensor[(9, 11, 16), float64],) {
  %319 = @func_3156() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %320 = %319.0;
  (%320,)
}

def @func_8952() -> (Tensor[(480), uint8],) {
  %321 = @func_4694() /* ty=(Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) */;
  %322 = %321.0;
  (%322,)
}

def @func_3833(%var_3789: Tensor[(6, 7, 14), float32], %var_3790: Tensor[(6, 7, 14), float32]) -> (Tensor[(6, 7, 14), float32], Tensor[(7, 10, 8), float64], Tensor[(560), float32], Tensor[(9, 11, 16), float32], Tensor[(13, 15, 3), uint32], Tensor[(585), uint32], Tensor[(9, 11, 16), float64]) {
  %323 = cast(%var_3790, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %324 = shape_of(%var_3789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_3789, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %327 = cast(meta[relay.Constant][21] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %328 = reshape(%327, newshape=[7, 10, 8]) /* ty=Tensor[(7, 10, 8), float32] */;
  %329 = @func_3109(%328) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) */;
  %330 = cast(meta[relay.Constant][22] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %331 = cast(meta[relay.Constant][22] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %332 = reshape(%330, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %333 = reshape(%331, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %334 = @func_184(%332, %333) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %335 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %336 = power(%325, %326) /* ty=Tensor[(6, 7, 14), float32] */;
  %337 = %329.1;
  %338 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %339 = %334.0;
  %340 = %335.0;
  (%336, %337, meta[relay.Constant][21] /* ty=Tensor[(560), float32] */, %338, %339, meta[relay.Constant][22] /* ty=Tensor[(585), uint32] */, %340)
}

def @func_6454(%var_6436: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64], Tensor[(9, 11, 16), float32]) {
  %341 = cast(%var_6436, dtype="float64") /* ty=Tensor[(5, 2, 2), float64] */;
  %342 = tan(%341) /* ty=Tensor[(5, 2, 2), float64] */;
  %343 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  (%342, %343)
}

def @func_3156() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %344 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %345 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %346 = %344.0;
  %347 = %345.0;
  (%346, %347)
}

def @func_4306(%var_4300: Tensor[(384, 1), int64]) -> (Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) {
  %348 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
  %349 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %350 = reshape(%349, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), float32] */;
  %351 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %352 = cast(%var_4300, dtype="int64") /* ty=Tensor[(384, 1), int64] */;
  %353 = cast(meta[relay.Constant][24] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %354 = cast(%var_4300, dtype="bool") /* ty=Tensor[(384, 1), bool] */;
  %355 = reshape(%351, newshape=[]) /* ty=int64 */;
  %356 = reshape(%352, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), int64] */;
  %357 = reshape(%353, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %358 = reshape(%354, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), bool] */;
  %359 = @func_4256(%355, %356, %357, %358) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) */;
  %360 = %348.1;
  %361 = @func_1954(%350) /* ty=Tensor[(8, 3, 4), float32] */;
  %362 = %359.2;
  %363 = @func_3869() /* ty=Tensor[(9, 11, 16), int32] */;
  (%360, %361, meta[relay.Constant][23] /* ty=Tensor[(1, 96), float32] */, %362, 7 /* ty=int64 */, %var_4300, meta[relay.Constant][24] /* ty=Tensor[(210), float32] */, %363)
}

def @func_4363() -> Tensor[(9, 11, 16), float64] {
  %364 = @func_3341() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %364.0
}

def @main(%var_9585: Tensor[(11, 8, 8), uint16], %var_9586: Tensor[(11, 8, 8), uint16]) -> (Tensor[(11, 8, 8), uint16],) {
  %365 = cast(%var_9586, dtype="uint16") /* ty=Tensor[(11, 8, 8), uint16] */;
  %366 = shape_of(%var_9585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_9585, dtype="uint16") /* ty=Tensor[(11, 8, 8), uint16] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %369 = minimum(%367, %368) /* ty=Tensor[(11, 8, 8), uint16] */;
  (%369,)
}

def @func_1535() -> (Tensor[(9, 11, 16), float64],) {
  %370 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %371 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(9, 11, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %374 = floor_mod(%372, %373) /* ty=Tensor[(9, 11, 16), float64] */;
  (%374,)
}

def @func_7446() -> (Tensor[(11, 7, 8), float32], Tensor[(9, 11, 16), float32]) {
  %375 = @func_7271() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %376 = @func_6053() /* ty=Tensor[(11, 7, 8), float32] */;
  %377 = %375.0;
  (%376, %377)
}

def @func_4586() -> (Tensor[(9, 11, 16), int32],) {
  %378 = @func_3869() /* ty=Tensor[(9, 11, 16), int32] */;
  (%378,)
}

def @func_2624(%var_2583: float32, %var_2584: Tensor[(14, 1, 15), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) {
  %379 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %380 = cast(%var_2583, dtype="float32") /* ty=float32 */;
  %381 = cast(%var_2584, dtype="float32") /* ty=Tensor[(14, 1, 15), float32] */;
  %382 = mod(%380, %381) /* ty=Tensor[(14, 1, 15), float32] */;
  %383 = cast(%382, dtype="uint32") /* ty=Tensor[(14, 1, 15), uint32] */;
  %384 = cast(%var_2583, dtype="uint32") /* ty=uint32 */;
  %385 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %387 = cast(meta[relay.Constant][27] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %388 = reshape(%387, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), float32] */;
  %389 = %379.0;
  %390 = subtract(%383, %384) /* ty=Tensor[(14, 1, 15), uint32] */;
  %391 = log(%386) /* ty=Tensor[(9, 11, 16), float32] */;
  %392 = @func_1954(%388) /* ty=Tensor[(8, 3, 4), float32] */;
  (%389, %390, %391, %392, meta[relay.Constant][27] /* ty=Tensor[(96), float32] */)
}

def @func_6560() -> (Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(9, 11, 16), float32]) {
  %393 = @func_4694() /* ty=(Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) */;
  %394 = @func_3257() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %395 = @func_5984() /* ty=Tensor[(9, 11, 16), float64] */;
  %396 = %393.0;
  %397 = %394.1;
  (%395, %396, %397)
}

def @func_3341() -> (Tensor[(9, 11, 16), float64],) {
  %398 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %399 = %398.0;
  %400 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 11, 16), int32] */, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %404 = power(%402, %403) /* ty=Tensor[(9, 11, 16), float64] */;
  (%404,)
}

def @func_9489() -> (Tensor[(288), float32], Tensor[(3, 8, 5), float32], Tensor[(9, 11, 16), float64], float32, Tensor[(210, 1), float32]) {
  %405 = @func_6784() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 8, 4), float64], Tensor[(288), float32]) */;
  %406 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
  %407 = %406.4;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %409 = cast(7.56204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %410 = cast(meta[relay.Constant][29] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %411 = reshape(%409, newshape=[]) /* ty=float32 */;
  %412 = reshape(%410, newshape=[14, 1, 15]) /* ty=Tensor[(14, 1, 15), float32] */;
  %413 = @func_2624(%411, %412) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
  %414 = %405.3;
  %415 = asinh(%408) /* ty=Tensor[(3, 8, 5), float32] */;
  %416 = %413.0;
  (%414, %415, %416, 7.56204f /* ty=float32 */, meta[relay.Constant][29] /* ty=Tensor[(210, 1), float32] */)
}

def @func_8401() -> (Tensor[(9, 11, 16), int16],) {
  %417 = @func_7802() /* ty=(Tensor[(9, 11, 16), int16],) */;
  %418 = %417.0;
  (%418,)
}

def @func_9090() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) {
  %419 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
  %420 = @func_4363() /* ty=Tensor[(9, 11, 16), float64] */;
  %421 = %419.0;
  (%420, %421)
}

def @func_3257() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %422 = @func_3156() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %423 = %422.1;
  %424 = cast(%423, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %425 = reshape(%424, newshape=[9, 11, 16]) /* ty=Tensor[(9, 11, 16), float64] */;
  %426 = @func_2918(%425) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %427 = %426.5;
  (%423, %427)
}

def @func_3773() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) {
  %428 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %429 = cast(meta[relay.Constant][30] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %430 = reshape(%429, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), uint8] */;
  %431 = @func_570(%430) /* ty=(Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) */;
  %432 = %431.1;
  %433 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 7, 8), bool] */, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = @func_3257() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %438 = cast(%432, dtype="float32") /* ty=Tensor[(11, 7, 8), float32] */;
  %439 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  %440 = %428.0;
  %441 = less_equal(%435, %436) /* ty=Tensor[(11, 7, 8), bool] */;
  %442 = %437.0;
  %443 = acosh(%438) /* ty=Tensor[(11, 7, 8), float32] */;
  (%439, %440, meta[relay.Constant][30] /* ty=Tensor[(480), uint8] */, %441, %442, %443)
}

def @func_5533() -> (Tensor[(9, 11, 16), int32], float32, Tensor[(9, 11, 16), float64]) {
  %444 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %445 = @func_5491() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) */;
  %446 = @func_3341() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %447 = %444.0;
  %448 = %445.3;
  %449 = %446.0;
  (%447, %448, %449)
}

def @func_3459() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  %450 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %451 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %452 = %450.1;
  %453 = @func_2953() /* ty=Tensor[(9, 11, 16), float32] */;
  %454 = %451.0;
  %455 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  (%452, %453, %454, %455)
}

def @func_4694() -> (Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) {
  %456 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
  %457 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
  %458 = %456.2;
  %459 = %457.1;
  (%458, %459)
}

def @func_8096(%var_8090: Tensor[(2, 11, 15), float32]) -> (Tensor[(2, 11, 15), float32],) {
  %460 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(2, 11, 15), float32] */;
  %461 = shape_of(%var_8090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_8090, dtype="float32") /* ty=Tensor[(2, 11, 15), float32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %464 = floor_mod(%462, %463) /* ty=Tensor[(2, 11, 15), float32] */;
  (%464,)
}

def @func_4041() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) {
  %465 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
  %466 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
  %467 = cast(meta[relay.Constant][33] /* ty=Tensor[(525), bool] */, dtype="bool") /* ty=Tensor[(525), bool] */;
  %468 = cast(meta[relay.Constant][33] /* ty=Tensor[(525), bool] */, dtype="bool") /* ty=Tensor[(525), bool] */;
  %469 = reshape(%467, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), bool] */;
  %470 = reshape(%468, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), bool] */;
  %471 = @func_2381(%469, %470) /* ty=(Tensor[(5, 7, 15), int64], Tensor[(5, 7, 15), float64]) */;
  %472 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
  %473 = %465.1;
  %474 = %466.0;
  %475 = %471.0;
  (%472, %473, %474, %475, meta[relay.Constant][33] /* ty=Tensor[(525), bool] */)
}

def @func_4170() -> (Tensor[(9, 11, 16), float64],) {
  %476 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %477 = %476.0;
  (%477,)
}

def @func_8742(%var_8704: int64, %var_8726: Tensor[(384), int64]) -> (Tensor[(9, 1, 7), uint16], Tensor[(210), float32], Tensor[(384), int64]) {
  %478 = cast(%var_8704, dtype="int64") /* ty=int64 */;
  %479 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 1, 7), int64] */, dtype="int64") /* ty=Tensor[(9, 1, 7), int64] */;
  %480 = bitwise_or(%478, %479) /* ty=Tensor[(9, 1, 7), int64] */;
  %481 = cast(%var_8704, dtype="uint16") /* ty=uint16 */;
  %482 = cast(%480, dtype="uint16") /* ty=Tensor[(9, 1, 7), uint16] */;
  %483 = cast(%var_8726, dtype="int64") /* ty=Tensor[(384), int64] */;
  %484 = reshape(%483, newshape=[384, 1]) /* ty=Tensor[(384, 1), int64] */;
  %485 = @func_4306(%484) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */;
  %486 = logical_xor(%481, %482) /* ty=Tensor[(9, 1, 7), uint16] */;
  %487 = %485.3;
  (%486, %487, %var_8726)
}

def @func_3665() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) {
  %488 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %489 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %490 = %489.0;
  %491 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %492 = %491.0;
  %493 = cast(%492, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %494 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%490, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = %488.0;
  %498 = less_equal(%495, %496) /* ty=Tensor[(9, 11, 16), bool] */;
  (%497, %498)
}

def @func_5884(%var_5857: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), float32]) {
  %499 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %500 = cast(%var_5857, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %501 = reshape(%500, newshape=[480]) /* ty=Tensor[(480), uint8] */;
  %502 = @func_3601(%501) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(6, 7, 8), uint8]) */;
  %503 = @func_3459() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
  %504 = @func_4482() /* ty=(Tensor[(3, 8, 5), bool],) */;
  %505 = %504.0;
  %506 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 8, 5), bool] */, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %510 = %499.0;
  %511 = @func_5349() /* ty=Tensor[(9, 11, 16), uint64] */;
  %512 = %502.1;
  %513 = %503.2;
  %514 = power(%508, %509) /* ty=Tensor[(3, 8, 5), float32] */;
  (%510, %511, %512, %var_5857, %513, %514)
}

def @func_8078(%var_8072: Tensor[(5, 4, 10), int64]) -> (Tensor[(5, 4, 10), int64],) {
  %515 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 4, 10), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 10), int64] */;
  %516 = shape_of(%var_8072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_8072, dtype="int64") /* ty=Tensor[(5, 4, 10), int64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %519 = bitwise_or(%517, %518) /* ty=Tensor[(5, 4, 10), int64] */;
  (%519,)
}

def @func_1741() -> (Tensor[(9, 11, 16), int32],) {
  %520 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %521 = %520.0;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %523 = log2(%522) /* ty=Tensor[(9, 11, 16), float32] */;
  %524 = cast(%521, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %528 = bitwise_or(%526, %527) /* ty=Tensor[(9, 11, 16), int32] */;
  (%528,)
}

def @func_1922(%var_1918: Tensor[(1872), uint16]) -> (Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) {
  %529 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %530 = cast(meta[relay.Constant][37] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %531 = cast(%var_1918, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %532 = cast(%var_1918, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %533 = reshape(%530, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint16] */;
  %534 = reshape(%531, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
  %535 = reshape(%532, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
  %536 = @func_1878(%533, %534, %535) /* ty=(Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) */;
  %537 = %529.0;
  %538 = %536.1;
  (%537, %538, meta[relay.Constant][37] /* ty=Tensor[(144), uint16] */, %var_1918)
}

def @func_8302() -> (Tensor[(9, 11, 16), int32],) {
  %539 = @func_6964() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %540 = %539.1;
  (%540,)
}

def @func_5228() -> (Tensor[(9, 11, 16), float64],) {
  %541 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  (%541,)
}

def @func_2953() -> Tensor[(9, 11, 16), float32] {
  %542 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %542.0
}

def @func_9281(%var_9271: Tensor[(288), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(288), float32], Tensor[(288), float32]) {
  %543 = @func_7498() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %544 = cast(%var_9271, dtype="float32") /* ty=Tensor[(288), float32] */;
  %545 = reshape(%544, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %546 = @func_6198(%545) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(288), float32], Tensor[(11, 7, 8), bool], Tensor[(616), int64], Tensor[(9, 11, 16), int32]) */;
  %547 = %543.0;
  %548 = %546.5;
  (%547, %548, %var_9271)
}

def @func_8883() -> (Tensor[(9, 11, 16), int32],) {
  %549 = @func_8370() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
  %550 = %549.0;
  (%550,)
}

def @func_338(%var_287: Tensor[(11, 7, 8), int64]) -> (Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) {
  %551 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 7, 8), int64] */, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %552 = shape_of(%var_287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_287, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = cast(meta[relay.Constant][39] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %556 = cast(meta[relay.Constant][39] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %557 = reshape(%555, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %558 = reshape(%556, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %559 = @func_184(%557, %558) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %560 = cast(meta[relay.Constant][39] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %561 = cast(meta[relay.Constant][39] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %562 = reshape(%560, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %563 = reshape(%561, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %564 = @func_184(%562, %563) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %565 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 7, 8), int64] */, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
  %566 = cosh(%565) /* ty=Tensor[(11, 7, 8), float64] */;
  %567 = cast(%var_287, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%566, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %571 = %564.0;
  %572 = cast(%571, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %573 = cast(meta[relay.Constant][39] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %574 = reshape(%572, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %575 = reshape(%573, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %576 = @func_184(%574, %575) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %577 = %559.1;
  %578 = cast(%577, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %579 = cast(meta[relay.Constant][39] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %580 = reshape(%578, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %581 = reshape(%579, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %582 = @func_184(%580, %581) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %583 = less(%553, %554) /* ty=Tensor[(11, 7, 8), bool] */;
  %584 = logical_or(%569, %570) /* ty=Tensor[(11, 7, 8), bool] */;
  %585 = %576.0;
  %586 = %582.1;
  (%583, %577, meta[relay.Constant][39] /* ty=Tensor[(585), uint32] */, %571, %584, %585, %586)
}

def @func_2664(%var_2656: float32, %var_2657: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) {
  %587 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %588 = cast(%var_2656, dtype="float32") /* ty=float32 */;
  %589 = cast(%var_2657, dtype="float32") /* ty=Tensor[(210), float32] */;
  %590 = reshape(%588, newshape=[]) /* ty=float32 */;
  %591 = reshape(%589, newshape=[14, 1, 15]) /* ty=Tensor[(14, 1, 15), float32] */;
  %592 = @func_2624(%590, %591) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
  %593 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
  %594 = %587.0;
  %595 = %592.1;
  (%593, %594, %595, %var_2656, %var_2657)
}

def @func_7657() -> (Tensor[(9, 11, 16), float32],) {
  %596 = @func_4608() /* ty=Tensor[(9, 11, 16), float32] */;
  (%596,)
}

def @func_6053() -> Tensor[(11, 7, 8), float32] {
  %597 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
  %597.5
}

def @func_2065() -> Tensor[(9, 11, 16), float32] {
  %598 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %598.1
}

def @func_3122() -> (Tensor[(9, 11, 16), float64],) {
  %599 = @func_2944() /* ty=Tensor[(9, 11, 16), float64] */;
  (%599,)
}

def @func_8468() -> Tensor[(9, 11, 16), float32] {
  %600 = @func_4977() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %600.0
}

def @func_6332(%var_6295: Tensor[(16, 10, 9), float32]) -> (Tensor[(16, 10, 9), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %601 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 10, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
  %602 = shape_of(%var_6295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_6295, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %605 = mod(%603, %604) /* ty=Tensor[(16, 10, 9), float32] */;
  %606 = cast(%var_6295, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = @func_6243() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %611 = @func_3459() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
  %612 = not_equal(%608, %609) /* ty=Tensor[(16, 10, 9), bool] */;
  %613 = @func_5984() /* ty=Tensor[(9, 11, 16), float64] */;
  %614 = %610.0;
  %615 = %611.1;
  (%612, %613, %614, %615)
}

def @func_4904(%var_4893: float32, %var_4894: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16], Tensor[(210), float32], float32, Tensor[(210), float32], Tensor[(96), float32], Tensor[(96), float32]) {
  %616 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %617 = cast(meta[relay.Constant][41] /* ty=Tensor[(1872), uint16] */, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %618 = reshape(%617, newshape=[1872]) /* ty=Tensor[(1872), uint16] */;
  %619 = @func_1922(%618) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) */;
  %620 = cast(%var_4893, dtype="float32") /* ty=float32 */;
  %621 = cast(%var_4894, dtype="float32") /* ty=Tensor[(210), float32] */;
  %622 = reshape(%620, newshape=[]) /* ty=float32 */;
  %623 = reshape(%621, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %624 = @func_2664(%622, %623) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) */;
  %625 = cast(meta[relay.Constant][42] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %626 = reshape(%625, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %627 = @func_3897(%626) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
  %628 = %616.0;
  %629 = %619.1;
  %630 = %624.4;
  %631 = %627.2;
  (%628, %629, meta[relay.Constant][41] /* ty=Tensor[(1872), uint16] */, %630, %var_4893, %var_4894, %631, meta[relay.Constant][42] /* ty=Tensor[(96), float32] */)
}

def @func_4663(%var_4637: Tensor[(11, 5, 5), float32], %var_4638: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), float32] {
  %632 = cast(%var_4638, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %633 = shape_of(%var_4637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%var_4637, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%634, %635) /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_7962() -> Tensor[(9, 11, 16), int16] {
  %636 = @func_7802() /* ty=(Tensor[(9, 11, 16), int16],) */;
  %636.0
}

def @func_5670(%var_5651: Tensor[(560, 1), float32]) -> (Tensor[(5, 7, 15), int64], Tensor[(9, 11, 16), float32], Tensor[(560, 1), float32], Tensor[(9, 11, 16), float64]) {
  %637 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
  %638 = cast(%var_5651, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %639 = reshape(%638, newshape=[7, 10, 8]) /* ty=Tensor[(7, 10, 8), float32] */;
  %640 = @func_3109(%639) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) */;
  %641 = @func_3534() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %642 = %637.3;
  %643 = %640.0;
  %644 = %641.0;
  (%642, %643, %var_5651, %644)
}

def @func_5319() -> (Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) {
  %645 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %646 = cast(meta[relay.Constant][43] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %647 = reshape(%646, newshape=[7, 10, 8]) /* ty=Tensor[(7, 10, 8), float32] */;
  %648 = @func_3109(%647) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) */;
  %649 = %645.1;
  %650 = %648.1;
  (%649, %650, meta[relay.Constant][43] /* ty=Tensor[(560), float32] */)
}

def @func_7421() -> Tensor[(9, 11, 16), float32] {
  %651 = @func_6263() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %651.0
}

def @func_7802() -> (Tensor[(9, 11, 16), int16],) {
  %652 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
  %653 = %652.1;
  (%653,)
}

def @func_5429() -> (Tensor[(9, 11, 16), float64], Tensor[(?, 16, 9), bool]) {
  %654 = @func_4170() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %655 = @func_5126() /* ty=(Tensor[(1, 16, 9), int16],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
  %658 = log2(%657) /* ty=Tensor[(1, 16, 9), float64] */;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
  %660 = sigmoid(%659) /* ty=Tensor[(1, 16, 9), float32] */;
  %661 = cast(%658, dtype="int64") /* ty=Tensor[(1, 16, 9), int64] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="int64") /* ty=Tensor[(1, 16, 9), int64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %665 = logical_xor(%663, %664) /* ty=Tensor[(?, 16, 9), int64] */;
  %666 = cast(%665, dtype="bool") /* ty=Tensor[(?, 16, 9), bool] */;
  %667 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%658, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %670 = %654.0;
  %671 = equal(%668, %669) /* ty=Tensor[(?, 16, 9), bool] */;
  (%670, %671)
}

def @func_9160(%var_9146: Tensor[(4, 8, 5), int32], %var_9147: Tensor[(4, 8, 5), int32]) -> Tensor[(4, 8, 5), bool] {
  %672 = cast(%var_9147, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
  %673 = shape_of(%var_9146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%var_9146, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %676 = less(%674, %675) /* ty=Tensor[(4, 8, 5), bool] */;
  %677 = cast(%676, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
  %678 = shape_of(%var_9146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_9146, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%679, %680) /* ty=Tensor[(4, 8, 5), bool] */
}

def @func_240(%var_237: Tensor[(6, 7, 8), float64]) -> Tensor[(6, 7, 8), float64] {
  %681 = cast(%var_237, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  log2(%681) /* ty=Tensor[(6, 7, 8), float64] */
}

def @func_5747(%var_5725: Tensor[(9, 8, 4), float32], %var_5740: Tensor[(9, 8, 4), float32]) -> (Tensor[(9, 8, 4), bool],) {
  %682 = cast(%var_5725, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
  %683 = rsqrt(%682) /* ty=Tensor[(9, 8, 4), float32] */;
  %684 = cast(%var_5740, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %688 = logical_or(%686, %687) /* ty=Tensor[(9, 8, 4), bool] */;
  (%688,)
}

def @func_7271() -> (Tensor[(9, 11, 16), float32],) {
  %689 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %690 = %689.0;
  (%690,)
}

def @func_1878(%var_1853: Tensor[(16, 1, 9), uint16], %var_1854: Tensor[(16, 13, 9), uint16], %var_1874: Tensor[(16, 13, 9), uint16]) -> (Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) {
  %691 = cast(%var_1853, dtype="uint16") /* ty=Tensor[(16, 1, 9), uint16] */;
  %692 = cast(%var_1854, dtype="uint16") /* ty=Tensor[(16, 13, 9), uint16] */;
  %693 = cast(%var_1874, dtype="uint64") /* ty=Tensor[(16, 13, 9), uint64] */;
  %694 = shape_of(%var_1854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_1854, dtype="uint64") /* ty=Tensor[(16, 13, 9), uint64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %697 = add(%691, %692) /* ty=Tensor[(16, 13, 9), uint16] */;
  %698 = bitwise_and(%695, %696) /* ty=Tensor[(16, 13, 9), uint64] */;
  (%697, %698)
}

def @func_4977() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %699 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %700 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
  %701 = @func_2163() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %702 = %699.1;
  %703 = %700.0;
  %704 = %701.0;
  (%702, %703, %704)
}

def @func_5126() -> (Tensor[(1, 16, 9), int16],) {
  %705 = cast(meta[relay.Constant][44] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %706 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 16, 9), int16] */, dtype="int16") /* ty=Tensor[(1, 16, 9), int16] */;
  %707 = maximum(%705, %706) /* ty=Tensor[(1, 16, 9), int16] */;
  (%707,)
}

def @func_6432(%var_6412: Tensor[(384), int64]) -> (Tensor[(7, 10, 8), int64], Tensor[(1, 96), float32], Tensor[(384), int64], Tensor[(7, 10, 8), float64]) {
  %708 = @func_5319() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) */;
  %709 = %708.1;
  %710 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 10, 8), float64] */, dtype="int64") /* ty=Tensor[(7, 10, 8), int64] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="int64") /* ty=Tensor[(7, 10, 8), int64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %714 = cast(%var_6412, dtype="int64") /* ty=Tensor[(384), int64] */;
  %715 = reshape(%714, newshape=[384, 1]) /* ty=Tensor[(384, 1), int64] */;
  %716 = @func_4306(%715) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */;
  %717 = cast(%709, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
  %718 = asinh(%717) /* ty=Tensor[(7, 10, 8), float64] */;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
  %720 = bitwise_and(%712, %713) /* ty=Tensor[(7, 10, 8), int64] */;
  %721 = %716.2;
  %722 = cosh(%719) /* ty=Tensor[(7, 10, 8), float64] */;
  (%720, %721, %var_6412, %722)
}

def @func_9546() -> (Tensor[(9, 11, 16), int32],) {
  %723 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %724 = %723.0;
  (%724,)
}

def @func_7248(%var_7211: Tensor[(10, 16, 14), float32], %var_7237: Tensor[(10, 16, 14), float32]) -> (Tensor[(10, 16, 14), float32], Tensor[(10, 16, 14), float32], Tensor[(9, 11, 16), float64]) {
  %725 = cast(%var_7211, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %726 = cast(%var_7237, dtype="uint64") /* ty=Tensor[(10, 16, 14), uint64] */;
  %727 = shape_of(%var_7211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%var_7211, dtype="uint64") /* ty=Tensor[(10, 16, 14), uint64] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %730 = bitwise_xor(%728, %729) /* ty=Tensor[(10, 16, 14), uint64] */;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %732 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %733 = asinh(%725) /* ty=Tensor[(10, 16, 14), float32] */;
  %734 = cos(%731) /* ty=Tensor[(10, 16, 14), float32] */;
  %735 = %732.0;
  (%733, %734, %735)
}

def @func_8370() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  %736 = @func_2201() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %737 = @func_8065() /* ty=(Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %738 = @func_7339() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), bool]) */;
  %739 = @func_3965() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
  %740 = %736.0;
  %741 = %737.0;
  %742 = %738.0;
  %743 = %739.2;
  (%740, %741, %742, %743)
}

def @func_3897(%var_3885: Tensor[(96), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) {
  %744 = cast(%var_3885, dtype="float32") /* ty=Tensor[(96), float32] */;
  %745 = reshape(%744, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), float32] */;
  %746 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %747 = @func_1954(%745) /* ty=Tensor[(8, 3, 4), float32] */;
  (%746, %747, %var_3885)
}

def @func_7413(%var_7353: Tensor[(192), uint16], %var_7406: Tensor[(4, 4, 12), uint8]) -> (Tensor[(9, 11, 16), float32], Tensor[(192), uint16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(4, 4, 12), bool]) {
  %748 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %749 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %750 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
  %751 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %752 = cast(%var_7353, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %753 = reshape(%752, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), uint16] */;
  %754 = @func_3709(%753) /* ty=(Tensor[(4, 4, 12), uint16],) */;
  %755 = %754.0;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %757 = tan(%756) /* ty=Tensor[(4, 4, 12), float64] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %762 = greater_equal(%760, %761) /* ty=Tensor[(4, 4, 12), bool] */;
  %763 = cast(%757, dtype="uint8") /* ty=Tensor[(4, 4, 12), uint8] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="uint8") /* ty=Tensor[(4, 4, 12), uint8] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %767 = maximum(%765, %766) /* ty=Tensor[(4, 4, 12), uint8] */;
  %768 = cast(%var_7406, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = %748.1;
  %773 = %749.0;
  %774 = %750.1;
  %775 = %751.0;
  %776 = less_equal(%770, %771) /* ty=Tensor[(4, 4, 12), bool] */;
  (%772, %var_7353, %773, %774, %775, %776)
}

def @func_5064() -> Tensor[(9, 11, 16), float64] {
  @func_2944() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_5681() -> (Tensor[(9, 11, 16), float64],) {
  %777 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %778 = %777.0;
  (%778,)
}

def @func_2793() -> (Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) {
  %779 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %780 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %781 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %782 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %783 = %782.0;
  %784 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %785 = %784.0;
  %786 = cast(%785, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %787 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%783, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %790 = %779.1;
  %791 = %780.0;
  %792 = %781.0;
  %793 = logical_and(%788, %789) /* ty=Tensor[(9, 11, 16), bool] */;
  (%790, %791, %792, %793)
}

def @func_3534() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %794 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %795 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %796 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %798 = asin(%797) /* ty=Tensor[(9, 11, 16), float32] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %800 = %794.0;
  %801 = %795.0;
  %802 = acosh(%799) /* ty=Tensor[(9, 11, 16), float32] */;
  (%800, %801, %802)
}

def @func_2524() -> (Tensor[(9, 11, 16), float32],) {
  %803 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %805 = cosh(%804) /* ty=Tensor[(9, 11, 16), float32] */;
  (%805,)
}

def @func_2221() -> (Tensor[(9, 11, 16), int32],) {
  %806 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %807 = %806.0;
  (%807,)
}

def @func_1573() -> (Tensor[(9, 11, 16), float32],) {
  %808 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %809 = %808.0;
  %810 = cast(%809, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %811 = cos(%810) /* ty=Tensor[(9, 11, 16), float32] */;
  (%811,)
}

def @func_5201() -> (Tensor[(9, 11, 16), float64],) {
  %812 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  (%812,)
}

def @func_5028(%var_5022: Tensor[(1872), uint16]) -> (Tensor[(9, 11, 16), int32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16]) {
  %813 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %814 = cast(%var_5022, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %815 = reshape(%814, newshape=[1872]) /* ty=Tensor[(1872), uint16] */;
  %816 = @func_1922(%815) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) */;
  %817 = %813.0;
  %818 = %816.1;
  (%817, %818, %var_5022)
}

def @func_8615() -> (Tensor[(9, 11, 16), float32],) {
  %819 = @func_2163() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %820 = %819.0;
  (%820,)
}

def @func_7339() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), bool]) {
  %821 = @func_6546() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %822 = @func_6579() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %823 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %824 = @func_4482() /* ty=(Tensor[(3, 8, 5), bool],) */;
  %825 = %821.0;
  %826 = %822.0;
  %827 = %823.0;
  %828 = %824.0;
  (%825, %826, %827, %828)
}

def @func_8594() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64]) {
  %829 = @func_8502() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %830 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  %831 = %829.0;
  (%830, %831)
}

def @func_8329(%var_8306: Tensor[(14, 2, 16), float64]) -> (Tensor[(14, 2, 16), float64], int64) {
  %832 = cast(-7.14438f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %833 = cast(%var_8306, dtype="float64") /* ty=Tensor[(14, 2, 16), float64] */;
  %834 = cast(-7.14438f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %835 = reshape(%834, newshape=[]) /* ty=int64 */;
  %836 = @func_7914(%835) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(210), float32], int64, Tensor[(384), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */;
  %837 = divide(%832, %833) /* ty=Tensor[(14, 2, 16), float64] */;
  %838 = %836.2;
  (%837, %838)
}

def @func_9136(%var_9131: Tensor[(5, 66), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(2, 11, 15), float32], Tensor[(5, 66), float64]) {
  %839 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
  %840 = @func_6560() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(9, 11, 16), float32]) */;
  %841 = cast(%var_9131, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %842 = reshape(%841, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), float32] */;
  %843 = @func_8096(%842) /* ty=(Tensor[(2, 11, 15), float32],) */;
  %844 = cast(%var_9131, dtype="float64") /* ty=Tensor[(5, 66), float64] */;
  %845 = %839.3;
  %846 = %840.2;
  %847 = %843.0;
  %848 = cos(%844) /* ty=Tensor[(5, 66), float64] */;
  (%845, %846, %847, %848)
}

def @func_2381(%var_2319: Tensor[(5, 7, 15), bool], %var_2335: Tensor[(5, 7, 15), bool]) -> (Tensor[(5, 7, 15), int64], Tensor[(5, 7, 15), float64]) {
  %849 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %850 = %849.0;
  %851 = cast(%var_2335, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
  %852 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%850, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %855 = cast(%var_2319, dtype="uint16") /* ty=Tensor[(5, 7, 15), uint16] */;
  %856 = shape_of(%850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%850, dtype="uint16") /* ty=Tensor[(5, 7, 15), uint16] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %859 = bitwise_or(%857, %858) /* ty=Tensor[(5, 7, 15), uint16] */;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %861 = bitwise_and(%853, %854) /* ty=Tensor[(5, 7, 15), int64] */;
  %862 = rsqrt(%860) /* ty=Tensor[(5, 7, 15), float64] */;
  (%861, %862)
}

def @func_4549() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %863 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %864 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
  %865 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %866 = %863.0;
  %867 = %864.0;
  %868 = %865.0;
  (%866, %867, %868)
}

def @func_6243() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %869 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
  %870 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %871 = %869.1;
  %872 = %870.0;
  (%871, %872)
}

def @func_2479() -> Tensor[(9, 11, 16), int32] {
  %873 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %873.0
}

def @func_1637() -> (Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) {
  %874 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
  %875 = asin(%874) /* ty=Tensor[(5, 7, 15), float64] */;
  %876 = cast(%875, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
  %877 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(5, 7, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 7, 15), float64] */, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %880 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %881 = less_equal(%878, %879) /* ty=Tensor[(5, 7, 15), bool] */;
  %882 = %880.0;
  (%881, %882)
}

def @func_2201() -> (Tensor[(9, 11, 16), int32],) {
  %883 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %884 = %883.0;
  (%884,)
}

def @func_5491() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) {
  %885 = @func_3341() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %886 = cast(-6.75309f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %887 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 7), float32] */;
  %888 = reshape(%886, newshape=[]) /* ty=float32 */;
  %889 = reshape(%887, newshape=[1, 77]) /* ty=Tensor[(1, 77), float32] */;
  %890 = @func_4826(%888, %889) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) */;
  %891 = %885.0;
  %892 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %893 = %890.1;
  (%891, %892, %893, -6.75309f /* ty=float32 */, meta[relay.Constant][48] /* ty=Tensor[(11, 7), float32] */)
}

def @func_8572() -> (Tensor[(9, 11, 16), float32], Tensor[(1, 11, 7), float32], float32, Tensor[(77), float32], Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(11, 7, 8), float32]) {
  %894 = cast(0.151335f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %895 = cast(meta[relay.Constant][49] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
  %896 = reshape(%894, newshape=[]) /* ty=float32 */;
  %897 = reshape(%895, newshape=[1, 77]) /* ty=Tensor[(1, 77), float32] */;
  %898 = @func_4826(%896, %897) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) */;
  %899 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %900 = @func_5319() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) */;
  %901 = @func_2953() /* ty=Tensor[(9, 11, 16), float32] */;
  %902 = %898.2;
  %903 = %899.0;
  %904 = %900.1;
  %905 = @func_6053() /* ty=Tensor[(11, 7, 8), float32] */;
  (%901, %902, 0.151335f /* ty=float32 */, meta[relay.Constant][49] /* ty=Tensor[(77), float32] */, %903, %904, %905)
}

def @func_6964() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) {
  %906 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %907 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  %908 = %906.0;
  (%907, %908)
}

def @func_4152() -> (Tensor[(9, 11, 16), float32],) {
  %909 = @func_3257() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %910 = %909.0;
  (%910,)
}

def @func_9037(%var_8991: Tensor[(1440), float32], %var_9000: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(1440), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16], Tensor[(9, 11, 16), float32]) {
  %911 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
  %912 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %913 = cast(%var_8991, dtype="float32") /* ty=Tensor[(1440), float32] */;
  %914 = reshape(%913, newshape=[16, 10, 9]) /* ty=Tensor[(16, 10, 9), float32] */;
  %915 = @func_6332(%914) /* ty=(Tensor[(16, 10, 9), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %916 = cast(%var_9000, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %917 = reshape(%916, newshape=[480]) /* ty=Tensor[(480), uint8] */;
  %918 = @func_5884(%917) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), float32]) */;
  %919 = cast(meta[relay.Constant][50] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %920 = cast(meta[relay.Constant][51] /* ty=Tensor[(1872), uint16] */, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %921 = cast(meta[relay.Constant][51] /* ty=Tensor[(1872), uint16] */, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %922 = reshape(%919, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint16] */;
  %923 = reshape(%920, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
  %924 = reshape(%921, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
  %925 = @func_1878(%922, %923, %924) /* ty=(Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) */;
  %926 = %911.0;
  %927 = %912.0;
  %928 = %915.2;
  %929 = %918.1;
  %930 = %925.1;
  %931 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  (%926, %927, %928, %var_8991, %929, %var_9000, %930, meta[relay.Constant][50] /* ty=Tensor[(144), uint16] */, meta[relay.Constant][51] /* ty=Tensor[(1872), uint16] */, %931)
}

def @func_9424(%var_9412: Tensor[(96), int64]) -> (Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(96), int64], Tensor[(3, 8, 5), float32]) {
  %932 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %933 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
  %934 = @func_8615() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %935 = cast(%var_9412, dtype="int64") /* ty=Tensor[(96), int64] */;
  %936 = reshape(%935, newshape=[4, 4, 6]) /* ty=Tensor[(4, 4, 6), int64] */;
  %937 = @func_8837(%936) /* ty=(Tensor[(4, 4, 6), int64], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 2, 16), float64], Tensor[(1, 448), float64], Tensor[(9, 11, 16), float32]) */;
  %938 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
  %939 = %932.0;
  %940 = %933.3;
  %941 = %934.0;
  %942 = %937.2;
  %943 = %938.4;
  (%939, %940, %941, %942, %var_9412, %943)
}

def @func_6872() -> (Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) {
  %944 = @func_3459() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
  %945 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 42), float32] */, dtype="int64") /* ty=Tensor[(5, 42), int64] */;
  %946 = cast(-2.70403f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %947 = @func_4482() /* ty=(Tensor[(3, 8, 5), bool],) */;
  %948 = %947.0;
  %949 = cast(%948, dtype="uint32") /* ty=Tensor[(3, 8, 5), uint32] */;
  %950 = cast(-2.70403f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
  %951 = add(%949, %950) /* ty=Tensor[(3, 8, 5), uint32] */;
  %952 = cast(%951, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %953 = shape_of(%948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(%948, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %956 = cast(-2.70403f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %957 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 42), float32] */, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
  %958 = reshape(%956, newshape=[]) /* ty=float32 */;
  %959 = reshape(%957, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %960 = @func_2664(%958, %959) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) */;
  %961 = %960.1;
  %962 = cast(%961, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %963 = cast(-2.70403f /* ty=float32 */, dtype="float64") /* ty=float64 */;
  %964 = cast(%951, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %965 = %944.1;
  %966 = logical_xor(%945, %946) /* ty=Tensor[(5, 42), int64] */;
  %967 = logical_and(%954, %955) /* ty=Tensor[(3, 8, 5), bool] */;
  %968 = mod(%962, %963) /* ty=Tensor[(9, 11, 16), float64] */;
  %969 = sigmoid(%964) /* ty=Tensor[(3, 8, 5), float32] */;
  (%965, %966, %967, %968, %969)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5984() -> Tensor[(9, 11, 16), float64] {
  @func_5064() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_2116() -> Tensor[(9, 11, 16), float64] {
  @func_2114() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_3156() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %0 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %1 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_5493() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) {
  @func_5491() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) */
}

def @func_5491() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) {
  %4 = @func_3341() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %5 = cast(-6.75309f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 7), float32] */, dtype="float32") /* ty=Tensor[(11, 7), float32] */;
  %7 = reshape(%5, newshape=[]) /* ty=float32 */;
  %8 = reshape(%6, newshape=[1, 77]) /* ty=Tensor[(1, 77), float32] */;
  %9 = @func_4826(%7, %8) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) */;
  %10 = %4.0;
  %11 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %12 = %9.1;
  (%10, %11, %12, -6.75309f /* ty=float32 */, meta[relay.Constant][0] /* ty=Tensor[(11, 7), float32] */)
}

def @func_3122() -> (Tensor[(9, 11, 16), float64],) {
  %13 = @func_2944() /* ty=Tensor[(9, 11, 16), float64] */;
  (%13,)
}

def @func_6561() -> (Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(9, 11, 16), float32]) {
  %19 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(9, 11, 16), float32]) {
    %14 = @func_4694() /* ty=(Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) */;
    %15 = @func_3257() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
    %16 = @func_5984() /* ty=Tensor[(9, 11, 16), float64] */;
    %17 = %14.0;
    %18 = %15.1;
    (%16, %17, %18)
  };
  %19() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(9, 11, 16), float32]) */
}

def @func_8867() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(144, 2), float32]) {
  @func_8865() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(144, 2), float32]) */
}

def @func_3112(%var_3110: Tensor[(7, 10, 8), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) {
  @func_3109(%var_3110) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) */
}

def @func_3124() -> (Tensor[(9, 11, 16), float64],) {
  @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_3899(%var_3898: Tensor[(96), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) {
  %24 = fn (%var_3885: Tensor[(96), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) {
    %20 = cast(%var_3885, dtype="float32") /* ty=Tensor[(96), float32] */;
    %21 = reshape(%20, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), float32] */;
    %22 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
    %23 = @func_1954(%21) /* ty=Tensor[(8, 3, 4), float32] */;
    (%22, %23, %var_3885)
  };
  %24(%var_3898) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */
}

def @func_8066() -> (Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %30 = fn () -> (Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
    %25 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
    %26 = @func_5429() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(?, 16, 9), bool]) */;
    %27 = %25.1;
    %28 = %26.0;
    %29 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
    (%27, %28, %29)
  };
  %30() /* ty=(Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_1925(%var_1923: Tensor[(1872), uint16]) -> (Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) {
  @func_1922(%var_1923) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) */
}

def @func_4550() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %37 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
    %31 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %32 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
    %33 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %34 = %31.0;
    %35 = %32.0;
    %36 = %33.0;
    (%34, %35, %36)
  };
  %37() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_7018() -> (Tensor[(9, 11, 16), bool],) {
  %40 = fn () -> (Tensor[(9, 11, 16), bool],) {
    %38 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
    %39 = %38.3;
    (%39,)
  };
  %40() /* ty=(Tensor[(9, 11, 16), bool],) */
}

def @func_3257() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %41 = @func_3156() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %42 = %41.1;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %44 = reshape(%43, newshape=[9, 11, 16]) /* ty=Tensor[(9, 11, 16), float64] */;
  %45 = @func_2918(%44) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %46 = %45.5;
  (%42, %46)
}

def @func_573(%var_571: Tensor[(4, 15, 8), uint8]) -> (Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) {
  @func_570(%var_571) /* ty=(Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) */
}

def @func_2222() -> (Tensor[(9, 11, 16), int32],) {
  %49 = fn () -> (Tensor[(9, 11, 16), int32],) {
    %47 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
    %48 = %47.0;
    (%48,)
  };
  %49() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_2683() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) {
  %53 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) {
    %50 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %51 = %50.0;
    %52 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
    (%51, %52)
  };
  %53() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */
}

def @func_9548() -> (Tensor[(9, 11, 16), int32],) {
  @func_9546() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_5751(%var_5749: Tensor[(9, 8, 4), float32], %var_5750: Tensor[(9, 8, 4), float32]) -> (Tensor[(9, 8, 4), bool],) {
  @func_5747(%var_5749, %var_5750) /* ty=(Tensor[(9, 8, 4), bool],) */
}

def @func_4522(%var_4520: float32, %var_4521: Tensor[(1, 11, 7), float32]) -> Tensor[(1, 11, 7), float32] {
  @func_4518(%var_4520, %var_4521) /* ty=Tensor[(1, 11, 7), float32] */
}

def @func_8504() -> (Tensor[(9, 11, 16), float64],) {
  @func_8502() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_5203() -> (Tensor[(9, 11, 16), float64],) {
  @func_5201() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_4261(%var_4257: int64, %var_4258: Tensor[(4, 6, 16), int64], %var_4259: Tensor[(210), float32], %var_4260: Tensor[(4, 6, 16), bool]) -> (Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) {
  %70 = fn (%var_4228: int64, %var_4229: Tensor[(4, 6, 16), int64], %var_4245: Tensor[(210), float32], %var_4252: Tensor[(4, 6, 16), bool]) -> (Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) {
    %54 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %55 = cast(%var_4228, dtype="float32") /* ty=float32 */;
    %56 = cast(%var_4245, dtype="float32") /* ty=Tensor[(210), float32] */;
    %57 = reshape(%55, newshape=[]) /* ty=float32 */;
    %58 = reshape(%56, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %59 = @func_2664(%57, %58) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) */;
    %60 = cast(%var_4228, dtype="bool") /* ty=bool */;
    %61 = cast(%var_4229, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
    %62 = greater(%60, %61) /* ty=Tensor[(4, 6, 16), bool] */;
    %63 = cast(%var_4252, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
    %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%62, dtype="bool") /* ty=Tensor[(4, 6, 16), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %67 = %54.0;
    %68 = %59.4;
    %69 = logical_and(%65, %66) /* ty=Tensor[(4, 6, 16), bool] */;
    (%67, %68, %var_4245, %69)
  };
  %70(%var_4257, %var_4258, %var_4259, %var_4260) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) */
}

def @func_7248(%var_7211: Tensor[(10, 16, 14), float32], %var_7237: Tensor[(10, 16, 14), float32]) -> (Tensor[(10, 16, 14), float32], Tensor[(10, 16, 14), float32], Tensor[(9, 11, 16), float64]) {
  %71 = cast(%var_7211, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %72 = cast(%var_7237, dtype="uint64") /* ty=Tensor[(10, 16, 14), uint64] */;
  %73 = shape_of(%var_7211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_7211, dtype="uint64") /* ty=Tensor[(10, 16, 14), uint64] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %76 = bitwise_xor(%74, %75) /* ty=Tensor[(10, 16, 14), uint64] */;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(10, 16, 14), float32] */;
  %78 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %79 = asinh(%71) /* ty=Tensor[(10, 16, 14), float32] */;
  %80 = cos(%77) /* ty=Tensor[(10, 16, 14), float32] */;
  %81 = %78.0;
  (%79, %80, %81)
}

def @func_2624(%var_2583: float32, %var_2584: Tensor[(14, 1, 15), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) {
  %82 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %83 = cast(%var_2583, dtype="float32") /* ty=float32 */;
  %84 = cast(%var_2584, dtype="float32") /* ty=Tensor[(14, 1, 15), float32] */;
  %85 = mod(%83, %84) /* ty=Tensor[(14, 1, 15), float32] */;
  %86 = cast(%85, dtype="uint32") /* ty=Tensor[(14, 1, 15), uint32] */;
  %87 = cast(%var_2583, dtype="uint32") /* ty=uint32 */;
  %88 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %90 = cast(meta[relay.Constant][1] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %91 = reshape(%90, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), float32] */;
  %92 = %82.0;
  %93 = subtract(%86, %87) /* ty=Tensor[(14, 1, 15), uint32] */;
  %94 = log(%89) /* ty=Tensor[(9, 11, 16), float32] */;
  %95 = @func_1954(%91) /* ty=Tensor[(8, 3, 4), float32] */;
  (%92, %93, %94, %95, meta[relay.Constant][1] /* ty=Tensor[(96), float32] */)
}

def @func_2920(%var_2919: Tensor[(9, 11, 16), float64]) -> (Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %119 = fn (%var_2801: Tensor[(9, 11, 16), float64]) -> (Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
    %96 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
    %97 = cast(%var_2801, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
    %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%96, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %101 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
    %102 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %103 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %104 = cast(%var_2801, dtype="uint8") /* ty=Tensor[(9, 11, 16), uint8] */;
    %105 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
    %106 = cast(%96, dtype="uint8") /* ty=Tensor[(9, 11, 16), uint8] */;
    %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %108 = bitwise_and(%106, %107) /* ty=Tensor[(9, 11, 16), uint8] */;
    %109 = cast(%108, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
    %110 = sigmoid(%109) /* ty=Tensor[(9, 11, 16), float64] */;
    %111 = cast(%110, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
    %112 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %113 = multiply(%99, %100) /* ty=Tensor[(9, 11, 16), float32] */;
    %114 = %101.0;
    %115 = %102.0;
    %116 = %103.0;
    %117 = atanh(%111) /* ty=Tensor[(9, 11, 16), float32] */;
    %118 = %112.0;
    (%113, %114, %115, %116, %117, %118)
  };
  %119(%var_2919) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_8403() -> (Tensor[(9, 11, 16), int16],) {
  @func_8401() /* ty=(Tensor[(9, 11, 16), int16],) */
}

def @func_2114() -> Tensor[(9, 11, 16), float64] {
  %120 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %120.0
}

def @func_1575() -> (Tensor[(9, 11, 16), float32],) {
  @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_2065() -> Tensor[(9, 11, 16), float32] {
  %121 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %121.1
}

def @func_2481() -> Tensor[(9, 11, 16), int32] {
  @func_2479() /* ty=Tensor[(9, 11, 16), int32] */
}

def @func_7252(%var_7250: Tensor[(10, 16, 14), float32], %var_7251: Tensor[(10, 16, 14), float32]) -> (Tensor[(10, 16, 14), float32], Tensor[(10, 16, 14), float32], Tensor[(9, 11, 16), float64]) {
  @func_7248(%var_7250, %var_7251) /* ty=(Tensor[(10, 16, 14), float32], Tensor[(10, 16, 14), float32], Tensor[(9, 11, 16), float64]) */
}

def @func_6198(%var_6155: Tensor[(288), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(288), float32], Tensor[(11, 7, 8), bool], Tensor[(616), int64], Tensor[(9, 11, 16), int32]) {
  %122 = @func_5491() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) */;
  %123 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %124 = cast(%var_6155, dtype="float32") /* ty=Tensor[(288), float32] */;
  %125 = cast(%var_6155, dtype="float32") /* ty=Tensor[(288), float32] */;
  %126 = reshape(%124, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %127 = reshape(%125, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %128 = @func_5747(%126, %127) /* ty=(Tensor[(9, 8, 4), bool],) */;
  %129 = cast(meta[relay.Constant][2] /* ty=Tensor[(616), int64] */, dtype="int64") /* ty=Tensor[(616), int64] */;
  %130 = reshape(%129, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), int64] */;
  %131 = @func_338(%130) /* ty=(Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %132 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %133 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  %134 = @func_5064() /* ty=Tensor[(9, 11, 16), float64] */;
  %135 = %122.3;
  %136 = %123.1;
  %137 = %128.0;
  %138 = %131.0;
  %139 = %132.0;
  (%133, %134, %135, %136, %137, %var_6155, %138, meta[relay.Constant][2] /* ty=Tensor[(616), int64] */, %139)
}

def @func_4695() -> (Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) {
  %144 = fn () -> (Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) {
    %140 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
    %141 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
    %142 = %140.2;
    %143 = %141.1;
    (%142, %143)
  };
  %144() /* ty=(Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) */
}

def @func_5349() -> Tensor[(9, 11, 16), uint64] {
  %145 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
  %145.2
}

def @func_6966() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) {
  @func_6964() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */
}

def @func_3837(%var_3835: Tensor[(6, 7, 14), float32], %var_3836: Tensor[(6, 7, 14), float32]) -> (Tensor[(6, 7, 14), float32], Tensor[(7, 10, 8), float64], Tensor[(560), float32], Tensor[(9, 11, 16), float32], Tensor[(13, 15, 3), uint32], Tensor[(585), uint32], Tensor[(9, 11, 16), float64]) {
  @func_3833(%var_3835, %var_3836) /* ty=(Tensor[(6, 7, 14), float32], Tensor[(7, 10, 8), float64], Tensor[(560), float32], Tensor[(9, 11, 16), float32], Tensor[(13, 15, 3), uint32], Tensor[(585), uint32], Tensor[(9, 11, 16), float64]) */
}

def @func_7865() -> Tensor[(9, 11, 16), int16] {
  %146 = @func_7802() /* ty=(Tensor[(9, 11, 16), int16],) */;
  %146.0
}

def @func_5747(%var_5725: Tensor[(9, 8, 4), float32], %var_5740: Tensor[(9, 8, 4), float32]) -> (Tensor[(9, 8, 4), bool],) {
  %147 = cast(%var_5725, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
  %148 = rsqrt(%147) /* ty=Tensor[(9, 8, 4), float32] */;
  %149 = cast(%var_5740, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="bool") /* ty=Tensor[(9, 8, 4), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = logical_or(%151, %152) /* ty=Tensor[(9, 8, 4), bool] */;
  (%153,)
}

def @func_4482() -> (Tensor[(3, 8, 5), bool],) {
  %154 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %155 = log10(%154) /* ty=Tensor[(3, 8, 5), float32] */;
  %156 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 8, 5), float32] */, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = less(%158, %159) /* ty=Tensor[(3, 8, 5), bool] */;
  (%160,)
}

def @func_8883() -> (Tensor[(9, 11, 16), int32],) {
  %161 = @func_8370() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
  %162 = %161.0;
  (%162,)
}

def @func_338(%var_287: Tensor[(11, 7, 8), int64]) -> (Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) {
  %163 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 7, 8), int64] */, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %164 = shape_of(%var_287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_287, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = cast(meta[relay.Constant][5] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %168 = cast(meta[relay.Constant][5] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %169 = reshape(%167, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %170 = reshape(%168, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %171 = @func_184(%169, %170) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %172 = cast(meta[relay.Constant][5] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %173 = cast(meta[relay.Constant][5] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %174 = reshape(%172, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %175 = reshape(%173, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %176 = @func_184(%174, %175) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %177 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 7, 8), int64] */, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
  %178 = cosh(%177) /* ty=Tensor[(11, 7, 8), float64] */;
  %179 = cast(%var_287, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %183 = %176.0;
  %184 = cast(%183, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %185 = cast(meta[relay.Constant][5] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %186 = reshape(%184, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %187 = reshape(%185, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %188 = @func_184(%186, %187) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %189 = %171.1;
  %190 = cast(%189, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
  %191 = cast(meta[relay.Constant][5] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %192 = reshape(%190, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %193 = reshape(%191, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %194 = @func_184(%192, %193) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %195 = less(%165, %166) /* ty=Tensor[(11, 7, 8), bool] */;
  %196 = logical_or(%181, %182) /* ty=Tensor[(11, 7, 8), bool] */;
  %197 = %188.0;
  %198 = %194.1;
  (%195, %189, meta[relay.Constant][5] /* ty=Tensor[(585), uint32] */, %183, %196, %197, %198)
}

def @func_3158() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  @func_3156() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_3833(%var_3789: Tensor[(6, 7, 14), float32], %var_3790: Tensor[(6, 7, 14), float32]) -> (Tensor[(6, 7, 14), float32], Tensor[(7, 10, 8), float64], Tensor[(560), float32], Tensor[(9, 11, 16), float32], Tensor[(13, 15, 3), uint32], Tensor[(585), uint32], Tensor[(9, 11, 16), float64]) {
  %199 = cast(%var_3790, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %200 = shape_of(%var_3789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_3789, dtype="float32") /* ty=Tensor[(6, 7, 14), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %203 = cast(meta[relay.Constant][6] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %204 = reshape(%203, newshape=[7, 10, 8]) /* ty=Tensor[(7, 10, 8), float32] */;
  %205 = @func_3109(%204) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) */;
  %206 = cast(meta[relay.Constant][7] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %207 = cast(meta[relay.Constant][7] /* ty=Tensor[(585), uint32] */, dtype="uint32") /* ty=Tensor[(585), uint32] */;
  %208 = reshape(%206, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %209 = reshape(%207, newshape=[13, 15, 3]) /* ty=Tensor[(13, 15, 3), uint32] */;
  %210 = @func_184(%208, %209) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %211 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %212 = power(%201, %202) /* ty=Tensor[(6, 7, 14), float32] */;
  %213 = %205.1;
  %214 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %215 = %210.0;
  %216 = %211.0;
  (%212, %213, meta[relay.Constant][6] /* ty=Tensor[(560), float32] */, %214, %215, meta[relay.Constant][7] /* ty=Tensor[(585), uint32] */, %216)
}

def @func_1883(%var_1880: Tensor[(16, 1, 9), uint16], %var_1881: Tensor[(16, 13, 9), uint16], %var_1882: Tensor[(16, 13, 9), uint16]) -> (Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) {
  @func_1878(%var_1880, %var_1881, %var_1882) /* ty=(Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) */
}

def @func_4666(%var_4664: Tensor[(11, 5, 5), float32], %var_4665: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), float32] {
  %221 = fn (%var_4637: Tensor[(11, 5, 5), float32], %var_4638: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), float32] {
    %217 = cast(%var_4638, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %218 = shape_of(%var_4637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %219 = cast(%var_4637, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    subtract(%219, %220) /* ty=Tensor[(11, 5, 5), float32] */
  };
  %221(%var_4664, %var_4665) /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_5683() -> (Tensor[(9, 11, 16), float64],) {
  @func_5681() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_8401() -> (Tensor[(9, 11, 16), int16],) {
  %222 = @func_7802() /* ty=(Tensor[(9, 11, 16), int16],) */;
  %223 = %222.0;
  (%223,)
}

def @func_4566() -> Tensor[(9, 11, 16), float64] {
  @func_4363() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_5229() -> (Tensor[(9, 11, 16), float64],) {
  %225 = fn () -> (Tensor[(9, 11, 16), float64],) {
    %224 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
    (%224,)
  };
  %225() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_7340() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), bool]) {
  %234 = fn () -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), bool]) {
    %226 = @func_6546() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %227 = @func_6579() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %228 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %229 = @func_4482() /* ty=(Tensor[(3, 8, 5), bool],) */;
    %230 = %226.0;
    %231 = %227.0;
    %232 = %228.0;
    %233 = %229.0;
    (%230, %231, %232, %233)
  };
  %234() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), bool]) */
}

def @func_2664(%var_2656: float32, %var_2657: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) {
  %235 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %236 = cast(%var_2656, dtype="float32") /* ty=float32 */;
  %237 = cast(%var_2657, dtype="float32") /* ty=Tensor[(210), float32] */;
  %238 = reshape(%236, newshape=[]) /* ty=float32 */;
  %239 = reshape(%237, newshape=[14, 1, 15]) /* ty=Tensor[(14, 1, 15), float32] */;
  %240 = @func_2624(%238, %239) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
  %241 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
  %242 = %235.0;
  %243 = %240.1;
  (%241, %242, %243, %var_2656, %var_2657)
}

def @func_8572() -> (Tensor[(9, 11, 16), float32], Tensor[(1, 11, 7), float32], float32, Tensor[(77), float32], Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(11, 7, 8), float32]) {
  %244 = cast(0.151335f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %245 = cast(meta[relay.Constant][8] /* ty=Tensor[(77), float32] */, dtype="float32") /* ty=Tensor[(77), float32] */;
  %246 = reshape(%244, newshape=[]) /* ty=float32 */;
  %247 = reshape(%245, newshape=[1, 77]) /* ty=Tensor[(1, 77), float32] */;
  %248 = @func_4826(%246, %247) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) */;
  %249 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %250 = @func_5319() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) */;
  %251 = @func_2953() /* ty=Tensor[(9, 11, 16), float32] */;
  %252 = %248.2;
  %253 = %249.0;
  %254 = %250.1;
  %255 = @func_6053() /* ty=Tensor[(11, 7, 8), float32] */;
  (%251, %252, 0.151335f /* ty=float32 */, meta[relay.Constant][8] /* ty=Tensor[(77), float32] */, %253, %254, %255)
}

def @func_5681() -> (Tensor[(9, 11, 16), float64],) {
  %256 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %257 = %256.0;
  (%257,)
}

def @func_1922(%var_1918: Tensor[(1872), uint16]) -> (Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) {
  %258 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %259 = cast(meta[relay.Constant][9] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %260 = cast(%var_1918, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %261 = cast(%var_1918, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %262 = reshape(%259, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint16] */;
  %263 = reshape(%260, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
  %264 = reshape(%261, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
  %265 = @func_1878(%262, %263, %264) /* ty=(Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) */;
  %266 = %258.0;
  %267 = %265.1;
  (%266, %267, meta[relay.Constant][9] /* ty=Tensor[(144), uint16] */, %var_1918)
}

def @func_8837(%var_8797: Tensor[(4, 4, 6), int64]) -> (Tensor[(4, 4, 6), int64], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 2, 16), float64], Tensor[(1, 448), float64], Tensor[(9, 11, 16), float32]) {
  %268 = cast(%var_8797, dtype="int64") /* ty=Tensor[(4, 4, 6), int64] */;
  %269 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(4, 4, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 4, 6), int64] */, dtype="int64") /* ty=Tensor[(4, 4, 6), int64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %272 = @func_5201() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %273 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 448), float64] */, dtype="float64") /* ty=Tensor[(1, 448), float64] */;
  %274 = reshape(%273, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), float64] */;
  %275 = @func_8329(%274) /* ty=(Tensor[(14, 2, 16), float64], int64) */;
  %276 = @func_8615() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %277 = left_shift(%270, %271) /* ty=Tensor[(4, 4, 6), int64] */;
  %278 = @func_3869() /* ty=Tensor[(9, 11, 16), int32] */;
  %279 = %272.0;
  %280 = %275.0;
  %281 = %276.0;
  (%277, %278, %279, %280, meta[relay.Constant][11] /* ty=Tensor[(1, 448), float64] */, %281)
}

def @func_7500() -> (Tensor[(9, 11, 16), float64],) {
  @func_7498() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_8502() -> (Tensor[(9, 11, 16), float64],) {
  %282 = @func_3156() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %283 = %282.0;
  (%283,)
}

def @func_4363() -> Tensor[(9, 11, 16), float64] {
  %284 = @func_3341() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %284.0
}

def @func_2165() -> (Tensor[(9, 11, 16), float32],) {
  @func_2163() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_1535() -> (Tensor[(9, 11, 16), float64],) {
  %285 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %286 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 11, 16), float64] */, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %289 = floor_mod(%287, %288) /* ty=Tensor[(9, 11, 16), float64] */;
  (%289,)
}

def @func_3601(%var_3585: Tensor[(480), uint8]) -> (Tensor[(5, 7, 15), bool], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(6, 7, 8), uint8]) {
  %290 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %291 = cast(%var_3585, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %292 = reshape(%291, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), uint8] */;
  %293 = @func_570(%292) /* ty=(Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) */;
  %294 = %293.4;
  %295 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 7, 8), float64] */, dtype="uint8") /* ty=Tensor[(6, 7, 8), uint8] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="uint8") /* ty=Tensor[(6, 7, 8), uint8] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %299 = %290.0;
  %300 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %301 = bitwise_and(%297, %298) /* ty=Tensor[(6, 7, 8), uint8] */;
  (%299, %var_3585, %300, %301)
}

def @func_7448() -> (Tensor[(11, 7, 8), float32], Tensor[(9, 11, 16), float32]) {
  @func_7446() /* ty=(Tensor[(11, 7, 8), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_8468() -> Tensor[(9, 11, 16), float32] {
  %302 = @func_4977() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %302.0
}

def @func_8235() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  @func_8233() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_7446() -> (Tensor[(11, 7, 8), float32], Tensor[(9, 11, 16), float32]) {
  %303 = @func_7271() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %304 = @func_6053() /* ty=Tensor[(11, 7, 8), float32] */;
  %305 = %303.0;
  (%304, %305)
}

def @func_5066() -> Tensor[(9, 11, 16), float64] {
  @func_5064() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_9426(%var_9425: Tensor[(96), int64]) -> (Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(96), int64], Tensor[(3, 8, 5), float32]) {
  %318 = fn (%var_9412: Tensor[(96), int64]) -> (Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(96), int64], Tensor[(3, 8, 5), float32]) {
    %306 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
    %307 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
    %308 = @func_8615() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %309 = cast(%var_9412, dtype="int64") /* ty=Tensor[(96), int64] */;
    %310 = reshape(%309, newshape=[4, 4, 6]) /* ty=Tensor[(4, 4, 6), int64] */;
    %311 = @func_8837(%310) /* ty=(Tensor[(4, 4, 6), int64], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 2, 16), float64], Tensor[(1, 448), float64], Tensor[(9, 11, 16), float32]) */;
    %312 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
    %313 = %306.0;
    %314 = %307.3;
    %315 = %308.0;
    %316 = %311.2;
    %317 = %312.4;
    (%313, %314, %315, %316, %var_9412, %317)
  };
  %318(%var_9425) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(96), int64], Tensor[(3, 8, 5), float32]) */
}

def @func_2201() -> (Tensor[(9, 11, 16), int32],) {
  %319 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %320 = %319.0;
  (%320,)
}

def @func_7417(%var_7415: Tensor[(192), uint16], %var_7416: Tensor[(4, 4, 12), uint8]) -> (Tensor[(9, 11, 16), float32], Tensor[(192), uint16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(4, 4, 12), bool]) {
  @func_7413(%var_7415, %var_7416) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(192), uint16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(4, 4, 12), bool]) */
}

def @func_9245(%var_9244: Tensor[(7, 4, 16), uint32]) -> (Tensor[(7, 4, 16), float32], Tensor[(7, 4, 16), bool]) {
  %333 = fn (%var_9219: Tensor[(7, 4, 16), uint32]) -> (Tensor[(7, 4, 16), float32], Tensor[(7, 4, 16), bool]) {
    %321 = cast(%var_9219, dtype="uint32") /* ty=Tensor[(7, 4, 16), uint32] */;
    %322 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(7, 4, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 4, 16), uint32] */, dtype="uint32") /* ty=Tensor[(7, 4, 16), uint32] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %325 = multiply(%323, %324) /* ty=Tensor[(7, 4, 16), uint32] */;
    %326 = cast(%325, dtype="float32") /* ty=Tensor[(7, 4, 16), float32] */;
    %327 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 4, 16), uint32] */, dtype="bool") /* ty=Tensor[(7, 4, 16), bool] */;
    %328 = shape_of(%var_9219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%var_9219, dtype="bool") /* ty=Tensor[(7, 4, 16), bool] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %331 = sin(%326) /* ty=Tensor[(7, 4, 16), float32] */;
    %332 = less(%329, %330) /* ty=Tensor[(7, 4, 16), bool] */;
    (%331, %332)
  };
  %333(%var_9244) /* ty=(Tensor[(7, 4, 16), float32], Tensor[(7, 4, 16), bool]) */
}

def @func_4153() -> (Tensor[(9, 11, 16), float32],) {
  %336 = fn () -> (Tensor[(9, 11, 16), float32],) {
    %334 = @func_3257() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
    %335 = %334.0;
    (%335,)
  };
  %336() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_8372() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  @func_8370() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */
}

def @func_8080(%var_8079: Tensor[(5, 4, 10), int64]) -> (Tensor[(5, 4, 10), int64],) {
  %342 = fn (%var_8072: Tensor[(5, 4, 10), int64]) -> (Tensor[(5, 4, 10), int64],) {
    %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 4, 10), int64] */, dtype="int64") /* ty=Tensor[(5, 4, 10), int64] */;
    %338 = shape_of(%var_8072, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%var_8072, dtype="int64") /* ty=Tensor[(5, 4, 10), int64] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %341 = bitwise_or(%339, %340) /* ty=Tensor[(5, 4, 10), int64] */;
    (%341,)
  };
  %342(%var_8079) /* ty=(Tensor[(5, 4, 10), int64],) */
}

def @func_3071(%var_3069: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), float64], Tensor[(4, 15, 8), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float64]) {
  @func_3068(%var_3069) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(4, 15, 8), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float64]) */
}

def @func_4610() -> Tensor[(9, 11, 16), float32] {
  @func_4608() /* ty=Tensor[(9, 11, 16), float32] */
}

def @func_7658() -> (Tensor[(9, 11, 16), float32],) {
  %344 = fn () -> (Tensor[(9, 11, 16), float32],) {
    %343 = @func_4608() /* ty=Tensor[(9, 11, 16), float32] */;
    (%343,)
  };
  %344() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_4907(%var_4905: float32, %var_4906: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16], Tensor[(210), float32], float32, Tensor[(210), float32], Tensor[(96), float32], Tensor[(96), float32]) {
  %361 = fn (%var_4893: float32, %var_4894: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16], Tensor[(210), float32], float32, Tensor[(210), float32], Tensor[(96), float32], Tensor[(96), float32]) {
    %345 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %346 = cast(meta[relay.Constant][18] /* ty=Tensor[(1872), uint16] */, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
    %347 = reshape(%346, newshape=[1872]) /* ty=Tensor[(1872), uint16] */;
    %348 = @func_1922(%347) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) */;
    %349 = cast(%var_4893, dtype="float32") /* ty=float32 */;
    %350 = cast(%var_4894, dtype="float32") /* ty=Tensor[(210), float32] */;
    %351 = reshape(%349, newshape=[]) /* ty=float32 */;
    %352 = reshape(%350, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %353 = @func_2664(%351, %352) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) */;
    %354 = cast(meta[relay.Constant][19] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %355 = reshape(%354, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %356 = @func_3897(%355) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
    %357 = %345.0;
    %358 = %348.1;
    %359 = %353.4;
    %360 = %356.2;
    (%357, %358, meta[relay.Constant][18] /* ty=Tensor[(1872), uint16] */, %359, %var_4893, %var_4894, %360, meta[relay.Constant][19] /* ty=Tensor[(96), float32] */)
  };
  %361(%var_4905, %var_4906) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16], Tensor[(210), float32], float32, Tensor[(210), float32], Tensor[(96), float32], Tensor[(96), float32]) */
}

def @func_8233() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %362 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %363 = %362.0;
  %364 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
  %365 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
  (%363, %364, %365)
}

def @func_9136(%var_9131: Tensor[(5, 66), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(2, 11, 15), float32], Tensor[(5, 66), float64]) {
  %366 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
  %367 = @func_6560() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(9, 11, 16), float32]) */;
  %368 = cast(%var_9131, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %369 = reshape(%368, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), float32] */;
  %370 = @func_8096(%369) /* ty=(Tensor[(2, 11, 15), float32],) */;
  %371 = cast(%var_9131, dtype="float64") /* ty=Tensor[(5, 66), float64] */;
  %372 = %366.3;
  %373 = %367.2;
  %374 = %370.0;
  %375 = cos(%371) /* ty=Tensor[(5, 66), float64] */;
  (%372, %373, %374, %375)
}

def @func_3359() -> (Tensor[(9, 11, 16), float32],) {
  %376 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %377 = %376.1;
  (%377,)
}

def @func_4309(%var_4307: Tensor[(384, 1), int64]) -> (Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) {
  @func_4306(%var_4307) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */
}

def @func_8302() -> (Tensor[(9, 11, 16), int32],) {
  %378 = @func_6964() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %379 = %378.1;
  (%379,)
}

def @func_2304() -> (Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) {
  @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */
}

def @func_3965() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  %380 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %381 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  %382 = %380.0;
  %383 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  (%381, %382, %383)
}

def @func_4042() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) {
  %395 = fn () -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) {
    %384 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
    %385 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
    %386 = cast(meta[relay.Constant][20] /* ty=Tensor[(525), bool] */, dtype="bool") /* ty=Tensor[(525), bool] */;
    %387 = cast(meta[relay.Constant][20] /* ty=Tensor[(525), bool] */, dtype="bool") /* ty=Tensor[(525), bool] */;
    %388 = reshape(%386, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), bool] */;
    %389 = reshape(%387, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), bool] */;
    %390 = @func_2381(%388, %389) /* ty=(Tensor[(5, 7, 15), int64], Tensor[(5, 7, 15), float64]) */;
    %391 = @func_2479() /* ty=Tensor[(9, 11, 16), int32] */;
    %392 = %384.1;
    %393 = %385.0;
    %394 = %390.0;
    (%391, %392, %393, %394, meta[relay.Constant][20] /* ty=Tensor[(525), bool] */)
  };
  %395() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */
}

def @func_2067() -> Tensor[(9, 11, 16), float32] {
  @func_2065() /* ty=Tensor[(9, 11, 16), float32] */
}

def @func_6786() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 8, 4), float64], Tensor[(288), float32]) {
  @func_6784() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 8, 4), float64], Tensor[(288), float32]) */
}

def @func_1815() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %400 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
    %396 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %397 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %398 = %396.0;
    %399 = %397.0;
    (%398, %399)
  };
  %400() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_2203() -> (Tensor[(9, 11, 16), int32],) {
  @func_2201() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_6055() -> Tensor[(11, 7, 8), float32] {
  @func_6053() /* ty=Tensor[(11, 7, 8), float32] */
}

def @func_570(%var_547: Tensor[(4, 15, 8), uint8]) -> (Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) {
  %401 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 15, 8), uint8] */;
  %402 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 15, 8), uint8] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %405 = cast(meta[relay.Constant][23] /* ty=Tensor[(308, 2), int64] */, dtype="int64") /* ty=Tensor[(308, 2), int64] */;
  %406 = reshape(%405, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), int64] */;
  %407 = @func_338(%406) /* ty=(Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */;
  %408 = cast(%var_547, dtype="uint32") /* ty=Tensor[(4, 15, 8), uint32] */;
  %409 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 8), uint8] */, dtype="uint32") /* ty=Tensor[(4, 15, 8), uint32] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %412 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 336), float64] */, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %413 = reshape(%412, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), float64] */;
  %414 = logical_xor(%403, %404) /* ty=Tensor[(4, 15, 8), uint8] */;
  %415 = %407.4;
  %416 = left_shift(%410, %411) /* ty=Tensor[(4, 15, 8), uint32] */;
  %417 = @func_240(%413) /* ty=Tensor[(6, 7, 8), float64] */;
  (%414, %415, meta[relay.Constant][23] /* ty=Tensor[(308, 2), int64] */, %416, %417, meta[relay.Constant][24] /* ty=Tensor[(1, 336), float64] */)
}

def @func_5452() -> (Tensor[(12, 11, 9), float32],) {
  %418 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 11, 9), float32] */;
  %419 = log10(%418) /* ty=Tensor[(12, 11, 9), float32] */;
  (%419,)
}

def @func_1638() -> (Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) {
  %429 = fn () -> (Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) {
    %420 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 7, 15), float64] */, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
    %421 = asin(%420) /* ty=Tensor[(5, 7, 15), float64] */;
    %422 = cast(%421, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
    %423 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(5, 7, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 7, 15), float64] */, dtype="bool") /* ty=Tensor[(5, 7, 15), bool] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %426 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %427 = less_equal(%424, %425) /* ty=Tensor[(5, 7, 15), bool] */;
    %428 = %426.0;
    (%427, %428)
  };
  %429() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */
}

def @func_1537() -> (Tensor[(9, 11, 16), float64],) {
  @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_2954() -> Tensor[(9, 11, 16), float32] {
  %431 = fn () -> Tensor[(9, 11, 16), float32] {
    %430 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %430.0
  };
  %431() /* ty=Tensor[(9, 11, 16), float32] */
}

def @func_8865() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(144, 2), float32]) {
  %432 = cast(meta[relay.Constant][27] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %433 = cast(meta[relay.Constant][27] /* ty=Tensor[(144, 2), float32] */, dtype="float32") /* ty=Tensor[(144, 2), float32] */;
  %434 = reshape(%432, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %435 = reshape(%433, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %436 = @func_5747(%434, %435) /* ty=(Tensor[(9, 8, 4), bool],) */;
  %437 = @func_8468() /* ty=Tensor[(9, 11, 16), float32] */;
  %438 = %436.0;
  (%437, %438, meta[relay.Constant][27] /* ty=Tensor[(144, 2), float32] */)
}

def @func_3068(%var_3057: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), float64], Tensor[(4, 15, 8), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float64]) {
  %439 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
  %440 = cast(%var_3057, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %441 = reshape(%440, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), uint8] */;
  %442 = @func_570(%441) /* ty=(Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) */;
  %443 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
  %444 = %439.0;
  %445 = %442.0;
  %446 = %443.0;
  (%444, %445, %var_3057, %446)
}

def @func_7867() -> Tensor[(9, 11, 16), int16] {
  @func_7865() /* ty=Tensor[(9, 11, 16), int16] */
}

def @func_5430() -> (Tensor[(9, 11, 16), float64], Tensor[(?, 16, 9), bool]) {
  %465 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(?, 16, 9), bool]) {
    %447 = @func_4170() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %448 = @func_5126() /* ty=(Tensor[(1, 16, 9), int16],) */;
    %449 = %448.0;
    %450 = cast(%449, dtype="float64") /* ty=Tensor[(1, 16, 9), float64] */;
    %451 = log2(%450) /* ty=Tensor[(1, 16, 9), float64] */;
    %452 = cast(%451, dtype="float32") /* ty=Tensor[(1, 16, 9), float32] */;
    %453 = sigmoid(%452) /* ty=Tensor[(1, 16, 9), float32] */;
    %454 = cast(%451, dtype="int64") /* ty=Tensor[(1, 16, 9), int64] */;
    %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
    %456 = cast(%453, dtype="int64") /* ty=Tensor[(1, 16, 9), int64] */;
    %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %458 = logical_xor(%456, %457) /* ty=Tensor[(?, 16, 9), int64] */;
    %459 = cast(%458, dtype="bool") /* ty=Tensor[(?, 16, 9), bool] */;
    %460 = shape_of(%451, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%451, dtype="bool") /* ty=Tensor[(1, 16, 9), bool] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %463 = %447.0;
    %464 = equal(%461, %462) /* ty=Tensor[(?, 16, 9), bool] */;
    (%463, %464)
  };
  %465() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(?, 16, 9), bool]) */
}

def @func_8150() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32]) {
  %466 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %467 = %466.1;
  %468 = @func_7607() /* ty=Tensor[(9, 11, 16), float32] */;
  (%467, %468)
}

def @func_8304() -> (Tensor[(9, 11, 16), int32],) {
  @func_8302() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_2163() -> (Tensor[(9, 11, 16), float32],) {
  %469 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %470 = %469.0;
  (%470,)
}

def @func_8840(%var_8838: Tensor[(4, 4, 6), int64]) -> (Tensor[(4, 4, 6), int64], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 2, 16), float64], Tensor[(1, 448), float64], Tensor[(9, 11, 16), float32]) {
  @func_8837(%var_8838) /* ty=(Tensor[(4, 4, 6), int64], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 2, 16), float64], Tensor[(1, 448), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_4977() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %471 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %472 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
  %473 = @func_2163() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %474 = %471.1;
  %475 = %472.0;
  %476 = %473.0;
  (%474, %475, %476)
}

def @func_6263() -> (Tensor[(9, 11, 16), float32],) {
  %477 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %478 = %477.0;
  (%478,)
}

def @func_7914(%var_7906: int64) -> (Tensor[(9, 11, 16), float32], Tensor[(210), float32], int64, Tensor[(384), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) {
  %479 = cast(%var_7906, dtype="int64") /* ty=int64 */;
  %480 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), int64] */, dtype="int64") /* ty=Tensor[(384), int64] */;
  %481 = cast(meta[relay.Constant][29] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %482 = cast(meta[relay.Constant][28] /* ty=Tensor[(384), int64] */, dtype="bool") /* ty=Tensor[(384), bool] */;
  %483 = reshape(%479, newshape=[]) /* ty=int64 */;
  %484 = reshape(%480, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), int64] */;
  %485 = reshape(%481, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %486 = reshape(%482, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), bool] */;
  %487 = @func_4256(%483, %484, %485, %486) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) */;
  %488 = @func_2201() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %489 = @func_2953() /* ty=Tensor[(9, 11, 16), float32] */;
  %490 = %487.1;
  %491 = %488.0;
  (%489, %490, %var_7906, meta[relay.Constant][28] /* ty=Tensor[(384), int64] */, meta[relay.Constant][29] /* ty=Tensor[(210), float32] */, %491)
}

def @func_3967() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  @func_3965() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */
}

def @func_4586() -> (Tensor[(9, 11, 16), int32],) {
  %492 = @func_3869() /* ty=Tensor[(9, 11, 16), int32] */;
  (%492,)
}

def @func_4568() -> Tensor[(9, 11, 16), float64] {
  @func_4566() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_2384(%var_2382: Tensor[(5, 7, 15), bool], %var_2383: Tensor[(5, 7, 15), bool]) -> (Tensor[(5, 7, 15), int64], Tensor[(5, 7, 15), float64]) {
  %507 = fn (%var_2319: Tensor[(5, 7, 15), bool], %var_2335: Tensor[(5, 7, 15), bool]) -> (Tensor[(5, 7, 15), int64], Tensor[(5, 7, 15), float64]) {
    %493 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
    %494 = %493.0;
    %495 = cast(%var_2335, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
    %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%494, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %499 = cast(%var_2319, dtype="uint16") /* ty=Tensor[(5, 7, 15), uint16] */;
    %500 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %501 = cast(%494, dtype="uint16") /* ty=Tensor[(5, 7, 15), uint16] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %503 = bitwise_or(%501, %502) /* ty=Tensor[(5, 7, 15), uint16] */;
    %504 = cast(%503, dtype="float64") /* ty=Tensor[(5, 7, 15), float64] */;
    %505 = bitwise_and(%497, %498) /* ty=Tensor[(5, 7, 15), int64] */;
    %506 = rsqrt(%504) /* ty=Tensor[(5, 7, 15), float64] */;
    (%505, %506)
  };
  %507(%var_2382, %var_2383) /* ty=(Tensor[(5, 7, 15), int64], Tensor[(5, 7, 15), float64]) */
}

def @func_4608() -> Tensor[(9, 11, 16), float32] {
  %508 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %508.0
}

def @func_8745(%var_8743: int64, %var_8744: Tensor[(384), int64]) -> (Tensor[(9, 1, 7), uint16], Tensor[(210), float32], Tensor[(384), int64]) {
  %519 = fn (%var_8704: int64, %var_8726: Tensor[(384), int64]) -> (Tensor[(9, 1, 7), uint16], Tensor[(210), float32], Tensor[(384), int64]) {
    %509 = cast(%var_8704, dtype="int64") /* ty=int64 */;
    %510 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 1, 7), int64] */, dtype="int64") /* ty=Tensor[(9, 1, 7), int64] */;
    %511 = bitwise_or(%509, %510) /* ty=Tensor[(9, 1, 7), int64] */;
    %512 = cast(%var_8704, dtype="uint16") /* ty=uint16 */;
    %513 = cast(%511, dtype="uint16") /* ty=Tensor[(9, 1, 7), uint16] */;
    %514 = cast(%var_8726, dtype="int64") /* ty=Tensor[(384), int64] */;
    %515 = reshape(%514, newshape=[384, 1]) /* ty=Tensor[(384, 1), int64] */;
    %516 = @func_4306(%515) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */;
    %517 = logical_xor(%512, %513) /* ty=Tensor[(9, 1, 7), uint16] */;
    %518 = %516.3;
    (%517, %518, %var_8726)
  };
  %519(%var_8743, %var_8744) /* ty=(Tensor[(9, 1, 7), uint16], Tensor[(210), float32], Tensor[(384), int64]) */
}

def @func_8615() -> (Tensor[(9, 11, 16), float32],) {
  %520 = @func_2163() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %521 = %520.0;
  (%521,)
}

def @func_8370() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  %522 = @func_2201() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %523 = @func_8065() /* ty=(Tensor[(9, 11, 16), int16], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %524 = @func_7339() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), bool]) */;
  %525 = @func_3965() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
  %526 = %522.0;
  %527 = %523.0;
  %528 = %524.0;
  %529 = %525.2;
  (%526, %527, %528, %529)
}

def @func_3604(%var_3602: Tensor[(480), uint8]) -> (Tensor[(5, 7, 15), bool], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(6, 7, 8), uint8]) {
  @func_3601(%var_3602) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(6, 7, 8), uint8]) */
}

def @func_8332(%var_8330: Tensor[(14, 2, 16), float64]) -> (Tensor[(14, 2, 16), float64], int64) {
  @func_8329(%var_8330) /* ty=(Tensor[(14, 2, 16), float64], int64) */
}

def @func_4484() -> (Tensor[(3, 8, 5), bool],) {
  @func_4482() /* ty=(Tensor[(3, 8, 5), bool],) */
}

def @func_6334(%var_6333: Tensor[(16, 10, 9), float32]) -> (Tensor[(16, 10, 9), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %545 = fn (%var_6295: Tensor[(16, 10, 9), float32]) -> (Tensor[(16, 10, 9), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
    %530 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 10, 9), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
    %531 = shape_of(%var_6295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%var_6295, dtype="float32") /* ty=Tensor[(16, 10, 9), float32] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %534 = mod(%532, %533) /* ty=Tensor[(16, 10, 9), float32] */;
    %535 = cast(%var_6295, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
    %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%534, dtype="bool") /* ty=Tensor[(16, 10, 9), bool] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %539 = @func_6243() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
    %540 = @func_3459() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
    %541 = not_equal(%537, %538) /* ty=Tensor[(16, 10, 9), bool] */;
    %542 = @func_5984() /* ty=Tensor[(9, 11, 16), float64] */;
    %543 = %539.0;
    %544 = %540.1;
    (%541, %542, %543, %544)
  };
  %545(%var_6333) /* ty=(Tensor[(16, 10, 9), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_5128() -> (Tensor[(1, 16, 9), int16],) {
  @func_5126() /* ty=(Tensor[(1, 16, 9), int16],) */
}

def @func_4306(%var_4300: Tensor[(384, 1), int64]) -> (Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) {
  %546 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
  %547 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %548 = reshape(%547, newshape=[8, 3, 4]) /* ty=Tensor[(8, 3, 4), float32] */;
  %549 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %550 = cast(%var_4300, dtype="int64") /* ty=Tensor[(384, 1), int64] */;
  %551 = cast(meta[relay.Constant][33] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %552 = cast(%var_4300, dtype="bool") /* ty=Tensor[(384, 1), bool] */;
  %553 = reshape(%549, newshape=[]) /* ty=int64 */;
  %554 = reshape(%550, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), int64] */;
  %555 = reshape(%551, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %556 = reshape(%552, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), bool] */;
  %557 = @func_4256(%553, %554, %555, %556) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(210), float32], Tensor[(210), float32], Tensor[(4, 6, 16), bool]) */;
  %558 = %546.1;
  %559 = @func_1954(%548) /* ty=Tensor[(8, 3, 4), float32] */;
  %560 = %557.2;
  %561 = @func_3869() /* ty=Tensor[(9, 11, 16), int32] */;
  (%558, %559, meta[relay.Constant][32] /* ty=Tensor[(1, 96), float32] */, %560, 7 /* ty=int64 */, %var_4300, meta[relay.Constant][33] /* ty=Tensor[(210), float32] */, %561)
}

def @main(%var_9585: Tensor[(11, 8, 8), uint16], %var_9586: Tensor[(11, 8, 8), uint16]) -> (Tensor[(11, 8, 8), uint16],) {
  %562 = cast(%var_9586, dtype="uint16") /* ty=Tensor[(11, 8, 8), uint16] */;
  %563 = shape_of(%var_9585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_9585, dtype="uint16") /* ty=Tensor[(11, 8, 8), uint16] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %566 = minimum(%564, %565) /* ty=Tensor[(11, 8, 8), uint16] */;
  (%566,)
}

def @func_8885() -> (Tensor[(9, 11, 16), int32],) {
  @func_8883() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_7579() -> (Tensor[(9, 11, 16), float32],) {
  %569 = fn () -> (Tensor[(9, 11, 16), float32],) {
    %567 = @func_6546() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %568 = %567.0;
    (%568,)
  };
  %569() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_8703() -> Tensor[(9, 11, 16), float64] {
  %571 = fn () -> Tensor[(9, 11, 16), float64] {
    %570 = @func_5533() /* ty=(Tensor[(9, 11, 16), int32], float32, Tensor[(9, 11, 16), float64]) */;
    %570.2
  };
  %571() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_3109(%var_3087: Tensor[(7, 10, 8), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) {
  %572 = cast(%var_3087, dtype="float32") /* ty=Tensor[(7, 10, 8), float32] */;
  %573 = sinh(%572) /* ty=Tensor[(7, 10, 8), float32] */;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
  %575 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %576 = sin(%574) /* ty=Tensor[(7, 10, 8), float64] */;
  (%575, %576)
}

def @func_5171(%var_5170: float64) -> Tensor[(4, 1), float64] {
  %579 = fn (%var_5164: float64) -> Tensor[(4, 1), float64] {
    %577 = cast(%var_5164, dtype="float64") /* ty=float64 */;
    %578 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 1), float64] */;
    mod(%577, %578) /* ty=Tensor[(4, 1), float64] */
  };
  %579(%var_5170) /* ty=Tensor[(4, 1), float64] */
}

def @func_5454() -> (Tensor[(12, 11, 9), float32],) {
  @func_5452() /* ty=(Tensor[(12, 11, 9), float32],) */
}

def @func_7963() -> Tensor[(9, 11, 16), int16] {
  %581 = fn () -> Tensor[(9, 11, 16), int16] {
    %580 = @func_7802() /* ty=(Tensor[(9, 11, 16), int16],) */;
    %580.0
  };
  %581() /* ty=Tensor[(9, 11, 16), int16] */
}

def @func_2668(%var_2666: float32, %var_2667: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) {
  @func_2664(%var_2666, %var_2667) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) */
}

def @func_7271() -> (Tensor[(9, 11, 16), float32],) {
  %582 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %583 = %582.0;
  (%583,)
}

def @func_9213() -> Tensor[(9, 11, 16), int32] {
  %585 = fn () -> Tensor[(9, 11, 16), int32] {
    %584 = @func_8302() /* ty=(Tensor[(9, 11, 16), int32],) */;
    %584.0
  };
  %585() /* ty=Tensor[(9, 11, 16), int32] */
}

def @func_9546() -> (Tensor[(9, 11, 16), int32],) {
  %586 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %587 = %586.0;
  (%587,)
}

def @func_5986() -> Tensor[(9, 11, 16), float64] {
  @func_5984() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_8595() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64]) {
  %591 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64]) {
    %588 = @func_8502() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %589 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
    %590 = %588.0;
    (%589, %590)
  };
  %591() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64]) */
}

def @func_243(%var_241: Tensor[(6, 7, 8), float64]) -> Tensor[(6, 7, 8), float64] {
  @func_240(%var_241) /* ty=Tensor[(6, 7, 8), float64] */
}

def @func_2525() -> (Tensor[(9, 11, 16), float32],) {
  %595 = fn () -> (Tensor[(9, 11, 16), float32],) {
    %592 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
    %593 = cast(%592, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
    %594 = cosh(%593) /* ty=Tensor[(9, 11, 16), float32] */;
    (%594,)
  };
  %595() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_3711(%var_3710: Tensor[(4, 4, 12), uint16]) -> (Tensor[(4, 4, 12), uint16],) {
  %601 = fn (%var_3702: Tensor[(4, 4, 12), uint16]) -> (Tensor[(4, 4, 12), uint16],) {
    %596 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 4, 12), uint16] */, dtype="uint16") /* ty=Tensor[(4, 4, 12), uint16] */;
    %597 = shape_of(%var_3702, dtype="int32") /* ty=Tensor[(3), int32] */;
    %598 = cast(%var_3702, dtype="uint16") /* ty=Tensor[(4, 4, 12), uint16] */;
    %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %600 = logical_xor(%598, %599) /* ty=Tensor[(4, 4, 12), uint16] */;
    (%600,)
  };
  %601(%var_3710) /* ty=(Tensor[(4, 4, 12), uint16],) */
}

def @func_3001() -> (Tensor[(9, 11, 16), int32],) {
  %610 = fn () -> (Tensor[(9, 11, 16), int32],) {
    %602 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
    %603 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
    %604 = %603.2;
    %605 = cast(%604, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
    %606 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%602, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %609 = right_shift(%607, %608) /* ty=Tensor[(9, 11, 16), int32] */;
    (%609,)
  };
  %610() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_5320() -> (Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) {
  %617 = fn () -> (Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) {
    %611 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
    %612 = cast(meta[relay.Constant][36] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %613 = reshape(%612, newshape=[7, 10, 8]) /* ty=Tensor[(7, 10, 8), float32] */;
    %614 = @func_3109(%613) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) */;
    %615 = %611.1;
    %616 = %614.1;
    (%615, %616, meta[relay.Constant][36] /* ty=Tensor[(560), float32] */)
  };
  %617() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) */
}

def @func_6580() -> (Tensor[(9, 11, 16), float32],) {
  %619 = fn () -> (Tensor[(9, 11, 16), float32],) {
    %618 = @func_4608() /* ty=Tensor[(9, 11, 16), float32] */;
    (%618,)
  };
  %619() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_9091() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) {
  %623 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) {
    %620 = @func_2302() /* ty=(Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) */;
    %621 = @func_4363() /* ty=Tensor[(9, 11, 16), float64] */;
    %622 = %620.0;
    (%621, %622)
  };
  %623() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) */
}

def @func_8099(%var_8097: Tensor[(2, 11, 15), float32]) -> (Tensor[(2, 11, 15), float32],) {
  @func_8096(%var_8097) /* ty=(Tensor[(2, 11, 15), float32],) */
}

def @func_5126() -> (Tensor[(1, 16, 9), int16],) {
  %624 = cast(meta[relay.Constant][37] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %625 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 16, 9), int16] */, dtype="int16") /* ty=Tensor[(1, 16, 9), int16] */;
  %626 = maximum(%624, %625) /* ty=Tensor[(1, 16, 9), int16] */;
  (%626,)
}

def @func_3459() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  %627 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
  %628 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %629 = %627.1;
  %630 = @func_2953() /* ty=Tensor[(9, 11, 16), float32] */;
  %631 = %628.0;
  %632 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
  (%629, %630, %631, %632)
}

def @func_3361() -> (Tensor[(9, 11, 16), float32],) {
  @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_7273() -> (Tensor[(9, 11, 16), float32],) {
  @func_7271() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_3870() -> Tensor[(9, 11, 16), int32] {
  %634 = fn () -> Tensor[(9, 11, 16), int32] {
    %633 = @func_2201() /* ty=(Tensor[(9, 11, 16), int32],) */;
    %633.0
  };
  %634() /* ty=Tensor[(9, 11, 16), int32] */
}

def @func_5351() -> Tensor[(9, 11, 16), uint64] {
  @func_5349() /* ty=Tensor[(9, 11, 16), uint64] */
}

def @func_2101() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) {
  %646 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) {
    %635 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
    %636 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %637 = %636.0;
    %638 = cast(%637, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
    %639 = log10(%638) /* ty=Tensor[(9, 11, 16), float64] */;
    %640 = cast(%637, dtype="int16") /* ty=Tensor[(9, 11, 16), int16] */;
    %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%639, dtype="int16") /* ty=Tensor[(9, 11, 16), int16] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %644 = %635.0;
    %645 = bitwise_xor(%642, %643) /* ty=Tensor[(9, 11, 16), int16] */;
    (%644, %645)
  };
  %646() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */
}

def @func_8470() -> Tensor[(9, 11, 16), float32] {
  @func_8468() /* ty=Tensor[(9, 11, 16), float32] */
}

def @func_5031(%var_5029: Tensor[(1872), uint16]) -> (Tensor[(9, 11, 16), int32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16]) {
  @func_5028(%var_5029) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16]) */
}

def @func_5028(%var_5022: Tensor[(1872), uint16]) -> (Tensor[(9, 11, 16), int32], Tensor[(16, 13, 9), uint64], Tensor[(1872), uint16]) {
  %647 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %648 = cast(%var_5022, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
  %649 = reshape(%648, newshape=[1872]) /* ty=Tensor[(1872), uint16] */;
  %650 = @func_1922(%649) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16]) */;
  %651 = %647.0;
  %652 = %650.1;
  (%651, %652, %var_5022)
}

def @func_3259() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  @func_3257() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_2628(%var_2626: float32, %var_2627: Tensor[(14, 1, 15), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) {
  @func_2624(%var_2626, %var_2627) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */
}

def @func_4979() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  @func_4977() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_5064() -> Tensor[(9, 11, 16), float64] {
  @func_2944() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_6265() -> (Tensor[(9, 11, 16), float32],) {
  @func_6263() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_6201(%var_6199: Tensor[(288), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(288), float32], Tensor[(11, 7, 8), bool], Tensor[(616), int64], Tensor[(9, 11, 16), int32]) {
  @func_6198(%var_6199) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(288), float32], Tensor[(11, 7, 8), bool], Tensor[(616), int64], Tensor[(9, 11, 16), int32]) */
}

def @func_5672(%var_5671: Tensor[(560, 1), float32]) -> (Tensor[(5, 7, 15), int64], Tensor[(9, 11, 16), float32], Tensor[(560, 1), float32], Tensor[(9, 11, 16), float64]) {
  %661 = fn (%var_5651: Tensor[(560, 1), float32]) -> (Tensor[(5, 7, 15), int64], Tensor[(9, 11, 16), float32], Tensor[(560, 1), float32], Tensor[(9, 11, 16), float64]) {
    %653 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
    %654 = cast(%var_5651, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
    %655 = reshape(%654, newshape=[7, 10, 8]) /* ty=Tensor[(7, 10, 8), float32] */;
    %656 = @func_3109(%655) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(7, 10, 8), float64]) */;
    %657 = @func_3534() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
    %658 = %653.3;
    %659 = %656.0;
    %660 = %657.0;
    (%658, %659, %var_5651, %660)
  };
  %661(%var_5671) /* ty=(Tensor[(5, 7, 15), int64], Tensor[(9, 11, 16), float32], Tensor[(560, 1), float32], Tensor[(9, 11, 16), float64]) */
}

def @func_3341() -> (Tensor[(9, 11, 16), float64],) {
  %662 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %663 = %662.0;
  %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 11, 16), int32] */, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%663, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %668 = power(%666, %667) /* ty=Tensor[(9, 11, 16), float64] */;
  (%668,)
}

def @func_2580() -> (Tensor[(9, 11, 16), float64],) {
  %671 = fn () -> (Tensor[(9, 11, 16), float64],) {
    %669 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
    %670 = %669.0;
    (%670,)
  };
  %671() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_3536() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  @func_3534() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_3461() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) {
  @func_3459() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */
}

def @func_5886(%var_5885: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), float32]) {
  %688 = fn (%var_5857: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), float32]) {
    %672 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %673 = cast(%var_5857, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %674 = reshape(%673, newshape=[480]) /* ty=Tensor[(480), uint8] */;
    %675 = @func_3601(%674) /* ty=(Tensor[(5, 7, 15), bool], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(6, 7, 8), uint8]) */;
    %676 = @func_3459() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
    %677 = @func_4482() /* ty=(Tensor[(3, 8, 5), bool],) */;
    %678 = %677.0;
    %679 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 8, 5), bool] */, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %683 = %672.0;
    %684 = @func_5349() /* ty=Tensor[(9, 11, 16), uint64] */;
    %685 = %675.1;
    %686 = %676.2;
    %687 = power(%681, %682) /* ty=Tensor[(3, 8, 5), float32] */;
    (%683, %684, %685, %var_5857, %686, %687)
  };
  %688(%var_5885) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), float32]) */
}

def @func_341(%var_339: Tensor[(11, 7, 8), int64]) -> (Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) {
  @func_338(%var_339) /* ty=(Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), int64], Tensor[(585), uint32], Tensor[(13, 15, 3), uint32], Tensor[(11, 7, 8), bool], Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */
}

def @func_6964() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) {
  %689 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %690 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  %691 = %689.0;
  (%690, %691)
}

def @func_4830(%var_4828: float32, %var_4829: Tensor[(1, 77), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) {
  @func_4826(%var_4828, %var_4829) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) */
}

def @func_8329(%var_8306: Tensor[(14, 2, 16), float64]) -> (Tensor[(14, 2, 16), float64], int64) {
  %692 = cast(-7.14438f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %693 = cast(%var_8306, dtype="float64") /* ty=Tensor[(14, 2, 16), float64] */;
  %694 = cast(-7.14438f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %695 = reshape(%694, newshape=[]) /* ty=int64 */;
  %696 = @func_7914(%695) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(210), float32], int64, Tensor[(384), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */;
  %697 = divide(%692, %693) /* ty=Tensor[(14, 2, 16), float64] */;
  %698 = %696.2;
  (%697, %698)
}

def @func_1573() -> (Tensor[(9, 11, 16), float32],) {
  %699 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %700 = %699.0;
  %701 = cast(%700, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %702 = cos(%701) /* ty=Tensor[(9, 11, 16), float32] */;
  (%702,)
}

def @func_6784() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 8, 4), float64], Tensor[(288), float32]) {
  %703 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %704 = cast(meta[relay.Constant][41] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %705 = cast(meta[relay.Constant][41] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %706 = reshape(%704, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %707 = reshape(%705, newshape=[9, 8, 4]) /* ty=Tensor[(9, 8, 4), float32] */;
  %708 = @func_5747(%706, %707) /* ty=(Tensor[(9, 8, 4), bool],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(9, 8, 4), float32] */;
  %711 = sin(%710) /* ty=Tensor[(9, 8, 4), float32] */;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(9, 8, 4), float64] */;
  %713 = cast(meta[relay.Constant][41] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %714 = %703.0;
  %715 = @func_2944() /* ty=Tensor[(9, 11, 16), float64] */;
  %716 = tan(%712) /* ty=Tensor[(9, 8, 4), float64] */;
  %717 = atanh(%713) /* ty=Tensor[(288), float32] */;
  (%714, %715, %716, %717)
}

def @func_4588() -> (Tensor[(9, 11, 16), int32],) {
  @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_3774() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) {
  %734 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) {
    %718 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %719 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), uint8] */, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %720 = reshape(%719, newshape=[4, 15, 8]) /* ty=Tensor[(4, 15, 8), uint8] */;
    %721 = @func_570(%720) /* ty=(Tensor[(4, 15, 8), uint8], Tensor[(11, 7, 8), bool], Tensor[(308, 2), int64], Tensor[(4, 15, 8), uint32], Tensor[(6, 7, 8), float64], Tensor[(1, 336), float64]) */;
    %722 = %721.1;
    %723 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 7, 8), bool] */, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
    %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
    %725 = cast(%722, dtype="bool") /* ty=Tensor[(11, 7, 8), bool] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %727 = @func_3257() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
    %728 = cast(%722, dtype="float32") /* ty=Tensor[(11, 7, 8), float32] */;
    %729 = @func_2114() /* ty=Tensor[(9, 11, 16), float64] */;
    %730 = %718.0;
    %731 = less_equal(%725, %726) /* ty=Tensor[(11, 7, 8), bool] */;
    %732 = %727.0;
    %733 = acosh(%728) /* ty=Tensor[(11, 7, 8), float32] */;
    (%729, %730, meta[relay.Constant][42] /* ty=Tensor[(480), uint8] */, %731, %732, %733)
  };
  %734() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */
}

def @func_6456(%var_6455: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64], Tensor[(9, 11, 16), float32]) {
  %738 = fn (%var_6436: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64], Tensor[(9, 11, 16), float32]) {
    %735 = cast(%var_6436, dtype="float64") /* ty=Tensor[(5, 2, 2), float64] */;
    %736 = tan(%735) /* ty=Tensor[(5, 2, 2), float64] */;
    %737 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
    (%736, %737)
  };
  %738(%var_6455) /* ty=(Tensor[(5, 2, 2), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_1742() -> (Tensor[(9, 11, 16), int32],) {
  %748 = fn () -> (Tensor[(9, 11, 16), int32],) {
    %739 = @func_1573() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %740 = %739.0;
    %741 = cast(%740, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
    %742 = log2(%741) /* ty=Tensor[(9, 11, 16), float32] */;
    %743 = cast(%740, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
    %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(%742, dtype="int32") /* ty=Tensor[(9, 11, 16), int32] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %747 = bitwise_or(%745, %746) /* ty=Tensor[(9, 11, 16), int32] */;
    (%747,)
  };
  %748() /* ty=(Tensor[(9, 11, 16), int32],) */
}

def @func_7498() -> (Tensor[(9, 11, 16), float64],) {
  %749 = @func_5064() /* ty=Tensor[(9, 11, 16), float64] */;
  (%749,)
}

def @func_7608() -> Tensor[(9, 11, 16), float32] {
  %751 = fn () -> Tensor[(9, 11, 16), float32] {
    %750 = @func_5491() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) */;
    %750.1
  };
  %751() /* ty=Tensor[(9, 11, 16), float32] */
}

def @func_7917(%var_7915: int64) -> (Tensor[(9, 11, 16), float32], Tensor[(210), float32], int64, Tensor[(384), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) {
  @func_7914(%var_7915) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(210), float32], int64, Tensor[(384), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */
}

def @func_8953() -> (Tensor[(480), uint8],) {
  %754 = fn () -> (Tensor[(480), uint8],) {
    %752 = @func_4694() /* ty=(Tensor[(480), uint8], Tensor[(5, 7, 15), bool]) */;
    %753 = %752.0;
    (%753,)
  };
  %754() /* ty=(Tensor[(480), uint8],) */
}

def @func_6053() -> Tensor[(11, 7, 8), float32] {
  %755 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
  %755.5
}

def @func_8574() -> (Tensor[(9, 11, 16), float32], Tensor[(1, 11, 7), float32], float32, Tensor[(77), float32], Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(11, 7, 8), float32]) {
  @func_8572() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(1, 11, 7), float32], float32, Tensor[(77), float32], Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(11, 7, 8), float32]) */
}

def @func_1956(%var_1955: Tensor[(8, 3, 4), float32]) -> Tensor[(8, 3, 4), float32] {
  %757 = fn (%var_1951: Tensor[(8, 3, 4), float32]) -> Tensor[(8, 3, 4), float32] {
    %756 = cast(%var_1951, dtype="float32") /* ty=Tensor[(8, 3, 4), float32] */;
    sinh(%756) /* ty=Tensor[(8, 3, 4), float32] */
  };
  %757(%var_1955) /* ty=Tensor[(8, 3, 4), float32] */
}

def @func_9139(%var_9137: Tensor[(5, 66), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(2, 11, 15), float32], Tensor[(5, 66), float64]) {
  @func_9136(%var_9137) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(2, 11, 15), float32], Tensor[(5, 66), float64]) */
}

def @func_8794(%var_8792: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(210), float32], Tensor[(9, 11, 16), float32]) {
  @func_8791(%var_8792) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(210), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_8152() -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32]) {
  @func_8150() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32]) */
}

def @func_187(%var_185: Tensor[(13, 15, 3), uint32], %var_186: Tensor[(13, 15, 3), uint32]) -> (Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) {
  %778 = fn (%var_104: Tensor[(13, 15, 3), uint32], %var_116: Tensor[(13, 15, 3), uint32]) -> (Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) {
    %758 = cast(%var_116, dtype="uint64") /* ty=Tensor[(13, 15, 3), uint64] */;
    %759 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="uint64") /* ty=Tensor[(13, 15, 3), uint64] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %762 = logical_xor(%760, %761) /* ty=Tensor[(13, 15, 3), uint64] */;
    %763 = cast(%var_104, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
    %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %765 = cast(%762, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
    %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %767 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
    %768 = shape_of(%var_104, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%var_104, dtype="uint32") /* ty=Tensor[(13, 15, 3), uint32] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %771 = bitwise_or(%769, %770) /* ty=Tensor[(13, 15, 3), uint32] */;
    %772 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 15, 3), uint32] */, dtype="int64") /* ty=Tensor[(13, 15, 3), int64] */;
    %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
    %774 = cast(%771, dtype="int64") /* ty=Tensor[(13, 15, 3), int64] */;
    %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %776 = left_shift(%765, %766) /* ty=Tensor[(13, 15, 3), uint32] */;
    %777 = bitwise_and(%774, %775) /* ty=Tensor[(13, 15, 3), int64] */;
    (%776, %777)
  };
  %778(%var_185, %var_186) /* ty=(Tensor[(13, 15, 3), uint32], Tensor[(13, 15, 3), int64]) */
}

def @func_4518(%var_4505: float32, %var_4506: Tensor[(1, 11, 7), float32]) -> Tensor[(1, 11, 7), float32] {
  %779 = cast(%var_4505, dtype="float32") /* ty=float32 */;
  %780 = cast(%var_4506, dtype="float32") /* ty=Tensor[(1, 11, 7), float32] */;
  floor_mod(%779, %780) /* ty=Tensor[(1, 11, 7), float32] */
}

def @func_8096(%var_8090: Tensor[(2, 11, 15), float32]) -> (Tensor[(2, 11, 15), float32],) {
  %781 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(2, 11, 15), float32] */;
  %782 = shape_of(%var_8090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%var_8090, dtype="float32") /* ty=Tensor[(2, 11, 15), float32] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %785 = floor_mod(%783, %784) /* ty=Tensor[(2, 11, 15), float32] */;
  (%785,)
}

def @func_9331(%var_9330: Tensor[(2, 13, 8), float32]) -> Tensor[(2, 13, 8), float32] {
  %787 = fn (%var_9314: Tensor[(2, 13, 8), float32]) -> Tensor[(2, 13, 8), float32] {
    %786 = cast(%var_9314, dtype="float32") /* ty=Tensor[(2, 13, 8), float32] */;
    rsqrt(%786) /* ty=Tensor[(2, 13, 8), float32] */
  };
  %787(%var_9330) /* ty=Tensor[(2, 13, 8), float32] */
}

def @func_2479() -> Tensor[(9, 11, 16), int32] {
  %788 = @func_1741() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %788.0
}

def @func_8617() -> (Tensor[(9, 11, 16), float32],) {
  @func_8615() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_9163(%var_9161: Tensor[(4, 8, 5), int32], %var_9162: Tensor[(4, 8, 5), int32]) -> Tensor[(4, 8, 5), bool] {
  %798 = fn (%var_9146: Tensor[(4, 8, 5), int32], %var_9147: Tensor[(4, 8, 5), int32]) -> Tensor[(4, 8, 5), bool] {
    %789 = cast(%var_9147, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
    %790 = shape_of(%var_9146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %791 = cast(%var_9146, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %793 = less(%791, %792) /* ty=Tensor[(4, 8, 5), bool] */;
    %794 = cast(%793, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
    %795 = shape_of(%var_9146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%var_9146, dtype="bool") /* ty=Tensor[(4, 8, 5), bool] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%796, %797) /* ty=Tensor[(4, 8, 5), bool] */
  };
  %798(%var_9161, %var_9162) /* ty=Tensor[(4, 8, 5), bool] */
}

def @func_9284(%var_9282: Tensor[(288), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(288), float32], Tensor[(288), float32]) {
  @func_9281(%var_9282) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(288), float32], Tensor[(288), float32]) */
}

def @func_4171() -> (Tensor[(9, 11, 16), float64],) {
  %801 = fn () -> (Tensor[(9, 11, 16), float64],) {
    %799 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %800 = %799.0;
    (%800,)
  };
  %801() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_3183() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %802 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %803 = @func_2793() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */;
  %804 = %802.0;
  %805 = %803.0;
  (%804, %805)
}

def @func_7413(%var_7353: Tensor[(192), uint16], %var_7406: Tensor[(4, 4, 12), uint8]) -> (Tensor[(9, 11, 16), float32], Tensor[(192), uint16], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(4, 4, 12), bool]) {
  %806 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %807 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %808 = @func_3773() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(480), uint8], Tensor[(11, 7, 8), bool], Tensor[(9, 11, 16), float32], Tensor[(11, 7, 8), float32]) */;
  %809 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
  %810 = cast(%var_7353, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %811 = reshape(%810, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), uint16] */;
  %812 = @func_3709(%811) /* ty=(Tensor[(4, 4, 12), uint16],) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %815 = tan(%814) /* ty=Tensor[(4, 4, 12), float64] */;
  %816 = cast(%813, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %817 = shape_of(%815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%815, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %820 = greater_equal(%818, %819) /* ty=Tensor[(4, 4, 12), bool] */;
  %821 = cast(%815, dtype="uint8") /* ty=Tensor[(4, 4, 12), uint8] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="uint8") /* ty=Tensor[(4, 4, 12), uint8] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %825 = maximum(%823, %824) /* ty=Tensor[(4, 4, 12), uint8] */;
  %826 = cast(%var_7406, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%825, dtype="bool") /* ty=Tensor[(4, 4, 12), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %830 = %806.1;
  %831 = %807.0;
  %832 = %808.1;
  %833 = %809.0;
  %834 = less_equal(%828, %829) /* ty=Tensor[(4, 4, 12), bool] */;
  (%830, %var_7353, %831, %832, %833, %834)
}

def @func_7803() -> (Tensor[(9, 11, 16), int16],) {
  %837 = fn () -> (Tensor[(9, 11, 16), int16],) {
    %835 = @func_2100() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int16]) */;
    %836 = %835.1;
    (%836,)
  };
  %837() /* ty=(Tensor[(9, 11, 16), int16],) */
}

def @func_8791(%var_8783: Tensor[(210), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(210), float32], Tensor[(9, 11, 16), float32]) {
  %838 = @func_3183() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %839 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %840 = cast(-2.23492f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %841 = cast(%var_8783, dtype="float32") /* ty=Tensor[(210), float32] */;
  %842 = reshape(%840, newshape=[]) /* ty=float32 */;
  %843 = reshape(%841, newshape=[14, 1, 15]) /* ty=Tensor[(14, 1, 15), float32] */;
  %844 = @func_2624(%842, %843) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
  %845 = @func_5228() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %846 = %845.0;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %848 = %838.0;
  %849 = %839.0;
  %850 = %844.0;
  %851 = rsqrt(%847) /* ty=Tensor[(9, 11, 16), float32] */;
  (%848, %849, %850, -2.23492f /* ty=float32 */, %var_8783, %851)
}

def @func_9281(%var_9271: Tensor[(288), float32]) -> (Tensor[(9, 11, 16), float64], Tensor[(288), float32], Tensor[(288), float32]) {
  %852 = @func_7498() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %853 = cast(%var_9271, dtype="float32") /* ty=Tensor[(288), float32] */;
  %854 = reshape(%853, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %855 = @func_6198(%854) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], float32, Tensor[(9, 11, 16), float32], Tensor[(9, 8, 4), bool], Tensor[(288), float32], Tensor[(11, 7, 8), bool], Tensor[(616), int64], Tensor[(9, 11, 16), int32]) */;
  %856 = %852.0;
  %857 = %855.5;
  (%856, %857, %var_9271)
}

def @func_3534() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  %858 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %859 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
  %860 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %861 = cast(%860, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %862 = asin(%861) /* ty=Tensor[(9, 11, 16), float32] */;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(9, 11, 16), float32] */;
  %864 = %858.0;
  %865 = %859.0;
  %866 = acosh(%863) /* ty=Tensor[(9, 11, 16), float32] */;
  (%864, %865, %866)
}

def @func_6434(%var_6433: Tensor[(384), int64]) -> (Tensor[(7, 10, 8), int64], Tensor[(1, 96), float32], Tensor[(384), int64], Tensor[(7, 10, 8), float64]) {
  %882 = fn (%var_6412: Tensor[(384), int64]) -> (Tensor[(7, 10, 8), int64], Tensor[(1, 96), float32], Tensor[(384), int64], Tensor[(7, 10, 8), float64]) {
    %867 = @func_5319() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(7, 10, 8), float64], Tensor[(560), float32]) */;
    %868 = %867.1;
    %869 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 10, 8), float64] */, dtype="int64") /* ty=Tensor[(7, 10, 8), int64] */;
    %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %871 = cast(%868, dtype="int64") /* ty=Tensor[(7, 10, 8), int64] */;
    %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %873 = cast(%var_6412, dtype="int64") /* ty=Tensor[(384), int64] */;
    %874 = reshape(%873, newshape=[384, 1]) /* ty=Tensor[(384, 1), int64] */;
    %875 = @func_4306(%874) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(1, 96), float32], Tensor[(210), float32], int64, Tensor[(384, 1), int64], Tensor[(210), float32], Tensor[(9, 11, 16), int32]) */;
    %876 = cast(%868, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
    %877 = asinh(%876) /* ty=Tensor[(7, 10, 8), float64] */;
    %878 = cast(%877, dtype="float64") /* ty=Tensor[(7, 10, 8), float64] */;
    %879 = bitwise_and(%871, %872) /* ty=Tensor[(7, 10, 8), int64] */;
    %880 = %875.2;
    %881 = cosh(%878) /* ty=Tensor[(7, 10, 8), float64] */;
    (%879, %880, %var_6412, %881)
  };
  %882(%var_6433) /* ty=(Tensor[(7, 10, 8), int64], Tensor[(1, 96), float32], Tensor[(384), int64], Tensor[(7, 10, 8), float64]) */
}

def @func_6547() -> (Tensor[(9, 11, 16), float32],) {
  %885 = fn () -> (Tensor[(9, 11, 16), float32],) {
    %883 = @func_3156() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
    %884 = %883.1;
    (%884,)
  };
  %885() /* ty=(Tensor[(9, 11, 16), float32],) */
}

def @func_4826(%var_4776: float32, %var_4777: Tensor[(1, 77), float32]) -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], Tensor[(1, 11, 7), float32], float32, Tensor[(1, 77), float32], Tensor[(1, 11, 7), float32], Tensor[(9, 11, 16), float64]) {
  %886 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
  %887 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
  %888 = cast(%var_4776, dtype="float32") /* ty=float32 */;
  %889 = cast(%var_4777, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
  %890 = reshape(%888, newshape=[]) /* ty=float32 */;
  %891 = reshape(%889, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), float32] */;
  %892 = cast(%var_4776, dtype="float32") /* ty=float32 */;
  %893 = cast(%var_4777, dtype="float32") /* ty=Tensor[(1, 77), float32] */;
  %894 = reshape(%892, newshape=[]) /* ty=float32 */;
  %895 = reshape(%893, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), float32] */;
  %896 = %886.0;
  %897 = cast(%896, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
  %898 = reshape(%897, newshape=[9, 11, 16]) /* ty=Tensor[(9, 11, 16), float64] */;
  %899 = @func_2918(%898) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
  %900 = %887.0;
  %901 = @func_4518(%890, %891) /* ty=Tensor[(1, 11, 7), float32] */;
  %902 = @func_4518(%894, %895) /* ty=Tensor[(1, 11, 7), float32] */;
  %903 = %899.3;
  (%896, %900, %901, %var_4776, %var_4777, %902, %903)
}

def @func_3666() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) {
  %915 = fn () -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) {
    %904 = @func_3122() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %905 = @func_2524() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %906 = %905.0;
    %907 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
    %908 = %907.0;
    %909 = cast(%908, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
    %910 = shape_of(%906, dtype="int32") /* ty=Tensor[(3), int32] */;
    %911 = cast(%906, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
    %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %913 = %904.0;
    %914 = less_equal(%911, %912) /* ty=Tensor[(9, 11, 16), bool] */;
    (%913, %914)
  };
  %915() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), bool]) */
}

def @func_3185() -> (Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) {
  @func_3183() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */
}

def @func_3343() -> (Tensor[(9, 11, 16), float64],) {
  @func_3341() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_2794() -> (Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) {
  %931 = fn () -> (Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) {
    %916 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
    %917 = @func_1637() /* ty=(Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), float32]) */;
    %918 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
    %919 = @func_2221() /* ty=(Tensor[(9, 11, 16), int32],) */;
    %920 = %919.0;
    %921 = @func_1535() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %922 = %921.0;
    %923 = cast(%922, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
    %924 = shape_of(%920, dtype="int32") /* ty=Tensor[(3), int32] */;
    %925 = cast(%920, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
    %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %927 = %916.1;
    %928 = %917.0;
    %929 = %918.0;
    %930 = logical_and(%925, %926) /* ty=Tensor[(9, 11, 16), bool] */;
    (%927, %928, %929, %930)
  };
  %931() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 7, 15), bool], Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), bool]) */
}

def @func_6244() -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
  %936 = fn () -> (Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) {
    %932 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
    %933 = @func_3359() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %934 = %932.1;
    %935 = %933.0;
    (%934, %935)
  };
  %936() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */
}

def @func_4365() -> Tensor[(9, 11, 16), float64] {
  @func_4363() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_240(%var_237: Tensor[(6, 7, 8), float64]) -> Tensor[(6, 7, 8), float64] {
  %937 = cast(%var_237, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  log2(%937) /* ty=Tensor[(6, 7, 8), float64] */
}

def @func_1878(%var_1853: Tensor[(16, 1, 9), uint16], %var_1854: Tensor[(16, 13, 9), uint16], %var_1874: Tensor[(16, 13, 9), uint16]) -> (Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) {
  %938 = cast(%var_1853, dtype="uint16") /* ty=Tensor[(16, 1, 9), uint16] */;
  %939 = cast(%var_1854, dtype="uint16") /* ty=Tensor[(16, 13, 9), uint16] */;
  %940 = cast(%var_1874, dtype="uint64") /* ty=Tensor[(16, 13, 9), uint64] */;
  %941 = shape_of(%var_1854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %942 = cast(%var_1854, dtype="uint64") /* ty=Tensor[(16, 13, 9), uint64] */;
  %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %944 = add(%938, %939) /* ty=Tensor[(16, 13, 9), uint16] */;
  %945 = bitwise_and(%942, %943) /* ty=Tensor[(16, 13, 9), uint64] */;
  (%944, %945)
}

def @func_3244() -> Tensor[(9, 11, 16), float64] {
  %947 = fn () -> Tensor[(9, 11, 16), float64] {
    %946 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %946.0
  };
  %947() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_6873() -> (Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) {
  %974 = fn () -> (Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) {
    %948 = @func_3459() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float64]) */;
    %949 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 42), float32] */, dtype="int64") /* ty=Tensor[(5, 42), int64] */;
    %950 = cast(-2.70403f /* ty=float32 */, dtype="int64") /* ty=int64 */;
    %951 = @func_4482() /* ty=(Tensor[(3, 8, 5), bool],) */;
    %952 = %951.0;
    %953 = cast(%952, dtype="uint32") /* ty=Tensor[(3, 8, 5), uint32] */;
    %954 = cast(-2.70403f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
    %955 = add(%953, %954) /* ty=Tensor[(3, 8, 5), uint32] */;
    %956 = cast(%955, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
    %957 = shape_of(%952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %958 = cast(%952, dtype="bool") /* ty=Tensor[(3, 8, 5), bool] */;
    %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %960 = cast(-2.70403f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %961 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 42), float32] */, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
    %962 = reshape(%960, newshape=[]) /* ty=float32 */;
    %963 = reshape(%961, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %964 = @func_2664(%962, %963) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], float32, Tensor[(210), float32]) */;
    %965 = %964.1;
    %966 = cast(%965, dtype="float64") /* ty=Tensor[(9, 11, 16), float64] */;
    %967 = cast(-2.70403f /* ty=float32 */, dtype="float64") /* ty=float64 */;
    %968 = cast(%955, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
    %969 = %948.1;
    %970 = logical_xor(%949, %950) /* ty=Tensor[(5, 42), int64] */;
    %971 = logical_and(%958, %959) /* ty=Tensor[(3, 8, 5), bool] */;
    %972 = mod(%966, %967) /* ty=Tensor[(9, 11, 16), float64] */;
    %973 = sigmoid(%968) /* ty=Tensor[(3, 8, 5), float32] */;
    (%969, %970, %971, %972, %973)
  };
  %974() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */
}

def @func_7422() -> Tensor[(9, 11, 16), float32] {
  %976 = fn () -> Tensor[(9, 11, 16), float32] {
    %975 = @func_6263() /* ty=(Tensor[(9, 11, 16), float32],) */;
    %975.0
  };
  %976() /* ty=Tensor[(9, 11, 16), float32] */
}

def @func_8192() -> (Tensor[(9, 11, 16), float64],) {
  %978 = fn () -> (Tensor[(9, 11, 16), float64],) {
    %977 = @func_4566() /* ty=Tensor[(9, 11, 16), float64] */;
    (%977,)
  };
  %978() /* ty=(Tensor[(9, 11, 16), float64],) */
}

def @func_5201() -> (Tensor[(9, 11, 16), float64],) {
  %979 = @func_3243() /* ty=Tensor[(9, 11, 16), float64] */;
  (%979,)
}

def @func_9490() -> (Tensor[(288), float32], Tensor[(3, 8, 5), float32], Tensor[(9, 11, 16), float64], float32, Tensor[(210, 1), float32]) {
  %992 = fn () -> (Tensor[(288), float32], Tensor[(3, 8, 5), float32], Tensor[(9, 11, 16), float64], float32, Tensor[(210, 1), float32]) {
    %980 = @func_6784() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 8, 4), float64], Tensor[(288), float32]) */;
    %981 = @func_6872() /* ty=(Tensor[(9, 11, 16), float32], Tensor[(5, 42), int64], Tensor[(3, 8, 5), bool], Tensor[(9, 11, 16), float64], Tensor[(3, 8, 5), float32]) */;
    %982 = %981.4;
    %983 = cast(%982, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
    %984 = cast(7.56204f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %985 = cast(meta[relay.Constant][49] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
    %986 = reshape(%984, newshape=[]) /* ty=float32 */;
    %987 = reshape(%985, newshape=[14, 1, 15]) /* ty=Tensor[(14, 1, 15), float32] */;
    %988 = @func_2624(%986, %987) /* ty=(Tensor[(9, 11, 16), float64], Tensor[(14, 1, 15), uint32], Tensor[(9, 11, 16), float32], Tensor[(8, 3, 4), float32], Tensor[(96), float32]) */;
    %989 = %980.3;
    %990 = asinh(%983) /* ty=Tensor[(3, 8, 5), float32] */;
    %991 = %988.0;
    (%989, %990, %991, 7.56204f /* ty=float32 */, meta[relay.Constant][49] /* ty=Tensor[(210, 1), float32] */)
  };
  %992() /* ty=(Tensor[(288), float32], Tensor[(3, 8, 5), float32], Tensor[(9, 11, 16), float64], float32, Tensor[(210, 1), float32]) */
}

def @func_2945() -> Tensor[(9, 11, 16), float64] {
  %994 = fn () -> Tensor[(9, 11, 16), float64] {
    %993 = @func_2579() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %993.0
  };
  %994() /* ty=Tensor[(9, 11, 16), float64] */
}

def @func_5534() -> (Tensor[(9, 11, 16), int32], float32, Tensor[(9, 11, 16), float64]) {
  %1001 = fn () -> (Tensor[(9, 11, 16), int32], float32, Tensor[(9, 11, 16), float64]) {
    %995 = @func_4586() /* ty=(Tensor[(9, 11, 16), int32],) */;
    %996 = @func_5491() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), int32], float32, Tensor[(11, 7), float32]) */;
    %997 = @func_3341() /* ty=(Tensor[(9, 11, 16), float64],) */;
    %998 = %995.0;
    %999 = %996.3;
    %1000 = %997.0;
    (%998, %999, %1000)
  };
  %1001() /* ty=(Tensor[(9, 11, 16), int32], float32, Tensor[(9, 11, 16), float64]) */
}

def @func_2302() -> (Tensor[(9, 11, 16), bool], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64]) {
  %1002 = @func_1814() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32]) */;
  %1003 = %1002.0;
  %1004 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 11, 16), float64] */, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %1005 = shape_of(%1003, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1006 = cast(%1003, dtype="bool") /* ty=Tensor[(9, 11, 16), bool] */;
  %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1008 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 11, 16), float64] */, dtype="uint64") /* ty=Tensor[(9, 11, 16), uint64] */;
  %1009 = shape_of(%1003, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1010 = cast(%1003, dtype="uint64") /* ty=Tensor[(9, 11, 16), uint64] */;
  %1011 = dyn.reshape(%1008, %1009, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1012 = equal(%1006, %1007) /* ty=Tensor[(9, 11, 16), bool] */;
  %1013 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
  %1014 = add(%1010, %1011) /* ty=Tensor[(9, 11, 16), uint64] */;
  (%1012, %1013, %1014)
}

def @func_8681() -> (Tensor[(11, 7, 8), float32],) {
  %1016 = fn () -> (Tensor[(11, 7, 8), float32],) {
    %1015 = @func_6053() /* ty=Tensor[(11, 7, 8), float32] */;
    (%1015,)
  };
  %1016() /* ty=(Tensor[(11, 7, 8), float32],) */
}

def @func_9040(%var_9038: Tensor[(1440), float32], %var_9039: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(1440), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16], Tensor[(9, 11, 16), float32]) {
  %1038 = fn (%var_8991: Tensor[(1440), float32], %var_9000: Tensor[(480), uint8]) -> (Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(1440), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16], Tensor[(9, 11, 16), float32]) {
    %1017 = @func_4041() /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), bool], Tensor[(5, 7, 15), int64], Tensor[(525), bool]) */;
    %1018 = @func_2682() /* ty=(Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), int32]) */;
    %1019 = cast(%var_8991, dtype="float32") /* ty=Tensor[(1440), float32] */;
    %1020 = reshape(%1019, newshape=[16, 10, 9]) /* ty=Tensor[(16, 10, 9), float32] */;
    %1021 = @func_6332(%1020) /* ty=(Tensor[(16, 10, 9), bool], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), float32]) */;
    %1022 = cast(%var_9000, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %1023 = reshape(%1022, newshape=[480]) /* ty=Tensor[(480), uint8] */;
    %1024 = @func_5884(%1023) /* ty=(Tensor[(9, 11, 16), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(480), uint8], Tensor[(9, 11, 16), float32], Tensor[(3, 8, 5), float32]) */;
    %1025 = cast(meta[relay.Constant][51] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
    %1026 = cast(meta[relay.Constant][52] /* ty=Tensor[(1872), uint16] */, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
    %1027 = cast(meta[relay.Constant][52] /* ty=Tensor[(1872), uint16] */, dtype="uint16") /* ty=Tensor[(1872), uint16] */;
    %1028 = reshape(%1025, newshape=[16, 1, 9]) /* ty=Tensor[(16, 1, 9), uint16] */;
    %1029 = reshape(%1026, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
    %1030 = reshape(%1027, newshape=[16, 13, 9]) /* ty=Tensor[(16, 13, 9), uint16] */;
    %1031 = @func_1878(%1028, %1029, %1030) /* ty=(Tensor[(16, 13, 9), uint16], Tensor[(16, 13, 9), uint64]) */;
    %1032 = %1017.0;
    %1033 = %1018.0;
    %1034 = %1021.2;
    %1035 = %1024.1;
    %1036 = %1031.1;
    %1037 = @func_2065() /* ty=Tensor[(9, 11, 16), float32] */;
    (%1032, %1033, %1034, %var_8991, %1035, %var_9000, %1036, meta[relay.Constant][51] /* ty=Tensor[(144), uint16] */, meta[relay.Constant][52] /* ty=Tensor[(1872), uint16] */, %1037)
  };
  %1038(%var_9038, %var_9039) /* ty=(Tensor[(9, 11, 16), int32], Tensor[(9, 11, 16), float64], Tensor[(9, 11, 16), float32], Tensor[(1440), float32], Tensor[(9, 11, 16), uint64], Tensor[(480), uint8], Tensor[(16, 13, 9), uint64], Tensor[(144), uint16], Tensor[(1872), uint16], Tensor[(9, 11, 16), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen391/build/output.py:3055: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen391/build/output.py", line 3060, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(704) tvmgen_default_fused_reshape_minimum_kernel0(ushort* __restrict__ T_minimum, ushort* __restrict__ placeholder, ushort* __restrict__ placeholder1) {
  T_minimum[(((int)threadIdx.x))] = min(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

