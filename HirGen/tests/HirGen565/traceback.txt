==========mod==========
#[version = "0.0.5"]
def @func_9777() -> Tensor[(1, 3, 8), float32] {
  %0 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %0.0
}

def @func_1598(%var_1576: Tensor[(5, 12, 7), float32]) -> (Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) {
  %1 = cast(%var_1576, dtype="float32") /* ty=Tensor[(5, 12, 7), float32] */;
  %2 = cast(%var_1576, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
  %3 = cast(%var_1576, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
  %4 = cos(%1) /* ty=Tensor[(5, 12, 7), float32] */;
  %5 = sinh(%2) /* ty=Tensor[(5, 12, 7), float64] */;
  %6 = cosh(%3) /* ty=Tensor[(5, 12, 7), float64] */;
  (%4, %5, %6)
}

def @func_3721(%var_3696: Tensor[(10, 3, 4), float32]) -> (Tensor[(10, 3, 4), float64], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) {
  %7 = cast(%var_3696, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %8 = sinh(%7) /* ty=Tensor[(10, 3, 4), float32] */;
  %9 = cast(%var_3696, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = not_equal(%11, %12) /* ty=Tensor[(10, 3, 4), bool] */;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(10, 3, 4), float64] */;
  %15 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%8, dtype="float64") /* ty=Tensor[(10, 3, 4), float64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %19 = reshape(%18, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float64] */;
  %20 = divide(%16, %17) /* ty=Tensor[(10, 3, 4), float64] */;
  %21 = @func_3438(%19) /* ty=Tensor[(9, 3, 15), float64] */;
  (%20, %21, meta[relay.Constant][0] /* ty=Tensor[(405), float64] */)
}

def @func_4887() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) {
  %22 = @func_1235() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) */;
  %23 = @func_4612() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */;
  %24 = %22.0;
  %25 = %23.0;
  (%24, %25)
}

def @func_7574() -> Tensor[(1, 3, 8), float64] {
  %26 = @func_4612() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */;
  %26.0
}

def @func_9904() -> Tensor[(7, 14, 16), float64] {
  @func_6623() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_7615() -> (Tensor[(7, 14, 16), float64],) {
  %27 = @func_7018() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool]) */;
  %28 = %27.0;
  (%28,)
}

def @func_9156() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) {
  %29 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %30 = @func_5615() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */;
  %31 = %29.0;
  %32 = %30.1;
  (%31, %32)
}

def @func_5215() -> Tensor[(1, 3, 8), float32] {
  %33 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %33.0
}

def @func_4580(%var_4566: Tensor[(288), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(288), float64], Tensor[(504, 2), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) {
  %34 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %35 = cast(%var_4566, dtype="float64") /* ty=Tensor[(288), float64] */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(504, 2), int64] */, dtype="int64") /* ty=Tensor[(504, 2), int64] */;
  %37 = reshape(%35, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
  %38 = reshape(%36, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %39 = @func_888(%37, %38) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
  %40 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %41 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %42 = %34.0;
  %43 = %39.1;
  %44 = %40.0;
  %45 = %41.1;
  (%42, %43, %var_4566, meta[relay.Constant][1] /* ty=Tensor[(504, 2), int64] */, %44, %45)
}

def @func_729() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  %46 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %48 = reshape(%47, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %49 = %46.0;
  %50 = @func_70(%48) /* ty=Tensor[(7, 14, 16), float64] */;
  (%49, %50, meta[relay.Constant][2] /* ty=Tensor[(1568), float64] */)
}

def @func_976(%var_926: Tensor[(11, 1, 6), float64], %var_950: Tensor[(120), float32], %var_954: Tensor[(1008), int64]) -> (Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) {
  %51 = cast(%var_950, dtype="float32") /* ty=Tensor[(120), float32] */;
  %52 = reshape(%51, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %53 = @func_821(%52) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) */;
  %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %55 = cast(%var_954, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %56 = reshape(%54, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
  %57 = reshape(%55, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %58 = @func_888(%56, %57) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
  %59 = cast(%var_926, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %60 = sqrt(%59) /* ty=Tensor[(11, 1, 6), float64] */;
  %61 = cast(%var_926, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %65 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 84), int64] */, dtype="int64") /* ty=Tensor[(6, 84), int64] */;
  %67 = reshape(%66, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %68 = %53.0;
  %69 = %58.0;
  %70 = not_equal(%63, %64) /* ty=Tensor[(11, ?, 6), bool] */;
  %71 = %65.0;
  %72 = @func_791(%67) /* ty=Tensor[(4, 9, 14), bool] */;
  (%68, %var_950, %69, meta[relay.Constant][3] /* ty=Tensor[(288), float64] */, %var_954, %70, %71, %72, meta[relay.Constant][4] /* ty=Tensor[(6, 84), int64] */)
}

def @func_6851() -> Tensor[(3, 8, 12), float32] {
  %73 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %73.0
}

def @func_6205() -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  %74 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %75 = %74.0;
  %76 = @func_6130() /* ty=Tensor[(3, 8, 12), float32] */;
  (%75, %76)
}

def @func_7388(%var_7370: Tensor[(13, 8, 10), uint32]) -> (Tensor[(13, 8, 10), uint32],) {
  %77 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 8, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %78 = shape_of(%var_7370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_7370, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %81 = multiply(%79, %80) /* ty=Tensor[(13, 8, 10), uint32] */;
  (%81,)
}

def @func_6605() -> (Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) {
  %82 = @func_3087() /* ty=(Tensor[(7, 14, 16), float32], Tensor[(504), int64], Tensor[(288), float64], Tensor[(1008), int64]) */;
  %83 = @func_4222() /* ty=(Tensor[(7, 14, 16), float32],) */;
  %84 = @func_4612() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */;
  %85 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %86 = cast(meta[relay.Constant][6] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
  %88 = reshape(%86, newshape=[]) /* ty=int8 */;
  %89 = reshape(%87, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int8] */;
  %90 = %82.2;
  %91 = %83.0;
  %92 = %84.1;
  %93 = @func_4419() /* ty=Tensor[(?, 3, 8), uint16] */;
  %94 = %85.0;
  %95 = @func_4947(%88, %89) /* ty=Tensor[(15, 4, 2), int8] */;
  (%90, %91, %92, %93, %94, %95, meta[relay.Constant][6] /* ty=int8 */, meta[relay.Constant][7] /* ty=Tensor[(120), int8] */)
}

def @func_3280() -> (Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) {
  %96 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %97 = %96.0;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %99 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 3, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
  %100 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %101 = greater_equal(%98, %99) /* ty=Tensor[(3, 3, 8), bool] */;
  %102 = %100.0;
  %103 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
  %104 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
  (%101, %102, %103, %104)
}

def @func_6130() -> Tensor[(3, 8, 12), float32] {
  %105 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %105.0
}

def @func_693() -> (Tensor[(1, 3, 8), float64],) {
  %106 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %107 = %106.0;
  (%107,)
}

def @func_7804() -> (Tensor[(16, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1056), float64]) {
  %108 = @func_6802() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="int16") /* ty=Tensor[(1, 3, 8), int16] */;
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 3, 8), float64] */, dtype="int16") /* ty=Tensor[(16, 3, 8), int16] */;
  %112 = bitwise_xor(%110, %111) /* ty=Tensor[(16, 3, 8), int16] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %114 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(16, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %117 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %118 = cast(meta[relay.Constant][10] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %119 = reshape(%118, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %120 = @func_564(%119) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) */;
  %121 = mod(%115, %116) /* ty=Tensor[(16, 3, 8), float64] */;
  %122 = %117.0;
  %123 = %120.0;
  (%121, %122, %123, meta[relay.Constant][10] /* ty=Tensor[(1056), float64] */)
}

def @func_5897() -> Tensor[(1, 3, 8), float64] {
  %124 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %125 = %124.0;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  sigmoid(%126) /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_6291() -> Tensor[(4, 9, 14), bool] {
  %127 = @func_4933() /* ty=(Tensor[(4, 9, 14), bool],) */;
  %127.0
}

def @func_6508(%var_6491: Tensor[(7, 14, 16), float64]) -> Tensor[(7, 14, 16), bool] {
  %128 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %129 = %128.0;
  %130 = cast(%var_6491, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%132, %133) /* ty=Tensor[(7, 14, 16), bool] */
}

def @func_2800(%var_2784: Tensor[(12, 1, 8), float64], %var_2798: Tensor[(1008), int64]) -> (Tensor[(12, 13, 8), bool], Tensor[(1008), int64], Tensor[(2, 144), float64], Tensor[(1008), int64]) {
  %134 = cast(%var_2784, dtype="bool") /* ty=Tensor[(12, 1, 8), bool] */;
  %135 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 13, 8), float64] */, dtype="bool") /* ty=Tensor[(12, 13, 8), bool] */;
  %136 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 144), float64] */, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %137 = cast(%var_2798, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %138 = reshape(%136, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
  %139 = reshape(%137, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %140 = @func_888(%138, %139) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
  %141 = not_equal(%134, %135) /* ty=Tensor[(12, 13, 8), bool] */;
  %142 = %140.6;
  (%141, %142, meta[relay.Constant][12] /* ty=Tensor[(2, 144), float64] */, %var_2798)
}

def @func_4504() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) {
  %143 = @func_2554() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) */;
  %144 = @func_2995() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %145 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %146 = %143.0;
  %147 = %144.0;
  %148 = %145.0;
  (%146, %147, %148)
}

def @func_2295(%var_2252: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint8], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %149 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="uint8") /* ty=Tensor[(1, 3, 8), uint8] */;
  %152 = cast(%var_2252, dtype="uint8") /* ty=Tensor[(6, 3, 8), uint8] */;
  %153 = cast(%150, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %154 = cast(%var_2252, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %155 = cast(%var_2252, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
  %156 = logical_xor(%151, %152) /* ty=Tensor[(6, 3, 8), uint8] */;
  %157 = floor_divide(%153, %154) /* ty=Tensor[(6, 3, 8), float32] */;
  %158 = asinh(%155) /* ty=Tensor[(6, 3, 8), float32] */;
  (%156, %157, %158)
}

def @func_8859(%var_8843: Tensor[(13, 5, 15), uint8]) -> (Tensor[(13, 5, 15), uint8], Tensor[(1, 3, 8), float64]) {
  %159 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 5, 15), uint8] */, dtype="uint8") /* ty=Tensor[(13, 5, 15), uint8] */;
  %160 = shape_of(%var_8843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%var_8843, dtype="uint8") /* ty=Tensor[(13, 5, 15), uint8] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %163 = left_shift(%161, %162) /* ty=Tensor[(13, 5, 15), uint8] */;
  %164 = @func_8194() /* ty=Tensor[(1, 3, 8), float64] */;
  (%163, %164)
}

def @func_7290(%var_7259: Tensor[(1, 120), int8], %var_7286: Tensor[(16), float32]) -> (Tensor[(7, 14, 16), float64], int8, Tensor[(5, 12, 7), float64], Tensor[(210, 2), float32], Tensor[(?, 120), float32], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float32], Tensor[(16), float32]) {
  %165 = cast(meta[relay.Constant][15] /* ty=Tensor[(210, 2), float32] */, dtype="float32") /* ty=Tensor[(210, 2), float32] */;
  %166 = reshape(%165, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float32] */;
  %167 = @func_1598(%166) /* ty=(Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) */;
  %168 = cast(meta[relay.Constant][14] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %169 = cast(%var_7259, dtype="int8") /* ty=Tensor[(1, 120), int8] */;
  %170 = reshape(%168, newshape=[]) /* ty=int8 */;
  %171 = reshape(%169, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int8] */;
  %172 = @func_4947(%170, %171) /* ty=Tensor[(15, 4, 2), int8] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(15, 4, 2), float32] */;
  %174 = shape_of(%var_7259, dtype="int32") /* ty=Tensor[(2), int32] */;
  %175 = cast(%var_7259, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %177 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %178 = cast(%var_7286, dtype="float32") /* ty=Tensor[(16), float32] */;
  %179 = reshape(%178, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), float32] */;
  %180 = @func_7081(%179) /* ty=(Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) */;
  %181 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %182 = %167.1;
  %183 = power(%175, %176) /* ty=Tensor[(?, 120), float32] */;
  %184 = %177.0;
  %185 = %180.1;
  (%181, meta[relay.Constant][14] /* ty=int8 */, %182, meta[relay.Constant][15] /* ty=Tensor[(210, 2), float32] */, %183, %184, %185, %var_7286)
}

def @func_3800() -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(120), float32]) {
  %186 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %187 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %188 = cast(meta[relay.Constant][16] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %189 = reshape(%188, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %190 = @func_1527(%189) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1, 3, 8), float32], Tensor[(1568), float64], Tensor[(5, 3, 8), uint8], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 1008), float64], Tensor[(1, 1008), float64], Tensor[(?, 1008), bool]) */;
  %191 = %186.0;
  %192 = %187.0;
  %193 = %190.8;
  (%191, %192, %193, meta[relay.Constant][16] /* ty=Tensor[(120), float32] */)
}

def @func_3438(%var_3432: Tensor[(9, 3, 15), float64]) -> Tensor[(9, 3, 15), float64] {
  %194 = cast(%var_3432, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %195 = sqrt(%194) /* ty=Tensor[(9, 3, 15), float64] */;
  %196 = cast(%var_3432, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%198, %199) /* ty=Tensor[(9, 3, 15), float64] */
}

def @func_5712() -> Tensor[(1, 3, 8), float32] {
  @func_3121() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_3917() -> Tensor[(7, 14, 16), float64] {
  %200 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %200.1
}

def @func_9000() -> Tensor[(3, 8, 12), float32] {
  %201 = @func_8199() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %201.0
}

def @func_10053(%var_10028: Tensor[(6, 8, 12), float32]) -> (Tensor[(6, 8, 12), float32],) {
  %202 = cast(%var_10028, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
  %203 = acosh(%202) /* ty=Tensor[(6, 8, 12), float32] */;
  (%203,)
}

def @func_4612() -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  %204 = @func_1785() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */;
  %205 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %208 = %204.0;
  %209 = sin(%207) /* ty=Tensor[(3, 8, 12), float32] */;
  (%208, %209)
}

def @func_3087() -> (Tensor[(7, 14, 16), float32], Tensor[(504), int64], Tensor[(288), float64], Tensor[(1008), int64]) {
  %210 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %212 = cast(meta[relay.Constant][17] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %213 = cast(meta[relay.Constant][18] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %214 = reshape(%212, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
  %215 = reshape(%213, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %216 = @func_888(%214, %215) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
  %217 = log(%211) /* ty=Tensor[(7, 14, 16), float32] */;
  %218 = %216.2;
  (%217, %218, meta[relay.Constant][17] /* ty=Tensor[(288), float64] */, meta[relay.Constant][18] /* ty=Tensor[(1008), int64] */)
}

def @func_6802() -> (Tensor[(1, 3, 8), float64],) {
  %219 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %220 = %219.0;
  (%220,)
}

def @func_303(%var_241: Tensor[(8, 12, 11), float64], %var_290: Tensor[(8, 12, 11), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) {
  %221 = cast(meta[relay.Constant][19] /* ty=Tensor[(392, 4), float64] */, dtype="float64") /* ty=Tensor[(392, 4), float64] */;
  %222 = reshape(%221, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %223 = cast(meta[relay.Constant][19] /* ty=Tensor[(392, 4), float64] */, dtype="float64") /* ty=Tensor[(392, 4), float64] */;
  %224 = reshape(%223, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %225 = cast(%var_241, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %226 = atan(%225) /* ty=Tensor[(8, 12, 11), float64] */;
  %227 = cast(%var_290, dtype="int16") /* ty=Tensor[(8, 12, 11), int16] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="int16") /* ty=Tensor[(8, 12, 11), int16] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %231 = cast(%var_290, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %232 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%226, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %235 = @func_70(%222) /* ty=Tensor[(7, 14, 16), float64] */;
  %236 = @func_70(%224) /* ty=Tensor[(7, 14, 16), float64] */;
  %237 = bitwise_or(%229, %230) /* ty=Tensor[(8, 12, 11), int16] */;
  %238 = power(%233, %234) /* ty=Tensor[(8, 12, 11), float64] */;
  (%235, meta[relay.Constant][19] /* ty=Tensor[(392, 4), float64] */, %236, %237, %238)
}

def @func_532() -> (Tensor[(1, 3, 8), float64],) {
  %239 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %240 = acosh(%239) /* ty=Tensor[(1, 3, 8), float64] */;
  (%240,)
}

def @func_9523() -> Tensor[(1, 3, 8), float64] {
  @func_8194() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_7687(%var_7673: uint32, %var_7674: Tensor[(16, 11, 1), uint32]) -> (Tensor[(16, 11, 1), uint32], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) {
  %241 = cast(%var_7673, dtype="uint32") /* ty=uint32 */;
  %242 = cast(%var_7674, dtype="uint32") /* ty=Tensor[(16, 11, 1), uint32] */;
  %243 = cast(meta[relay.Constant][21] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %244 = reshape(%243, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float64] */;
  %245 = bitwise_xor(%241, %242) /* ty=Tensor[(16, 11, 1), uint32] */;
  %246 = @func_3438(%244) /* ty=Tensor[(9, 3, 15), float64] */;
  (%245, %246, meta[relay.Constant][21] /* ty=Tensor[(405), float64] */)
}

def @func_5452(%var_5414: Tensor[(504), int64], %var_5449: int8, %var_5450: Tensor[(120), int8]) -> (Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) {
  %247 = cast(%var_5414, dtype="int64") /* ty=Tensor[(504), int64] */;
  %248 = reshape(%247, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %249 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %250 = @func_2707() /* ty=(Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) */;
  %251 = cast(%var_5449, dtype="int8") /* ty=int8 */;
  %252 = cast(%var_5450, dtype="int8") /* ty=Tensor[(120), int8] */;
  %253 = reshape(%251, newshape=[]) /* ty=int8 */;
  %254 = reshape(%252, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int8] */;
  %255 = @func_3121() /* ty=Tensor[(1, 3, 8), float32] */;
  %256 = @func_791(%248) /* ty=Tensor[(4, 9, 14), bool] */;
  %257 = %249.0;
  %258 = %250.5;
  %259 = @func_4947(%253, %254) /* ty=Tensor[(15, 4, 2), int8] */;
  (%255, %256, %var_5414, %257, %258, %259, %var_5449, %var_5450)
}

def @func_1235() -> (Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) {
  %260 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %261 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 84), int64] */, dtype="int64") /* ty=Tensor[(6, 84), int64] */;
  %262 = reshape(%261, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %263 = @func_791(%262) /* ty=Tensor[(4, 9, 14), bool] */;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
  %265 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 84), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %266 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 84), int64] */, dtype="float32") /* ty=Tensor[(6, 84), float32] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %268 = %260.0;
  %269 = power(%266, %267) /* ty=Tensor[(6, 84), float32] */;
  (%268, %269)
}

def @func_9280() -> (Tensor[(1, 3, 8), float32],) {
  %270 = @func_2880() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %271 = %270.0;
  (%271,)
}

def @func_8132(%var_8122: Tensor[(6, 3, 8), float32]) -> (Tensor[(1008), int64], Tensor[(6, 3, 8), bool]) {
  %272 = @func_4547() /* ty=(Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) */;
  %273 = @func_2399() /* ty=Tensor[(1, 3, 8), float32] */;
  %274 = cast(%273, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %275 = cast(%var_8122, dtype="bool") /* ty=Tensor[(6, 3, 8), bool] */;
  %276 = %272.0;
  %277 = greater(%274, %275) /* ty=Tensor[(6, 3, 8), bool] */;
  (%276, %277)
}

def @func_758() -> (Tensor[(7, 14, 16), float64],) {
  %278 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %279 = %278.1;
  (%279,)
}

def @func_6057() -> Tensor[(1, 3, 8), float32] {
  @func_3461() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_4933() -> (Tensor[(4, 9, 14), bool],) {
  %280 = @func_4131() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %281 = %280.1;
  (%281,)
}

def @func_7018() -> (Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool]) {
  %282 = @func_4547() /* ty=(Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) */;
  %283 = %282.2;
  %284 = @func_6291() /* ty=Tensor[(4, 9, 14), bool] */;
  (%283, %284)
}

def @func_773() -> (Tensor[(1, 3, 8), float32],) {
  %285 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %288 = exp(%287) /* ty=Tensor[(1, 3, 8), float32] */;
  (%288,)
}

def @func_7459(%var_7435: Tensor[(16, 3, 8), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 3, 8), bool], Tensor[(16, 3, 8), float64]) {
  %289 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %290 = @func_2498() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %293 = cast(%var_7435, dtype="bool") /* ty=Tensor[(16, 3, 8), bool] */;
  %294 = cast(%var_7435, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %295 = %289.0;
  %296 = less_equal(%292, %293) /* ty=Tensor[(16, 3, 8), bool] */;
  %297 = atan(%294) /* ty=Tensor[(16, 3, 8), float64] */;
  (%295, %296, %297)
}

def @func_9353() -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) {
  %298 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %299 = cast(%298, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %300 = reshape(%299, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %301 = @func_5097(%300) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1568), float64], Tensor[(1, 3, 8), float64]) */;
  %302 = @func_3461() /* ty=Tensor[(1, 3, 8), float32] */;
  %303 = %301.1;
  (%302, %298, %303)
}

def @func_3370() -> (Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) {
  %304 = @func_3280() /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */;
  %305 = cast(meta[relay.Constant][23] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %306 = reshape(%305, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %307 = %304.3;
  %308 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %309 = @func_791(%306) /* ty=Tensor[(4, 9, 14), bool] */;
  (%307, %308, %309, meta[relay.Constant][23] /* ty=Tensor[(504), int64] */)
}

def @func_4827() -> Tensor[(7, 14, 16), uint16] {
  %310 = @func_4222() /* ty=(Tensor[(7, 14, 16), float32],) */;
  %311 = %310.0;
  %312 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 14, 16), float32] */, dtype="uint16") /* ty=Tensor[(7, 14, 16), uint16] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="uint16") /* ty=Tensor[(7, 14, 16), uint16] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%314, %315) /* ty=Tensor[(7, 14, 16), uint16] */
}

def @func_4320() -> Tensor[(1, 3, 8), float64] {
  %316 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %316.0
}

def @func_9464(%var_9444: Tensor[(120), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(1008), int64], Tensor[(22, 3), float64], Tensor[(120), float32], Tensor[(1, 1008), int64]) {
  %317 = cast(meta[relay.Constant][25] /* ty=Tensor[(22, 3), float64] */, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %318 = cast(%var_9444, dtype="float32") /* ty=Tensor[(120), float32] */;
  %319 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
  %320 = reshape(%317, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
  %321 = reshape(%318, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %322 = reshape(%319, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %323 = @func_976(%320, %321, %322) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
  %324 = @func_4320() /* ty=Tensor[(1, 3, 8), float64] */;
  %325 = %323.4;
  (%324, %325, meta[relay.Constant][25] /* ty=Tensor[(22, 3), float64] */, %var_9444, meta[relay.Constant][26] /* ty=Tensor[(1, 1008), int64] */)
}

def @func_2457() -> Tensor[(1, 3, 8), float64] {
  %326 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %326.0
}

def @func_7731() -> (Tensor[(1, 3, 8), float32],) {
  %327 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  (%327,)
}

def @func_8078() -> Tensor[(?, 3, 8), uint16] {
  @func_4419() /* ty=Tensor[(?, 3, 8), uint16] */
}

def @func_9400() -> Tensor[(7, 14, 16), float64] {
  %328 = @func_7615() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %328.0
}

def @func_7222(%var_7205: Tensor[(1056), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1056), float64]) {
  %329 = cast(%var_7205, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %330 = reshape(%329, newshape=[2, 528]) /* ty=Tensor[(2, 528), float64] */;
  %331 = @func_4798(%330) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) */;
  %332 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %333 = %331.0;
  (%332, %333, %var_7205)
}

def @func_1573() -> Tensor[(7, 14, 16), float64] {
  %334 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %334.0
}

def @func_1694(%var_1683: Tensor[(2, 10, 2), float64]) -> (Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) {
  %335 = cast(%var_1683, dtype="float64") /* ty=Tensor[(2, 10, 2), float64] */;
  %336 = log2(%335) /* ty=Tensor[(2, 10, 2), float64] */;
  %337 = cast(%336, dtype="int32") /* ty=Tensor[(2, 10, 2), int32] */;
  %338 = shape_of(%var_1683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_1683, dtype="int32") /* ty=Tensor[(2, 10, 2), int32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %341 = cast(%var_1683, dtype="float32") /* ty=Tensor[(2, 10, 2), float32] */;
  %342 = multiply(%339, %340) /* ty=Tensor[(2, 10, 2), int32] */;
  %343 = asin(%341) /* ty=Tensor[(2, 10, 2), float32] */;
  (%342, %343)
}

def @func_2880() -> (Tensor[(1, 3, 8), float32],) {
  %344 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %345 = %344.0;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %347 = sinh(%346) /* ty=Tensor[(1, 3, 8), float32] */;
  (%347,)
}

def @func_4547() -> (Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) {
  %348 = @func_2554() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) */;
  %349 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %350 = @func_1235() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) */;
  %351 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %352 = %348.1;
  %353 = %349.0;
  %354 = %350.0;
  %355 = %351.0;
  (%352, %353, %354, %355)
}

def @func_2112(%var_2106: Tensor[(7, 14, 16), float64]) -> (Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) {
  %356 = cast(meta[relay.Constant][27] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %357 = reshape(%356, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
  %358 = @func_621(%357) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
  %359 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
  %360 = cast(%var_2106, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = %358.0;
  %365 = not_equal(%362, %363) /* ty=Tensor[(7, 14, 16), bool] */;
  (%364, meta[relay.Constant][27] /* ty=Tensor[(1008), int64] */, %365)
}

def @func_6761() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %366 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %367 = %366.0;
  %368 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  (%367, %368)
}

def @func_564(%var_548: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) {
  %369 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %370 = cast(%var_548, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %371 = cast(%var_548, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %372 = reshape(%370, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %373 = reshape(%371, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %374 = @func_303(%372, %373) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %375 = %374.4;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %377 = cast(%var_548, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %378 = reshape(%376, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %379 = reshape(%377, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %380 = @func_303(%378, %379) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %381 = %369.0;
  %382 = %380.4;
  (%381, %375, %var_548, %382)
}

def @func_4947(%var_4940: int8, %var_4941: Tensor[(15, 4, 2), int8]) -> Tensor[(15, 4, 2), int8] {
  %383 = cast(%var_4940, dtype="int8") /* ty=int8 */;
  %384 = cast(%var_4941, dtype="int8") /* ty=Tensor[(15, 4, 2), int8] */;
  logical_xor(%383, %384) /* ty=Tensor[(15, 4, 2), int8] */
}

def @func_9546() -> (Tensor[(1008), int64],) {
  %385 = @func_4547() /* ty=(Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) */;
  %386 = %385.0;
  (%386,)
}

def @func_5496() -> Tensor[(7, 14, 16), float32] {
  %387 = @func_4504() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %390 = cos(%389) /* ty=Tensor[(7, 14, 16), float64] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %392 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%388, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%393, %394) /* ty=Tensor[(7, 14, 16), float32] */
}

def @func_3189(%var_3161: Tensor[(16, 3, 8), float32]) -> (Tensor[(16, 3, 8), int64], Tensor[(2, 10, 2), int32], Tensor[(40), float64]) {
  %395 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %396 = %395.0;
  %397 = cast(%396, dtype="int64") /* ty=Tensor[(1, 3, 8), int64] */;
  %398 = cast(%var_3161, dtype="int64") /* ty=Tensor[(16, 3, 8), int64] */;
  %399 = cast(meta[relay.Constant][28] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %400 = reshape(%399, newshape=[2, 10, 2]) /* ty=Tensor[(2, 10, 2), float64] */;
  %401 = @func_1694(%400) /* ty=(Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) */;
  %402 = minimum(%397, %398) /* ty=Tensor[(16, 3, 8), int64] */;
  %403 = %401.0;
  (%402, %403, meta[relay.Constant][28] /* ty=Tensor[(40), float64] */)
}

def @func_5680(%var_5675: Tensor[(7, 14, 16), float32]) -> (Tensor[(7, 14, 16), uint32],) {
  %404 = @func_4222() /* ty=(Tensor[(7, 14, 16), float32],) */;
  %405 = %404.0;
  %406 = cast(%var_5675, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %410 = subtract(%408, %409) /* ty=Tensor[(7, 14, 16), uint32] */;
  (%410,)
}

def @func_1537() -> (Tensor[(1, 3, 8), float64],) {
  %411 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %412 = %411.0;
  (%412,)
}

def @func_3752() -> (Tensor[(3, 8, 12), float32],) {
  %413 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %414 = %413.0;
  (%414,)
}

def @func_4131() -> (Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) {
  %415 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %416 = cast(meta[relay.Constant][29] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %417 = reshape(%416, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %418 = %415.0;
  %419 = @func_791(%417) /* ty=Tensor[(4, 9, 14), bool] */;
  (%418, %419, meta[relay.Constant][29] /* ty=Tensor[(504), int64] */)
}

def @func_621(%var_603: Tensor[(14, 8, 9), int64]) -> (Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) {
  %420 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 8, 9), int64] */, dtype="int64") /* ty=Tensor[(14, 8, 9), int64] */;
  %421 = shape_of(%var_603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_603, dtype="int64") /* ty=Tensor[(14, 8, 9), int64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %424 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %425 = multiply(%422, %423) /* ty=Tensor[(14, 8, 9), int64] */;
  %426 = %424.0;
  (%425, %426)
}

def @func_1785() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) {
  %427 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %428 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %429 = %427.0;
  %430 = %428.0;
  (%429, %430)
}

def @func_10102() -> (Tensor[(1, 3, 8), float32],) {
  %431 = @func_3121() /* ty=Tensor[(1, 3, 8), float32] */;
  (%431,)
}

def @func_5537() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %432 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %433 = @func_5241() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) */;
  %434 = %432.0;
  %435 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
  %436 = %433.1;
  (%434, %435, %436)
}

def @func_6659() -> (Tensor[(4, 9, 14), bool], Tensor[(4, 9, 14), bool]) {
  %437 = @func_3370() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %438 = @func_6291() /* ty=Tensor[(4, 9, 14), bool] */;
  %439 = %437.2;
  (%438, %439)
}

def @func_3619(%var_3616: Tensor[(12, 1, 14), float64]) -> (Tensor[(12, 1, 14), float64],) {
  %440 = cast(%var_3616, dtype="float64") /* ty=Tensor[(12, 1, 14), float64] */;
  %441 = log(%440) /* ty=Tensor[(12, 1, 14), float64] */;
  (%441,)
}

def @func_8652(%var_8649: Tensor[(40, 1), float64]) -> (Tensor[(?, 3, 8), int16], Tensor[(2, 10, 2), int32], Tensor[(40, 1), float64]) {
  %442 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %443 = %442.0;
  %444 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 3, 8), float64] */, dtype="int16") /* ty=Tensor[(1, 3, 8), int16] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="int16") /* ty=Tensor[(1, 3, 8), int16] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %448 = cast(%var_8649, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
  %449 = reshape(%448, newshape=[2, 10, 2]) /* ty=Tensor[(2, 10, 2), float64] */;
  %450 = @func_1694(%449) /* ty=(Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) */;
  %451 = subtract(%446, %447) /* ty=Tensor[(?, 3, 8), int16] */;
  %452 = %450.0;
  (%451, %452, %var_8649)
}

def @func_8713() -> (Tensor[(?, 3, 8), bool], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), bool]) {
  %453 = @func_6951() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), bool], Tensor[(1568), float64]) */;
  %454 = @func_7118() /* ty=Tensor[(?, 3, 8), bool] */;
  %455 = @func_6057() /* ty=Tensor[(1, 3, 8), float32] */;
  %456 = %453.1;
  (%454, %455, %456)
}

def @func_70(%var_58: Tensor[(7, 14, 16), float64]) -> Tensor[(7, 14, 16), float64] {
  %457 = cast(%var_58, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  rsqrt(%457) /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_2989() -> (Tensor[(3, 8, 12), float32],) {
  %458 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %459 = %458.0;
  (%459,)
}

def @func_4479(%var_4465: Tensor[(1008), int64]) -> (Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(88, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(1008), int64], Tensor[(?, 3, 8), float32]) {
  %460 = cast(meta[relay.Constant][32] /* ty=Tensor[(88, 12), float64] */, dtype="float64") /* ty=Tensor[(88, 12), float64] */;
  %461 = reshape(%460, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %462 = @func_2334(%461) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) */;
  %463 = @func_3422() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %464 = @func_2995() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %465 = %464.0;
  %466 = cast(%var_4465, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %467 = reshape(%466, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
  %468 = @func_621(%467) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
  %469 = %468.1;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %471 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%465, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %474 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %475 = %462.2;
  %476 = %463.0;
  %477 = divide(%472, %473) /* ty=Tensor[(?, 3, 8), float32] */;
  (%474, %475, meta[relay.Constant][32] /* ty=Tensor[(88, 12), float64] */, %476, %var_4465, %477)
}

def @func_6280() -> (Tensor[(1, 3, 8), float64],) {
  %478 = @func_3121() /* ty=Tensor[(1, 3, 8), float32] */;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %480 = tan(%479) /* ty=Tensor[(1, 3, 8), float64] */;
  (%480,)
}

def @func_8347() -> (Tensor[(1, 3, 8), float64],) {
  %481 = @func_8248() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %482 = %481.0;
  (%482,)
}

def @func_7713(%var_7704: Tensor[(13, 7, 13), float32], %var_7705: Tensor[(13, 7, 13), float32]) -> Tensor[(13, 7, 13), float32] {
  %483 = cast(%var_7705, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %484 = shape_of(%var_7704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_7704, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%485, %486) /* ty=Tensor[(13, 7, 13), float32] */
}

def @func_2760() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) {
  %487 = @func_1785() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */;
  %488 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %489 = %487.0;
  %490 = %488.0;
  (%489, %490)
}

def @func_3461() -> Tensor[(1, 3, 8), float32] {
  %491 = @func_1785() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */;
  %491.1
}

def @func_5780() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) {
  %492 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %493 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %494 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %495 = %494.0;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %497 = %492.0;
  %498 = %493.0;
  %499 = log(%496) /* ty=Tensor[(1, 3, 8), float64] */;
  (%497, %498, %499)
}

def @func_4385(%var_4378: Tensor[(1568), float64]) -> (Tensor[(?, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  %500 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %501 = %500.0;
  %502 = @func_2880() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %505 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%501, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %508 = cast(%var_4378, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %509 = reshape(%508, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %510 = floor_divide(%506, %507) /* ty=Tensor[(?, 3, 8), float64] */;
  %511 = @func_70(%509) /* ty=Tensor[(7, 14, 16), float64] */;
  (%510, %511, %var_4378)
}

def @func_7516(%var_7490: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(1056), float64], Tensor[(4, 9, 14), bool], Tensor[(7, 14, 16), float32]) {
  %512 = cast(%var_7490, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %513 = reshape(%512, newshape=[2, 528]) /* ty=Tensor[(2, 528), float64] */;
  %514 = @func_4798(%513) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) */;
  %515 = @func_3543() /* ty=Tensor[(1, 3, 8), float32] */;
  %516 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
  %517 = %514.1;
  %518 = @func_6291() /* ty=Tensor[(4, 9, 14), bool] */;
  %519 = @func_5496() /* ty=Tensor[(7, 14, 16), float32] */;
  (%515, %516, %517, %var_7490, %518, %519)
}

def @func_8005() -> (Tensor[(1008), int64], Tensor[(1008), int64], Tensor[(3, 8, 12), float32], Tensor[(1, 1568), float64], Tensor[(13, 3, 8), uint16]) {
  %520 = cast(meta[relay.Constant][33] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %521 = reshape(%520, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %522 = @func_4479(%521) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(88, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(1008), int64], Tensor[(?, 3, 8), float32]) */;
  %523 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1568), float64] */, dtype="float64") /* ty=Tensor[(1, 1568), float64] */;
  %524 = %522.4;
  %525 = cast(%524, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %526 = reshape(%523, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %527 = reshape(%525, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
  %528 = @func_5302(%526, %527) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(1568), float64], Tensor[(1, 3, 8), float64], Tensor[(252, 4), int64], Tensor[(3, 8, 12), float32]) */;
  %529 = @func_7731() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="uint16") /* ty=Tensor[(1, 3, 8), uint16] */;
  %532 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 3, 8), float32] */, dtype="uint16") /* ty=Tensor[(13, 3, 8), uint16] */;
  %533 = %528.5;
  %534 = right_shift(%531, %532) /* ty=Tensor[(13, 3, 8), uint16] */;
  (%524, meta[relay.Constant][33] /* ty=Tensor[(1008), int64] */, %533, meta[relay.Constant][34] /* ty=Tensor[(1, 1568), float64] */, %534)
}

def @func_2223() -> Tensor[(7, 14, 16), float64] {
  %535 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %535.1
}

def @func_2995() -> (Tensor[(1, 3, 8), float32],) {
  %536 = @func_2399() /* ty=Tensor[(1, 3, 8), float32] */;
  (%536,)
}

def @func_4222() -> (Tensor[(7, 14, 16), float32],) {
  %537 = @func_3280() /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */;
  %538 = %537.3;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %540 = sqrt(%539) /* ty=Tensor[(7, 14, 16), float32] */;
  (%540,)
}

def @func_5241() -> (Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) {
  %541 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  %542 = @func_3543() /* ty=Tensor[(1, 3, 8), float32] */;
  (%541, %542)
}

def @func_6374(%var_6356: Tensor[(3, 8, 12), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  %543 = @func_6280() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %544 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %545 = %544.0;
  %546 = cast(%var_6356, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %550 = %543.0;
  %551 = floor_divide(%548, %549) /* ty=Tensor[(3, 8, 12), float32] */;
  (%550, %551)
}

def @func_5302(%var_5289: Tensor[(1568), float64], %var_5298: Tensor[(252, 4), int64]) -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(1568), float64], Tensor[(1, 3, 8), float64], Tensor[(252, 4), int64], Tensor[(3, 8, 12), float32]) {
  %552 = @func_4887() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) */;
  %553 = cast(%var_5289, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %554 = reshape(%553, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %555 = @func_2112(%554) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) */;
  %556 = cast(%var_5298, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %557 = reshape(%556, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
  %558 = @func_621(%557) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
  %559 = @func_3422() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %560 = %552.1;
  %561 = %555.2;
  %562 = %558.1;
  %563 = %559.0;
  (%560, %561, %var_5289, %562, %var_5298, %563)
}

def @func_9847(%var_9824: int64, %var_9825: Tensor[(9, 9, 3), int64]) -> Tensor[(9, 9, 3), bool] {
  %564 = cast(%var_9824, dtype="bool") /* ty=bool */;
  %565 = cast(%var_9825, dtype="bool") /* ty=Tensor[(9, 9, 3), bool] */;
  less_equal(%564, %565) /* ty=Tensor[(9, 9, 3), bool] */
}

def @func_1676() -> (Tensor[(1, 3, 8), float64],) {
  %566 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %567 = %566.0;
  (%567,)
}

def @func_6389() -> Tensor[(7, 14, 16), float64] {
  @func_3917() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_4798(%var_4761: Tensor[(2, 528), float64]) -> (Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) {
  %568 = cast(%var_4761, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %569 = cast(%var_4761, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %570 = reshape(%568, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %571 = reshape(%569, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %572 = @func_303(%570, %571) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %573 = cast(%var_4761, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %574 = @func_2880() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %575 = @func_2399() /* ty=Tensor[(1, 3, 8), float32] */;
  %576 = %572.3;
  %577 = log10(%573) /* ty=Tensor[(2, 528), float64] */;
  %578 = %574.0;
  %579 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
  (%575, %576, %577, %578, %579)
}

def @func_6423(%var_6416: uint32, %var_6417: Tensor[(2, 1, 2), uint32]) -> Tensor[(2, 1, 2), bool] {
  %580 = cast(%var_6416, dtype="bool") /* ty=bool */;
  %581 = cast(%var_6417, dtype="bool") /* ty=Tensor[(2, 1, 2), bool] */;
  greater(%580, %581) /* ty=Tensor[(2, 1, 2), bool] */
}

def @func_9631() -> (Tensor[(5, 4, 16), float32],) {
  %582 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 16), float32] */;
  %583 = tan(%582) /* ty=Tensor[(5, 4, 16), float32] */;
  (%583,)
}

def @func_6623() -> Tensor[(7, 14, 16), float64] {
  %584 = @func_3370() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %584.0
}

def @func_2334(%var_2321: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) {
  %585 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %586 = cast(%var_2321, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %587 = reshape(%586, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %588 = @func_564(%587) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) */;
  %589 = %588.2;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %591 = %585.0;
  %592 = cosh(%590) /* ty=Tensor[(1056), float64] */;
  (%591, %var_2321, %592)
}

def @func_2363() -> (Tensor[(1, 3, 8), float64],) {
  %593 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %594 = %593.0;
  (%594,)
}

def @func_8593(%var_8528: Tensor[(4, 4), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(1, 8, 2), float32], Tensor[(4, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(7, 14, 16), float32]) {
  %595 = @func_8347() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %596 = cast(%var_8528, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %597 = reshape(%596, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), float32] */;
  %598 = @func_7081(%597) /* ty=(Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) */;
  %599 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %600 = cast(meta[relay.Constant][37] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %601 = cast(meta[relay.Constant][37] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %602 = reshape(%600, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %603 = reshape(%601, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %604 = @func_303(%602, %603) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %605 = %595.0;
  %606 = %598.0;
  %607 = %599.0;
  %608 = %604.0;
  %609 = @func_5496() /* ty=Tensor[(7, 14, 16), float32] */;
  (%605, %606, %var_8528, %607, %608, meta[relay.Constant][37] /* ty=Tensor[(1056), float64] */, %609)
}

def @func_8457(%var_8436: Tensor[(2028), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64], Tensor[(2028), bool]) {
  %610 = @func_5537() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */;
  %611 = cast(%var_8436, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %612 = reshape(%611, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), float32] */;
  %613 = @func_7652(%612) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64]) */;
  %614 = cast(meta[relay.Constant][38] /* ty=Tensor[(2028), float32] */, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %615 = shape_of(%var_8436, dtype="int32") /* ty=Tensor[(1), int32] */;
  %616 = cast(%var_8436, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), bool] */;
  %618 = %610.1;
  %619 = %613.1;
  %620 = less(%616, %617) /* ty=Tensor[(2028), bool] */;
  (%618, %619, %620)
}

def @func_9112(%var_9104: uint8, %var_9105: Tensor[(6, 1, 14), uint8]) -> (Tensor[(6, 1, 14), uint8],) {
  %621 = cast(%var_9104, dtype="uint8") /* ty=uint8 */;
  %622 = cast(%var_9105, dtype="uint8") /* ty=Tensor[(6, 1, 14), uint8] */;
  %623 = logical_xor(%621, %622) /* ty=Tensor[(6, 1, 14), uint8] */;
  (%623,)
}

def @func_5916() -> Tensor[(1, 3, 8), float32] {
  %624 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %624.0
}

def @func_7895(%var_7873: Tensor[(1056), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) {
  %625 = @func_4504() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */;
  %626 = cast(%var_7873, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %627 = reshape(%626, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %628 = @func_7364(%627) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) */;
  %629 = %625.0;
  %630 = %628.2;
  (%629, %630, %var_7873)
}

def @func_7118() -> Tensor[(?, 3, 8), bool] {
  %631 = @func_4131() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %632 = %631.0;
  %633 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%635, %636) /* ty=Tensor[(?, 3, 8), bool] */
}

def @func_2418() -> (Tensor[(3, 8, 12), float32],) {
  %637 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %638 = log10(%637) /* ty=Tensor[(3, 8, 12), float32] */;
  (%638,)
}

def @func_7364(%var_7349: Tensor[(1056), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) {
  %639 = @func_3422() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %640 = @func_5780() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */;
  %641 = cast(%var_7349, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %642 = reshape(%641, newshape=[8, 132]) /* ty=Tensor[(8, 132), float64] */;
  %643 = @func_6470(%642) /* ty=(Tensor[(4, 9, 14), uint32], Tensor[(1056), float64], Tensor[(8, 132), float64], Tensor[(504, 2), int64], Tensor[(288), float64]) */;
  %644 = %639.0;
  %645 = %640.2;
  %646 = %643.2;
  (%644, %645, %646, %var_7349)
}

def @func_2498() -> (Tensor[(1, 3, 8), float64],) {
  %647 = @func_2457() /* ty=Tensor[(1, 3, 8), float64] */;
  (%647,)
}

def @func_7843() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) {
  %648 = @func_6167() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64], Tensor[(504), int64]) */;
  %649 = @func_4887() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) */;
  %650 = %648.2;
  %651 = %649.0;
  (%650, %651)
}

def @func_8832() -> (Tensor[(?, 3, 8), uint16],) {
  %652 = @func_8679() /* ty=(Tensor[(?, 3, 8), uint16],) */;
  %653 = %652.0;
  (%653,)
}

def @func_6470(%var_6459: Tensor[(8, 132), float64]) -> (Tensor[(4, 9, 14), uint32], Tensor[(1056), float64], Tensor[(8, 132), float64], Tensor[(504, 2), int64], Tensor[(288), float64]) {
  %654 = @func_4933() /* ty=(Tensor[(4, 9, 14), bool],) */;
  %655 = %654.0;
  %656 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 9, 14), bool] */, dtype="uint32") /* ty=Tensor[(4, 9, 14), uint32] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="uint32") /* ty=Tensor[(4, 9, 14), uint32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %660 = cast(%var_6459, dtype="float64") /* ty=Tensor[(8, 132), float64] */;
  %661 = reshape(%660, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %662 = @func_2334(%661) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) */;
  %663 = cast(meta[relay.Constant][42] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %664 = reshape(%663, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %665 = @func_4580(%664) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(288), float64], Tensor[(504, 2), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) */;
  %666 = right_shift(%658, %659) /* ty=Tensor[(4, 9, 14), uint32] */;
  %667 = %662.1;
  %668 = %665.3;
  (%666, %667, %var_6459, %668, meta[relay.Constant][42] /* ty=Tensor[(288), float64] */)
}

def @func_10024(%var_10016: Tensor[(6, 12, 5), uint64]) -> Tensor[(6, 12, 5), uint64] {
  %669 = cast(meta[relay.Constant][43] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %670 = cast(%var_10016, dtype="uint64") /* ty=Tensor[(6, 12, 5), uint64] */;
  right_shift(%669, %670) /* ty=Tensor[(6, 12, 5), uint64] */
}

def @func_1143() -> (Tensor[(1, 3, 8), float32],) {
  %671 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %672 = %671.0;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %674 = asinh(%673) /* ty=Tensor[(1, 3, 8), float32] */;
  (%674,)
}

def @func_2399() -> Tensor[(1, 3, 8), float32] {
  %675 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %675.0
}

def @func_1827() -> (Tensor[(1, 3, 8), float32],) {
  %676 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %677 = %676.0;
  (%677,)
}

def @func_7652(%var_7636: Tensor[(13, 13, 12), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64]) {
  %678 = @func_6761() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */;
  %679 = cast(%var_7636, dtype="float32") /* ty=Tensor[(13, 13, 12), float32] */;
  %680 = log10(%679) /* ty=Tensor[(13, 13, 12), float32] */;
  %681 = cast(%var_7636, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = %678.0;
  %686 = floor_mod(%683, %684) /* ty=Tensor[(13, 13, 12), float64] */;
  (%685, %686)
}

def @func_3543() -> Tensor[(1, 3, 8), float32] {
  %687 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %688 = %687.0;
  %689 = cast(%688, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  atan(%689) /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_8194() -> Tensor[(1, 3, 8), float64] {
  @func_4320() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_8199() -> (Tensor[(3, 8, 12), float32],) {
  %690 = @func_8005() /* ty=(Tensor[(1008), int64], Tensor[(1008), int64], Tensor[(3, 8, 12), float32], Tensor[(1, 1568), float64], Tensor[(13, 3, 8), uint16]) */;
  %691 = %690.2;
  (%691,)
}

def @func_4681(%var_4660: Tensor[(1056), float64]) -> (Tensor[(?, 3, 8), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), int32], Tensor[(12, 1, 14), float64], Tensor[(3, 56), float64]) {
  %692 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %693 = %692.0;
  %694 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %697 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%693, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = cast(%var_4660, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %701 = cast(%var_4660, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %702 = reshape(%700, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %703 = reshape(%701, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %704 = @func_303(%702, %703) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %705 = cast(%695, dtype="int32") /* ty=Tensor[(1, 3, 8), int32] */;
  %706 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%693, dtype="int32") /* ty=Tensor[(1, 3, 8), int32] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %709 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 56), float64] */, dtype="float64") /* ty=Tensor[(3, 56), float64] */;
  %710 = reshape(%709, newshape=[12, 1, 14]) /* ty=Tensor[(12, 1, 14), float64] */;
  %711 = @func_3619(%710) /* ty=(Tensor[(12, 1, 14), float64],) */;
  %712 = logical_or(%698, %699) /* ty=Tensor[(?, 3, 8), bool] */;
  %713 = %704.4;
  %714 = multiply(%707, %708) /* ty=Tensor[(?, 3, 8), int32] */;
  %715 = %711.0;
  (%712, %713, %var_4660, %714, %715, meta[relay.Constant][44] /* ty=Tensor[(3, 56), float64] */)
}

def @func_6997() -> (Tensor[(7, 14, 16), float32],) {
  %716 = @func_3370() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %717 = %716.0;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %719 = exp(%718) /* ty=Tensor[(7, 14, 16), float32] */;
  (%719,)
}

def @func_3422() -> (Tensor[(3, 8, 12), float32],) {
  %720 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %723 = exp(%722) /* ty=Tensor[(3, 8, 12), float32] */;
  (%723,)
}

def @func_9220() -> (Tensor[(1, 3, 8), float64],) {
  %724 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %725 = %724.0;
  (%725,)
}

def @func_791(%var_786: Tensor[(4, 9, 14), int64]) -> Tensor[(4, 9, 14), bool] {
  %726 = cast(5 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %727 = cast(%var_786, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  less(%726, %727) /* ty=Tensor[(4, 9, 14), bool] */
}

def @func_5097(%var_5093: Tensor[(1568), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1568), float64], Tensor[(1, 3, 8), float64]) {
  %728 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %729 = cast(%var_5093, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %730 = reshape(%729, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %731 = @func_2498() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %732 = %728.0;
  %733 = @func_70(%730) /* ty=Tensor[(7, 14, 16), float64] */;
  %734 = %731.0;
  (%732, %733, %var_5093, %734)
}

def @func_7081(%var_7067: Tensor[(1, 8, 2), float32]) -> (Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) {
  %735 = cast(%var_7067, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
  %736 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %737 = erf(%735) /* ty=Tensor[(1, 8, 2), float32] */;
  %738 = @func_5496() /* ty=Tensor[(7, 14, 16), float32] */;
  %739 = %736.0;
  (%737, %738, %739)
}

def @func_888(%var_846: Tensor[(12, 3, 8), float64], %var_884: Tensor[(1008), int64]) -> (Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) {
  %740 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %741 = %740.0;
  %742 = cast(%741, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %743 = cast(%var_846, dtype="bool") /* ty=Tensor[(12, 3, 8), bool] */;
  %744 = cast(meta[relay.Constant][45] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %745 = reshape(%744, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %746 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %747 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %748 = cast(%var_884, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %749 = reshape(%748, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
  %750 = @func_621(%749) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
  %751 = equal(%742, %743) /* ty=Tensor[(12, 3, 8), bool] */;
  %752 = @func_791(%745) /* ty=Tensor[(4, 9, 14), bool] */;
  %753 = %746.0;
  %754 = %747.0;
  %755 = %750.1;
  (%751, %752, meta[relay.Constant][45] /* ty=Tensor[(504), int64] */, %753, %754, %755, %var_884)
}

def @func_9663() -> (Tensor[(1, 3, 8), float32],) {
  %756 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %757 = %756.0;
  (%757,)
}

def @func_9093() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %758 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %759 = @func_8713() /* ty=(Tensor[(?, 3, 8), bool], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), bool]) */;
  %760 = @func_8199() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %761 = @func_6605() /* ty=(Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) */;
  %762 = %758.0;
  %763 = %759.2;
  %764 = %760.0;
  %765 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
  %766 = %761.4;
  (%762, %763, %764, %765, %766)
}

def @func_4003(%var_3970: Tensor[(12, 3, 8), float64]) -> (Tensor[(12, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  %767 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %768 = %767.1;
  %769 = cast(%768, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %770 = cast(%var_3970, dtype="bool") /* ty=Tensor[(12, 3, 8), bool] */;
  %771 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %772 = cast(%768, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %773 = cast(meta[relay.Constant][46] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %774 = reshape(%773, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %775 = logical_or(%769, %770) /* ty=Tensor[(12, 3, 8), bool] */;
  %776 = %771.0;
  %777 = @func_2457() /* ty=Tensor[(1, 3, 8), float64] */;
  %778 = cos(%772) /* ty=Tensor[(1, 3, 8), float64] */;
  %779 = @func_70(%774) /* ty=Tensor[(7, 14, 16), float64] */;
  (%775, %776, %777, %778, %779, meta[relay.Constant][46] /* ty=Tensor[(1568), float64] */)
}

def @func_9718() -> Tensor[(?, 3, 8), uint16] {
  %780 = @func_6605() /* ty=(Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) */;
  %780.3
}

def @func_1272(%var_1266: Tensor[(120), float32], %var_1267: Tensor[(1008), int64]) -> (Tensor[(1, 3, 8), float64], Tensor[(6, 84), float64], Tensor[(5, 3, 8), uint8], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1008), int64]) {
  %781 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %782 = @func_1235() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) */;
  %783 = %782.1;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(6, 84), float64] */;
  %785 = cast(meta[relay.Constant][47] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %786 = cast(%var_1266, dtype="float32") /* ty=Tensor[(120), float32] */;
  %787 = cast(%var_1267, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %788 = reshape(%785, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
  %789 = reshape(%786, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %790 = reshape(%787, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %791 = @func_976(%788, %789, %790) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
  %792 = %781.0;
  %793 = tan(%784) /* ty=Tensor[(6, 84), float64] */;
  %794 = %791.0;
  (%792, %793, %794, meta[relay.Constant][47] /* ty=Tensor[(66), float64] */, %var_1266, %var_1267)
}

def @func_6951() -> (Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), bool], Tensor[(1568), float64]) {
  %795 = cast(meta[relay.Constant][48] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %796 = reshape(%795, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %797 = @func_2112(%796) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) */;
  %798 = @func_6130() /* ty=Tensor[(3, 8, 12), float32] */;
  %799 = %797.2;
  (%798, %799, meta[relay.Constant][48] /* ty=Tensor[(1568), float64] */)
}

def @func_7059() -> (Tensor[(1, 3, 8), float64],) {
  %800 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %801 = %800.1;
  (%801,)
}

def @func_6830() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %802 = @func_5241() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) */;
  %803 = @func_6623() /* ty=Tensor[(7, 14, 16), float64] */;
  %804 = %802.1;
  (%803, %804)
}

def @func_7596(%var_7590: Tensor[(12, 14, 3), float32]) -> Tensor[(12, 14, 3), float32] {
  %805 = cast(%var_7590, dtype="float32") /* ty=Tensor[(12, 14, 3), float32] */;
  sinh(%805) /* ty=Tensor[(12, 14, 3), float32] */
}

def @func_5615() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %806 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %807 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  (%806, %807)
}

def @func_1527(%var_1378: Tensor[(120), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1, 3, 8), float32], Tensor[(1568), float64], Tensor[(5, 3, 8), uint8], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 1008), float64], Tensor[(1, 1008), float64], Tensor[(?, 1008), bool]) {
  %808 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %809 = cast(meta[relay.Constant][49] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %810 = cast(%var_1378, dtype="float32") /* ty=Tensor[(120), float32] */;
  %811 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
  %812 = reshape(%809, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
  %813 = reshape(%810, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %814 = reshape(%811, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %815 = @func_976(%812, %813, %814) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
  %816 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %817 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %818 = cast(%var_1378, dtype="float32") /* ty=Tensor[(120), float32] */;
  %819 = reshape(%818, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %820 = @func_821(%819) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) */;
  %821 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %822 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %823 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 1008), int64] */, dtype="float32") /* ty=Tensor[(1, 1008), float32] */;
  %824 = log(%823) /* ty=Tensor[(1, 1008), float32] */;
  %825 = cast(%824, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
  %826 = cast(%824, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
  %827 = cast(%824, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
  %828 = atanh(%827) /* ty=Tensor[(1, 1008), float64] */;
  %829 = cast(%828, dtype="int16") /* ty=Tensor[(1, 1008), int16] */;
  %830 = shape_of(%824, dtype="int32") /* ty=Tensor[(2), int32] */;
  %831 = cast(%824, dtype="int16") /* ty=Tensor[(1, 1008), int16] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %833 = bitwise_or(%831, %832) /* ty=Tensor[(?, 1008), int16] */;
  %834 = cast(meta[relay.Constant][49] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %835 = cast(%var_1378, dtype="float32") /* ty=Tensor[(120), float32] */;
  %836 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
  %837 = reshape(%834, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
  %838 = reshape(%835, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %839 = reshape(%836, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %840 = @func_976(%837, %838, %839) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
  %841 = %840.4;
  %842 = cast(%841, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %843 = shape_of(%833, dtype="int32") /* ty=Tensor[(2), int32] */;
  %844 = cast(%833, dtype="bool") /* ty=Tensor[(?, 1008), bool] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %846 = %808.1;
  %847 = %815.7;
  %848 = %816.0;
  %849 = %817.2;
  %850 = %820.0;
  %851 = %821.0;
  %852 = %822.0;
  %853 = rsqrt(%825) /* ty=Tensor[(1, 1008), float64] */;
  %854 = log10(%826) /* ty=Tensor[(1, 1008), float64] */;
  %855 = logical_and(%844, %845) /* ty=Tensor[(?, 1008), bool] */;
  (%846, %847, meta[relay.Constant][49] /* ty=Tensor[(66), float64] */, %var_1378, %848, %849, %850, %851, %852, %853, %854, %855)
}

def @func_6737(%var_6713: Tensor[(13, 9, 12), int64]) -> (Tensor[(13, 9, 12), int64], Tensor[(405), float64], Tensor[(120), float32]) {
  %856 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %857 = cast(%var_6713, dtype="int64") /* ty=Tensor[(13, 9, 12), int64] */;
  %858 = cast(meta[relay.Constant][51] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %859 = reshape(%858, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
  %860 = @func_3721(%859) /* ty=(Tensor[(10, 3, 4), float64], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) */;
  %861 = multiply(%856, %857) /* ty=Tensor[(13, 9, 12), int64] */;
  %862 = %860.2;
  (%861, %862, meta[relay.Constant][51] /* ty=Tensor[(120), float32] */)
}

def @func_8248() -> (Tensor[(1, 3, 8), float64],) {
  %863 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %864 = %863.0;
  (%864,)
}

def @func_821(%var_805: Tensor[(5, 3, 8), float32]) -> (Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) {
  %865 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %866 = %865.0;
  %867 = cast(%866, dtype="uint8") /* ty=Tensor[(1, 3, 8), uint8] */;
  %868 = cast(%var_805, dtype="uint8") /* ty=Tensor[(5, 3, 8), uint8] */;
  %869 = cast(%866, dtype="int64") /* ty=Tensor[(1, 3, 8), int64] */;
  %870 = cast(%var_805, dtype="int64") /* ty=Tensor[(5, 3, 8), int64] */;
  %871 = subtract(%867, %868) /* ty=Tensor[(5, 3, 8), uint8] */;
  %872 = bitwise_or(%869, %870) /* ty=Tensor[(5, 3, 8), int64] */;
  (%871, %872)
}

def @func_3121() -> Tensor[(1, 3, 8), float32] {
  %873 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %873.0
}

def @func_6167() -> (Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64], Tensor[(504), int64]) {
  %874 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %875 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %876 = @func_4131() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %877 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  %878 = %874.0;
  %879 = %875.0;
  %880 = %876.2;
  (%877, %878, %879, %880)
}

def @func_9244() -> (Tensor[(7, 14, 16), float64],) {
  %881 = @func_3280() /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */;
  %882 = %881.2;
  (%882,)
}

def @main(%var_10117: Tensor[(3, 11, 15), float32]) -> (Tensor[(3, 11, 15), float32], Tensor[(3, 11, 15), float32]) {
  %883 = cast(%var_10117, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %884 = cast(%var_10117, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %885 = cosh(%883) /* ty=Tensor[(3, 11, 15), float32] */;
  %886 = asin(%884) /* ty=Tensor[(3, 11, 15), float32] */;
  (%885, %886)
}

def @func_2554() -> (Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) {
  %887 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %889 = reshape(%888, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %890 = @func_2112(%889) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) */;
  %891 = %890.1;
  (%887, %891)
}

def @func_2707() -> (Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) {
  %892 = @func_2498() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %893 = %892.0;
  %894 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %895 = %894.0;
  %896 = cast(%895, dtype="int8") /* ty=Tensor[(1, 3, 8), int8] */;
  %897 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%893, dtype="int8") /* ty=Tensor[(1, 3, 8), int8] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %900 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 42), float32] */, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
  %901 = reshape(%900, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float32] */;
  %902 = @func_1598(%901) /* ty=(Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) */;
  %903 = %902.2;
  %904 = cast(%903, dtype="float32") /* ty=Tensor[(5, 12, 7), float32] */;
  %905 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(10, 42), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %906 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 42), float32] */, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
  %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %908 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 42), float32] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %909 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%903, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %912 = cast(meta[relay.Constant][53] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %913 = reshape(%912, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %914 = @func_2334(%913) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) */;
  %915 = cast(%895, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %916 = sqrt(%915) /* ty=Tensor[(1, 3, 8), float32] */;
  %917 = cast(%895, dtype="uint16") /* ty=Tensor[(1, 3, 8), uint16] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%916, dtype="uint16") /* ty=Tensor[(1, 3, 8), uint16] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %921 = right_shift(%898, %899) /* ty=Tensor[(?, 3, 8), int8] */;
  %922 = divide(%906, %907) /* ty=Tensor[(10, 42), float32] */;
  %923 = floor_mod(%910, %911) /* ty=Tensor[(5, 12, 7), float64] */;
  %924 = %914.2;
  %925 = minimum(%919, %920) /* ty=Tensor[(?, 3, 8), uint16] */;
  (%921, %922, %923, %924, meta[relay.Constant][53] /* ty=Tensor[(1056), float64] */, %925)
}

def @func_8679() -> (Tensor[(?, 3, 8), uint16],) {
  %926 = @func_4419() /* ty=Tensor[(?, 3, 8), uint16] */;
  (%926,)
}

def @func_4419() -> Tensor[(?, 3, 8), uint16] {
  %927 = @func_2707() /* ty=(Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) */;
  %927.5
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7293(%var_7291: Tensor[(1, 120), int8], %var_7292: Tensor[(16), float32]) -> (Tensor[(7, 14, 16), float64], int8, Tensor[(5, 12, 7), float64], Tensor[(210, 2), float32], Tensor[(?, 120), float32], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float32], Tensor[(16), float32]) {
  %21 = fn (%var_7259: Tensor[(1, 120), int8], %var_7286: Tensor[(16), float32]) -> (Tensor[(7, 14, 16), float64], int8, Tensor[(5, 12, 7), float64], Tensor[(210, 2), float32], Tensor[(?, 120), float32], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float32], Tensor[(16), float32]) {
    %0 = cast(meta[relay.Constant][1] /* ty=Tensor[(210, 2), float32] */, dtype="float32") /* ty=Tensor[(210, 2), float32] */;
    %1 = reshape(%0, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float32] */;
    %2 = @func_1598(%1) /* ty=(Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) */;
    %3 = cast(meta[relay.Constant][0] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %4 = cast(%var_7259, dtype="int8") /* ty=Tensor[(1, 120), int8] */;
    %5 = reshape(%3, newshape=[]) /* ty=int8 */;
    %6 = reshape(%4, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int8] */;
    %7 = @func_4947(%5, %6) /* ty=Tensor[(15, 4, 2), int8] */;
    %8 = cast(%7, dtype="float32") /* ty=Tensor[(15, 4, 2), float32] */;
    %9 = shape_of(%var_7259, dtype="int32") /* ty=Tensor[(2), int32] */;
    %10 = cast(%var_7259, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %12 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %13 = cast(%var_7286, dtype="float32") /* ty=Tensor[(16), float32] */;
    %14 = reshape(%13, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), float32] */;
    %15 = @func_7081(%14) /* ty=(Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) */;
    %16 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
    %17 = %2.1;
    %18 = power(%10, %11) /* ty=Tensor[(?, 120), float32] */;
    %19 = %12.0;
    %20 = %15.1;
    (%16, meta[relay.Constant][0] /* ty=int8 */, %17, meta[relay.Constant][1] /* ty=Tensor[(210, 2), float32] */, %18, %19, %20, %var_7286)
  };
  %21(%var_7291, %var_7292) /* ty=(Tensor[(7, 14, 16), float64], int8, Tensor[(5, 12, 7), float64], Tensor[(210, 2), float32], Tensor[(?, 120), float32], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float32], Tensor[(16), float32]) */
}

def @func_7897(%var_7896: Tensor[(1056), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) {
  %28 = fn (%var_7873: Tensor[(1056), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) {
    %22 = @func_4504() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */;
    %23 = cast(%var_7873, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %24 = reshape(%23, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
    %25 = @func_7364(%24) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) */;
    %26 = %22.0;
    %27 = %25.2;
    (%26, %27, %var_7873)
  };
  %28(%var_7896) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) */
}

def @func_8654(%var_8653: Tensor[(40, 1), float64]) -> (Tensor[(?, 3, 8), int16], Tensor[(2, 10, 2), int32], Tensor[(40, 1), float64]) {
  %40 = fn (%var_8649: Tensor[(40, 1), float64]) -> (Tensor[(?, 3, 8), int16], Tensor[(2, 10, 2), int32], Tensor[(40, 1), float64]) {
    %29 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %30 = %29.0;
    %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 3, 8), float64] */, dtype="int16") /* ty=Tensor[(1, 3, 8), int16] */;
    %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%30, dtype="int16") /* ty=Tensor[(1, 3, 8), int16] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %35 = cast(%var_8649, dtype="float64") /* ty=Tensor[(40, 1), float64] */;
    %36 = reshape(%35, newshape=[2, 10, 2]) /* ty=Tensor[(2, 10, 2), float64] */;
    %37 = @func_1694(%36) /* ty=(Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) */;
    %38 = subtract(%33, %34) /* ty=Tensor[(?, 3, 8), int16] */;
    %39 = %37.0;
    (%38, %39, %var_8649)
  };
  %40(%var_8653) /* ty=(Tensor[(?, 3, 8), int16], Tensor[(2, 10, 2), int32], Tensor[(40, 1), float64]) */
}

def @func_3123() -> Tensor[(1, 3, 8), float32] {
  @func_3121() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_7059() -> (Tensor[(1, 3, 8), float64],) {
  %41 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %42 = %41.1;
  (%42,)
}

def @func_4681(%var_4660: Tensor[(1056), float64]) -> (Tensor[(?, 3, 8), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), int32], Tensor[(12, 1, 14), float64], Tensor[(3, 56), float64]) {
  %43 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %44 = %43.0;
  %45 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %46 = %45.0;
  %47 = cast(%46, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %48 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%44, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = cast(%var_4660, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %52 = cast(%var_4660, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %53 = reshape(%51, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %54 = reshape(%52, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %55 = @func_303(%53, %54) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %56 = cast(%46, dtype="int32") /* ty=Tensor[(1, 3, 8), int32] */;
  %57 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%44, dtype="int32") /* ty=Tensor[(1, 3, 8), int32] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 56), float64] */, dtype="float64") /* ty=Tensor[(3, 56), float64] */;
  %61 = reshape(%60, newshape=[12, 1, 14]) /* ty=Tensor[(12, 1, 14), float64] */;
  %62 = @func_3619(%61) /* ty=(Tensor[(12, 1, 14), float64],) */;
  %63 = logical_or(%49, %50) /* ty=Tensor[(?, 3, 8), bool] */;
  %64 = %55.4;
  %65 = multiply(%58, %59) /* ty=Tensor[(?, 3, 8), int32] */;
  %66 = %62.0;
  (%63, %64, %var_4660, %65, %66, meta[relay.Constant][3] /* ty=Tensor[(3, 56), float64] */)
}

def @func_6280() -> (Tensor[(1, 3, 8), float64],) {
  %67 = @func_3121() /* ty=Tensor[(1, 3, 8), float32] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %69 = tan(%68) /* ty=Tensor[(1, 3, 8), float64] */;
  (%69,)
}

def @func_8457(%var_8436: Tensor[(2028), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64], Tensor[(2028), bool]) {
  %70 = @func_5537() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */;
  %71 = cast(%var_8436, dtype="float32") /* ty=Tensor[(2028), float32] */;
  %72 = reshape(%71, newshape=[13, 13, 12]) /* ty=Tensor[(13, 13, 12), float32] */;
  %73 = @func_7652(%72) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64]) */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(2028), float32] */, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %75 = shape_of(%var_8436, dtype="int32") /* ty=Tensor[(1), int32] */;
  %76 = cast(%var_8436, dtype="bool") /* ty=Tensor[(2028), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?), bool] */;
  %78 = %70.1;
  %79 = %73.1;
  %80 = less(%76, %77) /* ty=Tensor[(2028), bool] */;
  (%78, %79, %80)
}

def @func_3918() -> Tensor[(7, 14, 16), float64] {
  %82 = fn () -> Tensor[(7, 14, 16), float64] {
    %81 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
    %81.1
  };
  %82() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_8679() -> (Tensor[(?, 3, 8), uint16],) {
  %83 = @func_4419() /* ty=Tensor[(?, 3, 8), uint16] */;
  (%83,)
}

def @func_9523() -> Tensor[(1, 3, 8), float64] {
  @func_8194() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_10103() -> (Tensor[(1, 3, 8), float32],) {
  %85 = fn () -> (Tensor[(1, 3, 8), float32],) {
    %84 = @func_3121() /* ty=Tensor[(1, 3, 8), float32] */;
    (%84,)
  };
  %85() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_4947(%var_4940: int8, %var_4941: Tensor[(15, 4, 2), int8]) -> Tensor[(15, 4, 2), int8] {
  %86 = cast(%var_4940, dtype="int8") /* ty=int8 */;
  %87 = cast(%var_4941, dtype="int8") /* ty=Tensor[(15, 4, 2), int8] */;
  logical_xor(%86, %87) /* ty=Tensor[(15, 4, 2), int8] */
}

def @func_6390() -> Tensor[(7, 14, 16), float64] {
  %88 = fn () -> Tensor[(7, 14, 16), float64] {
    @func_3917() /* ty=Tensor[(7, 14, 16), float64] */
  };
  %88() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_2458() -> Tensor[(1, 3, 8), float64] {
  %90 = fn () -> Tensor[(1, 3, 8), float64] {
    %89 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %89.0
  };
  %90() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_3192(%var_3190: Tensor[(16, 3, 8), float32]) -> (Tensor[(16, 3, 8), int64], Tensor[(2, 10, 2), int32], Tensor[(40), float64]) {
  @func_3189(%var_3190) /* ty=(Tensor[(16, 3, 8), int64], Tensor[(2, 10, 2), int32], Tensor[(40), float64]) */
}

def @func_3754() -> (Tensor[(3, 8, 12), float32],) {
  @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_9001() -> Tensor[(3, 8, 12), float32] {
  %92 = fn () -> Tensor[(3, 8, 12), float32] {
    %91 = @func_8199() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %91.0
  };
  %92() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_4421() -> Tensor[(?, 3, 8), uint16] {
  @func_4419() /* ty=Tensor[(?, 3, 8), uint16] */
}

def @func_2401() -> Tensor[(1, 3, 8), float32] {
  @func_2399() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_6660() -> (Tensor[(4, 9, 14), bool], Tensor[(4, 9, 14), bool]) {
  %96 = fn () -> (Tensor[(4, 9, 14), bool], Tensor[(4, 9, 14), bool]) {
    %93 = @func_3370() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
    %94 = @func_6291() /* ty=Tensor[(4, 9, 14), bool] */;
    %95 = %93.2;
    (%94, %95)
  };
  %96() /* ty=(Tensor[(4, 9, 14), bool], Tensor[(4, 9, 14), bool]) */
}

def @func_8135(%var_8133: Tensor[(6, 3, 8), float32]) -> (Tensor[(1008), int64], Tensor[(6, 3, 8), bool]) {
  @func_8132(%var_8133) /* ty=(Tensor[(1008), int64], Tensor[(6, 3, 8), bool]) */
}

def @func_9777() -> Tensor[(1, 3, 8), float32] {
  %97 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %97.0
}

def @func_6625() -> Tensor[(7, 14, 16), float64] {
  @func_6623() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_6374(%var_6356: Tensor[(3, 8, 12), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  %98 = @func_6280() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %99 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %100 = %99.0;
  %101 = cast(%var_6356, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %105 = %98.0;
  %106 = floor_divide(%103, %104) /* ty=Tensor[(3, 8, 12), float32] */;
  (%105, %106)
}

def @func_9720() -> Tensor[(?, 3, 8), uint16] {
  @func_9718() /* ty=Tensor[(?, 3, 8), uint16] */
}

def @func_8079() -> Tensor[(?, 3, 8), uint16] {
  %107 = fn () -> Tensor[(?, 3, 8), uint16] {
    @func_4419() /* ty=Tensor[(?, 3, 8), uint16] */
  };
  %107() /* ty=Tensor[(?, 3, 8), uint16] */
}

def @func_7654(%var_7653: Tensor[(13, 13, 12), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64]) {
  %117 = fn (%var_7636: Tensor[(13, 13, 12), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64]) {
    %108 = @func_6761() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */;
    %109 = cast(%var_7636, dtype="float32") /* ty=Tensor[(13, 13, 12), float32] */;
    %110 = log10(%109) /* ty=Tensor[(13, 13, 12), float32] */;
    %111 = cast(%var_7636, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
    %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
    %113 = cast(%110, dtype="float64") /* ty=Tensor[(13, 13, 12), float64] */;
    %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %115 = %108.0;
    %116 = floor_mod(%113, %114) /* ty=Tensor[(13, 13, 12), float64] */;
    (%115, %116)
  };
  %117(%var_7653) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64]) */
}

def @func_8132(%var_8122: Tensor[(6, 3, 8), float32]) -> (Tensor[(1008), int64], Tensor[(6, 3, 8), bool]) {
  %118 = @func_4547() /* ty=(Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) */;
  %119 = @func_2399() /* ty=Tensor[(1, 3, 8), float32] */;
  %120 = cast(%119, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %121 = cast(%var_8122, dtype="bool") /* ty=Tensor[(6, 3, 8), bool] */;
  %122 = %118.0;
  %123 = greater(%120, %121) /* ty=Tensor[(6, 3, 8), bool] */;
  (%122, %123)
}

def @func_2762() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) {
  @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */
}

def @func_695() -> (Tensor[(1, 3, 8), float64],) {
  @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_6853() -> Tensor[(3, 8, 12), float32] {
  @func_6851() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_7731() -> (Tensor[(1, 3, 8), float32],) {
  %124 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  (%124,)
}

def @func_6739(%var_6738: Tensor[(13, 9, 12), int64]) -> (Tensor[(13, 9, 12), int64], Tensor[(405), float64], Tensor[(120), float32]) {
  %132 = fn (%var_6713: Tensor[(13, 9, 12), int64]) -> (Tensor[(13, 9, 12), int64], Tensor[(405), float64], Tensor[(120), float32]) {
    %125 = cast(6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %126 = cast(%var_6713, dtype="int64") /* ty=Tensor[(13, 9, 12), int64] */;
    %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %128 = reshape(%127, newshape=[10, 3, 4]) /* ty=Tensor[(10, 3, 4), float32] */;
    %129 = @func_3721(%128) /* ty=(Tensor[(10, 3, 4), float64], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) */;
    %130 = multiply(%125, %126) /* ty=Tensor[(13, 9, 12), int64] */;
    %131 = %129.2;
    (%130, %131, meta[relay.Constant][5] /* ty=Tensor[(120), float32] */)
  };
  %132(%var_6738) /* ty=(Tensor[(13, 9, 12), int64], Tensor[(405), float64], Tensor[(120), float32]) */
}

def @func_4132() -> (Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) {
  %138 = fn () -> (Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) {
    %133 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %134 = cast(meta[relay.Constant][6] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
    %135 = reshape(%134, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
    %136 = %133.0;
    %137 = @func_791(%135) /* ty=Tensor[(4, 9, 14), bool] */;
    (%136, %137, meta[relay.Constant][6] /* ty=Tensor[(504), int64] */)
  };
  %138() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */
}

def @func_2803(%var_2801: Tensor[(12, 1, 8), float64], %var_2802: Tensor[(1008), int64]) -> (Tensor[(12, 13, 8), bool], Tensor[(1008), int64], Tensor[(2, 144), float64], Tensor[(1008), int64]) {
  %148 = fn (%var_2784: Tensor[(12, 1, 8), float64], %var_2798: Tensor[(1008), int64]) -> (Tensor[(12, 13, 8), bool], Tensor[(1008), int64], Tensor[(2, 144), float64], Tensor[(1008), int64]) {
    %139 = cast(%var_2784, dtype="bool") /* ty=Tensor[(12, 1, 8), bool] */;
    %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 13, 8), float64] */, dtype="bool") /* ty=Tensor[(12, 13, 8), bool] */;
    %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 144), float64] */, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
    %142 = cast(%var_2798, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %143 = reshape(%141, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
    %144 = reshape(%142, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %145 = @func_888(%143, %144) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
    %146 = not_equal(%139, %140) /* ty=Tensor[(12, 13, 8), bool] */;
    %147 = %145.6;
    (%146, %147, meta[relay.Constant][8] /* ty=Tensor[(2, 144), float64] */, %var_2798)
  };
  %148(%var_2801, %var_2802) /* ty=(Tensor[(12, 13, 8), bool], Tensor[(1008), int64], Tensor[(2, 144), float64], Tensor[(1008), int64]) */
}

def @func_6952() -> (Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), bool], Tensor[(1568), float64]) {
  %154 = fn () -> (Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), bool], Tensor[(1568), float64]) {
    %149 = cast(meta[relay.Constant][9] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %150 = reshape(%149, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
    %151 = @func_2112(%150) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) */;
    %152 = @func_6130() /* ty=Tensor[(3, 8, 12), float32] */;
    %153 = %151.2;
    (%152, %153, meta[relay.Constant][9] /* ty=Tensor[(1568), float64] */)
  };
  %154() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), bool], Tensor[(1568), float64]) */
}

def @func_3281() -> (Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) {
  %164 = fn () -> (Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) {
    %155 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %156 = %155.0;
    %157 = cast(%156, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
    %158 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 3, 8), float32] */, dtype="bool") /* ty=Tensor[(3, 3, 8), bool] */;
    %159 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %160 = greater_equal(%157, %158) /* ty=Tensor[(3, 3, 8), bool] */;
    %161 = %159.0;
    %162 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
    %163 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
    (%160, %161, %162, %163)
  };
  %164() /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */
}

def @func_7518(%var_7517: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(1056), float64], Tensor[(4, 9, 14), bool], Tensor[(7, 14, 16), float32]) {
  %173 = fn (%var_7490: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(1056), float64], Tensor[(4, 9, 14), bool], Tensor[(7, 14, 16), float32]) {
    %165 = cast(%var_7490, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %166 = reshape(%165, newshape=[2, 528]) /* ty=Tensor[(2, 528), float64] */;
    %167 = @func_4798(%166) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) */;
    %168 = @func_3543() /* ty=Tensor[(1, 3, 8), float32] */;
    %169 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
    %170 = %167.1;
    %171 = @func_6291() /* ty=Tensor[(4, 9, 14), bool] */;
    %172 = @func_5496() /* ty=Tensor[(7, 14, 16), float32] */;
    (%168, %169, %170, %var_7490, %171, %172)
  };
  %173(%var_7517) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(1056), float64], Tensor[(4, 9, 14), bool], Tensor[(7, 14, 16), float32]) */
}

def @func_7733() -> (Tensor[(1, 3, 8), float32],) {
  @func_7731() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_5680(%var_5675: Tensor[(7, 14, 16), float32]) -> (Tensor[(7, 14, 16), uint32],) {
  %174 = @func_4222() /* ty=(Tensor[(7, 14, 16), float32],) */;
  %175 = %174.0;
  %176 = cast(%var_5675, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="uint32") /* ty=Tensor[(7, 14, 16), uint32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %180 = subtract(%178, %179) /* ty=Tensor[(7, 14, 16), uint32] */;
  (%180,)
}

def @func_5916() -> Tensor[(1, 3, 8), float32] {
  %181 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %181.0
}

def @func_759() -> (Tensor[(7, 14, 16), float64],) {
  %184 = fn () -> (Tensor[(7, 14, 16), float64],) {
    %182 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
    %183 = %182.1;
    (%183,)
  };
  %184() /* ty=(Tensor[(7, 14, 16), float64],) */
}

def @func_5100(%var_5098: Tensor[(1568), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1568), float64], Tensor[(1, 3, 8), float64]) {
  @func_5097(%var_5098) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1568), float64], Tensor[(1, 3, 8), float64]) */
}

def @func_6292() -> Tensor[(4, 9, 14), bool] {
  %186 = fn () -> Tensor[(4, 9, 14), bool] {
    %185 = @func_4933() /* ty=(Tensor[(4, 9, 14), bool],) */;
    %185.0
  };
  %186() /* ty=Tensor[(4, 9, 14), bool] */
}

def @func_7717(%var_7715: Tensor[(13, 7, 13), float32], %var_7716: Tensor[(13, 7, 13), float32]) -> Tensor[(13, 7, 13), float32] {
  @func_7713(%var_7715, %var_7716) /* ty=Tensor[(13, 7, 13), float32] */
}

def @func_7691(%var_7689: uint32, %var_7690: Tensor[(16, 11, 1), uint32]) -> (Tensor[(16, 11, 1), uint32], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) {
  @func_7687(%var_7689, %var_7690) /* ty=(Tensor[(16, 11, 1), uint32], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) */
}

def @func_4583(%var_4581: Tensor[(288), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(288), float64], Tensor[(504, 2), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) {
  @func_4580(%var_4581) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(288), float64], Tensor[(504, 2), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) */
}

def @func_1696(%var_1695: Tensor[(2, 10, 2), float64]) -> (Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) {
  %196 = fn (%var_1683: Tensor[(2, 10, 2), float64]) -> (Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) {
    %187 = cast(%var_1683, dtype="float64") /* ty=Tensor[(2, 10, 2), float64] */;
    %188 = log2(%187) /* ty=Tensor[(2, 10, 2), float64] */;
    %189 = cast(%188, dtype="int32") /* ty=Tensor[(2, 10, 2), int32] */;
    %190 = shape_of(%var_1683, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%var_1683, dtype="int32") /* ty=Tensor[(2, 10, 2), int32] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %193 = cast(%var_1683, dtype="float32") /* ty=Tensor[(2, 10, 2), float32] */;
    %194 = multiply(%191, %192) /* ty=Tensor[(2, 10, 2), int32] */;
    %195 = asin(%193) /* ty=Tensor[(2, 10, 2), float32] */;
    (%194, %195)
  };
  %196(%var_1695) /* ty=(Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) */
}

def @func_7617() -> (Tensor[(7, 14, 16), float64],) {
  @func_7615() /* ty=(Tensor[(7, 14, 16), float64],) */
}

def @func_9353() -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) {
  %197 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %199 = reshape(%198, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %200 = @func_5097(%199) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1568), float64], Tensor[(1, 3, 8), float64]) */;
  %201 = @func_3461() /* ty=Tensor[(1, 3, 8), float32] */;
  %202 = %200.1;
  (%201, %197, %202)
}

def @func_9402() -> Tensor[(7, 14, 16), float64] {
  @func_9400() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_2881() -> (Tensor[(1, 3, 8), float32],) {
  %207 = fn () -> (Tensor[(1, 3, 8), float32],) {
    %203 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
    %204 = %203.0;
    %205 = cast(%204, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
    %206 = sinh(%205) /* ty=Tensor[(1, 3, 8), float32] */;
    (%206,)
  };
  %207() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_8834() -> (Tensor[(?, 3, 8), uint16],) {
  @func_8832() /* ty=(Tensor[(?, 3, 8), uint16],) */
}

def @func_7461(%var_7460: Tensor[(16, 3, 8), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 3, 8), bool], Tensor[(16, 3, 8), float64]) {
  %217 = fn (%var_7435: Tensor[(16, 3, 8), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(16, 3, 8), bool], Tensor[(16, 3, 8), float64]) {
    %208 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %209 = @func_2498() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %210 = %209.0;
    %211 = cast(%210, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
    %212 = cast(%var_7435, dtype="bool") /* ty=Tensor[(16, 3, 8), bool] */;
    %213 = cast(%var_7435, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
    %214 = %208.0;
    %215 = less_equal(%211, %212) /* ty=Tensor[(16, 3, 8), bool] */;
    %216 = atan(%213) /* ty=Tensor[(16, 3, 8), float64] */;
    (%214, %215, %216)
  };
  %217(%var_7460) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(16, 3, 8), bool], Tensor[(16, 3, 8), float64]) */
}

def @func_1529(%var_1528: Tensor[(120), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1, 3, 8), float32], Tensor[(1568), float64], Tensor[(5, 3, 8), uint8], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 1008), float64], Tensor[(1, 1008), float64], Tensor[(?, 1008), bool]) {
  %266 = fn (%var_1378: Tensor[(120), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1, 3, 8), float32], Tensor[(1568), float64], Tensor[(5, 3, 8), uint8], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 1008), float64], Tensor[(1, 1008), float64], Tensor[(?, 1008), bool]) {
    %218 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
    %219 = cast(meta[relay.Constant][11] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %220 = cast(%var_1378, dtype="float32") /* ty=Tensor[(120), float32] */;
    %221 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
    %222 = reshape(%219, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
    %223 = reshape(%220, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %224 = reshape(%221, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %225 = @func_976(%222, %223, %224) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
    %226 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %227 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
    %228 = cast(%var_1378, dtype="float32") /* ty=Tensor[(120), float32] */;
    %229 = reshape(%228, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
    %230 = @func_821(%229) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) */;
    %231 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
    %232 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
    %233 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1008), int64] */, dtype="float32") /* ty=Tensor[(1, 1008), float32] */;
    %234 = log(%233) /* ty=Tensor[(1, 1008), float32] */;
    %235 = cast(%234, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
    %236 = cast(%234, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
    %237 = cast(%234, dtype="float64") /* ty=Tensor[(1, 1008), float64] */;
    %238 = atanh(%237) /* ty=Tensor[(1, 1008), float64] */;
    %239 = cast(%238, dtype="int16") /* ty=Tensor[(1, 1008), int16] */;
    %240 = shape_of(%234, dtype="int32") /* ty=Tensor[(2), int32] */;
    %241 = cast(%234, dtype="int16") /* ty=Tensor[(1, 1008), int16] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %243 = bitwise_or(%241, %242) /* ty=Tensor[(?, 1008), int16] */;
    %244 = cast(meta[relay.Constant][11] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %245 = cast(%var_1378, dtype="float32") /* ty=Tensor[(120), float32] */;
    %246 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
    %247 = reshape(%244, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
    %248 = reshape(%245, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %249 = reshape(%246, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %250 = @func_976(%247, %248, %249) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
    %251 = %250.4;
    %252 = cast(%251, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %253 = shape_of(%243, dtype="int32") /* ty=Tensor[(2), int32] */;
    %254 = cast(%243, dtype="bool") /* ty=Tensor[(?, 1008), bool] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %256 = %218.1;
    %257 = %225.7;
    %258 = %226.0;
    %259 = %227.2;
    %260 = %230.0;
    %261 = %231.0;
    %262 = %232.0;
    %263 = rsqrt(%235) /* ty=Tensor[(1, 1008), float64] */;
    %264 = log10(%236) /* ty=Tensor[(1, 1008), float64] */;
    %265 = logical_and(%254, %255) /* ty=Tensor[(?, 1008), bool] */;
    (%256, %257, meta[relay.Constant][11] /* ty=Tensor[(66), float64] */, %var_1378, %258, %259, %260, %261, %262, %263, %264, %265)
  };
  %266(%var_1528) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1, 3, 8), float32], Tensor[(1568), float64], Tensor[(5, 3, 8), uint8], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 1008), float64], Tensor[(1, 1008), float64], Tensor[(?, 1008), bool]) */
}

def @func_2363() -> (Tensor[(1, 3, 8), float64],) {
  %267 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %268 = %267.0;
  (%268,)
}

def @func_3463() -> Tensor[(1, 3, 8), float32] {
  @func_3461() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_2554() -> (Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) {
  %269 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %271 = reshape(%270, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %272 = @func_2112(%271) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) */;
  %273 = %272.1;
  (%269, %273)
}

def @func_6427(%var_6425: uint32, %var_6426: Tensor[(2, 1, 2), uint32]) -> Tensor[(2, 1, 2), bool] {
  @func_6423(%var_6425, %var_6426) /* ty=Tensor[(2, 1, 2), bool] */
}

def @func_4548() -> (Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) {
  %282 = fn () -> (Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) {
    %274 = @func_2554() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) */;
    %275 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %276 = @func_1235() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) */;
    %277 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %278 = %274.1;
    %279 = %275.0;
    %280 = %276.0;
    %281 = %277.0;
    (%278, %279, %280, %281)
  };
  %282() /* ty=(Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_8593(%var_8528: Tensor[(4, 4), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(1, 8, 2), float32], Tensor[(4, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(7, 14, 16), float32]) {
  %283 = @func_8347() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %284 = cast(%var_8528, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %285 = reshape(%284, newshape=[1, 8, 2]) /* ty=Tensor[(1, 8, 2), float32] */;
  %286 = @func_7081(%285) /* ty=(Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) */;
  %287 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %288 = cast(meta[relay.Constant][13] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %290 = reshape(%288, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %291 = reshape(%289, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %292 = @func_303(%290, %291) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %293 = %283.0;
  %294 = %286.0;
  %295 = %287.0;
  %296 = %292.0;
  %297 = @func_5496() /* ty=Tensor[(7, 14, 16), float32] */;
  (%293, %294, %var_8528, %295, %296, meta[relay.Constant][13] /* ty=Tensor[(1056), float64] */, %297)
}

def @func_4385(%var_4378: Tensor[(1568), float64]) -> (Tensor[(?, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  %298 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %299 = %298.0;
  %300 = @func_2880() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %301 = %300.0;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %303 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%299, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %306 = cast(%var_4378, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %307 = reshape(%306, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %308 = floor_divide(%304, %305) /* ty=Tensor[(?, 3, 8), float64] */;
  %309 = @func_70(%307) /* ty=Tensor[(7, 14, 16), float64] */;
  (%308, %309, %var_4378)
}

def @func_5713() -> Tensor[(1, 3, 8), float32] {
  %310 = fn () -> Tensor[(1, 3, 8), float32] {
    @func_3121() /* ty=Tensor[(1, 3, 8), float32] */
  };
  %310() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_8250() -> (Tensor[(1, 3, 8), float64],) {
  @func_8248() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_9664() -> (Tensor[(1, 3, 8), float32],) {
  %313 = fn () -> (Tensor[(1, 3, 8), float32],) {
    %311 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %312 = %311.0;
    (%312,)
  };
  %313() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_3121() -> Tensor[(1, 3, 8), float32] {
  %314 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %314.0
}

def @func_8200() -> (Tensor[(3, 8, 12), float32],) {
  %317 = fn () -> (Tensor[(3, 8, 12), float32],) {
    %315 = @func_8005() /* ty=(Tensor[(1008), int64], Tensor[(1008), int64], Tensor[(3, 8, 12), float32], Tensor[(1, 1568), float64], Tensor[(13, 3, 8), uint16]) */;
    %316 = %315.2;
    (%316,)
  };
  %317() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_10053(%var_10028: Tensor[(6, 8, 12), float32]) -> (Tensor[(6, 8, 12), float32],) {
  %318 = cast(%var_10028, dtype="float32") /* ty=Tensor[(6, 8, 12), float32] */;
  %319 = acosh(%318) /* ty=Tensor[(6, 8, 12), float32] */;
  (%319,)
}

def @func_7083(%var_7082: Tensor[(1, 8, 2), float32]) -> (Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) {
  %325 = fn (%var_7067: Tensor[(1, 8, 2), float32]) -> (Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) {
    %320 = cast(%var_7067, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
    %321 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %322 = erf(%320) /* ty=Tensor[(1, 8, 2), float32] */;
    %323 = @func_5496() /* ty=Tensor[(7, 14, 16), float32] */;
    %324 = %321.0;
    (%322, %323, %324)
  };
  %325(%var_7082) /* ty=(Tensor[(1, 8, 2), float32], Tensor[(7, 14, 16), float32], Tensor[(1, 3, 8), float32]) */
}

def @func_8681() -> (Tensor[(?, 3, 8), uint16],) {
  @func_8679() /* ty=(Tensor[(?, 3, 8), uint16],) */
}

def @func_6470(%var_6459: Tensor[(8, 132), float64]) -> (Tensor[(4, 9, 14), uint32], Tensor[(1056), float64], Tensor[(8, 132), float64], Tensor[(504, 2), int64], Tensor[(288), float64]) {
  %326 = @func_4933() /* ty=(Tensor[(4, 9, 14), bool],) */;
  %327 = %326.0;
  %328 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 9, 14), bool] */, dtype="uint32") /* ty=Tensor[(4, 9, 14), uint32] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="uint32") /* ty=Tensor[(4, 9, 14), uint32] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %332 = cast(%var_6459, dtype="float64") /* ty=Tensor[(8, 132), float64] */;
  %333 = reshape(%332, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %334 = @func_2334(%333) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) */;
  %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %336 = reshape(%335, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %337 = @func_4580(%336) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(288), float64], Tensor[(504, 2), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) */;
  %338 = right_shift(%330, %331) /* ty=Tensor[(4, 9, 14), uint32] */;
  %339 = %334.1;
  %340 = %337.3;
  (%338, %339, %var_6459, %340, meta[relay.Constant][15] /* ty=Tensor[(288), float64] */)
}

def @func_2996() -> (Tensor[(1, 3, 8), float32],) {
  %342 = fn () -> (Tensor[(1, 3, 8), float32],) {
    %341 = @func_2399() /* ty=Tensor[(1, 3, 8), float32] */;
    (%341,)
  };
  %342() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_5097(%var_5093: Tensor[(1568), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1568), float64], Tensor[(1, 3, 8), float64]) {
  %343 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %344 = cast(%var_5093, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %345 = reshape(%344, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %346 = @func_2498() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %347 = %343.0;
  %348 = @func_70(%345) /* ty=Tensor[(7, 14, 16), float64] */;
  %349 = %346.0;
  (%347, %348, %var_5093, %349)
}

def @func_9718() -> Tensor[(?, 3, 8), uint16] {
  %350 = @func_6605() /* ty=(Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) */;
  %350.3
}

def @func_7574() -> Tensor[(1, 3, 8), float64] {
  %351 = @func_4612() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */;
  %351.0
}

def @func_6169() -> (Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64], Tensor[(504), int64]) {
  @func_6167() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64], Tensor[(504), int64]) */
}

def @func_4006(%var_4004: Tensor[(12, 3, 8), float64]) -> (Tensor[(12, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  @func_4003(%var_4004) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */
}

def @func_4801(%var_4799: Tensor[(2, 528), float64]) -> (Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) {
  @func_4798(%var_4799) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) */
}

def @func_729() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  %352 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %353 = cast(meta[relay.Constant][16] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %354 = reshape(%353, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %355 = %352.0;
  %356 = @func_70(%354) /* ty=Tensor[(7, 14, 16), float64] */;
  (%355, %356, meta[relay.Constant][16] /* ty=Tensor[(1568), float64] */)
}

def @func_4887() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) {
  %357 = @func_1235() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) */;
  %358 = @func_4612() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */;
  %359 = %357.0;
  %360 = %358.0;
  (%359, %360)
}

def @func_6167() -> (Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64], Tensor[(504), int64]) {
  %361 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %362 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %363 = @func_4131() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %364 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  %365 = %361.0;
  %366 = %362.0;
  %367 = %363.2;
  (%364, %365, %366, %367)
}

def @func_794(%var_792: Tensor[(4, 9, 14), int64]) -> Tensor[(4, 9, 14), bool] {
  @func_791(%var_792) /* ty=Tensor[(4, 9, 14), bool] */
}

def @func_5683(%var_5681: Tensor[(7, 14, 16), float32]) -> (Tensor[(7, 14, 16), uint32],) {
  @func_5680(%var_5681) /* ty=(Tensor[(7, 14, 16), uint32],) */
}

def @func_7804() -> (Tensor[(16, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1056), float64]) {
  %368 = @func_6802() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %369 = %368.0;
  %370 = cast(%369, dtype="int16") /* ty=Tensor[(1, 3, 8), int16] */;
  %371 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 3, 8), float64] */, dtype="int16") /* ty=Tensor[(16, 3, 8), int16] */;
  %372 = bitwise_xor(%370, %371) /* ty=Tensor[(16, 3, 8), int16] */;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %374 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(16, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 8), float64] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %377 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %378 = cast(meta[relay.Constant][18] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %379 = reshape(%378, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
  %380 = @func_564(%379) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) */;
  %381 = mod(%375, %376) /* ty=Tensor[(16, 3, 8), float64] */;
  %382 = %377.0;
  %383 = %380.0;
  (%381, %382, %383, meta[relay.Constant][18] /* ty=Tensor[(1056), float64] */)
}

def @func_9525() -> Tensor[(1, 3, 8), float64] {
  @func_9523() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_9906() -> Tensor[(7, 14, 16), float64] {
  @func_9904() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_10026(%var_10025: Tensor[(6, 12, 5), uint64]) -> Tensor[(6, 12, 5), uint64] {
  %386 = fn (%var_10016: Tensor[(6, 12, 5), uint64]) -> Tensor[(6, 12, 5), uint64] {
    %384 = cast(meta[relay.Constant][19] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %385 = cast(%var_10016, dtype="uint64") /* ty=Tensor[(6, 12, 5), uint64] */;
    right_shift(%384, %385) /* ty=Tensor[(6, 12, 5), uint64] */
  };
  %386(%var_10025) /* ty=Tensor[(6, 12, 5), uint64] */
}

def @func_3372() -> (Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) {
  @func_3370() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */
}

def @func_9464(%var_9444: Tensor[(120), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(1008), int64], Tensor[(22, 3), float64], Tensor[(120), float32], Tensor[(1, 1008), int64]) {
  %387 = cast(meta[relay.Constant][20] /* ty=Tensor[(22, 3), float64] */, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %388 = cast(%var_9444, dtype="float32") /* ty=Tensor[(120), float32] */;
  %389 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 1008), int64] */, dtype="int64") /* ty=Tensor[(1, 1008), int64] */;
  %390 = reshape(%387, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
  %391 = reshape(%388, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %392 = reshape(%389, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %393 = @func_976(%390, %391, %392) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
  %394 = @func_4320() /* ty=Tensor[(1, 3, 8), float64] */;
  %395 = %393.4;
  (%394, %395, meta[relay.Constant][20] /* ty=Tensor[(22, 3), float64] */, %var_9444, meta[relay.Constant][21] /* ty=Tensor[(1, 1008), int64] */)
}

def @func_566(%var_565: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) {
  %410 = fn (%var_548: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) {
    %396 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %397 = cast(%var_548, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %398 = cast(%var_548, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %399 = reshape(%397, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
    %400 = reshape(%398, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
    %401 = @func_303(%399, %400) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
    %402 = %401.4;
    %403 = cast(%402, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
    %404 = cast(%var_548, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %405 = reshape(%403, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
    %406 = reshape(%404, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
    %407 = @func_303(%405, %406) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
    %408 = %396.0;
    %409 = %407.4;
    (%408, %402, %var_548, %409)
  };
  %410(%var_565) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) */
}

def @func_6058() -> Tensor[(1, 3, 8), float32] {
  %411 = fn () -> Tensor[(1, 3, 8), float32] {
    @func_3461() /* ty=Tensor[(1, 3, 8), float32] */
  };
  %411() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_3621(%var_3620: Tensor[(12, 1, 14), float64]) -> (Tensor[(12, 1, 14), float64],) {
  %414 = fn (%var_3616: Tensor[(12, 1, 14), float64]) -> (Tensor[(12, 1, 14), float64],) {
    %412 = cast(%var_3616, dtype="float64") /* ty=Tensor[(12, 1, 14), float64] */;
    %413 = log(%412) /* ty=Tensor[(12, 1, 14), float64] */;
    (%413,)
  };
  %414(%var_3620) /* ty=(Tensor[(12, 1, 14), float64],) */
}

def @func_7388(%var_7370: Tensor[(13, 8, 10), uint32]) -> (Tensor[(13, 8, 10), uint32],) {
  %415 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 8, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %416 = shape_of(%var_7370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%var_7370, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %419 = multiply(%417, %418) /* ty=Tensor[(13, 8, 10), uint32] */;
  (%419,)
}

def @func_7713(%var_7704: Tensor[(13, 7, 13), float32], %var_7705: Tensor[(13, 7, 13), float32]) -> Tensor[(13, 7, 13), float32] {
  %420 = cast(%var_7705, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %421 = shape_of(%var_7704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_7704, dtype="float32") /* ty=Tensor[(13, 7, 13), float32] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%422, %423) /* ty=Tensor[(13, 7, 13), float32] */
}

def @func_4829() -> Tensor[(7, 14, 16), uint16] {
  @func_4827() /* ty=Tensor[(7, 14, 16), uint16] */
}

def @func_4951(%var_4949: int8, %var_4950: Tensor[(15, 4, 2), int8]) -> Tensor[(15, 4, 2), int8] {
  @func_4947(%var_4949, %var_4950) /* ty=Tensor[(15, 4, 2), int8] */
}

def @func_976(%var_926: Tensor[(11, 1, 6), float64], %var_950: Tensor[(120), float32], %var_954: Tensor[(1008), int64]) -> (Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) {
  %424 = cast(%var_950, dtype="float32") /* ty=Tensor[(120), float32] */;
  %425 = reshape(%424, newshape=[5, 3, 8]) /* ty=Tensor[(5, 3, 8), float32] */;
  %426 = @func_821(%425) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) */;
  %427 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %428 = cast(%var_954, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %429 = reshape(%427, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
  %430 = reshape(%428, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %431 = @func_888(%429, %430) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
  %432 = cast(%var_926, dtype="float64") /* ty=Tensor[(11, 1, 6), float64] */;
  %433 = sqrt(%432) /* ty=Tensor[(11, 1, 6), float64] */;
  %434 = cast(%var_926, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="bool") /* ty=Tensor[(11, 1, 6), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %439 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 84), int64] */, dtype="int64") /* ty=Tensor[(6, 84), int64] */;
  %440 = reshape(%439, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %441 = %426.0;
  %442 = %431.0;
  %443 = not_equal(%436, %437) /* ty=Tensor[(11, ?, 6), bool] */;
  %444 = %438.0;
  %445 = @func_791(%440) /* ty=Tensor[(4, 9, 14), bool] */;
  (%441, %var_950, %442, meta[relay.Constant][23] /* ty=Tensor[(288), float64] */, %var_954, %443, %444, %445, meta[relay.Constant][24] /* ty=Tensor[(6, 84), int64] */)
}

def @func_5617() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  @func_5615() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */
}

def @func_624(%var_622: Tensor[(14, 8, 9), int64]) -> (Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) {
  @func_621(%var_622) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */
}

def @func_2500() -> (Tensor[(1, 3, 8), float64],) {
  @func_2498() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_3801() -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(120), float32]) {
  %454 = fn () -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(120), float32]) {
    %446 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %447 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
    %448 = cast(meta[relay.Constant][25] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %449 = reshape(%448, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %450 = @func_1527(%449) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1, 3, 8), float32], Tensor[(1568), float64], Tensor[(5, 3, 8), uint8], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 1008), float64], Tensor[(1, 1008), float64], Tensor[(?, 1008), bool]) */;
    %451 = %446.0;
    %452 = %447.0;
    %453 = %450.8;
    (%451, %452, %453, meta[relay.Constant][25] /* ty=Tensor[(120), float32] */)
  };
  %454() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(120), float32]) */
}

def @func_6423(%var_6416: uint32, %var_6417: Tensor[(2, 1, 2), uint32]) -> Tensor[(2, 1, 2), bool] {
  %455 = cast(%var_6416, dtype="bool") /* ty=bool */;
  %456 = cast(%var_6417, dtype="bool") /* ty=Tensor[(2, 1, 2), bool] */;
  greater(%455, %456) /* ty=Tensor[(2, 1, 2), bool] */
}

def @func_4580(%var_4566: Tensor[(288), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(288), float64], Tensor[(504, 2), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) {
  %457 = @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %458 = cast(%var_4566, dtype="float64") /* ty=Tensor[(288), float64] */;
  %459 = cast(meta[relay.Constant][26] /* ty=Tensor[(504, 2), int64] */, dtype="int64") /* ty=Tensor[(504, 2), int64] */;
  %460 = reshape(%458, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
  %461 = reshape(%459, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %462 = @func_888(%460, %461) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
  %463 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %464 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
  %465 = %457.0;
  %466 = %462.1;
  %467 = %463.0;
  %468 = %464.1;
  (%465, %466, %var_4566, meta[relay.Constant][26] /* ty=Tensor[(504, 2), int64] */, %467, %468)
}

def @func_2418() -> (Tensor[(3, 8, 12), float32],) {
  %469 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 8, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %470 = log10(%469) /* ty=Tensor[(3, 8, 12), float32] */;
  (%470,)
}

def @func_6606() -> (Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) {
  %485 = fn () -> (Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) {
    %471 = @func_3087() /* ty=(Tensor[(7, 14, 16), float32], Tensor[(504), int64], Tensor[(288), float64], Tensor[(1008), int64]) */;
    %472 = @func_4222() /* ty=(Tensor[(7, 14, 16), float32],) */;
    %473 = @func_4612() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */;
    %474 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %475 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), int8] */, dtype="int8") /* ty=Tensor[(120), int8] */;
    %477 = reshape(%475, newshape=[]) /* ty=int8 */;
    %478 = reshape(%476, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int8] */;
    %479 = %471.2;
    %480 = %472.0;
    %481 = %473.1;
    %482 = @func_4419() /* ty=Tensor[(?, 3, 8), uint16] */;
    %483 = %474.0;
    %484 = @func_4947(%477, %478) /* ty=Tensor[(15, 4, 2), int8] */;
    (%479, %480, %481, %482, %483, %484, meta[relay.Constant][28] /* ty=int8 */, meta[relay.Constant][29] /* ty=Tensor[(120), int8] */)
  };
  %485() /* ty=(Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) */
}

def @func_1143() -> (Tensor[(1, 3, 8), float32],) {
  %486 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %487 = %486.0;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
  %489 = asinh(%488) /* ty=Tensor[(1, 3, 8), float32] */;
  (%489,)
}

def @func_3721(%var_3696: Tensor[(10, 3, 4), float32]) -> (Tensor[(10, 3, 4), float64], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) {
  %490 = cast(%var_3696, dtype="float32") /* ty=Tensor[(10, 3, 4), float32] */;
  %491 = sinh(%490) /* ty=Tensor[(10, 3, 4), float32] */;
  %492 = cast(%var_3696, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="bool") /* ty=Tensor[(10, 3, 4), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = not_equal(%494, %495) /* ty=Tensor[(10, 3, 4), bool] */;
  %497 = cast(%496, dtype="float64") /* ty=Tensor[(10, 3, 4), float64] */;
  %498 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%491, dtype="float64") /* ty=Tensor[(10, 3, 4), float64] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %502 = reshape(%501, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float64] */;
  %503 = divide(%499, %500) /* ty=Tensor[(10, 3, 4), float64] */;
  %504 = @func_3438(%502) /* ty=Tensor[(9, 3, 15), float64] */;
  (%503, %504, meta[relay.Constant][30] /* ty=Tensor[(405), float64] */)
}

def @func_5898() -> Tensor[(1, 3, 8), float64] {
  %508 = fn () -> Tensor[(1, 3, 8), float64] {
    %505 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %506 = %505.0;
    %507 = cast(%506, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
    sigmoid(%507) /* ty=Tensor[(1, 3, 8), float64] */
  };
  %508() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_5781() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) {
  %517 = fn () -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) {
    %509 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
    %510 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %511 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
    %512 = %511.0;
    %513 = cast(%512, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
    %514 = %509.0;
    %515 = %510.0;
    %516 = log(%513) /* ty=Tensor[(1, 3, 8), float64] */;
    (%514, %515, %516)
  };
  %517() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */
}

def @func_1276(%var_1274: Tensor[(120), float32], %var_1275: Tensor[(1008), int64]) -> (Tensor[(1, 3, 8), float64], Tensor[(6, 84), float64], Tensor[(5, 3, 8), uint8], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1008), int64]) {
  @func_1272(%var_1274, %var_1275) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(6, 84), float64], Tensor[(5, 3, 8), uint8], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1008), int64]) */
}

def @func_3423() -> (Tensor[(3, 8, 12), float32],) {
  %522 = fn () -> (Tensor[(3, 8, 12), float32],) {
    %518 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %519 = %518.0;
    %520 = cast(%519, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
    %521 = exp(%520) /* ty=Tensor[(3, 8, 12), float32] */;
    (%521,)
  };
  %522() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_8714() -> (Tensor[(?, 3, 8), bool], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), bool]) {
  %527 = fn () -> (Tensor[(?, 3, 8), bool], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), bool]) {
    %523 = @func_6951() /* ty=(Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), bool], Tensor[(1568), float64]) */;
    %524 = @func_7118() /* ty=Tensor[(?, 3, 8), bool] */;
    %525 = @func_6057() /* ty=Tensor[(1, 3, 8), float32] */;
    %526 = %523.1;
    (%524, %525, %526)
  };
  %527() /* ty=(Tensor[(?, 3, 8), bool], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), bool]) */
}

def @func_7366(%var_7365: Tensor[(1056), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) {
  %536 = fn (%var_7349: Tensor[(1056), float64]) -> (Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) {
    %528 = @func_3422() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %529 = @func_5780() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */;
    %530 = cast(%var_7349, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %531 = reshape(%530, newshape=[8, 132]) /* ty=Tensor[(8, 132), float64] */;
    %532 = @func_6470(%531) /* ty=(Tensor[(4, 9, 14), uint32], Tensor[(1056), float64], Tensor[(8, 132), float64], Tensor[(504, 2), int64], Tensor[(288), float64]) */;
    %533 = %528.0;
    %534 = %529.2;
    %535 = %532.2;
    (%533, %534, %535, %var_7349)
  };
  %536(%var_7365) /* ty=(Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(8, 132), float64], Tensor[(1056), float64]) */
}

def @func_1236() -> (Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) {
  %547 = fn () -> (Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) {
    %537 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
    %538 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 84), int64] */, dtype="int64") /* ty=Tensor[(6, 84), int64] */;
    %539 = reshape(%538, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
    %540 = @func_791(%539) /* ty=Tensor[(4, 9, 14), bool] */;
    %541 = cast(%540, dtype="float32") /* ty=Tensor[(4, 9, 14), float32] */;
    %542 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(6, 84), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %543 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 84), int64] */, dtype="float32") /* ty=Tensor[(6, 84), float32] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %545 = %537.0;
    %546 = power(%543, %544) /* ty=Tensor[(6, 84), float32] */;
    (%545, %546)
  };
  %547() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) */
}

def @func_4419() -> Tensor[(?, 3, 8), uint16] {
  %548 = @func_2707() /* ty=(Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) */;
  %548.5
}

def @func_7224(%var_7223: Tensor[(1056), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1056), float64]) {
  %554 = fn (%var_7205: Tensor[(1056), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1056), float64]) {
    %549 = cast(%var_7205, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %550 = reshape(%549, newshape=[2, 528]) /* ty=Tensor[(2, 528), float64] */;
    %551 = @func_4798(%550) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) */;
    %552 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
    %553 = %551.0;
    (%552, %553, %var_7205)
  };
  %554(%var_7223) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1056), float64]) */
}

def @func_4827() -> Tensor[(7, 14, 16), uint16] {
  %555 = @func_4222() /* ty=(Tensor[(7, 14, 16), float32],) */;
  %556 = %555.0;
  %557 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 14, 16), float32] */, dtype="uint16") /* ty=Tensor[(7, 14, 16), uint16] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="uint16") /* ty=Tensor[(7, 14, 16), uint16] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%559, %560) /* ty=Tensor[(7, 14, 16), uint16] */
}

def @func_6763() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  @func_6761() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */
}

def @func_7120() -> Tensor[(?, 3, 8), bool] {
  @func_7118() /* ty=Tensor[(?, 3, 8), bool] */
}

def @func_2224() -> Tensor[(7, 14, 16), float64] {
  %562 = fn () -> Tensor[(7, 14, 16), float64] {
    %561 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
    %561.1
  };
  %562() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_2556() -> (Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) {
  @func_2554() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) */
}

def @func_4889() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) {
  @func_4887() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) */
}

def @func_6998() -> (Tensor[(7, 14, 16), float32],) {
  %567 = fn () -> (Tensor[(7, 14, 16), float32],) {
    %563 = @func_3370() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
    %564 = %563.0;
    %565 = cast(%564, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
    %566 = exp(%565) /* ty=Tensor[(7, 14, 16), float32] */;
    (%566,)
  };
  %567() /* ty=(Tensor[(7, 14, 16), float32],) */
}

def @func_9245() -> (Tensor[(7, 14, 16), float64],) {
  %570 = fn () -> (Tensor[(7, 14, 16), float64],) {
    %568 = @func_3280() /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */;
    %569 = %568.2;
    (%569,)
  };
  %570() /* ty=(Tensor[(7, 14, 16), float64],) */
}

def @func_9631() -> (Tensor[(5, 4, 16), float32],) {
  %571 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 16), float32] */;
  %572 = tan(%571) /* ty=Tensor[(5, 4, 16), float32] */;
  (%572,)
}

def @func_8859(%var_8843: Tensor[(13, 5, 15), uint8]) -> (Tensor[(13, 5, 15), uint8], Tensor[(1, 3, 8), float64]) {
  %573 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 5, 15), uint8] */, dtype="uint8") /* ty=Tensor[(13, 5, 15), uint8] */;
  %574 = shape_of(%var_8843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_8843, dtype="uint8") /* ty=Tensor[(13, 5, 15), uint8] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %577 = left_shift(%575, %576) /* ty=Tensor[(13, 5, 15), uint8] */;
  %578 = @func_8194() /* ty=Tensor[(1, 3, 8), float64] */;
  (%577, %578)
}

def @func_4684(%var_4682: Tensor[(1056), float64]) -> (Tensor[(?, 3, 8), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), int32], Tensor[(12, 1, 14), float64], Tensor[(3, 56), float64]) {
  @func_4681(%var_4682) /* ty=(Tensor[(?, 3, 8), bool], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), int32], Tensor[(12, 1, 14), float64], Tensor[(3, 56), float64]) */
}

def @func_9156() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) {
  %579 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %580 = @func_5615() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */;
  %581 = %579.0;
  %582 = %580.1;
  (%581, %582)
}

def @func_303(%var_241: Tensor[(8, 12, 11), float64], %var_290: Tensor[(8, 12, 11), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) {
  %583 = cast(meta[relay.Constant][35] /* ty=Tensor[(392, 4), float64] */, dtype="float64") /* ty=Tensor[(392, 4), float64] */;
  %584 = reshape(%583, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %585 = cast(meta[relay.Constant][35] /* ty=Tensor[(392, 4), float64] */, dtype="float64") /* ty=Tensor[(392, 4), float64] */;
  %586 = reshape(%585, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %587 = cast(%var_241, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %588 = atan(%587) /* ty=Tensor[(8, 12, 11), float64] */;
  %589 = cast(%var_290, dtype="int16") /* ty=Tensor[(8, 12, 11), int16] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="int16") /* ty=Tensor[(8, 12, 11), int16] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %593 = cast(%var_290, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %594 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%588, dtype="float64") /* ty=Tensor[(8, 12, 11), float64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %597 = @func_70(%584) /* ty=Tensor[(7, 14, 16), float64] */;
  %598 = @func_70(%586) /* ty=Tensor[(7, 14, 16), float64] */;
  %599 = bitwise_or(%591, %592) /* ty=Tensor[(8, 12, 11), int16] */;
  %600 = power(%595, %596) /* ty=Tensor[(8, 12, 11), float64] */;
  (%597, meta[relay.Constant][35] /* ty=Tensor[(392, 4), float64] */, %598, %599, %600)
}

def @func_791(%var_786: Tensor[(4, 9, 14), int64]) -> Tensor[(4, 9, 14), bool] {
  %601 = cast(5 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %602 = cast(%var_786, dtype="bool") /* ty=Tensor[(4, 9, 14), bool] */;
  less(%601, %602) /* ty=Tensor[(4, 9, 14), bool] */
}

def @func_307(%var_305: Tensor[(8, 12, 11), float64], %var_306: Tensor[(8, 12, 11), float64]) -> (Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) {
  @func_303(%var_305, %var_306) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */
}

def @func_4223() -> (Tensor[(7, 14, 16), float32],) {
  %607 = fn () -> (Tensor[(7, 14, 16), float32],) {
    %603 = @func_3280() /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */;
    %604 = %603.3;
    %605 = cast(%604, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
    %606 = sqrt(%605) /* ty=Tensor[(7, 14, 16), float32] */;
    (%606,)
  };
  %607() /* ty=(Tensor[(7, 14, 16), float32],) */
}

def @func_8596(%var_8594: Tensor[(4, 4), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(1, 8, 2), float32], Tensor[(4, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(7, 14, 16), float32]) {
  @func_8593(%var_8594) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 8, 2), float32], Tensor[(4, 4), float32], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(7, 14, 16), float32]) */
}

def @func_6832() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  @func_6830() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */
}

def @func_5496() -> Tensor[(7, 14, 16), float32] {
  %608 = @func_4504() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
  %611 = cos(%610) /* ty=Tensor[(7, 14, 16), float64] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %613 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%609, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%614, %615) /* ty=Tensor[(7, 14, 16), float32] */
}

def @func_8248() -> (Tensor[(1, 3, 8), float64],) {
  %616 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %617 = %616.0;
  (%617,)
}

def @func_4321() -> Tensor[(1, 3, 8), float64] {
  %619 = fn () -> Tensor[(1, 3, 8), float64] {
    %618 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %618.0
  };
  %619() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_8832() -> (Tensor[(?, 3, 8), uint16],) {
  %620 = @func_8679() /* ty=(Tensor[(?, 3, 8), uint16],) */;
  %621 = %620.0;
  (%621,)
}

def @func_9222() -> (Tensor[(1, 3, 8), float64],) {
  @func_9220() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_3370() -> (Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) {
  %622 = @func_3280() /* ty=(Tensor[(3, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */;
  %623 = cast(meta[relay.Constant][36] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %624 = reshape(%623, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
  %625 = %622.3;
  %626 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %627 = @func_791(%624) /* ty=Tensor[(4, 9, 14), bool] */;
  (%625, %626, %627, meta[relay.Constant][36] /* ty=Tensor[(504), int64] */)
}

def @func_891(%var_889: Tensor[(12, 3, 8), float64], %var_890: Tensor[(1008), int64]) -> (Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) {
  %644 = fn (%var_846: Tensor[(12, 3, 8), float64], %var_884: Tensor[(1008), int64]) -> (Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) {
    %628 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %629 = %628.0;
    %630 = cast(%629, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
    %631 = cast(%var_846, dtype="bool") /* ty=Tensor[(12, 3, 8), bool] */;
    %632 = cast(meta[relay.Constant][37] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
    %633 = reshape(%632, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
    %634 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %635 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %636 = cast(%var_884, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %637 = reshape(%636, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
    %638 = @func_621(%637) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
    %639 = equal(%630, %631) /* ty=Tensor[(12, 3, 8), bool] */;
    %640 = @func_791(%633) /* ty=Tensor[(4, 9, 14), bool] */;
    %641 = %634.0;
    %642 = %635.0;
    %643 = %638.1;
    (%639, %640, meta[relay.Constant][37] /* ty=Tensor[(504), int64] */, %641, %642, %643, %var_884)
  };
  %644(%var_889, %var_890) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */
}

def @func_9400() -> Tensor[(7, 14, 16), float64] {
  %645 = @func_7615() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %645.0
}

def @func_621(%var_603: Tensor[(14, 8, 9), int64]) -> (Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) {
  %646 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 8, 9), int64] */, dtype="int64") /* ty=Tensor[(14, 8, 9), int64] */;
  %647 = shape_of(%var_603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_603, dtype="int64") /* ty=Tensor[(14, 8, 9), int64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %650 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %651 = multiply(%648, %649) /* ty=Tensor[(14, 8, 9), int64] */;
  %652 = %650.0;
  (%651, %652)
}

def @func_6804() -> (Tensor[(1, 3, 8), float64],) {
  @func_6802() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_10056(%var_10054: Tensor[(6, 8, 12), float32]) -> (Tensor[(6, 8, 12), float32],) {
  @func_10053(%var_10054) /* ty=(Tensor[(6, 8, 12), float32],) */
}

def @func_5615() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %653 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
  %654 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  (%653, %654)
}

def @func_3544() -> Tensor[(1, 3, 8), float32] {
  %658 = fn () -> Tensor[(1, 3, 8), float32] {
    %655 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %656 = %655.0;
    %657 = cast(%656, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
    atan(%657) /* ty=Tensor[(1, 3, 8), float32] */
  };
  %658() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_5306(%var_5304: Tensor[(1568), float64], %var_5305: Tensor[(252, 4), int64]) -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(1568), float64], Tensor[(1, 3, 8), float64], Tensor[(252, 4), int64], Tensor[(3, 8, 12), float32]) {
  @func_5302(%var_5304, %var_5305) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(1568), float64], Tensor[(1, 3, 8), float64], Tensor[(252, 4), int64], Tensor[(3, 8, 12), float32]) */
}

def @func_731() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */
}

def @func_4798(%var_4761: Tensor[(2, 528), float64]) -> (Tensor[(1, 3, 8), float32], Tensor[(8, 12, 11), int16], Tensor[(2, 528), float64], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64]) {
  %659 = cast(%var_4761, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %660 = cast(%var_4761, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %661 = reshape(%659, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %662 = reshape(%660, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), float64] */;
  %663 = @func_303(%661, %662) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(392, 4), float64], Tensor[(7, 14, 16), float64], Tensor[(8, 12, 11), int16], Tensor[(8, 12, 11), float64]) */;
  %664 = cast(%var_4761, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %665 = @func_2880() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %666 = @func_2399() /* ty=Tensor[(1, 3, 8), float32] */;
  %667 = %663.3;
  %668 = log10(%664) /* ty=Tensor[(2, 528), float64] */;
  %669 = %665.0;
  %670 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
  (%666, %667, %668, %669, %670)
}

def @func_9355() -> (Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) {
  @func_9353() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64]) */
}

def @func_981(%var_978: Tensor[(11, 1, 6), float64], %var_979: Tensor[(120), float32], %var_980: Tensor[(1008), int64]) -> (Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) {
  @func_976(%var_978, %var_979, %var_980) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */
}

def @func_2365() -> (Tensor[(1, 3, 8), float64],) {
  @func_2363() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_8349() -> (Tensor[(1, 3, 8), float64],) {
  @func_8347() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_9094() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %680 = fn () -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
    %671 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %672 = @func_8713() /* ty=(Tensor[(?, 3, 8), bool], Tensor[(1, 3, 8), float32], Tensor[(7, 14, 16), bool]) */;
    %673 = @func_8199() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %674 = @func_6605() /* ty=(Tensor[(288), float64], Tensor[(7, 14, 16), float32], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(1, 3, 8), float32], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) */;
    %675 = %671.0;
    %676 = %672.2;
    %677 = %673.0;
    %678 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
    %679 = %674.4;
    (%675, %676, %677, %678, %679)
  };
  %680() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(3, 8, 12), float32], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */
}

def @func_7844() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) {
  %685 = fn () -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) {
    %681 = @func_6167() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64], Tensor[(504), int64]) */;
    %682 = @func_4887() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) */;
    %683 = %681.2;
    %684 = %682.0;
    (%683, %684)
  };
  %685() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64]) */
}

def @func_8195() -> Tensor[(1, 3, 8), float64] {
  %686 = fn () -> Tensor[(1, 3, 8), float64] {
    @func_4320() /* ty=Tensor[(1, 3, 8), float64] */
  };
  %686() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_2399() -> Tensor[(1, 3, 8), float32] {
  %687 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %687.0
}

def @func_9904() -> Tensor[(7, 14, 16), float64] {
  @func_6623() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_4612() -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  %688 = @func_1785() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */;
  %689 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(3, 8, 12), float32] */;
  %692 = %688.0;
  %693 = sin(%691) /* ty=Tensor[(3, 8, 12), float32] */;
  (%692, %693)
}

def @func_6282() -> (Tensor[(1, 3, 8), float64],) {
  @func_6280() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_9220() -> (Tensor[(1, 3, 8), float64],) {
  %694 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %695 = %694.0;
  (%695,)
}

def @func_1573() -> Tensor[(7, 14, 16), float64] {
  %696 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %696.0
}

def @func_7687(%var_7673: uint32, %var_7674: Tensor[(16, 11, 1), uint32]) -> (Tensor[(16, 11, 1), uint32], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) {
  %697 = cast(%var_7673, dtype="uint32") /* ty=uint32 */;
  %698 = cast(%var_7674, dtype="uint32") /* ty=Tensor[(16, 11, 1), uint32] */;
  %699 = cast(meta[relay.Constant][39] /* ty=Tensor[(405), float64] */, dtype="float64") /* ty=Tensor[(405), float64] */;
  %700 = reshape(%699, newshape=[9, 3, 15]) /* ty=Tensor[(9, 3, 15), float64] */;
  %701 = bitwise_xor(%697, %698) /* ty=Tensor[(16, 11, 1), uint32] */;
  %702 = @func_3438(%700) /* ty=Tensor[(9, 3, 15), float64] */;
  (%701, %702, meta[relay.Constant][39] /* ty=Tensor[(405), float64] */)
}

def @func_9282() -> (Tensor[(1, 3, 8), float32],) {
  @func_9280() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_5456(%var_5453: Tensor[(504), int64], %var_5454: int8, %var_5455: Tensor[(120), int8]) -> (Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) {
  %716 = fn (%var_5414: Tensor[(504), int64], %var_5449: int8, %var_5450: Tensor[(120), int8]) -> (Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) {
    %703 = cast(%var_5414, dtype="int64") /* ty=Tensor[(504), int64] */;
    %704 = reshape(%703, newshape=[4, 9, 14]) /* ty=Tensor[(4, 9, 14), int64] */;
    %705 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %706 = @func_2707() /* ty=(Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) */;
    %707 = cast(%var_5449, dtype="int8") /* ty=int8 */;
    %708 = cast(%var_5450, dtype="int8") /* ty=Tensor[(120), int8] */;
    %709 = reshape(%707, newshape=[]) /* ty=int8 */;
    %710 = reshape(%708, newshape=[15, 4, 2]) /* ty=Tensor[(15, 4, 2), int8] */;
    %711 = @func_3121() /* ty=Tensor[(1, 3, 8), float32] */;
    %712 = @func_791(%704) /* ty=Tensor[(4, 9, 14), bool] */;
    %713 = %705.0;
    %714 = %706.5;
    %715 = @func_4947(%709, %710) /* ty=Tensor[(15, 4, 2), int8] */;
    (%711, %712, %var_5414, %713, %714, %715, %var_5449, %var_5450)
  };
  %716(%var_5453, %var_5454, %var_5455) /* ty=(Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(3, 8, 12), float32], Tensor[(?, 3, 8), uint16], Tensor[(15, 4, 2), int8], int8, Tensor[(120), int8]) */
}

def @func_5498() -> Tensor[(7, 14, 16), float32] {
  @func_5496() /* ty=Tensor[(7, 14, 16), float32] */
}

def @func_2114(%var_2113: Tensor[(7, 14, 16), float64]) -> (Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) {
  %727 = fn (%var_2106: Tensor[(7, 14, 16), float64]) -> (Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) {
    %717 = cast(meta[relay.Constant][40] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %718 = reshape(%717, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
    %719 = @func_621(%718) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
    %720 = @func_1573() /* ty=Tensor[(7, 14, 16), float64] */;
    %721 = cast(%var_2106, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
    %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%720, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %725 = %719.0;
    %726 = not_equal(%723, %724) /* ty=Tensor[(7, 14, 16), bool] */;
    (%725, meta[relay.Constant][40] /* ty=Tensor[(1008), int64] */, %726)
  };
  %727(%var_2113) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) */
}

def @func_2760() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) {
  %728 = @func_1785() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */;
  %729 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %730 = %728.0;
  %731 = %729.0;
  (%730, %731)
}

def @func_1786() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) {
  %736 = fn () -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) {
    %732 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %733 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %734 = %732.0;
    %735 = %733.0;
    (%734, %735)
  };
  %736() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */
}

def @func_7806() -> (Tensor[(16, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1056), float64]) {
  @func_7804() /* ty=(Tensor[(16, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1056), float64]) */
}

def @func_2498() -> (Tensor[(1, 3, 8), float64],) {
  %737 = @func_2457() /* ty=Tensor[(1, 3, 8), float64] */;
  (%737,)
}

def @func_1538() -> (Tensor[(1, 3, 8), float64],) {
  %740 = fn () -> (Tensor[(1, 3, 8), float64],) {
    %738 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %739 = %738.0;
    (%739,)
  };
  %740() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_72(%var_71: Tensor[(7, 14, 16), float64]) -> Tensor[(7, 14, 16), float64] {
  %742 = fn (%var_58: Tensor[(7, 14, 16), float64]) -> Tensor[(7, 14, 16), float64] {
    %741 = cast(%var_58, dtype="float64") /* ty=Tensor[(7, 14, 16), float64] */;
    rsqrt(%741) /* ty=Tensor[(7, 14, 16), float64] */
  };
  %742(%var_71) /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_9779() -> Tensor[(1, 3, 8), float32] {
  @func_9777() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_3724(%var_3722: Tensor[(10, 3, 4), float32]) -> (Tensor[(10, 3, 4), float64], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) {
  @func_3721(%var_3722) /* ty=(Tensor[(10, 3, 4), float64], Tensor[(9, 3, 15), float64], Tensor[(405), float64]) */
}

def @func_9115(%var_9113: uint8, %var_9114: Tensor[(6, 1, 14), uint8]) -> (Tensor[(6, 1, 14), uint8],) {
  %746 = fn (%var_9104: uint8, %var_9105: Tensor[(6, 1, 14), uint8]) -> (Tensor[(6, 1, 14), uint8],) {
    %743 = cast(%var_9104, dtype="uint8") /* ty=uint8 */;
    %744 = cast(%var_9105, dtype="uint8") /* ty=Tensor[(6, 1, 14), uint8] */;
    %745 = logical_xor(%743, %744) /* ty=Tensor[(6, 1, 14), uint8] */;
    (%745,)
  };
  %746(%var_9113, %var_9114) /* ty=(Tensor[(6, 1, 14), uint8],) */
}

def @func_9280() -> (Tensor[(1, 3, 8), float32],) {
  %747 = @func_2880() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %748 = %747.0;
  (%748,)
}

def @func_4388(%var_4386: Tensor[(1568), float64]) -> (Tensor[(?, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  @func_4385(%var_4386) /* ty=(Tensor[(?, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */
}

def @func_3752() -> (Tensor[(3, 8, 12), float32],) {
  %749 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %750 = %749.0;
  (%750,)
}

def @func_5302(%var_5289: Tensor[(1568), float64], %var_5298: Tensor[(252, 4), int64]) -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(1568), float64], Tensor[(1, 3, 8), float64], Tensor[(252, 4), int64], Tensor[(3, 8, 12), float32]) {
  %751 = @func_4887() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float64]) */;
  %752 = cast(%var_5289, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %753 = reshape(%752, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %754 = @func_2112(%753) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1008), int64], Tensor[(7, 14, 16), bool]) */;
  %755 = cast(%var_5298, dtype="int64") /* ty=Tensor[(252, 4), int64] */;
  %756 = reshape(%755, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
  %757 = @func_621(%756) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
  %758 = @func_3422() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %759 = %751.1;
  %760 = %754.2;
  %761 = %757.1;
  %762 = %758.0;
  (%759, %760, %var_5289, %761, %var_5298, %762)
}

def @func_9547() -> (Tensor[(1008), int64],) {
  %765 = fn () -> (Tensor[(1008), int64],) {
    %763 = @func_4547() /* ty=(Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) */;
    %764 = %763.0;
    (%764,)
  };
  %765() /* ty=(Tensor[(1008), int64],) */
}

def @func_823(%var_822: Tensor[(5, 3, 8), float32]) -> (Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) {
  %774 = fn (%var_805: Tensor[(5, 3, 8), float32]) -> (Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) {
    %766 = @func_773() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %767 = %766.0;
    %768 = cast(%767, dtype="uint8") /* ty=Tensor[(1, 3, 8), uint8] */;
    %769 = cast(%var_805, dtype="uint8") /* ty=Tensor[(5, 3, 8), uint8] */;
    %770 = cast(%767, dtype="int64") /* ty=Tensor[(1, 3, 8), int64] */;
    %771 = cast(%var_805, dtype="int64") /* ty=Tensor[(5, 3, 8), int64] */;
    %772 = subtract(%768, %769) /* ty=Tensor[(5, 3, 8), uint8] */;
    %773 = bitwise_or(%770, %771) /* ty=Tensor[(5, 3, 8), int64] */;
    (%772, %773)
  };
  %774(%var_822) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(5, 3, 8), int64]) */
}

def @func_5216() -> Tensor[(1, 3, 8), float32] {
  %776 = fn () -> Tensor[(1, 3, 8), float32] {
    %775 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %775.0
  };
  %776() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_8006() -> (Tensor[(1008), int64], Tensor[(1008), int64], Tensor[(3, 8, 12), float32], Tensor[(1, 1568), float64], Tensor[(13, 3, 8), uint16]) {
  %792 = fn () -> (Tensor[(1008), int64], Tensor[(1008), int64], Tensor[(3, 8, 12), float32], Tensor[(1, 1568), float64], Tensor[(13, 3, 8), uint16]) {
    %777 = cast(meta[relay.Constant][41] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %778 = reshape(%777, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %779 = @func_4479(%778) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(88, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(1008), int64], Tensor[(?, 3, 8), float32]) */;
    %780 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1568), float64] */, dtype="float64") /* ty=Tensor[(1, 1568), float64] */;
    %781 = %779.4;
    %782 = cast(%781, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %783 = reshape(%780, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %784 = reshape(%782, newshape=[252, 4]) /* ty=Tensor[(252, 4), int64] */;
    %785 = @func_5302(%783, %784) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), bool], Tensor[(1568), float64], Tensor[(1, 3, 8), float64], Tensor[(252, 4), int64], Tensor[(3, 8, 12), float32]) */;
    %786 = @func_7731() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %787 = %786.0;
    %788 = cast(%787, dtype="uint16") /* ty=Tensor[(1, 3, 8), uint16] */;
    %789 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 3, 8), float32] */, dtype="uint16") /* ty=Tensor[(13, 3, 8), uint16] */;
    %790 = %785.5;
    %791 = right_shift(%788, %789) /* ty=Tensor[(13, 3, 8), uint16] */;
    (%781, meta[relay.Constant][41] /* ty=Tensor[(1008), int64] */, %790, meta[relay.Constant][42] /* ty=Tensor[(1, 1568), float64] */, %791)
  };
  %792() /* ty=(Tensor[(1008), int64], Tensor[(1008), int64], Tensor[(3, 8, 12), float32], Tensor[(1, 1568), float64], Tensor[(13, 3, 8), uint16]) */
}

def @func_9850(%var_9848: int64, %var_9849: Tensor[(9, 9, 3), int64]) -> Tensor[(9, 9, 3), bool] {
  %795 = fn (%var_9824: int64, %var_9825: Tensor[(9, 9, 3), int64]) -> Tensor[(9, 9, 3), bool] {
    %793 = cast(%var_9824, dtype="bool") /* ty=bool */;
    %794 = cast(%var_9825, dtype="bool") /* ty=Tensor[(9, 9, 3), bool] */;
    less_equal(%793, %794) /* ty=Tensor[(9, 9, 3), bool] */
  };
  %795(%var_9848, %var_9849) /* ty=Tensor[(9, 9, 3), bool] */
}

def @func_6206() -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  %799 = fn () -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
    %796 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
    %797 = %796.0;
    %798 = @func_6130() /* ty=Tensor[(3, 8, 12), float32] */;
    (%797, %798)
  };
  %799() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_1600(%var_1599: Tensor[(5, 12, 7), float32]) -> (Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) {
  %806 = fn (%var_1576: Tensor[(5, 12, 7), float32]) -> (Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) {
    %800 = cast(%var_1576, dtype="float32") /* ty=Tensor[(5, 12, 7), float32] */;
    %801 = cast(%var_1576, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
    %802 = cast(%var_1576, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
    %803 = cos(%800) /* ty=Tensor[(5, 12, 7), float32] */;
    %804 = sinh(%801) /* ty=Tensor[(5, 12, 7), float64] */;
    %805 = cosh(%802) /* ty=Tensor[(5, 12, 7), float64] */;
    (%803, %804, %805)
  };
  %806(%var_1599) /* ty=(Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) */
}

def @func_6623() -> Tensor[(7, 14, 16), float64] {
  %807 = @func_3370() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %807.0
}

def @func_2990() -> (Tensor[(3, 8, 12), float32],) {
  %810 = fn () -> (Tensor[(3, 8, 12), float32],) {
    %808 = @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %809 = %808.0;
    (%809,)
  };
  %810() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_693() -> (Tensor[(1, 3, 8), float64],) {
  %811 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %812 = %811.0;
  (%812,)
}

def @func_6510(%var_6509: Tensor[(7, 14, 16), float64]) -> Tensor[(7, 14, 16), bool] {
  %819 = fn (%var_6491: Tensor[(7, 14, 16), float64]) -> Tensor[(7, 14, 16), bool] {
    %813 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
    %814 = %813.0;
    %815 = cast(%var_6491, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
    %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
    %817 = cast(%814, dtype="bool") /* ty=Tensor[(7, 14, 16), bool] */;
    %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%817, %818) /* ty=Tensor[(7, 14, 16), bool] */
  };
  %819(%var_6509) /* ty=Tensor[(7, 14, 16), bool] */
}

def @func_8862(%var_8860: Tensor[(13, 5, 15), uint8]) -> (Tensor[(13, 5, 15), uint8], Tensor[(1, 3, 8), float64]) {
  @func_8859(%var_8860) /* ty=(Tensor[(13, 5, 15), uint8], Tensor[(1, 3, 8), float64]) */
}

def @func_9467(%var_9465: Tensor[(120), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(1008), int64], Tensor[(22, 3), float64], Tensor[(120), float32], Tensor[(1, 1008), int64]) {
  @func_9464(%var_9465) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1008), int64], Tensor[(22, 3), float64], Tensor[(120), float32], Tensor[(1, 1008), int64]) */
}

def @func_7061() -> (Tensor[(1, 3, 8), float64],) {
  @func_7059() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_7615() -> (Tensor[(7, 14, 16), float64],) {
  %820 = @func_7018() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool]) */;
  %821 = %820.0;
  (%821,)
}

def @func_4505() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) {
  %828 = fn () -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) {
    %822 = @func_2554() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1008), int64]) */;
    %823 = @func_2995() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %824 = @func_729() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) */;
    %825 = %822.0;
    %826 = %823.0;
    %827 = %824.0;
    (%825, %826, %827)
  };
  %828() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float64]) */
}

def @main(%var_10117: Tensor[(3, 11, 15), float32]) -> (Tensor[(3, 11, 15), float32], Tensor[(3, 11, 15), float32]) {
  %829 = cast(%var_10117, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %830 = cast(%var_10117, dtype="float32") /* ty=Tensor[(3, 11, 15), float32] */;
  %831 = cosh(%829) /* ty=Tensor[(3, 11, 15), float32] */;
  %832 = asin(%830) /* ty=Tensor[(3, 11, 15), float32] */;
  (%831, %832)
}

def @func_7018() -> (Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool]) {
  %833 = @func_4547() /* ty=(Tensor[(1008), int64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(3, 8, 12), float32]) */;
  %834 = %833.2;
  %835 = @func_6291() /* ty=Tensor[(4, 9, 14), bool] */;
  (%834, %835)
}

def @func_7391(%var_7389: Tensor[(13, 8, 10), uint32]) -> (Tensor[(13, 8, 10), uint32],) {
  @func_7388(%var_7389) /* ty=(Tensor[(13, 8, 10), uint32],) */
}

def @func_6377(%var_6375: Tensor[(3, 8, 12), float32]) -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  @func_6374(%var_6375) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_2420() -> (Tensor[(3, 8, 12), float32],) {
  @func_2418() /* ty=(Tensor[(3, 8, 12), float32],) */
}

def @func_3189(%var_3161: Tensor[(16, 3, 8), float32]) -> (Tensor[(16, 3, 8), int64], Tensor[(2, 10, 2), int32], Tensor[(40), float64]) {
  %836 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
  %837 = %836.0;
  %838 = cast(%837, dtype="int64") /* ty=Tensor[(1, 3, 8), int64] */;
  %839 = cast(%var_3161, dtype="int64") /* ty=Tensor[(16, 3, 8), int64] */;
  %840 = cast(meta[relay.Constant][44] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %841 = reshape(%840, newshape=[2, 10, 2]) /* ty=Tensor[(2, 10, 2), float64] */;
  %842 = @func_1694(%841) /* ty=(Tensor[(2, 10, 2), int32], Tensor[(2, 10, 2), float32]) */;
  %843 = minimum(%838, %839) /* ty=Tensor[(16, 3, 8), int64] */;
  %844 = %842.0;
  (%843, %844, meta[relay.Constant][44] /* ty=Tensor[(40), float64] */)
}

def @func_7598(%var_7597: Tensor[(12, 14, 3), float32]) -> Tensor[(12, 14, 3), float32] {
  %846 = fn (%var_7590: Tensor[(12, 14, 3), float32]) -> Tensor[(12, 14, 3), float32] {
    %845 = cast(%var_7590, dtype="float32") /* ty=Tensor[(12, 14, 3), float32] */;
    sinh(%845) /* ty=Tensor[(12, 14, 3), float32] */
  };
  %846(%var_7597) /* ty=Tensor[(12, 14, 3), float32] */
}

def @func_9158() -> (Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) {
  @func_9156() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */
}

def @func_1575() -> Tensor[(7, 14, 16), float64] {
  @func_1573() /* ty=Tensor[(7, 14, 16), float64] */
}

def @func_8347() -> (Tensor[(1, 3, 8), float64],) {
  %847 = @func_8248() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %848 = %847.0;
  (%848,)
}

def @func_4934() -> (Tensor[(4, 9, 14), bool],) {
  %851 = fn () -> (Tensor[(4, 9, 14), bool],) {
    %849 = @func_4131() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
    %850 = %849.1;
    (%850,)
  };
  %851() /* ty=(Tensor[(4, 9, 14), bool],) */
}

def @func_4003(%var_3970: Tensor[(12, 3, 8), float64]) -> (Tensor[(12, 3, 8), bool], Tensor[(3, 8, 12), float32], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1568), float64]) {
  %852 = @func_2760() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64]) */;
  %853 = %852.1;
  %854 = cast(%853, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %855 = cast(%var_3970, dtype="bool") /* ty=Tensor[(12, 3, 8), bool] */;
  %856 = @func_2989() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %857 = cast(%853, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
  %858 = cast(meta[relay.Constant][45] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %859 = reshape(%858, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), float64] */;
  %860 = logical_or(%854, %855) /* ty=Tensor[(12, 3, 8), bool] */;
  %861 = %856.0;
  %862 = @func_2457() /* ty=Tensor[(1, 3, 8), float64] */;
  %863 = cos(%857) /* ty=Tensor[(1, 3, 8), float64] */;
  %864 = @func_70(%859) /* ty=Tensor[(7, 14, 16), float64] */;
  (%860, %861, %862, %863, %864, meta[relay.Constant][45] /* ty=Tensor[(1568), float64] */)
}

def @func_1145() -> (Tensor[(1, 3, 8), float32],) {
  @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_2336(%var_2335: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) {
  %873 = fn (%var_2321: Tensor[(1056), float64]) -> (Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) {
    %865 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %866 = cast(%var_2321, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %867 = reshape(%866, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
    %868 = @func_564(%867) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(8, 12, 11), float64], Tensor[(1056), float64], Tensor[(8, 12, 11), float64]) */;
    %869 = %868.2;
    %870 = cast(%869, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %871 = %865.0;
    %872 = cosh(%870) /* ty=Tensor[(1056), float64] */;
    (%871, %var_2321, %872)
  };
  %873(%var_2335) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) */
}

def @func_4614() -> (Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) {
  @func_4612() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(3, 8, 12), float32]) */
}

def @func_6761() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %874 = @func_758() /* ty=(Tensor[(7, 14, 16), float64],) */;
  %875 = %874.0;
  %876 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  (%875, %876)
}

def @func_5918() -> Tensor[(1, 3, 8), float32] {
  @func_5916() /* ty=Tensor[(1, 3, 8), float32] */
}

def @func_3088() -> (Tensor[(7, 14, 16), float32], Tensor[(504), int64], Tensor[(288), float64], Tensor[(1008), int64]) {
  %886 = fn () -> (Tensor[(7, 14, 16), float32], Tensor[(504), int64], Tensor[(288), float64], Tensor[(1008), int64]) {
    %877 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
    %878 = cast(%877, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
    %879 = cast(meta[relay.Constant][46] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %880 = cast(meta[relay.Constant][47] /* ty=Tensor[(1008), int64] */, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %881 = reshape(%879, newshape=[12, 3, 8]) /* ty=Tensor[(12, 3, 8), float64] */;
    %882 = reshape(%880, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
    %883 = @func_888(%881, %882) /* ty=(Tensor[(12, 3, 8), bool], Tensor[(4, 9, 14), bool], Tensor[(504), int64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float64], Tensor[(1008), int64]) */;
    %884 = log(%878) /* ty=Tensor[(7, 14, 16), float32] */;
    %885 = %883.2;
    (%884, %885, meta[relay.Constant][46] /* ty=Tensor[(288), float64] */, meta[relay.Constant][47] /* ty=Tensor[(1008), int64] */)
  };
  %886() /* ty=(Tensor[(7, 14, 16), float32], Tensor[(504), int64], Tensor[(288), float64], Tensor[(1008), int64]) */
}

def @func_8460(%var_8458: Tensor[(2028), float32]) -> (Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64], Tensor[(2028), bool]) {
  @func_8457(%var_8458) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(13, 13, 12), float64], Tensor[(2028), bool]) */
}

def @func_4481(%var_4480: Tensor[(1008), int64]) -> (Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(88, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(1008), int64], Tensor[(?, 3, 8), float32]) {
  %905 = fn (%var_4465: Tensor[(1008), int64]) -> (Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(88, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(1008), int64], Tensor[(?, 3, 8), float32]) {
    %887 = cast(meta[relay.Constant][48] /* ty=Tensor[(88, 12), float64] */, dtype="float64") /* ty=Tensor[(88, 12), float64] */;
    %888 = reshape(%887, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
    %889 = @func_2334(%888) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) */;
    %890 = @func_3422() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %891 = @func_2995() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %892 = %891.0;
    %893 = cast(%var_4465, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %894 = reshape(%893, newshape=[14, 8, 9]) /* ty=Tensor[(14, 8, 9), int64] */;
    %895 = @func_621(%894) /* ty=(Tensor[(14, 8, 9), int64], Tensor[(1, 3, 8), float64]) */;
    %896 = %895.1;
    %897 = cast(%896, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
    %898 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(%892, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %901 = @func_2223() /* ty=Tensor[(7, 14, 16), float64] */;
    %902 = %889.2;
    %903 = %890.0;
    %904 = divide(%899, %900) /* ty=Tensor[(?, 3, 8), float32] */;
    (%901, %902, meta[relay.Constant][48] /* ty=Tensor[(88, 12), float64] */, %903, %var_4465, %904)
  };
  %905(%var_4480) /* ty=(Tensor[(7, 14, 16), float64], Tensor[(1056), float64], Tensor[(88, 12), float64], Tensor[(3, 8, 12), float32], Tensor[(1008), int64], Tensor[(?, 3, 8), float32]) */
}

def @func_5243() -> (Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) {
  @func_5241() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) */
}

def @func_6473(%var_6471: Tensor[(8, 132), float64]) -> (Tensor[(4, 9, 14), uint32], Tensor[(1056), float64], Tensor[(8, 132), float64], Tensor[(504, 2), int64], Tensor[(288), float64]) {
  @func_6470(%var_6471) /* ty=(Tensor[(4, 9, 14), uint32], Tensor[(1056), float64], Tensor[(8, 132), float64], Tensor[(504, 2), int64], Tensor[(288), float64]) */
}

def @func_774() -> (Tensor[(1, 3, 8), float32],) {
  %910 = fn () -> (Tensor[(1, 3, 8), float32],) {
    %906 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %907 = %906.0;
    %908 = cast(%907, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
    %909 = exp(%908) /* ty=Tensor[(1, 3, 8), float32] */;
    (%909,)
  };
  %910() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_1678() -> (Tensor[(1, 3, 8), float64],) {
  @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_9633() -> (Tensor[(5, 4, 16), float32],) {
  @func_9631() /* ty=(Tensor[(5, 4, 16), float32],) */
}

def @func_6802() -> (Tensor[(1, 3, 8), float64],) {
  %911 = @func_1537() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %912 = %911.0;
  (%912,)
}

def @func_6830() -> (Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %913 = @func_5241() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) */;
  %914 = @func_6623() /* ty=Tensor[(7, 14, 16), float64] */;
  %915 = %913.1;
  (%914, %915)
}

def @func_533() -> (Tensor[(1, 3, 8), float64],) {
  %918 = fn () -> (Tensor[(1, 3, 8), float64],) {
    %916 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 3, 8), float64] */;
    %917 = acosh(%916) /* ty=Tensor[(1, 3, 8), float64] */;
    (%917,)
  };
  %918() /* ty=(Tensor[(1, 3, 8), float64],) */
}

def @func_6851() -> Tensor[(3, 8, 12), float32] {
  %919 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
  %919.0
}

def @func_7118() -> Tensor[(?, 3, 8), bool] {
  %920 = @func_4131() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(4, 9, 14), bool], Tensor[(504), int64]) */;
  %921 = %920.0;
  %922 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 3, 8), float64] */, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(%921, dtype="bool") /* ty=Tensor[(1, 3, 8), bool] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%924, %925) /* ty=Tensor[(?, 3, 8), bool] */
}

def @func_1676() -> (Tensor[(1, 3, 8), float64],) {
  %926 = @func_532() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %927 = %926.0;
  (%927,)
}

def @func_7576() -> Tensor[(1, 3, 8), float64] {
  @func_7574() /* ty=Tensor[(1, 3, 8), float64] */
}

def @func_1828() -> (Tensor[(1, 3, 8), float32],) {
  %930 = fn () -> (Tensor[(1, 3, 8), float32],) {
    %928 = @func_1143() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %929 = %928.0;
    (%929,)
  };
  %930() /* ty=(Tensor[(1, 3, 8), float32],) */
}

def @func_2708() -> (Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) {
  %965 = fn () -> (Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) {
    %931 = @func_2498() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %932 = %931.0;
    %933 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %934 = %933.0;
    %935 = cast(%934, dtype="int8") /* ty=Tensor[(1, 3, 8), int8] */;
    %936 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
    %937 = cast(%932, dtype="int8") /* ty=Tensor[(1, 3, 8), int8] */;
    %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %939 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 42), float32] */, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
    %940 = reshape(%939, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float32] */;
    %941 = @func_1598(%940) /* ty=(Tensor[(5, 12, 7), float32], Tensor[(5, 12, 7), float64], Tensor[(5, 12, 7), float64]) */;
    %942 = %941.2;
    %943 = cast(%942, dtype="float32") /* ty=Tensor[(5, 12, 7), float32] */;
    %944 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(10, 42), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %945 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 42), float32] */, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
    %946 = dyn.reshape(%943, %944, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %947 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 42), float32] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
    %948 = shape_of(%942, dtype="int32") /* ty=Tensor[(3), int32] */;
    %949 = cast(%942, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
    %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %951 = cast(meta[relay.Constant][52] /* ty=Tensor[(1056), float64] */, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %952 = reshape(%951, newshape=[1056]) /* ty=Tensor[(1056), float64] */;
    %953 = @func_2334(%952) /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1056), float64], Tensor[(1056), float64]) */;
    %954 = cast(%934, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
    %955 = sqrt(%954) /* ty=Tensor[(1, 3, 8), float32] */;
    %956 = cast(%934, dtype="uint16") /* ty=Tensor[(1, 3, 8), uint16] */;
    %957 = shape_of(%955, dtype="int32") /* ty=Tensor[(3), int32] */;
    %958 = cast(%955, dtype="uint16") /* ty=Tensor[(1, 3, 8), uint16] */;
    %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %960 = right_shift(%937, %938) /* ty=Tensor[(?, 3, 8), int8] */;
    %961 = divide(%945, %946) /* ty=Tensor[(10, 42), float32] */;
    %962 = floor_mod(%949, %950) /* ty=Tensor[(5, 12, 7), float64] */;
    %963 = %953.2;
    %964 = minimum(%958, %959) /* ty=Tensor[(?, 3, 8), uint16] */;
    (%960, %961, %962, %963, meta[relay.Constant][52] /* ty=Tensor[(1056), float64] */, %964)
  };
  %965() /* ty=(Tensor[(?, 3, 8), int8], Tensor[(10, 42), float32], Tensor[(5, 12, 7), float64], Tensor[(1056), float64], Tensor[(1056), float64], Tensor[(?, 3, 8), uint16]) */
}

def @func_5538() -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
  %971 = fn () -> (Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) {
    %966 = @func_1676() /* ty=(Tensor[(1, 3, 8), float64],) */;
    %967 = @func_5241() /* ty=(Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) */;
    %968 = %966.0;
    %969 = @func_3917() /* ty=Tensor[(7, 14, 16), float64] */;
    %970 = %967.1;
    (%968, %969, %970)
  };
  %971() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(7, 14, 16), float64], Tensor[(1, 3, 8), float32]) */
}

def @func_1272(%var_1266: Tensor[(120), float32], %var_1267: Tensor[(1008), int64]) -> (Tensor[(1, 3, 8), float64], Tensor[(6, 84), float64], Tensor[(5, 3, 8), uint8], Tensor[(66), float64], Tensor[(120), float32], Tensor[(1008), int64]) {
  %972 = @func_693() /* ty=(Tensor[(1, 3, 8), float64],) */;
  %973 = @func_1235() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(6, 84), float32]) */;
  %974 = %973.1;
  %975 = cast(%974, dtype="float64") /* ty=Tensor[(6, 84), float64] */;
  %976 = cast(meta[relay.Constant][53] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %977 = cast(%var_1266, dtype="float32") /* ty=Tensor[(120), float32] */;
  %978 = cast(%var_1267, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %979 = reshape(%976, newshape=[11, 1, 6]) /* ty=Tensor[(11, 1, 6), float64] */;
  %980 = reshape(%977, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %981 = reshape(%978, newshape=[1008]) /* ty=Tensor[(1008), int64] */;
  %982 = @func_976(%979, %980, %981) /* ty=(Tensor[(5, 3, 8), uint8], Tensor[(120), float32], Tensor[(12, 3, 8), bool], Tensor[(288), float64], Tensor[(1008), int64], Tensor[(11, ?, 6), bool], Tensor[(1, 3, 8), float32], Tensor[(4, 9, 14), bool], Tensor[(6, 84), int64]) */;
  %983 = %972.0;
  %984 = tan(%975) /* ty=Tensor[(6, 84), float64] */;
  %985 = %982.0;
  (%983, %984, %985, meta[relay.Constant][53] /* ty=Tensor[(66), float64] */, %var_1266, %var_1267)
}

def @func_2297(%var_2296: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint8], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
  %996 = fn (%var_2252: Tensor[(6, 3, 8), float32]) -> (Tensor[(6, 3, 8), uint8], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) {
    %986 = @func_1827() /* ty=(Tensor[(1, 3, 8), float32],) */;
    %987 = %986.0;
    %988 = cast(%987, dtype="uint8") /* ty=Tensor[(1, 3, 8), uint8] */;
    %989 = cast(%var_2252, dtype="uint8") /* ty=Tensor[(6, 3, 8), uint8] */;
    %990 = cast(%987, dtype="float32") /* ty=Tensor[(1, 3, 8), float32] */;
    %991 = cast(%var_2252, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %992 = cast(%var_2252, dtype="float32") /* ty=Tensor[(6, 3, 8), float32] */;
    %993 = logical_xor(%988, %989) /* ty=Tensor[(6, 3, 8), uint8] */;
    %994 = floor_divide(%990, %991) /* ty=Tensor[(6, 3, 8), float32] */;
    %995 = asinh(%992) /* ty=Tensor[(6, 3, 8), float32] */;
    (%993, %994, %995)
  };
  %996(%var_2296) /* ty=(Tensor[(6, 3, 8), uint8], Tensor[(6, 3, 8), float32], Tensor[(6, 3, 8), float32]) */
}

def @func_6131() -> Tensor[(3, 8, 12), float32] {
  %998 = fn () -> Tensor[(3, 8, 12), float32] {
    %997 = @func_3752() /* ty=(Tensor[(3, 8, 12), float32],) */;
    %997.0
  };
  %998() /* ty=Tensor[(3, 8, 12), float32] */
}

def @func_3461() -> Tensor[(1, 3, 8), float32] {
  %999 = @func_1785() /* ty=(Tensor[(1, 3, 8), float64], Tensor[(1, 3, 8), float32]) */;
  %999.1
}

def @func_3440(%var_3439: Tensor[(9, 3, 15), float64]) -> Tensor[(9, 3, 15), float64] {
  %1006 = fn (%var_3432: Tensor[(9, 3, 15), float64]) -> Tensor[(9, 3, 15), float64] {
    %1000 = cast(%var_3432, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
    %1001 = sqrt(%1000) /* ty=Tensor[(9, 3, 15), float64] */;
    %1002 = cast(%var_3432, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
    %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1004 = cast(%1001, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
    %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%1004, %1005) /* ty=Tensor[(9, 3, 15), float64] */
  };
  %1006(%var_3439) /* ty=Tensor[(9, 3, 15), float64] */
}

def @func_7020() -> (Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool]) {
  @func_7018() /* ty=(Tensor[(7, 14, 16), float64], Tensor[(4, 9, 14), bool]) */
}

def @func_5241() -> (Tensor[(1, 3, 8), float32], Tensor[(1, 3, 8), float32]) {
  %1007 = @func_5215() /* ty=Tensor[(1, 3, 8), float32] */;
  %1008 = @func_3543() /* ty=Tensor[(1, 3, 8), float32] */;
  (%1007, %1008)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen565/build/output.py:3229: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen565/build/output.py", line 3234, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(495) tvmgen_default_fused_cosh_kernel0(float* __restrict__ T_cosh, float* __restrict__ placeholder) {
  T_cosh[(((int)threadIdx.x))] = coshf(placeholder[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(495) tvmgen_default_fused_asin_kernel0(float* __restrict__ T_asin, float* __restrict__ placeholder) {
  T_asin[(((int)threadIdx.x))] = asinf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

