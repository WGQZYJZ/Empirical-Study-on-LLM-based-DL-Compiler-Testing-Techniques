==========mod==========
#[version = "0.0.5"]
def @func_633(%var_629: Tensor[(1, 15, 11), float64]) -> Tensor[(1, 15, 11), float64] {
  %0 = cast(%var_629, dtype="float64") /* ty=Tensor[(1, 15, 11), float64] */;
  erf(%0) /* ty=Tensor[(1, 15, 11), float64] */
}

def @func_1741() -> Tensor[(14), float32] {
  %1 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
  %1.1
}

def @func_2083(%var_2007: Tensor[(90), float64], %var_2035: Tensor[(512), float64], %var_2038: Tensor[(3, 10, 3), float64]) -> (Tensor[(14), float32], Tensor[(90), float64], Tensor[(6, 1), int16], int16, Tensor[(6), int16], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(3, 10, 3), int8], Tensor[(63), float64], Tensor[(6, 1), int16], Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64]) {
  %2 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
  %4 = reshape(%2, newshape=[]) /* ty=int16 */;
  %5 = reshape(%3, newshape=[6, 1]) /* ty=Tensor[(6, 1), int16] */;
  %6 = cast(%var_2035, dtype="float64") /* ty=Tensor[(512), float64] */;
  %7 = reshape(%6, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
  %8 = @func_1285(%7) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) */;
  %9 = cast(%var_2007, dtype="float64") /* ty=Tensor[(90), float64] */;
  %10 = reshape(%9, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %11 = @func_133(%10) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) */;
  %12 = %11.1;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %14 = exp(%13) /* ty=Tensor[(3, 10, 3), float64] */;
  %15 = cast(%var_2038, dtype="int8") /* ty=Tensor[(3, 10, 3), int8] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="int8") /* ty=Tensor[(3, 10, 3), int8] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %19 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
  %20 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
  %22 = reshape(%20, newshape=[]) /* ty=int16 */;
  %23 = reshape(%21, newshape=[6, 1]) /* ty=Tensor[(6, 1), int16] */;
  %24 = cast(%14, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %25 = tan(%24) /* ty=Tensor[(3, 10, 3), float64] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(3, 10, 3), float32] */;
  %27 = erf(%26) /* ty=Tensor[(3, 10, 3), float32] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %29 = @func_1741() /* ty=Tensor[(14), float32] */;
  %30 = @func_1190(%4, %5) /* ty=Tensor[(6, 1), int16] */;
  %31 = %8.0;
  %32 = bitwise_and(%17, %18) /* ty=Tensor[(3, 10, 3), int8] */;
  %33 = %19.2;
  %34 = @func_1190(%22, %23) /* ty=Tensor[(6, 1), int16] */;
  %35 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %36 = log10(%28) /* ty=Tensor[(3, 10, 3), float64] */;
  (%29, %var_2007, %30, meta[relay.Constant][0] /* ty=int16 */, meta[relay.Constant][1] /* ty=Tensor[(6), int16] */, %31, %var_2035, %32, %33, %34, %35, %36)
}

def @func_3436(%var_3431: Tensor[(2, 240), uint32], %var_3432: Tensor[(24), int64]) -> (Tensor[(14), float32], Tensor[(16, 5, 6), uint32], Tensor[(2, 240), uint32], Tensor[(24), int64]) {
  %37 = cast(%var_3431, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
  %38 = cast(%var_3431, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
  %39 = cast(%var_3432, dtype="int64") /* ty=Tensor[(24), int64] */;
  %40 = reshape(%37, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %41 = reshape(%38, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %42 = reshape(%39, newshape=[24]) /* ty=Tensor[(24), int64] */;
  %43 = @func_264(%40, %41, %42) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
  %44 = @func_1741() /* ty=Tensor[(14), float32] */;
  %45 = %43.0;
  (%44, %45, %var_3431, %var_3432)
}

def @func_3497(%var_3487: Tensor[(13, 12, 9), int16], %var_3488: Tensor[(13, 12, 9), int16]) -> (Tensor[(13, 12, 9), int16],) {
  %46 = cast(%var_3488, dtype="int16") /* ty=Tensor[(13, 12, 9), int16] */;
  %47 = shape_of(%var_3487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_3487, dtype="int16") /* ty=Tensor[(13, 12, 9), int16] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %50 = maximum(%48, %49) /* ty=Tensor[(13, 12, 9), int16] */;
  (%50,)
}

def @func_1676(%var_1661: Tensor[(11, 14, 11), float64]) -> Tensor[(11, 14, 11), float64] {
  %51 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %52 = cast(%51, dtype="uint32") /* ty=Tensor[(?, 14, ?), uint32] */;
  %53 = cast(%var_1661, dtype="uint32") /* ty=Tensor[(11, 14, 11), uint32] */;
  %54 = left_shift(%52, %53) /* ty=Tensor[(11, 14, 11), uint32] */;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(11, 14, 11), float64] */;
  rsqrt(%55) /* ty=Tensor[(11, 14, 11), float64] */
}

def @main() -> Tensor[(2, 14, 12), float32] {
  %56 = @func_2472() /* ty=Tensor[(2, 14, 12), float32] */;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  cos(%57) /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_4284() -> Tensor[(90), float64] {
  %58 = @func_2923() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64], Tensor[(90), float64]) */;
  %58.2
}

def @func_5105() -> (Tensor[(2, 14, 12), int64], Tensor[(?, 14, ?), float32]) {
  %59 = @func_2257() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %60 = %59.0;
  %61 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 14, 12), float32] */, dtype="int64") /* ty=Tensor[(2, 14, 12), int64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="int64") /* ty=Tensor[(2, 14, 12), int64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %65 = bitwise_and(%63, %64) /* ty=Tensor[(2, 14, 12), int64] */;
  %66 = @func_2209() /* ty=Tensor[(?, 14, ?), float32] */;
  (%65, %66)
}

def @func_2387(%var_2382: Tensor[(98), int32]) -> (Tensor[(2, 13, 6), float32], Tensor[(7, 2, 7), bool], Tensor[(14), int32], Tensor[(98), int32]) {
  %67 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
  %69 = cast(%var_2382, dtype="int32") /* ty=Tensor[(98), int32] */;
  %70 = reshape(%68, newshape=[7, 2, 1]) /* ty=Tensor[(7, 2, 1), int32] */;
  %71 = reshape(%69, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), int32] */;
  %72 = @func_1323(%70, %71) /* ty=(Tensor[(7, 2, 7), bool],) */;
  %73 = %67.2;
  %74 = %72.0;
  (%73, %74, meta[relay.Constant][3] /* ty=Tensor[(14), int32] */, %var_2382)
}

def @func_4230(%var_4216: Tensor[(16, 6, 16), float32]) -> (Tensor[(16, 6, 16), float32],) {
  %75 = cast(%var_4216, dtype="float32") /* ty=Tensor[(16, 6, 16), float32] */;
  %76 = acos(%75) /* ty=Tensor[(16, 6, 16), float32] */;
  (%76,)
}

def @func_5363(%var_5352: Tensor[(512), float64]) -> (Tensor[(90), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) {
  %77 = cast(%var_5352, dtype="float64") /* ty=Tensor[(512), float64] */;
  %78 = reshape(%77, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
  %79 = @func_1285(%78) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) */;
  %80 = @func_4284() /* ty=Tensor[(90), float64] */;
  %81 = %79.0;
  (%80, %81, %var_5352)
}

def @func_2472() -> Tensor[(2, 14, 12), float32] {
  @func_2414() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_622(%var_599: Tensor[(1, 14, 1), float32]) -> Tensor[(?, 14, ?), float64] {
  %82 = cast(%var_599, dtype="float32") /* ty=Tensor[(1, 14, 1), float32] */;
  %83 = erf(%82) /* ty=Tensor[(1, 14, 1), float32] */;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(1, 14, 1), float64] */;
  %85 = shape_of(%var_599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%var_599, dtype="float64") /* ty=Tensor[(1, 14, 1), float64] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%86, %87) /* ty=Tensor[(?, 14, ?), float64] */
}

def @func_3305(%var_3268: Tensor[(14, 10, 13), float32], %var_3294: Tensor[(98), int32]) -> (Tensor[(14), float32], Tensor[(14, 10, 13), float64], Tensor[(98), int32], Tensor[(98), int32], Tensor[(14, 10, 13), bool]) {
  %88 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
  %89 = cast(%var_3268, dtype="float64") /* ty=Tensor[(14, 10, 13), float64] */;
  %90 = cast(%var_3294, dtype="int32") /* ty=Tensor[(98), int32] */;
  %91 = reshape(%90, newshape=[98]) /* ty=Tensor[(98), int32] */;
  %92 = @func_2387(%91) /* ty=(Tensor[(2, 13, 6), float32], Tensor[(7, 2, 7), bool], Tensor[(14), int32], Tensor[(98), int32]) */;
  %93 = cast(%var_3268, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %94 = atan(%93) /* ty=Tensor[(14, 10, 13), float32] */;
  %95 = cast(%var_3268, dtype="bool") /* ty=Tensor[(14, 10, 13), bool] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="bool") /* ty=Tensor[(14, 10, 13), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = %88.0;
  %100 = erf(%89) /* ty=Tensor[(14, 10, 13), float64] */;
  %101 = %92.3;
  %102 = logical_and(%97, %98) /* ty=Tensor[(14, 10, 13), bool] */;
  (%99, %100, %101, %var_3294, %102)
}

def @func_4453(%var_4446: Tensor[(8, 12), float32]) -> Tensor[(8, 12), float32] {
  %103 = cast(%var_4446, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  atan(%103) /* ty=Tensor[(8, 12), float32] */
}

def @func_3266() -> Tensor[(2, 14, 12), float32] {
  %104 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %104.0
}

def @func_3075(%var_3062: Tensor[(4, 12, 4), float64]) -> (Tensor[(4, 12, 4), float64],) {
  %105 = cast(%var_3062, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %106 = log10(%105) /* ty=Tensor[(4, 12, 4), float64] */;
  (%106,)
}

def @func_133(%var_118: Tensor[(3, 10, 3), float64]) -> (Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) {
  %107 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %108 = shape_of(%var_118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%var_118, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %111 = cast(%var_118, dtype="float32") /* ty=Tensor[(3, 10, 3), float32] */;
  %112 = cosh(%111) /* ty=Tensor[(3, 10, 3), float32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %114 = floor_divide(%109, %110) /* ty=Tensor[(3, 10, 3), float64] */;
  %115 = rsqrt(%113) /* ty=Tensor[(3, 10, 3), float64] */;
  (%114, %115)
}

def @func_4190() -> Tensor[(2, 14, 12), float32] {
  %116 = @func_3854() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %116.0
}

def @func_4525() -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) {
  %117 = @func_2257() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %118 = @func_2664() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %119 = %117.0;
  %120 = %118.0;
  (%119, %120)
}

def @func_1769() -> (Tensor[(?, 14, ?), float32],) {
  %121 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
  %123 = rsqrt(%122) /* ty=Tensor[(?, 14, ?), float32] */;
  (%123,)
}

def @func_2460(%var_2455: Tensor[(1, 63), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(1, 63), float32]) {
  %124 = cast(%var_2455, dtype="float64") /* ty=Tensor[(1, 63), float64] */;
  %125 = reshape(%124, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
  %126 = @func_1361(%125) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
  %127 = cast(%var_2455, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
  %128 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
  %129 = %126.1;
  %130 = sinh(%127) /* ty=Tensor[(1, 63), float32] */;
  (%128, %129, %130)
}

def @func_3736(%var_3650: Tensor[(13, 14, 8), float32], %var_3659: Tensor[(336), float32], %var_3729: Tensor[(96), int8]) -> (Tensor[(13, 14, 8), float64], Tensor[(2, 14, 12), int8], Tensor[(14), float32], Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), int16], Tensor[(2, 14, 12), float32], Tensor[(13, 14, 8), bool], Tensor[(1, 15, 11), float64], Tensor[(96), int8], Tensor[(1, 224), uint8]) {
  %131 = @func_2225() /* ty=Tensor[(?, 14, ?), float32] */;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(?, 14, ?), float64] */;
  %133 = cast(%var_3650, dtype="float64") /* ty=Tensor[(13, 14, 8), float64] */;
  %134 = cast(%var_3659, dtype="float32") /* ty=Tensor[(336), float32] */;
  %135 = reshape(%134, newshape=[2, 14, 12]) /* ty=Tensor[(2, 14, 12), float32] */;
  %136 = @func_3574(%135) /* ty=(Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) */;
  %137 = @func_2472() /* ty=Tensor[(2, 14, 12), float32] */;
  %138 = cast(%var_3659, dtype="int16") /* ty=Tensor[(336), int16] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="int16") /* ty=Tensor[(2, 14, 12), int16] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %142 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %143 = cast(%var_3650, dtype="bool") /* ty=Tensor[(13, 14, 8), bool] */;
  %144 = cast(%131, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
  %145 = cast(%var_3729, dtype="int8") /* ty=Tensor[(96), int8] */;
  %146 = cast(%var_3729, dtype="int8") /* ty=Tensor[(96), int8] */;
  %147 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 224), uint8] */, dtype="uint8") /* ty=Tensor[(1, 224), uint8] */;
  %148 = reshape(%145, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %149 = reshape(%146, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %150 = reshape(%147, newshape=[224]) /* ty=Tensor[(224), uint8] */;
  %151 = @func_2306(%148, %149, %150) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */;
  %152 = floor_mod(%132, %133) /* ty=Tensor[(13, 14, 8), float64] */;
  %153 = %136.0;
  %154 = @func_1741() /* ty=Tensor[(14), float32] */;
  %155 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %156 = logical_xor(%140, %141) /* ty=Tensor[(2, 14, 12), int16] */;
  %157 = %142.0;
  %158 = greater(%143, %144) /* ty=Tensor[(13, 14, 8), bool] */;
  %159 = %151.1;
  (%152, %153, %154, %155, %156, %157, %158, %159, %var_3729, meta[relay.Constant][5] /* ty=Tensor[(1, 224), uint8] */)
}

def @func_2139() -> Tensor[(2, 14, 12), float32] {
  %160 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
  %163 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 14, 12), bool] */;
  %164 = not_equal(%162, %163) /* ty=Tensor[(2, 14, 12), bool] */;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  acos(%165) /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_2257() -> (Tensor[(2, 14, 12), float32],) {
  %166 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
  (%166,)
}

def @func_3821(%var_3775: Tensor[(858), float32], %var_3797: Tensor[(14, 1), int32], %var_3798: Tensor[(98), int32], %var_3808: Tensor[(24), int64]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(2, 14, 12), float32], Tensor[(7, 2, 7), bool], Tensor[(14, 858), int8], Tensor[(98), float32], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) {
  %167 = cast(%var_3775, dtype="float32") /* ty=Tensor[(858), float32] */;
  %168 = reshape(%167, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %169 = @func_845(%168) /* ty=(Tensor[(11, 6, 13), float32],) */;
  %170 = cast(%var_3797, dtype="int32") /* ty=Tensor[(14, 1), int32] */;
  %171 = cast(%var_3798, dtype="int32") /* ty=Tensor[(98), int32] */;
  %172 = reshape(%170, newshape=[7, 2, 1]) /* ty=Tensor[(7, 2, 1), int32] */;
  %173 = reshape(%171, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), int32] */;
  %174 = @func_1323(%172, %173) /* ty=(Tensor[(7, 2, 7), bool],) */;
  %175 = cast(%var_3775, dtype="int8") /* ty=Tensor[(858), int8] */;
  %176 = cast(%var_3797, dtype="int8") /* ty=Tensor[(14, 1), int8] */;
  %177 = cast(%var_3798, dtype="float32") /* ty=Tensor[(98), float32] */;
  %178 = cast(%var_3808, dtype="int64") /* ty=Tensor[(24), int64] */;
  %179 = reshape(%178, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), int64] */;
  %180 = @func_100(%179) /* ty=(Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) */;
  %181 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
  %182 = %169.0;
  %183 = @func_3624() /* ty=Tensor[(2, 14, 12), float32] */;
  %184 = %174.0;
  %185 = left_shift(%175, %176) /* ty=Tensor[(14, 858), int8] */;
  %186 = acosh(%177) /* ty=Tensor[(98), float32] */;
  %187 = %180.1;
  (%181, %182, %183, %184, %185, %186, %187, %var_3808)
}

def @func_4396(%var_4368: Tensor[(10, 15), float64], %var_4392: Tensor[(1404), int16]) -> (Tensor[(10, 15), float64], Tensor[(13, 12, 9), int16], Tensor[(1404), int16]) {
  %188 = cast(%var_4368, dtype="float64") /* ty=Tensor[(10, 15), float64] */;
  %189 = cast(%var_4392, dtype="int16") /* ty=Tensor[(1404), int16] */;
  %190 = cast(%var_4392, dtype="int16") /* ty=Tensor[(1404), int16] */;
  %191 = reshape(%189, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %192 = reshape(%190, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %193 = @func_3497(%191, %192) /* ty=(Tensor[(13, 12, 9), int16],) */;
  %194 = asin(%188) /* ty=Tensor[(10, 15), float64] */;
  %195 = %193.0;
  (%194, %195, %var_4392)
}

def @func_264(%var_238: Tensor[(16, 5, 6), uint32], %var_239: Tensor[(16, 5, 6), uint32], %var_257: Tensor[(24), int64]) -> (Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) {
  %196 = cast(%var_239, dtype="uint32") /* ty=Tensor[(16, 5, 6), uint32] */;
  %197 = shape_of(%var_238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_238, dtype="uint32") /* ty=Tensor[(16, 5, 6), uint32] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %200 = cast(%var_238, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
  %201 = cast(%var_257, dtype="int64") /* ty=Tensor[(24), int64] */;
  %202 = reshape(%201, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), int64] */;
  %203 = @func_100(%202) /* ty=(Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) */;
  %204 = maximum(%198, %199) /* ty=Tensor[(16, 5, 6), uint32] */;
  %205 = sigmoid(%200) /* ty=Tensor[(16, 5, 6), float64] */;
  %206 = %203.2;
  (%204, %205, %206, %var_257)
}

def @func_5272(%var_5221: Tensor[(2, 14, 12), float32], %var_5231: Tensor[(1056), float32]) -> (Tensor[(2, 14, 12), uint32], Tensor[(11, 6, 16), bool], Tensor[(1, 15, 11), float64], Tensor[(165), float64]) {
  %207 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
  %208 = cast(%var_5221, dtype="uint32") /* ty=Tensor[(2, 14, 12), uint32] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="uint32") /* ty=Tensor[(2, 14, 12), uint32] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %212 = cast(%var_5231, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %213 = reshape(%212, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float32] */;
  %214 = @func_4729(%213) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(?, 14, ?), float32], Tensor[(11, 6, 16), float64], Tensor[(11, 6, 16), uint32], Tensor[(16, 5, 6), uint32], Tensor[(1, 480), uint32], Tensor[(24), int64]) */;
  %215 = %214.3;
  %216 = cast(%var_5231, dtype="bool") /* ty=Tensor[(1056), bool] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = cast(meta[relay.Constant][7] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %221 = reshape(%220, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float64] */;
  %222 = subtract(%210, %211) /* ty=Tensor[(2, 14, 12), uint32] */;
  %223 = greater(%218, %219) /* ty=Tensor[(11, 6, 16), bool] */;
  %224 = @func_633(%221) /* ty=Tensor[(1, 15, 11), float64] */;
  (%222, %223, %224, meta[relay.Constant][7] /* ty=Tensor[(165), float64] */)
}

def @func_1560() -> Tensor[(?, 14, ?), float64] {
  %225 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
  %225.0
}

def @func_4082(%var_4017: Tensor[(63), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) {
  %226 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %227 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
  %228 = %227.2;
  %229 = cast(%var_4017, dtype="int8") /* ty=Tensor[(63), int8] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(1), int32] */;
  %231 = cast(%228, dtype="int8") /* ty=Tensor[(63), int8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?), int8] */;
  %233 = cast(%var_4017, dtype="float64") /* ty=Tensor[(63), float64] */;
  %234 = acosh(%233) /* ty=Tensor[(63), float64] */;
  %235 = cast(meta[relay.Constant][8] /* ty=Tensor[(63), float64] */, dtype="bool") /* ty=Tensor[(63), bool] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(1), int32] */;
  %237 = cast(%234, dtype="bool") /* ty=Tensor[(63), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?), bool] */;
  %239 = cast(meta[relay.Constant][9] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %240 = reshape(%239, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
  %241 = @func_1285(%240) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) */;
  %242 = %226.0;
  %243 = bitwise_and(%231, %232) /* ty=Tensor[(63), int8] */;
  %244 = greater_equal(%237, %238) /* ty=Tensor[(63), bool] */;
  %245 = %241.2;
  (%242, %243, %244, %245, meta[relay.Constant][9] /* ty=Tensor[(512), float64] */)
}

def @func_3194() -> (Tensor[(2, 14, 12), float32],) {
  %246 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
  (%246,)
}

def @func_2362(%var_2336: Tensor[(7, 14, 4), float32], %var_2344: Tensor[(297), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(858), float32], Tensor[(11, 3, 9), int32], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(1, 24), int64]) {
  %247 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %248 = %247.0;
  %249 = cast(%248, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
  %250 = cast(%var_2336, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %251 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
  %252 = cast(%var_2344, dtype="float32") /* ty=Tensor[(297), float32] */;
  %253 = cast(meta[relay.Constant][10] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %254 = cast(meta[relay.Constant][11] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %255 = reshape(%252, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float32] */;
  %256 = reshape(%253, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %257 = reshape(%254, newshape=[2, 112]) /* ty=Tensor[(2, 112), uint8] */;
  %258 = @func_1923(%255, %256, %257) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) */;
  %259 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %260 = cast(meta[relay.Constant][12] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %261 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 24), int64] */, dtype="int64") /* ty=Tensor[(1, 24), int64] */;
  %262 = reshape(%259, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %263 = reshape(%260, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %264 = reshape(%261, newshape=[24]) /* ty=Tensor[(24), int64] */;
  %265 = @func_264(%262, %263, %264) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
  %266 = not_equal(%249, %250) /* ty=Tensor[(7, 14, 4), bool] */;
  %267 = %251.1;
  %268 = %258.5;
  %269 = %265.2;
  (%266, %267, %268, %var_2344, meta[relay.Constant][10] /* ty=Tensor[(1050), float32] */, meta[relay.Constant][11] /* ty=Tensor[(224), uint8] */, %269, meta[relay.Constant][12] /* ty=Tensor[(480), uint32] */, meta[relay.Constant][13] /* ty=Tensor[(1, 24), int64] */)
}

def @func_4653(%var_4644: Tensor[(5, 14, 12), float64]) -> (Tensor[(5, 14, 12), uint16], Tensor[(5, 14, 12), uint16]) {
  %270 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %271 = cast(%270, dtype="uint16") /* ty=Tensor[(?, 14, ?), uint16] */;
  %272 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(5, 14, 12), uint16] */;
  %273 = cast(%270, dtype="uint16") /* ty=Tensor[(?, 14, ?), uint16] */;
  %274 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(5, 14, 12), uint16] */;
  %275 = bitwise_xor(%271, %272) /* ty=Tensor[(5, 14, 12), uint16] */;
  %276 = bitwise_and(%273, %274) /* ty=Tensor[(5, 14, 12), uint16] */;
  (%275, %276)
}

def @func_4420() -> (Tensor[(2, 14, 12), float32],) {
  %277 = @func_3008() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %278 = %277.0;
  (%278,)
}

def @func_4124(%var_4118: Tensor[(63), float64]) -> (Tensor[(2, 14, 12), float64], Tensor[(63), int8], Tensor[(63), float64]) {
  %279 = @func_2472() /* ty=Tensor[(2, 14, 12), float32] */;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %281 = cast(%var_4118, dtype="float64") /* ty=Tensor[(63), float64] */;
  %282 = reshape(%281, newshape=[63]) /* ty=Tensor[(63), float64] */;
  %283 = @func_4082(%282) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) */;
  %284 = sinh(%280) /* ty=Tensor[(2, 14, 12), float64] */;
  %285 = %283.1;
  (%284, %285, %var_4118)
}

def @func_1155(%var_1114: Tensor[(14, 15, 5), float32], %var_1115: Tensor[(14, 15, 5), float32], %var_1153: Tensor[(224), uint8]) -> (Tensor[(14, 15, 5), float32], Tensor[(14, 15, 5), float64], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) {
  %286 = cast(%var_1115, dtype="float32") /* ty=Tensor[(14, 15, 5), float32] */;
  %287 = shape_of(%var_1114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_1114, dtype="float32") /* ty=Tensor[(14, 15, 5), float32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %290 = cast(%var_1114, dtype="float64") /* ty=Tensor[(14, 15, 5), float64] */;
  %291 = cast(%var_1153, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %292 = cast(%var_1153, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %293 = cast(%var_1153, dtype="bool") /* ty=Tensor[(224), bool] */;
  %294 = reshape(%291, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
  %295 = reshape(%292, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
  %296 = reshape(%293, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), bool] */;
  %297 = @func_746(%294, %295, %296) /* ty=(Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) */;
  %298 = divide(%288, %289) /* ty=Tensor[(14, 15, 5), float32] */;
  %299 = log(%290) /* ty=Tensor[(14, 15, 5), float64] */;
  %300 = %297.0;
  (%298, %299, %300, %var_1153)
}

def @func_1285(%var_1251: Tensor[(16, 2, 16), float64]) -> (Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) {
  %301 = cast(1.21864f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %302 = cast(%var_1251, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %303 = cast(%var_1251, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %304 = cast(%var_1251, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %305 = power(%301, %302) /* ty=Tensor[(16, 2, 16), float64] */;
  %306 = sinh(%303) /* ty=Tensor[(16, 2, 16), float32] */;
  %307 = log(%304) /* ty=Tensor[(16, 2, 16), float64] */;
  (%305, %306, %307)
}

def @func_4570(%var_4563: uint16, %var_4564: Tensor[(3, 15, 2), uint16]) -> Tensor[(3, 15, 2), uint16] {
  %308 = cast(%var_4563, dtype="uint16") /* ty=uint16 */;
  %309 = cast(%var_4564, dtype="uint16") /* ty=Tensor[(3, 15, 2), uint16] */;
  bitwise_xor(%308, %309) /* ty=Tensor[(3, 15, 2), uint16] */
}

def @func_2209() -> Tensor[(?, 14, ?), float32] {
  %310 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %310.0
}

def @func_2186(%var_2165: Tensor[(1694), float64], %var_2176: Tensor[(24), int64]) -> (Tensor[(?, 14, ?), float32], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(24), int64]) {
  %311 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %312 = cast(%var_2165, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %313 = reshape(%312, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), float64] */;
  %314 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %315 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %316 = cast(%var_2176, dtype="int64") /* ty=Tensor[(24), int64] */;
  %317 = reshape(%314, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %318 = reshape(%315, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %319 = reshape(%316, newshape=[24]) /* ty=Tensor[(24), int64] */;
  %320 = @func_264(%317, %318, %319) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
  %321 = %311.0;
  %322 = @func_1676(%313) /* ty=Tensor[(11, 14, 11), float64] */;
  %323 = %320.2;
  (%321, %322, %var_2165, %323, meta[relay.Constant][14] /* ty=Tensor[(480), uint32] */, %var_2176)
}

def @func_5194(%var_5170: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), float64], Tensor[(13, 12, 9), int16], Tensor[(18, 78), int16]) {
  %324 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %325 = %324.0;
  %326 = cast(%var_5170, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %330 = cast(meta[relay.Constant][15] /* ty=Tensor[(18, 78), int16] */, dtype="int16") /* ty=Tensor[(18, 78), int16] */;
  %331 = cast(meta[relay.Constant][15] /* ty=Tensor[(18, 78), int16] */, dtype="int16") /* ty=Tensor[(18, 78), int16] */;
  %332 = reshape(%330, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %333 = reshape(%331, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %334 = @func_3497(%332, %333) /* ty=(Tensor[(13, 12, 9), int16],) */;
  %335 = multiply(%328, %329) /* ty=Tensor[(2, 14, 12), float64] */;
  %336 = %334.0;
  (%335, %336, meta[relay.Constant][15] /* ty=Tensor[(18, 78), int16] */)
}

def @func_4500() -> (Tensor[(?, 14, ?), float64], Tensor[(13, 12, 9), int16], Tensor[(54, 26), int16], Tensor[(11, 14, 11), float64], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8]) {
  %337 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
  %338 = cast(meta[relay.Constant][16] /* ty=Tensor[(54, 26), int16] */, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %339 = cast(meta[relay.Constant][16] /* ty=Tensor[(54, 26), int16] */, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %340 = reshape(%338, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %341 = reshape(%339, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %342 = @func_3497(%340, %341) /* ty=(Tensor[(13, 12, 9), int16],) */;
  %343 = cast(meta[relay.Constant][17] /* ty=Tensor[(297), float32] */, dtype="float32") /* ty=Tensor[(297), float32] */;
  %344 = cast(meta[relay.Constant][18] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %345 = cast(meta[relay.Constant][19] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %346 = reshape(%343, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float32] */;
  %347 = reshape(%344, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
  %348 = reshape(%345, newshape=[2, 112]) /* ty=Tensor[(2, 112), uint8] */;
  %349 = @func_1923(%346, %347, %348) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) */;
  %350 = %337.0;
  %351 = %342.0;
  %352 = %349.3;
  (%350, %351, meta[relay.Constant][16] /* ty=Tensor[(54, 26), int16] */, %352, meta[relay.Constant][17] /* ty=Tensor[(297), float32] */, meta[relay.Constant][18] /* ty=Tensor[(1050), float32] */, meta[relay.Constant][19] /* ty=Tensor[(224), uint8] */)
}

def @func_1361(%var_1353: Tensor[(7, 9, 1), float64]) -> (Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) {
  %353 = cast(%var_1353, dtype="float64") /* ty=Tensor[(7, 9, 1), float64] */;
  %354 = cast(meta[relay.Constant][20] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
  %355 = reshape(%354, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %356 = @func_845(%355) /* ty=(Tensor[(11, 6, 13), float32],) */;
  %357 = asinh(%353) /* ty=Tensor[(7, 9, 1), float64] */;
  %358 = %356.0;
  (%357, %358, meta[relay.Constant][20] /* ty=Tensor[(858), float32] */)
}

def @func_1190(%var_1175: int16, %var_1176: Tensor[(6, 1), int16]) -> Tensor[(6, 1), int16] {
  %359 = cast(%var_1175, dtype="int16") /* ty=int16 */;
  %360 = cast(%var_1176, dtype="int16") /* ty=Tensor[(6, 1), int16] */;
  multiply(%359, %360) /* ty=Tensor[(6, 1), int16] */
}

def @func_1546() -> (Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) {
  %361 = cast(meta[relay.Constant][21] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %362 = reshape(%361, newshape=[1, 14, 1]) /* ty=Tensor[(1, 14, 1), float32] */;
  %363 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %364 = rsqrt(%363) /* ty=Tensor[(2, 13, 6), float32] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %366 = acosh(%365) /* ty=Tensor[(2, 13, 6), float64] */;
  %367 = cast(%364, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %371 = @func_622(%362) /* ty=Tensor[(?, 14, ?), float64] */;
  %372 = floor_mod(%369, %370) /* ty=Tensor[(2, 13, 6), float32] */;
  (%371, meta[relay.Constant][21] /* ty=Tensor[(14), float32] */, %372)
}

def @func_3884() -> Tensor[(?, 14, ?), float32] {
  @func_2209() /* ty=Tensor[(?, 14, ?), float32] */
}

def @func_4603() -> (Tensor[(2, 14, 12), float32],) {
  %373 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
  (%373,)
}

def @func_4933(%var_4927: Tensor[(90), uint16]) -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(63), float64], Tensor[(2, 12, 1), bool], Tensor[(24), float64], Tensor[(3, 15, 2), uint16], uint16, Tensor[(90), uint16]) {
  %374 = @func_2664() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %375 = cast(meta[relay.Constant][23] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %376 = reshape(%375, newshape=[63]) /* ty=Tensor[(63), float64] */;
  %377 = @func_4082(%376) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) */;
  %378 = cast(meta[relay.Constant][24] /* ty=Tensor[(24), int64] */, dtype="int64") /* ty=Tensor[(24), int64] */;
  %379 = reshape(%378, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), int64] */;
  %380 = @func_100(%379) /* ty=(Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) */;
  %381 = cast(meta[relay.Constant][24] /* ty=Tensor[(24), int64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %382 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %383 = cast(%var_4927, dtype="uint16") /* ty=Tensor[(90), uint16] */;
  %384 = reshape(%382, newshape=[]) /* ty=uint16 */;
  %385 = reshape(%383, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), uint16] */;
  %386 = %374.0;
  %387 = %377.0;
  %388 = %380.1;
  %389 = sin(%381) /* ty=Tensor[(24), float64] */;
  %390 = @func_4570(%384, %385) /* ty=Tensor[(3, 15, 2), uint16] */;
  (%386, %387, meta[relay.Constant][23] /* ty=Tensor[(63), float64] */, %388, %389, %390, meta[relay.Constant][25] /* ty=uint16 */, %var_4927)
}

def @func_2902() -> (Tensor[(?, 14, ?), float64],) {
  %391 = @func_2209() /* ty=Tensor[(?, 14, ?), float32] */;
  %392 = cast(%391, dtype="float64") /* ty=Tensor[(?, 14, ?), float64] */;
  %393 = exp(%392) /* ty=Tensor[(?, 14, ?), float64] */;
  (%393,)
}

def @func_1923(%var_1840: Tensor[(11, 3, 9), float32], %var_1919: Tensor[(1050), float32], %var_1920: Tensor[(2, 112), uint8]) -> (Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) {
  %394 = cast(meta[relay.Constant][26] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %395 = reshape(%394, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
  %396 = @func_1361(%395) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
  %397 = cast(%var_1840, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %398 = sin(%397) /* ty=Tensor[(11, 3, 9), float32] */;
  %399 = cast(%398, dtype="uint16") /* ty=Tensor[(11, 3, 9), uint16] */;
  %400 = shape_of(%var_1840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_1840, dtype="uint16") /* ty=Tensor[(11, 3, 9), uint16] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %403 = subtract(%401, %402) /* ty=Tensor[(11, 3, 9), uint16] */;
  %404 = cast(%403, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
  %405 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%398, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = cast(meta[relay.Constant][27] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %409 = reshape(%408, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), float64] */;
  %410 = cast(%403, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %411 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%398, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %414 = mod(%412, %413) /* ty=Tensor[(11, 3, 9), float64] */;
  %415 = cast(%403, dtype="int32") /* ty=Tensor[(11, 3, 9), int32] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="int32") /* ty=Tensor[(11, 3, 9), int32] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %419 = cast(%var_1919, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %420 = cast(%var_1919, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %421 = cast(%var_1920, dtype="uint8") /* ty=Tensor[(2, 112), uint8] */;
  %422 = reshape(%419, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %423 = reshape(%420, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %424 = reshape(%421, newshape=[224]) /* ty=Tensor[(224), uint8] */;
  %425 = @func_1155(%422, %423, %424) /* ty=(Tensor[(14, 15, 5), float32], Tensor[(14, 15, 5), float64], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */;
  %426 = %396.0;
  %427 = less_equal(%406, %407) /* ty=Tensor[(11, 3, 9), bool] */;
  %428 = @func_1676(%409) /* ty=Tensor[(11, 14, 11), float64] */;
  %429 = logical_xor(%417, %418) /* ty=Tensor[(11, 3, 9), int32] */;
  %430 = %425.2;
  (%426, meta[relay.Constant][26] /* ty=Tensor[(63), float64] */, %427, %428, meta[relay.Constant][27] /* ty=Tensor[(1694), float64] */, %429, %430, %var_1919, %var_1920)
}

def @func_1323(%var_1304: Tensor[(7, 2, 1), int32], %var_1305: Tensor[(7, 2, 7), int32]) -> (Tensor[(7, 2, 7), bool],) {
  %431 = cast(%var_1304, dtype="bool") /* ty=Tensor[(7, 2, 1), bool] */;
  %432 = cast(%var_1305, dtype="bool") /* ty=Tensor[(7, 2, 7), bool] */;
  %433 = greater_equal(%431, %432) /* ty=Tensor[(7, 2, 7), bool] */;
  (%433,)
}

def @func_2862(%var_2826: Tensor[(480), uint32]) -> (Tensor[(?, 14, ?), float64], Tensor[(?, 14, ?), bool], Tensor[(16, 5, 6), float64], Tensor[(480), uint32], Tensor[(24), int64], Tensor[(?, 14, ?), int8]) {
  %434 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
  %436 = reshape(%435, newshape=[1, 14, 1]) /* ty=Tensor[(1, 14, 1), float32] */;
  %437 = cast(%434, dtype="float64") /* ty=Tensor[(?, 14, ?), float64] */;
  %438 = cosh(%437) /* ty=Tensor[(?, 14, ?), float64] */;
  %439 = cast(%434, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %443 = mod(%441, %442) /* ty=Tensor[(?, 14, ?), float32] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
  %445 = log10(%444) /* ty=Tensor[(?, 14, ?), float32] */;
  %446 = cast(%445, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
  %447 = acosh(%446) /* ty=Tensor[(?, 14, ?), float32] */;
  %448 = cast(%445, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = cast(%var_2826, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %453 = cast(%var_2826, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %454 = cast(meta[relay.Constant][28] /* ty=Tensor[(24), int64] */, dtype="int64") /* ty=Tensor[(24), int64] */;
  %455 = reshape(%452, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %456 = reshape(%453, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %457 = reshape(%454, newshape=[24]) /* ty=Tensor[(24), int64] */;
  %458 = @func_264(%455, %456, %457) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
  %459 = cast(%445, dtype="int8") /* ty=Tensor[(?, 14, ?), int8] */;
  %460 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%447, dtype="int8") /* ty=Tensor[(?, 14, ?), int8] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %463 = @func_622(%436) /* ty=Tensor[(?, 14, ?), float64] */;
  %464 = greater(%450, %451) /* ty=Tensor[(?, 14, ?), bool] */;
  %465 = %458.1;
  %466 = left_shift(%461, %462) /* ty=Tensor[(?, 14, ?), int8] */;
  (%463, %464, %465, %var_2826, meta[relay.Constant][28] /* ty=Tensor[(24), int64] */, %466)
}

def @func_3854() -> (Tensor[(2, 14, 12), float32],) {
  %467 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
  (%467,)
}

def @func_746(%var_686: Tensor[(4, 14, 4), uint8], %var_687: Tensor[(4, 14, 4), uint8], %var_734: Tensor[(4, 14, 4), bool]) -> (Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) {
  %468 = cast(meta[relay.Constant][29] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %469 = reshape(%468, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float64] */;
  %470 = cast(%var_687, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  %471 = log(%470) /* ty=Tensor[(4, 14, 4), float64] */;
  %472 = cast(%var_687, dtype="uint8") /* ty=Tensor[(4, 14, 4), uint8] */;
  %473 = shape_of(%var_686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_686, dtype="uint8") /* ty=Tensor[(4, 14, 4), uint8] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %476 = left_shift(%474, %475) /* ty=Tensor[(4, 14, 4), uint8] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  %478 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%471, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %481 = floor_mod(%479, %480) /* ty=Tensor[(4, 14, 4), float64] */;
  %482 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = equal(%484, %485) /* ty=Tensor[(4, 14, 4), bool] */;
  %487 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = cast(%476, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %492 = shape_of(%var_686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %495 = greater(%493, %494) /* ty=Tensor[(4, 14, 4), bool] */;
  %496 = cast(%495, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %497 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%481, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = logical_or(%498, %499) /* ty=Tensor[(4, 14, 4), bool] */;
  %501 = cast(%var_734, dtype="int16") /* ty=Tensor[(4, 14, 4), int16] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="int16") /* ty=Tensor[(4, 14, 4), int16] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %505 = cast(meta[relay.Constant][29] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %506 = reshape(%505, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float64] */;
  %507 = @func_633(%469) /* ty=Tensor[(1, 15, 11), float64] */;
  %508 = less_equal(%489, %490) /* ty=Tensor[(4, 14, 4), bool] */;
  %509 = maximum(%503, %504) /* ty=Tensor[(4, 14, 4), int16] */;
  %510 = @func_633(%506) /* ty=Tensor[(1, 15, 11), float64] */;
  (%507, meta[relay.Constant][29] /* ty=Tensor[(165), float64] */, %508, %509, %510)
}

def @func_2639(%var_2603: Tensor[(6, 9, 14), uint16], %var_2614: Tensor[(6, 9, 14), uint16]) -> (Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), bool]) {
  %511 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 9, 14), uint16] */, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %512 = shape_of(%var_2603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_2603, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %515 = cast(%var_2614, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %516 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(6, 9, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 9, 14), uint16] */, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = multiply(%513, %514) /* ty=Tensor[(6, 9, 14), uint16] */;
  %520 = greater(%517, %518) /* ty=Tensor[(6, 9, 14), bool] */;
  (%519, %520)
}

def @func_2589(%var_2570: Tensor[(3, 14, 8), float32], %var_2579: Tensor[(7, 9), float64]) -> (Tensor[(3, 14, 8), uint16], Tensor[(11, 6, 13), float32], Tensor[(7, 9), float64]) {
  %521 = @func_2225() /* ty=Tensor[(?, 14, ?), float32] */;
  %522 = cast(%521, dtype="uint16") /* ty=Tensor[(?, 14, ?), uint16] */;
  %523 = cast(%var_2570, dtype="uint16") /* ty=Tensor[(3, 14, 8), uint16] */;
  %524 = cast(%var_2579, dtype="float64") /* ty=Tensor[(7, 9), float64] */;
  %525 = reshape(%524, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
  %526 = @func_1361(%525) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
  %527 = right_shift(%522, %523) /* ty=Tensor[(3, 14, 8), uint16] */;
  %528 = %526.1;
  (%527, %528, %var_2579)
}

def @func_3990(%var_3961: Tensor[(858), float32]) -> (Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), float64], Tensor[(2, 14, 12), float32], Tensor[(2, 96), float64], Tensor[(11, 6, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(858), float64], Tensor[(2, 13, 6), float32], Tensor[(2, 14, 12), float32]) {
  %529 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  %531 = reshape(%530, newshape=[2, 14, 12]) /* ty=Tensor[(2, 14, 12), float32] */;
  %532 = @func_3574(%531) /* ty=(Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) */;
  %533 = cast(%529, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %534 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %535 = cast(%var_3961, dtype="float32") /* ty=Tensor[(858), float32] */;
  %536 = reshape(%535, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %537 = @func_845(%536) /* ty=(Tensor[(11, 6, 13), float32],) */;
  %538 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 96), float64] */, dtype="float64") /* ty=Tensor[(2, 96), float64] */;
  %539 = reshape(%538, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), float64] */;
  %540 = @func_3075(%539) /* ty=(Tensor[(4, 12, 4), float64],) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %543 = rsqrt(%542) /* ty=Tensor[(4, 12, 4), float64] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %545 = cast(%var_3961, dtype="float64") /* ty=Tensor[(858), float64] */;
  %546 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
  %547 = %532.1;
  %548 = exp(%533) /* ty=Tensor[(2, 14, 12), float64] */;
  %549 = %534.0;
  %550 = %537.0;
  %551 = log2(%544) /* ty=Tensor[(4, 12, 4), float64] */;
  %552 = log(%545) /* ty=Tensor[(858), float64] */;
  %553 = %546.2;
  %554 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
  (%547, %548, %549, meta[relay.Constant][31] /* ty=Tensor[(2, 96), float64] */, %550, %551, %552, %553, %554)
}

def @func_845(%var_802: Tensor[(11, 6, 13), float32]) -> (Tensor[(11, 6, 13), float32],) {
  %555 = cast(%var_802, dtype="float32") /* ty=Tensor[(11, 6, 13), float32] */;
  %556 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(11, 6, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 6, 13), float32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %559 = floor_divide(%557, %558) /* ty=Tensor[(11, 6, 13), float32] */;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(11, 6, 13), float32] */;
  %561 = erf(%560) /* ty=Tensor[(11, 6, 13), float32] */;
  (%561,)
}

def @func_2943() -> Tensor[(2, 14, 12), float32] {
  @func_2139() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_3008() -> (Tensor[(2, 14, 12), float32],) {
  %562 = @func_2414() /* ty=Tensor[(2, 14, 12), float32] */;
  (%562,)
}

def @func_2664() -> (Tensor[(2, 14, 12), float32],) {
  %563 = @func_2414() /* ty=Tensor[(2, 14, 12), float32] */;
  (%563,)
}

def @func_3624() -> Tensor[(2, 14, 12), float32] {
  @func_2472() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_3574(%var_3524: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) {
  %564 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
  %565 = cast(%var_3524, dtype="int8") /* ty=Tensor[(2, 14, 12), int8] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="int8") /* ty=Tensor[(2, 14, 12), int8] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %569 = cast(meta[relay.Constant][33] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %570 = reshape(%569, newshape=[480]) /* ty=Tensor[(480), uint32] */;
  %571 = @func_2862(%570) /* ty=(Tensor[(?, 14, ?), float64], Tensor[(?, 14, ?), bool], Tensor[(16, 5, 6), float64], Tensor[(480), uint32], Tensor[(24), int64], Tensor[(?, 14, ?), int8]) */;
  %572 = cast(%var_3524, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %573 = bitwise_xor(%567, %568) /* ty=Tensor[(2, 14, 12), int8] */;
  %574 = %571.0;
  %575 = sqrt(%572) /* ty=Tensor[(2, 14, 12), float64] */;
  (%573, %574, meta[relay.Constant][33] /* ty=Tensor[(480), uint32] */, %575)
}

def @func_1973() -> (Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) {
  %576 = cast(meta[relay.Constant][34] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %577 = reshape(%576, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
  %578 = @func_1361(%577) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
  %579 = @func_1741() /* ty=Tensor[(14), float32] */;
  %580 = %578.2;
  (%579, %580, meta[relay.Constant][34] /* ty=Tensor[(63), float64] */)
}

def @func_2225() -> Tensor[(?, 14, ?), float32] {
  @func_2209() /* ty=Tensor[(?, 14, ?), float32] */
}

def @func_4339() -> (Tensor[(?, 14, ?), float32], Tensor[(2, 14, 12), float64]) {
  %581 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %582 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %584 = %581.0;
  %585 = asinh(%583) /* ty=Tensor[(2, 14, 12), float64] */;
  (%584, %585)
}

def @func_4729(%var_4658: Tensor[(11, 6, 16), float32]) -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(?, 14, ?), float32], Tensor[(11, 6, 16), float64], Tensor[(11, 6, 16), uint32], Tensor[(16, 5, 6), uint32], Tensor[(1, 480), uint32], Tensor[(24), int64]) {
  %586 = cast(%var_4658, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
  %587 = asinh(%586) /* ty=Tensor[(11, 6, 16), float32] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %589 = cosh(%588) /* ty=Tensor[(11, 6, 16), float64] */;
  %590 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 6, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %594 = cast(%var_4658, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
  %595 = sigmoid(%594) /* ty=Tensor[(11, 6, 16), float32] */;
  %596 = cast(%595, dtype="uint32") /* ty=Tensor[(11, 6, 16), uint32] */;
  %597 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%589, dtype="uint32") /* ty=Tensor[(11, 6, 16), uint32] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %600 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 480), uint32] */, dtype="uint32") /* ty=Tensor[(1, 480), uint32] */;
  %601 = cast(meta[relay.Constant][37] /* ty=Tensor[(24), int64] */, dtype="int64") /* ty=Tensor[(24), int64] */;
  %602 = reshape(%600, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint32] */;
  %603 = reshape(%601, newshape=[24]) /* ty=Tensor[(24), int64] */;
  %604 = @func_3436(%602, %603) /* ty=(Tensor[(14), float32], Tensor[(16, 5, 6), uint32], Tensor[(2, 240), uint32], Tensor[(24), int64]) */;
  %605 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
  %606 = @func_4190() /* ty=Tensor[(2, 14, 12), float32] */;
  %607 = @func_2225() /* ty=Tensor[(?, 14, ?), float32] */;
  %608 = floor_mod(%592, %593) /* ty=Tensor[(11, 6, 16), float64] */;
  %609 = maximum(%598, %599) /* ty=Tensor[(11, 6, 16), uint32] */;
  %610 = %604.1;
  (%605, %606, %607, %608, %609, %610, meta[relay.Constant][36] /* ty=Tensor[(1, 480), uint32] */, meta[relay.Constant][37] /* ty=Tensor[(24), int64] */)
}

def @func_4588(%var_4583: Tensor[(429, 2), float32]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(429, 2), float32], Tensor[(?, 14, ?), float32]) {
  %611 = cast(%var_4583, dtype="float32") /* ty=Tensor[(429, 2), float32] */;
  %612 = reshape(%611, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %613 = @func_845(%612) /* ty=(Tensor[(11, 6, 13), float32],) */;
  %614 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
  %615 = %613.0;
  %616 = @func_3884() /* ty=Tensor[(?, 14, ?), float32] */;
  (%614, %615, %var_4583, %616)
}

def @func_2306(%var_2292: Tensor[(3, 8, 4), int8], %var_2293: Tensor[(3, 8, 4), int8], %var_2302: Tensor[(224), uint8]) -> (Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) {
  %617 = cast(%var_2293, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
  %618 = shape_of(%var_2292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_2292, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %621 = bitwise_and(%619, %620) /* ty=Tensor[(3, 8, 4), int8] */;
  %622 = cast(%621, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %623 = shape_of(%var_2293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%var_2293, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = cast(%var_2302, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %627 = cast(%var_2302, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %628 = cast(%var_2302, dtype="bool") /* ty=Tensor[(224), bool] */;
  %629 = reshape(%626, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
  %630 = reshape(%627, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
  %631 = reshape(%628, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), bool] */;
  %632 = @func_746(%629, %630, %631) /* ty=(Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) */;
  %633 = logical_or(%624, %625) /* ty=Tensor[(3, 8, 4), bool] */;
  %634 = %632.4;
  (%633, %634, %var_2302)
}

def @func_4246() -> Tensor[(2, 14, 12), float32] {
  %635 = @func_3854() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %635.0
}

def @func_4866(%var_4804: Tensor[(224), uint8], %var_4820: Tensor[(12, 15, 11), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(96), int8], Tensor[(224), uint8], Tensor[(2, 14, 12), float32], Tensor[(12, 15, 11), int16], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) {
  %636 = cast(meta[relay.Constant][38] /* ty=Tensor[(96), int8] */, dtype="int8") /* ty=Tensor[(96), int8] */;
  %637 = cast(meta[relay.Constant][38] /* ty=Tensor[(96), int8] */, dtype="int8") /* ty=Tensor[(96), int8] */;
  %638 = cast(%var_4804, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %639 = reshape(%636, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %640 = reshape(%637, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %641 = reshape(%638, newshape=[224]) /* ty=Tensor[(224), uint8] */;
  %642 = @func_2306(%639, %640, %641) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */;
  %643 = %642.1;
  %644 = cast(%643, dtype="int16") /* ty=Tensor[(1, 15, 11), int16] */;
  %645 = cast(%var_4820, dtype="int16") /* ty=Tensor[(12, 15, 11), int16] */;
  %646 = @func_4420() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %647 = @func_4603() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %648 = @func_2414() /* ty=Tensor[(2, 14, 12), float32] */;
  %649 = @func_4246() /* ty=Tensor[(2, 14, 12), float32] */;
  %650 = bitwise_and(%644, %645) /* ty=Tensor[(12, 15, 11), int16] */;
  %651 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
  %652 = %646.0;
  %653 = %647.0;
  (%648, meta[relay.Constant][38] /* ty=Tensor[(96), int8] */, %var_4804, %649, %650, %651, %652, %653)
}

def @func_4980() -> (Tensor[(14), float32],) {
  %654 = @func_1741() /* ty=Tensor[(14), float32] */;
  (%654,)
}

def @func_100(%var_55: Tensor[(2, 12, 1), int64]) -> (Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) {
  %655 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %656 = cast(%var_55, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
  %657 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %658 = cast(%var_55, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
  %659 = cast(%var_55, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
  %660 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %661 = greater_equal(%655, %656) /* ty=Tensor[(2, 12, 1), bool] */;
  %662 = logical_or(%657, %658) /* ty=Tensor[(2, 12, 1), bool] */;
  %663 = not_equal(%659, %660) /* ty=Tensor[(2, 12, 1), bool] */;
  (%661, %662, %663)
}

def @func_2414() -> Tensor[(2, 14, 12), float32] {
  @func_2139() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_2923() -> (Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64], Tensor[(90), float64]) {
  %664 = @func_2902() /* ty=(Tensor[(?, 14, ?), float64],) */;
  %665 = cast(meta[relay.Constant][39] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %666 = reshape(%665, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %667 = @func_133(%666) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) */;
  %668 = %664.0;
  %669 = %667.0;
  (%668, %669, meta[relay.Constant][39] /* ty=Tensor[(90), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2083(%var_2007: Tensor[(90), float64], %var_2035: Tensor[(512), float64], %var_2038: Tensor[(3, 10, 3), float64]) -> (Tensor[(14), float32], Tensor[(90), float64], Tensor[(6, 1), int16], int16, Tensor[(6), int16], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(3, 10, 3), int8], Tensor[(63), float64], Tensor[(6, 1), int16], Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
  %2 = reshape(%0, newshape=[]) /* ty=int16 */;
  %3 = reshape(%1, newshape=[6, 1]) /* ty=Tensor[(6, 1), int16] */;
  %4 = cast(%var_2035, dtype="float64") /* ty=Tensor[(512), float64] */;
  %5 = reshape(%4, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
  %6 = @func_1285(%5) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) */;
  %7 = cast(%var_2007, dtype="float64") /* ty=Tensor[(90), float64] */;
  %8 = reshape(%7, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %9 = @func_133(%8) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) */;
  %10 = %9.1;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %12 = exp(%11) /* ty=Tensor[(3, 10, 3), float64] */;
  %13 = cast(%var_2038, dtype="int8") /* ty=Tensor[(3, 10, 3), int8] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="int8") /* ty=Tensor[(3, 10, 3), int8] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %17 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
  %18 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(6), int16] */, dtype="int16") /* ty=Tensor[(6), int16] */;
  %20 = reshape(%18, newshape=[]) /* ty=int16 */;
  %21 = reshape(%19, newshape=[6, 1]) /* ty=Tensor[(6, 1), int16] */;
  %22 = cast(%12, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %23 = tan(%22) /* ty=Tensor[(3, 10, 3), float64] */;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(3, 10, 3), float32] */;
  %25 = erf(%24) /* ty=Tensor[(3, 10, 3), float32] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %27 = @func_1741() /* ty=Tensor[(14), float32] */;
  %28 = @func_1190(%2, %3) /* ty=Tensor[(6, 1), int16] */;
  %29 = %6.0;
  %30 = bitwise_and(%15, %16) /* ty=Tensor[(3, 10, 3), int8] */;
  %31 = %17.2;
  %32 = @func_1190(%20, %21) /* ty=Tensor[(6, 1), int16] */;
  %33 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %34 = log10(%26) /* ty=Tensor[(3, 10, 3), float64] */;
  (%27, %var_2007, %28, meta[relay.Constant][0] /* ty=int16 */, meta[relay.Constant][1] /* ty=Tensor[(6), int16] */, %29, %var_2035, %30, %31, %32, %33, %34)
}

def @func_136(%var_134: Tensor[(3, 10, 3), float64]) -> (Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) {
  @func_133(%var_134) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) */
}

def @func_1285(%var_1251: Tensor[(16, 2, 16), float64]) -> (Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) {
  %35 = cast(1.21864f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %36 = cast(%var_1251, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %37 = cast(%var_1251, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %38 = cast(%var_1251, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %39 = power(%35, %36) /* ty=Tensor[(16, 2, 16), float64] */;
  %40 = sinh(%37) /* ty=Tensor[(16, 2, 16), float32] */;
  %41 = log(%38) /* ty=Tensor[(16, 2, 16), float64] */;
  (%39, %40, %41)
}

def @func_750(%var_747: Tensor[(4, 14, 4), uint8], %var_748: Tensor[(4, 14, 4), uint8], %var_749: Tensor[(4, 14, 4), bool]) -> (Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) {
  %85 = fn (%var_686: Tensor[(4, 14, 4), uint8], %var_687: Tensor[(4, 14, 4), uint8], %var_734: Tensor[(4, 14, 4), bool]) -> (Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) {
    %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
    %43 = reshape(%42, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float64] */;
    %44 = cast(%var_687, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
    %45 = log(%44) /* ty=Tensor[(4, 14, 4), float64] */;
    %46 = cast(%var_687, dtype="uint8") /* ty=Tensor[(4, 14, 4), uint8] */;
    %47 = shape_of(%var_686, dtype="int32") /* ty=Tensor[(3), int32] */;
    %48 = cast(%var_686, dtype="uint8") /* ty=Tensor[(4, 14, 4), uint8] */;
    %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %50 = left_shift(%48, %49) /* ty=Tensor[(4, 14, 4), uint8] */;
    %51 = cast(%50, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
    %52 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
    %53 = cast(%45, dtype="float64") /* ty=Tensor[(4, 14, 4), float64] */;
    %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %55 = floor_mod(%53, %54) /* ty=Tensor[(4, 14, 4), float64] */;
    %56 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(%55, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %60 = equal(%58, %59) /* ty=Tensor[(4, 14, 4), bool] */;
    %61 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%60, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %65 = cast(%50, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %66 = shape_of(%var_686, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%var_686, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %69 = greater(%67, %68) /* ty=Tensor[(4, 14, 4), bool] */;
    %70 = cast(%69, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %71 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%55, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %74 = logical_or(%72, %73) /* ty=Tensor[(4, 14, 4), bool] */;
    %75 = cast(%var_734, dtype="int16") /* ty=Tensor[(4, 14, 4), int16] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="int16") /* ty=Tensor[(4, 14, 4), int16] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
    %80 = reshape(%79, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float64] */;
    %81 = @func_633(%43) /* ty=Tensor[(1, 15, 11), float64] */;
    %82 = less_equal(%63, %64) /* ty=Tensor[(4, 14, 4), bool] */;
    %83 = maximum(%77, %78) /* ty=Tensor[(4, 14, 4), int16] */;
    %84 = @func_633(%80) /* ty=Tensor[(1, 15, 11), float64] */;
    (%81, meta[relay.Constant][2] /* ty=Tensor[(165), float64] */, %82, %83, %84)
  };
  %85(%var_747, %var_748, %var_749) /* ty=(Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) */
}

def @func_5366(%var_5364: Tensor[(512), float64]) -> (Tensor[(90), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) {
  @func_5363(%var_5364) /* ty=(Tensor[(90), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) */
}

def @func_2186(%var_2165: Tensor[(1694), float64], %var_2176: Tensor[(24), int64]) -> (Tensor[(?, 14, ?), float32], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(24), int64]) {
  %86 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %87 = cast(%var_2165, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %88 = reshape(%87, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), float64] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
  %91 = cast(%var_2176, dtype="int64") /* ty=Tensor[(24), int64] */;
  %92 = reshape(%89, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %93 = reshape(%90, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
  %94 = reshape(%91, newshape=[24]) /* ty=Tensor[(24), int64] */;
  %95 = @func_264(%92, %93, %94) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
  %96 = %86.0;
  %97 = @func_1676(%88) /* ty=Tensor[(11, 14, 11), float64] */;
  %98 = %95.2;
  (%96, %97, %var_2165, %98, meta[relay.Constant][3] /* ty=Tensor[(480), uint32] */, %var_2176)
}

def @func_2211() -> Tensor[(?, 14, ?), float32] {
  @func_2209() /* ty=Tensor[(?, 14, ?), float32] */
}

def @func_1194(%var_1192: int16, %var_1193: Tensor[(6, 1), int16]) -> Tensor[(6, 1), int16] {
  @func_1190(%var_1192, %var_1193) /* ty=Tensor[(6, 1), int16] */
}

def @func_1562() -> Tensor[(?, 14, ?), float64] {
  @func_1560() /* ty=Tensor[(?, 14, ?), float64] */
}

def @func_268(%var_265: Tensor[(16, 5, 6), uint32], %var_266: Tensor[(16, 5, 6), uint32], %var_267: Tensor[(24), int64]) -> (Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) {
  %110 = fn (%var_238: Tensor[(16, 5, 6), uint32], %var_239: Tensor[(16, 5, 6), uint32], %var_257: Tensor[(24), int64]) -> (Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) {
    %99 = cast(%var_239, dtype="uint32") /* ty=Tensor[(16, 5, 6), uint32] */;
    %100 = shape_of(%var_238, dtype="int32") /* ty=Tensor[(3), int32] */;
    %101 = cast(%var_238, dtype="uint32") /* ty=Tensor[(16, 5, 6), uint32] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %103 = cast(%var_238, dtype="float64") /* ty=Tensor[(16, 5, 6), float64] */;
    %104 = cast(%var_257, dtype="int64") /* ty=Tensor[(24), int64] */;
    %105 = reshape(%104, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), int64] */;
    %106 = @func_100(%105) /* ty=(Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) */;
    %107 = maximum(%101, %102) /* ty=Tensor[(16, 5, 6), uint32] */;
    %108 = sigmoid(%103) /* ty=Tensor[(16, 5, 6), float64] */;
    %109 = %106.2;
    (%107, %108, %109, %var_257)
  };
  %110(%var_265, %var_266, %var_267) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */
}

def @func_4588(%var_4583: Tensor[(429, 2), float32]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(429, 2), float32], Tensor[(?, 14, ?), float32]) {
  %111 = cast(%var_4583, dtype="float32") /* ty=Tensor[(429, 2), float32] */;
  %112 = reshape(%111, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %113 = @func_845(%112) /* ty=(Tensor[(11, 6, 13), float32],) */;
  %114 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
  %115 = %113.0;
  %116 = @func_3884() /* ty=Tensor[(?, 14, ?), float32] */;
  (%114, %115, %var_4583, %116)
}

def @func_2225() -> Tensor[(?, 14, ?), float32] {
  @func_2209() /* ty=Tensor[(?, 14, ?), float32] */
}

def @func_3736(%var_3650: Tensor[(13, 14, 8), float32], %var_3659: Tensor[(336), float32], %var_3729: Tensor[(96), int8]) -> (Tensor[(13, 14, 8), float64], Tensor[(2, 14, 12), int8], Tensor[(14), float32], Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), int16], Tensor[(2, 14, 12), float32], Tensor[(13, 14, 8), bool], Tensor[(1, 15, 11), float64], Tensor[(96), int8], Tensor[(1, 224), uint8]) {
  %117 = @func_2225() /* ty=Tensor[(?, 14, ?), float32] */;
  %118 = cast(%117, dtype="float64") /* ty=Tensor[(?, 14, ?), float64] */;
  %119 = cast(%var_3650, dtype="float64") /* ty=Tensor[(13, 14, 8), float64] */;
  %120 = cast(%var_3659, dtype="float32") /* ty=Tensor[(336), float32] */;
  %121 = reshape(%120, newshape=[2, 14, 12]) /* ty=Tensor[(2, 14, 12), float32] */;
  %122 = @func_3574(%121) /* ty=(Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) */;
  %123 = @func_2472() /* ty=Tensor[(2, 14, 12), float32] */;
  %124 = cast(%var_3659, dtype="int16") /* ty=Tensor[(336), int16] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="int16") /* ty=Tensor[(2, 14, 12), int16] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %128 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %129 = cast(%var_3650, dtype="bool") /* ty=Tensor[(13, 14, 8), bool] */;
  %130 = cast(%117, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
  %131 = cast(%var_3729, dtype="int8") /* ty=Tensor[(96), int8] */;
  %132 = cast(%var_3729, dtype="int8") /* ty=Tensor[(96), int8] */;
  %133 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 224), uint8] */, dtype="uint8") /* ty=Tensor[(1, 224), uint8] */;
  %134 = reshape(%131, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %135 = reshape(%132, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %136 = reshape(%133, newshape=[224]) /* ty=Tensor[(224), uint8] */;
  %137 = @func_2306(%134, %135, %136) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */;
  %138 = floor_mod(%118, %119) /* ty=Tensor[(13, 14, 8), float64] */;
  %139 = %122.0;
  %140 = @func_1741() /* ty=Tensor[(14), float32] */;
  %141 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %142 = logical_xor(%126, %127) /* ty=Tensor[(2, 14, 12), int16] */;
  %143 = %128.0;
  %144 = greater(%129, %130) /* ty=Tensor[(13, 14, 8), bool] */;
  %145 = %137.1;
  (%138, %139, %140, %141, %142, %143, %144, %145, %var_3729, meta[relay.Constant][4] /* ty=Tensor[(1, 224), uint8] */)
}

def @func_2943() -> Tensor[(2, 14, 12), float32] {
  @func_2139() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_1155(%var_1114: Tensor[(14, 15, 5), float32], %var_1115: Tensor[(14, 15, 5), float32], %var_1153: Tensor[(224), uint8]) -> (Tensor[(14, 15, 5), float32], Tensor[(14, 15, 5), float64], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) {
  %146 = cast(%var_1115, dtype="float32") /* ty=Tensor[(14, 15, 5), float32] */;
  %147 = shape_of(%var_1114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_1114, dtype="float32") /* ty=Tensor[(14, 15, 5), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %150 = cast(%var_1114, dtype="float64") /* ty=Tensor[(14, 15, 5), float64] */;
  %151 = cast(%var_1153, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %152 = cast(%var_1153, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %153 = cast(%var_1153, dtype="bool") /* ty=Tensor[(224), bool] */;
  %154 = reshape(%151, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
  %155 = reshape(%152, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
  %156 = reshape(%153, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), bool] */;
  %157 = @func_746(%154, %155, %156) /* ty=(Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) */;
  %158 = divide(%148, %149) /* ty=Tensor[(14, 15, 5), float32] */;
  %159 = log(%150) /* ty=Tensor[(14, 15, 5), float64] */;
  %160 = %157.0;
  (%158, %159, %160, %var_1153)
}

def @func_622(%var_599: Tensor[(1, 14, 1), float32]) -> Tensor[(?, 14, ?), float64] {
  %161 = cast(%var_599, dtype="float32") /* ty=Tensor[(1, 14, 1), float32] */;
  %162 = erf(%161) /* ty=Tensor[(1, 14, 1), float32] */;
  %163 = cast(%162, dtype="float64") /* ty=Tensor[(1, 14, 1), float64] */;
  %164 = shape_of(%var_599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_599, dtype="float64") /* ty=Tensor[(1, 14, 1), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%165, %166) /* ty=Tensor[(?, 14, ?), float64] */
}

def @func_4340() -> (Tensor[(?, 14, ?), float32], Tensor[(2, 14, 12), float64]) {
  %172 = fn () -> (Tensor[(?, 14, ?), float32], Tensor[(2, 14, 12), float64]) {
    %167 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
    %168 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
    %169 = cast(%168, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
    %170 = %167.0;
    %171 = asinh(%169) /* ty=Tensor[(2, 14, 12), float64] */;
    (%170, %171)
  };
  %172() /* ty=(Tensor[(?, 14, ?), float32], Tensor[(2, 14, 12), float64]) */
}

def @func_4501() -> (Tensor[(?, 14, ?), float64], Tensor[(13, 12, 9), int16], Tensor[(54, 26), int16], Tensor[(11, 14, 11), float64], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8]) {
  %189 = fn () -> (Tensor[(?, 14, ?), float64], Tensor[(13, 12, 9), int16], Tensor[(54, 26), int16], Tensor[(11, 14, 11), float64], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8]) {
    %173 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
    %174 = cast(meta[relay.Constant][5] /* ty=Tensor[(54, 26), int16] */, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
    %175 = cast(meta[relay.Constant][5] /* ty=Tensor[(54, 26), int16] */, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
    %176 = reshape(%174, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
    %177 = reshape(%175, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
    %178 = @func_3497(%176, %177) /* ty=(Tensor[(13, 12, 9), int16],) */;
    %179 = cast(meta[relay.Constant][6] /* ty=Tensor[(297), float32] */, dtype="float32") /* ty=Tensor[(297), float32] */;
    %180 = cast(meta[relay.Constant][7] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %181 = cast(meta[relay.Constant][8] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %182 = reshape(%179, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float32] */;
    %183 = reshape(%180, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
    %184 = reshape(%181, newshape=[2, 112]) /* ty=Tensor[(2, 112), uint8] */;
    %185 = @func_1923(%182, %183, %184) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) */;
    %186 = %173.0;
    %187 = %178.0;
    %188 = %185.3;
    (%186, %187, meta[relay.Constant][5] /* ty=Tensor[(54, 26), int16] */, %188, meta[relay.Constant][6] /* ty=Tensor[(297), float32] */, meta[relay.Constant][7] /* ty=Tensor[(1050), float32] */, meta[relay.Constant][8] /* ty=Tensor[(224), uint8] */)
  };
  %189() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(13, 12, 9), int16], Tensor[(54, 26), int16], Tensor[(11, 14, 11), float64], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8]) */
}

def @func_5363(%var_5352: Tensor[(512), float64]) -> (Tensor[(90), float64], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) {
  %190 = cast(%var_5352, dtype="float64") /* ty=Tensor[(512), float64] */;
  %191 = reshape(%190, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
  %192 = @func_1285(%191) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) */;
  %193 = @func_4284() /* ty=Tensor[(90), float64] */;
  %194 = %192.0;
  (%193, %194, %var_5352)
}

def @func_1742() -> Tensor[(14), float32] {
  %196 = fn () -> Tensor[(14), float32] {
    %195 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
    %195.1
  };
  %196() /* ty=Tensor[(14), float32] */
}

def @func_1974() -> (Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) {
  %202 = fn () -> (Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) {
    %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
    %198 = reshape(%197, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
    %199 = @func_1361(%198) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
    %200 = @func_1741() /* ty=Tensor[(14), float32] */;
    %201 = %199.2;
    (%200, %201, meta[relay.Constant][9] /* ty=Tensor[(63), float64] */)
  };
  %202() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */
}

def @func_2643(%var_2641: Tensor[(6, 9, 14), uint16], %var_2642: Tensor[(6, 9, 14), uint16]) -> (Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), bool]) {
  @func_2639(%var_2641, %var_2642) /* ty=(Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), bool]) */
}

def @func_2088(%var_2085: Tensor[(90), float64], %var_2086: Tensor[(512), float64], %var_2087: Tensor[(3, 10, 3), float64]) -> (Tensor[(14), float32], Tensor[(90), float64], Tensor[(6, 1), int16], int16, Tensor[(6), int16], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(3, 10, 3), int8], Tensor[(63), float64], Tensor[(6, 1), int16], Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64]) {
  @func_2083(%var_2085, %var_2086, %var_2087) /* ty=(Tensor[(14), float32], Tensor[(90), float64], Tensor[(6, 1), int16], int16, Tensor[(6), int16], Tensor[(16, 2, 16), float64], Tensor[(512), float64], Tensor[(3, 10, 3), int8], Tensor[(63), float64], Tensor[(6, 1), int16], Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64]) */
}

def @func_4526() -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) {
  %207 = fn () -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) {
    %203 = @func_2257() /* ty=(Tensor[(2, 14, 12), float32],) */;
    %204 = @func_2664() /* ty=(Tensor[(2, 14, 12), float32],) */;
    %205 = %203.0;
    %206 = %204.0;
    (%205, %206)
  };
  %207() /* ty=(Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) */
}

def @func_133(%var_118: Tensor[(3, 10, 3), float64]) -> (Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) {
  %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %209 = shape_of(%var_118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_118, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %212 = cast(%var_118, dtype="float32") /* ty=Tensor[(3, 10, 3), float32] */;
  %213 = cosh(%212) /* ty=Tensor[(3, 10, 3), float32] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %215 = floor_divide(%210, %211) /* ty=Tensor[(3, 10, 3), float64] */;
  %216 = rsqrt(%214) /* ty=Tensor[(3, 10, 3), float64] */;
  (%215, %216)
}

def @func_3309(%var_3307: Tensor[(14, 10, 13), float32], %var_3308: Tensor[(98), int32]) -> (Tensor[(14), float32], Tensor[(14, 10, 13), float64], Tensor[(98), int32], Tensor[(98), int32], Tensor[(14, 10, 13), bool]) {
  @func_3305(%var_3307, %var_3308) /* ty=(Tensor[(14), float32], Tensor[(14, 10, 13), float64], Tensor[(98), int32], Tensor[(98), int32], Tensor[(14, 10, 13), bool]) */
}

def @func_4421() -> (Tensor[(2, 14, 12), float32],) {
  %219 = fn () -> (Tensor[(2, 14, 12), float32],) {
    %217 = @func_3008() /* ty=(Tensor[(2, 14, 12), float32],) */;
    %218 = %217.0;
    (%218,)
  };
  %219() /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_635(%var_634: Tensor[(1, 15, 11), float64]) -> Tensor[(1, 15, 11), float64] {
  %221 = fn (%var_629: Tensor[(1, 15, 11), float64]) -> Tensor[(1, 15, 11), float64] {
    %220 = cast(%var_629, dtype="float64") /* ty=Tensor[(1, 15, 11), float64] */;
    erf(%220) /* ty=Tensor[(1, 15, 11), float64] */
  };
  %221(%var_634) /* ty=Tensor[(1, 15, 11), float64] */
}

def @func_2209() -> Tensor[(?, 14, ?), float32] {
  %222 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %222.0
}

def @func_2190(%var_2188: Tensor[(1694), float64], %var_2189: Tensor[(24), int64]) -> (Tensor[(?, 14, ?), float32], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(24), int64]) {
  @func_2186(%var_2188, %var_2189) /* ty=(Tensor[(?, 14, ?), float32], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(24), int64]) */
}

def @func_4247() -> Tensor[(2, 14, 12), float32] {
  %224 = fn () -> Tensor[(2, 14, 12), float32] {
    %223 = @func_3854() /* ty=(Tensor[(2, 14, 12), float32],) */;
    %223.0
  };
  %224() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_2258() -> (Tensor[(2, 14, 12), float32],) {
  %226 = fn () -> (Tensor[(2, 14, 12), float32],) {
    %225 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
    (%225,)
  };
  %226() /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_3855() -> (Tensor[(2, 14, 12), float32],) {
  %228 = fn () -> (Tensor[(2, 14, 12), float32],) {
    %227 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
    (%227,)
  };
  %228() /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_2945() -> Tensor[(2, 14, 12), float32] {
  @func_2943() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_1190(%var_1175: int16, %var_1176: Tensor[(6, 1), int16]) -> Tensor[(6, 1), int16] {
  %229 = cast(%var_1175, dtype="int16") /* ty=int16 */;
  %230 = cast(%var_1176, dtype="int16") /* ty=Tensor[(6, 1), int16] */;
  multiply(%229, %230) /* ty=Tensor[(6, 1), int16] */
}

def @func_4399(%var_4397: Tensor[(10, 15), float64], %var_4398: Tensor[(1404), int16]) -> (Tensor[(10, 15), float64], Tensor[(13, 12, 9), int16], Tensor[(1404), int16]) {
  %239 = fn (%var_4368: Tensor[(10, 15), float64], %var_4392: Tensor[(1404), int16]) -> (Tensor[(10, 15), float64], Tensor[(13, 12, 9), int16], Tensor[(1404), int16]) {
    %231 = cast(%var_4368, dtype="float64") /* ty=Tensor[(10, 15), float64] */;
    %232 = cast(%var_4392, dtype="int16") /* ty=Tensor[(1404), int16] */;
    %233 = cast(%var_4392, dtype="int16") /* ty=Tensor[(1404), int16] */;
    %234 = reshape(%232, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
    %235 = reshape(%233, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
    %236 = @func_3497(%234, %235) /* ty=(Tensor[(13, 12, 9), int16],) */;
    %237 = asin(%231) /* ty=Tensor[(10, 15), float64] */;
    %238 = %236.0;
    (%237, %238, %var_4392)
  };
  %239(%var_4397, %var_4398) /* ty=(Tensor[(10, 15), float64], Tensor[(13, 12, 9), int16], Tensor[(1404), int16]) */
}

def @func_2141() -> Tensor[(2, 14, 12), float32] {
  @func_2139() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_2592(%var_2590: Tensor[(3, 14, 8), float32], %var_2591: Tensor[(7, 9), float64]) -> (Tensor[(3, 14, 8), uint16], Tensor[(11, 6, 13), float32], Tensor[(7, 9), float64]) {
  %248 = fn (%var_2570: Tensor[(3, 14, 8), float32], %var_2579: Tensor[(7, 9), float64]) -> (Tensor[(3, 14, 8), uint16], Tensor[(11, 6, 13), float32], Tensor[(7, 9), float64]) {
    %240 = @func_2225() /* ty=Tensor[(?, 14, ?), float32] */;
    %241 = cast(%240, dtype="uint16") /* ty=Tensor[(?, 14, ?), uint16] */;
    %242 = cast(%var_2570, dtype="uint16") /* ty=Tensor[(3, 14, 8), uint16] */;
    %243 = cast(%var_2579, dtype="float64") /* ty=Tensor[(7, 9), float64] */;
    %244 = reshape(%243, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
    %245 = @func_1361(%244) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
    %246 = right_shift(%241, %242) /* ty=Tensor[(3, 14, 8), uint16] */;
    %247 = %245.1;
    (%246, %247, %var_2579)
  };
  %248(%var_2590, %var_2591) /* ty=(Tensor[(3, 14, 8), uint16], Tensor[(11, 6, 13), float32], Tensor[(7, 9), float64]) */
}

def @func_5197(%var_5195: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), float64], Tensor[(13, 12, 9), int16], Tensor[(18, 78), int16]) {
  @func_5194(%var_5195) /* ty=(Tensor[(2, 14, 12), float64], Tensor[(13, 12, 9), int16], Tensor[(18, 78), int16]) */
}

def @func_4591(%var_4589: Tensor[(429, 2), float32]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(429, 2), float32], Tensor[(?, 14, ?), float32]) {
  @func_4588(%var_4589) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(429, 2), float32], Tensor[(?, 14, ?), float32]) */
}

def @func_4731(%var_4730: Tensor[(11, 6, 16), float32]) -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(?, 14, ?), float32], Tensor[(11, 6, 16), float64], Tensor[(11, 6, 16), uint32], Tensor[(16, 5, 6), uint32], Tensor[(1, 480), uint32], Tensor[(24), int64]) {
  %274 = fn (%var_4658: Tensor[(11, 6, 16), float32]) -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(?, 14, ?), float32], Tensor[(11, 6, 16), float64], Tensor[(11, 6, 16), uint32], Tensor[(16, 5, 6), uint32], Tensor[(1, 480), uint32], Tensor[(24), int64]) {
    %249 = cast(%var_4658, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
    %250 = asinh(%249) /* ty=Tensor[(11, 6, 16), float32] */;
    %251 = cast(%250, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
    %252 = cosh(%251) /* ty=Tensor[(11, 6, 16), float64] */;
    %253 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 6, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
    %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%252, dtype="float64") /* ty=Tensor[(11, 6, 16), float64] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %257 = cast(%var_4658, dtype="float32") /* ty=Tensor[(11, 6, 16), float32] */;
    %258 = sigmoid(%257) /* ty=Tensor[(11, 6, 16), float32] */;
    %259 = cast(%258, dtype="uint32") /* ty=Tensor[(11, 6, 16), uint32] */;
    %260 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %261 = cast(%252, dtype="uint32") /* ty=Tensor[(11, 6, 16), uint32] */;
    %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %263 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 480), uint32] */, dtype="uint32") /* ty=Tensor[(1, 480), uint32] */;
    %264 = cast(meta[relay.Constant][13] /* ty=Tensor[(24), int64] */, dtype="int64") /* ty=Tensor[(24), int64] */;
    %265 = reshape(%263, newshape=[2, 240]) /* ty=Tensor[(2, 240), uint32] */;
    %266 = reshape(%264, newshape=[24]) /* ty=Tensor[(24), int64] */;
    %267 = @func_3436(%265, %266) /* ty=(Tensor[(14), float32], Tensor[(16, 5, 6), uint32], Tensor[(2, 240), uint32], Tensor[(24), int64]) */;
    %268 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
    %269 = @func_4190() /* ty=Tensor[(2, 14, 12), float32] */;
    %270 = @func_2225() /* ty=Tensor[(?, 14, ?), float32] */;
    %271 = floor_mod(%255, %256) /* ty=Tensor[(11, 6, 16), float64] */;
    %272 = maximum(%261, %262) /* ty=Tensor[(11, 6, 16), uint32] */;
    %273 = %267.1;
    (%268, %269, %270, %271, %272, %273, meta[relay.Constant][12] /* ty=Tensor[(1, 480), uint32] */, meta[relay.Constant][13] /* ty=Tensor[(24), int64] */)
  };
  %274(%var_4730) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(?, 14, ?), float32], Tensor[(11, 6, 16), float64], Tensor[(11, 6, 16), uint32], Tensor[(16, 5, 6), uint32], Tensor[(1, 480), uint32], Tensor[(24), int64]) */
}

def @func_1928(%var_1925: Tensor[(11, 3, 9), float32], %var_1926: Tensor[(1050), float32], %var_1927: Tensor[(2, 112), uint8]) -> (Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) {
  @func_1923(%var_1925, %var_1926, %var_1927) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) */
}

def @func_847(%var_846: Tensor[(11, 6, 13), float32]) -> (Tensor[(11, 6, 13), float32],) {
  %282 = fn (%var_802: Tensor[(11, 6, 13), float32]) -> (Tensor[(11, 6, 13), float32],) {
    %275 = cast(%var_802, dtype="float32") /* ty=Tensor[(11, 6, 13), float32] */;
    %276 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(11, 6, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 6, 13), float32] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %279 = floor_divide(%277, %278) /* ty=Tensor[(11, 6, 13), float32] */;
    %280 = cast(%279, dtype="float32") /* ty=Tensor[(11, 6, 13), float32] */;
    %281 = erf(%280) /* ty=Tensor[(11, 6, 13), float32] */;
    (%281,)
  };
  %282(%var_846) /* ty=(Tensor[(11, 6, 13), float32],) */
}

def @func_1160(%var_1157: Tensor[(14, 15, 5), float32], %var_1158: Tensor[(14, 15, 5), float32], %var_1159: Tensor[(224), uint8]) -> (Tensor[(14, 15, 5), float32], Tensor[(14, 15, 5), float64], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) {
  @func_1155(%var_1157, %var_1158, %var_1159) /* ty=(Tensor[(14, 15, 5), float32], Tensor[(14, 15, 5), float64], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */
}

def @func_4866(%var_4804: Tensor[(224), uint8], %var_4820: Tensor[(12, 15, 11), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(96), int8], Tensor[(224), uint8], Tensor[(2, 14, 12), float32], Tensor[(12, 15, 11), int16], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) {
  %283 = cast(meta[relay.Constant][15] /* ty=Tensor[(96), int8] */, dtype="int8") /* ty=Tensor[(96), int8] */;
  %284 = cast(meta[relay.Constant][15] /* ty=Tensor[(96), int8] */, dtype="int8") /* ty=Tensor[(96), int8] */;
  %285 = cast(%var_4804, dtype="uint8") /* ty=Tensor[(224), uint8] */;
  %286 = reshape(%283, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %287 = reshape(%284, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), int8] */;
  %288 = reshape(%285, newshape=[224]) /* ty=Tensor[(224), uint8] */;
  %289 = @func_2306(%286, %287, %288) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */;
  %290 = %289.1;
  %291 = cast(%290, dtype="int16") /* ty=Tensor[(1, 15, 11), int16] */;
  %292 = cast(%var_4820, dtype="int16") /* ty=Tensor[(12, 15, 11), int16] */;
  %293 = @func_4420() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %294 = @func_4603() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %295 = @func_2414() /* ty=Tensor[(2, 14, 12), float32] */;
  %296 = @func_4246() /* ty=Tensor[(2, 14, 12), float32] */;
  %297 = bitwise_and(%291, %292) /* ty=Tensor[(12, 15, 11), int16] */;
  %298 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
  %299 = %293.0;
  %300 = %294.0;
  (%295, meta[relay.Constant][15] /* ty=Tensor[(96), int8] */, %var_4804, %296, %297, %298, %299, %300)
}

def @func_3576(%var_3575: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) {
  %313 = fn (%var_3524: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) {
    %301 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
    %302 = cast(%var_3524, dtype="int8") /* ty=Tensor[(2, 14, 12), int8] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%301, dtype="int8") /* ty=Tensor[(2, 14, 12), int8] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %306 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
    %307 = reshape(%306, newshape=[480]) /* ty=Tensor[(480), uint32] */;
    %308 = @func_2862(%307) /* ty=(Tensor[(?, 14, ?), float64], Tensor[(?, 14, ?), bool], Tensor[(16, 5, 6), float64], Tensor[(480), uint32], Tensor[(24), int64], Tensor[(?, 14, ?), int8]) */;
    %309 = cast(%var_3524, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
    %310 = bitwise_xor(%304, %305) /* ty=Tensor[(2, 14, 12), int8] */;
    %311 = %308.0;
    %312 = sqrt(%309) /* ty=Tensor[(2, 14, 12), float64] */;
    (%310, %311, meta[relay.Constant][16] /* ty=Tensor[(480), uint32] */, %312)
  };
  %313(%var_3575) /* ty=(Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) */
}

def @func_2473() -> Tensor[(2, 14, 12), float32] {
  %314 = fn () -> Tensor[(2, 14, 12), float32] {
    @func_2414() /* ty=Tensor[(2, 14, 12), float32] */
  };
  %314() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_4285() -> Tensor[(90), float64] {
  %316 = fn () -> Tensor[(90), float64] {
    %315 = @func_2923() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64], Tensor[(90), float64]) */;
    %315.2
  };
  %316() /* ty=Tensor[(90), float64] */
}

def @func_2463(%var_2461: Tensor[(1, 63), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(1, 63), float32]) {
  @func_2460(%var_2461) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(1, 63), float32]) */
}

def @func_4455(%var_4454: Tensor[(8, 12), float32]) -> Tensor[(8, 12), float32] {
  %318 = fn (%var_4446: Tensor[(8, 12), float32]) -> Tensor[(8, 12), float32] {
    %317 = cast(%var_4446, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
    atan(%317) /* ty=Tensor[(8, 12), float32] */
  };
  %318(%var_4454) /* ty=Tensor[(8, 12), float32] */
}

def @func_2864(%var_2863: Tensor[(480), uint32]) -> (Tensor[(?, 14, ?), float64], Tensor[(?, 14, ?), bool], Tensor[(16, 5, 6), float64], Tensor[(480), uint32], Tensor[(24), int64], Tensor[(?, 14, ?), int8]) {
  %352 = fn (%var_2826: Tensor[(480), uint32]) -> (Tensor[(?, 14, ?), float64], Tensor[(?, 14, ?), bool], Tensor[(16, 5, 6), float64], Tensor[(480), uint32], Tensor[(24), int64], Tensor[(?, 14, ?), int8]) {
    %319 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
    %320 = cast(%319, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
    %321 = reshape(%320, newshape=[1, 14, 1]) /* ty=Tensor[(1, 14, 1), float32] */;
    %322 = cast(%319, dtype="float64") /* ty=Tensor[(?, 14, ?), float64] */;
    %323 = cosh(%322) /* ty=Tensor[(?, 14, ?), float64] */;
    %324 = cast(%319, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
    %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%323, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %328 = mod(%326, %327) /* ty=Tensor[(?, 14, ?), float32] */;
    %329 = cast(%328, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
    %330 = log10(%329) /* ty=Tensor[(?, 14, ?), float32] */;
    %331 = cast(%330, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
    %332 = acosh(%331) /* ty=Tensor[(?, 14, ?), float32] */;
    %333 = cast(%330, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
    %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%332, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %337 = cast(%var_2826, dtype="uint32") /* ty=Tensor[(480), uint32] */;
    %338 = cast(%var_2826, dtype="uint32") /* ty=Tensor[(480), uint32] */;
    %339 = cast(meta[relay.Constant][17] /* ty=Tensor[(24), int64] */, dtype="int64") /* ty=Tensor[(24), int64] */;
    %340 = reshape(%337, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
    %341 = reshape(%338, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
    %342 = reshape(%339, newshape=[24]) /* ty=Tensor[(24), int64] */;
    %343 = @func_264(%340, %341, %342) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
    %344 = cast(%330, dtype="int8") /* ty=Tensor[(?, 14, ?), int8] */;
    %345 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%332, dtype="int8") /* ty=Tensor[(?, 14, ?), int8] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %348 = @func_622(%321) /* ty=Tensor[(?, 14, ?), float64] */;
    %349 = greater(%335, %336) /* ty=Tensor[(?, 14, ?), bool] */;
    %350 = %343.1;
    %351 = left_shift(%346, %347) /* ty=Tensor[(?, 14, ?), int8] */;
    (%348, %349, %350, %var_2826, meta[relay.Constant][17] /* ty=Tensor[(24), int64] */, %351)
  };
  %352(%var_2863) /* ty=(Tensor[(?, 14, ?), float64], Tensor[(?, 14, ?), bool], Tensor[(16, 5, 6), float64], Tensor[(480), uint32], Tensor[(24), int64], Tensor[(?, 14, ?), int8]) */
}

def @func_1363(%var_1362: Tensor[(7, 9, 1), float64]) -> (Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) {
  %359 = fn (%var_1353: Tensor[(7, 9, 1), float64]) -> (Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) {
    %353 = cast(%var_1353, dtype="float64") /* ty=Tensor[(7, 9, 1), float64] */;
    %354 = cast(meta[relay.Constant][18] /* ty=Tensor[(858), float32] */, dtype="float32") /* ty=Tensor[(858), float32] */;
    %355 = reshape(%354, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
    %356 = @func_845(%355) /* ty=(Tensor[(11, 6, 13), float32],) */;
    %357 = asinh(%353) /* ty=Tensor[(7, 9, 1), float64] */;
    %358 = %356.0;
    (%357, %358, meta[relay.Constant][18] /* ty=Tensor[(858), float32] */)
  };
  %359(%var_1362) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */
}

def @func_3267() -> Tensor[(2, 14, 12), float32] {
  %361 = fn () -> Tensor[(2, 14, 12), float32] {
    %360 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
    %360.0
  };
  %361() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_1546() -> (Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) {
  %362 = cast(meta[relay.Constant][19] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %363 = reshape(%362, newshape=[1, 14, 1]) /* ty=Tensor[(1, 14, 1), float32] */;
  %364 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %365 = rsqrt(%364) /* ty=Tensor[(2, 13, 6), float32] */;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(2, 13, 6), float64] */;
  %367 = acosh(%366) /* ty=Tensor[(2, 13, 6), float64] */;
  %368 = cast(%365, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="float32") /* ty=Tensor[(2, 13, 6), float32] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %372 = @func_622(%363) /* ty=Tensor[(?, 14, ?), float64] */;
  %373 = floor_mod(%370, %371) /* ty=Tensor[(2, 13, 6), float32] */;
  (%372, meta[relay.Constant][19] /* ty=Tensor[(14), float32] */, %373)
}

def @func_2639(%var_2603: Tensor[(6, 9, 14), uint16], %var_2614: Tensor[(6, 9, 14), uint16]) -> (Tensor[(6, 9, 14), uint16], Tensor[(6, 9, 14), bool]) {
  %374 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 9, 14), uint16] */, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %375 = shape_of(%var_2603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_2603, dtype="uint16") /* ty=Tensor[(6, 9, 14), uint16] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %378 = cast(%var_2614, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %379 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(6, 9, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 9, 14), uint16] */, dtype="bool") /* ty=Tensor[(6, 9, 14), bool] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %382 = multiply(%376, %377) /* ty=Tensor[(6, 9, 14), uint16] */;
  %383 = greater(%380, %381) /* ty=Tensor[(6, 9, 14), bool] */;
  (%382, %383)
}

def @func_1770() -> (Tensor[(?, 14, ?), float32],) {
  %387 = fn () -> (Tensor[(?, 14, ?), float32],) {
    %384 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
    %385 = cast(%384, dtype="float32") /* ty=Tensor[(?, 14, ?), float32] */;
    %386 = rsqrt(%385) /* ty=Tensor[(?, 14, ?), float32] */;
    (%386,)
  };
  %387() /* ty=(Tensor[(?, 14, ?), float32],) */
}

def @func_102(%var_101: Tensor[(2, 12, 1), int64]) -> (Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) {
  %397 = fn (%var_55: Tensor[(2, 12, 1), int64]) -> (Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) {
    %388 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %389 = cast(%var_55, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
    %390 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %391 = cast(%var_55, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
    %392 = cast(%var_55, dtype="bool") /* ty=Tensor[(2, 12, 1), bool] */;
    %393 = cast(7 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %394 = greater_equal(%388, %389) /* ty=Tensor[(2, 12, 1), bool] */;
    %395 = logical_or(%390, %391) /* ty=Tensor[(2, 12, 1), bool] */;
    %396 = not_equal(%392, %393) /* ty=Tensor[(2, 12, 1), bool] */;
    (%394, %395, %396)
  };
  %397(%var_101) /* ty=(Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) */
}

def @func_2139() -> Tensor[(2, 14, 12), float32] {
  %398 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
  %399 = %398.0;
  %400 = cast(%399, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
  %401 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(2, 14, 12), bool] */;
  %402 = not_equal(%400, %401) /* ty=Tensor[(2, 14, 12), bool] */;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  acos(%403) /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_5275(%var_5273: Tensor[(2, 14, 12), float32], %var_5274: Tensor[(1056), float32]) -> (Tensor[(2, 14, 12), uint32], Tensor[(11, 6, 16), bool], Tensor[(1, 15, 11), float64], Tensor[(165), float64]) {
  %422 = fn (%var_5221: Tensor[(2, 14, 12), float32], %var_5231: Tensor[(1056), float32]) -> (Tensor[(2, 14, 12), uint32], Tensor[(11, 6, 16), bool], Tensor[(1, 15, 11), float64], Tensor[(165), float64]) {
    %404 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
    %405 = cast(%var_5221, dtype="uint32") /* ty=Tensor[(2, 14, 12), uint32] */;
    %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%404, dtype="uint32") /* ty=Tensor[(2, 14, 12), uint32] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %409 = cast(%var_5231, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %410 = reshape(%409, newshape=[11, 6, 16]) /* ty=Tensor[(11, 6, 16), float32] */;
    %411 = @func_4729(%410) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(?, 14, ?), float32], Tensor[(11, 6, 16), float64], Tensor[(11, 6, 16), uint32], Tensor[(16, 5, 6), uint32], Tensor[(1, 480), uint32], Tensor[(24), int64]) */;
    %412 = %411.3;
    %413 = cast(%var_5231, dtype="bool") /* ty=Tensor[(1056), bool] */;
    %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %415 = cast(%412, dtype="bool") /* ty=Tensor[(11, 6, 16), bool] */;
    %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %417 = cast(meta[relay.Constant][23] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
    %418 = reshape(%417, newshape=[1, 15, 11]) /* ty=Tensor[(1, 15, 11), float64] */;
    %419 = subtract(%407, %408) /* ty=Tensor[(2, 14, 12), uint32] */;
    %420 = greater(%415, %416) /* ty=Tensor[(11, 6, 16), bool] */;
    %421 = @func_633(%418) /* ty=Tensor[(1, 15, 11), float64] */;
    (%419, %420, %421, meta[relay.Constant][23] /* ty=Tensor[(165), float64] */)
  };
  %422(%var_5273, %var_5274) /* ty=(Tensor[(2, 14, 12), uint32], Tensor[(11, 6, 16), bool], Tensor[(1, 15, 11), float64], Tensor[(165), float64]) */
}

def @func_4656(%var_4654: Tensor[(5, 14, 12), float64]) -> (Tensor[(5, 14, 12), uint16], Tensor[(5, 14, 12), uint16]) {
  @func_4653(%var_4654) /* ty=(Tensor[(5, 14, 12), uint16], Tensor[(5, 14, 12), uint16]) */
}

def @func_2389(%var_2388: Tensor[(98), int32]) -> (Tensor[(2, 13, 6), float32], Tensor[(7, 2, 7), bool], Tensor[(14), int32], Tensor[(98), int32]) {
  %431 = fn (%var_2382: Tensor[(98), int32]) -> (Tensor[(2, 13, 6), float32], Tensor[(7, 2, 7), bool], Tensor[(14), int32], Tensor[(98), int32]) {
    %423 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
    %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(14), int32] */, dtype="int32") /* ty=Tensor[(14), int32] */;
    %425 = cast(%var_2382, dtype="int32") /* ty=Tensor[(98), int32] */;
    %426 = reshape(%424, newshape=[7, 2, 1]) /* ty=Tensor[(7, 2, 1), int32] */;
    %427 = reshape(%425, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), int32] */;
    %428 = @func_1323(%426, %427) /* ty=(Tensor[(7, 2, 7), bool],) */;
    %429 = %423.2;
    %430 = %428.0;
    (%429, %430, meta[relay.Constant][24] /* ty=Tensor[(14), int32] */, %var_2382)
  };
  %431(%var_2388) /* ty=(Tensor[(2, 13, 6), float32], Tensor[(7, 2, 7), bool], Tensor[(14), int32], Tensor[(98), int32]) */
}

def @func_3009() -> (Tensor[(2, 14, 12), float32],) {
  %433 = fn () -> (Tensor[(2, 14, 12), float32],) {
    %432 = @func_2414() /* ty=Tensor[(2, 14, 12), float32] */;
    (%432,)
  };
  %433() /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_4604() -> (Tensor[(2, 14, 12), float32],) {
  %435 = fn () -> (Tensor[(2, 14, 12), float32],) {
    %434 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
    (%434,)
  };
  %435() /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_1548() -> (Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) {
  @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */
}

def @func_4933(%var_4927: Tensor[(90), uint16]) -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(63), float64], Tensor[(2, 12, 1), bool], Tensor[(24), float64], Tensor[(3, 15, 2), uint16], uint16, Tensor[(90), uint16]) {
  %436 = @func_2664() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %437 = cast(meta[relay.Constant][25] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %438 = reshape(%437, newshape=[63]) /* ty=Tensor[(63), float64] */;
  %439 = @func_4082(%438) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) */;
  %440 = cast(meta[relay.Constant][26] /* ty=Tensor[(24), int64] */, dtype="int64") /* ty=Tensor[(24), int64] */;
  %441 = reshape(%440, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), int64] */;
  %442 = @func_100(%441) /* ty=(Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) */;
  %443 = cast(meta[relay.Constant][26] /* ty=Tensor[(24), int64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %444 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %445 = cast(%var_4927, dtype="uint16") /* ty=Tensor[(90), uint16] */;
  %446 = reshape(%444, newshape=[]) /* ty=uint16 */;
  %447 = reshape(%445, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), uint16] */;
  %448 = %436.0;
  %449 = %439.0;
  %450 = %442.1;
  %451 = sin(%443) /* ty=Tensor[(24), float64] */;
  %452 = @func_4570(%446, %447) /* ty=Tensor[(3, 15, 2), uint16] */;
  (%448, %449, meta[relay.Constant][25] /* ty=Tensor[(63), float64] */, %450, %451, %452, meta[relay.Constant][27] /* ty=uint16 */, %var_4927)
}

def @func_4936(%var_4934: Tensor[(90), uint16]) -> (Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(63), float64], Tensor[(2, 12, 1), bool], Tensor[(24), float64], Tensor[(3, 15, 2), uint16], uint16, Tensor[(90), uint16]) {
  @func_4933(%var_4934) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(63), float64], Tensor[(2, 12, 1), bool], Tensor[(24), float64], Tensor[(3, 15, 2), uint16], uint16, Tensor[(90), uint16]) */
}

def @func_5105() -> (Tensor[(2, 14, 12), int64], Tensor[(?, 14, ?), float32]) {
  %453 = @func_2257() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %454 = %453.0;
  %455 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 14, 12), float32] */, dtype="int64") /* ty=Tensor[(2, 14, 12), int64] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="int64") /* ty=Tensor[(2, 14, 12), int64] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %459 = bitwise_and(%457, %458) /* ty=Tensor[(2, 14, 12), int64] */;
  %460 = @func_2209() /* ty=Tensor[(?, 14, ?), float32] */;
  (%459, %460)
}

def @func_5194(%var_5170: Tensor[(2, 14, 12), float32]) -> (Tensor[(2, 14, 12), float64], Tensor[(13, 12, 9), int16], Tensor[(18, 78), int16]) {
  %461 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %462 = %461.0;
  %463 = cast(%var_5170, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %467 = cast(meta[relay.Constant][29] /* ty=Tensor[(18, 78), int16] */, dtype="int16") /* ty=Tensor[(18, 78), int16] */;
  %468 = cast(meta[relay.Constant][29] /* ty=Tensor[(18, 78), int16] */, dtype="int16") /* ty=Tensor[(18, 78), int16] */;
  %469 = reshape(%467, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %470 = reshape(%468, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), int16] */;
  %471 = @func_3497(%469, %470) /* ty=(Tensor[(13, 12, 9), int16],) */;
  %472 = multiply(%465, %466) /* ty=Tensor[(2, 14, 12), float64] */;
  %473 = %471.0;
  (%472, %473, meta[relay.Constant][29] /* ty=Tensor[(18, 78), int16] */)
}

def @func_5107() -> (Tensor[(2, 14, 12), int64], Tensor[(?, 14, ?), float32]) {
  @func_5105() /* ty=(Tensor[(2, 14, 12), int64], Tensor[(?, 14, ?), float32]) */
}

def @func_1923(%var_1840: Tensor[(11, 3, 9), float32], %var_1919: Tensor[(1050), float32], %var_1920: Tensor[(2, 112), uint8]) -> (Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) {
  %474 = cast(meta[relay.Constant][30] /* ty=Tensor[(63), float64] */, dtype="float64") /* ty=Tensor[(63), float64] */;
  %475 = reshape(%474, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
  %476 = @func_1361(%475) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
  %477 = cast(%var_1840, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %478 = sin(%477) /* ty=Tensor[(11, 3, 9), float32] */;
  %479 = cast(%478, dtype="uint16") /* ty=Tensor[(11, 3, 9), uint16] */;
  %480 = shape_of(%var_1840, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_1840, dtype="uint16") /* ty=Tensor[(11, 3, 9), uint16] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %483 = subtract(%481, %482) /* ty=Tensor[(11, 3, 9), uint16] */;
  %484 = cast(%483, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
  %485 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%478, dtype="bool") /* ty=Tensor[(11, 3, 9), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %488 = cast(meta[relay.Constant][31] /* ty=Tensor[(1694), float64] */, dtype="float64") /* ty=Tensor[(1694), float64] */;
  %489 = reshape(%488, newshape=[11, 14, 11]) /* ty=Tensor[(11, 14, 11), float64] */;
  %490 = cast(%483, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %491 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%478, dtype="float64") /* ty=Tensor[(11, 3, 9), float64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %494 = mod(%492, %493) /* ty=Tensor[(11, 3, 9), float64] */;
  %495 = cast(%483, dtype="int32") /* ty=Tensor[(11, 3, 9), int32] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="int32") /* ty=Tensor[(11, 3, 9), int32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %499 = cast(%var_1919, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %500 = cast(%var_1919, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %501 = cast(%var_1920, dtype="uint8") /* ty=Tensor[(2, 112), uint8] */;
  %502 = reshape(%499, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %503 = reshape(%500, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %504 = reshape(%501, newshape=[224]) /* ty=Tensor[(224), uint8] */;
  %505 = @func_1155(%502, %503, %504) /* ty=(Tensor[(14, 15, 5), float32], Tensor[(14, 15, 5), float64], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */;
  %506 = %476.0;
  %507 = less_equal(%486, %487) /* ty=Tensor[(11, 3, 9), bool] */;
  %508 = @func_1676(%489) /* ty=Tensor[(11, 14, 11), float64] */;
  %509 = logical_xor(%497, %498) /* ty=Tensor[(11, 3, 9), int32] */;
  %510 = %505.2;
  (%506, meta[relay.Constant][30] /* ty=Tensor[(63), float64] */, %507, %508, meta[relay.Constant][31] /* ty=Tensor[(1694), float64] */, %509, %510, %var_1919, %var_1920)
}

def @func_1326(%var_1324: Tensor[(7, 2, 1), int32], %var_1325: Tensor[(7, 2, 7), int32]) -> (Tensor[(7, 2, 7), bool],) {
  %514 = fn (%var_1304: Tensor[(7, 2, 1), int32], %var_1305: Tensor[(7, 2, 7), int32]) -> (Tensor[(7, 2, 7), bool],) {
    %511 = cast(%var_1304, dtype="bool") /* ty=Tensor[(7, 2, 1), bool] */;
    %512 = cast(%var_1305, dtype="bool") /* ty=Tensor[(7, 2, 7), bool] */;
    %513 = greater_equal(%511, %512) /* ty=Tensor[(7, 2, 7), bool] */;
    (%513,)
  };
  %514(%var_1324, %var_1325) /* ty=(Tensor[(7, 2, 7), bool],) */
}

def @func_3305(%var_3268: Tensor[(14, 10, 13), float32], %var_3294: Tensor[(98), int32]) -> (Tensor[(14), float32], Tensor[(14, 10, 13), float64], Tensor[(98), int32], Tensor[(98), int32], Tensor[(14, 10, 13), bool]) {
  %515 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
  %516 = cast(%var_3268, dtype="float64") /* ty=Tensor[(14, 10, 13), float64] */;
  %517 = cast(%var_3294, dtype="int32") /* ty=Tensor[(98), int32] */;
  %518 = reshape(%517, newshape=[98]) /* ty=Tensor[(98), int32] */;
  %519 = @func_2387(%518) /* ty=(Tensor[(2, 13, 6), float32], Tensor[(7, 2, 7), bool], Tensor[(14), int32], Tensor[(98), int32]) */;
  %520 = cast(%var_3268, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %521 = atan(%520) /* ty=Tensor[(14, 10, 13), float32] */;
  %522 = cast(%var_3268, dtype="bool") /* ty=Tensor[(14, 10, 13), bool] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="bool") /* ty=Tensor[(14, 10, 13), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = %515.0;
  %527 = erf(%516) /* ty=Tensor[(14, 10, 13), float64] */;
  %528 = %519.3;
  %529 = logical_and(%524, %525) /* ty=Tensor[(14, 10, 13), bool] */;
  (%526, %527, %528, %var_3294, %529)
}

def @func_2414() -> Tensor[(2, 14, 12), float32] {
  @func_2139() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_2924() -> (Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64], Tensor[(90), float64]) {
  %536 = fn () -> (Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64], Tensor[(90), float64]) {
    %530 = @func_2902() /* ty=(Tensor[(?, 14, ?), float64],) */;
    %531 = cast(meta[relay.Constant][32] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %532 = reshape(%531, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
    %533 = @func_133(%532) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(3, 10, 3), float64]) */;
    %534 = %530.0;
    %535 = %533.0;
    (%534, %535, meta[relay.Constant][32] /* ty=Tensor[(90), float64] */)
  };
  %536() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(3, 10, 3), float64], Tensor[(90), float64]) */
}

def @func_3625() -> Tensor[(2, 14, 12), float32] {
  %537 = fn () -> Tensor[(2, 14, 12), float32] {
    @func_2472() /* ty=Tensor[(2, 14, 12), float32] */
  };
  %537() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_2903() -> (Tensor[(?, 14, ?), float64],) {
  %541 = fn () -> (Tensor[(?, 14, ?), float64],) {
    %538 = @func_2209() /* ty=Tensor[(?, 14, ?), float32] */;
    %539 = cast(%538, dtype="float64") /* ty=Tensor[(?, 14, ?), float64] */;
    %540 = exp(%539) /* ty=Tensor[(?, 14, ?), float64] */;
    (%540,)
  };
  %541() /* ty=(Tensor[(?, 14, ?), float64],) */
}

def @func_3078(%var_3076: Tensor[(4, 12, 4), float64]) -> (Tensor[(4, 12, 4), float64],) {
  @func_3075(%var_3076) /* ty=(Tensor[(4, 12, 4), float64],) */
}

def @func_3886() -> Tensor[(?, 14, ?), float32] {
  @func_3884() /* ty=Tensor[(?, 14, ?), float32] */
}

def @func_3741(%var_3738: Tensor[(13, 14, 8), float32], %var_3739: Tensor[(336), float32], %var_3740: Tensor[(96), int8]) -> (Tensor[(13, 14, 8), float64], Tensor[(2, 14, 12), int8], Tensor[(14), float32], Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), int16], Tensor[(2, 14, 12), float32], Tensor[(13, 14, 8), bool], Tensor[(1, 15, 11), float64], Tensor[(96), int8], Tensor[(1, 224), uint8]) {
  @func_3736(%var_3738, %var_3739, %var_3740) /* ty=(Tensor[(13, 14, 8), float64], Tensor[(2, 14, 12), int8], Tensor[(14), float32], Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), int16], Tensor[(2, 14, 12), float32], Tensor[(13, 14, 8), bool], Tensor[(1, 15, 11), float64], Tensor[(96), int8], Tensor[(1, 224), uint8]) */
}

def @func_3993(%var_3991: Tensor[(858), float32]) -> (Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), float64], Tensor[(2, 14, 12), float32], Tensor[(2, 96), float64], Tensor[(11, 6, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(858), float64], Tensor[(2, 13, 6), float32], Tensor[(2, 14, 12), float32]) {
  @func_3990(%var_3991) /* ty=(Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), float64], Tensor[(2, 14, 12), float32], Tensor[(2, 96), float64], Tensor[(11, 6, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(858), float64], Tensor[(2, 13, 6), float32], Tensor[(2, 14, 12), float32]) */
}

def @func_1288(%var_1286: Tensor[(16, 2, 16), float64]) -> (Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) {
  @func_1285(%var_1286) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) */
}

def @func_3884() -> Tensor[(?, 14, ?), float32] {
  @func_2209() /* ty=Tensor[(?, 14, ?), float32] */
}

def @func_4232(%var_4231: Tensor[(16, 6, 16), float32]) -> (Tensor[(16, 6, 16), float32],) {
  %544 = fn (%var_4216: Tensor[(16, 6, 16), float32]) -> (Tensor[(16, 6, 16), float32],) {
    %542 = cast(%var_4216, dtype="float32") /* ty=Tensor[(16, 6, 16), float32] */;
    %543 = acos(%542) /* ty=Tensor[(16, 6, 16), float32] */;
    (%543,)
  };
  %544(%var_4231) /* ty=(Tensor[(16, 6, 16), float32],) */
}

def @func_3439(%var_3437: Tensor[(2, 240), uint32], %var_3438: Tensor[(24), int64]) -> (Tensor[(14), float32], Tensor[(16, 5, 6), uint32], Tensor[(2, 240), uint32], Tensor[(24), int64]) {
  %554 = fn (%var_3431: Tensor[(2, 240), uint32], %var_3432: Tensor[(24), int64]) -> (Tensor[(14), float32], Tensor[(16, 5, 6), uint32], Tensor[(2, 240), uint32], Tensor[(24), int64]) {
    %545 = cast(%var_3431, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
    %546 = cast(%var_3431, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
    %547 = cast(%var_3432, dtype="int64") /* ty=Tensor[(24), int64] */;
    %548 = reshape(%545, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
    %549 = reshape(%546, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
    %550 = reshape(%547, newshape=[24]) /* ty=Tensor[(24), int64] */;
    %551 = @func_264(%548, %549, %550) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
    %552 = @func_1741() /* ty=Tensor[(14), float32] */;
    %553 = %551.0;
    (%552, %553, %var_3431, %var_3432)
  };
  %554(%var_3437, %var_3438) /* ty=(Tensor[(14), float32], Tensor[(16, 5, 6), uint32], Tensor[(2, 240), uint32], Tensor[(24), int64]) */
}

def @func_4870(%var_4868: Tensor[(224), uint8], %var_4869: Tensor[(12, 15, 11), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(96), int8], Tensor[(224), uint8], Tensor[(2, 14, 12), float32], Tensor[(12, 15, 11), int16], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) {
  @func_4866(%var_4868, %var_4869) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(96), int8], Tensor[(224), uint8], Tensor[(2, 14, 12), float32], Tensor[(12, 15, 11), int16], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32], Tensor[(2, 14, 12), float32]) */
}

def @func_3500(%var_3498: Tensor[(13, 12, 9), int16], %var_3499: Tensor[(13, 12, 9), int16]) -> (Tensor[(13, 12, 9), int16],) {
  %560 = fn (%var_3487: Tensor[(13, 12, 9), int16], %var_3488: Tensor[(13, 12, 9), int16]) -> (Tensor[(13, 12, 9), int16],) {
    %555 = cast(%var_3488, dtype="int16") /* ty=Tensor[(13, 12, 9), int16] */;
    %556 = shape_of(%var_3487, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%var_3487, dtype="int16") /* ty=Tensor[(13, 12, 9), int16] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %559 = maximum(%557, %558) /* ty=Tensor[(13, 12, 9), int16] */;
    (%559,)
  };
  %560(%var_3498, %var_3499) /* ty=(Tensor[(13, 12, 9), int16],) */
}

def @func_3826(%var_3822: Tensor[(858), float32], %var_3823: Tensor[(14, 1), int32], %var_3824: Tensor[(98), int32], %var_3825: Tensor[(24), int64]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(2, 14, 12), float32], Tensor[(7, 2, 7), bool], Tensor[(14, 858), int8], Tensor[(98), float32], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) {
  %582 = fn (%var_3775: Tensor[(858), float32], %var_3797: Tensor[(14, 1), int32], %var_3798: Tensor[(98), int32], %var_3808: Tensor[(24), int64]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(2, 14, 12), float32], Tensor[(7, 2, 7), bool], Tensor[(14, 858), int8], Tensor[(98), float32], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) {
    %561 = cast(%var_3775, dtype="float32") /* ty=Tensor[(858), float32] */;
    %562 = reshape(%561, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
    %563 = @func_845(%562) /* ty=(Tensor[(11, 6, 13), float32],) */;
    %564 = cast(%var_3797, dtype="int32") /* ty=Tensor[(14, 1), int32] */;
    %565 = cast(%var_3798, dtype="int32") /* ty=Tensor[(98), int32] */;
    %566 = reshape(%564, newshape=[7, 2, 1]) /* ty=Tensor[(7, 2, 1), int32] */;
    %567 = reshape(%565, newshape=[7, 2, 7]) /* ty=Tensor[(7, 2, 7), int32] */;
    %568 = @func_1323(%566, %567) /* ty=(Tensor[(7, 2, 7), bool],) */;
    %569 = cast(%var_3775, dtype="int8") /* ty=Tensor[(858), int8] */;
    %570 = cast(%var_3797, dtype="int8") /* ty=Tensor[(14, 1), int8] */;
    %571 = cast(%var_3798, dtype="float32") /* ty=Tensor[(98), float32] */;
    %572 = cast(%var_3808, dtype="int64") /* ty=Tensor[(24), int64] */;
    %573 = reshape(%572, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), int64] */;
    %574 = @func_100(%573) /* ty=(Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool], Tensor[(2, 12, 1), bool]) */;
    %575 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
    %576 = %563.0;
    %577 = @func_3624() /* ty=Tensor[(2, 14, 12), float32] */;
    %578 = %568.0;
    %579 = left_shift(%569, %570) /* ty=Tensor[(14, 858), int8] */;
    %580 = acosh(%571) /* ty=Tensor[(98), float32] */;
    %581 = %574.1;
    (%575, %576, %577, %578, %579, %580, %581, %var_3808)
  };
  %582(%var_3822, %var_3823, %var_3824, %var_3825) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(2, 14, 12), float32], Tensor[(7, 2, 7), bool], Tensor[(14, 858), int8], Tensor[(98), float32], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */
}

def @func_625(%var_623: Tensor[(1, 14, 1), float32]) -> Tensor[(?, 14, ?), float64] {
  @func_622(%var_623) /* ty=Tensor[(?, 14, ?), float64] */
}

def @func_2310(%var_2307: Tensor[(3, 8, 4), int8], %var_2308: Tensor[(3, 8, 4), int8], %var_2309: Tensor[(224), uint8]) -> (Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) {
  %601 = fn (%var_2292: Tensor[(3, 8, 4), int8], %var_2293: Tensor[(3, 8, 4), int8], %var_2302: Tensor[(224), uint8]) -> (Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) {
    %583 = cast(%var_2293, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
    %584 = shape_of(%var_2292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%var_2292, dtype="int8") /* ty=Tensor[(3, 8, 4), int8] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %587 = bitwise_and(%585, %586) /* ty=Tensor[(3, 8, 4), int8] */;
    %588 = cast(%587, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
    %589 = shape_of(%var_2293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %590 = cast(%var_2293, dtype="bool") /* ty=Tensor[(3, 8, 4), bool] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %592 = cast(%var_2302, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %593 = cast(%var_2302, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %594 = cast(%var_2302, dtype="bool") /* ty=Tensor[(224), bool] */;
    %595 = reshape(%592, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
    %596 = reshape(%593, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), uint8] */;
    %597 = reshape(%594, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), bool] */;
    %598 = @func_746(%595, %596, %597) /* ty=(Tensor[(1, 15, 11), float64], Tensor[(165), float64], Tensor[(4, 14, 4), bool], Tensor[(4, 14, 4), int16], Tensor[(1, 15, 11), float64]) */;
    %599 = logical_or(%590, %591) /* ty=Tensor[(3, 8, 4), bool] */;
    %600 = %598.4;
    (%599, %600, %var_2302)
  };
  %601(%var_2307, %var_2308, %var_2309) /* ty=(Tensor[(3, 8, 4), bool], Tensor[(1, 15, 11), float64], Tensor[(224), uint8]) */
}

def @func_1560() -> Tensor[(?, 14, ?), float64] {
  %602 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
  %602.0
}

def @func_3075(%var_3062: Tensor[(4, 12, 4), float64]) -> (Tensor[(4, 12, 4), float64],) {
  %603 = cast(%var_3062, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %604 = log10(%603) /* ty=Tensor[(4, 12, 4), float64] */;
  (%604,)
}

def @func_4084(%var_4083: Tensor[(63), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) {
  %625 = fn (%var_4017: Tensor[(63), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) {
    %605 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
    %606 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
    %607 = %606.2;
    %608 = cast(%var_4017, dtype="int8") /* ty=Tensor[(63), int8] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(1), int32] */;
    %610 = cast(%607, dtype="int8") /* ty=Tensor[(63), int8] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?), int8] */;
    %612 = cast(%var_4017, dtype="float64") /* ty=Tensor[(63), float64] */;
    %613 = acosh(%612) /* ty=Tensor[(63), float64] */;
    %614 = cast(meta[relay.Constant][33] /* ty=Tensor[(63), float64] */, dtype="bool") /* ty=Tensor[(63), bool] */;
    %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(1), int32] */;
    %616 = cast(%613, dtype="bool") /* ty=Tensor[(63), bool] */;
    %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), bool] */;
    %618 = cast(meta[relay.Constant][34] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
    %619 = reshape(%618, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float64] */;
    %620 = @func_1285(%619) /* ty=(Tensor[(16, 2, 16), float64], Tensor[(16, 2, 16), float32], Tensor[(16, 2, 16), float64]) */;
    %621 = %605.0;
    %622 = bitwise_and(%610, %611) /* ty=Tensor[(63), int8] */;
    %623 = greater_equal(%616, %617) /* ty=Tensor[(63), bool] */;
    %624 = %620.2;
    (%621, %622, %623, %624, meta[relay.Constant][34] /* ty=Tensor[(512), float64] */)
  };
  %625(%var_4083) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) */
}

def @func_4191() -> Tensor[(2, 14, 12), float32] {
  %627 = fn () -> Tensor[(2, 14, 12), float32] {
    %626 = @func_3854() /* ty=(Tensor[(2, 14, 12), float32],) */;
    %626.0
  };
  %627() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_4126(%var_4125: Tensor[(63), float64]) -> (Tensor[(2, 14, 12), float64], Tensor[(63), int8], Tensor[(63), float64]) {
  %635 = fn (%var_4118: Tensor[(63), float64]) -> (Tensor[(2, 14, 12), float64], Tensor[(63), int8], Tensor[(63), float64]) {
    %628 = @func_2472() /* ty=Tensor[(2, 14, 12), float32] */;
    %629 = cast(%628, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
    %630 = cast(%var_4118, dtype="float64") /* ty=Tensor[(63), float64] */;
    %631 = reshape(%630, newshape=[63]) /* ty=Tensor[(63), float64] */;
    %632 = @func_4082(%631) /* ty=(Tensor[(2, 14, 12), float32], Tensor[(63), int8], Tensor[(63), bool], Tensor[(16, 2, 16), float64], Tensor[(512), float64]) */;
    %633 = sinh(%629) /* ty=Tensor[(2, 14, 12), float64] */;
    %634 = %632.1;
    (%633, %634, %var_4118)
  };
  %635(%var_4125) /* ty=(Tensor[(2, 14, 12), float64], Tensor[(63), int8], Tensor[(63), float64]) */
}

def @main() -> Tensor[(2, 14, 12), float32] {
  %636 = @func_2472() /* ty=Tensor[(2, 14, 12), float32] */;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  cos(%637) /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_4981() -> (Tensor[(14), float32],) {
  %639 = fn () -> (Tensor[(14), float32],) {
    %638 = @func_1741() /* ty=Tensor[(14), float32] */;
    (%638,)
  };
  %639() /* ty=(Tensor[(14), float32],) */
}

def @func_3195() -> (Tensor[(2, 14, 12), float32],) {
  %641 = fn () -> (Tensor[(2, 14, 12), float32],) {
    %640 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
    (%640,)
  };
  %641() /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_4653(%var_4644: Tensor[(5, 14, 12), float64]) -> (Tensor[(5, 14, 12), uint16], Tensor[(5, 14, 12), uint16]) {
  %642 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
  %643 = cast(%642, dtype="uint16") /* ty=Tensor[(?, 14, ?), uint16] */;
  %644 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(5, 14, 12), uint16] */;
  %645 = cast(%642, dtype="uint16") /* ty=Tensor[(?, 14, ?), uint16] */;
  %646 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(5, 14, 12), uint16] */;
  %647 = bitwise_xor(%643, %644) /* ty=Tensor[(5, 14, 12), uint16] */;
  %648 = bitwise_and(%645, %646) /* ty=Tensor[(5, 14, 12), uint16] */;
  (%647, %648)
}

def @func_2365(%var_2363: Tensor[(7, 14, 4), float32], %var_2364: Tensor[(297), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(858), float32], Tensor[(11, 3, 9), int32], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(1, 24), int64]) {
  %672 = fn (%var_2336: Tensor[(7, 14, 4), float32], %var_2344: Tensor[(297), float32]) -> (Tensor[(7, 14, 4), bool], Tensor[(858), float32], Tensor[(11, 3, 9), int32], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(1, 24), int64]) {
    %649 = @func_1769() /* ty=(Tensor[(?, 14, ?), float32],) */;
    %650 = %649.0;
    %651 = cast(%650, dtype="bool") /* ty=Tensor[(?, 14, ?), bool] */;
    %652 = cast(%var_2336, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
    %653 = @func_1973() /* ty=(Tensor[(14), float32], Tensor[(858), float32], Tensor[(63), float64]) */;
    %654 = cast(%var_2344, dtype="float32") /* ty=Tensor[(297), float32] */;
    %655 = cast(meta[relay.Constant][35] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %656 = cast(meta[relay.Constant][36] /* ty=Tensor[(224), uint8] */, dtype="uint8") /* ty=Tensor[(224), uint8] */;
    %657 = reshape(%654, newshape=[11, 3, 9]) /* ty=Tensor[(11, 3, 9), float32] */;
    %658 = reshape(%655, newshape=[1050]) /* ty=Tensor[(1050), float32] */;
    %659 = reshape(%656, newshape=[2, 112]) /* ty=Tensor[(2, 112), uint8] */;
    %660 = @func_1923(%657, %658, %659) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(63), float64], Tensor[(11, 3, 9), bool], Tensor[(11, 14, 11), float64], Tensor[(1694), float64], Tensor[(11, 3, 9), int32], Tensor[(1, 15, 11), float64], Tensor[(1050), float32], Tensor[(2, 112), uint8]) */;
    %661 = cast(meta[relay.Constant][37] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
    %662 = cast(meta[relay.Constant][37] /* ty=Tensor[(480), uint32] */, dtype="uint32") /* ty=Tensor[(480), uint32] */;
    %663 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 24), int64] */, dtype="int64") /* ty=Tensor[(1, 24), int64] */;
    %664 = reshape(%661, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
    %665 = reshape(%662, newshape=[16, 5, 6]) /* ty=Tensor[(16, 5, 6), uint32] */;
    %666 = reshape(%663, newshape=[24]) /* ty=Tensor[(24), int64] */;
    %667 = @func_264(%664, %665, %666) /* ty=(Tensor[(16, 5, 6), uint32], Tensor[(16, 5, 6), float64], Tensor[(2, 12, 1), bool], Tensor[(24), int64]) */;
    %668 = not_equal(%651, %652) /* ty=Tensor[(7, 14, 4), bool] */;
    %669 = %653.1;
    %670 = %660.5;
    %671 = %667.2;
    (%668, %669, %670, %var_2344, meta[relay.Constant][35] /* ty=Tensor[(1050), float32] */, meta[relay.Constant][36] /* ty=Tensor[(224), uint8] */, %671, meta[relay.Constant][37] /* ty=Tensor[(480), uint32] */, meta[relay.Constant][38] /* ty=Tensor[(1, 24), int64] */)
  };
  %672(%var_2363, %var_2364) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(858), float32], Tensor[(11, 3, 9), int32], Tensor[(297), float32], Tensor[(1050), float32], Tensor[(224), uint8], Tensor[(2, 12, 1), bool], Tensor[(480), uint32], Tensor[(1, 24), int64]) */
}

def @func_4573(%var_4571: uint16, %var_4572: Tensor[(3, 15, 2), uint16]) -> Tensor[(3, 15, 2), uint16] {
  %675 = fn (%var_4563: uint16, %var_4564: Tensor[(3, 15, 2), uint16]) -> Tensor[(3, 15, 2), uint16] {
    %673 = cast(%var_4563, dtype="uint16") /* ty=uint16 */;
    %674 = cast(%var_4564, dtype="uint16") /* ty=Tensor[(3, 15, 2), uint16] */;
    bitwise_xor(%673, %674) /* ty=Tensor[(3, 15, 2), uint16] */
  };
  %675(%var_4571, %var_4572) /* ty=Tensor[(3, 15, 2), uint16] */
}

def @func_2460(%var_2455: Tensor[(1, 63), float64]) -> (Tensor[(2, 14, 12), float32], Tensor[(11, 6, 13), float32], Tensor[(1, 63), float32]) {
  %676 = cast(%var_2455, dtype="float64") /* ty=Tensor[(1, 63), float64] */;
  %677 = reshape(%676, newshape=[7, 9, 1]) /* ty=Tensor[(7, 9, 1), float64] */;
  %678 = @func_1361(%677) /* ty=(Tensor[(7, 9, 1), float64], Tensor[(11, 6, 13), float32], Tensor[(858), float32]) */;
  %679 = cast(%var_2455, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
  %680 = @func_2139() /* ty=Tensor[(2, 14, 12), float32] */;
  %681 = %678.1;
  %682 = sinh(%679) /* ty=Tensor[(1, 63), float32] */;
  (%680, %681, %682)
}

def @func_2227() -> Tensor[(?, 14, ?), float32] {
  @func_2225() /* ty=Tensor[(?, 14, ?), float32] */
}

def @func_2416() -> Tensor[(2, 14, 12), float32] {
  @func_2414() /* ty=Tensor[(2, 14, 12), float32] */
}

def @func_2665() -> (Tensor[(2, 14, 12), float32],) {
  %684 = fn () -> (Tensor[(2, 14, 12), float32],) {
    %683 = @func_2414() /* ty=Tensor[(2, 14, 12), float32] */;
    (%683,)
  };
  %684() /* ty=(Tensor[(2, 14, 12), float32],) */
}

def @func_3990(%var_3961: Tensor[(858), float32]) -> (Tensor[(?, 14, ?), float64], Tensor[(2, 14, 12), float64], Tensor[(2, 14, 12), float32], Tensor[(2, 96), float64], Tensor[(11, 6, 13), float32], Tensor[(4, 12, 4), float64], Tensor[(858), float64], Tensor[(2, 13, 6), float32], Tensor[(2, 14, 12), float32]) {
  %685 = @func_3266() /* ty=Tensor[(2, 14, 12), float32] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(2, 14, 12), float32] */;
  %687 = reshape(%686, newshape=[2, 14, 12]) /* ty=Tensor[(2, 14, 12), float32] */;
  %688 = @func_3574(%687) /* ty=(Tensor[(2, 14, 12), int8], Tensor[(?, 14, ?), float64], Tensor[(480), uint32], Tensor[(2, 14, 12), float64]) */;
  %689 = cast(%685, dtype="float64") /* ty=Tensor[(2, 14, 12), float64] */;
  %690 = @func_3194() /* ty=(Tensor[(2, 14, 12), float32],) */;
  %691 = cast(%var_3961, dtype="float32") /* ty=Tensor[(858), float32] */;
  %692 = reshape(%691, newshape=[11, 6, 13]) /* ty=Tensor[(11, 6, 13), float32] */;
  %693 = @func_845(%692) /* ty=(Tensor[(11, 6, 13), float32],) */;
  %694 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 96), float64] */, dtype="float64") /* ty=Tensor[(2, 96), float64] */;
  %695 = reshape(%694, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), float64] */;
  %696 = @func_3075(%695) /* ty=(Tensor[(4, 12, 4), float64],) */;
  %697 = %696.0;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %699 = rsqrt(%698) /* ty=Tensor[(4, 12, 4), float64] */;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %701 = cast(%var_3961, dtype="float64") /* ty=Tensor[(858), float64] */;
  %702 = @func_1546() /* ty=(Tensor[(?, 14, ?), float64], Tensor[(14), float32], Tensor[(2, 13, 6), float32]) */;
  %703 = %688.1;
  %704 = exp(%689) /* ty=Tensor[(2, 14, 12), float64] */;
  %705 = %690.0;
  %706 = %693.0;
  %707 = log2(%700) /* ty=Tensor[(4, 12, 4), float64] */;
  %708 = log(%701) /* ty=Tensor[(858), float64] */;
  %709 = %702.2;
  %710 = @func_2943() /* ty=Tensor[(2, 14, 12), float32] */;
  (%703, %704, %705, meta[relay.Constant][39] /* ty=Tensor[(2, 96), float64] */, %706, %707, %708, %709, %710)
}

def @func_1678(%var_1677: Tensor[(11, 14, 11), float64]) -> Tensor[(11, 14, 11), float64] {
  %716 = fn (%var_1661: Tensor[(11, 14, 11), float64]) -> Tensor[(11, 14, 11), float64] {
    %711 = @func_1560() /* ty=Tensor[(?, 14, ?), float64] */;
    %712 = cast(%711, dtype="uint32") /* ty=Tensor[(?, 14, ?), uint32] */;
    %713 = cast(%var_1661, dtype="uint32") /* ty=Tensor[(11, 14, 11), uint32] */;
    %714 = left_shift(%712, %713) /* ty=Tensor[(11, 14, 11), uint32] */;
    %715 = cast(%714, dtype="float64") /* ty=Tensor[(11, 14, 11), float64] */;
    rsqrt(%715) /* ty=Tensor[(11, 14, 11), float64] */
  };
  %716(%var_1677) /* ty=Tensor[(11, 14, 11), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen78/build/output.py", line 1663, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:48:12] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

