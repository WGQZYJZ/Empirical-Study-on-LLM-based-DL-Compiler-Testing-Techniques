==========mod==========
#[version = "0.0.5"]
def @func_4273() -> (Tensor[(10, 11, 8), float32],) {
  %0 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %1 = %0.0;
  (%1,)
}

def @func_2118(%var_2035: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %2 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %3 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %4 = cast(%var_2035, dtype="int32") /* ty=Tensor[(10, 11, 8), int32] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%3, dtype="int32") /* ty=Tensor[(10, 11, 8), int32] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %8 = bitwise_and(%6, %7) /* ty=Tensor[(10, 11, 8), int32] */;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %10 = cast(%var_2035, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %11 = reshape(%10, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %12 = @func_1648(%11) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %13 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %14 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %15 = %2.0;
  %16 = asinh(%9) /* ty=Tensor[(10, 11, 8), float32] */;
  %17 = %12.1;
  %18 = %13.0;
  %19 = %14.0;
  (%15, %16, %17, %18, %19)
}

def @func_4189(%var_4164: Tensor[(96), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(420), bool], Tensor[(96), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %20 = cast(%var_4164, dtype="float32") /* ty=Tensor[(96), float32] */;
  %21 = reshape(%20, newshape=[2, 4, 12]) /* ty=Tensor[(2, 4, 12), float32] */;
  %22 = @func_2613(%21) /* ty=(Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) */;
  %23 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %24 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %25 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  %26 = %22.1;
  %27 = %23.0;
  %28 = %24.0;
  (%25, %26, %var_4164, %27, %28)
}

def @func_6134(%var_6121: Tensor[(13, 4, 14), int8], %var_6122: Tensor[(13, 4, 14), int8]) -> Tensor[(13, 4, 14), bool] {
  %29 = cast(%var_6122, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
  %30 = shape_of(%var_6121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_6121, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%31, %32) /* ty=Tensor[(13, 4, 14), bool] */
}

def @func_2613(%var_2571: Tensor[(2, 4, 12), float32]) -> (Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) {
  %33 = cast(%var_2571, dtype="float32") /* ty=Tensor[(2, 4, 12), float32] */;
  %34 = @func_1951() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) */;
  %35 = cast(%var_2571, dtype="float32") /* ty=Tensor[(2, 4, 12), float32] */;
  %36 = log2(%33) /* ty=Tensor[(2, 4, 12), float32] */;
  %37 = %34.3;
  %38 = sqrt(%35) /* ty=Tensor[(2, 4, 12), float32] */;
  (%36, %37, %38)
}

def @func_6956(%var_6888: Tensor[(10, 13, 8), float64], %var_6914: Tensor[(10, 13, 8), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 13, 8), uint64], Tensor[(10, 13, 8), float32]) {
  %39 = @func_6158() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %40 = cast(%var_6888, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
  %41 = log(%40) /* ty=Tensor[(10, 13, 8), float64] */;
  %42 = cast(%var_6914, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %46 = cast(%var_6914, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %47 = shape_of(%var_6888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_6888, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = less_equal(%48, %49) /* ty=Tensor[(10, 13, 8), bool] */;
  %51 = cast(%50, dtype="int32") /* ty=Tensor[(10, 13, 8), int32] */;
  %52 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%41, dtype="int32") /* ty=Tensor[(10, 13, 8), int32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %55 = subtract(%53, %54) /* ty=Tensor[(10, 13, 8), int32] */;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
  %57 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%41, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %60 = floor_divide(%58, %59) /* ty=Tensor[(10, 13, 8), float64] */;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %62 = %39.1;
  %63 = bitwise_and(%44, %45) /* ty=Tensor[(10, 13, 8), uint64] */;
  %64 = sinh(%61) /* ty=Tensor[(10, 13, 8), float32] */;
  (%62, %63, %64)
}

def @func_4559() -> (Tensor[(10, 11, 8), float32],) {
  %65 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
  (%65,)
}

def @func_234() -> Tensor[(10, 11, 8), float32] {
  @func_176() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1021() -> Tensor[(10, 11, 8), float32] {
  %66 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %66.1
}

def @func_2433() -> Tensor[(10, 11, 8), float32] {
  %67 = @func_2249() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %67.0
}

def @func_7095(%var_7086: float32) -> (Tensor[(6, 3, 6), float32],) {
  %68 = cast(%var_7086, dtype="float32") /* ty=float32 */;
  %69 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %70 = subtract(%68, %69) /* ty=Tensor[(6, 3, 6), float32] */;
  (%70,)
}

def @func_2249() -> (Tensor[(10, 11, 8), float32],) {
  %71 = @func_389() /* ty=Tensor[(10, 11, 8), float32] */;
  (%71,)
}

def @func_1951() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) {
  %72 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %73 = cast(meta[relay.Constant][2] /* ty=Tensor[(420), bool] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %74 = reshape(%72, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %75 = reshape(%73, newshape=[10, 42]) /* ty=Tensor[(10, 42), bool] */;
  %76 = @func_1454(%74, %75) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %77 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %78 = %76.4;
  (%77, %78, meta[relay.Constant][1] /* ty=Tensor[(312), float64] */, meta[relay.Constant][2] /* ty=Tensor[(420), bool] */)
}

def @func_4867() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %79 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %80 = @func_1762() /* ty=Tensor[(10, 11, 8), float32] */;
  %81 = %79.0;
  (%80, %81)
}

def @func_4719() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %82 = @func_3685() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %83 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %84 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %85 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %86 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %87 = %82.1;
  %88 = %83.2;
  %89 = %84.2;
  %90 = %85.0;
  %91 = %86.0;
  (%87, %88, %89, %90, %91)
}

def @func_5705() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), int16]) {
  %92 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %93 = %92.0;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %95 = reshape(%94, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %96 = @func_1648(%95) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %97 = %96.0;
  (%93, %97)
}

def @func_1545() -> Tensor[(10, 11, 8), float32] {
  @func_139() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7635() -> Tensor[(10, 11, 8), float32] {
  @func_1762() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1572() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) {
  %98 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %99 = %98.0;
  %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 11, 8), float32] */, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %104 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
  %105 = add(%102, %103) /* ty=Tensor[(10, 11, 8), uint64] */;
  (%104, %105)
}

def @func_3281() -> (Tensor[(10, 11, 8), float32],) {
  %106 = @func_1382() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %107 = %106.0;
  (%107,)
}

def @func_5639() -> (Tensor[(10, 11, 8), float32],) {
  %108 = @func_2294() /* ty=Tensor[(10, 11, 8), float32] */;
  (%108,)
}

def @func_6158() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %109 = @func_2249() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %110 = %109.0;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %112 = reshape(%111, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %113 = @func_2118(%112) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %114 = @func_1854() /* ty=Tensor[(10, 11, 8), float32] */;
  %115 = %113.1;
  (%114, %110, %115)
}

def @func_7961(%var_7951: Tensor[(990, 2), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(990, 2), float32]) {
  %116 = cast(%var_7951, dtype="float32") /* ty=Tensor[(990, 2), float32] */;
  %117 = reshape(%116, newshape=[1980]) /* ty=Tensor[(1980), float32] */;
  %118 = @func_6188(%117) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(8, 110), float32], Tensor[(1980), float32], Tensor[(11, 3, 14), float64]) */;
  %119 = @func_1545() /* ty=Tensor[(10, 11, 8), float32] */;
  %120 = %118.3;
  (%119, %120, %var_7951)
}

def @func_3153(%var_3140: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), int64],) {
  %121 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %122 = %121.0;
  %123 = cast(%var_3140, dtype="int64") /* ty=Tensor[(10, 11, 8), int64] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="int64") /* ty=Tensor[(10, 11, 8), int64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %127 = bitwise_xor(%125, %126) /* ty=Tensor[(10, 11, 8), int64] */;
  (%127,)
}

def @func_4654() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) {
  %128 = @func_3281() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %129 = cast(meta[relay.Constant][4] /* ty=Tensor[(78, 4), float64] */, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %130 = cast(meta[relay.Constant][5] /* ty=Tensor[(210, 2), bool] */, dtype="bool") /* ty=Tensor[(210, 2), bool] */;
  %131 = reshape(%129, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %132 = reshape(%130, newshape=[10, 42]) /* ty=Tensor[(10, 42), bool] */;
  %133 = @func_1454(%131, %132) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %134 = %128.0;
  %135 = %133.5;
  (%134, %135, meta[relay.Constant][4] /* ty=Tensor[(78, 4), float64] */, meta[relay.Constant][5] /* ty=Tensor[(210, 2), bool] */)
}

def @func_4022() -> (Tensor[(10, 11, 8), float32],) {
  %136 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %137 = %136.0;
  (%137,)
}

def @func_8016() -> (Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), uint64]) {
  %138 = @func_5705() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), int16]) */;
  %139 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %140 = %138.1;
  %141 = %139.1;
  (%140, %141)
}

def @func_8055(%var_8021: Tensor[(11, 3, 15), float64], %var_8022: Tensor[(11, 3, 15), float64], %var_8045: Tensor[(11, 3, 15), float64], %var_8049: Tensor[(11, 3, 15), float64]) -> (Tensor[(11, 3, 15), float64], Tensor[(11, 3, 15), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 15), float32], Tensor[(11, 3, 15), bool]) {
  %142 = cast(%var_8022, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  %143 = shape_of(%var_8021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_8021, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %146 = cast(%var_8022, dtype="float32") /* ty=Tensor[(11, 3, 15), float32] */;
  %147 = @func_7856() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %148 = cast(%var_8045, dtype="float32") /* ty=Tensor[(11, 3, 15), float32] */;
  %149 = shape_of(%var_8021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_8021, dtype="float32") /* ty=Tensor[(11, 3, 15), float32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %152 = cast(%var_8049, dtype="bool") /* ty=Tensor[(11, 3, 15), bool] */;
  %153 = shape_of(%var_8022, dtype="int32") /* ty=Tensor[(3), int32] */;
  %154 = cast(%var_8022, dtype="bool") /* ty=Tensor[(11, 3, 15), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %156 = floor_mod(%144, %145) /* ty=Tensor[(11, 3, 15), float64] */;
  %157 = asin(%146) /* ty=Tensor[(11, 3, 15), float32] */;
  %158 = %147.0;
  %159 = mod(%150, %151) /* ty=Tensor[(11, 3, 15), float32] */;
  %160 = less(%154, %155) /* ty=Tensor[(11, 3, 15), bool] */;
  (%156, %157, %158, %159, %160)
}

def @func_4968() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %161 = @func_1545() /* ty=Tensor[(10, 11, 8), float32] */;
  %162 = @func_3091() /* ty=Tensor[(10, 11, 8), float32] */;
  (%161, %162)
}

def @func_682(%var_656: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %163 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %164 = cast(%var_656, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  %169 = equal(%166, %167) /* ty=Tensor[(10, 11, 8), bool] */;
  (%168, %169)
}

def @func_3091() -> Tensor[(10, 11, 8), float32] {
  %170 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %170.0
}

def @func_7819() -> (Tensor[(10, 11, 8), uint64],) {
  %171 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %172 = %171.0;
  (%172,)
}

def @func_5874() -> Tensor[(10, 11, 8), float32] {
  %173 = @func_2568() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %173.0
}

def @func_4093() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %174 = @func_2568() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %175 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  %176 = %174.1;
  (%175, %176)
}

def @func_3002(%var_2977: Tensor[(10, 11, 8), uint64]) -> Tensor[(10, 11, 8), bool] {
  %177 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %178 = %177.0;
  %179 = cast(%var_2977, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%178, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%181, %182) /* ty=Tensor[(10, 11, 8), bool] */
}

def @func_7856() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %183 = @func_4719() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %184 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %185 = %183.2;
  %186 = %184.0;
  (%185, %186)
}

def @func_3685() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %187 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %188 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %189 = %187.0;
  %190 = %188.1;
  (%189, %190)
}

def @func_2945() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %191 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %192 = @func_2568() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %193 = %191.0;
  %194 = %192.1;
  (%193, %194)
}

def @func_6389(%var_6382: Tensor[(9, 15, 3), uint64], %var_6383: Tensor[(9, 15, 3), uint64]) -> Tensor[(9, 15, 3), bool] {
  %195 = cast(%var_6383, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %196 = shape_of(%var_6382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_6382, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%197, %198) /* ty=Tensor[(9, 15, 3), bool] */
}

def @func_176() -> Tensor[(10, 11, 8), float32] {
  @func_139() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1382() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %199 = @func_1084() /* ty=(Tensor[(10, 11, 8), bool],) */;
  %200 = %199.0;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %202 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %203 = cos(%201) /* ty=Tensor[(10, 11, 8), float32] */;
  (%202, %203)
}

def @func_2360(%var_2296: Tensor[(4, 15, 4), float64], %var_2306: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), uint32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(4, 15, 4), float32], Tensor[(10, 11, 8), float32]) {
  %204 = cast(%var_2296, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %205 = log(%204) /* ty=Tensor[(4, 15, 4), float64] */;
  %206 = cast(%var_2306, dtype="uint32") /* ty=Tensor[(4, 15, 4), uint32] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="uint32") /* ty=Tensor[(4, 15, 4), uint32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %210 = @func_1951() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) */;
  %211 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %212 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %213 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %214 = cast(%205, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %215 = maximum(%208, %209) /* ty=Tensor[(4, 15, 4), uint32] */;
  %216 = %210.0;
  %217 = %211.1;
  %218 = %212.0;
  %219 = %213.1;
  %220 = erf(%214) /* ty=Tensor[(4, 15, 4), float32] */;
  %221 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  (%215, %216, %217, %218, %219, %220, %221)
}

def @func_781(%var_753: Tensor[(14, 10, 6), int32], %var_774: Tensor[(10, 11, 8), float32]) -> (Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) {
  %222 = cast(%var_753, dtype="int32") /* ty=Tensor[(14, 10, 6), int32] */;
  %223 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(14, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(14, 10, 6), int32] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %226 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %227 = %226.0;
  %228 = cast(%var_774, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %232 = maximum(%224, %225) /* ty=Tensor[(14, 10, 6), int32] */;
  %233 = divide(%230, %231) /* ty=Tensor[(10, 11, 8), float64] */;
  (%232, %233)
}

def @func_4231(%var_4217: Tensor[(11, 7, 13), float32]) -> (Tensor[(11, 7, 13), float32],) {
  %234 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %235 = shape_of(%var_4217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_4217, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %238 = power(%236, %237) /* ty=Tensor[(11, 7, 13), float32] */;
  (%238,)
}

def @func_1152() -> Tensor[(10, 11, 8), float32] {
  %239 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %239.1
}

def @func_7148(%var_7141: uint64, %var_7143: Tensor[(840), int32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float32], uint64, Tensor[(1960), uint64], Tensor[(840), int32]) {
  %240 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %241 = @func_2854() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %242 = cast(%var_7141, dtype="uint64") /* ty=uint64 */;
  %243 = cast(meta[relay.Constant][8] /* ty=Tensor[(1960), uint64] */, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %244 = cast(%var_7143, dtype="int32") /* ty=Tensor[(840), int32] */;
  %245 = reshape(%242, newshape=[]) /* ty=uint64 */;
  %246 = reshape(%243, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %247 = reshape(%244, newshape=[420, 2]) /* ty=Tensor[(420, 2), int32] */;
  %248 = @func_7026(%245, %246, %247) /* ty=(Tensor[(10, 14, 14), bool], Tensor[(78, 4), float32], Tensor[(880), float32], Tensor[(420, 2), int32], Tensor[(1, 312), float64], Tensor[(462), float64], Tensor[(10, 14, 14), float64]) */;
  %249 = %240.0;
  %250 = %241.0;
  %251 = %248.1;
  (%249, %250, %251, %var_7141, meta[relay.Constant][8] /* ty=Tensor[(1960), uint64] */, %var_7143)
}

def @func_1854() -> Tensor[(10, 11, 8), float32] {
  %252 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %252.0
}

def @func_8792(%var_8786: Tensor[(2, 3, 13), float32]) -> (Tensor[(2, 3, 13), float32],) {
  %253 = cast(%var_8786, dtype="float32") /* ty=Tensor[(2, 3, 13), float32] */;
  %254 = log(%253) /* ty=Tensor[(2, 3, 13), float32] */;
  (%254,)
}

def @func_5027() -> (Tensor[(10, 11, 8), float32],) {
  %255 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %256 = %255.0;
  (%256,)
}

def @func_7914() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %257 = @func_7732() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %258 = @func_7819() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %259 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %260 = %257.0;
  %261 = %258.0;
  %262 = %259.0;
  (%260, %261, %262)
}

def @func_2568() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %263 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %264 = %263.0;
  %265 = @func_1762() /* ty=Tensor[(10, 11, 8), float32] */;
  (%264, %265)
}

def @func_6812(%var_6692: Tensor[(8, 110), float32], %var_6702: Tensor[(840), int32], %var_6776: Tensor[(78, 4), float64], %var_6794: Tensor[(462), float64], %var_6806: Tensor[(78, 4), int32]) -> (Tensor[(10, 11, 8), int16], Tensor[(8, 110), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64], Tensor[(840), int32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool], Tensor[(78, 4), uint32], Tensor[(78, 4), bool], Tensor[(2, 15, 14), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(78, 4), float32], Tensor[(78, 4), int16]) {
  %266 = cast(%var_6692, dtype="float32") /* ty=Tensor[(8, 110), float32] */;
  %267 = reshape(%266, newshape=[880]) /* ty=Tensor[(880), float32] */;
  %268 = @func_2913(%267) /* ty=(Tensor[(14, 9, 12), float64], Tensor[(10, 11, 8), int16], Tensor[(880), float32], Tensor[(10, 11, 8), float32]) */;
  %269 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %270 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %271 = cast(%var_6702, dtype="int32") /* ty=Tensor[(840), int32] */;
  %272 = cast(%var_6692, dtype="float32") /* ty=Tensor[(8, 110), float32] */;
  %273 = reshape(%271, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), int32] */;
  %274 = reshape(%272, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %275 = @func_781(%273, %274) /* ty=(Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) */;
  %276 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %277 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %278 = @func_1084() /* ty=(Tensor[(10, 11, 8), bool],) */;
  %279 = @func_6561() /* ty=(Tensor[(78, 4), float64],) */;
  %280 = %279.0;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %282 = exp(%281) /* ty=Tensor[(78, 4), float64] */;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %284 = tan(%283) /* ty=Tensor[(78, 4), float64] */;
  %285 = cast(%var_6776, dtype="uint32") /* ty=Tensor[(78, 4), uint32] */;
  %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(2), int32] */;
  %287 = cast(%284, dtype="uint32") /* ty=Tensor[(78, 4), uint32] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %289 = @func_4654() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) */;
  %290 = %289.2;
  %291 = cast(%290, dtype="bool") /* ty=Tensor[(78, 4), bool] */;
  %292 = shape_of(%284, dtype="int32") /* ty=Tensor[(2), int32] */;
  %293 = cast(%284, dtype="bool") /* ty=Tensor[(78, 4), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %295 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 42), bool] */, dtype="bool") /* ty=Tensor[(10, 42), bool] */;
  %296 = cast(%var_6794, dtype="float64") /* ty=Tensor[(462), float64] */;
  %297 = reshape(%295, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), bool] */;
  %298 = reshape(%296, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
  %299 = @func_904(%297, %298) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) */;
  %300 = cast(%282, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %301 = cast(%282, dtype="int32") /* ty=Tensor[(78, 4), int32] */;
  %302 = shape_of(%284, dtype="int32") /* ty=Tensor[(2), int32] */;
  %303 = cast(%284, dtype="int32") /* ty=Tensor[(78, 4), int32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %305 = logical_xor(%303, %304) /* ty=Tensor[(78, 4), int32] */;
  %306 = cast(%var_6806, dtype="int16") /* ty=Tensor[(78, 4), int16] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(2), int32] */;
  %308 = cast(%305, dtype="int16") /* ty=Tensor[(78, 4), int16] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %310 = %268.1;
  %311 = %269.0;
  %312 = %270.0;
  %313 = %275.1;
  %314 = %276.0;
  %315 = %277.0;
  %316 = %278.0;
  %317 = bitwise_and(%287, %288) /* ty=Tensor[(78, 4), uint32] */;
  %318 = less_equal(%293, %294) /* ty=Tensor[(78, 4), bool] */;
  %319 = %299.4;
  %320 = log2(%300) /* ty=Tensor[(78, 4), float32] */;
  %321 = maximum(%308, %309) /* ty=Tensor[(78, 4), int16] */;
  (%310, %var_6692, %311, %312, %313, %var_6702, %314, %315, %316, %317, %318, %319, meta[relay.Constant][9] /* ty=Tensor[(10, 42), bool] */, %var_6794, %320, %321)
}

def @func_4524() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(3, 360), float32], Tensor[(10, 96), float32], Tensor[(10, 11, 8), bool]) {
  %322 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %323 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 360), float32] */, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %324 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 360), float32] */, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %325 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 96), float32] */, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %326 = reshape(%323, newshape=[12, 9, 10]) /* ty=Tensor[(12, 9, 10), float32] */;
  %327 = reshape(%324, newshape=[12, 9, 10]) /* ty=Tensor[(12, 9, 10), float32] */;
  %328 = reshape(%325, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %329 = @func_3207(%326, %327, %328) /* ty=(Tensor[(12, 9, 10), float32], Tensor[(10, 11, 8), float32], Tensor[(960), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %330 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 96), float32] */, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %331 = %322.0;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %333 = reshape(%332, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %334 = @func_998(%333) /* ty=(Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) */;
  %335 = %329.4;
  %336 = log(%330) /* ty=Tensor[(10, 96), float32] */;
  %337 = %334.1;
  (%331, %335, meta[relay.Constant][10] /* ty=Tensor[(3, 360), float32] */, %336, %337)
}

def @func_5575() -> (Tensor[(10, 11, 8), float32],) {
  %338 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %339 = %338.0;
  (%339,)
}

def @func_5094(%var_5086: Tensor[(13, 6, 12), float32]) -> Tensor[(13, 6, 12), float64] {
  %340 = cast(%var_5086, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %341 = log10(%340) /* ty=Tensor[(13, 6, 12), float32] */;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
  rsqrt(%342) /* ty=Tensor[(13, 6, 12), float64] */
}

def @func_389() -> Tensor[(10, 11, 8), float32] {
  %343 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %343.1
}

def @func_6188(%var_6176: Tensor[(1980), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(8, 110), float32], Tensor[(1980), float32], Tensor[(11, 3, 14), float64]) {
  %344 = cast(%var_6176, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %345 = reshape(%344, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %346 = @func_3395(%345) /* ty=(Tensor[(15, 11, 12), float32], Tensor[(10, 11, 8), float64], Tensor[(60, 14), int32], Tensor[(8, 110), float32]) */;
  %347 = @func_5426() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) */;
  %348 = @func_4063() /* ty=Tensor[(10, 11, 8), float32] */;
  %349 = %346.3;
  %350 = %347.2;
  (%348, %349, %var_6176, %350)
}

def @func_7407() -> (Tensor[(10, 11, 8), float32],) {
  %351 = @func_6505() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %352 = %351.1;
  (%352,)
}

def @func_4588() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %353 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %354 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %355 = %353.0;
  %356 = %354.1;
  (%355, %356)
}

def @func_6492() -> Tensor[(10, 11, 8), float32] {
  %357 = @func_2539() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %357.1
}

def @func_3395(%var_3341: Tensor[(15, 11, 12), float32]) -> (Tensor[(15, 11, 12), float32], Tensor[(10, 11, 8), float64], Tensor[(60, 14), int32], Tensor[(8, 110), float32]) {
  %358 = cast(%var_3341, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %359 = cast(meta[relay.Constant][12] /* ty=Tensor[(60, 14), int32] */, dtype="int32") /* ty=Tensor[(60, 14), int32] */;
  %360 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 110), float32] */, dtype="float32") /* ty=Tensor[(8, 110), float32] */;
  %361 = reshape(%359, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), int32] */;
  %362 = reshape(%360, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %363 = @func_781(%361, %362) /* ty=(Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) */;
  %364 = sigmoid(%358) /* ty=Tensor[(15, 11, 12), float32] */;
  %365 = %363.1;
  (%364, %365, meta[relay.Constant][12] /* ty=Tensor[(60, 14), int32] */, meta[relay.Constant][13] /* ty=Tensor[(8, 110), float32] */)
}

def @func_6072() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %366 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %367 = @func_3761() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %368 = %366.0;
  %369 = %367.0;
  (%368, %369)
}

def @func_1134() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %370 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %371 = @func_389() /* ty=Tensor[(10, 11, 8), float32] */;
  %372 = %370.0;
  (%371, %372)
}

def @func_8511(%var_8487: Tensor[(81), uint64]) -> (Tensor[(10, 11, 8), float32], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(81), uint64], Tensor[(96), float32], Tensor[(10, 11, 8), float32]) {
  %373 = @func_6022() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(462), float64]) */;
  %374 = @func_6072() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %375 = cast(%var_8487, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %376 = cast(%var_8487, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %377 = cast(meta[relay.Constant][14] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %378 = reshape(%375, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %379 = reshape(%376, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %380 = reshape(%377, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %381 = @func_4928(%378, %379, %380) /* ty=(Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) */;
  %382 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  %383 = %373.1;
  %384 = %374.0;
  %385 = %381.1;
  %386 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  (%382, %383, %384, %385, %var_8487, meta[relay.Constant][14] /* ty=Tensor[(96), float32] */, %386)
}

def @func_3437() -> (Tensor[(10, 11, 8), float32],) {
  %387 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %388 = %387.0;
  (%388,)
}

def @func_1084() -> (Tensor[(10, 11, 8), bool],) {
  %389 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %390 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %391 = %390.0;
  %392 = cast(%391, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %393 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%389, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = greater_equal(%394, %395) /* ty=Tensor[(10, 11, 8), bool] */;
  (%396,)
}

def @func_3591() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %397 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %398 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %399 = @func_2539() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %400 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %401 = %397.0;
  %402 = %398.0;
  %403 = %399.0;
  %404 = %400.0;
  (%401, %402, %403, %404)
}

def @func_1910(%var_1892: Tensor[(420), bool], %var_1893: Tensor[(462), float64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) {
  %405 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %408 = cast(%var_1892, dtype="bool") /* ty=Tensor[(420), bool] */;
  %409 = cast(%var_1893, dtype="float64") /* ty=Tensor[(462), float64] */;
  %410 = reshape(%408, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), bool] */;
  %411 = reshape(%409, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
  %412 = @func_904(%410, %411) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) */;
  %413 = sin(%407) /* ty=Tensor[(10, 11, 8), float64] */;
  %414 = %412.4;
  %415 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  (%413, %414, %var_1892, %var_1893, %415)
}

def @func_2655() -> Tensor[(10, 11, 8), float32] {
  %416 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %417 = cast(%416, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %418 = asin(%417) /* ty=Tensor[(10, 11, 8), float32] */;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  atan(%419) /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_6867(%var_6857: float32, %var_6858: Tensor[(6, 2, 5), float32], %var_6865: Tensor[(96), float32]) -> (Tensor[(6, 2, 5), float32], Tensor[(420), bool], Tensor[(96), float32]) {
  %420 = cast(%var_6857, dtype="float32") /* ty=float32 */;
  %421 = cast(%var_6858, dtype="float32") /* ty=Tensor[(6, 2, 5), float32] */;
  %422 = cast(%var_6865, dtype="float32") /* ty=Tensor[(96), float32] */;
  %423 = reshape(%422, newshape=[2, 4, 12]) /* ty=Tensor[(2, 4, 12), float32] */;
  %424 = @func_2613(%423) /* ty=(Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) */;
  %425 = power(%420, %421) /* ty=Tensor[(6, 2, 5), float32] */;
  %426 = %424.1;
  (%425, %426, %var_6865)
}

def @func_6108(%var_6101: Tensor[(7, 8, 1), float32]) -> (Tensor[(7, 8, 1), float32],) {
  %427 = cast(%var_6101, dtype="float32") /* ty=Tensor[(7, 8, 1), float32] */;
  %428 = erf(%427) /* ty=Tensor[(7, 8, 1), float32] */;
  (%428,)
}

def @func_207() -> (Tensor[(10, 11, 8), float32],) {
  %429 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%429,)
}

def @func_7447() -> Tensor[(10, 11, 8), float32] {
  %430 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %430.0
}

def @func_5321() -> (Tensor[(10, 11, 8), float32],) {
  %431 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
  (%431,)
}

def @func_7737() -> (Tensor[(10, 11, 8), float32],) {
  %432 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %433 = %432.0;
  (%433,)
}

def @func_8109() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %434 = @func_7407() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %435 = %434.0;
  %436 = @func_3091() /* ty=Tensor[(10, 11, 8), float32] */;
  %437 = @func_4210() /* ty=Tensor[(10, 11, 8), bool] */;
  (%435, %436, %437)
}

def @func_4928(%var_4871: Tensor[(9, 3, 3), uint64], %var_4875: Tensor[(9, 3, 3), uint64], %var_4915: Tensor[(96), float32]) -> (Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) {
  %438 = cast(%var_4871, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
  %439 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(9, 3, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 3, 3), uint64] */, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %442 = cast(%var_4875, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
  %443 = shape_of(%var_4871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%var_4871, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %446 = cast(%var_4915, dtype="float32") /* ty=Tensor[(96), float32] */;
  %447 = reshape(%446, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %448 = @func_4189(%447) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(420), bool], Tensor[(96), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %449 = less(%440, %441) /* ty=Tensor[(9, 3, 3), bool] */;
  %450 = floor_mod(%444, %445) /* ty=Tensor[(9, 3, 3), float32] */;
  %451 = %448.0;
  (%449, %450, %451, %var_4915)
}

def @func_3473(%var_3468: Tensor[(4, 15, 14), int32], %var_3469: Tensor[(4, 15, 14), int32]) -> Tensor[(4, 15, 14), int32] {
  %452 = cast(%var_3469, dtype="int32") /* ty=Tensor[(4, 15, 14), int32] */;
  %453 = shape_of(%var_3468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_3468, dtype="int32") /* ty=Tensor[(4, 15, 14), int32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%454, %455) /* ty=Tensor[(4, 15, 14), int32] */
}

def @func_5343() -> (Tensor[(10, 11, 8), float32],) {
  %456 = @func_5321() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %457 = %456.0;
  (%457,)
}

def @func_3923() -> Tensor[(10, 11, 8), float32] {
  %458 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %458.0
}

def @func_7698(%var_7689: Tensor[(14, 12, 2), int64], %var_7690: Tensor[(14, 12, 2), int64]) -> Tensor[(14, 12, 2), bool] {
  %459 = cast(%var_7690, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
  %460 = shape_of(%var_7689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%var_7689, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%461, %462) /* ty=Tensor[(14, 12, 2), bool] */
}

def @func_7226() -> (Tensor[(10, 11, 8), float32],) {
  %463 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %464 = %463.0;
  (%464,)
}

def @func_998(%var_987: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) {
  %465 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  %466 = cast(%var_987, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = cast(%465, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %471 = shape_of(%var_987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%var_987, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = less(%468, %469) /* ty=Tensor[(10, 11, 8), bool] */;
  %475 = not_equal(%472, %473) /* ty=Tensor[(10, 11, 8), bool] */;
  (%474, %475)
}

def @func_3207(%var_3171: Tensor[(12, 9, 10), float32], %var_3172: Tensor[(12, 9, 10), float32], %var_3187: Tensor[(960), float32]) -> (Tensor[(12, 9, 10), float32], Tensor[(10, 11, 8), float32], Tensor[(960), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %476 = cast(%var_3172, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
  %477 = shape_of(%var_3171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%var_3171, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %480 = cast(%var_3187, dtype="float32") /* ty=Tensor[(960), float32] */;
  %481 = reshape(%480, newshape=[8, 8, 15]) /* ty=Tensor[(8, 8, 15), float32] */;
  %482 = @func_726(%481) /* ty=(Tensor[(8, 8, 15), bool], Tensor[(10, 11, 8), float32], Tensor[(462), float64]) */;
  %483 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %484 = %483.2;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %486 = reshape(%485, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %487 = @func_2118(%486) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %488 = divide(%478, %479) /* ty=Tensor[(12, 9, 10), float32] */;
  %489 = %482.1;
  %490 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  %491 = %487.0;
  (%488, %489, %var_3187, %490, %484, %491)
}

def @func_7378() -> (Tensor[(10, 11, 8), float32],) {
  %492 = @func_4588() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %493 = %492.0;
  (%493,)
}

def @func_2636() -> (Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %494 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %495 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %496 = @func_2179() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %497 = %494.0;
  %498 = %495.1;
  %499 = %496.1;
  (%497, %498, %499)
}

def @func_5426() -> (Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) {
  %500 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %502 = cast(meta[relay.Constant][16] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %503 = reshape(%502, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %504 = @func_480(%503) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %505 = sqrt(%501) /* ty=Tensor[(10, 11, 8), float64] */;
  %506 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %507 = %504.0;
  (%505, %506, %507, meta[relay.Constant][16] /* ty=Tensor[(462), float64] */)
}

def @func_139() -> Tensor[(10, 11, 8), float32] {
  %508 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  log2(%508) /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1104() -> (Tensor[(10, 11, 8), float32],) {
  %509 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  (%509,)
}

def @func_3761() -> (Tensor[(10, 11, 8), float32],) {
  %510 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %511 = %510.0;
  (%511,)
}

def @func_1209() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64]) {
  %512 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %513 = @func_389() /* ty=Tensor[(10, 11, 8), float32] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %515 = acos(%514) /* ty=Tensor[(10, 11, 8), float64] */;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %517 = %512.1;
  %518 = log(%516) /* ty=Tensor[(10, 11, 8), float64] */;
  (%517, %518)
}

def @func_8636(%var_8616: Tensor[(462, 1), float64], %var_8625: Tensor[(462, 9), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462, 9), bool]) {
  %519 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %520 = @func_1951() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) */;
  %521 = cast(%var_8616, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
  %522 = reshape(%521, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %523 = @func_4415(%522) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %524 = cast(%var_8616, dtype="bool") /* ty=Tensor[(462, 1), bool] */;
  %525 = cast(%var_8625, dtype="bool") /* ty=Tensor[(462, 9), bool] */;
  %526 = %519.0;
  %527 = @func_3923() /* ty=Tensor[(10, 11, 8), float32] */;
  %528 = %520.0;
  %529 = %523.3;
  %530 = logical_and(%524, %525) /* ty=Tensor[(462, 9), bool] */;
  (%526, %527, %528, %529, %530)
}

def @func_5565(%var_5558: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %531 = @func_4867() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %532 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %533 = @func_4093() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %534 = %533.1;
  %535 = cast(%var_5558, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %539 = %531.1;
  %540 = %532.1;
  %541 = minimum(%537, %538) /* ty=Tensor[(10, 11, 8), float32] */;
  (%539, %540, %541)
}

def @func_3638() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %542 = @func_2179() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %543 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %544 = %542.1;
  (%543, %544)
}

def @func_4210() -> Tensor[(10, 11, 8), bool] {
  %545 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %545.1
}

def @func_3085() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %546 = @func_1854() /* ty=Tensor[(10, 11, 8), float32] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %548 = reshape(%547, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %549 = @func_998(%548) /* ty=(Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) */;
  %550 = %549.1;
  (%546, %550)
}

def @func_5833() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %551 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %552 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %553 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %554 = %551.0;
  %555 = %552.0;
  %556 = %553.1;
  %557 = @func_1854() /* ty=Tensor[(10, 11, 8), float32] */;
  (%554, %555, %556, %557)
}

def @func_8783() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %558 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %559 = @func_6573() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %560 = %558.0;
  %561 = %559.0;
  (%560, %561)
}

def @func_6022() -> (Tensor[(10, 11, 8), float32], Tensor[(462), float64]) {
  %562 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %563 = @func_5426() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) */;
  %564 = %562.0;
  %565 = %563.3;
  (%564, %565)
}

def @func_6561() -> (Tensor[(78, 4), float64],) {
  %566 = @func_4654() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) */;
  %567 = %566.2;
  (%567,)
}

def @func_2539() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %568 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %569 = %568.0;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %571 = reshape(%570, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %572 = @func_2118(%571) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %573 = %572.0;
  (%569, %573)
}

def @func_844() -> Tensor[(10, 11, 8), float32] {
  @func_139() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7754() -> (Tensor[(10, 11, 8), float32],) {
  %574 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  (%574,)
}

def @func_3261() -> Tensor[(10, 11, 8), float32] {
  %575 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %575.1
}

def @func_5679() -> (Tensor[(10, 11, 8), float32],) {
  %576 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %577 = %576.0;
  (%577,)
}

def @func_2482() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %578 = @func_2249() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %579 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %582 = reshape(%581, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %583 = @func_2118(%582) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %584 = %578.0;
  %585 = %583.1;
  (%584, %580, %585)
}

def @func_2294() -> Tensor[(10, 11, 8), float32] {
  %586 = @func_1382() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %586.0
}

def @func_6446() -> (Tensor[(10, 11, 8), float32],) {
  %587 = @func_3685() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %588 = %587.0;
  (%588,)
}

def @func_480(%var_450: Tensor[(11, 3, 14), float64]) -> (Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %589 = cast(%var_450, dtype="float64") /* ty=Tensor[(11, 3, 14), float64] */;
  %590 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %591 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %592 = tan(%589) /* ty=Tensor[(11, 3, 14), float64] */;
  %593 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  %594 = %590.1;
  %595 = %591.2;
  %596 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  (%592, %593, %594, %595, %596)
}

def @func_2913(%var_2900: Tensor[(880), float32]) -> (Tensor[(14, 9, 12), float64], Tensor[(10, 11, 8), int16], Tensor[(880), float32], Tensor[(10, 11, 8), float32]) {
  %597 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %598 = cast(%var_2900, dtype="float32") /* ty=Tensor[(880), float32] */;
  %599 = reshape(%598, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %600 = @func_1648(%599) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %601 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %602 = log(%597) /* ty=Tensor[(14, 9, 12), float64] */;
  %603 = %600.0;
  %604 = %601.0;
  (%602, %603, %var_2900, %604)
}

def @main(%var_8812: Tensor[(2, 8, 3), float64], %var_8827: Tensor[(2, 8, 3), float64], %var_8890: Tensor[(10, 42), bool], %var_8891: Tensor[(462), float64]) -> (Tensor[(2, 8, 3), bool], Tensor[(2, 8, 3), float32], Tensor[(2, 8, 3), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(2, 8, 3), bool]) {
  %605 = cast(%var_8812, dtype="float64") /* ty=Tensor[(2, 8, 3), float64] */;
  %606 = sin(%605) /* ty=Tensor[(2, 8, 3), float64] */;
  %607 = cast(%var_8827, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = cast(%var_8812, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
  %612 = cast(%var_8812, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %613 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%606, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %616 = less(%614, %615) /* ty=Tensor[(2, 8, 3), bool] */;
  %617 = cast(%606, dtype="uint64") /* ty=Tensor[(2, 8, 3), uint64] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="uint64") /* ty=Tensor[(2, 8, 3), uint64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %621 = @func_7378() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %622 = %621.0;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %624 = reshape(%623, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %625 = @func_1648(%624) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %626 = cast(%var_8890, dtype="bool") /* ty=Tensor[(10, 42), bool] */;
  %627 = cast(%var_8891, dtype="float64") /* ty=Tensor[(462), float64] */;
  %628 = reshape(%626, newshape=[420]) /* ty=Tensor[(420), bool] */;
  %629 = reshape(%627, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %630 = @func_1910(%628, %629) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) */;
  %631 = cast(%var_8827, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %632 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%606, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %635 = greater(%609, %610) /* ty=Tensor[(2, 8, 3), bool] */;
  %636 = cos(%611) /* ty=Tensor[(2, 8, 3), float32] */;
  %637 = multiply(%619, %620) /* ty=Tensor[(2, 8, 3), uint64] */;
  %638 = %625.1;
  %639 = %630.4;
  %640 = less_equal(%633, %634) /* ty=Tensor[(2, 8, 3), bool] */;
  (%635, %636, %637, %622, %638, %639, %var_8890, %var_8891, %640)
}

def @func_2179() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %641 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
  %642 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%641, %642)
}

def @func_6573() -> (Tensor[(10, 11, 8), float32],) {
  %643 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %644 = %643.0;
  (%644,)
}

def @func_5770() -> (Tensor[(15, 6, 12), bool], Tensor[(10, 11, 8), float32]) {
  %645 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %646 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(15, 6, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %649 = @func_5057() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %650 = %649.0;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %652 = equal(%647, %648) /* ty=Tensor[(15, 6, 12), bool] */;
  %653 = log10(%651) /* ty=Tensor[(10, 11, 8), float32] */;
  (%652, %653)
}

def @func_7080() -> (Tensor[(10, 11, 8), float32],) {
  %654 = @func_5833() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %655 = %654.2;
  (%655,)
}

def @func_7485() -> Tensor[(10, 11, 8), float32] {
  %656 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %656.1
}

def @func_1762() -> Tensor[(10, 11, 8), float32] {
  %657 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %657.0
}

def @func_563() -> (Tensor[(10, 11, 8), float32],) {
  %658 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %661 = tan(%660) /* ty=Tensor[(10, 11, 8), float32] */;
  (%661,)
}

def @func_7789() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %662 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %663 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %664 = %662.0;
  %665 = %663.0;
  %666 = @func_2294() /* ty=Tensor[(10, 11, 8), float32] */;
  (%664, %665, %666)
}

def @func_7433() -> (Tensor[(10, 11, 8), float32],) {
  %667 = @func_4654() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) */;
  %668 = %667.1;
  (%668,)
}

def @func_904(%var_852: Tensor[(2, 15, 14), bool], %var_881: Tensor[(462, 1), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) {
  %669 = cast(%var_881, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
  %670 = reshape(%669, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %671 = @func_480(%670) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %672 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %673 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(2, 15, 14), bool] */;
  %674 = shape_of(%var_852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%var_852, dtype="bool") /* ty=Tensor[(2, 15, 14), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = logical_or(%675, %676) /* ty=Tensor[(2, 15, 14), bool] */;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(2, 15, 14), float32] */;
  %679 = asinh(%678) /* ty=Tensor[(2, 15, 14), float32] */;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(2, 15, 14), float32] */;
  %681 = cos(%680) /* ty=Tensor[(2, 15, 14), float32] */;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(2, 15, 14), float32] */;
  %683 = log2(%682) /* ty=Tensor[(2, 15, 14), float32] */;
  %684 = cast(%677, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %688 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %689 = %671.4;
  %690 = %672.0;
  %691 = floor_mod(%686, %687) /* ty=Tensor[(2, 15, 14), float64] */;
  (%688, %689, %var_881, %690, %691)
}

def @func_1292() -> (Tensor[(10, 11, 8), float32],) {
  %692 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %693 = %692.1;
  (%693,)
}

def @func_312() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %694 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %695 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %696 = %694.0;
  %697 = %695.0;
  %698 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%696, %697, %698)
}

def @func_6351() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %699 = @func_4093() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %700 = @func_3685() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %701 = @func_4719() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %702 = %699.1;
  %703 = %700.0;
  %704 = %701.0;
  (%702, %703, %704)
}

def @func_8247() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %705 = @func_3923() /* ty=Tensor[(10, 11, 8), float32] */;
  %706 = @func_6115() /* ty=Tensor[(10, 11, 8), float32] */;
  (%705, %706)
}

def @func_5057() -> (Tensor[(10, 11, 8), uint64],) {
  %707 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %708 = %707.1;
  (%708,)
}

def @func_5939(%var_5897: Tensor[(5, 13, 12), float64], %var_5914: Tensor[(936), float32]) -> (Tensor[(5, 13, 12), float32], Tensor[(13, 6, 12), float64], Tensor[(936), float32]) {
  %709 = cast(%var_5897, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
  %710 = sqrt(%709) /* ty=Tensor[(5, 13, 12), float64] */;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(5, 13, 12), float32] */;
  %712 = cast(%var_5914, dtype="float32") /* ty=Tensor[(936), float32] */;
  %713 = reshape(%712, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
  %714 = exp(%711) /* ty=Tensor[(5, 13, 12), float32] */;
  %715 = @func_5094(%713) /* ty=Tensor[(13, 6, 12), float64] */;
  (%714, %715, %var_5914)
}

def @func_6505() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %716 = @func_4093() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %717 = %716.0;
  %718 = @func_3923() /* ty=Tensor[(10, 11, 8), float32] */;
  (%717, %718)
}

def @func_1847() -> (Tensor[(10, 11, 8), uint64],) {
  %719 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %720 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %723 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%719, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %726 = bitwise_or(%724, %725) /* ty=Tensor[(10, 11, 8), uint64] */;
  (%726,)
}

def @func_1648(%var_1612: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) {
  %727 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %728 = cast(%var_1612, dtype="int16") /* ty=Tensor[(10, 11, 8), int16] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="int16") /* ty=Tensor[(10, 11, 8), int16] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %732 = logical_xor(%730, %731) /* ty=Tensor[(10, 11, 8), int16] */;
  %733 = @func_1545() /* ty=Tensor[(10, 11, 8), float32] */;
  (%732, %733)
}

def @func_5197(%var_5140: Tensor[(81), uint64], %var_5141: Tensor[(96), float32], %var_5155: Tensor[(1001, 1), float32], %var_5180: Tensor[(81), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(11, 7, 13), bool], Tensor[(1001, 96), int32], Tensor[(10, 11, 8), bool], Tensor[(81), float32], Tensor[(81), float32]) {
  %734 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %735 = cast(%var_5140, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %736 = cast(%var_5140, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %737 = cast(%var_5141, dtype="float32") /* ty=Tensor[(96), float32] */;
  %738 = reshape(%735, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %739 = reshape(%736, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %740 = reshape(%737, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %741 = @func_4928(%738, %739, %740) /* ty=(Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) */;
  %742 = cast(%var_5155, dtype="float32") /* ty=Tensor[(1001, 1), float32] */;
  %743 = reshape(%742, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %744 = @func_4231(%743) /* ty=(Tensor[(11, 7, 13), float32],) */;
  %745 = %744.0;
  %746 = cast(%var_5155, dtype="bool") /* ty=Tensor[(1001, 1), bool] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="bool") /* ty=Tensor[(11, 7, 13), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = cast(%var_5141, dtype="int32") /* ty=Tensor[(96), int32] */;
  %751 = cast(%var_5155, dtype="int32") /* ty=Tensor[(1001, 1), int32] */;
  %752 = %734.0;
  %753 = cast(%752, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %754 = reshape(%753, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), uint64] */;
  %755 = cast(%var_5140, dtype="float32") /* ty=Tensor[(81), float32] */;
  %756 = acosh(%755) /* ty=Tensor[(81), float32] */;
  %757 = cast(%var_5180, dtype="float32") /* ty=Tensor[(81), float32] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(1), int32] */;
  %759 = cast(%756, dtype="float32") /* ty=Tensor[(81), float32] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?), float32] */;
  %761 = cast(%756, dtype="float32") /* ty=Tensor[(81), float32] */;
  %762 = %741.1;
  %763 = equal(%748, %749) /* ty=Tensor[(11, 7, 13), bool] */;
  %764 = bitwise_xor(%750, %751) /* ty=Tensor[(1001, 96), int32] */;
  %765 = @func_3002(%754) /* ty=Tensor[(10, 11, 8), bool] */;
  %766 = floor_divide(%759, %760) /* ty=Tensor[(81), float32] */;
  %767 = erf(%761) /* ty=Tensor[(81), float32] */;
  (%752, %762, %763, %764, %765, %766, %767)
}

def @func_5732() -> Tensor[(10, 11, 8), float32] {
  %768 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %768.0
}

def @func_2684() -> (Tensor[(10, 11, 8), float32],) {
  %769 = @func_2179() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %770 = %769.1;
  (%770,)
}

def @func_4415(%var_4377: Tensor[(462), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %771 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %772 = cast(%var_4377, dtype="float64") /* ty=Tensor[(462), float64] */;
  %773 = reshape(%772, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %774 = @func_480(%773) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %775 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %776 = %771.0;
  %777 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %778 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  %779 = %774.0;
  %780 = %775.0;
  %781 = @func_2294() /* ty=Tensor[(10, 11, 8), float32] */;
  (%776, %777, %778, %779, %var_4377, %780, %781)
}

def @func_1454(%var_1415: Tensor[(13, 8, 3), float64], %var_1419: Tensor[(10, 42), bool]) -> (Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %782 = cast(%var_1415, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %783 = cast(%var_1419, dtype="bool") /* ty=Tensor[(10, 42), bool] */;
  %784 = cast(meta[relay.Constant][22] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %785 = reshape(%783, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), bool] */;
  %786 = reshape(%784, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
  %787 = @func_904(%785, %786) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) */;
  %788 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %789 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %790 = tan(%782) /* ty=Tensor[(13, 8, 3), float64] */;
  %791 = %787.2;
  %792 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  %793 = %788.0;
  %794 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %795 = %789.1;
  (%790, %791, %var_1419, meta[relay.Constant][22] /* ty=Tensor[(462), float64] */, %792, %793, %794, %795)
}

def @func_6115() -> Tensor[(10, 11, 8), float32] {
  %796 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %796.1
}

def @func_3058(%var_3036: Tensor[(10, 1, 12), int16], %var_3037: Tensor[(10, 4, 12), int16]) -> (Tensor[(10, 4, 12), int16], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 4, 12), float32]) {
  %797 = cast(%var_3036, dtype="int16") /* ty=Tensor[(10, 1, 12), int16] */;
  %798 = cast(%var_3037, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %799 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %800 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %801 = cast(%var_3037, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %802 = minimum(%797, %798) /* ty=Tensor[(10, 4, 12), int16] */;
  %803 = %799.0;
  %804 = %800.1;
  %805 = asin(%801) /* ty=Tensor[(10, 4, 12), float32] */;
  (%802, %803, %804, %805)
}

def @func_7732() -> (Tensor[(10, 11, 8), float32],) {
  %806 = @func_5874() /* ty=Tensor[(10, 11, 8), float32] */;
  (%806,)
}

def @func_8376(%var_8331: Tensor[(16, 6), float32], %var_8363: Tensor[(1001), float32]) -> (Tensor[(10, 11, 8), uint64], Tensor[(9, 3, 3), float32], Tensor[(9, 9), uint64], Tensor[(16, 6), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), bool]) {
  %807 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %808 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
  %809 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
  %810 = cast(%var_8331, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %811 = reshape(%808, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %812 = reshape(%809, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %813 = reshape(%810, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %814 = @func_4928(%811, %812, %813) /* ty=(Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) */;
  %815 = @func_3281() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %816 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
  %817 = cast(%var_8331, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %818 = cast(%var_8363, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %819 = %814.1;
  %820 = cast(%819, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
  %821 = reshape(%816, newshape=[81]) /* ty=Tensor[(81), uint64] */;
  %822 = reshape(%817, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %823 = reshape(%818, newshape=[1001, 1]) /* ty=Tensor[(1001, 1), float32] */;
  %824 = reshape(%820, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %825 = @func_5197(%821, %822, %823, %824) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(11, 7, 13), bool], Tensor[(1001, 96), int32], Tensor[(10, 11, 8), bool], Tensor[(81), float32], Tensor[(81), float32]) */;
  %826 = @func_1084() /* ty=(Tensor[(10, 11, 8), bool],) */;
  %827 = %807.0;
  %828 = %815.0;
  %829 = @func_2433() /* ty=Tensor[(10, 11, 8), float32] */;
  %830 = %825.0;
  %831 = %826.0;
  (%827, %819, meta[relay.Constant][23] /* ty=Tensor[(9, 9), uint64] */, %var_8331, %828, %829, %830, %var_8363, %831)
}

def @func_726(%var_700: Tensor[(8, 8, 15), float32]) -> (Tensor[(8, 8, 15), bool], Tensor[(10, 11, 8), float32], Tensor[(462), float64]) {
  %832 = cast(%var_700, dtype="float32") /* ty=Tensor[(8, 8, 15), float32] */;
  %833 = sinh(%832) /* ty=Tensor[(8, 8, 15), float32] */;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(8, 8, 15), float64] */;
  %835 = log2(%834) /* ty=Tensor[(8, 8, 15), float64] */;
  %836 = cast(%835, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %837 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%833, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %840 = cast(meta[relay.Constant][24] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %841 = reshape(%840, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %842 = @func_480(%841) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %843 = greater(%838, %839) /* ty=Tensor[(8, 8, 15), bool] */;
  %844 = %842.1;
  (%843, %844, meta[relay.Constant][24] /* ty=Tensor[(462), float64] */)
}

def @func_2004() -> (Tensor[(10, 11, 8), uint64],) {
  %845 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %846 = %845.0;
  (%846,)
}

def @func_2854() -> (Tensor[(10, 11, 8), float32],) {
  %847 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%847,)
}

def @func_5465(%var_5446: Tensor[(16, 7, 15), float32]) -> (Tensor[(16, 7, 15), float32],) {
  %848 = cast(%var_5446, dtype="float32") /* ty=Tensor[(16, 7, 15), float32] */;
  %849 = acosh(%848) /* ty=Tensor[(16, 7, 15), float32] */;
  (%849,)
}

def @func_928() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %850 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %851 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %852 = %850.1;
  (%851, %852)
}

def @func_4063() -> Tensor[(10, 11, 8), float32] {
  @func_234() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_5617() -> Tensor[(10, 11, 8), float32] {
  %853 = @func_5321() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %853.0
}

def @func_3991(%var_3965: Tensor[(4, 15, 6), int16]) -> (Tensor[(4, 15, 6), bool],) {
  %854 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 15, 6), int16] */, dtype="bool") /* ty=Tensor[(4, 15, 6), bool] */;
  %855 = shape_of(%var_3965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%var_3965, dtype="bool") /* ty=Tensor[(4, 15, 6), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = less(%856, %857) /* ty=Tensor[(4, 15, 6), bool] */;
  (%858,)
}

def @func_7026(%var_6986: uint64, %var_6987: Tensor[(10, 14, 14), uint64], %var_7018: Tensor[(420, 2), int32]) -> (Tensor[(10, 14, 14), bool], Tensor[(78, 4), float32], Tensor[(880), float32], Tensor[(420, 2), int32], Tensor[(1, 312), float64], Tensor[(462), float64], Tensor[(10, 14, 14), float64]) {
  %859 = cast(%var_6986, dtype="bool") /* ty=bool */;
  %860 = cast(%var_6987, dtype="bool") /* ty=Tensor[(10, 14, 14), bool] */;
  %861 = less(%859, %860) /* ty=Tensor[(10, 14, 14), bool] */;
  %862 = cast(%var_6987, dtype="bool") /* ty=Tensor[(10, 14, 14), bool] */;
  %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%861, dtype="bool") /* ty=Tensor[(10, 14, 14), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %866 = cast(meta[relay.Constant][26] /* ty=Tensor[(880), float32] */, dtype="float32") /* ty=Tensor[(880), float32] */;
  %867 = cast(%var_7018, dtype="int32") /* ty=Tensor[(420, 2), int32] */;
  %868 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 312), float64] */, dtype="float64") /* ty=Tensor[(1, 312), float64] */;
  %869 = cast(meta[relay.Constant][28] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %870 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 312), float64] */, dtype="int32") /* ty=Tensor[(1, 312), int32] */;
  %871 = reshape(%866, newshape=[8, 110]) /* ty=Tensor[(8, 110), float32] */;
  %872 = reshape(%867, newshape=[840]) /* ty=Tensor[(840), int32] */;
  %873 = reshape(%868, newshape=[78, 4]) /* ty=Tensor[(78, 4), float64] */;
  %874 = reshape(%869, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %875 = reshape(%870, newshape=[78, 4]) /* ty=Tensor[(78, 4), int32] */;
  %876 = @func_6812(%871, %872, %873, %874, %875) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(8, 110), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64], Tensor[(840), int32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool], Tensor[(78, 4), uint32], Tensor[(78, 4), bool], Tensor[(2, 15, 14), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(78, 4), float32], Tensor[(78, 4), int16]) */;
  %877 = cast(%var_6987, dtype="float64") /* ty=Tensor[(10, 14, 14), float64] */;
  %878 = greater_equal(%864, %865) /* ty=Tensor[(10, 14, 14), bool] */;
  %879 = %876.14;
  %880 = acosh(%877) /* ty=Tensor[(10, 14, 14), float64] */;
  (%878, %879, meta[relay.Constant][26] /* ty=Tensor[(880), float32] */, %var_7018, meta[relay.Constant][27] /* ty=Tensor[(1, 312), float64] */, meta[relay.Constant][28] /* ty=Tensor[(462), float64] */, %880)
}

def @func_4608(%var_4590: Tensor[(4, 2, 3), uint32]) -> (Tensor[(4, 2, 3), uint32],) {
  %881 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 2, 3), uint32] */, dtype="uint32") /* ty=Tensor[(4, 2, 3), uint32] */;
  %882 = shape_of(%var_4590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%var_4590, dtype="uint32") /* ty=Tensor[(4, 2, 3), uint32] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %885 = maximum(%883, %884) /* ty=Tensor[(4, 2, 3), uint32] */;
  (%885,)
}

def @func_5290() -> (Tensor[(10, 11, 8), float32],) {
  %886 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  (%886,)
}

def @func_6324(%var_6269: Tensor[(1680), float32], %var_6288: Tensor[(1001), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(16, 7, 15), float32], Tensor[(1680), float32], Tensor[(462), float64], Tensor[(210, 2), bool], Tensor[(462), float64], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %887 = cast(%var_6269, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %888 = reshape(%887, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), float32] */;
  %889 = @func_5465(%888) /* ty=(Tensor[(16, 7, 15), float32],) */;
  %890 = cast(meta[relay.Constant][30] /* ty=Tensor[(210, 2), bool] */, dtype="bool") /* ty=Tensor[(210, 2), bool] */;
  %891 = cast(meta[relay.Constant][31] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %892 = reshape(%890, newshape=[420]) /* ty=Tensor[(420), bool] */;
  %893 = reshape(%891, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %894 = @func_1910(%892, %893) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) */;
  %895 = cast(%var_6288, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %896 = reshape(%895, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %897 = @func_4231(%896) /* ty=(Tensor[(11, 7, 13), float32],) */;
  %898 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %899 = @func_5639() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %900 = @func_5617() /* ty=Tensor[(10, 11, 8), float32] */;
  %901 = %889.0;
  %902 = %894.3;
  %903 = %897.0;
  %904 = %898.0;
  %905 = %899.0;
  %906 = @func_4210() /* ty=Tensor[(10, 11, 8), bool] */;
  (%900, %901, %var_6269, %902, meta[relay.Constant][30] /* ty=Tensor[(210, 2), bool] */, meta[relay.Constant][31] /* ty=Tensor[(462), float64] */, %903, %var_6288, %904, %905, %906)
}

def @func_7529() -> Tensor[(10, 11, 8), float32] {
  %907 = @func_7407() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %907.0
}

def @func_5238(%var_5210: Tensor[(1, 10, 15), float32], %var_5223: Tensor[(10, 10, 15), bool]) -> (Tensor[(1, 10, 15), float32], Tensor[(10, 10, 15), float64]) {
  %908 = cast(%var_5210, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %909 = sin(%908) /* ty=Tensor[(1, 10, 15), float32] */;
  %910 = cast(%909, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %911 = cast(%909, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %912 = shape_of(%var_5210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%var_5210, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %915 = greater_equal(%913, %914) /* ty=Tensor[(?, 10, 15), bool] */;
  %916 = cast(%915, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
  %917 = cast(%var_5223, dtype="float64") /* ty=Tensor[(10, 10, 15), float64] */;
  %918 = atanh(%910) /* ty=Tensor[(1, 10, 15), float32] */;
  %919 = power(%916, %917) /* ty=Tensor[(10, 10, 15), float64] */;
  (%918, %919)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2570() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_2568() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_483(%var_481: Tensor[(11, 3, 14), float64]) -> (Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_480(%var_481) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_234() -> Tensor[(10, 11, 8), float32] {
  @func_176() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_2360(%var_2296: Tensor[(4, 15, 4), float64], %var_2306: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), uint32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(4, 15, 4), float32], Tensor[(10, 11, 8), float32]) {
  %0 = cast(%var_2296, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %1 = log(%0) /* ty=Tensor[(4, 15, 4), float64] */;
  %2 = cast(%var_2306, dtype="uint32") /* ty=Tensor[(4, 15, 4), uint32] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="uint32") /* ty=Tensor[(4, 15, 4), uint32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %6 = @func_1951() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) */;
  %7 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %8 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %9 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %10 = cast(%1, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %11 = maximum(%4, %5) /* ty=Tensor[(4, 15, 4), uint32] */;
  %12 = %6.0;
  %13 = %7.1;
  %14 = %8.0;
  %15 = %9.1;
  %16 = erf(%10) /* ty=Tensor[(4, 15, 4), float32] */;
  %17 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  (%11, %12, %13, %14, %15, %16, %17)
}

def @func_6505() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %18 = @func_4093() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %19 = %18.0;
  %20 = @func_3923() /* ty=Tensor[(10, 11, 8), float32] */;
  (%19, %20)
}

def @func_3925() -> Tensor[(10, 11, 8), float32] {
  @func_3923() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_178() -> Tensor[(10, 11, 8), float32] {
  @func_176() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_5771() -> (Tensor[(15, 6, 12), bool], Tensor[(10, 11, 8), float32]) {
  %30 = fn () -> (Tensor[(15, 6, 12), bool], Tensor[(10, 11, 8), float32]) {
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
    %22 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(15, 6, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 6, 12), int64] */, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %25 = @func_5057() /* ty=(Tensor[(10, 11, 8), uint64],) */;
    %26 = %25.0;
    %27 = cast(%26, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    %28 = equal(%23, %24) /* ty=Tensor[(15, 6, 12), bool] */;
    %29 = log10(%27) /* ty=Tensor[(10, 11, 8), float32] */;
    (%28, %29)
  };
  %30() /* ty=(Tensor[(15, 6, 12), bool], Tensor[(10, 11, 8), float32]) */
}

def @func_726(%var_700: Tensor[(8, 8, 15), float32]) -> (Tensor[(8, 8, 15), bool], Tensor[(10, 11, 8), float32], Tensor[(462), float64]) {
  %31 = cast(%var_700, dtype="float32") /* ty=Tensor[(8, 8, 15), float32] */;
  %32 = sinh(%31) /* ty=Tensor[(8, 8, 15), float32] */;
  %33 = cast(%32, dtype="float64") /* ty=Tensor[(8, 8, 15), float64] */;
  %34 = log2(%33) /* ty=Tensor[(8, 8, 15), float64] */;
  %35 = cast(%34, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %36 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%32, dtype="bool") /* ty=Tensor[(8, 8, 15), bool] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %40 = reshape(%39, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %41 = @func_480(%40) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %42 = greater(%37, %38) /* ty=Tensor[(8, 8, 15), bool] */;
  %43 = %41.1;
  (%42, %43, meta[relay.Constant][2] /* ty=Tensor[(462), float64] */)
}

def @func_4417(%var_4416: Tensor[(462), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %55 = fn (%var_4377: Tensor[(462), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %44 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %45 = cast(%var_4377, dtype="float64") /* ty=Tensor[(462), float64] */;
    %46 = reshape(%45, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
    %47 = @func_480(%46) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %48 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %49 = %44.0;
    %50 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
    %51 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
    %52 = %47.0;
    %53 = %48.0;
    %54 = @func_2294() /* ty=Tensor[(10, 11, 8), float32] */;
    (%49, %50, %51, %52, %var_4377, %53, %54)
  };
  %55(%var_4416) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_140() -> Tensor[(10, 11, 8), float32] {
  %57 = fn () -> Tensor[(10, 11, 8), float32] {
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    log2(%56) /* ty=Tensor[(10, 11, 8), float32] */
  };
  %57() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_4969() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %60 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %58 = @func_1545() /* ty=Tensor[(10, 11, 8), float32] */;
    %59 = @func_3091() /* ty=Tensor[(10, 11, 8), float32] */;
    (%58, %59)
  };
  %60() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_6159() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %68 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %61 = @func_2249() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %62 = %61.0;
    %63 = cast(%62, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    %64 = reshape(%63, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
    %65 = @func_2118(%64) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %66 = @func_1854() /* ty=Tensor[(10, 11, 8), float32] */;
    %67 = %65.1;
    (%66, %62, %67)
  };
  %68() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_5238(%var_5210: Tensor[(1, 10, 15), float32], %var_5223: Tensor[(10, 10, 15), bool]) -> (Tensor[(1, 10, 15), float32], Tensor[(10, 10, 15), float64]) {
  %69 = cast(%var_5210, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %70 = sin(%69) /* ty=Tensor[(1, 10, 15), float32] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(1, 10, 15), float32] */;
  %72 = cast(%70, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %73 = shape_of(%var_5210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_5210, dtype="bool") /* ty=Tensor[(1, 10, 15), bool] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %76 = greater_equal(%74, %75) /* ty=Tensor[(?, 10, 15), bool] */;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(?, 10, 15), float64] */;
  %78 = cast(%var_5223, dtype="float64") /* ty=Tensor[(10, 10, 15), float64] */;
  %79 = atanh(%71) /* ty=Tensor[(1, 10, 15), float32] */;
  %80 = power(%77, %78) /* ty=Tensor[(10, 10, 15), float64] */;
  (%79, %80)
}

def @func_7754() -> (Tensor[(10, 11, 8), float32],) {
  %81 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  (%81,)
}

def @func_7151(%var_7149: uint64, %var_7150: Tensor[(840), int32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float32], uint64, Tensor[(1960), uint64], Tensor[(840), int32]) {
  %94 = fn (%var_7141: uint64, %var_7143: Tensor[(840), int32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float32], uint64, Tensor[(1960), uint64], Tensor[(840), int32]) {
    %82 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %83 = @func_2854() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %84 = cast(%var_7141, dtype="uint64") /* ty=uint64 */;
    %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(1960), uint64] */, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
    %86 = cast(%var_7143, dtype="int32") /* ty=Tensor[(840), int32] */;
    %87 = reshape(%84, newshape=[]) /* ty=uint64 */;
    %88 = reshape(%85, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
    %89 = reshape(%86, newshape=[420, 2]) /* ty=Tensor[(420, 2), int32] */;
    %90 = @func_7026(%87, %88, %89) /* ty=(Tensor[(10, 14, 14), bool], Tensor[(78, 4), float32], Tensor[(880), float32], Tensor[(420, 2), int32], Tensor[(1, 312), float64], Tensor[(462), float64], Tensor[(10, 14, 14), float64]) */;
    %91 = %82.0;
    %92 = %83.0;
    %93 = %90.1;
    (%91, %92, %93, %var_7141, meta[relay.Constant][4] /* ty=Tensor[(1960), uint64] */, %var_7143)
  };
  %94(%var_7149, %var_7150) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float32], uint64, Tensor[(1960), uint64], Tensor[(840), int32]) */
}

def @func_6871(%var_6868: float32, %var_6869: Tensor[(6, 2, 5), float32], %var_6870: Tensor[(96), float32]) -> (Tensor[(6, 2, 5), float32], Tensor[(420), bool], Tensor[(96), float32]) {
  %102 = fn (%var_6857: float32, %var_6858: Tensor[(6, 2, 5), float32], %var_6865: Tensor[(96), float32]) -> (Tensor[(6, 2, 5), float32], Tensor[(420), bool], Tensor[(96), float32]) {
    %95 = cast(%var_6857, dtype="float32") /* ty=float32 */;
    %96 = cast(%var_6858, dtype="float32") /* ty=Tensor[(6, 2, 5), float32] */;
    %97 = cast(%var_6865, dtype="float32") /* ty=Tensor[(96), float32] */;
    %98 = reshape(%97, newshape=[2, 4, 12]) /* ty=Tensor[(2, 4, 12), float32] */;
    %99 = @func_2613(%98) /* ty=(Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) */;
    %100 = power(%95, %96) /* ty=Tensor[(6, 2, 5), float32] */;
    %101 = %99.1;
    (%100, %101, %var_6865)
  };
  %102(%var_6868, %var_6869, %var_6870) /* ty=(Tensor[(6, 2, 5), float32], Tensor[(420), bool], Tensor[(96), float32]) */
}

def @func_7529() -> Tensor[(10, 11, 8), float32] {
  %103 = @func_7407() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %103.0
}

def @func_7734() -> (Tensor[(10, 11, 8), float32],) {
  @func_7732() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_7739() -> (Tensor[(10, 11, 8), float32],) {
  @func_7737() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5426() -> (Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) {
  %104 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %107 = reshape(%106, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %108 = @func_480(%107) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %109 = sqrt(%105) /* ty=Tensor[(10, 11, 8), float64] */;
  %110 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %111 = %108.0;
  (%109, %110, %111, meta[relay.Constant][5] /* ty=Tensor[(462), float64] */)
}

def @func_7820() -> (Tensor[(10, 11, 8), uint64],) {
  %114 = fn () -> (Tensor[(10, 11, 8), uint64],) {
    %112 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
    %113 = %112.0;
    (%113,)
  };
  %114() /* ty=(Tensor[(10, 11, 8), uint64],) */
}

def @func_4932(%var_4929: Tensor[(9, 3, 3), uint64], %var_4930: Tensor[(9, 3, 3), uint64], %var_4931: Tensor[(96), float32]) -> (Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) {
  %129 = fn (%var_4871: Tensor[(9, 3, 3), uint64], %var_4875: Tensor[(9, 3, 3), uint64], %var_4915: Tensor[(96), float32]) -> (Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) {
    %115 = cast(%var_4871, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
    %116 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(9, 3, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 3, 3), uint64] */, dtype="bool") /* ty=Tensor[(9, 3, 3), bool] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %119 = cast(%var_4875, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
    %120 = shape_of(%var_4871, dtype="int32") /* ty=Tensor[(3), int32] */;
    %121 = cast(%var_4871, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %123 = cast(%var_4915, dtype="float32") /* ty=Tensor[(96), float32] */;
    %124 = reshape(%123, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %125 = @func_4189(%124) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(420), bool], Tensor[(96), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %126 = less(%117, %118) /* ty=Tensor[(9, 3, 3), bool] */;
    %127 = floor_mod(%121, %122) /* ty=Tensor[(9, 3, 3), float32] */;
    %128 = %125.0;
    (%126, %127, %128, %var_4915)
  };
  %129(%var_4929, %var_4930, %var_4931) /* ty=(Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) */
}

def @func_8794(%var_8793: Tensor[(2, 3, 13), float32]) -> (Tensor[(2, 3, 13), float32],) {
  %132 = fn (%var_8786: Tensor[(2, 3, 13), float32]) -> (Tensor[(2, 3, 13), float32],) {
    %130 = cast(%var_8786, dtype="float32") /* ty=Tensor[(2, 3, 13), float32] */;
    %131 = log(%130) /* ty=Tensor[(2, 3, 13), float32] */;
    (%131,)
  };
  %132(%var_8793) /* ty=(Tensor[(2, 3, 13), float32],) */
}

def @func_389() -> Tensor[(10, 11, 8), float32] {
  %133 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %133.1
}

def @func_563() -> (Tensor[(10, 11, 8), float32],) {
  %134 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %137 = tan(%136) /* ty=Tensor[(10, 11, 8), float32] */;
  (%137,)
}

def @func_1545() -> Tensor[(10, 11, 8), float32] {
  @func_139() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_729(%var_727: Tensor[(8, 8, 15), float32]) -> (Tensor[(8, 8, 15), bool], Tensor[(10, 11, 8), float32], Tensor[(462), float64]) {
  @func_726(%var_727) /* ty=(Tensor[(8, 8, 15), bool], Tensor[(10, 11, 8), float32], Tensor[(462), float64]) */
}

def @func_1294() -> (Tensor[(10, 11, 8), float32],) {
  @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_928() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %138 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %139 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %140 = %138.1;
  (%139, %140)
}

def @func_7031(%var_7028: uint64, %var_7029: Tensor[(10, 14, 14), uint64], %var_7030: Tensor[(420, 2), int32]) -> (Tensor[(10, 14, 14), bool], Tensor[(78, 4), float32], Tensor[(880), float32], Tensor[(420, 2), int32], Tensor[(1, 312), float64], Tensor[(462), float64], Tensor[(10, 14, 14), float64]) {
  @func_7026(%var_7028, %var_7029, %var_7030) /* ty=(Tensor[(10, 14, 14), bool], Tensor[(78, 4), float32], Tensor[(880), float32], Tensor[(420, 2), int32], Tensor[(1, 312), float64], Tensor[(462), float64], Tensor[(10, 14, 14), float64]) */
}

def @func_5707() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), int16]) {
  @func_5705() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), int16]) */
}

def @func_312() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %141 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %142 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %143 = %141.0;
  %144 = %142.0;
  %145 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%143, %144, %145)
}

def @func_1913(%var_1911: Tensor[(420), bool], %var_1912: Tensor[(462), float64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) {
  %157 = fn (%var_1892: Tensor[(420), bool], %var_1893: Tensor[(462), float64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) {
    %146 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %147 = %146.0;
    %148 = cast(%147, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
    %149 = cast(%var_1892, dtype="bool") /* ty=Tensor[(420), bool] */;
    %150 = cast(%var_1893, dtype="float64") /* ty=Tensor[(462), float64] */;
    %151 = reshape(%149, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), bool] */;
    %152 = reshape(%150, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
    %153 = @func_904(%151, %152) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) */;
    %154 = sin(%148) /* ty=Tensor[(10, 11, 8), float64] */;
    %155 = %153.4;
    %156 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
    (%154, %155, %var_1892, %var_1893, %156)
  };
  %157(%var_1911, %var_1912) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) */
}

def @func_2118(%var_2035: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %158 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %159 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %160 = cast(%var_2035, dtype="int32") /* ty=Tensor[(10, 11, 8), int32] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="int32") /* ty=Tensor[(10, 11, 8), int32] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %164 = bitwise_and(%162, %163) /* ty=Tensor[(10, 11, 8), int32] */;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %166 = cast(%var_2035, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %167 = reshape(%166, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %168 = @func_1648(%167) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %169 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %170 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %171 = %158.0;
  %172 = asinh(%165) /* ty=Tensor[(10, 11, 8), float32] */;
  %173 = %168.1;
  %174 = %169.0;
  %175 = %170.0;
  (%171, %172, %173, %174, %175)
}

def @func_2854() -> (Tensor[(10, 11, 8), float32],) {
  %176 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%176,)
}

def @func_391() -> Tensor[(10, 11, 8), float32] {
  @func_389() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7080() -> (Tensor[(10, 11, 8), float32],) {
  %177 = @func_5833() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %178 = %177.2;
  (%178,)
}

def @func_2004() -> (Tensor[(10, 11, 8), uint64],) {
  %179 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %180 = %179.0;
  (%180,)
}

def @func_7531() -> Tensor[(10, 11, 8), float32] {
  @func_7529() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_3477(%var_3475: Tensor[(4, 15, 14), int32], %var_3476: Tensor[(4, 15, 14), int32]) -> Tensor[(4, 15, 14), int32] {
  @func_3473(%var_3475, %var_3476) /* ty=Tensor[(4, 15, 14), int32] */
}

def @func_314() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_845() -> Tensor[(10, 11, 8), float32] {
  %181 = fn () -> Tensor[(10, 11, 8), float32] {
    @func_139() /* ty=Tensor[(10, 11, 8), float32] */
  };
  %181() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_4094() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %185 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %182 = @func_2568() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %183 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
    %184 = %182.1;
    (%183, %184)
  };
  %185() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_2249() -> (Tensor[(10, 11, 8), float32],) {
  %186 = @func_389() /* ty=Tensor[(10, 11, 8), float32] */;
  (%186,)
}

def @func_7448() -> Tensor[(10, 11, 8), float32] {
  %188 = fn () -> Tensor[(10, 11, 8), float32] {
    %187 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %187.0
  };
  %188() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_2945() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %189 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %190 = @func_2568() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %191 = %189.0;
  %192 = %190.1;
  (%191, %192)
}

def @func_8061(%var_8057: Tensor[(11, 3, 15), float64], %var_8058: Tensor[(11, 3, 15), float64], %var_8059: Tensor[(11, 3, 15), float64], %var_8060: Tensor[(11, 3, 15), float64]) -> (Tensor[(11, 3, 15), float64], Tensor[(11, 3, 15), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 15), float32], Tensor[(11, 3, 15), bool]) {
  @func_8055(%var_8057, %var_8058, %var_8059, %var_8060) /* ty=(Tensor[(11, 3, 15), float64], Tensor[(11, 3, 15), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 15), float32], Tensor[(11, 3, 15), bool]) */
}

def @func_4231(%var_4217: Tensor[(11, 7, 13), float32]) -> (Tensor[(11, 7, 13), float32],) {
  %193 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %194 = shape_of(%var_4217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%var_4217, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %197 = power(%195, %196) /* ty=Tensor[(11, 7, 13), float32] */;
  (%197,)
}

def @func_1211() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64]) {
  @func_1209() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64]) */
}

def @func_1136() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_4063() -> Tensor[(10, 11, 8), float32] {
  @func_234() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_5096(%var_5095: Tensor[(13, 6, 12), float32]) -> Tensor[(13, 6, 12), float64] {
  %201 = fn (%var_5086: Tensor[(13, 6, 12), float32]) -> Tensor[(13, 6, 12), float64] {
    %198 = cast(%var_5086, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
    %199 = log10(%198) /* ty=Tensor[(13, 6, 12), float32] */;
    %200 = cast(%199, dtype="float64") /* ty=Tensor[(13, 6, 12), float64] */;
    rsqrt(%200) /* ty=Tensor[(13, 6, 12), float64] */
  };
  %201(%var_5095) /* ty=Tensor[(13, 6, 12), float64] */
}

def @func_5292() -> (Tensor[(10, 11, 8), float32],) {
  @func_5290() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5343() -> (Tensor[(10, 11, 8), float32],) {
  %202 = @func_5321() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %203 = %202.0;
  (%203,)
}

def @func_3762() -> (Tensor[(10, 11, 8), float32],) {
  %206 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %204 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %205 = %204.0;
    (%205,)
  };
  %206() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_1953() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) {
  @func_1951() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) */
}

def @func_1764() -> Tensor[(10, 11, 8), float32] {
  @func_1762() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1454(%var_1415: Tensor[(13, 8, 3), float64], %var_1419: Tensor[(10, 42), bool]) -> (Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %207 = cast(%var_1415, dtype="float64") /* ty=Tensor[(13, 8, 3), float64] */;
  %208 = cast(%var_1419, dtype="bool") /* ty=Tensor[(10, 42), bool] */;
  %209 = cast(meta[relay.Constant][8] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %210 = reshape(%208, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), bool] */;
  %211 = reshape(%209, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
  %212 = @func_904(%210, %211) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) */;
  %213 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %214 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %215 = tan(%207) /* ty=Tensor[(13, 8, 3), float64] */;
  %216 = %212.2;
  %217 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  %218 = %213.0;
  %219 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %220 = %214.1;
  (%215, %216, %var_1419, meta[relay.Constant][8] /* ty=Tensor[(462), float64] */, %217, %218, %219, %220)
}

def @func_2121(%var_2119: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  @func_2118(%var_2119) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */
}

def @func_3639() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %224 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %221 = @func_2179() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %222 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
    %223 = %221.1;
    (%222, %223)
  };
  %224() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_1951() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) {
  %225 = cast(meta[relay.Constant][9] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %226 = cast(meta[relay.Constant][10] /* ty=Tensor[(420), bool] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %227 = reshape(%225, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
  %228 = reshape(%226, newshape=[10, 42]) /* ty=Tensor[(10, 42), bool] */;
  %229 = @func_1454(%227, %228) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %230 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %231 = %229.4;
  (%230, %231, meta[relay.Constant][9] /* ty=Tensor[(312), float64] */, meta[relay.Constant][10] /* ty=Tensor[(420), bool] */)
}

def @func_3062(%var_3060: Tensor[(10, 1, 12), int16], %var_3061: Tensor[(10, 4, 12), int16]) -> (Tensor[(10, 4, 12), int16], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 4, 12), float32]) {
  @func_3058(%var_3060, %var_3061) /* ty=(Tensor[(10, 4, 12), int16], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 4, 12), float32]) */
}

def @func_176() -> Tensor[(10, 11, 8), float32] {
  @func_139() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_3283() -> (Tensor[(10, 11, 8), float32],) {
  @func_3281() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5058() -> (Tensor[(10, 11, 8), uint64],) {
  %234 = fn () -> (Tensor[(10, 11, 8), uint64],) {
    %232 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %233 = %232.1;
    (%233,)
  };
  %234() /* ty=(Tensor[(10, 11, 8), uint64],) */
}

def @func_1854() -> Tensor[(10, 11, 8), float32] {
  %235 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %235.0
}

def @func_7409() -> (Tensor[(10, 11, 8), float32],) {
  @func_7407() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_7756() -> (Tensor[(10, 11, 8), float32],) {
  @func_7754() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_8110() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %240 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
    %236 = @func_7407() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %237 = %236.0;
    %238 = @func_3091() /* ty=Tensor[(10, 11, 8), float32] */;
    %239 = @func_4210() /* ty=Tensor[(10, 11, 8), bool] */;
    (%237, %238, %239)
  };
  %240() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */
}

def @func_8379(%var_8377: Tensor[(16, 6), float32], %var_8378: Tensor[(1001), float32]) -> (Tensor[(10, 11, 8), uint64], Tensor[(9, 3, 3), float32], Tensor[(9, 9), uint64], Tensor[(16, 6), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), bool]) {
  %266 = fn (%var_8331: Tensor[(16, 6), float32], %var_8363: Tensor[(1001), float32]) -> (Tensor[(10, 11, 8), uint64], Tensor[(9, 3, 3), float32], Tensor[(9, 9), uint64], Tensor[(16, 6), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), bool]) {
    %241 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %242 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
    %243 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
    %244 = cast(%var_8331, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
    %245 = reshape(%242, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
    %246 = reshape(%243, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
    %247 = reshape(%244, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %248 = @func_4928(%245, %246, %247) /* ty=(Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) */;
    %249 = @func_3281() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %250 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
    %251 = cast(%var_8331, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
    %252 = cast(%var_8363, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %253 = %248.1;
    %254 = cast(%253, dtype="float32") /* ty=Tensor[(9, 3, 3), float32] */;
    %255 = reshape(%250, newshape=[81]) /* ty=Tensor[(81), uint64] */;
    %256 = reshape(%251, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %257 = reshape(%252, newshape=[1001, 1]) /* ty=Tensor[(1001, 1), float32] */;
    %258 = reshape(%254, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %259 = @func_5197(%255, %256, %257, %258) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(11, 7, 13), bool], Tensor[(1001, 96), int32], Tensor[(10, 11, 8), bool], Tensor[(81), float32], Tensor[(81), float32]) */;
    %260 = @func_1084() /* ty=(Tensor[(10, 11, 8), bool],) */;
    %261 = %241.0;
    %262 = %249.0;
    %263 = @func_2433() /* ty=Tensor[(10, 11, 8), float32] */;
    %264 = %259.0;
    %265 = %260.0;
    (%261, %253, meta[relay.Constant][11] /* ty=Tensor[(9, 9), uint64] */, %var_8331, %262, %263, %264, %var_8363, %265)
  };
  %266(%var_8377, %var_8378) /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(9, 3, 3), float32], Tensor[(9, 9), uint64], Tensor[(16, 6), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), bool]) */
}

def @func_236() -> Tensor[(10, 11, 8), float32] {
  @func_234() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7637() -> Tensor[(10, 11, 8), float32] {
  @func_7635() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_3153(%var_3140: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), int64],) {
  %267 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %268 = %267.0;
  %269 = cast(%var_3140, dtype="int64") /* ty=Tensor[(10, 11, 8), int64] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="int64") /* ty=Tensor[(10, 11, 8), int64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %273 = bitwise_xor(%271, %272) /* ty=Tensor[(10, 11, 8), int64] */;
  (%273,)
}

def @func_3004(%var_3003: Tensor[(10, 11, 8), uint64]) -> Tensor[(10, 11, 8), bool] {
  %280 = fn (%var_2977: Tensor[(10, 11, 8), uint64]) -> Tensor[(10, 11, 8), bool] {
    %274 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
    %275 = %274.0;
    %276 = cast(%var_2977, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%275, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%278, %279) /* ty=Tensor[(10, 11, 8), bool] */
  };
  %280(%var_3003) /* ty=Tensor[(10, 11, 8), bool] */
}

def @func_5465(%var_5446: Tensor[(16, 7, 15), float32]) -> (Tensor[(16, 7, 15), float32],) {
  %281 = cast(%var_5446, dtype="float32") /* ty=Tensor[(16, 7, 15), float32] */;
  %282 = acosh(%281) /* ty=Tensor[(16, 7, 15), float32] */;
  (%282,)
}

def @func_2364(%var_2362: Tensor[(4, 15, 4), float64], %var_2363: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), uint32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(4, 15, 4), float32], Tensor[(10, 11, 8), float32]) {
  @func_2360(%var_2362, %var_2363) /* ty=(Tensor[(4, 15, 4), uint32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(4, 15, 4), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_6073() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %287 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %283 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %284 = @func_3761() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %285 = %283.0;
    %286 = %284.0;
    (%285, %286)
  };
  %287() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_6574() -> (Tensor[(10, 11, 8), float32],) {
  %290 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %288 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %289 = %288.0;
    (%289,)
  };
  %290() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5875() -> Tensor[(10, 11, 8), float32] {
  %292 = fn () -> Tensor[(10, 11, 8), float32] {
    %291 = @func_2568() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %291.0
  };
  %292() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7486() -> Tensor[(10, 11, 8), float32] {
  %294 = fn () -> Tensor[(10, 11, 8), float32] {
    %293 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %293.1
  };
  %294() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_6191(%var_6189: Tensor[(1980), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(8, 110), float32], Tensor[(1980), float32], Tensor[(11, 3, 14), float64]) {
  @func_6188(%var_6189) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(8, 110), float32], Tensor[(1980), float32], Tensor[(11, 3, 14), float64]) */
}

def @func_3593() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_3591() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_2251() -> (Tensor[(10, 11, 8), float32],) {
  @func_2249() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_8514(%var_8512: Tensor[(81), uint64]) -> (Tensor[(10, 11, 8), float32], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(81), uint64], Tensor[(96), float32], Tensor[(10, 11, 8), float32]) {
  @func_8511(%var_8512) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(81), uint64], Tensor[(96), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_7380() -> (Tensor[(10, 11, 8), float32],) {
  @func_7378() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_8783() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %295 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %296 = @func_6573() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %297 = %295.0;
  %298 = %296.0;
  (%297, %298)
}

def @func_4525() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(3, 360), float32], Tensor[(10, 96), float32], Tensor[(10, 11, 8), bool]) {
  %315 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(3, 360), float32], Tensor[(10, 96), float32], Tensor[(10, 11, 8), bool]) {
    %299 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %300 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 360), float32] */, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %301 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 360), float32] */, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %302 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 96), float32] */, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
    %303 = reshape(%300, newshape=[12, 9, 10]) /* ty=Tensor[(12, 9, 10), float32] */;
    %304 = reshape(%301, newshape=[12, 9, 10]) /* ty=Tensor[(12, 9, 10), float32] */;
    %305 = reshape(%302, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %306 = @func_3207(%303, %304, %305) /* ty=(Tensor[(12, 9, 10), float32], Tensor[(10, 11, 8), float32], Tensor[(960), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %307 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 96), float32] */, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
    %308 = %299.0;
    %309 = cast(%308, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    %310 = reshape(%309, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
    %311 = @func_998(%310) /* ty=(Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) */;
    %312 = %306.4;
    %313 = log(%307) /* ty=Tensor[(10, 96), float32] */;
    %314 = %311.1;
    (%308, %312, meta[relay.Constant][12] /* ty=Tensor[(3, 360), float32] */, %313, %314)
  };
  %315() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(3, 360), float32], Tensor[(10, 96), float32], Tensor[(10, 11, 8), bool]) */
}

def @func_5029() -> (Tensor[(10, 11, 8), float32],) {
  @func_5027() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5321() -> (Tensor[(10, 11, 8), float32],) {
  %316 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
  (%316,)
}

def @func_7961(%var_7951: Tensor[(990, 2), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(990, 2), float32]) {
  %317 = cast(%var_7951, dtype="float32") /* ty=Tensor[(990, 2), float32] */;
  %318 = reshape(%317, newshape=[1980]) /* ty=Tensor[(1980), float32] */;
  %319 = @func_6188(%318) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(8, 110), float32], Tensor[(1980), float32], Tensor[(11, 3, 14), float64]) */;
  %320 = @func_1545() /* ty=Tensor[(10, 11, 8), float32] */;
  %321 = %319.3;
  (%320, %321, %var_7951)
}

def @func_2657() -> Tensor[(10, 11, 8), float32] {
  @func_2655() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_5680() -> (Tensor[(10, 11, 8), float32],) {
  %324 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %322 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %323 = %322.0;
    (%323,)
  };
  %324() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_3395(%var_3341: Tensor[(15, 11, 12), float32]) -> (Tensor[(15, 11, 12), float32], Tensor[(10, 11, 8), float64], Tensor[(60, 14), int32], Tensor[(8, 110), float32]) {
  %325 = cast(%var_3341, dtype="float32") /* ty=Tensor[(15, 11, 12), float32] */;
  %326 = cast(meta[relay.Constant][14] /* ty=Tensor[(60, 14), int32] */, dtype="int32") /* ty=Tensor[(60, 14), int32] */;
  %327 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 110), float32] */, dtype="float32") /* ty=Tensor[(8, 110), float32] */;
  %328 = reshape(%326, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), int32] */;
  %329 = reshape(%327, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %330 = @func_781(%328, %329) /* ty=(Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) */;
  %331 = sigmoid(%325) /* ty=Tensor[(15, 11, 12), float32] */;
  %332 = %330.1;
  (%331, %332, meta[relay.Constant][14] /* ty=Tensor[(60, 14), int32] */, meta[relay.Constant][15] /* ty=Tensor[(8, 110), float32] */)
}

def @func_7701(%var_7699: Tensor[(14, 12, 2), int64], %var_7700: Tensor[(14, 12, 2), int64]) -> Tensor[(14, 12, 2), bool] {
  %337 = fn (%var_7689: Tensor[(14, 12, 2), int64], %var_7690: Tensor[(14, 12, 2), int64]) -> Tensor[(14, 12, 2), bool] {
    %333 = cast(%var_7690, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
    %334 = shape_of(%var_7689, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%var_7689, dtype="bool") /* ty=Tensor[(14, 12, 2), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%335, %336) /* ty=Tensor[(14, 12, 2), bool] */
  };
  %337(%var_7699, %var_7700) /* ty=Tensor[(14, 12, 2), bool] */
}

def @func_7737() -> (Tensor[(10, 11, 8), float32],) {
  %338 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %339 = %338.0;
  (%339,)
}

def @func_4655() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) {
  %348 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) {
    %340 = @func_3281() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %341 = cast(meta[relay.Constant][16] /* ty=Tensor[(78, 4), float64] */, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
    %342 = cast(meta[relay.Constant][17] /* ty=Tensor[(210, 2), bool] */, dtype="bool") /* ty=Tensor[(210, 2), bool] */;
    %343 = reshape(%341, newshape=[13, 8, 3]) /* ty=Tensor[(13, 8, 3), float64] */;
    %344 = reshape(%342, newshape=[10, 42]) /* ty=Tensor[(10, 42), bool] */;
    %345 = @func_1454(%343, %344) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %346 = %340.0;
    %347 = %345.5;
    (%346, %347, meta[relay.Constant][16] /* ty=Tensor[(78, 4), float64] */, meta[relay.Constant][17] /* ty=Tensor[(210, 2), bool] */)
  };
  %348() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) */
}

def @func_785(%var_783: Tensor[(14, 10, 6), int32], %var_784: Tensor[(10, 11, 8), float32]) -> (Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) {
  @func_781(%var_783, %var_784) /* ty=(Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) */
}

def @func_565() -> (Tensor[(10, 11, 8), float32],) {
  @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_3281() -> (Tensor[(10, 11, 8), float32],) {
  %349 = @func_1382() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %350 = %349.0;
  (%350,)
}

def @func_1152() -> Tensor[(10, 11, 8), float32] {
  %351 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %351.1
}

def @func_4867() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %352 = @func_4559() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %353 = @func_1762() /* ty=Tensor[(10, 11, 8), float32] */;
  %354 = %352.0;
  (%353, %354)
}

def @func_3211(%var_3208: Tensor[(12, 9, 10), float32], %var_3209: Tensor[(12, 9, 10), float32], %var_3210: Tensor[(960), float32]) -> (Tensor[(12, 9, 10), float32], Tensor[(10, 11, 8), float32], Tensor[(960), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %371 = fn (%var_3171: Tensor[(12, 9, 10), float32], %var_3172: Tensor[(12, 9, 10), float32], %var_3187: Tensor[(960), float32]) -> (Tensor[(12, 9, 10), float32], Tensor[(10, 11, 8), float32], Tensor[(960), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %355 = cast(%var_3172, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
    %356 = shape_of(%var_3171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%var_3171, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %359 = cast(%var_3187, dtype="float32") /* ty=Tensor[(960), float32] */;
    %360 = reshape(%359, newshape=[8, 8, 15]) /* ty=Tensor[(8, 8, 15), float32] */;
    %361 = @func_726(%360) /* ty=(Tensor[(8, 8, 15), bool], Tensor[(10, 11, 8), float32], Tensor[(462), float64]) */;
    %362 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %363 = %362.2;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    %365 = reshape(%364, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
    %366 = @func_2118(%365) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %367 = divide(%357, %358) /* ty=Tensor[(12, 9, 10), float32] */;
    %368 = %361.1;
    %369 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
    %370 = %366.0;
    (%367, %368, %var_3187, %369, %363, %370)
  };
  %371(%var_3208, %var_3209, %var_3210) /* ty=(Tensor[(12, 9, 10), float32], Tensor[(10, 11, 8), float32], Tensor[(960), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_2947() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_3438() -> (Tensor[(10, 11, 8), float32],) {
  %374 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %372 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %373 = %372.0;
    (%373,)
  };
  %374() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_4273() -> (Tensor[(10, 11, 8), float32],) {
  %375 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %376 = %375.0;
  (%376,)
}

def @func_2916(%var_2914: Tensor[(880), float32]) -> (Tensor[(14, 9, 12), float64], Tensor[(10, 11, 8), int16], Tensor[(880), float32], Tensor[(10, 11, 8), float32]) {
  @func_2913(%var_2914) /* ty=(Tensor[(14, 9, 12), float64], Tensor[(10, 11, 8), int16], Tensor[(880), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_1384() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_1382() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_5565(%var_5558: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %377 = @func_4867() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %378 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %379 = @func_4093() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %380 = %379.1;
  %381 = cast(%var_5558, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %385 = %377.1;
  %386 = %378.1;
  %387 = minimum(%383, %384) /* ty=Tensor[(10, 11, 8), float32] */;
  (%385, %386, %387)
}

def @func_5942(%var_5940: Tensor[(5, 13, 12), float64], %var_5941: Tensor[(936), float32]) -> (Tensor[(5, 13, 12), float32], Tensor[(13, 6, 12), float64], Tensor[(936), float32]) {
  %395 = fn (%var_5897: Tensor[(5, 13, 12), float64], %var_5914: Tensor[(936), float32]) -> (Tensor[(5, 13, 12), float32], Tensor[(13, 6, 12), float64], Tensor[(936), float32]) {
    %388 = cast(%var_5897, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
    %389 = sqrt(%388) /* ty=Tensor[(5, 13, 12), float64] */;
    %390 = cast(%389, dtype="float32") /* ty=Tensor[(5, 13, 12), float32] */;
    %391 = cast(%var_5914, dtype="float32") /* ty=Tensor[(936), float32] */;
    %392 = reshape(%391, newshape=[13, 6, 12]) /* ty=Tensor[(13, 6, 12), float32] */;
    %393 = exp(%390) /* ty=Tensor[(5, 13, 12), float32] */;
    %394 = @func_5094(%392) /* ty=Tensor[(13, 6, 12), float64] */;
    (%393, %394, %var_5914)
  };
  %395(%var_5940, %var_5941) /* ty=(Tensor[(5, 13, 12), float32], Tensor[(13, 6, 12), float64], Tensor[(936), float32]) */
}

def @func_1022() -> Tensor[(10, 11, 8), float32] {
  %397 = fn () -> Tensor[(10, 11, 8), float32] {
    %396 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %396.1
  };
  %397() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_5568(%var_5566: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_5565(%var_5566) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_6492() -> Tensor[(10, 11, 8), float32] {
  %398 = @func_2539() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %398.1
}

def @func_6507() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_6505() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_7026(%var_6986: uint64, %var_6987: Tensor[(10, 14, 14), uint64], %var_7018: Tensor[(420, 2), int32]) -> (Tensor[(10, 14, 14), bool], Tensor[(78, 4), float32], Tensor[(880), float32], Tensor[(420, 2), int32], Tensor[(1, 312), float64], Tensor[(462), float64], Tensor[(10, 14, 14), float64]) {
  %399 = cast(%var_6986, dtype="bool") /* ty=bool */;
  %400 = cast(%var_6987, dtype="bool") /* ty=Tensor[(10, 14, 14), bool] */;
  %401 = less(%399, %400) /* ty=Tensor[(10, 14, 14), bool] */;
  %402 = cast(%var_6987, dtype="bool") /* ty=Tensor[(10, 14, 14), bool] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="bool") /* ty=Tensor[(10, 14, 14), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = cast(meta[relay.Constant][18] /* ty=Tensor[(880), float32] */, dtype="float32") /* ty=Tensor[(880), float32] */;
  %407 = cast(%var_7018, dtype="int32") /* ty=Tensor[(420, 2), int32] */;
  %408 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 312), float64] */, dtype="float64") /* ty=Tensor[(1, 312), float64] */;
  %409 = cast(meta[relay.Constant][20] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %410 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 312), float64] */, dtype="int32") /* ty=Tensor[(1, 312), int32] */;
  %411 = reshape(%406, newshape=[8, 110]) /* ty=Tensor[(8, 110), float32] */;
  %412 = reshape(%407, newshape=[840]) /* ty=Tensor[(840), int32] */;
  %413 = reshape(%408, newshape=[78, 4]) /* ty=Tensor[(78, 4), float64] */;
  %414 = reshape(%409, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %415 = reshape(%410, newshape=[78, 4]) /* ty=Tensor[(78, 4), int32] */;
  %416 = @func_6812(%411, %412, %413, %414, %415) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(8, 110), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64], Tensor[(840), int32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool], Tensor[(78, 4), uint32], Tensor[(78, 4), bool], Tensor[(2, 15, 14), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(78, 4), float32], Tensor[(78, 4), int16]) */;
  %417 = cast(%var_6987, dtype="float64") /* ty=Tensor[(10, 14, 14), float64] */;
  %418 = greater_equal(%404, %405) /* ty=Tensor[(10, 14, 14), bool] */;
  %419 = %416.14;
  %420 = acosh(%417) /* ty=Tensor[(10, 14, 14), float64] */;
  (%418, %419, meta[relay.Constant][18] /* ty=Tensor[(880), float32] */, %var_7018, meta[relay.Constant][19] /* ty=Tensor[(1, 312), float64] */, meta[relay.Constant][20] /* ty=Tensor[(462), float64] */, %420)
}

def @func_4275() -> (Tensor[(10, 11, 8), float32],) {
  @func_4273() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_7228() -> (Tensor[(10, 11, 8), float32],) {
  @func_7226() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_4869() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_4867() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_1458(%var_1456: Tensor[(13, 8, 3), float64], %var_1457: Tensor[(10, 42), bool]) -> (Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_1454(%var_1456, %var_1457) /* ty=(Tensor[(13, 8, 3), float64], Tensor[(462, 1), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_2540() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %427 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %421 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %422 = %421.0;
    %423 = cast(%422, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    %424 = reshape(%423, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
    %425 = @func_2118(%424) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %426 = %425.0;
    (%422, %426)
  };
  %427() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_6494() -> Tensor[(10, 11, 8), float32] {
  @func_6492() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1292() -> (Tensor[(10, 11, 8), float32],) {
  %428 = @func_1134() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %429 = %428.1;
  (%429,)
}

def @func_2636() -> (Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %430 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %431 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %432 = @func_2179() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %433 = %430.0;
  %434 = %431.1;
  %435 = %432.1;
  (%433, %434, %435)
}

def @func_2484() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */
}

def @func_7407() -> (Tensor[(10, 11, 8), float32],) {
  %436 = @func_6505() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %437 = %436.1;
  (%437,)
}

def @func_7964(%var_7962: Tensor[(990, 2), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(990, 2), float32]) {
  @func_7961(%var_7962) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(990, 2), float32]) */
}

def @func_5734() -> Tensor[(10, 11, 8), float32] {
  @func_5732() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_4211() -> Tensor[(10, 11, 8), bool] {
  %439 = fn () -> Tensor[(10, 11, 8), bool] {
    %438 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
    %438.1
  };
  %439() /* ty=Tensor[(10, 11, 8), bool] */
}

def @func_2181() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_2179() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_5575() -> (Tensor[(10, 11, 8), float32],) {
  %440 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %441 = %440.0;
  (%441,)
}

def @func_6023() -> (Tensor[(10, 11, 8), float32], Tensor[(462), float64]) {
  %446 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(462), float64]) {
    %442 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %443 = @func_5426() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) */;
    %444 = %442.0;
    %445 = %443.3;
    (%444, %445)
  };
  %446() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(462), float64]) */
}

def @func_4610(%var_4609: Tensor[(4, 2, 3), uint32]) -> (Tensor[(4, 2, 3), uint32],) {
  %452 = fn (%var_4590: Tensor[(4, 2, 3), uint32]) -> (Tensor[(4, 2, 3), uint32],) {
    %447 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 2, 3), uint32] */, dtype="uint32") /* ty=Tensor[(4, 2, 3), uint32] */;
    %448 = shape_of(%var_4590, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(%var_4590, dtype="uint32") /* ty=Tensor[(4, 2, 3), uint32] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %451 = maximum(%449, %450) /* ty=Tensor[(4, 2, 3), uint32] */;
    (%451,)
  };
  %452(%var_4609) /* ty=(Tensor[(4, 2, 3), uint32],) */
}

def @func_4234(%var_4232: Tensor[(11, 7, 13), float32]) -> (Tensor[(11, 7, 13), float32],) {
  @func_4231(%var_4232) /* ty=(Tensor[(11, 7, 13), float32],) */
}

def @func_207() -> (Tensor[(10, 11, 8), float32],) {
  %453 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%453,)
}

def @func_2684() -> (Tensor[(10, 11, 8), float32],) {
  %454 = @func_2179() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %455 = %454.1;
  (%455,)
}

def @func_8016() -> (Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), uint64]) {
  %456 = @func_5705() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), int16]) */;
  %457 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %458 = %456.1;
  %459 = %457.1;
  (%458, %459)
}

def @func_6956(%var_6888: Tensor[(10, 13, 8), float64], %var_6914: Tensor[(10, 13, 8), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 13, 8), uint64], Tensor[(10, 13, 8), float32]) {
  %460 = @func_6158() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %461 = cast(%var_6888, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
  %462 = log(%461) /* ty=Tensor[(10, 13, 8), float64] */;
  %463 = cast(%var_6914, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%462, dtype="uint64") /* ty=Tensor[(10, 13, 8), uint64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %467 = cast(%var_6914, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %468 = shape_of(%var_6888, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%var_6888, dtype="bool") /* ty=Tensor[(10, 13, 8), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = less_equal(%469, %470) /* ty=Tensor[(10, 13, 8), bool] */;
  %472 = cast(%471, dtype="int32") /* ty=Tensor[(10, 13, 8), int32] */;
  %473 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%462, dtype="int32") /* ty=Tensor[(10, 13, 8), int32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %476 = subtract(%474, %475) /* ty=Tensor[(10, 13, 8), int32] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
  %478 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%462, dtype="float64") /* ty=Tensor[(10, 13, 8), float64] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %481 = floor_divide(%479, %480) /* ty=Tensor[(10, 13, 8), float64] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(10, 13, 8), float32] */;
  %483 = %460.1;
  %484 = bitwise_and(%465, %466) /* ty=Tensor[(10, 13, 8), uint64] */;
  %485 = sinh(%482) /* ty=Tensor[(10, 13, 8), float32] */;
  (%483, %484, %485)
}

def @func_5290() -> (Tensor[(10, 11, 8), float32],) {
  %486 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  (%486,)
}

def @func_1651(%var_1649: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) {
  @func_1648(%var_1649) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */
}

def @func_1762() -> Tensor[(10, 11, 8), float32] {
  %487 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %487.0
}

def @func_3261() -> Tensor[(10, 11, 8), float32] {
  %488 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %488.1
}

def @func_2615(%var_2614: Tensor[(2, 4, 12), float32]) -> (Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) {
  %495 = fn (%var_2571: Tensor[(2, 4, 12), float32]) -> (Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) {
    %489 = cast(%var_2571, dtype="float32") /* ty=Tensor[(2, 4, 12), float32] */;
    %490 = @func_1951() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) */;
    %491 = cast(%var_2571, dtype="float32") /* ty=Tensor[(2, 4, 12), float32] */;
    %492 = log2(%489) /* ty=Tensor[(2, 4, 12), float32] */;
    %493 = %490.3;
    %494 = sqrt(%491) /* ty=Tensor[(2, 4, 12), float32] */;
    (%492, %493, %494)
  };
  %495(%var_2614) /* ty=(Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) */
}

def @func_5027() -> (Tensor[(10, 11, 8), float32],) {
  %496 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %497 = %496.0;
  (%497,)
}

def @func_4589() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %502 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
    %498 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %499 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
    %500 = %498.0;
    %501 = %499.1;
    (%500, %501)
  };
  %502() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */
}

def @func_5468(%var_5466: Tensor[(16, 7, 15), float32]) -> (Tensor[(16, 7, 15), float32],) {
  @func_5465(%var_5466) /* ty=(Tensor[(16, 7, 15), float32],) */
}

def @func_3263() -> Tensor[(10, 11, 8), float32] {
  @func_3261() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_904(%var_852: Tensor[(2, 15, 14), bool], %var_881: Tensor[(462, 1), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) {
  %503 = cast(%var_881, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
  %504 = reshape(%503, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), float64] */;
  %505 = @func_480(%504) /* ty=(Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %506 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %507 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 15, 14), bool] */, dtype="bool") /* ty=Tensor[(2, 15, 14), bool] */;
  %508 = shape_of(%var_852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_852, dtype="bool") /* ty=Tensor[(2, 15, 14), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = logical_or(%509, %510) /* ty=Tensor[(2, 15, 14), bool] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(2, 15, 14), float32] */;
  %513 = asinh(%512) /* ty=Tensor[(2, 15, 14), float32] */;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(2, 15, 14), float32] */;
  %515 = cos(%514) /* ty=Tensor[(2, 15, 14), float32] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(2, 15, 14), float32] */;
  %517 = log2(%516) /* ty=Tensor[(2, 15, 14), float32] */;
  %518 = cast(%511, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %522 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
  %523 = %505.4;
  %524 = %506.0;
  %525 = floor_mod(%520, %521) /* ty=Tensor[(2, 15, 14), float64] */;
  (%522, %523, %var_881, %524, %525)
}

def @func_5640() -> (Tensor[(10, 11, 8), float32],) {
  %527 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %526 = @func_2294() /* ty=Tensor[(10, 11, 8), float32] */;
    (%526,)
  };
  %527() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_7915() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %534 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
    %528 = @func_7732() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %529 = @func_7819() /* ty=(Tensor[(10, 11, 8), uint64],) */;
    %530 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %531 = %528.0;
    %532 = %529.0;
    %533 = %530.0;
    (%531, %532, %533)
  };
  %534() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */
}

def @func_1085() -> (Tensor[(10, 11, 8), bool],) {
  %543 = fn () -> (Tensor[(10, 11, 8), bool],) {
    %535 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
    %536 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %537 = %536.0;
    %538 = cast(%537, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %539 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%535, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %542 = greater_equal(%540, %541) /* ty=Tensor[(10, 11, 8), bool] */;
    (%542,)
  };
  %543() /* ty=(Tensor[(10, 11, 8), bool],) */
}

def @func_2913(%var_2900: Tensor[(880), float32]) -> (Tensor[(14, 9, 12), float64], Tensor[(10, 11, 8), int16], Tensor[(880), float32], Tensor[(10, 11, 8), float32]) {
  %544 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 9, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %545 = cast(%var_2900, dtype="float32") /* ty=Tensor[(880), float32] */;
  %546 = reshape(%545, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %547 = @func_1648(%546) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %548 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %549 = log(%544) /* ty=Tensor[(14, 9, 12), float64] */;
  %550 = %547.0;
  %551 = %548.0;
  (%549, %550, %var_2900, %551)
}

def @func_6819(%var_6814: Tensor[(8, 110), float32], %var_6815: Tensor[(840), int32], %var_6816: Tensor[(78, 4), float64], %var_6817: Tensor[(462), float64], %var_6818: Tensor[(78, 4), int32]) -> (Tensor[(10, 11, 8), int16], Tensor[(8, 110), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64], Tensor[(840), int32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool], Tensor[(78, 4), uint32], Tensor[(78, 4), bool], Tensor[(2, 15, 14), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(78, 4), float32], Tensor[(78, 4), int16]) {
  @func_6812(%var_6814, %var_6815, %var_6816, %var_6817, %var_6818) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(8, 110), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64], Tensor[(840), int32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool], Tensor[(78, 4), uint32], Tensor[(78, 4), bool], Tensor[(2, 15, 14), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(78, 4), float32], Tensor[(78, 4), int16]) */
}

def @func_3156(%var_3154: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), int64],) {
  @func_3153(%var_3154) /* ty=(Tensor[(10, 11, 8), int64],) */
}

def @func_2006() -> (Tensor[(10, 11, 8), uint64],) {
  @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */
}

def @func_2482() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  %552 = @func_2249() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %553 = @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %554 = %553.0;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %556 = reshape(%555, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %557 = @func_2118(%556) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %558 = %552.0;
  %559 = %557.1;
  (%558, %554, %559)
}

def @func_7082() -> (Tensor[(10, 11, 8), float32],) {
  @func_7080() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_1547() -> Tensor[(10, 11, 8), float32] {
  @func_1545() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7095(%var_7086: float32) -> (Tensor[(6, 3, 6), float32],) {
  %560 = cast(%var_7086, dtype="float32") /* ty=float32 */;
  %561 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %562 = subtract(%560, %561) /* ty=Tensor[(6, 3, 6), float32] */;
  (%562,)
}

def @func_5834() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %570 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %563 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %564 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
    %565 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %566 = %563.0;
    %567 = %564.0;
    %568 = %565.1;
    %569 = @func_1854() /* ty=Tensor[(10, 11, 8), float32] */;
    (%566, %567, %568, %569)
  };
  %570() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_930() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_5323() -> (Tensor[(10, 11, 8), float32],) {
  @func_5321() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_7434() -> (Tensor[(10, 11, 8), float32],) {
  %573 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %571 = @func_4654() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) */;
    %572 = %571.1;
    (%572,)
  };
  %573() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5577() -> (Tensor[(10, 11, 8), float32],) {
  @func_5575() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_1572() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) {
  %574 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %575 = %574.0;
  %576 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 11, 8), float32] */, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %580 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
  %581 = add(%578, %579) /* ty=Tensor[(10, 11, 8), uint64] */;
  (%580, %581)
}

def @func_2434() -> Tensor[(10, 11, 8), float32] {
  %583 = fn () -> Tensor[(10, 11, 8), float32] {
    %582 = @func_2249() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %582.0
  };
  %583() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7226() -> (Tensor[(10, 11, 8), float32],) {
  %584 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %585 = %584.0;
  (%585,)
}

def @func_1209() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64]) {
  %586 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %587 = @func_389() /* ty=Tensor[(10, 11, 8), float32] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %589 = acos(%588) /* ty=Tensor[(10, 11, 8), float64] */;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %591 = %586.1;
  %592 = log(%590) /* ty=Tensor[(10, 11, 8), float64] */;
  (%591, %592)
}

def @func_2655() -> Tensor[(10, 11, 8), float32] {
  %593 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %595 = asin(%594) /* ty=Tensor[(10, 11, 8), float32] */;
  %596 = cast(%595, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  atan(%596) /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_7098(%var_7096: float32) -> (Tensor[(6, 3, 6), float32],) {
  @func_7095(%var_7096) /* ty=(Tensor[(6, 3, 6), float32],) */
}

def @func_1849() -> (Tensor[(10, 11, 8), uint64],) {
  @func_1847() /* ty=(Tensor[(10, 11, 8), uint64],) */
}

def @func_684(%var_683: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %604 = fn (%var_656: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
    %597 = @func_234() /* ty=Tensor[(10, 11, 8), float32] */;
    %598 = cast(%var_656, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
    %600 = cast(%597, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %602 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
    %603 = equal(%600, %601) /* ty=Tensor[(10, 11, 8), bool] */;
    (%602, %603)
  };
  %604(%var_683) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */
}

def @func_3686() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %609 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %605 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %606 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %607 = %605.0;
    %608 = %606.1;
    (%607, %608)
  };
  %609() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_4192(%var_4190: Tensor[(96), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(420), bool], Tensor[(96), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_4189(%var_4190) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(420), bool], Tensor[(96), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_3591() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %610 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %611 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %612 = @func_2539() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %613 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %614 = %610.0;
  %615 = %611.0;
  %616 = %612.0;
  %617 = %613.0;
  (%614, %615, %616, %617)
}

def @func_6812(%var_6692: Tensor[(8, 110), float32], %var_6702: Tensor[(840), int32], %var_6776: Tensor[(78, 4), float64], %var_6794: Tensor[(462), float64], %var_6806: Tensor[(78, 4), int32]) -> (Tensor[(10, 11, 8), int16], Tensor[(8, 110), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float64], Tensor[(840), int32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool], Tensor[(78, 4), uint32], Tensor[(78, 4), bool], Tensor[(2, 15, 14), float64], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(78, 4), float32], Tensor[(78, 4), int16]) {
  %618 = cast(%var_6692, dtype="float32") /* ty=Tensor[(8, 110), float32] */;
  %619 = reshape(%618, newshape=[880]) /* ty=Tensor[(880), float32] */;
  %620 = @func_2913(%619) /* ty=(Tensor[(14, 9, 12), float64], Tensor[(10, 11, 8), int16], Tensor[(880), float32], Tensor[(10, 11, 8), float32]) */;
  %621 = @func_2004() /* ty=(Tensor[(10, 11, 8), uint64],) */;
  %622 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %623 = cast(%var_6702, dtype="int32") /* ty=Tensor[(840), int32] */;
  %624 = cast(%var_6692, dtype="float32") /* ty=Tensor[(8, 110), float32] */;
  %625 = reshape(%623, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), int32] */;
  %626 = reshape(%624, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %627 = @func_781(%625, %626) /* ty=(Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) */;
  %628 = @func_3085() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %629 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
  %630 = @func_1084() /* ty=(Tensor[(10, 11, 8), bool],) */;
  %631 = @func_6561() /* ty=(Tensor[(78, 4), float64],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %634 = exp(%633) /* ty=Tensor[(78, 4), float64] */;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(78, 4), float64] */;
  %636 = tan(%635) /* ty=Tensor[(78, 4), float64] */;
  %637 = cast(%var_6776, dtype="uint32") /* ty=Tensor[(78, 4), uint32] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(2), int32] */;
  %639 = cast(%636, dtype="uint32") /* ty=Tensor[(78, 4), uint32] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %641 = @func_4654() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) */;
  %642 = %641.2;
  %643 = cast(%642, dtype="bool") /* ty=Tensor[(78, 4), bool] */;
  %644 = shape_of(%636, dtype="int32") /* ty=Tensor[(2), int32] */;
  %645 = cast(%636, dtype="bool") /* ty=Tensor[(78, 4), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %647 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 42), bool] */, dtype="bool") /* ty=Tensor[(10, 42), bool] */;
  %648 = cast(%var_6794, dtype="float64") /* ty=Tensor[(462), float64] */;
  %649 = reshape(%647, newshape=[2, 15, 14]) /* ty=Tensor[(2, 15, 14), bool] */;
  %650 = reshape(%648, newshape=[462, 1]) /* ty=Tensor[(462, 1), float64] */;
  %651 = @func_904(%649, %650) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) */;
  %652 = cast(%634, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %653 = cast(%634, dtype="int32") /* ty=Tensor[(78, 4), int32] */;
  %654 = shape_of(%636, dtype="int32") /* ty=Tensor[(2), int32] */;
  %655 = cast(%636, dtype="int32") /* ty=Tensor[(78, 4), int32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %657 = logical_xor(%655, %656) /* ty=Tensor[(78, 4), int32] */;
  %658 = cast(%var_6806, dtype="int16") /* ty=Tensor[(78, 4), int16] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(2), int32] */;
  %660 = cast(%657, dtype="int16") /* ty=Tensor[(78, 4), int16] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %662 = %620.1;
  %663 = %621.0;
  %664 = %622.0;
  %665 = %627.1;
  %666 = %628.0;
  %667 = %629.0;
  %668 = %630.0;
  %669 = bitwise_and(%639, %640) /* ty=Tensor[(78, 4), uint32] */;
  %670 = less_equal(%645, %646) /* ty=Tensor[(78, 4), bool] */;
  %671 = %651.4;
  %672 = log2(%652) /* ty=Tensor[(78, 4), float32] */;
  %673 = maximum(%660, %661) /* ty=Tensor[(78, 4), int16] */;
  (%662, %var_6692, %663, %664, %665, %var_6702, %666, %667, %668, %669, %670, %671, meta[relay.Constant][26] /* ty=Tensor[(10, 42), bool] */, %var_6794, %672, %673)
}

def @func_6392(%var_6390: Tensor[(9, 15, 3), uint64], %var_6391: Tensor[(9, 15, 3), uint64]) -> Tensor[(9, 15, 3), bool] {
  %678 = fn (%var_6382: Tensor[(9, 15, 3), uint64], %var_6383: Tensor[(9, 15, 3), uint64]) -> Tensor[(9, 15, 3), bool] {
    %674 = cast(%var_6383, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
    %675 = shape_of(%var_6382, dtype="int32") /* ty=Tensor[(3), int32] */;
    %676 = cast(%var_6382, dtype="bool") /* ty=Tensor[(9, 15, 3), bool] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%676, %677) /* ty=Tensor[(9, 15, 3), bool] */
  };
  %678(%var_6390, %var_6391) /* ty=Tensor[(9, 15, 3), bool] */
}

def @func_2568() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %679 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %680 = %679.0;
  %681 = @func_1762() /* ty=Tensor[(10, 11, 8), float32] */;
  (%680, %681)
}

def @func_6108(%var_6101: Tensor[(7, 8, 1), float32]) -> (Tensor[(7, 8, 1), float32],) {
  %682 = cast(%var_6101, dtype="float32") /* ty=Tensor[(7, 8, 1), float32] */;
  %683 = erf(%682) /* ty=Tensor[(7, 8, 1), float32] */;
  (%683,)
}

def @func_1648(%var_1612: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) {
  %684 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %685 = cast(%var_1612, dtype="int16") /* ty=Tensor[(10, 11, 8), int16] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="int16") /* ty=Tensor[(10, 11, 8), int16] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %689 = logical_xor(%687, %688) /* ty=Tensor[(10, 11, 8), int16] */;
  %690 = @func_1545() /* ty=Tensor[(10, 11, 8), float32] */;
  (%689, %690)
}

def @func_7732() -> (Tensor[(10, 11, 8), float32],) {
  %691 = @func_5874() /* ty=Tensor[(10, 11, 8), float32] */;
  (%691,)
}

def @func_6188(%var_6176: Tensor[(1980), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(8, 110), float32], Tensor[(1980), float32], Tensor[(11, 3, 14), float64]) {
  %692 = cast(%var_6176, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %693 = reshape(%692, newshape=[15, 11, 12]) /* ty=Tensor[(15, 11, 12), float32] */;
  %694 = @func_3395(%693) /* ty=(Tensor[(15, 11, 12), float32], Tensor[(10, 11, 8), float64], Tensor[(60, 14), int32], Tensor[(8, 110), float32]) */;
  %695 = @func_5426() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) */;
  %696 = @func_4063() /* ty=Tensor[(10, 11, 8), float32] */;
  %697 = %694.3;
  %698 = %695.2;
  (%696, %697, %var_6176, %698)
}

def @func_7790() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %704 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %699 = @func_1292() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %700 = @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %701 = %699.0;
    %702 = %700.0;
    %703 = @func_2294() /* ty=Tensor[(10, 11, 8), float32] */;
    (%701, %702, %703)
  };
  %704() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_6353() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_6351() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_5618() -> Tensor[(10, 11, 8), float32] {
  %706 = fn () -> Tensor[(10, 11, 8), float32] {
    %705 = @func_5321() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %705.0
  };
  %706() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1574() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) {
  @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */
}

def @func_3473(%var_3468: Tensor[(4, 15, 14), int32], %var_3469: Tensor[(4, 15, 14), int32]) -> Tensor[(4, 15, 14), int32] {
  %707 = cast(%var_3469, dtype="int32") /* ty=Tensor[(4, 15, 14), int32] */;
  %708 = shape_of(%var_3468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%var_3468, dtype="int32") /* ty=Tensor[(4, 15, 14), int32] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%709, %710) /* ty=Tensor[(4, 15, 14), int32] */
}

def @func_209() -> (Tensor[(10, 11, 8), float32],) {
  @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_7856() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %711 = @func_4719() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %712 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %713 = %711.2;
  %714 = %712.0;
  (%713, %714)
}

def @func_6117() -> Tensor[(10, 11, 8), float32] {
  @func_6115() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_8511(%var_8487: Tensor[(81), uint64]) -> (Tensor[(10, 11, 8), float32], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(81), uint64], Tensor[(96), float32], Tensor[(10, 11, 8), float32]) {
  %715 = @func_6022() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(462), float64]) */;
  %716 = @func_6072() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %717 = cast(%var_8487, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %718 = cast(%var_8487, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %719 = cast(meta[relay.Constant][27] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %720 = reshape(%717, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %721 = reshape(%718, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
  %722 = reshape(%719, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %723 = @func_4928(%720, %721, %722) /* ty=(Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) */;
  %724 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  %725 = %715.1;
  %726 = %716.0;
  %727 = %723.1;
  %728 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  (%724, %725, %726, %727, %var_8487, meta[relay.Constant][27] /* ty=Tensor[(96), float32] */, %728)
}

def @main(%var_8812: Tensor[(2, 8, 3), float64], %var_8827: Tensor[(2, 8, 3), float64], %var_8890: Tensor[(10, 42), bool], %var_8891: Tensor[(462), float64]) -> (Tensor[(2, 8, 3), bool], Tensor[(2, 8, 3), float32], Tensor[(2, 8, 3), uint64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 42), bool], Tensor[(462), float64], Tensor[(2, 8, 3), bool]) {
  %729 = cast(%var_8812, dtype="float64") /* ty=Tensor[(2, 8, 3), float64] */;
  %730 = sin(%729) /* ty=Tensor[(2, 8, 3), float64] */;
  %731 = cast(%var_8827, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%730, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %735 = cast(%var_8812, dtype="float32") /* ty=Tensor[(2, 8, 3), float32] */;
  %736 = cast(%var_8812, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %737 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%730, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = less(%738, %739) /* ty=Tensor[(2, 8, 3), bool] */;
  %741 = cast(%730, dtype="uint64") /* ty=Tensor[(2, 8, 3), uint64] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%740, dtype="uint64") /* ty=Tensor[(2, 8, 3), uint64] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %745 = @func_7380() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %746 = @func_7378() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %747 = %746.0;
  %748 = cast(%747, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %749 = reshape(%748, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %750 = @func_1651(%749) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %751 = cast(%var_8890, dtype="bool") /* ty=Tensor[(10, 42), bool] */;
  %752 = cast(%var_8891, dtype="float64") /* ty=Tensor[(462), float64] */;
  %753 = reshape(%751, newshape=[420]) /* ty=Tensor[(420), bool] */;
  %754 = reshape(%752, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %755 = @func_1913(%753, %754) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) */;
  %756 = cast(%var_8827, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %757 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%730, dtype="bool") /* ty=Tensor[(2, 8, 3), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %760 = greater(%733, %734) /* ty=Tensor[(2, 8, 3), bool] */;
  %761 = cos(%735) /* ty=Tensor[(2, 8, 3), float32] */;
  %762 = multiply(%743, %744) /* ty=Tensor[(2, 8, 3), uint64] */;
  %763 = %745.0;
  %764 = %750.1;
  %765 = %755.4;
  %766 = less_equal(%758, %759) /* ty=Tensor[(2, 8, 3), bool] */;
  (%760, %761, %762, %763, %764, %765, %var_8890, %var_8891, %766)
}

def @func_480(%var_450: Tensor[(11, 3, 14), float64]) -> (Tensor[(11, 3, 14), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %767 = cast(%var_450, dtype="float64") /* ty=Tensor[(11, 3, 14), float64] */;
  %768 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %769 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %770 = tan(%767) /* ty=Tensor[(11, 3, 14), float64] */;
  %771 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  %772 = %768.1;
  %773 = %769.2;
  %774 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  (%770, %771, %772, %773, %774)
}

def @func_6351() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %775 = @func_4093() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %776 = @func_3685() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %777 = @func_4719() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %778 = %775.1;
  %779 = %776.0;
  %780 = %777.0;
  (%778, %779, %780)
}

def @func_4023() -> (Tensor[(10, 11, 8), float32],) {
  %783 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %781 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %782 = %781.0;
    (%782,)
  };
  %783() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_6324(%var_6269: Tensor[(1680), float32], %var_6288: Tensor[(1001), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(16, 7, 15), float32], Tensor[(1680), float32], Tensor[(462), float64], Tensor[(210, 2), bool], Tensor[(462), float64], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %784 = cast(%var_6269, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %785 = reshape(%784, newshape=[16, 7, 15]) /* ty=Tensor[(16, 7, 15), float32] */;
  %786 = @func_5465(%785) /* ty=(Tensor[(16, 7, 15), float32],) */;
  %787 = cast(meta[relay.Constant][28] /* ty=Tensor[(210, 2), bool] */, dtype="bool") /* ty=Tensor[(210, 2), bool] */;
  %788 = cast(meta[relay.Constant][29] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %789 = reshape(%787, newshape=[420]) /* ty=Tensor[(420), bool] */;
  %790 = reshape(%788, newshape=[462]) /* ty=Tensor[(462), float64] */;
  %791 = @func_1910(%789, %790) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 15, 14), float64], Tensor[(420), bool], Tensor[(462), float64], Tensor[(10, 11, 8), float32]) */;
  %792 = cast(%var_6288, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %793 = reshape(%792, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %794 = @func_4231(%793) /* ty=(Tensor[(11, 7, 13), float32],) */;
  %795 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %796 = @func_5639() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %797 = @func_5617() /* ty=Tensor[(10, 11, 8), float32] */;
  %798 = %786.0;
  %799 = %791.3;
  %800 = %794.0;
  %801 = %795.0;
  %802 = %796.0;
  %803 = @func_4210() /* ty=Tensor[(10, 11, 8), bool] */;
  (%797, %798, %var_6269, %799, meta[relay.Constant][28] /* ty=Tensor[(210, 2), bool] */, meta[relay.Constant][29] /* ty=Tensor[(462), float64] */, %800, %var_6288, %801, %802, %803)
}

def @func_1134() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %804 = @func_1104() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %805 = @func_389() /* ty=Tensor[(10, 11, 8), float32] */;
  %806 = %804.0;
  (%805, %806)
}

def @func_1105() -> (Tensor[(10, 11, 8), float32],) {
  %808 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %807 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
    (%807,)
  };
  %808() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5202(%var_5198: Tensor[(81), uint64], %var_5199: Tensor[(96), float32], %var_5200: Tensor[(1001, 1), float32], %var_5201: Tensor[(81), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(11, 7, 13), bool], Tensor[(1001, 96), int32], Tensor[(10, 11, 8), bool], Tensor[(81), float32], Tensor[(81), float32]) {
  %843 = fn (%var_5140: Tensor[(81), uint64], %var_5141: Tensor[(96), float32], %var_5155: Tensor[(1001, 1), float32], %var_5180: Tensor[(81), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(11, 7, 13), bool], Tensor[(1001, 96), int32], Tensor[(10, 11, 8), bool], Tensor[(81), float32], Tensor[(81), float32]) {
    %809 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %810 = cast(%var_5140, dtype="uint64") /* ty=Tensor[(81), uint64] */;
    %811 = cast(%var_5140, dtype="uint64") /* ty=Tensor[(81), uint64] */;
    %812 = cast(%var_5141, dtype="float32") /* ty=Tensor[(96), float32] */;
    %813 = reshape(%810, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
    %814 = reshape(%811, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), uint64] */;
    %815 = reshape(%812, newshape=[96]) /* ty=Tensor[(96), float32] */;
    %816 = @func_4928(%813, %814, %815) /* ty=(Tensor[(9, 3, 3), bool], Tensor[(9, 3, 3), float32], Tensor[(10, 11, 8), float32], Tensor[(96), float32]) */;
    %817 = cast(%var_5155, dtype="float32") /* ty=Tensor[(1001, 1), float32] */;
    %818 = reshape(%817, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
    %819 = @func_4231(%818) /* ty=(Tensor[(11, 7, 13), float32],) */;
    %820 = %819.0;
    %821 = cast(%var_5155, dtype="bool") /* ty=Tensor[(1001, 1), bool] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%820, dtype="bool") /* ty=Tensor[(11, 7, 13), bool] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %825 = cast(%var_5141, dtype="int32") /* ty=Tensor[(96), int32] */;
    %826 = cast(%var_5155, dtype="int32") /* ty=Tensor[(1001, 1), int32] */;
    %827 = %809.0;
    %828 = cast(%827, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
    %829 = reshape(%828, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), uint64] */;
    %830 = cast(%var_5140, dtype="float32") /* ty=Tensor[(81), float32] */;
    %831 = acosh(%830) /* ty=Tensor[(81), float32] */;
    %832 = cast(%var_5180, dtype="float32") /* ty=Tensor[(81), float32] */;
    %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(1), int32] */;
    %834 = cast(%831, dtype="float32") /* ty=Tensor[(81), float32] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?), float32] */;
    %836 = cast(%831, dtype="float32") /* ty=Tensor[(81), float32] */;
    %837 = %816.1;
    %838 = equal(%823, %824) /* ty=Tensor[(11, 7, 13), bool] */;
    %839 = bitwise_xor(%825, %826) /* ty=Tensor[(1001, 96), int32] */;
    %840 = @func_3002(%829) /* ty=Tensor[(10, 11, 8), bool] */;
    %841 = floor_divide(%834, %835) /* ty=Tensor[(81), float32] */;
    %842 = erf(%836) /* ty=Tensor[(81), float32] */;
    (%827, %837, %838, %839, %840, %841, %842)
  };
  %843(%var_5198, %var_5199, %var_5200, %var_5201) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(9, 3, 3), float32], Tensor[(11, 7, 13), bool], Tensor[(1001, 96), int32], Tensor[(10, 11, 8), bool], Tensor[(81), float32], Tensor[(81), float32]) */
}

def @func_8248() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %846 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %844 = @func_3923() /* ty=Tensor[(10, 11, 8), float32] */;
    %845 = @func_6115() /* ty=Tensor[(10, 11, 8), float32] */;
    (%844, %845)
  };
  %846() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_2856() -> (Tensor[(10, 11, 8), float32],) {
  @func_2854() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_781(%var_753: Tensor[(14, 10, 6), int32], %var_774: Tensor[(10, 11, 8), float32]) -> (Tensor[(14, 10, 6), int32], Tensor[(10, 11, 8), float64]) {
  %847 = cast(%var_753, dtype="int32") /* ty=Tensor[(14, 10, 6), int32] */;
  %848 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(14, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 10, 6), int32] */, dtype="int32") /* ty=Tensor[(14, 10, 6), int32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %851 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %852 = %851.0;
  %853 = cast(%var_774, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %857 = maximum(%849, %850) /* ty=Tensor[(14, 10, 6), int32] */;
  %858 = divide(%855, %856) /* ty=Tensor[(10, 11, 8), float64] */;
  (%857, %858)
}

def @func_3923() -> Tensor[(10, 11, 8), float32] {
  %859 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %859.0
}

def @func_3058(%var_3036: Tensor[(10, 1, 12), int16], %var_3037: Tensor[(10, 4, 12), int16]) -> (Tensor[(10, 4, 12), int16], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 4, 12), float32]) {
  %860 = cast(%var_3036, dtype="int16") /* ty=Tensor[(10, 1, 12), int16] */;
  %861 = cast(%var_3037, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %862 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %863 = @func_2945() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %864 = cast(%var_3037, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %865 = minimum(%860, %861) /* ty=Tensor[(10, 4, 12), int16] */;
  %866 = %862.0;
  %867 = %863.1;
  %868 = asin(%864) /* ty=Tensor[(10, 4, 12), float32] */;
  (%865, %866, %867, %868)
}

def @func_8639(%var_8637: Tensor[(462, 1), float64], %var_8638: Tensor[(462, 9), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462, 9), bool]) {
  %881 = fn (%var_8616: Tensor[(462, 1), float64], %var_8625: Tensor[(462, 9), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462, 9), bool]) {
    %869 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %870 = @func_1951() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(312), float64], Tensor[(420), bool]) */;
    %871 = cast(%var_8616, dtype="float64") /* ty=Tensor[(462, 1), float64] */;
    %872 = reshape(%871, newshape=[462]) /* ty=Tensor[(462), float64] */;
    %873 = @func_4415(%872) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %874 = cast(%var_8616, dtype="bool") /* ty=Tensor[(462, 1), bool] */;
    %875 = cast(%var_8625, dtype="bool") /* ty=Tensor[(462, 9), bool] */;
    %876 = %869.0;
    %877 = @func_3923() /* ty=Tensor[(10, 11, 8), float32] */;
    %878 = %870.0;
    %879 = %873.3;
    %880 = logical_and(%874, %875) /* ty=Tensor[(462, 9), bool] */;
    (%876, %877, %878, %879, %880)
  };
  %881(%var_8637, %var_8638) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462, 9), bool]) */
}

def @func_5732() -> Tensor[(10, 11, 8), float32] {
  %882 = @func_1572() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64]) */;
  %882.0
}

def @func_2295() -> Tensor[(10, 11, 8), float32] {
  %884 = fn () -> Tensor[(10, 11, 8), float32] {
    %883 = @func_1382() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %883.0
  };
  %884() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_3993(%var_3992: Tensor[(4, 15, 6), int16]) -> (Tensor[(4, 15, 6), bool],) {
  %890 = fn (%var_3965: Tensor[(4, 15, 6), int16]) -> (Tensor[(4, 15, 6), bool],) {
    %885 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 15, 6), int16] */, dtype="bool") /* ty=Tensor[(4, 15, 6), bool] */;
    %886 = shape_of(%var_3965, dtype="int32") /* ty=Tensor[(3), int32] */;
    %887 = cast(%var_3965, dtype="bool") /* ty=Tensor[(4, 15, 6), bool] */;
    %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %889 = less(%887, %888) /* ty=Tensor[(4, 15, 6), bool] */;
    (%889,)
  };
  %890(%var_3992) /* ty=(Tensor[(4, 15, 6), bool],) */
}

def @func_6115() -> Tensor[(10, 11, 8), float32] {
  %891 = @func_928() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %891.1
}

def @func_4189(%var_4164: Tensor[(96), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(420), bool], Tensor[(96), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %892 = cast(%var_4164, dtype="float32") /* ty=Tensor[(96), float32] */;
  %893 = reshape(%892, newshape=[2, 4, 12]) /* ty=Tensor[(2, 4, 12), float32] */;
  %894 = @func_2613(%893) /* ty=(Tensor[(2, 4, 12), float32], Tensor[(420), bool], Tensor[(2, 4, 12), float32]) */;
  %895 = @func_3437() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %896 = @func_4022() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %897 = @func_2655() /* ty=Tensor[(10, 11, 8), float32] */;
  %898 = %894.1;
  %899 = %895.0;
  %900 = %896.0;
  (%897, %898, %var_4164, %899, %900)
}

def @func_6328(%var_6326: Tensor[(1680), float32], %var_6327: Tensor[(1001), float32]) -> (Tensor[(10, 11, 8), float32], Tensor[(16, 7, 15), float32], Tensor[(1680), float32], Tensor[(462), float64], Tensor[(210, 2), bool], Tensor[(462), float64], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  @func_6324(%var_6326, %var_6327) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(16, 7, 15), float32], Tensor[(1680), float32], Tensor[(462), float64], Tensor[(210, 2), bool], Tensor[(462), float64], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */
}

def @func_1154() -> Tensor[(10, 11, 8), float32] {
  @func_1152() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_6562() -> (Tensor[(78, 4), float64],) {
  %903 = fn () -> (Tensor[(78, 4), float64],) {
    %901 = @func_4654() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(78, 4), float64], Tensor[(210, 2), bool]) */;
    %902 = %901.2;
    (%902,)
  };
  %903() /* ty=(Tensor[(78, 4), float64],) */
}

def @func_6960(%var_6958: Tensor[(10, 13, 8), float64], %var_6959: Tensor[(10, 13, 8), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 13, 8), uint64], Tensor[(10, 13, 8), float32]) {
  @func_6956(%var_6958, %var_6959) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 13, 8), uint64], Tensor[(10, 13, 8), float32]) */
}

def @func_7378() -> (Tensor[(10, 11, 8), float32],) {
  %904 = @func_4588() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */;
  %905 = %904.0;
  (%905,)
}

def @func_908(%var_906: Tensor[(2, 15, 14), bool], %var_907: Tensor[(462, 1), float64]) -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) {
  @func_904(%var_906, %var_907) /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(462, 1), float64], Tensor[(10, 11, 8), float32], Tensor[(2, 15, 14), float64]) */
}

def @func_1856() -> Tensor[(10, 11, 8), float32] {
  @func_1854() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1382() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %906 = @func_1084() /* ty=(Tensor[(10, 11, 8), bool],) */;
  %907 = %906.0;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %909 = @func_1021() /* ty=Tensor[(10, 11, 8), float32] */;
  %910 = cos(%908) /* ty=Tensor[(10, 11, 8), float32] */;
  (%909, %910)
}

def @func_1001(%var_999: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) {
  @func_998(%var_999) /* ty=(Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) */
}

def @func_5428() -> (Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) {
  @func_5426() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 14), float64], Tensor[(462), float64]) */
}

def @func_3398(%var_3396: Tensor[(15, 11, 12), float32]) -> (Tensor[(15, 11, 12), float32], Tensor[(10, 11, 8), float64], Tensor[(60, 14), int32], Tensor[(8, 110), float32]) {
  @func_3395(%var_3396) /* ty=(Tensor[(15, 11, 12), float32], Tensor[(10, 11, 8), float64], Tensor[(60, 14), int32], Tensor[(8, 110), float32]) */
}

def @func_4065() -> Tensor[(10, 11, 8), float32] {
  @func_4063() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_1847() -> (Tensor[(10, 11, 8), uint64],) {
  %911 = @func_844() /* ty=Tensor[(10, 11, 8), float32] */;
  %912 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
  %913 = %912.0;
  %914 = cast(%913, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %915 = shape_of(%911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %916 = cast(%911, dtype="uint64") /* ty=Tensor[(10, 11, 8), uint64] */;
  %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %918 = bitwise_or(%916, %917) /* ty=Tensor[(10, 11, 8), uint64] */;
  (%918,)
}

def @func_7635() -> Tensor[(10, 11, 8), float32] {
  @func_1762() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_8785() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_8783() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_6137(%var_6135: Tensor[(13, 4, 14), int8], %var_6136: Tensor[(13, 4, 14), int8]) -> Tensor[(13, 4, 14), bool] {
  %923 = fn (%var_6121: Tensor[(13, 4, 14), int8], %var_6122: Tensor[(13, 4, 14), int8]) -> Tensor[(13, 4, 14), bool] {
    %919 = cast(%var_6122, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
    %920 = shape_of(%var_6121, dtype="int32") /* ty=Tensor[(3), int32] */;
    %921 = cast(%var_6121, dtype="bool") /* ty=Tensor[(13, 4, 14), bool] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%921, %922) /* ty=Tensor[(13, 4, 14), bool] */
  };
  %923(%var_6135, %var_6136) /* ty=Tensor[(13, 4, 14), bool] */
}

def @func_7858() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  @func_7856() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_3092() -> Tensor[(10, 11, 8), float32] {
  %925 = fn () -> Tensor[(10, 11, 8), float32] {
    %924 = @func_563() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %924.0
  };
  %925() /* ty=Tensor[(10, 11, 8), float32] */
}

def @func_998(%var_987: Tensor[(10, 11, 8), float32]) -> (Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) {
  %926 = @func_176() /* ty=Tensor[(10, 11, 8), float32] */;
  %927 = cast(%var_987, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %929 = cast(%926, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %931 = cast(%926, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %932 = shape_of(%var_987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%var_987, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %935 = less(%929, %930) /* ty=Tensor[(10, 11, 8), bool] */;
  %936 = not_equal(%933, %934) /* ty=Tensor[(10, 11, 8), bool] */;
  (%935, %936)
}

def @func_5242(%var_5240: Tensor[(1, 10, 15), float32], %var_5241: Tensor[(10, 10, 15), bool]) -> (Tensor[(1, 10, 15), float32], Tensor[(10, 10, 15), float64]) {
  @func_5238(%var_5240, %var_5241) /* ty=(Tensor[(1, 10, 15), float32], Tensor[(10, 10, 15), float64]) */
}

def @func_4720() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %947 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
    %937 = @func_3685() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %938 = @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %939 = @func_312() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %940 = @func_2482() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */;
    %941 = @func_207() /* ty=(Tensor[(10, 11, 8), float32],) */;
    %942 = %937.1;
    %943 = %938.2;
    %944 = %939.2;
    %945 = %940.0;
    %946 = %941.0;
    (%942, %943, %944, %945, %946)
  };
  %947() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */
}

def @func_5705() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), int16]) {
  %948 = @func_3638() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %949 = %948.0;
  %950 = cast(%949, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %951 = reshape(%950, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
  %952 = @func_1648(%951) /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), float32]) */;
  %953 = %952.0;
  (%949, %953)
}

def @func_8018() -> (Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), uint64]) {
  @func_8016() /* ty=(Tensor[(10, 11, 8), int16], Tensor[(10, 11, 8), uint64]) */
}

def @func_3086() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
  %959 = fn () -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) {
    %954 = @func_1854() /* ty=Tensor[(10, 11, 8), float32] */;
    %955 = cast(%954, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    %956 = reshape(%955, newshape=[10, 11, 8]) /* ty=Tensor[(10, 11, 8), float32] */;
    %957 = @func_998(%956) /* ty=(Tensor[(10, 11, 8), bool], Tensor[(10, 11, 8), bool]) */;
    %958 = %957.1;
    (%954, %958)
  };
  %959() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), bool]) */
}

def @func_4560() -> (Tensor[(10, 11, 8), float32],) {
  %961 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %960 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
    (%960,)
  };
  %961() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_5345() -> (Tensor[(10, 11, 8), float32],) {
  @func_5343() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_2638() -> (Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) {
  @func_2636() /* ty=(Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), uint64], Tensor[(10, 11, 8), float32]) */
}

def @func_2686() -> (Tensor[(10, 11, 8), float32],) {
  @func_2684() /* ty=(Tensor[(10, 11, 8), float32],) */
}

def @func_6111(%var_6109: Tensor[(7, 8, 1), float32]) -> (Tensor[(7, 8, 1), float32],) {
  @func_6108(%var_6109) /* ty=(Tensor[(7, 8, 1), float32],) */
}

def @func_8055(%var_8021: Tensor[(11, 3, 15), float64], %var_8022: Tensor[(11, 3, 15), float64], %var_8045: Tensor[(11, 3, 15), float64], %var_8049: Tensor[(11, 3, 15), float64]) -> (Tensor[(11, 3, 15), float64], Tensor[(11, 3, 15), float32], Tensor[(10, 11, 8), float32], Tensor[(11, 3, 15), float32], Tensor[(11, 3, 15), bool]) {
  %962 = cast(%var_8022, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  %963 = shape_of(%var_8021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %964 = cast(%var_8021, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %966 = cast(%var_8022, dtype="float32") /* ty=Tensor[(11, 3, 15), float32] */;
  %967 = @func_7856() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
  %968 = cast(%var_8045, dtype="float32") /* ty=Tensor[(11, 3, 15), float32] */;
  %969 = shape_of(%var_8021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(%var_8021, dtype="float32") /* ty=Tensor[(11, 3, 15), float32] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %972 = cast(%var_8049, dtype="bool") /* ty=Tensor[(11, 3, 15), bool] */;
  %973 = shape_of(%var_8022, dtype="int32") /* ty=Tensor[(3), int32] */;
  %974 = cast(%var_8022, dtype="bool") /* ty=Tensor[(11, 3, 15), bool] */;
  %975 = dyn.reshape(%972, %973, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %976 = floor_mod(%964, %965) /* ty=Tensor[(11, 3, 15), float64] */;
  %977 = asin(%966) /* ty=Tensor[(11, 3, 15), float32] */;
  %978 = %967.0;
  %979 = mod(%970, %971) /* ty=Tensor[(11, 3, 15), float32] */;
  %980 = less(%974, %975) /* ty=Tensor[(11, 3, 15), bool] */;
  (%976, %977, %978, %979, %980)
}

def @func_2179() -> (Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) {
  %981 = @func_1152() /* ty=Tensor[(10, 11, 8), float32] */;
  %982 = @func_139() /* ty=Tensor[(10, 11, 8), float32] */;
  (%981, %982)
}

def @func_6447() -> (Tensor[(10, 11, 8), float32],) {
  %985 = fn () -> (Tensor[(10, 11, 8), float32],) {
    %983 = @func_3685() /* ty=(Tensor[(10, 11, 8), float32], Tensor[(10, 11, 8), float32]) */;
    %984 = %983.0;
    (%984,)
  };
  %985() /* ty=(Tensor[(10, 11, 8), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen270/build/output.py", line 3156, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:02:32] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

