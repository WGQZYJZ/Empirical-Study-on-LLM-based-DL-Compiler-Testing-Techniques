==========mod==========
#[version = "0.0.5"]
def @func_1173() -> Tensor[(13, 3), float64] {
  %0 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %0.0
}

def @func_1073(%var_1043: Tensor[(6, 1, 12), float64]) -> (Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) {
  %1 = cast(%var_1043, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
  %2 = rsqrt(%1) /* ty=Tensor[(6, 1, 12), float64] */;
  %3 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  (%2, %3)
}

def @func_6199() -> Tensor[(5, 15, 6), float64] {
  %4 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %5 = %4.1;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
  log(%6) /* ty=Tensor[(5, 15, 6), float64] */
}

def @func_665() -> (Tensor[(13, 3), float64],) {
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 3), float64] */;
  %8 = sigmoid(%7) /* ty=Tensor[(13, 3), float64] */;
  (%8,)
}

def @func_6039(%var_6023: Tensor[(2, 10, 13), float32]) -> (Tensor[(2, 10, 13), float32],) {
  %9 = cast(%var_6023, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %10 = tan(%9) /* ty=Tensor[(2, 10, 13), float32] */;
  (%10,)
}

def @func_7382() -> (Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(72), float64]) {
  %11 = @func_3452() /* ty=(Tensor[(13, 3), float64], Tensor[(450), float32]) */;
  %12 = @func_4746() /* ty=(Tensor[(5, 15, 6), float64], Tensor[(6, 1, 12), float64], Tensor[(72), float64]) */;
  %13 = %11.0;
  %14 = @func_6915() /* ty=Tensor[(2560), int16] */;
  %15 = %12.2;
  (%13, %14, %15)
}

def @func_4811(%var_4807: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) {
  %16 = @func_3014() /* ty=(Tensor[(13, 3), float64],) */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %19 = reshape(%17, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %20 = reshape(%18, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %21 = @func_2374(%19, %20) /* ty=(Tensor[(16, 10, 16), int16],) */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %23 = reshape(%22, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %24 = @func_4213(%23) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) */;
  %25 = cast(%var_4807, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %26 = reshape(%25, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %27 = @func_4267(%26) /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) */;
  %28 = %16.0;
  %29 = %21.0;
  %30 = %24.1;
  %31 = %27.2;
  (%28, %29, meta[relay.Constant][1] /* ty=Tensor[(2560), int16] */, %30, meta[relay.Constant][2] /* ty=Tensor[(72), float32] */, %31, %var_4807)
}

def @func_6311(%var_6281: Tensor[(550, 2), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(550, 2), int8], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(13, 3), float64]) {
  %32 = @func_4591() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(550, 2), float32] */, dtype="float32") /* ty=Tensor[(550, 2), float32] */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(550, 2), float32] */, dtype="float32") /* ty=Tensor[(550, 2), float32] */;
  %35 = reshape(%33, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %36 = reshape(%34, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %37 = @func_5580(%35, %36) /* ty=(Tensor[(11, 10, 10), float32], Tensor[(196), uint8]) */;
  %38 = cast(%var_6281, dtype="int8") /* ty=Tensor[(550, 2), int8] */;
  %39 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(550, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(550, 2), float32] */, dtype="int8") /* ty=Tensor[(550, 2), int8] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %43 = reshape(%42, newshape=[13, 7, 14]) /* ty=Tensor[(13, 7, 14), float64] */;
  %44 = @func_2494(%43) /* ty=(Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) */;
  %45 = @func_5244() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %46 = %32.1;
  %47 = @func_5743() /* ty=Tensor[(13, 3), float64] */;
  %48 = %37.1;
  %49 = minimum(%40, %41) /* ty=Tensor[(550, 2), int8] */;
  %50 = %44.1;
  %51 = %45.0;
  (%46, %47, %48, %49, %50, meta[relay.Constant][4] /* ty=Tensor[(1274), float64] */, %51)
}

def @func_7339(%var_7334: Tensor[(3, 2, 13), int8], %var_7335: Tensor[(3, 2, 13), int8]) -> Tensor[(3, 2, 13), int8] {
  %52 = cast(%var_7335, dtype="int8") /* ty=Tensor[(3, 2, 13), int8] */;
  %53 = shape_of(%var_7334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%var_7334, dtype="int8") /* ty=Tensor[(3, 2, 13), int8] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%54, %55) /* ty=Tensor[(3, 2, 13), int8] */
}

def @func_5950() -> (Tensor[(13, 3), float64],) {
  %56 = @func_3596() /* ty=(Tensor[(13, 3), float64],) */;
  %57 = %56.0;
  (%57,)
}

def @func_3079(%var_3057: Tensor[(180), float64], %var_3074: Tensor[(450), float64]) -> (Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) {
  %58 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
  %59 = cast(%var_3074, dtype="float64") /* ty=Tensor[(450), float64] */;
  %60 = reshape(%59, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
  %61 = @func_9(%60) /* ty=(Tensor[(5, 15, 6), float64],) */;
  %62 = cast(%var_3057, dtype="float64") /* ty=Tensor[(180), float64] */;
  %63 = cast(%var_3057, dtype="float64") /* ty=Tensor[(180), float64] */;
  %64 = cast(%var_3057, dtype="float64") /* ty=Tensor[(180), float64] */;
  %65 = reshape(%62, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %66 = reshape(%63, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %67 = reshape(%64, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %68 = @func_802(%65, %66, %67) /* ty=(Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) */;
  %69 = %68.0;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %71 = %58.0;
  %72 = %61.0;
  %73 = sinh(%70) /* ty=Tensor[(10, 2, 9), float64] */;
  (%71, %var_3057, %72, %var_3074, %73)
}

def @func_6896(%var_6882: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8]) {
  %74 = @func_4591() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %75 = cast(%var_6882, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %76 = reshape(%75, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %77 = @func_4267(%76) /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) */;
  %78 = %74.0;
  %79 = %77.0;
  (%78, %79, %var_6882)
}

def @func_2337() -> Tensor[(450), float32] {
  %80 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %81 = %80.2;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(450), float32] */;
  acos(%82) /* ty=Tensor[(450), float32] */
}

def @func_987() -> (Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) {
  %83 = cast(meta[relay.Constant][5] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 9, 6), uint16] */, dtype="uint16") /* ty=Tensor[(11, 9, 6), uint16] */;
  %85 = right_shift(%83, %84) /* ty=Tensor[(11, 9, 6), uint16] */;
  %86 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  (%85, %86)
}

def @func_2735() -> (Tensor[(13, 3), float64],) {
  %87 = @func_2410() /* ty=(Tensor[(13, 3), float64],) */;
  %88 = %87.0;
  (%88,)
}

def @func_6501(%var_6493: Tensor[(14, 14, 8), uint64]) -> Tensor[(14, 14, 8), uint64] {
  %89 = cast(%var_6493, dtype="uint64") /* ty=Tensor[(14, 14, 8), uint64] */;
  %90 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 8), uint64] */, dtype="uint64") /* ty=Tensor[(14, 14, 8), uint64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%91, %92) /* ty=Tensor[(14, 14, 8), uint64] */
}

def @func_6706(%var_6701: Tensor[(15, 6, 1), float32]) -> (Tensor[(15, 6, 1), float32],) {
  %93 = cast(%var_6701, dtype="float32") /* ty=Tensor[(15, 6, 1), float32] */;
  %94 = sigmoid(%93) /* ty=Tensor[(15, 6, 1), float32] */;
  (%94,)
}

def @func_2374(%var_2350: Tensor[(16, 10, 16), int16], %var_2351: Tensor[(16, 10, 16), int16]) -> (Tensor[(16, 10, 16), int16],) {
  %95 = cast(%var_2351, dtype="int16") /* ty=Tensor[(16, 10, 16), int16] */;
  %96 = shape_of(%var_2350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_2350, dtype="int16") /* ty=Tensor[(16, 10, 16), int16] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %99 = bitwise_and(%97, %98) /* ty=Tensor[(16, 10, 16), int16] */;
  (%99,)
}

def @func_3845() -> Tensor[(13, 3), float64] {
  %100 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %100.0
}

def @func_5435(%var_5413: Tensor[(12, 11, 4), float32]) -> (Tensor[(12, 11, 4), bool],) {
  %101 = cast(%var_5413, dtype="float32") /* ty=Tensor[(12, 11, 4), float32] */;
  %102 = acos(%101) /* ty=Tensor[(12, 11, 4), float32] */;
  %103 = cast(%102, dtype="bool") /* ty=Tensor[(12, 11, 4), bool] */;
  %104 = shape_of(%var_5413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%var_5413, dtype="bool") /* ty=Tensor[(12, 11, 4), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = not_equal(%105, %106) /* ty=Tensor[(12, 11, 4), bool] */;
  (%107,)
}

def @func_2794() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) {
  %108 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %111 = reshape(%109, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float64] */;
  %112 = reshape(%110, newshape=[50, 9]) /* ty=Tensor[(50, 9), float64] */;
  %113 = @func_555(%111, %112) /* ty=(Tensor[(5, 15, 6), float64], Tensor[(50, 9), float64], Tensor[(6, 3, 3), float32], Tensor[(5, 15, 6), float64]) */;
  %114 = cast(meta[relay.Constant][10] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %116 = reshape(%114, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %117 = reshape(%115, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %118 = @func_2374(%116, %117) /* ty=(Tensor[(16, 10, 16), int16],) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="int16") /* ty=Tensor[(16, 10, 16), int16] */;
  %121 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(2560), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %122 = cast(meta[relay.Constant][10] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?), int16] */;
  %124 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %125 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %126 = %108.0;
  %127 = %113.0;
  %128 = right_shift(%122, %123) /* ty=Tensor[(2560), int16] */;
  (%124, %125, %126, %127, meta[relay.Constant][8] /* ty=Tensor[(54), float64] */, meta[relay.Constant][9] /* ty=Tensor[(450), float64] */, %128)
}

def @func_3608() -> Tensor[(13, 3), float64] {
  %129 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
  %129.0
}

def @func_1866(%var_1858: Tensor[(72), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) {
  %130 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %131 = cast(%var_1858, dtype="float32") /* ty=Tensor[(72), float32] */;
  %132 = reshape(%131, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float32] */;
  %133 = @func_1395(%132) /* ty=(Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) */;
  %134 = %130.0;
  %135 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
  %136 = %133.1;
  (%134, %135, %136, %var_1858)
}

def @func_4591() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %137 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
  %138 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
  %139 = %137.2;
  %140 = %138.0;
  (%139, %140)
}

def @func_6790() -> Tensor[(450), float32] {
  %141 = @func_4913() /* ty=(Tensor[(450), float32],) */;
  %141.0
}

def @func_3014() -> (Tensor[(13, 3), float64],) {
  %142 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  (%142,)
}

def @func_6449() -> (Tensor[(13, 3), float64], Tensor[(450), float64], Tensor[(13, 3), float64]) {
  %143 = @func_2337() /* ty=Tensor[(450), float32] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(450), float32] */;
  %145 = asinh(%144) /* ty=Tensor[(450), float32] */;
  %146 = cast(%145, dtype="float64") /* ty=Tensor[(450), float64] */;
  %147 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %148 = log2(%146) /* ty=Tensor[(450), float64] */;
  %149 = @func_3189() /* ty=Tensor[(13, 3), float64] */;
  (%147, %148, %149)
}

def @func_736() -> Tensor[(13, 3), float64] {
  %150 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %150.0
}

def @func_1299() -> (Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) {
  %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %152 = reshape(%151, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
  %153 = @func_9(%152) /* ty=(Tensor[(5, 15, 6), float64],) */;
  %154 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
  %155 = %153.0;
  (%154, %155, meta[relay.Constant][11] /* ty=Tensor[(450), float64] */)
}

def @func_2826() -> (Tensor[(5, 15, 6), float64], Tensor[(2, 13, 5), bool], Tensor[(26), float32], Tensor[(130), float32], Tensor[(450), float64]) {
  %156 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %157 = cast(meta[relay.Constant][12] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %158 = cast(meta[relay.Constant][13] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %159 = reshape(%157, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %160 = reshape(%158, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %161 = @func_2119(%159, %160) /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) */;
  %162 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %163 = %156.1;
  %164 = %161.0;
  %165 = %162.5;
  (%163, %164, meta[relay.Constant][12] /* ty=Tensor[(26), float32] */, meta[relay.Constant][13] /* ty=Tensor[(130), float32] */, %165)
}

def @func_3043() -> (Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) {
  %166 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
  %167 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %168 = %167.6;
  %169 = cast(%168, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %170 = acos(%169) /* ty=Tensor[(2560), float64] */;
  %171 = cast(meta[relay.Constant][14] /* ty=Tensor[(2560), float64] */, dtype="int64") /* ty=Tensor[(2560), int64] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(1), int32] */;
  %173 = cast(%170, dtype="int64") /* ty=Tensor[(2560), int64] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?), int64] */;
  %175 = cast(%168, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %176 = shape_of(%170, dtype="int32") /* ty=Tensor[(1), int32] */;
  %177 = cast(%170, dtype="bool") /* ty=Tensor[(2560), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?), bool] */;
  %179 = %166.0;
  %180 = minimum(%173, %174) /* ty=Tensor[(2560), int64] */;
  %181 = logical_and(%177, %178) /* ty=Tensor[(2560), bool] */;
  (%179, %180, %181)
}

def @func_2722() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %182 = @func_2165() /* ty=(Tensor[(13, 3), float64],) */;
  %183 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
  %184 = %182.0;
  %185 = %183.0;
  (%184, %185)
}

def @func_5037(%var_5031: Tensor[(4, 15, 10), float64]) -> (Tensor[(4, 15, 10), float64],) {
  %186 = cast(%var_5031, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %187 = cosh(%186) /* ty=Tensor[(4, 15, 10), float64] */;
  (%187,)
}

def @func_3452() -> (Tensor[(13, 3), float64], Tensor[(450), float32]) {
  %188 = @func_1127() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) */;
  %189 = %188.0;
  %190 = @func_2337() /* ty=Tensor[(450), float32] */;
  (%189, %190)
}

def @func_2993() -> Tensor[(11, 9, 6), bool] {
  %191 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
  %192 = %191.0;
  %193 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 9, 6), uint16] */, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%192, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%195, %196) /* ty=Tensor[(11, 9, 6), bool] */
}

def @func_3280(%var_3270: Tensor[(360), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) {
  %197 = cast(%var_3270, dtype="float64") /* ty=Tensor[(360), float64] */;
  %198 = cast(meta[relay.Constant][16] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %199 = reshape(%197, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
  %200 = reshape(%198, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %201 = @func_2945(%199, %200) /* ty=(Tensor[(15, ?, 2), uint64], Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(15, ?, 2), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float64], Tensor[(15, 12, 2), float32]) */;
  %202 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %203 = %201.5;
  (%202, %203, %var_3270, meta[relay.Constant][16] /* ty=Tensor[(72), float64] */)
}

def @func_4913() -> (Tensor[(450), float32],) {
  %204 = @func_2337() /* ty=Tensor[(450), float32] */;
  (%204,)
}

def @func_6987(%var_6975: Tensor[(11, 1, 4), float64]) -> (Tensor[(11, 1, 4), float64], Tensor[(11, 1, 4), float32]) {
  %205 = cast(%var_6975, dtype="float64") /* ty=Tensor[(11, 1, 4), float64] */;
  %206 = cast(%var_6975, dtype="float32") /* ty=Tensor[(11, 1, 4), float32] */;
  %207 = atan(%205) /* ty=Tensor[(11, 1, 4), float64] */;
  %208 = exp(%206) /* ty=Tensor[(11, 1, 4), float32] */;
  (%207, %208)
}

def @func_5580(%var_5560: Tensor[(11, 10, 10), float32], %var_5561: Tensor[(11, 10, 10), float32]) -> (Tensor[(11, 10, 10), float32], Tensor[(196), uint8]) {
  %209 = cast(%var_5561, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %210 = shape_of(%var_5560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_5560, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %213 = @func_4735() /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(36, 2), float32], Tensor[(1, 450), float64]) */;
  %214 = power(%211, %212) /* ty=Tensor[(11, 10, 10), float32] */;
  %215 = %213.1;
  (%214, %215)
}

def @func_6075() -> Tensor[(13, 3), float64] {
  %216 = @func_3596() /* ty=(Tensor[(13, 3), float64],) */;
  %216.0
}

def @func_5206() -> Tensor[(13, 3), float64] {
  %217 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %217.0
}

def @func_4704() -> Tensor[(13, 3), float64] {
  @func_753() /* ty=Tensor[(13, 3), float64] */
}

def @func_1596(%var_1590: uint8, %var_1591: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) {
  %218 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %219 = cast(%var_1590, dtype="uint8") /* ty=uint8 */;
  %220 = cast(%var_1591, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %221 = reshape(%219, newshape=[]) /* ty=uint8 */;
  %222 = reshape(%220, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %223 = @func_1452(%221, %222) /* ty=(Tensor[(11, 9, 6), float32], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(5, 15, 6), float64], Tensor[(1, 450), float64]) */;
  %224 = %218.0;
  %225 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %226 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %227 = %223.5;
  (%224, %225, %226, %227, %var_1590, %var_1591)
}

def @func_3580(%var_3556: Tensor[(14, 13, 1), int64], %var_3557: Tensor[(14, 13, 9), int64]) -> (Tensor[(14, 13, 9), int64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(13, 3), float64], Tensor[(14, 13, ?), float64]) {
  %228 = cast(%var_3556, dtype="int64") /* ty=Tensor[(14, 13, 1), int64] */;
  %229 = cast(%var_3557, dtype="int64") /* ty=Tensor[(14, 13, 9), int64] */;
  %230 = cast(meta[relay.Constant][17] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %231 = reshape(%230, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %232 = @func_3280(%231) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) */;
  %233 = cast(%var_3556, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %234 = cos(%233) /* ty=Tensor[(14, 13, 1), float64] */;
  %235 = cast(%var_3556, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%234, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %239 = logical_xor(%228, %229) /* ty=Tensor[(14, 13, 9), int64] */;
  %240 = %232.0;
  %241 = @func_3189() /* ty=Tensor[(13, 3), float64] */;
  %242 = multiply(%237, %238) /* ty=Tensor[(14, 13, ?), float64] */;
  (%239, %240, meta[relay.Constant][17] /* ty=Tensor[(360), float64] */, %241, %242)
}

def @func_872() -> (Tensor[(13, 3), float64],) {
  %243 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %244 = %243.0;
  (%244,)
}

def @func_4267(%var_4225: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) {
  %245 = cast(%var_4225, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %246 = cast(meta[relay.Constant][18] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %247 = reshape(%245, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %248 = reshape(%246, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %249 = @func_3403(%247, %248) /* ty=(Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) */;
  %250 = @func_3452() /* ty=(Tensor[(13, 3), float64], Tensor[(450), float32]) */;
  %251 = %250.1;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(450), float32] */;
  %253 = %249.13;
  %254 = tan(%252) /* ty=Tensor[(450), float32] */;
  (%253, %var_4225, meta[relay.Constant][18] /* ty=Tensor[(1274), float64] */, %254)
}

def @func_5932() -> (Tensor[(2560), float64],) {
  %255 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
  %256 = %255.3;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %258 = sqrt(%257) /* ty=Tensor[(2560), float64] */;
  (%258,)
}

def @func_4159() -> Tensor[(13, 3), float64] {
  @func_1173() /* ty=Tensor[(13, 3), float64] */
}

def @func_6395() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %259 = @func_6075() /* ty=Tensor[(13, 3), float64] */;
  %260 = @func_5743() /* ty=Tensor[(13, 3), float64] */;
  (%259, %260)
}

def @func_1749() -> Tensor[(13, 3), float64] {
  %261 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %261.0
}

def @func_7477(%var_7472: Tensor[(1274), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(1274), float64]) {
  %262 = @func_3014() /* ty=(Tensor[(13, 3), float64],) */;
  %263 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
  %264 = cast(meta[relay.Constant][19] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %265 = cast(%var_7472, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %266 = reshape(%264, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %267 = reshape(%265, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %268 = @func_3403(%266, %267) /* ty=(Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) */;
  %269 = %262.0;
  %270 = %263.0;
  %271 = %268.12;
  (%269, %270, %271, meta[relay.Constant][19] /* ty=Tensor[(196), uint8] */, %var_7472)
}

def @func_5244() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %272 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %273 = @func_3495() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %274 = %272.1;
  %275 = %273.2;
  (%274, %275)
}

def @func_2410() -> (Tensor[(13, 3), float64],) {
  %276 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
  %277 = %276.0;
  (%277,)
}

def @func_6768(%var_6757: Tensor[(26), float32]) -> (Tensor[(2, 1, 9), float32], Tensor[(13, 3), float64], Tensor[(26), float32], Tensor[(13, 10), float32], Tensor[(13, 3), float64]) {
  %278 = @func_5905() /* ty=(Tensor[(2, 1, 9), float64], Tensor[(2, ?, 9), bool]) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(2, 1, 9), float64] */;
  %281 = atan(%280) /* ty=Tensor[(2, 1, 9), float64] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %283 = cast(%var_6757, dtype="float32") /* ty=Tensor[(26), float32] */;
  %284 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 10), float32] */;
  %285 = reshape(%283, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %286 = reshape(%284, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %287 = @func_2119(%285, %286) /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) */;
  %288 = sqrt(%282) /* ty=Tensor[(2, 1, 9), float32] */;
  %289 = %287.2;
  %290 = @func_4704() /* ty=Tensor[(13, 3), float64] */;
  (%288, %289, %var_6757, meta[relay.Constant][20] /* ty=Tensor[(13, 10), float32] */, %290)
}

def @func_6636(%var_6592: Tensor[(13, 13, 16), int64], %var_6625: float64, %var_6627: Tensor[(180, 1), float64]) -> (Tensor[(13, 13, 16), bool], Tensor[(3, 6, 4), float64], float64, Tensor[(28), float64], Tensor[(180, 1), float64], Tensor[(5, 90), float64]) {
  %291 = cast(%var_6592, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
  %292 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %295 = right_shift(%293, %294) /* ty=Tensor[(13, 13, 16), int64] */;
  %296 = cast(%295, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %297 = log10(%296) /* ty=Tensor[(13, 13, 16), float32] */;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %299 = atan(%298) /* ty=Tensor[(13, 13, 16), float32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %304 = cast(%var_6625, dtype="float64") /* ty=float64 */;
  %305 = cast(meta[relay.Constant][22] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %306 = cast(%var_6627, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %307 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %308 = reshape(%304, newshape=[]) /* ty=float64 */;
  %309 = reshape(%305, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float64] */;
  %310 = reshape(%306, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %311 = reshape(%307, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %312 = @func_4053(%308, %309, %310, %311) /* ty=(Tensor[(1, 4, 7), float64], Tensor[(5, 15, 6), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float32]) */;
  %313 = less(%302, %303) /* ty=Tensor[(13, 13, 16), bool] */;
  %314 = %312.4;
  (%313, %314, %var_6625, meta[relay.Constant][22] /* ty=Tensor[(28), float64] */, %var_6627, meta[relay.Constant][23] /* ty=Tensor[(5, 90), float64] */)
}

def @func_1972(%var_1927: Tensor[(112), uint32], %var_1928: Tensor[(336), uint32]) -> (Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) {
  %315 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %316 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
  %317 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
  %318 = @func_1127() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) */;
  %319 = cast(%var_1927, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %320 = cast(%var_1928, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %321 = reshape(%319, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), uint32] */;
  %322 = reshape(%320, newshape=[16, 7, 3]) /* ty=Tensor[(16, 7, 3), uint32] */;
  %323 = @func_1829(%321, %322) /* ty=(Tensor[(16, 7, 3), uint32],) */;
  %324 = %323.0;
  %325 = cast(%324, dtype="bool") /* ty=Tensor[(16, 7, 3), bool] */;
  %326 = shape_of(%var_1928, dtype="int32") /* ty=Tensor[(1), int32] */;
  %327 = cast(%var_1928, dtype="bool") /* ty=Tensor[(336), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?), bool] */;
  %329 = %315.0;
  %330 = %316.0;
  %331 = %317.0;
  %332 = %318.2;
  %333 = logical_and(%327, %328) /* ty=Tensor[(336), bool] */;
  (%329, %var_1927, %330, %331, %332, %333)
}

def @func_2119(%var_2082: Tensor[(2, 13, 1), float32], %var_2089: Tensor[(2, 13, 5), float32]) -> (Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) {
  %334 = cast(%var_2082, dtype="float32") /* ty=Tensor[(2, 13, 1), float32] */;
  %335 = acos(%334) /* ty=Tensor[(2, 13, 1), float32] */;
  %336 = cast(%335, dtype="bool") /* ty=Tensor[(2, 13, 1), bool] */;
  %337 = cast(%var_2089, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
  %338 = cast(%var_2082, dtype="float32") /* ty=Tensor[(2, 13, 1), float32] */;
  %339 = cast(%var_2089, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
  %340 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %341 = less_equal(%336, %337) /* ty=Tensor[(2, 13, 5), bool] */;
  %342 = floor_divide(%338, %339) /* ty=Tensor[(2, 13, 5), float32] */;
  %343 = %340.0;
  (%341, %342, %343)
}

def @func_2494(%var_2485: Tensor[(13, 7, 14), float64]) -> (Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) {
  %344 = cast(%var_2485, dtype="float64") /* ty=Tensor[(13, 7, 14), float64] */;
  %345 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
  %346 = atanh(%344) /* ty=Tensor[(13, 7, 14), float64] */;
  %347 = %345.0;
  (%346, %347)
}

def @main(%var_7526: Tensor[(7, 28), uint8]) -> (Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(7, 28), float32]) {
  %348 = @func_6475() /* ty=(Tensor[(13, 3), float64],) */;
  %349 = cast(%var_7526, dtype="uint8") /* ty=Tensor[(7, 28), uint8] */;
  %350 = reshape(%349, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %351 = @func_4811(%350) /* ty=(Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) */;
  %352 = cast(%var_7526, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %353 = %348.0;
  %354 = %351.5;
  %355 = asin(%352) /* ty=Tensor[(7, 28), float32] */;
  (%353, %354, %355)
}

def @func_6915() -> Tensor[(2560), int16] {
  %356 = @func_6093() /* ty=(Tensor[(3, 6, 4), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(13, 3), float64]) */;
  %356.1
}

def @func_1697() -> (Tensor[(13, 3), float64],) {
  %357 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  (%357,)
}

def @func_6351(%var_6338: Tensor[(11, 1, 3), float32], %var_6339: Tensor[(11, 9, 3), float32]) -> (Tensor[(2560), float64], Tensor[(11, 9, 3), float64]) {
  %358 = @func_5932() /* ty=(Tensor[(2560), float64],) */;
  %359 = cast(%var_6338, dtype="float32") /* ty=Tensor[(11, 1, 3), float32] */;
  %360 = cast(%var_6339, dtype="float32") /* ty=Tensor[(11, 9, 3), float32] */;
  %361 = divide(%359, %360) /* ty=Tensor[(11, 9, 3), float32] */;
  %362 = cast(%361, dtype="float64") /* ty=Tensor[(11, 9, 3), float64] */;
  %363 = %358.0;
  %364 = rsqrt(%362) /* ty=Tensor[(11, 9, 3), float64] */;
  (%363, %364)
}

def @func_753() -> Tensor[(13, 3), float64] {
  %365 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %365.0
}

def @func_7289() -> Tensor[(2560), bool] {
  %366 = @func_3043() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) */;
  %366.2
}

def @func_802(%var_793: Tensor[(10, 2, 9), float64], %var_794: Tensor[(10, 2, 9), float64], %var_798: Tensor[(10, 2, 9), float64]) -> (Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) {
  %367 = cast(%var_794, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %368 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%var_793, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %371 = cast(%var_798, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
  %372 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_793, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = floor_mod(%369, %370) /* ty=Tensor[(10, 2, 9), float64] */;
  %376 = equal(%373, %374) /* ty=Tensor[(10, 2, 9), bool] */;
  (%375, %376)
}

def @func_784(%var_779: uint8, %var_780: Tensor[(7, 2, 14), uint8]) -> Tensor[(7, 2, 14), bool] {
  %377 = cast(%var_779, dtype="bool") /* ty=bool */;
  %378 = cast(%var_780, dtype="bool") /* ty=Tensor[(7, 2, 14), bool] */;
  equal(%377, %378) /* ty=Tensor[(7, 2, 14), bool] */
}

def @func_4515() -> (Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) {
  %379 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
  %380 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %381 = %380.1;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %383 = asinh(%382) /* ty=Tensor[(5, 15, 6), float32] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %385 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
  %386 = @func_3043() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) */;
  %387 = %379.0;
  %388 = asin(%384) /* ty=Tensor[(5, 15, 6), float32] */;
  %389 = %385.0;
  %390 = %386.2;
  (%387, %388, %389, %390)
}

def @func_3137(%var_3129: Tensor[(112), uint32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(112), uint32], Tensor[(336), uint32]) {
  %391 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
  %392 = @func_2410() /* ty=(Tensor[(13, 3), float64],) */;
  %393 = cast(%var_3129, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %394 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %395 = reshape(%393, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %396 = reshape(%394, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %397 = @func_1972(%395, %396) /* ty=(Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) */;
  %398 = %391.1;
  %399 = %392.0;
  %400 = %397.1;
  (%398, %399, %400, %var_3129, meta[relay.Constant][24] /* ty=Tensor[(336), uint32] */)
}

def @func_7082(%var_6991: Tensor[(11, 5, 14), float32], %var_6992: Tensor[(11, 5, 14), float32], %var_7033: Tensor[(11, 5, 14), float32]) -> (Tensor[(13, 3), float64], Tensor[(11, 5, 14), int16], Tensor[(11, 5, 14), float64]) {
  %401 = @func_2165() /* ty=(Tensor[(13, 3), float64],) */;
  %402 = cast(%var_6992, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %403 = shape_of(%var_6991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%var_6991, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %406 = power(%404, %405) /* ty=Tensor[(11, 5, 14), float32] */;
  %407 = cast(%var_7033, dtype="int16") /* ty=Tensor[(11, 5, 14), int16] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="int16") /* ty=Tensor[(11, 5, 14), int16] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %411 = cast(%406, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %412 = %401.0;
  %413 = right_shift(%409, %410) /* ty=Tensor[(11, 5, 14), int16] */;
  %414 = exp(%411) /* ty=Tensor[(11, 5, 14), float64] */;
  (%412, %413, %414)
}

def @func_907() -> (Tensor[(13, 3), float64],) {
  %415 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %416 = %415.0;
  (%416,)
}

def @func_2945(%var_2835: Tensor[(15, 12, 2), float64], %var_2915: Tensor[(72), float64]) -> (Tensor[(15, ?, 2), uint64], Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(15, ?, 2), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float64], Tensor[(15, 12, 2), float32]) {
  %417 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %418 = cosh(%417) /* ty=Tensor[(15, 1, 2), float64] */;
  %419 = cast(%418, dtype="uint64") /* ty=Tensor[(15, 1, 2), uint64] */;
  %420 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 2), float64] */, dtype="uint64") /* ty=Tensor[(15, 1, 2), uint64] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %423 = @func_2722() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %424 = cast(meta[relay.Constant][26] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %425 = cast(meta[relay.Constant][27] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %426 = reshape(%424, newshape=[]) /* ty=uint8 */;
  %427 = reshape(%425, newshape=[7, 2, 14]) /* ty=Tensor[(7, 2, 14), uint8] */;
  %428 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
  %429 = cast(%418, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %430 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 2), float64] */, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = logical_or(%431, %432) /* ty=Tensor[(15, ?, 2), bool] */;
  %434 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="float64") /* ty=Tensor[(15, ?, 2), float64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %438 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %439 = cast(%var_2915, dtype="float64") /* ty=Tensor[(72), float64] */;
  %440 = reshape(%439, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float64] */;
  %441 = @func_1073(%440) /* ty=(Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) */;
  %442 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %443 = cast(%var_2835, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %444 = minimum(%442, %443) /* ty=Tensor[(15, 12, 2), float64] */;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %446 = cos(%445) /* ty=Tensor[(15, 12, 2), float32] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %448 = tan(%447) /* ty=Tensor[(15, 12, 2), float32] */;
  %449 = cast(%444, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %453 = logical_or(%451, %452) /* ty=Tensor[(15, 12, 2), bool] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %455 = exp(%454) /* ty=Tensor[(15, 12, 2), float32] */;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %457 = sin(%456) /* ty=Tensor[(15, 12, 2), float64] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %459 = left_shift(%421, %422) /* ty=Tensor[(15, ?, 2), uint64] */;
  %460 = %423.0;
  %461 = @func_784(%426, %427) /* ty=Tensor[(7, 2, 14), bool] */;
  %462 = %428.0;
  %463 = multiply(%436, %437) /* ty=Tensor[(15, ?, 2), float64] */;
  %464 = %438.0;
  %465 = %441.1;
  %466 = rsqrt(%458) /* ty=Tensor[(15, 12, 2), float32] */;
  (%459, %460, %461, meta[relay.Constant][26] /* ty=uint8 */, meta[relay.Constant][27] /* ty=Tensor[(196), uint8] */, %462, %463, %464, %465, %var_2915, %466)
}

def @func_4213(%var_4204: Tensor[(72), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) {
  %467 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
  %468 = cast(%var_4204, dtype="float32") /* ty=Tensor[(72), float32] */;
  %469 = reshape(%468, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %470 = @func_1866(%469) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) */;
  %471 = %467.0;
  %472 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %473 = %470.0;
  (%471, %472, %473, %var_4204)
}

def @func_5905() -> (Tensor[(2, 1, 9), float64], Tensor[(2, ?, 9), bool]) {
  %474 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %475 = cos(%474) /* ty=Tensor[(2, 1, 9), float32] */;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(2, 1, 9), float64] */;
  %477 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 1, 9), float32] */, dtype="bool") /* ty=Tensor[(2, 1, 9), bool] */;
  %478 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%475, dtype="bool") /* ty=Tensor[(2, 1, 9), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %481 = sinh(%476) /* ty=Tensor[(2, 1, 9), float64] */;
  %482 = equal(%479, %480) /* ty=Tensor[(2, ?, 9), bool] */;
  (%481, %482)
}

def @func_3189() -> Tensor[(13, 3), float64] {
  %483 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
  %483.0
}

def @func_5108(%var_5068: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1, 1274), float64], Tensor[(72), float32], Tensor[(6, 12), float32], Tensor[(13, 3), float64]) {
  %484 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %485 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
  %486 = cast(%var_5068, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %487 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1274), float64] */, dtype="float64") /* ty=Tensor[(1, 1274), float64] */;
  %488 = reshape(%486, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %489 = reshape(%487, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %490 = @func_3403(%488, %489) /* ty=(Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) */;
  %491 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
  %492 = reshape(%491, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %493 = @func_4213(%492) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) */;
  %494 = %484.0;
  %495 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %496 = %485.1;
  %497 = %490.11;
  %498 = %493.3;
  %499 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
  (%494, %495, %496, %497, %var_5068, meta[relay.Constant][29] /* ty=Tensor[(1, 1274), float64] */, %498, meta[relay.Constant][30] /* ty=Tensor[(6, 12), float32] */, %499)
}

def @func_6475() -> (Tensor[(13, 3), float64],) {
  %500 = @func_3608() /* ty=Tensor[(13, 3), float64] */;
  (%500,)
}

def @func_7442() -> Tensor[(4, 9, 14), float64] {
  %501 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 9, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
  sin(%501) /* ty=Tensor[(4, 9, 14), float64] */
}

def @func_1395(%var_1316: Tensor[(3, 6, 4), float32]) -> (Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) {
  %502 = cast(%var_1316, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
  %503 = sin(%502) /* ty=Tensor[(3, 6, 4), float32] */;
  %504 = cast(%var_1316, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%503, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %508 = floor_divide(%506, %507) /* ty=Tensor[(3, 6, 4), float32] */;
  %509 = cast(%var_1316, dtype="bool") /* ty=Tensor[(3, 6, 4), bool] */;
  %510 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%503, dtype="bool") /* ty=Tensor[(3, 6, 4), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %513 = not_equal(%511, %512) /* ty=Tensor[(3, 6, 4), bool] */;
  %514 = cast(%513, dtype="int64") /* ty=Tensor[(3, 6, 4), int64] */;
  %515 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%508, dtype="int64") /* ty=Tensor[(3, 6, 4), int64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %518 = multiply(%516, %517) /* ty=Tensor[(3, 6, 4), int64] */;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
  %520 = log2(%519) /* ty=Tensor[(3, 6, 4), float32] */;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
  %522 = sqrt(%521) /* ty=Tensor[(3, 6, 4), float32] */;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
  %524 = cast(%522, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
  %525 = sinh(%523) /* ty=Tensor[(3, 6, 4), float64] */;
  %526 = atanh(%524) /* ty=Tensor[(3, 6, 4), float64] */;
  (%525, %526)
}

def @func_5995() -> (Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72, 1), float32]) {
  %527 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %528 = cast(meta[relay.Constant][32] /* ty=Tensor[(72, 1), float32] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
  %529 = reshape(%528, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float32] */;
  %530 = @func_1395(%529) /* ty=(Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) */;
  %531 = %527.0;
  %532 = %530.0;
  (%531, %532, meta[relay.Constant][32] /* ty=Tensor[(72, 1), float32] */)
}

def @func_1621(%var_1616: Tensor[(180), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(10, 2, 9), float64], Tensor[(180), float64]) {
  %533 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
  %534 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
  %535 = cast(%var_1616, dtype="float64") /* ty=Tensor[(180), float64] */;
  %536 = cast(%var_1616, dtype="float64") /* ty=Tensor[(180), float64] */;
  %537 = cast(%var_1616, dtype="float64") /* ty=Tensor[(180), float64] */;
  %538 = reshape(%535, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %539 = reshape(%536, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %540 = reshape(%537, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %541 = @func_802(%538, %539, %540) /* ty=(Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) */;
  %542 = %533.1;
  %543 = %534.0;
  %544 = %541.0;
  (%542, %543, %544, %var_1616)
}

def @func_1127() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) {
  %545 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %546 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 72), float64] */, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %547 = reshape(%546, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float64] */;
  %548 = @func_1073(%547) /* ty=(Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) */;
  %549 = %545.0;
  %550 = %548.1;
  (%549, %550, meta[relay.Constant][33] /* ty=Tensor[(1, 72), float64] */)
}

def @func_7093() -> Tensor[(7, 1, 11), bool] {
  %551 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %552 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 1, 11), bool] */, dtype="bool") /* ty=Tensor[(7, 1, 11), bool] */;
  logical_and(%551, %552) /* ty=Tensor[(7, 1, 11), bool] */
}

def @func_1922() -> (Tensor[(13, 3), float64],) {
  %553 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %554 = %553.0;
  (%554,)
}

def @func_3403(%var_3361: Tensor[(196), uint8], %var_3375: Tensor[(1274), float64]) -> (Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) {
  %555 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
  %556 = cast(meta[relay.Constant][35] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %557 = cast(%var_3361, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %558 = reshape(%556, newshape=[]) /* ty=uint8 */;
  %559 = reshape(%557, newshape=[7, 2, 14]) /* ty=Tensor[(7, 2, 14), uint8] */;
  %560 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %561 = cast(%var_3375, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %562 = reshape(%561, newshape=[13, 7, 14]) /* ty=Tensor[(13, 7, 14), float64] */;
  %563 = @func_2494(%562) /* ty=(Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) */;
  %564 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
  %565 = cast(meta[relay.Constant][36] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %566 = reshape(%565, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %567 = @func_1621(%566) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(10, 2, 9), float64], Tensor[(180), float64]) */;
  %568 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
  %569 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %570 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %571 = %555.0;
  %572 = @func_784(%558, %559) /* ty=Tensor[(7, 2, 14), bool] */;
  %573 = @func_3189() /* ty=Tensor[(13, 3), float64] */;
  %574 = %560.0;
  %575 = %563.1;
  %576 = %564.0;
  %577 = %567.3;
  %578 = %568.0;
  %579 = %569.6;
  %580 = %570.0;
  (%571, %572, meta[relay.Constant][35] /* ty=uint8 */, %var_3361, %573, %574, %575, %var_3375, %576, %577, meta[relay.Constant][36] /* ty=Tensor[(180, 1), float64] */, %578, %579, %580)
}

def @func_1829(%var_1817: Tensor[(16, 7, 1), uint32], %var_1818: Tensor[(16, 7, 3), uint32]) -> (Tensor[(16, 7, 3), uint32],) {
  %581 = cast(%var_1817, dtype="uint32") /* ty=Tensor[(16, 7, 1), uint32] */;
  %582 = cast(%var_1818, dtype="uint32") /* ty=Tensor[(16, 7, 3), uint32] */;
  %583 = right_shift(%581, %582) /* ty=Tensor[(16, 7, 3), uint32] */;
  (%583,)
}

def @func_4746() -> (Tensor[(5, 15, 6), float64], Tensor[(6, 1, 12), float64], Tensor[(72), float64]) {
  %584 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %585 = cast(meta[relay.Constant][37] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %586 = reshape(%585, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float64] */;
  %587 = @func_1073(%586) /* ty=(Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) */;
  %588 = %584.1;
  %589 = %587.0;
  (%588, %589, meta[relay.Constant][37] /* ty=Tensor[(72), float64] */)
}

def @func_2319() -> (Tensor[(13, 3), float64],) {
  %590 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
  %591 = %590.0;
  (%591,)
}

def @func_2165() -> (Tensor[(13, 3), float64],) {
  %592 = @func_1127() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) */;
  %593 = %592.0;
  (%593,)
}

def @func_4639(%var_4628: Tensor[(5, 15, 3), uint8], %var_4629: Tensor[(5, 15, 3), uint8]) -> (Tensor[(5, 15, 3), uint8], Tensor[(13, 3), float64]) {
  %594 = cast(%var_4629, dtype="uint8") /* ty=Tensor[(5, 15, 3), uint8] */;
  %595 = shape_of(%var_4628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%var_4628, dtype="uint8") /* ty=Tensor[(5, 15, 3), uint8] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %598 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %599 = left_shift(%596, %597) /* ty=Tensor[(5, 15, 3), uint8] */;
  %600 = %598.0;
  (%599, %600)
}

def @func_3495() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %601 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
  %602 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
  %603 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %604 = @func_2165() /* ty=(Tensor[(13, 3), float64],) */;
  %605 = %601.0;
  %606 = %602.0;
  %607 = %603.0;
  %608 = %604.0;
  (%605, %606, %607, %608)
}

def @func_4735() -> (Tensor[(13, 3), float64], Tensor[(196), uint8], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(36, 2), float32], Tensor[(1, 450), float64]) {
  %609 = cast(meta[relay.Constant][38] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %610 = cast(meta[relay.Constant][39] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %611 = reshape(%609, newshape=[]) /* ty=uint8 */;
  %612 = reshape(%610, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %613 = @func_1596(%611, %612) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) */;
  %614 = @func_3925() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %615 = cast(meta[relay.Constant][40] /* ty=Tensor[(36, 2), float32] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %616 = reshape(%615, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %617 = @func_1866(%616) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) */;
  %618 = cast(meta[relay.Constant][38] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %619 = %613.5;
  %620 = cast(%619, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %621 = reshape(%618, newshape=[]) /* ty=uint8 */;
  %622 = reshape(%620, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %623 = @func_1596(%621, %622) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) */;
  %624 = @func_1749() /* ty=Tensor[(13, 3), float64] */;
  %625 = %614.2;
  %626 = %617.2;
  %627 = %623.3;
  (%624, %619, meta[relay.Constant][38] /* ty=uint8 */, meta[relay.Constant][39] /* ty=Tensor[(196), uint8] */, %625, %626, meta[relay.Constant][40] /* ty=Tensor[(36, 2), float32] */, %627)
}

def @func_2080() -> (Tensor[(13, 3), float64], Tensor[(180), uint64]) {
  %628 = cast(meta[relay.Constant][41] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %629 = cast(meta[relay.Constant][41] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %630 = cast(meta[relay.Constant][41] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %631 = reshape(%628, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %632 = reshape(%629, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %633 = reshape(%630, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %634 = @func_802(%631, %632, %633) /* ty=(Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) */;
  %635 = %634.0;
  %636 = cast(%635, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
  %637 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(180), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %638 = cast(meta[relay.Constant][41] /* ty=Tensor[(180), float64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %640 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %641 = logical_xor(%638, %639) /* ty=Tensor[(180), uint64] */;
  (%640, %641)
}

def @func_6409() -> (Tensor[(13, 3), float64],) {
  %642 = @func_4591() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %643 = %642.1;
  (%643,)
}

def @func_555(%var_512: Tensor[(6, 3, 3), float64], %var_520: Tensor[(50, 9), float64]) -> (Tensor[(5, 15, 6), float64], Tensor[(50, 9), float64], Tensor[(6, 3, 3), float32], Tensor[(5, 15, 6), float64]) {
  %644 = cast(%var_520, dtype="float64") /* ty=Tensor[(50, 9), float64] */;
  %645 = reshape(%644, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
  %646 = @func_9(%645) /* ty=(Tensor[(5, 15, 6), float64],) */;
  %647 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  %648 = shape_of(%var_512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_512, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %651 = divide(%649, %650) /* ty=Tensor[(6, 3, 3), float64] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
  %653 = %646.0;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
  %655 = reshape(%654, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
  %656 = @func_9(%655) /* ty=(Tensor[(5, 15, 6), float64],) */;
  %657 = cosh(%652) /* ty=Tensor[(6, 3, 3), float32] */;
  %658 = %656.0;
  (%653, %var_520, %657, %658)
}

def @func_6559() -> Tensor[(2560), float64] {
  %659 = @func_5932() /* ty=(Tensor[(2560), float64],) */;
  %659.0
}

def @func_6242() -> (Tensor[(13, 3), float64], Tensor[(2560), bool]) {
  %660 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
  %661 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
  %662 = %660.3;
  (%661, %662)
}

def @func_4877(%var_4850: Tensor[(5, 2, 16), float32]) -> (Tensor[(5, 15, 6), float32], Tensor[(5, 2, 16), bool]) {
  %663 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
  %664 = cast(%var_4850, dtype="float32") /* ty=Tensor[(5, 2, 16), float32] */;
  %665 = exp(%664) /* ty=Tensor[(5, 2, 16), float32] */;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(5, 2, 16), float32] */;
  %667 = atan(%666) /* ty=Tensor[(5, 2, 16), float32] */;
  %668 = cast(%667, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
  %669 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%665, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = %663.1;
  %673 = not_equal(%670, %671) /* ty=Tensor[(5, 2, 16), bool] */;
  (%672, %673)
}

def @func_4053(%var_4028: float64, %var_4029: Tensor[(1, 4, 7), float64], %var_4036: Tensor[(180), float64], %var_4037: Tensor[(450), float64]) -> (Tensor[(1, 4, 7), float64], Tensor[(5, 15, 6), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float32]) {
  %674 = cast(%var_4028, dtype="float64") /* ty=float64 */;
  %675 = cast(%var_4029, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
  %676 = cast(%var_4036, dtype="float64") /* ty=Tensor[(180), float64] */;
  %677 = cast(%var_4037, dtype="float64") /* ty=Tensor[(450), float64] */;
  %678 = reshape(%676, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %679 = reshape(%677, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %680 = @func_3079(%678, %679) /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) */;
  %681 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
  %682 = reshape(%681, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float32] */;
  %683 = @func_1395(%682) /* ty=(Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) */;
  %684 = power(%674, %675) /* ty=Tensor[(1, 4, 7), float64] */;
  %685 = %680.2;
  %686 = %683.0;
  (%684, %685, %var_4036, %var_4037, %686, meta[relay.Constant][43] /* ty=Tensor[(6, 12), float32] */)
}

def @func_2658() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %687 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %688 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %689 = %687.0;
  (%688, %689)
}

def @func_2969() -> (Tensor[(13, 3), float64], Tensor[(450), float32]) {
  %690 = @func_2337() /* ty=Tensor[(450), float32] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(450), float32] */;
  %692 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %693 = log10(%691) /* ty=Tensor[(450), float32] */;
  (%692, %693)
}

def @func_5197(%var_5116: Tensor[(16, 11, 8), float32]) -> (Tensor[(16, 11, 8), float32], Tensor[(13, 3), float64], Tensor[(16, 11, 8), float32]) {
  %694 = cast(%var_5116, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %695 = sqrt(%694) /* ty=Tensor[(16, 11, 8), float32] */;
  %696 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %697 = shape_of(%var_5116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_5116, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %700 = mod(%698, %699) /* ty=Tensor[(16, 11, 8), float32] */;
  %701 = cast(%700, dtype="uint64") /* ty=Tensor[(16, 11, 8), uint64] */;
  %702 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%695, dtype="uint64") /* ty=Tensor[(16, 11, 8), uint64] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %705 = maximum(%703, %704) /* ty=Tensor[(16, 11, 8), uint64] */;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %707 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
  %708 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %709 = atan(%708) /* ty=Tensor[(16, 11, 8), float32] */;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %711 = tan(%706) /* ty=Tensor[(16, 11, 8), float32] */;
  %712 = %707.0;
  %713 = acos(%710) /* ty=Tensor[(16, 11, 8), float32] */;
  (%711, %712, %713)
}

def @func_6093() -> (Tensor[(3, 6, 4), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(13, 3), float64]) {
  %714 = @func_5995() /* ty=(Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72, 1), float32]) */;
  %715 = cast(meta[relay.Constant][45] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %716 = reshape(%715, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %717 = @func_4811(%716) /* ty=(Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) */;
  %718 = @func_2722() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %719 = %714.1;
  %720 = %717.2;
  %721 = %718.0;
  (%719, %720, meta[relay.Constant][45] /* ty=Tensor[(196), uint8] */, %721)
}

def @func_3596() -> (Tensor[(13, 3), float64],) {
  %722 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %723 = %722.1;
  (%723,)
}

def @func_4435(%var_4419: Tensor[(112), uint32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(336), bool], Tensor[(112), uint32], Tensor[(336), uint32], Tensor[(13, 7, 14), float64], Tensor[(1274), float64]) {
  %724 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
  %725 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
  %726 = cast(%var_4419, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %727 = cast(meta[relay.Constant][46] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %728 = reshape(%726, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %729 = reshape(%727, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %730 = @func_1972(%728, %729) /* ty=(Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) */;
  %731 = cast(meta[relay.Constant][47] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %732 = reshape(%731, newshape=[13, 7, 14]) /* ty=Tensor[(13, 7, 14), float64] */;
  %733 = @func_2494(%732) /* ty=(Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) */;
  %734 = %724.0;
  %735 = %725.0;
  %736 = %730.5;
  %737 = %733.0;
  (%734, %735, %736, %var_4419, meta[relay.Constant][46] /* ty=Tensor[(336), uint32] */, %737, meta[relay.Constant][47] /* ty=Tensor[(1274), float64] */)
}

def @func_9(%var_0: Tensor[(5, 15, 6), float64]) -> (Tensor[(5, 15, 6), float64],) {
  %738 = cast(%var_0, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
  %739 = exp(%738) /* ty=Tensor[(5, 15, 6), float64] */;
  (%739,)
}

def @func_1452(%var_1429: uint8, %var_1430: Tensor[(196), uint8]) -> (Tensor[(11, 9, 6), float32], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(5, 15, 6), float64], Tensor[(1, 450), float64]) {
  %740 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
  %741 = %740.0;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
  %743 = cast(%var_1429, dtype="uint8") /* ty=uint8 */;
  %744 = cast(%var_1430, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %745 = reshape(%743, newshape=[]) /* ty=uint8 */;
  %746 = reshape(%744, newshape=[7, 2, 14]) /* ty=Tensor[(7, 2, 14), uint8] */;
  %747 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 450), float64] */, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
  %748 = reshape(%747, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
  %749 = @func_9(%748) /* ty=(Tensor[(5, 15, 6), float64],) */;
  %750 = exp(%742) /* ty=Tensor[(11, 9, 6), float32] */;
  %751 = @func_784(%745, %746) /* ty=Tensor[(7, 2, 14), bool] */;
  %752 = %749.0;
  (%750, %751, %var_1429, %var_1430, %752, meta[relay.Constant][48] /* ty=Tensor[(1, 450), float64] */)
}

def @func_5715() -> (Tensor[(13, 3), float64], Tensor[(2560), float32]) {
  %753 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %754 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %755 = %754.6;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %757 = log(%756) /* ty=Tensor[(2560), float32] */;
  %758 = cast(%757, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %759 = sigmoid(%758) /* ty=Tensor[(2560), float32] */;
  %760 = cast(%759, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %761 = %753.2;
  %762 = atanh(%760) /* ty=Tensor[(2560), float32] */;
  (%761, %762)
}

def @func_3925() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %763 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %764 = %763.0;
  %765 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %766 = @func_3608() /* ty=Tensor[(13, 3), float64] */;
  (%764, %765, %766)
}

def @func_6691() -> Tensor[(13, 3), float64] {
  %767 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
  %767.0
}

def @func_5743() -> Tensor[(13, 3), float64] {
  @func_5206() /* ty=Tensor[(13, 3), float64] */
}

def @func_3530(%var_3525: Tensor[(13, 13, 4), float64], %var_3526: Tensor[(13, 13, 4), float64]) -> Tensor[(13, 13, 4), bool] {
  %768 = cast(%var_3526, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %769 = shape_of(%var_3525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%var_3525, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%770, %771) /* ty=Tensor[(13, 13, 4), bool] */
}

def @func_3781(%var_3645: Tensor[(180), float64], %var_3678: Tensor[(11, 9, 6), uint16], %var_3701: Tensor[(360), float64], %var_3730: Tensor[(676), float64]) -> (Tensor[(13, 3), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(180), float64], Tensor[(11, 9, 6), int8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(11, 9, 6), float32], Tensor[(72), float64], Tensor[(13, 13, 4), bool], Tensor[(676), float64]) {
  %772 = @func_2410() /* ty=(Tensor[(13, 3), float64],) */;
  %773 = cast(%var_3645, dtype="float64") /* ty=Tensor[(180), float64] */;
  %774 = cast(meta[relay.Constant][49] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %775 = reshape(%773, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %776 = reshape(%774, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %777 = @func_3079(%775, %776) /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) */;
  %778 = cast(%var_3645, dtype="float64") /* ty=Tensor[(180), float64] */;
  %779 = cast(meta[relay.Constant][49] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %780 = reshape(%778, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %781 = reshape(%779, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %782 = @func_3079(%780, %781) /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) */;
  %783 = %782.0;
  %784 = cast(%var_3678, dtype="int8") /* ty=Tensor[(11, 9, 6), int8] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="int8") /* ty=Tensor[(11, 9, 6), int8] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %788 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
  %789 = cast(%var_3701, dtype="float64") /* ty=Tensor[(360), float64] */;
  %790 = reshape(%789, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %791 = @func_3280(%790) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) */;
  %792 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 9, 6), uint16] */, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
  %793 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%783, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %796 = cast(%var_3701, dtype="float64") /* ty=Tensor[(360), float64] */;
  %797 = reshape(%796, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %798 = @func_3280(%797) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) */;
  %799 = cast(%var_3730, dtype="float64") /* ty=Tensor[(676), float64] */;
  %800 = cast(%var_3730, dtype="float64") /* ty=Tensor[(676), float64] */;
  %801 = reshape(%799, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float64] */;
  %802 = reshape(%800, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float64] */;
  %803 = %772.0;
  %804 = %777.1;
  %805 = add(%786, %787) /* ty=Tensor[(11, 9, 6), int8] */;
  %806 = %788.0;
  %807 = %791.1;
  %808 = floor_divide(%794, %795) /* ty=Tensor[(11, 9, 6), float32] */;
  %809 = %798.3;
  %810 = @func_3530(%801, %802) /* ty=Tensor[(13, 13, 4), bool] */;
  (%803, %var_3645, meta[relay.Constant][49] /* ty=Tensor[(450), float64] */, %804, %805, %806, %807, %var_3701, %808, %809, %810, %var_3730)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2410() -> (Tensor[(13, 3), float64],) {
  %0 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_2794() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) {
  %2 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %5 = reshape(%3, newshape=[6, 3, 3]) /* ty=Tensor[(6, 3, 3), float64] */;
  %6 = reshape(%4, newshape=[50, 9]) /* ty=Tensor[(50, 9), float64] */;
  %7 = @func_555(%5, %6) /* ty=(Tensor[(5, 15, 6), float64], Tensor[(50, 9), float64], Tensor[(6, 3, 3), float32], Tensor[(5, 15, 6), float64]) */;
  %8 = cast(meta[relay.Constant][2] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %10 = reshape(%8, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %11 = reshape(%9, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %12 = @func_2374(%10, %11) /* ty=(Tensor[(16, 10, 16), int16],) */;
  %13 = %12.0;
  %14 = cast(%13, dtype="int16") /* ty=Tensor[(16, 10, 16), int16] */;
  %15 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2560), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?), int16] */;
  %18 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %19 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %20 = %2.0;
  %21 = %7.0;
  %22 = right_shift(%16, %17) /* ty=Tensor[(2560), int16] */;
  (%18, %19, %20, %21, meta[relay.Constant][0] /* ty=Tensor[(54), float64] */, meta[relay.Constant][1] /* ty=Tensor[(450), float64] */, %22)
}

def @func_2165() -> (Tensor[(13, 3), float64],) {
  %23 = @func_1127() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) */;
  %24 = %23.0;
  (%24,)
}

def @func_1173() -> Tensor[(13, 3), float64] {
  %25 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %25.0
}

def @func_3598() -> (Tensor[(13, 3), float64],) {
  @func_3596() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_5715() -> (Tensor[(13, 3), float64], Tensor[(2560), float32]) {
  %26 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %27 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %28 = %27.6;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %30 = log(%29) /* ty=Tensor[(2560), float32] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %32 = sigmoid(%31) /* ty=Tensor[(2560), float32] */;
  %33 = cast(%32, dtype="float32") /* ty=Tensor[(2560), float32] */;
  %34 = %26.2;
  %35 = atanh(%33) /* ty=Tensor[(2560), float32] */;
  (%34, %35)
}

def @func_5037(%var_5031: Tensor[(4, 15, 10), float64]) -> (Tensor[(4, 15, 10), float64],) {
  %36 = cast(%var_5031, dtype="float64") /* ty=Tensor[(4, 15, 10), float64] */;
  %37 = cosh(%36) /* ty=Tensor[(4, 15, 10), float64] */;
  (%37,)
}

def @func_5438(%var_5436: Tensor[(12, 11, 4), float32]) -> (Tensor[(12, 11, 4), bool],) {
  @func_5435(%var_5436) /* ty=(Tensor[(12, 11, 4), bool],) */
}

def @func_6411() -> (Tensor[(13, 3), float64],) {
  @func_6409() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_4593() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  @func_4591() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */
}

def @func_4914() -> (Tensor[(450), float32],) {
  %39 = fn () -> (Tensor[(450), float32],) {
    %38 = @func_2337() /* ty=Tensor[(450), float32] */;
    (%38,)
  };
  %39() /* ty=(Tensor[(450), float32],) */
}

def @func_788(%var_786: uint8, %var_787: Tensor[(7, 2, 14), uint8]) -> Tensor[(7, 2, 14), bool] {
  @func_784(%var_786, %var_787) /* ty=Tensor[(7, 2, 14), bool] */
}

def @func_7289() -> Tensor[(2560), bool] {
  %40 = @func_3043() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) */;
  %40.2
}

def @func_1750() -> Tensor[(13, 3), float64] {
  %42 = fn () -> Tensor[(13, 3), float64] {
    %41 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
    %41.0
  };
  %42() /* ty=Tensor[(13, 3), float64] */
}

def @func_2496(%var_2495: Tensor[(13, 7, 14), float64]) -> (Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) {
  %47 = fn (%var_2485: Tensor[(13, 7, 14), float64]) -> (Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) {
    %43 = cast(%var_2485, dtype="float64") /* ty=Tensor[(13, 7, 14), float64] */;
    %44 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
    %45 = atanh(%43) /* ty=Tensor[(13, 7, 14), float64] */;
    %46 = %44.0;
    (%45, %46)
  };
  %47(%var_2495) /* ty=(Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) */
}

def @func_1833(%var_1831: Tensor[(16, 7, 1), uint32], %var_1832: Tensor[(16, 7, 3), uint32]) -> (Tensor[(16, 7, 3), uint32],) {
  @func_1829(%var_1831, %var_1832) /* ty=(Tensor[(16, 7, 3), uint32],) */
}

def @func_5952() -> (Tensor[(13, 3), float64],) {
  @func_5950() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_2828() -> (Tensor[(5, 15, 6), float64], Tensor[(2, 13, 5), bool], Tensor[(26), float32], Tensor[(130), float32], Tensor[(450), float64]) {
  @func_2826() /* ty=(Tensor[(5, 15, 6), float64], Tensor[(2, 13, 5), bool], Tensor[(26), float32], Tensor[(130), float32], Tensor[(450), float64]) */
}

def @func_1697() -> (Tensor[(13, 3), float64],) {
  %48 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  (%48,)
}

def @func_2658() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %49 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %50 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %51 = %49.0;
  (%50, %51)
}

def @func_5199(%var_5198: Tensor[(16, 11, 8), float32]) -> (Tensor[(16, 11, 8), float32], Tensor[(13, 3), float64], Tensor[(16, 11, 8), float32]) {
  %72 = fn (%var_5116: Tensor[(16, 11, 8), float32]) -> (Tensor[(16, 11, 8), float32], Tensor[(13, 3), float64], Tensor[(16, 11, 8), float32]) {
    %52 = cast(%var_5116, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
    %53 = sqrt(%52) /* ty=Tensor[(16, 11, 8), float32] */;
    %54 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
    %55 = shape_of(%var_5116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%var_5116, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %58 = mod(%56, %57) /* ty=Tensor[(16, 11, 8), float32] */;
    %59 = cast(%58, dtype="uint64") /* ty=Tensor[(16, 11, 8), uint64] */;
    %60 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%53, dtype="uint64") /* ty=Tensor[(16, 11, 8), uint64] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %63 = maximum(%61, %62) /* ty=Tensor[(16, 11, 8), uint64] */;
    %64 = cast(%63, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
    %65 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
    %66 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
    %67 = atan(%66) /* ty=Tensor[(16, 11, 8), float32] */;
    %68 = cast(%67, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
    %69 = tan(%64) /* ty=Tensor[(16, 11, 8), float32] */;
    %70 = %65.0;
    %71 = acos(%68) /* ty=Tensor[(16, 11, 8), float32] */;
    (%69, %70, %71)
  };
  %72(%var_5198) /* ty=(Tensor[(16, 11, 8), float32], Tensor[(13, 3), float64], Tensor[(16, 11, 8), float32]) */
}

def @func_9(%var_0: Tensor[(5, 15, 6), float64]) -> (Tensor[(5, 15, 6), float64],) {
  %73 = cast(%var_0, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
  %74 = exp(%73) /* ty=Tensor[(5, 15, 6), float64] */;
  (%74,)
}

def @func_1455(%var_1453: uint8, %var_1454: Tensor[(196), uint8]) -> (Tensor[(11, 9, 6), float32], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(5, 15, 6), float64], Tensor[(1, 450), float64]) {
  %88 = fn (%var_1429: uint8, %var_1430: Tensor[(196), uint8]) -> (Tensor[(11, 9, 6), float32], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(5, 15, 6), float64], Tensor[(1, 450), float64]) {
    %75 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
    %76 = %75.0;
    %77 = cast(%76, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
    %78 = cast(%var_1429, dtype="uint8") /* ty=uint8 */;
    %79 = cast(%var_1430, dtype="uint8") /* ty=Tensor[(196), uint8] */;
    %80 = reshape(%78, newshape=[]) /* ty=uint8 */;
    %81 = reshape(%79, newshape=[7, 2, 14]) /* ty=Tensor[(7, 2, 14), uint8] */;
    %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 450), float64] */, dtype="float64") /* ty=Tensor[(1, 450), float64] */;
    %83 = reshape(%82, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
    %84 = @func_9(%83) /* ty=(Tensor[(5, 15, 6), float64],) */;
    %85 = exp(%77) /* ty=Tensor[(11, 9, 6), float32] */;
    %86 = @func_784(%80, %81) /* ty=Tensor[(7, 2, 14), bool] */;
    %87 = %84.0;
    (%85, %86, %var_1429, %var_1430, %87, meta[relay.Constant][4] /* ty=Tensor[(1, 450), float64] */)
  };
  %88(%var_1453, %var_1454) /* ty=(Tensor[(11, 9, 6), float32], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(5, 15, 6), float64], Tensor[(1, 450), float64]) */
}

def @func_873() -> (Tensor[(13, 3), float64],) {
  %91 = fn () -> (Tensor[(13, 3), float64],) {
    %89 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %90 = %89.0;
    (%90,)
  };
  %91() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_5040(%var_5038: Tensor[(4, 15, 10), float64]) -> (Tensor[(4, 15, 10), float64],) {
  @func_5037(%var_5038) /* ty=(Tensor[(4, 15, 10), float64],) */
}

def @func_5950() -> (Tensor[(13, 3), float64],) {
  %92 = @func_3596() /* ty=(Tensor[(13, 3), float64],) */;
  %93 = %92.0;
  (%93,)
}

def @func_2412() -> (Tensor[(13, 3), float64],) {
  @func_2410() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_5933() -> (Tensor[(2560), float64],) {
  %98 = fn () -> (Tensor[(2560), float64],) {
    %94 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
    %95 = %94.3;
    %96 = cast(%95, dtype="float64") /* ty=Tensor[(2560), float64] */;
    %97 = sqrt(%96) /* ty=Tensor[(2560), float64] */;
    (%97,)
  };
  %98() /* ty=(Tensor[(2560), float64],) */
}

def @func_4737() -> (Tensor[(13, 3), float64], Tensor[(196), uint8], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(36, 2), float32], Tensor[(1, 450), float64]) {
  @func_4735() /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(36, 2), float32], Tensor[(1, 450), float64]) */
}

def @func_6916() -> Tensor[(2560), int16] {
  %100 = fn () -> Tensor[(2560), int16] {
    %99 = @func_6093() /* ty=(Tensor[(3, 6, 4), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(13, 3), float64]) */;
    %99.1
  };
  %100() /* ty=Tensor[(2560), int16] */
}

def @func_5907() -> (Tensor[(2, 1, 9), float64], Tensor[(2, ?, 9), bool]) {
  @func_5905() /* ty=(Tensor[(2, 1, 9), float64], Tensor[(2, ?, 9), bool]) */
}

def @func_4811(%var_4807: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) {
  %101 = @func_3014() /* ty=(Tensor[(13, 3), float64],) */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(2560), int16] */, dtype="int16") /* ty=Tensor[(2560), int16] */;
  %104 = reshape(%102, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %105 = reshape(%103, newshape=[16, 10, 16]) /* ty=Tensor[(16, 10, 16), int16] */;
  %106 = @func_2374(%104, %105) /* ty=(Tensor[(16, 10, 16), int16],) */;
  %107 = cast(meta[relay.Constant][6] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %108 = reshape(%107, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %109 = @func_4213(%108) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) */;
  %110 = cast(%var_4807, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %111 = reshape(%110, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %112 = @func_4267(%111) /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) */;
  %113 = %101.0;
  %114 = %106.0;
  %115 = %109.1;
  %116 = %112.2;
  (%113, %114, meta[relay.Constant][5] /* ty=Tensor[(2560), int16] */, %115, meta[relay.Constant][6] /* ty=Tensor[(72), float32] */, %116, %var_4807)
}

def @func_6641(%var_6638: Tensor[(13, 13, 16), int64], %var_6639: float64, %var_6640: Tensor[(180, 1), float64]) -> (Tensor[(13, 13, 16), bool], Tensor[(3, 6, 4), float64], float64, Tensor[(28), float64], Tensor[(180, 1), float64], Tensor[(5, 90), float64]) {
  @func_6636(%var_6638, %var_6639, %var_6640) /* ty=(Tensor[(13, 13, 16), bool], Tensor[(3, 6, 4), float64], float64, Tensor[(28), float64], Tensor[(180, 1), float64], Tensor[(5, 90), float64]) */
}

def @func_6077() -> Tensor[(13, 3), float64] {
  @func_6075() /* ty=Tensor[(13, 3), float64] */
}

def @func_2374(%var_2350: Tensor[(16, 10, 16), int16], %var_2351: Tensor[(16, 10, 16), int16]) -> (Tensor[(16, 10, 16), int16],) {
  %117 = cast(%var_2351, dtype="int16") /* ty=Tensor[(16, 10, 16), int16] */;
  %118 = shape_of(%var_2350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_2350, dtype="int16") /* ty=Tensor[(16, 10, 16), int16] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %121 = bitwise_and(%119, %120) /* ty=Tensor[(16, 10, 16), int16] */;
  (%121,)
}

def @func_3190() -> Tensor[(13, 3), float64] {
  %123 = fn () -> Tensor[(13, 3), float64] {
    %122 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
    %122.0
  };
  %123() /* ty=Tensor[(13, 3), float64] */
}

def @func_5245() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %128 = fn () -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
    %124 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
    %125 = @func_3495() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
    %126 = %124.1;
    %127 = %125.2;
    (%126, %127)
  };
  %128() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */
}

def @func_2660() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */
}

def @func_6314(%var_6312: Tensor[(550, 2), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(550, 2), int8], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(13, 3), float64]) {
  @func_6311(%var_6312) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(550, 2), int8], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(13, 3), float64]) */
}

def @func_6770(%var_6769: Tensor[(26), float32]) -> (Tensor[(2, 1, 9), float32], Tensor[(13, 3), float64], Tensor[(26), float32], Tensor[(13, 10), float32], Tensor[(13, 3), float64]) {
  %142 = fn (%var_6757: Tensor[(26), float32]) -> (Tensor[(2, 1, 9), float32], Tensor[(13, 3), float64], Tensor[(26), float32], Tensor[(13, 10), float32], Tensor[(13, 3), float64]) {
    %129 = @func_5905() /* ty=(Tensor[(2, 1, 9), float64], Tensor[(2, ?, 9), bool]) */;
    %130 = %129.0;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(2, 1, 9), float64] */;
    %132 = atan(%131) /* ty=Tensor[(2, 1, 9), float64] */;
    %133 = cast(%132, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
    %134 = cast(%var_6757, dtype="float32") /* ty=Tensor[(26), float32] */;
    %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 10), float32] */;
    %136 = reshape(%134, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
    %137 = reshape(%135, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
    %138 = @func_2119(%136, %137) /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) */;
    %139 = sqrt(%133) /* ty=Tensor[(2, 1, 9), float32] */;
    %140 = %138.2;
    %141 = @func_4704() /* ty=Tensor[(13, 3), float64] */;
    (%139, %140, %var_6757, meta[relay.Constant][7] /* ty=Tensor[(13, 10), float32] */, %141)
  };
  %142(%var_6769) /* ty=(Tensor[(2, 1, 9), float32], Tensor[(13, 3), float64], Tensor[(26), float32], Tensor[(13, 10), float32], Tensor[(13, 3), float64]) */
}

def @func_908() -> (Tensor[(13, 3), float64],) {
  %145 = fn () -> (Tensor[(13, 3), float64],) {
    %143 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
    %144 = %143.0;
    (%144,)
  };
  %145() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_7095() -> Tensor[(7, 1, 11), bool] {
  @func_7093() /* ty=Tensor[(7, 1, 11), bool] */
}

def @func_2969() -> (Tensor[(13, 3), float64], Tensor[(450), float32]) {
  %146 = @func_2337() /* ty=Tensor[(450), float32] */;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(450), float32] */;
  %148 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %149 = log10(%147) /* ty=Tensor[(450), float32] */;
  (%148, %149)
}

def @func_7383() -> (Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(72), float64]) {
  %155 = fn () -> (Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(72), float64]) {
    %150 = @func_3452() /* ty=(Tensor[(13, 3), float64], Tensor[(450), float32]) */;
    %151 = @func_4746() /* ty=(Tensor[(5, 15, 6), float64], Tensor[(6, 1, 12), float64], Tensor[(72), float64]) */;
    %152 = %150.0;
    %153 = @func_6915() /* ty=Tensor[(2560), int16] */;
    %154 = %151.2;
    (%152, %153, %154)
  };
  %155() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(72), float64]) */
}

def @func_3786(%var_3782: Tensor[(180), float64], %var_3783: Tensor[(11, 9, 6), uint16], %var_3784: Tensor[(360), float64], %var_3785: Tensor[(676), float64]) -> (Tensor[(13, 3), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(180), float64], Tensor[(11, 9, 6), int8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(11, 9, 6), float32], Tensor[(72), float64], Tensor[(13, 13, 4), bool], Tensor[(676), float64]) {
  %195 = fn (%var_3645: Tensor[(180), float64], %var_3678: Tensor[(11, 9, 6), uint16], %var_3701: Tensor[(360), float64], %var_3730: Tensor[(676), float64]) -> (Tensor[(13, 3), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(180), float64], Tensor[(11, 9, 6), int8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(11, 9, 6), float32], Tensor[(72), float64], Tensor[(13, 13, 4), bool], Tensor[(676), float64]) {
    %156 = @func_2410() /* ty=(Tensor[(13, 3), float64],) */;
    %157 = cast(%var_3645, dtype="float64") /* ty=Tensor[(180), float64] */;
    %158 = cast(meta[relay.Constant][8] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %159 = reshape(%157, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %160 = reshape(%158, newshape=[450]) /* ty=Tensor[(450), float64] */;
    %161 = @func_3079(%159, %160) /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) */;
    %162 = cast(%var_3645, dtype="float64") /* ty=Tensor[(180), float64] */;
    %163 = cast(meta[relay.Constant][8] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %164 = reshape(%162, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %165 = reshape(%163, newshape=[450]) /* ty=Tensor[(450), float64] */;
    %166 = @func_3079(%164, %165) /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) */;
    %167 = %166.0;
    %168 = cast(%var_3678, dtype="int8") /* ty=Tensor[(11, 9, 6), int8] */;
    %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %170 = cast(%167, dtype="int8") /* ty=Tensor[(11, 9, 6), int8] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %172 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
    %173 = cast(%var_3701, dtype="float64") /* ty=Tensor[(360), float64] */;
    %174 = reshape(%173, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %175 = @func_3280(%174) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) */;
    %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 9, 6), uint16] */, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
    %177 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
    %178 = cast(%167, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
    %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %180 = cast(%var_3701, dtype="float64") /* ty=Tensor[(360), float64] */;
    %181 = reshape(%180, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %182 = @func_3280(%181) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) */;
    %183 = cast(%var_3730, dtype="float64") /* ty=Tensor[(676), float64] */;
    %184 = cast(%var_3730, dtype="float64") /* ty=Tensor[(676), float64] */;
    %185 = reshape(%183, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float64] */;
    %186 = reshape(%184, newshape=[13, 13, 4]) /* ty=Tensor[(13, 13, 4), float64] */;
    %187 = %156.0;
    %188 = %161.1;
    %189 = add(%170, %171) /* ty=Tensor[(11, 9, 6), int8] */;
    %190 = %172.0;
    %191 = %175.1;
    %192 = floor_divide(%178, %179) /* ty=Tensor[(11, 9, 6), float32] */;
    %193 = %182.3;
    %194 = @func_3530(%185, %186) /* ty=Tensor[(13, 13, 4), bool] */;
    (%187, %var_3645, meta[relay.Constant][8] /* ty=Tensor[(450), float64] */, %188, %189, %190, %191, %var_3701, %192, %193, %194, %var_3730)
  };
  %195(%var_3782, %var_3783, %var_3784, %var_3785) /* ty=(Tensor[(13, 3), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(180), float64], Tensor[(11, 9, 6), int8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(11, 9, 6), float32], Tensor[(72), float64], Tensor[(13, 13, 4), bool], Tensor[(676), float64]) */
}

def @func_7086(%var_7083: Tensor[(11, 5, 14), float32], %var_7084: Tensor[(11, 5, 14), float32], %var_7085: Tensor[(11, 5, 14), float32]) -> (Tensor[(13, 3), float64], Tensor[(11, 5, 14), int16], Tensor[(11, 5, 14), float64]) {
  %210 = fn (%var_6991: Tensor[(11, 5, 14), float32], %var_6992: Tensor[(11, 5, 14), float32], %var_7033: Tensor[(11, 5, 14), float32]) -> (Tensor[(13, 3), float64], Tensor[(11, 5, 14), int16], Tensor[(11, 5, 14), float64]) {
    %196 = @func_2165() /* ty=(Tensor[(13, 3), float64],) */;
    %197 = cast(%var_6992, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
    %198 = shape_of(%var_6991, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%var_6991, dtype="float32") /* ty=Tensor[(11, 5, 14), float32] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %201 = power(%199, %200) /* ty=Tensor[(11, 5, 14), float32] */;
    %202 = cast(%var_7033, dtype="int16") /* ty=Tensor[(11, 5, 14), int16] */;
    %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%201, dtype="int16") /* ty=Tensor[(11, 5, 14), int16] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %206 = cast(%201, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
    %207 = %196.0;
    %208 = right_shift(%204, %205) /* ty=Tensor[(11, 5, 14), int16] */;
    %209 = exp(%206) /* ty=Tensor[(11, 5, 14), float64] */;
    (%207, %208, %209)
  };
  %210(%var_7083, %var_7084, %var_7085) /* ty=(Tensor[(13, 3), float64], Tensor[(11, 5, 14), int16], Tensor[(11, 5, 14), float64]) */
}

def @func_3044() -> (Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) {
  %227 = fn () -> (Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) {
    %211 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
    %212 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
    %213 = %212.6;
    %214 = cast(%213, dtype="float64") /* ty=Tensor[(2560), float64] */;
    %215 = acos(%214) /* ty=Tensor[(2560), float64] */;
    %216 = cast(meta[relay.Constant][10] /* ty=Tensor[(2560), float64] */, dtype="int64") /* ty=Tensor[(2560), int64] */;
    %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(1), int32] */;
    %218 = cast(%215, dtype="int64") /* ty=Tensor[(2560), int64] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?), int64] */;
    %220 = cast(%213, dtype="bool") /* ty=Tensor[(2560), bool] */;
    %221 = shape_of(%215, dtype="int32") /* ty=Tensor[(1), int32] */;
    %222 = cast(%215, dtype="bool") /* ty=Tensor[(2560), bool] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?), bool] */;
    %224 = %211.0;
    %225 = minimum(%218, %219) /* ty=Tensor[(2560), int64] */;
    %226 = logical_and(%222, %223) /* ty=Tensor[(2560), bool] */;
    (%224, %225, %226)
  };
  %227() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) */
}

def @func_6449() -> (Tensor[(13, 3), float64], Tensor[(450), float64], Tensor[(13, 3), float64]) {
  %228 = @func_2337() /* ty=Tensor[(450), float32] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(450), float32] */;
  %230 = asinh(%229) /* ty=Tensor[(450), float32] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(450), float64] */;
  %232 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %233 = log2(%231) /* ty=Tensor[(450), float64] */;
  %234 = @func_3189() /* ty=Tensor[(13, 3), float64] */;
  (%232, %233, %234)
}

def @func_3583(%var_3581: Tensor[(14, 13, 1), int64], %var_3582: Tensor[(14, 13, 9), int64]) -> (Tensor[(14, 13, 9), int64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(13, 3), float64], Tensor[(14, 13, ?), float64]) {
  %250 = fn (%var_3556: Tensor[(14, 13, 1), int64], %var_3557: Tensor[(14, 13, 9), int64]) -> (Tensor[(14, 13, 9), int64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(13, 3), float64], Tensor[(14, 13, ?), float64]) {
    %235 = cast(%var_3556, dtype="int64") /* ty=Tensor[(14, 13, 1), int64] */;
    %236 = cast(%var_3557, dtype="int64") /* ty=Tensor[(14, 13, 9), int64] */;
    %237 = cast(meta[relay.Constant][11] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %238 = reshape(%237, newshape=[360]) /* ty=Tensor[(360), float64] */;
    %239 = @func_3280(%238) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) */;
    %240 = cast(%var_3556, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
    %241 = cos(%240) /* ty=Tensor[(14, 13, 1), float64] */;
    %242 = cast(%var_3556, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
    %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %244 = cast(%241, dtype="float64") /* ty=Tensor[(14, 13, 1), float64] */;
    %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %246 = logical_xor(%235, %236) /* ty=Tensor[(14, 13, 9), int64] */;
    %247 = %239.0;
    %248 = @func_3189() /* ty=Tensor[(13, 3), float64] */;
    %249 = multiply(%244, %245) /* ty=Tensor[(14, 13, ?), float64] */;
    (%246, %247, meta[relay.Constant][11] /* ty=Tensor[(360), float64] */, %248, %249)
  };
  %250(%var_3581, %var_3582) /* ty=(Tensor[(14, 13, 9), int64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(13, 3), float64], Tensor[(14, 13, ?), float64]) */
}

def @func_3927() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  @func_3925() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */
}

def @func_4642(%var_4640: Tensor[(5, 15, 3), uint8], %var_4641: Tensor[(5, 15, 3), uint8]) -> (Tensor[(5, 15, 3), uint8], Tensor[(13, 3), float64]) {
  %258 = fn (%var_4628: Tensor[(5, 15, 3), uint8], %var_4629: Tensor[(5, 15, 3), uint8]) -> (Tensor[(5, 15, 3), uint8], Tensor[(13, 3), float64]) {
    %251 = cast(%var_4629, dtype="uint8") /* ty=Tensor[(5, 15, 3), uint8] */;
    %252 = shape_of(%var_4628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%var_4628, dtype="uint8") /* ty=Tensor[(5, 15, 3), uint8] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %255 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
    %256 = left_shift(%253, %254) /* ty=Tensor[(5, 15, 3), uint8] */;
    %257 = %255.0;
    (%256, %257)
  };
  %258(%var_4640, %var_4641) /* ty=(Tensor[(5, 15, 3), uint8], Tensor[(13, 3), float64]) */
}

def @func_754() -> Tensor[(13, 3), float64] {
  %260 = fn () -> Tensor[(13, 3), float64] {
    %259 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %259.0
  };
  %260() /* ty=Tensor[(13, 3), float64] */
}

def @func_2736() -> (Tensor[(13, 3), float64],) {
  %263 = fn () -> (Tensor[(13, 3), float64],) {
    %261 = @func_2410() /* ty=(Tensor[(13, 3), float64],) */;
    %262 = %261.0;
    (%262,)
  };
  %263() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_4516() -> (Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) {
  %276 = fn () -> (Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) {
    %264 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
    %265 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
    %266 = %265.1;
    %267 = cast(%266, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
    %268 = asinh(%267) /* ty=Tensor[(5, 15, 6), float32] */;
    %269 = cast(%268, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
    %270 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
    %271 = @func_3043() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), int64], Tensor[(2560), bool]) */;
    %272 = %264.0;
    %273 = asin(%269) /* ty=Tensor[(5, 15, 6), float32] */;
    %274 = %270.0;
    %275 = %271.2;
    (%272, %273, %274, %275)
  };
  %276() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */
}

def @func_6351(%var_6338: Tensor[(11, 1, 3), float32], %var_6339: Tensor[(11, 9, 3), float32]) -> (Tensor[(2560), float64], Tensor[(11, 9, 3), float64]) {
  %277 = @func_5932() /* ty=(Tensor[(2560), float64],) */;
  %278 = cast(%var_6338, dtype="float32") /* ty=Tensor[(11, 1, 3), float32] */;
  %279 = cast(%var_6339, dtype="float32") /* ty=Tensor[(11, 9, 3), float32] */;
  %280 = divide(%278, %279) /* ty=Tensor[(11, 9, 3), float32] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(11, 9, 3), float64] */;
  %282 = %277.0;
  %283 = rsqrt(%281) /* ty=Tensor[(11, 9, 3), float64] */;
  (%282, %283)
}

def @func_1829(%var_1817: Tensor[(16, 7, 1), uint32], %var_1818: Tensor[(16, 7, 3), uint32]) -> (Tensor[(16, 7, 3), uint32],) {
  %284 = cast(%var_1817, dtype="uint32") /* ty=Tensor[(16, 7, 1), uint32] */;
  %285 = cast(%var_1818, dtype="uint32") /* ty=Tensor[(16, 7, 3), uint32] */;
  %286 = right_shift(%284, %285) /* ty=Tensor[(16, 7, 3), uint32] */;
  (%286,)
}

def @func_1300() -> (Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) {
  %292 = fn () -> (Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) {
    %287 = cast(meta[relay.Constant][12] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %288 = reshape(%287, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
    %289 = @func_9(%288) /* ty=(Tensor[(5, 15, 6), float64],) */;
    %290 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
    %291 = %289.0;
    (%290, %291, meta[relay.Constant][12] /* ty=Tensor[(450), float64] */)
  };
  %292() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */
}

def @func_3925() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %293 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %294 = %293.0;
  %295 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %296 = @func_3608() /* ty=Tensor[(13, 3), float64] */;
  (%294, %295, %296)
}

def @func_3846() -> Tensor[(13, 3), float64] {
  %298 = fn () -> Tensor[(13, 3), float64] {
    %297 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %297.0
  };
  %298() /* ty=Tensor[(13, 3), float64] */
}

def @func_6706(%var_6701: Tensor[(15, 6, 1), float32]) -> (Tensor[(15, 6, 1), float32],) {
  %299 = cast(%var_6701, dtype="float32") /* ty=Tensor[(15, 6, 1), float32] */;
  %300 = sigmoid(%299) /* ty=Tensor[(15, 6, 1), float32] */;
  (%300,)
}

def @func_3609() -> Tensor[(13, 3), float64] {
  %302 = fn () -> Tensor[(13, 3), float64] {
    %301 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
    %301.0
  };
  %302() /* ty=Tensor[(13, 3), float64] */
}

def @func_5717() -> (Tensor[(13, 3), float64], Tensor[(2560), float32]) {
  @func_5715() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), float32]) */
}

def @func_4747() -> (Tensor[(5, 15, 6), float64], Tensor[(6, 1, 12), float64], Tensor[(72), float64]) {
  %309 = fn () -> (Tensor[(5, 15, 6), float64], Tensor[(6, 1, 12), float64], Tensor[(72), float64]) {
    %303 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
    %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %305 = reshape(%304, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float64] */;
    %306 = @func_1073(%305) /* ty=(Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) */;
    %307 = %303.1;
    %308 = %306.0;
    (%307, %308, meta[relay.Constant][13] /* ty=Tensor[(72), float64] */)
  };
  %309() /* ty=(Tensor[(5, 15, 6), float64], Tensor[(6, 1, 12), float64], Tensor[(72), float64]) */
}

def @func_4161() -> Tensor[(13, 3), float64] {
  @func_4159() /* ty=Tensor[(13, 3), float64] */
}

def @func_666() -> (Tensor[(13, 3), float64],) {
  %312 = fn () -> (Tensor[(13, 3), float64],) {
    %310 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 3), float64] */;
    %311 = sigmoid(%310) /* ty=Tensor[(13, 3), float64] */;
    (%311,)
  };
  %312() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_2081() -> (Tensor[(13, 3), float64], Tensor[(180), uint64]) {
  %327 = fn () -> (Tensor[(13, 3), float64], Tensor[(180), uint64]) {
    %313 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %314 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %315 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %316 = reshape(%313, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %317 = reshape(%314, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %318 = reshape(%315, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %319 = @func_802(%316, %317, %318) /* ty=(Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) */;
    %320 = %319.0;
    %321 = cast(%320, dtype="uint64") /* ty=Tensor[(10, 2, 9), uint64] */;
    %322 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %323 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), float64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %325 = @func_736() /* ty=Tensor[(13, 3), float64] */;
    %326 = logical_xor(%323, %324) /* ty=Tensor[(180), uint64] */;
    (%325, %326)
  };
  %327() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */
}

def @func_2321() -> (Tensor[(13, 3), float64],) {
  @func_2319() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_5108(%var_5068: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1, 1274), float64], Tensor[(72), float32], Tensor[(6, 12), float32], Tensor[(13, 3), float64]) {
  %328 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %329 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
  %330 = cast(%var_5068, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %331 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1274), float64] */, dtype="float64") /* ty=Tensor[(1, 1274), float64] */;
  %332 = reshape(%330, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %333 = reshape(%331, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %334 = @func_3403(%332, %333) /* ty=(Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) */;
  %335 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
  %336 = reshape(%335, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %337 = @func_4213(%336) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) */;
  %338 = %328.0;
  %339 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %340 = %329.1;
  %341 = %334.11;
  %342 = %337.3;
  %343 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
  (%338, %339, %340, %341, %var_5068, meta[relay.Constant][16] /* ty=Tensor[(1, 1274), float64] */, %342, meta[relay.Constant][17] /* ty=Tensor[(6, 12), float32] */, %343)
}

def @func_4267(%var_4225: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) {
  %344 = cast(%var_4225, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %345 = cast(meta[relay.Constant][18] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %346 = reshape(%344, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %347 = reshape(%345, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %348 = @func_3403(%346, %347) /* ty=(Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) */;
  %349 = @func_3452() /* ty=(Tensor[(13, 3), float64], Tensor[(450), float32]) */;
  %350 = %349.1;
  %351 = cast(%350, dtype="float32") /* ty=Tensor[(450), float32] */;
  %352 = %348.13;
  %353 = tan(%351) /* ty=Tensor[(450), float32] */;
  (%352, %var_4225, meta[relay.Constant][18] /* ty=Tensor[(1274), float64] */, %353)
}

def @func_7339(%var_7334: Tensor[(3, 2, 13), int8], %var_7335: Tensor[(3, 2, 13), int8]) -> Tensor[(3, 2, 13), int8] {
  %354 = cast(%var_7335, dtype="int8") /* ty=Tensor[(3, 2, 13), int8] */;
  %355 = shape_of(%var_7334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%var_7334, dtype="int8") /* ty=Tensor[(3, 2, 13), int8] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%356, %357) /* ty=Tensor[(3, 2, 13), int8] */
}

def @func_7443() -> Tensor[(4, 9, 14), float64] {
  %359 = fn () -> Tensor[(4, 9, 14), float64] {
    %358 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 9, 14), float64] */, dtype="float64") /* ty=Tensor[(4, 9, 14), float64] */;
    sin(%358) /* ty=Tensor[(4, 9, 14), float64] */
  };
  %359() /* ty=Tensor[(4, 9, 14), float64] */
}

def @func_6561() -> Tensor[(2560), float64] {
  @func_6559() /* ty=Tensor[(2560), float64] */
}

def @func_6475() -> (Tensor[(13, 3), float64],) {
  %360 = @func_3608() /* ty=Tensor[(13, 3), float64] */;
  (%360,)
}

def @func_1596(%var_1590: uint8, %var_1591: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) {
  %361 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %362 = cast(%var_1590, dtype="uint8") /* ty=uint8 */;
  %363 = cast(%var_1591, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %364 = reshape(%362, newshape=[]) /* ty=uint8 */;
  %365 = reshape(%363, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %366 = @func_1452(%364, %365) /* ty=(Tensor[(11, 9, 6), float32], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(5, 15, 6), float64], Tensor[(1, 450), float64]) */;
  %367 = %361.0;
  %368 = @func_753() /* ty=Tensor[(13, 3), float64] */;
  %369 = @func_736() /* ty=Tensor[(13, 3), float64] */;
  %370 = %366.5;
  (%367, %368, %369, %370, %var_1590, %var_1591)
}

def @func_3082(%var_3080: Tensor[(180), float64], %var_3081: Tensor[(450), float64]) -> (Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) {
  %387 = fn (%var_3057: Tensor[(180), float64], %var_3074: Tensor[(450), float64]) -> (Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) {
    %371 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
    %372 = cast(%var_3074, dtype="float64") /* ty=Tensor[(450), float64] */;
    %373 = reshape(%372, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
    %374 = @func_9(%373) /* ty=(Tensor[(5, 15, 6), float64],) */;
    %375 = cast(%var_3057, dtype="float64") /* ty=Tensor[(180), float64] */;
    %376 = cast(%var_3057, dtype="float64") /* ty=Tensor[(180), float64] */;
    %377 = cast(%var_3057, dtype="float64") /* ty=Tensor[(180), float64] */;
    %378 = reshape(%375, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %379 = reshape(%376, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %380 = reshape(%377, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %381 = @func_802(%378, %379, %380) /* ty=(Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) */;
    %382 = %381.0;
    %383 = cast(%382, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
    %384 = %371.0;
    %385 = %374.0;
    %386 = sinh(%383) /* ty=Tensor[(10, 2, 9), float64] */;
    (%384, %var_3057, %385, %var_3074, %386)
  };
  %387(%var_3080, %var_3081) /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) */
}

def @func_6094() -> (Tensor[(3, 6, 4), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(13, 3), float64]) {
  %396 = fn () -> (Tensor[(3, 6, 4), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(13, 3), float64]) {
    %388 = @func_5995() /* ty=(Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72, 1), float32]) */;
    %389 = cast(meta[relay.Constant][20] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
    %390 = reshape(%389, newshape=[196]) /* ty=Tensor[(196), uint8] */;
    %391 = @func_4811(%390) /* ty=(Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) */;
    %392 = @func_2722() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
    %393 = %388.1;
    %394 = %391.2;
    %395 = %392.0;
    (%393, %394, meta[relay.Constant][20] /* ty=Tensor[(196), uint8] */, %395)
  };
  %396() /* ty=(Tensor[(3, 6, 4), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(13, 3), float64]) */
}

def @func_6311(%var_6281: Tensor[(550, 2), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(550, 2), int8], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(13, 3), float64]) {
  %397 = @func_4591() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %398 = cast(meta[relay.Constant][21] /* ty=Tensor[(550, 2), float32] */, dtype="float32") /* ty=Tensor[(550, 2), float32] */;
  %399 = cast(meta[relay.Constant][21] /* ty=Tensor[(550, 2), float32] */, dtype="float32") /* ty=Tensor[(550, 2), float32] */;
  %400 = reshape(%398, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %401 = reshape(%399, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %402 = @func_5580(%400, %401) /* ty=(Tensor[(11, 10, 10), float32], Tensor[(196), uint8]) */;
  %403 = cast(%var_6281, dtype="int8") /* ty=Tensor[(550, 2), int8] */;
  %404 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(550, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %405 = cast(meta[relay.Constant][21] /* ty=Tensor[(550, 2), float32] */, dtype="int8") /* ty=Tensor[(550, 2), int8] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %407 = cast(meta[relay.Constant][22] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %408 = reshape(%407, newshape=[13, 7, 14]) /* ty=Tensor[(13, 7, 14), float64] */;
  %409 = @func_2494(%408) /* ty=(Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) */;
  %410 = @func_5244() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %411 = %397.1;
  %412 = @func_5743() /* ty=Tensor[(13, 3), float64] */;
  %413 = %402.1;
  %414 = minimum(%405, %406) /* ty=Tensor[(550, 2), int8] */;
  %415 = %409.1;
  %416 = %410.0;
  (%411, %412, %413, %414, %415, meta[relay.Constant][22] /* ty=Tensor[(1274), float64] */, %416)
}

def @func_6503(%var_6502: Tensor[(14, 14, 8), uint64]) -> Tensor[(14, 14, 8), uint64] {
  %421 = fn (%var_6493: Tensor[(14, 14, 8), uint64]) -> Tensor[(14, 14, 8), uint64] {
    %417 = cast(%var_6493, dtype="uint64") /* ty=Tensor[(14, 14, 8), uint64] */;
    %418 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 14, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %419 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 14, 8), uint64] */, dtype="uint64") /* ty=Tensor[(14, 14, 8), uint64] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%419, %420) /* ty=Tensor[(14, 14, 8), uint64] */
  };
  %421(%var_6502) /* ty=Tensor[(14, 14, 8), uint64] */
}

def @func_1868(%var_1867: Tensor[(72), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) {
  %429 = fn (%var_1858: Tensor[(72), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) {
    %422 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %423 = cast(%var_1858, dtype="float32") /* ty=Tensor[(72), float32] */;
    %424 = reshape(%423, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float32] */;
    %425 = @func_1395(%424) /* ty=(Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) */;
    %426 = %422.0;
    %427 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
    %428 = %425.1;
    (%426, %427, %428, %var_1858)
  };
  %429(%var_1867) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) */
}

def @func_1623(%var_1622: Tensor[(180), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(10, 2, 9), float64], Tensor[(180), float64]) {
  %442 = fn (%var_1616: Tensor[(180), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(10, 2, 9), float64], Tensor[(180), float64]) {
    %430 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
    %431 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
    %432 = cast(%var_1616, dtype="float64") /* ty=Tensor[(180), float64] */;
    %433 = cast(%var_1616, dtype="float64") /* ty=Tensor[(180), float64] */;
    %434 = cast(%var_1616, dtype="float64") /* ty=Tensor[(180), float64] */;
    %435 = reshape(%432, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %436 = reshape(%433, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %437 = reshape(%434, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %438 = @func_802(%435, %436, %437) /* ty=(Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) */;
    %439 = %430.1;
    %440 = %431.0;
    %441 = %438.0;
    (%439, %440, %441, %var_1616)
  };
  %442(%var_1622) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(10, 2, 9), float64], Tensor[(180), float64]) */
}

def @func_7343(%var_7341: Tensor[(3, 2, 13), int8], %var_7342: Tensor[(3, 2, 13), int8]) -> Tensor[(3, 2, 13), int8] {
  @func_7339(%var_7341, %var_7342) /* ty=Tensor[(3, 2, 13), int8] */
}

def @func_5905() -> (Tensor[(2, 1, 9), float64], Tensor[(2, ?, 9), bool]) {
  %443 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(2, 1, 9), float32] */;
  %444 = cos(%443) /* ty=Tensor[(2, 1, 9), float32] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(2, 1, 9), float64] */;
  %446 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 1, 9), float32] */, dtype="bool") /* ty=Tensor[(2, 1, 9), bool] */;
  %447 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%444, dtype="bool") /* ty=Tensor[(2, 1, 9), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = sinh(%445) /* ty=Tensor[(2, 1, 9), float64] */;
  %451 = equal(%448, %449) /* ty=Tensor[(2, ?, 9), bool] */;
  (%450, %451)
}

def @func_6709(%var_6707: Tensor[(15, 6, 1), float32]) -> (Tensor[(15, 6, 1), float32],) {
  @func_6706(%var_6707) /* ty=(Tensor[(15, 6, 1), float32],) */
}

def @func_1600(%var_1598: uint8, %var_1599: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) {
  @func_1596(%var_1598, %var_1599) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) */
}

def @main(%var_7526: Tensor[(7, 28), uint8]) -> (Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(7, 28), float32]) {
  %452 = @func_6477() /* ty=(Tensor[(13, 3), float64],) */;
  %453 = cast(%var_7526, dtype="uint8") /* ty=Tensor[(7, 28), uint8] */;
  %454 = reshape(%453, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %455 = @func_4814(%454) /* ty=(Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) */;
  %456 = cast(%var_7526, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %457 = %452.0;
  %458 = %455.5;
  %459 = asin(%456) /* ty=Tensor[(7, 28), float32] */;
  (%457, %458, %459)
}

def @func_2949(%var_2947: Tensor[(15, 12, 2), float64], %var_2948: Tensor[(72), float64]) -> (Tensor[(15, ?, 2), uint64], Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(15, ?, 2), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float64], Tensor[(15, 12, 2), float32]) {
  @func_2945(%var_2947, %var_2948) /* ty=(Tensor[(15, ?, 2), uint64], Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(15, ?, 2), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float64], Tensor[(15, 12, 2), float32]) */
}

def @func_6243() -> (Tensor[(13, 3), float64], Tensor[(2560), bool]) {
  %463 = fn () -> (Tensor[(13, 3), float64], Tensor[(2560), bool]) {
    %460 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
    %461 = @func_1173() /* ty=Tensor[(13, 3), float64] */;
    %462 = %460.3;
    (%461, %462)
  };
  %463() /* ty=(Tensor[(13, 3), float64], Tensor[(2560), bool]) */
}

def @func_1128() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) {
  %470 = fn () -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) {
    %464 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
    %465 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 72), float64] */, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
    %466 = reshape(%465, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float64] */;
    %467 = @func_1073(%466) /* ty=(Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) */;
    %468 = %464.0;
    %469 = %467.1;
    (%468, %469, meta[relay.Constant][25] /* ty=Tensor[(1, 72), float64] */)
  };
  %470() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) */
}

def @func_4705() -> Tensor[(13, 3), float64] {
  %471 = fn () -> Tensor[(13, 3), float64] {
    @func_753() /* ty=Tensor[(13, 3), float64] */
  };
  %471() /* ty=Tensor[(13, 3), float64] */
}

def @func_4215(%var_4214: Tensor[(72), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) {
  %479 = fn (%var_4204: Tensor[(72), float32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) {
    %472 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
    %473 = cast(%var_4204, dtype="float32") /* ty=Tensor[(72), float32] */;
    %474 = reshape(%473, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %475 = @func_1866(%474) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) */;
    %476 = %472.0;
    %477 = @func_753() /* ty=Tensor[(13, 3), float64] */;
    %478 = %475.0;
    (%476, %477, %478, %var_4204)
  };
  %479(%var_4214) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float32]) */
}

def @func_558(%var_556: Tensor[(6, 3, 3), float64], %var_557: Tensor[(50, 9), float64]) -> (Tensor[(5, 15, 6), float64], Tensor[(50, 9), float64], Tensor[(6, 3, 3), float32], Tensor[(5, 15, 6), float64]) {
  %495 = fn (%var_512: Tensor[(6, 3, 3), float64], %var_520: Tensor[(50, 9), float64]) -> (Tensor[(5, 15, 6), float64], Tensor[(50, 9), float64], Tensor[(6, 3, 3), float32], Tensor[(5, 15, 6), float64]) {
    %480 = cast(%var_520, dtype="float64") /* ty=Tensor[(50, 9), float64] */;
    %481 = reshape(%480, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
    %482 = @func_9(%481) /* ty=(Tensor[(5, 15, 6), float64],) */;
    %483 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
    %484 = shape_of(%var_512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %485 = cast(%var_512, dtype="float64") /* ty=Tensor[(6, 3, 3), float64] */;
    %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %487 = divide(%485, %486) /* ty=Tensor[(6, 3, 3), float64] */;
    %488 = cast(%487, dtype="float32") /* ty=Tensor[(6, 3, 3), float32] */;
    %489 = %482.0;
    %490 = cast(%489, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
    %491 = reshape(%490, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), float64] */;
    %492 = @func_9(%491) /* ty=(Tensor[(5, 15, 6), float64],) */;
    %493 = cosh(%488) /* ty=Tensor[(6, 3, 3), float32] */;
    %494 = %492.0;
    (%489, %var_520, %493, %494)
  };
  %495(%var_556, %var_557) /* ty=(Tensor[(5, 15, 6), float64], Tensor[(50, 9), float64], Tensor[(6, 3, 3), float32], Tensor[(5, 15, 6), float64]) */
}

def @func_4058(%var_4054: float64, %var_4055: Tensor[(1, 4, 7), float64], %var_4056: Tensor[(180), float64], %var_4057: Tensor[(450), float64]) -> (Tensor[(1, 4, 7), float64], Tensor[(5, 15, 6), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float32]) {
  %509 = fn (%var_4028: float64, %var_4029: Tensor[(1, 4, 7), float64], %var_4036: Tensor[(180), float64], %var_4037: Tensor[(450), float64]) -> (Tensor[(1, 4, 7), float64], Tensor[(5, 15, 6), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float32]) {
    %496 = cast(%var_4028, dtype="float64") /* ty=float64 */;
    %497 = cast(%var_4029, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
    %498 = cast(%var_4036, dtype="float64") /* ty=Tensor[(180), float64] */;
    %499 = cast(%var_4037, dtype="float64") /* ty=Tensor[(450), float64] */;
    %500 = reshape(%498, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %501 = reshape(%499, newshape=[450]) /* ty=Tensor[(450), float64] */;
    %502 = @func_3079(%500, %501) /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64], Tensor[(10, 2, 9), float64]) */;
    %503 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
    %504 = reshape(%503, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float32] */;
    %505 = @func_1395(%504) /* ty=(Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) */;
    %506 = power(%496, %497) /* ty=Tensor[(1, 4, 7), float64] */;
    %507 = %502.2;
    %508 = %505.0;
    (%506, %507, %var_4036, %var_4037, %508, meta[relay.Constant][27] /* ty=Tensor[(6, 12), float32] */)
  };
  %509(%var_4054, %var_4055, %var_4056, %var_4057) /* ty=(Tensor[(1, 4, 7), float64], Tensor[(5, 15, 6), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float32]) */
}

def @func_807(%var_804: Tensor[(10, 2, 9), float64], %var_805: Tensor[(10, 2, 9), float64], %var_806: Tensor[(10, 2, 9), float64]) -> (Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) {
  @func_802(%var_804, %var_805, %var_806) /* ty=(Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) */
}

def @func_2378(%var_2376: Tensor[(16, 10, 16), int16], %var_2377: Tensor[(16, 10, 16), int16]) -> (Tensor[(16, 10, 16), int16],) {
  @func_2374(%var_2376, %var_2377) /* ty=(Tensor[(16, 10, 16), int16],) */
}

def @func_1975(%var_1973: Tensor[(112), uint32], %var_1974: Tensor[(336), uint32]) -> (Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) {
  %529 = fn (%var_1927: Tensor[(112), uint32], %var_1928: Tensor[(336), uint32]) -> (Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) {
    %510 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %511 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
    %512 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
    %513 = @func_1127() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) */;
    %514 = cast(%var_1927, dtype="uint32") /* ty=Tensor[(112), uint32] */;
    %515 = cast(%var_1928, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %516 = reshape(%514, newshape=[16, 7, 1]) /* ty=Tensor[(16, 7, 1), uint32] */;
    %517 = reshape(%515, newshape=[16, 7, 3]) /* ty=Tensor[(16, 7, 3), uint32] */;
    %518 = @func_1829(%516, %517) /* ty=(Tensor[(16, 7, 3), uint32],) */;
    %519 = %518.0;
    %520 = cast(%519, dtype="bool") /* ty=Tensor[(16, 7, 3), bool] */;
    %521 = shape_of(%var_1928, dtype="int32") /* ty=Tensor[(1), int32] */;
    %522 = cast(%var_1928, dtype="bool") /* ty=Tensor[(336), bool] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?), bool] */;
    %524 = %510.0;
    %525 = %511.0;
    %526 = %512.0;
    %527 = %513.2;
    %528 = logical_and(%522, %523) /* ty=Tensor[(336), bool] */;
    (%524, %var_1927, %525, %526, %527, %528)
  };
  %529(%var_1973, %var_1974) /* ty=(Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) */
}

def @func_6200() -> Tensor[(5, 15, 6), float64] {
  %533 = fn () -> Tensor[(5, 15, 6), float64] {
    %530 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
    %531 = %530.1;
    %532 = cast(%531, dtype="float64") /* ty=Tensor[(5, 15, 6), float64] */;
    log(%532) /* ty=Tensor[(5, 15, 6), float64] */
  };
  %533() /* ty=Tensor[(5, 15, 6), float64] */
}

def @func_6075() -> Tensor[(13, 3), float64] {
  %534 = @func_3596() /* ty=(Tensor[(13, 3), float64],) */;
  %534.0
}

def @func_5207() -> Tensor[(13, 3), float64] {
  %536 = fn () -> Tensor[(13, 3), float64] {
    %535 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %535.0
  };
  %536() /* ty=Tensor[(13, 3), float64] */
}

def @func_6636(%var_6592: Tensor[(13, 13, 16), int64], %var_6625: float64, %var_6627: Tensor[(180, 1), float64]) -> (Tensor[(13, 13, 16), bool], Tensor[(3, 6, 4), float64], float64, Tensor[(28), float64], Tensor[(180, 1), float64], Tensor[(5, 90), float64]) {
  %537 = cast(%var_6592, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
  %538 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(13, 13, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 13, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 13, 16), int64] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %541 = right_shift(%539, %540) /* ty=Tensor[(13, 13, 16), int64] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %543 = log10(%542) /* ty=Tensor[(13, 13, 16), float32] */;
  %544 = cast(%543, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  %545 = atan(%544) /* ty=Tensor[(13, 13, 16), float32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="bool") /* ty=Tensor[(13, 13, 16), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = cast(%var_6625, dtype="float64") /* ty=float64 */;
  %551 = cast(meta[relay.Constant][29] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %552 = cast(%var_6627, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %553 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 90), float64] */, dtype="float64") /* ty=Tensor[(5, 90), float64] */;
  %554 = reshape(%550, newshape=[]) /* ty=float64 */;
  %555 = reshape(%551, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float64] */;
  %556 = reshape(%552, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %557 = reshape(%553, newshape=[450]) /* ty=Tensor[(450), float64] */;
  %558 = @func_4053(%554, %555, %556, %557) /* ty=(Tensor[(1, 4, 7), float64], Tensor[(5, 15, 6), float64], Tensor[(180), float64], Tensor[(450), float64], Tensor[(3, 6, 4), float64], Tensor[(6, 12), float32]) */;
  %559 = less(%548, %549) /* ty=Tensor[(13, 13, 16), bool] */;
  %560 = %558.4;
  (%559, %560, %var_6625, meta[relay.Constant][29] /* ty=Tensor[(28), float64] */, %var_6627, meta[relay.Constant][30] /* ty=Tensor[(5, 90), float64] */)
}

def @func_3533(%var_3531: Tensor[(13, 13, 4), float64], %var_3532: Tensor[(13, 13, 4), float64]) -> Tensor[(13, 13, 4), bool] {
  %565 = fn (%var_3525: Tensor[(13, 13, 4), float64], %var_3526: Tensor[(13, 13, 4), float64]) -> Tensor[(13, 13, 4), bool] {
    %561 = cast(%var_3526, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
    %562 = shape_of(%var_3525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%var_3525, dtype="bool") /* ty=Tensor[(13, 13, 4), bool] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%563, %564) /* ty=Tensor[(13, 13, 4), bool] */
  };
  %565(%var_3531, %var_3532) /* ty=Tensor[(13, 13, 4), bool] */
}

def @func_6989(%var_6988: Tensor[(11, 1, 4), float64]) -> (Tensor[(11, 1, 4), float64], Tensor[(11, 1, 4), float32]) {
  %570 = fn (%var_6975: Tensor[(11, 1, 4), float64]) -> (Tensor[(11, 1, 4), float64], Tensor[(11, 1, 4), float32]) {
    %566 = cast(%var_6975, dtype="float64") /* ty=Tensor[(11, 1, 4), float64] */;
    %567 = cast(%var_6975, dtype="float32") /* ty=Tensor[(11, 1, 4), float32] */;
    %568 = atan(%566) /* ty=Tensor[(11, 1, 4), float64] */;
    %569 = exp(%567) /* ty=Tensor[(11, 1, 4), float32] */;
    (%568, %569)
  };
  %570(%var_6988) /* ty=(Tensor[(11, 1, 4), float64], Tensor[(11, 1, 4), float32]) */
}

def @func_6898(%var_6897: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8]) {
  %577 = fn (%var_6882: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8]) {
    %571 = @func_4591() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
    %572 = cast(%var_6882, dtype="uint8") /* ty=Tensor[(196), uint8] */;
    %573 = reshape(%572, newshape=[196]) /* ty=Tensor[(196), uint8] */;
    %574 = @func_4267(%573) /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) */;
    %575 = %571.0;
    %576 = %574.0;
    (%575, %576, %var_6882)
  };
  %577(%var_6897) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(196), uint8]) */
}

def @func_2723() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %582 = fn () -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
    %578 = @func_2165() /* ty=(Tensor[(13, 3), float64],) */;
    %579 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
    %580 = %578.0;
    %581 = %579.0;
    (%580, %581)
  };
  %582() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */
}

def @func_1075(%var_1074: Tensor[(6, 1, 12), float64]) -> (Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) {
  %586 = fn (%var_1043: Tensor[(6, 1, 12), float64]) -> (Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) {
    %583 = cast(%var_1043, dtype="float64") /* ty=Tensor[(6, 1, 12), float64] */;
    %584 = rsqrt(%583) /* ty=Tensor[(6, 1, 12), float64] */;
    %585 = @func_753() /* ty=Tensor[(13, 3), float64] */;
    (%584, %585)
  };
  %586(%var_1074) /* ty=(Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) */
}

def @func_6355(%var_6353: Tensor[(11, 1, 3), float32], %var_6354: Tensor[(11, 9, 3), float32]) -> (Tensor[(2560), float64], Tensor[(11, 9, 3), float64]) {
  @func_6351(%var_6353, %var_6354) /* ty=(Tensor[(2560), float64], Tensor[(11, 9, 3), float64]) */
}

def @func_7479(%var_7478: Tensor[(1274), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(1274), float64]) {
  %597 = fn (%var_7472: Tensor[(1274), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(1274), float64]) {
    %587 = @func_3014() /* ty=(Tensor[(13, 3), float64],) */;
    %588 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
    %589 = cast(meta[relay.Constant][31] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
    %590 = cast(%var_7472, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %591 = reshape(%589, newshape=[196]) /* ty=Tensor[(196), uint8] */;
    %592 = reshape(%590, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
    %593 = @func_3403(%591, %592) /* ty=(Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) */;
    %594 = %587.0;
    %595 = %588.0;
    %596 = %593.12;
    (%594, %595, %596, meta[relay.Constant][31] /* ty=Tensor[(196), uint8] */, %var_7472)
  };
  %597(%var_7478) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(196), uint8], Tensor[(1274), float64]) */
}

def @func_802(%var_793: Tensor[(10, 2, 9), float64], %var_794: Tensor[(10, 2, 9), float64], %var_798: Tensor[(10, 2, 9), float64]) -> (Tensor[(10, 2, 9), float64], Tensor[(10, 2, 9), bool]) {
  %598 = cast(%var_794, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %599 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%var_793, dtype="float64") /* ty=Tensor[(10, 2, 9), float64] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %602 = cast(%var_798, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
  %603 = shape_of(%var_793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_793, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = floor_mod(%600, %601) /* ty=Tensor[(10, 2, 9), float64] */;
  %607 = equal(%604, %605) /* ty=Tensor[(10, 2, 9), bool] */;
  (%606, %607)
}

def @func_3139(%var_3138: Tensor[(112), uint32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(112), uint32], Tensor[(336), uint32]) {
  %618 = fn (%var_3129: Tensor[(112), uint32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(112), uint32], Tensor[(336), uint32]) {
    %608 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
    %609 = @func_2410() /* ty=(Tensor[(13, 3), float64],) */;
    %610 = cast(%var_3129, dtype="uint32") /* ty=Tensor[(112), uint32] */;
    %611 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %612 = reshape(%610, newshape=[112]) /* ty=Tensor[(112), uint32] */;
    %613 = reshape(%611, newshape=[336]) /* ty=Tensor[(336), uint32] */;
    %614 = @func_1972(%612, %613) /* ty=(Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) */;
    %615 = %608.1;
    %616 = %609.0;
    %617 = %614.1;
    (%615, %616, %617, %var_3129, meta[relay.Constant][32] /* ty=Tensor[(336), uint32] */)
  };
  %618(%var_3138) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(112), uint32], Tensor[(336), uint32]) */
}

def @func_6693() -> Tensor[(13, 3), float64] {
  @func_6691() /* ty=Tensor[(13, 3), float64] */
}

def @func_7093() -> Tensor[(7, 1, 11), bool] {
  %619 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %620 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 1, 11), bool] */, dtype="bool") /* ty=Tensor[(7, 1, 11), bool] */;
  logical_and(%619, %620) /* ty=Tensor[(7, 1, 11), bool] */
}

def @func_6691() -> Tensor[(13, 3), float64] {
  %621 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
  %621.0
}

def @func_6042(%var_6040: Tensor[(2, 10, 13), float32]) -> (Tensor[(2, 10, 13), float32],) {
  @func_6039(%var_6040) /* ty=(Tensor[(2, 10, 13), float32],) */
}

def @func_3453() -> (Tensor[(13, 3), float64], Tensor[(450), float32]) {
  %625 = fn () -> (Tensor[(13, 3), float64], Tensor[(450), float32]) {
    %622 = @func_1127() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64]) */;
    %623 = %622.0;
    %624 = @func_2337() /* ty=Tensor[(450), float32] */;
    (%623, %624)
  };
  %625() /* ty=(Tensor[(13, 3), float64], Tensor[(450), float32]) */
}

def @func_5435(%var_5413: Tensor[(12, 11, 4), float32]) -> (Tensor[(12, 11, 4), bool],) {
  %626 = cast(%var_5413, dtype="float32") /* ty=Tensor[(12, 11, 4), float32] */;
  %627 = acos(%626) /* ty=Tensor[(12, 11, 4), float32] */;
  %628 = cast(%627, dtype="bool") /* ty=Tensor[(12, 11, 4), bool] */;
  %629 = shape_of(%var_5413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_5413, dtype="bool") /* ty=Tensor[(12, 11, 4), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = not_equal(%630, %631) /* ty=Tensor[(12, 11, 4), bool] */;
  (%632,)
}

def @func_2319() -> (Tensor[(13, 3), float64],) {
  %633 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
  %634 = %633.0;
  (%634,)
}

def @func_3403(%var_3361: Tensor[(196), uint8], %var_3375: Tensor[(1274), float64]) -> (Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) {
  %635 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
  %636 = cast(meta[relay.Constant][34] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %637 = cast(%var_3361, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %638 = reshape(%636, newshape=[]) /* ty=uint8 */;
  %639 = reshape(%637, newshape=[7, 2, 14]) /* ty=Tensor[(7, 2, 14), uint8] */;
  %640 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
  %641 = cast(%var_3375, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %642 = reshape(%641, newshape=[13, 7, 14]) /* ty=Tensor[(13, 7, 14), float64] */;
  %643 = @func_2494(%642) /* ty=(Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) */;
  %644 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
  %645 = cast(meta[relay.Constant][35] /* ty=Tensor[(180, 1), float64] */, dtype="float64") /* ty=Tensor[(180, 1), float64] */;
  %646 = reshape(%645, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %647 = @func_1621(%646) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(10, 2, 9), float64], Tensor[(180), float64]) */;
  %648 = @func_2080() /* ty=(Tensor[(13, 3), float64], Tensor[(180), uint64]) */;
  %649 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %650 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
  %651 = %635.0;
  %652 = @func_784(%638, %639) /* ty=Tensor[(7, 2, 14), bool] */;
  %653 = @func_3189() /* ty=Tensor[(13, 3), float64] */;
  %654 = %640.0;
  %655 = %643.1;
  %656 = %644.0;
  %657 = %647.3;
  %658 = %648.0;
  %659 = %649.6;
  %660 = %650.0;
  (%651, %652, meta[relay.Constant][34] /* ty=uint8 */, %var_3361, %653, %654, %655, %var_3375, %656, %657, meta[relay.Constant][35] /* ty=Tensor[(180, 1), float64] */, %658, %659, %660)
}

def @func_2122(%var_2120: Tensor[(2, 13, 1), float32], %var_2121: Tensor[(2, 13, 5), float32]) -> (Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) {
  %671 = fn (%var_2082: Tensor[(2, 13, 1), float32], %var_2089: Tensor[(2, 13, 5), float32]) -> (Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) {
    %661 = cast(%var_2082, dtype="float32") /* ty=Tensor[(2, 13, 1), float32] */;
    %662 = acos(%661) /* ty=Tensor[(2, 13, 1), float32] */;
    %663 = cast(%662, dtype="bool") /* ty=Tensor[(2, 13, 1), bool] */;
    %664 = cast(%var_2089, dtype="bool") /* ty=Tensor[(2, 13, 5), bool] */;
    %665 = cast(%var_2082, dtype="float32") /* ty=Tensor[(2, 13, 1), float32] */;
    %666 = cast(%var_2089, dtype="float32") /* ty=Tensor[(2, 13, 5), float32] */;
    %667 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
    %668 = less_equal(%663, %664) /* ty=Tensor[(2, 13, 5), bool] */;
    %669 = floor_divide(%665, %666) /* ty=Tensor[(2, 13, 5), float32] */;
    %670 = %667.0;
    (%668, %669, %670)
  };
  %671(%var_2120, %var_2121) /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) */
}

def @func_4879(%var_4878: Tensor[(5, 2, 16), float32]) -> (Tensor[(5, 15, 6), float32], Tensor[(5, 2, 16), bool]) {
  %683 = fn (%var_4850: Tensor[(5, 2, 16), float32]) -> (Tensor[(5, 15, 6), float32], Tensor[(5, 2, 16), bool]) {
    %672 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
    %673 = cast(%var_4850, dtype="float32") /* ty=Tensor[(5, 2, 16), float32] */;
    %674 = exp(%673) /* ty=Tensor[(5, 2, 16), float32] */;
    %675 = cast(%674, dtype="float32") /* ty=Tensor[(5, 2, 16), float32] */;
    %676 = atan(%675) /* ty=Tensor[(5, 2, 16), float32] */;
    %677 = cast(%676, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
    %678 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
    %679 = cast(%674, dtype="bool") /* ty=Tensor[(5, 2, 16), bool] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %681 = %672.1;
    %682 = not_equal(%679, %680) /* ty=Tensor[(5, 2, 16), bool] */;
    (%681, %682)
  };
  %683(%var_4878) /* ty=(Tensor[(5, 15, 6), float32], Tensor[(5, 2, 16), bool]) */
}

def @func_6451() -> (Tensor[(13, 3), float64], Tensor[(450), float64], Tensor[(13, 3), float64]) {
  @func_6449() /* ty=(Tensor[(13, 3), float64], Tensor[(450), float64], Tensor[(13, 3), float64]) */
}

def @func_2338() -> Tensor[(450), float32] {
  %687 = fn () -> Tensor[(450), float32] {
    %684 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
    %685 = %684.2;
    %686 = cast(%685, dtype="float32") /* ty=Tensor[(450), float32] */;
    acos(%686) /* ty=Tensor[(450), float32] */
  };
  %687() /* ty=Tensor[(450), float32] */
}

def @func_4435(%var_4419: Tensor[(112), uint32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(336), bool], Tensor[(112), uint32], Tensor[(336), uint32], Tensor[(13, 7, 14), float64], Tensor[(1274), float64]) {
  %688 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
  %689 = @func_1922() /* ty=(Tensor[(13, 3), float64],) */;
  %690 = cast(%var_4419, dtype="uint32") /* ty=Tensor[(112), uint32] */;
  %691 = cast(meta[relay.Constant][36] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %692 = reshape(%690, newshape=[112]) /* ty=Tensor[(112), uint32] */;
  %693 = reshape(%691, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %694 = @func_1972(%692, %693) /* ty=(Tensor[(13, 3), float64], Tensor[(112), uint32], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 72), float64], Tensor[(336), bool]) */;
  %695 = cast(meta[relay.Constant][37] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %696 = reshape(%695, newshape=[13, 7, 14]) /* ty=Tensor[(13, 7, 14), float64] */;
  %697 = @func_2494(%696) /* ty=(Tensor[(13, 7, 14), float64], Tensor[(13, 3), float64]) */;
  %698 = %688.0;
  %699 = %689.0;
  %700 = %694.5;
  %701 = %697.0;
  (%698, %699, %700, %var_4419, meta[relay.Constant][36] /* ty=Tensor[(336), uint32] */, %701, meta[relay.Constant][37] /* ty=Tensor[(1274), float64] */)
}

def @func_988() -> (Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) {
  %706 = fn () -> (Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) {
    %702 = cast(meta[relay.Constant][38] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %703 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 9, 6), uint16] */, dtype="uint16") /* ty=Tensor[(11, 9, 6), uint16] */;
    %704 = right_shift(%702, %703) /* ty=Tensor[(11, 9, 6), uint16] */;
    %705 = @func_736() /* ty=Tensor[(13, 3), float64] */;
    (%704, %705)
  };
  %706() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */
}

def @func_3407(%var_3405: Tensor[(196), uint8], %var_3406: Tensor[(1274), float64]) -> (Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) {
  @func_3403(%var_3405, %var_3406) /* ty=(Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1274), float64], Tensor[(11, 9, 6), uint16], Tensor[(180), float64], Tensor[(180, 1), float64], Tensor[(13, 3), float64], Tensor[(2560), int16], Tensor[(13, 3), float64]) */
}

def @func_784(%var_779: uint8, %var_780: Tensor[(7, 2, 14), uint8]) -> Tensor[(7, 2, 14), bool] {
  %707 = cast(%var_779, dtype="bool") /* ty=bool */;
  %708 = cast(%var_780, dtype="bool") /* ty=Tensor[(7, 2, 14), bool] */;
  equal(%707, %708) /* ty=Tensor[(7, 2, 14), bool] */
}

def @func_2796() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) {
  @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */
}

def @func_5111(%var_5109: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1, 1274), float64], Tensor[(72), float32], Tensor[(6, 12), float32], Tensor[(13, 3), float64]) {
  @func_5108(%var_5109) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1, 1274), float64], Tensor[(72), float32], Tensor[(6, 12), float32], Tensor[(13, 3), float64]) */
}

def @func_2994() -> Tensor[(11, 9, 6), bool] {
  %715 = fn () -> Tensor[(11, 9, 6), bool] {
    %709 = @func_987() /* ty=(Tensor[(11, 9, 6), uint16], Tensor[(13, 3), float64]) */;
    %710 = %709.0;
    %711 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 9, 6), uint16] */, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
    %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(%710, dtype="bool") /* ty=Tensor[(11, 9, 6), bool] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%713, %714) /* ty=Tensor[(11, 9, 6), bool] */
  };
  %715() /* ty=Tensor[(11, 9, 6), bool] */
}

def @func_6409() -> (Tensor[(13, 3), float64],) {
  %716 = @func_4591() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %717 = %716.1;
  (%717,)
}

def @func_5996() -> (Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72, 1), float32]) {
  %724 = fn () -> (Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72, 1), float32]) {
    %718 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
    %719 = cast(meta[relay.Constant][41] /* ty=Tensor[(72, 1), float32] */, dtype="float32") /* ty=Tensor[(72, 1), float32] */;
    %720 = reshape(%719, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), float32] */;
    %721 = @func_1395(%720) /* ty=(Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) */;
    %722 = %718.0;
    %723 = %721.0;
    (%722, %723, meta[relay.Constant][41] /* ty=Tensor[(72, 1), float32] */)
  };
  %724() /* ty=(Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72, 1), float32]) */
}

def @func_1175() -> Tensor[(13, 3), float64] {
  @func_1173() /* ty=Tensor[(13, 3), float64] */
}

def @func_3596() -> (Tensor[(13, 3), float64],) {
  %725 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %726 = %725.1;
  (%726,)
}

def @func_2971() -> (Tensor[(13, 3), float64], Tensor[(450), float32]) {
  @func_2969() /* ty=(Tensor[(13, 3), float64], Tensor[(450), float32]) */
}

def @func_1397(%var_1396: Tensor[(3, 6, 4), float32]) -> (Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) {
  %752 = fn (%var_1316: Tensor[(3, 6, 4), float32]) -> (Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) {
    %727 = cast(%var_1316, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
    %728 = sin(%727) /* ty=Tensor[(3, 6, 4), float32] */;
    %729 = cast(%var_1316, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
    %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%728, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %733 = floor_divide(%731, %732) /* ty=Tensor[(3, 6, 4), float32] */;
    %734 = cast(%var_1316, dtype="bool") /* ty=Tensor[(3, 6, 4), bool] */;
    %735 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %736 = cast(%728, dtype="bool") /* ty=Tensor[(3, 6, 4), bool] */;
    %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %738 = not_equal(%736, %737) /* ty=Tensor[(3, 6, 4), bool] */;
    %739 = cast(%738, dtype="int64") /* ty=Tensor[(3, 6, 4), int64] */;
    %740 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%733, dtype="int64") /* ty=Tensor[(3, 6, 4), int64] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %743 = multiply(%741, %742) /* ty=Tensor[(3, 6, 4), int64] */;
    %744 = cast(%743, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
    %745 = log2(%744) /* ty=Tensor[(3, 6, 4), float32] */;
    %746 = cast(%745, dtype="float32") /* ty=Tensor[(3, 6, 4), float32] */;
    %747 = sqrt(%746) /* ty=Tensor[(3, 6, 4), float32] */;
    %748 = cast(%747, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
    %749 = cast(%747, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
    %750 = sinh(%748) /* ty=Tensor[(3, 6, 4), float64] */;
    %751 = atanh(%749) /* ty=Tensor[(3, 6, 4), float64] */;
    (%750, %751)
  };
  %752(%var_1396) /* ty=(Tensor[(3, 6, 4), float64], Tensor[(3, 6, 4), float64]) */
}

def @func_737() -> Tensor[(13, 3), float64] {
  %754 = fn () -> Tensor[(13, 3), float64] {
    %753 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %753.0
  };
  %754() /* ty=Tensor[(13, 3), float64] */
}

def @func_4159() -> Tensor[(13, 3), float64] {
  @func_1173() /* ty=Tensor[(13, 3), float64] */
}

def @func_2167() -> (Tensor[(13, 3), float64],) {
  @func_2165() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_7291() -> Tensor[(2560), bool] {
  @func_7289() /* ty=Tensor[(2560), bool] */
}

def @func_6039(%var_6023: Tensor[(2, 10, 13), float32]) -> (Tensor[(2, 10, 13), float32],) {
  %755 = cast(%var_6023, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %756 = tan(%755) /* ty=Tensor[(2, 10, 13), float32] */;
  (%756,)
}

def @func_3496() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %765 = fn () -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
    %757 = @func_1697() /* ty=(Tensor[(13, 3), float64],) */;
    %758 = @func_2319() /* ty=(Tensor[(13, 3), float64],) */;
    %759 = @func_872() /* ty=(Tensor[(13, 3), float64],) */;
    %760 = @func_2165() /* ty=(Tensor[(13, 3), float64],) */;
    %761 = %757.0;
    %762 = %758.0;
    %763 = %759.0;
    %764 = %760.0;
    (%761, %762, %763, %764)
  };
  %765() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */
}

def @func_6559() -> Tensor[(2560), float64] {
  %766 = @func_5932() /* ty=(Tensor[(2560), float64],) */;
  %766.0
}

def @func_6790() -> Tensor[(450), float32] {
  %767 = @func_4913() /* ty=(Tensor[(450), float32],) */;
  %767.0
}

def @func_2945(%var_2835: Tensor[(15, 12, 2), float64], %var_2915: Tensor[(72), float64]) -> (Tensor[(15, ?, 2), uint64], Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(15, ?, 2), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float64], Tensor[(15, 12, 2), float32]) {
  %768 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %769 = cosh(%768) /* ty=Tensor[(15, 1, 2), float64] */;
  %770 = cast(%769, dtype="uint64") /* ty=Tensor[(15, 1, 2), uint64] */;
  %771 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(15, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 1, 2), float64] */, dtype="uint64") /* ty=Tensor[(15, 1, 2), uint64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %774 = @func_2722() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %775 = cast(meta[relay.Constant][43] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %776 = cast(meta[relay.Constant][44] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %777 = reshape(%775, newshape=[]) /* ty=uint8 */;
  %778 = reshape(%776, newshape=[7, 2, 14]) /* ty=Tensor[(7, 2, 14), uint8] */;
  %779 = @func_907() /* ty=(Tensor[(13, 3), float64],) */;
  %780 = cast(%769, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %781 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(15, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 1, 2), float64] */, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %784 = logical_or(%782, %783) /* ty=Tensor[(15, ?, 2), bool] */;
  %785 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="float64") /* ty=Tensor[(15, ?, 2), float64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %789 = @func_2658() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %790 = cast(%var_2915, dtype="float64") /* ty=Tensor[(72), float64] */;
  %791 = reshape(%790, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float64] */;
  %792 = @func_1073(%791) /* ty=(Tensor[(6, 1, 12), float64], Tensor[(13, 3), float64]) */;
  %793 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 2), float64] */;
  %794 = cast(%var_2835, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %795 = minimum(%793, %794) /* ty=Tensor[(15, 12, 2), float64] */;
  %796 = cast(%795, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %797 = cos(%796) /* ty=Tensor[(15, 12, 2), float32] */;
  %798 = cast(%797, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %799 = tan(%798) /* ty=Tensor[(15, 12, 2), float32] */;
  %800 = cast(%795, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="bool") /* ty=Tensor[(15, 12, 2), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %804 = logical_or(%802, %803) /* ty=Tensor[(15, 12, 2), bool] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %806 = exp(%805) /* ty=Tensor[(15, 12, 2), float32] */;
  %807 = cast(%806, dtype="float64") /* ty=Tensor[(15, 12, 2), float64] */;
  %808 = sin(%807) /* ty=Tensor[(15, 12, 2), float64] */;
  %809 = cast(%808, dtype="float32") /* ty=Tensor[(15, 12, 2), float32] */;
  %810 = left_shift(%772, %773) /* ty=Tensor[(15, ?, 2), uint64] */;
  %811 = %774.0;
  %812 = @func_784(%777, %778) /* ty=Tensor[(7, 2, 14), bool] */;
  %813 = %779.0;
  %814 = multiply(%787, %788) /* ty=Tensor[(15, ?, 2), float64] */;
  %815 = %789.0;
  %816 = %792.1;
  %817 = rsqrt(%809) /* ty=Tensor[(15, 12, 2), float32] */;
  (%810, %811, %812, meta[relay.Constant][43] /* ty=uint8 */, meta[relay.Constant][44] /* ty=Tensor[(196), uint8] */, %813, %814, %815, %816, %var_2915, %817)
}

def @func_4438(%var_4436: Tensor[(112), uint32]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(336), bool], Tensor[(112), uint32], Tensor[(336), uint32], Tensor[(13, 7, 14), float64], Tensor[(1274), float64]) {
  @func_4435(%var_4436) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(336), bool], Tensor[(112), uint32], Tensor[(336), uint32], Tensor[(13, 7, 14), float64], Tensor[(1274), float64]) */
}

def @func_3015() -> (Tensor[(13, 3), float64],) {
  %819 = fn () -> (Tensor[(13, 3), float64],) {
    %818 = @func_736() /* ty=Tensor[(13, 3), float64] */;
    (%818,)
  };
  %819() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_1923() -> (Tensor[(13, 3), float64],) {
  %822 = fn () -> (Tensor[(13, 3), float64],) {
    %820 = @func_665() /* ty=(Tensor[(13, 3), float64],) */;
    %821 = %820.0;
    (%821,)
  };
  %822() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_12(%var_10: Tensor[(5, 15, 6), float64]) -> (Tensor[(5, 15, 6), float64],) {
  @func_9(%var_10) /* ty=(Tensor[(5, 15, 6), float64],) */
}

def @func_2826() -> (Tensor[(5, 15, 6), float64], Tensor[(2, 13, 5), bool], Tensor[(26), float32], Tensor[(130), float32], Tensor[(450), float64]) {
  %823 = @func_1299() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(450), float64]) */;
  %824 = cast(meta[relay.Constant][45] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %825 = cast(meta[relay.Constant][46] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %826 = reshape(%824, newshape=[2, 13, 1]) /* ty=Tensor[(2, 13, 1), float32] */;
  %827 = reshape(%825, newshape=[2, 13, 5]) /* ty=Tensor[(2, 13, 5), float32] */;
  %828 = @func_2119(%826, %827) /* ty=(Tensor[(2, 13, 5), bool], Tensor[(2, 13, 5), float32], Tensor[(13, 3), float64]) */;
  %829 = @func_2794() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(5, 15, 6), float64], Tensor[(54), float64], Tensor[(450), float64], Tensor[(2560), int16]) */;
  %830 = %823.1;
  %831 = %828.0;
  %832 = %829.5;
  (%830, %831, meta[relay.Constant][45] /* ty=Tensor[(26), float32] */, meta[relay.Constant][46] /* ty=Tensor[(130), float32] */, %832)
}

def @func_1699() -> (Tensor[(13, 3), float64],) {
  @func_1697() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_5744() -> Tensor[(13, 3), float64] {
  %833 = fn () -> Tensor[(13, 3), float64] {
    @func_5206() /* ty=Tensor[(13, 3), float64] */
  };
  %833() /* ty=Tensor[(13, 3), float64] */
}

def @func_6396() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %836 = fn () -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
    %834 = @func_6075() /* ty=Tensor[(13, 3), float64] */;
    %835 = @func_5743() /* ty=Tensor[(13, 3), float64] */;
    (%834, %835)
  };
  %836() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */
}

def @func_6477() -> (Tensor[(13, 3), float64],) {
  @func_6475() /* ty=(Tensor[(13, 3), float64],) */
}

def @func_6792() -> Tensor[(450), float32] {
  @func_6790() /* ty=Tensor[(450), float32] */
}

def @func_4270(%var_4268: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) {
  @func_4267(%var_4268) /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], Tensor[(1274), float64], Tensor[(450), float32]) */
}

def @func_3282(%var_3281: Tensor[(360), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) {
  %844 = fn (%var_3270: Tensor[(360), float64]) -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) {
    %837 = cast(%var_3270, dtype="float64") /* ty=Tensor[(360), float64] */;
    %838 = cast(meta[relay.Constant][47] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %839 = reshape(%837, newshape=[15, 12, 2]) /* ty=Tensor[(15, 12, 2), float64] */;
    %840 = reshape(%838, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %841 = @func_2945(%839, %840) /* ty=(Tensor[(15, ?, 2), uint64], Tensor[(13, 3), float64], Tensor[(7, 2, 14), bool], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(15, ?, 2), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(72), float64], Tensor[(15, 12, 2), float32]) */;
    %842 = @func_753() /* ty=Tensor[(13, 3), float64] */;
    %843 = %841.5;
    (%842, %843, %var_3270, meta[relay.Constant][47] /* ty=Tensor[(72), float64] */)
  };
  %844(%var_3281) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(360), float64], Tensor[(72), float64]) */
}

def @func_4735() -> (Tensor[(13, 3), float64], Tensor[(196), uint8], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(36, 2), float32], Tensor[(1, 450), float64]) {
  %845 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %846 = cast(meta[relay.Constant][49] /* ty=Tensor[(196), uint8] */, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %847 = reshape(%845, newshape=[]) /* ty=uint8 */;
  %848 = reshape(%846, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %849 = @func_1596(%847, %848) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) */;
  %850 = @func_3925() /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64]) */;
  %851 = cast(meta[relay.Constant][50] /* ty=Tensor[(36, 2), float32] */, dtype="float32") /* ty=Tensor[(36, 2), float32] */;
  %852 = reshape(%851, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %853 = @func_1866(%852) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(72), float32]) */;
  %854 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %855 = %849.5;
  %856 = cast(%855, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %857 = reshape(%854, newshape=[]) /* ty=uint8 */;
  %858 = reshape(%856, newshape=[196]) /* ty=Tensor[(196), uint8] */;
  %859 = @func_1596(%857, %858) /* ty=(Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(13, 3), float64], Tensor[(1, 450), float64], uint8, Tensor[(196), uint8]) */;
  %860 = @func_1749() /* ty=Tensor[(13, 3), float64] */;
  %861 = %850.2;
  %862 = %853.2;
  %863 = %859.3;
  (%860, %855, meta[relay.Constant][48] /* ty=uint8 */, meta[relay.Constant][49] /* ty=Tensor[(196), uint8] */, %861, %862, meta[relay.Constant][50] /* ty=Tensor[(36, 2), float32] */, %863)
}

def @func_4814(%var_4812: Tensor[(196), uint8]) -> (Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) {
  @func_4811(%var_4812) /* ty=(Tensor[(13, 3), float64], Tensor[(16, 10, 16), int16], Tensor[(2560), int16], Tensor[(13, 3), float64], Tensor[(72), float32], Tensor[(1274), float64], Tensor[(196), uint8]) */
}

def @func_4591() -> (Tensor[(13, 3), float64], Tensor[(13, 3), float64]) {
  %864 = @func_4515() /* ty=(Tensor[(13, 3), float64], Tensor[(5, 15, 6), float32], Tensor[(13, 3), float64], Tensor[(2560), bool]) */;
  %865 = @func_2735() /* ty=(Tensor[(13, 3), float64],) */;
  %866 = %864.2;
  %867 = %865.0;
  (%866, %867)
}

def @func_5583(%var_5581: Tensor[(11, 10, 10), float32], %var_5582: Tensor[(11, 10, 10), float32]) -> (Tensor[(11, 10, 10), float32], Tensor[(196), uint8]) {
  %875 = fn (%var_5560: Tensor[(11, 10, 10), float32], %var_5561: Tensor[(11, 10, 10), float32]) -> (Tensor[(11, 10, 10), float32], Tensor[(196), uint8]) {
    %868 = cast(%var_5561, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
    %869 = shape_of(%var_5560, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%var_5560, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %872 = @func_4735() /* ty=(Tensor[(13, 3), float64], Tensor[(196), uint8], uint8, Tensor[(196), uint8], Tensor[(13, 3), float64], Tensor[(3, 6, 4), float64], Tensor[(36, 2), float32], Tensor[(1, 450), float64]) */;
    %873 = power(%870, %871) /* ty=Tensor[(11, 10, 10), float32] */;
    %874 = %872.1;
    (%873, %874)
  };
  %875(%var_5581, %var_5582) /* ty=(Tensor[(11, 10, 10), float32], Tensor[(196), uint8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen77/build/output.py", line 2323, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:48:09] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

