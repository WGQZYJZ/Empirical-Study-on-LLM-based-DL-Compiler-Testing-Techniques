==========mod==========
#[version = "0.0.5"]
def @func_5671(%var_5644: Tensor[(91), float32]) -> (Tensor[(13, 6, 15), bool], Tensor[(7, 1, 13), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float64]) {
  %0 = @func_2933() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %1 = cast(%var_5644, dtype="float32") /* ty=Tensor[(91), float32] */;
  %2 = reshape(%1, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float32] */;
  %3 = @func_1630(%2) /* ty=(Tensor[(7, 1, 13), float32],) */;
  %4 = @func_3381() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) */;
  %5 = cast(%var_5644, dtype="float64") /* ty=Tensor[(91), float64] */;
  %6 = %0.0;
  %7 = %3.0;
  %8 = %4.1;
  %9 = asin(%5) /* ty=Tensor[(91), float64] */;
  (%6, %7, %8, %9)
}

def @func_5719() -> (Tensor[(13, 6, 15), uint64],) {
  %10 = @func_2939() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%10,)
}

def @func_4892(%var_4864: Tensor[(5, 16, 10), float32], %var_4865: Tensor[(5, 16, 10), float32]) -> Tensor[(5, 16, 10), float32] {
  %11 = cast(%var_4865, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
  %12 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%var_4864, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %15 = floor_mod(%13, %14) /* ty=Tensor[(5, 16, 10), float32] */;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
  acosh(%16) /* ty=Tensor[(5, 16, 10), float32] */
}

def @func_6302() -> (Tensor[(?, 11, 2), float32], Tensor[(13, 6, 15), uint16]) {
  %17 = @func_5620() /* ty=(Tensor[(?, 11, 2), float32],) */;
  %18 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %19 = %17.0;
  %20 = %18.0;
  (%19, %20)
}

def @func_4725() -> Tensor[(13, 6, 15), uint64] {
  @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_2933() -> (Tensor[(13, 6, 15), bool],) {
  %21 = @func_2912() /* ty=Tensor[(13, 6, 15), bool] */;
  (%21,)
}

def @func_2525(%var_2513: Tensor[(9, 15, 4), float32], %var_2514: Tensor[(9, 15, 4), float32]) -> Tensor[(9, 15, 4), float32] {
  %22 = cast(%var_2514, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %23 = shape_of(%var_2513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_2513, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%24, %25) /* ty=Tensor[(9, 15, 4), float32] */
}

def @func_5074() -> (Tensor[(13, 6, 15), bool],) {
  %26 = @func_4091() /* ty=Tensor[(13, 6, 15), bool] */;
  (%26,)
}

def @func_2912() -> Tensor[(13, 6, 15), bool] {
  %27 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %29 = cos(%28) /* ty=Tensor[(13, 6, 15), float32] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%32, %33) /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_2072(%var_2041: Tensor[(7, 15, 13), float32]) -> (Tensor[(7, 15, 13), float32], Tensor[(11, 12, 14), int16], Tensor[(12, 154), int16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(7, 15, 13), float32]) {
  %34 = cast(%var_2041, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 154), int16] */, dtype="int16") /* ty=Tensor[(12, 154), int16] */;
  %36 = reshape(%35, newshape=[11, 12, 14]) /* ty=Tensor[(11, 12, 14), int16] */;
  %37 = @func_703(%36) /* ty=(Tensor[(11, 12, 14), int16],) */;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %39 = reshape(%38, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %40 = @func_461(%39) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %41 = cast(%var_2041, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %42 = atanh(%41) /* ty=Tensor[(7, 15, 13), float32] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %44 = acos(%34) /* ty=Tensor[(7, 15, 13), float32] */;
  %45 = %37.0;
  %46 = %40.0;
  %47 = log(%43) /* ty=Tensor[(7, 15, 13), float32] */;
  (%44, %45, meta[relay.Constant][0] /* ty=Tensor[(12, 154), int16] */, %46, meta[relay.Constant][1] /* ty=Tensor[(1092), float32] */, %47)
}

def @func_4702() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %48 = @func_3918() /* ty=Tensor[(13, 6, 15), bool] */;
  %49 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  (%48, %49)
}

def @func_4631(%var_4624: Tensor[(2, 16, 4), int64]) -> (Tensor[(2, 16, 4), int64],) {
  %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 16, 4), int64] */, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
  %51 = shape_of(%var_4624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%var_4624, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %54 = minimum(%52, %53) /* ty=Tensor[(2, 16, 4), int64] */;
  (%54,)
}

def @func_635(%var_591: Tensor[(6, 2, 6), float64]) -> (Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) {
  %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %56 = reshape(%55, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %57 = @func_461(%56) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %58 = cast(%var_591, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %59 = erf(%58) /* ty=Tensor[(6, 2, 6), float64] */;
  %60 = cast(%var_591, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 330), float32] */, dtype="float32") /* ty=Tensor[(1, 330), float32] */;
  %65 = reshape(%64, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), float32] */;
  %66 = @func_302(%65) /* ty=(Tensor[(11, 3, 10), bool],) */;
  %67 = cast(%59, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %68 = log10(%67) /* ty=Tensor[(6, 2, 6), float32] */;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %70 = sin(%69) /* ty=Tensor[(6, 2, 6), float64] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %72 = %57.0;
  %73 = floor_divide(%62, %63) /* ty=Tensor[(6, 2, 6), float64] */;
  %74 = %66.0;
  %75 = acosh(%71) /* ty=Tensor[(6, 2, 6), float32] */;
  (%72, meta[relay.Constant][3] /* ty=Tensor[(1092), float32] */, %73, %74, meta[relay.Constant][4] /* ty=Tensor[(1, 330), float32] */, %75)
}

def @func_6042() -> (Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32]) {
  %76 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %77 = @func_5074() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %78 = %77.0;
  %79 = cast(%78, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %81 = reshape(%80, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %82 = @func_2725(%81) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) */;
  %83 = %76.0;
  %84 = sqrt(%79) /* ty=Tensor[(13, 6, 15), float32] */;
  %85 = %82.0;
  (%83, %84, %85, meta[relay.Constant][5] /* ty=Tensor[(63), float32] */)
}

def @func_1630(%var_1622: Tensor[(7, 1, 13), float32]) -> (Tensor[(7, 1, 13), float32],) {
  %86 = cast(%var_1622, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
  %87 = cos(%86) /* ty=Tensor[(7, 1, 13), float32] */;
  (%87,)
}

def @func_3229(%var_3191: Tensor[(1, 11, 2), float64]) -> (Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) {
  %88 = cast(%var_3191, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %89 = log10(%88) /* ty=Tensor[(1, 11, 2), float64] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %91 = cast(%89, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %92 = rsqrt(%90) /* ty=Tensor[(1, 11, 2), float64] */;
  %93 = log2(%91) /* ty=Tensor[(1, 11, 2), float64] */;
  (%92, %93)
}

def @func_6186() -> Tensor[(?, 11, 2), float32] {
  %94 = @func_5620() /* ty=(Tensor[(?, 11, 2), float32],) */;
  %94.0
}

def @func_5025(%var_4972: Tensor[(4, 7, 12), int32], %var_4973: Tensor[(4, 7, 12), int32], %var_5019: Tensor[(2310), float64]) -> (Tensor[(4, 7, 12), bool], Tensor[(4, 7, 12), float32], Tensor[(13, 6, 15), bool], Tensor[(15, 11, 14), float64], Tensor[(2310), float64]) {
  %95 = cast(%var_4973, dtype="bool") /* ty=Tensor[(4, 7, 12), bool] */;
  %96 = shape_of(%var_4972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_4972, dtype="bool") /* ty=Tensor[(4, 7, 12), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = cast(%var_4973, dtype="float32") /* ty=Tensor[(4, 7, 12), float32] */;
  %100 = cast(%var_5019, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %101 = reshape(%100, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %102 = @func_3484(%101) /* ty=(Tensor[(2310), float64], Tensor[(15, 11, 14), float64], Tensor[(13, 6, 15), uint64]) */;
  %103 = greater_equal(%97, %98) /* ty=Tensor[(4, 7, 12), bool] */;
  %104 = acosh(%99) /* ty=Tensor[(4, 7, 12), float32] */;
  %105 = @func_4091() /* ty=Tensor[(13, 6, 15), bool] */;
  %106 = %102.1;
  (%103, %104, %105, %106, %var_5019)
}

def @func_2947() -> (Tensor[(13, 6, 15), uint64],) {
  %107 = @func_2939() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%107,)
}

def @func_4946(%var_4912: Tensor[(11, 2), float64]) -> (Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool], Tensor[(22), uint16], Tensor[(11, 2), float64], Tensor[(1, 11, 2), float64]) {
  %108 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %109 = cast(%108, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %110 = reshape(%109, newshape=[13, 6, 15]) /* ty=Tensor[(13, 6, 15), bool] */;
  %111 = cast(%var_4912, dtype="float64") /* ty=Tensor[(11, 2), float64] */;
  %112 = reshape(%111, newshape=[22]) /* ty=Tensor[(22), float64] */;
  %113 = @func_4618(%112) /* ty=(Tensor[(13, 6, 15), uint16], Tensor[(?, 11, 2), uint16], Tensor[(22), uint16]) */;
  %114 = @func_3969() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) */;
  %115 = @func_4522(%110) /* ty=Tensor[(13, 6, 15), bool] */;
  %116 = %113.2;
  %117 = %114.1;
  (%108, %115, %116, %var_4912, %117)
}

def @func_6359(%var_6348: Tensor[(14, 12, 11), uint32]) -> Tensor[(14, 12, 11), uint32] {
  %118 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %119 = cast(%var_6348, dtype="uint32") /* ty=Tensor[(14, 12, 11), uint32] */;
  add(%118, %119) /* ty=Tensor[(14, 12, 11), uint32] */
}

def @func_3111() -> (Tensor[(13, 6, 15), bool],) {
  %120 = @func_2912() /* ty=Tensor[(13, 6, 15), bool] */;
  (%120,)
}

def @func_3576(%var_3564: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), uint64], Tensor[(14, 13, 6), bool], Tensor[(72), float64], Tensor[(13, 6, 15), uint64]) {
  %121 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
  %122 = cast(%var_3564, dtype="float64") /* ty=Tensor[(72), float64] */;
  %123 = reshape(%122, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float64] */;
  %124 = @func_635(%123) /* ty=(Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) */;
  %125 = %121.1;
  %126 = %124.0;
  %127 = @func_2939() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%125, %126, %var_3564, %127)
}

def @func_6089() -> (Tensor[(13, 6, 15), float32],) {
  %128 = @func_5519() /* ty=(Tensor[(13, 6, 15), float32],) */;
  %129 = %128.0;
  (%129,)
}

def @func_5701(%var_5682: Tensor[(22), float64]) -> (Tensor[(22), float32], Tensor[(22), float64]) {
  %130 = @func_3969() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) */;
  %131 = %130.2;
  %132 = cast(%var_5682, dtype="float32") /* ty=Tensor[(22), float32] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(1), int32] */;
  %134 = cast(%131, dtype="float32") /* ty=Tensor[(22), float32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?), float32] */;
  %136 = cast(%var_5682, dtype="float64") /* ty=Tensor[(22), float64] */;
  %137 = shape_of(%131, dtype="int32") /* ty=Tensor[(1), int32] */;
  %138 = cast(%131, dtype="float64") /* ty=Tensor[(22), float64] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?), float64] */;
  %140 = subtract(%134, %135) /* ty=Tensor[(22), float32] */;
  %141 = mod(%138, %139) /* ty=Tensor[(22), float64] */;
  (%140, %141)
}

def @func_2479(%var_2471: Tensor[(9, 4, 9), uint32], %var_2472: Tensor[(9, 4, 9), uint32]) -> (Tensor[(9, 4, 9), uint32],) {
  %142 = cast(%var_2472, dtype="uint32") /* ty=Tensor[(9, 4, 9), uint32] */;
  %143 = shape_of(%var_2471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_2471, dtype="uint32") /* ty=Tensor[(9, 4, 9), uint32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %146 = left_shift(%144, %145) /* ty=Tensor[(9, 4, 9), uint32] */;
  (%146,)
}

def @func_2231(%var_2210: Tensor[(72), float64]) -> (Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) {
  %147 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %148 = cast(meta[relay.Constant][8] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %149 = reshape(%148, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), float32] */;
  %150 = @func_302(%149) /* ty=(Tensor[(11, 3, 10), bool],) */;
  %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(330), float32] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %152 = cast(%var_2210, dtype="float64") /* ty=Tensor[(72), float64] */;
  %153 = reshape(%152, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float64] */;
  %154 = @func_635(%153) /* ty=(Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) */;
  %155 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
  %156 = asin(%155) /* ty=Tensor[(11, 16, 5), float32] */;
  %157 = cast(%156, dtype="int8") /* ty=Tensor[(11, 16, 5), int8] */;
  %158 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int8") /* ty=Tensor[(11, 16, 5), int8] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %161 = bitwise_xor(%159, %160) /* ty=Tensor[(11, 16, 5), int8] */;
  %162 = cast(%161, dtype="uint32") /* ty=Tensor[(11, 16, 5), uint32] */;
  %163 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 5), float32] */, dtype="uint32") /* ty=Tensor[(11, 16, 5), uint32] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %166 = bitwise_and(%164, %165) /* ty=Tensor[(11, 16, 5), uint32] */;
  %167 = cast(%166, dtype="int16") /* ty=Tensor[(11, 16, 5), int16] */;
  %168 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%161, dtype="int16") /* ty=Tensor[(11, 16, 5), int16] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %171 = subtract(%169, %170) /* ty=Tensor[(11, 16, 5), int16] */;
  %172 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 16, 5), int16] */, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = tan(%147) /* ty=Tensor[(11, 16, 5), float64] */;
  %177 = %150.0;
  %178 = exp(%151) /* ty=Tensor[(330), float64] */;
  %179 = %154.2;
  %180 = logical_and(%174, %175) /* ty=Tensor[(11, 16, 5), bool] */;
  (%176, %177, %178, %179, %var_2210, %180)
}

def @func_6525() -> Tensor[(13, 6, 15), uint16] {
  %181 = @func_3642() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %181.0
}

def @func_302(%var_287: Tensor[(11, 3, 10), float32]) -> (Tensor[(11, 3, 10), bool],) {
  %182 = cast(%var_287, dtype="float32") /* ty=Tensor[(11, 3, 10), float32] */;
  %183 = exp(%182) /* ty=Tensor[(11, 3, 10), float32] */;
  %184 = cast(%183, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %185 = shape_of(%var_287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_287, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = not_equal(%186, %187) /* ty=Tensor[(11, 3, 10), bool] */;
  (%188,)
}

def @func_3713() -> (Tensor[(13, 6, 15), uint64],) {
  %189 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%189,)
}

def @func_3918() -> Tensor[(13, 6, 15), bool] {
  @func_2912() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_2391(%var_2389: Tensor[(91), float32]) -> (Tensor[(13, 6), float32], Tensor[(7, 1, 13), float32], Tensor[(91), float32]) {
  %190 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %191 = cast(%var_2389, dtype="float32") /* ty=Tensor[(91), float32] */;
  %192 = reshape(%191, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float32] */;
  %193 = @func_1630(%192) /* ty=(Tensor[(7, 1, 13), float32],) */;
  %194 = sinh(%190) /* ty=Tensor[(13, 6), float32] */;
  %195 = %193.0;
  (%194, %195, %var_2389)
}

def @func_4522(%var_4510: Tensor[(13, 6, 15), bool]) -> Tensor[(13, 6, 15), bool] {
  %196 = @func_3751() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %197 = %196.0;
  %198 = cast(%var_4510, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%200, %201) /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_2780(%var_2757: Tensor[(13, 6, 15), uint64], %var_2771: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), bool], Tensor[(330), float64], Tensor[(72), float64]) {
  %202 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
  %203 = %202.1;
  %204 = cast(%var_2757, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%203, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %208 = cast(%var_2771, dtype="float64") /* ty=Tensor[(72), float64] */;
  %209 = reshape(%208, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %210 = @func_2231(%209) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) */;
  %211 = not_equal(%206, %207) /* ty=Tensor[(13, 6, 15), bool] */;
  %212 = %210.2;
  (%211, %212, %var_2771)
}

def @func_6221(%var_6193: Tensor[(16, 1, 7), uint16]) -> (Tensor[(16, 2, 7), uint16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(14, 13, 6), bool]) {
  %213 = cast(%var_6193, dtype="uint16") /* ty=Tensor[(16, 1, 7), uint16] */;
  %214 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 2, 7), uint16] */, dtype="uint16") /* ty=Tensor[(16, 2, 7), uint16] */;
  %215 = cast(meta[relay.Constant][12] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %216 = reshape(%215, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %217 = @func_461(%216) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %218 = cast(meta[relay.Constant][12] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %219 = reshape(%218, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %220 = @func_461(%219) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %221 = right_shift(%213, %214) /* ty=Tensor[(16, 2, 7), uint16] */;
  %222 = %217.0;
  %223 = %220.0;
  (%221, %222, meta[relay.Constant][12] /* ty=Tensor[(1092), float32] */, %223)
}

def @func_6795() -> (Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %224 = @func_6042() /* ty=(Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32]) */;
  %225 = @func_4747() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %226 = @func_6272() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %227 = %224.0;
  %228 = %225.0;
  %229 = %226.0;
  (%227, %228, %229)
}

def @func_3351() -> Tensor[(13, 6, 15), bool] {
  %230 = @func_3111() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %230.0
}

def @func_6871() -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %231 = @func_4747() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %232 = @func_5967() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */;
  %233 = %231.3;
  %234 = %232.0;
  %235 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  (%233, %234, %235)
}

def @func_88(%var_66: Tensor[(2, 7, 11), uint64]) -> Tensor[(2, 7, 11), bool] {
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 7, 11), uint64] */, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
  %237 = shape_of(%var_66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%var_66, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%238, %239) /* ty=Tensor[(2, 7, 11), bool] */
}

def @func_3751() -> (Tensor[(13, 6, 15), bool],) {
  %240 = @func_2933() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %241 = %240.0;
  (%241,)
}

def @func_3766(%var_3753: Tensor[(13, 16, 16), float32]) -> Tensor[(13, 16, 16), float32] {
  %242 = cast(%var_3753, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
  %243 = asin(%242) /* ty=Tensor[(13, 16, 16), float32] */;
  %244 = cast(%var_3753, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%246, %247) /* ty=Tensor[(13, 16, 16), float32] */
}

def @func_5330() -> (Tensor[(13, 6, 15), bool], Tensor[(?, 11, 2), uint32]) {
  %248 = cast(meta[relay.Constant][14] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %249 = reshape(%248, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), float64] */;
  %250 = @func_3229(%249) /* ty=(Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) */;
  %251 = %250.1;
  %252 = cast(meta[relay.Constant][14] /* ty=Tensor[(22), float64] */, dtype="uint32") /* ty=Tensor[(22), uint32] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="uint32") /* ty=Tensor[(1, 11, 2), uint32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %256 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  %257 = left_shift(%254, %255) /* ty=Tensor[(?, 11, 2), uint32] */;
  (%256, %257)
}

def @func_1701(%var_1693: Tensor[(15, 11, 14), float64]) -> (Tensor[(15, 11, 14), float64],) {
  %258 = cast(%var_1693, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
  %259 = atan(%258) /* ty=Tensor[(15, 11, 14), float64] */;
  (%259,)
}

def @func_6493(%var_6486: Tensor[(6, 15, 14), float32]) -> (Tensor[(6, 15, 14), float32], Tensor[(14, 7, 10), int8], Tensor[(980), int8], Tensor[(1092), float32]) {
  %260 = cast(%var_6486, dtype="float32") /* ty=Tensor[(6, 15, 14), float32] */;
  %261 = cast(meta[relay.Constant][15] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %262 = cast(meta[relay.Constant][15] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %263 = cast(meta[relay.Constant][16] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %264 = reshape(%261, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), int8] */;
  %265 = reshape(%262, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), int8] */;
  %266 = reshape(%263, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %267 = @func_3619(%264, %265, %266) /* ty=(Tensor[(14, 7, 10), int8], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) */;
  %268 = cosh(%260) /* ty=Tensor[(6, 15, 14), float32] */;
  %269 = %267.0;
  (%268, %269, meta[relay.Constant][15] /* ty=Tensor[(980), int8] */, meta[relay.Constant][16] /* ty=Tensor[(1092), float32] */)
}

def @func_4091() -> Tensor[(13, 6, 15), bool] {
  %270 = @func_3751() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %270.0
}

def @func_6432() -> (Tensor[(?, 11, 2), int64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float32]) {
  %271 = @func_6186() /* ty=Tensor[(?, 11, 2), float32] */;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
  %273 = atanh(%272) /* ty=Tensor[(?, 11, 2), float64] */;
  %274 = cast(%271, dtype="int64") /* ty=Tensor[(?, 11, 2), int64] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="int64") /* ty=Tensor[(?, 11, 2), int64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %278 = cast(%271, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
  %279 = cast(%271, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
  %280 = cast(%273, dtype="float32") /* ty=Tensor[(?, 11, 2), float32] */;
  %281 = bitwise_xor(%276, %277) /* ty=Tensor[(?, 11, 2), int64] */;
  %282 = sqrt(%278) /* ty=Tensor[(?, 11, 2), float64] */;
  %283 = log(%279) /* ty=Tensor[(?, 11, 2), float64] */;
  %284 = asinh(%280) /* ty=Tensor[(?, 11, 2), float32] */;
  (%281, %282, %283, %284)
}

def @func_5620() -> (Tensor[(?, 11, 2), float32],) {
  %285 = @func_5330() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(?, 11, 2), uint32]) */;
  %286 = %285.1;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
  %288 = asin(%287) /* ty=Tensor[(?, 11, 2), float64] */;
  %289 = cast(%288, dtype="float32") /* ty=Tensor[(?, 11, 2), float32] */;
  %290 = exp(%289) /* ty=Tensor[(?, 11, 2), float32] */;
  (%290,)
}

def @func_4618(%var_4614: Tensor[(22), float64]) -> (Tensor[(13, 6, 15), uint16], Tensor[(?, 11, 2), uint16], Tensor[(22), uint16]) {
  %291 = @func_3642() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %293 = reshape(%292, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), float64] */;
  %294 = @func_3229(%293) /* ty=(Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) */;
  %295 = %294.0;
  %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(22), float64] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="uint16") /* ty=Tensor[(1, 11, 2), uint16] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %300 = cast(%var_4614, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %301 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(22), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %302 = cast(meta[relay.Constant][17] /* ty=Tensor[(22), float64] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %304 = %291.0;
  %305 = bitwise_and(%298, %299) /* ty=Tensor[(?, 11, 2), uint16] */;
  %306 = bitwise_and(%302, %303) /* ty=Tensor[(22), uint16] */;
  (%304, %305, %306)
}

def @func_4969() -> (Tensor[(7, 1, 13), float32],) {
  %307 = @func_4849() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(7, 1, 13), float32], Tensor[(91), float32], Tensor[(13, 6, 15), float32]) */;
  %308 = %307.1;
  (%308,)
}

def @func_4669(%var_4645: Tensor[(8, 5, 15), uint32], %var_4646: Tensor[(8, 5, 15), uint32]) -> Tensor[(8, 5, 15), uint32] {
  %309 = cast(%var_4646, dtype="uint32") /* ty=Tensor[(8, 5, 15), uint32] */;
  %310 = shape_of(%var_4645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%var_4645, dtype="uint32") /* ty=Tensor[(8, 5, 15), uint32] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%311, %312) /* ty=Tensor[(8, 5, 15), uint32] */
}

def @func_6594() -> Tensor[(13, 6, 15), float32] {
  @func_4531() /* ty=Tensor[(13, 6, 15), float32] */
}

def @func_6661() -> Tensor[(13, 6, 15), bool] {
  @func_4091() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_3381() -> (Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) {
  %313 = @func_2947() /* ty=(Tensor[(13, 6, 15), uint64],) */;
  %314 = %313.0;
  %315 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  (%314, %315)
}

def @func_4336(%var_4226: Tensor[(5, 9, 13), uint32], %var_4275: Tensor[(63), float32]) -> (Tensor[(5, 9, 13), bool], Tensor[(5, 9, 13), int64], Tensor[(14, 13, 6), bool], Tensor[(42), uint8], Tensor[(63), float32], Tensor[(13, 6, 15), bool], Tensor[(11, 16, 5), uint64]) {
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 9, 13), uint32] */, dtype="bool") /* ty=Tensor[(5, 9, 13), bool] */;
  %317 = shape_of(%var_4226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_4226, dtype="bool") /* ty=Tensor[(5, 9, 13), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 9, 13), uint32] */, dtype="int64") /* ty=Tensor[(5, 9, 13), int64] */;
  %321 = shape_of(%var_4226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_4226, dtype="int64") /* ty=Tensor[(5, 9, 13), int64] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %324 = cast(meta[relay.Constant][20] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
  %325 = reshape(%324, newshape=[6, 7]) /* ty=Tensor[(6, 7), uint8] */;
  %326 = @func_1437(%325) /* ty=(Tensor[(6, 7), bool], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) */;
  %327 = @func_2933() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %328 = cast(%var_4275, dtype="float32") /* ty=Tensor[(63), float32] */;
  %329 = cast(meta[relay.Constant][20] /* ty=Tensor[(42), uint8] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %330 = reshape(%328, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %331 = reshape(%329, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %332 = @func_3053(%330, %331) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) */;
  %333 = %332.1;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %335 = sigmoid(%334) /* ty=Tensor[(11, 16, 5), float64] */;
  %336 = cast(%333, dtype="uint64") /* ty=Tensor[(11, 16, 5), uint64] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="uint64") /* ty=Tensor[(11, 16, 5), uint64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %340 = greater_equal(%318, %319) /* ty=Tensor[(5, 9, 13), bool] */;
  %341 = bitwise_and(%322, %323) /* ty=Tensor[(5, 9, 13), int64] */;
  %342 = %326.1;
  %343 = %327.0;
  %344 = logical_xor(%338, %339) /* ty=Tensor[(11, 16, 5), uint64] */;
  (%340, %341, %342, meta[relay.Constant][20] /* ty=Tensor[(42), uint8] */, %var_4275, %343, %344)
}

def @func_3484(%var_3460: Tensor[(2310), float64]) -> (Tensor[(2310), float64], Tensor[(15, 11, 14), float64], Tensor[(13, 6, 15), uint64]) {
  %345 = cast(%var_3460, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %346 = reshape(%345, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), float64] */;
  %347 = @func_1701(%346) /* ty=(Tensor[(15, 11, 14), float64],) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
  %350 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 6, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %355 = rsqrt(%349) /* ty=Tensor[(15, 11, 14), float64] */;
  %356 = bitwise_or(%353, %354) /* ty=Tensor[(13, 6, 15), uint64] */;
  (%var_3460, %355, %356)
}

def @func_5206(%var_5181: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), bool], Tensor[(72), float64], Tensor[(9, 15, 4), float32], Tensor[(540, 1), float32], Tensor[(2, 16, 4), int64], Tensor[(128), int64], Tensor[(13, 6, 2), bool], Tensor[(72), float64]) {
  %357 = cast(%var_5181, dtype="float64") /* ty=Tensor[(72), float64] */;
  %358 = reshape(%357, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %359 = @func_2231(%358) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) */;
  %360 = cast(meta[relay.Constant][22] /* ty=Tensor[(540, 1), float32] */, dtype="float32") /* ty=Tensor[(540, 1), float32] */;
  %361 = cast(meta[relay.Constant][22] /* ty=Tensor[(540, 1), float32] */, dtype="float32") /* ty=Tensor[(540, 1), float32] */;
  %362 = reshape(%360, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
  %363 = reshape(%361, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
  %364 = cast(meta[relay.Constant][23] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
  %365 = reshape(%364, newshape=[2, 16, 4]) /* ty=Tensor[(2, 16, 4), int64] */;
  %366 = @func_4631(%365) /* ty=(Tensor[(2, 16, 4), int64],) */;
  %367 = @func_5124() /* ty=(Tensor[(5, 16, 10), float32], Tensor[(1, 800), float32], Tensor[(13, 6, 2), bool], Tensor[(13, 6, 15), float32]) */;
  %368 = cast(%var_5181, dtype="float64") /* ty=Tensor[(72), float64] */;
  %369 = @func_4091() /* ty=Tensor[(13, 6, 15), bool] */;
  %370 = %359.4;
  %371 = @func_2525(%362, %363) /* ty=Tensor[(9, 15, 4), float32] */;
  %372 = %366.0;
  %373 = %367.2;
  %374 = atan(%368) /* ty=Tensor[(72), float64] */;
  (%369, %370, %371, meta[relay.Constant][22] /* ty=Tensor[(540, 1), float32] */, %372, meta[relay.Constant][23] /* ty=Tensor[(128), int64] */, %373, %374)
}

def @func_3174() -> (Tensor[(13, 6, 15), uint16],) {
  %375 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %376 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 6, 15), uint64] */, dtype="uint16") /* ty=Tensor[(13, 6, 15), uint16] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="uint16") /* ty=Tensor[(13, 6, 15), uint16] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %380 = subtract(%378, %379) /* ty=Tensor[(13, 6, 15), uint16] */;
  (%380,)
}

def @func_6340(%var_6330: Tensor[(15, 4, 4), float64]) -> (Tensor[(15, 4, 4), float64],) {
  %381 = cast(%var_6330, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
  %382 = exp(%381) /* ty=Tensor[(15, 4, 4), float64] */;
  (%382,)
}

def @func_3412(%var_3399: Tensor[(13, 6, 15), float32]) -> (Tensor[(13, 6, 15), float32],) {
  %383 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
  %384 = %383.0;
  %385 = cast(%var_3399, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%384, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %389 = power(%387, %388) /* ty=Tensor[(13, 6, 15), float32] */;
  (%389,)
}

def @func_4849() -> (Tensor[(13, 6, 15), uint64], Tensor[(7, 1, 13), float32], Tensor[(91), float32], Tensor[(13, 6, 15), float32]) {
  %390 = cast(meta[relay.Constant][25] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
  %391 = reshape(%390, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float32] */;
  %392 = @func_1630(%391) /* ty=(Tensor[(7, 1, 13), float32],) */;
  %393 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
  %394 = @func_4725() /* ty=Tensor[(13, 6, 15), uint64] */;
  %395 = %392.0;
  %396 = %393.0;
  (%394, %395, meta[relay.Constant][25] /* ty=Tensor[(91), float32] */, %396)
}

def @func_5431(%var_5417: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float32], Tensor[(91), float32], Tensor[(8, 5, 15), uint32], Tensor[(300, 2), uint32], Tensor[(6, 2, 6), float32], Tensor[(72), float64]) {
  %397 = @func_3381() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) */;
  %398 = %397.0;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %400 = @func_3751() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %401 = cast(meta[relay.Constant][26] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
  %402 = reshape(%401, newshape=[91]) /* ty=Tensor[(91), float32] */;
  %403 = @func_2391(%402) /* ty=(Tensor[(13, 6), float32], Tensor[(7, 1, 13), float32], Tensor[(91), float32]) */;
  %404 = cast(meta[relay.Constant][27] /* ty=Tensor[(300, 2), uint32] */, dtype="uint32") /* ty=Tensor[(300, 2), uint32] */;
  %405 = cast(meta[relay.Constant][27] /* ty=Tensor[(300, 2), uint32] */, dtype="uint32") /* ty=Tensor[(300, 2), uint32] */;
  %406 = reshape(%404, newshape=[8, 5, 15]) /* ty=Tensor[(8, 5, 15), uint32] */;
  %407 = reshape(%405, newshape=[8, 5, 15]) /* ty=Tensor[(8, 5, 15), uint32] */;
  %408 = cast(%var_5417, dtype="float64") /* ty=Tensor[(72), float64] */;
  %409 = reshape(%408, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float64] */;
  %410 = @func_635(%409) /* ty=(Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) */;
  %411 = exp(%399) /* ty=Tensor[(13, 6, 15), float32] */;
  %412 = %400.0;
  %413 = %403.2;
  %414 = @func_4669(%406, %407) /* ty=Tensor[(8, 5, 15), uint32] */;
  %415 = %410.5;
  (%411, %412, %413, meta[relay.Constant][26] /* ty=Tensor[(91), float32] */, %414, meta[relay.Constant][27] /* ty=Tensor[(300, 2), uint32] */, %415, %var_5417)
}

def @func_6325() -> Tensor[(13, 6, 15), uint64] {
  %416 = @func_5719() /* ty=(Tensor[(13, 6, 15), uint64],) */;
  %416.0
}

def @func_3969() -> (Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) {
  %417 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %418 = cast(meta[relay.Constant][28] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %419 = reshape(%418, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), float64] */;
  %420 = @func_3229(%419) /* ty=(Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) */;
  %421 = %417.0;
  %422 = %420.1;
  (%421, %422, meta[relay.Constant][28] /* ty=Tensor[(22), float64] */)
}

def @func_5231() -> (Tensor[(13, 6, 15), bool],) {
  %423 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  (%423,)
}

def @func_1437(%var_1419: Tensor[(6, 7), uint8]) -> (Tensor[(6, 7), bool], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) {
  %424 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 7), uint8] */, dtype="bool") /* ty=Tensor[(6, 7), bool] */;
  %425 = shape_of(%var_1419, dtype="int32") /* ty=Tensor[(2), int32] */;
  %426 = cast(%var_1419, dtype="bool") /* ty=Tensor[(6, 7), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %428 = cast(meta[relay.Constant][30] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %429 = reshape(%428, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %430 = @func_461(%429) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %431 = not_equal(%426, %427) /* ty=Tensor[(6, 7), bool] */;
  %432 = %430.0;
  (%431, %432, meta[relay.Constant][30] /* ty=Tensor[(1092), float32] */)
}

def @main() -> (Tensor[(13, 6, 15), float64],) {
  %433 = @func_4702() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */;
  %434 = %433.1;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(13, 6, 15), float64] */;
  %436 = cosh(%435) /* ty=Tensor[(13, 6, 15), float64] */;
  (%436,)
}

def @func_2725(%var_2718: Tensor[(63), float32]) -> (Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) {
  %437 = cast(meta[relay.Constant][31] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %438 = reshape(%437, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %439 = @func_2231(%438) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) */;
  %440 = cast(meta[relay.Constant][32] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %441 = reshape(%440, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), uint64] */;
  %442 = @func_88(%441) /* ty=Tensor[(2, 7, 11), bool] */;
  %443 = cast(meta[relay.Constant][32] /* ty=Tensor[(154), uint64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %447 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(13, 6, 15), float64] */;
  %449 = cast(%var_2718, dtype="float32") /* ty=Tensor[(63), float32] */;
  %450 = cast(%var_2718, dtype="float32") /* ty=Tensor[(63), float32] */;
  %451 = reshape(%449, newshape=[9, 7]) /* ty=Tensor[(9, 7), float32] */;
  %452 = reshape(%450, newshape=[9, 7]) /* ty=Tensor[(9, 7), float32] */;
  %453 = @func_941(%451, %452) /* ty=(Tensor[(9, 7), float32], Tensor[(11, 12, 14), int16], Tensor[(1848), int16]) */;
  %454 = %439.0;
  %455 = mod(%445, %446) /* ty=Tensor[(2, 7, 11), float32] */;
  %456 = acos(%448) /* ty=Tensor[(13, 6, 15), float64] */;
  %457 = %453.2;
  (%454, meta[relay.Constant][31] /* ty=Tensor[(72), float64] */, %455, %456, %457, %var_2718)
}

def @func_4747() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) {
  %458 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %461 = reshape(%460, newshape=[13, 6, 15]) /* ty=Tensor[(13, 6, 15), bool] */;
  %462 = @func_3993(%461) /* ty=(Tensor[(13, 6, 15), int8],) */;
  %463 = @func_3111() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %464 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
  %465 = %462.0;
  %466 = %463.0;
  %467 = %464.2;
  (%459, %465, %466, %467)
}

def @func_2594() -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) {
  %468 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %470 = cast(%468, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %471 = erf(%469) /* ty=Tensor[(13, 6, 15), float32] */;
  %472 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %473 = asinh(%470) /* ty=Tensor[(13, 6, 15), float32] */;
  (%471, %472, %473)
}

def @func_703(%var_695: Tensor[(11, 12, 14), int16]) -> (Tensor[(11, 12, 14), int16],) {
  %474 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 1, 14), int16] */, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
  %475 = cast(%var_695, dtype="int16") /* ty=Tensor[(11, 12, 14), int16] */;
  %476 = right_shift(%474, %475) /* ty=Tensor[(11, 12, 14), int16] */;
  (%476,)
}

def @func_4014() -> (Tensor[(1, 8, 6), float32],) {
  %477 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 6), float32] */;
  %478 = asinh(%477) /* ty=Tensor[(1, 8, 6), float32] */;
  (%478,)
}

def @func_2554() -> Tensor[(13, 6, 15), uint64] {
  %479 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 6, 15), float32] */, dtype="float64") /* ty=Tensor[(13, 6, 15), float64] */;
  %480 = log10(%479) /* ty=Tensor[(13, 6, 15), float64] */;
  %481 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 6, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %482 = tan(%481) /* ty=Tensor[(13, 6, 15), float32] */;
  %483 = cast(%482, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %484 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%480, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%485, %486) /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_3993(%var_3981: Tensor[(13, 6, 15), bool]) -> (Tensor[(13, 6, 15), int8],) {
  %487 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  %488 = cast(%var_3981, dtype="int8") /* ty=Tensor[(13, 6, 15), int8] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="int8") /* ty=Tensor[(13, 6, 15), int8] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %492 = minimum(%490, %491) /* ty=Tensor[(13, 6, 15), int8] */;
  (%492,)
}

def @func_5519() -> (Tensor[(13, 6, 15), float32],) {
  %493 = @func_4531() /* ty=Tensor[(13, 6, 15), float32] */;
  (%493,)
}

def @func_6272() -> (Tensor[(13, 6, 15), bool],) {
  %494 = @func_3111() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %495 = %494.0;
  (%495,)
}

def @func_5967() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %496 = @func_3918() /* ty=Tensor[(13, 6, 15), bool] */;
  %497 = cast(%496, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %498 = reshape(%497, newshape=[13, 6, 15]) /* ty=Tensor[(13, 6, 15), bool] */;
  %499 = @func_4522(%498) /* ty=Tensor[(13, 6, 15), bool] */;
  (%496, %499)
}

def @func_5124() -> (Tensor[(5, 16, 10), float32], Tensor[(1, 800), float32], Tensor[(13, 6, 2), bool], Tensor[(13, 6, 15), float32]) {
  %500 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 800), float32] */, dtype="float32") /* ty=Tensor[(1, 800), float32] */;
  %501 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 800), float32] */, dtype="float32") /* ty=Tensor[(1, 800), float32] */;
  %502 = reshape(%500, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
  %503 = reshape(%501, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
  %504 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 6, 2), int8] */, dtype="float32") /* ty=Tensor[(13, 6, 2), float32] */;
  %505 = atan(%504) /* ty=Tensor[(13, 6, 2), float32] */;
  %506 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 6, 2), int8] */, dtype="int8") /* ty=Tensor[(13, 6, 2), int8] */;
  %507 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(13, 6, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 6, 2), int8] */, dtype="int8") /* ty=Tensor[(13, 6, 2), int8] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %510 = bitwise_or(%508, %509) /* ty=Tensor[(13, 6, 2), int8] */;
  %511 = cast(%510, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
  %512 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%505, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = less_equal(%513, %514) /* ty=Tensor[(13, 6, 2), bool] */;
  %516 = cast(%515, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
  %517 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%505, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %520 = @func_4892(%502, %503) /* ty=Tensor[(5, 16, 10), float32] */;
  %521 = logical_or(%518, %519) /* ty=Tensor[(13, 6, 2), bool] */;
  %522 = @func_4084() /* ty=Tensor[(13, 6, 15), float32] */;
  (%520, meta[relay.Constant][36] /* ty=Tensor[(1, 800), float32] */, %521, %522)
}

def @func_6706() -> Tensor[(13, 6, 15), bool] {
  %523 = @func_5231() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %523.0
}

def @func_5471() -> (Tensor[(13, 6, 15), bool],) {
  %524 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  (%524,)
}

def @func_4181(%var_4167: Tensor[(3, 24), float64]) -> (Tensor[(10, 11, 2), int32], Tensor[(13, 6, 15), uint64], Tensor[(3, 24), float64], Tensor[(10, 11, 2), bool]) {
  %525 = @func_3969() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) */;
  %526 = %525.1;
  %527 = cast(%526, dtype="int32") /* ty=Tensor[(1, 11, 2), int32] */;
  %528 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 11, 2), float64] */, dtype="int32") /* ty=Tensor[(10, 11, 2), int32] */;
  %529 = cast(%var_4167, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %530 = reshape(%529, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %531 = @func_3576(%530) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(14, 13, 6), bool], Tensor[(72), float64], Tensor[(13, 6, 15), uint64]) */;
  %532 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 11, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %533 = cast(%526, dtype="bool") /* ty=Tensor[(1, 11, 2), bool] */;
  %534 = maximum(%527, %528) /* ty=Tensor[(10, 11, 2), int32] */;
  %535 = %531.3;
  %536 = less(%532, %533) /* ty=Tensor[(10, 11, 2), bool] */;
  (%534, %535, %var_4167, %536)
}

def @func_3686() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) {
  %537 = @func_3381() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) */;
  %538 = @func_3642() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %541 = %537.1;
  %542 = asin(%540) /* ty=Tensor[(13, 6, 15), float32] */;
  (%541, %542)
}

def @func_461(%var_456: Tensor[(14, 13, 6), float32]) -> (Tensor[(14, 13, 6), bool],) {
  %543 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 13, 6), float32] */, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %544 = shape_of(%var_456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_456, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = greater_equal(%545, %546) /* ty=Tensor[(14, 13, 6), bool] */;
  (%547,)
}

def @func_1839(%var_1793: Tensor[(3, 14), float32]) -> (Tensor[(3, 14), float32],) {
  %548 = cast(%var_1793, dtype="float32") /* ty=Tensor[(3, 14), float32] */;
  %549 = cosh(%548) /* ty=Tensor[(3, 14), float32] */;
  (%549,)
}

def @func_941(%var_927: Tensor[(9, 7), float32], %var_928: Tensor[(9, 7), float32]) -> (Tensor[(9, 7), float32], Tensor[(11, 12, 14), int16], Tensor[(1848), int16]) {
  %550 = cast(%var_928, dtype="float32") /* ty=Tensor[(9, 7), float32] */;
  %551 = shape_of(%var_927, dtype="int32") /* ty=Tensor[(2), int32] */;
  %552 = cast(%var_927, dtype="float32") /* ty=Tensor[(9, 7), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %554 = cast(meta[relay.Constant][41] /* ty=Tensor[(1848), int16] */, dtype="int16") /* ty=Tensor[(1848), int16] */;
  %555 = reshape(%554, newshape=[11, 12, 14]) /* ty=Tensor[(11, 12, 14), int16] */;
  %556 = @func_703(%555) /* ty=(Tensor[(11, 12, 14), int16],) */;
  %557 = power(%552, %553) /* ty=Tensor[(9, 7), float32] */;
  %558 = %556.0;
  (%557, %558, meta[relay.Constant][41] /* ty=Tensor[(1848), int16] */)
}

def @func_1181(%var_1160: Tensor[(11, 8, 10), uint32], %var_1161: Tensor[(11, 8, 10), uint32], %var_1177: Tensor[(154), uint64]) -> (Tensor[(11, 8, 10), uint32], Tensor[(11, 8, 10), float32], Tensor[(2, 7, 11), bool], Tensor[(154), uint64]) {
  %559 = cast(%var_1161, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
  %560 = shape_of(%var_1160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_1160, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %563 = bitwise_and(%561, %562) /* ty=Tensor[(11, 8, 10), uint32] */;
  %564 = cast(%var_1160, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %568 = cast(%var_1160, dtype="float32") /* ty=Tensor[(11, 8, 10), float32] */;
  %569 = cast(%var_1177, dtype="uint64") /* ty=Tensor[(154), uint64] */;
  %570 = reshape(%569, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), uint64] */;
  %571 = right_shift(%566, %567) /* ty=Tensor[(11, 8, 10), uint32] */;
  %572 = atanh(%568) /* ty=Tensor[(11, 8, 10), float32] */;
  %573 = @func_88(%570) /* ty=Tensor[(2, 7, 11), bool] */;
  (%571, %572, %573, %var_1177)
}

def @func_6685() -> (Tensor[(7, 1, 13), float32],) {
  %574 = @func_4969() /* ty=(Tensor[(7, 1, 13), float32],) */;
  %575 = %574.0;
  (%575,)
}

def @func_6384(%var_6371: Tensor[(13, 16, 14), int32], %var_6372: Tensor[(13, 16, 14), int32]) -> Tensor[(13, 16, 14), int32] {
  %576 = cast(%var_6372, dtype="int32") /* ty=Tensor[(13, 16, 14), int32] */;
  %577 = shape_of(%var_6371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_6371, dtype="int32") /* ty=Tensor[(13, 16, 14), int32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%578, %579) /* ty=Tensor[(13, 16, 14), int32] */
}

def @func_3619(%var_3606: Tensor[(14, 7, 10), int8], %var_3607: Tensor[(14, 7, 10), int8], %var_3617: Tensor[(1092), float32]) -> (Tensor[(14, 7, 10), int8], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) {
  %580 = cast(%var_3607, dtype="int8") /* ty=Tensor[(14, 7, 10), int8] */;
  %581 = shape_of(%var_3606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%var_3606, dtype="int8") /* ty=Tensor[(14, 7, 10), int8] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %584 = cast(%var_3617, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %585 = reshape(%584, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %586 = @func_461(%585) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %587 = left_shift(%582, %583) /* ty=Tensor[(14, 7, 10), int8] */;
  %588 = %586.0;
  (%587, %588, %var_3617)
}

def @func_4531() -> Tensor[(13, 6, 15), float32] {
  %589 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %589.1
}

def @func_2939() -> Tensor[(13, 6, 15), uint64] {
  @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_3642() -> (Tensor[(13, 6, 15), uint16],) {
  %590 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %591 = %590.0;
  (%591,)
}

def @func_3053(%var_3023: Tensor[(63), float32], %var_3028: Tensor[(42), float32]) -> (Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) {
  %592 = cast(%var_3023, dtype="float32") /* ty=Tensor[(63), float32] */;
  %593 = reshape(%592, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %594 = @func_2725(%593) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) */;
  %595 = cast(%var_3028, dtype="float32") /* ty=Tensor[(42), float32] */;
  %596 = reshape(%595, newshape=[3, 14]) /* ty=Tensor[(3, 14), float32] */;
  %597 = @func_1839(%596) /* ty=(Tensor[(3, 14), float32],) */;
  %598 = cast(%var_3028, dtype="float64") /* ty=Tensor[(42), float64] */;
  %599 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %600 = %594.0;
  %601 = %597.0;
  %602 = log(%598) /* ty=Tensor[(42), float64] */;
  (%599, %600, %var_3023, %601, %602)
}

def @func_4084() -> Tensor[(13, 6, 15), float32] {
  %603 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %604 = %603.0;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  log2(%605) /* ty=Tensor[(13, 6, 15), float32] */
}

def @func_5927(%var_5901: Tensor[(15, 8, 6), float64]) -> (Tensor[(15, 8, 6), bool],) {
  %606 = @func_4014() /* ty=(Tensor[(1, 8, 6), float32],) */;
  %607 = %606.0;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %609 = erf(%608) /* ty=Tensor[(1, 8, 6), float64] */;
  %610 = cast(%609, dtype="uint16") /* ty=Tensor[(1, 8, 6), uint16] */;
  %611 = cast(%var_5901, dtype="uint16") /* ty=Tensor[(15, 8, 6), uint16] */;
  %612 = logical_xor(%610, %611) /* ty=Tensor[(15, 8, 6), uint16] */;
  %613 = cast(%var_5901, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = greater(%615, %616) /* ty=Tensor[(15, 8, 6), bool] */;
  (%617,)
}

def @func_4448(%var_4402: Tensor[(324), uint32], %var_4443: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(42), float32], Tensor[(324), int16], Tensor[(9, 15, 4), float32], Tensor[(540), float32], Tensor[(10, 11, 2), bool], Tensor[(72), float64]) {
  %618 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %619 = %618.0;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %621 = cast(meta[relay.Constant][42] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %622 = cast(meta[relay.Constant][43] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %623 = reshape(%621, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %624 = reshape(%622, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %625 = @func_3053(%623, %624) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) */;
  %626 = cast(%var_4402, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %627 = cast(%var_4402, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %628 = reshape(%626, newshape=[9, 4, 9]) /* ty=Tensor[(9, 4, 9), uint32] */;
  %629 = reshape(%627, newshape=[9, 4, 9]) /* ty=Tensor[(9, 4, 9), uint32] */;
  %630 = @func_2479(%628, %629) /* ty=(Tensor[(9, 4, 9), uint32],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="int16") /* ty=Tensor[(9, 4, 9), int16] */;
  %633 = shape_of(%var_4402, dtype="int32") /* ty=Tensor[(1), int32] */;
  %634 = cast(%var_4402, dtype="int16") /* ty=Tensor[(324), int16] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?), int16] */;
  %636 = cast(meta[relay.Constant][44] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %637 = cast(meta[relay.Constant][44] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %638 = reshape(%636, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
  %639 = reshape(%637, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
  %640 = cast(%var_4443, dtype="float64") /* ty=Tensor[(72), float64] */;
  %641 = reshape(%640, newshape=[3, 24]) /* ty=Tensor[(3, 24), float64] */;
  %642 = @func_4181(%641) /* ty=(Tensor[(10, 11, 2), int32], Tensor[(13, 6, 15), uint64], Tensor[(3, 24), float64], Tensor[(10, 11, 2), bool]) */;
  %643 = sin(%620) /* ty=Tensor[(13, 6, 15), float32] */;
  %644 = %625.1;
  %645 = bitwise_or(%634, %635) /* ty=Tensor[(324), int16] */;
  %646 = @func_2525(%638, %639) /* ty=Tensor[(9, 15, 4), float32] */;
  %647 = %642.3;
  (%643, %644, meta[relay.Constant][42] /* ty=Tensor[(63), float32] */, meta[relay.Constant][43] /* ty=Tensor[(42), float32] */, %645, %646, meta[relay.Constant][44] /* ty=Tensor[(540), float32] */, %647, %var_4443)
}

def @func_5478() -> (Tensor[(13, 6, 15), uint64],) {
  %648 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%648,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1703(%var_1702: Tensor[(15, 11, 14), float64]) -> (Tensor[(15, 11, 14), float64],) {
  %2 = fn (%var_1693: Tensor[(15, 11, 14), float64]) -> (Tensor[(15, 11, 14), float64],) {
    %0 = cast(%var_1693, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
    %1 = atan(%0) /* ty=Tensor[(15, 11, 14), float64] */;
    (%1,)
  };
  %2(%var_1702) /* ty=(Tensor[(15, 11, 14), float64],) */
}

def @func_2934() -> (Tensor[(13, 6, 15), bool],) {
  %4 = fn () -> (Tensor[(13, 6, 15), bool],) {
    %3 = @func_2912() /* ty=Tensor[(13, 6, 15), bool] */;
    (%3,)
  };
  %4() /* ty=(Tensor[(13, 6, 15), bool],) */
}

def @func_2525(%var_2513: Tensor[(9, 15, 4), float32], %var_2514: Tensor[(9, 15, 4), float32]) -> Tensor[(9, 15, 4), float32] {
  %5 = cast(%var_2514, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %6 = shape_of(%var_2513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_2513, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%7, %8) /* ty=Tensor[(9, 15, 4), float32] */
}

def @func_5030(%var_5027: Tensor[(4, 7, 12), int32], %var_5028: Tensor[(4, 7, 12), int32], %var_5029: Tensor[(2310), float64]) -> (Tensor[(4, 7, 12), bool], Tensor[(4, 7, 12), float32], Tensor[(13, 6, 15), bool], Tensor[(15, 11, 14), float64], Tensor[(2310), float64]) {
  @func_5025(%var_5027, %var_5028, %var_5029) /* ty=(Tensor[(4, 7, 12), bool], Tensor[(4, 7, 12), float32], Tensor[(13, 6, 15), bool], Tensor[(15, 11, 14), float64], Tensor[(2310), float64]) */
}

def @func_4016() -> (Tensor[(1, 8, 6), float32],) {
  @func_4014() /* ty=(Tensor[(1, 8, 6), float32],) */
}

def @func_6188() -> Tensor[(?, 11, 2), float32] {
  @func_6186() /* ty=Tensor[(?, 11, 2), float32] */
}

def @func_6686() -> (Tensor[(7, 1, 13), float32],) {
  %11 = fn () -> (Tensor[(7, 1, 13), float32],) {
    %9 = @func_4969() /* ty=(Tensor[(7, 1, 13), float32],) */;
    %10 = %9.0;
    (%10,)
  };
  %11() /* ty=(Tensor[(7, 1, 13), float32],) */
}

def @func_4620(%var_4619: Tensor[(22), float64]) -> (Tensor[(13, 6, 15), uint16], Tensor[(?, 11, 2), uint16], Tensor[(22), uint16]) {
  %28 = fn (%var_4614: Tensor[(22), float64]) -> (Tensor[(13, 6, 15), uint16], Tensor[(?, 11, 2), uint16], Tensor[(22), uint16]) {
    %12 = @func_3642() /* ty=(Tensor[(13, 6, 15), uint16],) */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
    %14 = reshape(%13, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), float64] */;
    %15 = @func_3229(%14) /* ty=(Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) */;
    %16 = %15.0;
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(22), float64] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="uint16") /* ty=Tensor[(1, 11, 2), uint16] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %21 = cast(%var_4614, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %22 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(22), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(22), float64] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %25 = %12.0;
    %26 = bitwise_and(%19, %20) /* ty=Tensor[(?, 11, 2), uint16] */;
    %27 = bitwise_and(%23, %24) /* ty=Tensor[(22), uint16] */;
    (%25, %26, %27)
  };
  %28(%var_4619) /* ty=(Tensor[(13, 6, 15), uint16], Tensor[(?, 11, 2), uint16], Tensor[(22), uint16]) */
}

def @func_3714() -> (Tensor[(13, 6, 15), uint64],) {
  %30 = fn () -> (Tensor[(13, 6, 15), uint64],) {
    %29 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
    (%29,)
  };
  %30() /* ty=(Tensor[(13, 6, 15), uint64],) */
}

def @func_461(%var_456: Tensor[(14, 13, 6), float32]) -> (Tensor[(14, 13, 6), bool],) {
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 13, 6), float32] */, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %32 = shape_of(%var_456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_456, dtype="bool") /* ty=Tensor[(14, 13, 6), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = greater_equal(%33, %34) /* ty=Tensor[(14, 13, 6), bool] */;
  (%35,)
}

def @func_3969() -> (Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) {
  %36 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %38 = reshape(%37, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), float64] */;
  %39 = @func_3229(%38) /* ty=(Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) */;
  %40 = %36.0;
  %41 = %39.1;
  (%40, %41, meta[relay.Constant][2] /* ty=Tensor[(22), float64] */)
}

def @func_2529(%var_2527: Tensor[(9, 15, 4), float32], %var_2528: Tensor[(9, 15, 4), float32]) -> Tensor[(9, 15, 4), float32] {
  @func_2525(%var_2527, %var_2528) /* ty=Tensor[(9, 15, 4), float32] */
}

def @func_2556() -> Tensor[(13, 6, 15), uint64] {
  @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_5967() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %42 = @func_3918() /* ty=Tensor[(13, 6, 15), bool] */;
  %43 = cast(%42, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %44 = reshape(%43, newshape=[13, 6, 15]) /* ty=Tensor[(13, 6, 15), bool] */;
  %45 = @func_4522(%44) /* ty=Tensor[(13, 6, 15), bool] */;
  (%42, %45)
}

def @func_6186() -> Tensor[(?, 11, 2), float32] {
  %46 = @func_5620() /* ty=(Tensor[(?, 11, 2), float32],) */;
  %46.0
}

def @func_3352() -> Tensor[(13, 6, 15), bool] {
  %48 = fn () -> Tensor[(13, 6, 15), bool] {
    %47 = @func_3111() /* ty=(Tensor[(13, 6, 15), bool],) */;
    %47.0
  };
  %48() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_2391(%var_2389: Tensor[(91), float32]) -> (Tensor[(13, 6), float32], Tensor[(7, 1, 13), float32], Tensor[(91), float32]) {
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 6), float32] */;
  %50 = cast(%var_2389, dtype="float32") /* ty=Tensor[(91), float32] */;
  %51 = reshape(%50, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float32] */;
  %52 = @func_1630(%51) /* ty=(Tensor[(7, 1, 13), float32],) */;
  %53 = sinh(%49) /* ty=Tensor[(13, 6), float32] */;
  %54 = %52.0;
  (%53, %54, %var_2389)
}

def @func_6708() -> Tensor[(13, 6, 15), bool] {
  @func_6706() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_705(%var_704: Tensor[(11, 12, 14), int16]) -> (Tensor[(11, 12, 14), int16],) {
  %58 = fn (%var_695: Tensor[(11, 12, 14), int16]) -> (Tensor[(11, 12, 14), int16],) {
    %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 1, 14), int16] */, dtype="int16") /* ty=Tensor[(11, 1, 14), int16] */;
    %56 = cast(%var_695, dtype="int16") /* ty=Tensor[(11, 12, 14), int16] */;
    %57 = right_shift(%55, %56) /* ty=Tensor[(11, 12, 14), int16] */;
    (%57,)
  };
  %58(%var_704) /* ty=(Tensor[(11, 12, 14), int16],) */
}

def @func_1841(%var_1840: Tensor[(3, 14), float32]) -> (Tensor[(3, 14), float32],) {
  %61 = fn (%var_1793: Tensor[(3, 14), float32]) -> (Tensor[(3, 14), float32],) {
    %59 = cast(%var_1793, dtype="float32") /* ty=Tensor[(3, 14), float32] */;
    %60 = cosh(%59) /* ty=Tensor[(3, 14), float32] */;
    (%60,)
  };
  %61(%var_1840) /* ty=(Tensor[(3, 14), float32],) */
}

def @func_3768(%var_3767: Tensor[(13, 16, 16), float32]) -> Tensor[(13, 16, 16), float32] {
  %68 = fn (%var_3753: Tensor[(13, 16, 16), float32]) -> Tensor[(13, 16, 16), float32] {
    %62 = cast(%var_3753, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
    %63 = asin(%62) /* ty=Tensor[(13, 16, 16), float32] */;
    %64 = cast(%var_3753, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
    %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%63, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%66, %67) /* ty=Tensor[(13, 16, 16), float32] */
  };
  %68(%var_3767) /* ty=Tensor[(13, 16, 16), float32] */
}

def @func_6384(%var_6371: Tensor[(13, 16, 14), int32], %var_6372: Tensor[(13, 16, 14), int32]) -> Tensor[(13, 16, 14), int32] {
  %69 = cast(%var_6372, dtype="int32") /* ty=Tensor[(13, 16, 14), int32] */;
  %70 = shape_of(%var_6371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%var_6371, dtype="int32") /* ty=Tensor[(13, 16, 14), int32] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%71, %72) /* ty=Tensor[(13, 16, 14), int32] */
}

def @func_2783(%var_2781: Tensor[(13, 6, 15), uint64], %var_2782: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), bool], Tensor[(330), float64], Tensor[(72), float64]) {
  %84 = fn (%var_2757: Tensor[(13, 6, 15), uint64], %var_2771: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), bool], Tensor[(330), float64], Tensor[(72), float64]) {
    %73 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
    %74 = %73.1;
    %75 = cast(%var_2757, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %79 = cast(%var_2771, dtype="float64") /* ty=Tensor[(72), float64] */;
    %80 = reshape(%79, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %81 = @func_2231(%80) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) */;
    %82 = not_equal(%77, %78) /* ty=Tensor[(13, 6, 15), bool] */;
    %83 = %81.2;
    (%82, %83, %var_2771)
  };
  %84(%var_2781, %var_2782) /* ty=(Tensor[(13, 6, 15), bool], Tensor[(330), float64], Tensor[(72), float64]) */
}

def @func_6091() -> (Tensor[(13, 6, 15), float32],) {
  @func_6089() /* ty=(Tensor[(13, 6, 15), float32],) */
}

def @func_2594() -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) {
  %85 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %87 = cast(%85, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %88 = erf(%86) /* ty=Tensor[(13, 6, 15), float32] */;
  %89 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %90 = asinh(%87) /* ty=Tensor[(13, 6, 15), float32] */;
  (%88, %89, %90)
}

def @func_4525(%var_4523: Tensor[(13, 6, 15), bool]) -> Tensor[(13, 6, 15), bool] {
  @func_4522(%var_4523) /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_4533() -> Tensor[(13, 6, 15), float32] {
  @func_4531() /* ty=Tensor[(13, 6, 15), float32] */
}

def @func_5673(%var_5672: Tensor[(91), float32]) -> (Tensor[(13, 6, 15), bool], Tensor[(7, 1, 13), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float64]) {
  %101 = fn (%var_5644: Tensor[(91), float32]) -> (Tensor[(13, 6, 15), bool], Tensor[(7, 1, 13), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float64]) {
    %91 = @func_2933() /* ty=(Tensor[(13, 6, 15), bool],) */;
    %92 = cast(%var_5644, dtype="float32") /* ty=Tensor[(91), float32] */;
    %93 = reshape(%92, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float32] */;
    %94 = @func_1630(%93) /* ty=(Tensor[(7, 1, 13), float32],) */;
    %95 = @func_3381() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) */;
    %96 = cast(%var_5644, dtype="float64") /* ty=Tensor[(91), float64] */;
    %97 = %91.0;
    %98 = %94.0;
    %99 = %95.1;
    %100 = asin(%96) /* ty=Tensor[(91), float64] */;
    (%97, %98, %99, %100)
  };
  %101(%var_5672) /* ty=(Tensor[(13, 6, 15), bool], Tensor[(7, 1, 13), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float64]) */
}

def @func_6526() -> Tensor[(13, 6, 15), uint16] {
  %103 = fn () -> Tensor[(13, 6, 15), uint16] {
    %102 = @func_3642() /* ty=(Tensor[(13, 6, 15), uint16],) */;
    %102.0
  };
  %103() /* ty=Tensor[(13, 6, 15), uint16] */
}

def @func_4726() -> Tensor[(13, 6, 15), uint64] {
  %104 = fn () -> Tensor[(13, 6, 15), uint64] {
    @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */
  };
  %104() /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_6872() -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %110 = fn () -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
    %105 = @func_4747() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
    %106 = @func_5967() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */;
    %107 = %105.3;
    %108 = %106.0;
    %109 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
    (%107, %108, %109)
  };
  %110() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */
}

def @func_6795() -> (Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %111 = @func_6042() /* ty=(Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32]) */;
  %112 = @func_4747() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %113 = @func_6272() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %114 = %111.0;
  %115 = %112.0;
  %116 = %113.0;
  (%114, %115, %116)
}

def @func_3487(%var_3485: Tensor[(2310), float64]) -> (Tensor[(2310), float64], Tensor[(15, 11, 14), float64], Tensor[(13, 6, 15), uint64]) {
  @func_3484(%var_3485) /* ty=(Tensor[(2310), float64], Tensor[(15, 11, 14), float64], Tensor[(13, 6, 15), uint64]) */
}

def @func_464(%var_462: Tensor[(14, 13, 6), float32]) -> (Tensor[(14, 13, 6), bool],) {
  @func_461(%var_462) /* ty=(Tensor[(14, 13, 6), bool],) */
}

def @func_6493(%var_6486: Tensor[(6, 15, 14), float32]) -> (Tensor[(6, 15, 14), float32], Tensor[(14, 7, 10), int8], Tensor[(980), int8], Tensor[(1092), float32]) {
  %117 = cast(%var_6486, dtype="float32") /* ty=Tensor[(6, 15, 14), float32] */;
  %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %119 = cast(meta[relay.Constant][5] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %121 = reshape(%118, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), int8] */;
  %122 = reshape(%119, newshape=[14, 7, 10]) /* ty=Tensor[(14, 7, 10), int8] */;
  %123 = reshape(%120, newshape=[1092]) /* ty=Tensor[(1092), float32] */;
  %124 = @func_3619(%121, %122, %123) /* ty=(Tensor[(14, 7, 10), int8], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) */;
  %125 = cosh(%117) /* ty=Tensor[(6, 15, 14), float32] */;
  %126 = %124.0;
  (%125, %126, meta[relay.Constant][5] /* ty=Tensor[(980), int8] */, meta[relay.Constant][6] /* ty=Tensor[(1092), float32] */)
}

def @func_4339(%var_4337: Tensor[(5, 9, 13), uint32], %var_4338: Tensor[(63), float32]) -> (Tensor[(5, 9, 13), bool], Tensor[(5, 9, 13), int64], Tensor[(14, 13, 6), bool], Tensor[(42), uint8], Tensor[(63), float32], Tensor[(13, 6, 15), bool], Tensor[(11, 16, 5), uint64]) {
  %156 = fn (%var_4226: Tensor[(5, 9, 13), uint32], %var_4275: Tensor[(63), float32]) -> (Tensor[(5, 9, 13), bool], Tensor[(5, 9, 13), int64], Tensor[(14, 13, 6), bool], Tensor[(42), uint8], Tensor[(63), float32], Tensor[(13, 6, 15), bool], Tensor[(11, 16, 5), uint64]) {
    %127 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 9, 13), uint32] */, dtype="bool") /* ty=Tensor[(5, 9, 13), bool] */;
    %128 = shape_of(%var_4226, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%var_4226, dtype="bool") /* ty=Tensor[(5, 9, 13), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 9, 13), uint32] */, dtype="int64") /* ty=Tensor[(5, 9, 13), int64] */;
    %132 = shape_of(%var_4226, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%var_4226, dtype="int64") /* ty=Tensor[(5, 9, 13), int64] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %135 = cast(meta[relay.Constant][9] /* ty=Tensor[(42), uint8] */, dtype="uint8") /* ty=Tensor[(42), uint8] */;
    %136 = reshape(%135, newshape=[6, 7]) /* ty=Tensor[(6, 7), uint8] */;
    %137 = @func_1437(%136) /* ty=(Tensor[(6, 7), bool], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) */;
    %138 = @func_2933() /* ty=(Tensor[(13, 6, 15), bool],) */;
    %139 = cast(%var_4275, dtype="float32") /* ty=Tensor[(63), float32] */;
    %140 = cast(meta[relay.Constant][9] /* ty=Tensor[(42), uint8] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %141 = reshape(%139, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %142 = reshape(%140, newshape=[42]) /* ty=Tensor[(42), float32] */;
    %143 = @func_3053(%141, %142) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) */;
    %144 = %143.1;
    %145 = cast(%144, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
    %146 = sigmoid(%145) /* ty=Tensor[(11, 16, 5), float64] */;
    %147 = cast(%144, dtype="uint64") /* ty=Tensor[(11, 16, 5), uint64] */;
    %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
    %149 = cast(%146, dtype="uint64") /* ty=Tensor[(11, 16, 5), uint64] */;
    %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %151 = greater_equal(%129, %130) /* ty=Tensor[(5, 9, 13), bool] */;
    %152 = bitwise_and(%133, %134) /* ty=Tensor[(5, 9, 13), int64] */;
    %153 = %137.1;
    %154 = %138.0;
    %155 = logical_xor(%149, %150) /* ty=Tensor[(11, 16, 5), uint64] */;
    (%151, %152, %153, meta[relay.Constant][9] /* ty=Tensor[(42), uint8] */, %var_4275, %154, %155)
  };
  %156(%var_4337, %var_4338) /* ty=(Tensor[(5, 9, 13), bool], Tensor[(5, 9, 13), int64], Tensor[(14, 13, 6), bool], Tensor[(42), uint8], Tensor[(63), float32], Tensor[(13, 6, 15), bool], Tensor[(11, 16, 5), uint64]) */
}

def @func_2947() -> (Tensor[(13, 6, 15), uint64],) {
  %157 = @func_2939() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%157,)
}

def @func_3174() -> (Tensor[(13, 6, 15), uint16],) {
  %158 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %159 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 6, 15), uint64] */, dtype="uint16") /* ty=Tensor[(13, 6, 15), uint16] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="uint16") /* ty=Tensor[(13, 6, 15), uint16] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %163 = subtract(%161, %162) /* ty=Tensor[(13, 6, 15), uint16] */;
  (%163,)
}

def @func_5330() -> (Tensor[(13, 6, 15), bool], Tensor[(?, 11, 2), uint32]) {
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(22), float64] */, dtype="float64") /* ty=Tensor[(22), float64] */;
  %165 = reshape(%164, newshape=[1, 11, 2]) /* ty=Tensor[(1, 11, 2), float64] */;
  %166 = @func_3229(%165) /* ty=(Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) */;
  %167 = %166.1;
  %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(22), float64] */, dtype="uint32") /* ty=Tensor[(22), uint32] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="uint32") /* ty=Tensor[(1, 11, 2), uint32] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %172 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  %173 = left_shift(%170, %171) /* ty=Tensor[(?, 11, 2), uint32] */;
  (%172, %173)
}

def @func_6272() -> (Tensor[(13, 6, 15), bool],) {
  %174 = @func_3111() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %175 = %174.0;
  (%175,)
}

def @func_6274() -> (Tensor[(13, 6, 15), bool],) {
  @func_6272() /* ty=(Tensor[(13, 6, 15), bool],) */
}

def @func_3112() -> (Tensor[(13, 6, 15), bool],) {
  %177 = fn () -> (Tensor[(13, 6, 15), bool],) {
    %176 = @func_2912() /* ty=Tensor[(13, 6, 15), bool] */;
    (%176,)
  };
  %177() /* ty=(Tensor[(13, 6, 15), bool],) */
}

def @func_2939() -> Tensor[(13, 6, 15), uint64] {
  @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_5125() -> (Tensor[(5, 16, 10), float32], Tensor[(1, 800), float32], Tensor[(13, 6, 2), bool], Tensor[(13, 6, 15), float32]) {
  %201 = fn () -> (Tensor[(5, 16, 10), float32], Tensor[(1, 800), float32], Tensor[(13, 6, 2), bool], Tensor[(13, 6, 15), float32]) {
    %178 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 800), float32] */, dtype="float32") /* ty=Tensor[(1, 800), float32] */;
    %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 800), float32] */, dtype="float32") /* ty=Tensor[(1, 800), float32] */;
    %180 = reshape(%178, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
    %181 = reshape(%179, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
    %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 6, 2), int8] */, dtype="float32") /* ty=Tensor[(13, 6, 2), float32] */;
    %183 = atan(%182) /* ty=Tensor[(13, 6, 2), float32] */;
    %184 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 6, 2), int8] */, dtype="int8") /* ty=Tensor[(13, 6, 2), int8] */;
    %185 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(13, 6, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %186 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 6, 2), int8] */, dtype="int8") /* ty=Tensor[(13, 6, 2), int8] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %188 = bitwise_or(%186, %187) /* ty=Tensor[(13, 6, 2), int8] */;
    %189 = cast(%188, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
    %190 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%183, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %193 = less_equal(%191, %192) /* ty=Tensor[(13, 6, 2), bool] */;
    %194 = cast(%193, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
    %195 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%183, dtype="bool") /* ty=Tensor[(13, 6, 2), bool] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %198 = @func_4892(%180, %181) /* ty=Tensor[(5, 16, 10), float32] */;
    %199 = logical_or(%196, %197) /* ty=Tensor[(13, 6, 2), bool] */;
    %200 = @func_4084() /* ty=Tensor[(13, 6, 15), float32] */;
    (%198, meta[relay.Constant][12] /* ty=Tensor[(1, 800), float32] */, %199, %200)
  };
  %201() /* ty=(Tensor[(5, 16, 10), float32], Tensor[(1, 800), float32], Tensor[(13, 6, 2), bool], Tensor[(13, 6, 15), float32]) */
}

def @func_4748() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) {
  %212 = fn () -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) {
    %202 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
    %203 = %202.0;
    %204 = cast(%203, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
    %205 = reshape(%204, newshape=[13, 6, 15]) /* ty=Tensor[(13, 6, 15), bool] */;
    %206 = @func_3993(%205) /* ty=(Tensor[(13, 6, 15), int8],) */;
    %207 = @func_3111() /* ty=(Tensor[(13, 6, 15), bool],) */;
    %208 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
    %209 = %206.0;
    %210 = %207.0;
    %211 = %208.2;
    (%203, %209, %210, %211)
  };
  %212() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), int8], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */
}

def @func_5704(%var_5702: Tensor[(22), float64]) -> (Tensor[(22), float32], Tensor[(22), float64]) {
  @func_5701(%var_5702) /* ty=(Tensor[(22), float32], Tensor[(22), float64]) */
}

def @func_1632(%var_1631: Tensor[(7, 1, 13), float32]) -> (Tensor[(7, 1, 13), float32],) {
  %215 = fn (%var_1622: Tensor[(7, 1, 13), float32]) -> (Tensor[(7, 1, 13), float32],) {
    %213 = cast(%var_1622, dtype="float32") /* ty=Tensor[(7, 1, 13), float32] */;
    %214 = cos(%213) /* ty=Tensor[(7, 1, 13), float32] */;
    (%214,)
  };
  %215(%var_1631) /* ty=(Tensor[(7, 1, 13), float32],) */
}

def @func_2941() -> Tensor[(13, 6, 15), uint64] {
  @func_2939() /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_5480() -> (Tensor[(13, 6, 15), uint64],) {
  @func_5478() /* ty=(Tensor[(13, 6, 15), uint64],) */
}

def @func_2234(%var_2232: Tensor[(72), float64]) -> (Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) {
  @func_2231(%var_2232) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) */
}

def @func_2949() -> (Tensor[(13, 6, 15), uint64],) {
  @func_2947() /* ty=(Tensor[(13, 6, 15), uint64],) */
}

def @func_3687() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) {
  %222 = fn () -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) {
    %216 = @func_3381() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) */;
    %217 = @func_3642() /* ty=(Tensor[(13, 6, 15), uint16],) */;
    %218 = %217.0;
    %219 = cast(%218, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
    %220 = %216.1;
    %221 = asin(%219) /* ty=Tensor[(13, 6, 15), float32] */;
    (%220, %221)
  };
  %222() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */
}

def @func_5621() -> (Tensor[(?, 11, 2), float32],) {
  %229 = fn () -> (Tensor[(?, 11, 2), float32],) {
    %223 = @func_5330() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(?, 11, 2), uint32]) */;
    %224 = %223.1;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
    %226 = asin(%225) /* ty=Tensor[(?, 11, 2), float64] */;
    %227 = cast(%226, dtype="float32") /* ty=Tensor[(?, 11, 2), float32] */;
    %228 = exp(%227) /* ty=Tensor[(?, 11, 2), float32] */;
    (%228,)
  };
  %229() /* ty=(Tensor[(?, 11, 2), float32],) */
}

def @func_5721() -> (Tensor[(13, 6, 15), uint64],) {
  @func_5719() /* ty=(Tensor[(13, 6, 15), uint64],) */
}

def @func_6434() -> (Tensor[(?, 11, 2), int64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float32]) {
  @func_6432() /* ty=(Tensor[(?, 11, 2), int64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float32]) */
}

def @func_6595() -> Tensor[(13, 6, 15), float32] {
  %230 = fn () -> Tensor[(13, 6, 15), float32] {
    @func_4531() /* ty=Tensor[(13, 6, 15), float32] */
  };
  %230() /* ty=Tensor[(13, 6, 15), float32] */
}

def @func_3576(%var_3564: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), uint64], Tensor[(14, 13, 6), bool], Tensor[(72), float64], Tensor[(13, 6, 15), uint64]) {
  %231 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
  %232 = cast(%var_3564, dtype="float64") /* ty=Tensor[(72), float64] */;
  %233 = reshape(%232, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float64] */;
  %234 = @func_635(%233) /* ty=(Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) */;
  %235 = %231.1;
  %236 = %234.0;
  %237 = @func_2939() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%235, %236, %var_3564, %237)
}

def @func_2074(%var_2073: Tensor[(7, 15, 13), float32]) -> (Tensor[(7, 15, 13), float32], Tensor[(11, 12, 14), int16], Tensor[(12, 154), int16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(7, 15, 13), float32]) {
  %252 = fn (%var_2041: Tensor[(7, 15, 13), float32]) -> (Tensor[(7, 15, 13), float32], Tensor[(11, 12, 14), int16], Tensor[(12, 154), int16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(7, 15, 13), float32]) {
    %238 = cast(%var_2041, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
    %239 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 154), int16] */, dtype="int16") /* ty=Tensor[(12, 154), int16] */;
    %240 = reshape(%239, newshape=[11, 12, 14]) /* ty=Tensor[(11, 12, 14), int16] */;
    %241 = @func_703(%240) /* ty=(Tensor[(11, 12, 14), int16],) */;
    %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %243 = reshape(%242, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
    %244 = @func_461(%243) /* ty=(Tensor[(14, 13, 6), bool],) */;
    %245 = cast(%var_2041, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
    %246 = atanh(%245) /* ty=Tensor[(7, 15, 13), float32] */;
    %247 = cast(%246, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
    %248 = acos(%238) /* ty=Tensor[(7, 15, 13), float32] */;
    %249 = %241.0;
    %250 = %244.0;
    %251 = log(%247) /* ty=Tensor[(7, 15, 13), float32] */;
    (%248, %249, meta[relay.Constant][15] /* ty=Tensor[(12, 154), int16] */, %250, meta[relay.Constant][16] /* ty=Tensor[(1092), float32] */, %251)
  };
  %252(%var_2073) /* ty=(Tensor[(7, 15, 13), float32], Tensor[(11, 12, 14), int16], Tensor[(12, 154), int16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(7, 15, 13), float32]) */
}

def @func_6221(%var_6193: Tensor[(16, 1, 7), uint16]) -> (Tensor[(16, 2, 7), uint16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(14, 13, 6), bool]) {
  %253 = cast(%var_6193, dtype="uint16") /* ty=Tensor[(16, 1, 7), uint16] */;
  %254 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 2, 7), uint16] */, dtype="uint16") /* ty=Tensor[(16, 2, 7), uint16] */;
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %256 = reshape(%255, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %257 = @func_461(%256) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %258 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %259 = reshape(%258, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %260 = @func_461(%259) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %261 = right_shift(%253, %254) /* ty=Tensor[(16, 2, 7), uint16] */;
  %262 = %257.0;
  %263 = %260.0;
  (%261, %262, meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, %263)
}

def @func_4971() -> (Tensor[(7, 1, 13), float32],) {
  @func_4969() /* ty=(Tensor[(7, 1, 13), float32],) */
}

def @func_5208(%var_5207: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), bool], Tensor[(72), float64], Tensor[(9, 15, 4), float32], Tensor[(540, 1), float32], Tensor[(2, 16, 4), int64], Tensor[(128), int64], Tensor[(13, 6, 2), bool], Tensor[(72), float64]) {
  %282 = fn (%var_5181: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), bool], Tensor[(72), float64], Tensor[(9, 15, 4), float32], Tensor[(540, 1), float32], Tensor[(2, 16, 4), int64], Tensor[(128), int64], Tensor[(13, 6, 2), bool], Tensor[(72), float64]) {
    %264 = cast(%var_5181, dtype="float64") /* ty=Tensor[(72), float64] */;
    %265 = reshape(%264, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %266 = @func_2231(%265) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) */;
    %267 = cast(meta[relay.Constant][19] /* ty=Tensor[(540, 1), float32] */, dtype="float32") /* ty=Tensor[(540, 1), float32] */;
    %268 = cast(meta[relay.Constant][19] /* ty=Tensor[(540, 1), float32] */, dtype="float32") /* ty=Tensor[(540, 1), float32] */;
    %269 = reshape(%267, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
    %270 = reshape(%268, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
    %271 = cast(meta[relay.Constant][20] /* ty=Tensor[(128), int64] */, dtype="int64") /* ty=Tensor[(128), int64] */;
    %272 = reshape(%271, newshape=[2, 16, 4]) /* ty=Tensor[(2, 16, 4), int64] */;
    %273 = @func_4631(%272) /* ty=(Tensor[(2, 16, 4), int64],) */;
    %274 = @func_5124() /* ty=(Tensor[(5, 16, 10), float32], Tensor[(1, 800), float32], Tensor[(13, 6, 2), bool], Tensor[(13, 6, 15), float32]) */;
    %275 = cast(%var_5181, dtype="float64") /* ty=Tensor[(72), float64] */;
    %276 = @func_4091() /* ty=Tensor[(13, 6, 15), bool] */;
    %277 = %266.4;
    %278 = @func_2525(%269, %270) /* ty=Tensor[(9, 15, 4), float32] */;
    %279 = %273.0;
    %280 = %274.2;
    %281 = atan(%275) /* ty=Tensor[(72), float64] */;
    (%276, %277, %278, meta[relay.Constant][19] /* ty=Tensor[(540, 1), float32] */, %279, meta[relay.Constant][20] /* ty=Tensor[(128), int64] */, %280, %281)
  };
  %282(%var_5207) /* ty=(Tensor[(13, 6, 15), bool], Tensor[(72), float64], Tensor[(9, 15, 4), float32], Tensor[(540, 1), float32], Tensor[(2, 16, 4), int64], Tensor[(128), int64], Tensor[(13, 6, 2), bool], Tensor[(72), float64]) */
}

def @func_6042() -> (Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32]) {
  %283 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %284 = @func_5074() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %287 = cast(meta[relay.Constant][21] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %288 = reshape(%287, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %289 = @func_2725(%288) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) */;
  %290 = %283.0;
  %291 = sqrt(%286) /* ty=Tensor[(13, 6, 15), float32] */;
  %292 = %289.0;
  (%290, %291, %292, meta[relay.Constant][21] /* ty=Tensor[(63), float32] */)
}

def @func_6342(%var_6341: Tensor[(15, 4, 4), float64]) -> (Tensor[(15, 4, 4), float64],) {
  %295 = fn (%var_6330: Tensor[(15, 4, 4), float64]) -> (Tensor[(15, 4, 4), float64],) {
    %293 = cast(%var_6330, dtype="float64") /* ty=Tensor[(15, 4, 4), float64] */;
    %294 = exp(%293) /* ty=Tensor[(15, 4, 4), float64] */;
    (%294,)
  };
  %295(%var_6341) /* ty=(Tensor[(15, 4, 4), float64],) */
}

def @func_5332() -> (Tensor[(13, 6, 15), bool], Tensor[(?, 11, 2), uint32]) {
  @func_5330() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(?, 11, 2), uint32]) */
}

def @func_88(%var_66: Tensor[(2, 7, 11), uint64]) -> Tensor[(2, 7, 11), bool] {
  %296 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 7, 11), uint64] */, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
  %297 = shape_of(%var_66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_66, dtype="bool") /* ty=Tensor[(2, 7, 11), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%298, %299) /* ty=Tensor[(2, 7, 11), bool] */
}

def @func_5473() -> (Tensor[(13, 6, 15), bool],) {
  @func_5471() /* ty=(Tensor[(13, 6, 15), bool],) */
}

def @func_3623(%var_3620: Tensor[(14, 7, 10), int8], %var_3621: Tensor[(14, 7, 10), int8], %var_3622: Tensor[(1092), float32]) -> (Tensor[(14, 7, 10), int8], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) {
  %309 = fn (%var_3606: Tensor[(14, 7, 10), int8], %var_3607: Tensor[(14, 7, 10), int8], %var_3617: Tensor[(1092), float32]) -> (Tensor[(14, 7, 10), int8], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) {
    %300 = cast(%var_3607, dtype="int8") /* ty=Tensor[(14, 7, 10), int8] */;
    %301 = shape_of(%var_3606, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%var_3606, dtype="int8") /* ty=Tensor[(14, 7, 10), int8] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %304 = cast(%var_3617, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %305 = reshape(%304, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
    %306 = @func_461(%305) /* ty=(Tensor[(14, 13, 6), bool],) */;
    %307 = left_shift(%302, %303) /* ty=Tensor[(14, 7, 10), int8] */;
    %308 = %306.0;
    (%307, %308, %var_3617)
  };
  %309(%var_3620, %var_3621, %var_3622) /* ty=(Tensor[(14, 7, 10), int8], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) */
}

def @func_6327() -> Tensor[(13, 6, 15), uint64] {
  @func_6325() /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_6302() -> (Tensor[(?, 11, 2), float32], Tensor[(13, 6, 15), uint16]) {
  %310 = @func_5620() /* ty=(Tensor[(?, 11, 2), float32],) */;
  %311 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %312 = %310.0;
  %313 = %311.0;
  (%312, %313)
}

def @func_6224(%var_6222: Tensor[(16, 1, 7), uint16]) -> (Tensor[(16, 2, 7), uint16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(14, 13, 6), bool]) {
  @func_6221(%var_6222) /* ty=(Tensor[(16, 2, 7), uint16], Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(14, 13, 6), bool]) */
}

def @func_4184(%var_4182: Tensor[(3, 24), float64]) -> (Tensor[(10, 11, 2), int32], Tensor[(13, 6, 15), uint64], Tensor[(3, 24), float64], Tensor[(10, 11, 2), bool]) {
  @func_4181(%var_4182) /* ty=(Tensor[(10, 11, 2), int32], Tensor[(13, 6, 15), uint64], Tensor[(3, 24), float64], Tensor[(10, 11, 2), bool]) */
}

def @func_635(%var_591: Tensor[(6, 2, 6), float64]) -> (Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) {
  %314 = cast(meta[relay.Constant][23] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %315 = reshape(%314, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
  %316 = @func_461(%315) /* ty=(Tensor[(14, 13, 6), bool],) */;
  %317 = cast(%var_591, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %318 = erf(%317) /* ty=Tensor[(6, 2, 6), float64] */;
  %319 = cast(%var_591, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %323 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 330), float32] */, dtype="float32") /* ty=Tensor[(1, 330), float32] */;
  %324 = reshape(%323, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), float32] */;
  %325 = @func_302(%324) /* ty=(Tensor[(11, 3, 10), bool],) */;
  %326 = cast(%318, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %327 = log10(%326) /* ty=Tensor[(6, 2, 6), float32] */;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(6, 2, 6), float64] */;
  %329 = sin(%328) /* ty=Tensor[(6, 2, 6), float64] */;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(6, 2, 6), float32] */;
  %331 = %316.0;
  %332 = floor_divide(%321, %322) /* ty=Tensor[(6, 2, 6), float64] */;
  %333 = %325.0;
  %334 = acosh(%330) /* ty=Tensor[(6, 2, 6), float32] */;
  (%331, meta[relay.Constant][23] /* ty=Tensor[(1092), float32] */, %332, %333, meta[relay.Constant][24] /* ty=Tensor[(1, 330), float32] */, %334)
}

def @func_4181(%var_4167: Tensor[(3, 24), float64]) -> (Tensor[(10, 11, 2), int32], Tensor[(13, 6, 15), uint64], Tensor[(3, 24), float64], Tensor[(10, 11, 2), bool]) {
  %335 = @func_3969() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) */;
  %336 = %335.1;
  %337 = cast(%336, dtype="int32") /* ty=Tensor[(1, 11, 2), int32] */;
  %338 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 11, 2), float64] */, dtype="int32") /* ty=Tensor[(10, 11, 2), int32] */;
  %339 = cast(%var_4167, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %340 = reshape(%339, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %341 = @func_3576(%340) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(14, 13, 6), bool], Tensor[(72), float64], Tensor[(13, 6, 15), uint64]) */;
  %342 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 11, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 2), bool] */;
  %343 = cast(%336, dtype="bool") /* ty=Tensor[(1, 11, 2), bool] */;
  %344 = maximum(%337, %338) /* ty=Tensor[(10, 11, 2), int32] */;
  %345 = %341.3;
  %346 = less(%342, %343) /* ty=Tensor[(10, 11, 2), bool] */;
  (%344, %345, %var_4167, %346)
}

def @func_5719() -> (Tensor[(13, 6, 15), uint64],) {
  %347 = @func_2939() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%347,)
}

def @func_6304() -> (Tensor[(?, 11, 2), float32], Tensor[(13, 6, 15), uint16]) {
  @func_6302() /* ty=(Tensor[(?, 11, 2), float32], Tensor[(13, 6, 15), uint16]) */
}

def @func_6388(%var_6386: Tensor[(13, 16, 14), int32], %var_6387: Tensor[(13, 16, 14), int32]) -> Tensor[(13, 16, 14), int32] {
  @func_6384(%var_6386, %var_6387) /* ty=Tensor[(13, 16, 14), int32] */
}

def @func_4014() -> (Tensor[(1, 8, 6), float32],) {
  %348 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 8, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 6), float32] */;
  %349 = asinh(%348) /* ty=Tensor[(1, 8, 6), float32] */;
  (%349,)
}

def @func_5521() -> (Tensor[(13, 6, 15), float32],) {
  @func_5519() /* ty=(Tensor[(13, 6, 15), float32],) */
}

def @func_4522(%var_4510: Tensor[(13, 6, 15), bool]) -> Tensor[(13, 6, 15), bool] {
  %350 = @func_3751() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %351 = %350.0;
  %352 = cast(%var_4510, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%354, %355) /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_4895(%var_4893: Tensor[(5, 16, 10), float32], %var_4894: Tensor[(5, 16, 10), float32]) -> Tensor[(5, 16, 10), float32] {
  %362 = fn (%var_4864: Tensor[(5, 16, 10), float32], %var_4865: Tensor[(5, 16, 10), float32]) -> Tensor[(5, 16, 10), float32] {
    %356 = cast(%var_4865, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
    %357 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
    %358 = cast(%var_4864, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
    %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %360 = floor_mod(%358, %359) /* ty=Tensor[(5, 16, 10), float32] */;
    %361 = cast(%360, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
    acosh(%361) /* ty=Tensor[(5, 16, 10), float32] */
  };
  %362(%var_4893, %var_4894) /* ty=Tensor[(5, 16, 10), float32] */
}

def @func_6325() -> Tensor[(13, 6, 15), uint64] {
  %363 = @func_5719() /* ty=(Tensor[(13, 6, 15), uint64],) */;
  %363.0
}

def @func_5929(%var_5928: Tensor[(15, 8, 6), float64]) -> (Tensor[(15, 8, 6), bool],) {
  %376 = fn (%var_5901: Tensor[(15, 8, 6), float64]) -> (Tensor[(15, 8, 6), bool],) {
    %364 = @func_4014() /* ty=(Tensor[(1, 8, 6), float32],) */;
    %365 = %364.0;
    %366 = cast(%365, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
    %367 = erf(%366) /* ty=Tensor[(1, 8, 6), float64] */;
    %368 = cast(%367, dtype="uint16") /* ty=Tensor[(1, 8, 6), uint16] */;
    %369 = cast(%var_5901, dtype="uint16") /* ty=Tensor[(15, 8, 6), uint16] */;
    %370 = logical_xor(%368, %369) /* ty=Tensor[(15, 8, 6), uint16] */;
    %371 = cast(%var_5901, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
    %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %373 = cast(%370, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %375 = greater(%373, %374) /* ty=Tensor[(15, 8, 6), bool] */;
    (%375,)
  };
  %376(%var_5928) /* ty=(Tensor[(15, 8, 6), bool],) */
}

def @func_6797() -> (Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  @func_6795() /* ty=(Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */
}

def @func_638(%var_636: Tensor[(6, 2, 6), float64]) -> (Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) {
  @func_635(%var_636) /* ty=(Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) */
}

def @func_6044() -> (Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32]) {
  @func_6042() /* ty=(Tensor[(13, 6, 15), uint16], Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32]) */
}

def @func_4093() -> Tensor[(13, 6, 15), bool] {
  @func_4091() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_91(%var_89: Tensor[(2, 7, 11), uint64]) -> Tensor[(2, 7, 11), bool] {
  @func_88(%var_89) /* ty=Tensor[(2, 7, 11), bool] */
}

def @func_2554() -> Tensor[(13, 6, 15), uint64] {
  %377 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 6, 15), float32] */, dtype="float64") /* ty=Tensor[(13, 6, 15), float64] */;
  %378 = log10(%377) /* ty=Tensor[(13, 6, 15), float64] */;
  %379 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 6, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %380 = tan(%379) /* ty=Tensor[(13, 6, 15), float32] */;
  %381 = cast(%380, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %382 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%378, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%383, %384) /* ty=Tensor[(13, 6, 15), uint64] */
}

def @func_305(%var_303: Tensor[(11, 3, 10), float32]) -> (Tensor[(11, 3, 10), bool],) {
  @func_302(%var_303) /* ty=(Tensor[(11, 3, 10), bool],) */
}

def @func_4850() -> (Tensor[(13, 6, 15), uint64], Tensor[(7, 1, 13), float32], Tensor[(91), float32], Tensor[(13, 6, 15), float32]) {
  %392 = fn () -> (Tensor[(13, 6, 15), uint64], Tensor[(7, 1, 13), float32], Tensor[(91), float32], Tensor[(13, 6, 15), float32]) {
    %385 = cast(meta[relay.Constant][28] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
    %386 = reshape(%385, newshape=[7, 1, 13]) /* ty=Tensor[(7, 1, 13), float32] */;
    %387 = @func_1630(%386) /* ty=(Tensor[(7, 1, 13), float32],) */;
    %388 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
    %389 = @func_4725() /* ty=Tensor[(13, 6, 15), uint64] */;
    %390 = %387.0;
    %391 = %388.0;
    (%389, %390, meta[relay.Constant][28] /* ty=Tensor[(91), float32] */, %391)
  };
  %392() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(7, 1, 13), float32], Tensor[(91), float32], Tensor[(13, 6, 15), float32]) */
}

def @func_3412(%var_3399: Tensor[(13, 6, 15), float32]) -> (Tensor[(13, 6, 15), float32],) {
  %393 = @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */;
  %394 = %393.0;
  %395 = cast(%var_3399, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%394, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %399 = power(%397, %398) /* ty=Tensor[(13, 6, 15), float32] */;
  (%399,)
}

def @func_4091() -> Tensor[(13, 6, 15), bool] {
  %400 = @func_3751() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %400.0
}

def @func_5478() -> (Tensor[(13, 6, 15), uint64],) {
  %401 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  (%401,)
}

def @func_6432() -> (Tensor[(?, 11, 2), int64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float64], Tensor[(?, 11, 2), float32]) {
  %402 = @func_6186() /* ty=Tensor[(?, 11, 2), float32] */;
  %403 = cast(%402, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
  %404 = atanh(%403) /* ty=Tensor[(?, 11, 2), float64] */;
  %405 = cast(%402, dtype="int64") /* ty=Tensor[(?, 11, 2), int64] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="int64") /* ty=Tensor[(?, 11, 2), int64] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %409 = cast(%402, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
  %410 = cast(%402, dtype="float64") /* ty=Tensor[(?, 11, 2), float64] */;
  %411 = cast(%404, dtype="float32") /* ty=Tensor[(?, 11, 2), float32] */;
  %412 = bitwise_xor(%407, %408) /* ty=Tensor[(?, 11, 2), int64] */;
  %413 = sqrt(%409) /* ty=Tensor[(?, 11, 2), float64] */;
  %414 = log(%410) /* ty=Tensor[(?, 11, 2), float64] */;
  %415 = asinh(%411) /* ty=Tensor[(?, 11, 2), float32] */;
  (%412, %413, %414, %415)
}

def @func_5025(%var_4972: Tensor[(4, 7, 12), int32], %var_4973: Tensor[(4, 7, 12), int32], %var_5019: Tensor[(2310), float64]) -> (Tensor[(4, 7, 12), bool], Tensor[(4, 7, 12), float32], Tensor[(13, 6, 15), bool], Tensor[(15, 11, 14), float64], Tensor[(2310), float64]) {
  %416 = cast(%var_4973, dtype="bool") /* ty=Tensor[(4, 7, 12), bool] */;
  %417 = shape_of(%var_4972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%var_4972, dtype="bool") /* ty=Tensor[(4, 7, 12), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = cast(%var_4973, dtype="float32") /* ty=Tensor[(4, 7, 12), float32] */;
  %421 = cast(%var_5019, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %422 = reshape(%421, newshape=[2310]) /* ty=Tensor[(2310), float64] */;
  %423 = @func_3484(%422) /* ty=(Tensor[(2310), float64], Tensor[(15, 11, 14), float64], Tensor[(13, 6, 15), uint64]) */;
  %424 = greater_equal(%418, %419) /* ty=Tensor[(4, 7, 12), bool] */;
  %425 = acosh(%420) /* ty=Tensor[(4, 7, 12), float32] */;
  %426 = @func_4091() /* ty=Tensor[(13, 6, 15), bool] */;
  %427 = %423.1;
  (%424, %425, %426, %427, %var_5019)
}

def @func_4084() -> Tensor[(13, 6, 15), float32] {
  %428 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
  %429 = %428.0;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
  log2(%430) /* ty=Tensor[(13, 6, 15), float32] */
}

def @func_1439(%var_1438: Tensor[(6, 7), uint8]) -> (Tensor[(6, 7), bool], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) {
  %440 = fn (%var_1419: Tensor[(6, 7), uint8]) -> (Tensor[(6, 7), bool], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) {
    %431 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 7), uint8] */, dtype="bool") /* ty=Tensor[(6, 7), bool] */;
    %432 = shape_of(%var_1419, dtype="int32") /* ty=Tensor[(2), int32] */;
    %433 = cast(%var_1419, dtype="bool") /* ty=Tensor[(6, 7), bool] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %435 = cast(meta[relay.Constant][30] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %436 = reshape(%435, newshape=[14, 13, 6]) /* ty=Tensor[(14, 13, 6), float32] */;
    %437 = @func_461(%436) /* ty=(Tensor[(14, 13, 6), bool],) */;
    %438 = not_equal(%433, %434) /* ty=Tensor[(6, 7), bool] */;
    %439 = %437.0;
    (%438, %439, meta[relay.Constant][30] /* ty=Tensor[(1092), float32] */)
  };
  %440(%var_1438) /* ty=(Tensor[(6, 7), bool], Tensor[(14, 13, 6), bool], Tensor[(1092), float32]) */
}

def @func_5519() -> (Tensor[(13, 6, 15), float32],) {
  %441 = @func_4531() /* ty=Tensor[(13, 6, 15), float32] */;
  (%441,)
}

def @func_2913() -> Tensor[(13, 6, 15), bool] {
  %449 = fn () -> Tensor[(13, 6, 15), bool] {
    %442 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
    %443 = cast(%442, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
    %444 = cos(%443) /* ty=Tensor[(13, 6, 15), float32] */;
    %445 = cast(%442, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
    %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
    %447 = cast(%444, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%447, %448) /* ty=Tensor[(13, 6, 15), bool] */
  };
  %449() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_5433(%var_5432: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float32], Tensor[(91), float32], Tensor[(8, 5, 15), uint32], Tensor[(300, 2), uint32], Tensor[(6, 2, 6), float32], Tensor[(72), float64]) {
  %469 = fn (%var_5417: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float32], Tensor[(91), float32], Tensor[(8, 5, 15), uint32], Tensor[(300, 2), uint32], Tensor[(6, 2, 6), float32], Tensor[(72), float64]) {
    %450 = @func_3381() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) */;
    %451 = %450.0;
    %452 = cast(%451, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
    %453 = @func_3751() /* ty=(Tensor[(13, 6, 15), bool],) */;
    %454 = cast(meta[relay.Constant][31] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
    %455 = reshape(%454, newshape=[91]) /* ty=Tensor[(91), float32] */;
    %456 = @func_2391(%455) /* ty=(Tensor[(13, 6), float32], Tensor[(7, 1, 13), float32], Tensor[(91), float32]) */;
    %457 = cast(meta[relay.Constant][32] /* ty=Tensor[(300, 2), uint32] */, dtype="uint32") /* ty=Tensor[(300, 2), uint32] */;
    %458 = cast(meta[relay.Constant][32] /* ty=Tensor[(300, 2), uint32] */, dtype="uint32") /* ty=Tensor[(300, 2), uint32] */;
    %459 = reshape(%457, newshape=[8, 5, 15]) /* ty=Tensor[(8, 5, 15), uint32] */;
    %460 = reshape(%458, newshape=[8, 5, 15]) /* ty=Tensor[(8, 5, 15), uint32] */;
    %461 = cast(%var_5417, dtype="float64") /* ty=Tensor[(72), float64] */;
    %462 = reshape(%461, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float64] */;
    %463 = @func_635(%462) /* ty=(Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) */;
    %464 = exp(%452) /* ty=Tensor[(13, 6, 15), float32] */;
    %465 = %453.0;
    %466 = %456.2;
    %467 = @func_4669(%459, %460) /* ty=Tensor[(8, 5, 15), uint32] */;
    %468 = %463.5;
    (%464, %465, %466, meta[relay.Constant][31] /* ty=Tensor[(91), float32] */, %467, meta[relay.Constant][32] /* ty=Tensor[(300, 2), uint32] */, %468, %var_5417)
  };
  %469(%var_5432) /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), bool], Tensor[(91), float32], Tensor[(91), float32], Tensor[(8, 5, 15), uint32], Tensor[(300, 2), uint32], Tensor[(6, 2, 6), float32], Tensor[(72), float64]) */
}

def @func_3995(%var_3994: Tensor[(13, 6, 15), bool]) -> (Tensor[(13, 6, 15), int8],) {
  %476 = fn (%var_3981: Tensor[(13, 6, 15), bool]) -> (Tensor[(13, 6, 15), int8],) {
    %470 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
    %471 = cast(%var_3981, dtype="int8") /* ty=Tensor[(13, 6, 15), int8] */;
    %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%470, dtype="int8") /* ty=Tensor[(13, 6, 15), int8] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %475 = minimum(%473, %474) /* ty=Tensor[(13, 6, 15), int8] */;
    (%475,)
  };
  %476(%var_3994) /* ty=(Tensor[(13, 6, 15), int8],) */
}

def @func_3176() -> (Tensor[(13, 6, 15), uint16],) {
  @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */
}

def @func_2596() -> (Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) {
  @func_2594() /* ty=(Tensor[(13, 6, 15), float32], Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), float32]) */
}

def @func_4703() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  %479 = fn () -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
    %477 = @func_3918() /* ty=Tensor[(13, 6, 15), bool] */;
    %478 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
    (%477, %478)
  };
  %479() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */
}

def @func_4969() -> (Tensor[(7, 1, 13), float32],) {
  %480 = @func_4849() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(7, 1, 13), float32], Tensor[(91), float32], Tensor[(13, 6, 15), float32]) */;
  %481 = %480.1;
  (%481,)
}

def @func_3415(%var_3413: Tensor[(13, 6, 15), float32]) -> (Tensor[(13, 6, 15), float32],) {
  @func_3412(%var_3413) /* ty=(Tensor[(13, 6, 15), float32],) */
}

def @func_6496(%var_6494: Tensor[(6, 15, 14), float32]) -> (Tensor[(6, 15, 14), float32], Tensor[(14, 7, 10), int8], Tensor[(980), int8], Tensor[(1092), float32]) {
  @func_6493(%var_6494) /* ty=(Tensor[(6, 15, 14), float32], Tensor[(14, 7, 10), int8], Tensor[(980), int8], Tensor[(1092), float32]) */
}

def @func_3579(%var_3577: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), uint64], Tensor[(14, 13, 6), bool], Tensor[(72), float64], Tensor[(13, 6, 15), uint64]) {
  @func_3576(%var_3577) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(14, 13, 6), bool], Tensor[(72), float64], Tensor[(13, 6, 15), uint64]) */
}

def @func_5471() -> (Tensor[(13, 6, 15), bool],) {
  %482 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  (%482,)
}

def @func_3381() -> (Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) {
  %483 = @func_2947() /* ty=(Tensor[(13, 6, 15), uint64],) */;
  %484 = %483.0;
  %485 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
  (%484, %485)
}

def @func_3752() -> (Tensor[(13, 6, 15), bool],) {
  %488 = fn () -> (Tensor[(13, 6, 15), bool],) {
    %486 = @func_2933() /* ty=(Tensor[(13, 6, 15), bool],) */;
    %487 = %486.0;
    (%487,)
  };
  %488() /* ty=(Tensor[(13, 6, 15), bool],) */
}

def @func_6089() -> (Tensor[(13, 6, 15), float32],) {
  %489 = @func_5519() /* ty=(Tensor[(13, 6, 15), float32],) */;
  %490 = %489.0;
  (%490,)
}

def @func_4948(%var_4947: Tensor[(11, 2), float64]) -> (Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool], Tensor[(22), uint16], Tensor[(11, 2), float64], Tensor[(1, 11, 2), float64]) {
  %501 = fn (%var_4912: Tensor[(11, 2), float64]) -> (Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool], Tensor[(22), uint16], Tensor[(11, 2), float64], Tensor[(1, 11, 2), float64]) {
    %491 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
    %492 = cast(%491, dtype="bool") /* ty=Tensor[(13, 6, 15), bool] */;
    %493 = reshape(%492, newshape=[13, 6, 15]) /* ty=Tensor[(13, 6, 15), bool] */;
    %494 = cast(%var_4912, dtype="float64") /* ty=Tensor[(11, 2), float64] */;
    %495 = reshape(%494, newshape=[22]) /* ty=Tensor[(22), float64] */;
    %496 = @func_4618(%495) /* ty=(Tensor[(13, 6, 15), uint16], Tensor[(?, 11, 2), uint16], Tensor[(22), uint16]) */;
    %497 = @func_3969() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) */;
    %498 = @func_4522(%493) /* ty=Tensor[(13, 6, 15), bool] */;
    %499 = %496.2;
    %500 = %497.1;
    (%491, %498, %499, %var_4912, %500)
  };
  %501(%var_4947) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool], Tensor[(22), uint16], Tensor[(11, 2), float64], Tensor[(1, 11, 2), float64]) */
}

def @func_2231(%var_2210: Tensor[(72), float64]) -> (Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) {
  %502 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float64") /* ty=Tensor[(11, 16, 5), float64] */;
  %503 = cast(meta[relay.Constant][34] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %504 = reshape(%503, newshape=[11, 3, 10]) /* ty=Tensor[(11, 3, 10), float32] */;
  %505 = @func_302(%504) /* ty=(Tensor[(11, 3, 10), bool],) */;
  %506 = cast(meta[relay.Constant][34] /* ty=Tensor[(330), float32] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %507 = cast(%var_2210, dtype="float64") /* ty=Tensor[(72), float64] */;
  %508 = reshape(%507, newshape=[6, 2, 6]) /* ty=Tensor[(6, 2, 6), float64] */;
  %509 = @func_635(%508) /* ty=(Tensor[(14, 13, 6), bool], Tensor[(1092), float32], Tensor[(6, 2, 6), float64], Tensor[(11, 3, 10), bool], Tensor[(1, 330), float32], Tensor[(6, 2, 6), float32]) */;
  %510 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 5), float32] */;
  %511 = asin(%510) /* ty=Tensor[(11, 16, 5), float32] */;
  %512 = cast(%511, dtype="int8") /* ty=Tensor[(11, 16, 5), int8] */;
  %513 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int8") /* ty=Tensor[(11, 16, 5), int8] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %516 = bitwise_xor(%514, %515) /* ty=Tensor[(11, 16, 5), int8] */;
  %517 = cast(%516, dtype="uint32") /* ty=Tensor[(11, 16, 5), uint32] */;
  %518 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 16, 5), float32] */, dtype="uint32") /* ty=Tensor[(11, 16, 5), uint32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %521 = bitwise_and(%519, %520) /* ty=Tensor[(11, 16, 5), uint32] */;
  %522 = cast(%521, dtype="int16") /* ty=Tensor[(11, 16, 5), int16] */;
  %523 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%516, dtype="int16") /* ty=Tensor[(11, 16, 5), int16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %526 = subtract(%524, %525) /* ty=Tensor[(11, 16, 5), int16] */;
  %527 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 16, 5), int16] */, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%526, dtype="bool") /* ty=Tensor[(11, 16, 5), bool] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %531 = tan(%502) /* ty=Tensor[(11, 16, 5), float64] */;
  %532 = %505.0;
  %533 = exp(%506) /* ty=Tensor[(330), float64] */;
  %534 = %509.2;
  %535 = logical_and(%529, %530) /* ty=Tensor[(11, 16, 5), bool] */;
  (%531, %532, %533, %534, %var_2210, %535)
}

def @func_4672(%var_4670: Tensor[(8, 5, 15), uint32], %var_4671: Tensor[(8, 5, 15), uint32]) -> Tensor[(8, 5, 15), uint32] {
  %540 = fn (%var_4645: Tensor[(8, 5, 15), uint32], %var_4646: Tensor[(8, 5, 15), uint32]) -> Tensor[(8, 5, 15), uint32] {
    %536 = cast(%var_4646, dtype="uint32") /* ty=Tensor[(8, 5, 15), uint32] */;
    %537 = shape_of(%var_4645, dtype="int32") /* ty=Tensor[(3), int32] */;
    %538 = cast(%var_4645, dtype="uint32") /* ty=Tensor[(8, 5, 15), uint32] */;
    %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%538, %539) /* ty=Tensor[(8, 5, 15), uint32] */
  };
  %540(%var_4670, %var_4671) /* ty=Tensor[(8, 5, 15), uint32] */
}

def @func_3484(%var_3460: Tensor[(2310), float64]) -> (Tensor[(2310), float64], Tensor[(15, 11, 14), float64], Tensor[(13, 6, 15), uint64]) {
  %541 = cast(%var_3460, dtype="float64") /* ty=Tensor[(2310), float64] */;
  %542 = reshape(%541, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), float64] */;
  %543 = @func_1701(%542) /* ty=(Tensor[(15, 11, 14), float64],) */;
  %544 = %543.0;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(15, 11, 14), float64] */;
  %546 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %547 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 6, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="uint64") /* ty=Tensor[(13, 6, 15), uint64] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %551 = rsqrt(%545) /* ty=Tensor[(15, 11, 14), float64] */;
  %552 = bitwise_or(%549, %550) /* ty=Tensor[(13, 6, 15), uint64] */;
  (%var_3460, %551, %552)
}

def @func_3232(%var_3230: Tensor[(1, 11, 2), float64]) -> (Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) {
  @func_3229(%var_3230) /* ty=(Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) */
}

def @func_3229(%var_3191: Tensor[(1, 11, 2), float64]) -> (Tensor[(1, 11, 2), float64], Tensor[(1, 11, 2), float64]) {
  %553 = cast(%var_3191, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %554 = log10(%553) /* ty=Tensor[(1, 11, 2), float64] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %556 = cast(%554, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %557 = rsqrt(%555) /* ty=Tensor[(1, 11, 2), float64] */;
  %558 = log2(%556) /* ty=Tensor[(1, 11, 2), float64] */;
  (%557, %558)
}

def @func_3971() -> (Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) {
  @func_3969() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) */
}

def @func_5969() -> (Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) {
  @func_5967() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */
}

def @func_5075() -> (Tensor[(13, 6, 15), bool],) {
  %560 = fn () -> (Tensor[(13, 6, 15), bool],) {
    %559 = @func_4091() /* ty=Tensor[(13, 6, 15), bool] */;
    (%559,)
  };
  %560() /* ty=(Tensor[(13, 6, 15), bool],) */
}

def @func_6706() -> Tensor[(13, 6, 15), bool] {
  %561 = @func_5231() /* ty=(Tensor[(13, 6, 15), bool],) */;
  %561.0
}

def @main() -> (Tensor[(13, 6, 15), float64],) {
  %562 = @func_4703() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), bool]) */;
  %563 = %562.1;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(13, 6, 15), float64] */;
  %565 = cosh(%564) /* ty=Tensor[(13, 6, 15), float64] */;
  (%565,)
}

def @func_944(%var_942: Tensor[(9, 7), float32], %var_943: Tensor[(9, 7), float32]) -> (Tensor[(9, 7), float32], Tensor[(11, 12, 14), int16], Tensor[(1848), int16]) {
  %575 = fn (%var_927: Tensor[(9, 7), float32], %var_928: Tensor[(9, 7), float32]) -> (Tensor[(9, 7), float32], Tensor[(11, 12, 14), int16], Tensor[(1848), int16]) {
    %566 = cast(%var_928, dtype="float32") /* ty=Tensor[(9, 7), float32] */;
    %567 = shape_of(%var_927, dtype="int32") /* ty=Tensor[(2), int32] */;
    %568 = cast(%var_927, dtype="float32") /* ty=Tensor[(9, 7), float32] */;
    %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %570 = cast(meta[relay.Constant][37] /* ty=Tensor[(1848), int16] */, dtype="int16") /* ty=Tensor[(1848), int16] */;
    %571 = reshape(%570, newshape=[11, 12, 14]) /* ty=Tensor[(11, 12, 14), int16] */;
    %572 = @func_703(%571) /* ty=(Tensor[(11, 12, 14), int16],) */;
    %573 = power(%568, %569) /* ty=Tensor[(9, 7), float32] */;
    %574 = %572.0;
    (%573, %574, meta[relay.Constant][37] /* ty=Tensor[(1848), int16] */)
  };
  %575(%var_942, %var_943) /* ty=(Tensor[(9, 7), float32], Tensor[(11, 12, 14), int16], Tensor[(1848), int16]) */
}

def @func_2727(%var_2726: Tensor[(63), float32]) -> (Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) {
  %597 = fn (%var_2718: Tensor[(63), float32]) -> (Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) {
    %576 = cast(meta[relay.Constant][38] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %577 = reshape(%576, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %578 = @func_2231(%577) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(11, 3, 10), bool], Tensor[(330), float64], Tensor[(6, 2, 6), float64], Tensor[(72), float64], Tensor[(11, 16, 5), bool]) */;
    %579 = cast(meta[relay.Constant][39] /* ty=Tensor[(154), uint64] */, dtype="uint64") /* ty=Tensor[(154), uint64] */;
    %580 = reshape(%579, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), uint64] */;
    %581 = @func_88(%580) /* ty=Tensor[(2, 7, 11), bool] */;
    %582 = cast(meta[relay.Constant][39] /* ty=Tensor[(154), uint64] */, dtype="float32") /* ty=Tensor[(154), float32] */;
    %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%581, dtype="float32") /* ty=Tensor[(2, 7, 11), float32] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %586 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
    %587 = cast(%586, dtype="float64") /* ty=Tensor[(13, 6, 15), float64] */;
    %588 = cast(%var_2718, dtype="float32") /* ty=Tensor[(63), float32] */;
    %589 = cast(%var_2718, dtype="float32") /* ty=Tensor[(63), float32] */;
    %590 = reshape(%588, newshape=[9, 7]) /* ty=Tensor[(9, 7), float32] */;
    %591 = reshape(%589, newshape=[9, 7]) /* ty=Tensor[(9, 7), float32] */;
    %592 = @func_941(%590, %591) /* ty=(Tensor[(9, 7), float32], Tensor[(11, 12, 14), int16], Tensor[(1848), int16]) */;
    %593 = %578.0;
    %594 = mod(%584, %585) /* ty=Tensor[(2, 7, 11), float32] */;
    %595 = acos(%587) /* ty=Tensor[(13, 6, 15), float64] */;
    %596 = %592.2;
    (%593, meta[relay.Constant][38] /* ty=Tensor[(72), float64] */, %594, %595, %596, %var_2718)
  };
  %597(%var_2726) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) */
}

def @func_3919() -> Tensor[(13, 6, 15), bool] {
  %598 = fn () -> Tensor[(13, 6, 15), bool] {
    @func_2912() /* ty=Tensor[(13, 6, 15), bool] */
  };
  %598() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_4086() -> Tensor[(13, 6, 15), float32] {
  @func_4084() /* ty=Tensor[(13, 6, 15), float32] */
}

def @func_5701(%var_5682: Tensor[(22), float64]) -> (Tensor[(22), float32], Tensor[(22), float64]) {
  %599 = @func_3969() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(1, 11, 2), float64], Tensor[(22), float64]) */;
  %600 = %599.2;
  %601 = cast(%var_5682, dtype="float32") /* ty=Tensor[(22), float32] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(1), int32] */;
  %603 = cast(%600, dtype="float32") /* ty=Tensor[(22), float32] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?), float32] */;
  %605 = cast(%var_5682, dtype="float64") /* ty=Tensor[(22), float64] */;
  %606 = shape_of(%600, dtype="int32") /* ty=Tensor[(1), int32] */;
  %607 = cast(%600, dtype="float64") /* ty=Tensor[(22), float64] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?), float64] */;
  %609 = subtract(%603, %604) /* ty=Tensor[(22), float32] */;
  %610 = mod(%607, %608) /* ty=Tensor[(22), float64] */;
  (%609, %610)
}

def @func_2394(%var_2392: Tensor[(91), float32]) -> (Tensor[(13, 6), float32], Tensor[(7, 1, 13), float32], Tensor[(91), float32]) {
  @func_2391(%var_2392) /* ty=(Tensor[(13, 6), float32], Tensor[(7, 1, 13), float32], Tensor[(91), float32]) */
}

def @func_4631(%var_4624: Tensor[(2, 16, 4), int64]) -> (Tensor[(2, 16, 4), int64],) {
  %611 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 16, 4), int64] */, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
  %612 = shape_of(%var_4624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_4624, dtype="int64") /* ty=Tensor[(2, 16, 4), int64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %615 = minimum(%613, %614) /* ty=Tensor[(2, 16, 4), int64] */;
  (%615,)
}

def @func_3057(%var_3055: Tensor[(63), float32], %var_3056: Tensor[(42), float32]) -> (Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) {
  @func_3053(%var_3055, %var_3056) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) */
}

def @func_1185(%var_1182: Tensor[(11, 8, 10), uint32], %var_1183: Tensor[(11, 8, 10), uint32], %var_1184: Tensor[(154), uint64]) -> (Tensor[(11, 8, 10), uint32], Tensor[(11, 8, 10), float32], Tensor[(2, 7, 11), bool], Tensor[(154), uint64]) {
  %631 = fn (%var_1160: Tensor[(11, 8, 10), uint32], %var_1161: Tensor[(11, 8, 10), uint32], %var_1177: Tensor[(154), uint64]) -> (Tensor[(11, 8, 10), uint32], Tensor[(11, 8, 10), float32], Tensor[(2, 7, 11), bool], Tensor[(154), uint64]) {
    %616 = cast(%var_1161, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
    %617 = shape_of(%var_1160, dtype="int32") /* ty=Tensor[(3), int32] */;
    %618 = cast(%var_1160, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
    %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %620 = bitwise_and(%618, %619) /* ty=Tensor[(11, 8, 10), uint32] */;
    %621 = cast(%var_1160, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
    %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
    %623 = cast(%620, dtype="uint32") /* ty=Tensor[(11, 8, 10), uint32] */;
    %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %625 = cast(%var_1160, dtype="float32") /* ty=Tensor[(11, 8, 10), float32] */;
    %626 = cast(%var_1177, dtype="uint64") /* ty=Tensor[(154), uint64] */;
    %627 = reshape(%626, newshape=[2, 7, 11]) /* ty=Tensor[(2, 7, 11), uint64] */;
    %628 = right_shift(%623, %624) /* ty=Tensor[(11, 8, 10), uint32] */;
    %629 = atanh(%625) /* ty=Tensor[(11, 8, 10), float32] */;
    %630 = @func_88(%627) /* ty=Tensor[(2, 7, 11), bool] */;
    (%628, %629, %630, %var_1177)
  };
  %631(%var_1182, %var_1183, %var_1184) /* ty=(Tensor[(11, 8, 10), uint32], Tensor[(11, 8, 10), float32], Tensor[(2, 7, 11), bool], Tensor[(154), uint64]) */
}

def @func_4634(%var_4632: Tensor[(2, 16, 4), int64]) -> (Tensor[(2, 16, 4), int64],) {
  @func_4631(%var_4632) /* ty=(Tensor[(2, 16, 4), int64],) */
}

def @func_6662() -> Tensor[(13, 6, 15), bool] {
  %632 = fn () -> Tensor[(13, 6, 15), bool] {
    @func_4091() /* ty=Tensor[(13, 6, 15), bool] */
  };
  %632() /* ty=Tensor[(13, 6, 15), bool] */
}

def @func_6359(%var_6348: Tensor[(14, 12, 11), uint32]) -> Tensor[(14, 12, 11), uint32] {
  %633 = cast(meta[relay.Constant][41] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %634 = cast(%var_6348, dtype="uint32") /* ty=Tensor[(14, 12, 11), uint32] */;
  add(%633, %634) /* ty=Tensor[(14, 12, 11), uint32] */
}

def @func_4451(%var_4449: Tensor[(324), uint32], %var_4450: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(42), float32], Tensor[(324), int16], Tensor[(9, 15, 4), float32], Tensor[(540), float32], Tensor[(10, 11, 2), bool], Tensor[(72), float64]) {
  %665 = fn (%var_4402: Tensor[(324), uint32], %var_4443: Tensor[(72), float64]) -> (Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(42), float32], Tensor[(324), int16], Tensor[(9, 15, 4), float32], Tensor[(540), float32], Tensor[(10, 11, 2), bool], Tensor[(72), float64]) {
    %635 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
    %636 = %635.0;
    %637 = cast(%636, dtype="float32") /* ty=Tensor[(13, 6, 15), float32] */;
    %638 = cast(meta[relay.Constant][42] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
    %639 = cast(meta[relay.Constant][43] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %640 = reshape(%638, newshape=[63]) /* ty=Tensor[(63), float32] */;
    %641 = reshape(%639, newshape=[42]) /* ty=Tensor[(42), float32] */;
    %642 = @func_3053(%640, %641) /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) */;
    %643 = cast(%var_4402, dtype="uint32") /* ty=Tensor[(324), uint32] */;
    %644 = cast(%var_4402, dtype="uint32") /* ty=Tensor[(324), uint32] */;
    %645 = reshape(%643, newshape=[9, 4, 9]) /* ty=Tensor[(9, 4, 9), uint32] */;
    %646 = reshape(%644, newshape=[9, 4, 9]) /* ty=Tensor[(9, 4, 9), uint32] */;
    %647 = @func_2479(%645, %646) /* ty=(Tensor[(9, 4, 9), uint32],) */;
    %648 = %647.0;
    %649 = cast(%648, dtype="int16") /* ty=Tensor[(9, 4, 9), int16] */;
    %650 = shape_of(%var_4402, dtype="int32") /* ty=Tensor[(1), int32] */;
    %651 = cast(%var_4402, dtype="int16") /* ty=Tensor[(324), int16] */;
    %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?), int16] */;
    %653 = cast(meta[relay.Constant][44] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
    %654 = cast(meta[relay.Constant][44] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
    %655 = reshape(%653, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
    %656 = reshape(%654, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float32] */;
    %657 = cast(%var_4443, dtype="float64") /* ty=Tensor[(72), float64] */;
    %658 = reshape(%657, newshape=[3, 24]) /* ty=Tensor[(3, 24), float64] */;
    %659 = @func_4181(%658) /* ty=(Tensor[(10, 11, 2), int32], Tensor[(13, 6, 15), uint64], Tensor[(3, 24), float64], Tensor[(10, 11, 2), bool]) */;
    %660 = sin(%637) /* ty=Tensor[(13, 6, 15), float32] */;
    %661 = %642.1;
    %662 = bitwise_or(%651, %652) /* ty=Tensor[(324), int16] */;
    %663 = @func_2525(%655, %656) /* ty=Tensor[(9, 15, 4), float32] */;
    %664 = %659.3;
    (%660, %661, meta[relay.Constant][42] /* ty=Tensor[(63), float32] */, meta[relay.Constant][43] /* ty=Tensor[(42), float32] */, %662, %663, meta[relay.Constant][44] /* ty=Tensor[(540), float32] */, %664, %var_4443)
  };
  %665(%var_4449, %var_4450) /* ty=(Tensor[(13, 6, 15), float32], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(42), float32], Tensor[(324), int16], Tensor[(9, 15, 4), float32], Tensor[(540), float32], Tensor[(10, 11, 2), bool], Tensor[(72), float64]) */
}

def @func_2482(%var_2480: Tensor[(9, 4, 9), uint32], %var_2481: Tensor[(9, 4, 9), uint32]) -> (Tensor[(9, 4, 9), uint32],) {
  %671 = fn (%var_2471: Tensor[(9, 4, 9), uint32], %var_2472: Tensor[(9, 4, 9), uint32]) -> (Tensor[(9, 4, 9), uint32],) {
    %666 = cast(%var_2472, dtype="uint32") /* ty=Tensor[(9, 4, 9), uint32] */;
    %667 = shape_of(%var_2471, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%var_2471, dtype="uint32") /* ty=Tensor[(9, 4, 9), uint32] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %670 = left_shift(%668, %669) /* ty=Tensor[(9, 4, 9), uint32] */;
    (%670,)
  };
  %671(%var_2480, %var_2481) /* ty=(Tensor[(9, 4, 9), uint32],) */
}

def @func_3053(%var_3023: Tensor[(63), float32], %var_3028: Tensor[(42), float32]) -> (Tensor[(13, 6, 15), uint64], Tensor[(11, 16, 5), float64], Tensor[(63), float32], Tensor[(3, 14), float32], Tensor[(42), float64]) {
  %672 = cast(%var_3023, dtype="float32") /* ty=Tensor[(63), float32] */;
  %673 = reshape(%672, newshape=[63]) /* ty=Tensor[(63), float32] */;
  %674 = @func_2725(%673) /* ty=(Tensor[(11, 16, 5), float64], Tensor[(72), float64], Tensor[(2, 7, 11), float32], Tensor[(13, 6, 15), float64], Tensor[(1848), int16], Tensor[(63), float32]) */;
  %675 = cast(%var_3028, dtype="float32") /* ty=Tensor[(42), float32] */;
  %676 = reshape(%675, newshape=[3, 14]) /* ty=Tensor[(3, 14), float32] */;
  %677 = @func_1839(%676) /* ty=(Tensor[(3, 14), float32],) */;
  %678 = cast(%var_3028, dtype="float64") /* ty=Tensor[(42), float64] */;
  %679 = @func_2554() /* ty=Tensor[(13, 6, 15), uint64] */;
  %680 = %674.0;
  %681 = %677.0;
  %682 = log(%678) /* ty=Tensor[(42), float64] */;
  (%679, %680, %var_3023, %681, %682)
}

def @func_3383() -> (Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) {
  @func_3381() /* ty=(Tensor[(13, 6, 15), uint64], Tensor[(13, 6, 15), bool]) */
}

def @func_6362(%var_6360: Tensor[(14, 12, 11), uint32]) -> Tensor[(14, 12, 11), uint32] {
  @func_6359(%var_6360) /* ty=Tensor[(14, 12, 11), uint32] */
}

def @func_302(%var_287: Tensor[(11, 3, 10), float32]) -> (Tensor[(11, 3, 10), bool],) {
  %683 = cast(%var_287, dtype="float32") /* ty=Tensor[(11, 3, 10), float32] */;
  %684 = exp(%683) /* ty=Tensor[(11, 3, 10), float32] */;
  %685 = cast(%684, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %686 = shape_of(%var_287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%var_287, dtype="bool") /* ty=Tensor[(11, 3, 10), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %689 = not_equal(%687, %688) /* ty=Tensor[(11, 3, 10), bool] */;
  (%689,)
}

def @func_3643() -> (Tensor[(13, 6, 15), uint16],) {
  %692 = fn () -> (Tensor[(13, 6, 15), uint16],) {
    %690 = @func_3174() /* ty=(Tensor[(13, 6, 15), uint16],) */;
    %691 = %690.0;
    (%691,)
  };
  %692() /* ty=(Tensor[(13, 6, 15), uint16],) */
}

def @func_4531() -> Tensor[(13, 6, 15), float32] {
  %693 = @func_3686() /* ty=(Tensor[(13, 6, 15), bool], Tensor[(13, 6, 15), float32]) */;
  %693.1
}

def @func_5232() -> (Tensor[(13, 6, 15), bool],) {
  %695 = fn () -> (Tensor[(13, 6, 15), bool],) {
    %694 = @func_3351() /* ty=Tensor[(13, 6, 15), bool] */;
    (%694,)
  };
  %695() /* ty=(Tensor[(13, 6, 15), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen24/build/output.py", line 1904, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:44:47] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

