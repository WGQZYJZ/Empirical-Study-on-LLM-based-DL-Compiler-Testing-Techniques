==========mod==========
#[version = "0.0.5"]
def @func_6770(%var_6732: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64], Tensor[(16, 8, 8), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %1 = shape_of(%var_6732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_6732, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %4 = power(%2, %3) /* ty=Tensor[(9, 16, 12), float64] */;
  %5 = @func_1795() /* ty=Tensor[(16, 8, 8), float64] */;
  (%4, %5)
}

def @func_502(%var_486: Tensor[(11, 9, 14), float64]) -> Tensor[(11, 9, 14), float64] {
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 9, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %7 = shape_of(%var_486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_486, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%8, %9) /* ty=Tensor[(11, 9, 14), float64] */
}

def @func_3427(%var_3406: Tensor[(9, 5, 13), float32]) -> Tensor[(9, 5, 13), float32] {
  %10 = cast(%var_3406, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %11 = rsqrt(%10) /* ty=Tensor[(9, 5, 13), float32] */;
  %12 = cast(%var_3406, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%14, %15) /* ty=Tensor[(9, 5, 13), float32] */
}

def @func_3797() -> (Tensor[(16, 8, 8), bool],) {
  %16 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %17 = %16.0;
  (%17,)
}

def @func_3397(%var_3384: Tensor[(5, 10, 16), float64], %var_3385: Tensor[(5, 10, 16), float64]) -> (Tensor[(5, 10, 16), float32],) {
  %18 = cast(%var_3385, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
  %19 = shape_of(%var_3384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%var_3384, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %22 = mod(%20, %21) /* ty=Tensor[(5, 10, 16), float64] */;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
  %24 = asinh(%23) /* ty=Tensor[(5, 10, 16), float32] */;
  (%24,)
}

def @func_8356() -> Tensor[(16, 8, 8), uint16] {
  %25 = @func_5467() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %25.1
}

def @func_1570() -> Tensor[(16, 8, 8), float64] {
  %26 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %26.0
}

def @func_5659() -> Tensor[(16, 8, 8), uint16] {
  @func_5168() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_7779() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(14, 52), bool]) {
  %27 = @func_5467() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %28 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 52), bool] */, dtype="bool") /* ty=Tensor[(14, 52), bool] */;
  %31 = reshape(%29, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), float64] */;
  %32 = reshape(%30, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %33 = @func_290(%31, %32) /* ty=(Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) */;
  %34 = %27.1;
  %35 = %28.1;
  %36 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
  %37 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  %38 = %33.1;
  (%34, %35, %36, %37, %38, meta[relay.Constant][2] /* ty=Tensor[(210), float64] */, meta[relay.Constant][3] /* ty=Tensor[(14, 52), bool] */)
}

def @func_6369(%var_6363: Tensor[(8, 9, 8), float64]) -> Tensor[(8, 9, 8), float64] {
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 1, 8), float64] */;
  %40 = cast(%var_6363, dtype="float64") /* ty=Tensor[(8, 9, 8), float64] */;
  floor_mod(%39, %40) /* ty=Tensor[(8, 9, 8), float64] */
}

def @func_3338() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %41 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
  %42 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  %43 = %41.1;
  (%42, %43)
}

def @func_4889(%var_4865: Tensor[(8, 2, 5), int64], %var_4873: Tensor[(8, 2, 5), int64]) -> (Tensor[(8, 2, 5), bool],) {
  %44 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 2, 5), int64] */, dtype="int64") /* ty=Tensor[(8, 2, 5), int64] */;
  %45 = shape_of(%var_4865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_4865, dtype="int64") /* ty=Tensor[(8, 2, 5), int64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %48 = bitwise_xor(%46, %47) /* ty=Tensor[(8, 2, 5), int64] */;
  %49 = cast(%var_4873, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%48, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %53 = less(%51, %52) /* ty=Tensor[(8, 2, 5), bool] */;
  (%53,)
}

def @func_1386(%var_1380: Tensor[(16, 8, 8), uint16]) -> Tensor[(16, 8, 8), bool] {
  %54 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %55 = cast(%var_1380, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%57, %58) /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_4038() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) {
  %59 = @func_3813() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %60 = @func_3658() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %61 = %59.0;
  %62 = %60.1;
  (%61, %62)
}

def @func_1068() -> (Tensor[(16, 8, 8), uint16],) {
  %63 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %64 = %63.1;
  (%64,)
}

def @func_2152() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  %65 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %67 = reshape(%66, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %68 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %69 = @func_748(%67) /* ty=Tensor[(16, 8, 8), bool] */;
  %70 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %71 = %68.0;
  %72 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  (%65, %69, %70, %71, %72)
}

def @func_256(%var_245: Tensor[(7, 8, 13), bool], %var_246: Tensor[(7, 8, 13), bool]) -> (Tensor[(7, 8, 13), bool],) {
  %73 = cast(%var_246, dtype="bool") /* ty=Tensor[(7, 8, 13), bool] */;
  %74 = shape_of(%var_245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%var_245, dtype="bool") /* ty=Tensor[(7, 8, 13), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %77 = logical_and(%75, %76) /* ty=Tensor[(7, 8, 13), bool] */;
  (%77,)
}

def @func_3813() -> (Tensor[(16, 8, 8), uint16],) {
  %78 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  (%78,)
}

def @func_2257() -> (Tensor[(16, 8, 8), uint16],) {
  %79 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %80 = %79.0;
  (%80,)
}

def @func_1698(%var_1695: Tensor[(210), float64]) -> (Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) {
  %81 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %82 = cast(meta[relay.Constant][6] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %83 = reshape(%82, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), float64] */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %85 = cast(%var_1695, dtype="float64") /* ty=Tensor[(210), float64] */;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %87 = reshape(%85, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), float64] */;
  %88 = reshape(%86, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %89 = @func_290(%87, %88) /* ty=(Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) */;
  %90 = %81.0;
  %91 = @func_502(%83) /* ty=Tensor[(11, 9, 14), float64] */;
  %92 = acos(%84) /* ty=Tensor[(1386), float64] */;
  %93 = %89.3;
  (%90, %91, %92, %93, %var_1695, meta[relay.Constant][7] /* ty=Tensor[(728), bool] */)
}

def @func_6167(%var_6151: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), bool] {
  %94 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %95 = %94.0;
  %96 = cast(%var_6151, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%98, %99) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_2242() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) {
  %100 = @func_2152() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %101 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %102 = %100.1;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %104 = reshape(%103, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %105 = %101.0;
  %106 = @func_748(%104) /* ty=Tensor[(16, 8, 8), bool] */;
  (%102, %105, %106)
}

def @func_4071() -> Tensor[(16, 8, 8), float32] {
  @func_2452() /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_1432() -> (Tensor[(16, 8, 8), int16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  %107 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %109 = cosh(%108) /* ty=Tensor[(16, 8, 8), float64] */;
  %110 = cast(%107, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %114 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %115 = subtract(%112, %113) /* ty=Tensor[(16, 8, 8), int16] */;
  %116 = %114.0;
  %117 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  (%115, %116, %117)
}

def @func_2888() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) {
  %118 = @func_2242() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) */;
  %119 = %118.2;
  %120 = cast(%119, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %121 = reshape(%120, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %122 = @func_2013(%121) /* ty=Tensor[(16, 8, 8), bool] */;
  (%119, %122)
}

def @func_6337() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %123 = @func_2338() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %124 = @func_5737() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) */;
  %125 = %123.0;
  %126 = %124.0;
  (%125, %126)
}

def @func_8085(%var_8079: Tensor[(1386), float64]) -> Tensor[(1386), bool] {
  %127 = @func_1932() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) */;
  %128 = %127.5;
  %129 = cast(%var_8079, dtype="bool") /* ty=Tensor[(1386), bool] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(1), int32] */;
  %131 = cast(%128, dtype="bool") /* ty=Tensor[(1386), bool] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%131, %132) /* ty=Tensor[(1386), bool] */
}

def @func_1161(%var_1115: Tensor[(16, 8, 8), uint16]) -> Tensor[(16, 8, 8), int16] {
  %133 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %134 = %133.0;
  %135 = cast(%var_1115, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%137, %138) /* ty=Tensor[(16, 8, 8), int16] */
}

def @func_6829(%var_6815: Tensor[(14, 5, 5), float64]) -> (Tensor[(14, 5, 5), float64], Tensor[(14, 5, 5), float64]) {
  %139 = cast(%var_6815, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %140 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(14, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %144 = power(%141, %142) /* ty=Tensor[(14, 5, 5), float64] */;
  %145 = log10(%143) /* ty=Tensor[(14, 5, 5), float64] */;
  (%144, %145)
}

def @func_2316() -> Tensor[(16, 8, 8), float64] {
  @func_1795() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_4435() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32]) {
  %146 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
  %147 = %146.1;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %152 = cast(%147, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %153 = @func_3751() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) */;
  %154 = floor_mod(%150, %151) /* ty=Tensor[(16, 8, 8), float64] */;
  %155 = sin(%152) /* ty=Tensor[(16, 8, 8), float64] */;
  %156 = %153.0;
  (%154, %155, %156)
}

def @func_6729() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) {
  %157 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %158 = %157.0;
  %159 = @func_1795() /* ty=Tensor[(16, 8, 8), float64] */;
  (%158, %159)
}

def @func_8064(%var_7983: Tensor[(11, 10, 1), uint16], %var_7984: Tensor[(11, 10, 16), uint16], %var_7996: Tensor[(3), int32], %var_7997: Tensor[(252), int32]) -> (Tensor[(11, 10, 16), uint16], Tensor[(16, 8, 8), bool], Tensor[(252), int32], Tensor[(11, 10, 3), uint32], Tensor[(2, 15, 11), bool], Tensor[(3), int32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %160 = cast(%var_7983, dtype="uint16") /* ty=Tensor[(11, 10, 1), uint16] */;
  %161 = cast(%var_7984, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %162 = cast(%var_7996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_7997, dtype="int32") /* ty=Tensor[(252), int32] */;
  %164 = cast(%var_7997, dtype="int32") /* ty=Tensor[(252), int32] */;
  %165 = reshape(%162, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %166 = reshape(%163, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %167 = reshape(%164, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %168 = @func_1500(%165, %166, %167) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %169 = cast(%var_7996, dtype="uint32") /* ty=Tensor[(3), uint32] */;
  %170 = cast(%var_7983, dtype="uint32") /* ty=Tensor[(11, 10, 1), uint32] */;
  %171 = logical_xor(%169, %170) /* ty=Tensor[(11, 10, 3), uint32] */;
  %172 = cast(%171, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %173 = reshape(%172, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %174 = cast(%var_7996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = reshape(%174, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %176 = @func_5798(%175) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) */;
  %177 = @func_6287() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %178 = @func_4608() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %179 = @func_5118() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %180 = right_shift(%160, %161) /* ty=Tensor[(11, 10, 16), uint16] */;
  %181 = %168.1;
  %182 = @func_6167(%173) /* ty=Tensor[(2, 15, 11), bool] */;
  %183 = %176.2;
  %184 = %177.0;
  %185 = %178.0;
  %186 = %179.2;
  (%180, %181, %var_7997, %171, %182, %183, %184, %185, %186)
}

def @func_7252(%var_7158: Tensor[(2, 15, 11), float32], %var_7212: Tensor[(3), int32], %var_7227: Tensor[(2, 15, 11), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) {
  %187 = @func_4186() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) */;
  %188 = cast(meta[relay.Constant][10] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %189 = reshape(%188, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %190 = @func_6167(%189) /* ty=Tensor[(2, 15, 11), bool] */;
  %191 = cast(%190, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %192 = cosh(%191) /* ty=Tensor[(2, 15, 11), float32] */;
  %193 = cast(%var_7158, dtype="uint32") /* ty=Tensor[(2, 15, 11), uint32] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%192, dtype="uint32") /* ty=Tensor[(2, 15, 11), uint32] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %197 = @func_3658() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %198 = @func_7083() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32]) */;
  %199 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %200 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 70), float64] */, dtype="float64") /* ty=Tensor[(5, 70), float64] */;
  %201 = reshape(%200, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), float64] */;
  %202 = @func_6829(%201) /* ty=(Tensor[(14, 5, 5), float64], Tensor[(14, 5, 5), float64]) */;
  %203 = cast(%var_7212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = reshape(%203, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %205 = @func_5798(%204) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) */;
  %206 = cast(meta[relay.Constant][10] /* ty=Tensor[(330), float32] */, dtype="int64") /* ty=Tensor[(330), int64] */;
  %207 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%192, dtype="int64") /* ty=Tensor[(2, 15, 11), int64] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %210 = left_shift(%208, %209) /* ty=Tensor[(2, 15, 11), int64] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %212 = atan(%211) /* ty=Tensor[(2, 15, 11), float32] */;
  %213 = cast(%var_7227, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %217 = %187.1;
  %218 = logical_xor(%195, %196) /* ty=Tensor[(2, 15, 11), uint32] */;
  %219 = %197.1;
  %220 = %198.1;
  %221 = %199.1;
  %222 = %202.0;
  %223 = %205.1;
  %224 = add(%215, %216) /* ty=Tensor[(2, 15, 11), float64] */;
  (%217, %218, %219, %220, %221, %222, meta[relay.Constant][11] /* ty=Tensor[(5, 70), float64] */, %223, %var_7212, %224)
}

def @func_4551() -> (Tensor[(2, 15, 11), float32],) {
  %225 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %226 = %225.0;
  (%226,)
}

def @func_6812() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) {
  %227 = @func_4288() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) */;
  %228 = @func_5533() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %229 = %227.1;
  %230 = %228.0;
  (%229, %230)
}

def @func_4651(%var_4643: Tensor[(728), bool]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool]) {
  %231 = @func_2741() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %232 = cast(%var_4643, dtype="bool") /* ty=Tensor[(728), bool] */;
  %233 = cast(%var_4643, dtype="bool") /* ty=Tensor[(728), bool] */;
  %234 = reshape(%232, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %235 = reshape(%233, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %236 = @func_256(%234, %235) /* ty=(Tensor[(7, 8, 13), bool],) */;
  %237 = %231.2;
  %238 = @func_3629() /* ty=Tensor[(16, 8, 8), float64] */;
  %239 = %236.0;
  (%237, %238, %239, %var_4643)
}

def @func_6932() -> Tensor[(16, 8, 8), float64] {
  %240 = @func_2977() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %240.0
}

def @func_5377(%var_5361: Tensor[(252), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(3), int32], Tensor[(3), int32], Tensor[(252), int32]) {
  %241 = @func_4608() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %242 = cast(meta[relay.Constant][12] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_5361, dtype="int32") /* ty=Tensor[(252), int32] */;
  %244 = cast(%var_5361, dtype="int32") /* ty=Tensor[(252), int32] */;
  %245 = reshape(%242, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %246 = reshape(%243, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %247 = reshape(%244, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %248 = @func_1500(%245, %246, %247) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %249 = %241.0;
  %250 = %248.3;
  (%249, %250, meta[relay.Constant][12] /* ty=Tensor[(3), int32] */, %var_5361)
}

def @func_7658() -> Tensor[(16, 8, 8), float64] {
  %251 = @func_3038() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %251.1
}

def @func_1003() -> Tensor[(16, 8, 8), float64] {
  %252 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %252.0
}

def @func_4006() -> Tensor[(16, 8, 8), float64] {
  %253 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %253.0
}

def @func_3606(%var_3596: Tensor[(3, 8, 10), float64]) -> (Tensor[(3, 8, 10), float64], Tensor[(9, 5, 13), float32], Tensor[(585), float32]) {
  %254 = cast(%var_3596, dtype="float64") /* ty=Tensor[(3, 8, 10), float64] */;
  %255 = cast(meta[relay.Constant][13] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %256 = reshape(%255, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float32] */;
  %257 = sinh(%254) /* ty=Tensor[(3, 8, 10), float64] */;
  %258 = @func_3427(%256) /* ty=Tensor[(9, 5, 13), float32] */;
  (%257, %258, meta[relay.Constant][13] /* ty=Tensor[(585), float32] */)
}

def @func_5737() -> (Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) {
  %259 = @func_4038() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) */;
  %260 = cast(meta[relay.Constant][14] /* ty=Tensor[(126, 2), int32] */, dtype="int32") /* ty=Tensor[(126, 2), int32] */;
  %261 = reshape(%260, newshape=[252]) /* ty=Tensor[(252), int32] */;
  %262 = @func_4988(%261) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(39, 11), float32], Tensor[(252), int32], Tensor[(16, 8, 8), bool], Tensor[(3, 11, 13), bool], Tensor[(3, 84), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %263 = %262.6;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(3, 84), float32] */;
  %265 = %259.1;
  %266 = @func_2753() /* ty=Tensor[(16, 8, 8), uint16] */;
  %267 = exp(%264) /* ty=Tensor[(3, 84), float32] */;
  (%265, meta[relay.Constant][14] /* ty=Tensor[(126, 2), int32] */, %266, %267)
}

def @func_2586(%var_2570: Tensor[(12, 210), float64]) -> (Tensor[(16, 8, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(12, 210), float64], Tensor[(16, 8, 8), float64]) {
  %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 91), float64] */, dtype="float64") /* ty=Tensor[(1, 91), float64] */;
  %269 = reshape(%268, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(700), int64] */, dtype="int64") /* ty=Tensor[(700), int64] */;
  %271 = @func_321(%269) /* ty=Tensor[(1, 13, 7), float64] */;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %273 = reshape(%270, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
  %274 = reshape(%272, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
  %275 = @func_2053(%273, %274) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
  %276 = %275.0;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %278 = cast(%var_2570, dtype="float64") /* ty=Tensor[(12, 210), float64] */;
  %279 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %281 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
  %282 = floor_mod(%277, %278) /* ty=Tensor[(12, 210), float64] */;
  %283 = atanh(%280) /* ty=Tensor[(16, 8, 8), float64] */;
  (%281, %271, meta[relay.Constant][15] /* ty=Tensor[(1, 91), float64] */, meta[relay.Constant][16] /* ty=Tensor[(700), int64] */, %282, %283)
}

def @func_3538() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) {
  %284 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
  %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 8, 8), float64] */, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%284, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %289 = @func_2152() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %290 = logical_or(%287, %288) /* ty=Tensor[(16, 8, 8), bool] */;
  %291 = %289.4;
  (%290, %291)
}

def @func_5467() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
  %292 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %293 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %294 = @func_1611() /* ty=Tensor[(16, 8, 8), float64] */;
  %295 = %292.0;
  %296 = %293.2;
  (%294, %295, %296)
}

def @func_3038() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %297 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %298 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %299 = %297.0;
  %300 = %298.0;
  (%299, %300)
}

def @func_2338() -> (Tensor[(16, 8, 8), float64],) {
  %301 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
  (%301,)
}

def @func_7958() -> (Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) {
  %302 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %303 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %304 = %302.1;
  %305 = %303.0;
  (%304, %305)
}

def @main(%var_8509: uint64) -> Tensor[(2, 5, 10), float64] {
  %306 = cast(%var_8509, dtype="uint64") /* ty=uint64 */;
  %307 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 5, 10), uint64] */, dtype="uint64") /* ty=Tensor[(2, 5, 10), uint64] */;
  %308 = logical_xor(%306, %307) /* ty=Tensor[(2, 5, 10), uint64] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(2, 5, 10), float64] */;
  erf(%309) /* ty=Tensor[(2, 5, 10), float64] */
}

def @func_7938() -> Tensor[(16, 8, 8), float64] {
  @func_6102() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_1932() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) {
  %310 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %311 = cast(meta[relay.Constant][19] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %312 = reshape(%311, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %313 = @func_1698(%312) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) */;
  %314 = cast(meta[relay.Constant][19] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %315 = reshape(%314, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %316 = @func_1698(%315) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) */;
  %317 = %310.0;
  %318 = @func_1611() /* ty=Tensor[(16, 8, 8), float64] */;
  %319 = %313.0;
  %320 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
  %321 = %316.2;
  (%317, %318, %319, meta[relay.Constant][19] /* ty=Tensor[(210), float64] */, %320, %321)
}

def @func_5533() -> (Tensor[(16, 8, 8), float64],) {
  %322 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %323 = %322.0;
  (%323,)
}

def @func_7409() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %324 = @func_5737() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) */;
  %325 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %326 = %324.0;
  %327 = @func_4071() /* ty=Tensor[(16, 8, 8), float32] */;
  %328 = %325.1;
  %329 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  (%326, %327, %328, %329)
}

def @func_921() -> Tensor[(16, 8, 8), float64] {
  %330 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %330.0
}

def @func_7637() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), uint16]) {
  %331 = @func_5533() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %332 = @func_4186() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) */;
  %333 = @func_2257() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %334 = %331.0;
  %335 = %332.0;
  %336 = @func_5168() /* ty=Tensor[(16, 8, 8), uint16] */;
  %337 = %333.0;
  (%334, %335, %336, %337)
}

def @func_3751() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) {
  %338 = @func_3038() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %339 = %338.0;
  %340 = @func_3085() /* ty=Tensor[(16, 8, 8), float32] */;
  %341 = cast(%340, dtype="uint16") /* ty=Tensor[(16, 8, 8), uint16] */;
  %342 = reshape(%341, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), uint16] */;
  %343 = @func_1230(%342) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) */;
  %344 = %343.1;
  %345 = cast(%344, dtype="uint32") /* ty=Tensor[(16, 8, 8), uint32] */;
  %346 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%339, dtype="uint32") /* ty=Tensor[(16, 8, 8), uint32] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %349 = bitwise_xor(%347, %348) /* ty=Tensor[(16, 8, 8), uint32] */;
  (%340, %349)
}

def @func_1500(%var_1481: Tensor[(3), int32], %var_1482: Tensor[(3, 84), int32], %var_1493: Tensor[(3, 84), int32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) {
  %350 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %351 = %350.0;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %353 = reshape(%352, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %354 = cast(%var_1481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%var_1482, dtype="int32") /* ty=Tensor[(3, 84), int32] */;
  %356 = reshape(%354, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %357 = reshape(%355, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), int32] */;
  %358 = @func_1308(%356, %357) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) */;
  %359 = cast(%var_1493, dtype="bool") /* ty=Tensor[(3, 84), bool] */;
  %360 = shape_of(%var_1482, dtype="int32") /* ty=Tensor[(2), int32] */;
  %361 = cast(%var_1482, dtype="bool") /* ty=Tensor[(3, 84), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %363 = @func_748(%353) /* ty=Tensor[(16, 8, 8), bool] */;
  %364 = %358.1;
  %365 = less_equal(%361, %362) /* ty=Tensor[(3, 84), bool] */;
  (%351, %363, %364, %var_1481, %365)
}

def @func_5168() -> Tensor[(16, 8, 8), uint16] {
  %366 = @func_2257() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %366.0
}

def @func_1851() -> (Tensor[(16, 8, 8), uint16],) {
  %367 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %368 = %367.1;
  (%368,)
}

def @func_2013(%var_2008: Tensor[(16, 8, 8), float64]) -> Tensor[(16, 8, 8), bool] {
  %369 = @func_1570() /* ty=Tensor[(16, 8, 8), float64] */;
  %370 = cast(%var_2008, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%372, %373) /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_5176() -> Tensor[(2, 15, 11), float32] {
  %374 = @func_4551() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %374.0
}

def @func_6694() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(700), int64]) {
  %375 = cast(meta[relay.Constant][20] /* ty=Tensor[(700), int64] */, dtype="int64") /* ty=Tensor[(700), int64] */;
  %376 = reshape(%375, newshape=[700]) /* ty=Tensor[(700), int64] */;
  %377 = @func_6236(%376) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(364), float64], Tensor[(825), float32]) */;
  %378 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
  %379 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  %380 = %377.1;
  (%378, %379, %380, meta[relay.Constant][20] /* ty=Tensor[(700), int64] */)
}

def @func_2053(%var_2036: Tensor[(5, 140), int64], %var_2051: Tensor[(1, 91), float64]) -> (Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) {
  %381 = cast(%var_2036, dtype="int64") /* ty=Tensor[(5, 140), int64] */;
  %382 = cast(%var_2036, dtype="int64") /* ty=Tensor[(5, 140), int64] */;
  %383 = reshape(%381, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
  %384 = reshape(%382, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
  %385 = @func_1586(%383, %384) /* ty=(Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) */;
  %386 = @func_1932() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) */;
  %387 = %386.4;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  %389 = tan(%388) /* ty=Tensor[(16, 8, 8), float32] */;
  %390 = cast(%387, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = greater(%392, %393) /* ty=Tensor[(16, 8, 8), bool] */;
  %395 = cast(%394, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %396 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%389, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %399 = cast(%var_2051, dtype="float64") /* ty=Tensor[(1, 91), float64] */;
  %400 = reshape(%399, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %401 = %385.2;
  %402 = equal(%397, %398) /* ty=Tensor[(16, 8, 8), bool] */;
  %403 = @func_321(%400) /* ty=Tensor[(1, 13, 7), float64] */;
  (%401, %var_2036, %402, %403, %var_2051)
}

def @func_1586(%var_1572: Tensor[(5, 10, 14), int64], %var_1573: Tensor[(5, 10, 14), int64]) -> (Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) {
  %404 = cast(%var_1573, dtype="int64") /* ty=Tensor[(5, 10, 14), int64] */;
  %405 = shape_of(%var_1572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_1572, dtype="int64") /* ty=Tensor[(5, 10, 14), int64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %408 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 210), float64] */, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(182, 4), bool] */, dtype="bool") /* ty=Tensor[(182, 4), bool] */;
  %410 = reshape(%408, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), float64] */;
  %411 = reshape(%409, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %412 = @func_290(%410, %411) /* ty=(Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) */;
  %413 = logical_xor(%406, %407) /* ty=Tensor[(5, 10, 14), int64] */;
  %414 = %412.2;
  (%413, %414, meta[relay.Constant][21] /* ty=Tensor[(1, 210), float64] */, meta[relay.Constant][22] /* ty=Tensor[(182, 4), bool] */)
}

def @func_8167() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) {
  %415 = @func_3797() /* ty=(Tensor[(16, 8, 8), bool],) */;
  %416 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %417 = %415.0;
  %418 = %416.0;
  (%417, %418)
}

def @func_3658() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %419 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %420 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %421 = %419.0;
  %422 = %420.0;
  (%421, %422)
}

def @func_8419() -> Tensor[(16, 8, 8), float64] {
  %423 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %423.1
}

def @func_3629() -> Tensor[(16, 8, 8), float64] {
  %424 = @func_2338() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %424.0
}

def @func_4351(%var_4309: Tensor[(15, 5, 11), float32]) -> (Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) {
  %425 = cast(meta[relay.Constant][23] /* ty=Tensor[(1024), uint16] */, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %426 = reshape(%425, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), uint16] */;
  %427 = @func_1230(%426) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) */;
  %428 = cast(%var_4309, dtype="float32") /* ty=Tensor[(15, 5, 11), float32] */;
  %429 = sinh(%428) /* ty=Tensor[(15, 5, 11), float32] */;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(15, 5, 11), float32] */;
  %431 = %427.0;
  %432 = @func_2804() /* ty=Tensor[(16, 8, 8), bool] */;
  %433 = cosh(%430) /* ty=Tensor[(15, 5, 11), float32] */;
  (%431, meta[relay.Constant][23] /* ty=Tensor[(1024), uint16] */, %432, %433)
}

def @func_6951() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %434 = @func_4814() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %435 = @func_5995() /* ty=Tensor[(16, 8, 8), float64] */;
  %436 = %434.0;
  (%435, %436)
}

def @func_6102() -> Tensor[(16, 8, 8), float64] {
  %437 = @func_5417() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %437.0
}

def @func_1308(%var_1284: Tensor[(3, 1, 1), int32], %var_1289: Tensor[(3, 6, 14), int32]) -> (Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) {
  %438 = cast(%var_1284, dtype="bool") /* ty=Tensor[(3, 1, 1), bool] */;
  %439 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 6, 14), int32] */, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %440 = cast(%var_1289, dtype="int64") /* ty=Tensor[(3, 6, 14), int64] */;
  %441 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 6, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 6, 14), int32] */, dtype="int64") /* ty=Tensor[(3, 6, 14), int64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %444 = greater(%438, %439) /* ty=Tensor[(3, 6, 14), bool] */;
  %445 = minimum(%442, %443) /* ty=Tensor[(3, 6, 14), int64] */;
  (%444, %445)
}

def @func_6287() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %446 = @func_2977() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %447 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %448 = %446.0;
  %449 = @func_3629() /* ty=Tensor[(16, 8, 8), float64] */;
  %450 = %447.0;
  (%448, %449, %450)
}

def @func_6975() -> Tensor[(16, 8, 8), float64] {
  %451 = @func_6397() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %451.1
}

def @func_1230(%var_1185: Tensor[(16, 8, 8), uint16]) -> (Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) {
  %452 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %453 = %452.0;
  %454 = cast(%var_1185, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %458 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %459 = minimum(%456, %457) /* ty=Tensor[(16, 8, 8), int8] */;
  %460 = %458.0;
  (%459, %460)
}

def @func_4186() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) {
  %461 = cast(meta[relay.Constant][25] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %462 = reshape(%461, newshape=[16, 3, 2]) /* ty=Tensor[(16, 3, 2), float32] */;
  %463 = @func_3152(%462) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 3, 2), float32]) */;
  %464 = @func_1611() /* ty=Tensor[(16, 8, 8), float64] */;
  %465 = %463.0;
  (%464, %465, meta[relay.Constant][25] /* ty=Tensor[(96), float32] */)
}

def @func_3152(%var_3129: Tensor[(16, 3, 2), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 3, 2), float32]) {
  %466 = @func_1432() /* ty=(Tensor[(16, 8, 8), int16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %467 = cast(%var_3129, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %468 = sinh(%467) /* ty=Tensor[(16, 3, 2), float32] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %470 = %466.1;
  %471 = atan(%469) /* ty=Tensor[(16, 3, 2), float32] */;
  (%470, %471)
}

def @func_2977() -> (Tensor[(16, 8, 8), float64],) {
  %472 = @func_1003() /* ty=Tensor[(16, 8, 8), float64] */;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %474 = asinh(%473) /* ty=Tensor[(16, 8, 8), float64] */;
  (%474,)
}

def @func_5619(%var_5583: Tensor[(5, 5, 7), uint64], %var_5584: Tensor[(5, 5, 7), uint64], %var_5596: Tensor[(5, 5, 7), uint64], %var_5608: Tensor[(5, 165), float32]) -> (Tensor[(5, 5, 7), bool], Tensor[(5, 5, 7), uint16], Tensor[(15, 5, 11), float32], Tensor[(5, 165), float32]) {
  %475 = cast(%var_5584, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %476 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_5583, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = cast(%var_5584, dtype="uint64") /* ty=Tensor[(5, 5, 7), uint64] */;
  %480 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%var_5583, dtype="uint64") /* ty=Tensor[(5, 5, 7), uint64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %483 = right_shift(%481, %482) /* ty=Tensor[(5, 5, 7), uint64] */;
  %484 = cast(%var_5596, dtype="uint16") /* ty=Tensor[(5, 5, 7), uint16] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="uint16") /* ty=Tensor[(5, 5, 7), uint16] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %488 = cast(%var_5608, dtype="float32") /* ty=Tensor[(5, 165), float32] */;
  %489 = reshape(%488, newshape=[15, 5, 11]) /* ty=Tensor[(15, 5, 11), float32] */;
  %490 = @func_4351(%489) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) */;
  %491 = logical_and(%477, %478) /* ty=Tensor[(5, 5, 7), bool] */;
  %492 = subtract(%486, %487) /* ty=Tensor[(5, 5, 7), uint16] */;
  %493 = %490.3;
  (%491, %492, %493, %var_5608)
}

def @func_6397() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %494 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
  %495 = %494.1;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %497 = exp(%496) /* ty=Tensor[(16, 8, 8), float64] */;
  %498 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  (%497, %498)
}

def @func_3589(%var_3583: Tensor[(429), float32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float32], Tensor[(3, 11, 13), float32], Tensor[(429), float32]) {
  %499 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %500 = cast(%var_3583, dtype="float32") /* ty=Tensor[(429), float32] */;
  %501 = cast(%var_3583, dtype="float32") /* ty=Tensor[(429), float32] */;
  %502 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
  %503 = cast(%502, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %504 = reshape(%500, newshape=[3, 11, 13]) /* ty=Tensor[(3, 11, 13), float32] */;
  %505 = reshape(%501, newshape=[3, 11, 13]) /* ty=Tensor[(3, 11, 13), float32] */;
  %506 = reshape(%503, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), bool] */;
  %507 = @func_2929(%504, %505, %506) /* ty=(Tensor[(3, 11, 13), bool], Tensor[(16, 8, 8), int8], Tensor[(3, 11, 13), float32]) */;
  %508 = cast(%var_3583, dtype="float32") /* ty=Tensor[(429), float32] */;
  %509 = %499.1;
  %510 = %507.2;
  %511 = exp(%508) /* ty=Tensor[(429), float32] */;
  (%509, %502, %510, %511)
}

def @func_321(%var_314: Tensor[(1, 13, 7), float64]) -> Tensor[(1, 13, 7), float64] {
  %512 = cast(%var_314, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %513 = acos(%512) /* ty=Tensor[(1, 13, 7), float64] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  sinh(%514) /* ty=Tensor[(1, 13, 7), float64] */
}

def @func_8270(%var_8206: Tensor[(8, 1, 11), float32], %var_8252: Tensor[(8, 7, 11), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(8, 7, 11), uint64], Tensor[(8, 1, 11), float32], Tensor[(16, 8, 8), bool]) {
  %515 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %516 = cast(%var_8206, dtype="float32") /* ty=Tensor[(8, 1, 11), float32] */;
  %517 = cos(%516) /* ty=Tensor[(8, 1, 11), float32] */;
  %518 = cast(%517, dtype="uint64") /* ty=Tensor[(8, 1, 11), uint64] */;
  %519 = cast(%var_8252, dtype="uint64") /* ty=Tensor[(8, 7, 11), uint64] */;
  %520 = cast(%517, dtype="float32") /* ty=Tensor[(8, 1, 11), float32] */;
  %521 = @func_3797() /* ty=(Tensor[(16, 8, 8), bool],) */;
  %522 = %515.1;
  %523 = bitwise_xor(%518, %519) /* ty=Tensor[(8, 7, 11), uint64] */;
  %524 = acosh(%520) /* ty=Tensor[(8, 1, 11), float32] */;
  %525 = %521.0;
  (%522, %523, %524, %525)
}

def @func_7358() -> Tensor[(16, 8, 8), float64] {
  @func_6932() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_3085() -> Tensor[(16, 8, 8), float32] {
  %526 = @func_2888() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) */;
  %527 = %526.1;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  erf(%528) /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_2753() -> Tensor[(16, 8, 8), uint16] {
  %529 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %529.1
}

def @func_1465() -> (Tensor[(16, 8, 8), float64],) {
  %530 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %531 = %530.0;
  (%531,)
}

def @func_1245() -> (Tensor[(16, 8, 8), float64],) {
  %532 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %533 = %532.0;
  (%533,)
}

def @func_8319(%var_8304: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(728), bool], Tensor[(700), int64], Tensor[(16, 8, 8), float64]) {
  %534 = @func_5329() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(585), float32], Tensor[(240), float64]) */;
  %535 = cast(%var_8304, dtype="int64") /* ty=Tensor[(700), int64] */;
  %536 = cast(%var_8304, dtype="int64") /* ty=Tensor[(700), int64] */;
  %537 = reshape(%535, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
  %538 = reshape(%536, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
  %539 = @func_1586(%537, %538) /* ty=(Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) */;
  %540 = @func_5659() /* ty=Tensor[(16, 8, 8), uint16] */;
  %541 = %534.0;
  %542 = %539.1;
  %543 = @func_7358() /* ty=Tensor[(16, 8, 8), float64] */;
  (%540, %541, %542, %var_8304, %543)
}

def @func_7711() -> (Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), uint16]) {
  %544 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %545 = @func_2741() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %546 = %544.0;
  %547 = %545.0;
  (%546, %547)
}

def @func_2741() -> (Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %548 = cast(meta[relay.Constant][26] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %549 = reshape(%548, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %550 = @func_1698(%549) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) */;
  %551 = %550.0;
  %552 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %556 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %557 = divide(%554, %555) /* ty=Tensor[(16, 8, 8), float64] */;
  %558 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  (%556, meta[relay.Constant][26] /* ty=Tensor[(210), float64] */, %557, %558)
}

def @func_5848(%var_5836: Tensor[(825), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(175), uint64], Tensor[(825), int16]) {
  %559 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %560 = cast(meta[relay.Constant][28] /* ty=Tensor[(175), uint64] */, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %561 = cast(meta[relay.Constant][28] /* ty=Tensor[(175), uint64] */, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %562 = cast(meta[relay.Constant][28] /* ty=Tensor[(175), uint64] */, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %563 = cast(%var_5836, dtype="float32") /* ty=Tensor[(825), float32] */;
  %564 = reshape(%560, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %565 = reshape(%561, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %566 = reshape(%562, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %567 = reshape(%563, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
  %568 = @func_5619(%564, %565, %566, %567) /* ty=(Tensor[(5, 5, 7), bool], Tensor[(5, 5, 7), uint16], Tensor[(15, 5, 11), float32], Tensor[(5, 165), float32]) */;
  %569 = %568.2;
  %570 = cast(%569, dtype="int16") /* ty=Tensor[(15, 5, 11), int16] */;
  %571 = shape_of(%var_5836, dtype="int32") /* ty=Tensor[(1), int32] */;
  %572 = cast(%var_5836, dtype="int16") /* ty=Tensor[(825), int16] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?), int16] */;
  %574 = %559.0;
  %575 = minimum(%572, %573) /* ty=Tensor[(825), int16] */;
  (%574, meta[relay.Constant][28] /* ty=Tensor[(175), uint64] */, %575)
}

def @func_2929(%var_2894: Tensor[(3, 11, 13), float32], %var_2895: Tensor[(3, 11, 13), float32], %var_2911: Tensor[(16, 8, 8), bool]) -> (Tensor[(3, 11, 13), bool], Tensor[(16, 8, 8), int8], Tensor[(3, 11, 13), float32]) {
  %576 = cast(%var_2895, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
  %577 = shape_of(%var_2894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_2894, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %580 = floor_mod(%578, %579) /* ty=Tensor[(3, 11, 13), float32] */;
  %581 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 13), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = @func_2888() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) */;
  %586 = %585.0;
  %587 = cast(%var_2911, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %591 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
  %592 = logical_or(%583, %584) /* ty=Tensor[(3, 11, 13), bool] */;
  %593 = multiply(%589, %590) /* ty=Tensor[(16, 8, 8), int8] */;
  %594 = asinh(%591) /* ty=Tensor[(3, 11, 13), float32] */;
  (%592, %593, %594)
}

def @func_8400() -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(330), float32], Tensor[(3), int32]) {
  %595 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %596 = cast(meta[relay.Constant][31] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %598 = reshape(%595, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %599 = reshape(%596, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %600 = reshape(%597, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %601 = @func_7252(%598, %599, %600) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) */;
  %602 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
  %603 = %601.1;
  (%602, %603, meta[relay.Constant][30] /* ty=Tensor[(330), float32] */, meta[relay.Constant][31] /* ty=Tensor[(3), int32] */)
}

def @func_5417() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %604 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %605 = @func_3658() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %606 = %604.0;
  %607 = %605.0;
  (%606, %607)
}

def @func_7016(%var_6995: Tensor[(6, 8, 14), float64]) -> (Tensor[(6, 8, 14), float64],) {
  %608 = cast(%var_6995, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %609 = log2(%608) /* ty=Tensor[(6, 8, 14), float64] */;
  (%609,)
}

def @func_5492(%var_5481: Tensor[(16, 8, 8), float32]) -> Tensor[(16, 8, 8), int32] {
  %610 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
  %611 = cast(%var_5481, dtype="int32") /* ty=Tensor[(16, 8, 8), int32] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="int32") /* ty=Tensor[(16, 8, 8), int32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%613, %614) /* ty=Tensor[(16, 8, 8), int32] */
}

def @func_5798(%var_5788: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) {
  %615 = cast(meta[relay.Constant][32] /* ty=Tensor[(585, 1), float32] */, dtype="float32") /* ty=Tensor[(585, 1), float32] */;
  %616 = reshape(%615, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float32] */;
  %617 = @func_3427(%616) /* ty=Tensor[(9, 5, 13), float32] */;
  %618 = cast(%617, dtype="bool") /* ty=Tensor[(9, 5, 13), bool] */;
  %619 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(585, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %620 = cast(meta[relay.Constant][32] /* ty=Tensor[(585, 1), float32] */, dtype="bool") /* ty=Tensor[(585, 1), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %622 = less(%620, %621) /* ty=Tensor[(585, ?), bool] */;
  %623 = cast(%622, dtype="bool") /* ty=Tensor[(585, ?), bool] */;
  %624 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%617, dtype="bool") /* ty=Tensor[(9, 5, 13), bool] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %627 = cast(%var_5788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 84), int32] */, dtype="int32") /* ty=Tensor[(3, 84), int32] */;
  %629 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 84), int32] */, dtype="int32") /* ty=Tensor[(3, 84), int32] */;
  %630 = reshape(%627, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %631 = reshape(%628, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %632 = reshape(%629, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %633 = @func_1500(%630, %631, %632) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %634 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  %635 = less_equal(%625, %626) /* ty=Tensor[(9, 5, 13), bool] */;
  %636 = %633.3;
  (%634, %635, %636, %var_5788, meta[relay.Constant][33] /* ty=Tensor[(3, 84), int32] */)
}

def @func_4288() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) {
  %637 = @func_3751() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) */;
  %638 = @func_4038() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) */;
  %639 = %637.0;
  %640 = %638.0;
  (%639, %640)
}

def @func_1256() -> Tensor[(16, 8, 8), uint16] {
  %641 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %641.1
}

def @func_7883() -> Tensor[(16, 8, 8), uint16] {
  %642 = @func_3813() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %642.0
}

def @func_6073(%var_6054: Tensor[(40, 2), int64]) -> (Tensor[(16, 8, 8), bool], Tensor[(8, 2, 5), bool], Tensor[(40, 2), int64]) {
  %643 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %644 = cast(%var_6054, dtype="int64") /* ty=Tensor[(40, 2), int64] */;
  %645 = cast(%var_6054, dtype="int64") /* ty=Tensor[(40, 2), int64] */;
  %646 = reshape(%644, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), int64] */;
  %647 = reshape(%645, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), int64] */;
  %648 = @func_4889(%646, %647) /* ty=(Tensor[(8, 2, 5), bool],) */;
  %649 = %643.0;
  %650 = %648.0;
  (%649, %650, %var_6054)
}

def @func_6209() -> Tensor[(16, 8, 8), uint16] {
  @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_4365() -> (Tensor[(2, 15, 11), float32],) {
  %651 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 15, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %652 = sqrt(%651) /* ty=Tensor[(2, 15, 11), float32] */;
  (%652,)
}

def @func_4593(%var_4587: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(3), int32]) {
  %653 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %654 = cast(%var_4587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = reshape(%654, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %656 = @func_2191(%655) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(252), int32]) */;
  %657 = %653.0;
  %658 = %656.0;
  (%657, %658, %var_4587)
}

def @func_5304(%var_5256: Tensor[(700), int64], %var_5261: Tensor[(4, 91), float64], %var_5284: Tensor[(825), float32]) -> (Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(91), float64], Tensor[(4, 91), bool], Tensor[(16, 8, 8), int8], Tensor[(825), float32], Tensor[(1, 13, 7), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) {
  %659 = cast(%var_5256, dtype="int64") /* ty=Tensor[(700), int64] */;
  %660 = cast(meta[relay.Constant][35] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %661 = reshape(%659, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
  %662 = reshape(%660, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
  %663 = @func_2053(%661, %662) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
  %664 = %663.4;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(1, 91), bool] */;
  %666 = cast(%var_5261, dtype="bool") /* ty=Tensor[(4, 91), bool] */;
  %667 = cast(%var_5284, dtype="float32") /* ty=Tensor[(825), float32] */;
  %668 = reshape(%667, newshape=[15, 5, 11]) /* ty=Tensor[(15, 5, 11), float32] */;
  %669 = @func_4351(%668) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) */;
  %670 = cast(meta[relay.Constant][35] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %671 = reshape(%670, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %672 = cast(%var_5256, dtype="int64") /* ty=Tensor[(700), int64] */;
  %673 = cast(%664, dtype="float64") /* ty=Tensor[(1, 91), float64] */;
  %674 = reshape(%672, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
  %675 = reshape(%673, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
  %676 = @func_2053(%674, %675) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
  %677 = @func_4288() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) */;
  %678 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %679 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
  %680 = less(%665, %666) /* ty=Tensor[(4, 91), bool] */;
  %681 = %669.0;
  %682 = @func_321(%671) /* ty=Tensor[(1, 13, 7), float64] */;
  %683 = %676.1;
  %684 = @func_3629() /* ty=Tensor[(16, 8, 8), float64] */;
  %685 = %677.1;
  %686 = %678.0;
  (%679, %var_5256, meta[relay.Constant][35] /* ty=Tensor[(91), float64] */, %680, %681, %var_5284, %682, %683, %684, %685, %686)
}

def @func_3121() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
  %687 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %688 = @func_2888() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) */;
  %689 = %687.0;
  %690 = %688.0;
  (%689, %690)
}

def @func_1011(%var_1005: Tensor[(8, 7, 12), float64], %var_1006: Tensor[(8, 7, 12), float64]) -> (Tensor[(8, 7, 12), float64],) {
  %691 = cast(%var_1006, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
  %692 = shape_of(%var_1005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%var_1005, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %695 = floor_divide(%693, %694) /* ty=Tensor[(8, 7, 12), float64] */;
  (%695,)
}

def @func_3450() -> Tensor[(16, 8, 8), float32] {
  %696 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
  %696.0
}

def @func_2452() -> Tensor[(16, 8, 8), float32] {
  %697 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %698 = %697.2;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %700 = asin(%699) /* ty=Tensor[(16, 8, 8), float64] */;
  %701 = cast(%700, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  acosh(%701) /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_4814() -> (Tensor[(16, 8, 8), float64],) {
  %702 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %703 = %702.0;
  (%703,)
}

def @func_6486() -> (Tensor[(16, 8, 8), float32],) {
  %704 = @func_3450() /* ty=Tensor[(16, 8, 8), float32] */;
  (%704,)
}

def @func_290(%var_271: Tensor[(5, 6, 7), float64], %var_284: Tensor[(728), bool]) -> (Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) {
  %705 = cast(%var_271, dtype="float64") /* ty=Tensor[(5, 6, 7), float64] */;
  %706 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %707 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %708 = reshape(%706, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %709 = reshape(%707, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %710 = @func_256(%708, %709) /* ty=(Tensor[(7, 8, 13), bool],) */;
  %711 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %712 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %713 = reshape(%711, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %714 = reshape(%712, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %715 = @func_256(%713, %714) /* ty=(Tensor[(7, 8, 13), bool],) */;
  %716 = tan(%705) /* ty=Tensor[(5, 6, 7), float64] */;
  %717 = %710.0;
  %718 = %715.0;
  (%716, %717, %var_284, %718)
}

def @func_4510(%var_4478: Tensor[(16, 8, 8), float64]) -> (Tensor[(16, 8, 8), uint8], Tensor[(3), int32], Tensor[(252), int32], Tensor[(16, 8, 8), float64], Tensor[(3, 6, 14), float64]) {
  %719 = @func_2977() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %720 = %719.0;
  %721 = cast(%var_4478, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %725 = cast(meta[relay.Constant][36] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][37] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %727 = reshape(%725, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %728 = reshape(%726, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), int32] */;
  %729 = @func_1308(%727, %728) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) */;
  %730 = %729.1;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
  %732 = right_shift(%723, %724) /* ty=Tensor[(16, 8, 8), uint8] */;
  %733 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  %734 = cos(%731) /* ty=Tensor[(3, 6, 14), float64] */;
  (%732, meta[relay.Constant][36] /* ty=Tensor[(3), int32] */, meta[relay.Constant][37] /* ty=Tensor[(252), int32] */, %733, %734)
}

def @func_1663(%var_1640: Tensor[(13, 7), float64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(1, 13, 7), float64], Tensor[(13, 7), float64]) {
  %735 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %736 = cast(%var_1640, dtype="float64") /* ty=Tensor[(13, 7), float64] */;
  %737 = reshape(%736, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %738 = %735.1;
  %739 = @func_321(%737) /* ty=Tensor[(1, 13, 7), float64] */;
  (%738, %739, %var_1640)
}

def @func_6236(%var_6228: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(364), float64], Tensor[(825), float32]) {
  %740 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %741 = @func_4435() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32]) */;
  %742 = cast(%var_6228, dtype="int64") /* ty=Tensor[(700), int64] */;
  %743 = cast(meta[relay.Constant][38] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %744 = cast(meta[relay.Constant][39] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
  %745 = reshape(%742, newshape=[700]) /* ty=Tensor[(700), int64] */;
  %746 = reshape(%743, newshape=[4, 91]) /* ty=Tensor[(4, 91), float64] */;
  %747 = reshape(%744, newshape=[825]) /* ty=Tensor[(825), float32] */;
  %748 = @func_5304(%745, %746, %747) /* ty=(Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(91), float64], Tensor[(4, 91), bool], Tensor[(16, 8, 8), int8], Tensor[(825), float32], Tensor[(1, 13, 7), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) */;
  %749 = %740.0;
  %750 = %741.0;
  %751 = %748.0;
  (%749, %750, %751, %var_6228, meta[relay.Constant][38] /* ty=Tensor[(364), float64] */, meta[relay.Constant][39] /* ty=Tensor[(825), float32] */)
}

def @func_5118() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %752 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %753 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %754 = %752.1;
  %755 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  (%753, %754, %755)
}

def @func_685() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  %756 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 8, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  %757 = sinh(%756) /* ty=Tensor[(16, 8, 8), float32] */;
  %758 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 8, 8), float32] */, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %762 = greater_equal(%760, %761) /* ty=Tensor[(16, 8, 8), bool] */;
  %763 = cast(%762, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %764 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(16, 8, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 8, 8), float32] */, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %767 = add(%765, %766) /* ty=Tensor[(16, 8, 8), uint8] */;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %769 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 8, 8), bool] */, dtype="uint16") /* ty=Tensor[(16, 8, 8), uint16] */;
  %770 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%762, dtype="uint16") /* ty=Tensor[(16, 8, 8), uint16] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %773 = log10(%768) /* ty=Tensor[(16, 8, 8), float64] */;
  %774 = bitwise_and(%771, %772) /* ty=Tensor[(16, 8, 8), uint16] */;
  (%773, %774)
}

def @func_2493() -> Tensor[(16, 8, 8), float64] {
  @func_2316() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_4608() -> (Tensor[(16, 8, 8), float64],) {
  %775 = @func_1003() /* ty=Tensor[(16, 8, 8), float64] */;
  (%775,)
}

def @func_5329() -> (Tensor[(16, 8, 8), float64], Tensor[(585), float32], Tensor[(240), float64]) {
  %776 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %777 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %778 = reshape(%777, newshape=[3, 8, 10]) /* ty=Tensor[(3, 8, 10), float64] */;
  %779 = @func_3606(%778) /* ty=(Tensor[(3, 8, 10), float64], Tensor[(9, 5, 13), float32], Tensor[(585), float32]) */;
  %780 = %776.0;
  %781 = %779.2;
  (%780, %781, meta[relay.Constant][42] /* ty=Tensor[(240), float64] */)
}

def @func_2804() -> Tensor[(16, 8, 8), bool] {
  %782 = @func_2242() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) */;
  %782.0
}

def @func_2293() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
  %783 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %784 = @func_2242() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) */;
  %785 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
  %786 = %783.0;
  %787 = %784.2;
  (%785, %786, %787)
}

def @func_5963(%var_5952: Tensor[(4, 8, 3), int64]) -> Tensor[(4, 8, 3), bool] {
  %788 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 8, 3), int64] */, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %789 = shape_of(%var_5952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_5952, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%790, %791) /* ty=Tensor[(4, 8, 3), bool] */
}

def @func_7908(%var_7894: Tensor[(2, 7, 6), float64]) -> (Tensor[(2, 7, 6), bool],) {
  %792 = cast(-1.86755f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %793 = cast(%var_7894, dtype="bool") /* ty=Tensor[(2, 7, 6), bool] */;
  %794 = less_equal(%792, %793) /* ty=Tensor[(2, 7, 6), bool] */;
  (%794,)
}

def @func_8502(%var_8478: Tensor[(6, 1, 13), float32], %var_8479: Tensor[(6, 7, 13), float32]) -> (Tensor[(6, 7, 13), float32], Tensor[(6, 1, 13), float64], Tensor[(6, 1, 13), float32]) {
  %795 = cast(%var_8478, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
  %796 = cast(%var_8479, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
  %797 = cast(%var_8478, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
  %798 = log2(%797) /* ty=Tensor[(6, 1, 13), float64] */;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
  %800 = cast(%798, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
  %801 = sin(%800) /* ty=Tensor[(6, 1, 13), float64] */;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
  %803 = power(%795, %796) /* ty=Tensor[(6, 7, 13), float32] */;
  %804 = sqrt(%799) /* ty=Tensor[(6, 1, 13), float64] */;
  %805 = tan(%802) /* ty=Tensor[(6, 1, 13), float32] */;
  (%803, %804, %805)
}

def @func_4988(%var_4936: Tensor[(252), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(39, 11), float32], Tensor[(252), int32], Tensor[(16, 8, 8), bool], Tensor[(3, 11, 13), bool], Tensor[(3, 84), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %806 = @func_1932() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) */;
  %807 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %809 = reshape(%808, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %810 = cast(meta[relay.Constant][44] /* ty=Tensor[(39, 11), float32] */, dtype="float32") /* ty=Tensor[(39, 11), float32] */;
  %811 = reshape(%810, newshape=[429]) /* ty=Tensor[(429), float32] */;
  %812 = @func_3589(%811) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float32], Tensor[(3, 11, 13), float32], Tensor[(429), float32]) */;
  %813 = %812.2;
  %814 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 11, 13), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%813, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 1), int32] */, dtype="int32") /* ty=Tensor[(3, 1), int32] */;
  %819 = cast(%var_4936, dtype="int32") /* ty=Tensor[(252), int32] */;
  %820 = cast(%var_4936, dtype="int32") /* ty=Tensor[(252), int32] */;
  %821 = reshape(%818, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %822 = reshape(%819, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %823 = reshape(%820, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %824 = @func_1500(%821, %822, %823) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %825 = %824.4;
  %826 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 1), int32] */, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
  %827 = cast(%825, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
  %828 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %829 = @func_4608() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %830 = %806.4;
  %831 = @func_2013(%809) /* ty=Tensor[(16, 8, 8), bool] */;
  %832 = equal(%816, %817) /* ty=Tensor[(3, 11, 13), bool] */;
  %833 = floor_divide(%826, %827) /* ty=Tensor[(3, 84), float64] */;
  %834 = %828.0;
  %835 = %829.0;
  (%830, %807, meta[relay.Constant][44] /* ty=Tensor[(39, 11), float32] */, %var_4936, %831, %832, %833, %834, %835)
}

def @func_2191(%var_2184: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(252), int32]) {
  %836 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %837 = cast(%var_2184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(meta[relay.Constant][47] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %839 = cast(meta[relay.Constant][47] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
  %840 = reshape(%837, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %841 = reshape(%838, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %842 = reshape(%839, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %843 = @func_1500(%840, %841, %842) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %844 = %836.0;
  %845 = %843.2;
  (%844, %845, %var_2184, meta[relay.Constant][47] /* ty=Tensor[(252), int32] */)
}

def @func_5995() -> Tensor[(16, 8, 8), float64] {
  %846 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %846.0
}

def @func_2842(%var_2817: Tensor[(12, 2, 12), float64], %var_2818: Tensor[(12, 2, 12), float64], %var_2832: Tensor[(12, 2, 12), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), int16]) {
  %847 = cast(%var_2818, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %848 = shape_of(%var_2817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_2817, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %851 = cast(%var_2817, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %852 = asin(%851) /* ty=Tensor[(12, 2, 12), float64] */;
  %853 = cast(%var_2832, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %854 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%852, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %857 = less(%855, %856) /* ty=Tensor[(12, 2, 12), bool] */;
  %858 = cast(%var_2817, dtype="int16") /* ty=Tensor[(12, 2, 12), int16] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="int16") /* ty=Tensor[(12, 2, 12), int16] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %862 = multiply(%849, %850) /* ty=Tensor[(12, 2, 12), float64] */;
  %863 = subtract(%860, %861) /* ty=Tensor[(12, 2, 12), int16] */;
  (%862, %863)
}

def @func_7083() -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32]) {
  %864 = @func_4551() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %865 = @func_1795() /* ty=Tensor[(16, 8, 8), float64] */;
  %866 = %864.0;
  (%865, %866)
}

def @func_699() -> (Tensor[(16, 8, 8), float64],) {
  %867 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %868 = %867.0;
  (%868,)
}

def @func_3287() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) {
  %869 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %870 = %869.0;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  %872 = cast(%870, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %873 = atan(%871) /* ty=Tensor[(16, 8, 8), float32] */;
  %874 = sqrt(%872) /* ty=Tensor[(16, 8, 8), float64] */;
  (%873, %874)
}

def @func_6437() -> Tensor[(16, 8, 8), float64] {
  %875 = @func_5737() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) */;
  %875.0
}

def @func_1795() -> Tensor[(16, 8, 8), float64] {
  @func_1003() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_7496(%var_7467: Tensor[(3), int32], %var_7478: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(330), float32], Tensor[(3), int32], Tensor[(16, 8, 8), uint16], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(91), float64], Tensor[(16, 8, 8), float64]) {
  %876 = @func_3813() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %877 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %878 = cast(meta[relay.Constant][48] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %879 = cast(%var_7467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(meta[relay.Constant][48] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %881 = reshape(%878, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %882 = reshape(%879, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %883 = reshape(%880, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %884 = @func_7252(%881, %882, %883) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) */;
  %885 = @func_2257() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %886 = cast(%var_7478, dtype="int64") /* ty=Tensor[(700), int64] */;
  %887 = cast(meta[relay.Constant][49] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
  %888 = reshape(%886, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
  %889 = reshape(%887, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
  %890 = @func_2053(%888, %889) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
  %891 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %892 = %876.0;
  %893 = %877.0;
  %894 = %884.2;
  %895 = %885.0;
  %896 = %890.4;
  %897 = %891.0;
  (%892, %893, %894, meta[relay.Constant][48] /* ty=Tensor[(330), float32] */, %var_7467, %895, %896, %var_7478, meta[relay.Constant][49] /* ty=Tensor[(91), float64] */, %897)
}

def @func_748(%var_743: Tensor[(16, 8, 8), float64]) -> Tensor[(16, 8, 8), bool] {
  %898 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %899 = %898.0;
  %900 = cast(%var_743, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %901 = shape_of(%899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(%899, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%902, %903) /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_1611() -> Tensor[(16, 8, 8), float64] {
  @func_921() /* ty=Tensor[(16, 8, 8), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4073() -> Tensor[(16, 8, 8), float32] {
  @func_4071() /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_2979() -> (Tensor[(16, 8, 8), float64],) {
  @func_2977() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_7660() -> Tensor[(16, 8, 8), float64] {
  @func_7658() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_2805() -> Tensor[(16, 8, 8), bool] {
  %1 = fn () -> Tensor[(16, 8, 8), bool] {
    %0 = @func_2242() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) */;
    %0.0
  };
  %1() /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_7939() -> Tensor[(16, 8, 8), float64] {
  %2 = fn () -> Tensor[(16, 8, 8), float64] {
    @func_6102() /* ty=Tensor[(16, 8, 8), float64] */
  };
  %2() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_2743() -> (Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_2741() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_4071() -> Tensor[(16, 8, 8), float32] {
  @func_2452() /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_1665(%var_1664: Tensor[(13, 7), float64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(1, 13, 7), float64], Tensor[(13, 7), float64]) {
  %8 = fn (%var_1640: Tensor[(13, 7), float64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(1, 13, 7), float64], Tensor[(13, 7), float64]) {
    %3 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
    %4 = cast(%var_1640, dtype="float64") /* ty=Tensor[(13, 7), float64] */;
    %5 = reshape(%4, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
    %6 = %3.1;
    %7 = @func_321(%5) /* ty=Tensor[(1, 13, 7), float64] */;
    (%6, %7, %var_1640)
  };
  %8(%var_1664) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(1, 13, 7), float64], Tensor[(13, 7), float64]) */
}

def @func_2244() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) {
  @func_2242() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) */
}

def @func_5625(%var_5621: Tensor[(5, 5, 7), uint64], %var_5622: Tensor[(5, 5, 7), uint64], %var_5623: Tensor[(5, 5, 7), uint64], %var_5624: Tensor[(5, 165), float32]) -> (Tensor[(5, 5, 7), bool], Tensor[(5, 5, 7), uint16], Tensor[(15, 5, 11), float32], Tensor[(5, 165), float32]) {
  @func_5619(%var_5621, %var_5622, %var_5623, %var_5624) /* ty=(Tensor[(5, 5, 7), bool], Tensor[(5, 5, 7), uint16], Tensor[(15, 5, 11), float32], Tensor[(5, 165), float32]) */
}

def @func_7256(%var_7253: Tensor[(2, 15, 11), float32], %var_7254: Tensor[(3), int32], %var_7255: Tensor[(2, 15, 11), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) {
  %47 = fn (%var_7158: Tensor[(2, 15, 11), float32], %var_7212: Tensor[(3), int32], %var_7227: Tensor[(2, 15, 11), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) {
    %9 = @func_4186() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) */;
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %11 = reshape(%10, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %12 = @func_6167(%11) /* ty=Tensor[(2, 15, 11), bool] */;
    %13 = cast(%12, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
    %14 = cosh(%13) /* ty=Tensor[(2, 15, 11), float32] */;
    %15 = cast(%var_7158, dtype="uint32") /* ty=Tensor[(2, 15, 11), uint32] */;
    %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
    %17 = cast(%14, dtype="uint32") /* ty=Tensor[(2, 15, 11), uint32] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %19 = @func_3658() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %20 = @func_7083() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32]) */;
    %21 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
    %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 70), float64] */, dtype="float64") /* ty=Tensor[(5, 70), float64] */;
    %23 = reshape(%22, newshape=[14, 5, 5]) /* ty=Tensor[(14, 5, 5), float64] */;
    %24 = @func_6829(%23) /* ty=(Tensor[(14, 5, 5), float64], Tensor[(14, 5, 5), float64]) */;
    %25 = cast(%var_7212, dtype="int32") /* ty=Tensor[(3), int32] */;
    %26 = reshape(%25, newshape=[3]) /* ty=Tensor[(3), int32] */;
    %27 = @func_5798(%26) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) */;
    %28 = cast(meta[relay.Constant][0] /* ty=Tensor[(330), float32] */, dtype="int64") /* ty=Tensor[(330), int64] */;
    %29 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
    %30 = cast(%14, dtype="int64") /* ty=Tensor[(2, 15, 11), int64] */;
    %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %32 = left_shift(%30, %31) /* ty=Tensor[(2, 15, 11), int64] */;
    %33 = cast(%32, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
    %34 = atan(%33) /* ty=Tensor[(2, 15, 11), float32] */;
    %35 = cast(%var_7227, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
    %37 = cast(%34, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %39 = %9.1;
    %40 = logical_xor(%17, %18) /* ty=Tensor[(2, 15, 11), uint32] */;
    %41 = %19.1;
    %42 = %20.1;
    %43 = %21.1;
    %44 = %24.0;
    %45 = %27.1;
    %46 = add(%37, %38) /* ty=Tensor[(2, 15, 11), float64] */;
    (%39, %40, %41, %42, %43, %44, meta[relay.Constant][1] /* ty=Tensor[(5, 70), float64] */, %45, %var_7212, %46)
  };
  %47(%var_7253, %var_7254, %var_7255) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) */
}

def @func_687() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */
}

def @func_8401() -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(330), float32], Tensor[(3), int32]) {
  %57 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(330), float32], Tensor[(3), int32]) {
    %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %51 = reshape(%48, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %52 = reshape(%49, newshape=[3]) /* ty=Tensor[(3), int32] */;
    %53 = reshape(%50, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %54 = @func_7252(%51, %52, %53) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) */;
    %55 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
    %56 = %54.1;
    (%55, %56, meta[relay.Constant][2] /* ty=Tensor[(330), float32] */, meta[relay.Constant][3] /* ty=Tensor[(3), int32] */)
  };
  %57() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(330), float32], Tensor[(3), int32]) */
}

def @func_4038() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) {
  %58 = @func_3813() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %59 = @func_3658() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %60 = %58.0;
  %61 = %59.1;
  (%60, %61)
}

def @func_6437() -> Tensor[(16, 8, 8), float64] {
  %62 = @func_5737() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) */;
  %62.0
}

def @func_3122() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
  %67 = fn () -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
    %63 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %64 = @func_2888() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) */;
    %65 = %63.0;
    %66 = %64.0;
    (%65, %66)
  };
  %67() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */
}

def @func_7658() -> Tensor[(16, 8, 8), float64] {
  %68 = @func_3038() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %68.1
}

def @func_6829(%var_6815: Tensor[(14, 5, 5), float64]) -> (Tensor[(14, 5, 5), float64], Tensor[(14, 5, 5), float64]) {
  %69 = cast(%var_6815, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %70 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 5, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  %74 = power(%71, %72) /* ty=Tensor[(14, 5, 5), float64] */;
  %75 = log10(%73) /* ty=Tensor[(14, 5, 5), float64] */;
  (%74, %75)
}

def @func_6439() -> Tensor[(16, 8, 8), float64] {
  @func_6437() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_6953() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_6951() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_3155(%var_3153: Tensor[(16, 3, 2), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 3, 2), float32]) {
  @func_3152(%var_3153) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 3, 2), float32]) */
}

def @func_1014(%var_1012: Tensor[(8, 7, 12), float64], %var_1013: Tensor[(8, 7, 12), float64]) -> (Tensor[(8, 7, 12), float64],) {
  %81 = fn (%var_1005: Tensor[(8, 7, 12), float64], %var_1006: Tensor[(8, 7, 12), float64]) -> (Tensor[(8, 7, 12), float64],) {
    %76 = cast(%var_1006, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
    %77 = shape_of(%var_1005, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%var_1005, dtype="float64") /* ty=Tensor[(8, 7, 12), float64] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %80 = floor_divide(%78, %79) /* ty=Tensor[(8, 7, 12), float64] */;
    (%80,)
  };
  %81(%var_1012, %var_1013) /* ty=(Tensor[(8, 7, 12), float64],) */
}

def @func_751(%var_749: Tensor[(16, 8, 8), float64]) -> Tensor[(16, 8, 8), bool] {
  @func_748(%var_749) /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_6976() -> Tensor[(16, 8, 8), float64] {
  %83 = fn () -> Tensor[(16, 8, 8), float64] {
    %82 = @func_6397() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %82.1
  };
  %83() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_4551() -> (Tensor[(2, 15, 11), float32],) {
  %84 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %85 = %84.0;
  (%85,)
}

def @func_2316() -> Tensor[(16, 8, 8), float64] {
  @func_1795() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_290(%var_271: Tensor[(5, 6, 7), float64], %var_284: Tensor[(728), bool]) -> (Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) {
  %86 = cast(%var_271, dtype="float64") /* ty=Tensor[(5, 6, 7), float64] */;
  %87 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %88 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %89 = reshape(%87, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %90 = reshape(%88, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %91 = @func_256(%89, %90) /* ty=(Tensor[(7, 8, 13), bool],) */;
  %92 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %93 = cast(%var_284, dtype="bool") /* ty=Tensor[(728), bool] */;
  %94 = reshape(%92, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %95 = reshape(%93, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %96 = @func_256(%94, %95) /* ty=(Tensor[(7, 8, 13), bool],) */;
  %97 = tan(%86) /* ty=Tensor[(5, 6, 7), float64] */;
  %98 = %91.0;
  %99 = %96.0;
  (%97, %98, %var_284, %99)
}

def @func_3152(%var_3129: Tensor[(16, 3, 2), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 3, 2), float32]) {
  %100 = @func_1432() /* ty=(Tensor[(16, 8, 8), int16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %101 = cast(%var_3129, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %102 = sinh(%101) /* ty=Tensor[(16, 3, 2), float32] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(16, 3, 2), float32] */;
  %104 = %100.1;
  %105 = atan(%103) /* ty=Tensor[(16, 3, 2), float32] */;
  (%104, %105)
}

def @func_7499(%var_7497: Tensor[(3), int32], %var_7498: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(330), float32], Tensor[(3), int32], Tensor[(16, 8, 8), uint16], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(91), float64], Tensor[(16, 8, 8), float64]) {
  %128 = fn (%var_7467: Tensor[(3), int32], %var_7478: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(330), float32], Tensor[(3), int32], Tensor[(16, 8, 8), uint16], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(91), float64], Tensor[(16, 8, 8), float64]) {
    %106 = @func_3813() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %107 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %109 = cast(%var_7467, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
    %111 = reshape(%108, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %112 = reshape(%109, newshape=[3]) /* ty=Tensor[(3), int32] */;
    %113 = reshape(%110, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
    %114 = @func_7252(%111, %112, %113) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), uint32], Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), float64], Tensor[(14, 5, 5), float64], Tensor[(5, 70), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(2, 15, 11), float64]) */;
    %115 = @func_2257() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %116 = cast(%var_7478, dtype="int64") /* ty=Tensor[(700), int64] */;
    %117 = cast(meta[relay.Constant][6] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
    %118 = reshape(%116, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
    %119 = reshape(%117, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
    %120 = @func_2053(%118, %119) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
    %121 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %122 = %106.0;
    %123 = %107.0;
    %124 = %114.2;
    %125 = %115.0;
    %126 = %120.4;
    %127 = %121.0;
    (%122, %123, %124, meta[relay.Constant][5] /* ty=Tensor[(330), float32] */, %var_7467, %125, %126, %var_7478, meta[relay.Constant][6] /* ty=Tensor[(91), float64] */, %127)
  };
  %128(%var_7497, %var_7498) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(330), float32], Tensor[(3), int32], Tensor[(16, 8, 8), uint16], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(91), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_4008() -> Tensor[(16, 8, 8), float64] {
  @func_4006() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_7084() -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32]) {
  %132 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32]) {
    %129 = @func_4551() /* ty=(Tensor[(2, 15, 11), float32],) */;
    %130 = @func_1795() /* ty=Tensor[(16, 8, 8), float64] */;
    %131 = %129.0;
    (%130, %131)
  };
  %132() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(2, 15, 11), float32]) */
}

def @func_5468() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
  %138 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
    %133 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %134 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
    %135 = @func_1611() /* ty=Tensor[(16, 8, 8), float64] */;
    %136 = %133.0;
    %137 = %134.2;
    (%135, %136, %137)
  };
  %138() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */
}

def @func_8419() -> Tensor[(16, 8, 8), float64] {
  %139 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %139.1
}

def @func_4367() -> (Tensor[(2, 15, 11), float32],) {
  @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */
}

def @func_2846(%var_2843: Tensor[(12, 2, 12), float64], %var_2844: Tensor[(12, 2, 12), float64], %var_2845: Tensor[(12, 2, 12), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), int16]) {
  %157 = fn (%var_2817: Tensor[(12, 2, 12), float64], %var_2818: Tensor[(12, 2, 12), float64], %var_2832: Tensor[(12, 2, 12), float64]) -> (Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), int16]) {
    %140 = cast(%var_2818, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %141 = shape_of(%var_2817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(%var_2817, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %144 = cast(%var_2817, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %145 = asin(%144) /* ty=Tensor[(12, 2, 12), float64] */;
    %146 = cast(%var_2832, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%145, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %150 = less(%148, %149) /* ty=Tensor[(12, 2, 12), bool] */;
    %151 = cast(%var_2817, dtype="int16") /* ty=Tensor[(12, 2, 12), int16] */;
    %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%150, dtype="int16") /* ty=Tensor[(12, 2, 12), int16] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %155 = multiply(%142, %143) /* ty=Tensor[(12, 2, 12), float64] */;
    %156 = subtract(%153, %154) /* ty=Tensor[(12, 2, 12), int16] */;
    (%155, %156)
  };
  %157(%var_2843, %var_2844, %var_2845) /* ty=(Tensor[(12, 2, 12), float64], Tensor[(12, 2, 12), int16]) */
}

def @func_3430(%var_3428: Tensor[(9, 5, 13), float32]) -> Tensor[(9, 5, 13), float32] {
  @func_3427(%var_3428) /* ty=Tensor[(9, 5, 13), float32] */
}

def @func_4351(%var_4309: Tensor[(15, 5, 11), float32]) -> (Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) {
  %158 = cast(meta[relay.Constant][7] /* ty=Tensor[(1024), uint16] */, dtype="uint16") /* ty=Tensor[(1024), uint16] */;
  %159 = reshape(%158, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), uint16] */;
  %160 = @func_1230(%159) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) */;
  %161 = cast(%var_4309, dtype="float32") /* ty=Tensor[(15, 5, 11), float32] */;
  %162 = sinh(%161) /* ty=Tensor[(15, 5, 11), float32] */;
  %163 = cast(%162, dtype="float32") /* ty=Tensor[(15, 5, 11), float32] */;
  %164 = %160.0;
  %165 = @func_2804() /* ty=Tensor[(16, 8, 8), bool] */;
  %166 = cosh(%163) /* ty=Tensor[(15, 5, 11), float32] */;
  (%164, meta[relay.Constant][7] /* ty=Tensor[(1024), uint16] */, %165, %166)
}

def @func_6773(%var_6771: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64], Tensor[(16, 8, 8), float64]) {
  @func_6770(%var_6771) /* ty=(Tensor[(9, 16, 12), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_7885() -> Tensor[(16, 8, 8), uint16] {
  @func_7883() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_6076(%var_6074: Tensor[(40, 2), int64]) -> (Tensor[(16, 8, 8), bool], Tensor[(8, 2, 5), bool], Tensor[(40, 2), int64]) {
  @func_6073(%var_6074) /* ty=(Tensor[(16, 8, 8), bool], Tensor[(8, 2, 5), bool], Tensor[(40, 2), int64]) */
}

def @func_2977() -> (Tensor[(16, 8, 8), float64],) {
  %167 = @func_1003() /* ty=Tensor[(16, 8, 8), float64] */;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %169 = asinh(%168) /* ty=Tensor[(16, 8, 8), float64] */;
  (%169,)
}

def @func_3040() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_3038() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_8064(%var_7983: Tensor[(11, 10, 1), uint16], %var_7984: Tensor[(11, 10, 16), uint16], %var_7996: Tensor[(3), int32], %var_7997: Tensor[(252), int32]) -> (Tensor[(11, 10, 16), uint16], Tensor[(16, 8, 8), bool], Tensor[(252), int32], Tensor[(11, 10, 3), uint32], Tensor[(2, 15, 11), bool], Tensor[(3), int32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %170 = cast(%var_7983, dtype="uint16") /* ty=Tensor[(11, 10, 1), uint16] */;
  %171 = cast(%var_7984, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %172 = cast(%var_7996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%var_7997, dtype="int32") /* ty=Tensor[(252), int32] */;
  %174 = cast(%var_7997, dtype="int32") /* ty=Tensor[(252), int32] */;
  %175 = reshape(%172, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %176 = reshape(%173, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %177 = reshape(%174, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %178 = @func_1500(%175, %176, %177) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %179 = cast(%var_7996, dtype="uint32") /* ty=Tensor[(3), uint32] */;
  %180 = cast(%var_7983, dtype="uint32") /* ty=Tensor[(11, 10, 1), uint32] */;
  %181 = logical_xor(%179, %180) /* ty=Tensor[(11, 10, 3), uint32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(11, 10, 3), float32] */;
  %183 = reshape(%182, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float32] */;
  %184 = cast(%var_7996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = reshape(%184, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %186 = @func_5798(%185) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) */;
  %187 = @func_6287() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %188 = @func_4608() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %189 = @func_5118() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %190 = right_shift(%170, %171) /* ty=Tensor[(11, 10, 16), uint16] */;
  %191 = %178.1;
  %192 = @func_6167(%183) /* ty=Tensor[(2, 15, 11), bool] */;
  %193 = %186.2;
  %194 = %187.0;
  %195 = %188.0;
  %196 = %189.2;
  (%190, %191, %var_7997, %181, %192, %193, %194, %195, %196)
}

def @func_5619(%var_5583: Tensor[(5, 5, 7), uint64], %var_5584: Tensor[(5, 5, 7), uint64], %var_5596: Tensor[(5, 5, 7), uint64], %var_5608: Tensor[(5, 165), float32]) -> (Tensor[(5, 5, 7), bool], Tensor[(5, 5, 7), uint16], Tensor[(15, 5, 11), float32], Tensor[(5, 165), float32]) {
  %197 = cast(%var_5584, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %198 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_5583, dtype="bool") /* ty=Tensor[(5, 5, 7), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = cast(%var_5584, dtype="uint64") /* ty=Tensor[(5, 5, 7), uint64] */;
  %202 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_5583, dtype="uint64") /* ty=Tensor[(5, 5, 7), uint64] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %205 = right_shift(%203, %204) /* ty=Tensor[(5, 5, 7), uint64] */;
  %206 = cast(%var_5596, dtype="uint16") /* ty=Tensor[(5, 5, 7), uint16] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="uint16") /* ty=Tensor[(5, 5, 7), uint16] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %210 = cast(%var_5608, dtype="float32") /* ty=Tensor[(5, 165), float32] */;
  %211 = reshape(%210, newshape=[15, 5, 11]) /* ty=Tensor[(15, 5, 11), float32] */;
  %212 = @func_4351(%211) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) */;
  %213 = logical_and(%199, %200) /* ty=Tensor[(5, 5, 7), bool] */;
  %214 = subtract(%208, %209) /* ty=Tensor[(5, 5, 7), uint16] */;
  %215 = %212.3;
  (%213, %214, %215, %var_5608)
}

def @func_6073(%var_6054: Tensor[(40, 2), int64]) -> (Tensor[(16, 8, 8), bool], Tensor[(8, 2, 5), bool], Tensor[(40, 2), int64]) {
  %216 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %217 = cast(%var_6054, dtype="int64") /* ty=Tensor[(40, 2), int64] */;
  %218 = cast(%var_6054, dtype="int64") /* ty=Tensor[(40, 2), int64] */;
  %219 = reshape(%217, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), int64] */;
  %220 = reshape(%218, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), int64] */;
  %221 = @func_4889(%219, %220) /* ty=(Tensor[(8, 2, 5), bool],) */;
  %222 = %216.0;
  %223 = %221.0;
  (%222, %223, %var_6054)
}

def @func_1433() -> (Tensor[(16, 8, 8), int16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  %235 = fn () -> (Tensor[(16, 8, 8), int16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
    %224 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
    %226 = cosh(%225) /* ty=Tensor[(16, 8, 8), float64] */;
    %227 = cast(%224, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
    %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(%226, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %231 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
    %232 = subtract(%229, %230) /* ty=Tensor[(16, 8, 8), int16] */;
    %233 = %231.0;
    %234 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
    (%232, %233, %234)
  };
  %235() /* ty=(Tensor[(16, 8, 8), int16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */
}

def @func_4814() -> (Tensor[(16, 8, 8), float64],) {
  %236 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %237 = %236.0;
  (%237,)
}

def @func_1256() -> Tensor[(16, 8, 8), uint16] {
  %238 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %238.1
}

def @func_4892(%var_4890: Tensor[(8, 2, 5), int64], %var_4891: Tensor[(8, 2, 5), int64]) -> (Tensor[(8, 2, 5), bool],) {
  %249 = fn (%var_4865: Tensor[(8, 2, 5), int64], %var_4873: Tensor[(8, 2, 5), int64]) -> (Tensor[(8, 2, 5), bool],) {
    %239 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 2, 5), int64] */, dtype="int64") /* ty=Tensor[(8, 2, 5), int64] */;
    %240 = shape_of(%var_4865, dtype="int32") /* ty=Tensor[(3), int32] */;
    %241 = cast(%var_4865, dtype="int64") /* ty=Tensor[(8, 2, 5), int64] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %243 = bitwise_xor(%241, %242) /* ty=Tensor[(8, 2, 5), int64] */;
    %244 = cast(%var_4873, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(%243, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %248 = less(%246, %247) /* ty=Tensor[(8, 2, 5), bool] */;
    (%248,)
  };
  %249(%var_4890, %var_4891) /* ty=(Tensor[(8, 2, 5), bool],) */
}

def @func_2339() -> (Tensor[(16, 8, 8), float64],) {
  %251 = fn () -> (Tensor[(16, 8, 8), float64],) {
    %250 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
    (%250,)
  };
  %251() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_2929(%var_2894: Tensor[(3, 11, 13), float32], %var_2895: Tensor[(3, 11, 13), float32], %var_2911: Tensor[(16, 8, 8), bool]) -> (Tensor[(3, 11, 13), bool], Tensor[(16, 8, 8), int8], Tensor[(3, 11, 13), float32]) {
  %252 = cast(%var_2895, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
  %253 = shape_of(%var_2894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_2894, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %256 = floor_mod(%254, %255) /* ty=Tensor[(3, 11, 13), float32] */;
  %257 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 11, 13), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = @func_2888() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) */;
  %262 = %261.0;
  %263 = cast(%var_2911, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %267 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 11, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 13), float32] */;
  %268 = logical_or(%259, %260) /* ty=Tensor[(3, 11, 13), bool] */;
  %269 = multiply(%265, %266) /* ty=Tensor[(16, 8, 8), int8] */;
  %270 = asinh(%267) /* ty=Tensor[(3, 11, 13), float32] */;
  (%268, %269, %270)
}

def @func_260(%var_258: Tensor[(7, 8, 13), bool], %var_259: Tensor[(7, 8, 13), bool]) -> (Tensor[(7, 8, 13), bool],) {
  @func_256(%var_258, %var_259) /* ty=(Tensor[(7, 8, 13), bool],) */
}

def @func_7409() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %271 = @func_5737() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) */;
  %272 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %273 = %271.0;
  %274 = @func_4071() /* ty=Tensor[(16, 8, 8), float32] */;
  %275 = %272.1;
  %276 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  (%273, %274, %275, %276)
}

def @func_2015(%var_2014: Tensor[(16, 8, 8), float64]) -> Tensor[(16, 8, 8), bool] {
  %282 = fn (%var_2008: Tensor[(16, 8, 8), float64]) -> Tensor[(16, 8, 8), bool] {
    %277 = @func_1570() /* ty=Tensor[(16, 8, 8), float64] */;
    %278 = cast(%var_2008, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%277, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%280, %281) /* ty=Tensor[(16, 8, 8), bool] */
  };
  %282(%var_2014) /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_2888() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) {
  %283 = @func_2242() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) */;
  %284 = %283.2;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %286 = reshape(%285, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %287 = @func_2013(%286) /* ty=Tensor[(16, 8, 8), bool] */;
  (%284, %287)
}

def @func_4006() -> Tensor[(16, 8, 8), float64] {
  %288 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %288.0
}

def @func_5660() -> Tensor[(16, 8, 8), uint16] {
  %289 = fn () -> Tensor[(16, 8, 8), uint16] {
    @func_5168() /* ty=Tensor[(16, 8, 8), uint16] */
  };
  %289() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_2318() -> Tensor[(16, 8, 8), float64] {
  @func_2316() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_6488() -> (Tensor[(16, 8, 8), float32],) {
  @func_6486() /* ty=(Tensor[(16, 8, 8), float32],) */
}

def @func_6170(%var_6168: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), bool] {
  @func_6167(%var_6168) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_8421() -> Tensor[(16, 8, 8), float64] {
  @func_8419() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_2754() -> Tensor[(16, 8, 8), uint16] {
  %291 = fn () -> Tensor[(16, 8, 8), uint16] {
    %290 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
    %290.1
  };
  %291() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_2154() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  @func_2152() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */
}

def @func_4435() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32]) {
  %292 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
  %293 = %292.1;
  %294 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %298 = cast(%293, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %299 = @func_3751() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) */;
  %300 = floor_mod(%296, %297) /* ty=Tensor[(16, 8, 8), float64] */;
  %301 = sin(%298) /* ty=Tensor[(16, 8, 8), float64] */;
  %302 = %299.0;
  (%300, %301, %302)
}

def @func_4288() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) {
  %303 = @func_3751() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) */;
  %304 = @func_4038() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) */;
  %305 = %303.0;
  %306 = %304.0;
  (%305, %306)
}

def @func_2152() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  %307 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %309 = reshape(%308, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %310 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %311 = @func_748(%309) /* ty=Tensor[(16, 8, 8), bool] */;
  %312 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %313 = %310.0;
  %314 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  (%307, %311, %312, %313, %314)
}

def @func_6372(%var_6370: Tensor[(8, 9, 8), float64]) -> Tensor[(8, 9, 8), float64] {
  @func_6369(%var_6370) /* ty=Tensor[(8, 9, 8), float64] */
}

def @func_3539() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) {
  %323 = fn () -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) {
    %315 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
    %316 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 8, 8), float64] */, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
    %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%315, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %320 = @func_2152() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
    %321 = logical_or(%318, %319) /* ty=Tensor[(16, 8, 8), bool] */;
    %322 = %320.4;
    (%321, %322)
  };
  %323() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */
}

def @func_8169() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) {
  @func_8167() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */
}

def @func_701() -> (Tensor[(16, 8, 8), float64],) {
  @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_3289() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) {
  @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */
}

def @func_6338() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %328 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
    %324 = @func_2338() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %325 = @func_5737() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) */;
    %326 = %324.0;
    %327 = %325.0;
    (%326, %327)
  };
  %328() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_5738() -> (Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) {
  %338 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) {
    %329 = @func_4038() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) */;
    %330 = cast(meta[relay.Constant][12] /* ty=Tensor[(126, 2), int32] */, dtype="int32") /* ty=Tensor[(126, 2), int32] */;
    %331 = reshape(%330, newshape=[252]) /* ty=Tensor[(252), int32] */;
    %332 = @func_4988(%331) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(39, 11), float32], Tensor[(252), int32], Tensor[(16, 8, 8), bool], Tensor[(3, 11, 13), bool], Tensor[(3, 84), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %333 = %332.6;
    %334 = cast(%333, dtype="float32") /* ty=Tensor[(3, 84), float32] */;
    %335 = %329.1;
    %336 = @func_2753() /* ty=Tensor[(16, 8, 8), uint16] */;
    %337 = exp(%334) /* ty=Tensor[(3, 84), float32] */;
    (%335, meta[relay.Constant][12] /* ty=Tensor[(126, 2), int32] */, %336, %337)
  };
  %338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(126, 2), int32], Tensor[(16, 8, 8), uint16], Tensor[(3, 84), float32]) */
}

def @func_1004() -> Tensor[(16, 8, 8), float64] {
  %340 = fn () -> Tensor[(16, 8, 8), float64] {
    %339 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
    %339.0
  };
  %340() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_4595(%var_4594: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(3), int32]) {
  %347 = fn (%var_4587: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(3), int32]) {
    %341 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %342 = cast(%var_4587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %343 = reshape(%342, newshape=[3]) /* ty=Tensor[(3), int32] */;
    %344 = @func_2191(%343) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(252), int32]) */;
    %345 = %341.0;
    %346 = %344.0;
    (%345, %346, %var_4587)
  };
  %347(%var_4594) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(3), int32]) */
}

def @func_3397(%var_3384: Tensor[(5, 10, 16), float64], %var_3385: Tensor[(5, 10, 16), float64]) -> (Tensor[(5, 10, 16), float32],) {
  %348 = cast(%var_3385, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
  %349 = shape_of(%var_3384, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%var_3384, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %352 = mod(%350, %351) /* ty=Tensor[(5, 10, 16), float64] */;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
  %354 = asinh(%353) /* ty=Tensor[(5, 10, 16), float32] */;
  (%354,)
}

def @func_3814() -> (Tensor[(16, 8, 8), uint16],) {
  %356 = fn () -> (Tensor[(16, 8, 8), uint16],) {
    %355 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
    (%355,)
  };
  %356() /* ty=(Tensor[(16, 8, 8), uint16],) */
}

def @func_4512(%var_4511: Tensor[(16, 8, 8), float64]) -> (Tensor[(16, 8, 8), uint8], Tensor[(3), int32], Tensor[(252), int32], Tensor[(16, 8, 8), float64], Tensor[(3, 6, 14), float64]) {
  %373 = fn (%var_4478: Tensor[(16, 8, 8), float64]) -> (Tensor[(16, 8, 8), uint8], Tensor[(3), int32], Tensor[(252), int32], Tensor[(16, 8, 8), float64], Tensor[(3, 6, 14), float64]) {
    %357 = @func_2977() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %358 = %357.0;
    %359 = cast(%var_4478, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
    %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
    %361 = cast(%358, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
    %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %363 = cast(meta[relay.Constant][13] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(meta[relay.Constant][14] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
    %365 = reshape(%363, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
    %366 = reshape(%364, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), int32] */;
    %367 = @func_1308(%365, %366) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) */;
    %368 = %367.1;
    %369 = cast(%368, dtype="float64") /* ty=Tensor[(3, 6, 14), float64] */;
    %370 = right_shift(%361, %362) /* ty=Tensor[(16, 8, 8), uint8] */;
    %371 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
    %372 = cos(%369) /* ty=Tensor[(3, 6, 14), float64] */;
    (%370, meta[relay.Constant][13] /* ty=Tensor[(3), int32] */, meta[relay.Constant][14] /* ty=Tensor[(252), int32] */, %371, %372)
  };
  %373(%var_4511) /* ty=(Tensor[(16, 8, 8), uint8], Tensor[(3), int32], Tensor[(252), int32], Tensor[(16, 8, 8), float64], Tensor[(3, 6, 14), float64]) */
}

def @func_4654(%var_4652: Tensor[(728), bool]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool]) {
  @func_4651(%var_4652) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool]) */
}

def @func_6289() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_6287() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_4610() -> (Tensor[(16, 8, 8), float64],) {
  @func_4608() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_5492(%var_5481: Tensor[(16, 8, 8), float32]) -> Tensor[(16, 8, 8), int32] {
  %374 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
  %375 = cast(%var_5481, dtype="int32") /* ty=Tensor[(16, 8, 8), int32] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="int32") /* ty=Tensor[(16, 8, 8), int32] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%377, %378) /* ty=Tensor[(16, 8, 8), int32] */
}

def @func_8357() -> Tensor[(16, 8, 8), uint16] {
  %380 = fn () -> Tensor[(16, 8, 8), uint16] {
    %379 = @func_5467() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
    %379.1
  };
  %380() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_2589(%var_2587: Tensor[(12, 210), float64]) -> (Tensor[(16, 8, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(12, 210), float64], Tensor[(16, 8, 8), float64]) {
  @func_2586(%var_2587) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(12, 210), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_3401(%var_3399: Tensor[(5, 10, 16), float64], %var_3400: Tensor[(5, 10, 16), float64]) -> (Tensor[(5, 10, 16), float32],) {
  @func_3397(%var_3399, %var_3400) /* ty=(Tensor[(5, 10, 16), float32],) */
}

def @func_3589(%var_3583: Tensor[(429), float32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float32], Tensor[(3, 11, 13), float32], Tensor[(429), float32]) {
  %381 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %382 = cast(%var_3583, dtype="float32") /* ty=Tensor[(429), float32] */;
  %383 = cast(%var_3583, dtype="float32") /* ty=Tensor[(429), float32] */;
  %384 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
  %385 = cast(%384, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %386 = reshape(%382, newshape=[3, 11, 13]) /* ty=Tensor[(3, 11, 13), float32] */;
  %387 = reshape(%383, newshape=[3, 11, 13]) /* ty=Tensor[(3, 11, 13), float32] */;
  %388 = reshape(%385, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), bool] */;
  %389 = @func_2929(%386, %387, %388) /* ty=(Tensor[(3, 11, 13), bool], Tensor[(16, 8, 8), int8], Tensor[(3, 11, 13), float32]) */;
  %390 = cast(%var_3583, dtype="float32") /* ty=Tensor[(429), float32] */;
  %391 = %381.1;
  %392 = %389.2;
  %393 = exp(%390) /* ty=Tensor[(429), float32] */;
  (%391, %384, %392, %393)
}

def @func_921() -> Tensor[(16, 8, 8), float64] {
  %394 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %394.0
}

def @func_3608(%var_3607: Tensor[(3, 8, 10), float64]) -> (Tensor[(3, 8, 10), float64], Tensor[(9, 5, 13), float32], Tensor[(585), float32]) {
  %400 = fn (%var_3596: Tensor[(3, 8, 10), float64]) -> (Tensor[(3, 8, 10), float64], Tensor[(9, 5, 13), float32], Tensor[(585), float32]) {
    %395 = cast(%var_3596, dtype="float64") /* ty=Tensor[(3, 8, 10), float64] */;
    %396 = cast(meta[relay.Constant][15] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
    %397 = reshape(%396, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float32] */;
    %398 = sinh(%395) /* ty=Tensor[(3, 8, 10), float64] */;
    %399 = @func_3427(%397) /* ty=Tensor[(9, 5, 13), float32] */;
    (%398, %399, meta[relay.Constant][15] /* ty=Tensor[(585), float32] */)
  };
  %400(%var_3607) /* ty=(Tensor[(3, 8, 10), float64], Tensor[(9, 5, 13), float32], Tensor[(585), float32]) */
}

def @func_8505(%var_8503: Tensor[(6, 1, 13), float32], %var_8504: Tensor[(6, 7, 13), float32]) -> (Tensor[(6, 7, 13), float32], Tensor[(6, 1, 13), float64], Tensor[(6, 1, 13), float32]) {
  %412 = fn (%var_8478: Tensor[(6, 1, 13), float32], %var_8479: Tensor[(6, 7, 13), float32]) -> (Tensor[(6, 7, 13), float32], Tensor[(6, 1, 13), float64], Tensor[(6, 1, 13), float32]) {
    %401 = cast(%var_8478, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
    %402 = cast(%var_8479, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
    %403 = cast(%var_8478, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
    %404 = log2(%403) /* ty=Tensor[(6, 1, 13), float64] */;
    %405 = cast(%404, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
    %406 = cast(%404, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
    %407 = sin(%406) /* ty=Tensor[(6, 1, 13), float64] */;
    %408 = cast(%407, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
    %409 = power(%401, %402) /* ty=Tensor[(6, 7, 13), float32] */;
    %410 = sqrt(%405) /* ty=Tensor[(6, 1, 13), float64] */;
    %411 = tan(%408) /* ty=Tensor[(6, 1, 13), float32] */;
    (%409, %410, %411)
  };
  %412(%var_8503, %var_8504) /* ty=(Tensor[(6, 7, 13), float32], Tensor[(6, 1, 13), float64], Tensor[(6, 1, 13), float32]) */
}

def @func_2741() -> (Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %413 = cast(meta[relay.Constant][16] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %414 = reshape(%413, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %415 = @func_1698(%414) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) */;
  %416 = %415.0;
  %417 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %421 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
  %422 = divide(%419, %420) /* ty=Tensor[(16, 8, 8), float64] */;
  %423 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  (%421, meta[relay.Constant][16] /* ty=Tensor[(210), float64] */, %422, %423)
}

def @func_321(%var_314: Tensor[(1, 13, 7), float64]) -> Tensor[(1, 13, 7), float64] {
  %424 = cast(%var_314, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %425 = acos(%424) /* ty=Tensor[(1, 13, 7), float64] */;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  sinh(%426) /* ty=Tensor[(1, 13, 7), float64] */
}

def @func_2452() -> Tensor[(16, 8, 8), float32] {
  %427 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %428 = %427.2;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %430 = asin(%429) /* ty=Tensor[(16, 8, 8), float64] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  acosh(%431) /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_4553() -> (Tensor[(2, 15, 11), float32],) {
  @func_4551() /* ty=(Tensor[(2, 15, 11), float32],) */
}

def @func_5176() -> Tensor[(2, 15, 11), float32] {
  %432 = @func_4551() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %432.0
}

def @func_7910(%var_7909: Tensor[(2, 7, 6), float64]) -> (Tensor[(2, 7, 6), bool],) {
  %436 = fn (%var_7894: Tensor[(2, 7, 6), float64]) -> (Tensor[(2, 7, 6), bool],) {
    %433 = cast(-1.86755f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %434 = cast(%var_7894, dtype="bool") /* ty=Tensor[(2, 7, 6), bool] */;
    %435 = less_equal(%433, %434) /* ty=Tensor[(2, 7, 6), bool] */;
    (%435,)
  };
  %436(%var_7909) /* ty=(Tensor[(2, 7, 6), bool],) */
}

def @func_1069() -> (Tensor[(16, 8, 8), uint16],) {
  %439 = fn () -> (Tensor[(16, 8, 8), uint16],) {
    %437 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
    %438 = %437.1;
    (%438,)
  };
  %439() /* ty=(Tensor[(16, 8, 8), uint16],) */
}

def @func_256(%var_245: Tensor[(7, 8, 13), bool], %var_246: Tensor[(7, 8, 13), bool]) -> (Tensor[(7, 8, 13), bool],) {
  %440 = cast(%var_246, dtype="bool") /* ty=Tensor[(7, 8, 13), bool] */;
  %441 = shape_of(%var_245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_245, dtype="bool") /* ty=Tensor[(7, 8, 13), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = logical_and(%442, %443) /* ty=Tensor[(7, 8, 13), bool] */;
  (%444,)
}

def @main(%var_8509: uint64) -> Tensor[(2, 5, 10), float64] {
  %445 = cast(%var_8509, dtype="uint64") /* ty=uint64 */;
  %446 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 5, 10), uint64] */, dtype="uint64") /* ty=Tensor[(2, 5, 10), uint64] */;
  %447 = logical_xor(%445, %446) /* ty=Tensor[(2, 5, 10), uint64] */;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(2, 5, 10), float64] */;
  erf(%448) /* ty=Tensor[(2, 5, 10), float64] */
}

def @func_4040() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) {
  @func_4038() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) */
}

def @func_6729() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) {
  %449 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %450 = %449.0;
  %451 = @func_1795() /* ty=Tensor[(16, 8, 8), float64] */;
  (%450, %451)
}

def @func_1161(%var_1115: Tensor[(16, 8, 8), uint16]) -> Tensor[(16, 8, 8), int16] {
  %452 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %453 = %452.0;
  %454 = cast(%var_1115, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="int16") /* ty=Tensor[(16, 8, 8), int16] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%456, %457) /* ty=Tensor[(16, 8, 8), int16] */
}

def @func_6832(%var_6830: Tensor[(14, 5, 5), float64]) -> (Tensor[(14, 5, 5), float64], Tensor[(14, 5, 5), float64]) {
  @func_6829(%var_6830) /* ty=(Tensor[(14, 5, 5), float64], Tensor[(14, 5, 5), float64]) */
}

def @func_3659() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %462 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
    %458 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %459 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
    %460 = %458.0;
    %461 = %459.0;
    (%460, %461)
  };
  %462() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_7358() -> Tensor[(16, 8, 8), float64] {
  @func_6932() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_6696() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(700), int64]) {
  @func_6694() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(700), int64]) */
}

def @func_2057(%var_2055: Tensor[(5, 140), int64], %var_2056: Tensor[(1, 91), float64]) -> (Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) {
  @func_2053(%var_2055, %var_2056) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */
}

def @func_2890() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) {
  @func_2888() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) */
}

def @func_4988(%var_4936: Tensor[(252), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(39, 11), float32], Tensor[(252), int32], Tensor[(16, 8, 8), bool], Tensor[(3, 11, 13), bool], Tensor[(3, 84), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %463 = @func_1932() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) */;
  %464 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %466 = reshape(%465, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %467 = cast(meta[relay.Constant][19] /* ty=Tensor[(39, 11), float32] */, dtype="float32") /* ty=Tensor[(39, 11), float32] */;
  %468 = reshape(%467, newshape=[429]) /* ty=Tensor[(429), float32] */;
  %469 = @func_3589(%468) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float32], Tensor[(3, 11, 13), float32], Tensor[(429), float32]) */;
  %470 = %469.2;
  %471 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 11, 13), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="bool") /* ty=Tensor[(3, 11, 13), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 1), int32] */, dtype="int32") /* ty=Tensor[(3, 1), int32] */;
  %476 = cast(%var_4936, dtype="int32") /* ty=Tensor[(252), int32] */;
  %477 = cast(%var_4936, dtype="int32") /* ty=Tensor[(252), int32] */;
  %478 = reshape(%475, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %479 = reshape(%476, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %480 = reshape(%477, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %481 = @func_1500(%478, %479, %480) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %482 = %481.4;
  %483 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 1), int32] */, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
  %484 = cast(%482, dtype="float64") /* ty=Tensor[(3, 84), float64] */;
  %485 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %486 = @func_4608() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %487 = %463.4;
  %488 = @func_2013(%466) /* ty=Tensor[(16, 8, 8), bool] */;
  %489 = equal(%473, %474) /* ty=Tensor[(3, 11, 13), bool] */;
  %490 = floor_divide(%483, %484) /* ty=Tensor[(3, 84), float64] */;
  %491 = %485.0;
  %492 = %486.0;
  (%487, %464, meta[relay.Constant][19] /* ty=Tensor[(39, 11), float32] */, %var_4936, %488, %489, %490, %491, %492)
}

def @func_8321(%var_8320: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(728), bool], Tensor[(700), int64], Tensor[(16, 8, 8), float64]) {
  %503 = fn (%var_8304: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(728), bool], Tensor[(700), int64], Tensor[(16, 8, 8), float64]) {
    %493 = @func_5329() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(585), float32], Tensor[(240), float64]) */;
    %494 = cast(%var_8304, dtype="int64") /* ty=Tensor[(700), int64] */;
    %495 = cast(%var_8304, dtype="int64") /* ty=Tensor[(700), int64] */;
    %496 = reshape(%494, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
    %497 = reshape(%495, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
    %498 = @func_1586(%496, %497) /* ty=(Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) */;
    %499 = @func_5659() /* ty=Tensor[(16, 8, 8), uint16] */;
    %500 = %493.0;
    %501 = %498.1;
    %502 = @func_7358() /* ty=Tensor[(16, 8, 8), float64] */;
    (%499, %500, %501, %var_8304, %502)
  };
  %503(%var_8320) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(728), bool], Tensor[(700), int64], Tensor[(16, 8, 8), float64]) */
}

def @func_6694() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(700), int64]) {
  %504 = cast(meta[relay.Constant][22] /* ty=Tensor[(700), int64] */, dtype="int64") /* ty=Tensor[(700), int64] */;
  %505 = reshape(%504, newshape=[700]) /* ty=Tensor[(700), int64] */;
  %506 = @func_6236(%505) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(364), float64], Tensor[(825), float32]) */;
  %507 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
  %508 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  %509 = %506.1;
  (%507, %508, %509, meta[relay.Constant][22] /* ty=Tensor[(700), int64] */)
}

def @func_1698(%var_1695: Tensor[(210), float64]) -> (Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) {
  %510 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %511 = cast(meta[relay.Constant][23] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %512 = reshape(%511, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), float64] */;
  %513 = cast(meta[relay.Constant][23] /* ty=Tensor[(1386), float64] */, dtype="float64") /* ty=Tensor[(1386), float64] */;
  %514 = cast(%var_1695, dtype="float64") /* ty=Tensor[(210), float64] */;
  %515 = cast(meta[relay.Constant][24] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %516 = reshape(%514, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), float64] */;
  %517 = reshape(%515, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %518 = @func_290(%516, %517) /* ty=(Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) */;
  %519 = %510.0;
  %520 = @func_502(%512) /* ty=Tensor[(11, 9, 14), float64] */;
  %521 = acos(%513) /* ty=Tensor[(1386), float64] */;
  %522 = %518.3;
  (%519, %520, %521, %522, %var_1695, meta[relay.Constant][24] /* ty=Tensor[(728), bool] */)
}

def @func_2258() -> (Tensor[(16, 8, 8), uint16],) {
  %525 = fn () -> (Tensor[(16, 8, 8), uint16],) {
    %523 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %524 = %523.0;
    (%524,)
  };
  %525() /* ty=(Tensor[(16, 8, 8), uint16],) */
}

def @func_1571() -> Tensor[(16, 8, 8), float64] {
  %527 = fn () -> Tensor[(16, 8, 8), float64] {
    %526 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
    %526.0
  };
  %527() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_3338() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %528 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
  %529 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  %530 = %528.1;
  (%529, %530)
}

def @func_1851() -> (Tensor[(16, 8, 8), uint16],) {
  %531 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %532 = %531.1;
  (%532,)
}

def @func_4187() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) {
  %538 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) {
    %533 = cast(meta[relay.Constant][25] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %534 = reshape(%533, newshape=[16, 3, 2]) /* ty=Tensor[(16, 3, 2), float32] */;
    %535 = @func_3152(%534) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 3, 2), float32]) */;
    %536 = @func_1611() /* ty=Tensor[(16, 8, 8), float64] */;
    %537 = %535.0;
    (%536, %537, meta[relay.Constant][25] /* ty=Tensor[(96), float32] */)
  };
  %538() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) */
}

def @func_3799() -> (Tensor[(16, 8, 8), bool],) {
  @func_3797() /* ty=(Tensor[(16, 8, 8), bool],) */
}

def @func_1230(%var_1185: Tensor[(16, 8, 8), uint16]) -> (Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) {
  %539 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %540 = %539.0;
  %541 = cast(%var_1185, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="int8") /* ty=Tensor[(16, 8, 8), int8] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %545 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %546 = minimum(%543, %544) /* ty=Tensor[(16, 8, 8), int8] */;
  %547 = %545.0;
  (%546, %547)
}

def @func_1467() -> (Tensor[(16, 8, 8), float64],) {
  @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_3752() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) {
  %560 = fn () -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) {
    %548 = @func_3038() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %549 = %548.0;
    %550 = @func_3085() /* ty=Tensor[(16, 8, 8), float32] */;
    %551 = cast(%550, dtype="uint16") /* ty=Tensor[(16, 8, 8), uint16] */;
    %552 = reshape(%551, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), uint16] */;
    %553 = @func_1230(%552) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) */;
    %554 = %553.1;
    %555 = cast(%554, dtype="uint32") /* ty=Tensor[(16, 8, 8), uint32] */;
    %556 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%549, dtype="uint32") /* ty=Tensor[(16, 8, 8), uint32] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %559 = bitwise_xor(%557, %558) /* ty=Tensor[(16, 8, 8), uint32] */;
    (%550, %559)
  };
  %560() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint32]) */
}

def @func_5169() -> Tensor[(16, 8, 8), uint16] {
  %562 = fn () -> Tensor[(16, 8, 8), uint16] {
    %561 = @func_2257() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %561.0
  };
  %562() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_1933() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) {
  %575 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) {
    %563 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %564 = cast(meta[relay.Constant][26] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %565 = reshape(%564, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %566 = @func_1698(%565) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) */;
    %567 = cast(meta[relay.Constant][26] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %568 = reshape(%567, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %569 = @func_1698(%568) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) */;
    %570 = %563.0;
    %571 = @func_1611() /* ty=Tensor[(16, 8, 8), float64] */;
    %572 = %566.0;
    %573 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
    %574 = %569.2;
    (%570, %571, %572, meta[relay.Constant][26] /* ty=Tensor[(210), float64] */, %573, %574)
  };
  %575() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) */
}

def @func_5119() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %580 = fn () -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
    %576 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %577 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
    %578 = %576.1;
    %579 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
    (%577, %578, %579)
  };
  %580() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_4816() -> (Tensor[(16, 8, 8), float64],) {
  @func_4814() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_6287() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %581 = @func_2977() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %582 = @func_1465() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %583 = %581.0;
  %584 = @func_3629() /* ty=Tensor[(16, 8, 8), float64] */;
  %585 = %582.0;
  (%583, %584, %585)
}

def @func_2242() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) {
  %586 = @func_2152() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %587 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %588 = %586.1;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %590 = reshape(%589, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %591 = %587.0;
  %592 = @func_748(%590) /* ty=Tensor[(16, 8, 8), bool] */;
  (%588, %591, %592)
}

def @func_3630() -> Tensor[(16, 8, 8), float64] {
  %594 = fn () -> Tensor[(16, 8, 8), float64] {
    %593 = @func_2338() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %593.0
  };
  %594() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_4608() -> (Tensor[(16, 8, 8), float64],) {
  %595 = @func_1003() /* ty=Tensor[(16, 8, 8), float64] */;
  (%595,)
}

def @func_3085() -> Tensor[(16, 8, 8), float32] {
  %596 = @func_2888() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), bool]) */;
  %597 = %596.1;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  erf(%598) /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_8087(%var_8086: Tensor[(1386), float64]) -> Tensor[(1386), bool] {
  %605 = fn (%var_8079: Tensor[(1386), float64]) -> Tensor[(1386), bool] {
    %599 = @func_1932() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) */;
    %600 = %599.5;
    %601 = cast(%var_8079, dtype="bool") /* ty=Tensor[(1386), bool] */;
    %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(1), int32] */;
    %603 = cast(%600, dtype="bool") /* ty=Tensor[(1386), bool] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?), bool] */;
    logical_or(%603, %604) /* ty=Tensor[(1386), bool] */
  };
  %605(%var_8086) /* ty=Tensor[(1386), bool] */
}

def @func_3592(%var_3590: Tensor[(429), float32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float32], Tensor[(3, 11, 13), float32], Tensor[(429), float32]) {
  @func_3589(%var_3590) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float32], Tensor[(3, 11, 13), float32], Tensor[(429), float32]) */
}

def @func_699() -> (Tensor[(16, 8, 8), float64],) {
  %606 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %607 = %606.0;
  (%607,)
}

def @func_5178() -> Tensor[(2, 15, 11), float32] {
  @func_5176() /* ty=Tensor[(2, 15, 11), float32] */
}

def @func_6167(%var_6151: Tensor[(2, 15, 11), float32]) -> Tensor[(2, 15, 11), bool] {
  %608 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
  %609 = %608.0;
  %610 = cast(%var_6151, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%612, %613) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_5963(%var_5952: Tensor[(4, 8, 3), int64]) -> Tensor[(4, 8, 3), bool] {
  %614 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 8, 3), int64] */, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %615 = shape_of(%var_5952, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%var_5952, dtype="bool") /* ty=Tensor[(4, 8, 3), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%616, %617) /* ty=Tensor[(4, 8, 3), bool] */
}

def @func_1465() -> (Tensor[(16, 8, 8), float64],) {
  %618 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %619 = %618.0;
  (%619,)
}

def @func_2454() -> Tensor[(16, 8, 8), float32] {
  @func_2452() /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_2293() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
  %620 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %621 = @func_2242() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), bool]) */;
  %622 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
  %623 = %620.0;
  %624 = %621.2;
  (%622, %623, %624)
}

def @func_4290() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) {
  @func_4288() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) */
}

def @func_324(%var_322: Tensor[(1, 13, 7), float64]) -> Tensor[(1, 13, 7), float64] {
  @func_321(%var_322) /* ty=Tensor[(1, 13, 7), float64] */
}

def @func_4991(%var_4989: Tensor[(252), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(39, 11), float32], Tensor[(252), int32], Tensor[(16, 8, 8), bool], Tensor[(3, 11, 13), bool], Tensor[(3, 84), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_4988(%var_4989) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(39, 11), float32], Tensor[(252), int32], Tensor[(16, 8, 8), bool], Tensor[(3, 11, 13), bool], Tensor[(3, 84), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_2494() -> Tensor[(16, 8, 8), float64] {
  %625 = fn () -> Tensor[(16, 8, 8), float64] {
    @func_2316() /* ty=Tensor[(16, 8, 8), float64] */
  };
  %625() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_7018(%var_7017: Tensor[(6, 8, 14), float64]) -> (Tensor[(6, 8, 14), float64],) {
  %628 = fn (%var_6995: Tensor[(6, 8, 14), float64]) -> (Tensor[(6, 8, 14), float64],) {
    %626 = cast(%var_6995, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
    %627 = log2(%626) /* ty=Tensor[(6, 8, 14), float64] */;
    (%627,)
  };
  %628(%var_7017) /* ty=(Tensor[(6, 8, 14), float64],) */
}

def @func_1797() -> Tensor[(16, 8, 8), float64] {
  @func_1795() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_4651(%var_4643: Tensor[(728), bool]) -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool]) {
  %629 = @func_2741() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %630 = cast(%var_4643, dtype="bool") /* ty=Tensor[(728), bool] */;
  %631 = cast(%var_4643, dtype="bool") /* ty=Tensor[(728), bool] */;
  %632 = reshape(%630, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %633 = reshape(%631, newshape=[7, 8, 13]) /* ty=Tensor[(7, 8, 13), bool] */;
  %634 = @func_256(%632, %633) /* ty=(Tensor[(7, 8, 13), bool],) */;
  %635 = %629.2;
  %636 = @func_3629() /* ty=Tensor[(16, 8, 8), float64] */;
  %637 = %634.0;
  (%635, %636, %637, %var_4643)
}

def @func_1164(%var_1162: Tensor[(16, 8, 8), uint16]) -> Tensor[(16, 8, 8), int16] {
  @func_1161(%var_1162) /* ty=Tensor[(16, 8, 8), int16] */
}

def @func_1500(%var_1481: Tensor[(3), int32], %var_1482: Tensor[(3, 84), int32], %var_1493: Tensor[(3, 84), int32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) {
  %638 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %641 = reshape(%640, newshape=[16, 8, 8]) /* ty=Tensor[(16, 8, 8), float64] */;
  %642 = cast(%var_1481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%var_1482, dtype="int32") /* ty=Tensor[(3, 84), int32] */;
  %644 = reshape(%642, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), int32] */;
  %645 = reshape(%643, newshape=[3, 6, 14]) /* ty=Tensor[(3, 6, 14), int32] */;
  %646 = @func_1308(%644, %645) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) */;
  %647 = cast(%var_1493, dtype="bool") /* ty=Tensor[(3, 84), bool] */;
  %648 = shape_of(%var_1482, dtype="int32") /* ty=Tensor[(2), int32] */;
  %649 = cast(%var_1482, dtype="bool") /* ty=Tensor[(3, 84), bool] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %651 = @func_748(%641) /* ty=Tensor[(16, 8, 8), bool] */;
  %652 = %646.1;
  %653 = less_equal(%649, %650) /* ty=Tensor[(3, 84), bool] */;
  (%639, %651, %652, %var_1481, %653)
}

def @func_5534() -> (Tensor[(16, 8, 8), float64],) {
  %656 = fn () -> (Tensor[(16, 8, 8), float64],) {
    %654 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %655 = %654.0;
    (%655,)
  };
  %656() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_5801(%var_5799: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) {
  @func_5798(%var_5799) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) */
}

def @func_6211() -> Tensor[(16, 8, 8), uint16] {
  @func_6209() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_6397() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %657 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
  %658 = %657.1;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %660 = exp(%659) /* ty=Tensor[(16, 8, 8), float64] */;
  %661 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  (%660, %661)
}

def @func_6933() -> Tensor[(16, 8, 8), float64] {
  %663 = fn () -> Tensor[(16, 8, 8), float64] {
    %662 = @func_2977() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %662.0
  };
  %663() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_5379(%var_5378: Tensor[(252), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(3), int32], Tensor[(3), int32], Tensor[(252), int32]) {
  %674 = fn (%var_5361: Tensor[(252), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(3), int32], Tensor[(3), int32], Tensor[(252), int32]) {
    %664 = @func_4608() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %665 = cast(meta[relay.Constant][28] /* ty=Tensor[(3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(%var_5361, dtype="int32") /* ty=Tensor[(252), int32] */;
    %667 = cast(%var_5361, dtype="int32") /* ty=Tensor[(252), int32] */;
    %668 = reshape(%665, newshape=[3]) /* ty=Tensor[(3), int32] */;
    %669 = reshape(%666, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
    %670 = reshape(%667, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
    %671 = @func_1500(%668, %669, %670) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
    %672 = %664.0;
    %673 = %671.3;
    (%672, %673, meta[relay.Constant][28] /* ty=Tensor[(3), int32] */, %var_5361)
  };
  %674(%var_5378) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(3), int32], Tensor[(3), int32], Tensor[(252), int32]) */
}

def @func_6486() -> (Tensor[(16, 8, 8), float32],) {
  %675 = @func_3450() /* ty=Tensor[(16, 8, 8), float32] */;
  (%675,)
}

def @func_7411() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_7409() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_2586(%var_2570: Tensor[(12, 210), float64]) -> (Tensor[(16, 8, 8), float64], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64], Tensor[(700), int64], Tensor[(12, 210), float64], Tensor[(16, 8, 8), float64]) {
  %676 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 91), float64] */, dtype="float64") /* ty=Tensor[(1, 91), float64] */;
  %677 = reshape(%676, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %678 = cast(meta[relay.Constant][30] /* ty=Tensor[(700), int64] */, dtype="int64") /* ty=Tensor[(700), int64] */;
  %679 = @func_321(%677) /* ty=Tensor[(1, 13, 7), float64] */;
  %680 = cast(%679, dtype="float64") /* ty=Tensor[(1, 13, 7), float64] */;
  %681 = reshape(%678, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
  %682 = reshape(%680, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
  %683 = @func_2053(%681, %682) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
  %684 = %683.0;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %686 = cast(%var_2570, dtype="float64") /* ty=Tensor[(12, 210), float64] */;
  %687 = @func_921() /* ty=Tensor[(16, 8, 8), float64] */;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %689 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
  %690 = floor_mod(%685, %686) /* ty=Tensor[(12, 210), float64] */;
  %691 = atanh(%688) /* ty=Tensor[(16, 8, 8), float64] */;
  (%689, %679, meta[relay.Constant][29] /* ty=Tensor[(1, 91), float64] */, meta[relay.Constant][30] /* ty=Tensor[(700), int64] */, %690, %691)
}

def @func_685() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) {
  %692 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 8, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  %693 = sinh(%692) /* ty=Tensor[(16, 8, 8), float32] */;
  %694 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 8, 8), float32] */, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %698 = greater_equal(%696, %697) /* ty=Tensor[(16, 8, 8), bool] */;
  %699 = cast(%698, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %700 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(16, 8, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 8, 8), float32] */, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %703 = add(%701, %702) /* ty=Tensor[(16, 8, 8), uint8] */;
  %704 = cast(%703, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %705 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 8, 8), bool] */, dtype="uint16") /* ty=Tensor[(16, 8, 8), uint16] */;
  %706 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%698, dtype="uint16") /* ty=Tensor[(16, 8, 8), uint16] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %709 = log10(%704) /* ty=Tensor[(16, 8, 8), float64] */;
  %710 = bitwise_and(%707, %708) /* ty=Tensor[(16, 8, 8), uint16] */;
  (%709, %710)
}

def @func_504(%var_503: Tensor[(11, 9, 14), float64]) -> Tensor[(11, 9, 14), float64] {
  %715 = fn (%var_486: Tensor[(11, 9, 14), float64]) -> Tensor[(11, 9, 14), float64] {
    %711 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 9, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
    %712 = shape_of(%var_486, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(%var_486, dtype="float64") /* ty=Tensor[(11, 9, 14), float64] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%713, %714) /* ty=Tensor[(11, 9, 14), float64] */
  };
  %715(%var_503) /* ty=Tensor[(11, 9, 14), float64] */
}

def @func_294(%var_292: Tensor[(5, 6, 7), float64], %var_293: Tensor[(728), bool]) -> (Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) {
  @func_290(%var_292, %var_293) /* ty=(Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) */
}

def @func_6399() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_6397() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_748(%var_743: Tensor[(16, 8, 8), float64]) -> Tensor[(16, 8, 8), bool] {
  %716 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %717 = %716.0;
  %718 = cast(%var_743, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%720, %721) /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_4437() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32]) {
  @func_4435() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32]) */
}

def @func_1701(%var_1699: Tensor[(210), float64]) -> (Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) {
  @func_1698(%var_1699) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(11, 9, 14), float64], Tensor[(1386), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(728), bool]) */
}

def @func_5966(%var_5964: Tensor[(4, 8, 3), int64]) -> Tensor[(4, 8, 3), bool] {
  @func_5963(%var_5964) /* ty=Tensor[(4, 8, 3), bool] */
}

def @func_5330() -> (Tensor[(16, 8, 8), float64], Tensor[(585), float32], Tensor[(240), float64]) {
  %728 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(585), float32], Tensor[(240), float64]) {
    %722 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
    %723 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %724 = reshape(%723, newshape=[3, 8, 10]) /* ty=Tensor[(3, 8, 10), float64] */;
    %725 = @func_3606(%724) /* ty=(Tensor[(3, 8, 10), float64], Tensor[(9, 5, 13), float32], Tensor[(585), float32]) */;
    %726 = %722.0;
    %727 = %725.2;
    (%726, %727, meta[relay.Constant][34] /* ty=Tensor[(240), float64] */)
  };
  %728() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(585), float32], Tensor[(240), float64]) */
}

def @func_7360() -> Tensor[(16, 8, 8), float64] {
  @func_7358() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_3038() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %729 = @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %730 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %731 = %729.0;
  %732 = %730.0;
  (%731, %732)
}

def @func_5995() -> Tensor[(16, 8, 8), float64] {
  %733 = @func_685() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16]) */;
  %733.0
}

def @func_6770(%var_6732: Tensor[(9, 16, 12), float64]) -> (Tensor[(9, 16, 12), float64], Tensor[(16, 8, 8), float64]) {
  %734 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 16, 12), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %735 = shape_of(%var_6732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_6732, dtype="float64") /* ty=Tensor[(9, 16, 12), float64] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %738 = power(%736, %737) /* ty=Tensor[(9, 16, 12), float64] */;
  %739 = @func_1795() /* ty=Tensor[(16, 8, 8), float64] */;
  (%738, %739)
}

def @func_4354(%var_4352: Tensor[(15, 5, 11), float32]) -> (Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) {
  @func_4351(%var_4352) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) */
}

def @func_7959() -> (Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) {
  %744 = fn () -> (Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) {
    %740 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
    %741 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
    %742 = %740.1;
    %743 = %741.0;
    (%742, %743)
  };
  %744() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) */
}

def @func_6103() -> Tensor[(16, 8, 8), float64] {
  %746 = fn () -> Tensor[(16, 8, 8), float64] {
    %745 = @func_5417() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %745.0
  };
  %746() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_2193(%var_2192: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(252), int32]) {
  %757 = fn (%var_2184: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(252), int32]) {
    %747 = @func_1068() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %748 = cast(%var_2184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
    %750 = cast(meta[relay.Constant][36] /* ty=Tensor[(252), int32] */, dtype="int32") /* ty=Tensor[(252), int32] */;
    %751 = reshape(%748, newshape=[3]) /* ty=Tensor[(3), int32] */;
    %752 = reshape(%749, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
    %753 = reshape(%750, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
    %754 = @func_1500(%751, %752, %753) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
    %755 = %747.0;
    %756 = %754.2;
    (%755, %756, %var_2184, meta[relay.Constant][36] /* ty=Tensor[(252), int32] */)
  };
  %757(%var_2192) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(252), int32]) */
}

def @func_1233(%var_1231: Tensor[(16, 8, 8), uint16]) -> (Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) {
  @func_1230(%var_1231) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(16, 8, 8), float64]) */
}

def @func_6951() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %758 = @func_4814() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %759 = @func_5995() /* ty=Tensor[(16, 8, 8), float64] */;
  %760 = %758.0;
  (%759, %760)
}

def @func_2295() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) {
  @func_2293() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */
}

def @func_3340() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_1795() -> Tensor[(16, 8, 8), float64] {
  @func_1003() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_4365() -> (Tensor[(2, 15, 11), float32],) {
  %761 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 15, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 11), float32] */;
  %762 = sqrt(%761) /* ty=Tensor[(2, 15, 11), float32] */;
  (%762,)
}

def @func_1308(%var_1284: Tensor[(3, 1, 1), int32], %var_1289: Tensor[(3, 6, 14), int32]) -> (Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) {
  %763 = cast(%var_1284, dtype="bool") /* ty=Tensor[(3, 1, 1), bool] */;
  %764 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 6, 14), int32] */, dtype="bool") /* ty=Tensor[(3, 6, 14), bool] */;
  %765 = cast(%var_1289, dtype="int64") /* ty=Tensor[(3, 6, 14), int64] */;
  %766 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(3, 6, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 6, 14), int32] */, dtype="int64") /* ty=Tensor[(3, 6, 14), int64] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %769 = greater(%763, %764) /* ty=Tensor[(3, 6, 14), bool] */;
  %770 = minimum(%767, %768) /* ty=Tensor[(3, 6, 14), int64] */;
  (%769, %770)
}

def @func_7712() -> (Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), uint16]) {
  %775 = fn () -> (Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), uint16]) {
    %771 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
    %772 = @func_2741() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
    %773 = %771.0;
    %774 = %772.0;
    (%773, %774)
  };
  %775() /* ty=(Tensor[(2, 15, 11), float32], Tensor[(16, 8, 8), uint16]) */
}

def @func_2053(%var_2036: Tensor[(5, 140), int64], %var_2051: Tensor[(1, 91), float64]) -> (Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) {
  %776 = cast(%var_2036, dtype="int64") /* ty=Tensor[(5, 140), int64] */;
  %777 = cast(%var_2036, dtype="int64") /* ty=Tensor[(5, 140), int64] */;
  %778 = reshape(%776, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
  %779 = reshape(%777, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), int64] */;
  %780 = @func_1586(%778, %779) /* ty=(Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) */;
  %781 = @func_1932() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(210), float64], Tensor[(16, 8, 8), float64], Tensor[(1386), float64]) */;
  %782 = %781.4;
  %783 = cast(%782, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  %784 = tan(%783) /* ty=Tensor[(16, 8, 8), float32] */;
  %785 = cast(%782, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %789 = greater(%787, %788) /* ty=Tensor[(16, 8, 8), bool] */;
  %790 = cast(%789, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %791 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%784, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = cast(%var_2051, dtype="float64") /* ty=Tensor[(1, 91), float64] */;
  %795 = reshape(%794, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
  %796 = %780.2;
  %797 = equal(%792, %793) /* ty=Tensor[(16, 8, 8), bool] */;
  %798 = @func_321(%795) /* ty=Tensor[(1, 13, 7), float64] */;
  (%796, %var_2036, %797, %798, %var_2051)
}

def @func_5419() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_5417() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_3087() -> Tensor[(16, 8, 8), float32] {
  @func_3085() /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_8273(%var_8271: Tensor[(8, 1, 11), float32], %var_8272: Tensor[(8, 7, 11), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(8, 7, 11), uint64], Tensor[(8, 1, 11), float32], Tensor[(16, 8, 8), bool]) {
  %810 = fn (%var_8206: Tensor[(8, 1, 11), float32], %var_8252: Tensor[(8, 7, 11), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(8, 7, 11), uint64], Tensor[(8, 1, 11), float32], Tensor[(16, 8, 8), bool]) {
    %799 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
    %800 = cast(%var_8206, dtype="float32") /* ty=Tensor[(8, 1, 11), float32] */;
    %801 = cos(%800) /* ty=Tensor[(8, 1, 11), float32] */;
    %802 = cast(%801, dtype="uint64") /* ty=Tensor[(8, 1, 11), uint64] */;
    %803 = cast(%var_8252, dtype="uint64") /* ty=Tensor[(8, 7, 11), uint64] */;
    %804 = cast(%801, dtype="float32") /* ty=Tensor[(8, 1, 11), float32] */;
    %805 = @func_3797() /* ty=(Tensor[(16, 8, 8), bool],) */;
    %806 = %799.1;
    %807 = bitwise_xor(%802, %803) /* ty=Tensor[(8, 7, 11), uint64] */;
    %808 = acosh(%804) /* ty=Tensor[(8, 1, 11), float32] */;
    %809 = %805.0;
    (%806, %807, %808, %809)
  };
  %810(%var_8271, %var_8272) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(8, 7, 11), uint64], Tensor[(8, 1, 11), float32], Tensor[(16, 8, 8), bool]) */
}

def @func_1258() -> Tensor[(16, 8, 8), uint16] {
  @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */
}

def @func_1388(%var_1387: Tensor[(16, 8, 8), uint16]) -> Tensor[(16, 8, 8), bool] {
  %816 = fn (%var_1380: Tensor[(16, 8, 8), uint16]) -> Tensor[(16, 8, 8), bool] {
    %811 = @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */;
    %812 = cast(%var_1380, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="bool") /* ty=Tensor[(16, 8, 8), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%814, %815) /* ty=Tensor[(16, 8, 8), bool] */
  };
  %816(%var_1387) /* ty=Tensor[(16, 8, 8), bool] */
}

def @func_5417() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  %817 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %818 = @func_3658() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %819 = %817.0;
  %820 = %818.0;
  (%819, %820)
}

def @func_1853() -> (Tensor[(16, 8, 8), uint16],) {
  @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */
}

def @func_923() -> Tensor[(16, 8, 8), float64] {
  @func_921() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_6731() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) {
  @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */
}

def @func_1589(%var_1587: Tensor[(5, 10, 14), int64], %var_1588: Tensor[(5, 10, 14), int64]) -> (Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) {
  %832 = fn (%var_1572: Tensor[(5, 10, 14), int64], %var_1573: Tensor[(5, 10, 14), int64]) -> (Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) {
    %821 = cast(%var_1573, dtype="int64") /* ty=Tensor[(5, 10, 14), int64] */;
    %822 = shape_of(%var_1572, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%var_1572, dtype="int64") /* ty=Tensor[(5, 10, 14), int64] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %825 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 210), float64] */, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
    %826 = cast(meta[relay.Constant][40] /* ty=Tensor[(182, 4), bool] */, dtype="bool") /* ty=Tensor[(182, 4), bool] */;
    %827 = reshape(%825, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), float64] */;
    %828 = reshape(%826, newshape=[728]) /* ty=Tensor[(728), bool] */;
    %829 = @func_290(%827, %828) /* ty=(Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) */;
    %830 = logical_xor(%823, %824) /* ty=Tensor[(5, 10, 14), int64] */;
    %831 = %829.2;
    (%830, %831, meta[relay.Constant][39] /* ty=Tensor[(1, 210), float64] */, meta[relay.Constant][40] /* ty=Tensor[(182, 4), bool] */)
  };
  %832(%var_1587, %var_1588) /* ty=(Tensor[(5, 10, 14), int64], Tensor[(728), bool], Tensor[(1, 210), float64], Tensor[(182, 4), bool]) */
}

def @func_1312(%var_1310: Tensor[(3, 1, 1), int32], %var_1311: Tensor[(3, 6, 14), int32]) -> (Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) {
  @func_1308(%var_1310, %var_1311) /* ty=(Tensor[(3, 6, 14), bool], Tensor[(3, 6, 14), int64]) */
}

def @func_5798(%var_5788: Tensor[(3), int32]) -> (Tensor[(16, 8, 8), float64], Tensor[(9, 5, 13), bool], Tensor[(3), int32], Tensor[(3), int32], Tensor[(3, 84), int32]) {
  %833 = cast(meta[relay.Constant][41] /* ty=Tensor[(585, 1), float32] */, dtype="float32") /* ty=Tensor[(585, 1), float32] */;
  %834 = reshape(%833, newshape=[9, 5, 13]) /* ty=Tensor[(9, 5, 13), float32] */;
  %835 = @func_3427(%834) /* ty=Tensor[(9, 5, 13), float32] */;
  %836 = cast(%835, dtype="bool") /* ty=Tensor[(9, 5, 13), bool] */;
  %837 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(585, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %838 = cast(meta[relay.Constant][41] /* ty=Tensor[(585, 1), float32] */, dtype="bool") /* ty=Tensor[(585, 1), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %840 = less(%838, %839) /* ty=Tensor[(585, ?), bool] */;
  %841 = cast(%840, dtype="bool") /* ty=Tensor[(585, ?), bool] */;
  %842 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%835, dtype="bool") /* ty=Tensor[(9, 5, 13), bool] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %845 = cast(%var_5788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 84), int32] */, dtype="int32") /* ty=Tensor[(3, 84), int32] */;
  %847 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 84), int32] */, dtype="int32") /* ty=Tensor[(3, 84), int32] */;
  %848 = reshape(%845, newshape=[3]) /* ty=Tensor[(3), int32] */;
  %849 = reshape(%846, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %850 = reshape(%847, newshape=[3, 84]) /* ty=Tensor[(3, 84), int32] */;
  %851 = @func_1500(%848, %849, %850) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */;
  %852 = @func_2493() /* ty=Tensor[(16, 8, 8), float64] */;
  %853 = less_equal(%843, %844) /* ty=Tensor[(9, 5, 13), bool] */;
  %854 = %851.3;
  (%852, %853, %854, %var_5788, meta[relay.Constant][42] /* ty=Tensor[(3, 84), int32] */)
}

def @func_5495(%var_5493: Tensor[(16, 8, 8), float32]) -> Tensor[(16, 8, 8), int32] {
  @func_5492(%var_5493) /* ty=Tensor[(16, 8, 8), int32] */
}

def @func_5308(%var_5305: Tensor[(700), int64], %var_5306: Tensor[(4, 91), float64], %var_5307: Tensor[(825), float32]) -> (Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(91), float64], Tensor[(4, 91), bool], Tensor[(16, 8, 8), int8], Tensor[(825), float32], Tensor[(1, 13, 7), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) {
  %883 = fn (%var_5256: Tensor[(700), int64], %var_5261: Tensor[(4, 91), float64], %var_5284: Tensor[(825), float32]) -> (Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(91), float64], Tensor[(4, 91), bool], Tensor[(16, 8, 8), int8], Tensor[(825), float32], Tensor[(1, 13, 7), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) {
    %855 = cast(%var_5256, dtype="int64") /* ty=Tensor[(700), int64] */;
    %856 = cast(meta[relay.Constant][43] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
    %857 = reshape(%855, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
    %858 = reshape(%856, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
    %859 = @func_2053(%857, %858) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
    %860 = %859.4;
    %861 = cast(%860, dtype="bool") /* ty=Tensor[(1, 91), bool] */;
    %862 = cast(%var_5261, dtype="bool") /* ty=Tensor[(4, 91), bool] */;
    %863 = cast(%var_5284, dtype="float32") /* ty=Tensor[(825), float32] */;
    %864 = reshape(%863, newshape=[15, 5, 11]) /* ty=Tensor[(15, 5, 11), float32] */;
    %865 = @func_4351(%864) /* ty=(Tensor[(16, 8, 8), int8], Tensor[(1024), uint16], Tensor[(16, 8, 8), bool], Tensor[(15, 5, 11), float32]) */;
    %866 = cast(meta[relay.Constant][43] /* ty=Tensor[(91), float64] */, dtype="float64") /* ty=Tensor[(91), float64] */;
    %867 = reshape(%866, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float64] */;
    %868 = cast(%var_5256, dtype="int64") /* ty=Tensor[(700), int64] */;
    %869 = cast(%860, dtype="float64") /* ty=Tensor[(1, 91), float64] */;
    %870 = reshape(%868, newshape=[5, 140]) /* ty=Tensor[(5, 140), int64] */;
    %871 = reshape(%869, newshape=[1, 91]) /* ty=Tensor[(1, 91), float64] */;
    %872 = @func_2053(%870, %871) /* ty=(Tensor[(1, 210), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), bool], Tensor[(1, 13, 7), float64], Tensor[(1, 91), float64]) */;
    %873 = @func_4288() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) */;
    %874 = @func_4365() /* ty=(Tensor[(2, 15, 11), float32],) */;
    %875 = @func_2452() /* ty=Tensor[(16, 8, 8), float32] */;
    %876 = less(%861, %862) /* ty=Tensor[(4, 91), bool] */;
    %877 = %865.0;
    %878 = @func_321(%867) /* ty=Tensor[(1, 13, 7), float64] */;
    %879 = %872.1;
    %880 = @func_3629() /* ty=Tensor[(16, 8, 8), float64] */;
    %881 = %873.1;
    %882 = %874.0;
    (%875, %var_5256, meta[relay.Constant][43] /* ty=Tensor[(91), float64] */, %876, %877, %var_5284, %878, %879, %880, %881, %882)
  };
  %883(%var_5305, %var_5306, %var_5307) /* ty=(Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(91), float64], Tensor[(4, 91), bool], Tensor[(16, 8, 8), int8], Tensor[(825), float32], Tensor[(1, 13, 7), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) */
}

def @func_2934(%var_2931: Tensor[(3, 11, 13), float32], %var_2932: Tensor[(3, 11, 13), float32], %var_2933: Tensor[(16, 8, 8), bool]) -> (Tensor[(3, 11, 13), bool], Tensor[(16, 8, 8), int8], Tensor[(3, 11, 13), float32]) {
  @func_2929(%var_2931, %var_2932, %var_2933) /* ty=(Tensor[(3, 11, 13), bool], Tensor[(16, 8, 8), int8], Tensor[(3, 11, 13), float32]) */
}

def @func_5851(%var_5849: Tensor[(825), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(175), uint64], Tensor[(825), int16]) {
  @func_5848(%var_5849) /* ty=(Tensor[(16, 8, 8), float64], Tensor[(175), uint64], Tensor[(825), int16]) */
}

def @func_7883() -> Tensor[(16, 8, 8), uint16] {
  %884 = @func_3813() /* ty=(Tensor[(16, 8, 8), uint16],) */;
  %884.0
}

def @func_8167() -> (Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) {
  %885 = @func_3797() /* ty=(Tensor[(16, 8, 8), bool],) */;
  %886 = @func_3338() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */;
  %887 = %885.0;
  %888 = %886.0;
  (%887, %888)
}

def @func_3451() -> Tensor[(16, 8, 8), float32] {
  %890 = fn () -> Tensor[(16, 8, 8), float32] {
    %889 = @func_3287() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) */;
    %889.0
  };
  %890() /* ty=Tensor[(16, 8, 8), float32] */
}

def @func_7638() -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), uint16]) {
  %898 = fn () -> (Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), uint16]) {
    %891 = @func_5533() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %892 = @func_4186() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(96), float32]) */;
    %893 = @func_2257() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %894 = %891.0;
    %895 = %892.0;
    %896 = @func_5168() /* ty=Tensor[(16, 8, 8), uint16] */;
    %897 = %893.0;
    (%894, %895, %896, %897)
  };
  %898() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), uint16]) */
}

def @func_3797() -> (Tensor[(16, 8, 8), bool],) {
  %899 = @func_3538() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), uint16]) */;
  %900 = %899.0;
  (%900,)
}

def @func_8070(%var_8066: Tensor[(11, 10, 1), uint16], %var_8067: Tensor[(11, 10, 16), uint16], %var_8068: Tensor[(3), int32], %var_8069: Tensor[(252), int32]) -> (Tensor[(11, 10, 16), uint16], Tensor[(16, 8, 8), bool], Tensor[(252), int32], Tensor[(11, 10, 3), uint32], Tensor[(2, 15, 11), bool], Tensor[(3), int32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) {
  @func_8064(%var_8066, %var_8067, %var_8068, %var_8069) /* ty=(Tensor[(11, 10, 16), uint16], Tensor[(16, 8, 8), bool], Tensor[(252), int32], Tensor[(11, 10, 3), uint32], Tensor[(2, 15, 11), bool], Tensor[(3), int32], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64]) */
}

def @func_5848(%var_5836: Tensor[(825), float32]) -> (Tensor[(16, 8, 8), float64], Tensor[(175), uint64], Tensor[(825), int16]) {
  %901 = @func_1245() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %902 = cast(meta[relay.Constant][44] /* ty=Tensor[(175), uint64] */, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %903 = cast(meta[relay.Constant][44] /* ty=Tensor[(175), uint64] */, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %904 = cast(meta[relay.Constant][44] /* ty=Tensor[(175), uint64] */, dtype="uint64") /* ty=Tensor[(175), uint64] */;
  %905 = cast(%var_5836, dtype="float32") /* ty=Tensor[(825), float32] */;
  %906 = reshape(%902, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %907 = reshape(%903, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %908 = reshape(%904, newshape=[5, 5, 7]) /* ty=Tensor[(5, 5, 7), uint64] */;
  %909 = reshape(%905, newshape=[5, 165]) /* ty=Tensor[(5, 165), float32] */;
  %910 = @func_5619(%906, %907, %908, %909) /* ty=(Tensor[(5, 5, 7), bool], Tensor[(5, 5, 7), uint16], Tensor[(15, 5, 11), float32], Tensor[(5, 165), float32]) */;
  %911 = %910.2;
  %912 = cast(%911, dtype="int16") /* ty=Tensor[(15, 5, 11), int16] */;
  %913 = shape_of(%var_5836, dtype="int32") /* ty=Tensor[(1), int32] */;
  %914 = cast(%var_5836, dtype="int16") /* ty=Tensor[(825), int16] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?), int16] */;
  %916 = %901.0;
  %917 = minimum(%914, %915) /* ty=Tensor[(825), int16] */;
  (%916, meta[relay.Constant][44] /* ty=Tensor[(175), uint64] */, %917)
}

def @func_3287() -> (Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), float64]) {
  %918 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
  %919 = %918.0;
  %920 = cast(%919, dtype="float32") /* ty=Tensor[(16, 8, 8), float32] */;
  %921 = cast(%919, dtype="float64") /* ty=Tensor[(16, 8, 8), float64] */;
  %922 = atan(%920) /* ty=Tensor[(16, 8, 8), float32] */;
  %923 = sqrt(%921) /* ty=Tensor[(16, 8, 8), float64] */;
  (%922, %923)
}

def @func_6369(%var_6363: Tensor[(8, 9, 8), float64]) -> Tensor[(8, 9, 8), float64] {
  %924 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(8, 1, 8), float64] */;
  %925 = cast(%var_6363, dtype="float64") /* ty=Tensor[(8, 9, 8), float64] */;
  floor_mod(%924, %925) /* ty=Tensor[(8, 9, 8), float64] */
}

def @func_1505(%var_1502: Tensor[(3), int32], %var_1503: Tensor[(3, 84), int32], %var_1504: Tensor[(3, 84), int32]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) {
  @func_1500(%var_1502, %var_1503, %var_1504) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool], Tensor[(3, 6, 14), int64], Tensor[(3), int32], Tensor[(3, 84), bool]) */
}

def @func_7781() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(14, 52), bool]) {
  @func_7779() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(14, 52), bool]) */
}

def @func_6813() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) {
  %930 = fn () -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) {
    %926 = @func_4288() /* ty=(Tensor[(16, 8, 8), float32], Tensor[(16, 8, 8), uint16]) */;
    %927 = @func_5533() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %928 = %926.1;
    %929 = %927.0;
    (%928, %929)
  };
  %930() /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64]) */
}

def @func_7779() -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(7, 8, 13), bool], Tensor[(210), float64], Tensor[(14, 52), bool]) {
  %931 = @func_5467() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), bool]) */;
  %932 = @func_6729() /* ty=(Tensor[(16, 8, 8), bool], Tensor[(16, 8, 8), float64]) */;
  %933 = cast(meta[relay.Constant][46] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %934 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 52), bool] */, dtype="bool") /* ty=Tensor[(14, 52), bool] */;
  %935 = reshape(%933, newshape=[5, 6, 7]) /* ty=Tensor[(5, 6, 7), float64] */;
  %936 = reshape(%934, newshape=[728]) /* ty=Tensor[(728), bool] */;
  %937 = @func_290(%935, %936) /* ty=(Tensor[(5, 6, 7), float64], Tensor[(7, 8, 13), bool], Tensor[(728), bool], Tensor[(7, 8, 13), bool]) */;
  %938 = %931.1;
  %939 = %932.1;
  %940 = @func_2316() /* ty=Tensor[(16, 8, 8), float64] */;
  %941 = @func_4006() /* ty=Tensor[(16, 8, 8), float64] */;
  %942 = %937.1;
  (%938, %939, %940, %941, %942, meta[relay.Constant][46] /* ty=Tensor[(210), float64] */, meta[relay.Constant][47] /* ty=Tensor[(14, 52), bool] */)
}

def @func_1612() -> Tensor[(16, 8, 8), float64] {
  %943 = fn () -> Tensor[(16, 8, 8), float64] {
    @func_921() /* ty=Tensor[(16, 8, 8), float64] */
  };
  %943() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_6238(%var_6237: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(364), float64], Tensor[(825), float32]) {
  %956 = fn (%var_6228: Tensor[(700), int64]) -> (Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(364), float64], Tensor[(825), float32]) {
    %944 = @func_1851() /* ty=(Tensor[(16, 8, 8), uint16],) */;
    %945 = @func_4435() /* ty=(Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32]) */;
    %946 = cast(%var_6228, dtype="int64") /* ty=Tensor[(700), int64] */;
    %947 = cast(meta[relay.Constant][48] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
    %948 = cast(meta[relay.Constant][49] /* ty=Tensor[(825), float32] */, dtype="float32") /* ty=Tensor[(825), float32] */;
    %949 = reshape(%946, newshape=[700]) /* ty=Tensor[(700), int64] */;
    %950 = reshape(%947, newshape=[4, 91]) /* ty=Tensor[(4, 91), float64] */;
    %951 = reshape(%948, newshape=[825]) /* ty=Tensor[(825), float32] */;
    %952 = @func_5304(%949, %950, %951) /* ty=(Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(91), float64], Tensor[(4, 91), bool], Tensor[(16, 8, 8), int8], Tensor[(825), float32], Tensor[(1, 13, 7), float64], Tensor[(5, 140), int64], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), uint16], Tensor[(2, 15, 11), float32]) */;
    %953 = %944.0;
    %954 = %945.0;
    %955 = %952.0;
    (%953, %954, %955, %var_6228, meta[relay.Constant][48] /* ty=Tensor[(364), float64] */, meta[relay.Constant][49] /* ty=Tensor[(825), float32] */)
  };
  %956(%var_6237) /* ty=(Tensor[(16, 8, 8), uint16], Tensor[(16, 8, 8), float64], Tensor[(16, 8, 8), float32], Tensor[(700), int64], Tensor[(364), float64], Tensor[(825), float32]) */
}

def @func_3427(%var_3406: Tensor[(9, 5, 13), float32]) -> Tensor[(9, 5, 13), float32] {
  %957 = cast(%var_3406, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %958 = rsqrt(%957) /* ty=Tensor[(9, 5, 13), float32] */;
  %959 = cast(%var_3406, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %960 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(%958, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%961, %962) /* ty=Tensor[(9, 5, 13), float32] */
}

def @func_1246() -> (Tensor[(16, 8, 8), float64],) {
  %965 = fn () -> (Tensor[(16, 8, 8), float64],) {
    %963 = @func_699() /* ty=(Tensor[(16, 8, 8), float64],) */;
    %964 = %963.0;
    (%964,)
  };
  %965() /* ty=(Tensor[(16, 8, 8), float64],) */
}

def @func_5997() -> Tensor[(16, 8, 8), float64] {
  @func_5995() /* ty=Tensor[(16, 8, 8), float64] */
}

def @func_6209() -> Tensor[(16, 8, 8), uint16] {
  @func_1256() /* ty=Tensor[(16, 8, 8), uint16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen272/build/output.py:2907: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen272/build/output.py", line 2912, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(100) tvmgen_default_fused_logical_xor_cast_erf_kernel0(double* __restrict__ T_erf, uint64_t* __restrict__ placeholder, uint64_t* __restrict__ placeholder1) {
  T_erf[(((int)threadIdx.x))] = erf(((double)(placeholder[(0)] ^ placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

