==========mod==========
#[version = "0.0.5"]
def @func_8354() -> Tensor[(12, 11, 12), uint16] {
  @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9408(%var_9374: Tensor[(30), float64], %var_9375: Tensor[(1440), uint64], %var_9376: Tensor[(112), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(144), uint64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(112), float32]) {
  %0 = cast(%var_9374, dtype="float64") /* ty=Tensor[(30), float64] */;
  %1 = cast(%var_9375, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %2 = cast(%var_9376, dtype="float32") /* ty=Tensor[(112), float32] */;
  %3 = reshape(%0, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %4 = reshape(%1, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %5 = reshape(%2, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %6 = @func_3456(%3, %4, %5) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %7 = @func_9329() /* ty=Tensor[(12, 11, 12), uint16] */;
  %8 = %6.2;
  (%7, %8, %var_9374, %var_9375, %var_9376)
}

def @func_7515() -> Tensor[(12, 11, 12), uint16] {
  %9 = @func_7441() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %9.0
}

def @func_4654(%var_4632: Tensor[(5, 15, 9), uint16]) -> (Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) {
  %10 = cast(%var_4632, dtype="uint16") /* ty=Tensor[(5, 15, 9), uint16] */;
  %11 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 15, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 15, 9), uint16] */, dtype="uint16") /* ty=Tensor[(5, 15, 9), uint16] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 15, 9), uint16] */, dtype="bool") /* ty=Tensor[(5, 15, 9), bool] */;
  %15 = shape_of(%var_4632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_4632, dtype="bool") /* ty=Tensor[(5, 15, 9), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = bitwise_and(%12, %13) /* ty=Tensor[(5, 15, 9), uint16] */;
  %19 = greater(%16, %17) /* ty=Tensor[(5, 15, 9), bool] */;
  (%18, %19)
}

def @func_7441() -> (Tensor[(12, 11, 12), uint16],) {
  %20 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %21 = %20.0;
  (%21,)
}

def @func_1864(%var_1831: Tensor[(11, 8, 7), float32], %var_1845: Tensor[(6, 64), float32], %var_1848: Tensor[(112), float32]) -> (Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) {
  %22 = cast(%var_1831, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %23 = cast(%var_1845, dtype="float32") /* ty=Tensor[(6, 64), float32] */;
  %24 = reshape(%23, newshape=[8, 8, 6]) /* ty=Tensor[(8, 8, 6), float32] */;
  %25 = @func_240(%24) /* ty=(Tensor[(8, 8, 6), float32], Tensor[(8, 8, 6), float64]) */;
  %26 = cast(%var_1848, dtype="float32") /* ty=Tensor[(112), float32] */;
  %27 = cast(%var_1848, dtype="float32") /* ty=Tensor[(112), float32] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %29 = reshape(%26, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %30 = reshape(%27, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %31 = reshape(%28, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %32 = @func_700(%29, %30, %31) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
  %33 = log(%22) /* ty=Tensor[(11, 8, 7), float32] */;
  %34 = %25.0;
  %35 = %32.3;
  (%33, %34, %var_1845, %35, %var_1848, meta[relay.Constant][2] /* ty=Tensor[(144), uint64] */)
}

def @func_5446() -> (Tensor[(12, 11, 12), uint16],) {
  %36 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %37 = %36.0;
  (%37,)
}

def @func_6298() -> Tensor[(12, 11, 12), uint16] {
  %38 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %38.0
}

def @func_8890() -> (Tensor[(5, 135), float64],) {
  %39 = @func_7621() /* ty=(Tensor[(5, 135), float64], Tensor[(5, 135), float64]) */;
  %40 = %39.0;
  (%40,)
}

def @func_9800(%var_9796: uint8) -> (Tensor[(7, 6, 1), bool], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(14, 10, 8), uint8], Tensor[(130, 1), uint64], Tensor[(390), uint64], uint8) {
  %41 = @func_9669() /* ty=(Tensor[(7, 6, 1), bool],) */;
  %42 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %43 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(130, 1), uint64] */, dtype="uint64") /* ty=Tensor[(130, 1), uint64] */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(390), uint64] */, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %46 = cast(%var_9796, dtype="uint8") /* ty=uint8 */;
  %47 = reshape(%44, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), uint64] */;
  %48 = reshape(%45, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), uint64] */;
  %49 = reshape(%46, newshape=[]) /* ty=uint8 */;
  %50 = @func_8216(%47, %48, %49) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(3, 10, 13), uint8], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8]) */;
  %51 = %41.0;
  %52 = %42.0;
  %53 = %43.0;
  %54 = %50.3;
  (%51, %52, %53, %54, meta[relay.Constant][3] /* ty=Tensor[(130, 1), uint64] */, meta[relay.Constant][4] /* ty=Tensor[(390), uint64] */, %var_9796)
}

def @func_9456() -> (Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) {
  %55 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %57 = reshape(%56, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %58 = @func_3302(%57) /* ty=(Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %59 = %55.0;
  %60 = %58.0;
  (%59, %60, meta[relay.Constant][5] /* ty=Tensor[(112), float32] */)
}

def @func_6694() -> (Tensor[(12, 11, 12), uint16],) {
  %61 = @func_6186() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%61,)
}

def @func_9574() -> Tensor[(12, 11, 12), uint16] {
  %62 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %62.0
}

def @func_4962() -> Tensor[(12, 11, 12), uint16] {
  @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_5174(%var_5139: Tensor[(200), float64], %var_5162: Tensor[(112), float32]) -> (Tensor[(8, 12, 6), float64], Tensor[(5, 5, 8), float64], Tensor[(200), float64], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(2, 720), uint64], Tensor[(30), float64], Tensor[(112), float32]) {
  %63 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %64 = sqrt(%63) /* ty=Tensor[(8, 12, 6), float64] */;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %66 = cast(%var_5139, dtype="float64") /* ty=Tensor[(200), float64] */;
  %67 = cast(%var_5139, dtype="float64") /* ty=Tensor[(200), float64] */;
  %68 = reshape(%66, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %69 = reshape(%67, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %70 = @func_2998(%68, %69) /* ty=(Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) */;
  %71 = cast(meta[relay.Constant][7] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %72 = cast(meta[relay.Constant][8] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %73 = reshape(%71, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %74 = reshape(%72, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %75 = @func_78(%73, %74) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %76 = cast(meta[relay.Constant][9] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %77 = cast(meta[relay.Constant][8] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %78 = cast(%var_5162, dtype="float32") /* ty=Tensor[(112), float32] */;
  %79 = reshape(%76, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %80 = reshape(%77, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %81 = reshape(%78, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %82 = @func_3456(%79, %80, %81) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %83 = asin(%65) /* ty=Tensor[(8, 12, 6), float64] */;
  %84 = %70.0;
  %85 = %75.0;
  %86 = %82.3;
  (%83, %84, %var_5139, %85, meta[relay.Constant][7] /* ty=Tensor[(144), uint64] */, meta[relay.Constant][8] /* ty=Tensor[(1440), uint64] */, %86, meta[relay.Constant][9] /* ty=Tensor[(30), float64] */, %var_5162)
}

def @func_2733(%var_2638: Tensor[(14, 16, 4), float64], %var_2662: Tensor[(144), uint64], %var_2663: Tensor[(1440), uint64], %var_2676: Tensor[(616), float32], %var_2678: Tensor[(112), float32]) -> (Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) {
  %87 = cast(%var_2676, dtype="float32") /* ty=Tensor[(616), float32] */;
  %88 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %89 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
  %90 = reshape(%87, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
  %91 = reshape(%88, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
  %92 = reshape(%89, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %93 = @func_1864(%90, %91, %92) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %94 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
  %95 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
  %96 = %93.5;
  %97 = cast(%96, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %98 = reshape(%94, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %99 = reshape(%95, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %100 = reshape(%97, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %101 = @func_700(%98, %99, %100) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
  %102 = cast(%var_2676, dtype="float32") /* ty=Tensor[(616), float32] */;
  %103 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %104 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
  %105 = reshape(%102, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
  %106 = reshape(%103, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
  %107 = reshape(%104, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %108 = @func_1864(%105, %106, %107) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %109 = cast(%var_2676, dtype="float32") /* ty=Tensor[(616), float32] */;
  %110 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %111 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
  %112 = reshape(%109, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
  %113 = reshape(%110, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
  %114 = reshape(%111, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %115 = @func_1864(%112, %113, %114) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %116 = %115.3;
  %117 = cast(%var_2662, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %118 = cast(%var_2663, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %119 = reshape(%117, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %120 = reshape(%118, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %121 = @func_78(%119, %120) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(9, 16, 10), bool] */;
  %124 = shape_of(%116, dtype="int32") /* ty=Tensor[(2), int32] */;
  %125 = cast(%116, dtype="bool") /* ty=Tensor[(720, 2), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %127 = cast(%var_2638, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
  %128 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(14, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %131 = power(%129, %130) /* ty=Tensor[(14, 16, 4), float64] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(14, 16, 4), float32] */;
  %133 = %101.1;
  %134 = %108.3;
  %135 = less_equal(%125, %126) /* ty=Tensor[(720, 2), bool] */;
  %136 = sinh(%132) /* ty=Tensor[(14, 16, 4), float32] */;
  (%var_2662, %var_2663, %var_2676, meta[relay.Constant][10] /* ty=Tensor[(12, 32), float32] */, %var_2678, %96, %133, %134, %135, %136)
}

def @func_6482() -> Tensor[(5, 5, 8), float64] {
  %137 = @func_6378() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %137.0
}

def @func_5734() -> (Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) {
  %138 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 20), float64] */, dtype="float64") /* ty=Tensor[(10, 20), float64] */;
  %139 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 20), float64] */, dtype="float64") /* ty=Tensor[(10, 20), float64] */;
  %140 = reshape(%138, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %141 = reshape(%139, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %142 = @func_2998(%140, %141) /* ty=(Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) */;
  %143 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  %144 = %142.0;
  (%143, %144, meta[relay.Constant][12] /* ty=Tensor[(10, 20), float64] */)
}

def @func_6861() -> (Tensor[(5, 135), uint8],) {
  %145 = @func_5208() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) */;
  %146 = %145.2;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(5, 135), float32] */;
  %148 = acosh(%147) /* ty=Tensor[(5, 135), float32] */;
  %149 = cast(%146, dtype="int16") /* ty=Tensor[(5, 135), int16] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %151 = cast(%148, dtype="int16") /* ty=Tensor[(5, 135), int16] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %153 = left_shift(%151, %152) /* ty=Tensor[(5, 135), int16] */;
  %154 = cast(%153, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
  %155 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %156 = cast(%148, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %158 = bitwise_and(%156, %157) /* ty=Tensor[(5, 135), uint8] */;
  (%158,)
}

def @func_7274() -> (Tensor[(12, 11, 12), uint16],) {
  %159 = @func_6186() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%159,)
}

def @func_6951(%var_6946: Tensor[(5, 5, 8), float64]) -> (Tensor[(5, 5, 8), bool],) {
  %160 = @func_6098() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %161 = %160.0;
  %162 = cast(%var_6946, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = logical_and(%164, %165) /* ty=Tensor[(5, 5, 8), bool] */;
  (%166,)
}

def @func_4226(%var_4184: Tensor[(7, 11, 15), float64], %var_4202: Tensor[(702, 2), int8]) -> (Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) {
  %167 = cast(%var_4202, dtype="int8") /* ty=Tensor[(702, 2), int8] */;
  %168 = cast(%var_4202, dtype="int8") /* ty=Tensor[(702, 2), int8] */;
  %169 = cast(%var_4202, dtype="int8") /* ty=Tensor[(702, 2), int8] */;
  %170 = reshape(%167, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %171 = reshape(%168, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %172 = reshape(%169, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %173 = @func_2056(%170, %171, %172) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
  %174 = cast(%var_4184, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
  %175 = cast(%var_4184, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %176 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(7, 11, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %179 = minimum(%177, %178) /* ty=Tensor[(7, 11, 15), float64] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
  %181 = shape_of(%var_4184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%var_4184, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %184 = %173.1;
  %185 = asinh(%174) /* ty=Tensor[(7, 11, 15), float32] */;
  %186 = multiply(%182, %183) /* ty=Tensor[(7, 11, 15), float32] */;
  (%184, %var_4202, %185, %186)
}

def @func_5805(%var_5752: Tensor[(1536), int64], %var_5779: Tensor[(24, 6), uint64], %var_5781: Tensor[(616), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(616), float32], Tensor[(896), float64], Tensor[(24, 6), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(112), float32], Tensor[(16, 12, 8), bool]) {
  %187 = cast(meta[relay.Constant][14] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %188 = cast(%var_5779, dtype="uint64") /* ty=Tensor[(24, 6), uint64] */;
  %189 = cast(meta[relay.Constant][15] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %190 = cast(%var_5781, dtype="float32") /* ty=Tensor[(616), float32] */;
  %191 = cast(meta[relay.Constant][16] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %192 = reshape(%187, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
  %193 = reshape(%188, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %194 = reshape(%189, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %195 = reshape(%190, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %196 = reshape(%191, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %197 = @func_2733(%192, %193, %194, %195, %196) /* ty=(Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) */;
  %198 = cast(%var_5752, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %199 = cast(%var_5752, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %200 = reshape(%198, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int64] */;
  %201 = reshape(%199, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int64] */;
  %202 = @func_4048(%200, %201) /* ty=(Tensor[(16, 12, 8), int64],) */;
  %203 = %202.0;
  %204 = cast(%var_5752, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%203, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %208 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  %209 = @func_5619() /* ty=Tensor[(12, 11, 12), uint16] */;
  %210 = %197.2;
  %211 = greater(%206, %207) /* ty=Tensor[(16, 12, 8), bool] */;
  (%208, %209, %210, meta[relay.Constant][14] /* ty=Tensor[(896), float64] */, %var_5779, meta[relay.Constant][15] /* ty=Tensor[(1440), uint64] */, %var_5781, meta[relay.Constant][16] /* ty=Tensor[(112), float32] */, %211)
}

def @func_7033(%var_7027: Tensor[(3, 468), int8]) -> (Tensor[(5, 135), uint8], Tensor[(5, 5, 8), float64], Tensor[(9, 12, 13), int8], Tensor[(3, 468), int8], Tensor[(5, 5, 8), bool]) {
  %212 = @func_6861() /* ty=(Tensor[(5, 135), uint8],) */;
  %213 = cast(%var_7027, dtype="int8") /* ty=Tensor[(3, 468), int8] */;
  %214 = cast(%var_7027, dtype="int8") /* ty=Tensor[(3, 468), int8] */;
  %215 = cast(%var_7027, dtype="int8") /* ty=Tensor[(3, 468), int8] */;
  %216 = reshape(%213, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %217 = reshape(%214, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %218 = reshape(%215, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %219 = @func_2056(%216, %217, %218) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
  %220 = @func_6482() /* ty=Tensor[(5, 5, 8), float64] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %222 = reshape(%221, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %223 = @func_6951(%222) /* ty=(Tensor[(5, 5, 8), bool],) */;
  %224 = %212.0;
  %225 = %219.0;
  %226 = %223.0;
  (%224, %220, %225, %var_7027, %226)
}

def @func_5854(%var_5828: Tensor[(9, 13, 4), float32], %var_5838: Tensor[(9, 13, 4), float64]) -> (Tensor[(9, 13, 4), bool], Tensor[(12, 11, 12), uint16]) {
  %227 = cast(%var_5828, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
  %228 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(9, 13, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %231 = mod(%229, %230) /* ty=Tensor[(9, 13, 4), float32] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
  %233 = sqrt(%232) /* ty=Tensor[(9, 13, 4), float64] */;
  %234 = cast(%var_5838, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = equal(%236, %237) /* ty=Tensor[(9, 13, 4), bool] */;
  %239 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%238, %239)
}

def @func_4902(%var_4891: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64],) {
  %240 = cast(%var_4891, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %241 = log10(%240) /* ty=Tensor[(5, 15, 5), float64] */;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %243 = cos(%242) /* ty=Tensor[(5, 15, 5), float64] */;
  (%243,)
}

def @func_7648() -> Tensor[(12, 11, 12), uint16] {
  %244 = @func_6798() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %244.0
}

def @func_6147(%var_6136: Tensor[(13, 8, 10), float32]) -> Tensor[(13, 8, 10), uint32] {
  %245 = cast(%var_6136, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
  %246 = asinh(%245) /* ty=Tensor[(13, 8, 10), float32] */;
  %247 = cast(%246, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %248 = shape_of(%var_6136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_6136, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%249, %250) /* ty=Tensor[(13, 8, 10), uint32] */
}

def @func_7899(%var_7852: Tensor[(12, 16, 5), float64], %var_7887: Tensor[(675), uint16]) -> (Tensor[(12, 16, 5), float64], Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(675), uint16], Tensor[(12, 16, 5), bool]) {
  %251 = cast(%var_7852, dtype="float64") /* ty=Tensor[(12, 16, 5), float64] */;
  %252 = cast(%var_7887, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %253 = reshape(%252, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), uint16] */;
  %254 = @func_4654(%253) /* ty=(Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) */;
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 16, 5), float64] */, dtype="bool") /* ty=Tensor[(12, 16, 5), bool] */;
  %256 = shape_of(%var_7852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_7852, dtype="bool") /* ty=Tensor[(12, 16, 5), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = exp(%251) /* ty=Tensor[(12, 16, 5), float64] */;
  %260 = @func_7515() /* ty=Tensor[(12, 11, 12), uint16] */;
  %261 = %254.1;
  %262 = logical_and(%257, %258) /* ty=Tensor[(12, 16, 5), bool] */;
  (%259, %260, %261, %var_7887, %262)
}

def @func_7406() -> (Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), uint16]) {
  %263 = @func_6098() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %264 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %265 = %263.0;
  %266 = %264.0;
  (%265, %266)
}

def @func_5365(%var_5353: Tensor[(9, 8, 5), uint64], %var_5354: Tensor[(9, 8, 5), uint64]) -> Tensor[(9, 8, 5), uint64] {
  %267 = cast(%var_5354, dtype="uint64") /* ty=Tensor[(9, 8, 5), uint64] */;
  %268 = shape_of(%var_5353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%var_5353, dtype="uint64") /* ty=Tensor[(9, 8, 5), uint64] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%269, %270) /* ty=Tensor[(9, 8, 5), uint64] */
}

def @func_6098() -> (Tensor[(5, 5, 8), float64],) {
  %271 = @func_5734() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) */;
  %272 = %271.1;
  (%272,)
}

def @func_8266() -> (Tensor[(5, 5, 8), float32],) {
  %273 = @func_6482() /* ty=Tensor[(5, 5, 8), float64] */;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(5, 5, 8), float32] */;
  %275 = erf(%274) /* ty=Tensor[(5, 5, 8), float32] */;
  (%275,)
}

def @func_2998(%var_2967: Tensor[(5, 5, 8), float64], %var_2968: Tensor[(5, 5, 8), float64]) -> (Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) {
  %276 = cast(%var_2968, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %277 = shape_of(%var_2967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%var_2967, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %280 = cast(%var_2968, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %281 = cos(%280) /* ty=Tensor[(5, 5, 8), float64] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(5, 5, 8), float32] */;
  %283 = floor_mod(%278, %279) /* ty=Tensor[(5, 5, 8), float64] */;
  %284 = rsqrt(%282) /* ty=Tensor[(5, 5, 8), float32] */;
  (%283, %284)
}

def @func_5088(%var_4981: Tensor[(18, 78), int8], %var_5004: Tensor[(384), float32], %var_5005: Tensor[(112), float32], %var_5046: Tensor[(30), float64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(11, 8, 7), float32], Tensor[(616), float32], Tensor[(384), float32], Tensor[(112), float32], Tensor[(18, 78), uint8], Tensor[(308, 2), float32], Tensor[(30), float64], Tensor[(1440, 1), uint64], Tensor[(8, 8, 6), float32], Tensor[(18, 78), float32], Tensor[(144), uint64], Tensor[(5, 15, 5), float64], Tensor[(375), float64]) {
  %285 = cast(meta[relay.Constant][19] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %286 = cast(%var_5004, dtype="float32") /* ty=Tensor[(384), float32] */;
  %287 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
  %288 = reshape(%285, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
  %289 = reshape(%286, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
  %290 = reshape(%287, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %291 = @func_1864(%288, %289, %290) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %292 = cast(%var_4981, dtype="int8") /* ty=Tensor[(18, 78), int8] */;
  %293 = cast(%var_4981, dtype="int8") /* ty=Tensor[(18, 78), int8] */;
  %294 = cast(%var_4981, dtype="int8") /* ty=Tensor[(18, 78), int8] */;
  %295 = reshape(%292, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %296 = reshape(%293, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %297 = reshape(%294, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %298 = @func_2056(%295, %296, %297) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
  %299 = %298.0;
  %300 = cast(%299, dtype="uint8") /* ty=Tensor[(9, 12, 13), uint8] */;
  %301 = shape_of(%var_4981, dtype="int32") /* ty=Tensor[(2), int32] */;
  %302 = cast(%var_4981, dtype="uint8") /* ty=Tensor[(18, 78), uint8] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %304 = cast(%var_5046, dtype="float64") /* ty=Tensor[(30), float64] */;
  %305 = cast(meta[relay.Constant][20] /* ty=Tensor[(1440, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1440, 1), uint64] */;
  %306 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
  %307 = reshape(%304, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %308 = reshape(%305, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %309 = reshape(%306, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %310 = @func_3456(%307, %308, %309) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %311 = cast(meta[relay.Constant][19] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %312 = cast(%var_5004, dtype="float32") /* ty=Tensor[(384), float32] */;
  %313 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
  %314 = reshape(%311, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
  %315 = reshape(%312, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
  %316 = reshape(%313, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %317 = @func_1864(%314, %315, %316) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %318 = cast(%var_4981, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
  %319 = atan(%318) /* ty=Tensor[(18, 78), float32] */;
  %320 = cast(%299, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %321 = shape_of(%var_4981, dtype="int32") /* ty=Tensor[(2), int32] */;
  %322 = cast(%var_4981, dtype="bool") /* ty=Tensor[(18, 78), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %324 = logical_and(%322, %323) /* ty=Tensor[(18, 78), bool] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
  %326 = shape_of(%319, dtype="int32") /* ty=Tensor[(2), int32] */;
  %327 = cast(%319, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %329 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
  %330 = reshape(%329, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %331 = @func_3302(%330) /* ty=(Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %332 = cast(meta[relay.Constant][21] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %333 = reshape(%332, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float64] */;
  %334 = @func_4902(%333) /* ty=(Tensor[(5, 15, 5), float64],) */;
  %335 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  %336 = %291.0;
  %337 = maximum(%302, %303) /* ty=Tensor[(18, 78), uint8] */;
  %338 = %310.4;
  %339 = %317.1;
  %340 = divide(%327, %328) /* ty=Tensor[(18, 78), float32] */;
  %341 = %331.3;
  %342 = %334.0;
  (%335, %336, meta[relay.Constant][19] /* ty=Tensor[(616), float32] */, %var_5004, %var_5005, %337, %338, %var_5046, meta[relay.Constant][20] /* ty=Tensor[(1440, 1), uint64] */, %339, %340, %341, %342, meta[relay.Constant][21] /* ty=Tensor[(375), float64] */)
}

def @func_7122() -> (Tensor[(12, 11, 12), uint16],) {
  %343 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %344 = %343.0;
  (%344,)
}

def @func_6186() -> Tensor[(12, 11, 12), uint16] {
  %345 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %345.0
}

def @func_6885() -> (Tensor[(12, 11, 12), uint16],) {
  %346 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%346,)
}

def @func_5227() -> Tensor[(12, 11, 12), uint16] {
  @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_8508() -> Tensor[(12, 11, 12), uint16] {
  @func_7383() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_7262(%var_7214: Tensor[(1155), float64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(1404), int8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(9, 12, 13), int32]) {
  %347 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %348 = cast(%var_7214, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %349 = cast(meta[relay.Constant][22] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %350 = reshape(%348, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %351 = reshape(%349, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
  %352 = @func_6473(%350, %351) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) */;
  %353 = %352.3;
  %354 = cast(%353, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %355 = cast(meta[relay.Constant][22] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %356 = cast(%353, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %357 = reshape(%354, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %358 = reshape(%355, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %359 = reshape(%356, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %360 = @func_2056(%357, %358, %359) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
  %361 = %347.0;
  %362 = %360.2;
  (%361, %353, %var_7214, meta[relay.Constant][22] /* ty=Tensor[(1404), int8] */, %362)
}

def @func_6310() -> (Tensor[(12, 11, 12), uint16],) {
  %363 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%363,)
}

def @func_9531(%var_9524: Tensor[(675), uint16]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 16, 5), float64], Tensor[(60, 16), float64], Tensor[(675), uint16], Tensor[(12, 11, 12), float64]) {
  %364 = @func_7952() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %365 = cast(meta[relay.Constant][23] /* ty=Tensor[(60, 16), float64] */, dtype="float64") /* ty=Tensor[(60, 16), float64] */;
  %366 = cast(%var_9524, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %367 = reshape(%365, newshape=[12, 16, 5]) /* ty=Tensor[(12, 16, 5), float64] */;
  %368 = reshape(%366, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %369 = @func_7899(%367, %368) /* ty=(Tensor[(12, 16, 5), float64], Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(675), uint16], Tensor[(12, 16, 5), bool]) */;
  %370 = @func_7952() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %371 = %370.0;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
  %373 = %364.0;
  %374 = %369.0;
  %375 = acosh(%372) /* ty=Tensor[(12, 11, 12), float64] */;
  (%373, %374, meta[relay.Constant][23] /* ty=Tensor[(60, 16), float64] */, %var_9524, %375)
}

def @func_8134() -> (Tensor[(12, 11, 12), uint16],) {
  %376 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%376,)
}

def @func_2056(%var_2019: Tensor[(9, 12, 13), int8], %var_2020: Tensor[(9, 12, 13), int8], %var_2028: Tensor[(9, 12, 13), int8]) -> (Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) {
  %377 = cast(%var_2020, dtype="int8") /* ty=Tensor[(9, 12, 13), int8] */;
  %378 = shape_of(%var_2019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%var_2019, dtype="int8") /* ty=Tensor[(9, 12, 13), int8] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %381 = cast(%var_2028, dtype="uint8") /* ty=Tensor[(9, 12, 13), uint8] */;
  %382 = shape_of(%var_2019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_2019, dtype="uint8") /* ty=Tensor[(9, 12, 13), uint8] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %385 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 12, 13), int8] */, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %386 = shape_of(%var_2028, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_2028, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %389 = right_shift(%379, %380) /* ty=Tensor[(9, 12, 13), int8] */;
  %390 = bitwise_xor(%383, %384) /* ty=Tensor[(9, 12, 13), uint8] */;
  %391 = maximum(%387, %388) /* ty=Tensor[(9, 12, 13), int32] */;
  (%389, %390, %391)
}

def @func_8463() -> Tensor[(12, 11, 12), uint16] {
  %392 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %392.0
}

def @func_5535() -> (Tensor[(12, 11, 12), uint16],) {
  %393 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %394 = %393.0;
  (%394,)
}

def @func_9275() -> (Tensor[(12, 11, 12), uint16],) {
  %395 = @func_8508() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%395,)
}

def @func_78(%var_72: Tensor[(9, 16, 1), uint64], %var_73: Tensor[(9, 16, 10), uint64]) -> (Tensor[(9, 16, 10), bool],) {
  %396 = cast(%var_72, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  %397 = cast(%var_73, dtype="bool") /* ty=Tensor[(9, 16, 10), bool] */;
  %398 = greater_equal(%396, %397) /* ty=Tensor[(9, 16, 10), bool] */;
  (%398,)
}

def @func_9091() -> (Tensor[(12, 11, 12), uint16],) {
  %399 = @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%399,)
}

def @func_9594() -> (Tensor[(12, 11, 12), uint16],) {
  %400 = @func_6798() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %401 = %400.0;
  (%401,)
}

def @func_5619() -> Tensor[(12, 11, 12), uint16] {
  %402 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %402.0
}

def @func_7593(%var_7583: uint8, %var_7584: Tensor[(14, 10, 8), uint8]) -> Tensor[(14, 10, 8), uint8] {
  %403 = cast(%var_7583, dtype="uint8") /* ty=uint8 */;
  %404 = cast(%var_7584, dtype="uint8") /* ty=Tensor[(14, 10, 8), uint8] */;
  left_shift(%403, %404) /* ty=Tensor[(14, 10, 8), uint8] */
}

def @func_10106(%var_10097: Tensor[(5, 135), float64]) -> (Tensor[(5, 135), float64],) {
  %405 = @func_7621() /* ty=(Tensor[(5, 135), float64], Tensor[(5, 135), float64]) */;
  %406 = %405.1;
  %407 = cast(%var_10097, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(2), int32] */;
  %409 = cast(%406, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %411 = divide(%409, %410) /* ty=Tensor[(5, 135), float64] */;
  (%411,)
}

def @func_10029() -> (Tensor[(5, 5, 8), float64],) {
  %412 = @func_7552() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %415 = asin(%414) /* ty=Tensor[(5, 5, 8), float64] */;
  (%415,)
}

def @func_9620() -> (Tensor[(16, 13, 15), float32],) {
  %416 = @func_9456() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) */;
  %417 = %416.1;
  %418 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 15), float32] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="float32") /* ty=Tensor[(16, 13, 15), float32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %422 = floor_divide(%420, %421) /* ty=Tensor[(16, 13, 15), float32] */;
  (%422,)
}

def @func_7952() -> (Tensor[(12, 11, 12), uint16],) {
  %423 = @func_6310() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %424 = %423.0;
  (%424,)
}

def @main() -> Tensor[(12, 11, 12), float32] {
  %425 = @func_7816() /* ty=Tensor[(12, 11, 12), float32] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  atan(%426) /* ty=Tensor[(12, 11, 12), float32] */
}

def @func_700(%var_653: Tensor[(2, 7, 8), float32], %var_654: Tensor[(2, 7, 8), float32], %var_661: Tensor[(144), uint64]) -> (Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) {
  %427 = cast(%var_654, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
  %428 = shape_of(%var_653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_653, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %431 = cast(%var_661, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %432 = cast(meta[relay.Constant][26] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
  %433 = reshape(%431, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %434 = reshape(%432, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %435 = @func_78(%433, %434) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %436 = cast(meta[relay.Constant][26] /* ty=Tensor[(720, 2), uint64] */, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %437 = floor_mod(%429, %430) /* ty=Tensor[(2, 7, 8), float32] */;
  %438 = %435.0;
  %439 = log(%436) /* ty=Tensor[(720, 2), float64] */;
  (%437, %438, %var_661, %439)
}

def @func_7334() -> Tensor[(12, 11, 12), float64] {
  %440 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %441 = %440.2;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
  cos(%442) /* ty=Tensor[(12, 11, 12), float64] */
}

def @func_7816() -> Tensor[(12, 11, 12), float32] {
  %443 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  cosh(%445) /* ty=Tensor[(12, 11, 12), float32] */
}

def @func_9006() -> Tensor[(12, 11, 12), uint16] {
  @func_7648() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_6554() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  %446 = @func_6310() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %447 = %446.0;
  %448 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%447, %448)
}

def @func_7697() -> (Tensor[(12, 11, 12), uint16],) {
  %449 = @func_6554() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %450 = %449.1;
  (%450,)
}

def @func_8500(%var_8489: Tensor[(112), int8], %var_8490: Tensor[(896), int8]) -> (Tensor[(12, 11, 12), int64], Tensor[(12, 11, 12), uint16], Tensor[(112), int8], Tensor[(896), int8], Tensor[(12, 11, 12), float32]) {
  %451 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %452 = %451.0;
  %453 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 11, 12), bool] */, dtype="int64") /* ty=Tensor[(12, 11, 12), int64] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="int64") /* ty=Tensor[(12, 11, 12), int64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %457 = cast(%var_8489, dtype="int8") /* ty=Tensor[(112), int8] */;
  %458 = cast(%var_8490, dtype="int8") /* ty=Tensor[(896), int8] */;
  %459 = reshape(%457, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int8] */;
  %460 = reshape(%458, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), int8] */;
  %461 = @func_6773(%459, %460) /* ty=(Tensor[(16, 8, 7), int8], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %462 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 11, 12), bool] */, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  %463 = bitwise_or(%455, %456) /* ty=Tensor[(12, 11, 12), int64] */;
  %464 = %461.2;
  %465 = atanh(%462) /* ty=Tensor[(12, 11, 12), float32] */;
  (%463, %464, %var_8489, %var_8490, %465)
}

def @func_9669() -> (Tensor[(7, 6, 1), bool],) {
  %466 = @func_9546() /* ty=Tensor[(7, 6, 1), bool] */;
  (%466,)
}

def @func_10062(%var_10038: Tensor[(14, 11, 2), float64], %var_10057: Tensor[(384), float32]) -> (Tensor[(14, 11, 2), bool], Tensor[(1440, 1), uint64], Tensor[(1404), int8], Tensor[(384), float32], Tensor[(112), float32], Tensor[(30), float64]) {
  %467 = cast(%var_10038, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
  %468 = erf(%467) /* ty=Tensor[(14, 11, 2), float64] */;
  %469 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 11, 2), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%468, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %473 = cast(meta[relay.Constant][29] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %474 = cast(%var_10057, dtype="float32") /* ty=Tensor[(384), float32] */;
  %475 = cast(meta[relay.Constant][30] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %476 = cast(meta[relay.Constant][31] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %477 = reshape(%473, newshape=[18, 78]) /* ty=Tensor[(18, 78), int8] */;
  %478 = reshape(%474, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %479 = reshape(%475, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %480 = reshape(%476, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %481 = @func_5088(%477, %478, %479, %480) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(11, 8, 7), float32], Tensor[(616), float32], Tensor[(384), float32], Tensor[(112), float32], Tensor[(18, 78), uint8], Tensor[(308, 2), float32], Tensor[(30), float64], Tensor[(1440, 1), uint64], Tensor[(8, 8, 6), float32], Tensor[(18, 78), float32], Tensor[(144), uint64], Tensor[(5, 15, 5), float64], Tensor[(375), float64]) */;
  %482 = logical_or(%471, %472) /* ty=Tensor[(14, 11, 2), bool] */;
  %483 = %481.8;
  (%482, %483, meta[relay.Constant][29] /* ty=Tensor[(1404), int8] */, %var_10057, meta[relay.Constant][30] /* ty=Tensor[(112), float32] */, meta[relay.Constant][31] /* ty=Tensor[(30), float64] */)
}

def @func_6921(%var_6897: Tensor[(5, 13, 10), float64], %var_6898: Tensor[(5, 13, 10), float64]) -> (Tensor[(5, 13, 10), float64], Tensor[(5, 13, 10), float64]) {
  %484 = cast(%var_6898, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %485 = shape_of(%var_6897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_6897, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %488 = cast(%var_6898, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
  %489 = add(%486, %487) /* ty=Tensor[(5, 13, 10), float64] */;
  %490 = cosh(%488) /* ty=Tensor[(5, 13, 10), float64] */;
  (%489, %490)
}

def @func_5208() -> (Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) {
  %491 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 135), uint16] */, dtype="uint16") /* ty=Tensor[(5, 135), uint16] */;
  %492 = reshape(%491, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), uint16] */;
  %493 = @func_4654(%492) /* ty=(Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) */;
  %494 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  %495 = %493.1;
  (%494, %495, meta[relay.Constant][32] /* ty=Tensor[(5, 135), uint16] */)
}

def @func_6351() -> (Tensor[(12, 11, 12), bool],) {
  %496 = @func_5535() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %497 = %496.0;
  %498 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 11, 12), uint16] */, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = logical_or(%500, %501) /* ty=Tensor[(12, 11, 12), bool] */;
  (%502,)
}

def @func_9149(%var_9126: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(1440), uint64], Tensor[(9, 12, 13), int32]) {
  %503 = @func_9091() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %504 = cast(meta[relay.Constant][34] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %505 = reshape(%504, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %506 = @func_7164(%505) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64]) */;
  %507 = cast(%var_9126, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %508 = cast(%var_9126, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %509 = cast(%var_9126, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %510 = reshape(%507, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %511 = reshape(%508, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %512 = reshape(%509, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
  %513 = @func_2056(%510, %511, %512) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
  %514 = %513.0;
  %515 = cast(%var_9126, dtype="int32") /* ty=Tensor[(1404), int32] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %519 = %503.0;
  %520 = %506.2;
  %521 = logical_xor(%517, %518) /* ty=Tensor[(9, 12, 13), int32] */;
  (%519, %520, meta[relay.Constant][34] /* ty=Tensor[(1440), uint64] */, %521)
}

def @func_8636() -> Tensor[(12, 11, 12), bool] {
  %522 = @func_7406() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), uint16]) */;
  %523 = %522.1;
  %524 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %525 = %524.0;
  %526 = cast(%525, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %527 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%523, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%528, %529) /* ty=Tensor[(12, 11, 12), bool] */
}

def @func_4887() -> Tensor[(12, 11, 12), uint16] {
  %530 = cast(meta[relay.Constant][35] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %531 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(12, 11, 12), uint16] */;
  maximum(%530, %531) /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_7669(%var_7664: float64, %var_7665: Tensor[(4, 16, 5), float64]) -> (Tensor[(4, 16, 5), bool],) {
  %532 = cast(%var_7664, dtype="bool") /* ty=bool */;
  %533 = cast(%var_7665, dtype="bool") /* ty=Tensor[(4, 16, 5), bool] */;
  %534 = less(%532, %533) /* ty=Tensor[(4, 16, 5), bool] */;
  (%534,)
}

def @func_9240() -> (Tensor[(12, 11, 12), uint16], Tensor[(112), float32], Tensor[(112), float32]) {
  %535 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %536 = cast(meta[relay.Constant][37] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %537 = reshape(%536, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %538 = @func_3302(%537) /* ty=(Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %539 = %535.0;
  %540 = %538.2;
  (%539, %540, meta[relay.Constant][37] /* ty=Tensor[(112), float32] */)
}

def @func_6319(%var_6313: Tensor[(10, 2, 16), float32]) -> (Tensor[(10, 2, 16), float32],) {
  %541 = cast(%var_6313, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
  %542 = sin(%541) /* ty=Tensor[(10, 2, 16), float32] */;
  (%542,)
}

def @func_7769(%var_7724: Tensor[(1040), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32], Tensor[(12, 11, 12), uint16], Tensor[(10, 2, 16), float32], Tensor[(320), float32]) {
  %543 = cast(%var_7724, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %544 = reshape(%543, newshape=[13, 8, 10]) /* ty=Tensor[(13, 8, 10), float32] */;
  %545 = @func_5208() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) */;
  %546 = cast(meta[relay.Constant][38] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %547 = reshape(%546, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float32] */;
  %548 = @func_6319(%547) /* ty=(Tensor[(10, 2, 16), float32],) */;
  %549 = @func_7648() /* ty=Tensor[(12, 11, 12), uint16] */;
  %550 = @func_6147(%544) /* ty=Tensor[(13, 8, 10), uint32] */;
  %551 = %545.0;
  %552 = %548.0;
  (%549, %550, %var_7724, %551, %552, meta[relay.Constant][38] /* ty=Tensor[(320), float32] */)
}

def @func_9490(%var_9472: Tensor[(3, 6, 6), float64]) -> Tensor[(3, 6, 6), float64] {
  %553 = cast(%var_9472, dtype="float64") /* ty=Tensor[(3, 6, 6), float64] */;
  log(%553) /* ty=Tensor[(3, 6, 6), float64] */
}

def @func_8561(%var_8550: Tensor[(3, 10, 11), uint64]) -> (Tensor[(3, 10, 11), uint64],) {
  %554 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 10, 1), uint64] */, dtype="uint64") /* ty=Tensor[(3, 10, 1), uint64] */;
  %555 = cast(%var_8550, dtype="uint64") /* ty=Tensor[(3, 10, 11), uint64] */;
  %556 = bitwise_xor(%554, %555) /* ty=Tensor[(3, 10, 11), uint64] */;
  (%556,)
}

def @func_8777() -> (Tensor[(12, 11, 12), float64], Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32]) {
  %557 = @func_7362() /* ty=(Tensor[(12, 11, 12), float64],) */;
  %558 = @func_7204() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %559 = cast(meta[relay.Constant][40] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %560 = reshape(%559, newshape=[13, 8, 10]) /* ty=Tensor[(13, 8, 10), float32] */;
  %561 = %557.0;
  %562 = %558.0;
  %563 = @func_6147(%560) /* ty=Tensor[(13, 8, 10), uint32] */;
  (%561, %562, %563, meta[relay.Constant][40] /* ty=Tensor[(1040), float32] */)
}

def @func_9960(%var_9818: Tensor[(15, 15, 1), float64], %var_9858: uint8, %var_9859: Tensor[(1120), uint8]) -> (Tensor[(15, 15, 1), float64], Tensor[(7, 6, 1), bool], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8], Tensor[(15, 15, 1), float32], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(15, 15, ?), int32], Tensor[(15, 15, ?), uint64], Tensor[(15, 15, ?), uint32]) {
  %564 = cast(%var_9818, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %565 = cast(%var_9858, dtype="uint8") /* ty=uint8 */;
  %566 = cast(%var_9859, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %567 = reshape(%565, newshape=[]) /* ty=uint8 */;
  %568 = reshape(%566, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint8] */;
  %569 = cast(%var_9818, dtype="float32") /* ty=Tensor[(15, 15, 1), float32] */;
  %570 = sqrt(%569) /* ty=Tensor[(15, 15, 1), float32] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(15, 15, 1), float32] */;
  %572 = @func_7697() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %573 = cast(meta[relay.Constant][41] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %574 = cast(meta[relay.Constant][41] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %575 = cast(meta[relay.Constant][42] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %576 = reshape(%573, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %577 = reshape(%574, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %578 = reshape(%575, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %579 = @func_700(%576, %577, %578) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
  %580 = @func_9456() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) */;
  %581 = cast(%var_9818, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %582 = sigmoid(%581) /* ty=Tensor[(15, 15, 1), float64] */;
  %583 = cast(%570, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %584 = tan(%583) /* ty=Tensor[(15, 15, 1), float64] */;
  %585 = cast(%var_9818, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = not_equal(%587, %588) /* ty=Tensor[(15, 15, ?), bool] */;
  %590 = cast(%589, dtype="int32") /* ty=Tensor[(15, 15, ?), int32] */;
  %591 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%582, dtype="int32") /* ty=Tensor[(15, 15, 1), int32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %594 = cast(%570, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %595 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%582, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %598 = logical_or(%596, %597) /* ty=Tensor[(15, 15, ?), bool] */;
  %599 = cast(%570, dtype="int8") /* ty=Tensor[(15, 15, 1), int8] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="int8") /* ty=Tensor[(15, 15, ?), int8] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %603 = bitwise_xor(%601, %602) /* ty=Tensor[(15, 15, ?), int8] */;
  %604 = cast(%598, dtype="uint64") /* ty=Tensor[(15, 15, ?), uint64] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="uint64") /* ty=Tensor[(15, 15, ?), uint64] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %608 = cast(%584, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %609 = acosh(%608) /* ty=Tensor[(15, 15, 1), float64] */;
  %610 = cast(%598, dtype="uint32") /* ty=Tensor[(15, 15, ?), uint32] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%609, dtype="uint32") /* ty=Tensor[(15, 15, 1), uint32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %614 = atan(%564) /* ty=Tensor[(15, 15, 1), float64] */;
  %615 = @func_9546() /* ty=Tensor[(7, 6, 1), bool] */;
  %616 = @func_7593(%567, %568) /* ty=Tensor[(14, 10, 8), uint8] */;
  %617 = log10(%571) /* ty=Tensor[(15, 15, 1), float32] */;
  %618 = %572.0;
  %619 = %579.1;
  %620 = %580.0;
  %621 = @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */;
  %622 = bitwise_and(%592, %593) /* ty=Tensor[(15, 15, ?), int32] */;
  %623 = logical_xor(%606, %607) /* ty=Tensor[(15, 15, ?), uint64] */;
  %624 = bitwise_or(%612, %613) /* ty=Tensor[(15, 15, ?), uint32] */;
  (%614, %615, %616, %var_9858, %var_9859, %617, %618, %619, meta[relay.Constant][41] /* ty=Tensor[(112), float32] */, meta[relay.Constant][42] /* ty=Tensor[(144), uint64] */, %620, %621, %622, %623, %624)
}

def @func_7383() -> Tensor[(12, 11, 12), uint16] {
  %625 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %625.0
}

def @func_10112() -> (Tensor[(5, 5, 8), float64],) {
  %626 = @func_7552() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) */;
  %627 = %626.0;
  (%627,)
}

def @func_8999() -> Tensor[(12, 11, 12), uint16] {
  @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_3302(%var_3298: Tensor[(112), float32]) -> (Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) {
  %628 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 15), float32] */;
  %629 = cast(%var_3298, dtype="float32") /* ty=Tensor[(112), float32] */;
  %630 = cast(%var_3298, dtype="float32") /* ty=Tensor[(112), float32] */;
  %631 = cast(meta[relay.Constant][44] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %632 = reshape(%629, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %633 = reshape(%630, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %634 = reshape(%631, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %635 = @func_700(%632, %633, %634) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
  %636 = sin(%628) /* ty=Tensor[(16, 13, 15), float32] */;
  %637 = %635.1;
  (%636, %637, %var_3298, meta[relay.Constant][44] /* ty=Tensor[(144), uint64] */)
}

def @func_5339() -> Tensor[(12, 11, 12), uint16] {
  @func_5227() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9329() -> Tensor[(12, 11, 12), uint16] {
  %638 = @func_6694() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %638.0
}

def @func_7362() -> (Tensor[(12, 11, 12), float64],) {
  %639 = @func_7334() /* ty=Tensor[(12, 11, 12), float64] */;
  (%639,)
}

def @func_5964(%var_5952: Tensor[(30), float64], %var_5954: Tensor[(28, 4), float32]) -> (Tensor[(12, 11, 12), int8], Tensor[(896), float64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(28, 4), float32]) {
  %640 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  %641 = @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */;
  %642 = cast(%641, dtype="int8") /* ty=Tensor[(12, 11, 12), int8] */;
  %643 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%640, dtype="int8") /* ty=Tensor[(12, 11, 12), int8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %646 = cast(%var_5952, dtype="float64") /* ty=Tensor[(30), float64] */;
  %647 = cast(meta[relay.Constant][45] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %648 = cast(%var_5954, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %649 = reshape(%646, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %650 = reshape(%647, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %651 = reshape(%648, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %652 = @func_3456(%649, %650, %651) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %653 = multiply(%644, %645) /* ty=Tensor[(12, 11, 12), int8] */;
  %654 = %652.1;
  (%653, %654, %var_5952, meta[relay.Constant][45] /* ty=Tensor[(1440), uint64] */, %var_5954)
}

def @func_8838(%var_8817: Tensor[(6, 9, 6), float64]) -> (Tensor[(6, 9, 6), float64],) {
  %655 = cast(%var_8817, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %656 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(6, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %659 = mod(%657, %658) /* ty=Tensor[(6, 9, 6), float64] */;
  (%659,)
}

def @func_7164(%var_7156: Tensor[(1440), uint64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64]) {
  %660 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %661 = cast(meta[relay.Constant][47] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %662 = cast(%var_7156, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %663 = reshape(%661, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %664 = reshape(%662, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %665 = @func_78(%663, %664) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %666 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  %667 = %660.2;
  %668 = %665.0;
  (%666, %667, %668, meta[relay.Constant][47] /* ty=Tensor[(144), uint64] */, %var_7156)
}

def @func_6453(%var_6431: Tensor[(468), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(12, 11, 12), uint16], Tensor[(468), float32], Tensor[(5, 5, 8), float64], Tensor[(896), float64], Tensor[(30), float64], Tensor[(112), float32], Tensor[(12, 11, 12), uint16]) {
  %669 = cast(meta[relay.Constant][48] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %670 = cast(meta[relay.Constant][49] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %671 = reshape(%669, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %672 = reshape(%670, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %673 = @func_78(%671, %672) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %674 = cast(%var_6431, dtype="float32") /* ty=Tensor[(468), float32] */;
  %675 = cast(%var_6431, dtype="float64") /* ty=Tensor[(468), float64] */;
  %676 = reshape(%674, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float32] */;
  %677 = reshape(%675, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %678 = @func_5854(%676, %677) /* ty=(Tensor[(9, 13, 4), bool], Tensor[(12, 11, 12), uint16]) */;
  %679 = @func_6378() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %680 = cast(meta[relay.Constant][50] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %681 = %673.0;
  %682 = cast(%681, dtype="uint64") /* ty=Tensor[(9, 16, 10), uint64] */;
  %683 = cast(meta[relay.Constant][51] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %684 = reshape(%680, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %685 = reshape(%682, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %686 = reshape(%683, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %687 = @func_3456(%684, %685, %686) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %688 = @func_5619() /* ty=Tensor[(12, 11, 12), uint16] */;
  %689 = %678.1;
  %690 = %679.0;
  %691 = %687.1;
  %692 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%688, %681, meta[relay.Constant][48] /* ty=Tensor[(144), uint64] */, meta[relay.Constant][49] /* ty=Tensor[(1440), uint64] */, %689, %var_6431, %690, %691, meta[relay.Constant][50] /* ty=Tensor[(30), float64] */, meta[relay.Constant][51] /* ty=Tensor[(112), float32] */, %692)
}

def @func_5663() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  %693 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %694 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %695 = @func_5227() /* ty=Tensor[(12, 11, 12), uint16] */;
  %696 = %693.0;
  %697 = %694.0;
  %698 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%695, %696, %697, %698)
}

def @func_8243() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) {
  %699 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %700 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  %701 = %699.0;
  (%700, %701)
}

def @func_5901() -> (Tensor[(12, 11, 12), uint16],) {
  %702 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %703 = %702.3;
  (%703,)
}

def @func_5291() -> (Tensor[(12, 11, 12), uint16],) {
  %704 = @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%704,)
}

def @func_6798() -> (Tensor[(12, 11, 12), uint16],) {
  %705 = @func_6554() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %706 = %705.0;
  (%706,)
}

def @func_7621() -> (Tensor[(5, 135), float64], Tensor[(5, 135), float64]) {
  %707 = @func_5554() /* ty=(Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) */;
  %708 = %707.0;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %710 = cast(%708, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %711 = atanh(%709) /* ty=Tensor[(5, 135), float64] */;
  %712 = sin(%710) /* ty=Tensor[(5, 135), float64] */;
  (%711, %712)
}

def @func_6773(%var_6763: Tensor[(16, 1, 7), int8], %var_6764: Tensor[(16, 8, 7), int8]) -> (Tensor[(16, 8, 7), int8], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  %713 = cast(%var_6763, dtype="int8") /* ty=Tensor[(16, 1, 7), int8] */;
  %714 = cast(%var_6764, dtype="int8") /* ty=Tensor[(16, 8, 7), int8] */;
  %715 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %716 = @func_5734() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) */;
  %717 = logical_xor(%713, %714) /* ty=Tensor[(16, 8, 7), int8] */;
  %718 = %715.0;
  %719 = %716.0;
  (%717, %718, %719)
}

def @func_7102(%var_7084: Tensor[(200), float64]) -> (Tensor[(12, 11, 12), bool], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 5, 8), bool], Tensor[(200), float64], Tensor[(12, 11, 12), float32], Tensor[(12, 11, 12), uint16]) {
  %720 = cast(meta[relay.Constant][52] /* ty=Tensor[(385, 3), float64] */, dtype="float64") /* ty=Tensor[(385, 3), float64] */;
  %721 = cast(meta[relay.Constant][53] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %722 = reshape(%720, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %723 = reshape(%721, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
  %724 = @func_6473(%722, %723) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) */;
  %725 = cast(%var_7084, dtype="float64") /* ty=Tensor[(200), float64] */;
  %726 = reshape(%725, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %727 = @func_6951(%726) /* ty=(Tensor[(5, 5, 8), bool],) */;
  %728 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  %730 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %731 = %724.4;
  %732 = %727.0;
  %733 = erf(%729) /* ty=Tensor[(12, 11, 12), float32] */;
  %734 = %730.0;
  (%731, meta[relay.Constant][52] /* ty=Tensor[(385, 3), float64] */, meta[relay.Constant][53] /* ty=Tensor[(1404), int8] */, %732, %var_7084, %733, %734)
}

def @func_5523() -> (Tensor[(12, 11, 12), uint16],) {
  %735 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %736 = %735.0;
  (%736,)
}

def @func_7552() -> (Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) {
  %737 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %738 = %737.0;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
  %740 = @func_6482() /* ty=Tensor[(5, 5, 8), float64] */;
  %741 = asinh(%739) /* ty=Tensor[(12, 11, 12), float64] */;
  (%740, %741)
}

def @func_4048(%var_4037: Tensor[(16, 12, 8), int64], %var_4038: Tensor[(16, 12, 8), int64]) -> (Tensor[(16, 12, 8), int64],) {
  %742 = cast(%var_4038, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
  %743 = shape_of(%var_4037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_4037, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %746 = logical_xor(%744, %745) /* ty=Tensor[(16, 12, 8), int64] */;
  (%746,)
}

def @func_8106() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), float32]) {
  %747 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %748 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %749 = %748.0;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  %751 = %747.0;
  %752 = log10(%750) /* ty=Tensor[(12, 11, 12), float32] */;
  (%751, %752)
}

def @func_6043() -> Tensor[(12, 11, 12), uint16] {
  @func_5619() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9546() -> Tensor[(7, 6, 1), bool] {
  %753 = cast(-10 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %754 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 6, 1), int64] */, dtype="bool") /* ty=Tensor[(7, 6, 1), bool] */;
  less(%753, %754) /* ty=Tensor[(7, 6, 1), bool] */
}

def @func_240(%var_208: Tensor[(8, 8, 6), float32]) -> (Tensor[(8, 8, 6), float32], Tensor[(8, 8, 6), float64]) {
  %755 = cast(%var_208, dtype="float32") /* ty=Tensor[(8, 8, 6), float32] */;
  %756 = cast(%var_208, dtype="float64") /* ty=Tensor[(8, 8, 6), float64] */;
  %757 = log(%755) /* ty=Tensor[(8, 8, 6), float32] */;
  %758 = sigmoid(%756) /* ty=Tensor[(8, 8, 6), float64] */;
  (%757, %758)
}

def @func_5554() -> (Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) {
  %759 = @func_5208() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) */;
  %760 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %761 = %759.2;
  %762 = %760.0;
  (%761, %762)
}

def @func_6473(%var_6466: Tensor[(1155), float64], %var_6467: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) {
  %763 = @func_6310() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %764 = cast(%var_6466, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %765 = cast(%var_6467, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %766 = reshape(%764, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %767 = reshape(%765, newshape=[702, 2]) /* ty=Tensor[(702, 2), int8] */;
  %768 = @func_4226(%766, %767) /* ty=(Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) */;
  %769 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %770 = %763.0;
  %771 = %768.0;
  %772 = %769.0;
  (%770, %771, %var_6466, %var_6467, %772)
}

def @func_6378() -> (Tensor[(5, 5, 8), float64],) {
  %773 = @func_6098() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %774 = %773.0;
  (%774,)
}

def @func_3456(%var_3431: Tensor[(1, 10, 3), float64], %var_3437: Tensor[(2, 720), uint64], %var_3439: Tensor[(112), float32]) -> (Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) {
  %775 = cast(meta[relay.Constant][55] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %776 = cast(meta[relay.Constant][56] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %777 = cast(%var_3437, dtype="uint64") /* ty=Tensor[(2, 720), uint64] */;
  %778 = cast(meta[relay.Constant][57] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %779 = cast(%var_3439, dtype="float32") /* ty=Tensor[(112), float32] */;
  %780 = reshape(%775, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
  %781 = reshape(%776, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %782 = reshape(%777, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %783 = reshape(%778, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %784 = reshape(%779, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %785 = @func_2733(%780, %781, %782, %783, %784) /* ty=(Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) */;
  %786 = cast(meta[relay.Constant][55] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %787 = cast(meta[relay.Constant][56] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %788 = cast(%var_3437, dtype="uint64") /* ty=Tensor[(2, 720), uint64] */;
  %789 = cast(meta[relay.Constant][57] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %790 = cast(%var_3439, dtype="float32") /* ty=Tensor[(112), float32] */;
  %791 = reshape(%786, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
  %792 = reshape(%787, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %793 = reshape(%788, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %794 = reshape(%789, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %795 = reshape(%790, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %796 = @func_2733(%791, %792, %793, %794, %795) /* ty=(Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) */;
  %797 = cast(%var_3431, dtype="float64") /* ty=Tensor[(1, 10, 3), float64] */;
  %798 = sigmoid(%797) /* ty=Tensor[(1, 10, 3), float64] */;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(1, 10, 3), float32] */;
  %800 = cast(%var_3431, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
  %801 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%798, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %804 = %785.6;
  %805 = %796.0;
  %806 = atan(%799) /* ty=Tensor[(1, 10, 3), float32] */;
  %807 = less_equal(%802, %803) /* ty=Tensor[(?, 10, 3), bool] */;
  (%804, meta[relay.Constant][55] /* ty=Tensor[(896), float64] */, meta[relay.Constant][56] /* ty=Tensor[(144), uint64] */, %var_3437, meta[relay.Constant][57] /* ty=Tensor[(308, 2), float32] */, %var_3439, %805, %806, %807)
}

def @func_7204() -> (Tensor[(12, 11, 12), uint16],) {
  %808 = @func_5554() /* ty=(Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) */;
  %809 = %808.1;
  (%809,)
}

def @func_6611(%var_6600: Tensor[(1155), float64], %var_6601: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(7, 11, 15), float32]) {
  %810 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %811 = cast(%var_6600, dtype="float64") /* ty=Tensor[(1155), float64] */;
  %812 = cast(%var_6601, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %813 = reshape(%811, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
  %814 = reshape(%812, newshape=[702, 2]) /* ty=Tensor[(702, 2), int8] */;
  %815 = @func_4226(%813, %814) /* ty=(Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) */;
  %816 = %815.2;
  %817 = cast(%816, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
  %818 = %810.0;
  %819 = rsqrt(%817) /* ty=Tensor[(7, 11, 15), float32] */;
  (%818, %var_6600, %var_6601, %819)
}

def @func_8064(%var_7987: Tensor[(5, 135), uint8], %var_8037: Tensor[(385, 3), float64], %var_8038: Tensor[(1404), int8]) -> (Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 135), float64], Tensor[(12, 11, 12), float32], Tensor[(5, 5, 8), float64]) {
  %820 = @func_6861() /* ty=(Tensor[(5, 135), uint8],) */;
  %821 = %820.0;
  %822 = cast(%var_7987, dtype="uint16") /* ty=Tensor[(5, 135), uint16] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(2), int32] */;
  %824 = cast(%821, dtype="uint16") /* ty=Tensor[(5, 135), uint16] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %826 = cast(%var_8037, dtype="float64") /* ty=Tensor[(385, 3), float64] */;
  %827 = cast(%var_8038, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %828 = reshape(%826, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %829 = reshape(%827, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
  %830 = @func_6473(%828, %829) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) */;
  %831 = cast(%var_7987, dtype="uint32") /* ty=Tensor[(5, 135), uint32] */;
  %832 = shape_of(%821, dtype="int32") /* ty=Tensor[(2), int32] */;
  %833 = cast(%821, dtype="uint32") /* ty=Tensor[(5, 135), uint32] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %835 = subtract(%833, %834) /* ty=Tensor[(5, 135), uint32] */;
  %836 = cast(%835, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %837 = cos(%836) /* ty=Tensor[(5, 135), float64] */;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %839 = @func_6378() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %840 = add(%824, %825) /* ty=Tensor[(5, 135), uint16] */;
  %841 = %830.0;
  %842 = rsqrt(%838) /* ty=Tensor[(5, 135), float64] */;
  %843 = @func_7816() /* ty=Tensor[(12, 11, 12), float32] */;
  %844 = %839.0;
  (%840, %841, %var_8037, %var_8038, %842, %843, %844)
}

def @func_7845() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) {
  %845 = @func_5535() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %846 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %847 = %845.0;
  %848 = %846.0;
  (%847, %848)
}

def @func_8216(%var_8156: Tensor[(1, 10, 13), uint64], %var_8157: Tensor[(3, 10, 13), uint64], %var_8205: uint8) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(3, 10, 13), uint8], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8]) {
  %849 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %850 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %851 = cast(%var_8156, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %852 = tan(%851) /* ty=Tensor[(1, 10, 13), float32] */;
  %853 = cast(%var_8156, dtype="uint64") /* ty=Tensor[(1, 10, 13), uint64] */;
  %854 = cast(%var_8157, dtype="uint64") /* ty=Tensor[(3, 10, 13), uint64] */;
  %855 = bitwise_or(%853, %854) /* ty=Tensor[(3, 10, 13), uint64] */;
  %856 = cast(%852, dtype="uint8") /* ty=Tensor[(1, 10, 13), uint8] */;
  %857 = cast(%855, dtype="uint8") /* ty=Tensor[(3, 10, 13), uint8] */;
  %858 = cast(%var_8205, dtype="uint8") /* ty=uint8 */;
  %859 = cast(meta[relay.Constant][58] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %860 = reshape(%858, newshape=[]) /* ty=uint8 */;
  %861 = reshape(%859, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint8] */;
  %862 = %849.1;
  %863 = %850.0;
  %864 = bitwise_xor(%856, %857) /* ty=Tensor[(3, 10, 13), uint8] */;
  %865 = @func_7593(%860, %861) /* ty=Tensor[(14, 10, 8), uint8] */;
  (%862, %863, %864, %865, %var_8205, meta[relay.Constant][58] /* ty=Tensor[(1120), uint8] */)
}

def @func_8324(%var_8277: Tensor[(1, 6, 2), float64], %var_8278: Tensor[(8, 6, 2), float64]) -> (Tensor[(8, 6, 2), float64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(1, 6, 2), float64], Tensor[(12, 11, 12), uint16]) {
  %866 = cast(%var_8277, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
  %867 = cast(%var_8278, dtype="float64") /* ty=Tensor[(8, 6, 2), float64] */;
  %868 = @func_7952() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %869 = cast(%var_8277, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
  %870 = floor_mod(%866, %867) /* ty=Tensor[(8, 6, 2), float64] */;
  %871 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  %872 = %868.0;
  %873 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  %874 = cosh(%869) /* ty=Tensor[(1, 6, 2), float64] */;
  %875 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%870, %871, %872, %873, %874, %875)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10112() -> (Tensor[(5, 5, 8), float64],) {
  %0 = @func_7552() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) */;
  %1 = %0.0;
  (%1,)
}

def @func_4656(%var_4655: Tensor[(5, 15, 9), uint16]) -> (Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) {
  %12 = fn (%var_4632: Tensor[(5, 15, 9), uint16]) -> (Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) {
    %2 = cast(%var_4632, dtype="uint16") /* ty=Tensor[(5, 15, 9), uint16] */;
    %3 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(5, 15, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 15, 9), uint16] */, dtype="uint16") /* ty=Tensor[(5, 15, 9), uint16] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 15, 9), uint16] */, dtype="bool") /* ty=Tensor[(5, 15, 9), bool] */;
    %7 = shape_of(%var_4632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%var_4632, dtype="bool") /* ty=Tensor[(5, 15, 9), bool] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %10 = bitwise_and(%4, %5) /* ty=Tensor[(5, 15, 9), uint16] */;
    %11 = greater(%8, %9) /* ty=Tensor[(5, 15, 9), bool] */;
    (%10, %11)
  };
  %12(%var_4655) /* ty=(Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) */
}

def @func_8564(%var_8562: Tensor[(3, 10, 11), uint64]) -> (Tensor[(3, 10, 11), uint64],) {
  @func_8561(%var_8562) /* ty=(Tensor[(3, 10, 11), uint64],) */
}

def @func_6862() -> (Tensor[(5, 135), uint8],) {
  %27 = fn () -> (Tensor[(5, 135), uint8],) {
    %13 = @func_5208() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) */;
    %14 = %13.2;
    %15 = cast(%14, dtype="float32") /* ty=Tensor[(5, 135), float32] */;
    %16 = acosh(%15) /* ty=Tensor[(5, 135), float32] */;
    %17 = cast(%14, dtype="int16") /* ty=Tensor[(5, 135), int16] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(2), int32] */;
    %19 = cast(%16, dtype="int16") /* ty=Tensor[(5, 135), int16] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %21 = left_shift(%19, %20) /* ty=Tensor[(5, 135), int16] */;
    %22 = cast(%21, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
    %23 = shape_of(%16, dtype="int32") /* ty=Tensor[(2), int32] */;
    %24 = cast(%16, dtype="uint8") /* ty=Tensor[(5, 135), uint8] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %26 = bitwise_and(%24, %25) /* ty=Tensor[(5, 135), uint8] */;
    (%26,)
  };
  %27() /* ty=(Tensor[(5, 135), uint8],) */
}

def @func_700(%var_653: Tensor[(2, 7, 8), float32], %var_654: Tensor[(2, 7, 8), float32], %var_661: Tensor[(144), uint64]) -> (Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) {
  %28 = cast(%var_654, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
  %29 = shape_of(%var_653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_653, dtype="float32") /* ty=Tensor[(2, 7, 8), float32] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %32 = cast(%var_661, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(720, 2), uint64] */, dtype="uint64") /* ty=Tensor[(720, 2), uint64] */;
  %34 = reshape(%32, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %35 = reshape(%33, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %36 = @func_78(%34, %35) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(720, 2), uint64] */, dtype="float64") /* ty=Tensor[(720, 2), float64] */;
  %38 = floor_mod(%30, %31) /* ty=Tensor[(2, 7, 8), float32] */;
  %39 = %36.0;
  %40 = log(%37) /* ty=Tensor[(720, 2), float64] */;
  (%38, %39, %var_661, %40)
}

def @func_7122() -> (Tensor[(12, 11, 12), uint16],) {
  %41 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %42 = %41.0;
  (%42,)
}

def @func_5339() -> Tensor[(12, 11, 12), uint16] {
  @func_5227() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_8134() -> (Tensor[(12, 11, 12), uint16],) {
  %43 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%43,)
}

def @func_6483() -> Tensor[(5, 5, 8), float64] {
  %45 = fn () -> Tensor[(5, 5, 8), float64] {
    %44 = @func_6378() /* ty=(Tensor[(5, 5, 8), float64],) */;
    %44.0
  };
  %45() /* ty=Tensor[(5, 5, 8), float64] */
}

def @func_6149(%var_6148: Tensor[(13, 8, 10), float32]) -> Tensor[(13, 8, 10), uint32] {
  %52 = fn (%var_6136: Tensor[(13, 8, 10), float32]) -> Tensor[(13, 8, 10), uint32] {
    %46 = cast(%var_6136, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
    %47 = asinh(%46) /* ty=Tensor[(13, 8, 10), float32] */;
    %48 = cast(%47, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
    %49 = shape_of(%var_6136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(%var_6136, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    left_shift(%50, %51) /* ty=Tensor[(13, 8, 10), uint32] */
  };
  %52(%var_6148) /* ty=Tensor[(13, 8, 10), uint32] */
}

def @func_7847() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) {
  @func_7845() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) */
}

def @func_4888() -> Tensor[(12, 11, 12), uint16] {
  %55 = fn () -> Tensor[(12, 11, 12), uint16] {
    %53 = cast(meta[relay.Constant][3] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(12, 11, 12), uint16] */;
    maximum(%53, %54) /* ty=Tensor[(12, 11, 12), uint16] */
  };
  %55() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_3460(%var_3457: Tensor[(1, 10, 3), float64], %var_3458: Tensor[(2, 720), uint64], %var_3459: Tensor[(112), float32]) -> (Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) {
  %89 = fn (%var_3431: Tensor[(1, 10, 3), float64], %var_3437: Tensor[(2, 720), uint64], %var_3439: Tensor[(112), float32]) -> (Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) {
    %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
    %58 = cast(%var_3437, dtype="uint64") /* ty=Tensor[(2, 720), uint64] */;
    %59 = cast(meta[relay.Constant][7] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
    %60 = cast(%var_3439, dtype="float32") /* ty=Tensor[(112), float32] */;
    %61 = reshape(%56, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
    %62 = reshape(%57, newshape=[144]) /* ty=Tensor[(144), uint64] */;
    %63 = reshape(%58, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
    %64 = reshape(%59, newshape=[616]) /* ty=Tensor[(616), float32] */;
    %65 = reshape(%60, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %66 = @func_2733(%61, %62, %63, %64, %65) /* ty=(Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) */;
    %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
    %69 = cast(%var_3437, dtype="uint64") /* ty=Tensor[(2, 720), uint64] */;
    %70 = cast(meta[relay.Constant][7] /* ty=Tensor[(308, 2), float32] */, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
    %71 = cast(%var_3439, dtype="float32") /* ty=Tensor[(112), float32] */;
    %72 = reshape(%67, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
    %73 = reshape(%68, newshape=[144]) /* ty=Tensor[(144), uint64] */;
    %74 = reshape(%69, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
    %75 = reshape(%70, newshape=[616]) /* ty=Tensor[(616), float32] */;
    %76 = reshape(%71, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %77 = @func_2733(%72, %73, %74, %75, %76) /* ty=(Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) */;
    %78 = cast(%var_3431, dtype="float64") /* ty=Tensor[(1, 10, 3), float64] */;
    %79 = sigmoid(%78) /* ty=Tensor[(1, 10, 3), float64] */;
    %80 = cast(%79, dtype="float32") /* ty=Tensor[(1, 10, 3), float32] */;
    %81 = cast(%var_3431, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
    %82 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %83 = cast(%79, dtype="bool") /* ty=Tensor[(1, 10, 3), bool] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %85 = %66.6;
    %86 = %77.0;
    %87 = atan(%80) /* ty=Tensor[(1, 10, 3), float32] */;
    %88 = less_equal(%83, %84) /* ty=Tensor[(?, 10, 3), bool] */;
    (%85, meta[relay.Constant][5] /* ty=Tensor[(896), float64] */, meta[relay.Constant][6] /* ty=Tensor[(144), uint64] */, %var_3437, meta[relay.Constant][7] /* ty=Tensor[(308, 2), float32] */, %var_3439, %86, %87, %88)
  };
  %89(%var_3457, %var_3458, %var_3459) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */
}

def @func_6298() -> Tensor[(12, 11, 12), uint16] {
  %90 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %90.0
}

def @func_9458() -> (Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) {
  @func_9456() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) */
}

def @func_5805(%var_5752: Tensor[(1536), int64], %var_5779: Tensor[(24, 6), uint64], %var_5781: Tensor[(616), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(616), float32], Tensor[(896), float64], Tensor[(24, 6), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(112), float32], Tensor[(16, 12, 8), bool]) {
  %91 = cast(meta[relay.Constant][8] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %92 = cast(%var_5779, dtype="uint64") /* ty=Tensor[(24, 6), uint64] */;
  %93 = cast(meta[relay.Constant][9] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %94 = cast(%var_5781, dtype="float32") /* ty=Tensor[(616), float32] */;
  %95 = cast(meta[relay.Constant][10] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %96 = reshape(%91, newshape=[14, 16, 4]) /* ty=Tensor[(14, 16, 4), float64] */;
  %97 = reshape(%92, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %98 = reshape(%93, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
  %99 = reshape(%94, newshape=[616]) /* ty=Tensor[(616), float32] */;
  %100 = reshape(%95, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %101 = @func_2733(%96, %97, %98, %99, %100) /* ty=(Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) */;
  %102 = cast(%var_5752, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %103 = cast(%var_5752, dtype="int64") /* ty=Tensor[(1536), int64] */;
  %104 = reshape(%102, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int64] */;
  %105 = reshape(%103, newshape=[16, 12, 8]) /* ty=Tensor[(16, 12, 8), int64] */;
  %106 = @func_4048(%104, %105) /* ty=(Tensor[(16, 12, 8), int64],) */;
  %107 = %106.0;
  %108 = cast(%var_5752, dtype="bool") /* ty=Tensor[(1536), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(16, 12, 8), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  %113 = @func_5619() /* ty=Tensor[(12, 11, 12), uint16] */;
  %114 = %101.2;
  %115 = greater(%110, %111) /* ty=Tensor[(16, 12, 8), bool] */;
  (%112, %113, %114, meta[relay.Constant][8] /* ty=Tensor[(896), float64] */, %var_5779, meta[relay.Constant][9] /* ty=Tensor[(1440), uint64] */, %var_5781, meta[relay.Constant][10] /* ty=Tensor[(112), float32] */, %115)
}

def @func_5448() -> (Tensor[(12, 11, 12), uint16],) {
  @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8266() -> (Tensor[(5, 5, 8), float32],) {
  %116 = @func_6482() /* ty=Tensor[(5, 5, 8), float64] */;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(5, 5, 8), float32] */;
  %118 = erf(%117) /* ty=Tensor[(5, 5, 8), float32] */;
  (%118,)
}

def @func_9007() -> Tensor[(12, 11, 12), uint16] {
  %119 = fn () -> Tensor[(12, 11, 12), uint16] {
    @func_7648() /* ty=Tensor[(12, 11, 12), uint16] */
  };
  %119() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_5178(%var_5176: Tensor[(200), float64], %var_5177: Tensor[(112), float32]) -> (Tensor[(8, 12, 6), float64], Tensor[(5, 5, 8), float64], Tensor[(200), float64], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(2, 720), uint64], Tensor[(30), float64], Tensor[(112), float32]) {
  @func_5174(%var_5176, %var_5177) /* ty=(Tensor[(8, 12, 6), float64], Tensor[(5, 5, 8), float64], Tensor[(200), float64], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(2, 720), uint64], Tensor[(30), float64], Tensor[(112), float32]) */
}

def @func_6310() -> (Tensor[(12, 11, 12), uint16],) {
  %120 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%120,)
}

def @func_8561(%var_8550: Tensor[(3, 10, 11), uint64]) -> (Tensor[(3, 10, 11), uint64],) {
  %121 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 10, 1), uint64] */, dtype="uint64") /* ty=Tensor[(3, 10, 1), uint64] */;
  %122 = cast(%var_8550, dtype="uint64") /* ty=Tensor[(3, 10, 11), uint64] */;
  %123 = bitwise_xor(%121, %122) /* ty=Tensor[(3, 10, 11), uint64] */;
  (%123,)
}

def @func_4229(%var_4227: Tensor[(7, 11, 15), float64], %var_4228: Tensor[(702, 2), int8]) -> (Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) {
  %144 = fn (%var_4184: Tensor[(7, 11, 15), float64], %var_4202: Tensor[(702, 2), int8]) -> (Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) {
    %124 = cast(%var_4202, dtype="int8") /* ty=Tensor[(702, 2), int8] */;
    %125 = cast(%var_4202, dtype="int8") /* ty=Tensor[(702, 2), int8] */;
    %126 = cast(%var_4202, dtype="int8") /* ty=Tensor[(702, 2), int8] */;
    %127 = reshape(%124, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %128 = reshape(%125, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %129 = reshape(%126, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %130 = @func_2056(%127, %128, %129) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
    %131 = cast(%var_4184, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
    %132 = cast(%var_4184, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
    %133 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(7, 11, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 11, 15), float64] */, dtype="float64") /* ty=Tensor[(7, 11, 15), float64] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %136 = minimum(%134, %135) /* ty=Tensor[(7, 11, 15), float64] */;
    %137 = cast(%136, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
    %138 = shape_of(%var_4184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%var_4184, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %141 = %130.1;
    %142 = asinh(%131) /* ty=Tensor[(7, 11, 15), float32] */;
    %143 = multiply(%139, %140) /* ty=Tensor[(7, 11, 15), float32] */;
    (%141, %var_4202, %142, %143)
  };
  %144(%var_4227, %var_4228) /* ty=(Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) */
}

def @func_7335() -> Tensor[(12, 11, 12), float64] {
  %148 = fn () -> Tensor[(12, 11, 12), float64] {
    %145 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
    %146 = %145.2;
    %147 = cast(%146, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
    cos(%147) /* ty=Tensor[(12, 11, 12), float64] */
  };
  %148() /* ty=Tensor[(12, 11, 12), float64] */
}

def @func_9456() -> (Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) {
  %149 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %150 = cast(meta[relay.Constant][13] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %151 = reshape(%150, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %152 = @func_3302(%151) /* ty=(Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %153 = %149.0;
  %154 = %152.0;
  (%153, %154, meta[relay.Constant][13] /* ty=Tensor[(112), float32] */)
}

def @func_9802(%var_9801: uint8) -> (Tensor[(7, 6, 1), bool], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(14, 10, 8), uint8], Tensor[(130, 1), uint64], Tensor[(390), uint64], uint8) {
  %169 = fn (%var_9796: uint8) -> (Tensor[(7, 6, 1), bool], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(14, 10, 8), uint8], Tensor[(130, 1), uint64], Tensor[(390), uint64], uint8) {
    %155 = @func_9669() /* ty=(Tensor[(7, 6, 1), bool],) */;
    %156 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %157 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %158 = cast(meta[relay.Constant][14] /* ty=Tensor[(130, 1), uint64] */, dtype="uint64") /* ty=Tensor[(130, 1), uint64] */;
    %159 = cast(meta[relay.Constant][15] /* ty=Tensor[(390), uint64] */, dtype="uint64") /* ty=Tensor[(390), uint64] */;
    %160 = cast(%var_9796, dtype="uint8") /* ty=uint8 */;
    %161 = reshape(%158, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), uint64] */;
    %162 = reshape(%159, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), uint64] */;
    %163 = reshape(%160, newshape=[]) /* ty=uint8 */;
    %164 = @func_8216(%161, %162, %163) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(3, 10, 13), uint8], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8]) */;
    %165 = %155.0;
    %166 = %156.0;
    %167 = %157.0;
    %168 = %164.3;
    (%165, %166, %167, %168, meta[relay.Constant][14] /* ty=Tensor[(130, 1), uint64] */, meta[relay.Constant][15] /* ty=Tensor[(390), uint64] */, %var_9796)
  };
  %169(%var_9801) /* ty=(Tensor[(7, 6, 1), bool], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(14, 10, 8), uint8], Tensor[(130, 1), uint64], Tensor[(390), uint64], uint8) */
}

def @func_3304(%var_3303: Tensor[(112), float32]) -> (Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) {
  %180 = fn (%var_3298: Tensor[(112), float32]) -> (Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) {
    %170 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 15), float32] */;
    %171 = cast(%var_3298, dtype="float32") /* ty=Tensor[(112), float32] */;
    %172 = cast(%var_3298, dtype="float32") /* ty=Tensor[(112), float32] */;
    %173 = cast(meta[relay.Constant][17] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
    %174 = reshape(%171, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
    %175 = reshape(%172, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
    %176 = reshape(%173, newshape=[144]) /* ty=Tensor[(144), uint64] */;
    %177 = @func_700(%174, %175, %176) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
    %178 = sin(%170) /* ty=Tensor[(16, 13, 15), float32] */;
    %179 = %177.1;
    (%178, %179, %var_3298, meta[relay.Constant][17] /* ty=Tensor[(144), uint64] */)
  };
  %180(%var_3303) /* ty=(Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) */
}

def @func_7621() -> (Tensor[(5, 135), float64], Tensor[(5, 135), float64]) {
  %181 = @func_5554() /* ty=(Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %184 = cast(%182, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %185 = atanh(%183) /* ty=Tensor[(5, 135), float64] */;
  %186 = sin(%184) /* ty=Tensor[(5, 135), float64] */;
  (%185, %186)
}

def @func_5810(%var_5807: Tensor[(1536), int64], %var_5808: Tensor[(24, 6), uint64], %var_5809: Tensor[(616), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(616), float32], Tensor[(896), float64], Tensor[(24, 6), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(112), float32], Tensor[(16, 12, 8), bool]) {
  @func_5805(%var_5807, %var_5808, %var_5809) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(616), float32], Tensor[(896), float64], Tensor[(24, 6), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(112), float32], Tensor[(16, 12, 8), bool]) */
}

def @func_8463() -> Tensor[(12, 11, 12), uint16] {
  %187 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %187.0
}

def @func_6322(%var_6320: Tensor[(10, 2, 16), float32]) -> (Tensor[(10, 2, 16), float32],) {
  @func_6319(%var_6320) /* ty=(Tensor[(10, 2, 16), float32],) */
}

def @func_7275() -> (Tensor[(12, 11, 12), uint16],) {
  %189 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %188 = @func_6186() /* ty=Tensor[(12, 11, 12), uint16] */;
    (%188,)
  };
  %189() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8108() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), float32]) {
  @func_8106() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), float32]) */
}

def @func_8500(%var_8489: Tensor[(112), int8], %var_8490: Tensor[(896), int8]) -> (Tensor[(12, 11, 12), int64], Tensor[(12, 11, 12), uint16], Tensor[(112), int8], Tensor[(896), int8], Tensor[(12, 11, 12), float32]) {
  %190 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %191 = %190.0;
  %192 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 11, 12), bool] */, dtype="int64") /* ty=Tensor[(12, 11, 12), int64] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="int64") /* ty=Tensor[(12, 11, 12), int64] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %196 = cast(%var_8489, dtype="int8") /* ty=Tensor[(112), int8] */;
  %197 = cast(%var_8490, dtype="int8") /* ty=Tensor[(896), int8] */;
  %198 = reshape(%196, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int8] */;
  %199 = reshape(%197, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), int8] */;
  %200 = @func_6773(%198, %199) /* ty=(Tensor[(16, 8, 7), int8], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %201 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 11, 12), bool] */, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  %202 = bitwise_or(%194, %195) /* ty=Tensor[(12, 11, 12), int64] */;
  %203 = %200.2;
  %204 = atanh(%201) /* ty=Tensor[(12, 11, 12), float32] */;
  (%202, %203, %var_8489, %var_8490, %204)
}

def @func_7443() -> (Tensor[(12, 11, 12), uint16],) {
  @func_7441() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8840(%var_8839: Tensor[(6, 9, 6), float64]) -> (Tensor[(6, 9, 6), float64],) {
  %210 = fn (%var_8817: Tensor[(6, 9, 6), float64]) -> (Tensor[(6, 9, 6), float64],) {
    %205 = cast(%var_8817, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
    %206 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(6, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %209 = mod(%207, %208) /* ty=Tensor[(6, 9, 6), float64] */;
    (%209,)
  };
  %210(%var_8839) /* ty=(Tensor[(6, 9, 6), float64],) */
}

def @func_240(%var_208: Tensor[(8, 8, 6), float32]) -> (Tensor[(8, 8, 6), float32], Tensor[(8, 8, 6), float64]) {
  %211 = cast(%var_208, dtype="float32") /* ty=Tensor[(8, 8, 6), float32] */;
  %212 = cast(%var_208, dtype="float64") /* ty=Tensor[(8, 8, 6), float64] */;
  %213 = log(%211) /* ty=Tensor[(8, 8, 6), float32] */;
  %214 = sigmoid(%212) /* ty=Tensor[(8, 8, 6), float64] */;
  (%213, %214)
}

def @func_6777(%var_6775: Tensor[(16, 1, 7), int8], %var_6776: Tensor[(16, 8, 7), int8]) -> (Tensor[(16, 8, 7), int8], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  @func_6773(%var_6775, %var_6776) /* ty=(Tensor[(16, 8, 7), int8], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */
}

def @func_5365(%var_5353: Tensor[(9, 8, 5), uint64], %var_5354: Tensor[(9, 8, 5), uint64]) -> Tensor[(9, 8, 5), uint64] {
  %215 = cast(%var_5354, dtype="uint64") /* ty=Tensor[(9, 8, 5), uint64] */;
  %216 = shape_of(%var_5353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%var_5353, dtype="uint64") /* ty=Tensor[(9, 8, 5), uint64] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%217, %218) /* ty=Tensor[(9, 8, 5), uint64] */
}

def @func_6951(%var_6946: Tensor[(5, 5, 8), float64]) -> (Tensor[(5, 5, 8), bool],) {
  %219 = @func_6098() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %220 = %219.0;
  %221 = cast(%var_6946, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(5, 5, 8), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = logical_and(%223, %224) /* ty=Tensor[(5, 5, 8), bool] */;
  (%225,)
}

def @func_7441() -> (Tensor[(12, 11, 12), uint16],) {
  %226 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %227 = %226.0;
  (%227,)
}

def @func_9965(%var_9962: Tensor[(15, 15, 1), float64], %var_9963: uint8, %var_9964: Tensor[(1120), uint8]) -> (Tensor[(15, 15, 1), float64], Tensor[(7, 6, 1), bool], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8], Tensor[(15, 15, 1), float32], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(15, 15, ?), int32], Tensor[(15, 15, ?), uint64], Tensor[(15, 15, ?), uint32]) {
  @func_9960(%var_9962, %var_9963, %var_9964) /* ty=(Tensor[(15, 15, 1), float64], Tensor[(7, 6, 1), bool], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8], Tensor[(15, 15, 1), float32], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(15, 15, ?), int32], Tensor[(15, 15, ?), uint64], Tensor[(15, 15, ?), uint32]) */
}

def @func_10031() -> (Tensor[(5, 5, 8), float64],) {
  @func_10029() /* ty=(Tensor[(5, 5, 8), float64],) */
}

def @func_4905(%var_4903: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64],) {
  @func_4902(%var_4903) /* ty=(Tensor[(5, 15, 5), float64],) */
}

def @func_9622() -> (Tensor[(16, 13, 15), float32],) {
  @func_9620() /* ty=(Tensor[(16, 13, 15), float32],) */
}

def @func_5665() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */
}

def @func_6044() -> Tensor[(12, 11, 12), uint16] {
  %228 = fn () -> Tensor[(12, 11, 12), uint16] {
    @func_5619() /* ty=Tensor[(12, 11, 12), uint16] */
  };
  %228() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_10062(%var_10038: Tensor[(14, 11, 2), float64], %var_10057: Tensor[(384), float32]) -> (Tensor[(14, 11, 2), bool], Tensor[(1440, 1), uint64], Tensor[(1404), int8], Tensor[(384), float32], Tensor[(112), float32], Tensor[(30), float64]) {
  %229 = cast(%var_10038, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
  %230 = erf(%229) /* ty=Tensor[(14, 11, 2), float64] */;
  %231 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 11, 2), float64] */, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = cast(meta[relay.Constant][21] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %236 = cast(%var_10057, dtype="float32") /* ty=Tensor[(384), float32] */;
  %237 = cast(meta[relay.Constant][22] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %238 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %239 = reshape(%235, newshape=[18, 78]) /* ty=Tensor[(18, 78), int8] */;
  %240 = reshape(%236, newshape=[384]) /* ty=Tensor[(384), float32] */;
  %241 = reshape(%237, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %242 = reshape(%238, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %243 = @func_5088(%239, %240, %241, %242) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(11, 8, 7), float32], Tensor[(616), float32], Tensor[(384), float32], Tensor[(112), float32], Tensor[(18, 78), uint8], Tensor[(308, 2), float32], Tensor[(30), float64], Tensor[(1440, 1), uint64], Tensor[(8, 8, 6), float32], Tensor[(18, 78), float32], Tensor[(144), uint64], Tensor[(5, 15, 5), float64], Tensor[(375), float64]) */;
  %244 = logical_or(%233, %234) /* ty=Tensor[(14, 11, 2), bool] */;
  %245 = %243.8;
  (%244, %245, meta[relay.Constant][21] /* ty=Tensor[(1404), int8] */, %var_10057, meta[relay.Constant][22] /* ty=Tensor[(112), float32] */, meta[relay.Constant][23] /* ty=Tensor[(30), float64] */)
}

def @func_243(%var_241: Tensor[(8, 8, 6), float32]) -> (Tensor[(8, 8, 6), float32], Tensor[(8, 8, 6), float64]) {
  @func_240(%var_241) /* ty=(Tensor[(8, 8, 6), float32], Tensor[(8, 8, 6), float64]) */
}

def @func_5228() -> Tensor[(12, 11, 12), uint16] {
  %246 = fn () -> Tensor[(12, 11, 12), uint16] {
    @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */
  };
  %246() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9670() -> (Tensor[(7, 6, 1), bool],) {
  %248 = fn () -> (Tensor[(7, 6, 1), bool],) {
    %247 = @func_9546() /* ty=Tensor[(7, 6, 1), bool] */;
    (%247,)
  };
  %248() /* ty=(Tensor[(7, 6, 1), bool],) */
}

def @func_9275() -> (Tensor[(12, 11, 12), uint16],) {
  %249 = @func_8508() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%249,)
}

def @func_705(%var_702: Tensor[(2, 7, 8), float32], %var_703: Tensor[(2, 7, 8), float32], %var_704: Tensor[(144), uint64]) -> (Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) {
  @func_700(%var_702, %var_703, %var_704) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */
}

def @func_9534(%var_9532: Tensor[(675), uint16]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 16, 5), float64], Tensor[(60, 16), float64], Tensor[(675), uint16], Tensor[(12, 11, 12), float64]) {
  @func_9531(%var_9532) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 16, 5), float64], Tensor[(60, 16), float64], Tensor[(675), uint16], Tensor[(12, 11, 12), float64]) */
}

def @func_8064(%var_7987: Tensor[(5, 135), uint8], %var_8037: Tensor[(385, 3), float64], %var_8038: Tensor[(1404), int8]) -> (Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 135), float64], Tensor[(12, 11, 12), float32], Tensor[(5, 5, 8), float64]) {
  %250 = @func_6861() /* ty=(Tensor[(5, 135), uint8],) */;
  %251 = %250.0;
  %252 = cast(%var_7987, dtype="uint16") /* ty=Tensor[(5, 135), uint16] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(2), int32] */;
  %254 = cast(%251, dtype="uint16") /* ty=Tensor[(5, 135), uint16] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %256 = cast(%var_8037, dtype="float64") /* ty=Tensor[(385, 3), float64] */;
  %257 = cast(%var_8038, dtype="int8") /* ty=Tensor[(1404), int8] */;
  %258 = reshape(%256, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
  %259 = reshape(%257, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
  %260 = @func_6473(%258, %259) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) */;
  %261 = cast(%var_7987, dtype="uint32") /* ty=Tensor[(5, 135), uint32] */;
  %262 = shape_of(%251, dtype="int32") /* ty=Tensor[(2), int32] */;
  %263 = cast(%251, dtype="uint32") /* ty=Tensor[(5, 135), uint32] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %265 = subtract(%263, %264) /* ty=Tensor[(5, 135), uint32] */;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %267 = cos(%266) /* ty=Tensor[(5, 135), float64] */;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
  %269 = @func_6378() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %270 = add(%254, %255) /* ty=Tensor[(5, 135), uint16] */;
  %271 = %260.0;
  %272 = rsqrt(%268) /* ty=Tensor[(5, 135), float64] */;
  %273 = @func_7816() /* ty=Tensor[(12, 11, 12), float32] */;
  %274 = %269.0;
  (%270, %271, %var_8037, %var_8038, %272, %273, %274)
}

def @func_3002(%var_3000: Tensor[(5, 5, 8), float64], %var_3001: Tensor[(5, 5, 8), float64]) -> (Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) {
  @func_2998(%var_3000, %var_3001) /* ty=(Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) */
}

def @func_7124() -> (Tensor[(12, 11, 12), uint16],) {
  @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_6319(%var_6313: Tensor[(10, 2, 16), float32]) -> (Tensor[(10, 2, 16), float32],) {
  %275 = cast(%var_6313, dtype="float32") /* ty=Tensor[(10, 2, 16), float32] */;
  %276 = sin(%275) /* ty=Tensor[(10, 2, 16), float32] */;
  (%276,)
}

def @func_8136() -> (Tensor[(12, 11, 12), uint16],) {
  @func_8134() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8221(%var_8218: Tensor[(1, 10, 13), uint64], %var_8219: Tensor[(3, 10, 13), uint64], %var_8220: uint8) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(3, 10, 13), uint8], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8]) {
  @func_8216(%var_8218, %var_8219, %var_8220) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(3, 10, 13), uint8], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8]) */
}

def @func_5735() -> (Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) {
  %284 = fn () -> (Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) {
    %277 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 20), float64] */, dtype="float64") /* ty=Tensor[(10, 20), float64] */;
    %278 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 20), float64] */, dtype="float64") /* ty=Tensor[(10, 20), float64] */;
    %279 = reshape(%277, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
    %280 = reshape(%278, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
    %281 = @func_2998(%279, %280) /* ty=(Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) */;
    %282 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
    %283 = %281.0;
    (%282, %283, meta[relay.Constant][24] /* ty=Tensor[(10, 20), float64] */)
  };
  %284() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) */
}

def @func_6614(%var_6612: Tensor[(1155), float64], %var_6613: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(7, 11, 15), float32]) {
  %295 = fn (%var_6600: Tensor[(1155), float64], %var_6601: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(7, 11, 15), float32]) {
    %285 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
    %286 = cast(%var_6600, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %287 = cast(%var_6601, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %288 = reshape(%286, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
    %289 = reshape(%287, newshape=[702, 2]) /* ty=Tensor[(702, 2), int8] */;
    %290 = @func_4226(%288, %289) /* ty=(Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) */;
    %291 = %290.2;
    %292 = cast(%291, dtype="float32") /* ty=Tensor[(7, 11, 15), float32] */;
    %293 = %285.0;
    %294 = rsqrt(%292) /* ty=Tensor[(7, 11, 15), float32] */;
    (%293, %var_6600, %var_6601, %294)
  };
  %295(%var_6612, %var_6613) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(7, 11, 15), float32]) */
}

def @func_9331() -> Tensor[(12, 11, 12), uint16] {
  @func_9329() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_6773(%var_6763: Tensor[(16, 1, 7), int8], %var_6764: Tensor[(16, 8, 7), int8]) -> (Tensor[(16, 8, 7), int8], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  %296 = cast(%var_6763, dtype="int8") /* ty=Tensor[(16, 1, 7), int8] */;
  %297 = cast(%var_6764, dtype="int8") /* ty=Tensor[(16, 8, 7), int8] */;
  %298 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %299 = @func_5734() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) */;
  %300 = logical_xor(%296, %297) /* ty=Tensor[(16, 8, 7), int8] */;
  %301 = %298.0;
  %302 = %299.0;
  (%300, %301, %302)
}

def @func_10029() -> (Tensor[(5, 5, 8), float64],) {
  %303 = @func_7552() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %306 = asin(%305) /* ty=Tensor[(5, 5, 8), float64] */;
  (%306,)
}

def @func_6924(%var_6922: Tensor[(5, 13, 10), float64], %var_6923: Tensor[(5, 13, 10), float64]) -> (Tensor[(5, 13, 10), float64], Tensor[(5, 13, 10), float64]) {
  %314 = fn (%var_6897: Tensor[(5, 13, 10), float64], %var_6898: Tensor[(5, 13, 10), float64]) -> (Tensor[(5, 13, 10), float64], Tensor[(5, 13, 10), float64]) {
    %307 = cast(%var_6898, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
    %308 = shape_of(%var_6897, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%var_6897, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %311 = cast(%var_6898, dtype="float64") /* ty=Tensor[(5, 13, 10), float64] */;
    %312 = add(%309, %310) /* ty=Tensor[(5, 13, 10), float64] */;
    %313 = cosh(%311) /* ty=Tensor[(5, 13, 10), float64] */;
    (%312, %313)
  };
  %314(%var_6922, %var_6923) /* ty=(Tensor[(5, 13, 10), float64], Tensor[(5, 13, 10), float64]) */
}

def @func_7384() -> Tensor[(12, 11, 12), uint16] {
  %316 = fn () -> Tensor[(12, 11, 12), uint16] {
    %315 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %315.0
  };
  %316() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_5903() -> (Tensor[(12, 11, 12), uint16],) {
  @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_10108(%var_10107: Tensor[(5, 135), float64]) -> (Tensor[(5, 135), float64],) {
  %324 = fn (%var_10097: Tensor[(5, 135), float64]) -> (Tensor[(5, 135), float64],) {
    %317 = @func_7621() /* ty=(Tensor[(5, 135), float64], Tensor[(5, 135), float64]) */;
    %318 = %317.1;
    %319 = cast(%var_10097, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
    %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(2), int32] */;
    %321 = cast(%318, dtype="float64") /* ty=Tensor[(5, 135), float64] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %323 = divide(%321, %322) /* ty=Tensor[(5, 135), float64] */;
    (%323,)
  };
  %324(%var_10107) /* ty=(Tensor[(5, 135), float64],) */
}

def @func_8106() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), float32]) {
  %325 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %326 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  %329 = %325.0;
  %330 = log10(%328) /* ty=Tensor[(12, 11, 12), float32] */;
  (%329, %330)
}

def @func_5968(%var_5966: Tensor[(30), float64], %var_5967: Tensor[(28, 4), float32]) -> (Tensor[(12, 11, 12), int8], Tensor[(896), float64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(28, 4), float32]) {
  @func_5964(%var_5966, %var_5967) /* ty=(Tensor[(12, 11, 12), int8], Tensor[(896), float64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(28, 4), float32]) */
}

def @func_9242() -> (Tensor[(12, 11, 12), uint16], Tensor[(112), float32], Tensor[(112), float32]) {
  @func_9240() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(112), float32], Tensor[(112), float32]) */
}

def @func_5446() -> (Tensor[(12, 11, 12), uint16],) {
  %331 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %332 = %331.0;
  (%332,)
}

def @func_5901() -> (Tensor[(12, 11, 12), uint16],) {
  %333 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %334 = %333.3;
  (%334,)
}

def @func_8890() -> (Tensor[(5, 135), float64],) {
  %335 = @func_7621() /* ty=(Tensor[(5, 135), float64], Tensor[(5, 135), float64]) */;
  %336 = %335.0;
  (%336,)
}

def @func_6300() -> Tensor[(12, 11, 12), uint16] {
  @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9412(%var_9409: Tensor[(30), float64], %var_9410: Tensor[(1440), uint64], %var_9411: Tensor[(112), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(144), uint64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(112), float32]) {
  %346 = fn (%var_9374: Tensor[(30), float64], %var_9375: Tensor[(1440), uint64], %var_9376: Tensor[(112), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(144), uint64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(112), float32]) {
    %337 = cast(%var_9374, dtype="float64") /* ty=Tensor[(30), float64] */;
    %338 = cast(%var_9375, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %339 = cast(%var_9376, dtype="float32") /* ty=Tensor[(112), float32] */;
    %340 = reshape(%337, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
    %341 = reshape(%338, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
    %342 = reshape(%339, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %343 = @func_3456(%340, %341, %342) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
    %344 = @func_9329() /* ty=Tensor[(12, 11, 12), uint16] */;
    %345 = %343.2;
    (%344, %345, %var_9374, %var_9375, %var_9376)
  };
  %346(%var_9409, %var_9410, %var_9411) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(144), uint64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(112), float32]) */
}

def @func_9595() -> (Tensor[(12, 11, 12), uint16],) {
  %349 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %347 = @func_6798() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %348 = %347.0;
    (%348,)
  };
  %349() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_7515() -> Tensor[(12, 11, 12), uint16] {
  %350 = @func_7441() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %350.0
}

def @func_7672(%var_7670: float64, %var_7671: Tensor[(4, 16, 5), float64]) -> (Tensor[(4, 16, 5), bool],) {
  %354 = fn (%var_7664: float64, %var_7665: Tensor[(4, 16, 5), float64]) -> (Tensor[(4, 16, 5), bool],) {
    %351 = cast(%var_7664, dtype="bool") /* ty=bool */;
    %352 = cast(%var_7665, dtype="bool") /* ty=Tensor[(4, 16, 5), bool] */;
    %353 = less(%351, %352) /* ty=Tensor[(4, 16, 5), bool] */;
    (%353,)
  };
  %354(%var_7670, %var_7671) /* ty=(Tensor[(4, 16, 5), bool],) */
}

def @func_8508() -> Tensor[(12, 11, 12), uint16] {
  @func_7383() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_7166(%var_7165: Tensor[(1440), uint64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64]) {
  %364 = fn (%var_7156: Tensor[(1440), uint64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64]) {
    %355 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
    %356 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
    %357 = cast(%var_7156, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %358 = reshape(%356, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
    %359 = reshape(%357, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
    %360 = @func_78(%358, %359) /* ty=(Tensor[(9, 16, 10), bool],) */;
    %361 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
    %362 = %355.2;
    %363 = %360.0;
    (%361, %362, %363, meta[relay.Constant][25] /* ty=Tensor[(144), uint64] */, %var_7156)
  };
  %364(%var_7165) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64]) */
}

def @func_6352() -> (Tensor[(12, 11, 12), bool],) {
  %372 = fn () -> (Tensor[(12, 11, 12), bool],) {
    %365 = @func_5535() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %366 = %365.0;
    %367 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 11, 12), uint16] */, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%366, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %371 = logical_or(%369, %370) /* ty=Tensor[(12, 11, 12), bool] */;
    (%371,)
  };
  %372() /* ty=(Tensor[(12, 11, 12), bool],) */
}

def @func_5536() -> (Tensor[(12, 11, 12), uint16],) {
  %375 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %373 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %374 = %373.0;
    (%374,)
  };
  %375() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_7104(%var_7103: Tensor[(200), float64]) -> (Tensor[(12, 11, 12), bool], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 5, 8), bool], Tensor[(200), float64], Tensor[(12, 11, 12), float32], Tensor[(12, 11, 12), uint16]) {
  %391 = fn (%var_7084: Tensor[(200), float64]) -> (Tensor[(12, 11, 12), bool], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 5, 8), bool], Tensor[(200), float64], Tensor[(12, 11, 12), float32], Tensor[(12, 11, 12), uint16]) {
    %376 = cast(meta[relay.Constant][27] /* ty=Tensor[(385, 3), float64] */, dtype="float64") /* ty=Tensor[(385, 3), float64] */;
    %377 = cast(meta[relay.Constant][28] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %378 = reshape(%376, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
    %379 = reshape(%377, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
    %380 = @func_6473(%378, %379) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) */;
    %381 = cast(%var_7084, dtype="float64") /* ty=Tensor[(200), float64] */;
    %382 = reshape(%381, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
    %383 = @func_6951(%382) /* ty=(Tensor[(5, 5, 8), bool],) */;
    %384 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
    %385 = cast(%384, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
    %386 = @func_5901() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %387 = %380.4;
    %388 = %383.0;
    %389 = erf(%385) /* ty=Tensor[(12, 11, 12), float32] */;
    %390 = %386.0;
    (%387, meta[relay.Constant][27] /* ty=Tensor[(385, 3), float64] */, meta[relay.Constant][28] /* ty=Tensor[(1404), int8] */, %388, %var_7084, %389, %390)
  };
  %391(%var_7103) /* ty=(Tensor[(12, 11, 12), bool], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 5, 8), bool], Tensor[(200), float64], Tensor[(12, 11, 12), float32], Tensor[(12, 11, 12), uint16]) */
}

def @func_6555() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  %395 = fn () -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
    %392 = @func_6310() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %393 = %392.0;
    %394 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
    (%393, %394)
  };
  %395() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */
}

def @func_1869(%var_1866: Tensor[(11, 8, 7), float32], %var_1867: Tensor[(6, 64), float32], %var_1868: Tensor[(112), float32]) -> (Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) {
  @func_1864(%var_1866, %var_1867, %var_1868) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */
}

def @func_6100() -> (Tensor[(5, 5, 8), float64],) {
  @func_6098() /* ty=(Tensor[(5, 5, 8), float64],) */
}

def @func_5556() -> (Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) {
  @func_5554() /* ty=(Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) */
}

def @func_5291() -> (Tensor[(12, 11, 12), uint16],) {
  %396 = @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%396,)
}

def @func_6886() -> (Tensor[(12, 11, 12), uint16],) {
  %398 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %397 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
    (%397,)
  };
  %398() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_6695() -> (Tensor[(12, 11, 12), uint16],) {
  %400 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %399 = @func_6186() /* ty=Tensor[(12, 11, 12), uint16] */;
    (%399,)
  };
  %400() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_81(%var_79: Tensor[(9, 16, 1), uint64], %var_80: Tensor[(9, 16, 10), uint64]) -> (Tensor[(9, 16, 10), bool],) {
  %404 = fn (%var_72: Tensor[(9, 16, 1), uint64], %var_73: Tensor[(9, 16, 10), uint64]) -> (Tensor[(9, 16, 10), bool],) {
    %401 = cast(%var_72, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
    %402 = cast(%var_73, dtype="bool") /* ty=Tensor[(9, 16, 10), bool] */;
    %403 = greater_equal(%401, %402) /* ty=Tensor[(9, 16, 10), bool] */;
    (%403,)
  };
  %404(%var_79, %var_80) /* ty=(Tensor[(9, 16, 10), bool],) */
}

def @func_7845() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) {
  %405 = @func_5535() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %406 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %407 = %405.0;
  %408 = %406.0;
  (%407, %408)
}

def @func_7698() -> (Tensor[(12, 11, 12), uint16],) {
  %411 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %409 = @func_6554() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
    %410 = %409.1;
    (%410,)
  };
  %411() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8243() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) {
  %412 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %413 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  %414 = %412.0;
  (%413, %414)
}

def @func_7818() -> Tensor[(12, 11, 12), float32] {
  @func_7816() /* ty=Tensor[(12, 11, 12), float32] */
}

def @func_6799() -> (Tensor[(12, 11, 12), uint16],) {
  %417 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %415 = @func_6554() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
    %416 = %415.0;
    (%416,)
  };
  %417() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_7407() -> (Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), uint16]) {
  %422 = fn () -> (Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), uint16]) {
    %418 = @func_6098() /* ty=(Tensor[(5, 5, 8), float64],) */;
    %419 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
    %420 = %418.0;
    %421 = %419.0;
    (%420, %421)
  };
  %422() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), uint16]) */
}

def @func_7771(%var_7770: Tensor[(1040), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32], Tensor[(12, 11, 12), uint16], Tensor[(10, 2, 16), float32], Tensor[(320), float32]) {
  %433 = fn (%var_7724: Tensor[(1040), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32], Tensor[(12, 11, 12), uint16], Tensor[(10, 2, 16), float32], Tensor[(320), float32]) {
    %423 = cast(%var_7724, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %424 = reshape(%423, newshape=[13, 8, 10]) /* ty=Tensor[(13, 8, 10), float32] */;
    %425 = @func_5208() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) */;
    %426 = cast(meta[relay.Constant][29] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %427 = reshape(%426, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), float32] */;
    %428 = @func_6319(%427) /* ty=(Tensor[(10, 2, 16), float32],) */;
    %429 = @func_7648() /* ty=Tensor[(12, 11, 12), uint16] */;
    %430 = @func_6147(%424) /* ty=Tensor[(13, 8, 10), uint32] */;
    %431 = %425.0;
    %432 = %428.0;
    (%429, %430, %var_7724, %431, %432, meta[relay.Constant][29] /* ty=Tensor[(320), float32] */)
  };
  %433(%var_7770) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32], Tensor[(12, 11, 12), uint16], Tensor[(10, 2, 16), float32], Tensor[(320), float32]) */
}

def @func_6453(%var_6431: Tensor[(468), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(12, 11, 12), uint16], Tensor[(468), float32], Tensor[(5, 5, 8), float64], Tensor[(896), float64], Tensor[(30), float64], Tensor[(112), float32], Tensor[(12, 11, 12), uint16]) {
  %434 = cast(meta[relay.Constant][30] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %435 = cast(meta[relay.Constant][31] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %436 = reshape(%434, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %437 = reshape(%435, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %438 = @func_78(%436, %437) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %439 = cast(%var_6431, dtype="float32") /* ty=Tensor[(468), float32] */;
  %440 = cast(%var_6431, dtype="float64") /* ty=Tensor[(468), float64] */;
  %441 = reshape(%439, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float32] */;
  %442 = reshape(%440, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %443 = @func_5854(%441, %442) /* ty=(Tensor[(9, 13, 4), bool], Tensor[(12, 11, 12), uint16]) */;
  %444 = @func_6378() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %445 = cast(meta[relay.Constant][32] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %446 = %438.0;
  %447 = cast(%446, dtype="uint64") /* ty=Tensor[(9, 16, 10), uint64] */;
  %448 = cast(meta[relay.Constant][33] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %449 = reshape(%445, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %450 = reshape(%447, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %451 = reshape(%448, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %452 = @func_3456(%449, %450, %451) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %453 = @func_5619() /* ty=Tensor[(12, 11, 12), uint16] */;
  %454 = %443.1;
  %455 = %444.0;
  %456 = %452.1;
  %457 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%453, %446, meta[relay.Constant][30] /* ty=Tensor[(144), uint64] */, meta[relay.Constant][31] /* ty=Tensor[(1440), uint64] */, %454, %var_6431, %455, %456, meta[relay.Constant][32] /* ty=Tensor[(30), float64] */, meta[relay.Constant][33] /* ty=Tensor[(112), float32] */, %457)
}

def @func_7264(%var_7263: Tensor[(1155), float64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(1404), int8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(9, 12, 13), int32]) {
  %474 = fn (%var_7214: Tensor[(1155), float64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(1404), int8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(9, 12, 13), int32]) {
    %458 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %459 = cast(%var_7214, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %460 = cast(meta[relay.Constant][34] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %461 = reshape(%459, newshape=[1155]) /* ty=Tensor[(1155), float64] */;
    %462 = reshape(%460, newshape=[1404]) /* ty=Tensor[(1404), int8] */;
    %463 = @func_6473(%461, %462) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) */;
    %464 = %463.3;
    %465 = cast(%464, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %466 = cast(meta[relay.Constant][34] /* ty=Tensor[(1404), int8] */, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %467 = cast(%464, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %468 = reshape(%465, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %469 = reshape(%466, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %470 = reshape(%467, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %471 = @func_2056(%468, %469, %470) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
    %472 = %458.0;
    %473 = %471.2;
    (%472, %464, %var_7214, meta[relay.Constant][34] /* ty=Tensor[(1404), int8] */, %473)
  };
  %474(%var_7263) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(1404), int8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(9, 12, 13), int32]) */
}

def @func_8510() -> Tensor[(12, 11, 12), uint16] {
  @func_8508() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_5174(%var_5139: Tensor[(200), float64], %var_5162: Tensor[(112), float32]) -> (Tensor[(8, 12, 6), float64], Tensor[(5, 5, 8), float64], Tensor[(200), float64], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(2, 720), uint64], Tensor[(30), float64], Tensor[(112), float32]) {
  %475 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %476 = sqrt(%475) /* ty=Tensor[(8, 12, 6), float64] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(8, 12, 6), float64] */;
  %478 = cast(%var_5139, dtype="float64") /* ty=Tensor[(200), float64] */;
  %479 = cast(%var_5139, dtype="float64") /* ty=Tensor[(200), float64] */;
  %480 = reshape(%478, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %481 = reshape(%479, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
  %482 = @func_2998(%480, %481) /* ty=(Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) */;
  %483 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %484 = cast(meta[relay.Constant][37] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %485 = reshape(%483, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
  %486 = reshape(%484, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
  %487 = @func_78(%485, %486) /* ty=(Tensor[(9, 16, 10), bool],) */;
  %488 = cast(meta[relay.Constant][38] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %489 = cast(meta[relay.Constant][37] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %490 = cast(%var_5162, dtype="float32") /* ty=Tensor[(112), float32] */;
  %491 = reshape(%488, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %492 = reshape(%489, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %493 = reshape(%490, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %494 = @func_3456(%491, %492, %493) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %495 = asin(%477) /* ty=Tensor[(8, 12, 6), float64] */;
  %496 = %482.0;
  %497 = %487.0;
  %498 = %494.3;
  (%495, %496, %var_5139, %497, meta[relay.Constant][36] /* ty=Tensor[(144), uint64] */, meta[relay.Constant][37] /* ty=Tensor[(1440), uint64] */, %498, meta[relay.Constant][38] /* ty=Tensor[(30), float64] */, %var_5162)
}

def @func_5210() -> (Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) {
  @func_5208() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) */
}

def @func_9490(%var_9472: Tensor[(3, 6, 6), float64]) -> Tensor[(3, 6, 6), float64] {
  %499 = cast(%var_9472, dtype="float64") /* ty=Tensor[(3, 6, 6), float64] */;
  log(%499) /* ty=Tensor[(3, 6, 6), float64] */
}

def @func_8327(%var_8325: Tensor[(1, 6, 2), float64], %var_8326: Tensor[(8, 6, 2), float64]) -> (Tensor[(8, 6, 2), float64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(1, 6, 2), float64], Tensor[(12, 11, 12), uint16]) {
  %510 = fn (%var_8277: Tensor[(1, 6, 2), float64], %var_8278: Tensor[(8, 6, 2), float64]) -> (Tensor[(8, 6, 2), float64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(1, 6, 2), float64], Tensor[(12, 11, 12), uint16]) {
    %500 = cast(%var_8277, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
    %501 = cast(%var_8278, dtype="float64") /* ty=Tensor[(8, 6, 2), float64] */;
    %502 = @func_7952() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %503 = cast(%var_8277, dtype="float64") /* ty=Tensor[(1, 6, 2), float64] */;
    %504 = floor_mod(%500, %501) /* ty=Tensor[(8, 6, 2), float64] */;
    %505 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
    %506 = %502.0;
    %507 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
    %508 = cosh(%503) /* ty=Tensor[(1, 6, 2), float64] */;
    %509 = @func_6043() /* ty=Tensor[(12, 11, 12), uint16] */;
    (%504, %505, %506, %507, %508, %509)
  };
  %510(%var_8325, %var_8326) /* ty=(Tensor[(8, 6, 2), float64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(1, 6, 2), float64], Tensor[(12, 11, 12), uint16]) */
}

def @func_7623() -> (Tensor[(5, 135), float64], Tensor[(5, 135), float64]) {
  @func_7621() /* ty=(Tensor[(5, 135), float64], Tensor[(5, 135), float64]) */
}

def @func_6456(%var_6454: Tensor[(468), float32]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(12, 11, 12), uint16], Tensor[(468), float32], Tensor[(5, 5, 8), float64], Tensor[(896), float64], Tensor[(30), float64], Tensor[(112), float32], Tensor[(12, 11, 12), uint16]) {
  @func_6453(%var_6454) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(12, 11, 12), uint16], Tensor[(468), float32], Tensor[(5, 5, 8), float64], Tensor[(896), float64], Tensor[(30), float64], Tensor[(112), float32], Tensor[(12, 11, 12), uint16]) */
}

def @func_9151(%var_9150: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(1440), uint64], Tensor[(9, 12, 13), int32]) {
  %530 = fn (%var_9126: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(1440), uint64], Tensor[(9, 12, 13), int32]) {
    %511 = @func_9091() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %512 = cast(meta[relay.Constant][39] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %513 = reshape(%512, newshape=[1440]) /* ty=Tensor[(1440), uint64] */;
    %514 = @func_7164(%513) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(1440), uint64]) */;
    %515 = cast(%var_9126, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %516 = cast(%var_9126, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %517 = cast(%var_9126, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %518 = reshape(%515, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %519 = reshape(%516, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %520 = reshape(%517, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %521 = @func_2056(%518, %519, %520) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
    %522 = %521.0;
    %523 = cast(%var_9126, dtype="int32") /* ty=Tensor[(1404), int32] */;
    %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%522, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %527 = %511.0;
    %528 = %514.2;
    %529 = logical_xor(%525, %526) /* ty=Tensor[(9, 12, 13), int32] */;
    (%527, %528, meta[relay.Constant][39] /* ty=Tensor[(1440), uint64] */, %529)
  };
  %530(%var_9150) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(1440), uint64], Tensor[(9, 12, 13), int32]) */
}

def @func_4902(%var_4891: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64],) {
  %531 = cast(%var_4891, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %532 = log10(%531) /* ty=Tensor[(5, 15, 5), float64] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %534 = cos(%533) /* ty=Tensor[(5, 15, 5), float64] */;
  (%534,)
}

def @func_2060(%var_2057: Tensor[(9, 12, 13), int8], %var_2058: Tensor[(9, 12, 13), int8], %var_2059: Tensor[(9, 12, 13), int8]) -> (Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) {
  %550 = fn (%var_2019: Tensor[(9, 12, 13), int8], %var_2020: Tensor[(9, 12, 13), int8], %var_2028: Tensor[(9, 12, 13), int8]) -> (Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) {
    %535 = cast(%var_2020, dtype="int8") /* ty=Tensor[(9, 12, 13), int8] */;
    %536 = shape_of(%var_2019, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%var_2019, dtype="int8") /* ty=Tensor[(9, 12, 13), int8] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %539 = cast(%var_2028, dtype="uint8") /* ty=Tensor[(9, 12, 13), uint8] */;
    %540 = shape_of(%var_2019, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%var_2019, dtype="uint8") /* ty=Tensor[(9, 12, 13), uint8] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %543 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 12, 13), int8] */, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
    %544 = shape_of(%var_2028, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%var_2028, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %547 = right_shift(%537, %538) /* ty=Tensor[(9, 12, 13), int8] */;
    %548 = bitwise_xor(%541, %542) /* ty=Tensor[(9, 12, 13), uint8] */;
    %549 = maximum(%545, %546) /* ty=Tensor[(9, 12, 13), int32] */;
    (%547, %548, %549)
  };
  %550(%var_2057, %var_2058, %var_2059) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */
}

def @func_8892() -> (Tensor[(5, 135), float64],) {
  @func_8890() /* ty=(Tensor[(5, 135), float64],) */
}

def @func_5208() -> (Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) {
  %551 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 135), uint16] */, dtype="uint16") /* ty=Tensor[(5, 135), uint16] */;
  %552 = reshape(%551, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), uint16] */;
  %553 = @func_4654(%552) /* ty=(Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) */;
  %554 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
  %555 = %553.1;
  (%554, %555, meta[relay.Constant][41] /* ty=Tensor[(5, 135), uint16] */)
}

def @func_7816() -> Tensor[(12, 11, 12), float32] {
  %556 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  cosh(%558) /* ty=Tensor[(12, 11, 12), float32] */
}

def @func_5663() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) {
  %559 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %560 = @func_5523() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %561 = @func_5227() /* ty=Tensor[(12, 11, 12), uint16] */;
  %562 = %559.0;
  %563 = %560.0;
  %564 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  (%561, %562, %563, %564)
}

def @func_5964(%var_5952: Tensor[(30), float64], %var_5954: Tensor[(28, 4), float32]) -> (Tensor[(12, 11, 12), int8], Tensor[(896), float64], Tensor[(30), float64], Tensor[(1440), uint64], Tensor[(28, 4), float32]) {
  %565 = @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */;
  %566 = @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */;
  %567 = cast(%566, dtype="int8") /* ty=Tensor[(12, 11, 12), int8] */;
  %568 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%565, dtype="int8") /* ty=Tensor[(12, 11, 12), int8] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %571 = cast(%var_5952, dtype="float64") /* ty=Tensor[(30), float64] */;
  %572 = cast(meta[relay.Constant][42] /* ty=Tensor[(1440), uint64] */, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
  %573 = cast(%var_5954, dtype="float32") /* ty=Tensor[(28, 4), float32] */;
  %574 = reshape(%571, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
  %575 = reshape(%572, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
  %576 = reshape(%573, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %577 = @func_3456(%574, %575, %576) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
  %578 = multiply(%569, %570) /* ty=Tensor[(12, 11, 12), int8] */;
  %579 = %577.1;
  (%578, %579, %var_5952, meta[relay.Constant][42] /* ty=Tensor[(1440), uint64] */, %var_5954)
}

def @func_9574() -> Tensor[(12, 11, 12), uint16] {
  %580 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %580.0
}

def @func_7554() -> (Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) {
  @func_7552() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) */
}

def @func_9092() -> (Tensor[(12, 11, 12), uint16],) {
  %582 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %581 = @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */;
    (%581,)
  };
  %582() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8245() -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) {
  @func_8243() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), bool]) */
}

def @func_8268() -> (Tensor[(5, 5, 8), float32],) {
  @func_8266() /* ty=(Tensor[(5, 5, 8), float32],) */
}

def @func_5857(%var_5855: Tensor[(9, 13, 4), float32], %var_5856: Tensor[(9, 13, 4), float64]) -> (Tensor[(9, 13, 4), bool], Tensor[(12, 11, 12), uint16]) {
  %596 = fn (%var_5828: Tensor[(9, 13, 4), float32], %var_5838: Tensor[(9, 13, 4), float64]) -> (Tensor[(9, 13, 4), bool], Tensor[(12, 11, 12), uint16]) {
    %583 = cast(%var_5828, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
    %584 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(9, 13, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %587 = mod(%585, %586) /* ty=Tensor[(9, 13, 4), float32] */;
    %588 = cast(%587, dtype="float64") /* ty=Tensor[(9, 13, 4), float64] */;
    %589 = sqrt(%588) /* ty=Tensor[(9, 13, 4), float64] */;
    %590 = cast(%var_5838, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
    %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(%589, dtype="bool") /* ty=Tensor[(9, 13, 4), bool] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %594 = equal(%592, %593) /* ty=Tensor[(9, 13, 4), bool] */;
    %595 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
    (%594, %595)
  };
  %596(%var_5855, %var_5856) /* ty=(Tensor[(9, 13, 4), bool], Tensor[(12, 11, 12), uint16]) */
}

def @func_6312() -> (Tensor[(12, 11, 12), uint16],) {
  @func_6310() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8465() -> Tensor[(12, 11, 12), uint16] {
  @func_8463() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9576() -> Tensor[(12, 11, 12), uint16] {
  @func_9574() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_5369(%var_5367: Tensor[(9, 8, 5), uint64], %var_5368: Tensor[(9, 8, 5), uint64]) -> Tensor[(9, 8, 5), uint64] {
  @func_5365(%var_5367, %var_5368) /* ty=Tensor[(9, 8, 5), uint64] */
}

def @func_7648() -> Tensor[(12, 11, 12), uint16] {
  %597 = @func_6798() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %597.0
}

def @func_4963() -> Tensor[(12, 11, 12), uint16] {
  %598 = fn () -> Tensor[(12, 11, 12), uint16] {
    @func_4887() /* ty=Tensor[(12, 11, 12), uint16] */
  };
  %598() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9240() -> (Tensor[(12, 11, 12), uint16], Tensor[(112), float32], Tensor[(112), float32]) {
  %599 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %600 = cast(meta[relay.Constant][44] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %601 = reshape(%600, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %602 = @func_3302(%601) /* ty=(Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) */;
  %603 = %599.0;
  %604 = %602.2;
  (%603, %604, meta[relay.Constant][44] /* ty=Tensor[(112), float32] */)
}

def @func_7364() -> (Tensor[(12, 11, 12), float64],) {
  @func_7362() /* ty=(Tensor[(12, 11, 12), float64],) */
}

def @main() -> Tensor[(12, 11, 12), float32] {
  %605 = @func_7816() /* ty=Tensor[(12, 11, 12), float32] */;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(12, 11, 12), float32] */;
  atan(%606) /* ty=Tensor[(12, 11, 12), float32] */
}

def @func_9547() -> Tensor[(7, 6, 1), bool] {
  %609 = fn () -> Tensor[(7, 6, 1), bool] {
    %607 = cast(-10 /* ty=int64 */, dtype="bool") /* ty=bool */;
    %608 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 6, 1), int64] */, dtype="bool") /* ty=Tensor[(7, 6, 1), bool] */;
    less(%607, %608) /* ty=Tensor[(7, 6, 1), bool] */
  };
  %609() /* ty=Tensor[(7, 6, 1), bool] */
}

def @func_5293() -> (Tensor[(12, 11, 12), uint16],) {
  @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_6378() -> (Tensor[(5, 5, 8), float64],) {
  %610 = @func_6098() /* ty=(Tensor[(5, 5, 8), float64],) */;
  %611 = %610.0;
  (%611,)
}

def @func_4051(%var_4049: Tensor[(16, 12, 8), int64], %var_4050: Tensor[(16, 12, 8), int64]) -> (Tensor[(16, 12, 8), int64],) {
  %617 = fn (%var_4037: Tensor[(16, 12, 8), int64], %var_4038: Tensor[(16, 12, 8), int64]) -> (Tensor[(16, 12, 8), int64],) {
    %612 = cast(%var_4038, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
    %613 = shape_of(%var_4037, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(%var_4037, dtype="int64") /* ty=Tensor[(16, 12, 8), int64] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %616 = logical_xor(%614, %615) /* ty=Tensor[(16, 12, 8), int64] */;
    (%616,)
  };
  %617(%var_4049, %var_4050) /* ty=(Tensor[(16, 12, 8), int64],) */
}

def @func_5341() -> Tensor[(12, 11, 12), uint16] {
  @func_5339() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_2998(%var_2967: Tensor[(5, 5, 8), float64], %var_2968: Tensor[(5, 5, 8), float64]) -> (Tensor[(5, 5, 8), float64], Tensor[(5, 5, 8), float32]) {
  %618 = cast(%var_2968, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %619 = shape_of(%var_2967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%var_2967, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %622 = cast(%var_2968, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
  %623 = cos(%622) /* ty=Tensor[(5, 5, 8), float64] */;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(5, 5, 8), float32] */;
  %625 = floor_mod(%620, %621) /* ty=Tensor[(5, 5, 8), float64] */;
  %626 = rsqrt(%624) /* ty=Tensor[(5, 5, 8), float32] */;
  (%625, %626)
}

def @func_5093(%var_5089: Tensor[(18, 78), int8], %var_5090: Tensor[(384), float32], %var_5091: Tensor[(112), float32], %var_5092: Tensor[(30), float64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(11, 8, 7), float32], Tensor[(616), float32], Tensor[(384), float32], Tensor[(112), float32], Tensor[(18, 78), uint8], Tensor[(308, 2), float32], Tensor[(30), float64], Tensor[(1440, 1), uint64], Tensor[(8, 8, 6), float32], Tensor[(18, 78), float32], Tensor[(144), uint64], Tensor[(5, 15, 5), float64], Tensor[(375), float64]) {
  %685 = fn (%var_4981: Tensor[(18, 78), int8], %var_5004: Tensor[(384), float32], %var_5005: Tensor[(112), float32], %var_5046: Tensor[(30), float64]) -> (Tensor[(12, 11, 12), uint16], Tensor[(11, 8, 7), float32], Tensor[(616), float32], Tensor[(384), float32], Tensor[(112), float32], Tensor[(18, 78), uint8], Tensor[(308, 2), float32], Tensor[(30), float64], Tensor[(1440, 1), uint64], Tensor[(8, 8, 6), float32], Tensor[(18, 78), float32], Tensor[(144), uint64], Tensor[(5, 15, 5), float64], Tensor[(375), float64]) {
    %627 = cast(meta[relay.Constant][46] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
    %628 = cast(%var_5004, dtype="float32") /* ty=Tensor[(384), float32] */;
    %629 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
    %630 = reshape(%627, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
    %631 = reshape(%628, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
    %632 = reshape(%629, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %633 = @func_1864(%630, %631, %632) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
    %634 = cast(%var_4981, dtype="int8") /* ty=Tensor[(18, 78), int8] */;
    %635 = cast(%var_4981, dtype="int8") /* ty=Tensor[(18, 78), int8] */;
    %636 = cast(%var_4981, dtype="int8") /* ty=Tensor[(18, 78), int8] */;
    %637 = reshape(%634, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %638 = reshape(%635, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %639 = reshape(%636, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %640 = @func_2056(%637, %638, %639) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
    %641 = %640.0;
    %642 = cast(%641, dtype="uint8") /* ty=Tensor[(9, 12, 13), uint8] */;
    %643 = shape_of(%var_4981, dtype="int32") /* ty=Tensor[(2), int32] */;
    %644 = cast(%var_4981, dtype="uint8") /* ty=Tensor[(18, 78), uint8] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %646 = cast(%var_5046, dtype="float64") /* ty=Tensor[(30), float64] */;
    %647 = cast(meta[relay.Constant][47] /* ty=Tensor[(1440, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1440, 1), uint64] */;
    %648 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
    %649 = reshape(%646, newshape=[1, 10, 3]) /* ty=Tensor[(1, 10, 3), float64] */;
    %650 = reshape(%647, newshape=[2, 720]) /* ty=Tensor[(2, 720), uint64] */;
    %651 = reshape(%648, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %652 = @func_3456(%649, %650, %651) /* ty=(Tensor[(9, 16, 10), bool], Tensor[(896), float64], Tensor[(144), uint64], Tensor[(2, 720), uint64], Tensor[(308, 2), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(1, 10, 3), float32], Tensor[(?, 10, 3), bool]) */;
    %653 = cast(meta[relay.Constant][46] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
    %654 = cast(%var_5004, dtype="float32") /* ty=Tensor[(384), float32] */;
    %655 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
    %656 = reshape(%653, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
    %657 = reshape(%654, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
    %658 = reshape(%655, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %659 = @func_1864(%656, %657, %658) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
    %660 = cast(%var_4981, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
    %661 = atan(%660) /* ty=Tensor[(18, 78), float32] */;
    %662 = cast(%641, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
    %663 = shape_of(%var_4981, dtype="int32") /* ty=Tensor[(2), int32] */;
    %664 = cast(%var_4981, dtype="bool") /* ty=Tensor[(18, 78), bool] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %666 = logical_and(%664, %665) /* ty=Tensor[(18, 78), bool] */;
    %667 = cast(%666, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
    %668 = shape_of(%661, dtype="int32") /* ty=Tensor[(2), int32] */;
    %669 = cast(%661, dtype="float32") /* ty=Tensor[(18, 78), float32] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %671 = cast(%var_5005, dtype="float32") /* ty=Tensor[(112), float32] */;
    %672 = reshape(%671, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %673 = @func_3302(%672) /* ty=(Tensor[(16, 13, 15), float32], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64]) */;
    %674 = cast(meta[relay.Constant][48] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
    %675 = reshape(%674, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float64] */;
    %676 = @func_4902(%675) /* ty=(Tensor[(5, 15, 5), float64],) */;
    %677 = @func_4962() /* ty=Tensor[(12, 11, 12), uint16] */;
    %678 = %633.0;
    %679 = maximum(%644, %645) /* ty=Tensor[(18, 78), uint8] */;
    %680 = %652.4;
    %681 = %659.1;
    %682 = divide(%669, %670) /* ty=Tensor[(18, 78), float32] */;
    %683 = %673.3;
    %684 = %676.0;
    (%677, %678, meta[relay.Constant][46] /* ty=Tensor[(616), float32] */, %var_5004, %var_5005, %679, %680, %var_5046, meta[relay.Constant][47] /* ty=Tensor[(1440, 1), uint64] */, %681, %682, %683, %684, meta[relay.Constant][48] /* ty=Tensor[(375), float64] */)
  };
  %685(%var_5089, %var_5090, %var_5091, %var_5092) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(11, 8, 7), float32], Tensor[(616), float32], Tensor[(384), float32], Tensor[(112), float32], Tensor[(18, 78), uint8], Tensor[(308, 2), float32], Tensor[(30), float64], Tensor[(1440, 1), uint64], Tensor[(8, 8, 6), float32], Tensor[(18, 78), float32], Tensor[(144), uint64], Tensor[(5, 15, 5), float64], Tensor[(375), float64]) */
}

def @func_7362() -> (Tensor[(12, 11, 12), float64],) {
  %686 = @func_7334() /* ty=Tensor[(12, 11, 12), float64] */;
  (%686,)
}

def @func_1864(%var_1831: Tensor[(11, 8, 7), float32], %var_1845: Tensor[(6, 64), float32], %var_1848: Tensor[(112), float32]) -> (Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) {
  %687 = cast(%var_1831, dtype="float32") /* ty=Tensor[(11, 8, 7), float32] */;
  %688 = cast(%var_1845, dtype="float32") /* ty=Tensor[(6, 64), float32] */;
  %689 = reshape(%688, newshape=[8, 8, 6]) /* ty=Tensor[(8, 8, 6), float32] */;
  %690 = @func_240(%689) /* ty=(Tensor[(8, 8, 6), float32], Tensor[(8, 8, 6), float64]) */;
  %691 = cast(%var_1848, dtype="float32") /* ty=Tensor[(112), float32] */;
  %692 = cast(%var_1848, dtype="float32") /* ty=Tensor[(112), float32] */;
  %693 = cast(meta[relay.Constant][49] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %694 = reshape(%691, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %695 = reshape(%692, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %696 = reshape(%693, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %697 = @func_700(%694, %695, %696) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
  %698 = log(%687) /* ty=Tensor[(11, 8, 7), float32] */;
  %699 = %690.0;
  %700 = %697.3;
  (%698, %699, %var_1845, %700, %var_1848, meta[relay.Constant][49] /* ty=Tensor[(144), uint64] */)
}

def @func_7650() -> Tensor[(12, 11, 12), uint16] {
  @func_7648() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_7205() -> (Tensor[(12, 11, 12), uint16],) {
  %703 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %701 = @func_5554() /* ty=(Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) */;
    %702 = %701.1;
    (%702,)
  };
  %703() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_5554() -> (Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16]) {
  %704 = @func_5208() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(5, 135), uint16]) */;
  %705 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %706 = %704.2;
  %707 = %705.0;
  (%706, %707)
}

def @func_7953() -> (Tensor[(12, 11, 12), uint16],) {
  %710 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %708 = @func_6310() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %709 = %708.0;
    (%709,)
  };
  %710() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_9493(%var_9491: Tensor[(3, 6, 6), float64]) -> Tensor[(3, 6, 6), float64] {
  @func_9490(%var_9491) /* ty=Tensor[(3, 6, 6), float64] */
}

def @func_8504(%var_8502: Tensor[(112), int8], %var_8503: Tensor[(896), int8]) -> (Tensor[(12, 11, 12), int64], Tensor[(12, 11, 12), uint16], Tensor[(112), int8], Tensor[(896), int8], Tensor[(12, 11, 12), float32]) {
  @func_8500(%var_8502, %var_8503) /* ty=(Tensor[(12, 11, 12), int64], Tensor[(12, 11, 12), uint16], Tensor[(112), int8], Tensor[(896), int8], Tensor[(12, 11, 12), float32]) */
}

def @func_9531(%var_9524: Tensor[(675), uint16]) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 16, 5), float64], Tensor[(60, 16), float64], Tensor[(675), uint16], Tensor[(12, 11, 12), float64]) {
  %711 = @func_7952() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %712 = cast(meta[relay.Constant][50] /* ty=Tensor[(60, 16), float64] */, dtype="float64") /* ty=Tensor[(60, 16), float64] */;
  %713 = cast(%var_9524, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %714 = reshape(%712, newshape=[12, 16, 5]) /* ty=Tensor[(12, 16, 5), float64] */;
  %715 = reshape(%713, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %716 = @func_7899(%714, %715) /* ty=(Tensor[(12, 16, 5), float64], Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(675), uint16], Tensor[(12, 16, 5), bool]) */;
  %717 = @func_7952() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %718 = %717.0;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
  %720 = %711.0;
  %721 = %716.0;
  %722 = acosh(%719) /* ty=Tensor[(12, 11, 12), float64] */;
  (%720, %721, meta[relay.Constant][50] /* ty=Tensor[(60, 16), float64] */, %var_9524, %722)
}

def @func_9620() -> (Tensor[(16, 13, 15), float32],) {
  %723 = @func_9456() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) */;
  %724 = %723.1;
  %725 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 13, 15), float32] */, dtype="float32") /* ty=Tensor[(16, 13, 15), float32] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="float32") /* ty=Tensor[(16, 13, 15), float32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %729 = floor_divide(%727, %728) /* ty=Tensor[(16, 13, 15), float32] */;
  (%729,)
}

def @func_10114() -> (Tensor[(5, 5, 8), float64],) {
  @func_10112() /* ty=(Tensor[(5, 5, 8), float64],) */
}

def @func_10066(%var_10064: Tensor[(14, 11, 2), float64], %var_10065: Tensor[(384), float32]) -> (Tensor[(14, 11, 2), bool], Tensor[(1440, 1), uint64], Tensor[(1404), int8], Tensor[(384), float32], Tensor[(112), float32], Tensor[(30), float64]) {
  @func_10062(%var_10064, %var_10065) /* ty=(Tensor[(14, 11, 2), bool], Tensor[(1440, 1), uint64], Tensor[(1404), int8], Tensor[(384), float32], Tensor[(112), float32], Tensor[(30), float64]) */
}

def @func_7596(%var_7594: uint8, %var_7595: Tensor[(14, 10, 8), uint8]) -> Tensor[(14, 10, 8), uint8] {
  %732 = fn (%var_7583: uint8, %var_7584: Tensor[(14, 10, 8), uint8]) -> Tensor[(14, 10, 8), uint8] {
    %730 = cast(%var_7583, dtype="uint8") /* ty=uint8 */;
    %731 = cast(%var_7584, dtype="uint8") /* ty=Tensor[(14, 10, 8), uint8] */;
    left_shift(%730, %731) /* ty=Tensor[(14, 10, 8), uint8] */
  };
  %732(%var_7594, %var_7595) /* ty=Tensor[(14, 10, 8), uint8] */
}

def @func_9277() -> (Tensor[(12, 11, 12), uint16],) {
  @func_9275() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_8778() -> (Tensor[(12, 11, 12), float64], Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32]) {
  %740 = fn () -> (Tensor[(12, 11, 12), float64], Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32]) {
    %733 = @func_7362() /* ty=(Tensor[(12, 11, 12), float64],) */;
    %734 = @func_7204() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %735 = cast(meta[relay.Constant][52] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %736 = reshape(%735, newshape=[13, 8, 10]) /* ty=Tensor[(13, 8, 10), float32] */;
    %737 = %733.0;
    %738 = %734.0;
    %739 = @func_6147(%736) /* ty=Tensor[(13, 8, 10), uint32] */;
    (%737, %738, %739, meta[relay.Constant][52] /* ty=Tensor[(1040), float32] */)
  };
  %740() /* ty=(Tensor[(12, 11, 12), float64], Tensor[(12, 11, 12), uint16], Tensor[(13, 8, 10), uint32], Tensor[(1040), float32]) */
}

def @func_7903(%var_7901: Tensor[(12, 16, 5), float64], %var_7902: Tensor[(675), uint16]) -> (Tensor[(12, 16, 5), float64], Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(675), uint16], Tensor[(12, 16, 5), bool]) {
  @func_7899(%var_7901, %var_7902) /* ty=(Tensor[(12, 16, 5), float64], Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(675), uint16], Tensor[(12, 16, 5), bool]) */
}

def @func_5620() -> Tensor[(12, 11, 12), uint16] {
  %742 = fn () -> Tensor[(12, 11, 12), uint16] {
    %741 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %741.0
  };
  %742() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_7517() -> Tensor[(12, 11, 12), uint16] {
  @func_7515() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_9960(%var_9818: Tensor[(15, 15, 1), float64], %var_9858: uint8, %var_9859: Tensor[(1120), uint8]) -> (Tensor[(15, 15, 1), float64], Tensor[(7, 6, 1), bool], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8], Tensor[(15, 15, 1), float32], Tensor[(12, 11, 12), uint16], Tensor[(9, 16, 10), bool], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(15, 15, ?), int32], Tensor[(15, 15, ?), uint64], Tensor[(15, 15, ?), uint32]) {
  %743 = cast(%var_9818, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %744 = cast(%var_9858, dtype="uint8") /* ty=uint8 */;
  %745 = cast(%var_9859, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %746 = reshape(%744, newshape=[]) /* ty=uint8 */;
  %747 = reshape(%745, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint8] */;
  %748 = cast(%var_9818, dtype="float32") /* ty=Tensor[(15, 15, 1), float32] */;
  %749 = sqrt(%748) /* ty=Tensor[(15, 15, 1), float32] */;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(15, 15, 1), float32] */;
  %751 = @func_7697() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %752 = cast(meta[relay.Constant][53] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %753 = cast(meta[relay.Constant][53] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %754 = cast(meta[relay.Constant][54] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %755 = reshape(%752, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %756 = reshape(%753, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
  %757 = reshape(%754, newshape=[144]) /* ty=Tensor[(144), uint64] */;
  %758 = @func_700(%755, %756, %757) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
  %759 = @func_9456() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(16, 13, 15), float32], Tensor[(112), float32]) */;
  %760 = cast(%var_9818, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %761 = sigmoid(%760) /* ty=Tensor[(15, 15, 1), float64] */;
  %762 = cast(%749, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %763 = tan(%762) /* ty=Tensor[(15, 15, 1), float64] */;
  %764 = cast(%var_9818, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %768 = not_equal(%766, %767) /* ty=Tensor[(15, 15, ?), bool] */;
  %769 = cast(%768, dtype="int32") /* ty=Tensor[(15, 15, ?), int32] */;
  %770 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%761, dtype="int32") /* ty=Tensor[(15, 15, 1), int32] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %773 = cast(%749, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %774 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%761, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = logical_or(%775, %776) /* ty=Tensor[(15, 15, ?), bool] */;
  %778 = cast(%749, dtype="int8") /* ty=Tensor[(15, 15, 1), int8] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="int8") /* ty=Tensor[(15, 15, ?), int8] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %782 = bitwise_xor(%780, %781) /* ty=Tensor[(15, 15, ?), int8] */;
  %783 = cast(%777, dtype="uint64") /* ty=Tensor[(15, 15, ?), uint64] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="uint64") /* ty=Tensor[(15, 15, ?), uint64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %787 = cast(%763, dtype="float64") /* ty=Tensor[(15, 15, 1), float64] */;
  %788 = acosh(%787) /* ty=Tensor[(15, 15, 1), float64] */;
  %789 = cast(%777, dtype="uint32") /* ty=Tensor[(15, 15, ?), uint32] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="uint32") /* ty=Tensor[(15, 15, 1), uint32] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %793 = atan(%743) /* ty=Tensor[(15, 15, 1), float64] */;
  %794 = @func_9546() /* ty=Tensor[(7, 6, 1), bool] */;
  %795 = @func_7593(%746, %747) /* ty=Tensor[(14, 10, 8), uint8] */;
  %796 = log10(%750) /* ty=Tensor[(15, 15, 1), float32] */;
  %797 = %751.0;
  %798 = %758.1;
  %799 = %759.0;
  %800 = @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */;
  %801 = bitwise_and(%771, %772) /* ty=Tensor[(15, 15, ?), int32] */;
  %802 = logical_xor(%785, %786) /* ty=Tensor[(15, 15, ?), uint64] */;
  %803 = bitwise_or(%791, %792) /* ty=Tensor[(15, 15, ?), uint32] */;
  (%793, %794, %795, %var_9858, %var_9859, %796, %797, %798, meta[relay.Constant][53] /* ty=Tensor[(112), float32] */, meta[relay.Constant][54] /* ty=Tensor[(144), uint64] */, %799, %800, %801, %802, %803)
}

def @func_2739(%var_2734: Tensor[(14, 16, 4), float64], %var_2735: Tensor[(144), uint64], %var_2736: Tensor[(1440), uint64], %var_2737: Tensor[(616), float32], %var_2738: Tensor[(112), float32]) -> (Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) {
  %854 = fn (%var_2638: Tensor[(14, 16, 4), float64], %var_2662: Tensor[(144), uint64], %var_2663: Tensor[(1440), uint64], %var_2676: Tensor[(616), float32], %var_2678: Tensor[(112), float32]) -> (Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) {
    %804 = cast(%var_2676, dtype="float32") /* ty=Tensor[(616), float32] */;
    %805 = cast(meta[relay.Constant][55] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
    %806 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
    %807 = reshape(%804, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
    %808 = reshape(%805, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
    %809 = reshape(%806, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %810 = @func_1864(%807, %808, %809) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
    %811 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
    %812 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
    %813 = %810.5;
    %814 = cast(%813, dtype="uint64") /* ty=Tensor[(144), uint64] */;
    %815 = reshape(%811, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
    %816 = reshape(%812, newshape=[2, 7, 8]) /* ty=Tensor[(2, 7, 8), float32] */;
    %817 = reshape(%814, newshape=[144]) /* ty=Tensor[(144), uint64] */;
    %818 = @func_700(%815, %816, %817) /* ty=(Tensor[(2, 7, 8), float32], Tensor[(9, 16, 10), bool], Tensor[(144), uint64], Tensor[(720, 2), float64]) */;
    %819 = cast(%var_2676, dtype="float32") /* ty=Tensor[(616), float32] */;
    %820 = cast(meta[relay.Constant][55] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
    %821 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
    %822 = reshape(%819, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
    %823 = reshape(%820, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
    %824 = reshape(%821, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %825 = @func_1864(%822, %823, %824) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
    %826 = cast(%var_2676, dtype="float32") /* ty=Tensor[(616), float32] */;
    %827 = cast(meta[relay.Constant][55] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
    %828 = cast(%var_2678, dtype="float32") /* ty=Tensor[(112), float32] */;
    %829 = reshape(%826, newshape=[11, 8, 7]) /* ty=Tensor[(11, 8, 7), float32] */;
    %830 = reshape(%827, newshape=[6, 64]) /* ty=Tensor[(6, 64), float32] */;
    %831 = reshape(%828, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %832 = @func_1864(%829, %830, %831) /* ty=(Tensor[(11, 8, 7), float32], Tensor[(8, 8, 6), float32], Tensor[(6, 64), float32], Tensor[(720, 2), float64], Tensor[(112), float32], Tensor[(144), uint64]) */;
    %833 = %832.3;
    %834 = cast(%var_2662, dtype="uint64") /* ty=Tensor[(144), uint64] */;
    %835 = cast(%var_2663, dtype="uint64") /* ty=Tensor[(1440), uint64] */;
    %836 = reshape(%834, newshape=[9, 16, 1]) /* ty=Tensor[(9, 16, 1), uint64] */;
    %837 = reshape(%835, newshape=[9, 16, 10]) /* ty=Tensor[(9, 16, 10), uint64] */;
    %838 = @func_78(%836, %837) /* ty=(Tensor[(9, 16, 10), bool],) */;
    %839 = %838.0;
    %840 = cast(%839, dtype="bool") /* ty=Tensor[(9, 16, 10), bool] */;
    %841 = shape_of(%833, dtype="int32") /* ty=Tensor[(2), int32] */;
    %842 = cast(%833, dtype="bool") /* ty=Tensor[(720, 2), bool] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %844 = cast(%var_2638, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
    %845 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(14, 16, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %846 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 16, 4), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 4), float64] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %848 = power(%846, %847) /* ty=Tensor[(14, 16, 4), float64] */;
    %849 = cast(%848, dtype="float32") /* ty=Tensor[(14, 16, 4), float32] */;
    %850 = %818.1;
    %851 = %825.3;
    %852 = less_equal(%842, %843) /* ty=Tensor[(720, 2), bool] */;
    %853 = sinh(%849) /* ty=Tensor[(14, 16, 4), float32] */;
    (%var_2662, %var_2663, %var_2676, meta[relay.Constant][55] /* ty=Tensor[(12, 32), float32] */, %var_2678, %813, %850, %851, %852, %853)
  };
  %854(%var_2734, %var_2735, %var_2736, %var_2737, %var_2738) /* ty=(Tensor[(144), uint64], Tensor[(1440), uint64], Tensor[(616), float32], Tensor[(12, 32), float32], Tensor[(112), float32], Tensor[(144), uint64], Tensor[(9, 16, 10), bool], Tensor[(720, 2), float64], Tensor[(720, 2), bool], Tensor[(14, 16, 4), float32]) */
}

def @func_7035(%var_7034: Tensor[(3, 468), int8]) -> (Tensor[(5, 135), uint8], Tensor[(5, 5, 8), float64], Tensor[(9, 12, 13), int8], Tensor[(3, 468), int8], Tensor[(5, 5, 8), bool]) {
  %870 = fn (%var_7027: Tensor[(3, 468), int8]) -> (Tensor[(5, 135), uint8], Tensor[(5, 5, 8), float64], Tensor[(9, 12, 13), int8], Tensor[(3, 468), int8], Tensor[(5, 5, 8), bool]) {
    %855 = @func_6861() /* ty=(Tensor[(5, 135), uint8],) */;
    %856 = cast(%var_7027, dtype="int8") /* ty=Tensor[(3, 468), int8] */;
    %857 = cast(%var_7027, dtype="int8") /* ty=Tensor[(3, 468), int8] */;
    %858 = cast(%var_7027, dtype="int8") /* ty=Tensor[(3, 468), int8] */;
    %859 = reshape(%856, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %860 = reshape(%857, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %861 = reshape(%858, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), int8] */;
    %862 = @func_2056(%859, %860, %861) /* ty=(Tensor[(9, 12, 13), int8], Tensor[(9, 12, 13), uint8], Tensor[(9, 12, 13), int32]) */;
    %863 = @func_6482() /* ty=Tensor[(5, 5, 8), float64] */;
    %864 = cast(%863, dtype="float64") /* ty=Tensor[(5, 5, 8), float64] */;
    %865 = reshape(%864, newshape=[5, 5, 8]) /* ty=Tensor[(5, 5, 8), float64] */;
    %866 = @func_6951(%865) /* ty=(Tensor[(5, 5, 8), bool],) */;
    %867 = %855.0;
    %868 = %862.0;
    %869 = %866.0;
    (%867, %863, %868, %var_7027, %869)
  };
  %870(%var_7034) /* ty=(Tensor[(5, 135), uint8], Tensor[(5, 5, 8), float64], Tensor[(9, 12, 13), int8], Tensor[(3, 468), int8], Tensor[(5, 5, 8), bool]) */
}

def @func_9329() -> Tensor[(12, 11, 12), uint16] {
  %871 = @func_6694() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %871.0
}

def @func_8637() -> Tensor[(12, 11, 12), bool] {
  %880 = fn () -> Tensor[(12, 11, 12), bool] {
    %872 = @func_7406() /* ty=(Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), uint16]) */;
    %873 = %872.1;
    %874 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %875 = %874.0;
    %876 = cast(%875, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %877 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %878 = cast(%873, dtype="bool") /* ty=Tensor[(12, 11, 12), bool] */;
    %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%878, %879) /* ty=Tensor[(12, 11, 12), bool] */
  };
  %880() /* ty=Tensor[(12, 11, 12), bool] */
}

def @func_8216(%var_8156: Tensor[(1, 10, 13), uint64], %var_8157: Tensor[(3, 10, 13), uint64], %var_8205: uint8) -> (Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(3, 10, 13), uint8], Tensor[(14, 10, 8), uint8], uint8, Tensor[(1120), uint8]) {
  %881 = @func_5663() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16], Tensor[(12, 11, 12), uint16]) */;
  %882 = @func_7122() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %883 = cast(%var_8156, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %884 = tan(%883) /* ty=Tensor[(1, 10, 13), float32] */;
  %885 = cast(%var_8156, dtype="uint64") /* ty=Tensor[(1, 10, 13), uint64] */;
  %886 = cast(%var_8157, dtype="uint64") /* ty=Tensor[(3, 10, 13), uint64] */;
  %887 = bitwise_or(%885, %886) /* ty=Tensor[(3, 10, 13), uint64] */;
  %888 = cast(%884, dtype="uint8") /* ty=Tensor[(1, 10, 13), uint8] */;
  %889 = cast(%887, dtype="uint8") /* ty=Tensor[(3, 10, 13), uint8] */;
  %890 = cast(%var_8205, dtype="uint8") /* ty=uint8 */;
  %891 = cast(meta[relay.Constant][57] /* ty=Tensor[(1120), uint8] */, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %892 = reshape(%890, newshape=[]) /* ty=uint8 */;
  %893 = reshape(%891, newshape=[14, 10, 8]) /* ty=Tensor[(14, 10, 8), uint8] */;
  %894 = %881.1;
  %895 = %882.0;
  %896 = bitwise_xor(%888, %889) /* ty=Tensor[(3, 10, 13), uint8] */;
  %897 = @func_7593(%892, %893) /* ty=Tensor[(14, 10, 8), uint8] */;
  (%894, %895, %896, %897, %var_8205, meta[relay.Constant][57] /* ty=Tensor[(1120), uint8] */)
}

def @func_6187() -> Tensor[(12, 11, 12), uint16] {
  %899 = fn () -> Tensor[(12, 11, 12), uint16] {
    %898 = @func_5446() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %898.0
  };
  %899() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_5524() -> (Tensor[(12, 11, 12), uint16],) {
  %902 = fn () -> (Tensor[(12, 11, 12), uint16],) {
    %900 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %901 = %900.0;
    (%901,)
  };
  %902() /* ty=(Tensor[(12, 11, 12), uint16],) */
}

def @func_7552() -> (Tensor[(5, 5, 8), float64], Tensor[(12, 11, 12), float64]) {
  %903 = @func_5291() /* ty=(Tensor[(12, 11, 12), uint16],) */;
  %904 = %903.0;
  %905 = cast(%904, dtype="float64") /* ty=Tensor[(12, 11, 12), float64] */;
  %906 = @func_6482() /* ty=Tensor[(5, 5, 8), float64] */;
  %907 = asinh(%905) /* ty=Tensor[(12, 11, 12), float64] */;
  (%906, %907)
}

def @func_6380() -> (Tensor[(5, 5, 8), float64],) {
  @func_6378() /* ty=(Tensor[(5, 5, 8), float64],) */
}

def @func_6476(%var_6474: Tensor[(1155), float64], %var_6475: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) {
  %918 = fn (%var_6466: Tensor[(1155), float64], %var_6467: Tensor[(1404), int8]) -> (Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) {
    %908 = @func_6310() /* ty=(Tensor[(12, 11, 12), uint16],) */;
    %909 = cast(%var_6466, dtype="float64") /* ty=Tensor[(1155), float64] */;
    %910 = cast(%var_6467, dtype="int8") /* ty=Tensor[(1404), int8] */;
    %911 = reshape(%909, newshape=[7, 11, 15]) /* ty=Tensor[(7, 11, 15), float64] */;
    %912 = reshape(%910, newshape=[702, 2]) /* ty=Tensor[(702, 2), int8] */;
    %913 = @func_4226(%911, %912) /* ty=(Tensor[(9, 12, 13), uint8], Tensor[(702, 2), int8], Tensor[(7, 11, 15), float32], Tensor[(7, 11, 15), float32]) */;
    %914 = @func_6351() /* ty=(Tensor[(12, 11, 12), bool],) */;
    %915 = %908.0;
    %916 = %913.0;
    %917 = %914.0;
    (%915, %916, %var_6466, %var_6467, %917)
  };
  %918(%var_6474, %var_6475) /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(9, 12, 13), uint8], Tensor[(1155), float64], Tensor[(1404), int8], Tensor[(12, 11, 12), bool]) */
}

def @func_7899(%var_7852: Tensor[(12, 16, 5), float64], %var_7887: Tensor[(675), uint16]) -> (Tensor[(12, 16, 5), float64], Tensor[(12, 11, 12), uint16], Tensor[(5, 15, 9), bool], Tensor[(675), uint16], Tensor[(12, 16, 5), bool]) {
  %919 = cast(%var_7852, dtype="float64") /* ty=Tensor[(12, 16, 5), float64] */;
  %920 = cast(%var_7887, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %921 = reshape(%920, newshape=[5, 15, 9]) /* ty=Tensor[(5, 15, 9), uint16] */;
  %922 = @func_4654(%921) /* ty=(Tensor[(5, 15, 9), uint16], Tensor[(5, 15, 9), bool]) */;
  %923 = cast(meta[relay.Constant][58] /* ty=Tensor[(12, 16, 5), float64] */, dtype="bool") /* ty=Tensor[(12, 16, 5), bool] */;
  %924 = shape_of(%var_7852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %925 = cast(%var_7852, dtype="bool") /* ty=Tensor[(12, 16, 5), bool] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %927 = exp(%919) /* ty=Tensor[(12, 16, 5), float64] */;
  %928 = @func_7515() /* ty=Tensor[(12, 11, 12), uint16] */;
  %929 = %922.1;
  %930 = logical_and(%925, %926) /* ty=Tensor[(12, 16, 5), bool] */;
  (%927, %928, %929, %var_7887, %930)
}

def @func_9000() -> Tensor[(12, 11, 12), uint16] {
  %931 = fn () -> Tensor[(12, 11, 12), uint16] {
    @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */
  };
  %931() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_6098() -> (Tensor[(5, 5, 8), float64],) {
  %932 = @func_5734() /* ty=(Tensor[(12, 11, 12), uint16], Tensor[(5, 5, 8), float64], Tensor[(10, 20), float64]) */;
  %933 = %932.1;
  (%933,)
}

def @func_8355() -> Tensor[(12, 11, 12), uint16] {
  %934 = fn () -> Tensor[(12, 11, 12), uint16] {
    @func_6298() /* ty=Tensor[(12, 11, 12), uint16] */
  };
  %934() /* ty=Tensor[(12, 11, 12), uint16] */
}

def @func_6954(%var_6952: Tensor[(5, 5, 8), float64]) -> (Tensor[(5, 5, 8), bool],) {
  @func_6951(%var_6952) /* ty=(Tensor[(5, 5, 8), bool],) */
}

def @func_8069(%var_8066: Tensor[(5, 135), uint8], %var_8067: Tensor[(385, 3), float64], %var_8068: Tensor[(1404), int8]) -> (Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 135), float64], Tensor[(12, 11, 12), float32], Tensor[(5, 5, 8), float64]) {
  @func_8064(%var_8066, %var_8067, %var_8068) /* ty=(Tensor[(5, 135), uint16], Tensor[(12, 11, 12), uint16], Tensor[(385, 3), float64], Tensor[(1404), int8], Tensor[(5, 135), float64], Tensor[(12, 11, 12), float32], Tensor[(5, 5, 8), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen525/build/output.py", line 2390, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:28:12] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

