==========mod==========
#[version = "0.0.5"]
def @func_4619() -> Tensor[(6, 15, 9), float64] {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 9), float64] */;
  log2(%0) /* ty=Tensor[(6, 15, 9), float64] */
}

def @func_5092(%var_5064: Tensor[(6, 15, 9), float64]) -> (Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) {
  %1 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
  %2 = cast(%var_5064, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %7 = reshape(%6, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %8 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %9 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %10 = cast(%var_5064, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
  %11 = bitwise_and(%4, %5) /* ty=Tensor[(6, 15, 9), int8] */;
  %12 = @func_2410(%7) /* ty=Tensor[(11, 14, 5), int64] */;
  %13 = %8.2;
  %14 = %9.0;
  %15 = sigmoid(%10) /* ty=Tensor[(6, 15, 9), float32] */;
  (%11, %12, meta[relay.Constant][1] /* ty=Tensor[(770), float32] */, %13, %14, %15)
}

def @func_10733() -> Tensor[(11, 14, 5), float32] {
  %16 = @func_4341() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) */;
  %16.0
}

def @func_8444() -> (Tensor[(3, 11, 9), bool],) {
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 9), float32] */;
  %18 = cosh(%17) /* ty=Tensor[(3, 11, 9), float32] */;
  %19 = cast(%18, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %20 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 11, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = logical_and(%21, %22) /* ty=Tensor[(3, 11, 9), bool] */;
  (%23,)
}

def @func_847(%var_839: Tensor[(1, 1, 8), uint8]) -> (Tensor[(1, 1, 8), float64],) {
  %24 = cast(meta[relay.Constant][3] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %25 = cast(%var_839, dtype="uint8") /* ty=Tensor[(1, 1, 8), uint8] */;
  %26 = multiply(%24, %25) /* ty=Tensor[(1, 1, 8), uint8] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(1, 1, 8), float64] */;
  %28 = log(%27) /* ty=Tensor[(1, 1, 8), float64] */;
  (%28,)
}

def @func_7950() -> Tensor[(11, 14, 5), float32] {
  %29 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %29.1
}

def @func_9564() -> Tensor[(11, 14, 5), float32] {
  %30 = @func_3932() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %30.0
}

def @func_8899() -> Tensor[(56), int8] {
  @func_6466() /* ty=Tensor[(56), int8] */
}

def @func_4576() -> Tensor[(11, 14, 5), float32] {
  @func_3160() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_4341() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) {
  %31 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %32 = @func_3919() /* ty=(Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) */;
  %33 = %31.0;
  %34 = %32.0;
  (%33, %34)
}

def @func_2745(%var_2737: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) {
  %35 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %36 = cast(%var_2737, dtype="int8") /* ty=Tensor[(56), int8] */;
  %37 = reshape(%36, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %38 = @func_1602(%37) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %39 = %35.1;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %42 = reshape(%40, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %43 = reshape(%41, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %44 = @func_1981(%42, %43) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
  %45 = %44.2;
  %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(336), float32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="uint32") /* ty=Tensor[(7, 12, 4), uint32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %50 = %38.0;
  %51 = multiply(%48, %49) /* ty=Tensor[(7, 12, 4), uint32] */;
  (%39, %50, %var_2737, %51)
}

def @func_7349() -> Tensor[(20), float64] {
  %52 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %52.2
}

def @func_8365(%var_8362: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) {
  %53 = cast(%var_8362, dtype="int8") /* ty=Tensor[(56), int8] */;
  %54 = reshape(%53, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %55 = @func_2288(%54) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
  %56 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
  %57 = %55.1;
  (%56, %57, %var_8362)
}

def @func_1756(%var_1729: Tensor[(336), float32], %var_1750: Tensor[(11, 14, 5), float32]) -> (Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) {
  %58 = cast(%var_1729, dtype="float32") /* ty=Tensor[(336), float32] */;
  %59 = reshape(%58, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float32] */;
  %60 = @func_884(%59) /* ty=(Tensor[(7, 12, 4), float32],) */;
  %61 = %60.0;
  %62 = cast(%var_1729, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="uint8") /* ty=Tensor[(7, 12, 4), uint8] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %66 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %67 = cast(%var_1750, dtype="uint8") /* ty=Tensor[(11, 14, 5), uint8] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="uint8") /* ty=Tensor[(11, 14, 5), uint8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %71 = subtract(%64, %65) /* ty=Tensor[(7, 12, 4), uint8] */;
  %72 = right_shift(%69, %70) /* ty=Tensor[(11, 14, 5), uint8] */;
  (%71, %72)
}

def @func_7853(%var_7832: Tensor[(9, 7, 9), int16]) -> (Tensor[(9, 7, 9), bool], Tensor[(11, 14, 5), int64], Tensor[(1, 810), float64]) {
  %73 = cast(%var_7832, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %74 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(9, 7, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 7, 9), int16] */, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %77 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 810), float64] */, dtype="float64") /* ty=Tensor[(1, 810), float64] */;
  %78 = reshape(%77, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), float64] */;
  %79 = @func_5092(%78) /* ty=(Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) */;
  %80 = less(%75, %76) /* ty=Tensor[(9, 7, 9), bool] */;
  %81 = %79.1;
  (%80, %81, meta[relay.Constant][6] /* ty=Tensor[(1, 810), float64] */)
}

def @func_6306() -> Tensor[(56), int8] {
  %82 = @func_4162() /* ty=(Tensor[(56), int8],) */;
  %82.0
}

def @func_9391() -> (Tensor[(11, 14, 5), float32],) {
  %83 = @func_9096() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %84 = %83.0;
  (%84,)
}

def @func_7172() -> Tensor[(11, 14, 5), float32] {
  %85 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %85.0
}

def @func_8864(%var_8827: Tensor[(2, 13, 16), float64], %var_8831: Tensor[(20), float64]) -> (Tensor[(?, 10, 2), bool], Tensor[(20), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(1, 288), float32], Tensor[(2, 13, 16), int8]) {
  %86 = cast(%var_8831, dtype="float64") /* ty=Tensor[(20), float64] */;
  %87 = reshape(%86, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
  %88 = @func_4425(%87) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 10, 2), bool], Tensor[(11, 14, 5), float32]) */;
  %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
  %90 = reshape(%89, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %91 = @func_2328(%90) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(6, 16, 3), float32], Tensor[(288), float32]) */;
  %92 = cast(%var_8827, dtype="float64") /* ty=Tensor[(2, 13, 16), float64] */;
  %93 = tan(%92) /* ty=Tensor[(2, 13, 16), float64] */;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(2, 13, 16), float32] */;
  %95 = atan(%94) /* ty=Tensor[(2, 13, 16), float32] */;
  %96 = cast(%var_8827, dtype="int8") /* ty=Tensor[(2, 13, 16), int8] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="int8") /* ty=Tensor[(2, 13, 16), int8] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %100 = %88.1;
  %101 = @func_5897() /* ty=Tensor[(616), float64] */;
  %102 = %91.0;
  %103 = bitwise_xor(%98, %99) /* ty=Tensor[(2, 13, 16), int8] */;
  (%100, %var_8831, %101, %102, meta[relay.Constant][7] /* ty=Tensor[(1, 288), float32] */, %103)
}

def @func_2598() -> (Tensor[(11, 14, 5), float32],) {
  %104 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %105 = %104.0;
  (%105,)
}

def @func_3932() -> (Tensor[(11, 14, 5), float32],) {
  %106 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %107 = %106.0;
  (%107,)
}

def @func_6342() -> Tensor[(336, 1), float32] {
  %108 = @func_5492() /* ty=(Tensor[(?, 7, 8), float64], Tensor[(2, 168), float32], Tensor[(336, 1), float32], Tensor[(616), float64]) */;
  %108.2
}

def @func_2204(%var_2169: Tensor[(1, 16, 12), float64]) -> (Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) {
  %109 = cast(%var_2169, dtype="float64") /* ty=Tensor[(1, 16, 12), float64] */;
  %110 = erf(%109) /* ty=Tensor[(1, 16, 12), float64] */;
  %111 = cast(%var_2169, dtype="int16") /* ty=Tensor[(1, 16, 12), int16] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="int16") /* ty=Tensor[(1, 16, 12), int16] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %115 = right_shift(%113, %114) /* ty=Tensor[(?, 16, 12), int16] */;
  %116 = cast(%110, dtype="int64") /* ty=Tensor[(1, 16, 12), int64] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="int64") /* ty=Tensor[(?, 16, 12), int64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %120 = cast(%var_2169, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
  %121 = add(%118, %119) /* ty=Tensor[(?, 16, 12), int64] */;
  %122 = acos(%120) /* ty=Tensor[(1, 16, 12), float32] */;
  (%121, %122)
}

def @func_4863() -> (Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %123 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %124 = cast(meta[relay.Constant][8] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %126 = cast(meta[relay.Constant][10] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %127 = reshape(%124, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %128 = reshape(%125, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
  %129 = reshape(%126, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
  %130 = @func_2851(%127, %128, %129) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
  %131 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %132 = %123.0;
  %133 = %130.7;
  %134 = %131.0;
  (%132, %133, meta[relay.Constant][8] /* ty=Tensor[(56), int8] */, meta[relay.Constant][9] /* ty=Tensor[(336), float32] */, meta[relay.Constant][10] /* ty=Tensor[(616), float64] */, %134)
}

def @func_5312(%var_5291: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) {
  %135 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %136 = cast(%var_5291, dtype="int8") /* ty=Tensor[(56), int8] */;
  %137 = reshape(%136, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %138 = @func_2288(%137) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
  %139 = %135.0;
  %140 = %138.1;
  (%139, %140, %var_5291)
}

def @func_8704(%var_8697: Tensor[(15, 1, 6), int16], %var_8698: Tensor[(15, 2, 6), int16]) -> (Tensor[(15, 2, 6), bool],) {
  %141 = cast(%var_8697, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
  %142 = cast(%var_8698, dtype="bool") /* ty=Tensor[(15, 2, 6), bool] */;
  %143 = less(%141, %142) /* ty=Tensor[(15, 2, 6), bool] */;
  (%143,)
}

def @func_5741(%var_5695: Tensor[(13, 15, 8), uint16], %var_5733: Tensor[(616), float64]) -> (Tensor[(13, 15, 8), uint16], Tensor[(1, 16, 12), float32], Tensor[(192), float64], Tensor[(11, 14, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(11, 7, 8), float64], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %144 = cast(%var_5695, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %145 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %148 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %149 = reshape(%148, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
  %150 = @func_2204(%149) /* ty=(Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) */;
  %151 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %152 = cast(%var_5695, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %153 = cast(meta[relay.Constant][13] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %154 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %155 = cast(%var_5733, dtype="float64") /* ty=Tensor[(616), float64] */;
  %156 = reshape(%153, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %157 = reshape(%154, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
  %158 = reshape(%155, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
  %159 = @func_2851(%156, %157, %158) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
  %160 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %161 = multiply(%146, %147) /* ty=Tensor[(13, 15, 8), uint16] */;
  %162 = %150.1;
  %163 = %151.0;
  %164 = erf(%152) /* ty=Tensor[(13, 15, 8), float64] */;
  %165 = %159.8;
  %166 = %160.0;
  (%161, %162, meta[relay.Constant][12] /* ty=Tensor[(192), float64] */, %163, %164, %165, meta[relay.Constant][13] /* ty=Tensor[(56), int8] */, meta[relay.Constant][14] /* ty=Tensor[(336), float32] */, %var_5733, %166)
}

def @func_143(%var_133: Tensor[(11, 15, 3), float64]) -> (Tensor[(11, 15, 3), float64],) {
  %167 = cast(%var_133, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %168 = cos(%167) /* ty=Tensor[(11, 15, 3), float64] */;
  (%168,)
}

def @func_4063(%var_4048: Tensor[(5, 7, 8), float32]) -> (Tensor[(5, 7, 8), float32], Tensor[(?, 7, 8), uint64], Tensor[(2, 28), int8]) {
  %169 = cast(%var_4048, dtype="float32") /* ty=Tensor[(5, 7, 8), float32] */;
  %170 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 28), int8] */, dtype="int8") /* ty=Tensor[(2, 28), int8] */;
  %171 = reshape(%170, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %172 = @func_1602(%171) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %173 = log(%169) /* ty=Tensor[(5, 7, 8), float32] */;
  %174 = %172.0;
  (%173, %174, meta[relay.Constant][15] /* ty=Tensor[(2, 28), int8] */)
}

def @func_8532(%var_8512: Tensor[(4, 12, 6), bool], %var_8513: Tensor[(4, 12, 6), bool]) -> Tensor[(4, 12, 6), bool] {
  %175 = cast(%var_8513, dtype="bool") /* ty=Tensor[(4, 12, 6), bool] */;
  %176 = shape_of(%var_8512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_8512, dtype="bool") /* ty=Tensor[(4, 12, 6), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%177, %178) /* ty=Tensor[(4, 12, 6), bool] */
}

def @func_8401(%var_8391: Tensor[(2, 10, 10), int8], %var_8392: Tensor[(2, 10, 10), int8]) -> Tensor[(2, 10, 10), int8] {
  %179 = cast(%var_8392, dtype="int8") /* ty=Tensor[(2, 10, 10), int8] */;
  %180 = shape_of(%var_8391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_8391, dtype="int8") /* ty=Tensor[(2, 10, 10), int8] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%181, %182) /* ty=Tensor[(2, 10, 10), int8] */
}

def @func_6438(%var_6411: Tensor[(15, 11, 15), float32], %var_6432: Tensor[(3360), float32], %var_6434: Tensor[(336), float32]) -> (Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) {
  %183 = cast(%var_6411, dtype="float32") /* ty=Tensor[(15, 11, 15), float32] */;
  %184 = cast(%var_6432, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %185 = cast(meta[relay.Constant][16] /* ty=Tensor[(132, 1), float32] */, dtype="float32") /* ty=Tensor[(132, 1), float32] */;
  %186 = cast(%var_6434, dtype="float32") /* ty=Tensor[(336), float32] */;
  %187 = reshape(%184, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %188 = reshape(%185, newshape=[66, 2]) /* ty=Tensor[(66, 2), float32] */;
  %189 = reshape(%186, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %190 = @func_5808(%187, %188, %189) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(66, 2), float32], Tensor[(336), float32]) */;
  %191 = acosh(%183) /* ty=Tensor[(15, 11, 15), float32] */;
  %192 = %190.6;
  (%191, %192, %var_6432, meta[relay.Constant][16] /* ty=Tensor[(132, 1), float32] */, %var_6434)
}

def @func_3160() -> Tensor[(11, 14, 5), float32] {
  %193 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %193.1
}

def @func_6182(%var_6180: Tensor[(165, 3), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(165, 3), float64]) {
  %194 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %195 = cast(%var_6180, dtype="float64") /* ty=Tensor[(165, 3), float64] */;
  %196 = reshape(%195, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
  %197 = @func_143(%196) /* ty=(Tensor[(11, 15, 3), float64],) */;
  %198 = %194.0;
  %199 = %197.0;
  (%198, %199, %var_6180)
}

def @func_7147() -> Tensor[(11, 14, 5), float32] {
  %200 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %200.0
}

def @func_10680() -> (Tensor[(11, 14, 5), float32],) {
  %201 = @func_6679() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %202 = %201.2;
  (%202,)
}

def @func_2090(%var_2073: Tensor[(11, 14, 5), float32]) -> Tensor[(11, 14, 5), float32] {
  %203 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %204 = %203.0;
  %205 = cast(%var_2073, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%207, %208) /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_9353() -> Tensor[(11, 14, 5), float32] {
  %209 = @func_8093() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %209.0
}

def @func_978(%var_965: Tensor[(3, 4, 12), float64]) -> (Tensor[(3, 4, 12), float64],) {
  %210 = cast(%var_965, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %211 = sin(%210) /* ty=Tensor[(3, 4, 12), float64] */;
  (%211,)
}

def @func_3523() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) {
  %212 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %213 = %212.0;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %215 = reshape(%214, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %216 = @func_2410(%215) /* ty=Tensor[(11, 14, 5), int64] */;
  (%213, %216)
}

def @func_10820() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %217 = @func_7172() /* ty=Tensor[(11, 14, 5), float32] */;
  %218 = @func_9353() /* ty=Tensor[(11, 14, 5), float32] */;
  (%217, %218)
}

def @func_2328(%var_2318: Tensor[(288), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(6, 16, 3), float32], Tensor[(288), float32]) {
  %219 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %220 = cast(%var_2318, dtype="float32") /* ty=Tensor[(288), float32] */;
  %221 = reshape(%220, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), float32] */;
  %222 = @func_1143(%221) /* ty=(Tensor[(6, 16, 3), float32],) */;
  %223 = %219.0;
  %224 = %222.0;
  (%223, %224, %var_2318)
}

def @func_10927(%var_10894: Tensor[(7, 14, 9), float32], %var_10908: Tensor[(2475), float32], %var_10909: Tensor[(3360), float32], %var_10910: Tensor[(336), float32]) -> (Tensor[(7, 14, 9), float32], Tensor[(15, 11, 15), float32], Tensor[(2475), float32], Tensor[(3360), float32], Tensor[(336), float32], Tensor[(11, 14, 5), int64], Tensor[(770), float32]) {
  %225 = cast(%var_10894, dtype="float32") /* ty=Tensor[(7, 14, 9), float32] */;
  %226 = cast(%var_10908, dtype="float32") /* ty=Tensor[(2475), float32] */;
  %227 = cast(%var_10909, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %228 = cast(%var_10910, dtype="float32") /* ty=Tensor[(336), float32] */;
  %229 = reshape(%226, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), float32] */;
  %230 = reshape(%227, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %231 = reshape(%228, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %232 = @func_6438(%229, %230, %231) /* ty=(Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) */;
  %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %234 = reshape(%233, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %235 = sqrt(%225) /* ty=Tensor[(7, 14, 9), float32] */;
  %236 = %232.0;
  %237 = @func_2410(%234) /* ty=Tensor[(11, 14, 5), int64] */;
  (%235, %236, %var_10908, %var_10909, %var_10910, %237, meta[relay.Constant][17] /* ty=Tensor[(770), float32] */)
}

def @func_8816(%var_8792: uint8, %var_8793: Tensor[(10, 15, 8), uint8]) -> (Tensor[(10, 15, 8), float32],) {
  %238 = cast(%var_8792, dtype="uint8") /* ty=uint8 */;
  %239 = cast(%var_8793, dtype="uint8") /* ty=Tensor[(10, 15, 8), uint8] */;
  %240 = multiply(%238, %239) /* ty=Tensor[(10, 15, 8), uint8] */;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
  %242 = asin(%241) /* ty=Tensor[(10, 15, 8), float32] */;
  (%242,)
}

def @func_10071() -> (Tensor[(9, 16, ?), float64],) {
  %243 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 1), float64] */;
  %244 = asinh(%243) /* ty=Tensor[(9, 16, 1), float64] */;
  %245 = cast(%244, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  %246 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(9, 16, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 16, 1), float64] */, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = equal(%247, %248) /* ty=Tensor[(9, 16, ?), bool] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(9, 16, ?), float64] */;
  %251 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%244, dtype="float64") /* ty=Tensor[(9, 16, 1), float64] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %254 = minimum(%252, %253) /* ty=Tensor[(9, 16, ?), float64] */;
  (%254,)
}

def @func_2109(%var_2106: Tensor[(1, 10, 2), float64]) -> Tensor[(1, 10, 2), float64] {
  %255 = cast(%var_2106, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  tan(%255) /* ty=Tensor[(1, 10, 2), float64] */
}

def @func_4745(%var_4699: Tensor[(13, 13, 11), uint64]) -> (Tensor[(13, 13, 11), bool], Tensor[(13, 13, 11), float32], Tensor[(11, 8, 12), int32], Tensor[(770), float32], Tensor[(336), float32]) {
  %256 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 13, 11), uint64] */, dtype="bool") /* ty=Tensor[(13, 13, 11), bool] */;
  %257 = shape_of(%var_4699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%var_4699, dtype="bool") /* ty=Tensor[(13, 13, 11), bool] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %260 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 13, 11), uint64] */, dtype="float32") /* ty=Tensor[(13, 13, 11), float32] */;
  %261 = cast(meta[relay.Constant][20] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %262 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %263 = reshape(%261, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %264 = reshape(%262, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %265 = @func_1981(%263, %264) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
  %266 = less(%258, %259) /* ty=Tensor[(13, 13, 11), bool] */;
  %267 = acos(%260) /* ty=Tensor[(13, 13, 11), float32] */;
  %268 = %265.4;
  (%266, %267, %268, meta[relay.Constant][20] /* ty=Tensor[(770), float32] */, meta[relay.Constant][21] /* ty=Tensor[(336), float32] */)
}

def @func_6716(%var_6700: Tensor[(1, 5, 4), uint8], %var_6701: Tensor[(12, 5, 4), uint8], %var_6709: Tensor[(132), float32]) -> (Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) {
  %269 = cast(%var_6700, dtype="uint8") /* ty=Tensor[(1, 5, 4), uint8] */;
  %270 = cast(%var_6701, dtype="uint8") /* ty=Tensor[(12, 5, 4), uint8] */;
  %271 = cast(%var_6709, dtype="float32") /* ty=Tensor[(132), float32] */;
  %272 = reshape(%271, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %273 = @func_283(%272) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
  %274 = @func_4162() /* ty=(Tensor[(56), int8],) */;
  %275 = logical_xor(%269, %270) /* ty=Tensor[(12, 5, 4), uint8] */;
  %276 = %273.3;
  %277 = %274.0;
  (%275, %276, %var_6709, %277)
}

def @func_3123() -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) {
  %278 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %279 = cast(meta[relay.Constant][22] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %280 = reshape(%279, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
  %281 = %278.0;
  %282 = @func_2109(%280) /* ty=Tensor[(1, 10, 2), float64] */;
  (%281, %282, meta[relay.Constant][22] /* ty=Tensor[(20), float64] */)
}

def @func_5897() -> Tensor[(616), float64] {
  %283 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %283.4
}

def @func_9962(%var_9923: Tensor[(20, 1), float64], %var_9955: Tensor[(810), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(11, 8, 12), int32], Tensor[(11, 14, 5), float32], Tensor[(20, 336), float32], Tensor[(6, 15, 9), int8], Tensor[(810), float64]) {
  %284 = cast(%var_9923, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
  %285 = reshape(%284, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %286 = @func_4939(%285) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %287 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
  %288 = cast(%287, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %289 = cast(meta[relay.Constant][23] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %290 = reshape(%288, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %291 = reshape(%289, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %292 = @func_1981(%290, %291) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
  %293 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %294 = cast(meta[relay.Constant][23] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %295 = cast(%var_9923, dtype="float32") /* ty=Tensor[(20, 1), float32] */;
  %296 = cast(%var_9955, dtype="float64") /* ty=Tensor[(810), float64] */;
  %297 = reshape(%296, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), float64] */;
  %298 = @func_5092(%297) /* ty=(Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) */;
  %299 = %286.1;
  %300 = %292.4;
  %301 = %293.0;
  %302 = divide(%294, %295) /* ty=Tensor[(20, 336), float32] */;
  %303 = %298.0;
  (%287, %299, %300, %301, %302, %303, %var_9955)
}

def @func_6370() -> (Tensor[(616), float64],) {
  %304 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %305 = %304.4;
  (%305,)
}

def @func_7077(%var_7022: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint32], Tensor[(56), int8], Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(11, 14, 5), int64]) {
  %306 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %307 = cast(%var_7022, dtype="int8") /* ty=Tensor[(56), int8] */;
  %308 = reshape(%307, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %309 = @func_2745(%308) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
  %310 = cast(meta[relay.Constant][24] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %311 = reshape(%310, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
  %312 = @func_143(%311) /* ty=(Tensor[(11, 15, 3), float64],) */;
  %313 = %306.0;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %315 = reshape(%314, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %316 = %309.3;
  %317 = %312.0;
  %318 = @func_2410(%315) /* ty=Tensor[(11, 14, 5), int64] */;
  (%313, %316, %var_7022, %317, meta[relay.Constant][24] /* ty=Tensor[(495), float64] */, %318)
}

def @func_9770() -> (Tensor[(11, 14, 5), float32],) {
  %319 = @func_3932() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %320 = %319.0;
  (%320,)
}

def @func_10430() -> (Tensor[(20), float64], Tensor[(56), int8], Tensor[(56), int8]) {
  %321 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %322 = reshape(%321, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %323 = @func_5312(%322) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) */;
  %324 = @func_7349() /* ty=Tensor[(20), float64] */;
  %325 = %323.2;
  (%324, %325, meta[relay.Constant][25] /* ty=Tensor[(56), int8] */)
}

def @func_8492(%var_8464: Tensor[(3, 7, 11), float32]) -> (Tensor[(3, 7, 11), float32], Tensor[(11, 14, 5), float32]) {
  %326 = cast(%var_8464, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %327 = @func_7539() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %328 = cosh(%326) /* ty=Tensor[(3, 7, 11), float32] */;
  %329 = %327.0;
  (%328, %329)
}

def @func_10513(%var_10508: Tensor[(280), float32]) -> (Tensor[(20), float64], Tensor[(5, 7, 8), float32], Tensor[(280), float32]) {
  %330 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %331 = cast(%var_10508, dtype="float32") /* ty=Tensor[(280), float32] */;
  %332 = reshape(%331, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
  %333 = @func_4063(%332) /* ty=(Tensor[(5, 7, 8), float32], Tensor[(?, 7, 8), uint64], Tensor[(2, 28), int8]) */;
  %334 = %330.2;
  %335 = %333.0;
  (%334, %335, %var_10508)
}

def @func_9332() -> (Tensor[(11, 14, 5), float32],) {
  %336 = @func_8018() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %337 = %336.0;
  (%337,)
}

def @func_10121(%var_10095: Tensor[(8, 16, 3), float32], %var_10111: Tensor[(220), uint32]) -> (Tensor[(8, 16, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(336), float32], Tensor[(220), uint32], Tensor[(8, 16, 3), float32]) {
  %338 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %339 = shape_of(%var_10095, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_10095, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %342 = cast(meta[relay.Constant][27] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %343 = @func_8682() /* ty=Tensor[(11, 14, 5), float32] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %345 = cast(%var_10111, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %346 = reshape(%342, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %347 = reshape(%344, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %348 = reshape(%345, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %349 = @func_5240(%346, %347, %348) /* ty=(Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) */;
  %350 = cast(%var_10095, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %351 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(8, 16, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %354 = divide(%340, %341) /* ty=Tensor[(8, 16, 3), float32] */;
  %355 = %349.1;
  %356 = multiply(%352, %353) /* ty=Tensor[(8, 16, 3), float32] */;
  (%354, %343, %355, meta[relay.Constant][27] /* ty=Tensor[(336), float32] */, %var_10111, %356)
}

def @func_9044() -> Tensor[(56), int8] {
  %357 = @func_4162() /* ty=(Tensor[(56), int8],) */;
  %357.0
}

def @func_8093() -> (Tensor[(11, 14, 5), float32],) {
  %358 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %359 = %358.0;
  (%359,)
}

def @func_6973(%var_6970: Tensor[(240), uint8]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(20), uint8], Tensor[(240), uint8], Tensor[(132), float32]) {
  %360 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %361 = cast(meta[relay.Constant][28] /* ty=Tensor[(20), uint8] */, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %362 = cast(%var_6970, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %363 = cast(meta[relay.Constant][29] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %364 = reshape(%361, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint8] */;
  %365 = reshape(%362, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), uint8] */;
  %366 = reshape(%363, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %367 = @func_6716(%364, %365, %366) /* ty=(Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) */;
  %368 = %360.1;
  %369 = %367.3;
  (%368, %369, meta[relay.Constant][28] /* ty=Tensor[(20), uint8] */, %var_6970, meta[relay.Constant][29] /* ty=Tensor[(132), float32] */)
}

def @func_4162() -> (Tensor[(56), int8],) {
  %370 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
  %371 = %370.2;
  (%371,)
}

def @main(%var_10953: Tensor[(220), uint32], %var_10975: Tensor[(24, 14), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(770), float32], Tensor[(220), uint32], Tensor[(24, 14), int16]) {
  %372 = cast(meta[relay.Constant][30] /* ty=Tensor[(24, 14), float32] */, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %373 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %374 = cast(%373, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %375 = cast(%var_10953, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %376 = reshape(%372, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %377 = reshape(%374, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %378 = reshape(%375, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %379 = @func_5240(%376, %377, %378) /* ty=(Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) */;
  %380 = cast(%var_10975, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
  %381 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(24, 14), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %382 = cast(meta[relay.Constant][30] /* ty=Tensor[(24, 14), float32] */, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %384 = %379.2;
  %385 = subtract(%382, %383) /* ty=Tensor[(24, 14), int16] */;
  (%373, %384, %var_10953, %385)
}

def @func_7743(%var_7694: Tensor[(1056), int32]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(336), float32], Tensor[(11, 15, 3), float32]) {
  %386 = @func_6731() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %387 = @func_7311() /* ty=(Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %388 = @func_6731() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %389 = cast(meta[relay.Constant][31] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %390 = cast(%var_7694, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %391 = cast(%var_7694, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %392 = reshape(%389, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %393 = reshape(%390, newshape=[2, 528]) /* ty=Tensor[(2, 528), int32] */;
  %394 = reshape(%391, newshape=[2, 528]) /* ty=Tensor[(2, 528), float64] */;
  %395 = @func_5576(%392, %393, %394) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(2, 528), bool], Tensor[(2, 528), bool]) */;
  %396 = cast(%var_7694, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %397 = cast(%var_7694, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %398 = reshape(%396, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %399 = reshape(%397, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %400 = @func_672(%398, %399) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
  %401 = %400.1;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %403 = log(%402) /* ty=Tensor[(11, 15, 3), float64] */;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
  %405 = %386.0;
  %406 = %387.3;
  %407 = %388.0;
  %408 = %395.2;
  %409 = asin(%404) /* ty=Tensor[(11, 15, 3), float32] */;
  (%405, %406, %var_7694, %407, %408, meta[relay.Constant][31] /* ty=Tensor[(336), float32] */, %409)
}

def @func_1143(%var_1131: Tensor[(6, 16, 3), float32]) -> (Tensor[(6, 16, 3), float32],) {
  %410 = cast(%var_1131, dtype="float32") /* ty=Tensor[(6, 16, 3), float32] */;
  %411 = exp(%410) /* ty=Tensor[(6, 16, 3), float32] */;
  (%411,)
}

def @func_672(%var_662: Tensor[(11, 8, 12), int32], %var_663: Tensor[(11, 8, 12), int32]) -> (Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) {
  %412 = cast(%var_663, dtype="int32") /* ty=Tensor[(11, 8, 12), int32] */;
  %413 = shape_of(%var_662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_662, dtype="int32") /* ty=Tensor[(11, 8, 12), int32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %416 = cast(meta[relay.Constant][32] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %417 = reshape(%416, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %418 = @func_283(%417) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
  %419 = multiply(%414, %415) /* ty=Tensor[(11, 8, 12), int32] */;
  %420 = %418.0;
  (%419, %420, meta[relay.Constant][32] /* ty=Tensor[(132), float32] */)
}

def @func_7794(%var_7775: Tensor[(20), float64], %var_7789: Tensor[(20), float64]) -> (Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(20), uint64]) {
  %421 = @func_3720() /* ty=Tensor[(20), float64] */;
  %422 = cast(%var_7775, dtype="float64") /* ty=Tensor[(20), float64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(1), int32] */;
  %424 = cast(%421, dtype="float64") /* ty=Tensor[(20), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?), float64] */;
  %426 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %427 = cast(%var_7789, dtype="uint64") /* ty=Tensor[(20), uint64] */;
  %428 = shape_of(%var_7775, dtype="int32") /* ty=Tensor[(1), int32] */;
  %429 = cast(%var_7775, dtype="uint64") /* ty=Tensor[(20), uint64] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %431 = power(%424, %425) /* ty=Tensor[(20), float64] */;
  %432 = %426.0;
  %433 = multiply(%429, %430) /* ty=Tensor[(20), uint64] */;
  (%431, %432, %433)
}

def @func_10845() -> Tensor[(11, 14, 5), float32] {
  %434 = @func_10185() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %434.0
}

def @func_5576(%var_5545: Tensor[(336), float32], %var_5552: Tensor[(2, 528), int32], %var_5570: Tensor[(2, 528), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(2, 528), bool], Tensor[(2, 528), bool]) {
  %435 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %436 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 528), int32] */, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %437 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 528), int32] */, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %438 = reshape(%436, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %439 = reshape(%437, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %440 = @func_672(%438, %439) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
  %441 = @func_3919() /* ty=(Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) */;
  %442 = cast(%var_5545, dtype="float32") /* ty=Tensor[(336), float32] */;
  %443 = %435.0;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %445 = reshape(%442, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %446 = reshape(%444, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %447 = @func_1756(%445, %446) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %448 = cast(%var_5552, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %449 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(2, 528), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %450 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 528), int32] */, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %452 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 528), int32] */, dtype="float32") /* ty=Tensor[(2, 528), float32] */;
  %453 = sinh(%452) /* ty=Tensor[(2, 528), float32] */;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %455 = acos(%454) /* ty=Tensor[(2, 528), float64] */;
  %456 = cast(%var_5570, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(2), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %460 = @func_4391() /* ty=Tensor[(11, 14, 5), float32] */;
  %461 = %440.2;
  %462 = %441.0;
  %463 = @func_4391() /* ty=Tensor[(11, 14, 5), float32] */;
  %464 = %447.0;
  %465 = not_equal(%450, %451) /* ty=Tensor[(2, 528), bool] */;
  %466 = logical_and(%458, %459) /* ty=Tensor[(2, 528), bool] */;
  (%443, %460, %461, %462, %463, %464, %var_5545, %465, %466)
}

def @func_5240(%var_5213: Tensor[(336), float32], %var_5214: Tensor[(770), float32], %var_5230: Tensor[(220), uint32]) -> (Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) {
  %467 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
  %468 = cast(%var_5213, dtype="float32") /* ty=Tensor[(336), float32] */;
  %469 = cast(%var_5214, dtype="float32") /* ty=Tensor[(770), float32] */;
  %470 = reshape(%468, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %471 = reshape(%469, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %472 = @func_1756(%470, %471) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %473 = %472.0;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
  %475 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %476 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %477 = %467.3;
  %478 = cast(%477, dtype="int8") /* ty=Tensor[(?, 7, 8), int8] */;
  %479 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %480 = reshape(%475, newshape=[2, 10, 11]) /* ty=Tensor[(2, 10, 11), uint32] */;
  %481 = reshape(%476, newshape=[2, 10, 11]) /* ty=Tensor[(2, 10, 11), uint32] */;
  %482 = reshape(%478, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %483 = reshape(%479, newshape=[2, 10, 11]) /* ty=Tensor[(2, 10, 11), uint32] */;
  %484 = @func_3606(%480, %481, %482, %483) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) */;
  %485 = asin(%474) /* ty=Tensor[(7, 12, 4), float32] */;
  %486 = %484.3;
  (%477, %var_5213, %var_5214, %485, %486, %var_5230)
}

def @func_5945(%var_5928: Tensor[(14, 15, 6), float32], %var_5938: Tensor[(1056), int32]) -> (Tensor[(14, 15, 6), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) {
  %487 = cast(%var_5928, dtype="float32") /* ty=Tensor[(14, 15, 6), float32] */;
  %488 = cast(%var_5938, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %489 = cast(%var_5938, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %490 = reshape(%488, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %491 = reshape(%489, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %492 = @func_672(%490, %491) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
  %493 = cos(%487) /* ty=Tensor[(14, 15, 6), float32] */;
  %494 = %492.1;
  (%493, %494, %var_5938)
}

def @func_1817() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %495 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %496 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  (%495, %496)
}

def @func_6386(%var_6379: Tensor[(2, 9, 14), int16]) -> (Tensor[(2, 9, 14), int16],) {
  %497 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 14), int16] */, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %498 = shape_of(%var_6379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_6379, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %501 = bitwise_and(%499, %500) /* ty=Tensor[(2, 9, 14), int16] */;
  (%501,)
}

def @func_9678() -> (Tensor[(11, 14, 5), float32], Tensor[(2, 28), int8], Tensor[(?, 7, 8), float64], Tensor[(11, 15, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %502 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 28), int8] */, dtype="int8") /* ty=Tensor[(2, 28), int8] */;
  %503 = reshape(%502, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %504 = @func_1602(%503) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %505 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 28), int8] */, dtype="int8") /* ty=Tensor[(2, 28), int8] */;
  %506 = reshape(%505, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %507 = @func_7077(%506) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint32], Tensor[(56), int8], Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(11, 14, 5), int64]) */;
  %508 = %507.3;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
  %510 = log2(%509) /* ty=Tensor[(11, 15, 3), float32] */;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %512 = tan(%511) /* ty=Tensor[(11, 15, 3), float64] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
  %514 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%510, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %517 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %518 = @func_8277() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %519 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %520 = %504.1;
  %521 = divide(%515, %516) /* ty=Tensor[(11, 15, 3), float32] */;
  %522 = %517.5;
  %523 = %518.0;
  (%519, meta[relay.Constant][35] /* ty=Tensor[(2, 28), int8] */, %520, %521, %522, %523)
}

def @func_2950(%var_2892: Tensor[(336), float32], %var_2896: Tensor[(14, 4), int8]) -> (Tensor[(6, 16, 3), float32], Tensor[(288), float32], Tensor[(11, 14, 5), int16], Tensor[(336), float32], Tensor[(7, 12, 4), uint32], Tensor[(14, 4), int8], Tensor[(11, 14, 5), float64], Tensor[(1, 16, 12), float32], Tensor[(192), float64]) {
  %524 = cast(meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %525 = reshape(%524, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), float32] */;
  %526 = @func_1143(%525) /* ty=(Tensor[(6, 16, 3), float32],) */;
  %527 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %530 = cast(%var_2892, dtype="float32") /* ty=Tensor[(336), float32] */;
  %531 = reshape(%529, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %532 = reshape(%530, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %533 = @func_1981(%531, %532) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
  %534 = cast(%var_2896, dtype="int8") /* ty=Tensor[(14, 4), int8] */;
  %535 = reshape(%534, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %536 = @func_2745(%535) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
  %537 = cast(%528, dtype="float64") /* ty=Tensor[(11, 14, 5), float64] */;
  %538 = cast(meta[relay.Constant][37] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %539 = reshape(%538, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
  %540 = @func_2204(%539) /* ty=(Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) */;
  %541 = %526.0;
  %542 = %533.0;
  %543 = %536.3;
  %544 = tan(%537) /* ty=Tensor[(11, 14, 5), float64] */;
  %545 = %540.1;
  (%541, meta[relay.Constant][36] /* ty=Tensor[(288), float32] */, %542, %var_2892, %543, %var_2896, %544, %545, meta[relay.Constant][37] /* ty=Tensor[(192), float64] */)
}

def @func_6937() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %546 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %547 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %548 = %546.1;
  %549 = %547.0;
  (%548, %549)
}

def @func_2288(%var_2281: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) {
  %550 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %551 = cast(%var_2281, dtype="int8") /* ty=Tensor[(56), int8] */;
  %552 = reshape(%551, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %553 = @func_1602(%552) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %554 = %550.0;
  %555 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %556 = %553.0;
  (%554, %555, %556, %var_2281)
}

def @func_9891() -> (Tensor[(11, 14, 5), float32],) {
  %557 = @func_9770() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %558 = %557.0;
  (%558,)
}

def @func_884(%var_880: Tensor[(7, 12, 4), float32]) -> (Tensor[(7, 12, 4), float32],) {
  %559 = cast(%var_880, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
  %560 = erf(%559) /* ty=Tensor[(7, 12, 4), float32] */;
  (%560,)
}

def @func_2851(%var_2772: Tensor[(56), int8], %var_2802: Tensor[(168, 2), float32], %var_2820: Tensor[(11, 7, 8), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) {
  %561 = @func_2598() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %562 = cast(%var_2772, dtype="int8") /* ty=Tensor[(56), int8] */;
  %563 = reshape(%562, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %564 = @func_2288(%563) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
  %565 = %561.0;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %567 = reshape(%566, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %568 = cast(%var_2802, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
  %569 = @func_2410(%567) /* ty=Tensor[(11, 14, 5), int64] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %571 = reshape(%568, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %572 = reshape(%570, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %573 = @func_1756(%571, %572) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %574 = cast(%var_2772, dtype="int8") /* ty=Tensor[(56), int8] */;
  %575 = reshape(%574, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %576 = @func_1602(%575) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %577 = %576.0;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
  %579 = acosh(%578) /* ty=Tensor[(?, 7, 8), float64] */;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(?, 7, 8), float32] */;
  %581 = cast(%var_2820, dtype="float32") /* ty=Tensor[(11, 7, 8), float32] */;
  %582 = cast(%577, dtype="float32") /* ty=Tensor[(?, 7, 8), float32] */;
  %583 = cast(%var_2820, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
  %584 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %585 = %564.1;
  %586 = %573.0;
  %587 = floor_mod(%580, %581) /* ty=Tensor[(11, 7, 8), float32] */;
  %588 = tan(%582) /* ty=Tensor[(?, 7, 8), float32] */;
  %589 = sin(%583) /* ty=Tensor[(11, 7, 8), float64] */;
  %590 = %584.1;
  (%565, %var_2772, %585, %569, %586, %var_2802, %587, %588, %589, %590)
}

def @func_8192(%var_8155: Tensor[(192), float64], %var_8160: Tensor[(240), uint8]) -> (Tensor[(20), float64], Tensor[(6, 15, 9), bool], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(192), float64], Tensor[(132), float32], Tensor[(240), uint8], Tensor[(132), float32], Tensor[(1, 16, 12), float32]) {
  %591 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %592 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
  %593 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 15, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = %591.2;
  %598 = cast(%597, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %599 = cast(%var_8160, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %600 = cast(meta[relay.Constant][39] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %601 = reshape(%598, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint8] */;
  %602 = reshape(%599, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), uint8] */;
  %603 = reshape(%600, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %604 = @func_6716(%601, %602, %603) /* ty=(Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) */;
  %605 = cast(%var_8155, dtype="float64") /* ty=Tensor[(192), float64] */;
  %606 = reshape(%605, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
  %607 = @func_2204(%606) /* ty=(Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) */;
  %608 = %607.1;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
  %610 = not_equal(%595, %596) /* ty=Tensor[(6, 15, 9), bool] */;
  %611 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
  %612 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
  %613 = %604.2;
  %614 = acosh(%609) /* ty=Tensor[(1, 16, 12), float32] */;
  (%597, %610, %611, %612, %var_8155, %613, %var_8160, meta[relay.Constant][39] /* ty=Tensor[(132), float32] */, %614)
}

def @func_4445(%var_4436: Tensor[(2, 7, 13), float32]) -> Tensor[(2, 7, 13), float32] {
  %615 = cast(%var_4436, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %616 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(2, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%617, %618) /* ty=Tensor[(2, 7, 13), float32] */
}

def @func_8047(%var_8037: Tensor[(616), float64]) -> (Tensor[(11, 14, 5), int64], Tensor[(616), bool], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %619 = @func_3919() /* ty=(Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) */;
  %620 = cast(%var_8037, dtype="float64") /* ty=Tensor[(616), float64] */;
  %621 = reshape(%620, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %622 = @func_6907(%621) /* ty=(Tensor[(616), uint32], Tensor[(616), bool], Tensor[(11, 14, 5), float32]) */;
  %623 = @func_7753() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %624 = %619.0;
  %625 = %622.1;
  %626 = %623.0;
  (%624, %625, %var_8037, %626)
}

def @func_6731() -> (Tensor[(11, 14, 5), float32],) {
  %627 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  (%627,)
}

def @func_8934() -> (Tensor[(11, 14, 5), float32],) {
  %628 = @func_7942() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %629 = %628.0;
  (%629,)
}

def @func_8277() -> (Tensor[(11, 14, 5), float32],) {
  %630 = @func_8076() /* ty=Tensor[(11, 14, 5), float32] */;
  (%630,)
}

def @func_5492() -> (Tensor[(?, 7, 8), float64], Tensor[(2, 168), float32], Tensor[(336, 1), float32], Tensor[(616), float64]) {
  %631 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
  %632 = cast(meta[relay.Constant][41] /* ty=Tensor[(336, 1), float32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %633 = cast(meta[relay.Constant][42] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %634 = reshape(%632, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
  %635 = reshape(%633, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %636 = @func_3804(%634, %635) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8], Tensor[(2, 168), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %637 = %631.3;
  %638 = %636.3;
  (%637, %638, meta[relay.Constant][41] /* ty=Tensor[(336, 1), float32] */, meta[relay.Constant][42] /* ty=Tensor[(616), float64] */)
}

def @func_7539() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %639 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %640 = %639.1;
  %641 = @func_4576() /* ty=Tensor[(11, 14, 5), float32] */;
  (%640, %641)
}

def @func_4939(%var_4934: Tensor[(20), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) {
  %642 = cast(%var_4934, dtype="float64") /* ty=Tensor[(20), float64] */;
  %643 = reshape(%642, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
  %644 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %645 = @func_2109(%643) /* ty=Tensor[(1, 10, 2), float64] */;
  (%644, %645, %var_4934)
}

def @func_9140(%var_9137: Tensor[(840, 4), float32], %var_9138: Tensor[(336), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(2475), float32], Tensor[(840, 4), float32], Tensor[(336), float32]) {
  %646 = cast(meta[relay.Constant][43] /* ty=Tensor[(2475), float32] */, dtype="float32") /* ty=Tensor[(2475), float32] */;
  %647 = cast(%var_9137, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %648 = cast(%var_9138, dtype="float32") /* ty=Tensor[(336), float32] */;
  %649 = reshape(%646, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), float32] */;
  %650 = reshape(%647, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %651 = reshape(%648, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %652 = @func_6438(%649, %650, %651) /* ty=(Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) */;
  %653 = @func_7950() /* ty=Tensor[(11, 14, 5), float32] */;
  %654 = %652.4;
  (%653, %654, meta[relay.Constant][43] /* ty=Tensor[(2475), float32] */, %var_9137, %var_9138)
}

def @func_7942() -> (Tensor[(11, 14, 5), float32],) {
  %655 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %656 = %655.5;
  (%656,)
}

def @func_1716() -> Tensor[(11, 14, 5), float32] {
  %657 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 14, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  exp(%657) /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_10386(%var_10329: Tensor[(1260), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32], Tensor[(616), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1260), bool], Tensor[(3, 4, 12), float64], Tensor[(144), float64], Tensor[(2, 7, 13), float32], Tensor[(182), float32]) {
  %658 = @func_9770() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %659 = cast(%var_10329, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %660 = cast(meta[relay.Constant][45] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %661 = reshape(%659, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float32] */;
  %662 = reshape(%660, newshape=[1056]) /* ty=Tensor[(1056), int32] */;
  %663 = @func_5945(%661, %662) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) */;
  %664 = cast(meta[relay.Constant][46] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %665 = reshape(%664, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %666 = @func_8047(%665) /* ty=(Tensor[(11, 14, 5), int64], Tensor[(616), bool], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %667 = cast(meta[relay.Constant][47] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %668 = reshape(%667, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %669 = @func_8365(%668) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) */;
  %670 = cast(meta[relay.Constant][48] /* ty=Tensor[(1260), float32] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %671 = shape_of(%var_10329, dtype="int32") /* ty=Tensor[(1), int32] */;
  %672 = cast(%var_10329, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?), bool] */;
  %674 = cast(meta[relay.Constant][49] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %675 = reshape(%674, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float64] */;
  %676 = @func_978(%675) /* ty=(Tensor[(3, 4, 12), float64],) */;
  %677 = cast(meta[relay.Constant][50] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %678 = reshape(%677, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float32] */;
  %679 = @func_4576() /* ty=Tensor[(11, 14, 5), float32] */;
  %680 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
  %681 = %658.0;
  %682 = %663.1;
  %683 = %666.2;
  %684 = %669.1;
  %685 = equal(%672, %673) /* ty=Tensor[(1260), bool] */;
  %686 = %676.0;
  %687 = @func_4445(%678) /* ty=Tensor[(2, 7, 13), float32] */;
  (%679, %680, %681, %682, meta[relay.Constant][45] /* ty=Tensor[(1056), int32] */, %683, meta[relay.Constant][46] /* ty=Tensor[(616), float64] */, %684, meta[relay.Constant][47] /* ty=Tensor[(56), int8] */, %685, %686, meta[relay.Constant][49] /* ty=Tensor[(144), float64] */, %687, meta[relay.Constant][50] /* ty=Tensor[(182), float32] */)
}

def @func_1888() -> (Tensor[(11, 14, 5), float32],) {
  %688 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %689 = %688.1;
  (%689,)
}

def @func_4391() -> Tensor[(11, 14, 5), float32] {
  @func_2546() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_9080() -> (Tensor[(11, 14, 5), float32], Tensor[(1, 1, 8), float64], Tensor[(1, 8), uint8]) {
  %690 = @func_7942() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %691 = cast(meta[relay.Constant][51] /* ty=Tensor[(1, 8), uint8] */, dtype="uint8") /* ty=Tensor[(1, 8), uint8] */;
  %692 = reshape(%691, newshape=[1, 1, 8]) /* ty=Tensor[(1, 1, 8), uint8] */;
  %693 = @func_847(%692) /* ty=(Tensor[(1, 1, 8), float64],) */;
  %694 = %690.0;
  %695 = %693.0;
  (%694, %695, meta[relay.Constant][51] /* ty=Tensor[(1, 8), uint8] */)
}

def @func_5362(%var_5349: Tensor[(3, 13, 11), float32], %var_5350: Tensor[(3, 13, 11), float32]) -> Tensor[(3, 13, 11), float32] {
  %696 = cast(%var_5350, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
  %697 = shape_of(%var_5349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_5349, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  minimum(%698, %699) /* ty=Tensor[(3, 13, 11), float32] */
}

def @func_9789() -> Tensor[(11, 14, 5), float32] {
  %700 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %700.0
}

def @func_10704() -> (Tensor[(11, 14, 5), float32],) {
  %701 = @func_8093() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %702 = %701.0;
  (%702,)
}

def @func_9096() -> (Tensor[(11, 14, 5), float32],) {
  %703 = @func_8076() /* ty=Tensor[(11, 14, 5), float32] */;
  (%703,)
}

def @func_3301(%var_3234: Tensor[(20), float64], %var_3267: Tensor[(7, 88), float64], %var_3299: Tensor[(1056), int32]) -> (Tensor[(56), int8], Tensor[(3, 4, 12), float64], Tensor[(2, 72), float64], Tensor[(?, 10, 2), uint16], Tensor[(11, 7, 8), float64], Tensor[(336), float32], Tensor[(11, 14, 5), float32], Tensor[(7, 88), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) {
  %704 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
  %705 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
  %706 = reshape(%705, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float64] */;
  %707 = @func_978(%706) /* ty=(Tensor[(3, 4, 12), float64],) */;
  %708 = cast(%var_3234, dtype="float64") /* ty=Tensor[(20), float64] */;
  %709 = reshape(%708, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
  %710 = @func_2109(%709) /* ty=Tensor[(1, 10, 2), float64] */;
  %711 = cast(%var_3234, dtype="uint16") /* ty=Tensor[(20), uint16] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="uint16") /* ty=Tensor[(1, 10, 2), uint16] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %715 = %704.2;
  %716 = cast(%715, dtype="int8") /* ty=Tensor[(56), int8] */;
  %717 = cast(meta[relay.Constant][53] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %718 = cast(%var_3267, dtype="float64") /* ty=Tensor[(7, 88), float64] */;
  %719 = reshape(%716, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %720 = reshape(%717, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
  %721 = reshape(%718, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
  %722 = @func_2851(%719, %720, %721) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
  %723 = cast(%var_3267, dtype="float64") /* ty=Tensor[(7, 88), float64] */;
  %724 = sigmoid(%723) /* ty=Tensor[(7, 88), float64] */;
  %725 = cast(%724, dtype="float32") /* ty=Tensor[(7, 88), float32] */;
  %726 = cast(%var_3299, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %727 = cast(%var_3299, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %728 = reshape(%726, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %729 = reshape(%727, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %730 = @func_672(%728, %729) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
  %731 = %707.0;
  %732 = add(%713, %714) /* ty=Tensor[(?, 10, 2), uint16] */;
  %733 = %722.8;
  %734 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  %735 = sinh(%725) /* ty=Tensor[(7, 88), float32] */;
  %736 = %730.1;
  (%715, %731, meta[relay.Constant][52] /* ty=Tensor[(2, 72), float64] */, %732, %733, meta[relay.Constant][53] /* ty=Tensor[(336), float32] */, %734, %735, %736, %var_3299)
}

def @func_5991(%var_5976: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8]) {
  %737 = @func_2598() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %738 = cast(%var_5976, dtype="int8") /* ty=Tensor[(56), int8] */;
  %739 = reshape(%738, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %740 = @func_2745(%739) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
  %741 = %737.0;
  %742 = %740.2;
  (%741, %742, %var_5976)
}

def @func_7311() -> (Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %743 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %744 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %745 = %744.0;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %747 = reshape(%746, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %748 = @func_5897() /* ty=Tensor[(616), float64] */;
  %749 = %743.0;
  %750 = @func_2090(%747) /* ty=Tensor[(11, 14, 5), float32] */;
  (%748, %749, %745, %750)
}

def @func_10478() -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1200), uint8], Tensor[(3, 11, 9), bool], Tensor[(1260), bool], Tensor[(1260), float32]) {
  %751 = @func_9891() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %752 = @func_9876() /* ty=(Tensor[(11, 14, 5), float32], uint8, Tensor[(1200), uint8], Tensor[(11, 14, 5), float32]) */;
  %753 = @func_8444() /* ty=(Tensor[(3, 11, 9), bool],) */;
  %754 = cast(meta[relay.Constant][54] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %755 = reshape(%754, newshape=[1260]) /* ty=Tensor[(1260), float32] */;
  %756 = @func_10386(%755) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32], Tensor[(616), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1260), bool], Tensor[(3, 4, 12), float64], Tensor[(144), float64], Tensor[(2, 7, 13), float32], Tensor[(182), float32]) */;
  %757 = %751.0;
  %758 = @func_9044() /* ty=Tensor[(56), int8] */;
  %759 = %752.2;
  %760 = %753.0;
  %761 = %756.9;
  (%757, %758, %759, %760, %761, meta[relay.Constant][54] /* ty=Tensor[(1260), float32] */)
}

def @func_6679() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %762 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %763 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %764 = %762.0;
  %765 = %763.0;
  %766 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  (%764, %765, %766)
}

def @func_9876() -> (Tensor[(11, 14, 5), float32], uint8, Tensor[(1200), uint8], Tensor[(11, 14, 5), float32]) {
  %767 = cast(meta[relay.Constant][55] /* ty=Tensor[(1200), uint8] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %768 = reshape(%767, newshape=[1200]) /* ty=Tensor[(1200), uint8] */;
  %769 = @func_8913(%768) /* ty=(Tensor[(20), float64], Tensor[(10, 15, 8), float32], uint8, Tensor[(1200), uint8]) */;
  %770 = @func_3160() /* ty=Tensor[(11, 14, 5), float32] */;
  %771 = %769.2;
  %772 = @func_7147() /* ty=Tensor[(11, 14, 5), float32] */;
  (%770, %771, meta[relay.Constant][55] /* ty=Tensor[(1200), uint8] */, %772)
}

def @func_3034() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) {
  %773 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %774 = cast(meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %775 = reshape(%774, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %776 = @func_2288(%775) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
  %777 = cast(meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %778 = reshape(%777, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %779 = @func_1602(%778) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %780 = cast(meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %781 = reshape(%780, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %782 = @func_2745(%781) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
  %783 = %773.0;
  %784 = %776.0;
  %785 = %779.1;
  %786 = %782.3;
  (%783, %784, meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, %785, %786)
}

def @func_9492(%var_9466: Tensor[(336), float32]) -> (Tensor[(616), float64], Tensor[(11, 14, 5), uint8], Tensor[(336), float32], Tensor[(770), float32], Tensor[(11, 14, 5), float32]) {
  %787 = @func_6370() /* ty=(Tensor[(616), float64],) */;
  %788 = cast(%var_9466, dtype="float32") /* ty=Tensor[(336), float32] */;
  %789 = cast(meta[relay.Constant][57] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %790 = reshape(%788, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %791 = reshape(%789, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %792 = @func_1756(%790, %791) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %793 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %794 = %787.0;
  %795 = %792.1;
  %796 = %793.0;
  (%794, %795, %var_9466, meta[relay.Constant][57] /* ty=Tensor[(770), float32] */, %796)
}

def @func_6466() -> Tensor[(56), int8] {
  %797 = @func_4162() /* ty=(Tensor[(56), int8],) */;
  %797.0
}

def @func_7631(%var_7602: Tensor[(16, 10, 12), uint32]) -> (Tensor[(16, 10, 12), uint32], Tensor[(13, 13, 11), bool], Tensor[(1859), uint64]) {
  %798 = cast(meta[relay.Constant][58] /* ty=Tensor[(16, 10, 12), uint32] */, dtype="uint32") /* ty=Tensor[(16, 10, 12), uint32] */;
  %799 = shape_of(%var_7602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%var_7602, dtype="uint32") /* ty=Tensor[(16, 10, 12), uint32] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %802 = cast(meta[relay.Constant][59] /* ty=Tensor[(1859), uint64] */, dtype="uint64") /* ty=Tensor[(1859), uint64] */;
  %803 = reshape(%802, newshape=[13, 13, 11]) /* ty=Tensor[(13, 13, 11), uint64] */;
  %804 = @func_4745(%803) /* ty=(Tensor[(13, 13, 11), bool], Tensor[(13, 13, 11), float32], Tensor[(11, 8, 12), int32], Tensor[(770), float32], Tensor[(336), float32]) */;
  %805 = minimum(%800, %801) /* ty=Tensor[(16, 10, 12), uint32] */;
  %806 = %804.0;
  (%805, %806, meta[relay.Constant][59] /* ty=Tensor[(1859), uint64] */)
}

def @func_7591(%var_7579: Tensor[(1560), uint16]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1560), uint16], Tensor[(616), float64]) {
  %807 = cast(%var_7579, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
  %808 = cast(meta[relay.Constant][60] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %809 = reshape(%807, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), uint16] */;
  %810 = reshape(%808, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %811 = @func_5741(%809, %810) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(1, 16, 12), float32], Tensor[(192), float64], Tensor[(11, 14, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(11, 7, 8), float64], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %812 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
  %813 = %811.6;
  (%812, %813, %var_7579, meta[relay.Constant][60] /* ty=Tensor[(616), float64] */)
}

def @func_2043() -> (Tensor[(11, 14, 5), float32],) {
  %814 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %815 = %814.0;
  (%815,)
}

def @func_3606(%var_3570: Tensor[(2, 10, 11), uint32], %var_3571: Tensor[(2, 10, 11), uint32], %var_3576: Tensor[(56), int8], %var_3580: Tensor[(2, 10, 11), uint32]) -> (Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) {
  %816 = cast(%var_3576, dtype="int8") /* ty=Tensor[(56), int8] */;
  %817 = reshape(%816, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %818 = @func_1602(%817) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %819 = cast(%var_3580, dtype="float64") /* ty=Tensor[(2, 10, 11), float64] */;
  %820 = shape_of(%var_3570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%var_3570, dtype="float64") /* ty=Tensor[(2, 10, 11), float64] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %823 = cast(%var_3571, dtype="uint32") /* ty=Tensor[(2, 10, 11), uint32] */;
  %824 = shape_of(%var_3570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_3570, dtype="uint32") /* ty=Tensor[(2, 10, 11), uint32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %827 = logical_xor(%825, %826) /* ty=Tensor[(2, 10, 11), uint32] */;
  %828 = cast(%var_3570, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
  %829 = shape_of(%827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%827, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %832 = %818.0;
  %833 = floor_divide(%821, %822) /* ty=Tensor[(2, 10, 11), float64] */;
  %834 = logical_or(%830, %831) /* ty=Tensor[(2, 10, 11), bool] */;
  (%832, %var_3576, %833, %834)
}

def @func_9236() -> (Tensor[(11, 14, 5), float64],) {
  %835 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %836 = %835.0;
  %837 = cast(%836, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %838 = atanh(%837) /* ty=Tensor[(11, 14, 5), float32] */;
  %839 = cast(%838, dtype="float64") /* ty=Tensor[(11, 14, 5), float64] */;
  %840 = asinh(%839) /* ty=Tensor[(11, 14, 5), float64] */;
  (%840,)
}

def @func_2382() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %841 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %842 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %843 = %841.1;
  %844 = %842.0;
  (%843, %844)
}

def @func_1602(%var_1573: Tensor[(1, 7, 8), int8]) -> (Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) {
  %845 = cast(%var_1573, dtype="int8") /* ty=Tensor[(1, 7, 8), int8] */;
  %846 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(1, 7, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(meta[relay.Constant][61] /* ty=Tensor[(1, 7, 8), int8] */, dtype="int8") /* ty=Tensor[(1, 7, 8), int8] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %849 = minimum(%847, %848) /* ty=Tensor[(?, 7, 8), int8] */;
  %850 = cast(%849, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
  %851 = atan(%850) /* ty=Tensor[(?, 7, 8), float64] */;
  %852 = cast(%849, dtype="uint64") /* ty=Tensor[(?, 7, 8), uint64] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%851, dtype="uint64") /* ty=Tensor[(?, 7, 8), uint64] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %856 = cast(%var_1573, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %857 = shape_of(%849, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%849, dtype="bool") /* ty=Tensor[(?, 7, 8), bool] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %860 = greater_equal(%858, %859) /* ty=Tensor[(?, 7, 8), bool] */;
  %861 = cast(%860, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
  %862 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%851, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %865 = bitwise_xor(%854, %855) /* ty=Tensor[(?, 7, 8), uint64] */;
  %866 = mod(%863, %864) /* ty=Tensor[(?, 7, 8), float64] */;
  (%865, %866)
}

def @func_7753() -> (Tensor[(11, 14, 5), float32],) {
  %867 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  (%867,)
}

def @func_2546() -> Tensor[(11, 14, 5), float32] {
  %868 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %868.1
}

def @func_10754() -> (Tensor[(11, 14, 5), float32],) {
  %869 = @func_9678() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(2, 28), int8], Tensor[(?, 7, 8), float64], Tensor[(11, 15, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %870 = %869.4;
  (%870,)
}

def @func_8624() -> (Tensor[(11, 14, 5), float32],) {
  %871 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %872 = %871.0;
  (%872,)
}

def @func_5014() -> (Tensor[(11, 14, 5), float32],) {
  %873 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
  (%873,)
}

def @func_10185() -> (Tensor[(11, 14, 5), float32],) {
  %874 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %875 = %874.0;
  (%875,)
}

def @func_4321(%var_4296: Tensor[(132), float32], %var_4303: Tensor[(7, 110), float32], %var_4304: Tensor[(336), float32]) -> (Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(11, 14, 5), int16], Tensor[(7, 110), float32], Tensor[(336), float32], Tensor[(11, 14, 5), float32]) {
  %876 = cast(%var_4296, dtype="float32") /* ty=Tensor[(132), float32] */;
  %877 = reshape(%876, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %878 = @func_283(%877) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
  %879 = cast(%var_4303, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
  %880 = cast(%var_4304, dtype="float32") /* ty=Tensor[(336), float32] */;
  %881 = reshape(%879, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %882 = reshape(%880, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %883 = @func_1981(%881, %882) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
  %884 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %885 = @func_3720() /* ty=Tensor[(20), float64] */;
  %886 = %878.3;
  %887 = %883.0;
  %888 = %884.1;
  (%885, %886, %var_4296, %887, %var_4303, %var_4304, %888)
}

def @func_6907(%var_6876: Tensor[(616), float64]) -> (Tensor[(616), uint32], Tensor[(616), bool], Tensor[(11, 14, 5), float32]) {
  %889 = @func_6370() /* ty=(Tensor[(616), float64],) */;
  %890 = %889.0;
  %891 = cast(%890, dtype="float64") /* ty=Tensor[(616), float64] */;
  %892 = sin(%891) /* ty=Tensor[(616), float64] */;
  %893 = cast(%890, dtype="uint32") /* ty=Tensor[(616), uint32] */;
  %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(1), int32] */;
  %895 = cast(%892, dtype="uint32") /* ty=Tensor[(616), uint32] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %897 = cast(%var_6876, dtype="bool") /* ty=Tensor[(616), bool] */;
  %898 = shape_of(%892, dtype="int32") /* ty=Tensor[(1), int32] */;
  %899 = cast(%892, dtype="bool") /* ty=Tensor[(616), bool] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?), bool] */;
  %901 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %902 = maximum(%895, %896) /* ty=Tensor[(616), uint32] */;
  %903 = greater_equal(%899, %900) /* ty=Tensor[(616), bool] */;
  %904 = %901.0;
  (%902, %903, %904)
}

def @func_2147() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %905 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %906 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %907 = %905.0;
  (%906, %907)
}

def @func_1981(%var_1904: Tensor[(11, 14, 5), float32], %var_1936: Tensor[(336), float32]) -> (Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) {
  %908 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %909 = %908.0;
  %910 = cast(%var_1904, dtype="int16") /* ty=Tensor[(11, 14, 5), int16] */;
  %911 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%909, dtype="int16") /* ty=Tensor[(11, 14, 5), int16] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %914 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %915 = cast(%var_1936, dtype="float32") /* ty=Tensor[(336), float32] */;
  %916 = %914.0;
  %917 = cast(%916, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %918 = reshape(%915, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %919 = reshape(%917, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %920 = @func_1756(%918, %919) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %921 = cast(meta[relay.Constant][62] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %922 = cast(meta[relay.Constant][62] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %923 = reshape(%921, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %924 = reshape(%922, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %925 = @func_672(%923, %924) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
  %926 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %927 = bitwise_and(%912, %913) /* ty=Tensor[(11, 14, 5), int16] */;
  %928 = %920.0;
  %929 = %925.0;
  %930 = %926.1;
  (%927, %916, %928, %var_1936, %929, meta[relay.Constant][62] /* ty=Tensor[(1056), int32] */, %930)
}

def @func_5400() -> (Tensor[(11, 14, 5), float32],) {
  %931 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  (%931,)
}

def @func_8776(%var_8737: Tensor[(16, 4, 15), float32], %var_8738: Tensor[(16, 4, 15), float32], %var_8747: Tensor[(132), float32]) -> (Tensor[(16, 4, 15), float32], Tensor[(132), float32], Tensor[(4, 11, 3), float32]) {
  %932 = cast(%var_8738, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %933 = shape_of(%var_8737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %934 = cast(%var_8737, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %936 = cast(%var_8747, dtype="float32") /* ty=Tensor[(132), float32] */;
  %937 = reshape(%936, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %938 = @func_283(%937) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
  %939 = %938.6;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %941 = power(%934, %935) /* ty=Tensor[(16, 4, 15), float32] */;
  %942 = log10(%940) /* ty=Tensor[(4, 11, 3), float32] */;
  (%941, %var_8747, %942)
}

def @func_9375() -> (Tensor[(11, 14, 5), float32],) {
  %943 = @func_7950() /* ty=Tensor[(11, 14, 5), float32] */;
  (%943,)
}

def @func_7326() -> (Tensor[(11, 14, 5), float32], Tensor[(336, 1), float32]) {
  %944 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %945 = %944.0;
  %946 = @func_6342() /* ty=Tensor[(336, 1), float32] */;
  (%945, %946)
}

def @func_5808(%var_5773: Tensor[(16, 14, 15), float32], %var_5787: Tensor[(66, 2), float32], %var_5788: Tensor[(336), float32]) -> (Tensor[(16, 14, 15), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(66, 2), float32], Tensor[(336), float32]) {
  %947 = cast(%var_5773, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %948 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %949 = cast(meta[relay.Constant][63] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %950 = reshape(%949, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %951 = @func_4939(%950) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %952 = cast(%var_5787, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %953 = %951.0;
  %954 = cast(%953, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %955 = cast(%var_5788, dtype="float32") /* ty=Tensor[(336), float32] */;
  %956 = reshape(%952, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %957 = reshape(%954, newshape=[7, 110]) /* ty=Tensor[(7, 110), float32] */;
  %958 = reshape(%955, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %959 = @func_4321(%956, %957, %958) /* ty=(Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(11, 14, 5), int16], Tensor[(7, 110), float32], Tensor[(336), float32], Tensor[(11, 14, 5), float32]) */;
  %960 = sin(%947) /* ty=Tensor[(16, 14, 15), float32] */;
  %961 = %948.0;
  %962 = %959.1;
  (%960, %961, %953, meta[relay.Constant][63] /* ty=Tensor[(20), float64] */, %962, %var_5787, %var_5788)
}

def @func_5597() -> (Tensor[(11, 14, 5), float32],) {
  %963 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %964 = %963.0;
  (%964,)
}

def @func_4425(%var_4414: Tensor[(1, 10, 2), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(?, 10, 2), bool], Tensor[(11, 14, 5), float32]) {
  %965 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %966 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %967 = %966.1;
  %968 = cast(%var_4414, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  %969 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(%967, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %972 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %973 = %965.1;
  %974 = equal(%970, %971) /* ty=Tensor[(?, 10, 2), bool] */;
  %975 = %972.0;
  (%973, %974, %975)
}

def @func_283(%var_201: Tensor[(4, 11, 3), float32]) -> (Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) {
  %976 = cast(meta[relay.Constant][64] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %977 = reshape(%976, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
  %978 = @func_143(%977) /* ty=(Tensor[(11, 15, 3), float64],) */;
  %979 = cast(%var_201, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %980 = sinh(%979) /* ty=Tensor[(4, 11, 3), float32] */;
  %981 = cast(%980, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %982 = %978.0;
  %983 = cast(%982, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %984 = reshape(%983, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
  %985 = @func_143(%984) /* ty=(Tensor[(11, 15, 3), float64],) */;
  %986 = cast(meta[relay.Constant][65] /* ty=Tensor[(4, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
  %987 = shape_of(%980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(%980, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %990 = maximum(%988, %989) /* ty=Tensor[(4, 11, 3), int32] */;
  %991 = cast(meta[relay.Constant][65] /* ty=Tensor[(4, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
  %992 = shape_of(%990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %993 = cast(%990, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
  %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %995 = %985.0;
  %996 = cast(%995, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %997 = reshape(%996, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
  %998 = @func_143(%997) /* ty=(Tensor[(11, 15, 3), float64],) */;
  %999 = cast(%980, dtype="float64") /* ty=Tensor[(4, 11, 3), float64] */;
  %1000 = acosh(%999) /* ty=Tensor[(4, 11, 3), float64] */;
  %1001 = cast(%var_201, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %1002 = shape_of(%1000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(%1000, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1005 = asinh(%981) /* ty=Tensor[(4, 11, 3), float32] */;
  %1006 = bitwise_or(%993, %994) /* ty=Tensor[(4, 11, 3), int32] */;
  %1007 = %998.0;
  %1008 = floor_mod(%1003, %1004) /* ty=Tensor[(4, 11, 3), float32] */;
  (%982, meta[relay.Constant][64] /* ty=Tensor[(495), float64] */, %1005, %995, %1006, %1007, %1008)
}

def @func_8338() -> Tensor[(11, 14, 5), float32] {
  @func_7950() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_3804(%var_3765: Tensor[(2, 168), float32], %var_3766: Tensor[(616), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8], Tensor[(2, 168), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %1009 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1010 = cast(meta[relay.Constant][66] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %1011 = cast(%var_3765, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
  %1012 = cast(%var_3766, dtype="float64") /* ty=Tensor[(616), float64] */;
  %1013 = reshape(%1010, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %1014 = reshape(%1011, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
  %1015 = reshape(%1012, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
  %1016 = @func_2851(%1013, %1014, %1015) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
  %1017 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1018 = %1009.1;
  %1019 = %1016.1;
  %1020 = %1017.0;
  (%1018, %1019, meta[relay.Constant][66] /* ty=Tensor[(56), int8] */, %var_3765, %var_3766, %1020)
}

def @func_8913(%var_8909: Tensor[(1200), uint8]) -> (Tensor[(20), float64], Tensor[(10, 15, 8), float32], uint8, Tensor[(1200), uint8]) {
  %1021 = cast(meta[relay.Constant][67] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1022 = cast(%var_8909, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %1023 = reshape(%1021, newshape=[]) /* ty=uint8 */;
  %1024 = reshape(%1022, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), uint8] */;
  %1025 = @func_8816(%1023, %1024) /* ty=(Tensor[(10, 15, 8), float32],) */;
  %1026 = @func_7349() /* ty=Tensor[(20), float64] */;
  %1027 = %1025.0;
  (%1026, %1027, meta[relay.Constant][67] /* ty=uint8 */, %var_8909)
}

def @func_3919() -> (Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) {
  %1028 = @func_3523() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) */;
  %1029 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %1030 = %1028.1;
  %1031 = %1029.0;
  (%1030, %1031)
}

def @func_3720() -> Tensor[(20), float64] {
  %1032 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %1032.2
}

def @func_9734(%var_9727: Tensor[(252), int16]) -> (Tensor[(11, 14, 5), float32], Tensor[(2, 9, 14), int16], Tensor[(252), int16]) {
  %1033 = cast(%var_9727, dtype="int16") /* ty=Tensor[(252), int16] */;
  %1034 = reshape(%1033, newshape=[2, 9, 14]) /* ty=Tensor[(2, 9, 14), int16] */;
  %1035 = @func_6386(%1034) /* ty=(Tensor[(2, 9, 14), int16],) */;
  %1036 = @func_4391() /* ty=Tensor[(11, 14, 5), float32] */;
  %1037 = %1035.0;
  (%1036, %1037, %var_9727)
}

def @func_10577() -> (Tensor[(11, 14, 5), float32], Tensor[(616), float64]) {
  %1038 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %1039 = @func_6370() /* ty=(Tensor[(616), float64],) */;
  %1040 = %1038.0;
  %1041 = %1039.0;
  (%1040, %1041)
}

def @func_6097() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %1042 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1043 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %1044 = %1042.0;
  %1045 = %1043.0;
  (%1044, %1045)
}

def @func_10852() -> Tensor[(11, 14, 5), float32] {
  %1046 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
  %1046.0
}

def @func_4682() -> Tensor[(11, 14, 5), float32] {
  @func_1716() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_2410(%var_2404: Tensor[(11, 14, 5), float32]) -> Tensor[(11, 14, 5), int64] {
  %1047 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1048 = %1047.0;
  %1049 = cast(%var_2404, dtype="int64") /* ty=Tensor[(11, 14, 5), int64] */;
  %1050 = shape_of(%1048, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1051 = cast(%1048, dtype="int64") /* ty=Tensor[(11, 14, 5), int64] */;
  %1052 = dyn.reshape(%1049, %1050, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%1051, %1052) /* ty=Tensor[(11, 14, 5), int64] */
}

def @func_8682() -> Tensor[(11, 14, 5), float32] {
  @func_7147() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_3966() -> (Tensor[(11, 14, 5), float32],) {
  %1053 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1054 = %1053.1;
  (%1054,)
}

def @func_8076() -> Tensor[(11, 14, 5), float32] {
  %1055 = @func_6679() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1055.1
}

def @func_8018() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %1056 = @func_6097() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1057 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  %1058 = %1056.1;
  (%1057, %1058)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6938() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %4 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
    %0 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %1 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
    %2 = %0.1;
    %3 = %1.0;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_6099() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  @func_6097() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_5493() -> (Tensor[(?, 7, 8), float64], Tensor[(2, 168), float32], Tensor[(336, 1), float32], Tensor[(616), float64]) {
  %13 = fn () -> (Tensor[(?, 7, 8), float64], Tensor[(2, 168), float32], Tensor[(336, 1), float32], Tensor[(616), float64]) {
    %5 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(336, 1), float32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
    %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
    %8 = reshape(%6, newshape=[2, 168]) /* ty=Tensor[(2, 168), float32] */;
    %9 = reshape(%7, newshape=[616]) /* ty=Tensor[(616), float64] */;
    %10 = @func_3804(%8, %9) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8], Tensor[(2, 168), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
    %11 = %5.3;
    %12 = %10.3;
    (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(336, 1), float32] */, meta[relay.Constant][1] /* ty=Tensor[(616), float64] */)
  };
  %13() /* ty=(Tensor[(?, 7, 8), float64], Tensor[(2, 168), float32], Tensor[(336, 1), float32], Tensor[(616), float64]) */
}

def @func_4427(%var_4426: Tensor[(1, 10, 2), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(?, 10, 2), bool], Tensor[(11, 14, 5), float32]) {
  %25 = fn (%var_4414: Tensor[(1, 10, 2), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(?, 10, 2), bool], Tensor[(11, 14, 5), float32]) {
    %14 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %15 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %16 = %15.1;
    %17 = cast(%var_4414, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="bool") /* ty=Tensor[(1, 10, 2), bool] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %21 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %22 = %14.1;
    %23 = equal(%19, %20) /* ty=Tensor[(?, 10, 2), bool] */;
    %24 = %21.0;
    (%22, %23, %24)
  };
  %25(%var_4426) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 10, 2), bool], Tensor[(11, 14, 5), float32]) */
}

def @func_7077(%var_7022: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint32], Tensor[(56), int8], Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(11, 14, 5), int64]) {
  %26 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %27 = cast(%var_7022, dtype="int8") /* ty=Tensor[(56), int8] */;
  %28 = reshape(%27, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %29 = @func_2745(%28) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
  %31 = reshape(%30, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
  %32 = @func_143(%31) /* ty=(Tensor[(11, 15, 3), float64],) */;
  %33 = %26.0;
  %34 = cast(%33, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %35 = reshape(%34, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %36 = %29.3;
  %37 = %32.0;
  %38 = @func_2410(%35) /* ty=Tensor[(11, 14, 5), int64] */;
  (%33, %36, %var_7022, %37, meta[relay.Constant][2] /* ty=Tensor[(495), float64] */, %38)
}

def @func_4578() -> Tensor[(11, 14, 5), float32] {
  @func_4576() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_6733() -> (Tensor[(11, 14, 5), float32],) {
  @func_6731() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_8020() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  @func_8018() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_7797(%var_7795: Tensor[(20), float64], %var_7796: Tensor[(20), float64]) -> (Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(20), uint64]) {
  %52 = fn (%var_7775: Tensor[(20), float64], %var_7789: Tensor[(20), float64]) -> (Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(20), uint64]) {
    %39 = @func_3720() /* ty=Tensor[(20), float64] */;
    %40 = cast(%var_7775, dtype="float64") /* ty=Tensor[(20), float64] */;
    %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(1), int32] */;
    %42 = cast(%39, dtype="float64") /* ty=Tensor[(20), float64] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?), float64] */;
    %44 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %45 = cast(%var_7789, dtype="uint64") /* ty=Tensor[(20), uint64] */;
    %46 = shape_of(%var_7775, dtype="int32") /* ty=Tensor[(1), int32] */;
    %47 = cast(%var_7775, dtype="uint64") /* ty=Tensor[(20), uint64] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %49 = power(%42, %43) /* ty=Tensor[(20), float64] */;
    %50 = %44.0;
    %51 = multiply(%47, %48) /* ty=Tensor[(20), uint64] */;
    (%49, %50, %51)
  };
  %52(%var_7795, %var_7796) /* ty=(Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(20), uint64]) */
}

def @func_4447(%var_4446: Tensor[(2, 7, 13), float32]) -> Tensor[(2, 7, 13), float32] {
  %57 = fn (%var_4436: Tensor[(2, 7, 13), float32]) -> Tensor[(2, 7, 13), float32] {
    %53 = cast(%var_4436, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
    %54 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(2, 7, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 13), float32] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%55, %56) /* ty=Tensor[(2, 7, 13), float32] */
  };
  %57(%var_4446) /* ty=Tensor[(2, 7, 13), float32] */
}

def @func_6342() -> Tensor[(336, 1), float32] {
  %58 = @func_5492() /* ty=(Tensor[(?, 7, 8), float64], Tensor[(2, 168), float32], Tensor[(336, 1), float32], Tensor[(616), float64]) */;
  %58.2
}

def @func_8495(%var_8493: Tensor[(3, 7, 11), float32]) -> (Tensor[(3, 7, 11), float32], Tensor[(11, 14, 5), float32]) {
  @func_8492(%var_8493) /* ty=(Tensor[(3, 7, 11), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_2855(%var_2852: Tensor[(56), int8], %var_2853: Tensor[(168, 2), float32], %var_2854: Tensor[(11, 7, 8), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) {
  %89 = fn (%var_2772: Tensor[(56), int8], %var_2802: Tensor[(168, 2), float32], %var_2820: Tensor[(11, 7, 8), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) {
    %59 = @func_2598() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %60 = cast(%var_2772, dtype="int8") /* ty=Tensor[(56), int8] */;
    %61 = reshape(%60, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %62 = @func_2288(%61) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
    %63 = %59.0;
    %64 = cast(%63, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %65 = reshape(%64, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
    %66 = cast(%var_2802, dtype="float32") /* ty=Tensor[(168, 2), float32] */;
    %67 = @func_2410(%65) /* ty=Tensor[(11, 14, 5), int64] */;
    %68 = cast(%67, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %69 = reshape(%66, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %70 = reshape(%68, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
    %71 = @func_1756(%69, %70) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
    %72 = cast(%var_2772, dtype="int8") /* ty=Tensor[(56), int8] */;
    %73 = reshape(%72, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
    %74 = @func_1602(%73) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
    %75 = %74.0;
    %76 = cast(%75, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
    %77 = acosh(%76) /* ty=Tensor[(?, 7, 8), float64] */;
    %78 = cast(%77, dtype="float32") /* ty=Tensor[(?, 7, 8), float32] */;
    %79 = cast(%var_2820, dtype="float32") /* ty=Tensor[(11, 7, 8), float32] */;
    %80 = cast(%75, dtype="float32") /* ty=Tensor[(?, 7, 8), float32] */;
    %81 = cast(%var_2820, dtype="float64") /* ty=Tensor[(11, 7, 8), float64] */;
    %82 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %83 = %62.1;
    %84 = %71.0;
    %85 = floor_mod(%78, %79) /* ty=Tensor[(11, 7, 8), float32] */;
    %86 = tan(%80) /* ty=Tensor[(?, 7, 8), float32] */;
    %87 = sin(%81) /* ty=Tensor[(11, 7, 8), float64] */;
    %88 = %82.1;
    (%63, %var_2772, %83, %67, %84, %var_2802, %85, %86, %87, %88)
  };
  %89(%var_2852, %var_2853, %var_2854) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */
}

def @func_5015() -> (Tensor[(11, 14, 5), float32],) {
  %91 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %90 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
    (%90,)
  };
  %91() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_6307() -> Tensor[(56), int8] {
  %93 = fn () -> Tensor[(56), int8] {
    %92 = @func_4162() /* ty=(Tensor[(56), int8],) */;
    %92.0
  };
  %93() /* ty=Tensor[(56), int8] */
}

def @func_8626() -> (Tensor[(11, 14, 5), float32],) {
  @func_8624() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_5994(%var_5992: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8]) {
  @func_5991(%var_5992) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8]) */
}

def @func_4621() -> Tensor[(6, 15, 9), float64] {
  @func_4619() /* ty=Tensor[(6, 15, 9), float64] */
}

def @func_9566() -> Tensor[(11, 14, 5), float32] {
  @func_9564() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_8935() -> (Tensor[(11, 14, 5), float32],) {
  %96 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %94 = @func_7942() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %95 = %94.0;
    (%95,)
  };
  %96() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_8682() -> Tensor[(11, 14, 5), float32] {
  @func_7147() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_6097() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %97 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %98 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %99 = %97.0;
  %100 = %98.0;
  (%99, %100)
}

def @func_8445() -> (Tensor[(3, 11, 9), bool],) {
  %108 = fn () -> (Tensor[(3, 11, 9), bool],) {
    %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 11, 9), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 9), float32] */;
    %102 = cosh(%101) /* ty=Tensor[(3, 11, 9), float32] */;
    %103 = cast(%102, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
    %104 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 11, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 11, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 11, 9), bool] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %107 = logical_and(%105, %106) /* ty=Tensor[(3, 11, 9), bool] */;
    (%107,)
  };
  %108() /* ty=(Tensor[(3, 11, 9), bool],) */
}

def @func_981(%var_979: Tensor[(3, 4, 12), float64]) -> (Tensor[(3, 4, 12), float64],) {
  @func_978(%var_979) /* ty=(Tensor[(3, 4, 12), float64],) */
}

def @func_10480() -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1200), uint8], Tensor[(3, 11, 9), bool], Tensor[(1260), bool], Tensor[(1260), float32]) {
  @func_10478() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1200), uint8], Tensor[(3, 11, 9), bool], Tensor[(1260), bool], Tensor[(1260), float32]) */
}

def @func_9878() -> (Tensor[(11, 14, 5), float32], uint8, Tensor[(1200), uint8], Tensor[(11, 14, 5), float32]) {
  @func_9876() /* ty=(Tensor[(11, 14, 5), float32], uint8, Tensor[(1200), uint8], Tensor[(11, 14, 5), float32]) */
}

def @func_5741(%var_5695: Tensor[(13, 15, 8), uint16], %var_5733: Tensor[(616), float64]) -> (Tensor[(13, 15, 8), uint16], Tensor[(1, 16, 12), float32], Tensor[(192), float64], Tensor[(11, 14, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(11, 7, 8), float64], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %109 = cast(%var_5695, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %110 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 15, 8), uint16] */, dtype="uint16") /* ty=Tensor[(13, 15, 8), uint16] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %114 = reshape(%113, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
  %115 = @func_2204(%114) /* ty=(Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) */;
  %116 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %117 = cast(%var_5695, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %119 = cast(meta[relay.Constant][8] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %120 = cast(%var_5733, dtype="float64") /* ty=Tensor[(616), float64] */;
  %121 = reshape(%118, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %122 = reshape(%119, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
  %123 = reshape(%120, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
  %124 = @func_2851(%121, %122, %123) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
  %125 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %126 = multiply(%111, %112) /* ty=Tensor[(13, 15, 8), uint16] */;
  %127 = %115.1;
  %128 = %116.0;
  %129 = erf(%117) /* ty=Tensor[(13, 15, 8), float64] */;
  %130 = %124.8;
  %131 = %125.0;
  (%126, %127, meta[relay.Constant][6] /* ty=Tensor[(192), float64] */, %128, %129, %130, meta[relay.Constant][7] /* ty=Tensor[(56), int8] */, meta[relay.Constant][8] /* ty=Tensor[(336), float32] */, %var_5733, %131)
}

def @func_10071() -> (Tensor[(9, 16, ?), float64],) {
  %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(9, 16, 1), float64] */;
  %133 = asinh(%132) /* ty=Tensor[(9, 16, 1), float64] */;
  %134 = cast(%133, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  %135 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(9, 16, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 16, 1), float64] */, dtype="bool") /* ty=Tensor[(9, 16, 1), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = equal(%136, %137) /* ty=Tensor[(9, 16, ?), bool] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(9, 16, ?), float64] */;
  %140 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%133, dtype="float64") /* ty=Tensor[(9, 16, 1), float64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %143 = minimum(%141, %142) /* ty=Tensor[(9, 16, ?), float64] */;
  (%143,)
}

def @func_6438(%var_6411: Tensor[(15, 11, 15), float32], %var_6432: Tensor[(3360), float32], %var_6434: Tensor[(336), float32]) -> (Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) {
  %144 = cast(%var_6411, dtype="float32") /* ty=Tensor[(15, 11, 15), float32] */;
  %145 = cast(%var_6432, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(132, 1), float32] */, dtype="float32") /* ty=Tensor[(132, 1), float32] */;
  %147 = cast(%var_6434, dtype="float32") /* ty=Tensor[(336), float32] */;
  %148 = reshape(%145, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), float32] */;
  %149 = reshape(%146, newshape=[66, 2]) /* ty=Tensor[(66, 2), float32] */;
  %150 = reshape(%147, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %151 = @func_5808(%148, %149, %150) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(66, 2), float32], Tensor[(336), float32]) */;
  %152 = acosh(%144) /* ty=Tensor[(15, 11, 15), float32] */;
  %153 = %151.6;
  (%152, %153, %var_6432, meta[relay.Constant][10] /* ty=Tensor[(132, 1), float32] */, %var_6434)
}

def @func_10681() -> (Tensor[(11, 14, 5), float32],) {
  %156 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %154 = @func_6679() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %155 = %154.2;
    (%155,)
  };
  %156() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_849(%var_848: Tensor[(1, 1, 8), uint8]) -> (Tensor[(1, 1, 8), float64],) {
  %162 = fn (%var_839: Tensor[(1, 1, 8), uint8]) -> (Tensor[(1, 1, 8), float64],) {
    %157 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %158 = cast(%var_839, dtype="uint8") /* ty=Tensor[(1, 1, 8), uint8] */;
    %159 = multiply(%157, %158) /* ty=Tensor[(1, 1, 8), uint8] */;
    %160 = cast(%159, dtype="float64") /* ty=Tensor[(1, 1, 8), float64] */;
    %161 = log(%160) /* ty=Tensor[(1, 1, 8), float64] */;
    (%161,)
  };
  %162(%var_848) /* ty=(Tensor[(1, 1, 8), float64],) */
}

def @func_6466() -> Tensor[(56), int8] {
  %163 = @func_4162() /* ty=(Tensor[(56), int8],) */;
  %163.0
}

def @func_6909(%var_6908: Tensor[(616), float64]) -> (Tensor[(616), uint32], Tensor[(616), bool], Tensor[(11, 14, 5), float32]) {
  %180 = fn (%var_6876: Tensor[(616), float64]) -> (Tensor[(616), uint32], Tensor[(616), bool], Tensor[(11, 14, 5), float32]) {
    %164 = @func_6370() /* ty=(Tensor[(616), float64],) */;
    %165 = %164.0;
    %166 = cast(%165, dtype="float64") /* ty=Tensor[(616), float64] */;
    %167 = sin(%166) /* ty=Tensor[(616), float64] */;
    %168 = cast(%165, dtype="uint32") /* ty=Tensor[(616), uint32] */;
    %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(1), int32] */;
    %170 = cast(%167, dtype="uint32") /* ty=Tensor[(616), uint32] */;
    %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %172 = cast(%var_6876, dtype="bool") /* ty=Tensor[(616), bool] */;
    %173 = shape_of(%167, dtype="int32") /* ty=Tensor[(1), int32] */;
    %174 = cast(%167, dtype="bool") /* ty=Tensor[(616), bool] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?), bool] */;
    %176 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %177 = maximum(%170, %171) /* ty=Tensor[(616), uint32] */;
    %178 = greater_equal(%174, %175) /* ty=Tensor[(616), bool] */;
    %179 = %176.0;
    (%177, %178, %179)
  };
  %180(%var_6908) /* ty=(Tensor[(616), uint32], Tensor[(616), bool], Tensor[(11, 14, 5), float32]) */
}

def @func_5897() -> Tensor[(616), float64] {
  %181 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %181.4
}

def @func_7631(%var_7602: Tensor[(16, 10, 12), uint32]) -> (Tensor[(16, 10, 12), uint32], Tensor[(13, 13, 11), bool], Tensor[(1859), uint64]) {
  %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 10, 12), uint32] */, dtype="uint32") /* ty=Tensor[(16, 10, 12), uint32] */;
  %183 = shape_of(%var_7602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%var_7602, dtype="uint32") /* ty=Tensor[(16, 10, 12), uint32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(1859), uint64] */, dtype="uint64") /* ty=Tensor[(1859), uint64] */;
  %187 = reshape(%186, newshape=[13, 13, 11]) /* ty=Tensor[(13, 13, 11), uint64] */;
  %188 = @func_4745(%187) /* ty=(Tensor[(13, 13, 11), bool], Tensor[(13, 13, 11), float32], Tensor[(11, 8, 12), int32], Tensor[(770), float32], Tensor[(336), float32]) */;
  %189 = minimum(%184, %185) /* ty=Tensor[(16, 10, 12), uint32] */;
  %190 = %188.0;
  (%189, %190, meta[relay.Constant][13] /* ty=Tensor[(1859), uint64] */)
}

def @func_3920() -> (Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) {
  %195 = fn () -> (Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) {
    %191 = @func_3523() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) */;
    %192 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %193 = %191.1;
    %194 = %192.0;
    (%193, %194)
  };
  %195() /* ty=(Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) */
}

def @func_10386(%var_10329: Tensor[(1260), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32], Tensor[(616), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1260), bool], Tensor[(3, 4, 12), float64], Tensor[(144), float64], Tensor[(2, 7, 13), float32], Tensor[(182), float32]) {
  %196 = @func_9770() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %197 = cast(%var_10329, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %198 = cast(meta[relay.Constant][14] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %199 = reshape(%197, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), float32] */;
  %200 = reshape(%198, newshape=[1056]) /* ty=Tensor[(1056), int32] */;
  %201 = @func_5945(%199, %200) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) */;
  %202 = cast(meta[relay.Constant][15] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %203 = reshape(%202, newshape=[616]) /* ty=Tensor[(616), float64] */;
  %204 = @func_8047(%203) /* ty=(Tensor[(11, 14, 5), int64], Tensor[(616), bool], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %205 = cast(meta[relay.Constant][16] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %206 = reshape(%205, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %207 = @func_8365(%206) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) */;
  %208 = cast(meta[relay.Constant][17] /* ty=Tensor[(1260), float32] */, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %209 = shape_of(%var_10329, dtype="int32") /* ty=Tensor[(1), int32] */;
  %210 = cast(%var_10329, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?), bool] */;
  %212 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %213 = reshape(%212, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float64] */;
  %214 = @func_978(%213) /* ty=(Tensor[(3, 4, 12), float64],) */;
  %215 = cast(meta[relay.Constant][19] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %216 = reshape(%215, newshape=[2, 7, 13]) /* ty=Tensor[(2, 7, 13), float32] */;
  %217 = @func_4576() /* ty=Tensor[(11, 14, 5), float32] */;
  %218 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
  %219 = %196.0;
  %220 = %201.1;
  %221 = %204.2;
  %222 = %207.1;
  %223 = equal(%210, %211) /* ty=Tensor[(1260), bool] */;
  %224 = %214.0;
  %225 = @func_4445(%216) /* ty=Tensor[(2, 7, 13), float32] */;
  (%217, %218, %219, %220, meta[relay.Constant][14] /* ty=Tensor[(1056), int32] */, %221, meta[relay.Constant][15] /* ty=Tensor[(616), float64] */, %222, meta[relay.Constant][16] /* ty=Tensor[(56), int8] */, %223, %224, meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, %225, meta[relay.Constant][19] /* ty=Tensor[(182), float32] */)
}

def @func_1146(%var_1144: Tensor[(6, 16, 3), float32]) -> (Tensor[(6, 16, 3), float32],) {
  @func_1143(%var_1144) /* ty=(Tensor[(6, 16, 3), float32],) */
}

def @func_2112(%var_2110: Tensor[(1, 10, 2), float64]) -> Tensor[(1, 10, 2), float64] {
  @func_2109(%var_2110) /* ty=Tensor[(1, 10, 2), float64] */
}

def @func_5948(%var_5946: Tensor[(14, 15, 6), float32], %var_5947: Tensor[(1056), int32]) -> (Tensor[(14, 15, 6), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) {
  %234 = fn (%var_5928: Tensor[(14, 15, 6), float32], %var_5938: Tensor[(1056), int32]) -> (Tensor[(14, 15, 6), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) {
    %226 = cast(%var_5928, dtype="float32") /* ty=Tensor[(14, 15, 6), float32] */;
    %227 = cast(%var_5938, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %228 = cast(%var_5938, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %229 = reshape(%227, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
    %230 = reshape(%228, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
    %231 = @func_672(%229, %230) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
    %232 = cos(%226) /* ty=Tensor[(14, 15, 6), float32] */;
    %233 = %231.1;
    (%232, %233, %var_5938)
  };
  %234(%var_5946, %var_5947) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) */
}

def @func_8684() -> Tensor[(11, 14, 5), float32] {
  @func_8682() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_4745(%var_4699: Tensor[(13, 13, 11), uint64]) -> (Tensor[(13, 13, 11), bool], Tensor[(13, 13, 11), float32], Tensor[(11, 8, 12), int32], Tensor[(770), float32], Tensor[(336), float32]) {
  %235 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 13, 11), uint64] */, dtype="bool") /* ty=Tensor[(13, 13, 11), bool] */;
  %236 = shape_of(%var_4699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%var_4699, dtype="bool") /* ty=Tensor[(13, 13, 11), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %239 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 13, 11), uint64] */, dtype="float32") /* ty=Tensor[(13, 13, 11), float32] */;
  %240 = cast(meta[relay.Constant][21] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %241 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %242 = reshape(%240, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %243 = reshape(%241, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %244 = @func_1981(%242, %243) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
  %245 = less(%237, %238) /* ty=Tensor[(13, 13, 11), bool] */;
  %246 = acos(%239) /* ty=Tensor[(13, 13, 11), float32] */;
  %247 = %244.4;
  (%245, %246, %247, meta[relay.Constant][21] /* ty=Tensor[(770), float32] */, meta[relay.Constant][22] /* ty=Tensor[(336), float32] */)
}

def @func_2147() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %248 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %249 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %250 = %248.0;
  (%249, %250)
}

def @func_9044() -> Tensor[(56), int8] {
  %251 = @func_4162() /* ty=(Tensor[(56), int8],) */;
  %251.0
}

def @func_7593(%var_7592: Tensor[(1560), uint16]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1560), uint16], Tensor[(616), float64]) {
  %259 = fn (%var_7579: Tensor[(1560), uint16]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1560), uint16], Tensor[(616), float64]) {
    %252 = cast(%var_7579, dtype="uint16") /* ty=Tensor[(1560), uint16] */;
    %253 = cast(meta[relay.Constant][23] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
    %254 = reshape(%252, newshape=[13, 15, 8]) /* ty=Tensor[(13, 15, 8), uint16] */;
    %255 = reshape(%253, newshape=[616]) /* ty=Tensor[(616), float64] */;
    %256 = @func_5741(%254, %255) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(1, 16, 12), float32], Tensor[(192), float64], Tensor[(11, 14, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(11, 7, 8), float64], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
    %257 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
    %258 = %256.6;
    (%257, %258, %var_7579, meta[relay.Constant][23] /* ty=Tensor[(616), float64] */)
  };
  %259(%var_7592) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1560), uint16], Tensor[(616), float64]) */
}

def @main(%var_10953: Tensor[(220), uint32], %var_10975: Tensor[(24, 14), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(770), float32], Tensor[(220), uint32], Tensor[(24, 14), int16]) {
  %260 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 14), float32] */, dtype="float32") /* ty=Tensor[(24, 14), float32] */;
  %261 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %263 = cast(%var_10953, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %264 = reshape(%260, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %265 = reshape(%262, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %266 = reshape(%263, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %267 = @func_5245(%264, %265, %266) /* ty=(Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) */;
  %268 = cast(%var_10975, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
  %269 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(24, 14), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %270 = cast(meta[relay.Constant][24] /* ty=Tensor[(24, 14), float32] */, dtype="int16") /* ty=Tensor[(24, 14), int16] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %272 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %273 = %267.2;
  %274 = subtract(%270, %271) /* ty=Tensor[(24, 14), int16] */;
  (%272, %273, %var_10953, %274)
}

def @func_6973(%var_6970: Tensor[(240), uint8]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(20), uint8], Tensor[(240), uint8], Tensor[(132), float32]) {
  %275 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %276 = cast(meta[relay.Constant][25] /* ty=Tensor[(20), uint8] */, dtype="uint8") /* ty=Tensor[(20), uint8] */;
  %277 = cast(%var_6970, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %278 = cast(meta[relay.Constant][26] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %279 = reshape(%276, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint8] */;
  %280 = reshape(%277, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), uint8] */;
  %281 = reshape(%278, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %282 = @func_6716(%279, %280, %281) /* ty=(Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) */;
  %283 = %275.1;
  %284 = %282.3;
  (%283, %284, meta[relay.Constant][25] /* ty=Tensor[(20), uint8] */, %var_6970, meta[relay.Constant][26] /* ty=Tensor[(132), float32] */)
}

def @func_1756(%var_1729: Tensor[(336), float32], %var_1750: Tensor[(11, 14, 5), float32]) -> (Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) {
  %285 = cast(%var_1729, dtype="float32") /* ty=Tensor[(336), float32] */;
  %286 = reshape(%285, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float32] */;
  %287 = @func_884(%286) /* ty=(Tensor[(7, 12, 4), float32],) */;
  %288 = %287.0;
  %289 = cast(%var_1729, dtype="uint8") /* ty=Tensor[(336), uint8] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint8") /* ty=Tensor[(7, 12, 4), uint8] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %293 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %294 = cast(%var_1750, dtype="uint8") /* ty=Tensor[(11, 14, 5), uint8] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="uint8") /* ty=Tensor[(11, 14, 5), uint8] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %298 = subtract(%291, %292) /* ty=Tensor[(7, 12, 4), uint8] */;
  %299 = right_shift(%296, %297) /* ty=Tensor[(11, 14, 5), uint8] */;
  (%298, %299)
}

def @func_1143(%var_1131: Tensor[(6, 16, 3), float32]) -> (Tensor[(6, 16, 3), float32],) {
  %300 = cast(%var_1131, dtype="float32") /* ty=Tensor[(6, 16, 3), float32] */;
  %301 = exp(%300) /* ty=Tensor[(6, 16, 3), float32] */;
  (%301,)
}

def @func_4065(%var_4064: Tensor[(5, 7, 8), float32]) -> (Tensor[(5, 7, 8), float32], Tensor[(?, 7, 8), uint64], Tensor[(2, 28), int8]) {
  %308 = fn (%var_4048: Tensor[(5, 7, 8), float32]) -> (Tensor[(5, 7, 8), float32], Tensor[(?, 7, 8), uint64], Tensor[(2, 28), int8]) {
    %302 = cast(%var_4048, dtype="float32") /* ty=Tensor[(5, 7, 8), float32] */;
    %303 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 28), int8] */, dtype="int8") /* ty=Tensor[(2, 28), int8] */;
    %304 = reshape(%303, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
    %305 = @func_1602(%304) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
    %306 = log(%302) /* ty=Tensor[(5, 7, 8), float32] */;
    %307 = %305.0;
    (%306, %307, meta[relay.Constant][27] /* ty=Tensor[(2, 28), int8] */)
  };
  %308(%var_4064) /* ty=(Tensor[(5, 7, 8), float32], Tensor[(?, 7, 8), uint64], Tensor[(2, 28), int8]) */
}

def @func_6386(%var_6379: Tensor[(2, 9, 14), int16]) -> (Tensor[(2, 9, 14), int16],) {
  %309 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 9, 14), int16] */, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %310 = shape_of(%var_6379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%var_6379, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %313 = bitwise_and(%311, %312) /* ty=Tensor[(2, 9, 14), int16] */;
  (%313,)
}

def @func_8404(%var_8402: Tensor[(2, 10, 10), int8], %var_8403: Tensor[(2, 10, 10), int8]) -> Tensor[(2, 10, 10), int8] {
  %318 = fn (%var_8391: Tensor[(2, 10, 10), int8], %var_8392: Tensor[(2, 10, 10), int8]) -> Tensor[(2, 10, 10), int8] {
    %314 = cast(%var_8392, dtype="int8") /* ty=Tensor[(2, 10, 10), int8] */;
    %315 = shape_of(%var_8391, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(%var_8391, dtype="int8") /* ty=Tensor[(2, 10, 10), int8] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    add(%316, %317) /* ty=Tensor[(2, 10, 10), int8] */
  };
  %318(%var_8402, %var_8403) /* ty=Tensor[(2, 10, 10), int8] */
}

def @func_9772() -> (Tensor[(11, 14, 5), float32],) {
  @func_9770() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_145(%var_144: Tensor[(11, 15, 3), float64]) -> (Tensor[(11, 15, 3), float64],) {
  %321 = fn (%var_133: Tensor[(11, 15, 3), float64]) -> (Tensor[(11, 15, 3), float64],) {
    %319 = cast(%var_133, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
    %320 = cos(%319) /* ty=Tensor[(11, 15, 3), float64] */;
    (%320,)
  };
  %321(%var_144) /* ty=(Tensor[(11, 15, 3), float64],) */
}

def @func_8094() -> (Tensor[(11, 14, 5), float32],) {
  %324 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %322 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %323 = %322.0;
    (%323,)
  };
  %324() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_9334() -> (Tensor[(11, 14, 5), float32],) {
  @func_9332() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_7745(%var_7744: Tensor[(1056), int32]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(336), float32], Tensor[(11, 15, 3), float32]) {
  %349 = fn (%var_7694: Tensor[(1056), int32]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(336), float32], Tensor[(11, 15, 3), float32]) {
    %325 = @func_6731() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %326 = @func_7311() /* ty=(Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %327 = @func_6731() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %328 = cast(meta[relay.Constant][29] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %329 = cast(%var_7694, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %330 = cast(%var_7694, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %331 = reshape(%328, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %332 = reshape(%329, newshape=[2, 528]) /* ty=Tensor[(2, 528), int32] */;
    %333 = reshape(%330, newshape=[2, 528]) /* ty=Tensor[(2, 528), float64] */;
    %334 = @func_5576(%331, %332, %333) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(2, 528), bool], Tensor[(2, 528), bool]) */;
    %335 = cast(%var_7694, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %336 = cast(%var_7694, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %337 = reshape(%335, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
    %338 = reshape(%336, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
    %339 = @func_672(%337, %338) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
    %340 = %339.1;
    %341 = cast(%340, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
    %342 = log(%341) /* ty=Tensor[(11, 15, 3), float64] */;
    %343 = cast(%342, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
    %344 = %325.0;
    %345 = %326.3;
    %346 = %327.0;
    %347 = %334.2;
    %348 = asin(%343) /* ty=Tensor[(11, 15, 3), float32] */;
    (%344, %345, %var_7694, %346, %347, meta[relay.Constant][29] /* ty=Tensor[(336), float32] */, %348)
  };
  %349(%var_7744) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(336), float32], Tensor[(11, 15, 3), float32]) */
}

def @func_4326(%var_4323: Tensor[(132), float32], %var_4324: Tensor[(7, 110), float32], %var_4325: Tensor[(336), float32]) -> (Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(11, 14, 5), int16], Tensor[(7, 110), float32], Tensor[(336), float32], Tensor[(11, 14, 5), float32]) {
  @func_4321(%var_4323, %var_4324, %var_4325) /* ty=(Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(11, 14, 5), int16], Tensor[(7, 110), float32], Tensor[(336), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_2410(%var_2404: Tensor[(11, 14, 5), float32]) -> Tensor[(11, 14, 5), int64] {
  %350 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %351 = %350.0;
  %352 = cast(%var_2404, dtype="int64") /* ty=Tensor[(11, 14, 5), int64] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="int64") /* ty=Tensor[(11, 14, 5), int64] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%354, %355) /* ty=Tensor[(11, 14, 5), int64] */
}

def @func_2044() -> (Tensor[(11, 14, 5), float32],) {
  %358 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %356 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %357 = %356.0;
    (%357,)
  };
  %358() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_10515(%var_10514: Tensor[(280), float32]) -> (Tensor[(20), float64], Tensor[(5, 7, 8), float32], Tensor[(280), float32]) {
  %365 = fn (%var_10508: Tensor[(280), float32]) -> (Tensor[(20), float64], Tensor[(5, 7, 8), float32], Tensor[(280), float32]) {
    %359 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %360 = cast(%var_10508, dtype="float32") /* ty=Tensor[(280), float32] */;
    %361 = reshape(%360, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
    %362 = @func_4063(%361) /* ty=(Tensor[(5, 7, 8), float32], Tensor[(?, 7, 8), uint64], Tensor[(2, 28), int8]) */;
    %363 = %359.2;
    %364 = %362.0;
    (%363, %364, %var_10508)
  };
  %365(%var_10514) /* ty=(Tensor[(20), float64], Tensor[(5, 7, 8), float32], Tensor[(280), float32]) */
}

def @func_7312() -> (Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %374 = fn () -> (Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
    %366 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %367 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %368 = %367.0;
    %369 = cast(%368, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %370 = reshape(%369, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
    %371 = @func_5897() /* ty=Tensor[(616), float64] */;
    %372 = %366.0;
    %373 = @func_2090(%370) /* ty=Tensor[(11, 14, 5), float32] */;
    (%371, %372, %368, %373)
  };
  %374() /* ty=(Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_8195(%var_8193: Tensor[(192), float64], %var_8194: Tensor[(240), uint8]) -> (Tensor[(20), float64], Tensor[(6, 15, 9), bool], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(192), float64], Tensor[(132), float32], Tensor[(240), uint8], Tensor[(132), float32], Tensor[(1, 16, 12), float32]) {
  %399 = fn (%var_8155: Tensor[(192), float64], %var_8160: Tensor[(240), uint8]) -> (Tensor[(20), float64], Tensor[(6, 15, 9), bool], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(192), float64], Tensor[(132), float32], Tensor[(240), uint8], Tensor[(132), float32], Tensor[(1, 16, 12), float32]) {
    %375 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %376 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
    %377 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 15, 9), float64] */, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
    %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
    %379 = cast(%376, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
    %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %381 = %375.2;
    %382 = cast(%381, dtype="uint8") /* ty=Tensor[(20), uint8] */;
    %383 = cast(%var_8160, dtype="uint8") /* ty=Tensor[(240), uint8] */;
    %384 = cast(meta[relay.Constant][31] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %385 = reshape(%382, newshape=[1, 5, 4]) /* ty=Tensor[(1, 5, 4), uint8] */;
    %386 = reshape(%383, newshape=[12, 5, 4]) /* ty=Tensor[(12, 5, 4), uint8] */;
    %387 = reshape(%384, newshape=[132]) /* ty=Tensor[(132), float32] */;
    %388 = @func_6716(%385, %386, %387) /* ty=(Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) */;
    %389 = cast(%var_8155, dtype="float64") /* ty=Tensor[(192), float64] */;
    %390 = reshape(%389, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
    %391 = @func_2204(%390) /* ty=(Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) */;
    %392 = %391.1;
    %393 = cast(%392, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
    %394 = not_equal(%379, %380) /* ty=Tensor[(6, 15, 9), bool] */;
    %395 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
    %396 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
    %397 = %388.2;
    %398 = acosh(%393) /* ty=Tensor[(1, 16, 12), float32] */;
    (%381, %394, %395, %396, %var_8155, %397, %var_8160, meta[relay.Constant][31] /* ty=Tensor[(132), float32] */, %398)
  };
  %399(%var_8193, %var_8194) /* ty=(Tensor[(20), float64], Tensor[(6, 15, 9), bool], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(192), float64], Tensor[(132), float32], Tensor[(240), uint8], Tensor[(132), float32], Tensor[(1, 16, 12), float32]) */
}

def @func_3305(%var_3302: Tensor[(20), float64], %var_3303: Tensor[(7, 88), float64], %var_3304: Tensor[(1056), int32]) -> (Tensor[(56), int8], Tensor[(3, 4, 12), float64], Tensor[(2, 72), float64], Tensor[(?, 10, 2), uint16], Tensor[(11, 7, 8), float64], Tensor[(336), float32], Tensor[(11, 14, 5), float32], Tensor[(7, 88), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) {
  %433 = fn (%var_3234: Tensor[(20), float64], %var_3267: Tensor[(7, 88), float64], %var_3299: Tensor[(1056), int32]) -> (Tensor[(56), int8], Tensor[(3, 4, 12), float64], Tensor[(2, 72), float64], Tensor[(?, 10, 2), uint16], Tensor[(11, 7, 8), float64], Tensor[(336), float32], Tensor[(11, 14, 5), float32], Tensor[(7, 88), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) {
    %400 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
    %401 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 72), float64] */, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
    %402 = reshape(%401, newshape=[3, 4, 12]) /* ty=Tensor[(3, 4, 12), float64] */;
    %403 = @func_978(%402) /* ty=(Tensor[(3, 4, 12), float64],) */;
    %404 = cast(%var_3234, dtype="float64") /* ty=Tensor[(20), float64] */;
    %405 = reshape(%404, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
    %406 = @func_2109(%405) /* ty=Tensor[(1, 10, 2), float64] */;
    %407 = cast(%var_3234, dtype="uint16") /* ty=Tensor[(20), uint16] */;
    %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%406, dtype="uint16") /* ty=Tensor[(1, 10, 2), uint16] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %411 = %400.2;
    %412 = cast(%411, dtype="int8") /* ty=Tensor[(56), int8] */;
    %413 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %414 = cast(%var_3267, dtype="float64") /* ty=Tensor[(7, 88), float64] */;
    %415 = reshape(%412, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %416 = reshape(%413, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
    %417 = reshape(%414, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
    %418 = @func_2851(%415, %416, %417) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
    %419 = cast(%var_3267, dtype="float64") /* ty=Tensor[(7, 88), float64] */;
    %420 = sigmoid(%419) /* ty=Tensor[(7, 88), float64] */;
    %421 = cast(%420, dtype="float32") /* ty=Tensor[(7, 88), float32] */;
    %422 = cast(%var_3299, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %423 = cast(%var_3299, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %424 = reshape(%422, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
    %425 = reshape(%423, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
    %426 = @func_672(%424, %425) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
    %427 = %403.0;
    %428 = add(%409, %410) /* ty=Tensor[(?, 10, 2), uint16] */;
    %429 = %418.8;
    %430 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
    %431 = sinh(%421) /* ty=Tensor[(7, 88), float32] */;
    %432 = %426.1;
    (%411, %427, meta[relay.Constant][32] /* ty=Tensor[(2, 72), float64] */, %428, %429, meta[relay.Constant][33] /* ty=Tensor[(336), float32] */, %430, %431, %432, %var_3299)
  };
  %433(%var_3302, %var_3303, %var_3304) /* ty=(Tensor[(56), int8], Tensor[(3, 4, 12), float64], Tensor[(2, 72), float64], Tensor[(?, 10, 2), uint16], Tensor[(11, 7, 8), float64], Tensor[(336), float32], Tensor[(11, 14, 5), float32], Tensor[(7, 88), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32]) */
}

def @func_2092(%var_2091: Tensor[(11, 14, 5), float32]) -> Tensor[(11, 14, 5), float32] {
  %440 = fn (%var_2073: Tensor[(11, 14, 5), float32]) -> Tensor[(11, 14, 5), float32] {
    %434 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %435 = %434.0;
    %436 = cast(%var_2073, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
    %438 = cast(%435, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%438, %439) /* ty=Tensor[(11, 14, 5), float32] */
  };
  %440(%var_2091) /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_7172() -> Tensor[(11, 14, 5), float32] {
  %441 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %441.0
}

def @func_886(%var_885: Tensor[(7, 12, 4), float32]) -> (Tensor[(7, 12, 4), float32],) {
  %444 = fn (%var_880: Tensor[(7, 12, 4), float32]) -> (Tensor[(7, 12, 4), float32],) {
    %442 = cast(%var_880, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
    %443 = erf(%442) /* ty=Tensor[(7, 12, 4), float32] */;
    (%443,)
  };
  %444(%var_885) /* ty=(Tensor[(7, 12, 4), float32],) */
}

def @func_8049(%var_8048: Tensor[(616), float64]) -> (Tensor[(11, 14, 5), int64], Tensor[(616), bool], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %453 = fn (%var_8037: Tensor[(616), float64]) -> (Tensor[(11, 14, 5), int64], Tensor[(616), bool], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
    %445 = @func_3919() /* ty=(Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) */;
    %446 = cast(%var_8037, dtype="float64") /* ty=Tensor[(616), float64] */;
    %447 = reshape(%446, newshape=[616]) /* ty=Tensor[(616), float64] */;
    %448 = @func_6907(%447) /* ty=(Tensor[(616), uint32], Tensor[(616), bool], Tensor[(11, 14, 5), float32]) */;
    %449 = @func_7753() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %450 = %445.0;
    %451 = %448.1;
    %452 = %449.0;
    (%450, %451, %var_8037, %452)
  };
  %453(%var_8048) /* ty=(Tensor[(11, 14, 5), int64], Tensor[(616), bool], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */
}

def @func_676(%var_674: Tensor[(11, 8, 12), int32], %var_675: Tensor[(11, 8, 12), int32]) -> (Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) {
  @func_672(%var_674, %var_675) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */
}

def @func_10125(%var_10123: Tensor[(8, 16, 3), float32], %var_10124: Tensor[(220), uint32]) -> (Tensor[(8, 16, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(336), float32], Tensor[(220), uint32], Tensor[(8, 16, 3), float32]) {
  @func_10121(%var_10123, %var_10124) /* ty=(Tensor[(8, 16, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(336), float32], Tensor[(220), uint32], Tensor[(8, 16, 3), float32]) */
}

def @func_7943() -> (Tensor[(11, 14, 5), float32],) {
  %456 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %454 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
    %455 = %454.5;
    (%455,)
  };
  %456() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_1760(%var_1758: Tensor[(336), float32], %var_1759: Tensor[(11, 14, 5), float32]) -> (Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) {
  @func_1756(%var_1758, %var_1759) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */
}

def @func_2413(%var_2411: Tensor[(11, 14, 5), float32]) -> Tensor[(11, 14, 5), int64] {
  @func_2410(%var_2411) /* ty=Tensor[(11, 14, 5), int64] */
}

def @func_3807(%var_3805: Tensor[(2, 168), float32], %var_3806: Tensor[(616), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8], Tensor[(2, 168), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %469 = fn (%var_3765: Tensor[(2, 168), float32], %var_3766: Tensor[(616), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8], Tensor[(2, 168), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
    %457 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %458 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
    %459 = cast(%var_3765, dtype="float32") /* ty=Tensor[(2, 168), float32] */;
    %460 = cast(%var_3766, dtype="float64") /* ty=Tensor[(616), float64] */;
    %461 = reshape(%458, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %462 = reshape(%459, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
    %463 = reshape(%460, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
    %464 = @func_2851(%461, %462, %463) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
    %465 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %466 = %457.1;
    %467 = %464.1;
    %468 = %465.0;
    (%466, %467, meta[relay.Constant][34] /* ty=Tensor[(56), int8] */, %var_3765, %var_3766, %468)
  };
  %469(%var_3805, %var_3806) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8], Tensor[(2, 168), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */
}

def @func_5991(%var_5976: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(56), int8]) {
  %470 = @func_2598() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %471 = cast(%var_5976, dtype="int8") /* ty=Tensor[(56), int8] */;
  %472 = reshape(%471, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %473 = @func_2745(%472) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
  %474 = %470.0;
  %475 = %473.2;
  (%474, %475, %var_5976)
}

def @func_9492(%var_9466: Tensor[(336), float32]) -> (Tensor[(616), float64], Tensor[(11, 14, 5), uint8], Tensor[(336), float32], Tensor[(770), float32], Tensor[(11, 14, 5), float32]) {
  %476 = @func_6370() /* ty=(Tensor[(616), float64],) */;
  %477 = cast(%var_9466, dtype="float32") /* ty=Tensor[(336), float32] */;
  %478 = cast(meta[relay.Constant][35] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %479 = reshape(%477, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %480 = reshape(%478, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %481 = @func_1756(%479, %480) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %482 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %483 = %476.0;
  %484 = %481.1;
  %485 = %482.0;
  (%483, %484, %var_9466, meta[relay.Constant][35] /* ty=Tensor[(770), float32] */, %485)
}

def @func_5245(%var_5242: Tensor[(336), float32], %var_5243: Tensor[(770), float32], %var_5244: Tensor[(220), uint32]) -> (Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) {
  @func_5240(%var_5242, %var_5243, %var_5244) /* ty=(Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) */
}

def @func_3721() -> Tensor[(20), float64] {
  %487 = fn () -> Tensor[(20), float64] {
    %486 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %486.2
  };
  %487() /* ty=Tensor[(20), float64] */
}

def @func_1890() -> (Tensor[(11, 14, 5), float32],) {
  @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_4164() -> (Tensor[(56), int8],) {
  @func_4162() /* ty=(Tensor[(56), int8],) */
}

def @func_10821() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %490 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
    %488 = @func_7172() /* ty=Tensor[(11, 14, 5), float32] */;
    %489 = @func_9353() /* ty=Tensor[(11, 14, 5), float32] */;
    (%488, %489)
  };
  %490() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_4576() -> Tensor[(11, 14, 5), float32] {
  @func_3160() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_2598() -> (Tensor[(11, 14, 5), float32],) {
  %491 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %492 = %491.0;
  (%492,)
}

def @func_6443(%var_6440: Tensor[(15, 11, 15), float32], %var_6441: Tensor[(3360), float32], %var_6442: Tensor[(336), float32]) -> (Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) {
  @func_6438(%var_6440, %var_6441, %var_6442) /* ty=(Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) */
}

def @func_6976(%var_6974: Tensor[(240), uint8]) -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(20), uint8], Tensor[(240), uint8], Tensor[(132), float32]) {
  @func_6973(%var_6974) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(20), uint8], Tensor[(240), uint8], Tensor[(132), float32]) */
}

def @func_9770() -> (Tensor[(11, 14, 5), float32],) {
  %493 = @func_3932() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %494 = %493.0;
  (%494,)
}

def @func_8867(%var_8865: Tensor[(2, 13, 16), float64], %var_8866: Tensor[(20), float64]) -> (Tensor[(?, 10, 2), bool], Tensor[(20), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(1, 288), float32], Tensor[(2, 13, 16), int8]) {
  %513 = fn (%var_8827: Tensor[(2, 13, 16), float64], %var_8831: Tensor[(20), float64]) -> (Tensor[(?, 10, 2), bool], Tensor[(20), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(1, 288), float32], Tensor[(2, 13, 16), int8]) {
    %495 = cast(%var_8831, dtype="float64") /* ty=Tensor[(20), float64] */;
    %496 = reshape(%495, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
    %497 = @func_4425(%496) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 10, 2), bool], Tensor[(11, 14, 5), float32]) */;
    %498 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 288), float32] */, dtype="float32") /* ty=Tensor[(1, 288), float32] */;
    %499 = reshape(%498, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %500 = @func_2328(%499) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(6, 16, 3), float32], Tensor[(288), float32]) */;
    %501 = cast(%var_8827, dtype="float64") /* ty=Tensor[(2, 13, 16), float64] */;
    %502 = tan(%501) /* ty=Tensor[(2, 13, 16), float64] */;
    %503 = cast(%502, dtype="float32") /* ty=Tensor[(2, 13, 16), float32] */;
    %504 = atan(%503) /* ty=Tensor[(2, 13, 16), float32] */;
    %505 = cast(%var_8827, dtype="int8") /* ty=Tensor[(2, 13, 16), int8] */;
    %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%504, dtype="int8") /* ty=Tensor[(2, 13, 16), int8] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %509 = %497.1;
    %510 = @func_5897() /* ty=Tensor[(616), float64] */;
    %511 = %500.0;
    %512 = bitwise_xor(%507, %508) /* ty=Tensor[(2, 13, 16), int8] */;
    (%509, %var_8831, %510, %511, meta[relay.Constant][36] /* ty=Tensor[(1, 288), float32] */, %512)
  };
  %513(%var_8865, %var_8866) /* ty=(Tensor[(?, 10, 2), bool], Tensor[(20), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(1, 288), float32], Tensor[(2, 13, 16), int8]) */
}

def @func_8278() -> (Tensor[(11, 14, 5), float32],) {
  %515 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %514 = @func_8076() /* ty=Tensor[(11, 14, 5), float32] */;
    (%514,)
  };
  %515() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_9046() -> Tensor[(56), int8] {
  @func_9044() /* ty=Tensor[(56), int8] */
}

def @func_9790() -> Tensor[(11, 14, 5), float32] {
  %517 = fn () -> Tensor[(11, 14, 5), float32] {
    %516 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %516.0
  };
  %517() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_7540() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %521 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
    %518 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %519 = %518.1;
    %520 = @func_4576() /* ty=Tensor[(11, 14, 5), float32] */;
    (%519, %520)
  };
  %521() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_5598() -> (Tensor[(11, 14, 5), float32],) {
  %524 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %522 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %523 = %522.0;
    (%523,)
  };
  %524() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_9355() -> Tensor[(11, 14, 5), float32] {
  @func_9353() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_9098() -> (Tensor[(11, 14, 5), float32],) {
  @func_9096() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_7327() -> (Tensor[(11, 14, 5), float32], Tensor[(336, 1), float32]) {
  %528 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(336, 1), float32]) {
    %525 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %526 = %525.0;
    %527 = @func_6342() /* ty=Tensor[(336, 1), float32] */;
    (%526, %527)
  };
  %528() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(336, 1), float32]) */
}

def @func_3523() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) {
  %529 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %532 = reshape(%531, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %533 = @func_2410(%532) /* ty=Tensor[(11, 14, 5), int64] */;
  (%530, %533)
}

def @func_9391() -> (Tensor[(11, 14, 5), float32],) {
  %534 = @func_9096() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %535 = %534.0;
  (%535,)
}

def @func_6716(%var_6700: Tensor[(1, 5, 4), uint8], %var_6701: Tensor[(12, 5, 4), uint8], %var_6709: Tensor[(132), float32]) -> (Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) {
  %536 = cast(%var_6700, dtype="uint8") /* ty=Tensor[(1, 5, 4), uint8] */;
  %537 = cast(%var_6701, dtype="uint8") /* ty=Tensor[(12, 5, 4), uint8] */;
  %538 = cast(%var_6709, dtype="float32") /* ty=Tensor[(132), float32] */;
  %539 = reshape(%538, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %540 = @func_283(%539) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
  %541 = @func_4162() /* ty=(Tensor[(56), int8],) */;
  %542 = logical_xor(%536, %537) /* ty=Tensor[(12, 5, 4), uint8] */;
  %543 = %540.3;
  %544 = %541.0;
  (%542, %543, %var_6709, %544)
}

def @func_8018() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %545 = @func_6097() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %546 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  %547 = %545.1;
  (%546, %547)
}

def @func_2149() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_1888() -> (Tensor[(11, 14, 5), float32],) {
  %548 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %549 = %548.1;
  (%549,)
}

def @func_4682() -> Tensor[(11, 14, 5), float32] {
  @func_1716() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_9237() -> (Tensor[(11, 14, 5), float64],) {
  %556 = fn () -> (Tensor[(11, 14, 5), float64],) {
    %550 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %551 = %550.0;
    %552 = cast(%551, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %553 = atanh(%552) /* ty=Tensor[(11, 14, 5), float32] */;
    %554 = cast(%553, dtype="float64") /* ty=Tensor[(11, 14, 5), float64] */;
    %555 = asinh(%554) /* ty=Tensor[(11, 14, 5), float64] */;
    (%555,)
  };
  %556() /* ty=(Tensor[(11, 14, 5), float64],) */
}

def @func_1717() -> Tensor[(11, 14, 5), float32] {
  %558 = fn () -> Tensor[(11, 14, 5), float32] {
    %557 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 14, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    exp(%557) /* ty=Tensor[(11, 14, 5), float32] */
  };
  %558() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_9680() -> (Tensor[(11, 14, 5), float32], Tensor[(2, 28), int8], Tensor[(?, 7, 8), float64], Tensor[(11, 15, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  @func_9678() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(2, 28), int8], Tensor[(?, 7, 8), float64], Tensor[(11, 15, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_5745(%var_5743: Tensor[(13, 15, 8), uint16], %var_5744: Tensor[(616), float64]) -> (Tensor[(13, 15, 8), uint16], Tensor[(1, 16, 12), float32], Tensor[(192), float64], Tensor[(11, 14, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(11, 7, 8), float64], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  @func_5741(%var_5743, %var_5744) /* ty=(Tensor[(13, 15, 8), uint16], Tensor[(1, 16, 12), float32], Tensor[(192), float64], Tensor[(11, 14, 5), float32], Tensor[(13, 15, 8), float64], Tensor[(11, 7, 8), float64], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */
}

def @func_5899() -> Tensor[(616), float64] {
  @func_5897() /* ty=Tensor[(616), float64] */
}

def @func_7951() -> Tensor[(11, 14, 5), float32] {
  %560 = fn () -> Tensor[(11, 14, 5), float32] {
    %559 = @func_6937() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %559.1
  };
  %560() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_1602(%var_1573: Tensor[(1, 7, 8), int8]) -> (Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) {
  %561 = cast(%var_1573, dtype="int8") /* ty=Tensor[(1, 7, 8), int8] */;
  %562 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(1, 7, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 7, 8), int8] */, dtype="int8") /* ty=Tensor[(1, 7, 8), int8] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %565 = minimum(%563, %564) /* ty=Tensor[(?, 7, 8), int8] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
  %567 = atan(%566) /* ty=Tensor[(?, 7, 8), float64] */;
  %568 = cast(%565, dtype="uint64") /* ty=Tensor[(?, 7, 8), uint64] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="uint64") /* ty=Tensor[(?, 7, 8), uint64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %572 = cast(%var_1573, dtype="bool") /* ty=Tensor[(1, 7, 8), bool] */;
  %573 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%565, dtype="bool") /* ty=Tensor[(?, 7, 8), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %576 = greater_equal(%574, %575) /* ty=Tensor[(?, 7, 8), bool] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
  %578 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%567, dtype="float64") /* ty=Tensor[(?, 7, 8), float64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %581 = bitwise_xor(%570, %571) /* ty=Tensor[(?, 7, 8), uint64] */;
  %582 = mod(%579, %580) /* ty=Tensor[(?, 7, 8), float64] */;
  (%581, %582)
}

def @func_9737(%var_9735: Tensor[(252), int16]) -> (Tensor[(11, 14, 5), float32], Tensor[(2, 9, 14), int16], Tensor[(252), int16]) {
  @func_9734(%var_9735) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(2, 9, 14), int16], Tensor[(252), int16]) */
}

def @func_8339() -> Tensor[(11, 14, 5), float32] {
  %583 = fn () -> Tensor[(11, 14, 5), float32] {
    @func_7950() /* ty=Tensor[(11, 14, 5), float32] */
  };
  %583() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_10704() -> (Tensor[(11, 14, 5), float32],) {
  %584 = @func_8093() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %585 = %584.0;
  (%585,)
}

def @func_2547() -> Tensor[(11, 14, 5), float32] {
  %587 = fn () -> Tensor[(11, 14, 5), float32] {
    %586 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %586.1
  };
  %587() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_10846() -> Tensor[(11, 14, 5), float32] {
  %589 = fn () -> Tensor[(11, 14, 5), float32] {
    %588 = @func_10185() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %588.0
  };
  %589() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_9876() -> (Tensor[(11, 14, 5), float32], uint8, Tensor[(1200), uint8], Tensor[(11, 14, 5), float32]) {
  %590 = cast(meta[relay.Constant][39] /* ty=Tensor[(1200), uint8] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %591 = reshape(%590, newshape=[1200]) /* ty=Tensor[(1200), uint8] */;
  %592 = @func_8913(%591) /* ty=(Tensor[(20), float64], Tensor[(10, 15, 8), float32], uint8, Tensor[(1200), uint8]) */;
  %593 = @func_3160() /* ty=Tensor[(11, 14, 5), float32] */;
  %594 = %592.2;
  %595 = @func_7147() /* ty=Tensor[(11, 14, 5), float32] */;
  (%593, %594, meta[relay.Constant][39] /* ty=Tensor[(1200), uint8] */, %595)
}

def @func_7856(%var_7854: Tensor[(9, 7, 9), int16]) -> (Tensor[(9, 7, 9), bool], Tensor[(11, 14, 5), int64], Tensor[(1, 810), float64]) {
  @func_7853(%var_7854) /* ty=(Tensor[(9, 7, 9), bool], Tensor[(11, 14, 5), int64], Tensor[(1, 810), float64]) */
}

def @func_3124() -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) {
  %601 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) {
    %596 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %597 = cast(meta[relay.Constant][40] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %598 = reshape(%597, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
    %599 = %596.0;
    %600 = @func_2109(%598) /* ty=Tensor[(1, 10, 2), float64] */;
    (%599, %600, meta[relay.Constant][40] /* ty=Tensor[(20), float64] */)
  };
  %601() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */
}

def @func_10478() -> (Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1200), uint8], Tensor[(3, 11, 9), bool], Tensor[(1260), bool], Tensor[(1260), float32]) {
  %602 = @func_9891() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %603 = @func_9876() /* ty=(Tensor[(11, 14, 5), float32], uint8, Tensor[(1200), uint8], Tensor[(11, 14, 5), float32]) */;
  %604 = @func_8444() /* ty=(Tensor[(3, 11, 9), bool],) */;
  %605 = cast(meta[relay.Constant][41] /* ty=Tensor[(1260), float32] */, dtype="float32") /* ty=Tensor[(1260), float32] */;
  %606 = reshape(%605, newshape=[1260]) /* ty=Tensor[(1260), float32] */;
  %607 = @func_10386(%606) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32], Tensor[(616), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1260), bool], Tensor[(3, 4, 12), float64], Tensor[(144), float64], Tensor[(2, 7, 13), float32], Tensor[(182), float32]) */;
  %608 = %602.0;
  %609 = @func_9044() /* ty=Tensor[(56), int8] */;
  %610 = %603.2;
  %611 = %604.0;
  %612 = %607.9;
  (%608, %609, %610, %611, %612, meta[relay.Constant][41] /* ty=Tensor[(1260), float32] */)
}

def @func_9564() -> Tensor[(11, 14, 5), float32] {
  %613 = @func_3932() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %613.0
}

def @func_8624() -> (Tensor[(11, 14, 5), float32],) {
  %614 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %615 = %614.0;
  (%615,)
}

def @func_5240(%var_5213: Tensor[(336), float32], %var_5214: Tensor[(770), float32], %var_5230: Tensor[(220), uint32]) -> (Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) {
  %616 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
  %617 = cast(%var_5213, dtype="float32") /* ty=Tensor[(336), float32] */;
  %618 = cast(%var_5214, dtype="float32") /* ty=Tensor[(770), float32] */;
  %619 = reshape(%617, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %620 = reshape(%618, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %621 = @func_1756(%619, %620) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %622 = %621.0;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
  %624 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %625 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %626 = %616.3;
  %627 = cast(%626, dtype="int8") /* ty=Tensor[(?, 7, 8), int8] */;
  %628 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %629 = reshape(%624, newshape=[2, 10, 11]) /* ty=Tensor[(2, 10, 11), uint32] */;
  %630 = reshape(%625, newshape=[2, 10, 11]) /* ty=Tensor[(2, 10, 11), uint32] */;
  %631 = reshape(%627, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %632 = reshape(%628, newshape=[2, 10, 11]) /* ty=Tensor[(2, 10, 11), uint32] */;
  %633 = @func_3606(%629, %630, %631, %632) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) */;
  %634 = asin(%623) /* ty=Tensor[(7, 12, 4), float32] */;
  %635 = %633.3;
  (%626, %var_5213, %var_5214, %634, %635, %var_5230)
}

def @func_4684() -> Tensor[(11, 14, 5), float32] {
  @func_4682() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_6372() -> (Tensor[(616), float64],) {
  @func_6370() /* ty=(Tensor[(616), float64],) */
}

def @func_7634(%var_7632: Tensor[(16, 10, 12), uint32]) -> (Tensor[(16, 10, 12), uint32], Tensor[(13, 13, 11), bool], Tensor[(1859), uint64]) {
  @func_7631(%var_7632) /* ty=(Tensor[(16, 10, 12), uint32], Tensor[(13, 13, 11), bool], Tensor[(1859), uint64]) */
}

def @func_9144(%var_9142: Tensor[(840, 4), float32], %var_9143: Tensor[(336), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(2475), float32], Tensor[(840, 4), float32], Tensor[(336), float32]) {
  @func_9140(%var_9142, %var_9143) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(2475), float32], Tensor[(840, 4), float32], Tensor[(336), float32]) */
}

def @func_4863() -> (Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  %636 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %637 = cast(meta[relay.Constant][42] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
  %638 = cast(meta[relay.Constant][43] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %639 = cast(meta[relay.Constant][44] /* ty=Tensor[(616), float64] */, dtype="float64") /* ty=Tensor[(616), float64] */;
  %640 = reshape(%637, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %641 = reshape(%638, newshape=[168, 2]) /* ty=Tensor[(168, 2), float32] */;
  %642 = reshape(%639, newshape=[11, 7, 8]) /* ty=Tensor[(11, 7, 8), float64] */;
  %643 = @func_2851(%640, %641, %642) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64], Tensor[(7, 12, 4), uint8], Tensor[(168, 2), float32], Tensor[(11, 7, 8), float32], Tensor[(?, 7, 8), float32], Tensor[(11, 7, 8), float64], Tensor[(11, 14, 5), float32]) */;
  %644 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %645 = %636.0;
  %646 = %643.7;
  %647 = %644.0;
  (%645, %646, meta[relay.Constant][42] /* ty=Tensor[(56), int8] */, meta[relay.Constant][43] /* ty=Tensor[(336), float32] */, meta[relay.Constant][44] /* ty=Tensor[(616), float64] */, %647)
}

def @func_2330(%var_2329: Tensor[(288), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(6, 16, 3), float32], Tensor[(288), float32]) {
  %654 = fn (%var_2318: Tensor[(288), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(6, 16, 3), float32], Tensor[(288), float32]) {
    %648 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %649 = cast(%var_2318, dtype="float32") /* ty=Tensor[(288), float32] */;
    %650 = reshape(%649, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), float32] */;
    %651 = @func_1143(%650) /* ty=(Tensor[(6, 16, 3), float32],) */;
    %652 = %648.0;
    %653 = %651.0;
    (%652, %653, %var_2318)
  };
  %654(%var_2329) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(6, 16, 3), float32], Tensor[(288), float32]) */
}

def @func_2382() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %655 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %656 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %657 = %655.1;
  %658 = %656.0;
  (%657, %658)
}

def @func_4865() -> (Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) {
  @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */
}

def @func_4321(%var_4296: Tensor[(132), float32], %var_4303: Tensor[(7, 110), float32], %var_4304: Tensor[(336), float32]) -> (Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(11, 14, 5), int16], Tensor[(7, 110), float32], Tensor[(336), float32], Tensor[(11, 14, 5), float32]) {
  %659 = cast(%var_4296, dtype="float32") /* ty=Tensor[(132), float32] */;
  %660 = reshape(%659, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %661 = @func_283(%660) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
  %662 = cast(%var_4303, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
  %663 = cast(%var_4304, dtype="float32") /* ty=Tensor[(336), float32] */;
  %664 = reshape(%662, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %665 = reshape(%663, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %666 = @func_1981(%664, %665) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
  %667 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %668 = @func_3720() /* ty=Tensor[(20), float64] */;
  %669 = %661.3;
  %670 = %666.0;
  %671 = %667.1;
  (%668, %669, %var_4296, %670, %var_4303, %var_4304, %671)
}

def @func_2109(%var_2106: Tensor[(1, 10, 2), float64]) -> Tensor[(1, 10, 2), float64] {
  %672 = cast(%var_2106, dtype="float64") /* ty=Tensor[(1, 10, 2), float64] */;
  tan(%672) /* ty=Tensor[(1, 10, 2), float64] */
}

def @func_7147() -> Tensor[(11, 14, 5), float32] {
  %673 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %673.0
}

def @func_3161() -> Tensor[(11, 14, 5), float32] {
  %675 = fn () -> Tensor[(11, 14, 5), float32] {
    %674 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %674.1
  };
  %675() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_4619() -> Tensor[(6, 15, 9), float64] {
  %676 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 9), float64] */;
  log2(%676) /* ty=Tensor[(6, 15, 9), float64] */
}

def @func_5312(%var_5291: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) {
  %677 = @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %678 = cast(%var_5291, dtype="int8") /* ty=Tensor[(56), int8] */;
  %679 = reshape(%678, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %680 = @func_2288(%679) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
  %681 = %677.0;
  %682 = %680.1;
  (%681, %682, %var_5291)
}

def @func_3611(%var_3607: Tensor[(2, 10, 11), uint32], %var_3608: Tensor[(2, 10, 11), uint32], %var_3609: Tensor[(56), int8], %var_3610: Tensor[(2, 10, 11), uint32]) -> (Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) {
  %702 = fn (%var_3570: Tensor[(2, 10, 11), uint32], %var_3571: Tensor[(2, 10, 11), uint32], %var_3576: Tensor[(56), int8], %var_3580: Tensor[(2, 10, 11), uint32]) -> (Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) {
    %683 = cast(%var_3576, dtype="int8") /* ty=Tensor[(56), int8] */;
    %684 = reshape(%683, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
    %685 = @func_1602(%684) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
    %686 = cast(%var_3580, dtype="float64") /* ty=Tensor[(2, 10, 11), float64] */;
    %687 = shape_of(%var_3570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%var_3570, dtype="float64") /* ty=Tensor[(2, 10, 11), float64] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %690 = cast(%var_3571, dtype="uint32") /* ty=Tensor[(2, 10, 11), uint32] */;
    %691 = shape_of(%var_3570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %692 = cast(%var_3570, dtype="uint32") /* ty=Tensor[(2, 10, 11), uint32] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %694 = logical_xor(%692, %693) /* ty=Tensor[(2, 10, 11), uint32] */;
    %695 = cast(%var_3570, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%694, dtype="bool") /* ty=Tensor[(2, 10, 11), bool] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %699 = %685.0;
    %700 = floor_divide(%688, %689) /* ty=Tensor[(2, 10, 11), float64] */;
    %701 = logical_or(%697, %698) /* ty=Tensor[(2, 10, 11), bool] */;
    (%699, %var_3576, %700, %701)
  };
  %702(%var_3607, %var_3608, %var_3609, %var_3610) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(2, 10, 11), float64], Tensor[(2, 10, 11), bool]) */
}

def @func_2384() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  @func_2382() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_2290(%var_2289: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) {
  %710 = fn (%var_2281: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) {
    %703 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %704 = cast(%var_2281, dtype="int8") /* ty=Tensor[(56), int8] */;
    %705 = reshape(%704, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
    %706 = @func_1602(%705) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
    %707 = %703.0;
    %708 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
    %709 = %706.0;
    (%707, %708, %709, %var_2281)
  };
  %710(%var_2289) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */
}

def @func_9332() -> (Tensor[(11, 14, 5), float32],) {
  %711 = @func_8018() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %712 = %711.0;
  (%712,)
}

def @func_9678() -> (Tensor[(11, 14, 5), float32], Tensor[(2, 28), int8], Tensor[(?, 7, 8), float64], Tensor[(11, 15, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %713 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 28), int8] */, dtype="int8") /* ty=Tensor[(2, 28), int8] */;
  %714 = reshape(%713, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
  %715 = @func_1602(%714) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
  %716 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 28), int8] */, dtype="int8") /* ty=Tensor[(2, 28), int8] */;
  %717 = reshape(%716, newshape=[56]) /* ty=Tensor[(56), int8] */;
  %718 = @func_7077(%717) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint32], Tensor[(56), int8], Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(11, 14, 5), int64]) */;
  %719 = %718.3;
  %720 = cast(%719, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
  %721 = log2(%720) /* ty=Tensor[(11, 15, 3), float32] */;
  %722 = cast(%721, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
  %723 = tan(%722) /* ty=Tensor[(11, 15, 3), float64] */;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
  %725 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%721, dtype="float32") /* ty=Tensor[(11, 15, 3), float32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %728 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %729 = @func_8277() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %730 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
  %731 = %715.1;
  %732 = divide(%726, %727) /* ty=Tensor[(11, 15, 3), float32] */;
  %733 = %728.5;
  %734 = %729.0;
  (%730, meta[relay.Constant][46] /* ty=Tensor[(2, 28), int8] */, %731, %732, %733, %734)
}

def @func_9734(%var_9727: Tensor[(252), int16]) -> (Tensor[(11, 14, 5), float32], Tensor[(2, 9, 14), int16], Tensor[(252), int16]) {
  %735 = cast(%var_9727, dtype="int16") /* ty=Tensor[(252), int16] */;
  %736 = reshape(%735, newshape=[2, 9, 14]) /* ty=Tensor[(2, 9, 14), int16] */;
  %737 = @func_6386(%736) /* ty=(Tensor[(2, 9, 14), int16],) */;
  %738 = @func_4391() /* ty=Tensor[(11, 14, 5), float32] */;
  %739 = %737.0;
  (%738, %739, %var_9727)
}

def @func_6468() -> Tensor[(56), int8] {
  @func_6466() /* ty=Tensor[(56), int8] */
}

def @func_2206(%var_2205: Tensor[(1, 16, 12), float64]) -> (Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) {
  %754 = fn (%var_2169: Tensor[(1, 16, 12), float64]) -> (Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) {
    %740 = cast(%var_2169, dtype="float64") /* ty=Tensor[(1, 16, 12), float64] */;
    %741 = erf(%740) /* ty=Tensor[(1, 16, 12), float64] */;
    %742 = cast(%var_2169, dtype="int16") /* ty=Tensor[(1, 16, 12), int16] */;
    %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%741, dtype="int16") /* ty=Tensor[(1, 16, 12), int16] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %746 = right_shift(%744, %745) /* ty=Tensor[(?, 16, 12), int16] */;
    %747 = cast(%741, dtype="int64") /* ty=Tensor[(1, 16, 12), int64] */;
    %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(%746, dtype="int64") /* ty=Tensor[(?, 16, 12), int64] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %751 = cast(%var_2169, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
    %752 = add(%749, %750) /* ty=Tensor[(?, 16, 12), int64] */;
    %753 = acos(%751) /* ty=Tensor[(1, 16, 12), float32] */;
    (%752, %753)
  };
  %754(%var_2205) /* ty=(Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) */
}

def @func_9965(%var_9963: Tensor[(20, 1), float64], %var_9964: Tensor[(810), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(11, 8, 12), int32], Tensor[(11, 14, 5), float32], Tensor[(20, 336), float32], Tensor[(6, 15, 9), int8], Tensor[(810), float64]) {
  %775 = fn (%var_9923: Tensor[(20, 1), float64], %var_9955: Tensor[(810), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(11, 8, 12), int32], Tensor[(11, 14, 5), float32], Tensor[(20, 336), float32], Tensor[(6, 15, 9), int8], Tensor[(810), float64]) {
    %755 = cast(%var_9923, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
    %756 = reshape(%755, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %757 = @func_4939(%756) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %758 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
    %759 = cast(%758, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %760 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %761 = reshape(%759, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
    %762 = reshape(%760, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %763 = @func_1981(%761, %762) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
    %764 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %765 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %766 = cast(%var_9923, dtype="float32") /* ty=Tensor[(20, 1), float32] */;
    %767 = cast(%var_9955, dtype="float64") /* ty=Tensor[(810), float64] */;
    %768 = reshape(%767, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), float64] */;
    %769 = @func_5092(%768) /* ty=(Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) */;
    %770 = %757.1;
    %771 = %763.4;
    %772 = %764.0;
    %773 = divide(%765, %766) /* ty=Tensor[(20, 336), float32] */;
    %774 = %769.0;
    (%758, %770, %771, %772, %773, %774, %var_9955)
  };
  %775(%var_9963, %var_9964) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(11, 8, 12), int32], Tensor[(11, 14, 5), float32], Tensor[(20, 336), float32], Tensor[(6, 15, 9), int8], Tensor[(810), float64]) */
}

def @func_10073() -> (Tensor[(9, 16, ?), float64],) {
  @func_10071() /* ty=(Tensor[(9, 16, ?), float64],) */
}

def @func_10187() -> (Tensor[(11, 14, 5), float32],) {
  @func_10185() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_8915(%var_8914: Tensor[(1200), uint8]) -> (Tensor[(20), float64], Tensor[(10, 15, 8), float32], uint8, Tensor[(1200), uint8]) {
  %783 = fn (%var_8909: Tensor[(1200), uint8]) -> (Tensor[(20), float64], Tensor[(10, 15, 8), float32], uint8, Tensor[(1200), uint8]) {
    %776 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %777 = cast(%var_8909, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
    %778 = reshape(%776, newshape=[]) /* ty=uint8 */;
    %779 = reshape(%777, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), uint8] */;
    %780 = @func_8816(%778, %779) /* ty=(Tensor[(10, 15, 8), float32],) */;
    %781 = @func_7349() /* ty=Tensor[(20), float64] */;
    %782 = %780.0;
    (%781, %782, meta[relay.Constant][48] /* ty=uint8 */, %var_8909)
  };
  %783(%var_8914) /* ty=(Tensor[(20), float64], Tensor[(10, 15, 8), float32], uint8, Tensor[(1200), uint8]) */
}

def @func_3933() -> (Tensor[(11, 14, 5), float32],) {
  %786 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %784 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %785 = %784.0;
    (%785,)
  };
  %786() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_6370() -> (Tensor[(616), float64],) {
  %787 = @func_4863() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), float32], Tensor[(56), int8], Tensor[(336), float32], Tensor[(616), float64], Tensor[(11, 14, 5), float32]) */;
  %788 = %787.4;
  (%788,)
}

def @func_7080(%var_7078: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint32], Tensor[(56), int8], Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(11, 14, 5), int64]) {
  @func_7077(%var_7078) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint32], Tensor[(56), int8], Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(11, 14, 5), int64]) */
}

def @func_9081() -> (Tensor[(11, 14, 5), float32], Tensor[(1, 1, 8), float64], Tensor[(1, 8), uint8]) {
  %795 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(1, 1, 8), float64], Tensor[(1, 8), uint8]) {
    %789 = @func_7942() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %790 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 8), uint8] */, dtype="uint8") /* ty=Tensor[(1, 8), uint8] */;
    %791 = reshape(%790, newshape=[1, 1, 8]) /* ty=Tensor[(1, 1, 8), uint8] */;
    %792 = @func_847(%791) /* ty=(Tensor[(1, 1, 8), float64],) */;
    %793 = %789.0;
    %794 = %792.0;
    (%793, %794, meta[relay.Constant][49] /* ty=Tensor[(1, 8), uint8] */)
  };
  %795() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 1, 8), float64], Tensor[(1, 8), uint8]) */
}

def @func_1818() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %798 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
    %796 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
    %797 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
    (%796, %797)
  };
  %798() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_2600() -> (Tensor[(11, 14, 5), float32],) {
  @func_2598() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_10389(%var_10387: Tensor[(1260), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32], Tensor[(616), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1260), bool], Tensor[(3, 4, 12), float64], Tensor[(144), float64], Tensor[(2, 7, 13), float32], Tensor[(182), float32]) {
  @func_10386(%var_10387) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float64], Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(1056), int32], Tensor[(616), float64], Tensor[(616), float64], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(1260), bool], Tensor[(3, 4, 12), float64], Tensor[(144), float64], Tensor[(2, 7, 13), float32], Tensor[(182), float32]) */
}

def @func_9893() -> (Tensor[(11, 14, 5), float32],) {
  @func_9891() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_6344() -> Tensor[(336, 1), float32] {
  @func_6342() /* ty=Tensor[(336, 1), float32] */
}

def @func_2747(%var_2746: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) {
  %816 = fn (%var_2737: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) {
    %799 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %800 = cast(%var_2737, dtype="int8") /* ty=Tensor[(56), int8] */;
    %801 = reshape(%800, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
    %802 = @func_1602(%801) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
    %803 = %799.1;
    %804 = cast(%803, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %805 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %806 = reshape(%804, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
    %807 = reshape(%805, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %808 = @func_1981(%806, %807) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
    %809 = %808.2;
    %810 = cast(meta[relay.Constant][50] /* ty=Tensor[(336), float32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%809, dtype="uint32") /* ty=Tensor[(7, 12, 4), uint32] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %814 = %802.0;
    %815 = multiply(%812, %813) /* ty=Tensor[(7, 12, 4), uint32] */;
    (%803, %814, %var_2737, %815)
  };
  %816(%var_2746) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */
}

def @func_9891() -> (Tensor[(11, 14, 5), float32],) {
  %817 = @func_9770() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %818 = %817.0;
  (%818,)
}

def @func_3525() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) {
  @func_3523() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) */
}

def @func_4392() -> Tensor[(11, 14, 5), float32] {
  %819 = fn () -> Tensor[(11, 14, 5), float32] {
    @func_2546() /* ty=Tensor[(11, 14, 5), float32] */
  };
  %819() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_5812(%var_5809: Tensor[(16, 14, 15), float32], %var_5810: Tensor[(66, 2), float32], %var_5811: Tensor[(336), float32]) -> (Tensor[(16, 14, 15), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(66, 2), float32], Tensor[(336), float32]) {
  %836 = fn (%var_5773: Tensor[(16, 14, 15), float32], %var_5787: Tensor[(66, 2), float32], %var_5788: Tensor[(336), float32]) -> (Tensor[(16, 14, 15), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(66, 2), float32], Tensor[(336), float32]) {
    %820 = cast(%var_5773, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
    %821 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %822 = cast(meta[relay.Constant][51] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %823 = reshape(%822, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %824 = @func_4939(%823) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %825 = cast(%var_5787, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
    %826 = %824.0;
    %827 = cast(%826, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %828 = cast(%var_5788, dtype="float32") /* ty=Tensor[(336), float32] */;
    %829 = reshape(%825, newshape=[132]) /* ty=Tensor[(132), float32] */;
    %830 = reshape(%827, newshape=[7, 110]) /* ty=Tensor[(7, 110), float32] */;
    %831 = reshape(%828, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %832 = @func_4321(%829, %830, %831) /* ty=(Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(11, 14, 5), int16], Tensor[(7, 110), float32], Tensor[(336), float32], Tensor[(11, 14, 5), float32]) */;
    %833 = sin(%820) /* ty=Tensor[(16, 14, 15), float32] */;
    %834 = %821.0;
    %835 = %832.1;
    (%833, %834, %826, meta[relay.Constant][51] /* ty=Tensor[(20), float64] */, %835, %var_5787, %var_5788)
  };
  %836(%var_5809, %var_5810, %var_5811) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(20), float64], Tensor[(11, 15, 3), float64], Tensor[(66, 2), float32], Tensor[(336), float32]) */
}

def @func_7149() -> Tensor[(11, 14, 5), float32] {
  @func_7147() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_1605(%var_1603: Tensor[(1, 7, 8), int8]) -> (Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) {
  @func_1602(%var_1603) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */
}

def @func_10733() -> Tensor[(11, 14, 5), float32] {
  %837 = @func_4341() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) */;
  %837.0
}

def @func_3967() -> (Tensor[(11, 14, 5), float32],) {
  %840 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %838 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %839 = %838.1;
    (%839,)
  };
  %840() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_7174() -> Tensor[(11, 14, 5), float32] {
  @func_7172() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_9376() -> (Tensor[(11, 14, 5), float32],) {
  %842 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %841 = @func_7950() /* ty=Tensor[(11, 14, 5), float32] */;
    (%841,)
  };
  %842() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_6731() -> (Tensor[(11, 14, 5), float32],) {
  %843 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  (%843,)
}

def @func_10121(%var_10095: Tensor[(8, 16, 3), float32], %var_10111: Tensor[(220), uint32]) -> (Tensor[(8, 16, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(336), float32], Tensor[(220), uint32], Tensor[(8, 16, 3), float32]) {
  %844 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %845 = shape_of(%var_10095, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%var_10095, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %848 = cast(meta[relay.Constant][53] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %849 = @func_8682() /* ty=Tensor[(11, 14, 5), float32] */;
  %850 = cast(%849, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %851 = cast(%var_10111, dtype="uint32") /* ty=Tensor[(220), uint32] */;
  %852 = reshape(%848, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %853 = reshape(%850, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %854 = reshape(%851, newshape=[220]) /* ty=Tensor[(220), uint32] */;
  %855 = @func_5240(%852, %853, %854) /* ty=(Tensor[(?, 7, 8), float64], Tensor[(336), float32], Tensor[(770), float32], Tensor[(7, 12, 4), float32], Tensor[(2, 10, 11), bool], Tensor[(220), uint32]) */;
  %856 = cast(%var_10095, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %857 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(8, 16, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 16, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %860 = divide(%846, %847) /* ty=Tensor[(8, 16, 3), float32] */;
  %861 = %855.1;
  %862 = multiply(%858, %859) /* ty=Tensor[(8, 16, 3), float32] */;
  (%860, %849, %861, meta[relay.Constant][53] /* ty=Tensor[(336), float32] */, %var_10111, %862)
}

def @func_8707(%var_8705: Tensor[(15, 1, 6), int16], %var_8706: Tensor[(15, 2, 6), int16]) -> (Tensor[(15, 2, 6), bool],) {
  %866 = fn (%var_8697: Tensor[(15, 1, 6), int16], %var_8698: Tensor[(15, 2, 6), int16]) -> (Tensor[(15, 2, 6), bool],) {
    %863 = cast(%var_8697, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
    %864 = cast(%var_8698, dtype="bool") /* ty=Tensor[(15, 2, 6), bool] */;
    %865 = less(%863, %864) /* ty=Tensor[(15, 2, 6), bool] */;
    (%865,)
  };
  %866(%var_8705, %var_8706) /* ty=(Tensor[(15, 2, 6), bool],) */
}

def @func_10755() -> (Tensor[(11, 14, 5), float32],) {
  %869 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %867 = @func_9678() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(2, 28), int8], Tensor[(?, 7, 8), float64], Tensor[(11, 15, 3), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %868 = %867.4;
    (%868,)
  };
  %869() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_10933(%var_10929: Tensor[(7, 14, 9), float32], %var_10930: Tensor[(2475), float32], %var_10931: Tensor[(3360), float32], %var_10932: Tensor[(336), float32]) -> (Tensor[(7, 14, 9), float32], Tensor[(15, 11, 15), float32], Tensor[(2475), float32], Tensor[(3360), float32], Tensor[(336), float32], Tensor[(11, 14, 5), int64], Tensor[(770), float32]) {
  @func_10927(%var_10929, %var_10930, %var_10931, %var_10932) /* ty=(Tensor[(7, 14, 9), float32], Tensor[(15, 11, 15), float32], Tensor[(2475), float32], Tensor[(3360), float32], Tensor[(336), float32], Tensor[(11, 14, 5), int64], Tensor[(770), float32]) */
}

def @func_285(%var_284: Tensor[(4, 11, 3), float32]) -> (Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) {
  %903 = fn (%var_201: Tensor[(4, 11, 3), float32]) -> (Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) {
    %870 = cast(meta[relay.Constant][54] /* ty=Tensor[(495), float64] */, dtype="float64") /* ty=Tensor[(495), float64] */;
    %871 = reshape(%870, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
    %872 = @func_143(%871) /* ty=(Tensor[(11, 15, 3), float64],) */;
    %873 = cast(%var_201, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %874 = sinh(%873) /* ty=Tensor[(4, 11, 3), float32] */;
    %875 = cast(%874, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %876 = %872.0;
    %877 = cast(%876, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
    %878 = reshape(%877, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
    %879 = @func_143(%878) /* ty=(Tensor[(11, 15, 3), float64],) */;
    %880 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
    %881 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
    %882 = cast(%874, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
    %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %884 = maximum(%882, %883) /* ty=Tensor[(4, 11, 3), int32] */;
    %885 = cast(meta[relay.Constant][55] /* ty=Tensor[(4, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
    %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
    %887 = cast(%884, dtype="int32") /* ty=Tensor[(4, 11, 3), int32] */;
    %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %889 = %879.0;
    %890 = cast(%889, dtype="float64") /* ty=Tensor[(11, 15, 3), float64] */;
    %891 = reshape(%890, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
    %892 = @func_143(%891) /* ty=(Tensor[(11, 15, 3), float64],) */;
    %893 = cast(%874, dtype="float64") /* ty=Tensor[(4, 11, 3), float64] */;
    %894 = acosh(%893) /* ty=Tensor[(4, 11, 3), float64] */;
    %895 = cast(%var_201, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
    %897 = cast(%894, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %899 = asinh(%875) /* ty=Tensor[(4, 11, 3), float32] */;
    %900 = bitwise_or(%887, %888) /* ty=Tensor[(4, 11, 3), int32] */;
    %901 = %892.0;
    %902 = floor_mod(%897, %898) /* ty=Tensor[(4, 11, 3), float32] */;
    (%876, meta[relay.Constant][54] /* ty=Tensor[(495), float64] */, %899, %889, %900, %901, %902)
  };
  %903(%var_284) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */
}

def @func_4748(%var_4746: Tensor[(13, 13, 11), uint64]) -> (Tensor[(13, 13, 11), bool], Tensor[(13, 13, 11), float32], Tensor[(11, 8, 12), int32], Tensor[(770), float32], Tensor[(336), float32]) {
  @func_4745(%var_4746) /* ty=(Tensor[(13, 13, 11), bool], Tensor[(13, 13, 11), float32], Tensor[(11, 8, 12), int32], Tensor[(770), float32], Tensor[(336), float32]) */
}

def @func_6721(%var_6718: Tensor[(1, 5, 4), uint8], %var_6719: Tensor[(12, 5, 4), uint8], %var_6720: Tensor[(132), float32]) -> (Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) {
  @func_6716(%var_6718, %var_6719, %var_6720) /* ty=(Tensor[(12, 5, 4), uint8], Tensor[(11, 15, 3), float64], Tensor[(132), float32], Tensor[(56), int8]) */
}

def @func_5365(%var_5363: Tensor[(3, 13, 11), float32], %var_5364: Tensor[(3, 13, 11), float32]) -> Tensor[(3, 13, 11), float32] {
  %908 = fn (%var_5349: Tensor[(3, 13, 11), float32], %var_5350: Tensor[(3, 13, 11), float32]) -> Tensor[(3, 13, 11), float32] {
    %904 = cast(%var_5350, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
    %905 = shape_of(%var_5349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %906 = cast(%var_5349, dtype="float32") /* ty=Tensor[(3, 13, 11), float32] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    minimum(%906, %907) /* ty=Tensor[(3, 13, 11), float32] */
  };
  %908(%var_5363, %var_5364) /* ty=Tensor[(3, 13, 11), float32] */
}

def @func_8367(%var_8366: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) {
  %914 = fn (%var_8362: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) {
    %909 = cast(%var_8362, dtype="int8") /* ty=Tensor[(56), int8] */;
    %910 = reshape(%909, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %911 = @func_2288(%910) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
    %912 = @func_4682() /* ty=Tensor[(11, 14, 5), float32] */;
    %913 = %911.1;
    (%912, %913, %var_8362)
  };
  %914(%var_8366) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) */
}

def @func_7350() -> Tensor[(20), float64] {
  %916 = fn () -> Tensor[(20), float64] {
    %915 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %915.2
  };
  %916() /* ty=Tensor[(20), float64] */
}

def @func_3035() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) {
  %931 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) {
    %917 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %918 = cast(meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
    %919 = reshape(%918, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %920 = @func_2288(%919) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8]) */;
    %921 = cast(meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
    %922 = reshape(%921, newshape=[1, 7, 8]) /* ty=Tensor[(1, 7, 8), int8] */;
    %923 = @func_1602(%922) /* ty=(Tensor[(?, 7, 8), uint64], Tensor[(?, 7, 8), float64]) */;
    %924 = cast(meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
    %925 = reshape(%924, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %926 = @func_2745(%925) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
    %927 = %917.0;
    %928 = %920.0;
    %929 = %923.1;
    %930 = %926.3;
    (%927, %928, meta[relay.Constant][56] /* ty=Tensor[(56), int8] */, %929, %930)
  };
  %931() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */
}

def @func_4162() -> (Tensor[(56), int8],) {
  %932 = @func_3034() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8], Tensor[(?, 7, 8), float64], Tensor[(7, 12, 4), uint32]) */;
  %933 = %932.2;
  (%933,)
}

def @func_8819(%var_8817: uint8, %var_8818: Tensor[(10, 15, 8), uint8]) -> (Tensor[(10, 15, 8), float32],) {
  %939 = fn (%var_8792: uint8, %var_8793: Tensor[(10, 15, 8), uint8]) -> (Tensor[(10, 15, 8), float32],) {
    %934 = cast(%var_8792, dtype="uint8") /* ty=uint8 */;
    %935 = cast(%var_8793, dtype="uint8") /* ty=Tensor[(10, 15, 8), uint8] */;
    %936 = multiply(%934, %935) /* ty=Tensor[(10, 15, 8), uint8] */;
    %937 = cast(%936, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
    %938 = asin(%937) /* ty=Tensor[(10, 15, 8), float32] */;
    (%938,)
  };
  %939(%var_8817, %var_8818) /* ty=(Tensor[(10, 15, 8), float32],) */
}

def @func_6680() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
  %945 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) {
    %940 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %941 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %942 = %940.0;
    %943 = %941.0;
    %944 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
    (%942, %943, %944)
  };
  %945() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_5402() -> (Tensor[(11, 14, 5), float32],) {
  @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_5094(%var_5093: Tensor[(6, 15, 9), float64]) -> (Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) {
  %961 = fn (%var_5064: Tensor[(6, 15, 9), float64]) -> (Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) {
    %946 = @func_4619() /* ty=Tensor[(6, 15, 9), float64] */;
    %947 = cast(%var_5064, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
    %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
    %949 = cast(%946, dtype="int8") /* ty=Tensor[(6, 15, 9), int8] */;
    %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %951 = cast(meta[relay.Constant][57] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
    %952 = reshape(%951, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
    %953 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %954 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %955 = cast(%var_5064, dtype="float32") /* ty=Tensor[(6, 15, 9), float32] */;
    %956 = bitwise_and(%949, %950) /* ty=Tensor[(6, 15, 9), int8] */;
    %957 = @func_2410(%952) /* ty=Tensor[(11, 14, 5), int64] */;
    %958 = %953.2;
    %959 = %954.0;
    %960 = sigmoid(%955) /* ty=Tensor[(6, 15, 9), float32] */;
    (%956, %957, meta[relay.Constant][57] /* ty=Tensor[(770), float32] */, %958, %959, %960)
  };
  %961(%var_5093) /* ty=(Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) */
}

def @func_10578() -> (Tensor[(11, 14, 5), float32], Tensor[(616), float64]) {
  %966 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(616), float64]) {
    %962 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %963 = @func_6370() /* ty=(Tensor[(616), float64],) */;
    %964 = %962.0;
    %965 = %963.0;
    (%964, %965)
  };
  %966() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(616), float64]) */
}

def @func_9353() -> Tensor[(11, 14, 5), float32] {
  %967 = @func_8093() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %967.0
}

def @func_4342() -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) {
  %972 = fn () -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) {
    %968 = @func_3966() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %969 = @func_3919() /* ty=(Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) */;
    %970 = %968.0;
    %971 = %969.0;
    (%970, %971)
  };
  %972() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), int64]) */
}

def @func_5315(%var_5313: Tensor[(56), int8]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) {
  @func_5312(%var_5313) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) */
}

def @func_10927(%var_10894: Tensor[(7, 14, 9), float32], %var_10908: Tensor[(2475), float32], %var_10909: Tensor[(3360), float32], %var_10910: Tensor[(336), float32]) -> (Tensor[(7, 14, 9), float32], Tensor[(15, 11, 15), float32], Tensor[(2475), float32], Tensor[(3360), float32], Tensor[(336), float32], Tensor[(11, 14, 5), int64], Tensor[(770), float32]) {
  %973 = cast(%var_10894, dtype="float32") /* ty=Tensor[(7, 14, 9), float32] */;
  %974 = cast(%var_10908, dtype="float32") /* ty=Tensor[(2475), float32] */;
  %975 = cast(%var_10909, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %976 = cast(%var_10910, dtype="float32") /* ty=Tensor[(336), float32] */;
  %977 = reshape(%974, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), float32] */;
  %978 = reshape(%975, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %979 = reshape(%976, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %980 = @func_6438(%977, %978, %979) /* ty=(Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) */;
  %981 = cast(meta[relay.Constant][58] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %982 = reshape(%981, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %983 = sqrt(%973) /* ty=Tensor[(7, 14, 9), float32] */;
  %984 = %980.0;
  %985 = @func_2410(%982) /* ty=Tensor[(11, 14, 5), int64] */;
  (%983, %984, %var_10908, %var_10909, %var_10910, %985, meta[relay.Constant][58] /* ty=Tensor[(770), float32] */)
}

def @func_7853(%var_7832: Tensor[(9, 7, 9), int16]) -> (Tensor[(9, 7, 9), bool], Tensor[(11, 14, 5), int64], Tensor[(1, 810), float64]) {
  %986 = cast(%var_7832, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %987 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(9, 7, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(meta[relay.Constant][59] /* ty=Tensor[(9, 7, 9), int16] */, dtype="bool") /* ty=Tensor[(9, 7, 9), bool] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %990 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 810), float64] */, dtype="float64") /* ty=Tensor[(1, 810), float64] */;
  %991 = reshape(%990, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), float64] */;
  %992 = @func_5092(%991) /* ty=(Tensor[(6, 15, 9), int8], Tensor[(11, 14, 5), int64], Tensor[(770), float32], Tensor[(20), float64], Tensor[(11, 14, 5), float32], Tensor[(6, 15, 9), float32]) */;
  %993 = less(%988, %989) /* ty=Tensor[(9, 7, 9), bool] */;
  %994 = %992.1;
  (%993, %994, meta[relay.Constant][60] /* ty=Tensor[(1, 810), float64] */)
}

def @func_8535(%var_8533: Tensor[(4, 12, 6), bool], %var_8534: Tensor[(4, 12, 6), bool]) -> Tensor[(4, 12, 6), bool] {
  %999 = fn (%var_8512: Tensor[(4, 12, 6), bool], %var_8513: Tensor[(4, 12, 6), bool]) -> Tensor[(4, 12, 6), bool] {
    %995 = cast(%var_8513, dtype="bool") /* ty=Tensor[(4, 12, 6), bool] */;
    %996 = shape_of(%var_8512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %997 = cast(%var_8512, dtype="bool") /* ty=Tensor[(4, 12, 6), bool] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%997, %998) /* ty=Tensor[(4, 12, 6), bool] */
  };
  %999(%var_8533, %var_8534) /* ty=Tensor[(4, 12, 6), bool] */
}

def @func_4941(%var_4940: Tensor[(20), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) {
  %1004 = fn (%var_4934: Tensor[(20), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) {
    %1000 = cast(%var_4934, dtype="float64") /* ty=Tensor[(20), float64] */;
    %1001 = reshape(%1000, newshape=[1, 10, 2]) /* ty=Tensor[(1, 10, 2), float64] */;
    %1002 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
    %1003 = @func_2109(%1001) /* ty=Tensor[(1, 10, 2), float64] */;
    (%1002, %1003, %var_4934)
  };
  %1004(%var_4940) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */
}

def @func_5400() -> (Tensor[(11, 14, 5), float32],) {
  %1005 = @func_2546() /* ty=Tensor[(11, 14, 5), float32] */;
  (%1005,)
}

def @func_9140(%var_9137: Tensor[(840, 4), float32], %var_9138: Tensor[(336), float32]) -> (Tensor[(11, 14, 5), float32], Tensor[(336), float32], Tensor[(2475), float32], Tensor[(840, 4), float32], Tensor[(336), float32]) {
  %1006 = cast(meta[relay.Constant][61] /* ty=Tensor[(2475), float32] */, dtype="float32") /* ty=Tensor[(2475), float32] */;
  %1007 = cast(%var_9137, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %1008 = cast(%var_9138, dtype="float32") /* ty=Tensor[(336), float32] */;
  %1009 = reshape(%1006, newshape=[15, 11, 15]) /* ty=Tensor[(15, 11, 15), float32] */;
  %1010 = reshape(%1007, newshape=[3360]) /* ty=Tensor[(3360), float32] */;
  %1011 = reshape(%1008, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %1012 = @func_6438(%1009, %1010, %1011) /* ty=(Tensor[(15, 11, 15), float32], Tensor[(336), float32], Tensor[(3360), float32], Tensor[(132, 1), float32], Tensor[(336), float32]) */;
  %1013 = @func_7950() /* ty=Tensor[(11, 14, 5), float32] */;
  %1014 = %1012.4;
  (%1013, %1014, meta[relay.Constant][61] /* ty=Tensor[(2475), float32] */, %var_9137, %var_9138)
}

def @func_7754() -> (Tensor[(11, 14, 5), float32],) {
  %1016 = fn () -> (Tensor[(11, 14, 5), float32],) {
    %1015 = @func_1716() /* ty=Tensor[(11, 14, 5), float32] */;
    (%1015,)
  };
  %1016() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_8077() -> Tensor[(11, 14, 5), float32] {
  %1018 = fn () -> Tensor[(11, 14, 5), float32] {
    %1017 = @func_6679() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %1017.1
  };
  %1018() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_2953(%var_2951: Tensor[(336), float32], %var_2952: Tensor[(14, 4), int8]) -> (Tensor[(6, 16, 3), float32], Tensor[(288), float32], Tensor[(11, 14, 5), int16], Tensor[(336), float32], Tensor[(7, 12, 4), uint32], Tensor[(14, 4), int8], Tensor[(11, 14, 5), float64], Tensor[(1, 16, 12), float32], Tensor[(192), float64]) {
  %1041 = fn (%var_2892: Tensor[(336), float32], %var_2896: Tensor[(14, 4), int8]) -> (Tensor[(6, 16, 3), float32], Tensor[(288), float32], Tensor[(11, 14, 5), int16], Tensor[(336), float32], Tensor[(7, 12, 4), uint32], Tensor[(14, 4), int8], Tensor[(11, 14, 5), float64], Tensor[(1, 16, 12), float32], Tensor[(192), float64]) {
    %1019 = cast(meta[relay.Constant][62] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %1020 = reshape(%1019, newshape=[6, 16, 3]) /* ty=Tensor[(6, 16, 3), float32] */;
    %1021 = @func_1143(%1020) /* ty=(Tensor[(6, 16, 3), float32],) */;
    %1022 = @func_2147() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
    %1023 = %1022.0;
    %1024 = cast(%1023, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
    %1025 = cast(%var_2892, dtype="float32") /* ty=Tensor[(336), float32] */;
    %1026 = reshape(%1024, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
    %1027 = reshape(%1025, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %1028 = @func_1981(%1026, %1027) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */;
    %1029 = cast(%var_2896, dtype="int8") /* ty=Tensor[(14, 4), int8] */;
    %1030 = reshape(%1029, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %1031 = @func_2745(%1030) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(?, 7, 8), uint64], Tensor[(56), int8], Tensor[(7, 12, 4), uint32]) */;
    %1032 = cast(%1023, dtype="float64") /* ty=Tensor[(11, 14, 5), float64] */;
    %1033 = cast(meta[relay.Constant][63] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %1034 = reshape(%1033, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float64] */;
    %1035 = @func_2204(%1034) /* ty=(Tensor[(?, 16, 12), int64], Tensor[(1, 16, 12), float32]) */;
    %1036 = %1021.0;
    %1037 = %1028.0;
    %1038 = %1031.3;
    %1039 = tan(%1032) /* ty=Tensor[(11, 14, 5), float64] */;
    %1040 = %1035.1;
    (%1036, meta[relay.Constant][62] /* ty=Tensor[(288), float32] */, %1037, %var_2892, %1038, %var_2896, %1039, %1040, meta[relay.Constant][63] /* ty=Tensor[(192), float64] */)
  };
  %1041(%var_2951, %var_2952) /* ty=(Tensor[(6, 16, 3), float32], Tensor[(288), float32], Tensor[(11, 14, 5), int16], Tensor[(336), float32], Tensor[(7, 12, 4), uint32], Tensor[(14, 4), int8], Tensor[(11, 14, 5), float64], Tensor[(1, 16, 12), float32], Tensor[(192), float64]) */
}

def @func_6389(%var_6387: Tensor[(2, 9, 14), int16]) -> (Tensor[(2, 9, 14), int16],) {
  @func_6386(%var_6387) /* ty=(Tensor[(2, 9, 14), int16],) */
}

def @func_9393() -> (Tensor[(11, 14, 5), float32],) {
  @func_9391() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_8900() -> Tensor[(56), int8] {
  %1042 = fn () -> Tensor[(56), int8] {
    @func_6466() /* ty=Tensor[(56), int8] */
  };
  %1042() /* ty=Tensor[(56), int8] */
}

def @func_9495(%var_9493: Tensor[(336), float32]) -> (Tensor[(616), float64], Tensor[(11, 14, 5), uint8], Tensor[(336), float32], Tensor[(770), float32], Tensor[(11, 14, 5), float32]) {
  @func_9492(%var_9493) /* ty=(Tensor[(616), float64], Tensor[(11, 14, 5), uint8], Tensor[(336), float32], Tensor[(770), float32], Tensor[(11, 14, 5), float32]) */
}

def @func_978(%var_965: Tensor[(3, 4, 12), float64]) -> (Tensor[(3, 4, 12), float64],) {
  %1043 = cast(%var_965, dtype="float64") /* ty=Tensor[(3, 4, 12), float64] */;
  %1044 = sin(%1043) /* ty=Tensor[(3, 4, 12), float64] */;
  (%1044,)
}

def @func_1981(%var_1904: Tensor[(11, 14, 5), float32], %var_1936: Tensor[(336), float32]) -> (Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) {
  %1045 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %1046 = %1045.0;
  %1047 = cast(%var_1904, dtype="int16") /* ty=Tensor[(11, 14, 5), int16] */;
  %1048 = shape_of(%1046, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1049 = cast(%1046, dtype="int16") /* ty=Tensor[(11, 14, 5), int16] */;
  %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1051 = @func_1888() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %1052 = cast(%var_1936, dtype="float32") /* ty=Tensor[(336), float32] */;
  %1053 = %1051.0;
  %1054 = cast(%1053, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %1055 = reshape(%1052, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %1056 = reshape(%1054, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %1057 = @func_1756(%1055, %1056) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %1058 = cast(meta[relay.Constant][64] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %1059 = cast(meta[relay.Constant][64] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %1060 = reshape(%1058, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %1061 = reshape(%1059, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %1062 = @func_672(%1060, %1061) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
  %1063 = @func_1817() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1064 = bitwise_and(%1049, %1050) /* ty=Tensor[(11, 14, 5), int16] */;
  %1065 = %1057.0;
  %1066 = %1062.0;
  %1067 = %1063.1;
  (%1064, %1053, %1065, %var_1936, %1066, meta[relay.Constant][64] /* ty=Tensor[(1056), int32] */, %1067)
}

def @func_672(%var_662: Tensor[(11, 8, 12), int32], %var_663: Tensor[(11, 8, 12), int32]) -> (Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) {
  %1068 = cast(%var_663, dtype="int32") /* ty=Tensor[(11, 8, 12), int32] */;
  %1069 = shape_of(%var_662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1070 = cast(%var_662, dtype="int32") /* ty=Tensor[(11, 8, 12), int32] */;
  %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1072 = cast(meta[relay.Constant][65] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %1073 = reshape(%1072, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
  %1074 = @func_283(%1073) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
  %1075 = multiply(%1070, %1071) /* ty=Tensor[(11, 8, 12), int32] */;
  %1076 = %1074.0;
  (%1075, %1076, meta[relay.Constant][65] /* ty=Tensor[(132), float32] */)
}

def @func_10735() -> Tensor[(11, 14, 5), float32] {
  @func_10733() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_10431() -> (Tensor[(20), float64], Tensor[(56), int8], Tensor[(56), int8]) {
  %1082 = fn () -> (Tensor[(20), float64], Tensor[(56), int8], Tensor[(56), int8]) {
    %1077 = cast(meta[relay.Constant][66] /* ty=Tensor[(56), int8] */, dtype="int8") /* ty=Tensor[(56), int8] */;
    %1078 = reshape(%1077, newshape=[56]) /* ty=Tensor[(56), int8] */;
    %1079 = @func_5312(%1078) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(56), int8]) */;
    %1080 = @func_7349() /* ty=Tensor[(20), float64] */;
    %1081 = %1079.2;
    (%1080, %1081, meta[relay.Constant][66] /* ty=Tensor[(56), int8] */)
  };
  %1082() /* ty=(Tensor[(20), float64], Tensor[(56), int8], Tensor[(56), int8]) */
}

def @func_8492(%var_8464: Tensor[(3, 7, 11), float32]) -> (Tensor[(3, 7, 11), float32], Tensor[(11, 14, 5), float32]) {
  %1083 = cast(%var_8464, dtype="float32") /* ty=Tensor[(3, 7, 11), float32] */;
  %1084 = @func_7539() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32]) */;
  %1085 = cosh(%1083) /* ty=Tensor[(3, 7, 11), float32] */;
  %1086 = %1084.0;
  (%1085, %1086)
}

def @func_10185() -> (Tensor[(11, 14, 5), float32],) {
  %1087 = @func_2043() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %1088 = %1087.0;
  (%1088,)
}

def @func_5581(%var_5578: Tensor[(336), float32], %var_5579: Tensor[(2, 528), int32], %var_5580: Tensor[(2, 528), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(2, 528), bool], Tensor[(2, 528), bool]) {
  @func_5576(%var_5578, %var_5579, %var_5580) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(2, 528), bool], Tensor[(2, 528), bool]) */
}

def @func_1985(%var_1983: Tensor[(11, 14, 5), float32], %var_1984: Tensor[(336), float32]) -> (Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) {
  @func_1981(%var_1983, %var_1984) /* ty=(Tensor[(11, 14, 5), int16], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(11, 8, 12), int32], Tensor[(1056), int32], Tensor[(11, 14, 5), float32]) */
}

def @func_8780(%var_8777: Tensor[(16, 4, 15), float32], %var_8778: Tensor[(16, 4, 15), float32], %var_8779: Tensor[(132), float32]) -> (Tensor[(16, 4, 15), float32], Tensor[(132), float32], Tensor[(4, 11, 3), float32]) {
  %1100 = fn (%var_8737: Tensor[(16, 4, 15), float32], %var_8738: Tensor[(16, 4, 15), float32], %var_8747: Tensor[(132), float32]) -> (Tensor[(16, 4, 15), float32], Tensor[(132), float32], Tensor[(4, 11, 3), float32]) {
    %1089 = cast(%var_8738, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
    %1090 = shape_of(%var_8737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1091 = cast(%var_8737, dtype="float32") /* ty=Tensor[(16, 4, 15), float32] */;
    %1092 = dyn.reshape(%1089, %1090, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1093 = cast(%var_8747, dtype="float32") /* ty=Tensor[(132), float32] */;
    %1094 = reshape(%1093, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), float32] */;
    %1095 = @func_283(%1094) /* ty=(Tensor[(11, 15, 3), float64], Tensor[(495), float64], Tensor[(4, 11, 3), float32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), int32], Tensor[(11, 15, 3), float64], Tensor[(4, 11, 3), float32]) */;
    %1096 = %1095.6;
    %1097 = cast(%1096, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %1098 = power(%1091, %1092) /* ty=Tensor[(16, 4, 15), float32] */;
    %1099 = log10(%1097) /* ty=Tensor[(4, 11, 3), float32] */;
    (%1098, %var_8747, %1099)
  };
  %1100(%var_8777, %var_8778, %var_8779) /* ty=(Tensor[(16, 4, 15), float32], Tensor[(132), float32], Tensor[(4, 11, 3), float32]) */
}

def @func_10853() -> Tensor[(11, 14, 5), float32] {
  %1102 = fn () -> Tensor[(11, 14, 5), float32] {
    %1101 = @func_3123() /* ty=(Tensor[(11, 14, 5), float32], Tensor[(1, 10, 2), float64], Tensor[(20), float64]) */;
    %1101.0
  };
  %1102() /* ty=Tensor[(11, 14, 5), float32] */
}

def @func_10706() -> (Tensor[(11, 14, 5), float32],) {
  @func_10704() /* ty=(Tensor[(11, 14, 5), float32],) */
}

def @func_6184(%var_6183: Tensor[(165, 3), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(165, 3), float64]) {
  %1109 = fn (%var_6180: Tensor[(165, 3), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(165, 3), float64]) {
    %1103 = @func_5400() /* ty=(Tensor[(11, 14, 5), float32],) */;
    %1104 = cast(%var_6180, dtype="float64") /* ty=Tensor[(165, 3), float64] */;
    %1105 = reshape(%1104, newshape=[11, 15, 3]) /* ty=Tensor[(11, 15, 3), float64] */;
    %1106 = @func_143(%1105) /* ty=(Tensor[(11, 15, 3), float64],) */;
    %1107 = %1103.0;
    %1108 = %1106.0;
    (%1107, %1108, %var_6180)
  };
  %1109(%var_6183) /* ty=(Tensor[(11, 14, 5), float32], Tensor[(11, 15, 3), float64], Tensor[(165, 3), float64]) */
}

def @func_9096() -> (Tensor[(11, 14, 5), float32],) {
  %1110 = @func_8076() /* ty=Tensor[(11, 14, 5), float32] */;
  (%1110,)
}

def @func_5576(%var_5545: Tensor[(336), float32], %var_5552: Tensor[(2, 528), int32], %var_5570: Tensor[(2, 528), float64]) -> (Tensor[(11, 14, 5), float32], Tensor[(11, 14, 5), float32], Tensor[(132), float32], Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32], Tensor[(7, 12, 4), uint8], Tensor[(336), float32], Tensor[(2, 528), bool], Tensor[(2, 528), bool]) {
  %1111 = @func_5014() /* ty=(Tensor[(11, 14, 5), float32],) */;
  %1112 = cast(meta[relay.Constant][67] /* ty=Tensor[(2, 528), int32] */, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %1113 = cast(meta[relay.Constant][67] /* ty=Tensor[(2, 528), int32] */, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %1114 = reshape(%1112, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %1115 = reshape(%1113, newshape=[11, 8, 12]) /* ty=Tensor[(11, 8, 12), int32] */;
  %1116 = @func_672(%1114, %1115) /* ty=(Tensor[(11, 8, 12), int32], Tensor[(11, 15, 3), float64], Tensor[(132), float32]) */;
  %1117 = @func_3919() /* ty=(Tensor[(11, 14, 5), int64], Tensor[(11, 14, 5), float32]) */;
  %1118 = cast(%var_5545, dtype="float32") /* ty=Tensor[(336), float32] */;
  %1119 = %1111.0;
  %1120 = cast(%1119, dtype="float32") /* ty=Tensor[(11, 14, 5), float32] */;
  %1121 = reshape(%1118, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %1122 = reshape(%1120, newshape=[11, 14, 5]) /* ty=Tensor[(11, 14, 5), float32] */;
  %1123 = @func_1756(%1121, %1122) /* ty=(Tensor[(7, 12, 4), uint8], Tensor[(11, 14, 5), uint8]) */;
  %1124 = cast(%var_5552, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %1125 = shape_of(meta[relay.Constant][67] /* ty=Tensor[(2, 528), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1126 = cast(meta[relay.Constant][67] /* ty=Tensor[(2, 528), int32] */, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1128 = cast(meta[relay.Constant][67] /* ty=Tensor[(2, 528), int32] */, dtype="float32") /* ty=Tensor[(2, 528), float32] */;
  %1129 = sinh(%1128) /* ty=Tensor[(2, 528), float32] */;
  %1130 = cast(%1129, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %1131 = acos(%1130) /* ty=Tensor[(2, 528), float64] */;
  %1132 = cast(%var_5570, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %1133 = shape_of(%1131, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1134 = cast(%1131, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %1135 = dyn.reshape(%1132, %1133, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1136 = @func_4391() /* ty=Tensor[(11, 14, 5), float32] */;
  %1137 = %1116.2;
  %1138 = %1117.0;
  %1139 = @func_4391() /* ty=Tensor[(11, 14, 5), float32] */;
  %1140 = %1123.0;
  %1141 = not_equal(%1126, %1127) /* ty=Tensor[(2, 528), bool] */;
  %1142 = logical_and(%1134, %1135) /* ty=Tensor[(2, 528), bool] */;
  (%1119, %1136, %1137, %1138, %1139, %1140, %var_5545, %1141, %1142)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen479/build/output.py", line 3093, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:22:07] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

