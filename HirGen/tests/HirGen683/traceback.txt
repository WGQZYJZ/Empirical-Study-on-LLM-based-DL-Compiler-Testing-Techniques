==========mod==========
#[version = "0.0.5"]
def @func_9732() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], float32) {
  %0 = @func_8109() /* ty=(Tensor[(28), float32],) */;
  %1 = cast(9.62769f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %2 = %0.0;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(28), float32] */;
  %4 = reshape(%1, newshape=[]) /* ty=float32 */;
  %5 = reshape(%3, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %6 = @func_1598(%4, %5) /* ty=Tensor[(1, 4, 7), float32] */;
  (%2, %6, 9.62769f /* ty=float32 */)
}

def @func_3973(%var_3949: Tensor[(5, 12, 11), float32]) -> (Tensor[(5, 12, 11), bool], Tensor[(28), float32]) {
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 12, 11), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 11), float32] */;
  %8 = shape_of(%var_3949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_3949, dtype="float32") /* ty=Tensor[(5, 12, 11), float32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %11 = mod(%9, %10) /* ty=Tensor[(5, 12, 11), float32] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 12, 11), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = less_equal(%14, %15) /* ty=Tensor[(5, 12, 11), bool] */;
  %17 = @func_3544() /* ty=Tensor[(28), float32] */;
  (%16, %17)
}

def @func_8265() -> (Tensor[(1, 4, 7), float32],) {
  %18 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %19 = %18.0;
  (%19,)
}

def @func_1598(%var_1584: float32, %var_1585: Tensor[(1, 4, 7), float32]) -> Tensor[(1, 4, 7), float32] {
  %20 = cast(%var_1584, dtype="float32") /* ty=float32 */;
  %21 = cast(%var_1585, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  divide(%20, %21) /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_3947() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) {
  %22 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %23 = cast(-8.7178f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 110), float64] */, dtype="float64") /* ty=Tensor[(1, 110), float64] */;
  %25 = reshape(%23, newshape=[]) /* ty=float64 */;
  %26 = reshape(%24, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %27 = @func_2062(%25, %26) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %28 = %22.3;
  %29 = %27.3;
  (%28, %29, -8.7178f64 /* ty=float64 */, meta[relay.Constant][1] /* ty=Tensor[(1, 110), float64] */)
}

def @func_8439() -> (Tensor[(28), float32],) {
  %30 = @func_7759() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(28), float32]) */;
  %31 = %30.1;
  (%31,)
}

def @func_8857(%var_8849: Tensor[(110, 6), float32], %var_8850: float64) -> (Tensor[(28), float32], Tensor[(28), float32], Tensor[(110, 6), float32], float64) {
  %32 = @func_4489() /* ty=(Tensor[(28), float32],) */;
  %33 = cast(%var_8849, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %34 = cast(%var_8850, dtype="float64") /* ty=float64 */;
  %35 = reshape(%33, newshape=[330, 2]) /* ty=Tensor[(330, 2), float32] */;
  %36 = reshape(%34, newshape=[]) /* ty=float64 */;
  %37 = @func_5547(%35, %36) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(330, 2), int16], Tensor[(2, 6, 12), float64], Tensor[(144), float32], Tensor[(110), float64], Tensor[(192), int16], Tensor[(330, 2), int16]) */;
  %38 = %32.0;
  %39 = %37.4;
  (%38, %39, %var_8849, %var_8850)
}

def @func_4333(%var_4300: Tensor[(2, 10, 5), float64]) -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) {
  %40 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %41 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %42 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
  %43 = %42.2;
  %44 = cast(%var_4300, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %50 = %41.1;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %52 = reshape(%48, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %53 = reshape(%49, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %54 = reshape(%51, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %55 = @func_2565(%52, %53, %54) /* ty=(Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) */;
  %56 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
  %57 = %56.3;
  %58 = cast(%var_4300, dtype="int32") /* ty=Tensor[(2, 10, 5), int32] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(2), int32] */;
  %60 = cast(%57, dtype="int32") /* ty=Tensor[(1, 100), int32] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %62 = %40.0;
  %63 = minimum(%46, %47) /* ty=Tensor[(2, 10, 5), float32] */;
  %64 = %55.2;
  %65 = bitwise_and(%60, %61) /* ty=Tensor[(?, 100), int32] */;
  (%62, %50, %63, %64, meta[relay.Constant][2] /* ty=Tensor[(2197), int32] */, %65)
}

def @func_10905() -> Tensor[(110), float64] {
  %66 = @func_8793() /* ty=(Tensor[(110), float64],) */;
  %66.0
}

def @func_6087() -> (Tensor[(110, 1), float32],) {
  %67 = @func_5455() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float32]) */;
  %68 = %67.1;
  (%68,)
}

def @func_2845() -> Tensor[(28), float32] {
  %69 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %69.3
}

def @func_2539(%var_2531: Tensor[(2, 10, 5), float64], %var_2532: Tensor[(2, 10, 5), float64]) -> Tensor[(2, 10, 5), float64] {
  %70 = cast(%var_2532, dtype="float64") /* ty=Tensor[(2, 10, 5), float64] */;
  %71 = shape_of(%var_2531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%var_2531, dtype="float64") /* ty=Tensor[(2, 10, 5), float64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%72, %73) /* ty=Tensor[(2, 10, 5), float64] */
}

def @func_10840(%var_10802: Tensor[(110), float64]) -> (Tensor[(110), int32], Tensor[(28), float32], Tensor[(110), float64]) {
  %74 = @func_9341() /* ty=(Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) */;
  %75 = %74.0;
  %76 = cast(%var_10802, dtype="int32") /* ty=Tensor[(110), int32] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(1), int32] */;
  %78 = cast(%75, dtype="int32") /* ty=Tensor[(110), int32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?), int32] */;
  %80 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %81 = @func_9997() /* ty=(Tensor[(28), float32], Tensor[(110), float64]) */;
  %82 = %81.1;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(110), float64] */;
  %84 = maximum(%78, %79) /* ty=Tensor[(110), int32] */;
  %85 = %80.0;
  %86 = exp(%83) /* ty=Tensor[(110), float64] */;
  (%84, %85, %86)
}

def @func_9341() -> (Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) {
  %87 = @func_9110() /* ty=(Tensor[(3, 2, 15), float32],) */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %90 = reshape(%88, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %91 = reshape(%89, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %92 = @func_3733(%90, %91) /* ty=(Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) */;
  %93 = @func_5600() /* ty=Tensor[(110), float64] */;
  %94 = %87.0;
  %95 = %92.6;
  (%93, %94, %95, meta[relay.Constant][3] /* ty=Tensor[(2, 312), float32] */, meta[relay.Constant][4] /* ty=Tensor[(100), float64] */)
}

def @func_2808() -> (Tensor[(1, 4, 7), float32],) {
  %96 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %97 = %96.1;
  (%97,)
}

def @func_5024(%var_4946: Tensor[(1, 4, 7), float32]) -> (Tensor[(110), float64], Tensor[(?, 4, 7), uint64], Tensor[(110), float64], float64, Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %98 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %99 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %100 = %99.0;
  %101 = cast(%var_4946, dtype="uint64") /* ty=Tensor[(1, 4, 7), uint64] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="uint64") /* ty=Tensor[(1, 4, 7), uint64] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %105 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %106 = %105.0;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(110), float64] */;
  %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %109 = reshape(%107, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %110 = reshape(%108, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %111 = @func_3118(%109, %110) /* ty=(float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */;
  %112 = %98.0;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(110), float64] */;
  %114 = reshape(%113, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %115 = @func_3023(%114) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
  %116 = %115.2;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %118 = logical_xor(%103, %104) /* ty=Tensor[(?, 4, 7), uint64] */;
  %119 = %111.0;
  %120 = log(%117) /* ty=Tensor[(1, 4, 7), float32] */;
  %121 = @func_2845() /* ty=Tensor[(28), float32] */;
  (%112, %118, %106, %119, meta[relay.Constant][5] /* ty=Tensor[(100), float64] */, %120, %121)
}

def @func_6308() -> (Tensor[(1, 4, 7), float32],) {
  %122 = @func_4249() /* ty=Tensor[(1, 4, 7), float32] */;
  (%122,)
}

def @func_7812() -> Tensor[(28), float64] {
  %123 = @func_5406() /* ty=Tensor[(28), float32] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(28), float64] */;
  acosh(%124) /* ty=Tensor[(28), float64] */
}

def @func_6862() -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
  %125 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %126 = %125.0;
  %127 = @func_4349() /* ty=Tensor[(1, 4, 7), float32] */;
  (%126, %127)
}

def @func_2526() -> (Tensor[(1, 4, 7), float32],) {
  %128 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %129 = %128.1;
  (%129,)
}

def @func_1712(%var_1705: Tensor[(28), float32]) -> (Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) {
  %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
  %131 = cast(-7.16856f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %132 = cast(%var_1705, dtype="float32") /* ty=Tensor[(28), float32] */;
  %133 = reshape(%131, newshape=[]) /* ty=float32 */;
  %134 = reshape(%132, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %135 = asinh(%130) /* ty=Tensor[(11, 14, 3), float64] */;
  %136 = @func_1598(%133, %134) /* ty=Tensor[(1, 4, 7), float32] */;
  (%135, %136, -7.16856f /* ty=float32 */, %var_1705)
}

def @func_5698() -> Tensor[(1, 4, 7), float32] {
  @func_5171() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_7759() -> (Tensor[(3, 2, 15), float32], Tensor[(28), float32]) {
  %137 = @func_7307() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) */;
  %138 = %137.0;
  %139 = cast(%138, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %140 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %141 = cosh(%139) /* ty=Tensor[(3, 2, 15), float32] */;
  %142 = %140.0;
  (%141, %142)
}

def @func_10987() -> (Tensor[(1, 4, 7), float32],) {
  %143 = @func_7911() /* ty=Tensor[(1, 4, 7), float32] */;
  (%143,)
}

def @func_11796(%var_11781: Tensor[(22, 5), float64]) -> Tensor[(22, 5), float32] {
  %144 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %145 = %144.2;
  %146 = cast(%var_11781, dtype="float32") /* ty=Tensor[(22, 5), float32] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
  %148 = cast(%145, dtype="float32") /* ty=Tensor[(22, 5), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  divide(%148, %149) /* ty=Tensor[(22, 5), float32] */
}

def @func_6432(%var_6374: Tensor[(110), float64], %var_6420: Tensor[(2197), int32]) -> (Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %150 = @func_5600() /* ty=Tensor[(110), float64] */;
  %151 = cast(%var_6374, dtype="bool") /* ty=Tensor[(110), bool] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(1), int32] */;
  %153 = cast(%150, dtype="bool") /* ty=Tensor[(110), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?), bool] */;
  %155 = less_equal(%153, %154) /* ty=Tensor[(110), bool] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(110), float32] */;
  %157 = cast(%var_6420, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %158 = cast(%var_6420, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %159 = cast(meta[relay.Constant][7] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
  %160 = reshape(%157, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %161 = reshape(%158, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %162 = reshape(%159, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %163 = @func_2565(%160, %161, %162) /* ty=(Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) */;
  %164 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %165 = @func_6204() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) */;
  %166 = sqrt(%156) /* ty=Tensor[(110), float32] */;
  %167 = %163.2;
  %168 = %164.0;
  %169 = %165.2;
  (%166, %167, %var_6420, meta[relay.Constant][7] /* ty=Tensor[(28), float32] */, %168, %169)
}

def @func_9263() -> Tensor[(1, 4, 7), float32] {
  @func_4349() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_6584(%var_6577: Tensor[(3, 8, 5), float32]) -> (Tensor[(3, 8, 5), float32],) {
  %170 = cast(%var_6577, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
  %171 = exp(%170) /* ty=Tensor[(3, 8, 5), float32] */;
  (%171,)
}

def @func_9003() -> Tensor[(13, 12, 4), float64] {
  %172 = @func_6903() /* ty=(Tensor[(13, 12, 4), float64],) */;
  %172.0
}

def @func_10341() -> (Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) {
  %173 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %174 = %173.0;
  %175 = @func_5171() /* ty=Tensor[(1, 4, 7), float32] */;
  (%174, %175)
}

def @func_3733(%var_3712: Tensor[(624), float32], %var_3714: Tensor[(2, 10, 5), float64]) -> (Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) {
  %176 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %177 = cast(meta[relay.Constant][8] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %178 = reshape(%177, newshape=[22, 5]) /* ty=Tensor[(22, 5), float64] */;
  %179 = @func_2587(%178) /* ty=(Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) */;
  %180 = %179.3;
  %181 = cast(%180, dtype="bool") /* ty=Tensor[(22, 5), bool] */;
  %182 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(110), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %183 = cast(meta[relay.Constant][8] /* ty=Tensor[(110), float64] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), bool] */;
  %185 = greater_equal(%183, %184) /* ty=Tensor[(110), bool] */;
  %186 = cast(%185, dtype="bool") /* ty=Tensor[(110), bool] */;
  %187 = shape_of(%180, dtype="int32") /* ty=Tensor[(2), int32] */;
  %188 = cast(%180, dtype="bool") /* ty=Tensor[(22, 5), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %190 = cast(%var_3712, dtype="float32") /* ty=Tensor[(624), float32] */;
  %191 = reshape(%190, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
  %192 = @func_2702(%191) /* ty=(Tensor[(13, 12, 4), float32],) */;
  %193 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
  %194 = %193.2;
  %195 = cast(%var_3714, dtype="uint32") /* ty=Tensor[(2, 10, 5), uint32] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint32") /* ty=Tensor[(2, 10, 5), uint32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %199 = cast(%var_3712, dtype="float32") /* ty=Tensor[(624), float32] */;
  %200 = reshape(%199, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
  %201 = @func_2702(%200) /* ty=(Tensor[(13, 12, 4), float32],) */;
  %202 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %203 = %176.5;
  %204 = less_equal(%188, %189) /* ty=Tensor[(22, 5), bool] */;
  %205 = %192.0;
  %206 = logical_xor(%197, %198) /* ty=Tensor[(2, 10, 5), uint32] */;
  %207 = %201.0;
  %208 = %202.0;
  (%203, %204, %205, %var_3712, %206, %207, %208)
}

def @func_7126(%var_7109: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), float32], Tensor[(210), uint16]) {
  %209 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %210 = shape_of(%var_7109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_7109, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %213 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
  %214 = power(%211, %212) /* ty=Tensor[(10, 6, 4), float32] */;
  %215 = %213.3;
  (%214, %215)
}

def @func_3655() -> (Tensor[(28), float32],) {
  %216 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %217 = %216.3;
  (%217,)
}

def @func_3639() -> (Tensor[(110), float64],) {
  %218 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %219 = %218.3;
  (%219,)
}

def @func_4226(%var_4204: Tensor[(144, 1), float32], %var_4216: Tensor[(2, 6, 12), float32]) -> (Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float64], Tensor[(144, 1), float64]) {
  %220 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %221 = cast(%var_4204, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %222 = reshape(%221, newshape=[2, 6, 12]) /* ty=Tensor[(2, 6, 12), float32] */;
  %223 = @func_2160(%222) /* ty=Tensor[(2, 6, 12), float32] */;
  %224 = cast(%var_4216, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %228 = cast(%var_4204, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %229 = asinh(%228) /* ty=Tensor[(144, 1), float32] */;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(144, 1), float64] */;
  %231 = %220.0;
  %232 = floor_divide(%226, %227) /* ty=Tensor[(2, 6, 12), float64] */;
  %233 = log10(%230) /* ty=Tensor[(144, 1), float64] */;
  (%231, %232, %233)
}

def @func_5895(%var_5864: Tensor[(110), float64]) -> (Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) {
  %234 = @func_5733() /* ty=Tensor[(110), float64] */;
  %235 = cast(%var_5864, dtype="bool") /* ty=Tensor[(110), bool] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(1), int32] */;
  %237 = cast(%234, dtype="bool") /* ty=Tensor[(110), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?), bool] */;
  %239 = cast(-3.66783f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %240 = reshape(%239, newshape=[]) /* ty=float64 */;
  %241 = @func_4781(%240) /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) */;
  %242 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %243 = cast(meta[relay.Constant][10] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %244 = reshape(%243, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %245 = @func_4333(%244) /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) */;
  %246 = not_equal(%237, %238) /* ty=Tensor[(110), bool] */;
  %247 = %241.1;
  %248 = %242.2;
  %249 = %245.4;
  (%246, %247, -3.66783f64 /* ty=float64 */, %248, %249, meta[relay.Constant][10] /* ty=Tensor[(100), float64] */)
}

def @func_9446(%var_9441: Tensor[(2, 96), int16], %var_9442: float64) -> (Tensor[(1, 4, 7), float32], Tensor[(4, 4, 12), int16], Tensor[(2, 96), int16], float64) {
  %250 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %251 = cast(%var_9441, dtype="int16") /* ty=Tensor[(2, 96), int16] */;
  %252 = cast(%var_9442, dtype="float64") /* ty=float64 */;
  %253 = reshape(%251, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %254 = reshape(%252, newshape=[]) /* ty=float64 */;
  %255 = @func_2187(%253, %254) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %256 = %250.1;
  %257 = %255.0;
  (%256, %257, %var_9441, %var_9442)
}

def @func_5912() -> (Tensor[(110), float64],) {
  %258 = @func_5733() /* ty=Tensor[(110), float64] */;
  (%258,)
}

def @func_6063(%var_6056: Tensor[(110), float64]) -> (Tensor[(110), int16],) {
  %259 = @func_4792() /* ty=(Tensor[(110), float64],) */;
  %260 = %259.0;
  %261 = cast(%var_6056, dtype="int16") /* ty=Tensor[(110), int16] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(1), int32] */;
  %263 = cast(%260, dtype="int16") /* ty=Tensor[(110), int16] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?), int16] */;
  %265 = add(%263, %264) /* ty=Tensor[(110), int16] */;
  (%265,)
}

def @func_9110() -> (Tensor[(3, 2, 15), float32],) {
  %266 = @func_7307() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) */;
  %267 = %266.1;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %269 = cos(%268) /* ty=Tensor[(3, 2, 15), float32] */;
  (%269,)
}

def @func_11298() -> Tensor[(28), float32] {
  %270 = @func_3803() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
  %270.0
}

def @func_5547(%var_5523: Tensor[(330, 2), float32], %var_5534: float64) -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(330, 2), int16], Tensor[(2, 6, 12), float64], Tensor[(144), float32], Tensor[(110), float64], Tensor[(192), int16], Tensor[(330, 2), int16]) {
  %271 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %272 = cast(meta[relay.Constant][11] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %273 = reshape(%272, newshape=[22, 5]) /* ty=Tensor[(22, 5), float64] */;
  %274 = @func_2587(%273) /* ty=(Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) */;
  %275 = cast(meta[relay.Constant][12] /* ty=Tensor[(330, 2), float32] */, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
  %276 = reshape(%275, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %277 = @func_3973(%276) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %278 = cast(%var_5523, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %279 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(330, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %280 = cast(meta[relay.Constant][12] /* ty=Tensor[(330, 2), float32] */, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %282 = cast(meta[relay.Constant][13] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %283 = cast(meta[relay.Constant][13] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %284 = reshape(%282, newshape=[144, 1]) /* ty=Tensor[(144, 1), float32] */;
  %285 = reshape(%283, newshape=[2, 6, 12]) /* ty=Tensor[(2, 6, 12), float32] */;
  %286 = @func_4226(%284, %285) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float64], Tensor[(144, 1), float64]) */;
  %287 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
  %288 = cast(%var_5534, dtype="float64") /* ty=float64 */;
  %289 = reshape(%287, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %290 = reshape(%288, newshape=[]) /* ty=float64 */;
  %291 = @func_2187(%289, %290) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %292 = cast(%var_5523, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %293 = cast(%var_5534, dtype="int16") /* ty=int16 */;
  %294 = @func_5180() /* ty=Tensor[(1, 4, 7), float32] */;
  %295 = %271.0;
  %296 = %274.2;
  %297 = %277.1;
  %298 = bitwise_or(%280, %281) /* ty=Tensor[(330, 2), int16] */;
  %299 = %286.1;
  %300 = %291.3;
  %301 = bitwise_xor(%292, %293) /* ty=Tensor[(330, 2), int16] */;
  (%294, %295, %296, meta[relay.Constant][11] /* ty=Tensor[(110), float64] */, %297, %298, %299, meta[relay.Constant][13] /* ty=Tensor[(144), float32] */, %300, meta[relay.Constant][14] /* ty=Tensor[(192), int16] */, %301)
}

def @func_8080() -> (Tensor[(100), float64], Tensor[(192), int16], float64) {
  %302 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %303 = cast(2.92641f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %304 = reshape(%303, newshape=[]) /* ty=float64 */;
  %305 = @func_3414(%304) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) */;
  %306 = %302.4;
  %307 = %305.3;
  (%306, %307, 2.92641f64 /* ty=float64 */)
}

def @func_4038(%var_4033: Tensor[(100), float64]) -> (Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) {
  %308 = cast(%var_4033, dtype="float64") /* ty=Tensor[(100), float64] */;
  %309 = cast(%var_4033, dtype="float64") /* ty=Tensor[(100), float64] */;
  %310 = reshape(%308, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %311 = reshape(%309, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %312 = @func_3544() /* ty=Tensor[(28), float32] */;
  %313 = @func_2539(%310, %311) /* ty=Tensor[(2, 10, 5), float64] */;
  (%312, %313, %var_4033)
}

def @func_8498() -> Tensor[(110), float64] {
  @func_5600() /* ty=Tensor[(110), float64] */
}

def @func_11944(%var_11904: Tensor[(10, 13, 6), uint64], %var_11911: Tensor[(10, 13, 6), uint64], %var_11937: Tensor[(660), float32]) -> (Tensor[(10, 13, 6), uint64], Tensor[(10, 13, 6), bool], Tensor[(28), float32], Tensor[(660), float32], Tensor[(28), float64]) {
  %314 = cast(%var_11904, dtype="uint64") /* ty=Tensor[(10, 13, 6), uint64] */;
  %315 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 13, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 13, 6), uint64] */, dtype="uint64") /* ty=Tensor[(10, 13, 6), uint64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %318 = cast(%var_11911, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
  %319 = shape_of(%var_11904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_11904, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %322 = cast(%var_11937, dtype="float32") /* ty=Tensor[(660), float32] */;
  %323 = reshape(%322, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %324 = @func_3973(%323) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %325 = bitwise_xor(%316, %317) /* ty=Tensor[(10, 13, 6), uint64] */;
  %326 = not_equal(%320, %321) /* ty=Tensor[(10, 13, 6), bool] */;
  %327 = %324.1;
  %328 = @func_7812() /* ty=Tensor[(28), float64] */;
  (%325, %326, %327, %var_11937, %328)
}

def @func_5685() -> (Tensor[(1, 4, 7), float64],) {
  %329 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %330 = %329.2;
  %331 = cast(%330, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
  %332 = cosh(%331) /* ty=Tensor[(1, 4, 7), float64] */;
  (%332,)
}

def @func_10921() -> (Tensor[(1, 4, 7), float32],) {
  %333 = @func_5180() /* ty=Tensor[(1, 4, 7), float32] */;
  (%333,)
}

def @func_2187(%var_2170: Tensor[(4, 4, 12), int16], %var_2181: float64) -> (Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) {
  %334 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 4, 12), int16] */, dtype="int16") /* ty=Tensor[(4, 4, 12), int16] */;
  %335 = shape_of(%var_2170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_2170, dtype="int16") /* ty=Tensor[(4, 4, 12), int16] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %338 = cast(%var_2181, dtype="float64") /* ty=float64 */;
  %339 = cast(meta[relay.Constant][17] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %340 = reshape(%338, newshape=[]) /* ty=float64 */;
  %341 = reshape(%339, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %342 = @func_2062(%340, %341) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %343 = right_shift(%336, %337) /* ty=Tensor[(4, 4, 12), int16] */;
  %344 = %342.3;
  (%343, %344, %var_2181, meta[relay.Constant][17] /* ty=Tensor[(110), float64] */)
}

def @func_8179() -> Tensor[(1, 4, 7), float32] {
  %345 = @func_6204() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) */;
  %345.1
}

def @func_4489() -> (Tensor[(28), float32],) {
  %346 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %347 = %346.1;
  (%347,)
}

def @func_10757() -> Tensor[(1, 4, 7), float64] {
  %348 = @func_5685() /* ty=(Tensor[(1, 4, 7), float64],) */;
  %348.0
}

def @func_7044(%var_6948: Tensor[(8, 7, 4), float32], %var_7032: Tensor[(2, 4, 7), float32]) -> (Tensor[(8, 7, 4), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(2, 4, 7), uint64]) {
  %349 = cast(%var_6948, dtype="float32") /* ty=Tensor[(8, 7, 4), float32] */;
  %350 = @func_5455() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float32]) */;
  %351 = cast(meta[relay.Constant][19] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %352 = cast(meta[relay.Constant][19] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %353 = reshape(%351, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %354 = reshape(%352, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %355 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %356 = cast(meta[relay.Constant][20] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %357 = cast(meta[relay.Constant][20] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %358 = reshape(%356, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %359 = reshape(%357, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %360 = cast(meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %361 = reshape(%360, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %362 = @func_3023(%361) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %365 = sqrt(%364) /* ty=Tensor[(1, 4, 7), float32] */;
  %366 = cast(%365, dtype="uint64") /* ty=Tensor[(1, 4, 7), uint64] */;
  %367 = cast(%var_7032, dtype="uint64") /* ty=Tensor[(2, 4, 7), uint64] */;
  %368 = erf(%349) /* ty=Tensor[(8, 7, 4), float32] */;
  %369 = %350.0;
  %370 = @func_5744(%353, %354) /* ty=Tensor[(7, 14, 16), int64] */;
  %371 = %355.1;
  %372 = @func_2539(%358, %359) /* ty=Tensor[(2, 10, 5), float64] */;
  %373 = add(%366, %367) /* ty=Tensor[(2, 4, 7), uint64] */;
  (%368, meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, %369, %370, meta[relay.Constant][19] /* ty=Tensor[(1568), int64] */, %371, %372, meta[relay.Constant][20] /* ty=Tensor[(100), float64] */, %373)
}

def @func_11191() -> Tensor[(13, 12, 4), uint8] {
  %374 = @func_6903() /* ty=(Tensor[(13, 12, 4), float64],) */;
  %375 = %374.0;
  %376 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 12, 4), float64] */, dtype="uint8") /* ty=Tensor[(13, 12, 4), uint8] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="uint8") /* ty=Tensor[(13, 12, 4), uint8] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_and(%378, %379) /* ty=Tensor[(13, 12, 4), uint8] */
}

def @func_4819() -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %380 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %381 = %380.1;
  %382 = @func_2845() /* ty=Tensor[(28), float32] */;
  (%381, %382)
}

def @func_10532(%var_10513: Tensor[(210), uint16]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(210), uint16]) {
  %383 = @func_9398() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), bool], Tensor[(110), float64]) */;
  %384 = @func_9997() /* ty=(Tensor[(28), float32], Tensor[(110), float64]) */;
  %385 = cast(%var_10513, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %386 = reshape(%385, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint16] */;
  %387 = @func_4052(%386) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(28), float32]) */;
  %388 = %383.0;
  %389 = %384.1;
  %390 = %387.1;
  (%388, %389, %390, %var_10513)
}

def @func_8793() -> (Tensor[(110), float64],) {
  %391 = @func_5587() /* ty=Tensor[(110), float64] */;
  (%391,)
}

def @func_6204() -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) {
  %392 = @func_3157() /* ty=(Tensor[(28), float32], float32) */;
  %393 = cast(meta[relay.Constant][22] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %394 = cast(meta[relay.Constant][23] /* ty=Tensor[(100, 1), float64] */, dtype="float64") /* ty=Tensor[(100, 1), float64] */;
  %395 = reshape(%393, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %396 = reshape(%394, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %397 = @func_3733(%395, %396) /* ty=(Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) */;
  %398 = @func_5600() /* ty=Tensor[(110), float64] */;
  %399 = @func_4249() /* ty=Tensor[(1, 4, 7), float32] */;
  %400 = %392.0;
  %401 = %397.3;
  (%398, %399, %400, %401, meta[relay.Constant][22] /* ty=Tensor[(624), float32] */, meta[relay.Constant][23] /* ty=Tensor[(100, 1), float64] */)
}

def @func_8977(%var_8906: Tensor[(9, 6, 1), float32]) -> (Tensor[(9, 6, ?), bool], Tensor[(9, 6, ?), bool]) {
  %402 = cast(%var_8906, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
  %403 = rsqrt(%402) /* ty=Tensor[(9, 6, 1), float32] */;
  %404 = cast(%var_8906, dtype="int32") /* ty=Tensor[(9, 6, 1), int32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="int32") /* ty=Tensor[(9, 6, 1), int32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %408 = add(%406, %407) /* ty=Tensor[(9, 6, ?), int32] */;
  %409 = cast(%403, dtype="uint8") /* ty=Tensor[(9, 6, 1), uint8] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="uint8") /* ty=Tensor[(9, 6, ?), uint8] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %413 = bitwise_xor(%411, %412) /* ty=Tensor[(9, 6, ?), uint8] */;
  %414 = cast(%403, dtype="bool") /* ty=Tensor[(9, 6, 1), bool] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="bool") /* ty=Tensor[(9, 6, ?), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = cast(%408, dtype="float32") /* ty=Tensor[(9, 6, ?), float32] */;
  %419 = log2(%418) /* ty=Tensor[(9, 6, ?), float32] */;
  %420 = cast(%408, dtype="uint16") /* ty=Tensor[(9, 6, ?), uint16] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="uint16") /* ty=Tensor[(9, 6, ?), uint16] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %424 = right_shift(%422, %423) /* ty=Tensor[(9, 6, ?), uint16] */;
  %425 = cast(%419, dtype="bool") /* ty=Tensor[(9, 6, ?), bool] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="bool") /* ty=Tensor[(9, 6, ?), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = equal(%416, %417) /* ty=Tensor[(9, 6, ?), bool] */;
  %430 = greater(%427, %428) /* ty=Tensor[(9, 6, ?), bool] */;
  (%429, %430)
}

def @func_3803() -> (Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
  %431 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %432 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %435 = @func_3544() /* ty=Tensor[(28), float32] */;
  %436 = %431.0;
  %437 = log2(%434) /* ty=Tensor[(1, 4, 7), float32] */;
  (%435, %436, %437)
}

def @func_5171() -> Tensor[(1, 4, 7), float32] {
  @func_4249() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_2160(%var_2157: Tensor[(2, 6, 12), float32]) -> Tensor[(2, 6, 12), float32] {
  %438 = cast(%var_2157, dtype="float32") /* ty=Tensor[(2, 6, 12), float32] */;
  rsqrt(%438) /* ty=Tensor[(2, 6, 12), float32] */
}

def @func_9997() -> (Tensor[(28), float32], Tensor[(110), float64]) {
  %439 = @func_8793() /* ty=(Tensor[(110), float64],) */;
  %440 = @func_5406() /* ty=Tensor[(28), float32] */;
  %441 = %439.0;
  (%440, %441)
}

def @func_7341() -> (Tensor[(110), float64], float32, float32, Tensor[(1, 4, 7), float32]) {
  %442 = @func_4792() /* ty=(Tensor[(110), float64],) */;
  %443 = cast(3.6874f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %444 = reshape(%443, newshape=[]) /* ty=float32 */;
  %445 = @func_4168(%444) /* ty=(Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) */;
  %446 = @func_3947() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) */;
  %447 = %442.0;
  %448 = %445.7;
  %449 = %446.1;
  (%447, %448, 3.6874f /* ty=float32 */, %449)
}

def @func_2512() -> (Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) {
  %450 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(15, 8, 3), float64] */;
  %453 = cast(4.83102f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %454 = cast(meta[relay.Constant][24] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %455 = reshape(%453, newshape=[]) /* ty=float64 */;
  %456 = reshape(%454, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %457 = @func_2062(%455, %456) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %458 = atanh(%452) /* ty=Tensor[(15, 8, 3), float64] */;
  %459 = %457.1;
  (%458, %459, 4.83102f64 /* ty=float64 */, meta[relay.Constant][24] /* ty=Tensor[(110), float64] */)
}

def @func_5180() -> Tensor[(1, 4, 7), float32] {
  %460 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %460.0
}

def @func_11222() -> (Tensor[(100), float64],) {
  %461 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %462 = %461.4;
  (%462,)
}

def @func_4372() -> (Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) {
  %463 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %464 = cast(meta[relay.Constant][25] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %465 = reshape(%464, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
  %466 = @func_2702(%465) /* ty=(Tensor[(13, 12, 4), float32],) */;
  %467 = %463.0;
  %468 = %466.0;
  (%467, %468, meta[relay.Constant][25] /* ty=Tensor[(624), float32] */)
}

def @func_9398() -> (Tensor[(1, 4, 7), float32], Tensor[(110), bool], Tensor[(110), float64]) {
  %469 = @func_6308() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %470 = cast(meta[relay.Constant][26] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %471 = reshape(%470, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %472 = @func_5895(%471) /* ty=(Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) */;
  %473 = %469.0;
  %474 = %472.0;
  (%473, %474, meta[relay.Constant][26] /* ty=Tensor[(110), float64] */)
}

def @func_2587(%var_2581: Tensor[(22, 5), float64]) -> (Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) {
  %475 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %476 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %477 = %476.2;
  %478 = cast(%477, dtype="float64") /* ty=float64 */;
  %479 = cast(%var_2581, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %480 = reshape(%478, newshape=[]) /* ty=float64 */;
  %481 = reshape(%479, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %482 = @func_2062(%480, %481) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %483 = %475.1;
  %484 = %482.3;
  (%483, %477, %484, %var_2581)
}

def @func_8696(%var_8687: Tensor[(16, 9, 12), int32]) -> (Tensor[(16, 9, 12), bool], Tensor[(16, 9, 12), bool]) {
  %485 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 9, 12), int32] */, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %486 = shape_of(%var_8687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%var_8687, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = cast(%var_8687, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %490 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(16, 9, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 9, 12), int32] */, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = less_equal(%487, %488) /* ty=Tensor[(16, 9, 12), bool] */;
  %494 = greater_equal(%491, %492) /* ty=Tensor[(16, 9, 12), bool] */;
  (%493, %494)
}

def @func_9659() -> (Tensor[(1, 4, 7), float32], Tensor[(110), int16], Tensor[(11, 10), float64], Tensor[(110), bool], Tensor[(100), float64], Tensor[(3, 2, 15), float32]) {
  %495 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %496 = reshape(%495, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %497 = @func_6063(%496) /* ty=(Tensor[(110), int16],) */;
  %498 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %500 = reshape(%498, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %501 = reshape(%499, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %502 = @func_3118(%500, %501) /* ty=(float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */;
  %503 = @func_9341() /* ty=(Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) */;
  %504 = @func_9263() /* ty=Tensor[(1, 4, 7), float32] */;
  %505 = %497.0;
  %506 = %502.1;
  %507 = %503.1;
  (%504, %505, meta[relay.Constant][28] /* ty=Tensor[(11, 10), float64] */, %506, meta[relay.Constant][29] /* ty=Tensor[(100), float64] */, %507)
}

def @func_10464() -> (Tensor[(22, 5), float64], float64, Tensor[(110), float32]) {
  %508 = @func_9157() /* ty=(Tensor[(22, 5), float64],) */;
  %509 = cast(8.29186f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %510 = reshape(%509, newshape=[]) /* ty=float64 */;
  %511 = @func_4781(%510) /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(110), float32] */;
  %514 = sin(%513) /* ty=Tensor[(110), float32] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(110), float32] */;
  %516 = %508.0;
  %517 = rsqrt(%515) /* ty=Tensor[(110), float32] */;
  (%516, 8.29186f64 /* ty=float64 */, %517)
}

def @func_3157() -> (Tensor[(28), float32], float32) {
  %518 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %519 = @func_2845() /* ty=Tensor[(28), float32] */;
  %520 = %518.2;
  (%519, %520)
}

def @func_11336() -> (Tensor[(100), float64],) {
  %521 = @func_11222() /* ty=(Tensor[(100), float64],) */;
  %522 = %521.0;
  (%522,)
}

def @func_11484() -> (Tensor[(110), float64],) {
  %523 = @func_8793() /* ty=(Tensor[(110), float64],) */;
  %524 = %523.0;
  (%524,)
}

def @func_4021() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  %525 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %526 = @func_2845() /* ty=Tensor[(28), float32] */;
  %527 = %525.1;
  (%526, %527)
}

def @func_4349() -> Tensor[(1, 4, 7), float32] {
  %528 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %528.0
}

def @func_7911() -> Tensor[(1, 4, 7), float32] {
  %529 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %529.1
}

def @func_3414(%var_3408: float64) -> (Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) {
  %530 = @func_3157() /* ty=(Tensor[(28), float32], float32) */;
  %531 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
  %532 = cast(%var_3408, dtype="float64") /* ty=float64 */;
  %533 = reshape(%531, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %534 = reshape(%532, newshape=[]) /* ty=float64 */;
  %535 = @func_2187(%533, %534) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %536 = @func_2845() /* ty=Tensor[(28), float32] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(28), float32] */;
  %538 = reshape(%537, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %539 = @func_1712(%538) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %540 = %530.0;
  %541 = %535.2;
  %542 = %539.3;
  (%540, %536, %541, meta[relay.Constant][30] /* ty=Tensor[(192), int16] */, %var_3408, %542)
}

def @func_10692() -> (Tensor[(110), float64], Tensor[(2, 10, 5), float32], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %543 = @func_9997() /* ty=(Tensor[(28), float32], Tensor[(110), float64]) */;
  %544 = cast(meta[relay.Constant][31] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %545 = reshape(%544, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %546 = @func_4333(%545) /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) */;
  %547 = @func_6308() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %548 = %543.1;
  %549 = %546.2;
  %550 = %547.0;
  %551 = @func_3544() /* ty=Tensor[(28), float32] */;
  (%548, %549, meta[relay.Constant][31] /* ty=Tensor[(100), float64] */, %550, %551)
}

def @func_3544() -> Tensor[(28), float32] {
  %552 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %552.3
}

def @func_3892() -> (Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) {
  %553 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %554 = cast(meta[relay.Constant][32] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %555 = cast(meta[relay.Constant][33] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %556 = reshape(%554, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %557 = reshape(%555, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %558 = @func_3118(%556, %557) /* ty=(float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */;
  %559 = %553.0;
  %560 = @func_3544() /* ty=Tensor[(28), float32] */;
  %561 = %558.4;
  (%559, %560, %561, meta[relay.Constant][32] /* ty=Tensor[(110), float64] */, meta[relay.Constant][33] /* ty=Tensor[(100), float64] */)
}

def @func_7430(%var_7406: Tensor[(1568), int64]) -> (Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(110), float64]) {
  %562 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %563 = cast(%var_7406, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %564 = cast(%var_7406, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %565 = reshape(%563, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %566 = reshape(%564, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %567 = @func_4792() /* ty=(Tensor[(110), float64],) */;
  %568 = %562.2;
  %569 = @func_5171() /* ty=Tensor[(1, 4, 7), float32] */;
  %570 = @func_5733() /* ty=Tensor[(110), float64] */;
  %571 = @func_5744(%565, %566) /* ty=Tensor[(7, 14, 16), int64] */;
  %572 = %567.0;
  (%568, %569, %570, %571, %var_7406, %572)
}

def @func_7730(%var_7706: Tensor[(11, 10), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float32], Tensor[(11, 10), float64], Tensor[(2197), float32]) {
  %573 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %574 = cast(%var_7706, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %575 = cast(meta[relay.Constant][34] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %576 = reshape(%574, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %577 = reshape(%575, newshape=[2197]) /* ty=Tensor[(2197), int32] */;
  %578 = @func_6432(%576, %577) /* ty=(Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %579 = cast(meta[relay.Constant][34] /* ty=Tensor[(2197), int32] */, dtype="float32") /* ty=Tensor[(2197), float32] */;
  %580 = rsqrt(%579) /* ty=Tensor[(2197), float32] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(2197), float32] */;
  %582 = %573.0;
  %583 = %578.0;
  %584 = acosh(%581) /* ty=Tensor[(2197), float32] */;
  (%582, %583, %var_7706, %584)
}

def @func_7612(%var_7609: Tensor[(8, 8, 1), float32]) -> Tensor[(8, 8, 1), float32] {
  %585 = cast(%var_7609, dtype="float32") /* ty=Tensor[(8, 8, 1), float32] */;
  rsqrt(%585) /* ty=Tensor[(8, 8, 1), float32] */
}

def @func_7307() -> (Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) {
  %586 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
  %587 = log10(%586) /* ty=Tensor[(3, 2, 15), float64] */;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
  %590 = log(%588) /* ty=Tensor[(3, 2, 15), float32] */;
  %591 = acosh(%589) /* ty=Tensor[(3, 2, 15), float64] */;
  (%590, %591)
}

def @func_10099() -> (Tensor[(6, 15, 2), float64],) {
  %592 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %593 = atanh(%592) /* ty=Tensor[(6, 15, 2), float64] */;
  (%593,)
}

def @func_6830() -> (Tensor[(28), float32], Tensor[(22, 5), float64]) {
  %594 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %595 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %596 = %594.1;
  %597 = %595.2;
  (%596, %597)
}

def @func_11059() -> (Tensor[(28), float32],) {
  %598 = @func_8347() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) */;
  %599 = %598.0;
  (%599,)
}

def @func_9225(%var_9210: Tensor[(13, 8, 8), float32], %var_9211: Tensor[(13, 8, 8), float32], %var_9220: Tensor[(110), float64]) -> (Tensor[(13, 8, 8), float32], Tensor[(2197), int32], Tensor[(110), float64]) {
  %600 = cast(%var_9211, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %601 = shape_of(%var_9210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_9210, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %604 = cast(%var_9220, dtype="float64") /* ty=Tensor[(110), float64] */;
  %605 = reshape(%604, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %606 = @func_5895(%605) /* ty=(Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) */;
  %607 = power(%602, %603) /* ty=Tensor[(13, 8, 8), float32] */;
  %608 = %606.4;
  (%607, %608, %var_9220)
}

def @func_4473(%var_4444: float64) -> (Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
  %609 = cast(%var_4444, dtype="float64") /* ty=float64 */;
  %610 = cast(meta[relay.Constant][37] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %611 = reshape(%609, newshape=[]) /* ty=float64 */;
  %612 = reshape(%610, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %613 = @func_2062(%611, %612) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %614 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %615 = @func_3544() /* ty=Tensor[(28), float32] */;
  %616 = %613.2;
  %617 = %614.0;
  (%615, %616, %var_4444, meta[relay.Constant][37] /* ty=Tensor[(110), float64] */, %617)
}

def @func_5600() -> Tensor[(110), float64] {
  %618 = @func_4792() /* ty=(Tensor[(110), float64],) */;
  %618.0
}

def @func_4792() -> (Tensor[(110), float64],) {
  %619 = @func_4372() /* ty=(Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) */;
  %620 = %619.0;
  (%620,)
}

def @func_11111(%var_11108: Tensor[(8, 15, 1), float32]) -> (Tensor[(8, 15, 1), float32],) {
  %621 = cast(%var_11108, dtype="float32") /* ty=Tensor[(8, 15, 1), float32] */;
  %622 = sinh(%621) /* ty=Tensor[(8, 15, 1), float32] */;
  (%622,)
}

def @func_4872() -> (Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) {
  %623 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %624 = cast(meta[relay.Constant][38] /* ty=Tensor[(110, 1), float64] */, dtype="float64") /* ty=Tensor[(110, 1), float64] */;
  %625 = reshape(%624, newshape=[22, 5]) /* ty=Tensor[(22, 5), float64] */;
  %626 = @func_2587(%625) /* ty=(Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) */;
  %627 = %626.3;
  %628 = cast(meta[relay.Constant][39] /* ty=Tensor[(22, 5), float64] */, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(2), int32] */;
  %630 = cast(%627, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %632 = %623.0;
  %633 = floor_divide(%630, %631) /* ty=Tensor[(22, 5), float64] */;
  (%632, meta[relay.Constant][38] /* ty=Tensor[(110, 1), float64] */, %633)
}

def @func_8347() -> (Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) {
  %634 = cast(meta[relay.Constant][40] /* ty=Tensor[(660, 1), float32] */, dtype="float32") /* ty=Tensor[(660, 1), float32] */;
  %635 = reshape(%634, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %636 = @func_3973(%635) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %637 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %638 = @func_7812() /* ty=Tensor[(28), float64] */;
  %639 = cast(%638, dtype="bool") /* ty=Tensor[(28), bool] */;
  %640 = cast(meta[relay.Constant][40] /* ty=Tensor[(660, 1), float32] */, dtype="bool") /* ty=Tensor[(660, 1), bool] */;
  %641 = @func_3544() /* ty=Tensor[(28), float32] */;
  %642 = cast(%641, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %643 = cast(meta[relay.Constant][40] /* ty=Tensor[(660, 1), float32] */, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
  %644 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %645 = cast(meta[relay.Constant][40] /* ty=Tensor[(660, 1), float32] */, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %646 = %636.1;
  %647 = %637.1;
  %648 = not_equal(%639, %640) /* ty=Tensor[(660, 28), bool] */;
  %649 = bitwise_or(%642, %643) /* ty=Tensor[(660, 28), uint16] */;
  %650 = %644.0;
  %651 = asinh(%645) /* ty=Tensor[(660, 1), float64] */;
  (%646, %647, %648, %649, %650, %651)
}

def @func_2565(%var_2544: Tensor[(13, 13, 13), int32], %var_2545: Tensor[(13, 13, 13), int32], %var_2552: Tensor[(28), float32]) -> (Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) {
  %652 = cast(%var_2545, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
  %653 = shape_of(%var_2544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_2544, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %656 = cast(%var_2552, dtype="float32") /* ty=Tensor[(28), float32] */;
  %657 = reshape(%656, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %658 = @func_1712(%657) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %659 = add(%654, %655) /* ty=Tensor[(13, 13, 13), int32] */;
  %660 = %658.2;
  (%659, %660, %var_2552)
}

def @func_6346(%var_6327: Tensor[(15, 6, 6), float64]) -> Tensor[(15, 6, 6), float64] {
  %661 = cast(%var_6327, dtype="float64") /* ty=Tensor[(15, 6, 6), float64] */;
  cos(%661) /* ty=Tensor[(15, 6, 6), float64] */
}

def @func_8667(%var_8662: Tensor[(110), float64]) -> (Tensor[(110), float32],) {
  %662 = @func_5600() /* ty=Tensor[(110), float64] */;
  %663 = cast(%var_8662, dtype="float32") /* ty=Tensor[(110), float32] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(1), int32] */;
  %665 = cast(%662, dtype="float32") /* ty=Tensor[(110), float32] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?), float32] */;
  %667 = divide(%665, %666) /* ty=Tensor[(110), float32] */;
  (%667,)
}

def @func_5612() -> (Tensor[(22, 5), float64],) {
  %668 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %669 = %668.2;
  (%669,)
}

def @func_4781(%var_4775: float64) -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) {
  %670 = @func_4372() /* ty=(Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) */;
  %671 = %670.0;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(110), float64] */;
  %673 = reshape(%672, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %674 = @func_3023(%673) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
  %675 = cast(%var_4775, dtype="float64") /* ty=float64 */;
  %676 = cast(%671, dtype="float64") /* ty=Tensor[(110), float64] */;
  %677 = reshape(%675, newshape=[]) /* ty=float64 */;
  %678 = reshape(%676, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %679 = @func_2062(%677, %678) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %680 = %674.0;
  %681 = %679.1;
  (%671, %680, %681, %var_4775)
}

def @func_10880() -> (Tensor[(110), float64],) {
  %682 = @func_8383() /* ty=Tensor[(110), float64] */;
  (%682,)
}

def @func_2062(%var_2043: float64, %var_2044: Tensor[(10, 1, 11), float64]) -> (Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  %683 = cast(%var_2043, dtype="float64") /* ty=float64 */;
  %684 = cast(%var_2044, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %685 = cast(%var_2043, dtype="float32") /* ty=float32 */;
  %686 = cast(meta[relay.Constant][41] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
  %687 = reshape(%685, newshape=[]) /* ty=float32 */;
  %688 = reshape(%686, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %689 = cast(meta[relay.Constant][41] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
  %690 = reshape(%689, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %691 = @func_1712(%690) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %692 = divide(%683, %684) /* ty=Tensor[(10, 1, 11), float64] */;
  %693 = @func_1598(%687, %688) /* ty=Tensor[(1, 4, 7), float32] */;
  %694 = %691.1;
  (%692, %693, meta[relay.Constant][41] /* ty=Tensor[(28), float32] */, %694)
}

def @func_11593() -> (Tensor[(1, 4, 7), float32], Tensor[(?, 110), float32], Tensor[(192), int16]) {
  %695 = cast(meta[relay.Constant][42] /* ty=Tensor[(22, 5), float64] */, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %696 = reshape(%695, newshape=[1, 110]) /* ty=Tensor[(1, 110), float64] */;
  %697 = @func_5349(%696) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(100), float64], Tensor[(2, 10, 5), float64], Tensor[(110), float64], Tensor[(1, 110), float64], Tensor[(1, 4, 7), bool], Tensor[(28), float64], Tensor[(1, 110), float64]) */;
  %698 = %697.7;
  %699 = cast(meta[relay.Constant][42] /* ty=Tensor[(22, 5), float64] */, dtype="float32") /* ty=Tensor[(22, 5), float32] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(2), int32] */;
  %701 = cast(%698, dtype="float32") /* ty=Tensor[(1, 110), float32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %703 = @func_8080() /* ty=(Tensor[(100), float64], Tensor[(192), int16], float64) */;
  %704 = @func_8179() /* ty=Tensor[(1, 4, 7), float32] */;
  %705 = power(%701, %702) /* ty=Tensor[(?, 110), float32] */;
  %706 = %703.1;
  (%704, %705, %706)
}

def @func_6903() -> (Tensor[(13, 12, 4), float64],) {
  %707 = @func_6143() /* ty=Tensor[(13, 12, 4), float64] */;
  (%707,)
}

def @func_5989(%var_5976: Tensor[(110, 2), float64]) -> (Tensor[(28), float32], Tensor[(110, 2), bool]) {
  %708 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %709 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %710 = %709.1;
  %711 = cast(%710, dtype="bool") /* ty=Tensor[(110, 1), bool] */;
  %712 = cast(%var_5976, dtype="bool") /* ty=Tensor[(110, 2), bool] */;
  %713 = %708.3;
  %714 = logical_and(%711, %712) /* ty=Tensor[(110, 2), bool] */;
  (%713, %714)
}

def @func_7511(%var_7498: Tensor[(9, 15, 11), float64]) -> (Tensor[(9, 15, 11), float64],) {
  %715 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %716 = shape_of(%var_7498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_7498, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %719 = floor_divide(%717, %718) /* ty=Tensor[(9, 15, 11), float64] */;
  (%719,)
}

def @func_6269() -> (Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) {
  %720 = @func_3947() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) */;
  %721 = cast(meta[relay.Constant][44] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %722 = reshape(%721, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint16] */;
  %723 = @func_4052(%722) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(28), float32]) */;
  %724 = @func_5406() /* ty=Tensor[(28), float32] */;
  %725 = %720.2;
  %726 = %723.1;
  (%724, %725, %726, meta[relay.Constant][44] /* ty=Tensor[(210), uint16] */)
}

def @func_7204() -> (Tensor[(28), float32], Tensor[(110), float64], Tensor[(22, 5), float64]) {
  %727 = @func_5455() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float32]) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(28), float32] */;
  %730 = reshape(%729, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %731 = @func_5024(%730) /* ty=(Tensor[(110), float64], Tensor[(?, 4, 7), uint64], Tensor[(110), float64], float64, Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %732 = @func_5612() /* ty=(Tensor[(22, 5), float64],) */;
  %733 = %732.0;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %735 = %731.2;
  %736 = tan(%734) /* ty=Tensor[(22, 5), float64] */;
  (%728, %735, %736)
}

def @func_10398() -> (Tensor[(1, 4, 7), float32],) {
  %737 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %738 = %737.0;
  (%738,)
}

def @func_9297() -> (Tensor[(28), float32],) {
  %739 = @func_8109() /* ty=(Tensor[(28), float32],) */;
  %740 = %739.0;
  (%740,)
}

def @func_5744(%var_5738: Tensor[(7, 14, 16), int64], %var_5739: Tensor[(7, 14, 16), int64]) -> Tensor[(7, 14, 16), int64] {
  %741 = cast(%var_5739, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %742 = shape_of(%var_5738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%var_5738, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%743, %744) /* ty=Tensor[(7, 14, 16), int64] */
}

def @func_6143() -> Tensor[(13, 12, 4), float64] {
  %745 = @func_4372() /* ty=(Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) */;
  %746 = %745.1;
  %747 = cast(meta[relay.Constant][45] /* ty=Tensor[(13, 12, 4), float32] */, dtype="float64") /* ty=Tensor[(13, 12, 4), float64] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="float64") /* ty=Tensor[(13, 12, 4), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%749, %750) /* ty=Tensor[(13, 12, 4), float64] */
}

def @func_11277() -> Tensor[(13, 12, 4), float64] {
  @func_9003() /* ty=Tensor[(13, 12, 4), float64] */
}

def @func_3390() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) {
  %751 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %752 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %753 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 100), float64] */, dtype="float64") /* ty=Tensor[(1, 100), float64] */;
  %754 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 100), float64] */, dtype="float64") /* ty=Tensor[(1, 100), float64] */;
  %755 = reshape(%753, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %756 = reshape(%754, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %757 = %751.3;
  %758 = %752.0;
  %759 = @func_2539(%755, %756) /* ty=Tensor[(2, 10, 5), float64] */;
  (%757, %758, %759, meta[relay.Constant][46] /* ty=Tensor[(1, 100), float64] */)
}

def @func_5733() -> Tensor[(110), float64] {
  %760 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %760.0
}

def @func_8236(%var_8224: float64) -> (Tensor[(110), float64], Tensor[(28), float32], float64, Tensor[(28), float32]) {
  %761 = @func_4792() /* ty=(Tensor[(110), float64],) */;
  %762 = cast(%var_8224, dtype="float64") /* ty=float64 */;
  %763 = reshape(%762, newshape=[]) /* ty=float64 */;
  %764 = @func_4473(%763) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
  %765 = %761.0;
  %766 = %764.1;
  %767 = @func_7162() /* ty=Tensor[(28), float32] */;
  (%765, %766, %var_8224, %767)
}

def @func_9251(%var_9244: Tensor[(8, 13, 2), float64]) -> (Tensor[(8, 13, 2), float64],) {
  %768 = cast(%var_9244, dtype="float64") /* ty=Tensor[(8, 13, 2), float64] */;
  %769 = asin(%768) /* ty=Tensor[(8, 13, 2), float64] */;
  (%769,)
}

def @func_7162() -> Tensor[(28), float32] {
  @func_3544() /* ty=Tensor[(28), float32] */
}

def @func_6656() -> (Tensor[(?, 4, 7), bool], Tensor[(28), float32], Tensor[(28), float32]) {
  %770 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %771 = %770.2;
  %772 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %773 = %772.0;
  %774 = cast(%773, dtype="bool") /* ty=Tensor[(28), bool] */;
  %775 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%771, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %778 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %779 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %780 = greater(%776, %777) /* ty=Tensor[(?, 4, 7), bool] */;
  %781 = %778.1;
  %782 = %779.1;
  (%780, %781, %782)
}

def @func_4168(%var_4166: float32) -> (Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) {
  %783 = @func_3544() /* ty=Tensor[(28), float32] */;
  %784 = cast(%783, dtype="float64") /* ty=Tensor[(28), float64] */;
  %785 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %786 = cast(meta[relay.Constant][47] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %787 = reshape(%786, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %788 = @func_3973(%787) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %789 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %790 = cast(meta[relay.Constant][47] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %791 = reshape(%790, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %792 = @func_3973(%791) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %793 = cast(%var_4166, dtype="float32") /* ty=float32 */;
  %794 = %788.1;
  %795 = cast(%794, dtype="float32") /* ty=Tensor[(28), float32] */;
  %796 = reshape(%793, newshape=[]) /* ty=float32 */;
  %797 = reshape(%795, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %798 = sigmoid(%784) /* ty=Tensor[(28), float64] */;
  %799 = %785.0;
  %800 = %789.0;
  %801 = %792.0;
  %802 = @func_1598(%796, %797) /* ty=Tensor[(1, 4, 7), float32] */;
  (%798, %799, %794, meta[relay.Constant][47] /* ty=Tensor[(660), float32] */, %800, %801, %802, %var_4166)
}

def @func_5406() -> Tensor[(28), float32] {
  %803 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %803.0
}

def @func_3287() -> (Tensor[(1, 4, 7), float32],) {
  %804 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %805 = %804.0;
  (%805,)
}

def @func_11398() -> Tensor[(28), float32] {
  %806 = @func_9297() /* ty=(Tensor[(28), float32],) */;
  %806.0
}

def @func_6038() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  %807 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %808 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %809 = %807.0;
  %810 = %808.0;
  (%809, %810)
}

def @func_2467() -> (Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) {
  %811 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 3), float64] */;
  %812 = cast(-6.60471f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %813 = cast(meta[relay.Constant][49] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
  %814 = reshape(%812, newshape=[]) /* ty=float32 */;
  %815 = reshape(%813, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %816 = sinh(%811) /* ty=Tensor[(15, 8, 3), float64] */;
  %817 = @func_1598(%814, %815) /* ty=Tensor[(1, 4, 7), float32] */;
  (%816, %817, -6.60471f /* ty=float32 */, meta[relay.Constant][49] /* ty=Tensor[(28), float32] */)
}

def @func_4052(%var_4042: Tensor[(15, 1, 14), uint16]) -> (Tensor[(15, 6, 14), bool], Tensor[(28), float32]) {
  %818 = cast(%var_4042, dtype="bool") /* ty=Tensor[(15, 1, 14), bool] */;
  %819 = cast(meta[relay.Constant][50] /* ty=Tensor[(15, 6, 14), uint16] */, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
  %820 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %821 = greater_equal(%818, %819) /* ty=Tensor[(15, 6, 14), bool] */;
  %822 = %820.0;
  (%821, %822)
}

def @func_10490(%var_10475: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 10), float64], Tensor[(11, 4, 7), uint32]) {
  %823 = @func_9659() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), int16], Tensor[(11, 10), float64], Tensor[(110), bool], Tensor[(100), float64], Tensor[(3, 2, 15), float32]) */;
  %824 = @func_5180() /* ty=Tensor[(1, 4, 7), float32] */;
  %825 = cast(%824, dtype="uint32") /* ty=Tensor[(1, 4, 7), uint32] */;
  %826 = cast(%var_10475, dtype="uint32") /* ty=Tensor[(11, 4, 7), uint32] */;
  %827 = %823.2;
  %828 = multiply(%825, %826) /* ty=Tensor[(11, 4, 7), uint32] */;
  (%827, %828)
}

def @func_7587(%var_7575: Tensor[(192), int16]) -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(192), int16], float64) {
  %829 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %830 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %831 = @func_5912() /* ty=(Tensor[(110), float64],) */;
  %832 = cast(%var_7575, dtype="int16") /* ty=Tensor[(192), int16] */;
  %833 = cast(-1.00242f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %834 = reshape(%832, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %835 = reshape(%833, newshape=[]) /* ty=float64 */;
  %836 = @func_2187(%834, %835) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %837 = %829.0;
  %838 = %830.0;
  %839 = %831.0;
  %840 = %836.1;
  (%837, %838, %839, %840, %var_7575, -1.00242f64 /* ty=float64 */)
}

def @func_9127() -> (Tensor[(1, 4, 7), float32],) {
  %841 = @func_4349() /* ty=Tensor[(1, 4, 7), float32] */;
  (%841,)
}

def @func_11146() -> (float32, Tensor[(28), float32]) {
  %842 = @func_7341() /* ty=(Tensor[(110), float64], float32, float32, Tensor[(1, 4, 7), float32]) */;
  %843 = %842.1;
  %844 = @func_5406() /* ty=Tensor[(28), float32] */;
  (%843, %844)
}

def @func_3023(%var_2979: Tensor[(110), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) {
  %845 = cast(7.79112f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %846 = cast(%var_2979, dtype="float64") /* ty=Tensor[(110), float64] */;
  %847 = reshape(%845, newshape=[]) /* ty=float64 */;
  %848 = reshape(%846, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %849 = @func_2062(%847, %848) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %850 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %851 = %850.0;
  %852 = cast(%851, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %853 = cast(7.79112f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %854 = cast(%851, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
  %855 = %849.1;
  %856 = sigmoid(%852) /* ty=Tensor[(1, 4, 7), float32] */;
  %857 = logical_or(%853, %854) /* ty=Tensor[(1, 4, 7), bool] */;
  (%855, %var_2979, %856, %857)
}

def @func_6115() -> (Tensor[(1, 4, 7), float32],) {
  %858 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %859 = %858.0;
  (%859,)
}

def @func_8473(%var_8462: Tensor[(22, 5), float64]) -> (Tensor[(28), float32], float64, Tensor[(22, 5), float64]) {
  %860 = @func_6830() /* ty=(Tensor[(28), float32], Tensor[(22, 5), float64]) */;
  %861 = cast(%var_8462, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %862 = reshape(%861, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %863 = @func_5895(%862) /* ty=(Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) */;
  %864 = %860.0;
  %865 = %863.2;
  (%864, %865, %var_8462)
}

def @func_10553() -> (Tensor[(210), uint16],) {
  %866 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
  %867 = %866.3;
  (%867,)
}

def @func_10960() -> Tensor[(1, 4, 7), float32] {
  %868 = @func_10398() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %868.0
}

def @func_5349(%var_5312: Tensor[(1, 110), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(100), float64], Tensor[(2, 10, 5), float64], Tensor[(110), float64], Tensor[(1, 110), float64], Tensor[(1, 4, 7), bool], Tensor[(28), float64], Tensor[(1, 110), float64]) {
  %869 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %870 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
  %871 = cast(%var_5312, dtype="float64") /* ty=Tensor[(1, 110), float64] */;
  %872 = reshape(%871, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %873 = @func_3023(%872) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
  %874 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %875 = %874.2;
  %876 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %877 = %876.0;
  %878 = cast(%875, dtype="bool") /* ty=bool */;
  %879 = cast(%877, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
  %880 = cast(%875, dtype="float32") /* ty=float32 */;
  %881 = reshape(%880, newshape=[]) /* ty=float32 */;
  %882 = @func_4168(%881) /* ty=(Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) */;
  %883 = @func_3947() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) */;
  %884 = @func_4349() /* ty=Tensor[(1, 4, 7), float32] */;
  %885 = %869.4;
  %886 = %870.2;
  %887 = %873.1;
  %888 = logical_and(%878, %879) /* ty=Tensor[(1, 4, 7), bool] */;
  %889 = %882.0;
  %890 = %883.3;
  (%884, %885, %886, %887, %var_5312, %888, %889, %890)
}

def @func_9864(%var_9768: Tensor[(110), float64], %var_9782: Tensor[(100), float64], %var_9796: float64) -> (Tensor[(110), float64], Tensor[(100), float64], Tensor[(594), float32], Tensor[(2197), int32], Tensor[(100), float64], Tensor[(110), float32], Tensor[(110, 6), float32], Tensor[(660), float32], float64, Tensor[(110), bool], Tensor[(28), float32]) {
  %891 = @func_8793() /* ty=(Tensor[(110), float64],) */;
  %892 = %891.0;
  %893 = cast(%var_9768, dtype="float64") /* ty=Tensor[(110), float64] */;
  %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(1), int32] */;
  %895 = cast(%892, dtype="float64") /* ty=Tensor[(110), float64] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?), float64] */;
  %897 = cast(meta[relay.Constant][51] /* ty=Tensor[(594), float32] */, dtype="float32") /* ty=Tensor[(594), float32] */;
  %898 = cast(meta[relay.Constant][52] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %899 = cast(%var_9782, dtype="float64") /* ty=Tensor[(100), float64] */;
  %900 = reshape(%897, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float32] */;
  %901 = reshape(%898, newshape=[2197]) /* ty=Tensor[(2197), int32] */;
  %902 = reshape(%899, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %903 = @func_6713(%900, %901, %902) /* ty=(Tensor[(11, 6, 9), float32], Tensor[(210), uint16], Tensor[(110), float64], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) */;
  %904 = cast(%892, dtype="float32") /* ty=Tensor[(110), float32] */;
  %905 = cast(meta[relay.Constant][53] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
  %906 = cast(%var_9796, dtype="float64") /* ty=float64 */;
  %907 = reshape(%905, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
  %908 = reshape(%906, newshape=[]) /* ty=float64 */;
  %909 = @func_8857(%907, %908) /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(110, 6), float32], float64) */;
  %910 = cast(%var_9768, dtype="float64") /* ty=Tensor[(110), float64] */;
  %911 = atanh(%904) /* ty=Tensor[(110), float32] */;
  %912 = cast(%911, dtype="float32") /* ty=Tensor[(110), float32] */;
  %913 = reshape(%910, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %914 = reshape(%912, newshape=[110]) /* ty=Tensor[(110), float32] */;
  %915 = @func_9546(%913, %914) /* ty=(Tensor[(28), float32], Tensor[(110), uint32], Tensor[(110), bool]) */;
  %916 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %917 = mod(%895, %896) /* ty=Tensor[(110), float64] */;
  %918 = %903.8;
  %919 = %909.2;
  %920 = %915.2;
  %921 = %916.0;
  (%917, %918, meta[relay.Constant][51] /* ty=Tensor[(594), float32] */, meta[relay.Constant][52] /* ty=Tensor[(2197), int32] */, %var_9782, %911, %919, meta[relay.Constant][53] /* ty=Tensor[(660), float32] */, %var_9796, %920, %921)
}

def @func_8383() -> Tensor[(110), float64] {
  %922 = @func_5912() /* ty=(Tensor[(110), float64],) */;
  %922.0
}

def @func_2945() -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %923 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %924 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %925 = %923.0;
  %926 = %924.3;
  (%925, %926)
}

def @func_5802(%var_5800: Tensor[(144), float32]) -> (Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float32], Tensor[(144), float32]) {
  %927 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %928 = cast(%var_5800, dtype="float32") /* ty=Tensor[(144), float32] */;
  %929 = reshape(%928, newshape=[2, 6, 12]) /* ty=Tensor[(2, 6, 12), float32] */;
  %930 = %927.0;
  %931 = @func_2160(%929) /* ty=Tensor[(2, 6, 12), float32] */;
  (%930, %931, %var_5800)
}

def @main(%var_11997: Tensor[(15, 15, 4), uint32]) -> (Tensor[(15, 15, 4), uint32], Tensor[(15, 15, 4), uint64]) {
  %932 = cast(%var_11997, dtype="uint32") /* ty=Tensor[(15, 15, 4), uint32] */;
  %933 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(15, 15, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %934 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 15, 4), uint32] */, dtype="uint32") /* ty=Tensor[(15, 15, 4), uint32] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %936 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 15, 4), uint32] */, dtype="uint64") /* ty=Tensor[(15, 15, 4), uint64] */;
  %937 = shape_of(%var_11997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%var_11997, dtype="uint64") /* ty=Tensor[(15, 15, 4), uint64] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %940 = multiply(%934, %935) /* ty=Tensor[(15, 15, 4), uint32] */;
  %941 = subtract(%938, %939) /* ty=Tensor[(15, 15, 4), uint64] */;
  (%940, %941)
}

def @func_9921() -> (Tensor[(28), float32],) {
  %942 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %943 = %942.0;
  (%943,)
}

def @func_11702() -> Tensor[(28), float32] {
  %944 = @func_11146() /* ty=(float32, Tensor[(28), float32]) */;
  %944.1
}

def @func_8801() -> (Tensor[(660, 28), uint16],) {
  %945 = @func_8347() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) */;
  %946 = %945.3;
  (%946,)
}

def @func_7671(%var_7657: Tensor[(110), float64], %var_7667: float64) -> (Tensor[(110), float64], Tensor[(192), int16], float64) {
  %947 = @func_7204() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(22, 5), float64]) */;
  %948 = %947.1;
  %949 = cast(%var_7657, dtype="float64") /* ty=Tensor[(110), float64] */;
  %950 = shape_of(%948, dtype="int32") /* ty=Tensor[(1), int32] */;
  %951 = cast(%948, dtype="float64") /* ty=Tensor[(110), float64] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?), float64] */;
  %953 = cast(%var_7667, dtype="float64") /* ty=float64 */;
  %954 = reshape(%953, newshape=[]) /* ty=float64 */;
  %955 = @func_3414(%954) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) */;
  %956 = power(%951, %952) /* ty=Tensor[(110), float64] */;
  %957 = %955.3;
  (%956, %957, %var_7667)
}

def @func_8034() -> (Tensor[(110), float64],) {
  %958 = @func_3803() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
  %959 = %958.1;
  (%959,)
}

def @func_9157() -> (Tensor[(22, 5), float64],) {
  %960 = @func_6830() /* ty=(Tensor[(28), float32], Tensor[(22, 5), float64]) */;
  %961 = %960.1;
  (%961,)
}

def @func_10081(%var_10065: Tensor[(11, 2, 10), uint8]) -> Tensor[(11, 2, 10), bool] {
  %962 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 2, 10), uint8] */, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %963 = shape_of(%var_10065, dtype="int32") /* ty=Tensor[(3), int32] */;
  %964 = cast(%var_10065, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%964, %965) /* ty=Tensor[(11, 2, 10), bool] */
}

def @func_2702(%var_2697: Tensor[(13, 12, 4), float32]) -> (Tensor[(13, 12, 4), float32],) {
  %966 = cast(%var_2697, dtype="float32") /* ty=Tensor[(13, 12, 4), float32] */;
  %967 = sinh(%966) /* ty=Tensor[(13, 12, 4), float32] */;
  (%967,)
}

def @func_7467() -> (Tensor[(28), float32],) {
  %968 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
  %969 = %968.2;
  (%969,)
}

def @func_5455() -> (Tensor[(28), float32], Tensor[(110, 1), float32]) {
  %970 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %971 = %970.1;
  %972 = cast(%971, dtype="float32") /* ty=Tensor[(110, 1), float32] */;
  %973 = @func_2845() /* ty=Tensor[(28), float32] */;
  %974 = sigmoid(%972) /* ty=Tensor[(110, 1), float32] */;
  (%973, %974)
}

def @func_9546(%var_9506: Tensor[(110), float64], %var_9539: Tensor[(110), float32]) -> (Tensor[(28), float32], Tensor[(110), uint32], Tensor[(110), bool]) {
  %975 = @func_8439() /* ty=(Tensor[(28), float32],) */;
  %976 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %977 = %976.0;
  %978 = cast(%var_9506, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(1), int32] */;
  %980 = cast(%977, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %982 = cast(%977, dtype="float32") /* ty=Tensor[(110), float32] */;
  %983 = acos(%982) /* ty=Tensor[(110), float32] */;
  %984 = cast(%var_9539, dtype="bool") /* ty=Tensor[(110), bool] */;
  %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(1), int32] */;
  %986 = cast(%983, dtype="bool") /* ty=Tensor[(110), bool] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?), bool] */;
  %988 = %975.0;
  %989 = logical_xor(%980, %981) /* ty=Tensor[(110), uint32] */;
  %990 = logical_and(%986, %987) /* ty=Tensor[(110), bool] */;
  (%988, %989, %990)
}

def @func_8146() -> (Tensor[(28), float32], Tensor[(3, 2, 15), float32]) {
  %991 = @func_3803() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
  %992 = @func_7759() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(28), float32]) */;
  %993 = %991.0;
  %994 = %992.0;
  (%993, %994)
}

def @func_2920() -> (Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) {
  %995 = cast(meta[relay.Constant][56] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
  %996 = cast(0.124844f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %997 = reshape(%995, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %998 = reshape(%996, newshape=[]) /* ty=float64 */;
  %999 = @func_2187(%997, %998) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %1000 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %1001 = %1000.0;
  %1002 = cast(%1001, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %1003 = reshape(%1002, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %1004 = @func_1712(%1003) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %1005 = cast(%1001, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
  %1006 = acos(%1005) /* ty=Tensor[(1, 4, 7), float64] */;
  %1007 = cast(%1001, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1009 = cast(%1006, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1011 = %999.3;
  %1012 = %1004.3;
  %1013 = @func_2845() /* ty=Tensor[(28), float32] */;
  %1014 = floor_divide(%1009, %1010) /* ty=Tensor[(?, 4, 7), float32] */;
  (%1011, meta[relay.Constant][56] /* ty=Tensor[(192), int16] */, 0.124844f64 /* ty=float64 */, %1012, %1013, %1014)
}

def @func_3118(%var_3080: Tensor[(110), float64], %var_3095: Tensor[(100), float64]) -> (float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) {
  %1015 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %1016 = cast(%var_3080, dtype="bool") /* ty=Tensor[(110), bool] */;
  %1017 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(110), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1018 = cast(meta[relay.Constant][57] /* ty=Tensor[(110), float64] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1020 = cast(%var_3095, dtype="float64") /* ty=Tensor[(100), float64] */;
  %1021 = cast(%var_3095, dtype="float64") /* ty=Tensor[(100), float64] */;
  %1022 = reshape(%1020, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %1023 = reshape(%1021, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %1024 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %1025 = %1015.2;
  %1026 = cast(%1025, dtype="float64") /* ty=float64 */;
  %1027 = cast(meta[relay.Constant][57] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %1028 = reshape(%1026, newshape=[]) /* ty=float64 */;
  %1029 = reshape(%1027, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %1030 = @func_2062(%1028, %1029) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %1031 = %1030.3;
  %1032 = cast(%1031, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %1033 = equal(%1018, %1019) /* ty=Tensor[(110), bool] */;
  %1034 = @func_2539(%1022, %1023) /* ty=Tensor[(2, 10, 5), float64] */;
  %1035 = %1024.1;
  %1036 = tan(%1032) /* ty=Tensor[(1, 4, 7), float32] */;
  (%1025, %1033, %1034, %var_3095, %1035, %1036)
}

def @func_8611() -> (Tensor[(1, 4, 7), float32], Tensor[(10, 1, 11), float64], float64, Tensor[(110), float64]) {
  %1037 = @func_6038() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %1038 = %1037.1;
  %1039 = cast(%1038, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %1040 = cast(0.170316f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1041 = cast(meta[relay.Constant][58] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %1042 = reshape(%1040, newshape=[]) /* ty=float64 */;
  %1043 = reshape(%1041, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %1044 = @func_2062(%1042, %1043) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %1045 = atan(%1039) /* ty=Tensor[(1, 4, 7), float32] */;
  %1046 = %1044.0;
  (%1045, %1046, 0.170316f64 /* ty=float64 */, meta[relay.Constant][58] /* ty=Tensor[(110), float64] */)
}

def @func_11668() -> Tensor[(28), float32] {
  %1047 = @func_4489() /* ty=(Tensor[(28), float32],) */;
  %1047.0
}

def @func_4249() -> Tensor[(1, 4, 7), float32] {
  %1048 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %1048.2
}

def @func_6713(%var_6664: Tensor[(11, 6, 9), float32], %var_6685: Tensor[(2197), int32], %var_6700: Tensor[(100), float64]) -> (Tensor[(11, 6, 9), float32], Tensor[(210), uint16], Tensor[(110), float64], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) {
  %1049 = cast(%var_6664, dtype="float32") /* ty=Tensor[(11, 6, 9), float32] */;
  %1050 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
  %1051 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %1052 = %1051.0;
  %1053 = cast(%1052, dtype="float64") /* ty=Tensor[(110), float64] */;
  %1054 = cast(%var_6685, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %1055 = reshape(%1053, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %1056 = reshape(%1054, newshape=[2197]) /* ty=Tensor[(2197), int32] */;
  %1057 = @func_6432(%1055, %1056) /* ty=(Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %1058 = %1050.3;
  %1059 = cast(%1058, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %1060 = reshape(%1059, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint16] */;
  %1061 = @func_4052(%1060) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(28), float32]) */;
  %1062 = @func_3157() /* ty=(Tensor[(28), float32], float32) */;
  %1063 = cast(%var_6700, dtype="float64") /* ty=Tensor[(100), float64] */;
  %1064 = reshape(%1063, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %1065 = @func_4038(%1064) /* ty=(Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) */;
  %1066 = cosh(%1049) /* ty=Tensor[(11, 6, 9), float32] */;
  %1067 = %1057.1;
  %1068 = %1061.1;
  %1069 = %1062.0;
  %1070 = %1065.1;
  (%1066, %1058, %1052, %1067, %var_6685, %1068, %1069, %1070, %var_6700)
}

def @func_7901() -> (Tensor[(22, 5), float64],) {
  %1071 = @func_5612() /* ty=(Tensor[(22, 5), float64],) */;
  %1072 = %1071.0;
  (%1072,)
}

def @func_5587() -> Tensor[(110), float64] {
  %1073 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %1073.3
}

def @func_8109() -> (Tensor[(28), float32],) {
  %1074 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %1075 = %1074.1;
  (%1075,)
}

def @func_11633() -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(110), float64]) {
  %1076 = @func_6204() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) */;
  %1077 = @func_8439() /* ty=(Tensor[(28), float32],) */;
  %1078 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %1079 = @func_8179() /* ty=Tensor[(1, 4, 7), float32] */;
  %1080 = %1076.0;
  %1081 = %1077.0;
  %1082 = %1078.0;
  (%1079, %1080, %1081, %1082)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7467() -> (Tensor[(28), float32],) {
  %0 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
  %1 = %0.2;
  (%1,)
}

def @func_11704() -> Tensor[(28), float32] {
  @func_11702() /* ty=Tensor[(28), float32] */
}

def @func_9659() -> (Tensor[(1, 4, 7), float32], Tensor[(110), int16], Tensor[(11, 10), float64], Tensor[(110), bool], Tensor[(100), float64], Tensor[(3, 2, 15), float32]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %3 = reshape(%2, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %4 = @func_6063(%3) /* ty=(Tensor[(110), int16],) */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %7 = reshape(%5, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %8 = reshape(%6, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %9 = @func_3118(%7, %8) /* ty=(float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */;
  %10 = @func_9341() /* ty=(Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) */;
  %11 = @func_9263() /* ty=Tensor[(1, 4, 7), float32] */;
  %12 = %4.0;
  %13 = %9.1;
  %14 = %10.1;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(11, 10), float64] */, %13, meta[relay.Constant][1] /* ty=Tensor[(100), float64] */, %14)
}

def @func_8181() -> Tensor[(1, 4, 7), float32] {
  @func_8179() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_3025(%var_3024: Tensor[(110), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) {
  %28 = fn (%var_2979: Tensor[(110), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) {
    %15 = cast(7.79112f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %16 = cast(%var_2979, dtype="float64") /* ty=Tensor[(110), float64] */;
    %17 = reshape(%15, newshape=[]) /* ty=float64 */;
    %18 = reshape(%16, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
    %19 = @func_2062(%17, %18) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %20 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %21 = %20.0;
    %22 = cast(%21, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
    %23 = cast(7.79112f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %24 = cast(%21, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
    %25 = %19.1;
    %26 = sigmoid(%22) /* ty=Tensor[(1, 4, 7), float32] */;
    %27 = logical_or(%23, %24) /* ty=Tensor[(1, 4, 7), bool] */;
    (%25, %var_2979, %26, %27)
  };
  %28(%var_3024) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */
}

def @func_2160(%var_2157: Tensor[(2, 6, 12), float32]) -> Tensor[(2, 6, 12), float32] {
  %29 = cast(%var_2157, dtype="float32") /* ty=Tensor[(2, 6, 12), float32] */;
  rsqrt(%29) /* ty=Tensor[(2, 6, 12), float32] */
}

def @func_10342() -> (Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) {
  %33 = fn () -> (Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) {
    %30 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %31 = %30.0;
    %32 = @func_5171() /* ty=Tensor[(1, 4, 7), float32] */;
    (%31, %32)
  };
  %33() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */
}

def @func_8034() -> (Tensor[(110), float64],) {
  %34 = @func_3803() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
  %35 = %34.1;
  (%35,)
}

def @func_2542(%var_2540: Tensor[(2, 10, 5), float64], %var_2541: Tensor[(2, 10, 5), float64]) -> Tensor[(2, 10, 5), float64] {
  %40 = fn (%var_2531: Tensor[(2, 10, 5), float64], %var_2532: Tensor[(2, 10, 5), float64]) -> Tensor[(2, 10, 5), float64] {
    %36 = cast(%var_2532, dtype="float64") /* ty=Tensor[(2, 10, 5), float64] */;
    %37 = shape_of(%var_2531, dtype="int32") /* ty=Tensor[(3), int32] */;
    %38 = cast(%var_2531, dtype="float64") /* ty=Tensor[(2, 10, 5), float64] */;
    %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%38, %39) /* ty=Tensor[(2, 10, 5), float64] */
  };
  %40(%var_2540, %var_2541) /* ty=Tensor[(2, 10, 5), float64] */
}

def @func_6206() -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) {
  @func_6204() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) */
}

def @func_7048(%var_7046: Tensor[(8, 7, 4), float32], %var_7047: Tensor[(2, 4, 7), float32]) -> (Tensor[(8, 7, 4), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(2, 4, 7), uint64]) {
  @func_7044(%var_7046, %var_7047) /* ty=(Tensor[(8, 7, 4), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(2, 4, 7), uint64]) */
}

def @func_3545() -> Tensor[(28), float32] {
  %42 = fn () -> Tensor[(28), float32] {
    %41 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %41.3
  };
  %42() /* ty=Tensor[(28), float32] */
}

def @func_7590(%var_7588: Tensor[(192), int16]) -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(192), int16], float64) {
  @func_7587(%var_7588) /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(192), int16], float64) */
}

def @func_4373() -> (Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) {
  %49 = fn () -> (Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) {
    %43 = @func_3639() /* ty=(Tensor[(110), float64],) */;
    %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %45 = reshape(%44, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
    %46 = @func_2702(%45) /* ty=(Tensor[(13, 12, 4), float32],) */;
    %47 = %43.0;
    %48 = %46.0;
    (%47, %48, meta[relay.Constant][2] /* ty=Tensor[(624), float32] */)
  };
  %49() /* ty=(Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) */
}

def @func_5913() -> (Tensor[(110), float64],) {
  %51 = fn () -> (Tensor[(110), float64],) {
    %50 = @func_5733() /* ty=Tensor[(110), float64] */;
    (%50,)
  };
  %51() /* ty=(Tensor[(110), float64],) */
}

def @func_10961() -> Tensor[(1, 4, 7), float32] {
  %53 = fn () -> Tensor[(1, 4, 7), float32] {
    %52 = @func_10398() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %52.0
  };
  %53() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_5180() -> Tensor[(1, 4, 7), float32] {
  %54 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %54.0
}

def @func_11702() -> Tensor[(28), float32] {
  %55 = @func_11146() /* ty=(float32, Tensor[(28), float32]) */;
  %55.1
}

def @func_9732() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], float32) {
  %56 = @func_8109() /* ty=(Tensor[(28), float32],) */;
  %57 = cast(9.62769f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %58 = %56.0;
  %59 = cast(%58, dtype="float32") /* ty=Tensor[(28), float32] */;
  %60 = reshape(%57, newshape=[]) /* ty=float32 */;
  %61 = reshape(%59, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %62 = @func_1598(%60, %61) /* ty=Tensor[(1, 4, 7), float32] */;
  (%58, %62, 9.62769f /* ty=float32 */)
}

def @func_11796(%var_11781: Tensor[(22, 5), float64]) -> Tensor[(22, 5), float32] {
  %63 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %64 = %63.2;
  %65 = cast(%var_11781, dtype="float32") /* ty=Tensor[(22, 5), float32] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(2), int32] */;
  %67 = cast(%64, dtype="float32") /* ty=Tensor[(22, 5), float32] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  divide(%67, %68) /* ty=Tensor[(22, 5), float32] */
}

def @func_4873() -> (Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) {
  %80 = fn () -> (Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) {
    %69 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(110, 1), float64] */, dtype="float64") /* ty=Tensor[(110, 1), float64] */;
    %71 = reshape(%70, newshape=[22, 5]) /* ty=Tensor[(22, 5), float64] */;
    %72 = @func_2587(%71) /* ty=(Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) */;
    %73 = %72.3;
    %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(22, 5), float64] */, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
    %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(2), int32] */;
    %76 = cast(%73, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %78 = %69.0;
    %79 = floor_divide(%76, %77) /* ty=Tensor[(22, 5), float64] */;
    (%78, meta[relay.Constant][3] /* ty=Tensor[(110, 1), float64] */, %79)
  };
  %80() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */
}

def @func_8670(%var_8668: Tensor[(110), float64]) -> (Tensor[(110), float32],) {
  @func_8667(%var_8668) /* ty=(Tensor[(110), float32],) */
}

def @func_8441() -> (Tensor[(28), float32],) {
  @func_8439() /* ty=(Tensor[(28), float32],) */
}

def @func_9450(%var_9448: Tensor[(2, 96), int16], %var_9449: float64) -> (Tensor[(1, 4, 7), float32], Tensor[(4, 4, 12), int16], Tensor[(2, 96), int16], float64) {
  @func_9446(%var_9448, %var_9449) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(4, 4, 12), int16], Tensor[(2, 96), int16], float64) */
}

def @func_11113(%var_11112: Tensor[(8, 15, 1), float32]) -> (Tensor[(8, 15, 1), float32],) {
  %83 = fn (%var_11108: Tensor[(8, 15, 1), float32]) -> (Tensor[(8, 15, 1), float32],) {
    %81 = cast(%var_11108, dtype="float32") /* ty=Tensor[(8, 15, 1), float32] */;
    %82 = sinh(%81) /* ty=Tensor[(8, 15, 1), float32] */;
    (%82,)
  };
  %83(%var_11112) /* ty=(Tensor[(8, 15, 1), float32],) */
}

def @func_6904() -> (Tensor[(13, 12, 4), float64],) {
  %85 = fn () -> (Tensor[(13, 12, 4), float64],) {
    %84 = @func_6143() /* ty=Tensor[(13, 12, 4), float64] */;
    (%84,)
  };
  %85() /* ty=(Tensor[(13, 12, 4), float64],) */
}

def @func_11944(%var_11904: Tensor[(10, 13, 6), uint64], %var_11911: Tensor[(10, 13, 6), uint64], %var_11937: Tensor[(660), float32]) -> (Tensor[(10, 13, 6), uint64], Tensor[(10, 13, 6), bool], Tensor[(28), float32], Tensor[(660), float32], Tensor[(28), float64]) {
  %86 = cast(%var_11904, dtype="uint64") /* ty=Tensor[(10, 13, 6), uint64] */;
  %87 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 13, 6), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 13, 6), uint64] */, dtype="uint64") /* ty=Tensor[(10, 13, 6), uint64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %90 = cast(%var_11911, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
  %91 = shape_of(%var_11904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%var_11904, dtype="bool") /* ty=Tensor[(10, 13, 6), bool] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %94 = cast(%var_11937, dtype="float32") /* ty=Tensor[(660), float32] */;
  %95 = reshape(%94, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %96 = @func_3973(%95) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %97 = bitwise_xor(%88, %89) /* ty=Tensor[(10, 13, 6), uint64] */;
  %98 = not_equal(%92, %93) /* ty=Tensor[(10, 13, 6), bool] */;
  %99 = %96.1;
  %100 = @func_7812() /* ty=Tensor[(28), float64] */;
  (%97, %98, %99, %var_11937, %100)
}

def @func_10084(%var_10082: Tensor[(11, 2, 10), uint8]) -> Tensor[(11, 2, 10), bool] {
  @func_10081(%var_10082) /* ty=Tensor[(11, 2, 10), bool] */
}

def @func_2589(%var_2588: Tensor[(22, 5), float64]) -> (Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) {
  %111 = fn (%var_2581: Tensor[(22, 5), float64]) -> (Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) {
    %101 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
    %102 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %103 = %102.2;
    %104 = cast(%103, dtype="float64") /* ty=float64 */;
    %105 = cast(%var_2581, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
    %106 = reshape(%104, newshape=[]) /* ty=float64 */;
    %107 = reshape(%105, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
    %108 = @func_2062(%106, %107) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %109 = %101.1;
    %110 = %108.3;
    (%109, %103, %110, %var_2581)
  };
  %111(%var_2588) /* ty=(Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) */
}

def @func_6436(%var_6434: Tensor[(110), float64], %var_6435: Tensor[(2197), int32]) -> (Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  @func_6432(%var_6434, %var_6435) /* ty=(Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */
}

def @func_11337() -> (Tensor[(100), float64],) {
  %114 = fn () -> (Tensor[(100), float64],) {
    %112 = @func_11222() /* ty=(Tensor[(100), float64],) */;
    %113 = %112.0;
    (%113,)
  };
  %114() /* ty=(Tensor[(100), float64],) */
}

def @func_9661() -> (Tensor[(1, 4, 7), float32], Tensor[(110), int16], Tensor[(11, 10), float64], Tensor[(110), bool], Tensor[(100), float64], Tensor[(3, 2, 15), float32]) {
  @func_9659() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), int16], Tensor[(11, 10), float64], Tensor[(110), bool], Tensor[(100), float64], Tensor[(3, 2, 15), float32]) */
}

def @func_3122(%var_3120: Tensor[(110), float64], %var_3121: Tensor[(100), float64]) -> (float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) {
  @func_3118(%var_3120, %var_3121) /* ty=(float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */
}

def @func_3287() -> (Tensor[(1, 4, 7), float32],) {
  %115 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %116 = %115.0;
  (%116,)
}

def @func_7761() -> (Tensor[(3, 2, 15), float32], Tensor[(28), float32]) {
  @func_7759() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(28), float32]) */
}

def @func_9005() -> Tensor[(13, 12, 4), float64] {
  @func_9003() /* ty=Tensor[(13, 12, 4), float64] */
}

def @func_8349() -> (Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) {
  @func_8347() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) */
}

def @func_9734() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], float32) {
  @func_9732() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float32) */
}

def @func_3892() -> (Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) {
  %117 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %120 = reshape(%118, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %121 = reshape(%119, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %122 = @func_3118(%120, %121) /* ty=(float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */;
  %123 = %117.0;
  %124 = @func_3544() /* ty=Tensor[(28), float32] */;
  %125 = %122.4;
  (%123, %124, %125, meta[relay.Constant][6] /* ty=Tensor[(110), float64] */, meta[relay.Constant][7] /* ty=Tensor[(100), float64] */)
}

def @func_5992(%var_5990: Tensor[(110, 2), float64]) -> (Tensor[(28), float32], Tensor[(110, 2), bool]) {
  @func_5989(%var_5990) /* ty=(Tensor[(28), float32], Tensor[(110, 2), bool]) */
}

def @func_11949(%var_11946: Tensor[(10, 13, 6), uint64], %var_11947: Tensor[(10, 13, 6), uint64], %var_11948: Tensor[(660), float32]) -> (Tensor[(10, 13, 6), uint64], Tensor[(10, 13, 6), bool], Tensor[(28), float32], Tensor[(660), float32], Tensor[(28), float64]) {
  @func_11944(%var_11946, %var_11947, %var_11948) /* ty=(Tensor[(10, 13, 6), uint64], Tensor[(10, 13, 6), bool], Tensor[(28), float32], Tensor[(660), float32], Tensor[(28), float64]) */
}

def @func_11061() -> (Tensor[(28), float32],) {
  @func_11059() /* ty=(Tensor[(28), float32],) */
}

def @func_6586(%var_6585: Tensor[(3, 8, 5), float32]) -> (Tensor[(3, 8, 5), float32],) {
  %128 = fn (%var_6577: Tensor[(3, 8, 5), float32]) -> (Tensor[(3, 8, 5), float32],) {
    %126 = cast(%var_6577, dtype="float32") /* ty=Tensor[(3, 8, 5), float32] */;
    %127 = exp(%126) /* ty=Tensor[(3, 8, 5), float32] */;
    (%127,)
  };
  %128(%var_6585) /* ty=(Tensor[(3, 8, 5), float32],) */
}

def @func_10490(%var_10475: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 10), float64], Tensor[(11, 4, 7), uint32]) {
  %129 = @func_9659() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), int16], Tensor[(11, 10), float64], Tensor[(110), bool], Tensor[(100), float64], Tensor[(3, 2, 15), float32]) */;
  %130 = @func_5180() /* ty=Tensor[(1, 4, 7), float32] */;
  %131 = cast(%130, dtype="uint32") /* ty=Tensor[(1, 4, 7), uint32] */;
  %132 = cast(%var_10475, dtype="uint32") /* ty=Tensor[(11, 4, 7), uint32] */;
  %133 = %129.2;
  %134 = multiply(%131, %132) /* ty=Tensor[(11, 4, 7), uint32] */;
  (%133, %134)
}

def @func_2808() -> (Tensor[(1, 4, 7), float32],) {
  %135 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %136 = %135.1;
  (%136,)
}

def @func_8803() -> (Tensor[(660, 28), uint16],) {
  @func_8801() /* ty=(Tensor[(660, 28), uint16],) */
}

def @func_9251(%var_9244: Tensor[(8, 13, 2), float64]) -> (Tensor[(8, 13, 2), float64],) {
  %137 = cast(%var_9244, dtype="float64") /* ty=Tensor[(8, 13, 2), float64] */;
  %138 = asin(%137) /* ty=Tensor[(8, 13, 2), float64] */;
  (%138,)
}

def @func_5408() -> Tensor[(28), float32] {
  @func_5406() /* ty=Tensor[(28), float32] */
}

def @func_2065(%var_2063: float64, %var_2064: Tensor[(10, 1, 11), float64]) -> (Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  %151 = fn (%var_2043: float64, %var_2044: Tensor[(10, 1, 11), float64]) -> (Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
    %139 = cast(%var_2043, dtype="float64") /* ty=float64 */;
    %140 = cast(%var_2044, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
    %141 = cast(%var_2043, dtype="float32") /* ty=float32 */;
    %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
    %143 = reshape(%141, newshape=[]) /* ty=float32 */;
    %144 = reshape(%142, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
    %145 = cast(meta[relay.Constant][8] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
    %146 = reshape(%145, newshape=[28]) /* ty=Tensor[(28), float32] */;
    %147 = @func_1712(%146) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %148 = divide(%139, %140) /* ty=Tensor[(10, 1, 11), float64] */;
    %149 = @func_1598(%143, %144) /* ty=Tensor[(1, 4, 7), float32] */;
    %150 = %147.1;
    (%148, %149, meta[relay.Constant][8] /* ty=Tensor[(28), float32] */, %150)
  };
  %151(%var_2063, %var_2064) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */
}

def @func_2513() -> (Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) {
  %162 = fn () -> (Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) {
    %152 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %153 = %152.0;
    %154 = cast(%153, dtype="float64") /* ty=Tensor[(15, 8, 3), float64] */;
    %155 = cast(4.83102f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %156 = cast(meta[relay.Constant][9] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %157 = reshape(%155, newshape=[]) /* ty=float64 */;
    %158 = reshape(%156, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
    %159 = @func_2062(%157, %158) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %160 = atanh(%154) /* ty=Tensor[(15, 8, 3), float64] */;
    %161 = %159.1;
    (%160, %161, 4.83102f64 /* ty=float64 */, meta[relay.Constant][9] /* ty=Tensor[(110), float64] */)
  };
  %162() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */
}

def @func_8857(%var_8849: Tensor[(110, 6), float32], %var_8850: float64) -> (Tensor[(28), float32], Tensor[(28), float32], Tensor[(110, 6), float32], float64) {
  %163 = @func_4489() /* ty=(Tensor[(28), float32],) */;
  %164 = cast(%var_8849, dtype="float32") /* ty=Tensor[(110, 6), float32] */;
  %165 = cast(%var_8850, dtype="float64") /* ty=float64 */;
  %166 = reshape(%164, newshape=[330, 2]) /* ty=Tensor[(330, 2), float32] */;
  %167 = reshape(%165, newshape=[]) /* ty=float64 */;
  %168 = @func_5547(%166, %167) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(330, 2), int16], Tensor[(2, 6, 12), float64], Tensor[(144), float32], Tensor[(110), float64], Tensor[(192), int16], Tensor[(330, 2), int16]) */;
  %169 = %163.0;
  %170 = %168.4;
  (%169, %170, %var_8849, %var_8850)
}

def @func_4021() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  %171 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %172 = @func_2845() /* ty=Tensor[(28), float32] */;
  %173 = %171.1;
  (%172, %173)
}

def @func_9868(%var_9865: Tensor[(110), float64], %var_9866: Tensor[(100), float64], %var_9867: float64) -> (Tensor[(110), float64], Tensor[(100), float64], Tensor[(594), float32], Tensor[(2197), int32], Tensor[(100), float64], Tensor[(110), float32], Tensor[(110, 6), float32], Tensor[(660), float32], float64, Tensor[(110), bool], Tensor[(28), float32]) {
  %205 = fn (%var_9768: Tensor[(110), float64], %var_9782: Tensor[(100), float64], %var_9796: float64) -> (Tensor[(110), float64], Tensor[(100), float64], Tensor[(594), float32], Tensor[(2197), int32], Tensor[(100), float64], Tensor[(110), float32], Tensor[(110, 6), float32], Tensor[(660), float32], float64, Tensor[(110), bool], Tensor[(28), float32]) {
    %174 = @func_8793() /* ty=(Tensor[(110), float64],) */;
    %175 = %174.0;
    %176 = cast(%var_9768, dtype="float64") /* ty=Tensor[(110), float64] */;
    %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(1), int32] */;
    %178 = cast(%175, dtype="float64") /* ty=Tensor[(110), float64] */;
    %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?), float64] */;
    %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(594), float32] */, dtype="float32") /* ty=Tensor[(594), float32] */;
    %181 = cast(meta[relay.Constant][11] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
    %182 = cast(%var_9782, dtype="float64") /* ty=Tensor[(100), float64] */;
    %183 = reshape(%180, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float32] */;
    %184 = reshape(%181, newshape=[2197]) /* ty=Tensor[(2197), int32] */;
    %185 = reshape(%182, newshape=[100]) /* ty=Tensor[(100), float64] */;
    %186 = @func_6713(%183, %184, %185) /* ty=(Tensor[(11, 6, 9), float32], Tensor[(210), uint16], Tensor[(110), float64], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) */;
    %187 = cast(%175, dtype="float32") /* ty=Tensor[(110), float32] */;
    %188 = cast(meta[relay.Constant][12] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %189 = cast(%var_9796, dtype="float64") /* ty=float64 */;
    %190 = reshape(%188, newshape=[110, 6]) /* ty=Tensor[(110, 6), float32] */;
    %191 = reshape(%189, newshape=[]) /* ty=float64 */;
    %192 = @func_8857(%190, %191) /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(110, 6), float32], float64) */;
    %193 = cast(%var_9768, dtype="float64") /* ty=Tensor[(110), float64] */;
    %194 = atanh(%187) /* ty=Tensor[(110), float32] */;
    %195 = cast(%194, dtype="float32") /* ty=Tensor[(110), float32] */;
    %196 = reshape(%193, newshape=[110]) /* ty=Tensor[(110), float64] */;
    %197 = reshape(%195, newshape=[110]) /* ty=Tensor[(110), float32] */;
    %198 = @func_9546(%196, %197) /* ty=(Tensor[(28), float32], Tensor[(110), uint32], Tensor[(110), bool]) */;
    %199 = @func_3655() /* ty=(Tensor[(28), float32],) */;
    %200 = mod(%178, %179) /* ty=Tensor[(110), float64] */;
    %201 = %186.8;
    %202 = %192.2;
    %203 = %198.2;
    %204 = %199.0;
    (%200, %201, meta[relay.Constant][10] /* ty=Tensor[(594), float32] */, meta[relay.Constant][11] /* ty=Tensor[(2197), int32] */, %var_9782, %194, %202, meta[relay.Constant][12] /* ty=Tensor[(660), float32] */, %var_9796, %203, %204)
  };
  %205(%var_9865, %var_9866, %var_9867) /* ty=(Tensor[(110), float64], Tensor[(100), float64], Tensor[(594), float32], Tensor[(2197), int32], Tensor[(100), float64], Tensor[(110), float32], Tensor[(110, 6), float32], Tensor[(660), float32], float64, Tensor[(110), bool], Tensor[(28), float32]) */
}

def @func_1715(%var_1713: Tensor[(28), float32]) -> (Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) {
  @func_1712(%var_1713) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */
}

def @func_10922() -> (Tensor[(1, 4, 7), float32],) {
  %207 = fn () -> (Tensor[(1, 4, 7), float32],) {
    %206 = @func_5180() /* ty=Tensor[(1, 4, 7), float32] */;
    (%206,)
  };
  %207() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_11299() -> Tensor[(28), float32] {
  %209 = fn () -> Tensor[(28), float32] {
    %208 = @func_3803() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
    %208.0
  };
  %209() /* ty=Tensor[(28), float32] */
}

def @func_5406() -> Tensor[(28), float32] {
  %210 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %210.0
}

def @func_10398() -> (Tensor[(1, 4, 7), float32],) {
  %211 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %212 = %211.0;
  (%212,)
}

def @func_4333(%var_4300: Tensor[(2, 10, 5), float64]) -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) {
  %213 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %214 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %215 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
  %216 = %215.2;
  %217 = cast(%var_4300, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="float32") /* ty=Tensor[(2, 10, 5), float32] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %221 = cast(meta[relay.Constant][13] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %222 = cast(meta[relay.Constant][13] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %223 = %214.1;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %225 = reshape(%221, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %226 = reshape(%222, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %227 = reshape(%224, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %228 = @func_2565(%225, %226, %227) /* ty=(Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) */;
  %229 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
  %230 = %229.3;
  %231 = cast(%var_4300, dtype="int32") /* ty=Tensor[(2, 10, 5), int32] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(2), int32] */;
  %233 = cast(%230, dtype="int32") /* ty=Tensor[(1, 100), int32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %235 = %213.0;
  %236 = minimum(%219, %220) /* ty=Tensor[(2, 10, 5), float32] */;
  %237 = %228.2;
  %238 = bitwise_and(%233, %234) /* ty=Tensor[(?, 100), int32] */;
  (%235, %223, %236, %237, meta[relay.Constant][13] /* ty=Tensor[(2197), int32] */, %238)
}

def @func_8236(%var_8224: float64) -> (Tensor[(110), float64], Tensor[(28), float32], float64, Tensor[(28), float32]) {
  %239 = @func_4792() /* ty=(Tensor[(110), float64],) */;
  %240 = cast(%var_8224, dtype="float64") /* ty=float64 */;
  %241 = reshape(%240, newshape=[]) /* ty=float64 */;
  %242 = @func_4473(%241) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
  %243 = %239.0;
  %244 = %242.1;
  %245 = @func_7162() /* ty=Tensor[(28), float32] */;
  (%243, %244, %var_8224, %245)
}

def @func_11192() -> Tensor[(13, 12, 4), uint8] {
  %252 = fn () -> Tensor[(13, 12, 4), uint8] {
    %246 = @func_6903() /* ty=(Tensor[(13, 12, 4), float64],) */;
    %247 = %246.0;
    %248 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 12, 4), float64] */, dtype="uint8") /* ty=Tensor[(13, 12, 4), uint8] */;
    %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(%247, dtype="uint8") /* ty=Tensor[(13, 12, 4), uint8] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_and(%250, %251) /* ty=Tensor[(13, 12, 4), uint8] */
  };
  %252() /* ty=Tensor[(13, 12, 4), uint8] */
}

def @func_9999() -> (Tensor[(28), float32], Tensor[(110), float64]) {
  @func_9997() /* ty=(Tensor[(28), float32], Tensor[(110), float64]) */
}

def @func_11799(%var_11797: Tensor[(22, 5), float64]) -> Tensor[(22, 5), float32] {
  @func_11796(%var_11797) /* ty=Tensor[(22, 5), float32] */
}

def @func_3118(%var_3080: Tensor[(110), float64], %var_3095: Tensor[(100), float64]) -> (float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) {
  %253 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %254 = cast(%var_3080, dtype="bool") /* ty=Tensor[(110), bool] */;
  %255 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(110), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %256 = cast(meta[relay.Constant][15] /* ty=Tensor[(110), float64] */, dtype="bool") /* ty=Tensor[(110), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?), bool] */;
  %258 = cast(%var_3095, dtype="float64") /* ty=Tensor[(100), float64] */;
  %259 = cast(%var_3095, dtype="float64") /* ty=Tensor[(100), float64] */;
  %260 = reshape(%258, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %261 = reshape(%259, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %262 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %263 = %253.2;
  %264 = cast(%263, dtype="float64") /* ty=float64 */;
  %265 = cast(meta[relay.Constant][15] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %266 = reshape(%264, newshape=[]) /* ty=float64 */;
  %267 = reshape(%265, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %268 = @func_2062(%266, %267) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %269 = %268.3;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %271 = equal(%256, %257) /* ty=Tensor[(110), bool] */;
  %272 = @func_2539(%260, %261) /* ty=Tensor[(2, 10, 5), float64] */;
  %273 = %262.1;
  %274 = tan(%270) /* ty=Tensor[(1, 4, 7), float32] */;
  (%263, %271, %272, %var_3095, %273, %274)
}

def @func_5587() -> Tensor[(110), float64] {
  %275 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %275.3
}

def @func_7674(%var_7672: Tensor[(110), float64], %var_7673: float64) -> (Tensor[(110), float64], Tensor[(192), int16], float64) {
  %287 = fn (%var_7657: Tensor[(110), float64], %var_7667: float64) -> (Tensor[(110), float64], Tensor[(192), int16], float64) {
    %276 = @func_7204() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(22, 5), float64]) */;
    %277 = %276.1;
    %278 = cast(%var_7657, dtype="float64") /* ty=Tensor[(110), float64] */;
    %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(1), int32] */;
    %280 = cast(%277, dtype="float64") /* ty=Tensor[(110), float64] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?), float64] */;
    %282 = cast(%var_7667, dtype="float64") /* ty=float64 */;
    %283 = reshape(%282, newshape=[]) /* ty=float64 */;
    %284 = @func_3414(%283) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) */;
    %285 = power(%280, %281) /* ty=Tensor[(110), float64] */;
    %286 = %284.3;
    (%285, %286, %var_7667)
  };
  %287(%var_7672, %var_7673) /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64) */
}

def @func_9254(%var_9252: Tensor[(8, 13, 2), float64]) -> (Tensor[(8, 13, 2), float64],) {
  @func_9251(%var_9252) /* ty=(Tensor[(8, 13, 2), float64],) */
}

def @func_8794() -> (Tensor[(110), float64],) {
  %289 = fn () -> (Tensor[(110), float64],) {
    %288 = @func_5587() /* ty=Tensor[(110), float64] */;
    (%288,)
  };
  %289() /* ty=(Tensor[(110), float64],) */
}

def @func_10989() -> (Tensor[(1, 4, 7), float32],) {
  @func_10987() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_5744(%var_5738: Tensor[(7, 14, 16), int64], %var_5739: Tensor[(7, 14, 16), int64]) -> Tensor[(7, 14, 16), int64] {
  %290 = cast(%var_5739, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %291 = shape_of(%var_5738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_5738, dtype="int64") /* ty=Tensor[(7, 14, 16), int64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%292, %293) /* ty=Tensor[(7, 14, 16), int64] */
}

def @func_7912() -> Tensor[(1, 4, 7), float32] {
  %295 = fn () -> Tensor[(1, 4, 7), float32] {
    %294 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %294.1
  };
  %295() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_7730(%var_7706: Tensor[(11, 10), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float32], Tensor[(11, 10), float64], Tensor[(2197), float32]) {
  %296 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %297 = cast(%var_7706, dtype="float64") /* ty=Tensor[(11, 10), float64] */;
  %298 = cast(meta[relay.Constant][16] /* ty=Tensor[(2197), int32] */, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %299 = reshape(%297, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %300 = reshape(%298, newshape=[2197]) /* ty=Tensor[(2197), int32] */;
  %301 = @func_6432(%299, %300) /* ty=(Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %302 = cast(meta[relay.Constant][16] /* ty=Tensor[(2197), int32] */, dtype="float32") /* ty=Tensor[(2197), float32] */;
  %303 = rsqrt(%302) /* ty=Tensor[(2197), float32] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(2197), float32] */;
  %305 = %296.0;
  %306 = %301.0;
  %307 = acosh(%304) /* ty=Tensor[(2197), float32] */;
  (%305, %306, %var_7706, %307)
}

def @func_4055(%var_4053: Tensor[(15, 1, 14), uint16]) -> (Tensor[(15, 6, 14), bool], Tensor[(28), float32]) {
  @func_4052(%var_4053) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(28), float32]) */
}

def @func_4350() -> Tensor[(1, 4, 7), float32] {
  %309 = fn () -> Tensor[(1, 4, 7), float32] {
    %308 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %308.0
  };
  %309() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_8979(%var_8978: Tensor[(9, 6, 1), float32]) -> (Tensor[(9, 6, ?), bool], Tensor[(9, 6, ?), bool]) {
  %339 = fn (%var_8906: Tensor[(9, 6, 1), float32]) -> (Tensor[(9, 6, ?), bool], Tensor[(9, 6, ?), bool]) {
    %310 = cast(%var_8906, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
    %311 = rsqrt(%310) /* ty=Tensor[(9, 6, 1), float32] */;
    %312 = cast(%var_8906, dtype="int32") /* ty=Tensor[(9, 6, 1), int32] */;
    %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%311, dtype="int32") /* ty=Tensor[(9, 6, 1), int32] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %316 = add(%314, %315) /* ty=Tensor[(9, 6, ?), int32] */;
    %317 = cast(%311, dtype="uint8") /* ty=Tensor[(9, 6, 1), uint8] */;
    %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%316, dtype="uint8") /* ty=Tensor[(9, 6, ?), uint8] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %321 = bitwise_xor(%319, %320) /* ty=Tensor[(9, 6, ?), uint8] */;
    %322 = cast(%311, dtype="bool") /* ty=Tensor[(9, 6, 1), bool] */;
    %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(%321, dtype="bool") /* ty=Tensor[(9, 6, ?), bool] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %326 = cast(%316, dtype="float32") /* ty=Tensor[(9, 6, ?), float32] */;
    %327 = log2(%326) /* ty=Tensor[(9, 6, ?), float32] */;
    %328 = cast(%316, dtype="uint16") /* ty=Tensor[(9, 6, ?), uint16] */;
    %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
    %330 = cast(%327, dtype="uint16") /* ty=Tensor[(9, 6, ?), uint16] */;
    %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %332 = right_shift(%330, %331) /* ty=Tensor[(9, 6, ?), uint16] */;
    %333 = cast(%327, dtype="bool") /* ty=Tensor[(9, 6, ?), bool] */;
    %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%332, dtype="bool") /* ty=Tensor[(9, 6, ?), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %337 = equal(%324, %325) /* ty=Tensor[(9, 6, ?), bool] */;
    %338 = greater(%335, %336) /* ty=Tensor[(9, 6, ?), bool] */;
    (%337, %338)
  };
  %339(%var_8978) /* ty=(Tensor[(9, 6, ?), bool], Tensor[(9, 6, ?), bool]) */
}

def @func_10987() -> (Tensor[(1, 4, 7), float32],) {
  %340 = @func_7911() /* ty=Tensor[(1, 4, 7), float32] */;
  (%340,)
}

def @func_9550(%var_9548: Tensor[(110), float64], %var_9549: Tensor[(110), float32]) -> (Tensor[(28), float32], Tensor[(110), uint32], Tensor[(110), bool]) {
  @func_9546(%var_9548, %var_9549) /* ty=(Tensor[(28), float32], Tensor[(110), uint32], Tensor[(110), bool]) */
}

def @func_3894() -> (Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) {
  @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */
}

def @func_1602(%var_1600: float32, %var_1601: Tensor[(1, 4, 7), float32]) -> Tensor[(1, 4, 7), float32] {
  @func_1598(%var_1600, %var_1601) /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_1712(%var_1705: Tensor[(28), float32]) -> (Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) {
  %341 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 3), float64] */;
  %342 = cast(-7.16856f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %343 = cast(%var_1705, dtype="float32") /* ty=Tensor[(28), float32] */;
  %344 = reshape(%342, newshape=[]) /* ty=float32 */;
  %345 = reshape(%343, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %346 = asinh(%341) /* ty=Tensor[(11, 14, 3), float64] */;
  %347 = @func_1598(%344, %345) /* ty=Tensor[(1, 4, 7), float32] */;
  (%346, %347, -7.16856f /* ty=float32 */, %var_1705)
}

def @func_4475(%var_4474: float64) -> (Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
  %357 = fn (%var_4444: float64) -> (Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
    %348 = cast(%var_4444, dtype="float64") /* ty=float64 */;
    %349 = cast(meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %350 = reshape(%348, newshape=[]) /* ty=float64 */;
    %351 = reshape(%349, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
    %352 = @func_2062(%350, %351) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %353 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %354 = @func_3544() /* ty=Tensor[(28), float32] */;
    %355 = %352.2;
    %356 = %353.0;
    (%354, %355, %var_4444, meta[relay.Constant][18] /* ty=Tensor[(110), float64] */, %356)
  };
  %357(%var_4474) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */
}

def @func_4783(%var_4782: float64) -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) {
  %370 = fn (%var_4775: float64) -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) {
    %358 = @func_4372() /* ty=(Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) */;
    %359 = %358.0;
    %360 = cast(%359, dtype="float64") /* ty=Tensor[(110), float64] */;
    %361 = reshape(%360, newshape=[110]) /* ty=Tensor[(110), float64] */;
    %362 = @func_3023(%361) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
    %363 = cast(%var_4775, dtype="float64") /* ty=float64 */;
    %364 = cast(%359, dtype="float64") /* ty=Tensor[(110), float64] */;
    %365 = reshape(%363, newshape=[]) /* ty=float64 */;
    %366 = reshape(%364, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
    %367 = @func_2062(%365, %366) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %368 = %362.0;
    %369 = %367.1;
    (%359, %368, %369, %var_4775)
  };
  %370(%var_4782) /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) */
}

def @func_3973(%var_3949: Tensor[(5, 12, 11), float32]) -> (Tensor[(5, 12, 11), bool], Tensor[(28), float32]) {
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 12, 11), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 11), float32] */;
  %372 = shape_of(%var_3949, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_3949, dtype="float32") /* ty=Tensor[(5, 12, 11), float32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %375 = mod(%373, %374) /* ty=Tensor[(5, 12, 11), float32] */;
  %376 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 12, 11), float32] */, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(5, 12, 11), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = less_equal(%378, %379) /* ty=Tensor[(5, 12, 11), bool] */;
  %381 = @func_3544() /* ty=Tensor[(28), float32] */;
  (%380, %381)
}

def @func_8109() -> (Tensor[(28), float32],) {
  %382 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %383 = %382.1;
  (%383,)
}

def @func_4249() -> Tensor[(1, 4, 7), float32] {
  %384 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %384.2
}

def @func_3656() -> (Tensor[(28), float32],) {
  %387 = fn () -> (Tensor[(28), float32],) {
    %385 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
    %386 = %385.3;
    (%386,)
  };
  %387() /* ty=(Tensor[(28), float32],) */
}

def @func_9110() -> (Tensor[(3, 2, 15), float32],) {
  %388 = @func_7307() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) */;
  %389 = %388.1;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %391 = cos(%390) /* ty=Tensor[(3, 2, 15), float32] */;
  (%391,)
}

def @func_6308() -> (Tensor[(1, 4, 7), float32],) {
  %392 = @func_4249() /* ty=Tensor[(1, 4, 7), float32] */;
  (%392,)
}

def @func_6115() -> (Tensor[(1, 4, 7), float32],) {
  %393 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %394 = %393.0;
  (%394,)
}

def @func_3289() -> (Tensor[(1, 4, 7), float32],) {
  @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_5547(%var_5523: Tensor[(330, 2), float32], %var_5534: float64) -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(330, 2), int16], Tensor[(2, 6, 12), float64], Tensor[(144), float32], Tensor[(110), float64], Tensor[(192), int16], Tensor[(330, 2), int16]) {
  %395 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %396 = cast(meta[relay.Constant][20] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %397 = reshape(%396, newshape=[22, 5]) /* ty=Tensor[(22, 5), float64] */;
  %398 = @func_2587(%397) /* ty=(Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) */;
  %399 = cast(meta[relay.Constant][21] /* ty=Tensor[(330, 2), float32] */, dtype="float32") /* ty=Tensor[(330, 2), float32] */;
  %400 = reshape(%399, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %401 = @func_3973(%400) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %402 = cast(%var_5523, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %403 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(330, 2), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %404 = cast(meta[relay.Constant][21] /* ty=Tensor[(330, 2), float32] */, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %406 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %407 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %408 = reshape(%406, newshape=[144, 1]) /* ty=Tensor[(144, 1), float32] */;
  %409 = reshape(%407, newshape=[2, 6, 12]) /* ty=Tensor[(2, 6, 12), float32] */;
  %410 = @func_4226(%408, %409) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float64], Tensor[(144, 1), float64]) */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
  %412 = cast(%var_5534, dtype="float64") /* ty=float64 */;
  %413 = reshape(%411, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %414 = reshape(%412, newshape=[]) /* ty=float64 */;
  %415 = @func_2187(%413, %414) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %416 = cast(%var_5523, dtype="int16") /* ty=Tensor[(330, 2), int16] */;
  %417 = cast(%var_5534, dtype="int16") /* ty=int16 */;
  %418 = @func_5180() /* ty=Tensor[(1, 4, 7), float32] */;
  %419 = %395.0;
  %420 = %398.2;
  %421 = %401.1;
  %422 = bitwise_or(%404, %405) /* ty=Tensor[(330, 2), int16] */;
  %423 = %410.1;
  %424 = %415.3;
  %425 = bitwise_xor(%416, %417) /* ty=Tensor[(330, 2), int16] */;
  (%418, %419, %420, meta[relay.Constant][20] /* ty=Tensor[(110), float64] */, %421, %422, %423, meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, %424, meta[relay.Constant][23] /* ty=Tensor[(192), int16] */, %425)
}

def @func_2468() -> (Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) {
  %433 = fn () -> (Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) {
    %426 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 3), float64] */;
    %427 = cast(-6.60471f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %428 = cast(meta[relay.Constant][25] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
    %429 = reshape(%427, newshape=[]) /* ty=float32 */;
    %430 = reshape(%428, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
    %431 = sinh(%426) /* ty=Tensor[(15, 8, 3), float64] */;
    %432 = @func_1598(%429, %430) /* ty=Tensor[(1, 4, 7), float32] */;
    (%431, %432, -6.60471f /* ty=float32 */, meta[relay.Constant][25] /* ty=Tensor[(28), float32] */)
  };
  %433() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */
}

def @func_3416(%var_3415: float64) -> (Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) {
  %447 = fn (%var_3408: float64) -> (Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) {
    %434 = @func_3157() /* ty=(Tensor[(28), float32], float32) */;
    %435 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
    %436 = cast(%var_3408, dtype="float64") /* ty=float64 */;
    %437 = reshape(%435, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
    %438 = reshape(%436, newshape=[]) /* ty=float64 */;
    %439 = @func_2187(%437, %438) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
    %440 = @func_2845() /* ty=Tensor[(28), float32] */;
    %441 = cast(%440, dtype="float32") /* ty=Tensor[(28), float32] */;
    %442 = reshape(%441, newshape=[28]) /* ty=Tensor[(28), float32] */;
    %443 = @func_1712(%442) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %444 = %434.0;
    %445 = %439.2;
    %446 = %443.3;
    (%444, %440, %445, meta[relay.Constant][26] /* ty=Tensor[(192), int16] */, %var_3408, %446)
  };
  %447(%var_3415) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) */
}

def @func_3641() -> (Tensor[(110), float64],) {
  @func_3639() /* ty=(Tensor[(110), float64],) */
}

def @func_5024(%var_4946: Tensor[(1, 4, 7), float32]) -> (Tensor[(110), float64], Tensor[(?, 4, 7), uint64], Tensor[(110), float64], float64, Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %448 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %449 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %450 = %449.0;
  %451 = cast(%var_4946, dtype="uint64") /* ty=Tensor[(1, 4, 7), uint64] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="uint64") /* ty=Tensor[(1, 4, 7), uint64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %455 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(110), float64] */;
  %458 = cast(meta[relay.Constant][27] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %459 = reshape(%457, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %460 = reshape(%458, newshape=[100]) /* ty=Tensor[(100), float64] */;
  %461 = @func_3118(%459, %460) /* ty=(float64, Tensor[(110), bool], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32]) */;
  %462 = %448.0;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(110), float64] */;
  %464 = reshape(%463, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %465 = @func_3023(%464) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
  %466 = %465.2;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %468 = logical_xor(%453, %454) /* ty=Tensor[(?, 4, 7), uint64] */;
  %469 = %461.0;
  %470 = log(%467) /* ty=Tensor[(1, 4, 7), float32] */;
  %471 = @func_2845() /* ty=Tensor[(28), float32] */;
  (%462, %468, %456, %469, meta[relay.Constant][27] /* ty=Tensor[(100), float64] */, %470, %471)
}

def @func_3390() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) {
  %472 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %473 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %474 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 100), float64] */, dtype="float64") /* ty=Tensor[(1, 100), float64] */;
  %475 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 100), float64] */, dtype="float64") /* ty=Tensor[(1, 100), float64] */;
  %476 = reshape(%474, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %477 = reshape(%475, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %478 = %472.3;
  %479 = %473.0;
  %480 = @func_2539(%476, %477) /* ty=Tensor[(2, 10, 5), float64] */;
  (%478, %479, %480, meta[relay.Constant][28] /* ty=Tensor[(1, 100), float64] */)
}

def @func_2704(%var_2703: Tensor[(13, 12, 4), float32]) -> (Tensor[(13, 12, 4), float32],) {
  %483 = fn (%var_2697: Tensor[(13, 12, 4), float32]) -> (Tensor[(13, 12, 4), float32],) {
    %481 = cast(%var_2697, dtype="float32") /* ty=Tensor[(13, 12, 4), float32] */;
    %482 = sinh(%481) /* ty=Tensor[(13, 12, 4), float32] */;
    (%482,)
  };
  %483(%var_2703) /* ty=(Tensor[(13, 12, 4), float32],) */
}

def @func_3948() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) {
  %492 = fn () -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) {
    %484 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
    %485 = cast(-8.7178f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %486 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 110), float64] */, dtype="float64") /* ty=Tensor[(1, 110), float64] */;
    %487 = reshape(%485, newshape=[]) /* ty=float64 */;
    %488 = reshape(%486, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
    %489 = @func_2062(%487, %488) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %490 = %484.3;
    %491 = %489.3;
    (%490, %491, -8.7178f64 /* ty=float64 */, meta[relay.Constant][29] /* ty=Tensor[(1, 110), float64] */)
  };
  %492() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) */
}

def @func_8081() -> (Tensor[(100), float64], Tensor[(192), int16], float64) {
  %499 = fn () -> (Tensor[(100), float64], Tensor[(192), int16], float64) {
    %493 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
    %494 = cast(2.92641f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %495 = reshape(%494, newshape=[]) /* ty=float64 */;
    %496 = @func_3414(%495) /* ty=(Tensor[(28), float32], Tensor[(28), float32], float64, Tensor[(192), int16], float64, Tensor[(28), float32]) */;
    %497 = %493.4;
    %498 = %496.3;
    (%497, %498, 2.92641f64 /* ty=float64 */)
  };
  %499() /* ty=(Tensor[(100), float64], Tensor[(192), int16], float64) */
}

def @func_9127() -> (Tensor[(1, 4, 7), float32],) {
  %500 = @func_4349() /* ty=Tensor[(1, 4, 7), float32] */;
  (%500,)
}

def @func_10081(%var_10065: Tensor[(11, 2, 10), uint8]) -> Tensor[(11, 2, 10), bool] {
  %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 2, 10), uint8] */, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %502 = shape_of(%var_10065, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_10065, dtype="bool") /* ty=Tensor[(11, 2, 10), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%503, %504) /* ty=Tensor[(11, 2, 10), bool] */
}

def @func_6144() -> Tensor[(13, 12, 4), float64] {
  %511 = fn () -> Tensor[(13, 12, 4), float64] {
    %505 = @func_4372() /* ty=(Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) */;
    %506 = %505.1;
    %507 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 12, 4), float32] */, dtype="float64") /* ty=Tensor[(13, 12, 4), float64] */;
    %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%506, dtype="float64") /* ty=Tensor[(13, 12, 4), float64] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%509, %510) /* ty=Tensor[(13, 12, 4), float64] */
  };
  %511() /* ty=Tensor[(13, 12, 4), float64] */
}

def @func_6310() -> (Tensor[(1, 4, 7), float32],) {
  @func_6308() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_8147() -> (Tensor[(28), float32], Tensor[(3, 2, 15), float32]) {
  %516 = fn () -> (Tensor[(28), float32], Tensor[(3, 2, 15), float32]) {
    %512 = @func_3803() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */;
    %513 = @func_7759() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(28), float32]) */;
    %514 = %512.0;
    %515 = %513.0;
    (%514, %515)
  };
  %516() /* ty=(Tensor[(28), float32], Tensor[(3, 2, 15), float32]) */
}

def @func_9264() -> Tensor[(1, 4, 7), float32] {
  %517 = fn () -> Tensor[(1, 4, 7), float32] {
    @func_4349() /* ty=Tensor[(1, 4, 7), float32] */
  };
  %517() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_9297() -> (Tensor[(28), float32],) {
  %518 = @func_8109() /* ty=(Tensor[(28), float32],) */;
  %519 = %518.0;
  (%519,)
}

def @func_6831() -> (Tensor[(28), float32], Tensor[(22, 5), float64]) {
  %524 = fn () -> (Tensor[(28), float32], Tensor[(22, 5), float64]) {
    %520 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
    %521 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
    %522 = %520.1;
    %523 = %521.2;
    (%522, %523)
  };
  %524() /* ty=(Tensor[(28), float32], Tensor[(22, 5), float64]) */
}

def @func_6271() -> (Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) {
  @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */
}

def @func_6432(%var_6374: Tensor[(110), float64], %var_6420: Tensor[(2197), int32]) -> (Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %525 = @func_5600() /* ty=Tensor[(110), float64] */;
  %526 = cast(%var_6374, dtype="bool") /* ty=Tensor[(110), bool] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(1), int32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(110), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?), bool] */;
  %530 = less_equal(%528, %529) /* ty=Tensor[(110), bool] */;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(110), float32] */;
  %532 = cast(%var_6420, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %533 = cast(%var_6420, dtype="int32") /* ty=Tensor[(2197), int32] */;
  %534 = cast(meta[relay.Constant][32] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
  %535 = reshape(%532, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %536 = reshape(%533, newshape=[13, 13, 13]) /* ty=Tensor[(13, 13, 13), int32] */;
  %537 = reshape(%534, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %538 = @func_2565(%535, %536, %537) /* ty=(Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) */;
  %539 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %540 = @func_6204() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) */;
  %541 = sqrt(%531) /* ty=Tensor[(110), float32] */;
  %542 = %538.2;
  %543 = %539.0;
  %544 = %540.2;
  (%541, %542, %var_6420, meta[relay.Constant][32] /* ty=Tensor[(28), float32] */, %543, %544)
}

def @func_8347() -> (Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) {
  %545 = cast(meta[relay.Constant][33] /* ty=Tensor[(660, 1), float32] */, dtype="float32") /* ty=Tensor[(660, 1), float32] */;
  %546 = reshape(%545, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
  %547 = @func_3973(%546) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
  %548 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %549 = @func_7812() /* ty=Tensor[(28), float64] */;
  %550 = cast(%549, dtype="bool") /* ty=Tensor[(28), bool] */;
  %551 = cast(meta[relay.Constant][33] /* ty=Tensor[(660, 1), float32] */, dtype="bool") /* ty=Tensor[(660, 1), bool] */;
  %552 = @func_3544() /* ty=Tensor[(28), float32] */;
  %553 = cast(%552, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %554 = cast(meta[relay.Constant][33] /* ty=Tensor[(660, 1), float32] */, dtype="uint16") /* ty=Tensor[(660, 1), uint16] */;
  %555 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %556 = cast(meta[relay.Constant][33] /* ty=Tensor[(660, 1), float32] */, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %557 = %547.1;
  %558 = %548.1;
  %559 = not_equal(%550, %551) /* ty=Tensor[(660, 28), bool] */;
  %560 = bitwise_or(%553, %554) /* ty=Tensor[(660, 28), uint16] */;
  %561 = %555.0;
  %562 = asinh(%556) /* ty=Tensor[(660, 1), float64] */;
  (%557, %558, %559, %560, %561, %562)
}

def @func_5699() -> Tensor[(1, 4, 7), float32] {
  %563 = fn () -> Tensor[(1, 4, 7), float32] {
    @func_5171() /* ty=Tensor[(1, 4, 7), float32] */
  };
  %563() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_7614(%var_7613: Tensor[(8, 8, 1), float32]) -> Tensor[(8, 8, 1), float32] {
  %565 = fn (%var_7609: Tensor[(8, 8, 1), float32]) -> Tensor[(8, 8, 1), float32] {
    %564 = cast(%var_7609, dtype="float32") /* ty=Tensor[(8, 8, 1), float32] */;
    rsqrt(%564) /* ty=Tensor[(8, 8, 1), float32] */
  };
  %565(%var_7613) /* ty=Tensor[(8, 8, 1), float32] */
}

def @func_4226(%var_4204: Tensor[(144, 1), float32], %var_4216: Tensor[(2, 6, 12), float32]) -> (Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float64], Tensor[(144, 1), float64]) {
  %566 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %567 = cast(%var_4204, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %568 = reshape(%567, newshape=[2, 6, 12]) /* ty=Tensor[(2, 6, 12), float32] */;
  %569 = @func_2160(%568) /* ty=Tensor[(2, 6, 12), float32] */;
  %570 = cast(%var_4216, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %574 = cast(%var_4204, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %575 = asinh(%574) /* ty=Tensor[(144, 1), float32] */;
  %576 = cast(%575, dtype="float64") /* ty=Tensor[(144, 1), float64] */;
  %577 = %566.0;
  %578 = floor_divide(%572, %573) /* ty=Tensor[(2, 6, 12), float64] */;
  %579 = log10(%576) /* ty=Tensor[(144, 1), float64] */;
  (%577, %578, %579)
}

def @func_5804(%var_5803: Tensor[(144), float32]) -> (Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float32], Tensor[(144), float32]) {
  %585 = fn (%var_5800: Tensor[(144), float32]) -> (Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float32], Tensor[(144), float32]) {
    %580 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %581 = cast(%var_5800, dtype="float32") /* ty=Tensor[(144), float32] */;
    %582 = reshape(%581, newshape=[2, 6, 12]) /* ty=Tensor[(2, 6, 12), float32] */;
    %583 = %580.0;
    %584 = @func_2160(%582) /* ty=Tensor[(2, 6, 12), float32] */;
    (%583, %584, %var_5800)
  };
  %585(%var_5803) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float32], Tensor[(144), float32]) */
}

def @func_11595() -> (Tensor[(1, 4, 7), float32], Tensor[(?, 110), float32], Tensor[(192), int16]) {
  @func_11593() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(?, 110), float32], Tensor[(192), int16]) */
}

def @func_11634() -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(110), float64]) {
  %593 = fn () -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(110), float64]) {
    %586 = @func_6204() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) */;
    %587 = @func_8439() /* ty=(Tensor[(28), float32],) */;
    %588 = @func_3639() /* ty=(Tensor[(110), float64],) */;
    %589 = @func_8179() /* ty=Tensor[(1, 4, 7), float32] */;
    %590 = %586.0;
    %591 = %587.0;
    %592 = %588.0;
    (%589, %590, %591, %592)
  };
  %593() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(110), float64]) */
}

def @func_2947() -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */
}

def @func_4821() -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */
}

def @func_11399() -> Tensor[(28), float32] {
  %595 = fn () -> Tensor[(28), float32] {
    %594 = @func_9297() /* ty=(Tensor[(28), float32],) */;
    %594.0
  };
  %595() /* ty=Tensor[(28), float32] */
}

def @func_5686() -> (Tensor[(1, 4, 7), float64],) {
  %600 = fn () -> (Tensor[(1, 4, 7), float64],) {
    %596 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
    %597 = %596.2;
    %598 = cast(%597, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
    %599 = cosh(%598) /* ty=Tensor[(1, 4, 7), float64] */;
    (%599,)
  };
  %600() /* ty=(Tensor[(1, 4, 7), float64],) */
}

def @func_3736(%var_3734: Tensor[(624), float32], %var_3735: Tensor[(2, 10, 5), float64]) -> (Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) {
  %634 = fn (%var_3712: Tensor[(624), float32], %var_3714: Tensor[(2, 10, 5), float64]) -> (Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) {
    %601 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
    %602 = cast(meta[relay.Constant][34] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %603 = reshape(%602, newshape=[22, 5]) /* ty=Tensor[(22, 5), float64] */;
    %604 = @func_2587(%603) /* ty=(Tensor[(1, 4, 7), float32], float32, Tensor[(1, 4, 7), float32], Tensor[(22, 5), float64]) */;
    %605 = %604.3;
    %606 = cast(%605, dtype="bool") /* ty=Tensor[(22, 5), bool] */;
    %607 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(110), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %608 = cast(meta[relay.Constant][34] /* ty=Tensor[(110), float64] */, dtype="bool") /* ty=Tensor[(110), bool] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?), bool] */;
    %610 = greater_equal(%608, %609) /* ty=Tensor[(110), bool] */;
    %611 = cast(%610, dtype="bool") /* ty=Tensor[(110), bool] */;
    %612 = shape_of(%605, dtype="int32") /* ty=Tensor[(2), int32] */;
    %613 = cast(%605, dtype="bool") /* ty=Tensor[(22, 5), bool] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %615 = cast(%var_3712, dtype="float32") /* ty=Tensor[(624), float32] */;
    %616 = reshape(%615, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
    %617 = @func_2702(%616) /* ty=(Tensor[(13, 12, 4), float32],) */;
    %618 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
    %619 = %618.2;
    %620 = cast(%var_3714, dtype="uint32") /* ty=Tensor[(2, 10, 5), uint32] */;
    %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%619, dtype="uint32") /* ty=Tensor[(2, 10, 5), uint32] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %624 = cast(%var_3712, dtype="float32") /* ty=Tensor[(624), float32] */;
    %625 = reshape(%624, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), float32] */;
    %626 = @func_2702(%625) /* ty=(Tensor[(13, 12, 4), float32],) */;
    %627 = @func_3655() /* ty=(Tensor[(28), float32],) */;
    %628 = %601.5;
    %629 = less_equal(%613, %614) /* ty=Tensor[(22, 5), bool] */;
    %630 = %617.0;
    %631 = logical_xor(%622, %623) /* ty=Tensor[(2, 10, 5), uint32] */;
    %632 = %626.0;
    %633 = %627.0;
    (%628, %629, %630, %var_3712, %631, %632, %633)
  };
  %634(%var_3734, %var_3735) /* ty=(Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) */
}

def @func_8861(%var_8859: Tensor[(110, 6), float32], %var_8860: float64) -> (Tensor[(28), float32], Tensor[(28), float32], Tensor[(110, 6), float32], float64) {
  @func_8857(%var_8859, %var_8860) /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(110, 6), float32], float64) */
}

def @func_9299() -> (Tensor[(28), float32],) {
  @func_9297() /* ty=(Tensor[(28), float32],) */
}

def @func_3803() -> (Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
  %635 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %636 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %639 = @func_3544() /* ty=Tensor[(28), float32] */;
  %640 = %635.0;
  %641 = log2(%638) /* ty=Tensor[(1, 4, 7), float32] */;
  (%639, %640, %641)
}

def @func_10881() -> (Tensor[(110), float64],) {
  %643 = fn () -> (Tensor[(110), float64],) {
    %642 = @func_8383() /* ty=Tensor[(110), float64] */;
    (%642,)
  };
  %643() /* ty=(Tensor[(110), float64],) */
}

def @func_7813() -> Tensor[(28), float64] {
  %646 = fn () -> Tensor[(28), float64] {
    %644 = @func_5406() /* ty=Tensor[(28), float32] */;
    %645 = cast(%644, dtype="float64") /* ty=Tensor[(28), float64] */;
    acosh(%645) /* ty=Tensor[(28), float64] */
  };
  %646() /* ty=Tensor[(28), float64] */
}

def @main(%var_11997: Tensor[(15, 15, 4), uint32]) -> (Tensor[(15, 15, 4), uint32], Tensor[(15, 15, 4), uint64]) {
  %647 = cast(%var_11997, dtype="uint32") /* ty=Tensor[(15, 15, 4), uint32] */;
  %648 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(15, 15, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 15, 4), uint32] */, dtype="uint32") /* ty=Tensor[(15, 15, 4), uint32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %651 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 15, 4), uint32] */, dtype="uint64") /* ty=Tensor[(15, 15, 4), uint64] */;
  %652 = shape_of(%var_11997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%var_11997, dtype="uint64") /* ty=Tensor[(15, 15, 4), uint64] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %655 = multiply(%649, %650) /* ty=Tensor[(15, 15, 4), uint32] */;
  %656 = subtract(%653, %654) /* ty=Tensor[(15, 15, 4), uint64] */;
  (%655, %656)
}

def @func_3159() -> (Tensor[(28), float32], float32) {
  @func_3157() /* ty=(Tensor[(28), float32], float32) */
}

def @func_7511(%var_7498: Tensor[(9, 15, 11), float64]) -> (Tensor[(9, 15, 11), float64],) {
  %657 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %658 = shape_of(%var_7498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_7498, dtype="float64") /* ty=Tensor[(9, 15, 11), float64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %661 = floor_divide(%659, %660) /* ty=Tensor[(9, 15, 11), float64] */;
  (%661,)
}

def @func_7307() -> (Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) {
  %662 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
  %663 = log10(%662) /* ty=Tensor[(3, 2, 15), float64] */;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %665 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
  %666 = log(%664) /* ty=Tensor[(3, 2, 15), float32] */;
  %667 = acosh(%665) /* ty=Tensor[(3, 2, 15), float64] */;
  (%666, %667)
}

def @func_8267() -> (Tensor[(1, 4, 7), float32],) {
  @func_8265() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_6117() -> (Tensor[(1, 4, 7), float32],) {
  @func_6115() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_10493(%var_10491: Tensor[(11, 4, 7), float32]) -> (Tensor[(11, 10), float64], Tensor[(11, 4, 7), uint32]) {
  @func_10490(%var_10491) /* ty=(Tensor[(11, 10), float64], Tensor[(11, 4, 7), uint32]) */
}

def @func_8036() -> (Tensor[(110), float64],) {
  @func_8034() /* ty=(Tensor[(110), float64],) */
}

def @func_2569(%var_2566: Tensor[(13, 13, 13), int32], %var_2567: Tensor[(13, 13, 13), int32], %var_2568: Tensor[(28), float32]) -> (Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) {
  %677 = fn (%var_2544: Tensor[(13, 13, 13), int32], %var_2545: Tensor[(13, 13, 13), int32], %var_2552: Tensor[(28), float32]) -> (Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) {
    %668 = cast(%var_2545, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
    %669 = shape_of(%var_2544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%var_2544, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %672 = cast(%var_2552, dtype="float32") /* ty=Tensor[(28), float32] */;
    %673 = reshape(%672, newshape=[28]) /* ty=Tensor[(28), float32] */;
    %674 = @func_1712(%673) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %675 = add(%670, %671) /* ty=Tensor[(13, 13, 13), int32] */;
    %676 = %674.2;
    (%675, %676, %var_2552)
  };
  %677(%var_2566, %var_2567, %var_2568) /* ty=(Tensor[(13, 13, 13), int32], float32, Tensor[(28), float32]) */
}

def @func_5748(%var_5746: Tensor[(7, 14, 16), int64], %var_5747: Tensor[(7, 14, 16), int64]) -> Tensor[(7, 14, 16), int64] {
  @func_5744(%var_5746, %var_5747) /* ty=Tensor[(7, 14, 16), int64] */
}

def @func_8499() -> Tensor[(110), float64] {
  %678 = fn () -> Tensor[(110), float64] {
    @func_5600() /* ty=Tensor[(110), float64] */
  };
  %678() /* ty=Tensor[(110), float64] */
}

def @func_9158() -> (Tensor[(22, 5), float64],) {
  %681 = fn () -> (Tensor[(22, 5), float64],) {
    %679 = @func_6830() /* ty=(Tensor[(28), float32], Tensor[(22, 5), float64]) */;
    %680 = %679.1;
    (%680,)
  };
  %681() /* ty=(Tensor[(22, 5), float64],) */
}

def @func_11223() -> (Tensor[(100), float64],) {
  %684 = fn () -> (Tensor[(100), float64],) {
    %682 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
    %683 = %682.4;
    (%683,)
  };
  %684() /* ty=(Tensor[(100), float64],) */
}

def @func_4052(%var_4042: Tensor[(15, 1, 14), uint16]) -> (Tensor[(15, 6, 14), bool], Tensor[(28), float32]) {
  %685 = cast(%var_4042, dtype="bool") /* ty=Tensor[(15, 1, 14), bool] */;
  %686 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 6, 14), uint16] */, dtype="bool") /* ty=Tensor[(15, 6, 14), bool] */;
  %687 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %688 = greater_equal(%685, %686) /* ty=Tensor[(15, 6, 14), bool] */;
  %689 = %687.0;
  (%688, %689)
}

def @func_10466() -> (Tensor[(22, 5), float64], float64, Tensor[(110), float32]) {
  @func_10464() /* ty=(Tensor[(22, 5), float64], float64, Tensor[(110), float32]) */
}

def @func_7343() -> (Tensor[(110), float64], float32, float32, Tensor[(1, 4, 7), float32]) {
  @func_7341() /* ty=(Tensor[(110), float64], float32, float32, Tensor[(1, 4, 7), float32]) */
}

def @func_7469() -> (Tensor[(28), float32],) {
  @func_7467() /* ty=(Tensor[(28), float32],) */
}

def @func_5172() -> Tensor[(1, 4, 7), float32] {
  %690 = fn () -> Tensor[(1, 4, 7), float32] {
    @func_4249() /* ty=Tensor[(1, 4, 7), float32] */
  };
  %690() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_8611() -> (Tensor[(1, 4, 7), float32], Tensor[(10, 1, 11), float64], float64, Tensor[(110), float64]) {
  %691 = @func_6038() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %692 = %691.1;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %694 = cast(0.170316f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %695 = cast(meta[relay.Constant][39] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %696 = reshape(%694, newshape=[]) /* ty=float64 */;
  %697 = reshape(%695, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
  %698 = @func_2062(%696, %697) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %699 = atan(%693) /* ty=Tensor[(1, 4, 7), float32] */;
  %700 = %698.0;
  (%699, %700, 0.170316f64 /* ty=float64 */, meta[relay.Constant][39] /* ty=Tensor[(110), float64] */)
}

def @func_5601() -> Tensor[(110), float64] {
  %702 = fn () -> Tensor[(110), float64] {
    %701 = @func_4792() /* ty=(Tensor[(110), float64],) */;
    %701.0
  };
  %702() /* ty=Tensor[(110), float64] */
}

def @func_7587(%var_7575: Tensor[(192), int16]) -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(192), int16], float64) {
  %703 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %704 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %705 = @func_5912() /* ty=(Tensor[(110), float64],) */;
  %706 = cast(%var_7575, dtype="int16") /* ty=Tensor[(192), int16] */;
  %707 = cast(-1.00242f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %708 = reshape(%706, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %709 = reshape(%707, newshape=[]) /* ty=float64 */;
  %710 = @func_2187(%708, %709) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %711 = %703.0;
  %712 = %704.0;
  %713 = %705.0;
  %714 = %710.1;
  (%711, %712, %713, %714, %var_7575, -1.00242f64 /* ty=float64 */)
}

def @func_2163(%var_2161: Tensor[(2, 6, 12), float32]) -> Tensor[(2, 6, 12), float32] {
  @func_2160(%var_2161) /* ty=Tensor[(2, 6, 12), float32] */
}

def @func_5734() -> Tensor[(110), float64] {
  %716 = fn () -> Tensor[(110), float64] {
    %715 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
    %715.0
  };
  %716() /* ty=Tensor[(110), float64] */
}

def @func_4040(%var_4039: Tensor[(100), float64]) -> (Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) {
  %723 = fn (%var_4033: Tensor[(100), float64]) -> (Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) {
    %717 = cast(%var_4033, dtype="float64") /* ty=Tensor[(100), float64] */;
    %718 = cast(%var_4033, dtype="float64") /* ty=Tensor[(100), float64] */;
    %719 = reshape(%717, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
    %720 = reshape(%718, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
    %721 = @func_3544() /* ty=Tensor[(28), float32] */;
    %722 = @func_2539(%719, %720) /* ty=Tensor[(2, 10, 5), float64] */;
    (%721, %722, %var_4033)
  };
  %723(%var_4039) /* ty=(Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) */
}

def @func_5589() -> Tensor[(110), float64] {
  @func_5587() /* ty=Tensor[(110), float64] */
}

def @func_9343() -> (Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) {
  @func_9341() /* ty=(Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) */
}

def @func_6349(%var_6347: Tensor[(15, 6, 6), float64]) -> Tensor[(15, 6, 6), float64] {
  @func_6346(%var_6347) /* ty=Tensor[(15, 6, 6), float64] */
}

def @func_11278() -> Tensor[(13, 12, 4), float64] {
  %724 = fn () -> Tensor[(13, 12, 4), float64] {
    @func_9003() /* ty=Tensor[(13, 12, 4), float64] */
  };
  %724() /* ty=Tensor[(13, 12, 4), float64] */
}

def @func_4336(%var_4334: Tensor[(2, 10, 5), float64]) -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) {
  @func_4333(%var_4334) /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) */
}

def @func_11670() -> Tensor[(28), float32] {
  @func_11668() /* ty=Tensor[(28), float32] */
}

def @func_2846() -> Tensor[(28), float32] {
  %726 = fn () -> Tensor[(28), float32] {
    %725 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
    %725.3
  };
  %726() /* ty=Tensor[(28), float32] */
}

def @func_4819() -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %727 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %728 = %727.1;
  %729 = @func_2845() /* ty=Tensor[(28), float32] */;
  (%728, %729)
}

def @func_5456() -> (Tensor[(28), float32], Tensor[(110, 1), float32]) {
  %735 = fn () -> (Tensor[(28), float32], Tensor[(110, 1), float32]) {
    %730 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
    %731 = %730.1;
    %732 = cast(%731, dtype="float32") /* ty=Tensor[(110, 1), float32] */;
    %733 = @func_2845() /* ty=Tensor[(28), float32] */;
    %734 = sigmoid(%732) /* ty=Tensor[(110, 1), float32] */;
    (%733, %734)
  };
  %735() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float32]) */
}

def @func_3392() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) {
  @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */
}

def @func_8239(%var_8237: float64) -> (Tensor[(110), float64], Tensor[(28), float32], float64, Tensor[(28), float32]) {
  @func_8236(%var_8237) /* ty=(Tensor[(110), float64], Tensor[(28), float32], float64, Tensor[(28), float32]) */
}

def @func_11059() -> (Tensor[(28), float32],) {
  %736 = @func_8347() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) */;
  %737 = %736.0;
  (%737,)
}

def @func_5352(%var_5350: Tensor[(1, 110), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(100), float64], Tensor[(2, 10, 5), float64], Tensor[(110), float64], Tensor[(1, 110), float64], Tensor[(1, 4, 7), bool], Tensor[(28), float64], Tensor[(1, 110), float64]) {
  @func_5349(%var_5350) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(100), float64], Tensor[(2, 10, 5), float64], Tensor[(110), float64], Tensor[(1, 110), float64], Tensor[(1, 4, 7), bool], Tensor[(28), float64], Tensor[(1, 110), float64]) */
}

def @func_9921() -> (Tensor[(28), float32],) {
  %738 = @func_3655() /* ty=(Tensor[(28), float32],) */;
  %739 = %738.0;
  (%739,)
}

def @func_10464() -> (Tensor[(22, 5), float64], float64, Tensor[(110), float32]) {
  %740 = @func_9157() /* ty=(Tensor[(22, 5), float64],) */;
  %741 = cast(8.29186f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %742 = reshape(%741, newshape=[]) /* ty=float64 */;
  %743 = @func_4781(%742) /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float32") /* ty=Tensor[(110), float32] */;
  %746 = sin(%745) /* ty=Tensor[(110), float32] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(110), float32] */;
  %748 = %740.0;
  %749 = rsqrt(%747) /* ty=Tensor[(110), float32] */;
  (%748, 8.29186f64 /* ty=float64 */, %749)
}

def @func_6346(%var_6327: Tensor[(15, 6, 6), float64]) -> Tensor[(15, 6, 6), float64] {
  %750 = cast(%var_6327, dtype="float64") /* ty=Tensor[(15, 6, 6), float64] */;
  cos(%750) /* ty=Tensor[(15, 6, 6), float64] */
}

def @func_5612() -> (Tensor[(22, 5), float64],) {
  %751 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %752 = %751.2;
  (%752,)
}

def @func_5349(%var_5312: Tensor[(1, 110), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(100), float64], Tensor[(2, 10, 5), float64], Tensor[(110), float64], Tensor[(1, 110), float64], Tensor[(1, 4, 7), bool], Tensor[(28), float64], Tensor[(1, 110), float64]) {
  %753 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %754 = @func_3390() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(1, 100), float64]) */;
  %755 = cast(%var_5312, dtype="float64") /* ty=Tensor[(1, 110), float64] */;
  %756 = reshape(%755, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %757 = @func_3023(%756) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
  %758 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %759 = %758.2;
  %760 = @func_3287() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %761 = %760.0;
  %762 = cast(%759, dtype="bool") /* ty=bool */;
  %763 = cast(%761, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
  %764 = cast(%759, dtype="float32") /* ty=float32 */;
  %765 = reshape(%764, newshape=[]) /* ty=float32 */;
  %766 = @func_4168(%765) /* ty=(Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) */;
  %767 = @func_3947() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) */;
  %768 = @func_4349() /* ty=Tensor[(1, 4, 7), float32] */;
  %769 = %753.4;
  %770 = %754.2;
  %771 = %757.1;
  %772 = logical_and(%762, %763) /* ty=Tensor[(1, 4, 7), bool] */;
  %773 = %766.0;
  %774 = %767.3;
  (%768, %769, %770, %771, %var_5312, %772, %773, %774)
}

def @func_6040() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  @func_6038() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */
}

def @func_7204() -> (Tensor[(28), float32], Tensor[(110), float64], Tensor[(22, 5), float64]) {
  %775 = @func_5455() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float32]) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float32") /* ty=Tensor[(28), float32] */;
  %778 = reshape(%777, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
  %779 = @func_5024(%778) /* ty=(Tensor[(110), float64], Tensor[(?, 4, 7), uint64], Tensor[(110), float64], float64, Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %780 = @func_5612() /* ty=(Tensor[(22, 5), float64],) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %783 = %779.2;
  %784 = tan(%782) /* ty=Tensor[(22, 5), float64] */;
  (%776, %783, %784)
}

def @func_9341() -> (Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) {
  %785 = @func_9110() /* ty=(Tensor[(3, 2, 15), float32],) */;
  %786 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 312), float32] */, dtype="float32") /* ty=Tensor[(2, 312), float32] */;
  %787 = cast(meta[relay.Constant][41] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %788 = reshape(%786, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %789 = reshape(%787, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %790 = @func_3733(%788, %789) /* ty=(Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) */;
  %791 = @func_5600() /* ty=Tensor[(110), float64] */;
  %792 = %785.0;
  %793 = %790.6;
  (%791, %792, %793, meta[relay.Constant][40] /* ty=Tensor[(2, 312), float32] */, meta[relay.Constant][41] /* ty=Tensor[(100), float64] */)
}

def @func_10535(%var_10533: Tensor[(210), uint16]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(210), uint16]) {
  @func_10532(%var_10533) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(210), uint16]) */
}

def @func_7129(%var_7127: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), float32], Tensor[(210), uint16]) {
  @func_7126(%var_7127) /* ty=(Tensor[(10, 6, 4), float32], Tensor[(210), uint16]) */
}

def @func_2810() -> (Tensor[(1, 4, 7), float32],) {
  @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_7341() -> (Tensor[(110), float64], float32, float32, Tensor[(1, 4, 7), float32]) {
  %794 = @func_4792() /* ty=(Tensor[(110), float64],) */;
  %795 = cast(3.6874f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %796 = reshape(%795, newshape=[]) /* ty=float32 */;
  %797 = @func_4168(%796) /* ty=(Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) */;
  %798 = @func_3947() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) */;
  %799 = %794.0;
  %800 = %797.7;
  %801 = %798.1;
  (%799, %800, 3.6874f /* ty=float32 */, %801)
}

def @func_8667(%var_8662: Tensor[(110), float64]) -> (Tensor[(110), float32],) {
  %802 = @func_5600() /* ty=Tensor[(110), float64] */;
  %803 = cast(%var_8662, dtype="float32") /* ty=Tensor[(110), float32] */;
  %804 = shape_of(%802, dtype="int32") /* ty=Tensor[(1), int32] */;
  %805 = cast(%802, dtype="float32") /* ty=Tensor[(110), float32] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?), float32] */;
  %807 = divide(%805, %806) /* ty=Tensor[(110), float32] */;
  (%807,)
}

def @func_6065(%var_6064: Tensor[(110), float64]) -> (Tensor[(110), int16],) {
  %815 = fn (%var_6056: Tensor[(110), float64]) -> (Tensor[(110), int16],) {
    %808 = @func_4792() /* ty=(Tensor[(110), float64],) */;
    %809 = %808.0;
    %810 = cast(%var_6056, dtype="int16") /* ty=Tensor[(110), int16] */;
    %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(1), int32] */;
    %812 = cast(%809, dtype="int16") /* ty=Tensor[(110), int16] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?), int16] */;
    %814 = add(%812, %813) /* ty=Tensor[(110), int16] */;
    (%814,)
  };
  %815(%var_6064) /* ty=(Tensor[(110), int16],) */
}

def @func_10400() -> (Tensor[(1, 4, 7), float32],) {
  @func_10398() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_2528() -> (Tensor[(1, 4, 7), float32],) {
  @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_7044(%var_6948: Tensor[(8, 7, 4), float32], %var_7032: Tensor[(2, 4, 7), float32]) -> (Tensor[(8, 7, 4), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64], Tensor[(2, 4, 7), uint64]) {
  %816 = cast(%var_6948, dtype="float32") /* ty=Tensor[(8, 7, 4), float32] */;
  %817 = @func_5455() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float32]) */;
  %818 = cast(meta[relay.Constant][43] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %819 = cast(meta[relay.Constant][43] /* ty=Tensor[(1568), int64] */, dtype="int64") /* ty=Tensor[(1568), int64] */;
  %820 = reshape(%818, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %821 = reshape(%819, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
  %822 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %823 = cast(meta[relay.Constant][44] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %824 = cast(meta[relay.Constant][44] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %825 = reshape(%823, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %826 = reshape(%824, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %827 = cast(meta[relay.Constant][42] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %828 = reshape(%827, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %829 = @func_3023(%828) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), bool]) */;
  %830 = %829.0;
  %831 = cast(%830, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %832 = sqrt(%831) /* ty=Tensor[(1, 4, 7), float32] */;
  %833 = cast(%832, dtype="uint64") /* ty=Tensor[(1, 4, 7), uint64] */;
  %834 = cast(%var_7032, dtype="uint64") /* ty=Tensor[(2, 4, 7), uint64] */;
  %835 = erf(%816) /* ty=Tensor[(8, 7, 4), float32] */;
  %836 = %817.0;
  %837 = @func_5744(%820, %821) /* ty=Tensor[(7, 14, 16), int64] */;
  %838 = %822.1;
  %839 = @func_2539(%825, %826) /* ty=Tensor[(2, 10, 5), float64] */;
  %840 = add(%833, %834) /* ty=Tensor[(2, 4, 7), uint64] */;
  (%835, meta[relay.Constant][42] /* ty=Tensor[(110), float64] */, %836, %837, meta[relay.Constant][43] /* ty=Tensor[(1568), int64] */, %838, %839, meta[relay.Constant][44] /* ty=Tensor[(100), float64] */, %840)
}

def @func_4251() -> Tensor[(1, 4, 7), float32] {
  @func_4249() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_2190(%var_2188: Tensor[(4, 4, 12), int16], %var_2189: float64) -> (Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) {
  %852 = fn (%var_2170: Tensor[(4, 4, 12), int16], %var_2181: float64) -> (Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) {
    %841 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 4, 12), int16] */, dtype="int16") /* ty=Tensor[(4, 4, 12), int16] */;
    %842 = shape_of(%var_2170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %843 = cast(%var_2170, dtype="int16") /* ty=Tensor[(4, 4, 12), int16] */;
    %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %845 = cast(%var_2181, dtype="float64") /* ty=float64 */;
    %846 = cast(meta[relay.Constant][46] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %847 = reshape(%845, newshape=[]) /* ty=float64 */;
    %848 = reshape(%846, newshape=[10, 1, 11]) /* ty=Tensor[(10, 1, 11), float64] */;
    %849 = @func_2062(%847, %848) /* ty=(Tensor[(10, 1, 11), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %850 = right_shift(%843, %844) /* ty=Tensor[(4, 4, 12), int16] */;
    %851 = %849.3;
    (%850, %851, %var_2181, meta[relay.Constant][46] /* ty=Tensor[(110), float64] */)
  };
  %852(%var_2188, %var_2189) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */
}

def @func_8801() -> (Tensor[(660, 28), uint16],) {
  %853 = @func_8347() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float64], Tensor[(660, 28), bool], Tensor[(660, 28), uint16], Tensor[(1, 4, 7), float32], Tensor[(660, 1), float64]) */;
  %854 = %853.3;
  (%854,)
}

def @func_2526() -> (Tensor[(1, 4, 7), float32],) {
  %855 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %856 = %855.1;
  (%856,)
}

def @func_2922() -> (Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) {
  @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */
}

def @func_9230(%var_9227: Tensor[(13, 8, 8), float32], %var_9228: Tensor[(13, 8, 8), float32], %var_9229: Tensor[(110), float64]) -> (Tensor[(13, 8, 8), float32], Tensor[(2197), int32], Tensor[(110), float64]) {
  @func_9225(%var_9227, %var_9228, %var_9229) /* ty=(Tensor[(13, 8, 8), float32], Tensor[(2197), int32], Tensor[(110), float64]) */
}

def @func_6204() -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) {
  %857 = @func_3157() /* ty=(Tensor[(28), float32], float32) */;
  %858 = cast(meta[relay.Constant][47] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %859 = cast(meta[relay.Constant][48] /* ty=Tensor[(100, 1), float64] */, dtype="float64") /* ty=Tensor[(100, 1), float64] */;
  %860 = reshape(%858, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %861 = reshape(%859, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %862 = @func_3733(%860, %861) /* ty=(Tensor[(?, 4, 7), float32], Tensor[(22, 5), bool], Tensor[(13, 12, 4), float32], Tensor[(624), float32], Tensor[(2, 10, 5), uint32], Tensor[(13, 12, 4), float32], Tensor[(28), float32]) */;
  %863 = @func_5600() /* ty=Tensor[(110), float64] */;
  %864 = @func_4249() /* ty=Tensor[(1, 4, 7), float32] */;
  %865 = %857.0;
  %866 = %862.3;
  (%863, %864, %865, %866, meta[relay.Constant][47] /* ty=Tensor[(624), float32] */, meta[relay.Constant][48] /* ty=Tensor[(100, 1), float64] */)
}

def @func_11593() -> (Tensor[(1, 4, 7), float32], Tensor[(?, 110), float32], Tensor[(192), int16]) {
  %867 = cast(meta[relay.Constant][49] /* ty=Tensor[(22, 5), float64] */, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
  %868 = reshape(%867, newshape=[1, 110]) /* ty=Tensor[(1, 110), float64] */;
  %869 = @func_5349(%868) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(100), float64], Tensor[(2, 10, 5), float64], Tensor[(110), float64], Tensor[(1, 110), float64], Tensor[(1, 4, 7), bool], Tensor[(28), float64], Tensor[(1, 110), float64]) */;
  %870 = %869.7;
  %871 = cast(meta[relay.Constant][49] /* ty=Tensor[(22, 5), float64] */, dtype="float32") /* ty=Tensor[(22, 5), float32] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(2), int32] */;
  %873 = cast(%870, dtype="float32") /* ty=Tensor[(1, 110), float32] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %875 = @func_8080() /* ty=(Tensor[(100), float64], Tensor[(192), int16], float64) */;
  %876 = @func_8179() /* ty=Tensor[(1, 4, 7), float32] */;
  %877 = power(%873, %874) /* ty=Tensor[(?, 110), float32] */;
  %878 = %875.1;
  (%876, %877, %878)
}

def @func_7206() -> (Tensor[(28), float32], Tensor[(110), float64], Tensor[(22, 5), float64]) {
  @func_7204() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(22, 5), float64]) */
}

def @func_6717(%var_6714: Tensor[(11, 6, 9), float32], %var_6715: Tensor[(2197), int32], %var_6716: Tensor[(100), float64]) -> (Tensor[(11, 6, 9), float32], Tensor[(210), uint16], Tensor[(110), float64], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) {
  %901 = fn (%var_6664: Tensor[(11, 6, 9), float32], %var_6685: Tensor[(2197), int32], %var_6700: Tensor[(100), float64]) -> (Tensor[(11, 6, 9), float32], Tensor[(210), uint16], Tensor[(110), float64], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) {
    %879 = cast(%var_6664, dtype="float32") /* ty=Tensor[(11, 6, 9), float32] */;
    %880 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
    %881 = @func_3639() /* ty=(Tensor[(110), float64],) */;
    %882 = %881.0;
    %883 = cast(%882, dtype="float64") /* ty=Tensor[(110), float64] */;
    %884 = cast(%var_6685, dtype="int32") /* ty=Tensor[(2197), int32] */;
    %885 = reshape(%883, newshape=[110]) /* ty=Tensor[(110), float64] */;
    %886 = reshape(%884, newshape=[2197]) /* ty=Tensor[(2197), int32] */;
    %887 = @func_6432(%885, %886) /* ty=(Tensor[(110), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
    %888 = %880.3;
    %889 = cast(%888, dtype="uint16") /* ty=Tensor[(210), uint16] */;
    %890 = reshape(%889, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint16] */;
    %891 = @func_4052(%890) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(28), float32]) */;
    %892 = @func_3157() /* ty=(Tensor[(28), float32], float32) */;
    %893 = cast(%var_6700, dtype="float64") /* ty=Tensor[(100), float64] */;
    %894 = reshape(%893, newshape=[100]) /* ty=Tensor[(100), float64] */;
    %895 = @func_4038(%894) /* ty=(Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) */;
    %896 = cosh(%879) /* ty=Tensor[(11, 6, 9), float32] */;
    %897 = %887.1;
    %898 = %891.1;
    %899 = %892.0;
    %900 = %895.1;
    (%896, %888, %882, %897, %var_6685, %898, %899, %900, %var_6700)
  };
  %901(%var_6714, %var_6715, %var_6716) /* ty=(Tensor[(11, 6, 9), float32], Tensor[(210), uint16], Tensor[(110), float64], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(28), float32], Tensor[(28), float32], Tensor[(2, 10, 5), float64], Tensor[(100), float64]) */
}

def @func_8613() -> (Tensor[(1, 4, 7), float32], Tensor[(10, 1, 11), float64], float64, Tensor[(110), float64]) {
  @func_8611() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(10, 1, 11), float64], float64, Tensor[(110), float64]) */
}

def @func_3805() -> (Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
  @func_3803() /* ty=(Tensor[(28), float32], Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */
}

def @func_8475(%var_8474: Tensor[(22, 5), float64]) -> (Tensor[(28), float32], float64, Tensor[(22, 5), float64]) {
  %908 = fn (%var_8462: Tensor[(22, 5), float64]) -> (Tensor[(28), float32], float64, Tensor[(22, 5), float64]) {
    %902 = @func_6830() /* ty=(Tensor[(28), float32], Tensor[(22, 5), float64]) */;
    %903 = cast(%var_8462, dtype="float64") /* ty=Tensor[(22, 5), float64] */;
    %904 = reshape(%903, newshape=[110]) /* ty=Tensor[(110), float64] */;
    %905 = @func_5895(%904) /* ty=(Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) */;
    %906 = %902.0;
    %907 = %905.2;
    (%906, %907, %var_8462)
  };
  %908(%var_8474) /* ty=(Tensor[(28), float32], float64, Tensor[(22, 5), float64]) */
}

def @func_1598(%var_1584: float32, %var_1585: Tensor[(1, 4, 7), float32]) -> Tensor[(1, 4, 7), float32] {
  %909 = cast(%var_1584, dtype="float32") /* ty=float32 */;
  %910 = cast(%var_1585, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  divide(%909, %910) /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_11668() -> Tensor[(28), float32] {
  %911 = @func_4489() /* ty=(Tensor[(28), float32],) */;
  %911.0
}

def @func_3639() -> (Tensor[(110), float64],) {
  %912 = @func_2512() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %913 = %912.3;
  (%913,)
}

def @func_6269() -> (Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) {
  %914 = @func_3947() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], float64, Tensor[(1, 110), float64]) */;
  %915 = cast(meta[relay.Constant][50] /* ty=Tensor[(210), uint16] */, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %916 = reshape(%915, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint16] */;
  %917 = @func_4052(%916) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(28), float32]) */;
  %918 = @func_5406() /* ty=Tensor[(28), float32] */;
  %919 = %914.2;
  %920 = %917.1;
  (%918, %919, %920, meta[relay.Constant][50] /* ty=Tensor[(210), uint16] */)
}

def @func_9112() -> (Tensor[(3, 2, 15), float32],) {
  @func_9110() /* ty=(Tensor[(3, 2, 15), float32],) */
}

def @func_4490() -> (Tensor[(28), float32],) {
  %923 = fn () -> (Tensor[(28), float32],) {
    %921 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
    %922 = %921.1;
    (%922,)
  };
  %923() /* ty=(Tensor[(28), float32],) */
}

def @func_10692() -> (Tensor[(110), float64], Tensor[(2, 10, 5), float32], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %924 = @func_9997() /* ty=(Tensor[(28), float32], Tensor[(110), float64]) */;
  %925 = cast(meta[relay.Constant][51] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
  %926 = reshape(%925, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
  %927 = @func_4333(%926) /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) */;
  %928 = @func_6308() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %929 = %924.1;
  %930 = %927.2;
  %931 = %928.0;
  %932 = @func_3544() /* ty=Tensor[(28), float32] */;
  (%929, %930, meta[relay.Constant][51] /* ty=Tensor[(100), float64] */, %931, %932)
}

def @func_10758() -> Tensor[(1, 4, 7), float64] {
  %934 = fn () -> Tensor[(1, 4, 7), float64] {
    %933 = @func_5685() /* ty=(Tensor[(1, 4, 7), float64],) */;
    %933.0
  };
  %934() /* ty=Tensor[(1, 4, 7), float64] */
}

def @func_8111() -> (Tensor[(28), float32],) {
  @func_8109() /* ty=(Tensor[(28), float32],) */
}

def @func_11485() -> (Tensor[(110), float64],) {
  %937 = fn () -> (Tensor[(110), float64],) {
    %935 = @func_8793() /* ty=(Tensor[(110), float64],) */;
    %936 = %935.0;
    (%936,)
  };
  %937() /* ty=(Tensor[(110), float64],) */
}

def @func_9398() -> (Tensor[(1, 4, 7), float32], Tensor[(110), bool], Tensor[(110), float64]) {
  %938 = @func_6308() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %939 = cast(meta[relay.Constant][52] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %940 = reshape(%939, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %941 = @func_5895(%940) /* ty=(Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) */;
  %942 = %938.0;
  %943 = %941.0;
  (%942, %943, meta[relay.Constant][52] /* ty=Tensor[(110), float64] */)
}

def @func_8385() -> Tensor[(110), float64] {
  @func_8383() /* ty=Tensor[(110), float64] */
}

def @func_10101() -> (Tensor[(6, 15, 2), float64],) {
  @func_10099() /* ty=(Tensor[(6, 15, 2), float64],) */
}

def @func_8699(%var_8697: Tensor[(16, 9, 12), int32]) -> (Tensor[(16, 9, 12), bool], Tensor[(16, 9, 12), bool]) {
  @func_8696(%var_8697) /* ty=(Tensor[(16, 9, 12), bool], Tensor[(16, 9, 12), bool]) */
}

def @func_5989(%var_5976: Tensor[(110, 2), float64]) -> (Tensor[(28), float32], Tensor[(110, 2), bool]) {
  %944 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %945 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
  %946 = %945.1;
  %947 = cast(%946, dtype="bool") /* ty=Tensor[(110, 1), bool] */;
  %948 = cast(%var_5976, dtype="bool") /* ty=Tensor[(110, 2), bool] */;
  %949 = %944.3;
  %950 = logical_and(%947, %948) /* ty=Tensor[(110, 2), bool] */;
  (%949, %950)
}

def @func_7432(%var_7431: Tensor[(1568), int64]) -> (Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(110), float64]) {
  %962 = fn (%var_7406: Tensor[(1568), int64]) -> (Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(110), float64]) {
    %951 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
    %952 = cast(%var_7406, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %953 = cast(%var_7406, dtype="int64") /* ty=Tensor[(1568), int64] */;
    %954 = reshape(%952, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
    %955 = reshape(%953, newshape=[7, 14, 16]) /* ty=Tensor[(7, 14, 16), int64] */;
    %956 = @func_4792() /* ty=(Tensor[(110), float64],) */;
    %957 = %951.2;
    %958 = @func_5171() /* ty=Tensor[(1, 4, 7), float32] */;
    %959 = @func_5733() /* ty=Tensor[(110), float64] */;
    %960 = @func_5744(%954, %955) /* ty=Tensor[(7, 14, 16), int64] */;
    %961 = %956.0;
    (%957, %958, %959, %960, %var_7406, %961)
  };
  %962(%var_7431) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(7, 14, 16), int64], Tensor[(1568), int64], Tensor[(110), float64]) */
}

def @func_11147() -> (float32, Tensor[(28), float32]) {
  %966 = fn () -> (float32, Tensor[(28), float32]) {
    %963 = @func_7341() /* ty=(Tensor[(110), float64], float32, float32, Tensor[(1, 4, 7), float32]) */;
    %964 = %963.1;
    %965 = @func_5406() /* ty=Tensor[(28), float32] */;
    (%964, %965)
  };
  %966() /* ty=(float32, Tensor[(28), float32]) */
}

def @func_9923() -> (Tensor[(28), float32],) {
  @func_9921() /* ty=(Tensor[(28), float32],) */
}

def @func_10554() -> (Tensor[(210), uint16],) {
  %969 = fn () -> (Tensor[(210), uint16],) {
    %967 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
    %968 = %967.3;
    (%968,)
  };
  %969() /* ty=(Tensor[(210), uint16],) */
}

def @func_10694() -> (Tensor[(110), float64], Tensor[(2, 10, 5), float32], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  @func_10692() /* ty=(Tensor[(110), float64], Tensor[(2, 10, 5), float32], Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */
}

def @func_2920() -> (Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) {
  %970 = cast(meta[relay.Constant][53] /* ty=Tensor[(192), int16] */, dtype="int16") /* ty=Tensor[(192), int16] */;
  %971 = cast(0.124844f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %972 = reshape(%970, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %973 = reshape(%971, newshape=[]) /* ty=float64 */;
  %974 = @func_2187(%972, %973) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %975 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %976 = %975.0;
  %977 = cast(%976, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %978 = reshape(%977, newshape=[28]) /* ty=Tensor[(28), float32] */;
  %979 = @func_1712(%978) /* ty=(Tensor[(11, 14, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %980 = cast(%976, dtype="float64") /* ty=Tensor[(1, 4, 7), float64] */;
  %981 = acos(%980) /* ty=Tensor[(1, 4, 7), float64] */;
  %982 = cast(%976, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %983 = shape_of(%981, dtype="int32") /* ty=Tensor[(3), int32] */;
  %984 = cast(%981, dtype="float32") /* ty=Tensor[(1, 4, 7), float32] */;
  %985 = dyn.reshape(%982, %983, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %986 = %974.3;
  %987 = %979.3;
  %988 = @func_2845() /* ty=Tensor[(28), float32] */;
  %989 = floor_divide(%984, %985) /* ty=Tensor[(?, 4, 7), float32] */;
  (%986, meta[relay.Constant][53] /* ty=Tensor[(192), int16] */, 0.124844f64 /* ty=float64 */, %987, %988, %989)
}

def @func_9003() -> Tensor[(13, 12, 4), float64] {
  %990 = @func_6903() /* ty=(Tensor[(13, 12, 4), float64],) */;
  %990.0
}

def @func_6657() -> (Tensor[(?, 4, 7), bool], Tensor[(28), float32], Tensor[(28), float32]) {
  %1004 = fn () -> (Tensor[(?, 4, 7), bool], Tensor[(28), float32], Tensor[(28), float32]) {
    %991 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
    %992 = %991.2;
    %993 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %994 = %993.0;
    %995 = cast(%994, dtype="bool") /* ty=Tensor[(28), bool] */;
    %996 = shape_of(%992, dtype="int32") /* ty=Tensor[(3), int32] */;
    %997 = cast(%992, dtype="bool") /* ty=Tensor[(1, 4, 7), bool] */;
    %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %999 = @func_2945() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
    %1000 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
    %1001 = greater(%997, %998) /* ty=Tensor[(?, 4, 7), bool] */;
    %1002 = %999.1;
    %1003 = %1000.1;
    (%1001, %1002, %1003)
  };
  %1004() /* ty=(Tensor[(?, 4, 7), bool], Tensor[(28), float32], Tensor[(28), float32]) */
}

def @func_5027(%var_5025: Tensor[(1, 4, 7), float32]) -> (Tensor[(110), float64], Tensor[(?, 4, 7), uint64], Tensor[(110), float64], float64, Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  @func_5024(%var_5025) /* ty=(Tensor[(110), float64], Tensor[(?, 4, 7), uint64], Tensor[(110), float64], float64, Tensor[(100), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */
}

def @func_9997() -> (Tensor[(28), float32], Tensor[(110), float64]) {
  %1005 = @func_8793() /* ty=(Tensor[(110), float64],) */;
  %1006 = @func_5406() /* ty=Tensor[(28), float32] */;
  %1007 = %1005.0;
  (%1006, %1007)
}

def @func_9400() -> (Tensor[(1, 4, 7), float32], Tensor[(110), bool], Tensor[(110), float64]) {
  @func_9398() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), bool], Tensor[(110), float64]) */
}

def @func_7163() -> Tensor[(28), float32] {
  %1008 = fn () -> Tensor[(28), float32] {
    @func_3544() /* ty=Tensor[(28), float32] */
  };
  %1008() /* ty=Tensor[(28), float32] */
}

def @func_10099() -> (Tensor[(6, 15, 2), float64],) {
  %1009 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %1010 = atanh(%1009) /* ty=Tensor[(6, 15, 2), float64] */;
  (%1010,)
}

def @func_7903() -> (Tensor[(22, 5), float64],) {
  @func_7901() /* ty=(Tensor[(22, 5), float64],) */
}

def @func_9446(%var_9441: Tensor[(2, 96), int16], %var_9442: float64) -> (Tensor[(1, 4, 7), float32], Tensor[(4, 4, 12), int16], Tensor[(2, 96), int16], float64) {
  %1011 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
  %1012 = cast(%var_9441, dtype="int16") /* ty=Tensor[(2, 96), int16] */;
  %1013 = cast(%var_9442, dtype="float64") /* ty=float64 */;
  %1014 = reshape(%1012, newshape=[4, 4, 12]) /* ty=Tensor[(4, 4, 12), int16] */;
  %1015 = reshape(%1013, newshape=[]) /* ty=float64 */;
  %1016 = @func_2187(%1014, %1015) /* ty=(Tensor[(4, 4, 12), int16], Tensor[(1, 4, 7), float32], float64, Tensor[(110), float64]) */;
  %1017 = %1011.1;
  %1018 = %1016.0;
  (%1017, %1018, %var_9441, %var_9442)
}

def @func_10842(%var_10841: Tensor[(110), float64]) -> (Tensor[(110), int32], Tensor[(28), float32], Tensor[(110), float64]) {
  %1032 = fn (%var_10802: Tensor[(110), float64]) -> (Tensor[(110), int32], Tensor[(28), float32], Tensor[(110), float64]) {
    %1019 = @func_9341() /* ty=(Tensor[(110), float64], Tensor[(3, 2, 15), float32], Tensor[(28), float32], Tensor[(2, 312), float32], Tensor[(100), float64]) */;
    %1020 = %1019.0;
    %1021 = cast(%var_10802, dtype="int32") /* ty=Tensor[(110), int32] */;
    %1022 = shape_of(%1020, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1023 = cast(%1020, dtype="int32") /* ty=Tensor[(110), int32] */;
    %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?), int32] */;
    %1025 = @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */;
    %1026 = @func_9997() /* ty=(Tensor[(28), float32], Tensor[(110), float64]) */;
    %1027 = %1026.1;
    %1028 = cast(%1027, dtype="float64") /* ty=Tensor[(110), float64] */;
    %1029 = maximum(%1023, %1024) /* ty=Tensor[(110), int32] */;
    %1030 = %1025.0;
    %1031 = exp(%1028) /* ty=Tensor[(110), float64] */;
    (%1029, %1030, %1031)
  };
  %1032(%var_10841) /* ty=(Tensor[(110), int32], Tensor[(28), float32], Tensor[(110), float64]) */
}

def @func_6038() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  %1033 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %1034 = @func_4819() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32]) */;
  %1035 = %1033.0;
  %1036 = %1034.0;
  (%1035, %1036)
}

def @func_5551(%var_5549: Tensor[(330, 2), float32], %var_5550: float64) -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(330, 2), int16], Tensor[(2, 6, 12), float64], Tensor[(144), float32], Tensor[(110), float64], Tensor[(192), int16], Tensor[(330, 2), int16]) {
  @func_5547(%var_5549, %var_5550) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(330, 2), int16], Tensor[(2, 6, 12), float64], Tensor[(144), float32], Tensor[(110), float64], Tensor[(192), int16], Tensor[(330, 2), int16]) */
}

def @func_7759() -> (Tensor[(3, 2, 15), float32], Tensor[(28), float32]) {
  %1037 = @func_7307() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) */;
  %1038 = %1037.0;
  %1039 = cast(%1038, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %1040 = @func_3892() /* ty=(Tensor[(28), float32], Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(100), float64]) */;
  %1041 = cosh(%1039) /* ty=Tensor[(3, 2, 15), float32] */;
  %1042 = %1040.0;
  (%1041, %1042)
}

def @func_6088() -> (Tensor[(110, 1), float32],) {
  %1045 = fn () -> (Tensor[(110, 1), float32],) {
    %1043 = @func_5455() /* ty=(Tensor[(28), float32], Tensor[(110, 1), float32]) */;
    %1044 = %1043.1;
    (%1044,)
  };
  %1045() /* ty=(Tensor[(110, 1), float32],) */
}

def @func_2945() -> (Tensor[(1, 4, 7), float32], Tensor[(28), float32]) {
  %1046 = @func_2808() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %1047 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
  %1048 = %1046.0;
  %1049 = %1047.3;
  (%1048, %1049)
}

def @func_5897(%var_5896: Tensor[(110), float64]) -> (Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) {
  %1066 = fn (%var_5864: Tensor[(110), float64]) -> (Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) {
    %1050 = @func_5733() /* ty=Tensor[(110), float64] */;
    %1051 = cast(%var_5864, dtype="bool") /* ty=Tensor[(110), bool] */;
    %1052 = shape_of(%1050, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1053 = cast(%1050, dtype="bool") /* ty=Tensor[(110), bool] */;
    %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1055 = cast(-3.66783f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1056 = reshape(%1055, newshape=[]) /* ty=float64 */;
    %1057 = @func_4781(%1056) /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(1, 4, 7), float32], float64) */;
    %1058 = @func_4872() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110, 1), float64], Tensor[(22, 5), float64]) */;
    %1059 = cast(meta[relay.Constant][55] /* ty=Tensor[(100), float64] */, dtype="float64") /* ty=Tensor[(100), float64] */;
    %1060 = reshape(%1059, newshape=[2, 10, 5]) /* ty=Tensor[(2, 10, 5), float64] */;
    %1061 = @func_4333(%1060) /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32], Tensor[(2, 10, 5), float32], Tensor[(28), float32], Tensor[(2197), int32], Tensor[(?, 100), int32]) */;
    %1062 = not_equal(%1053, %1054) /* ty=Tensor[(110), bool] */;
    %1063 = %1057.1;
    %1064 = %1058.2;
    %1065 = %1061.4;
    (%1062, %1063, -3.66783f64 /* ty=float64 */, %1064, %1065, meta[relay.Constant][55] /* ty=Tensor[(100), float64] */)
  };
  %1066(%var_5896) /* ty=(Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) */
}

def @func_9546(%var_9506: Tensor[(110), float64], %var_9539: Tensor[(110), float32]) -> (Tensor[(28), float32], Tensor[(110), uint32], Tensor[(110), bool]) {
  %1067 = @func_8439() /* ty=(Tensor[(28), float32],) */;
  %1068 = @func_3639() /* ty=(Tensor[(110), float64],) */;
  %1069 = %1068.0;
  %1070 = cast(%var_9506, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %1071 = shape_of(%1069, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1072 = cast(%1069, dtype="uint32") /* ty=Tensor[(110), uint32] */;
  %1073 = dyn.reshape(%1070, %1071, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %1074 = cast(%1069, dtype="float32") /* ty=Tensor[(110), float32] */;
  %1075 = acos(%1074) /* ty=Tensor[(110), float32] */;
  %1076 = cast(%var_9539, dtype="bool") /* ty=Tensor[(110), bool] */;
  %1077 = shape_of(%1075, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1078 = cast(%1075, dtype="bool") /* ty=Tensor[(110), bool] */;
  %1079 = dyn.reshape(%1076, %1077, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1080 = %1067.0;
  %1081 = logical_xor(%1072, %1073) /* ty=Tensor[(110), uint32] */;
  %1082 = logical_and(%1078, %1079) /* ty=Tensor[(110), bool] */;
  (%1080, %1081, %1082)
}

def @func_3157() -> (Tensor[(28), float32], float32) {
  %1083 = @func_2467() /* ty=(Tensor[(15, 8, 3), float64], Tensor[(1, 4, 7), float32], float32, Tensor[(28), float32]) */;
  %1084 = @func_2845() /* ty=Tensor[(28), float32] */;
  %1085 = %1083.2;
  (%1084, %1085)
}

def @func_8265() -> (Tensor[(1, 4, 7), float32],) {
  %1086 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
  %1087 = %1086.0;
  (%1087,)
}

def @func_9129() -> (Tensor[(1, 4, 7), float32],) {
  @func_9127() /* ty=(Tensor[(1, 4, 7), float32],) */
}

def @func_7126(%var_7109: Tensor[(10, 6, 4), float32]) -> (Tensor[(10, 6, 4), float32], Tensor[(210), uint16]) {
  %1088 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 6, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %1089 = shape_of(%var_7109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1090 = cast(%var_7109, dtype="float32") /* ty=Tensor[(10, 6, 4), float32] */;
  %1091 = dyn.reshape(%1088, %1089, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1092 = @func_6269() /* ty=(Tensor[(28), float32], float64, Tensor[(28), float32], Tensor[(210), uint16]) */;
  %1093 = power(%1090, %1091) /* ty=Tensor[(10, 6, 4), float32] */;
  %1094 = %1092.3;
  (%1093, %1094)
}

def @func_7514(%var_7512: Tensor[(9, 15, 11), float64]) -> (Tensor[(9, 15, 11), float64],) {
  @func_7511(%var_7512) /* ty=(Tensor[(9, 15, 11), float64],) */
}

def @func_5182() -> Tensor[(1, 4, 7), float32] {
  @func_5180() /* ty=Tensor[(1, 4, 7), float32] */
}

def @func_8439() -> (Tensor[(28), float32],) {
  %1095 = @func_7759() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(28), float32]) */;
  %1096 = %1095.1;
  (%1096,)
}

def @func_4793() -> (Tensor[(110), float64],) {
  %1099 = fn () -> (Tensor[(110), float64],) {
    %1097 = @func_4372() /* ty=(Tensor[(110), float64], Tensor[(13, 12, 4), float32], Tensor[(624), float32]) */;
    %1098 = %1097.0;
    (%1098,)
  };
  %1099() /* ty=(Tensor[(110), float64],) */
}

def @func_7309() -> (Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) {
  @func_7307() /* ty=(Tensor[(3, 2, 15), float32], Tensor[(3, 2, 15), float64]) */
}

def @func_7733(%var_7731: Tensor[(11, 10), float64]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float32], Tensor[(11, 10), float64], Tensor[(2197), float32]) {
  @func_7730(%var_7731) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), float32], Tensor[(11, 10), float64], Tensor[(2197), float32]) */
}

def @func_8383() -> Tensor[(110), float64] {
  %1100 = @func_5912() /* ty=(Tensor[(110), float64],) */;
  %1100.0
}

def @func_6863() -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
  %1104 = fn () -> (Tensor[(110), float64], Tensor[(1, 4, 7), float32]) {
    %1101 = @func_2920() /* ty=(Tensor[(110), float64], Tensor[(192), int16], float64, Tensor[(28), float32], Tensor[(28), float32], Tensor[(?, 4, 7), float32]) */;
    %1102 = %1101.0;
    %1103 = @func_4349() /* ty=Tensor[(1, 4, 7), float32] */;
    (%1102, %1103)
  };
  %1104() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32]) */
}

def @func_8696(%var_8687: Tensor[(16, 9, 12), int32]) -> (Tensor[(16, 9, 12), bool], Tensor[(16, 9, 12), bool]) {
  %1105 = cast(meta[relay.Constant][57] /* ty=Tensor[(16, 9, 12), int32] */, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %1106 = shape_of(%var_8687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1107 = cast(%var_8687, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %1108 = dyn.reshape(%1105, %1106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1109 = cast(%var_8687, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %1110 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(16, 9, 12), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1111 = cast(meta[relay.Constant][57] /* ty=Tensor[(16, 9, 12), int32] */, dtype="bool") /* ty=Tensor[(16, 9, 12), bool] */;
  %1112 = dyn.reshape(%1109, %1110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1113 = less_equal(%1107, %1108) /* ty=Tensor[(16, 9, 12), bool] */;
  %1114 = greater_equal(%1111, %1112) /* ty=Tensor[(16, 9, 12), bool] */;
  (%1113, %1114)
}

def @func_10532(%var_10513: Tensor[(210), uint16]) -> (Tensor[(1, 4, 7), float32], Tensor[(110), float64], Tensor[(28), float32], Tensor[(210), uint16]) {
  %1115 = @func_9398() /* ty=(Tensor[(1, 4, 7), float32], Tensor[(110), bool], Tensor[(110), float64]) */;
  %1116 = @func_9997() /* ty=(Tensor[(28), float32], Tensor[(110), float64]) */;
  %1117 = cast(%var_10513, dtype="uint16") /* ty=Tensor[(210), uint16] */;
  %1118 = reshape(%1117, newshape=[15, 1, 14]) /* ty=Tensor[(15, 1, 14), uint16] */;
  %1119 = @func_4052(%1118) /* ty=(Tensor[(15, 6, 14), bool], Tensor[(28), float32]) */;
  %1120 = %1115.0;
  %1121 = %1116.1;
  %1122 = %1119.1;
  (%1120, %1121, %1122, %var_10513)
}

def @func_4023() -> (Tensor[(28), float32], Tensor[(1, 4, 7), float32]) {
  @func_4021() /* ty=(Tensor[(28), float32], Tensor[(1, 4, 7), float32]) */
}

def @func_8179() -> Tensor[(1, 4, 7), float32] {
  %1123 = @func_6204() /* ty=(Tensor[(110), float64], Tensor[(1, 4, 7), float32], Tensor[(28), float32], Tensor[(624), float32], Tensor[(624), float32], Tensor[(100, 1), float64]) */;
  %1123.1
}

def @func_4170(%var_4169: float32) -> (Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) {
  %1144 = fn (%var_4166: float32) -> (Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) {
    %1124 = @func_3544() /* ty=Tensor[(28), float32] */;
    %1125 = cast(%1124, dtype="float64") /* ty=Tensor[(28), float64] */;
    %1126 = @func_3655() /* ty=(Tensor[(28), float32],) */;
    %1127 = cast(meta[relay.Constant][58] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1128 = reshape(%1127, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
    %1129 = @func_3973(%1128) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
    %1130 = @func_2526() /* ty=(Tensor[(1, 4, 7), float32],) */;
    %1131 = cast(meta[relay.Constant][58] /* ty=Tensor[(660), float32] */, dtype="float32") /* ty=Tensor[(660), float32] */;
    %1132 = reshape(%1131, newshape=[5, 12, 11]) /* ty=Tensor[(5, 12, 11), float32] */;
    %1133 = @func_3973(%1132) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */;
    %1134 = cast(%var_4166, dtype="float32") /* ty=float32 */;
    %1135 = %1129.1;
    %1136 = cast(%1135, dtype="float32") /* ty=Tensor[(28), float32] */;
    %1137 = reshape(%1134, newshape=[]) /* ty=float32 */;
    %1138 = reshape(%1136, newshape=[1, 4, 7]) /* ty=Tensor[(1, 4, 7), float32] */;
    %1139 = sigmoid(%1125) /* ty=Tensor[(28), float64] */;
    %1140 = %1126.0;
    %1141 = %1130.0;
    %1142 = %1133.0;
    %1143 = @func_1598(%1137, %1138) /* ty=Tensor[(1, 4, 7), float32] */;
    (%1139, %1140, %1135, meta[relay.Constant][58] /* ty=Tensor[(660), float32] */, %1141, %1142, %1143, %var_4166)
  };
  %1144(%var_4169) /* ty=(Tensor[(28), float64], Tensor[(28), float32], Tensor[(28), float32], Tensor[(660), float32], Tensor[(1, 4, 7), float32], Tensor[(5, 12, 11), bool], Tensor[(1, 4, 7), float32], float32) */
}

def @func_5614() -> (Tensor[(22, 5), float64],) {
  @func_5612() /* ty=(Tensor[(22, 5), float64],) */
}

def @func_9225(%var_9210: Tensor[(13, 8, 8), float32], %var_9211: Tensor[(13, 8, 8), float32], %var_9220: Tensor[(110), float64]) -> (Tensor[(13, 8, 8), float32], Tensor[(2197), int32], Tensor[(110), float64]) {
  %1145 = cast(%var_9211, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %1146 = shape_of(%var_9210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1147 = cast(%var_9210, dtype="float32") /* ty=Tensor[(13, 8, 8), float32] */;
  %1148 = dyn.reshape(%1145, %1146, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1149 = cast(%var_9220, dtype="float64") /* ty=Tensor[(110), float64] */;
  %1150 = reshape(%1149, newshape=[110]) /* ty=Tensor[(110), float64] */;
  %1151 = @func_5895(%1150) /* ty=(Tensor[(110), bool], Tensor[(1, 4, 7), float32], float64, Tensor[(22, 5), float64], Tensor[(2197), int32], Tensor[(100), float64]) */;
  %1152 = power(%1147, %1148) /* ty=Tensor[(13, 8, 8), float32] */;
  %1153 = %1151.4;
  (%1152, %1153, %var_9220)
}

def @func_3976(%var_3974: Tensor[(5, 12, 11), float32]) -> (Tensor[(5, 12, 11), bool], Tensor[(28), float32]) {
  @func_3973(%var_3974) /* ty=(Tensor[(5, 12, 11), bool], Tensor[(28), float32]) */
}

def @func_7901() -> (Tensor[(22, 5), float64],) {
  %1154 = @func_5612() /* ty=(Tensor[(22, 5), float64],) */;
  %1155 = %1154.0;
  (%1155,)
}

def @func_4230(%var_4228: Tensor[(144, 1), float32], %var_4229: Tensor[(2, 6, 12), float32]) -> (Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float64], Tensor[(144, 1), float64]) {
  @func_4226(%var_4228, %var_4229) /* ty=(Tensor[(1, 4, 7), float32], Tensor[(2, 6, 12), float64], Tensor[(144, 1), float64]) */
}

def @func_10906() -> Tensor[(110), float64] {
  %1157 = fn () -> Tensor[(110), float64] {
    %1156 = @func_8793() /* ty=(Tensor[(110), float64],) */;
    %1156.0
  };
  %1157() /* ty=Tensor[(110), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen683/build/output.py:3434: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen683/build/output.py", line 3439, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(900) tvmgen_default_fused_reshape_multiply_kernel0(uint* __restrict__ T_multiply, uint* __restrict__ placeholder, uint* __restrict__ placeholder1) {
  T_multiply[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] * placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(900) tvmgen_default_fused_cast_subtract_kernel0(uint64_t* __restrict__ T_subtract, uint* __restrict__ placeholder, uint64_t* __restrict__ placeholder1) {
  T_subtract[(((int)threadIdx.x))] = (((uint64_t)placeholder[(((int)threadIdx.x))]) - placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

