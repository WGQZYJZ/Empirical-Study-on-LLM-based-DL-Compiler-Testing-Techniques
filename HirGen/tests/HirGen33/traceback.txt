==========mod==========
#[version = "0.0.5"]
def @func_812() -> (Tensor[(2, 12, 13), float32],) {
  %0 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  (%0,)
}

def @func_634() -> Tensor[(2, 12, 13), float32] {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  cos(%1) /* ty=Tensor[(2, 12, 13), float32] */
}

def @func_3284() -> Tensor[(2, 12, 13), bool] {
  %2 = @func_1953() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */;
  %2.1
}

def @func_2745() -> (Tensor[(80), uint8], int64, Tensor[(5, 8, 2), uint16], Tensor[(6, 6, 11), uint64], Tensor[(2, 12, 13), bool]) {
  %3 = @func_2082() /* ty=Tensor[(80), uint8] */;
  %4 = cast(%3, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %5 = reshape(%4, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
  %6 = @func_886(%5) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
  %7 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 132), int64] */, dtype="int64") /* ty=Tensor[(3, 132), int64] */;
  %9 = reshape(%7, newshape=[]) /* ty=int64 */;
  %10 = reshape(%8, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %11 = @func_785(%9, %10) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) */;
  %12 = %11.2;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 132), int64] */, dtype="uint64") /* ty=Tensor[(3, 132), uint64] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="uint64") /* ty=Tensor[(6, 6, 11), uint64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %17 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %18 = %6.0;
  %19 = logical_xor(%15, %16) /* ty=Tensor[(6, 6, 11), uint64] */;
  %20 = %17.0;
  (%3, 7 /* ty=int64 */, %18, %19, %20)
}

def @func_4656(%var_4638: Tensor[(180), int64]) -> (Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), float64]) {
  %21 = cast(%var_4638, dtype="int64") /* ty=Tensor[(180), int64] */;
  %22 = cast(%var_4638, dtype="int64") /* ty=Tensor[(180), int64] */;
  %23 = reshape(%21, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %24 = reshape(%22, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %25 = @func_1116(%23, %24) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %26 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
  %27 = %26.1;
  %28 = cast(%27, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %29 = acosh(%28) /* ty=Tensor[(5, 8, 2), float32] */;
  %30 = cast(%29, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %31 = %25.0;
  %32 = sigmoid(%30) /* ty=Tensor[(5, 8, 2), float64] */;
  (%31, %var_4638, %32)
}

def @func_1116(%var_1111: Tensor[(10, 3, 6), int64], %var_1112: Tensor[(10, 3, 6), int64]) -> (Tensor[(10, 3, 6), bool],) {
  %33 = cast(%var_1112, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %34 = shape_of(%var_1111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_1111, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = less(%35, %36) /* ty=Tensor[(10, 3, 6), bool] */;
  (%37,)
}

def @func_2378() -> (Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) {
  %38 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %39 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %40 = %38.1;
  (%39, %40)
}

def @func_5175(%var_5171: Tensor[(13, 4, 4), uint8]) -> (Tensor[(13, 4, 4), uint8],) {
  %41 = cast(%var_5171, dtype="uint8") /* ty=Tensor[(13, 4, 4), uint8] */;
  %42 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(13, 4, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 4, 4), uint8] */, dtype="uint8") /* ty=Tensor[(13, 4, 4), uint8] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %45 = add(%43, %44) /* ty=Tensor[(13, 4, 4), uint8] */;
  (%45,)
}

def @func_1914() -> Tensor[(2, 12, 13), bool] {
  %46 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %46.1
}

def @func_3038() -> (Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) {
  %47 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 70), float32] */, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 70), float32] */, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %51 = reshape(%48, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %52 = reshape(%49, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), float64] */;
  %53 = reshape(%50, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %54 = @func_971(%51, %52, %53) /* ty=(Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) */;
  %55 = %47.1;
  %56 = %54.2;
  (%55, %56, meta[relay.Constant][3] /* ty=Tensor[(7, 70), float32] */, meta[relay.Constant][4] /* ty=Tensor[(312), float64] */)
}

def @func_4784(%var_4724: Tensor[(1, 80), uint16]) -> (Tensor[(2, 12, 13), bool], Tensor[(6, 6, 11), float64], Tensor[(2640, 1), float32], Tensor[(90), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(1, 80), float32]) {
  %57 = @func_3520() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %58 = @func_2745() /* ty=(Tensor[(80), uint8], int64, Tensor[(5, 8, 2), uint16], Tensor[(6, 6, 11), uint64], Tensor[(2, 12, 13), bool]) */;
  %59 = %58.3;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %61 = asinh(%60) /* ty=Tensor[(6, 6, 11), float32] */;
  %62 = cast(%61, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %63 = cast(%var_4724, dtype="uint16") /* ty=Tensor[(1, 80), uint16] */;
  %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %65 = reshape(%63, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint16] */;
  %66 = reshape(%64, newshape=[90]) /* ty=Tensor[(90), float32] */;
  %67 = @func_4363(%65, %66) /* ty=(Tensor[(2640, ?), int32], Tensor[(5, 8, 2), float64], Tensor[(5, 8, 2), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(90), float32], Tensor[(2640, 1), float32], Tensor[(15, 8, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) */;
  %68 = @func_3919() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %69 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(945), int32] */, dtype="int32") /* ty=Tensor[(945), int32] */;
  %71 = reshape(%70, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
  %72 = cast(%var_4724, dtype="float32") /* ty=Tensor[(1, 80), float32] */;
  %73 = %57.1;
  %74 = log10(%62) /* ty=Tensor[(6, 6, 11), float64] */;
  %75 = %67.6;
  %76 = %68.1;
  %77 = %69.0;
  %78 = @func_1983(%71) /* ty=Tensor[(9, 15, 7), bool] */;
  %79 = log(%72) /* ty=Tensor[(1, 80), float32] */;
  (%73, %74, %75, meta[relay.Constant][5] /* ty=Tensor[(90), float32] */, %76, %77, %78, meta[relay.Constant][6] /* ty=Tensor[(945), int32] */, %79)
}

def @func_5229() -> (Tensor[(2, 12, 13), bool],) {
  %80 = @func_4946() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %81 = %80.0;
  (%81,)
}

def @func_2346(%var_2341: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), float32],) {
  %82 = cast(%var_2341, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %83 = cosh(%82) /* ty=Tensor[(16, 2, 14), float32] */;
  (%83,)
}

def @func_1316(%var_1306: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), bool],) {
  %84 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %85 = cast(%var_1306, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %89 = less(%87, %88) /* ty=Tensor[(2, 12, 13), bool] */;
  (%89,)
}

def @func_3410(%var_3387: Tensor[(2, 12, 13), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %90 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
  %91 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %93 = sigmoid(%92) /* ty=Tensor[(2, 12, 13), float32] */;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %95 = cosh(%94) /* ty=Tensor[(2, 12, 13), float32] */;
  %96 = cast(%var_3387, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
  %101 = cast(%var_3387, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %102 = reshape(%101, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %103 = @func_1316(%102) /* ty=(Tensor[(2, 12, 13), bool],) */;
  %104 = %90.2;
  %105 = not_equal(%98, %99) /* ty=Tensor[(2, 12, 13), bool] */;
  %106 = %100.0;
  %107 = %103.0;
  (%104, %105, %106, %107)
}

def @func_1088() -> (Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) {
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %109 = reshape(%108, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
  %110 = @func_886(%109) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
  %111 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %112 = %110.0;
  (%111, %112, meta[relay.Constant][7] /* ty=Tensor[(80), uint8] */)
}

def @func_1530(%var_1501: Tensor[(2, 12, 13), bool], %var_1506: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) {
  %113 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %114 = cast(%var_1501, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %118 = cast(%var_1506, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
  %119 = shape_of(%var_1501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%var_1501, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %122 = bitwise_or(%120, %121) /* ty=Tensor[(2, 12, 13), int64] */;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %124 = maximum(%116, %117) /* ty=Tensor[(2, 12, 13), float32] */;
  %125 = asin(%123) /* ty=Tensor[(2, 12, 13), float64] */;
  (%124, %125)
}

def @func_886(%var_864: Tensor[(5, 8, 2), uint8]) -> (Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) {
  %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 2), uint8] */, dtype="uint8") /* ty=Tensor[(5, 8, 2), uint8] */;
  %127 = shape_of(%var_864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_864, dtype="uint8") /* ty=Tensor[(5, 8, 2), uint8] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %130 = subtract(%128, %129) /* ty=Tensor[(5, 8, 2), uint8] */;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %132 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 2), uint8] */, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %135 = mod(%133, %134) /* ty=Tensor[(5, 8, 2), float32] */;
  %136 = cast(%135, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
  %137 = shape_of(%var_864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%var_864, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %140 = cast(%135, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %141 = left_shift(%138, %139) /* ty=Tensor[(5, 8, 2), uint16] */;
  %142 = asinh(%140) /* ty=Tensor[(5, 8, 2), float64] */;
  (%141, %142)
}

def @func_5322(%var_5299: Tensor[(7, 15, 5), uint8]) -> Tensor[(7, 15, 5), bool] {
  %143 = cast(%var_5299, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %144 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 15, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 15, 5), uint8] */, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%145, %146) /* ty=Tensor[(7, 15, 5), bool] */
}

def @func_1271(%var_1224: Tensor[(4, 1, 16), float64], %var_1260: Tensor[(312), float64]) -> (Tensor[(5, 8, 2), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), uint16], Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(312), float64], Tensor[(4, ?, 16), bool], Tensor[(4, ?, 16), uint16]) {
  %147 = cast(meta[relay.Constant][10] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %148 = reshape(%147, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
  %149 = @func_886(%148) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
  %150 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %152 = cast(%var_1260, dtype="float64") /* ty=Tensor[(312), float64] */;
  %153 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %154 = reshape(%151, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %155 = reshape(%152, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), float64] */;
  %156 = reshape(%153, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %157 = @func_971(%154, %155, %156) /* ty=(Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) */;
  %158 = cast(%var_1224, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
  %159 = cos(%158) /* ty=Tensor[(4, 1, 16), float64] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(4, 1, 16), float32] */;
  %161 = log2(%160) /* ty=Tensor[(4, 1, 16), float32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = cast(%159, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %167 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%161, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = logical_and(%168, %169) /* ty=Tensor[(4, ?, 16), bool] */;
  %171 = cast(%170, dtype="uint16") /* ty=Tensor[(4, ?, 16), uint16] */;
  %172 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%159, dtype="uint16") /* ty=Tensor[(4, 1, 16), uint16] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %175 = %149.1;
  %176 = %150.1;
  %177 = %157.3;
  %178 = logical_or(%164, %165) /* ty=Tensor[(4, ?, 16), bool] */;
  %179 = bitwise_and(%173, %174) /* ty=Tensor[(4, ?, 16), uint16] */;
  (%175, meta[relay.Constant][10] /* ty=Tensor[(80), uint8] */, %176, %177, meta[relay.Constant][11] /* ty=Tensor[(490), float32] */, %var_1260, %178, %179)
}

def @func_1831(%var_1819: Tensor[(11, 2, 6), float32]) -> Tensor[(11, 2, 6), int32] {
  %180 = cast(%var_1819, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
  %181 = sigmoid(%180) /* ty=Tensor[(11, 2, 6), float32] */;
  %182 = cast(%181, dtype="int32") /* ty=Tensor[(11, 2, 6), int32] */;
  %183 = shape_of(%var_1819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%var_1819, dtype="int32") /* ty=Tensor[(11, 2, 6), int32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%184, %185) /* ty=Tensor[(11, 2, 6), int32] */
}

def @func_584(%var_574: Tensor[(2, 15, 3), float64]) -> (Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) {
  %186 = cast(%var_574, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %187 = asinh(%186) /* ty=Tensor[(2, 15, 3), float64] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %189 = cast(%187, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
  %190 = log2(%188) /* ty=Tensor[(2, 15, 3), float64] */;
  %191 = sinh(%189) /* ty=Tensor[(2, 15, 3), float64] */;
  (%190, %191)
}

def @func_2842() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) {
  %192 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
  %193 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  (%192, %193)
}

def @func_3021(%var_3007: Tensor[(8, 13, 13), float64], %var_3016: Tensor[(8, 13, 13), float64]) -> (Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) {
  %194 = cast(%var_3007, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %195 = sinh(%194) /* ty=Tensor[(8, 13, 13), float64] */;
  %196 = cast(%var_3016, dtype="int8") /* ty=Tensor[(8, 13, 13), int8] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="int8") /* ty=Tensor[(8, 13, 13), int8] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %200 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %201 = multiply(%198, %199) /* ty=Tensor[(8, 13, 13), int8] */;
  (%200, %201)
}

def @func_2438() -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) {
  %202 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
  %203 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
  %204 = %202.1;
  (%203, %204)
}

def @func_3872() -> (Tensor[(2, 12, 13), bool],) {
  %205 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
  (%205,)
}

def @func_4239(%var_4165: Tensor[(200), float32], %var_4187: Tensor[(10, 4, 5), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(10, 4, 5), float64], Tensor[(80), uint8], Tensor[(2, 12, 13), bool], Tensor[(490), float32], Tensor[(200), float32]) {
  %206 = @func_1953() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */;
  %207 = cast(%var_4165, dtype="float32") /* ty=Tensor[(200), float32] */;
  %208 = reshape(%207, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
  %209 = @func_3171(%208) /* ty=(Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) */;
  %210 = %209.0;
  %211 = cast(%var_4187, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%210, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %215 = @func_4093() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */;
  %216 = cast(meta[relay.Constant][12] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %217 = reshape(%216, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %218 = @func_1807(%217) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) */;
  %219 = cast(%var_4187, dtype="float32") /* ty=Tensor[(10, 4, 5), float32] */;
  %220 = shape_of(%var_4165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %221 = cast(%var_4165, dtype="float32") /* ty=Tensor[(200), float32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?), float32] */;
  %223 = %206.1;
  %224 = power(%213, %214) /* ty=Tensor[(10, 4, 5), float64] */;
  %225 = %215.1;
  %226 = %218.0;
  %227 = divide(%221, %222) /* ty=Tensor[(200), float32] */;
  (%223, %224, %225, %226, meta[relay.Constant][12] /* ty=Tensor[(490), float32] */, %227)
}

def @func_3807(%var_3774: Tensor[(945), int32]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(9, 15, 7), bool], Tensor[(945), int32]) {
  %228 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %230 = cast(%var_3774, dtype="int32") /* ty=Tensor[(945), int32] */;
  %231 = reshape(%230, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
  %232 = log(%229) /* ty=Tensor[(2, 12, 13), float32] */;
  %233 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %234 = @func_1983(%231) /* ty=Tensor[(9, 15, 7), bool] */;
  (%232, %233, %234, %var_3774)
}

def @func_1863(%var_1843: Tensor[(80), uint8]) -> (Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) {
  %235 = cast(%var_1843, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %236 = reshape(%235, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
  %237 = @func_886(%236) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
  %238 = %237.0;
  %239 = cast(%var_1843, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %240 = reshape(%239, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
  %241 = @func_886(%240) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
  %242 = %241.1;
  %243 = cast(%242, dtype="bool") /* ty=Tensor[(5, 8, 2), bool] */;
  %244 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%238, dtype="bool") /* ty=Tensor[(5, 8, 2), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = @func_1730() /* ty=Tensor[(2, 12, 13), float64] */;
  %248 = not_equal(%245, %246) /* ty=Tensor[(5, 8, 2), bool] */;
  (%247, %var_1843, %248)
}

def @func_2877() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %249 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %250 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %251 = %249.0;
  (%250, %251)
}

def @func_2198(%var_2145: Tensor[(2, 12, 13), float64]) -> (Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) {
  %252 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
  %253 = cast(%252, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %254 = acos(%253) /* ty=Tensor[(2, 12, 13), float64] */;
  %255 = cast(%252, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %259 = floor_mod(%257, %258) /* ty=Tensor[(2, 12, 13), float64] */;
  %260 = cast(%var_2145, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %264 = cast(%var_2145, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %265 = cast(%259, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %266 = reshape(%264, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %267 = reshape(%265, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %268 = @func_1530(%266, %267) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
  %269 = mod(%262, %263) /* ty=Tensor[(2, 12, 13), float64] */;
  %270 = %268.1;
  %271 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  (%269, %270, %271)
}

def @func_3987() -> (Tensor[(80), uint8],) {
  %272 = @func_2082() /* ty=Tensor[(80), uint8] */;
  (%272,)
}

def @func_1023() -> Tensor[(2, 12, 13), bool] {
  %273 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %275 = erf(%274) /* ty=Tensor[(2, 12, 13), float64] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%278, %279) /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_2683() -> (Tensor[(2, 12, 13), bool],) {
  %280 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %281 = %280.1;
  (%281,)
}

def @func_689(%var_685: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), float32],) {
  %282 = cast(%var_685, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %283 = tan(%282) /* ty=Tensor[(7, 10, 7), float32] */;
  (%283,)
}

def @func_4363(%var_4283: Tensor[(5, 8, 2), uint16], %var_4349: Tensor[(90), float32]) -> (Tensor[(2640, ?), int32], Tensor[(5, 8, 2), float64], Tensor[(5, 8, 2), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(90), float32], Tensor[(2640, 1), float32], Tensor[(15, 8, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) {
  %284 = cast(meta[relay.Constant][13] /* ty=Tensor[(2640, 1), float64] */, dtype="float64") /* ty=Tensor[(2640, 1), float64] */;
  %285 = reshape(%284, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %286 = @func_1146(%285) /* ty=Tensor[(16, 15, 11), bool] */;
  %287 = cast(%286, dtype="int32") /* ty=Tensor[(16, 15, 11), int32] */;
  %288 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2640, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(2640, 1), float64] */, dtype="int32") /* ty=Tensor[(2640, 1), int32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %291 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %292 = %291.1;
  %293 = cast(%var_4283, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %297 = bitwise_and(%295, %296) /* ty=Tensor[(5, 8, 2), uint16] */;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %299 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
  %300 = %299.1;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %302 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%297, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %305 = @func_3712() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %306 = cast(%var_4349, dtype="float32") /* ty=Tensor[(90), float32] */;
  %307 = reshape(%306, newshape=[3, 30]) /* ty=Tensor[(3, 30), float32] */;
  %308 = @func_3672(%307) /* ty=(Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(15, 8, 3), float32], Tensor[(3, 30), int32], Tensor[(8, 13, 13), int8]) */;
  %309 = cast(meta[relay.Constant][13] /* ty=Tensor[(2640, 1), float64] */, dtype="float32") /* ty=Tensor[(2640, 1), float32] */;
  %310 = @func_3069() /* ty=(Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) */;
  %311 = cast(meta[relay.Constant][14] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %312 = reshape(%311, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %313 = @func_689(%312) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %314 = bitwise_xor(%289, %290) /* ty=Tensor[(2640, ?), int32] */;
  %315 = sqrt(%298) /* ty=Tensor[(5, 8, 2), float64] */;
  %316 = floor_divide(%303, %304) /* ty=Tensor[(5, 8, 2), float64] */;
  %317 = %305.1;
  %318 = %308.1;
  %319 = cosh(%309) /* ty=Tensor[(2640, 1), float32] */;
  %320 = %310.0;
  %321 = %313.0;
  (%314, %315, %316, %317, %318, %var_4349, %319, %320, %321, meta[relay.Constant][14] /* ty=Tensor[(490), float32] */)
}

def @func_1602(%var_1600: Tensor[(180), int64]) -> (Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(80), uint8], Tensor[(64), float64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(10, 3, 6), bool], Tensor[(180), int64]) {
  %322 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %323 = %322.0;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %325 = sqrt(%324) /* ty=Tensor[(2, 12, 13), float64] */;
  %326 = cast(%325, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %327 = cast(%325, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %328 = reshape(%326, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %329 = reshape(%327, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %330 = @func_1530(%328, %329) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
  %331 = %330.1;
  %332 = cast(%331, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %333 = cast(%323, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %334 = reshape(%332, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %335 = reshape(%333, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %336 = @func_1530(%334, %335) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
  %337 = cast(meta[relay.Constant][15] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %338 = cast(%323, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %339 = reshape(%337, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float64] */;
  %340 = reshape(%338, newshape=[312]) /* ty=Tensor[(312), float64] */;
  %341 = @func_1271(%339, %340) /* ty=(Tensor[(5, 8, 2), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), uint16], Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(312), float64], Tensor[(4, ?, 16), bool], Tensor[(4, ?, 16), uint16]) */;
  %342 = cast(meta[relay.Constant][16] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %343 = reshape(%342, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
  %344 = @func_584(%343) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) */;
  %345 = cast(meta[relay.Constant][17] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %346 = reshape(%345, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %347 = @func_689(%346) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %348 = cast(%var_1600, dtype="int64") /* ty=Tensor[(180), int64] */;
  %349 = cast(%var_1600, dtype="int64") /* ty=Tensor[(180), int64] */;
  %350 = reshape(%348, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %351 = reshape(%349, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %352 = @func_1116(%350, %351) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %353 = %336.0;
  %354 = %341.1;
  %355 = %344.0;
  %356 = %347.0;
  %357 = %352.0;
  (%325, %331, %353, %354, meta[relay.Constant][15] /* ty=Tensor[(64), float64] */, %355, meta[relay.Constant][16] /* ty=Tensor[(90), float64] */, %356, meta[relay.Constant][17] /* ty=Tensor[(490), float32] */, %357, %var_1600)
}

def @func_2514(%var_2490: int64, %var_2504: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 15, 3), int8], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(396), bool]) {
  %358 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %359 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %360 = cast(%359, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %361 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%358, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %365 = cast(%var_2490, dtype="int64") /* ty=int64 */;
  %366 = cast(meta[relay.Constant][18] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %367 = reshape(%365, newshape=[]) /* ty=int64 */;
  %368 = reshape(%366, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %369 = @func_785(%367, %368) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) */;
  %370 = %369.0;
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 15, 3), float64] */, dtype="int8") /* ty=Tensor[(2, 15, 3), int8] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="int8") /* ty=Tensor[(2, 15, 3), int8] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %375 = cast(%var_2504, dtype="float32") /* ty=Tensor[(490), float32] */;
  %376 = reshape(%375, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %377 = @func_689(%376) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %378 = cast(meta[relay.Constant][18] /* ty=Tensor[(396), int64] */, dtype="bool") /* ty=Tensor[(396), bool] */;
  %379 = cast(%var_2490, dtype="bool") /* ty=bool */;
  %380 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %381 = equal(%362, %363) /* ty=Tensor[(2, 12, 13), bool] */;
  %382 = %364.0;
  %383 = logical_xor(%373, %374) /* ty=Tensor[(2, 15, 3), int8] */;
  %384 = %377.0;
  %385 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %386 = less(%378, %379) /* ty=Tensor[(396), bool] */;
  (%380, %381, %382, %383, %384, %var_2504, %385, %386)
}

def @func_1807(%var_1785: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) {
  %387 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %388 = %387.1;
  %389 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 12, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = cast(%var_1785, dtype="float32") /* ty=Tensor[(490), float32] */;
  %394 = reshape(%393, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %395 = @func_689(%394) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %396 = %395.0;
  %397 = cast(%var_1785, dtype="bool") /* ty=Tensor[(490), bool] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %401 = greater_equal(%391, %392) /* ty=Tensor[(2, 12, 13), bool] */;
  %402 = logical_and(%399, %400) /* ty=Tensor[(7, 10, 7), bool] */;
  (%401, %402)
}

def @func_3171(%var_3162: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) {
  %403 = cast(%var_3162, dtype="float32") /* ty=Tensor[(10, 4, 5), float32] */;
  %404 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
  %405 = asinh(%403) /* ty=Tensor[(10, 4, 5), float32] */;
  %406 = %404.1;
  (%405, %406)
}

def @func_2082() -> Tensor[(80), uint8] {
  %407 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %407.2
}

def @func_2108() -> (Tensor[(2, 12, 13), bool],) {
  %408 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  (%408,)
}

def @func_2415(%var_2387: Tensor[(4, 5, 8), float64]) -> (Tensor[(4, 5, 8), bool],) {
  %409 = cast(%var_2387, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %410 = log(%409) /* ty=Tensor[(4, 5, 8), float64] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %412 = atan(%411) /* ty=Tensor[(4, 5, 8), float64] */;
  %413 = cast(%var_2387, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = greater_equal(%415, %416) /* ty=Tensor[(4, 5, 8), bool] */;
  (%417,)
}

def @func_3520() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %418 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %419 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %420 = %418.1;
  (%419, %420)
}

def @func_971(%var_910: Tensor[(490), float32], %var_912: Tensor[(2, 12, 13), float64], %var_951: Tensor[(7, 10, 7), float32]) -> (Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) {
  %421 = @func_812() /* ty=(Tensor[(2, 12, 13), float32],) */;
  %422 = %421.0;
  %423 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 12, 13), float32] */, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %427 = power(%425, %426) /* ty=Tensor[(2, 12, 13), float64] */;
  %428 = cast(%var_912, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %432 = cast(%422, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %433 = cast(%var_910, dtype="float32") /* ty=Tensor[(490), float32] */;
  %434 = reshape(%433, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %435 = @func_689(%434) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %436 = %435.0;
  %437 = cast(%var_951, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = add(%430, %431) /* ty=Tensor[(2, 12, 13), float32] */;
  %442 = atanh(%432) /* ty=Tensor[(2, 12, 13), float32] */;
  %443 = not_equal(%439, %440) /* ty=Tensor[(7, 10, 7), bool] */;
  (%var_910, %441, %442, %443)
}

def @func_1459() -> Tensor[(2, 12, 13), bool] {
  @func_1023() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_5282() -> Tensor[(2, 12, 13), bool] {
  %444 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %444.1
}

def @func_2773(%var_2768: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool], Tensor[(490), float32]) {
  %445 = @func_812() /* ty=(Tensor[(2, 12, 13), float32],) */;
  %446 = cast(%var_2768, dtype="float32") /* ty=Tensor[(490), float32] */;
  %447 = reshape(%446, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %448 = @func_1807(%447) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) */;
  %449 = %445.0;
  %450 = %448.1;
  (%449, %450, %var_2768)
}

def @func_1953() -> (Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) {
  %451 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %452 = %451.1;
  %453 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  (%452, %453)
}

def @func_3867() -> Tensor[(2, 12, 13), float64] {
  @func_1730() /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_4999() -> Tensor[(2, 12, 13), bool] {
  @func_1023() /* ty=Tensor[(2, 12, 13), bool] */
}

def @main(%var_5371: Tensor[(6, 14, 3), float32], %var_5428: Tensor[(6, 14, 3), float32]) -> (Tensor[(6, 14, 3), float32], Tensor[(2, 12, 13), bool], Tensor[(6, 14, 3), float32], Tensor[(2, 12, 13), bool], Tensor[(6, 14, 3), float64], Tensor[(6, 14, 3), float64], Tensor[(6, 14, 3), bool]) {
  %454 = cast(%var_5371, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %455 = tan(%454) /* ty=Tensor[(6, 14, 3), float32] */;
  %456 = cast(%var_5371, dtype="uint8") /* ty=Tensor[(6, 14, 3), uint8] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="uint8") /* ty=Tensor[(6, 14, 3), uint8] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %460 = left_shift(%458, %459) /* ty=Tensor[(6, 14, 3), uint8] */;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %462 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%455, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %465 = @func_3520() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %466 = cast(%460, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %467 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%455, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %470 = @func_3712() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %471 = cast(%var_5371, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %472 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%460, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %475 = cast(%455, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %476 = cast(%var_5428, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %477 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%455, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %480 = divide(%463, %464) /* ty=Tensor[(6, 14, 3), float32] */;
  %481 = %465.1;
  %482 = mod(%468, %469) /* ty=Tensor[(6, 14, 3), float32] */;
  %483 = %470.0;
  %484 = floor_divide(%473, %474) /* ty=Tensor[(6, 14, 3), float64] */;
  %485 = log(%475) /* ty=Tensor[(6, 14, 3), float64] */;
  %486 = logical_and(%478, %479) /* ty=Tensor[(6, 14, 3), bool] */;
  (%480, %481, %482, %483, %484, %485, %486)
}

def @func_2607(%var_2546: Tensor[(945), int32], %var_2575: Tensor[(490), float32], %var_2581: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), int64], Tensor[(7, 10, 7), bool], Tensor[(2, 12, 13), float32], Tensor[(490), bool]) {
  %487 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %488 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %489 = cast(%488, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %490 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%487, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = cast(%var_2546, dtype="int32") /* ty=Tensor[(945), int32] */;
  %494 = reshape(%493, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
  %495 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %496 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 12, 13), float32] */, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
  %497 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%488, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %500 = cast(%var_2575, dtype="float32") /* ty=Tensor[(490), float32] */;
  %501 = reshape(%500, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %502 = @func_1807(%501) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) */;
  %503 = cast(%487, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %504 = %495.0;
  %505 = cast(%504, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %506 = reshape(%503, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %507 = reshape(%505, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %508 = @func_1530(%506, %507) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
  %509 = cast(%var_2581, dtype="bool") /* ty=Tensor[(490), bool] */;
  %510 = shape_of(%var_2575, dtype="int32") /* ty=Tensor[(1), int32] */;
  %511 = cast(%var_2575, dtype="bool") /* ty=Tensor[(490), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?), bool] */;
  %513 = less(%511, %512) /* ty=Tensor[(490), bool] */;
  %514 = cast(%513, dtype="bool") /* ty=Tensor[(490), bool] */;
  %515 = shape_of(%var_2581, dtype="int32") /* ty=Tensor[(1), int32] */;
  %516 = cast(%var_2581, dtype="bool") /* ty=Tensor[(490), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?), bool] */;
  %518 = logical_or(%491, %492) /* ty=Tensor[(2, 12, 13), bool] */;
  %519 = @func_1983(%494) /* ty=Tensor[(9, 15, 7), bool] */;
  %520 = multiply(%498, %499) /* ty=Tensor[(2, 12, 13), int64] */;
  %521 = %502.1;
  %522 = %508.0;
  %523 = logical_or(%516, %517) /* ty=Tensor[(490), bool] */;
  (%518, %519, %var_2546, %504, %520, %521, %522, %523)
}

def @func_785(%var_744: int64, %var_745: Tensor[(6, 6, 11), int64]) -> (Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) {
  %524 = cast(meta[relay.Constant][23] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %525 = reshape(%524, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
  %526 = @func_584(%525) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) */;
  %527 = cast(%var_745, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %528 = acos(%527) /* ty=Tensor[(6, 6, 11), float32] */;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %530 = tan(%529) /* ty=Tensor[(6, 6, 11), float32] */;
  %531 = cast(%var_744, dtype="int64") /* ty=int64 */;
  %532 = cast(%var_745, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %533 = bitwise_and(%531, %532) /* ty=Tensor[(6, 6, 11), int64] */;
  %534 = cast(%533, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %535 = shape_of(%var_745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%var_745, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %538 = mod(%536, %537) /* ty=Tensor[(6, 6, 11), float64] */;
  %539 = cast(%538, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %540 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%530, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %543 = %526.1;
  %544 = right_shift(%541, %542) /* ty=Tensor[(6, 6, 11), int64] */;
  (%543, meta[relay.Constant][23] /* ty=Tensor[(90), float64] */, %544)
}

def @func_4423(%var_4395: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), bool], Tensor[(180), int64], Tensor[(180), int64], Tensor[(2, 12, 13), float64]) {
  %545 = @func_4277() /* ty=(Tensor[(312), float64], Tensor[(2, 12, 13), bool]) */;
  %546 = %545.1;
  %547 = cast(%var_4395, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %548 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%546, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), int64] */, dtype="int64") /* ty=Tensor[(180), int64] */;
  %552 = reshape(%551, newshape=[180]) /* ty=Tensor[(180), int64] */;
  %553 = @func_1602(%552) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(80), uint8], Tensor[(64), float64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(10, 3, 6), bool], Tensor[(180), int64]) */;
  %554 = less_equal(%549, %550) /* ty=Tensor[(2, 12, 13), bool] */;
  %555 = %553.10;
  %556 = @func_1730() /* ty=Tensor[(2, 12, 13), float64] */;
  (%554, %555, meta[relay.Constant][24] /* ty=Tensor[(180), int64] */, %556)
}

def @func_5124(%var_5109: Tensor[(5, 8, 2), uint16]) -> (Tensor[(5, 8, 2), float32], Tensor[(80), uint8]) {
  %557 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %558 = %557.1;
  %559 = cast(%var_5109, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %563 = add(%561, %562) /* ty=Tensor[(5, 8, 2), float32] */;
  %564 = @func_2082() /* ty=Tensor[(80), uint8] */;
  (%563, %564)
}

def @func_1340(%var_1335: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) {
  %565 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %566 = cast(%var_1335, dtype="float32") /* ty=Tensor[(490), float32] */;
  %567 = reshape(%566, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %568 = @func_689(%567) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %569 = %565.0;
  %570 = %568.0;
  (%569, %570, %var_1335)
}

def @func_4603(%var_4560: Tensor[(5, 3, 1), int64], %var_4561: Tensor[(5, 3, 10), int64], %var_4569: Tensor[(490), float32], %var_4576: Tensor[(5, 3, 10), int64]) -> (Tensor[(5, 3, 10), int64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(5, 3, 10), float32], Tensor[(2, 12, 13), float64], Tensor[(312), bool]) {
  %571 = cast(%var_4560, dtype="int64") /* ty=Tensor[(5, 3, 1), int64] */;
  %572 = cast(%var_4561, dtype="int64") /* ty=Tensor[(5, 3, 10), int64] */;
  %573 = cast(meta[relay.Constant][25] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %574 = reshape(%573, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
  %575 = @func_584(%574) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) */;
  %576 = cast(%var_4569, dtype="float32") /* ty=Tensor[(490), float32] */;
  %577 = reshape(%576, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %578 = @func_1340(%577) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) */;
  %579 = cast(%var_4576, dtype="float32") /* ty=Tensor[(5, 3, 10), float32] */;
  %580 = shape_of(%var_4561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_4561, dtype="float32") /* ty=Tensor[(5, 3, 10), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %583 = cast(meta[relay.Constant][26] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %584 = reshape(%583, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %585 = @func_4423(%584) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(180), int64], Tensor[(180), int64], Tensor[(2, 12, 13), float64]) */;
  %586 = maximum(%571, %572) /* ty=Tensor[(5, 3, 10), int64] */;
  %587 = %575.0;
  %588 = %578.1;
  %589 = minimum(%581, %582) /* ty=Tensor[(5, 3, 10), float32] */;
  %590 = %585.3;
  (%586, %587, meta[relay.Constant][25] /* ty=Tensor[(90), float64] */, %588, %var_4569, %589, %590, meta[relay.Constant][26] /* ty=Tensor[(312), bool] */)
}

def @func_2210() -> Tensor[(2, 12, 13), float32] {
  %591 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %591.0
}

def @func_1983(%var_1975: Tensor[(9, 15, 7), int32]) -> Tensor[(9, 15, 7), bool] {
  %592 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 15, 7), int32] */, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
  %593 = shape_of(%var_1975, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%var_1975, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%594, %595) /* ty=Tensor[(9, 15, 7), bool] */
}

def @func_3672(%var_3641: Tensor[(3, 30), float32]) -> (Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(15, 8, 3), float32], Tensor[(3, 30), int32], Tensor[(8, 13, 13), int8]) {
  %596 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %597 = cast(%596, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %598 = reshape(%597, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %599 = @func_1316(%598) /* ty=(Tensor[(2, 12, 13), bool],) */;
  %600 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
  %601 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
  %602 = cast(%var_3641, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %603 = reshape(%602, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), float32] */;
  %604 = @func_3335(%603) /* ty=(Tensor[(2, 9, 5), float32], Tensor[(15, 8, 3), float32]) */;
  %605 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 30), float32] */, dtype="int32") /* ty=Tensor[(3, 30), int32] */;
  %606 = shape_of(%var_3641, dtype="int32") /* ty=Tensor[(2), int32] */;
  %607 = cast(%var_3641, dtype="int32") /* ty=Tensor[(3, 30), int32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %609 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
  %610 = @func_2082() /* ty=Tensor[(80), uint8] */;
  %611 = %599.0;
  %612 = %600.0;
  %613 = %601.1;
  %614 = %604.1;
  %615 = left_shift(%607, %608) /* ty=Tensor[(3, 30), int32] */;
  %616 = %609.3;
  (%610, %596, %611, %612, %613, %614, %615, %616)
}

def @func_4002() -> (Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), bool], Tensor[(2, 40), uint8]) {
  %617 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 40), uint8] */, dtype="uint8") /* ty=Tensor[(2, 40), uint8] */;
  %618 = reshape(%617, newshape=[80]) /* ty=Tensor[(80), uint8] */;
  %619 = @func_1863(%618) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) */;
  %620 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %621 = %619.2;
  (%620, %621, meta[relay.Constant][29] /* ty=Tensor[(2, 40), uint8] */)
}

def @func_4093() -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) {
  %622 = @func_2438() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */;
  %623 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %624 = %622.0;
  %625 = %623.2;
  (%624, %625)
}

def @func_4448() -> (Tensor[(945), int32],) {
  %626 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
  %627 = %626.2;
  (%627,)
}

def @func_3069() -> (Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) {
  %628 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(15, 8, 3), float32] */;
  %629 = cast(meta[relay.Constant][31] /* ty=Tensor[(40, 2), uint8] */, dtype="uint8") /* ty=Tensor[(40, 2), uint8] */;
  %630 = reshape(%629, newshape=[80]) /* ty=Tensor[(80), uint8] */;
  %631 = @func_1863(%630) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) */;
  %632 = asinh(%628) /* ty=Tensor[(15, 8, 3), float32] */;
  %633 = %631.2;
  (%632, %633, meta[relay.Constant][31] /* ty=Tensor[(40, 2), uint8] */)
}

def @func_4859() -> Tensor[(2, 12, 13), float64] {
  %634 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %636 = log2(%635) /* ty=Tensor[(2, 12, 13), float64] */;
  %637 = cast(%636, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  rsqrt(%637) /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_4946() -> (Tensor[(2, 12, 13), bool],) {
  %638 = @func_2877() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %639 = %638.1;
  (%639,)
}

def @func_2277() -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) {
  %640 = @func_1953() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */;
  %641 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %642 = @func_2082() /* ty=Tensor[(80), uint8] */;
  %643 = %640.1;
  (%641, %642, %643)
}

def @func_3129() -> (Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) {
  %644 = cast(meta[relay.Constant][32] /* ty=Tensor[(945), int32] */, dtype="int32") /* ty=Tensor[(945), int32] */;
  %645 = reshape(%644, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
  %646 = cast(meta[relay.Constant][33] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %647 = cast(meta[relay.Constant][33] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %648 = reshape(%646, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %649 = reshape(%647, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %650 = @func_3021(%648, %649) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) */;
  %651 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %652 = @func_1983(%645) /* ty=Tensor[(9, 15, 7), bool] */;
  %653 = %650.1;
  (%651, %652, meta[relay.Constant][32] /* ty=Tensor[(945), int32] */, %653, meta[relay.Constant][33] /* ty=Tensor[(1352), float64] */)
}

def @func_2950(%var_2908: Tensor[(448), float32]) -> (Tensor[(9, 12, 6), float64], Tensor[(16, 2, 14), float32], Tensor[(448), float32], Tensor[(9, 12, 6), float32], Tensor[(11, 2, 6), float64], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32]) {
  %654 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 6), float64] */;
  %655 = cast(%var_2908, dtype="float32") /* ty=Tensor[(448), float32] */;
  %656 = reshape(%655, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %657 = @func_2346(%656) /* ty=(Tensor[(16, 2, 14), float32],) */;
  %658 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 12, 6), float64] */, dtype="float32") /* ty=Tensor[(9, 12, 6), float32] */;
  %659 = cast(meta[relay.Constant][35] /* ty=Tensor[(33, 4), float32] */, dtype="float32") /* ty=Tensor[(33, 4), float32] */;
  %660 = reshape(%659, newshape=[11, 2, 6]) /* ty=Tensor[(11, 2, 6), float32] */;
  %661 = @func_1831(%660) /* ty=Tensor[(11, 2, 6), int32] */;
  %662 = cast(meta[relay.Constant][35] /* ty=Tensor[(33, 4), float32] */, dtype="float64") /* ty=Tensor[(33, 4), float64] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="float64") /* ty=Tensor[(11, 2, 6), float64] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %666 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 70), float32] */, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
  %667 = reshape(%666, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %668 = @func_2773(%667) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool], Tensor[(490), float32]) */;
  %669 = erf(%654) /* ty=Tensor[(9, 12, 6), float64] */;
  %670 = %657.0;
  %671 = atanh(%658) /* ty=Tensor[(9, 12, 6), float32] */;
  %672 = subtract(%664, %665) /* ty=Tensor[(11, 2, 6), float64] */;
  %673 = %668.0;
  (%669, %670, %var_2908, %671, %672, %673, meta[relay.Constant][36] /* ty=Tensor[(7, 70), float32] */)
}

def @func_3935() -> (Tensor[(2, 12, 13), bool],) {
  %674 = @func_3712() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %675 = %674.2;
  (%675,)
}

def @func_1648() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %676 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %677 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  (%676, %677)
}

def @func_1146(%var_1123: Tensor[(16, 15, 11), float64]) -> Tensor[(16, 15, 11), bool] {
  %678 = cast(%var_1123, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %679 = erf(%678) /* ty=Tensor[(16, 15, 11), float64] */;
  %680 = cast(%679, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %681 = shape_of(%var_1123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%var_1123, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %684 = floor_mod(%682, %683) /* ty=Tensor[(16, 15, 11), float64] */;
  %685 = cast(%679, dtype="bool") /* ty=Tensor[(16, 15, 11), bool] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="bool") /* ty=Tensor[(16, 15, 11), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%687, %688) /* ty=Tensor[(16, 15, 11), bool] */
}

def @func_3919() -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) {
  %689 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
  %690 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %691 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %692 = %689.0;
  (%690, %691, %692)
}

def @func_4277() -> (Tensor[(312), float64], Tensor[(2, 12, 13), bool]) {
  %693 = @func_3038() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) */;
  %694 = @func_2108() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %695 = %693.3;
  %696 = %694.0;
  (%695, %696)
}

def @func_1730() -> Tensor[(2, 12, 13), float64] {
  %697 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  exp(%699) /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_3712() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) {
  %700 = @func_3520() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %701 = @func_2842() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) */;
  %702 = %700.1;
  %703 = @func_1730() /* ty=Tensor[(2, 12, 13), float64] */;
  %704 = %701.0;
  (%702, %703, %704)
}

def @func_3002() -> (Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) {
  %705 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %706 = @func_2082() /* ty=Tensor[(80), uint8] */;
  %707 = %705.0;
  (%706, %707)
}

def @func_3204(%var_3191: Tensor[(1, 200), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(1, 200), float32], Tensor[(9, 15, 7), float64]) {
  %708 = @func_2842() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %711 = reshape(%710, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), float64] */;
  %712 = @func_2198(%711) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %713 = @func_2108() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %714 = cast(%var_3191, dtype="float32") /* ty=Tensor[(1, 200), float32] */;
  %715 = reshape(%714, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
  %716 = @func_3171(%715) /* ty=(Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) */;
  %717 = %716.1;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %719 = %712.2;
  %720 = %713.0;
  %721 = sigmoid(%718) /* ty=Tensor[(9, 15, 7), float64] */;
  (%709, %719, %720, %var_3191, %721)
}

def @func_1448() -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) {
  %722 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %723 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  (%722, %723)
}

def @func_5197() -> Tensor[(9, 15, 7), bool] {
  %724 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
  %724.1
}

def @func_3335(%var_3304: Tensor[(2, 9, 5), float32]) -> (Tensor[(2, 9, 5), float32], Tensor[(15, 8, 3), float32]) {
  %725 = cast(%var_3304, dtype="float32") /* ty=Tensor[(2, 9, 5), float32] */;
  %726 = @func_3069() /* ty=(Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) */;
  %727 = erf(%725) /* ty=Tensor[(2, 9, 5), float32] */;
  %728 = %726.0;
  (%727, %728)
}

def @func_3147(%var_3138: Tensor[(80), uint8]) -> (Tensor[(312), float64], Tensor[(80), int8]) {
  %729 = @func_3038() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) */;
  %730 = cast(%var_3138, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %731 = reshape(%730, newshape=[80]) /* ty=Tensor[(80), uint8] */;
  %732 = @func_1863(%731) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) */;
  %733 = %732.2;
  %734 = cast(%733, dtype="int8") /* ty=Tensor[(5, 8, 2), int8] */;
  %735 = shape_of(%var_3138, dtype="int32") /* ty=Tensor[(1), int32] */;
  %736 = cast(%var_3138, dtype="int8") /* ty=Tensor[(80), int8] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?), int8] */;
  %738 = %729.3;
  %739 = bitwise_or(%736, %737) /* ty=Tensor[(80), int8] */;
  (%738, %739)
}

def @func_4548() -> (Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(1352), float64]) {
  %740 = @func_4093() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */;
  %741 = cast(meta[relay.Constant][37] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %742 = cast(meta[relay.Constant][37] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %743 = reshape(%741, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %744 = reshape(%742, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %745 = @func_3021(%743, %744) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) */;
  %746 = cast(meta[relay.Constant][37] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %747 = %740.1;
  %748 = %745.0;
  %749 = asin(%746) /* ty=Tensor[(1352), float64] */;
  (%747, %748, %749)
}

def @func_4040(%var_4028: Tensor[(945), int32]) -> (Tensor[(2, 12, 13), bool], Tensor[(78, 4), bool], Tensor[(945), float64]) {
  %750 = cast(meta[relay.Constant][38] /* ty=Tensor[(78, 4), bool] */, dtype="bool") /* ty=Tensor[(78, 4), bool] */;
  %751 = reshape(%750, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %752 = @func_1316(%751) /* ty=(Tensor[(2, 12, 13), bool],) */;
  %753 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
  %754 = %753.2;
  %755 = cast(%var_4028, dtype="float64") /* ty=Tensor[(945), float64] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(1), int32] */;
  %757 = cast(%754, dtype="float64") /* ty=Tensor[(945), float64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?), float64] */;
  %759 = %752.0;
  %760 = floor_divide(%757, %758) /* ty=Tensor[(945), float64] */;
  (%759, meta[relay.Constant][38] /* ty=Tensor[(78, 4), bool] */, %760)
}

def @func_3569(%var_3547: Tensor[(160), float64]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(4, 5, 8), bool], Tensor[(160), float64], Tensor[(2, 12, 13), float32], Tensor[(15, 8, 3), float32]) {
  %761 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %762 = cast(%var_3547, dtype="float64") /* ty=Tensor[(160), float64] */;
  %763 = reshape(%762, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), float64] */;
  %764 = @func_2415(%763) /* ty=(Tensor[(4, 5, 8), bool],) */;
  %765 = @func_812() /* ty=(Tensor[(2, 12, 13), float32],) */;
  %766 = @func_3069() /* ty=(Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) */;
  %767 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %768 = %761.1;
  %769 = %764.0;
  %770 = %765.0;
  %771 = %766.0;
  (%767, %768, %769, %var_3547, %770, %771)
}

def @func_3496(%var_3464: Tensor[(180), int64]) -> (Tensor[(2, 12, 13), bool], Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) {
  %772 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %773 = cast(%var_3464, dtype="int64") /* ty=Tensor[(180), int64] */;
  %774 = cast(%var_3464, dtype="int64") /* ty=Tensor[(180), int64] */;
  %775 = reshape(%773, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %776 = reshape(%774, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %777 = @func_1116(%775, %776) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %778 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %779 = @func_2108() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %780 = %772.1;
  %781 = %777.0;
  %782 = %778.1;
  %783 = %779.0;
  (%780, %781, %var_3464, %782, %783)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1090() -> (Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) {
  @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */
}

def @func_586(%var_585: Tensor[(2, 15, 3), float64]) -> (Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) {
  %6 = fn (%var_574: Tensor[(2, 15, 3), float64]) -> (Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) {
    %0 = cast(%var_574, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
    %1 = asinh(%0) /* ty=Tensor[(2, 15, 3), float64] */;
    %2 = cast(%1, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
    %3 = cast(%1, dtype="float64") /* ty=Tensor[(2, 15, 3), float64] */;
    %4 = log2(%2) /* ty=Tensor[(2, 15, 3), float64] */;
    %5 = sinh(%3) /* ty=Tensor[(2, 15, 3), float64] */;
    (%4, %5)
  };
  %6(%var_585) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) */
}

def @func_4004() -> (Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), bool], Tensor[(2, 40), uint8]) {
  @func_4002() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), bool], Tensor[(2, 40), uint8]) */
}

def @func_636() -> Tensor[(2, 12, 13), float32] {
  @func_634() /* ty=Tensor[(2, 12, 13), float32] */
}

def @func_3937() -> (Tensor[(2, 12, 13), bool],) {
  @func_3935() /* ty=(Tensor[(2, 12, 13), bool],) */
}

def @func_2879() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  @func_2877() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */
}

def @func_1809(%var_1808: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) {
  %23 = fn (%var_1785: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) {
    %7 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
    %8 = %7.1;
    %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 12, 13), bool] */, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%8, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %13 = cast(%var_1785, dtype="float32") /* ty=Tensor[(490), float32] */;
    %14 = reshape(%13, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %15 = @func_689(%14) /* ty=(Tensor[(7, 10, 7), float32],) */;
    %16 = %15.0;
    %17 = cast(%var_1785, dtype="bool") /* ty=Tensor[(490), bool] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %21 = greater_equal(%11, %12) /* ty=Tensor[(2, 12, 13), bool] */;
    %22 = logical_and(%19, %20) /* ty=Tensor[(7, 10, 7), bool] */;
    (%21, %22)
  };
  %23(%var_1808) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) */
}

def @func_2439() -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) {
  %27 = fn () -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) {
    %24 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
    %25 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
    %26 = %24.1;
    (%25, %26)
  };
  %27() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */
}

def @func_3024(%var_3022: Tensor[(8, 13, 13), float64], %var_3023: Tensor[(8, 13, 13), float64]) -> (Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) {
  %36 = fn (%var_3007: Tensor[(8, 13, 13), float64], %var_3016: Tensor[(8, 13, 13), float64]) -> (Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) {
    %28 = cast(%var_3007, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
    %29 = sinh(%28) /* ty=Tensor[(8, 13, 13), float64] */;
    %30 = cast(%var_3016, dtype="int8") /* ty=Tensor[(8, 13, 13), int8] */;
    %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
    %32 = cast(%29, dtype="int8") /* ty=Tensor[(8, 13, 13), int8] */;
    %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %34 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
    %35 = multiply(%32, %33) /* ty=Tensor[(8, 13, 13), int8] */;
    (%34, %35)
  };
  %36(%var_3022, %var_3023) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) */
}

def @func_1530(%var_1501: Tensor[(2, 12, 13), bool], %var_1506: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) {
  %37 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %38 = cast(%var_1501, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %42 = cast(%var_1506, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
  %43 = shape_of(%var_1501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%var_1501, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %46 = bitwise_or(%44, %45) /* ty=Tensor[(2, 12, 13), int64] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %48 = maximum(%40, %41) /* ty=Tensor[(2, 12, 13), float32] */;
  %49 = asin(%47) /* ty=Tensor[(2, 12, 13), float64] */;
  (%48, %49)
}

def @func_3131() -> (Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) {
  @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */
}

def @func_1650() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */
}

def @func_3869() -> Tensor[(2, 12, 13), float64] {
  @func_3867() /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_976(%var_973: Tensor[(490), float32], %var_974: Tensor[(2, 12, 13), float64], %var_975: Tensor[(7, 10, 7), float32]) -> (Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) {
  @func_971(%var_973, %var_974, %var_975) /* ty=(Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) */
}

def @func_4002() -> (Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), bool], Tensor[(2, 40), uint8]) {
  %50 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 40), uint8] */, dtype="uint8") /* ty=Tensor[(2, 40), uint8] */;
  %51 = reshape(%50, newshape=[80]) /* ty=Tensor[(80), uint8] */;
  %52 = @func_1863(%51) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) */;
  %53 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %54 = %52.2;
  (%53, %54, meta[relay.Constant][1] /* ty=Tensor[(2, 40), uint8] */)
}

def @func_3572(%var_3570: Tensor[(160), float64]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(4, 5, 8), bool], Tensor[(160), float64], Tensor[(2, 12, 13), float32], Tensor[(15, 8, 3), float32]) {
  @func_3569(%var_3570) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(4, 5, 8), bool], Tensor[(160), float64], Tensor[(2, 12, 13), float32], Tensor[(15, 8, 3), float32]) */
}

def @func_3989() -> (Tensor[(80), uint8],) {
  @func_3987() /* ty=(Tensor[(80), uint8],) */
}

def @func_4042(%var_4041: Tensor[(945), int32]) -> (Tensor[(2, 12, 13), bool], Tensor[(78, 4), bool], Tensor[(945), float64]) {
  %66 = fn (%var_4028: Tensor[(945), int32]) -> (Tensor[(2, 12, 13), bool], Tensor[(78, 4), bool], Tensor[(945), float64]) {
    %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(78, 4), bool] */, dtype="bool") /* ty=Tensor[(78, 4), bool] */;
    %56 = reshape(%55, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %57 = @func_1316(%56) /* ty=(Tensor[(2, 12, 13), bool],) */;
    %58 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
    %59 = %58.2;
    %60 = cast(%var_4028, dtype="float64") /* ty=Tensor[(945), float64] */;
    %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(1), int32] */;
    %62 = cast(%59, dtype="float64") /* ty=Tensor[(945), float64] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?), float64] */;
    %64 = %57.0;
    %65 = floor_divide(%62, %63) /* ty=Tensor[(945), float64] */;
    (%64, meta[relay.Constant][2] /* ty=Tensor[(78, 4), bool] */, %65)
  };
  %66(%var_4041) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(78, 4), bool], Tensor[(945), float64]) */
}

def @func_1271(%var_1224: Tensor[(4, 1, 16), float64], %var_1260: Tensor[(312), float64]) -> (Tensor[(5, 8, 2), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), uint16], Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(312), float64], Tensor[(4, ?, 16), bool], Tensor[(4, ?, 16), uint16]) {
  %67 = cast(meta[relay.Constant][3] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %68 = reshape(%67, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
  %69 = @func_886(%68) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
  %70 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %72 = cast(%var_1260, dtype="float64") /* ty=Tensor[(312), float64] */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %74 = reshape(%71, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %75 = reshape(%72, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), float64] */;
  %76 = reshape(%73, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %77 = @func_971(%74, %75, %76) /* ty=(Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) */;
  %78 = cast(%var_1224, dtype="float64") /* ty=Tensor[(4, 1, 16), float64] */;
  %79 = cos(%78) /* ty=Tensor[(4, 1, 16), float64] */;
  %80 = cast(%79, dtype="float32") /* ty=Tensor[(4, 1, 16), float32] */;
  %81 = log2(%80) /* ty=Tensor[(4, 1, 16), float32] */;
  %82 = cast(%79, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = cast(%79, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %87 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%81, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = logical_and(%88, %89) /* ty=Tensor[(4, ?, 16), bool] */;
  %91 = cast(%90, dtype="uint16") /* ty=Tensor[(4, ?, 16), uint16] */;
  %92 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%79, dtype="uint16") /* ty=Tensor[(4, 1, 16), uint16] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %95 = %69.1;
  %96 = %70.1;
  %97 = %77.3;
  %98 = logical_or(%84, %85) /* ty=Tensor[(4, ?, 16), bool] */;
  %99 = bitwise_and(%93, %94) /* ty=Tensor[(4, ?, 16), uint16] */;
  (%95, meta[relay.Constant][3] /* ty=Tensor[(80), uint8] */, %96, %97, meta[relay.Constant][4] /* ty=Tensor[(490), float32] */, %var_1260, %98, %99)
}

def @func_4278() -> (Tensor[(312), float64], Tensor[(2, 12, 13), bool]) {
  %104 = fn () -> (Tensor[(312), float64], Tensor[(2, 12, 13), bool]) {
    %100 = @func_3038() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) */;
    %101 = @func_2108() /* ty=(Tensor[(2, 12, 13), bool],) */;
    %102 = %100.3;
    %103 = %101.0;
    (%102, %103)
  };
  %104() /* ty=(Tensor[(312), float64], Tensor[(2, 12, 13), bool]) */
}

def @func_3147(%var_3138: Tensor[(80), uint8]) -> (Tensor[(312), float64], Tensor[(80), int8]) {
  %105 = @func_3038() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) */;
  %106 = cast(%var_3138, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %107 = reshape(%106, newshape=[80]) /* ty=Tensor[(80), uint8] */;
  %108 = @func_1863(%107) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) */;
  %109 = %108.2;
  %110 = cast(%109, dtype="int8") /* ty=Tensor[(5, 8, 2), int8] */;
  %111 = shape_of(%var_3138, dtype="int32") /* ty=Tensor[(1), int32] */;
  %112 = cast(%var_3138, dtype="int8") /* ty=Tensor[(80), int8] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?), int8] */;
  %114 = %105.3;
  %115 = bitwise_or(%112, %113) /* ty=Tensor[(80), int8] */;
  (%114, %115)
}

def @func_4999() -> Tensor[(2, 12, 13), bool] {
  @func_1023() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_4656(%var_4638: Tensor[(180), int64]) -> (Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), float64]) {
  %116 = cast(%var_4638, dtype="int64") /* ty=Tensor[(180), int64] */;
  %117 = cast(%var_4638, dtype="int64") /* ty=Tensor[(180), int64] */;
  %118 = reshape(%116, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %119 = reshape(%117, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
  %120 = @func_1116(%118, %119) /* ty=(Tensor[(10, 3, 6), bool],) */;
  %121 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
  %122 = %121.1;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
  %124 = acosh(%123) /* ty=Tensor[(5, 8, 2), float32] */;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %126 = %120.0;
  %127 = sigmoid(%125) /* ty=Tensor[(5, 8, 2), float64] */;
  (%126, %var_4638, %127)
}

def @main(%var_5371: Tensor[(6, 14, 3), float32], %var_5428: Tensor[(6, 14, 3), float32]) -> (Tensor[(6, 14, 3), float32], Tensor[(2, 12, 13), bool], Tensor[(6, 14, 3), float32], Tensor[(2, 12, 13), bool], Tensor[(6, 14, 3), float64], Tensor[(6, 14, 3), float64], Tensor[(6, 14, 3), bool]) {
  %128 = cast(%var_5371, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %129 = tan(%128) /* ty=Tensor[(6, 14, 3), float32] */;
  %130 = cast(%var_5371, dtype="uint8") /* ty=Tensor[(6, 14, 3), uint8] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="uint8") /* ty=Tensor[(6, 14, 3), uint8] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %134 = left_shift(%132, %133) /* ty=Tensor[(6, 14, 3), uint8] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %136 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%129, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %139 = @func_3522() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %140 = cast(%134, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %141 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%129, dtype="float32") /* ty=Tensor[(6, 14, 3), float32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %144 = @func_3713() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %145 = cast(%var_5371, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %146 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%134, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %149 = cast(%129, dtype="float64") /* ty=Tensor[(6, 14, 3), float64] */;
  %150 = cast(%var_5428, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %151 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%129, dtype="bool") /* ty=Tensor[(6, 14, 3), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = divide(%137, %138) /* ty=Tensor[(6, 14, 3), float32] */;
  %155 = %139.1;
  %156 = mod(%142, %143) /* ty=Tensor[(6, 14, 3), float32] */;
  %157 = %144.0;
  %158 = floor_divide(%147, %148) /* ty=Tensor[(6, 14, 3), float64] */;
  %159 = log(%149) /* ty=Tensor[(6, 14, 3), float64] */;
  %160 = logical_and(%152, %153) /* ty=Tensor[(6, 14, 3), bool] */;
  (%154, %155, %156, %157, %158, %159, %160)
}

def @func_4860() -> Tensor[(2, 12, 13), float64] {
  %165 = fn () -> Tensor[(2, 12, 13), float64] {
    %161 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
    %162 = cast(%161, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %163 = log2(%162) /* ty=Tensor[(2, 12, 13), float64] */;
    %164 = cast(%163, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    rsqrt(%164) /* ty=Tensor[(2, 12, 13), float64] */
  };
  %165() /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_4608(%var_4604: Tensor[(5, 3, 1), int64], %var_4605: Tensor[(5, 3, 10), int64], %var_4606: Tensor[(490), float32], %var_4607: Tensor[(5, 3, 10), int64]) -> (Tensor[(5, 3, 10), int64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(5, 3, 10), float32], Tensor[(2, 12, 13), float64], Tensor[(312), bool]) {
  %186 = fn (%var_4560: Tensor[(5, 3, 1), int64], %var_4561: Tensor[(5, 3, 10), int64], %var_4569: Tensor[(490), float32], %var_4576: Tensor[(5, 3, 10), int64]) -> (Tensor[(5, 3, 10), int64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(5, 3, 10), float32], Tensor[(2, 12, 13), float64], Tensor[(312), bool]) {
    %166 = cast(%var_4560, dtype="int64") /* ty=Tensor[(5, 3, 1), int64] */;
    %167 = cast(%var_4561, dtype="int64") /* ty=Tensor[(5, 3, 10), int64] */;
    %168 = cast(meta[relay.Constant][5] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %169 = reshape(%168, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
    %170 = @func_584(%169) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) */;
    %171 = cast(%var_4569, dtype="float32") /* ty=Tensor[(490), float32] */;
    %172 = reshape(%171, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %173 = @func_1340(%172) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) */;
    %174 = cast(%var_4576, dtype="float32") /* ty=Tensor[(5, 3, 10), float32] */;
    %175 = shape_of(%var_4561, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%var_4561, dtype="float32") /* ty=Tensor[(5, 3, 10), float32] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %178 = cast(meta[relay.Constant][6] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %179 = reshape(%178, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %180 = @func_4423(%179) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(180), int64], Tensor[(180), int64], Tensor[(2, 12, 13), float64]) */;
    %181 = maximum(%166, %167) /* ty=Tensor[(5, 3, 10), int64] */;
    %182 = %170.0;
    %183 = %173.1;
    %184 = minimum(%176, %177) /* ty=Tensor[(5, 3, 10), float32] */;
    %185 = %180.3;
    (%181, %182, meta[relay.Constant][5] /* ty=Tensor[(90), float64] */, %183, %var_4569, %184, %185, meta[relay.Constant][6] /* ty=Tensor[(312), bool] */)
  };
  %186(%var_4604, %var_4605, %var_4606, %var_4607) /* ty=(Tensor[(5, 3, 10), int64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(5, 3, 10), float32], Tensor[(2, 12, 13), float64], Tensor[(312), bool]) */
}

def @func_5324(%var_5323: Tensor[(7, 15, 5), uint8]) -> Tensor[(7, 15, 5), bool] {
  %191 = fn (%var_5299: Tensor[(7, 15, 5), uint8]) -> Tensor[(7, 15, 5), bool] {
    %187 = cast(%var_5299, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
    %188 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(7, 15, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 15, 5), uint8] */, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%189, %190) /* ty=Tensor[(7, 15, 5), bool] */
  };
  %191(%var_5323) /* ty=Tensor[(7, 15, 5), bool] */
}

def @func_4367(%var_4365: Tensor[(5, 8, 2), uint16], %var_4366: Tensor[(90), float32]) -> (Tensor[(2640, ?), int32], Tensor[(5, 8, 2), float64], Tensor[(5, 8, 2), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(90), float32], Tensor[(2640, 1), float32], Tensor[(15, 8, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) {
  @func_4363(%var_4365, %var_4366) /* ty=(Tensor[(2640, ?), int32], Tensor[(5, 8, 2), float64], Tensor[(5, 8, 2), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(90), float32], Tensor[(2640, 1), float32], Tensor[(15, 8, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) */
}

def @func_2211() -> Tensor[(2, 12, 13), float32] {
  %193 = fn () -> Tensor[(2, 12, 13), float32] {
    %192 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
    %192.0
  };
  %193() /* ty=Tensor[(2, 12, 13), float32] */
}

def @func_3204(%var_3191: Tensor[(1, 200), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(1, 200), float32], Tensor[(9, 15, 7), float64]) {
  %194 = @func_2842() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) */;
  %195 = %194.0;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %197 = reshape(%196, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), float64] */;
  %198 = @func_2198(%197) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %199 = @func_2108() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %200 = cast(%var_3191, dtype="float32") /* ty=Tensor[(1, 200), float32] */;
  %201 = reshape(%200, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
  %202 = @func_3171(%201) /* ty=(Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) */;
  %203 = %202.1;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(9, 15, 7), float64] */;
  %205 = %198.2;
  %206 = %199.0;
  %207 = sigmoid(%204) /* ty=Tensor[(9, 15, 7), float64] */;
  (%195, %205, %206, %var_3191, %207)
}

def @func_2415(%var_2387: Tensor[(4, 5, 8), float64]) -> (Tensor[(4, 5, 8), bool],) {
  %208 = cast(%var_2387, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %209 = log(%208) /* ty=Tensor[(4, 5, 8), float64] */;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %211 = atan(%210) /* ty=Tensor[(4, 5, 8), float64] */;
  %212 = cast(%var_2387, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%211, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %216 = greater_equal(%214, %215) /* ty=Tensor[(4, 5, 8), bool] */;
  (%216,)
}

def @func_691(%var_690: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), float32],) {
  %219 = fn (%var_685: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), float32],) {
    %217 = cast(%var_685, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %218 = tan(%217) /* ty=Tensor[(7, 10, 7), float32] */;
    (%218,)
  };
  %219(%var_690) /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_634() -> Tensor[(2, 12, 13), float32] {
  %220 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  cos(%220) /* ty=Tensor[(2, 12, 13), float32] */
}

def @func_2746() -> (Tensor[(80), uint8], int64, Tensor[(5, 8, 2), uint16], Tensor[(6, 6, 11), uint64], Tensor[(2, 12, 13), bool]) {
  %239 = fn () -> (Tensor[(80), uint8], int64, Tensor[(5, 8, 2), uint16], Tensor[(6, 6, 11), uint64], Tensor[(2, 12, 13), bool]) {
    %221 = @func_2082() /* ty=Tensor[(80), uint8] */;
    %222 = cast(%221, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %223 = reshape(%222, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
    %224 = @func_886(%223) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
    %225 = cast(7 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %226 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 132), int64] */, dtype="int64") /* ty=Tensor[(3, 132), int64] */;
    %227 = reshape(%225, newshape=[]) /* ty=int64 */;
    %228 = reshape(%226, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
    %229 = @func_785(%227, %228) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) */;
    %230 = %229.2;
    %231 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 132), int64] */, dtype="uint64") /* ty=Tensor[(3, 132), uint64] */;
    %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%230, dtype="uint64") /* ty=Tensor[(6, 6, 11), uint64] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %235 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
    %236 = %224.0;
    %237 = logical_xor(%233, %234) /* ty=Tensor[(6, 6, 11), uint64] */;
    %238 = %235.0;
    (%221, 7 /* ty=int64 */, %236, %237, %238)
  };
  %239() /* ty=(Tensor[(80), uint8], int64, Tensor[(5, 8, 2), uint16], Tensor[(6, 6, 11), uint64], Tensor[(2, 12, 13), bool]) */
}

def @func_1088() -> (Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) {
  %240 = cast(meta[relay.Constant][10] /* ty=Tensor[(80), uint8] */, dtype="uint8") /* ty=Tensor[(80), uint8] */;
  %241 = reshape(%240, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
  %242 = @func_886(%241) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
  %243 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %244 = %242.0;
  (%243, %244, meta[relay.Constant][10] /* ty=Tensor[(80), uint8] */)
}

def @func_4243(%var_4241: Tensor[(200), float32], %var_4242: Tensor[(10, 4, 5), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(10, 4, 5), float64], Tensor[(80), uint8], Tensor[(2, 12, 13), bool], Tensor[(490), float32], Tensor[(200), float32]) {
  @func_4239(%var_4241, %var_4242) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(10, 4, 5), float64], Tensor[(80), uint8], Tensor[(2, 12, 13), bool], Tensor[(490), float32], Tensor[(200), float32]) */
}

def @func_4426(%var_4424: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), bool], Tensor[(180), int64], Tensor[(180), int64], Tensor[(2, 12, 13), float64]) {
  @func_4423(%var_4424) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(180), int64], Tensor[(180), int64], Tensor[(2, 12, 13), float64]) */
}

def @func_4947() -> (Tensor[(2, 12, 13), bool],) {
  %247 = fn () -> (Tensor[(2, 12, 13), bool],) {
    %245 = @func_2877() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
    %246 = %245.1;
    (%246,)
  };
  %247() /* ty=(Tensor[(2, 12, 13), bool],) */
}

def @func_2611(%var_2608: Tensor[(945), int32], %var_2609: Tensor[(490), float32], %var_2610: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), int64], Tensor[(7, 10, 7), bool], Tensor[(2, 12, 13), float32], Tensor[(490), bool]) {
  %285 = fn (%var_2546: Tensor[(945), int32], %var_2575: Tensor[(490), float32], %var_2581: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), int64], Tensor[(7, 10, 7), bool], Tensor[(2, 12, 13), float32], Tensor[(490), bool]) {
    %248 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
    %249 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
    %250 = cast(%249, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %251 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %252 = cast(%248, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %254 = cast(%var_2546, dtype="int32") /* ty=Tensor[(945), int32] */;
    %255 = reshape(%254, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
    %256 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
    %257 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 12, 13), float32] */, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
    %258 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%249, dtype="int64") /* ty=Tensor[(2, 12, 13), int64] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %261 = cast(%var_2575, dtype="float32") /* ty=Tensor[(490), float32] */;
    %262 = reshape(%261, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %263 = @func_1807(%262) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) */;
    %264 = cast(%248, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %265 = %256.0;
    %266 = cast(%265, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %267 = reshape(%264, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %268 = reshape(%266, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %269 = @func_1530(%267, %268) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
    %270 = cast(%var_2581, dtype="bool") /* ty=Tensor[(490), bool] */;
    %271 = shape_of(%var_2575, dtype="int32") /* ty=Tensor[(1), int32] */;
    %272 = cast(%var_2575, dtype="bool") /* ty=Tensor[(490), bool] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?), bool] */;
    %274 = less(%272, %273) /* ty=Tensor[(490), bool] */;
    %275 = cast(%274, dtype="bool") /* ty=Tensor[(490), bool] */;
    %276 = shape_of(%var_2581, dtype="int32") /* ty=Tensor[(1), int32] */;
    %277 = cast(%var_2581, dtype="bool") /* ty=Tensor[(490), bool] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?), bool] */;
    %279 = logical_or(%252, %253) /* ty=Tensor[(2, 12, 13), bool] */;
    %280 = @func_1983(%255) /* ty=Tensor[(9, 15, 7), bool] */;
    %281 = multiply(%259, %260) /* ty=Tensor[(2, 12, 13), int64] */;
    %282 = %263.1;
    %283 = %269.0;
    %284 = logical_or(%277, %278) /* ty=Tensor[(490), bool] */;
    (%279, %280, %var_2546, %265, %281, %282, %283, %284)
  };
  %285(%var_2608, %var_2609, %var_2610) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), int64], Tensor[(7, 10, 7), bool], Tensor[(2, 12, 13), float32], Tensor[(490), bool]) */
}

def @func_4550() -> (Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(1352), float64]) {
  @func_4548() /* ty=(Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(1352), float64]) */
}

def @func_2110() -> (Tensor[(2, 12, 13), bool],) {
  @func_2108() /* ty=(Tensor[(2, 12, 13), bool],) */
}

def @func_3569(%var_3547: Tensor[(160), float64]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(4, 5, 8), bool], Tensor[(160), float64], Tensor[(2, 12, 13), float32], Tensor[(15, 8, 3), float32]) {
  %286 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %287 = cast(%var_3547, dtype="float64") /* ty=Tensor[(160), float64] */;
  %288 = reshape(%287, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), float64] */;
  %289 = @func_2415(%288) /* ty=(Tensor[(4, 5, 8), bool],) */;
  %290 = @func_812() /* ty=(Tensor[(2, 12, 13), float32],) */;
  %291 = @func_3069() /* ty=(Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) */;
  %292 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
  %293 = %286.1;
  %294 = %289.0;
  %295 = %290.0;
  %296 = %291.0;
  (%292, %293, %294, %var_3547, %295, %296)
}

def @func_4449() -> (Tensor[(945), int32],) {
  %299 = fn () -> (Tensor[(945), int32],) {
    %297 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
    %298 = %297.2;
    (%298,)
  };
  %299() /* ty=(Tensor[(945), int32],) */
}

def @func_1461() -> Tensor[(2, 12, 13), bool] {
  @func_1459() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_2775(%var_2774: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool], Tensor[(490), float32]) {
  %306 = fn (%var_2768: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool], Tensor[(490), float32]) {
    %300 = @func_812() /* ty=(Tensor[(2, 12, 13), float32],) */;
    %301 = cast(%var_2768, dtype="float32") /* ty=Tensor[(490), float32] */;
    %302 = reshape(%301, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %303 = @func_1807(%302) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) */;
    %304 = %300.0;
    %305 = %303.1;
    (%304, %305, %var_2768)
  };
  %306(%var_2774) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool], Tensor[(490), float32]) */
}

def @func_3674(%var_3673: Tensor[(3, 30), float32]) -> (Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(15, 8, 3), float32], Tensor[(3, 30), int32], Tensor[(8, 13, 13), int8]) {
  %328 = fn (%var_3641: Tensor[(3, 30), float32]) -> (Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(15, 8, 3), float32], Tensor[(3, 30), int32], Tensor[(8, 13, 13), int8]) {
    %307 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
    %308 = cast(%307, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %309 = reshape(%308, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %310 = @func_1316(%309) /* ty=(Tensor[(2, 12, 13), bool],) */;
    %311 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
    %312 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
    %313 = cast(%var_3641, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
    %314 = reshape(%313, newshape=[2, 9, 5]) /* ty=Tensor[(2, 9, 5), float32] */;
    %315 = @func_3335(%314) /* ty=(Tensor[(2, 9, 5), float32], Tensor[(15, 8, 3), float32]) */;
    %316 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 30), float32] */, dtype="int32") /* ty=Tensor[(3, 30), int32] */;
    %317 = shape_of(%var_3641, dtype="int32") /* ty=Tensor[(2), int32] */;
    %318 = cast(%var_3641, dtype="int32") /* ty=Tensor[(3, 30), int32] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %320 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
    %321 = @func_2082() /* ty=Tensor[(80), uint8] */;
    %322 = %310.0;
    %323 = %311.0;
    %324 = %312.1;
    %325 = %315.1;
    %326 = left_shift(%318, %319) /* ty=Tensor[(3, 30), int32] */;
    %327 = %320.3;
    (%321, %307, %322, %323, %324, %325, %326, %327)
  };
  %328(%var_3673) /* ty=(Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(15, 8, 3), float32], Tensor[(3, 30), int32], Tensor[(8, 13, 13), int8]) */
}

def @func_1865(%var_1864: Tensor[(80), uint8]) -> (Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) {
  %343 = fn (%var_1843: Tensor[(80), uint8]) -> (Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) {
    %329 = cast(%var_1843, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %330 = reshape(%329, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
    %331 = @func_886(%330) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
    %332 = %331.0;
    %333 = cast(%var_1843, dtype="uint8") /* ty=Tensor[(80), uint8] */;
    %334 = reshape(%333, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint8] */;
    %335 = @func_886(%334) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */;
    %336 = %335.1;
    %337 = cast(%336, dtype="bool") /* ty=Tensor[(5, 8, 2), bool] */;
    %338 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %339 = cast(%332, dtype="bool") /* ty=Tensor[(5, 8, 2), bool] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %341 = @func_1730() /* ty=Tensor[(2, 12, 13), float64] */;
    %342 = not_equal(%339, %340) /* ty=Tensor[(5, 8, 2), bool] */;
    (%341, %var_1843, %342)
  };
  %343(%var_1864) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) */
}

def @func_1985(%var_1984: Tensor[(9, 15, 7), int32]) -> Tensor[(9, 15, 7), bool] {
  %348 = fn (%var_1975: Tensor[(9, 15, 7), int32]) -> Tensor[(9, 15, 7), bool] {
    %344 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 15, 7), int32] */, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
    %345 = shape_of(%var_1975, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%var_1975, dtype="bool") /* ty=Tensor[(9, 15, 7), bool] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%346, %347) /* ty=Tensor[(9, 15, 7), bool] */
  };
  %348(%var_1984) /* ty=Tensor[(9, 15, 7), bool] */
}

def @func_2418(%var_2416: Tensor[(4, 5, 8), float64]) -> (Tensor[(4, 5, 8), bool],) {
  @func_2415(%var_2416) /* ty=(Tensor[(4, 5, 8), bool],) */
}

def @func_3413(%var_3411: Tensor[(2, 12, 13), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  @func_3410(%var_3411) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */
}

def @func_3129() -> (Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) {
  %349 = cast(meta[relay.Constant][14] /* ty=Tensor[(945), int32] */, dtype="int32") /* ty=Tensor[(945), int32] */;
  %350 = reshape(%349, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
  %351 = cast(meta[relay.Constant][15] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %352 = cast(meta[relay.Constant][15] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %353 = reshape(%351, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %354 = reshape(%352, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %355 = @func_3021(%353, %354) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) */;
  %356 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %357 = @func_1983(%350) /* ty=Tensor[(9, 15, 7), bool] */;
  %358 = %355.1;
  (%356, %357, meta[relay.Constant][14] /* ty=Tensor[(945), int32] */, %358, meta[relay.Constant][15] /* ty=Tensor[(1352), float64] */)
}

def @func_1732() -> Tensor[(2, 12, 13), float64] {
  @func_1730() /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_789(%var_787: int64, %var_788: Tensor[(6, 6, 11), int64]) -> (Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) {
  @func_785(%var_787, %var_788) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) */
}

def @func_1024() -> Tensor[(2, 12, 13), bool] {
  %366 = fn () -> Tensor[(2, 12, 13), bool] {
    %359 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
    %360 = cast(%359, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %361 = erf(%360) /* ty=Tensor[(2, 12, 13), float64] */;
    %362 = cast(%359, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%361, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%364, %365) /* ty=Tensor[(2, 12, 13), bool] */
  };
  %366() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_1319(%var_1317: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), bool],) {
  @func_1316(%var_1317) /* ty=(Tensor[(2, 12, 13), bool],) */
}

def @func_1648() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %367 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %368 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  (%367, %368)
}

def @func_2278() -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) {
  %373 = fn () -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) {
    %369 = @func_1953() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */;
    %370 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
    %371 = @func_2082() /* ty=Tensor[(80), uint8] */;
    %372 = %369.1;
    (%370, %371, %372)
  };
  %373() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */
}

def @func_3987() -> (Tensor[(80), uint8],) {
  %374 = @func_2082() /* ty=Tensor[(80), uint8] */;
  (%374,)
}

def @func_3935() -> (Tensor[(2, 12, 13), bool],) {
  %375 = @func_3712() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %376 = %375.2;
  (%376,)
}

def @func_4548() -> (Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(1352), float64]) {
  %377 = @func_4093() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */;
  %378 = cast(meta[relay.Constant][16] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %379 = cast(meta[relay.Constant][16] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %380 = reshape(%378, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %381 = reshape(%379, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float64] */;
  %382 = @func_3021(%380, %381) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(8, 13, 13), int8]) */;
  %383 = cast(meta[relay.Constant][16] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %384 = %377.1;
  %385 = %382.0;
  %386 = asin(%383) /* ty=Tensor[(1352), float64] */;
  (%384, %385, %386)
}

def @func_2514(%var_2490: int64, %var_2504: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 15, 3), int8], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(396), bool]) {
  %387 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %388 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %389 = cast(%388, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %390 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%387, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %394 = cast(%var_2490, dtype="int64") /* ty=int64 */;
  %395 = cast(meta[relay.Constant][17] /* ty=Tensor[(396), int64] */, dtype="int64") /* ty=Tensor[(396), int64] */;
  %396 = reshape(%394, newshape=[]) /* ty=int64 */;
  %397 = reshape(%395, newshape=[6, 6, 11]) /* ty=Tensor[(6, 6, 11), int64] */;
  %398 = @func_785(%396, %397) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) */;
  %399 = %398.0;
  %400 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 15, 3), float64] */, dtype="int8") /* ty=Tensor[(2, 15, 3), int8] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="int8") /* ty=Tensor[(2, 15, 3), int8] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %404 = cast(%var_2504, dtype="float32") /* ty=Tensor[(490), float32] */;
  %405 = reshape(%404, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %406 = @func_689(%405) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(396), int64] */, dtype="bool") /* ty=Tensor[(396), bool] */;
  %408 = cast(%var_2490, dtype="bool") /* ty=bool */;
  %409 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %410 = equal(%391, %392) /* ty=Tensor[(2, 12, 13), bool] */;
  %411 = %393.0;
  %412 = logical_xor(%402, %403) /* ty=Tensor[(2, 15, 3), int8] */;
  %413 = %406.0;
  %414 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %415 = less(%407, %408) /* ty=Tensor[(396), bool] */;
  (%409, %410, %411, %412, %413, %var_2504, %414, %415)
}

def @func_4363(%var_4283: Tensor[(5, 8, 2), uint16], %var_4349: Tensor[(90), float32]) -> (Tensor[(2640, ?), int32], Tensor[(5, 8, 2), float64], Tensor[(5, 8, 2), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(90), float32], Tensor[(2640, 1), float32], Tensor[(15, 8, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) {
  %416 = cast(meta[relay.Constant][19] /* ty=Tensor[(2640, 1), float64] */, dtype="float64") /* ty=Tensor[(2640, 1), float64] */;
  %417 = reshape(%416, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %418 = @func_1146(%417) /* ty=Tensor[(16, 15, 11), bool] */;
  %419 = cast(%418, dtype="int32") /* ty=Tensor[(16, 15, 11), int32] */;
  %420 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(2640, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %421 = cast(meta[relay.Constant][19] /* ty=Tensor[(2640, 1), float64] */, dtype="int32") /* ty=Tensor[(2640, 1), int32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %423 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %424 = %423.1;
  %425 = cast(%var_4283, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %429 = bitwise_and(%427, %428) /* ty=Tensor[(5, 8, 2), uint16] */;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %431 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
  %432 = %431.1;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %434 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%429, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %437 = @func_3712() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */;
  %438 = cast(%var_4349, dtype="float32") /* ty=Tensor[(90), float32] */;
  %439 = reshape(%438, newshape=[3, 30]) /* ty=Tensor[(3, 30), float32] */;
  %440 = @func_3672(%439) /* ty=(Tensor[(80), uint8], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(15, 8, 3), float32], Tensor[(3, 30), int32], Tensor[(8, 13, 13), int8]) */;
  %441 = cast(meta[relay.Constant][19] /* ty=Tensor[(2640, 1), float64] */, dtype="float32") /* ty=Tensor[(2640, 1), float32] */;
  %442 = @func_3069() /* ty=(Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) */;
  %443 = cast(meta[relay.Constant][20] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %444 = reshape(%443, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %445 = @func_689(%444) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %446 = bitwise_xor(%421, %422) /* ty=Tensor[(2640, ?), int32] */;
  %447 = sqrt(%430) /* ty=Tensor[(5, 8, 2), float64] */;
  %448 = floor_divide(%435, %436) /* ty=Tensor[(5, 8, 2), float64] */;
  %449 = %437.1;
  %450 = %440.1;
  %451 = cosh(%441) /* ty=Tensor[(2640, 1), float32] */;
  %452 = %442.0;
  %453 = %445.0;
  (%446, %447, %448, %449, %450, %var_4349, %451, %452, %453, meta[relay.Constant][20] /* ty=Tensor[(490), float32] */)
}

def @func_3874() -> (Tensor[(2, 12, 13), bool],) {
  @func_3872() /* ty=(Tensor[(2, 12, 13), bool],) */
}

def @func_1833(%var_1832: Tensor[(11, 2, 6), float32]) -> Tensor[(11, 2, 6), int32] {
  %460 = fn (%var_1819: Tensor[(11, 2, 6), float32]) -> Tensor[(11, 2, 6), int32] {
    %454 = cast(%var_1819, dtype="float32") /* ty=Tensor[(11, 2, 6), float32] */;
    %455 = sigmoid(%454) /* ty=Tensor[(11, 2, 6), float32] */;
    %456 = cast(%455, dtype="int32") /* ty=Tensor[(11, 2, 6), int32] */;
    %457 = shape_of(%var_1819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%var_1819, dtype="int32") /* ty=Tensor[(11, 2, 6), int32] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    right_shift(%458, %459) /* ty=Tensor[(11, 2, 6), int32] */
  };
  %460(%var_1832) /* ty=Tensor[(11, 2, 6), int32] */
}

def @func_1342(%var_1341: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) {
  %467 = fn (%var_1335: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) {
    %461 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
    %462 = cast(%var_1335, dtype="float32") /* ty=Tensor[(490), float32] */;
    %463 = reshape(%462, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %464 = @func_689(%463) /* ty=(Tensor[(7, 10, 7), float32],) */;
    %465 = %461.0;
    %466 = %464.0;
    (%465, %466, %var_1335)
  };
  %467(%var_1341) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) */
}

def @func_3286() -> Tensor[(2, 12, 13), bool] {
  @func_3284() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_4659(%var_4657: Tensor[(180), int64]) -> (Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), float64]) {
  @func_4656(%var_4657) /* ty=(Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), float64]) */
}

def @func_5198() -> Tensor[(9, 15, 7), bool] {
  %469 = fn () -> Tensor[(9, 15, 7), bool] {
    %468 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
    %468.1
  };
  %469() /* ty=Tensor[(9, 15, 7), bool] */
}

def @func_5126(%var_5125: Tensor[(5, 8, 2), uint16]) -> (Tensor[(5, 8, 2), float32], Tensor[(80), uint8]) {
  %478 = fn (%var_5109: Tensor[(5, 8, 2), uint16]) -> (Tensor[(5, 8, 2), float32], Tensor[(80), uint8]) {
    %470 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
    %471 = %470.1;
    %472 = cast(%var_5109, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
    %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
    %474 = cast(%471, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
    %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %476 = add(%474, %475) /* ty=Tensor[(5, 8, 2), float32] */;
    %477 = @func_2082() /* ty=Tensor[(80), uint8] */;
    (%476, %477)
  };
  %478(%var_5125) /* ty=(Tensor[(5, 8, 2), float32], Tensor[(80), uint8]) */
}

def @func_1148(%var_1147: Tensor[(16, 15, 11), float64]) -> Tensor[(16, 15, 11), bool] {
  %490 = fn (%var_1123: Tensor[(16, 15, 11), float64]) -> Tensor[(16, 15, 11), bool] {
    %479 = cast(%var_1123, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
    %480 = erf(%479) /* ty=Tensor[(16, 15, 11), float64] */;
    %481 = cast(%480, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
    %482 = shape_of(%var_1123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %483 = cast(%var_1123, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %485 = floor_mod(%483, %484) /* ty=Tensor[(16, 15, 11), float64] */;
    %486 = cast(%480, dtype="bool") /* ty=Tensor[(16, 15, 11), bool] */;
    %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
    %488 = cast(%485, dtype="bool") /* ty=Tensor[(16, 15, 11), bool] */;
    %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%488, %489) /* ty=Tensor[(16, 15, 11), bool] */
  };
  %490(%var_1147) /* ty=Tensor[(16, 15, 11), bool] */
}

def @func_5001() -> Tensor[(2, 12, 13), bool] {
  @func_4999() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_1604(%var_1603: Tensor[(180), int64]) -> (Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(80), uint8], Tensor[(64), float64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(10, 3, 6), bool], Tensor[(180), int64]) {
  %527 = fn (%var_1600: Tensor[(180), int64]) -> (Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(80), uint8], Tensor[(64), float64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(10, 3, 6), bool], Tensor[(180), int64]) {
    %491 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
    %492 = %491.0;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %494 = sqrt(%493) /* ty=Tensor[(2, 12, 13), float64] */;
    %495 = cast(%494, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %496 = cast(%494, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %497 = reshape(%495, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %498 = reshape(%496, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %499 = @func_1530(%497, %498) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
    %500 = %499.1;
    %501 = cast(%500, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %502 = cast(%492, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %503 = reshape(%501, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %504 = reshape(%502, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %505 = @func_1530(%503, %504) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
    %506 = cast(meta[relay.Constant][21] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %507 = cast(%492, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %508 = reshape(%506, newshape=[4, 1, 16]) /* ty=Tensor[(4, 1, 16), float64] */;
    %509 = reshape(%507, newshape=[312]) /* ty=Tensor[(312), float64] */;
    %510 = @func_1271(%508, %509) /* ty=(Tensor[(5, 8, 2), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), uint16], Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(312), float64], Tensor[(4, ?, 16), bool], Tensor[(4, ?, 16), uint16]) */;
    %511 = cast(meta[relay.Constant][22] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %512 = reshape(%511, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
    %513 = @func_584(%512) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) */;
    %514 = cast(meta[relay.Constant][23] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %515 = reshape(%514, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %516 = @func_689(%515) /* ty=(Tensor[(7, 10, 7), float32],) */;
    %517 = cast(%var_1600, dtype="int64") /* ty=Tensor[(180), int64] */;
    %518 = cast(%var_1600, dtype="int64") /* ty=Tensor[(180), int64] */;
    %519 = reshape(%517, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
    %520 = reshape(%518, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
    %521 = @func_1116(%519, %520) /* ty=(Tensor[(10, 3, 6), bool],) */;
    %522 = %505.0;
    %523 = %510.1;
    %524 = %513.0;
    %525 = %516.0;
    %526 = %521.0;
    (%494, %500, %522, %523, meta[relay.Constant][21] /* ty=Tensor[(64), float64] */, %524, meta[relay.Constant][22] /* ty=Tensor[(90), float64] */, %525, meta[relay.Constant][23] /* ty=Tensor[(490), float32] */, %526, %var_1600)
  };
  %527(%var_1603) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(80), uint8], Tensor[(64), float64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(10, 3, 6), bool], Tensor[(180), int64]) */
}

def @func_1449() -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) {
  %530 = fn () -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) {
    %528 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
    %529 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
    (%528, %529)
  };
  %530() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */
}

def @func_3713() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) {
  %536 = fn () -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) {
    %531 = @func_3520() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
    %532 = @func_2842() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) */;
    %533 = %531.1;
    %534 = @func_1730() /* ty=Tensor[(2, 12, 13), float64] */;
    %535 = %532.0;
    (%533, %534, %535)
  };
  %536() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */
}

def @func_3039() -> (Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) {
  %547 = fn () -> (Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) {
    %537 = @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */;
    %538 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 70), float32] */, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %539 = cast(meta[relay.Constant][25] /* ty=Tensor[(312), float64] */, dtype="float64") /* ty=Tensor[(312), float64] */;
    %540 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 70), float32] */, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %541 = reshape(%538, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %542 = reshape(%539, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), float64] */;
    %543 = reshape(%540, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %544 = @func_971(%541, %542, %543) /* ty=(Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) */;
    %545 = %537.1;
    %546 = %544.2;
    (%545, %546, meta[relay.Constant][24] /* ty=Tensor[(7, 70), float32] */, meta[relay.Constant][25] /* ty=Tensor[(312), float64] */)
  };
  %547() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32], Tensor[(312), float64]) */
}

def @func_2380() -> (Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) {
  @func_2378() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) */
}

def @func_1275(%var_1273: Tensor[(4, 1, 16), float64], %var_1274: Tensor[(312), float64]) -> (Tensor[(5, 8, 2), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), uint16], Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(312), float64], Tensor[(4, ?, 16), bool], Tensor[(4, ?, 16), uint16]) {
  @func_1271(%var_1273, %var_1274) /* ty=(Tensor[(5, 8, 2), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), uint16], Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(312), float64], Tensor[(4, ?, 16), bool], Tensor[(4, ?, 16), uint16]) */
}

def @func_2083() -> Tensor[(80), uint8] {
  %549 = fn () -> Tensor[(80), uint8] {
    %548 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
    %548.2
  };
  %549() /* ty=Tensor[(80), uint8] */
}

def @func_2378() -> (Tensor[(2, 12, 13), float32], Tensor[(5, 8, 2), uint16]) {
  %550 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %551 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
  %552 = %550.1;
  (%551, %552)
}

def @func_1534(%var_1532: Tensor[(2, 12, 13), bool], %var_1533: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) {
  @func_1530(%var_1532, %var_1533) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */
}

def @func_1954() -> (Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) {
  %556 = fn () -> (Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) {
    %553 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
    %554 = %553.1;
    %555 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
    (%554, %555)
  };
  %556() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */
}

def @func_3284() -> Tensor[(2, 12, 13), bool] {
  %557 = @func_1953() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */;
  %557.1
}

def @func_3150(%var_3148: Tensor[(80), uint8]) -> (Tensor[(312), float64], Tensor[(80), int8]) {
  @func_3147(%var_3148) /* ty=(Tensor[(312), float64], Tensor[(80), int8]) */
}

def @func_3522() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  @func_3520() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */
}

def @func_5283() -> Tensor[(2, 12, 13), bool] {
  %559 = fn () -> Tensor[(2, 12, 13), bool] {
    %558 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
    %558.1
  };
  %559() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_4094() -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) {
  %564 = fn () -> (Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) {
    %560 = @func_2438() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */;
    %561 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
    %562 = %560.0;
    %563 = %561.2;
    (%562, %563)
  };
  %564() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */
}

def @func_1915() -> Tensor[(2, 12, 13), bool] {
  %566 = fn () -> Tensor[(2, 12, 13), bool] {
    %565 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
    %565.1
  };
  %566() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_1316(%var_1306: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), bool],) {
  %567 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %568 = cast(%var_1306, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %572 = less(%570, %571) /* ty=Tensor[(2, 12, 13), bool] */;
  (%572,)
}

def @func_4423(%var_4395: Tensor[(2, 12, 13), bool]) -> (Tensor[(2, 12, 13), bool], Tensor[(180), int64], Tensor[(180), int64], Tensor[(2, 12, 13), float64]) {
  %573 = @func_4277() /* ty=(Tensor[(312), float64], Tensor[(2, 12, 13), bool]) */;
  %574 = %573.1;
  %575 = cast(%var_4395, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = cast(meta[relay.Constant][26] /* ty=Tensor[(180), int64] */, dtype="int64") /* ty=Tensor[(180), int64] */;
  %580 = reshape(%579, newshape=[180]) /* ty=Tensor[(180), int64] */;
  %581 = @func_1602(%580) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(80), uint8], Tensor[(64), float64], Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(10, 3, 6), bool], Tensor[(180), int64]) */;
  %582 = less_equal(%577, %578) /* ty=Tensor[(2, 12, 13), bool] */;
  %583 = %581.10;
  %584 = @func_1730() /* ty=Tensor[(2, 12, 13), float64] */;
  (%582, %583, meta[relay.Constant][26] /* ty=Tensor[(180), int64] */, %584)
}

def @func_2952(%var_2951: Tensor[(448), float32]) -> (Tensor[(9, 12, 6), float64], Tensor[(16, 2, 14), float32], Tensor[(448), float32], Tensor[(9, 12, 6), float32], Tensor[(11, 2, 6), float64], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32]) {
  %605 = fn (%var_2908: Tensor[(448), float32]) -> (Tensor[(9, 12, 6), float64], Tensor[(16, 2, 14), float32], Tensor[(448), float32], Tensor[(9, 12, 6), float32], Tensor[(11, 2, 6), float64], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32]) {
    %585 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 6), float64] */;
    %586 = cast(%var_2908, dtype="float32") /* ty=Tensor[(448), float32] */;
    %587 = reshape(%586, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
    %588 = @func_2346(%587) /* ty=(Tensor[(16, 2, 14), float32],) */;
    %589 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 12, 6), float64] */, dtype="float32") /* ty=Tensor[(9, 12, 6), float32] */;
    %590 = cast(meta[relay.Constant][28] /* ty=Tensor[(33, 4), float32] */, dtype="float32") /* ty=Tensor[(33, 4), float32] */;
    %591 = reshape(%590, newshape=[11, 2, 6]) /* ty=Tensor[(11, 2, 6), float32] */;
    %592 = @func_1831(%591) /* ty=Tensor[(11, 2, 6), int32] */;
    %593 = cast(meta[relay.Constant][28] /* ty=Tensor[(33, 4), float32] */, dtype="float64") /* ty=Tensor[(33, 4), float64] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="float64") /* ty=Tensor[(11, 2, 6), float64] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %597 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 70), float32] */, dtype="float32") /* ty=Tensor[(7, 70), float32] */;
    %598 = reshape(%597, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %599 = @func_2773(%598) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool], Tensor[(490), float32]) */;
    %600 = erf(%585) /* ty=Tensor[(9, 12, 6), float64] */;
    %601 = %588.0;
    %602 = atanh(%589) /* ty=Tensor[(9, 12, 6), float32] */;
    %603 = subtract(%595, %596) /* ty=Tensor[(11, 2, 6), float64] */;
    %604 = %599.0;
    (%600, %601, %var_2908, %602, %603, %604, meta[relay.Constant][29] /* ty=Tensor[(7, 70), float32] */)
  };
  %605(%var_2951) /* ty=(Tensor[(9, 12, 6), float64], Tensor[(16, 2, 14), float32], Tensor[(448), float32], Tensor[(9, 12, 6), float32], Tensor[(11, 2, 6), float64], Tensor[(2, 12, 13), float32], Tensor[(7, 70), float32]) */
}

def @func_785(%var_744: int64, %var_745: Tensor[(6, 6, 11), int64]) -> (Tensor[(2, 15, 3), float64], Tensor[(90), float64], Tensor[(6, 6, 11), int64]) {
  %606 = cast(meta[relay.Constant][30] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %607 = reshape(%606, newshape=[2, 15, 3]) /* ty=Tensor[(2, 15, 3), float64] */;
  %608 = @func_584(%607) /* ty=(Tensor[(2, 15, 3), float64], Tensor[(2, 15, 3), float64]) */;
  %609 = cast(%var_745, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %610 = acos(%609) /* ty=Tensor[(6, 6, 11), float32] */;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
  %612 = tan(%611) /* ty=Tensor[(6, 6, 11), float32] */;
  %613 = cast(%var_744, dtype="int64") /* ty=int64 */;
  %614 = cast(%var_745, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %615 = bitwise_and(%613, %614) /* ty=Tensor[(6, 6, 11), int64] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %617 = shape_of(%var_745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_745, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %620 = mod(%618, %619) /* ty=Tensor[(6, 6, 11), float64] */;
  %621 = cast(%620, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %622 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%612, dtype="int64") /* ty=Tensor[(6, 6, 11), int64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %625 = %608.1;
  %626 = right_shift(%623, %624) /* ty=Tensor[(6, 6, 11), int64] */;
  (%625, meta[relay.Constant][30] /* ty=Tensor[(90), float64] */, %626)
}

def @func_1730() -> Tensor[(2, 12, 13), float64] {
  %627 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  exp(%629) /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_3498(%var_3497: Tensor[(180), int64]) -> (Tensor[(2, 12, 13), bool], Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) {
  %642 = fn (%var_3464: Tensor[(180), int64]) -> (Tensor[(2, 12, 13), bool], Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) {
    %630 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
    %631 = cast(%var_3464, dtype="int64") /* ty=Tensor[(180), int64] */;
    %632 = cast(%var_3464, dtype="int64") /* ty=Tensor[(180), int64] */;
    %633 = reshape(%631, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
    %634 = reshape(%632, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), int64] */;
    %635 = @func_1116(%633, %634) /* ty=(Tensor[(10, 3, 6), bool],) */;
    %636 = @func_1088() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(5, 8, 2), uint16], Tensor[(80), uint8]) */;
    %637 = @func_2108() /* ty=(Tensor[(2, 12, 13), bool],) */;
    %638 = %630.1;
    %639 = %635.0;
    %640 = %636.1;
    %641 = %637.0;
    (%638, %639, %var_3464, %640, %641)
  };
  %642(%var_3497) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(10, 3, 6), bool], Tensor[(180), int64], Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */
}

def @func_1459() -> Tensor[(2, 12, 13), bool] {
  @func_1023() /* ty=Tensor[(2, 12, 13), bool] */
}

def @func_3872() -> (Tensor[(2, 12, 13), bool],) {
  %643 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
  (%643,)
}

def @func_3070() -> (Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) {
  %650 = fn () -> (Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) {
    %644 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(15, 8, 3), float32] */;
    %645 = cast(meta[relay.Constant][32] /* ty=Tensor[(40, 2), uint8] */, dtype="uint8") /* ty=Tensor[(40, 2), uint8] */;
    %646 = reshape(%645, newshape=[80]) /* ty=Tensor[(80), uint8] */;
    %647 = @func_1863(%646) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(80), uint8], Tensor[(5, 8, 2), bool]) */;
    %648 = asinh(%644) /* ty=Tensor[(15, 8, 3), float32] */;
    %649 = %647.2;
    (%648, %649, meta[relay.Constant][32] /* ty=Tensor[(40, 2), uint8] */)
  };
  %650() /* ty=(Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) */
}

def @func_3207(%var_3205: Tensor[(1, 200), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(1, 200), float32], Tensor[(9, 15, 7), float64]) {
  @func_3204(%var_3205) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(1, 200), float32], Tensor[(9, 15, 7), float64]) */
}

def @func_888(%var_887: Tensor[(5, 8, 2), uint8]) -> (Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) {
  %668 = fn (%var_864: Tensor[(5, 8, 2), uint8]) -> (Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) {
    %651 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 8, 2), uint8] */, dtype="uint8") /* ty=Tensor[(5, 8, 2), uint8] */;
    %652 = shape_of(%var_864, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%var_864, dtype="uint8") /* ty=Tensor[(5, 8, 2), uint8] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %655 = subtract(%653, %654) /* ty=Tensor[(5, 8, 2), uint8] */;
    %656 = cast(%655, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
    %657 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(5, 8, 2), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 8, 2), uint8] */, dtype="float32") /* ty=Tensor[(5, 8, 2), float32] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %660 = mod(%658, %659) /* ty=Tensor[(5, 8, 2), float32] */;
    %661 = cast(%660, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
    %662 = shape_of(%var_864, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%var_864, dtype="uint16") /* ty=Tensor[(5, 8, 2), uint16] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %665 = cast(%660, dtype="float64") /* ty=Tensor[(5, 8, 2), float64] */;
    %666 = left_shift(%663, %664) /* ty=Tensor[(5, 8, 2), uint16] */;
    %667 = asinh(%665) /* ty=Tensor[(5, 8, 2), float64] */;
    (%666, %667)
  };
  %668(%var_887) /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(5, 8, 2), float64]) */
}

def @func_3337(%var_3336: Tensor[(2, 9, 5), float32]) -> (Tensor[(2, 9, 5), float32], Tensor[(15, 8, 3), float32]) {
  %673 = fn (%var_3304: Tensor[(2, 9, 5), float32]) -> (Tensor[(2, 9, 5), float32], Tensor[(15, 8, 3), float32]) {
    %669 = cast(%var_3304, dtype="float32") /* ty=Tensor[(2, 9, 5), float32] */;
    %670 = @func_3069() /* ty=(Tensor[(15, 8, 3), float32], Tensor[(5, 8, 2), bool], Tensor[(40, 2), uint8]) */;
    %671 = erf(%669) /* ty=Tensor[(2, 9, 5), float32] */;
    %672 = %670.0;
    (%671, %672)
  };
  %673(%var_3336) /* ty=(Tensor[(2, 9, 5), float32], Tensor[(15, 8, 3), float32]) */
}

def @func_3920() -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) {
  %678 = fn () -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) {
    %674 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
    %675 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
    %676 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
    %677 = %674.0;
    (%675, %676, %677)
  };
  %678() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */
}

def @func_2685() -> (Tensor[(2, 12, 13), bool],) {
  @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */
}

def @func_2518(%var_2516: int64, %var_2517: Tensor[(490), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 15, 3), int8], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(396), bool]) {
  @func_2514(%var_2516, %var_2517) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 15, 3), int8], Tensor[(7, 10, 7), float32], Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(396), bool]) */
}

def @func_4786(%var_4785: Tensor[(1, 80), uint16]) -> (Tensor[(2, 12, 13), bool], Tensor[(6, 6, 11), float64], Tensor[(2640, 1), float32], Tensor[(90), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(1, 80), float32]) {
  %702 = fn (%var_4724: Tensor[(1, 80), uint16]) -> (Tensor[(2, 12, 13), bool], Tensor[(6, 6, 11), float64], Tensor[(2640, 1), float32], Tensor[(90), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(1, 80), float32]) {
    %679 = @func_3520() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
    %680 = @func_2745() /* ty=(Tensor[(80), uint8], int64, Tensor[(5, 8, 2), uint16], Tensor[(6, 6, 11), uint64], Tensor[(2, 12, 13), bool]) */;
    %681 = %680.3;
    %682 = cast(%681, dtype="float32") /* ty=Tensor[(6, 6, 11), float32] */;
    %683 = asinh(%682) /* ty=Tensor[(6, 6, 11), float32] */;
    %684 = cast(%683, dtype="float64") /* ty=Tensor[(6, 6, 11), float64] */;
    %685 = cast(%var_4724, dtype="uint16") /* ty=Tensor[(1, 80), uint16] */;
    %686 = cast(meta[relay.Constant][34] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %687 = reshape(%685, newshape=[5, 8, 2]) /* ty=Tensor[(5, 8, 2), uint16] */;
    %688 = reshape(%686, newshape=[90]) /* ty=Tensor[(90), float32] */;
    %689 = @func_4363(%687, %688) /* ty=(Tensor[(2640, ?), int32], Tensor[(5, 8, 2), float64], Tensor[(5, 8, 2), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float32], Tensor[(90), float32], Tensor[(2640, 1), float32], Tensor[(15, 8, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(490), float32]) */;
    %690 = @func_3919() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
    %691 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
    %692 = cast(meta[relay.Constant][35] /* ty=Tensor[(945), int32] */, dtype="int32") /* ty=Tensor[(945), int32] */;
    %693 = reshape(%692, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
    %694 = cast(%var_4724, dtype="float32") /* ty=Tensor[(1, 80), float32] */;
    %695 = %679.1;
    %696 = log10(%684) /* ty=Tensor[(6, 6, 11), float64] */;
    %697 = %689.6;
    %698 = %690.1;
    %699 = %691.0;
    %700 = @func_1983(%693) /* ty=Tensor[(9, 15, 7), bool] */;
    %701 = log(%694) /* ty=Tensor[(1, 80), float32] */;
    (%695, %696, %697, meta[relay.Constant][34] /* ty=Tensor[(90), float32] */, %698, %699, %700, meta[relay.Constant][35] /* ty=Tensor[(945), int32] */, %701)
  };
  %702(%var_4785) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(6, 6, 11), float64], Tensor[(2640, 1), float32], Tensor[(90), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(1, 80), float32]) */
}

def @func_2348(%var_2347: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), float32],) {
  %705 = fn (%var_2341: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), float32],) {
    %703 = cast(%var_2341, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %704 = cosh(%703) /* ty=Tensor[(16, 2, 14), float32] */;
    (%704,)
  };
  %705(%var_2347) /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_5230() -> (Tensor[(2, 12, 13), bool],) {
  %708 = fn () -> (Tensor[(2, 12, 13), bool],) {
    %706 = @func_4946() /* ty=(Tensor[(2, 12, 13), bool],) */;
    %707 = %706.0;
    (%707,)
  };
  %708() /* ty=(Tensor[(2, 12, 13), bool],) */
}

def @func_1119(%var_1117: Tensor[(10, 3, 6), int64], %var_1118: Tensor[(10, 3, 6), int64]) -> (Tensor[(10, 3, 6), bool],) {
  %714 = fn (%var_1111: Tensor[(10, 3, 6), int64], %var_1112: Tensor[(10, 3, 6), int64]) -> (Tensor[(10, 3, 6), bool],) {
    %709 = cast(%var_1112, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
    %710 = shape_of(%var_1111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %711 = cast(%var_1111, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
    %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %713 = less(%711, %712) /* ty=Tensor[(10, 3, 6), bool] */;
    (%713,)
  };
  %714(%var_1117, %var_1118) /* ty=(Tensor[(10, 3, 6), bool],) */
}

def @func_3867() -> Tensor[(2, 12, 13), float64] {
  @func_1730() /* ty=Tensor[(2, 12, 13), float64] */
}

def @func_3809(%var_3808: Tensor[(945), int32]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(9, 15, 7), bool], Tensor[(945), int32]) {
  %722 = fn (%var_3774: Tensor[(945), int32]) -> (Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(9, 15, 7), bool], Tensor[(945), int32]) {
    %715 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
    %716 = cast(%715, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
    %717 = cast(%var_3774, dtype="int32") /* ty=Tensor[(945), int32] */;
    %718 = reshape(%717, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), int32] */;
    %719 = log(%716) /* ty=Tensor[(2, 12, 13), float32] */;
    %720 = @func_2210() /* ty=Tensor[(2, 12, 13), float32] */;
    %721 = @func_1983(%718) /* ty=Tensor[(9, 15, 7), bool] */;
    (%719, %720, %721, %var_3774)
  };
  %722(%var_3808) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(9, 15, 7), bool], Tensor[(945), int32]) */
}

def @func_5177(%var_5176: Tensor[(13, 4, 4), uint8]) -> (Tensor[(13, 4, 4), uint8],) {
  %728 = fn (%var_5171: Tensor[(13, 4, 4), uint8]) -> (Tensor[(13, 4, 4), uint8],) {
    %723 = cast(%var_5171, dtype="uint8") /* ty=Tensor[(13, 4, 4), uint8] */;
    %724 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(13, 4, 4), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %725 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 4, 4), uint8] */, dtype="uint8") /* ty=Tensor[(13, 4, 4), uint8] */;
    %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %727 = add(%725, %726) /* ty=Tensor[(13, 4, 4), uint8] */;
    (%727,)
  };
  %728(%var_5176) /* ty=(Tensor[(13, 4, 4), uint8],) */
}

def @func_2683() -> (Tensor[(2, 12, 13), bool],) {
  %729 = @func_1448() /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), bool]) */;
  %730 = %729.1;
  (%730,)
}

def @func_2843() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) {
  %733 = fn () -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) {
    %731 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
    %732 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
    (%731, %732)
  };
  %733() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), float32]) */
}

def @func_2108() -> (Tensor[(2, 12, 13), bool],) {
  %734 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  (%734,)
}

def @func_3520() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %735 = @func_1648() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) */;
  %736 = @func_1459() /* ty=Tensor[(2, 12, 13), bool] */;
  %737 = %735.1;
  (%736, %737)
}

def @func_813() -> (Tensor[(2, 12, 13), float32],) {
  %739 = fn () -> (Tensor[(2, 12, 13), float32],) {
    %738 = @func_634() /* ty=Tensor[(2, 12, 13), float32] */;
    (%738,)
  };
  %739() /* ty=(Tensor[(2, 12, 13), float32],) */
}

def @func_3003() -> (Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) {
  %743 = fn () -> (Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) {
    %740 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
    %741 = @func_2082() /* ty=Tensor[(80), uint8] */;
    %742 = %740.0;
    (%741, %742)
  };
  %743() /* ty=(Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */
}

def @func_2877() -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %744 = @func_2683() /* ty=(Tensor[(2, 12, 13), bool],) */;
  %745 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %746 = %744.0;
  (%745, %746)
}

def @func_3410(%var_3387: Tensor[(2, 12, 13), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool], Tensor[(2, 12, 13), bool]) {
  %747 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
  %748 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
  %749 = cast(%748, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %750 = sigmoid(%749) /* ty=Tensor[(2, 12, 13), float32] */;
  %751 = cast(%750, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %752 = cosh(%751) /* ty=Tensor[(2, 12, 13), float32] */;
  %753 = cast(%var_3387, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %757 = @func_2277() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8], Tensor[(2, 12, 13), bool]) */;
  %758 = cast(%var_3387, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
  %759 = reshape(%758, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
  %760 = @func_1316(%759) /* ty=(Tensor[(2, 12, 13), bool],) */;
  %761 = %747.2;
  %762 = not_equal(%755, %756) /* ty=Tensor[(2, 12, 13), bool] */;
  %763 = %757.0;
  %764 = %760.0;
  (%761, %762, %763, %764)
}

def @func_4239(%var_4165: Tensor[(200), float32], %var_4187: Tensor[(10, 4, 5), float32]) -> (Tensor[(2, 12, 13), bool], Tensor[(10, 4, 5), float64], Tensor[(80), uint8], Tensor[(2, 12, 13), bool], Tensor[(490), float32], Tensor[(200), float32]) {
  %765 = @func_1953() /* ty=(Tensor[(5, 8, 2), uint16], Tensor[(2, 12, 13), bool]) */;
  %766 = cast(%var_4165, dtype="float32") /* ty=Tensor[(200), float32] */;
  %767 = reshape(%766, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float32] */;
  %768 = @func_3171(%767) /* ty=(Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) */;
  %769 = %768.0;
  %770 = cast(%var_4187, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %774 = @func_4093() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(80), uint8]) */;
  %775 = cast(meta[relay.Constant][37] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %776 = reshape(%775, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %777 = @func_1807(%776) /* ty=(Tensor[(2, 12, 13), bool], Tensor[(7, 10, 7), bool]) */;
  %778 = cast(%var_4187, dtype="float32") /* ty=Tensor[(10, 4, 5), float32] */;
  %779 = shape_of(%var_4165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %780 = cast(%var_4165, dtype="float32") /* ty=Tensor[(200), float32] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?), float32] */;
  %782 = %765.1;
  %783 = power(%772, %773) /* ty=Tensor[(10, 4, 5), float64] */;
  %784 = %774.1;
  %785 = %777.0;
  %786 = divide(%780, %781) /* ty=Tensor[(200), float32] */;
  (%782, %783, %784, %785, meta[relay.Constant][37] /* ty=Tensor[(490), float32] */, %786)
}

def @func_2200(%var_2199: Tensor[(2, 12, 13), float64]) -> (Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) {
  %807 = fn (%var_2145: Tensor[(2, 12, 13), float64]) -> (Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) {
    %787 = @func_1914() /* ty=Tensor[(2, 12, 13), bool] */;
    %788 = cast(%787, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %789 = acos(%788) /* ty=Tensor[(2, 12, 13), float64] */;
    %790 = cast(%787, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %792 = cast(%789, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %794 = floor_mod(%792, %793) /* ty=Tensor[(2, 12, 13), float64] */;
    %795 = cast(%var_2145, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%794, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %799 = cast(%var_2145, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %800 = cast(%794, dtype="bool") /* ty=Tensor[(2, 12, 13), bool] */;
    %801 = reshape(%799, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %802 = reshape(%800, newshape=[2, 12, 13]) /* ty=Tensor[(2, 12, 13), bool] */;
    %803 = @func_1530(%801, %802) /* ty=(Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float64]) */;
    %804 = mod(%797, %798) /* ty=Tensor[(2, 12, 13), float64] */;
    %805 = %803.1;
    %806 = @func_1023() /* ty=Tensor[(2, 12, 13), bool] */;
    (%804, %805, %806)
  };
  %807(%var_2199) /* ty=(Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), float64], Tensor[(2, 12, 13), bool]) */
}

def @func_3173(%var_3172: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) {
  %812 = fn (%var_3162: Tensor[(10, 4, 5), float32]) -> (Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) {
    %808 = cast(%var_3162, dtype="float32") /* ty=Tensor[(10, 4, 5), float32] */;
    %809 = @func_3129() /* ty=(Tensor[(2, 12, 13), bool], Tensor[(9, 15, 7), bool], Tensor[(945), int32], Tensor[(8, 13, 13), int8], Tensor[(1352), float64]) */;
    %810 = asinh(%808) /* ty=Tensor[(10, 4, 5), float32] */;
    %811 = %809.1;
    (%810, %811)
  };
  %812(%var_3172) /* ty=(Tensor[(10, 4, 5), float32], Tensor[(9, 15, 7), bool]) */
}

def @func_971(%var_910: Tensor[(490), float32], %var_912: Tensor[(2, 12, 13), float64], %var_951: Tensor[(7, 10, 7), float32]) -> (Tensor[(490), float32], Tensor[(2, 12, 13), float32], Tensor[(2, 12, 13), float32], Tensor[(7, 10, 7), bool]) {
  %813 = @func_812() /* ty=(Tensor[(2, 12, 13), float32],) */;
  %814 = %813.0;
  %815 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 12, 13), float32] */, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="float64") /* ty=Tensor[(2, 12, 13), float64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %819 = power(%817, %818) /* ty=Tensor[(2, 12, 13), float64] */;
  %820 = cast(%var_912, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %824 = cast(%814, dtype="float32") /* ty=Tensor[(2, 12, 13), float32] */;
  %825 = cast(%var_910, dtype="float32") /* ty=Tensor[(490), float32] */;
  %826 = reshape(%825, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %827 = @func_689(%826) /* ty=(Tensor[(7, 10, 7), float32],) */;
  %828 = %827.0;
  %829 = cast(%var_951, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%828, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %833 = add(%822, %823) /* ty=Tensor[(2, 12, 13), float32] */;
  %834 = atanh(%824) /* ty=Tensor[(2, 12, 13), float32] */;
  %835 = not_equal(%831, %832) /* ty=Tensor[(7, 10, 7), bool] */;
  (%var_910, %833, %834, %835)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen33/build/output.py", line 1928, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:22] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

