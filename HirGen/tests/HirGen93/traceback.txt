==========mod==========
#[version = "0.0.5"]
def @func_2220(%var_2159: Tensor[(11, 16, 15), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) {
  %0 = cast(%var_2159, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %1 = log(%0) /* ty=Tensor[(11, 16, 15), float64] */;
  %2 = cast(%var_2159, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = @func_1178() /* ty=Tensor[(9, 9, 13), float32] */;
  %7 = less(%4, %5) /* ty=Tensor[(11, 16, 15), bool] */;
  (%6, %7)
}

def @func_7026() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32]) {
  %8 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
  %9 = %8.0;
  %10 = @func_4429() /* ty=Tensor[(9, 9, 13), float32] */;
  (%9, %10)
}

def @func_1303() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
  %11 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %12 = %11.1;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %14 = log10(%13) /* ty=Tensor[(9, 9, 13), float64] */;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %16 = cast(%12, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %17 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%14, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %20 = sigmoid(%15) /* ty=Tensor[(9, 9, 13), float64] */;
  %21 = floor_mod(%18, %19) /* ty=Tensor[(9, 9, 13), float32] */;
  (%20, %21)
}

def @func_1714() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
  %22 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
  %23 = %22.0;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 9, 13), int32] */, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
  %29 = logical_and(%26, %27) /* ty=Tensor[(9, 9, 13), bool] */;
  (%28, %29)
}

def @func_1754() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) {
  %30 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %31 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %32 = %30.3;
  %33 = %31.1;
  (%32, %33)
}

def @func_7351() -> Tensor[(9, 9, 13), float64] {
  %34 = @func_3584() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) */;
  %34.0
}

def @func_6995() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(300), int8], Tensor[(15, 2, 10), uint16]) {
  %35 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %36 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
  %38 = reshape(%37, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), int8] */;
  %39 = @func_4836(%38) /* ty=(Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) */;
  %40 = %39.1;
  %41 = cast(%40, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
  %42 = acosh(%41) /* ty=Tensor[(15, 2, 10), float32] */;
  %43 = cast(%40, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %47 = %35.1;
  %48 = %36.0;
  %49 = bitwise_and(%45, %46) /* ty=Tensor[(15, 2, 10), uint16] */;
  (%47, %48, meta[relay.Constant][1] /* ty=Tensor[(300), int8] */, %49)
}

def @func_2653() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) {
  %50 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %51 = %50.0;
  %52 = cast(%51, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %53 = reshape(%52, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %54 = @func_799(%53) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %55 = @func_2156() /* ty=Tensor[(9, 9, 13), float32] */;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %57 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %58 = %54.3;
  %59 = sinh(%56) /* ty=Tensor[(9, 9, 13), float64] */;
  %60 = %57.0;
  (%51, %58, %59, %60)
}

def @func_4982(%var_4946: uint64, %var_4947: Tensor[(7, 15, 4), uint64]) -> Tensor[(7, 15, 4), uint64] {
  %61 = cast(%var_4946, dtype="uint64") /* ty=uint64 */;
  %62 = cast(%var_4947, dtype="uint64") /* ty=Tensor[(7, 15, 4), uint64] */;
  maximum(%61, %62) /* ty=Tensor[(7, 15, 4), uint64] */
}

def @func_3368() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %63 = @func_1958() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) */;
  %64 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %65 = %64.0;
  %66 = cast(%65, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %67 = %63.0;
  %68 = asin(%66) /* ty=Tensor[(9, 9, 13), float32] */;
  (%67, %68)
}

def @func_5631() -> (Tensor[(9, 9, 13), int16], Tensor[(10, 7, 12), float32]) {
  %69 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %70 = @func_3675() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) */;
  %71 = %69.3;
  %72 = %70.0;
  (%71, %72)
}

def @func_1383() -> (Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) {
  %73 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 7, 12), float64] */, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %74 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
  %75 = acos(%74) /* ty=Tensor[(10, 7, 12), float64] */;
  %76 = cast(%75, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
  %77 = log(%73) /* ty=Tensor[(10, 7, 12), float32] */;
  %78 = asinh(%76) /* ty=Tensor[(10, 7, 12), float64] */;
  (%77, %78)
}

def @func_6747() -> Tensor[(9, 9, 13), bool] {
  %79 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
  %79.0
}

def @func_5404(%var_5376: Tensor[(96), int8], %var_5377: Tensor[(504), int32], %var_5380: Tensor[(792), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(96), int8], Tensor[(504), int32], Tensor[(6, 12, 11), float64], Tensor[(792), float64], Tensor[(6, 8, 2), int16], Tensor[(9, 9, 13), float32]) {
  %80 = cast(%var_5380, dtype="float64") /* ty=Tensor[(792), float64] */;
  %81 = reshape(%80, newshape=[6, 12, 11]) /* ty=Tensor[(6, 12, 11), float64] */;
  %82 = @func_4877(%81) /* ty=(Tensor[(6, 12, 11), float64], Tensor[(9, 9, 13), float32]) */;
  %83 = cast(%var_5376, dtype="int8") /* ty=Tensor[(96), int8] */;
  %84 = cast(%var_5376, dtype="int8") /* ty=Tensor[(96), int8] */;
  %85 = cast(%var_5377, dtype="int32") /* ty=Tensor[(504), int32] */;
  %86 = reshape(%83, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int8] */;
  %87 = reshape(%84, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int8] */;
  %88 = reshape(%85, newshape=[504]) /* ty=Tensor[(504), int32] */;
  %89 = @func_4056(%86, %87, %88) /* ty=(Tensor[(6, 8, 2), int8], Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32], Tensor[(504), float32]) */;
  %90 = %89.0;
  %91 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 8, 2), int8] */, dtype="int16") /* ty=Tensor[(6, 8, 2), int16] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="int16") /* ty=Tensor[(6, 8, 2), int16] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %95 = cast(%var_5377, dtype="int32") /* ty=Tensor[(504), int32] */;
  %96 = cast(%var_5377, dtype="int32") /* ty=Tensor[(504), int32] */;
  %97 = reshape(%95, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %98 = reshape(%96, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %99 = @func_2859(%97, %98) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
  %100 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  %101 = %82.0;
  %102 = maximum(%93, %94) /* ty=Tensor[(6, 8, 2), int16] */;
  %103 = %99.1;
  (%100, %var_5376, %var_5377, %101, %var_5380, %102, %103)
}

def @func_2001() -> (Tensor[(9, 9, 13), float64],) {
  %104 = @func_1303() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %107 = erf(%106) /* ty=Tensor[(9, 9, 13), float64] */;
  (%107,)
}

def @func_5296() -> (Tensor[(9, 9, 13), float32],) {
  %108 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  (%108,)
}

def @func_1146(%var_1136: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int64], Tensor[(9, 9, 13), float64]) {
  %109 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %110 = cast(%var_1136, dtype="int64") /* ty=Tensor[(9, 9, 13), int64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="int64") /* ty=Tensor[(9, 9, 13), int64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %114 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %115 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
  %116 = bitwise_or(%112, %113) /* ty=Tensor[(9, 9, 13), int64] */;
  %117 = %114.2;
  (%115, %116, %117)
}

def @func_1037(%var_920: Tensor[(3, 36), float64], %var_975: Tensor[(3, 36), float64], %var_1003: Tensor[(9, 9, 13), float32]) -> (Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  %118 = cast(%var_920, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %119 = cast(%var_920, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %120 = reshape(%118, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
  %121 = reshape(%119, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
  %122 = @func_650(%120, %121) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), int32], Tensor[(9, 9, 13), float64]) */;
  %123 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %124 = %123.0;
  %125 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="uint64") /* ty=Tensor[(9, 9, 13), uint64] */;
  %128 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%124, dtype="uint64") /* ty=Tensor[(9, 9, 13), uint64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %131 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %132 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %133 = cast(%var_975, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %134 = shape_of(%var_920, dtype="int32") /* ty=Tensor[(2), int32] */;
  %135 = cast(%var_920, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %137 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %138 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %139 = %138.0;
  %140 = cast(%var_1003, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %145 = %122.1;
  %146 = multiply(%129, %130) /* ty=Tensor[(9, 9, 13), uint64] */;
  %147 = %131.0;
  %148 = %132.2;
  %149 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
  %150 = equal(%135, %136) /* ty=Tensor[(3, 36), bool] */;
  %151 = %137.3;
  %152 = greater(%142, %143) /* ty=Tensor[(9, 9, 13), bool] */;
  %153 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %154 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %155 = %144.2;
  (%145, %146, %147, %148, %149, %150, %151, %152, %153, %154, %155)
}

def @func_5253() -> Tensor[(9, 9, 13), float32] {
  @func_2572() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_2611(%var_2609: Tensor[(2640), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(2640), float64]) {
  %156 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %157 = cast(%var_2609, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %158 = reshape(%157, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
  %159 = @func_2220(%158) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) */;
  %160 = %156.0;
  %161 = %159.0;
  (%160, %161, %var_2609)
}

def @func_5076(%var_4994: uint64, %var_5064: Tensor[(132), float64]) -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float64], Tensor[(1, 11, 12), float64], Tensor[(132), float64], Tensor[(7, 15, 4), uint8]) {
  %162 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %163 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %164 = cast(%var_4994, dtype="float64") /* ty=float64 */;
  %165 = cast(%var_5064, dtype="float64") /* ty=Tensor[(132), float64] */;
  %166 = reshape(%164, newshape=[]) /* ty=float64 */;
  %167 = reshape(%165, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), float64] */;
  %168 = @func_4536(%166, %167) /* ty=(Tensor[(1, 11, 12), float64],) */;
  %169 = cast(%var_4994, dtype="uint64") /* ty=uint64 */;
  %170 = cast(meta[relay.Constant][4] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %171 = reshape(%169, newshape=[]) /* ty=uint64 */;
  %172 = reshape(%170, newshape=[7, 15, 4]) /* ty=Tensor[(7, 15, 4), uint64] */;
  %173 = @func_4982(%171, %172) /* ty=Tensor[(7, 15, 4), uint64] */;
  %174 = cast(%var_4994, dtype="bool") /* ty=bool */;
  %175 = cast(%173, dtype="bool") /* ty=Tensor[(7, 15, 4), bool] */;
  %176 = not_equal(%174, %175) /* ty=Tensor[(7, 15, 4), bool] */;
  %177 = cast(meta[relay.Constant][4] /* ty=Tensor[(420), uint64] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%176, dtype="bool") /* ty=Tensor[(7, 15, 4), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = greater_equal(%179, %180) /* ty=Tensor[(7, 15, 4), bool] */;
  %182 = cast(%181, dtype="uint8") /* ty=Tensor[(7, 15, 4), uint8] */;
  %183 = cast(%var_4994, dtype="uint8") /* ty=uint8 */;
  %184 = @func_3543() /* ty=Tensor[(9, 9, 13), bool] */;
  %185 = %162.2;
  %186 = %163.1;
  %187 = %168.0;
  %188 = multiply(%182, %183) /* ty=Tensor[(7, 15, 4), uint8] */;
  (%184, %185, %186, %187, %var_5064, %188)
}

def @func_2049() -> (Tensor[(14, 5, 8), float32],) {
  %189 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
  %190 = atan(%189) /* ty=Tensor[(14, 5, 8), float32] */;
  (%190,)
}

def @func_3675() -> (Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) {
  %191 = @func_2710() /* ty=(Tensor[(10, 7, 12), float32],) */;
  %192 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 16, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %193 = cos(%192) /* ty=Tensor[(11, 16, 9), float32] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
  %195 = %191.0;
  %196 = cosh(%194) /* ty=Tensor[(11, 16, 9), float32] */;
  (%195, %196)
}

def @func_2989() -> Tensor[(12, 3, 14), float32] {
  %197 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  log2(%197) /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_2710() -> (Tensor[(10, 7, 12), float32],) {
  %198 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %199 = %198.0;
  (%199,)
}

def @func_3584() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) {
  %200 = @func_3436() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */;
  %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), int32] */, dtype="int32") /* ty=Tensor[(504), int32] */;
  %202 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), int32] */, dtype="int32") /* ty=Tensor[(504), int32] */;
  %203 = reshape(%201, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %204 = reshape(%202, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %205 = @func_2859(%203, %204) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
  %206 = %200.0;
  %207 = %205.1;
  (%206, %207, meta[relay.Constant][8] /* ty=Tensor[(504), int32] */)
}

def @func_4836(%var_4813: Tensor[(15, 2, 10), int8]) -> (Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) {
  %208 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 2, 10), int8] */, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
  %209 = shape_of(%var_4813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_4813, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %212 = cast(%var_4813, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
  %213 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(15, 2, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 2, 10), int8] */, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %216 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 2, 10), int8] */, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
  %217 = bitwise_xor(%210, %211) /* ty=Tensor[(15, 2, 10), int8] */;
  %218 = multiply(%214, %215) /* ty=Tensor[(15, 2, 10), uint16] */;
  %219 = cosh(%216) /* ty=Tensor[(15, 2, 10), float32] */;
  (%217, %218, %219)
}

def @func_468() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
  %220 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %221 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %222 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %223 = %220.2;
  %224 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  (%221, %222, %223, %224)
}

def @func_7301() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
  %225 = @func_1303() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %226 = @func_3584() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) */;
  %227 = %225.0;
  %228 = %226.1;
  (%227, %228)
}

def @func_363() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) {
  %229 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %230 = %229.1;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %232 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %233 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %234 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %235 = %234.0;
  %236 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %237 = %236.1;
  %238 = cast(%237, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %239 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%235, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = asinh(%231) /* ty=Tensor[(9, 9, 13), float32] */;
  %243 = %232.0;
  %244 = %233.1;
  %245 = logical_or(%240, %241) /* ty=Tensor[(9, 9, 13), bool] */;
  (%242, %243, %244, %245)
}

def @func_3939() -> Tensor[(10, 7, 12), float64] {
  %246 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %246.1
}

def @func_1537(%var_1528: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), uint32],) {
  %247 = @func_1178() /* ty=Tensor[(9, 9, 13), float32] */;
  %248 = cast(%var_1528, dtype="uint32") /* ty=Tensor[(9, 9, 13), uint32] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="uint32") /* ty=Tensor[(9, 9, 13), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %252 = subtract(%250, %251) /* ty=Tensor[(9, 9, 13), uint32] */;
  (%252,)
}

def @func_1926(%var_1874: Tensor[(9, 9, 13), float32], %var_1914: Tensor[(9, 9, 13), int32]) -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int32], Tensor[(10, 7, 12), float64]) {
  %253 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
  %254 = %253.0;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %256 = reshape(%255, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
  %257 = @func_1496(%256) /* ty=(Tensor[(9, 9, 13), float32],) */;
  %258 = %257.0;
  %259 = cast(%var_1874, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %263 = cast(%254, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %264 = reshape(%263, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
  %265 = @func_1787(%264) /* ty=(Tensor[(9, 9, 13), bool],) */;
  %266 = cast(%var_1914, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %267 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%254, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %270 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %271 = equal(%261, %262) /* ty=Tensor[(9, 9, 13), bool] */;
  %272 = %265.0;
  %273 = minimum(%268, %269) /* ty=Tensor[(9, 9, 13), int32] */;
  %274 = %270.1;
  (%271, %272, %273, %274)
}

def @func_1787(%var_1781: Tensor[(9, 9, 13), float64]) -> (Tensor[(9, 9, 13), bool],) {
  %275 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %276 = %275.1;
  %277 = cast(%var_1781, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = less_equal(%279, %280) /* ty=Tensor[(9, 9, 13), bool] */;
  (%281,)
}

def @func_1249() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  %282 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %283 = %282.0;
  %284 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %287 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%283, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %290 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %291 = cast(%283, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %292 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%285, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %295 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %296 = %295.1;
  %297 = cast(%296, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %298 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%283, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %301 = not_equal(%288, %289) /* ty=Tensor[(9, 9, 13), bool] */;
  %302 = %290.0;
  %303 = floor_divide(%293, %294) /* ty=Tensor[(9, 9, 13), float32] */;
  %304 = logical_xor(%299, %300) /* ty=Tensor[(9, 9, 13), int16] */;
  (%301, %302, %303, %304)
}

def @func_2800(%var_2792: Tensor[(10, 7, 12), float32]) -> Tensor[(10, 7, 12), bool] {
  %305 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %306 = %305.0;
  %307 = cast(%var_2792, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%309, %310) /* ty=Tensor[(10, 7, 12), bool] */
}

def @func_6259(%var_6248: Tensor[(10, 7, 12), float32]) -> (Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), int16]) {
  %311 = @func_3675() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) */;
  %312 = %311.0;
  %313 = cast(%var_6248, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %317 = power(%315, %316) /* ty=Tensor[(10, 7, 12), float32] */;
  %318 = @func_4018() /* ty=Tensor[(9, 9, 13), int16] */;
  (%317, %318)
}

def @func_4790() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64]) {
  %319 = @func_3368() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */;
  %320 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %322 = reshape(%321, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
  %323 = @func_1787(%322) /* ty=(Tensor[(9, 9, 13), bool],) */;
  %324 = cast(%320, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %325 = reshape(%324, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %326 = @func_1146(%325) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int64], Tensor[(9, 9, 13), float64]) */;
  %327 = %319.1;
  %328 = %323.0;
  %329 = %326.2;
  (%327, %320, %328, %329)
}

def @func_1115() -> (Tensor[(9, 9, 13), int32],) {
  %330 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %331 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %335 = left_shift(%333, %334) /* ty=Tensor[(9, 9, 13), int32] */;
  (%335,)
}

def @func_3886() -> (Tensor[(9, 9, 13), bool],) {
  %336 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %337 = %336.1;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %339 = reshape(%338, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %340 = @func_1537(%339) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %343 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%337, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = greater_equal(%344, %345) /* ty=Tensor[(9, 9, 13), bool] */;
  (%346,)
}

def @func_4536(%var_4523: float64, %var_4524: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64],) {
  %347 = cast(%var_4523, dtype="float64") /* ty=float64 */;
  %348 = cast(%var_4524, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %349 = power(%347, %348) /* ty=Tensor[(1, 11, 12), float64] */;
  (%349,)
}

def @func_2105() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  %350 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %351 = %350.1;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %353 = cast(%351, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %354 = reshape(%352, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %355 = reshape(%353, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), int32] */;
  %356 = @func_1926(%354, %355) /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int32], Tensor[(10, 7, 12), float64]) */;
  %357 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %358 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %359 = %356.0;
  %360 = %357.0;
  %361 = %358.1;
  (%351, %359, %360, %361)
}

def @func_6876() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(1, 11, 12), float64], float64, Tensor[(132), float64]) {
  %362 = cast(-5.06312f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %363 = cast(meta[relay.Constant][11] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %364 = reshape(%362, newshape=[]) /* ty=float64 */;
  %365 = reshape(%363, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), float64] */;
  %366 = @func_4536(%364, %365) /* ty=(Tensor[(1, 11, 12), float64],) */;
  %367 = @func_6103() /* ty=Tensor[(9, 9, 13), float64] */;
  %368 = @func_6103() /* ty=Tensor[(9, 9, 13), float64] */;
  %369 = %366.0;
  (%367, %368, %369, -5.06312f64 /* ty=float64 */, meta[relay.Constant][11] /* ty=Tensor[(132), float64] */)
}

def @func_799(%var_772: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
  %370 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %371 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %372 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %373 = %372.2;
  %374 = cast(%373, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %375 = sqrt(%374) /* ty=Tensor[(9, 9, 13), float32] */;
  %376 = cast(%var_772, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
  %381 = %370.0;
  %382 = %371.0;
  %383 = less(%378, %379) /* ty=Tensor[(9, 9, 13), bool] */;
  (%380, %381, %382, %383)
}

def @func_1958() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) {
  %384 = @func_1303() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %385 = %384.1;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %387 = reshape(%386, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
  %388 = @func_1496(%387) /* ty=(Tensor[(9, 9, 13), float32],) */;
  %389 = cast(%385, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %390 = %388.0;
  %391 = log2(%389) /* ty=Tensor[(9, 9, 13), float64] */;
  (%390, %391)
}

def @func_4018() -> Tensor[(9, 9, 13), int16] {
  %392 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %392.1
}

def @func_6229() -> (Tensor[(14, 5, 8), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %393 = @func_2049() /* ty=(Tensor[(14, 5, 8), float32],) */;
  %394 = %393.0;
  %395 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  %396 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
  (%394, %395, %396)
}

def @func_292() -> (Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) {
  %397 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 9, 13), int16] */, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %398 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 9, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 9, 13), int16] */, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %401 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 9, 13), int16] */, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %402 = bitwise_and(%399, %400) /* ty=Tensor[(9, 9, 13), int16] */;
  %403 = atanh(%401) /* ty=Tensor[(9, 9, 13), float64] */;
  (%402, %403)
}

def @func_5150() -> (Tensor[(9, 9, 13), float64],) {
  %404 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
  %405 = %404.0;
  (%405,)
}

def @func_6379() -> (Tensor[(9, 9, 13), bool], Tensor[(15, 2, 10), float32], Tensor[(300), int8], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), float32]) {
  %406 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %407 = cast(meta[relay.Constant][14] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
  %408 = reshape(%407, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), int8] */;
  %409 = @func_4836(%408) /* ty=(Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) */;
  %410 = @func_4627() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */;
  %411 = @func_4675() /* ty=(Tensor[(9, 9, 13), float64],) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %414 = reshape(%413, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %415 = @func_1537(%414) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %416 = cast(%412, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %417 = %406.1;
  %418 = %409.2;
  %419 = %410.1;
  %420 = %415.0;
  %421 = cos(%416) /* ty=Tensor[(9, 9, 13), float32] */;
  (%417, %418, meta[relay.Constant][14] /* ty=Tensor[(300), int8] */, %419, %420, %421)
}

def @func_7220(%var_7217: Tensor[(108), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(108), float64]) {
  %422 = @func_3368() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */;
  %423 = cast(%var_7217, dtype="float64") /* ty=Tensor[(108), float64] */;
  %424 = cast(%var_7217, dtype="float64") /* ty=Tensor[(108), float64] */;
  %425 = %422.1;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %427 = reshape(%423, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %428 = reshape(%424, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %429 = reshape(%426, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %430 = @func_1037(%427, %428, %429) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %431 = %430.4;
  (%425, %431, %var_7217)
}

def @func_5828(%var_5761: Tensor[(2, 6, 12), bool], %var_5762: Tensor[(2, 6, 12), bool]) -> (Tensor[(9, 9, 13), int32], Tensor[(2, 6, 12), float64], Tensor[(2, 6, 12), float64], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64]) {
  %432 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
  %433 = cast(%var_5762, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
  %434 = cast(%var_5761, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
  %435 = shape_of(%var_5762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%var_5762, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = less(%436, %437) /* ty=Tensor[(2, 6, 12), bool] */;
  %439 = cast(%var_5762, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
  %440 = shape_of(%var_5761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_5761, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = logical_and(%441, %442) /* ty=Tensor[(2, 6, 12), bool] */;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
  %445 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%438, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %448 = %432.0;
  %449 = sqrt(%433) /* ty=Tensor[(2, 6, 12), float64] */;
  %450 = minimum(%446, %447) /* ty=Tensor[(2, 6, 12), float64] */;
  %451 = @func_4474() /* ty=Tensor[(9, 9, 13), float64] */;
  %452 = @func_4474() /* ty=Tensor[(9, 9, 13), float64] */;
  (%448, %449, %450, %451, %452)
}

def @func_7532() -> Tensor[(9, 9, 13), float64] {
  %453 = @func_6627() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64], Tensor[(88, 1), float64]) */;
  %453.2
}

def @func_2324(%var_2315: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) {
  %454 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
  %455 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
  %456 = %455.0;
  %457 = %454.0;
  %458 = cast(%457, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %459 = reshape(%458, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
  %460 = @func_1496(%459) /* ty=(Tensor[(9, 9, 13), float32],) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %463 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%456, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %466 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %467 = %466.0;
  %468 = cast(%var_2315, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %472 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %473 = add(%464, %465) /* ty=Tensor[(9, 9, 13), float32] */;
  %474 = right_shift(%470, %471) /* ty=Tensor[(9, 9, 13), int32] */;
  (%457, %472, %473, %474)
}

def @func_4265() -> (Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), float32], Tensor[(1053), float32], Tensor[(10, 7, 12), float32], Tensor[(11, 3, 13), uint64], Tensor[(10, 7, 12), float64]) {
  %475 = @func_3436() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */;
  %476 = cast(meta[relay.Constant][15] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %477 = reshape(%476, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %478 = @func_2324(%477) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
  %479 = @func_3675() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) */;
  %480 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 13), float32] */;
  %481 = cosh(%480) /* ty=Tensor[(11, 3, 13), float32] */;
  %482 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 3, 13), float32] */, dtype="uint64") /* ty=Tensor[(11, 3, 13), uint64] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="uint64") /* ty=Tensor[(11, 3, 13), uint64] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %486 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %487 = %475.1;
  %488 = %478.1;
  %489 = %479.0;
  %490 = left_shift(%484, %485) /* ty=Tensor[(11, 3, 13), uint64] */;
  %491 = %486.1;
  (%487, %488, meta[relay.Constant][15] /* ty=Tensor[(1053), float32] */, %489, %490, %491)
}

def @func_650(%var_597: Tensor[(6, 3, 6), float64], %var_600: Tensor[(6, 3, 6), float64]) -> (Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), int32], Tensor[(9, 9, 13), float64]) {
  %492 = cast(%var_597, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %493 = sigmoid(%492) /* ty=Tensor[(6, 3, 6), float64] */;
  %494 = cast(%var_600, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %498 = cast(%var_600, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %499 = cast(%493, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %500 = asinh(%499) /* ty=Tensor[(6, 3, 6), float64] */;
  %501 = cast(%500, dtype="int32") /* ty=Tensor[(6, 3, 6), int32] */;
  %502 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%493, dtype="int32") /* ty=Tensor[(6, 3, 6), int32] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %505 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %506 = divide(%496, %497) /* ty=Tensor[(6, 3, 6), float32] */;
  %507 = atanh(%498) /* ty=Tensor[(6, 3, 6), float32] */;
  %508 = maximum(%503, %504) /* ty=Tensor[(6, 3, 6), int32] */;
  %509 = %505.2;
  (%506, %507, %508, %509)
}

def @func_3161() -> (Tensor[(9, 9, 13), float32],) {
  %510 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  (%510,)
}

def @func_2403() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) {
  %511 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %512 = @func_1754() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) */;
  %513 = %511.2;
  %514 = %512.1;
  (%513, %514)
}

def @func_3769() -> (Tensor[(9, 9, 13), float32],) {
  %515 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %516 = %515.0;
  (%516,)
}

def @func_4675() -> (Tensor[(9, 9, 13), float64],) {
  %517 = @func_4474() /* ty=Tensor[(9, 9, 13), float64] */;
  (%517,)
}

def @func_4385(%var_4369: float64) -> Tensor[(14, 5, 5), float64] {
  %518 = cast(%var_4369, dtype="float64") /* ty=float64 */;
  %519 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
  floor_mod(%518, %519) /* ty=Tensor[(14, 5, 5), float64] */
}

def @func_1496(%var_1458: Tensor[(9, 9, 13), float64]) -> (Tensor[(9, 9, 13), float32],) {
  %520 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %521 = %520.1;
  %522 = cast(%var_1458, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %526 = power(%524, %525) /* ty=Tensor[(9, 9, 13), float32] */;
  (%526,)
}

def @func_3081() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
  %527 = @func_1754() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) */;
  %528 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %529 = %528.2;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %531 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
  %532 = cast(%531, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %533 = reshape(%532, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
  %534 = @func_1787(%533) /* ty=(Tensor[(9, 9, 13), bool],) */;
  %535 = %527.1;
  %536 = acos(%530) /* ty=Tensor[(9, 9, 13), float32] */;
  %537 = %534.0;
  (%535, %536, %531, %537)
}

def @func_536() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) {
  %538 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %539 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %540 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %541 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %542 = %541.2;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %544 = %538.3;
  %545 = %539.2;
  %546 = %540.0;
  %547 = log(%543) /* ty=Tensor[(9, 9, 13), float32] */;
  (%544, %545, %546, %547)
}

def @func_4627() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %548 = @func_3874() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
  %549 = %548.0;
  %550 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
  (%549, %550)
}

def @func_1597(%var_1584: Tensor[(9, 9, 13), float32]) -> Tensor[(9, 9, 13), float32] {
  %551 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %552 = cast(%var_1584, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%554, %555) /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_2780() -> (Tensor[(9, 9, 13), float64], Tensor[(11, 16, 15), bool], Tensor[(2640), float64]) {
  %556 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
  %557 = cast(meta[relay.Constant][18] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %558 = reshape(%557, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
  %559 = @func_2220(%558) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) */;
  %560 = %556.0;
  %561 = %559.1;
  (%560, %561, meta[relay.Constant][18] /* ty=Tensor[(2640), float64] */)
}

def @func_2572() -> Tensor[(9, 9, 13), float32] {
  @func_1064() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_2156() -> Tensor[(9, 9, 13), float32] {
  @func_573() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_5360(%var_5336: Tensor[(108), float64], %var_5348: uint64) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(108), float64], Tensor[(132), float64], uint64, Tensor[(132), float64]) {
  %562 = @func_1958() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) */;
  %563 = cast(%var_5336, dtype="float64") /* ty=Tensor[(108), float64] */;
  %564 = cast(%var_5336, dtype="float64") /* ty=Tensor[(108), float64] */;
  %565 = %562.0;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %567 = reshape(%563, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %568 = reshape(%564, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %569 = reshape(%566, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %570 = @func_1037(%567, %568, %569) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %571 = cast(%var_5348, dtype="uint64") /* ty=uint64 */;
  %572 = cast(meta[relay.Constant][19] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %573 = reshape(%571, newshape=[]) /* ty=uint64 */;
  %574 = reshape(%572, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %575 = @func_5076(%573, %574) /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float64], Tensor[(1, 11, 12), float64], Tensor[(132), float64], Tensor[(7, 15, 4), uint8]) */;
  %576 = %570.10;
  %577 = %575.4;
  (%565, %576, %var_5336, %577, %var_5348, meta[relay.Constant][19] /* ty=Tensor[(132), float64] */)
}

def @func_4311(%var_4291: Tensor[(8, 4, 14), float32], %var_4303: Tensor[(1053), float32]) -> (Tensor[(8, 4, 14), float32], Tensor[(5, 4, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(1053), float32]) {
  %578 = cast(-7.13036f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %579 = cast(%var_4291, dtype="float32") /* ty=Tensor[(8, 4, 14), float32] */;
  %580 = @func_3911() /* ty=(Tensor[(5, 4, 13), float32],) */;
  %581 = cast(%var_4303, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %582 = reshape(%581, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %583 = @func_1537(%582) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %584 = power(%578, %579) /* ty=Tensor[(8, 4, 14), float32] */;
  %585 = %580.0;
  %586 = %583.0;
  (%584, %585, %586, %var_4303)
}

def @func_5127(%var_5107: Tensor[(5, 4, 6), float64]) -> (Tensor[(9, 9, 13), int32], Tensor[(5, 4, 6), float64]) {
  %587 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
  %588 = cast(%var_5107, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %589 = atan(%588) /* ty=Tensor[(5, 4, 6), float64] */;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %591 = %587.0;
  %592 = sqrt(%590) /* ty=Tensor[(5, 4, 6), float64] */;
  (%591, %592)
}

def @func_5479(%var_5451: Tensor[(6, 15, 2), float64], %var_5452: Tensor[(6, 15, 2), float64], %var_5466: Tensor[(6, 15, 2), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(6, 15, 2), bool]) {
  %593 = cast(%var_5452, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %594 = shape_of(%var_5451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_5451, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %597 = cast(%var_5466, dtype="bool") /* ty=Tensor[(6, 15, 2), bool] */;
  %598 = shape_of(%var_5451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%var_5451, dtype="bool") /* ty=Tensor[(6, 15, 2), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = power(%595, %596) /* ty=Tensor[(6, 15, 2), float64] */;
  %602 = logical_or(%599, %600) /* ty=Tensor[(6, 15, 2), bool] */;
  (%601, %602)
}

def @func_5855() -> Tensor[(9, 9, 13), float32] {
  @func_5253() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_1064() -> Tensor[(9, 9, 13), float32] {
  @func_573() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_5891(%var_5886: Tensor[(12, 16, 2), float32]) -> Tensor[(12, 16, 2), float32] {
  %603 = cast(%var_5886, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  acosh(%603) /* ty=Tensor[(12, 16, 2), float32] */
}

def @func_3436() -> (Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) {
  %604 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %605 = @func_2710() /* ty=(Tensor[(10, 7, 12), float32],) */;
  %606 = %604.1;
  %607 = %605.0;
  (%606, %607)
}

def @func_6429() -> Tensor[(10, 7, 12), float32] {
  %608 = @func_3436() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */;
  %608.1
}

def @func_3239(%var_3207: Tensor[(1, 2, 3), uint16]) -> Tensor[(1, 2, 3), uint16] {
  %609 = cast(meta[relay.Constant][20] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %610 = cast(%var_3207, dtype="uint16") /* ty=Tensor[(1, 2, 3), uint16] */;
  bitwise_and(%609, %610) /* ty=Tensor[(1, 2, 3), uint16] */
}

def @func_3911() -> (Tensor[(5, 4, 13), float32],) {
  %611 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
  %612 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(5, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %615 = mod(%613, %614) /* ty=Tensor[(5, 4, 13), float32] */;
  (%615,)
}

def @func_3834() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %616 = @func_3769() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %619 = reshape(%618, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %620 = @func_2324(%619) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
  %621 = cast(%617, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %622 = %620.1;
  %623 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %624 = exp(%621) /* ty=Tensor[(9, 9, 13), float32] */;
  (%622, %623, %624)
}

def @func_5998() -> (Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) {
  %625 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %626 = %625.3;
  %627 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="uint16") /* ty=Tensor[(9, 9, 13), uint16] */;
  %630 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%626, dtype="uint16") /* ty=Tensor[(9, 9, 13), uint16] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %633 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %634 = bitwise_xor(%631, %632) /* ty=Tensor[(9, 9, 13), uint16] */;
  %635 = %633.0;
  (%634, %635)
}

def @func_5179() -> Tensor[(9, 9, 13), float32] {
  %636 = @func_1958() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) */;
  %636.0
}

def @func_6703(%var_6688: Tensor[(14, 15, 6), float32]) -> (Tensor[(14, 15, 6), float32],) {
  %637 = cast(9.37073f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %638 = cast(%var_6688, dtype="float32") /* ty=Tensor[(14, 15, 6), float32] */;
  %639 = minimum(%637, %638) /* ty=Tensor[(14, 15, 6), float32] */;
  (%639,)
}

def @func_4877(%var_4857: Tensor[(6, 12, 11), float64]) -> (Tensor[(6, 12, 11), float64], Tensor[(9, 9, 13), float32]) {
  %640 = cast(%var_4857, dtype="float64") /* ty=Tensor[(6, 12, 11), float64] */;
  %641 = sin(%640) /* ty=Tensor[(6, 12, 11), float64] */;
  %642 = @func_2156() /* ty=Tensor[(9, 9, 13), float32] */;
  (%641, %642)
}

def @func_2859(%var_2832: Tensor[(4, 14, 9), int32], %var_2833: Tensor[(4, 14, 9), int32]) -> (Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) {
  %643 = cast(%var_2833, dtype="int32") /* ty=Tensor[(4, 14, 9), int32] */;
  %644 = shape_of(%var_2832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%var_2832, dtype="int32") /* ty=Tensor[(4, 14, 9), int32] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %647 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %648 = bitwise_or(%645, %646) /* ty=Tensor[(4, 14, 9), int32] */;
  %649 = %647.2;
  (%648, %649)
}

def @func_7074() -> Tensor[(9, 9, 13), uint16] {
  %650 = @func_5998() /* ty=(Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) */;
  %650.0
}

def @func_3874() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) {
  %651 = @func_3161() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %654 = reshape(%653, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %655 = @func_2324(%654) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
  %656 = %655.0;
  (%652, %656)
}

def @func_5553() -> (Tensor[(1, 2, 3), uint16], Tensor[(6), uint16], Tensor[(9, 9, 13), float32], Tensor[(10, 7, 12), float64]) {
  %657 = cast(meta[relay.Constant][23] /* ty=Tensor[(6), uint16] */, dtype="uint16") /* ty=Tensor[(6), uint16] */;
  %658 = reshape(%657, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), uint16] */;
  %659 = @func_1249() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %660 = %659.1;
  %661 = cast(%660, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %662 = @func_3239(%658) /* ty=Tensor[(1, 2, 3), uint16] */;
  %663 = atan(%661) /* ty=Tensor[(9, 9, 13), float32] */;
  %664 = @func_4014() /* ty=Tensor[(10, 7, 12), float64] */;
  (%662, meta[relay.Constant][23] /* ty=Tensor[(6), uint16] */, %663, %664)
}

def @func_715() -> (Tensor[(9, 9, 13), float32],) {
  %665 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %666 = %665.3;
  %667 = cast(%666, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %668 = rsqrt(%667) /* ty=Tensor[(9, 9, 13), float32] */;
  (%668,)
}

def @func_2135(%var_2123: Tensor[(6, 18), float64]) -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(6, 18), float32]) {
  %669 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %670 = @func_1249() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %671 = cast(%var_2123, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
  %672 = cast(%var_2123, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
  %673 = %670.1;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %675 = reshape(%671, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %676 = reshape(%672, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %677 = reshape(%674, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %678 = @func_1037(%675, %676, %677) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %679 = cast(%var_2123, dtype="float32") /* ty=Tensor[(6, 18), float32] */;
  %680 = %669.1;
  %681 = %678.3;
  %682 = tan(%679) /* ty=Tensor[(6, 18), float32] */;
  (%680, %673, %681, %682)
}

def @func_3543() -> Tensor[(9, 9, 13), bool] {
  %683 = @func_1754() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) */;
  %683.0
}

def @func_2489(%var_2451: Tensor[(10, 7, 12), float32]) -> (Tensor[(10, 7, 12), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), uint16]) {
  %684 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %685 = %684.0;
  %686 = cast(%var_2451, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %690 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %691 = cast(%685, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
  %692 = shape_of(%var_2451, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%var_2451, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %695 = equal(%688, %689) /* ty=Tensor[(10, 7, 12), bool] */;
  %696 = %690.0;
  %697 = bitwise_or(%693, %694) /* ty=Tensor[(10, 7, 12), uint16] */;
  (%695, %696, %697)
}

def @func_4014() -> Tensor[(10, 7, 12), float64] {
  %698 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %698.1
}

def @func_6627() -> (Tensor[(9, 9, 13), float32], Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64], Tensor[(88, 1), float64]) {
  %699 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %700 = cast(meta[relay.Constant][24] /* ty=Tensor[(88, 1), float32] */, dtype="float32") /* ty=Tensor[(88, 1), float32] */;
  %701 = reshape(%700, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float32] */;
  %702 = @func_2554(%701) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) */;
  %703 = cast(meta[relay.Constant][24] /* ty=Tensor[(88, 1), float32] */, dtype="float32") /* ty=Tensor[(88, 1), float32] */;
  %704 = acosh(%703) /* ty=Tensor[(88, 1), float32] */;
  %705 = cast(%704, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %706 = %699.0;
  %707 = %702.0;
  %708 = @func_6103() /* ty=Tensor[(9, 9, 13), float64] */;
  %709 = log2(%705) /* ty=Tensor[(88, 1), float64] */;
  (%706, %707, %708, %709)
}

def @func_7626() -> (Tensor[(5, 13, 8), float32],) {
  %710 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 13, 8), int8] */, dtype="bool") /* ty=Tensor[(5, 13, 8), bool] */;
  %711 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(5, 13, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 13, 8), int8] */, dtype="bool") /* ty=Tensor[(5, 13, 8), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %714 = greater(%712, %713) /* ty=Tensor[(5, 13, 8), bool] */;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(5, 13, 8), float32] */;
  %716 = atanh(%715) /* ty=Tensor[(5, 13, 8), float32] */;
  (%716,)
}

def @func_7158(%var_7151: Tensor[(4, 14, 12), int8], %var_7152: Tensor[(4, 14, 12), int8]) -> (Tensor[(4, 14, 12), int8],) {
  %717 = cast(%var_7152, dtype="int8") /* ty=Tensor[(4, 14, 12), int8] */;
  %718 = shape_of(%var_7151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%var_7151, dtype="int8") /* ty=Tensor[(4, 14, 12), int8] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %721 = bitwise_xor(%719, %720) /* ty=Tensor[(4, 14, 12), int8] */;
  (%721,)
}

def @func_6671() -> (Tensor[(9, 9, 13), bool], Tensor[(11, 16, 15), bool]) {
  %722 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
  %723 = @func_2780() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(11, 16, 15), bool], Tensor[(2640), float64]) */;
  %724 = %722.0;
  %725 = %723.1;
  (%724, %725)
}

def @func_7238() -> (Tensor[(9, 9, 13), float32],) {
  %726 = @func_5998() /* ty=(Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) */;
  %727 = %726.1;
  (%727,)
}

def @func_1178() -> Tensor[(9, 9, 13), float32] {
  @func_433() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_4056(%var_4021: Tensor[(6, 8, 2), int8], %var_4022: Tensor[(6, 8, 2), int8], %var_4030: Tensor[(504), int32]) -> (Tensor[(6, 8, 2), int8], Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32], Tensor[(504), float32]) {
  %728 = cast(%var_4022, dtype="int8") /* ty=Tensor[(6, 8, 2), int8] */;
  %729 = shape_of(%var_4021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%var_4021, dtype="int8") /* ty=Tensor[(6, 8, 2), int8] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %732 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %733 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %734 = reshape(%732, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %735 = reshape(%733, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %736 = @func_2859(%734, %735) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
  %737 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %738 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %739 = reshape(%737, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %740 = reshape(%738, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %741 = @func_2859(%739, %740) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
  %742 = cast(%var_4030, dtype="float32") /* ty=Tensor[(504), float32] */;
  %743 = right_shift(%730, %731) /* ty=Tensor[(6, 8, 2), int8] */;
  %744 = %736.0;
  %745 = %741.1;
  %746 = atan(%742) /* ty=Tensor[(504), float32] */;
  (%743, %744, %745, %746)
}

def @func_7041() -> Tensor[(9, 9, 13), float32] {
  @func_433() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_7564(%var_7549: Tensor[(6, 18), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(6, 18), float64], uint64, Tensor[(7, 15, 4), uint64], Tensor[(420), uint64]) {
  %747 = @func_3161() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %748 = cast(%var_7549, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
  %749 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %750 = reshape(%748, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %751 = reshape(%749, newshape=[]) /* ty=uint64 */;
  %752 = @func_5360(%750, %751) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(108), float64], Tensor[(132), float64], uint64, Tensor[(132), float64]) */;
  %753 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %754 = cast(meta[relay.Constant][28] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %755 = reshape(%753, newshape=[]) /* ty=uint64 */;
  %756 = reshape(%754, newshape=[7, 15, 4]) /* ty=Tensor[(7, 15, 4), uint64] */;
  %757 = %747.0;
  %758 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %759 = %752.1;
  %760 = @func_4982(%755, %756) /* ty=Tensor[(7, 15, 4), uint64] */;
  (%757, %758, %759, %var_7549, meta[relay.Constant][27] /* ty=uint64 */, %760, meta[relay.Constant][28] /* ty=Tensor[(420), uint64] */)
}

def @func_3624(%var_3617: Tensor[(6, 6, 15), float64]) -> Tensor[(6, 6, 15), float32] {
  %761 = cast(%var_3617, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
  %762 = erf(%761) /* ty=Tensor[(6, 6, 15), float64] */;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  acosh(%763) /* ty=Tensor[(6, 6, 15), float32] */
}

def @func_573() -> Tensor[(9, 9, 13), float32] {
  %764 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %764.0
}

def @func_6390(%var_6381: Tensor[(3, 11, 5), uint64]) -> Tensor[(3, 11, 5), uint64] {
  %765 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 5), uint64] */, dtype="uint64") /* ty=Tensor[(3, 11, 5), uint64] */;
  %766 = shape_of(%var_6381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%var_6381, dtype="uint64") /* ty=Tensor[(3, 11, 5), uint64] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%767, %768) /* ty=Tensor[(3, 11, 5), uint64] */
}

def @func_6103() -> Tensor[(9, 9, 13), float64] {
  %769 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %769.0
}

def @func_433() -> Tensor[(9, 9, 13), float32] {
  %770 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %770.0
}

def @func_5692(%var_5644: Tensor[(1, 88), float32], %var_5667: Tensor[(12, 8, 11), float32]) -> (Tensor[(9, 9, 13), bool], Tensor[(1, 88), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(12, 8, 11), float64], Tensor[(6, 15, 2), bool], Tensor[(180), float64], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), bool]) {
  %771 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %772 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %773 = cast(%var_5644, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
  %774 = reshape(%773, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float32] */;
  %775 = @func_2554(%774) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %778 = cast(%var_5667, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
  %779 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %780 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %781 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %782 = reshape(%779, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %783 = reshape(%780, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %784 = reshape(%781, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %785 = @func_5479(%782, %783, %784) /* ty=(Tensor[(6, 15, 2), float64], Tensor[(6, 15, 2), bool]) */;
  %786 = %771.1;
  %787 = cast(%786, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %788 = reshape(%787, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %789 = @func_1537(%788) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %790 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
  %791 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  %792 = @func_5179() /* ty=Tensor[(9, 9, 13), float32] */;
  %793 = %772.0;
  %794 = floor_mod(%777, %778) /* ty=Tensor[(12, 8, 11), float64] */;
  %795 = %785.1;
  %796 = %789.0;
  %797 = %790.0;
  (%786, %var_5644, %791, %792, %793, %794, %795, meta[relay.Constant][30] /* ty=Tensor[(180), float64] */, %796, %797)
}

def @func_4429() -> Tensor[(9, 9, 13), float32] {
  @func_1178() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_4706() -> Tensor[(1053), float32] {
  %798 = @func_4265() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), float32], Tensor[(1053), float32], Tensor[(10, 7, 12), float32], Tensor[(11, 3, 13), uint64], Tensor[(10, 7, 12), float64]) */;
  %798.2
}

def @func_2554(%var_2539: Tensor[(1, 8, 11), float32]) -> (Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) {
  %799 = cast(%var_2539, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
  %800 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %801 = log(%799) /* ty=Tensor[(1, 8, 11), float32] */;
  %802 = %800.1;
  (%801, %802)
}

def @main(%var_7632: Tensor[(4, 1, 7), float64]) -> Tensor[(4, ?, 7), uint64] {
  %803 = cast(%var_7632, dtype="float64") /* ty=Tensor[(4, 1, 7), float64] */;
  %804 = acosh(%803) /* ty=Tensor[(4, 1, 7), float64] */;
  %805 = cast(%804, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %806 = shape_of(%var_7632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%var_7632, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%807, %808) /* ty=Tensor[(4, ?, 7), uint64] */
}

def @func_4474() -> Tensor[(9, 9, 13), float64] {
  %809 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
  %809.0
}

def @func_7454() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), int16]) {
  %810 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %812 = reshape(%811, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %813 = @func_1537(%812) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %814 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %815 = %813.0;
  %816 = %814.3;
  (%810, %815, %816)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5181() -> Tensor[(9, 9, 13), float32] {
  @func_5179() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_6627() -> (Tensor[(9, 9, 13), float32], Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64], Tensor[(88, 1), float64]) {
  %0 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(88, 1), float32] */, dtype="float32") /* ty=Tensor[(88, 1), float32] */;
  %2 = reshape(%1, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float32] */;
  %3 = @func_2554(%2) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(88, 1), float32] */, dtype="float32") /* ty=Tensor[(88, 1), float32] */;
  %5 = acosh(%4) /* ty=Tensor[(88, 1), float32] */;
  %6 = cast(%5, dtype="float64") /* ty=Tensor[(88, 1), float64] */;
  %7 = %0.0;
  %8 = %3.0;
  %9 = @func_6103() /* ty=Tensor[(9, 9, 13), float64] */;
  %10 = log2(%6) /* ty=Tensor[(88, 1), float64] */;
  (%7, %8, %9, %10)
}

def @func_6671() -> (Tensor[(9, 9, 13), bool], Tensor[(11, 16, 15), bool]) {
  %11 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
  %12 = @func_2780() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(11, 16, 15), bool], Tensor[(2640), float64]) */;
  %13 = %11.0;
  %14 = %12.1;
  (%13, %14)
}

def @func_7532() -> Tensor[(9, 9, 13), float64] {
  %15 = @func_6627() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64], Tensor[(88, 1), float64]) */;
  %15.2
}

def @func_468() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
  %16 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %17 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %18 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %19 = %16.2;
  %20 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  (%17, %18, %19, %20)
}

def @func_2002() -> (Tensor[(9, 9, 13), float64],) {
  %25 = fn () -> (Tensor[(9, 9, 13), float64],) {
    %21 = @func_1303() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %22 = %21.0;
    %23 = cast(%22, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %24 = erf(%23) /* ty=Tensor[(9, 9, 13), float64] */;
    (%24,)
  };
  %25() /* ty=(Tensor[(9, 9, 13), float64],) */
}

def @func_802(%var_800: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
  @func_799(%var_800) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */
}

def @func_364() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) {
  %43 = fn () -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) {
    %26 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %27 = %26.1;
    %28 = cast(%27, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %29 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %30 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %31 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %32 = %31.0;
    %33 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %34 = %33.1;
    %35 = cast(%34, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %36 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
    %37 = cast(%32, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %39 = asinh(%28) /* ty=Tensor[(9, 9, 13), float32] */;
    %40 = %29.0;
    %41 = %30.1;
    %42 = logical_or(%37, %38) /* ty=Tensor[(9, 9, 13), bool] */;
    (%39, %40, %41, %42)
  };
  %43() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */
}

def @func_1599(%var_1598: Tensor[(9, 9, 13), float32]) -> Tensor[(9, 9, 13), float32] {
  %49 = fn (%var_1584: Tensor[(9, 9, 13), float32]) -> Tensor[(9, 9, 13), float32] {
    %44 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
    %45 = cast(%var_1584, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%44, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%47, %48) /* ty=Tensor[(9, 9, 13), float32] */
  };
  %49(%var_1598) /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_4627() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %50 = @func_3874() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
  %51 = %50.0;
  %52 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
  (%51, %52)
}

def @func_5151() -> (Tensor[(9, 9, 13), float64],) {
  %55 = fn () -> (Tensor[(9, 9, 13), float64],) {
    %53 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
    %54 = %53.0;
    (%54,)
  };
  %55() /* ty=(Tensor[(9, 9, 13), float64],) */
}

def @func_575() -> Tensor[(9, 9, 13), float32] {
  @func_573() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_7567(%var_7565: Tensor[(6, 18), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(6, 18), float64], uint64, Tensor[(7, 15, 4), uint64], Tensor[(420), uint64]) {
  @func_7564(%var_7565) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(6, 18), float64], uint64, Tensor[(7, 15, 4), uint64], Tensor[(420), uint64]) */
}

def @func_5632() -> (Tensor[(9, 9, 13), int16], Tensor[(10, 7, 12), float32]) {
  %60 = fn () -> (Tensor[(9, 9, 13), int16], Tensor[(10, 7, 12), float32]) {
    %56 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
    %57 = @func_3675() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) */;
    %58 = %56.3;
    %59 = %57.0;
    (%58, %59)
  };
  %60() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(10, 7, 12), float32]) */
}

def @func_3082() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
  %72 = fn () -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
    %61 = @func_1754() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) */;
    %62 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %63 = %62.2;
    %64 = cast(%63, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %65 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
    %66 = cast(%65, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %67 = reshape(%66, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
    %68 = @func_1787(%67) /* ty=(Tensor[(9, 9, 13), bool],) */;
    %69 = %61.1;
    %70 = acos(%64) /* ty=Tensor[(9, 9, 13), float32] */;
    %71 = %68.0;
    (%69, %70, %65, %71)
  };
  %72() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */
}

def @func_1789(%var_1788: Tensor[(9, 9, 13), float64]) -> (Tensor[(9, 9, 13), bool],) {
  %80 = fn (%var_1781: Tensor[(9, 9, 13), float64]) -> (Tensor[(9, 9, 13), bool],) {
    %73 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
    %74 = %73.1;
    %75 = cast(%var_1781, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
    %77 = cast(%74, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %79 = less_equal(%77, %78) /* ty=Tensor[(9, 9, 13), bool] */;
    (%79,)
  };
  %80(%var_1788) /* ty=(Tensor[(9, 9, 13), bool],) */
}

def @func_4982(%var_4946: uint64, %var_4947: Tensor[(7, 15, 4), uint64]) -> Tensor[(7, 15, 4), uint64] {
  %81 = cast(%var_4946, dtype="uint64") /* ty=uint64 */;
  %82 = cast(%var_4947, dtype="uint64") /* ty=Tensor[(7, 15, 4), uint64] */;
  maximum(%81, %82) /* ty=Tensor[(7, 15, 4), uint64] */
}

def @func_5894(%var_5892: Tensor[(12, 16, 2), float32]) -> Tensor[(12, 16, 2), float32] {
  @func_5891(%var_5892) /* ty=Tensor[(12, 16, 2), float32] */
}

def @func_5179() -> Tensor[(9, 9, 13), float32] {
  %83 = @func_1958() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) */;
  %83.0
}

def @func_6747() -> Tensor[(9, 9, 13), bool] {
  %84 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
  %84.0
}

def @func_537() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) {
  %95 = fn () -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) {
    %85 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %86 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %87 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %88 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
    %89 = %88.2;
    %90 = cast(%89, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %91 = %85.3;
    %92 = %86.2;
    %93 = %87.0;
    %94 = log(%90) /* ty=Tensor[(9, 9, 13), float32] */;
    (%91, %92, %93, %94)
  };
  %95() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */
}

def @func_799(%var_772: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
  %96 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %97 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %98 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %99 = %98.2;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %101 = sqrt(%100) /* ty=Tensor[(9, 9, 13), float32] */;
  %102 = cast(%var_772, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
  %107 = %96.0;
  %108 = %97.0;
  %109 = less(%104, %105) /* ty=Tensor[(9, 9, 13), bool] */;
  (%106, %107, %108, %109)
}

def @func_6429() -> Tensor[(10, 7, 12), float32] {
  %110 = @func_3436() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */;
  %110.1
}

def @func_1146(%var_1136: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int64], Tensor[(9, 9, 13), float64]) {
  %111 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %112 = cast(%var_1136, dtype="int64") /* ty=Tensor[(9, 9, 13), int64] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="int64") /* ty=Tensor[(9, 9, 13), int64] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %116 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %117 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
  %118 = bitwise_or(%114, %115) /* ty=Tensor[(9, 9, 13), int64] */;
  %119 = %116.2;
  (%117, %118, %119)
}

def @func_3242(%var_3240: Tensor[(1, 2, 3), uint16]) -> Tensor[(1, 2, 3), uint16] {
  @func_3239(%var_3240) /* ty=Tensor[(1, 2, 3), uint16] */
}

def @func_2105() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  %120 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %121 = %120.1;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %123 = cast(%121, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
  %124 = reshape(%122, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %125 = reshape(%123, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), int32] */;
  %126 = @func_1926(%124, %125) /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int32], Tensor[(10, 7, 12), float64]) */;
  %127 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %128 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %129 = %126.0;
  %130 = %127.0;
  %131 = %128.1;
  (%121, %129, %130, %131)
}

def @func_2554(%var_2539: Tensor[(1, 8, 11), float32]) -> (Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) {
  %132 = cast(%var_2539, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
  %133 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %134 = log(%132) /* ty=Tensor[(1, 8, 11), float32] */;
  %135 = %133.1;
  (%134, %135)
}

def @func_5080(%var_5078: uint64, %var_5079: Tensor[(132), float64]) -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float64], Tensor[(1, 11, 12), float64], Tensor[(132), float64], Tensor[(7, 15, 4), uint8]) {
  @func_5076(%var_5078, %var_5079) /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float64], Tensor[(1, 11, 12), float64], Tensor[(132), float64], Tensor[(7, 15, 4), uint8]) */
}

def @func_2156() -> Tensor[(9, 9, 13), float32] {
  @func_573() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_3586() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) {
  @func_3584() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) */
}

def @func_3161() -> (Tensor[(9, 9, 13), float32],) {
  %136 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  (%136,)
}

def @func_4677() -> (Tensor[(9, 9, 13), float64],) {
  @func_4675() /* ty=(Tensor[(9, 9, 13), float64],) */
}

def @func_2405() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) {
  @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */
}

def @func_650(%var_597: Tensor[(6, 3, 6), float64], %var_600: Tensor[(6, 3, 6), float64]) -> (Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), int32], Tensor[(9, 9, 13), float64]) {
  %137 = cast(%var_597, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %138 = sigmoid(%137) /* ty=Tensor[(6, 3, 6), float64] */;
  %139 = cast(%var_600, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %143 = cast(%var_600, dtype="float32") /* ty=Tensor[(6, 3, 6), float32] */;
  %144 = cast(%138, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  %145 = asinh(%144) /* ty=Tensor[(6, 3, 6), float64] */;
  %146 = cast(%145, dtype="int32") /* ty=Tensor[(6, 3, 6), int32] */;
  %147 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%138, dtype="int32") /* ty=Tensor[(6, 3, 6), int32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %150 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %151 = divide(%141, %142) /* ty=Tensor[(6, 3, 6), float32] */;
  %152 = atanh(%143) /* ty=Tensor[(6, 3, 6), float32] */;
  %153 = maximum(%148, %149) /* ty=Tensor[(6, 3, 6), int32] */;
  %154 = %150.2;
  (%151, %152, %153, %154)
}

def @func_1304() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
  %166 = fn () -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
    %155 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %156 = %155.1;
    %157 = cast(%156, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %158 = log10(%157) /* ty=Tensor[(9, 9, 13), float64] */;
    %159 = cast(%158, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %160 = cast(%156, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %161 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(%158, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %164 = sigmoid(%159) /* ty=Tensor[(9, 9, 13), float64] */;
    %165 = floor_mod(%162, %163) /* ty=Tensor[(9, 9, 13), float32] */;
    (%164, %165)
  };
  %166() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */
}

def @func_2802(%var_2801: Tensor[(10, 7, 12), float32]) -> Tensor[(10, 7, 12), bool] {
  %173 = fn (%var_2792: Tensor[(10, 7, 12), float32]) -> Tensor[(10, 7, 12), bool] {
    %167 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
    %168 = %167.0;
    %169 = cast(%var_2792, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
    %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %171 = cast(%168, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
    %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%171, %172) /* ty=Tensor[(10, 7, 12), bool] */
  };
  %173(%var_2801) /* ty=Tensor[(10, 7, 12), bool] */
}

def @func_6392(%var_6391: Tensor[(3, 11, 5), uint64]) -> Tensor[(3, 11, 5), uint64] {
  %178 = fn (%var_6381: Tensor[(3, 11, 5), uint64]) -> Tensor[(3, 11, 5), uint64] {
    %174 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 11, 5), uint64] */, dtype="uint64") /* ty=Tensor[(3, 11, 5), uint64] */;
    %175 = shape_of(%var_6381, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%var_6381, dtype="uint64") /* ty=Tensor[(3, 11, 5), uint64] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%176, %177) /* ty=Tensor[(3, 11, 5), uint64] */
  };
  %178(%var_6391) /* ty=Tensor[(3, 11, 5), uint64] */
}

def @func_4706() -> Tensor[(1053), float32] {
  %179 = @func_4265() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), float32], Tensor[(1053), float32], Tensor[(10, 7, 12), float32], Tensor[(11, 3, 13), uint64], Tensor[(10, 7, 12), float64]) */;
  %179.2
}

def @func_7455() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), int16]) {
  %187 = fn () -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), int16]) {
    %180 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
    %181 = cast(%180, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %182 = reshape(%181, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
    %183 = @func_1537(%182) /* ty=(Tensor[(9, 9, 13), uint32],) */;
    %184 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
    %185 = %183.0;
    %186 = %184.3;
    (%180, %185, %186)
  };
  %187() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), int16]) */
}

def @func_3771() -> (Tensor[(9, 9, 13), float32],) {
  @func_3769() /* ty=(Tensor[(9, 9, 13), float32],) */
}

def @func_3676() -> (Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) {
  %194 = fn () -> (Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) {
    %188 = @func_2710() /* ty=(Tensor[(10, 7, 12), float32],) */;
    %189 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 16, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
    %190 = cos(%189) /* ty=Tensor[(11, 16, 9), float32] */;
    %191 = cast(%190, dtype="float32") /* ty=Tensor[(11, 16, 9), float32] */;
    %192 = %188.0;
    %193 = cosh(%191) /* ty=Tensor[(11, 16, 9), float32] */;
    (%192, %193)
  };
  %194() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) */
}

def @func_1251() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  @func_1249() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */
}

def @func_4267() -> (Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), float32], Tensor[(1053), float32], Tensor[(10, 7, 12), float32], Tensor[(11, 3, 13), uint64], Tensor[(10, 7, 12), float64]) {
  @func_4265() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), float32], Tensor[(1053), float32], Tensor[(10, 7, 12), float32], Tensor[(11, 3, 13), uint64], Tensor[(10, 7, 12), float64]) */
}

def @func_294() -> (Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) {
  @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */
}

def @func_3835() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %204 = fn () -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
    %195 = @func_3769() /* ty=(Tensor[(9, 9, 13), float32],) */;
    %196 = %195.0;
    %197 = cast(%196, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %198 = reshape(%197, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
    %199 = @func_2324(%198) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
    %200 = cast(%196, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %201 = %199.1;
    %202 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
    %203 = exp(%200) /* ty=Tensor[(9, 9, 13), float32] */;
    (%201, %202, %203)
  };
  %204() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */
}

def @func_2158() -> Tensor[(9, 9, 13), float32] {
  @func_2156() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_5857() -> Tensor[(9, 9, 13), float32] {
  @func_5855() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_7352() -> Tensor[(9, 9, 13), float64] {
  %206 = fn () -> Tensor[(9, 9, 13), float64] {
    %205 = @func_3584() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) */;
    %205.0
  };
  %206() /* ty=Tensor[(9, 9, 13), float64] */
}

def @func_2653() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) {
  %207 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %208 = %207.0;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %210 = reshape(%209, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %211 = @func_799(%210) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %212 = @func_2156() /* ty=Tensor[(9, 9, 13), float32] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %214 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %215 = %211.3;
  %216 = sinh(%213) /* ty=Tensor[(9, 9, 13), float64] */;
  %217 = %214.0;
  (%208, %215, %216, %217)
}

def @func_2222(%var_2221: Tensor[(11, 16, 15), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) {
  %226 = fn (%var_2159: Tensor[(11, 16, 15), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) {
    %218 = cast(%var_2159, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
    %219 = log(%218) /* ty=Tensor[(11, 16, 15), float64] */;
    %220 = cast(%var_2159, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
    %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %222 = cast(%219, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %224 = @func_1178() /* ty=Tensor[(9, 9, 13), float32] */;
    %225 = less(%222, %223) /* ty=Tensor[(11, 16, 15), bool] */;
    (%224, %225)
  };
  %226(%var_2221) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) */
}

def @func_7240() -> (Tensor[(9, 9, 13), float32],) {
  @func_7238() /* ty=(Tensor[(9, 9, 13), float32],) */
}

def @func_7626() -> (Tensor[(5, 13, 8), float32],) {
  %227 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 13, 8), int8] */, dtype="bool") /* ty=Tensor[(5, 13, 8), bool] */;
  %228 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(5, 13, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 13, 8), int8] */, dtype="bool") /* ty=Tensor[(5, 13, 8), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = greater(%229, %230) /* ty=Tensor[(5, 13, 8), bool] */;
  %232 = cast(%231, dtype="float32") /* ty=Tensor[(5, 13, 8), float32] */;
  %233 = atanh(%232) /* ty=Tensor[(5, 13, 8), float32] */;
  (%233,)
}

def @func_4387(%var_4386: float64) -> Tensor[(14, 5, 5), float64] {
  %236 = fn (%var_4369: float64) -> Tensor[(14, 5, 5), float64] {
    %234 = cast(%var_4369, dtype="float64") /* ty=float64 */;
    %235 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 5, 5), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 5), float64] */;
    floor_mod(%234, %235) /* ty=Tensor[(14, 5, 5), float64] */
  };
  %236(%var_4386) /* ty=Tensor[(14, 5, 5), float64] */
}

def @func_5255() -> Tensor[(9, 9, 13), float32] {
  @func_5253() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_1178() -> Tensor[(9, 9, 13), float32] {
  @func_433() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_1149(%var_1147: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int64], Tensor[(9, 9, 13), float64]) {
  @func_1146(%var_1147) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int64], Tensor[(9, 9, 13), float64]) */
}

def @func_6996() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(300), int8], Tensor[(15, 2, 10), uint16]) {
  %252 = fn () -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(300), int8], Tensor[(15, 2, 10), uint16]) {
    %237 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
    %238 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
    %239 = cast(meta[relay.Constant][6] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
    %240 = reshape(%239, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), int8] */;
    %241 = @func_4836(%240) /* ty=(Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) */;
    %242 = %241.1;
    %243 = cast(%242, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
    %244 = acosh(%243) /* ty=Tensor[(15, 2, 10), float32] */;
    %245 = cast(%242, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
    %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %247 = cast(%244, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %249 = %237.1;
    %250 = %238.0;
    %251 = bitwise_and(%247, %248) /* ty=Tensor[(15, 2, 10), uint16] */;
    (%249, %250, meta[relay.Constant][6] /* ty=Tensor[(300), int8] */, %251)
  };
  %252() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(300), int8], Tensor[(15, 2, 10), uint16]) */
}

def @func_4315(%var_4313: Tensor[(8, 4, 14), float32], %var_4314: Tensor[(1053), float32]) -> (Tensor[(8, 4, 14), float32], Tensor[(5, 4, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(1053), float32]) {
  @func_4311(%var_4313, %var_4314) /* ty=(Tensor[(8, 4, 14), float32], Tensor[(5, 4, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(1053), float32]) */
}

def @func_5483(%var_5480: Tensor[(6, 15, 2), float64], %var_5481: Tensor[(6, 15, 2), float64], %var_5482: Tensor[(6, 15, 2), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(6, 15, 2), bool]) {
  %263 = fn (%var_5451: Tensor[(6, 15, 2), float64], %var_5452: Tensor[(6, 15, 2), float64], %var_5466: Tensor[(6, 15, 2), float64]) -> (Tensor[(6, 15, 2), float64], Tensor[(6, 15, 2), bool]) {
    %253 = cast(%var_5452, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
    %254 = shape_of(%var_5451, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(%var_5451, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %257 = cast(%var_5466, dtype="bool") /* ty=Tensor[(6, 15, 2), bool] */;
    %258 = shape_of(%var_5451, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%var_5451, dtype="bool") /* ty=Tensor[(6, 15, 2), bool] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %261 = power(%255, %256) /* ty=Tensor[(6, 15, 2), float64] */;
    %262 = logical_or(%259, %260) /* ty=Tensor[(6, 15, 2), bool] */;
    (%261, %262)
  };
  %263(%var_5480, %var_5481, %var_5482) /* ty=(Tensor[(6, 15, 2), float64], Tensor[(6, 15, 2), bool]) */
}

def @func_1540(%var_1538: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), uint32],) {
  @func_1537(%var_1538) /* ty=(Tensor[(9, 9, 13), uint32],) */
}

def @func_1960() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) {
  @func_1958() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) */
}

def @func_6231() -> (Tensor[(14, 5, 8), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  @func_6229() /* ty=(Tensor[(14, 5, 8), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */
}

def @func_2107() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */
}

def @func_716() -> (Tensor[(9, 9, 13), float32],) {
  %268 = fn () -> (Tensor[(9, 9, 13), float32],) {
    %264 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
    %265 = %264.3;
    %266 = cast(%265, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %267 = rsqrt(%266) /* ty=Tensor[(9, 9, 13), float32] */;
    (%267,)
  };
  %268() /* ty=(Tensor[(9, 9, 13), float32],) */
}

def @func_5127(%var_5107: Tensor[(5, 4, 6), float64]) -> (Tensor[(9, 9, 13), int32], Tensor[(5, 4, 6), float64]) {
  %269 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
  %270 = cast(%var_5107, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %271 = atan(%270) /* ty=Tensor[(5, 4, 6), float64] */;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(5, 4, 6), float64] */;
  %273 = %269.0;
  %274 = sqrt(%272) /* ty=Tensor[(5, 4, 6), float64] */;
  (%273, %274)
}

def @func_1537(%var_1528: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), uint32],) {
  %275 = @func_1178() /* ty=Tensor[(9, 9, 13), float32] */;
  %276 = cast(%var_1528, dtype="uint32") /* ty=Tensor[(9, 9, 13), uint32] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="uint32") /* ty=Tensor[(9, 9, 13), uint32] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %280 = subtract(%278, %279) /* ty=Tensor[(9, 9, 13), uint32] */;
  (%280,)
}

def @func_4015() -> Tensor[(10, 7, 12), float64] {
  %282 = fn () -> Tensor[(10, 7, 12), float64] {
    %281 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
    %281.1
  };
  %282() /* ty=Tensor[(10, 7, 12), float64] */
}

def @func_4311(%var_4291: Tensor[(8, 4, 14), float32], %var_4303: Tensor[(1053), float32]) -> (Tensor[(8, 4, 14), float32], Tensor[(5, 4, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(1053), float32]) {
  %283 = cast(-7.13036f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %284 = cast(%var_4291, dtype="float32") /* ty=Tensor[(8, 4, 14), float32] */;
  %285 = @func_3911() /* ty=(Tensor[(5, 4, 13), float32],) */;
  %286 = cast(%var_4303, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %287 = reshape(%286, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %288 = @func_1537(%287) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %289 = power(%283, %284) /* ty=Tensor[(8, 4, 14), float32] */;
  %290 = %285.0;
  %291 = %288.0;
  (%289, %290, %291, %var_4303)
}

def @func_4056(%var_4021: Tensor[(6, 8, 2), int8], %var_4022: Tensor[(6, 8, 2), int8], %var_4030: Tensor[(504), int32]) -> (Tensor[(6, 8, 2), int8], Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32], Tensor[(504), float32]) {
  %292 = cast(%var_4022, dtype="int8") /* ty=Tensor[(6, 8, 2), int8] */;
  %293 = shape_of(%var_4021, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%var_4021, dtype="int8") /* ty=Tensor[(6, 8, 2), int8] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %296 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %297 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %298 = reshape(%296, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %299 = reshape(%297, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %300 = @func_2859(%298, %299) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
  %301 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %302 = cast(%var_4030, dtype="int32") /* ty=Tensor[(504), int32] */;
  %303 = reshape(%301, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %304 = reshape(%302, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %305 = @func_2859(%303, %304) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
  %306 = cast(%var_4030, dtype="float32") /* ty=Tensor[(504), float32] */;
  %307 = right_shift(%294, %295) /* ty=Tensor[(6, 8, 2), int8] */;
  %308 = %300.0;
  %309 = %305.1;
  %310 = atan(%306) /* ty=Tensor[(504), float32] */;
  (%307, %308, %309, %310)
}

def @func_4539(%var_4537: float64, %var_4538: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64],) {
  %314 = fn (%var_4523: float64, %var_4524: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64],) {
    %311 = cast(%var_4523, dtype="float64") /* ty=float64 */;
    %312 = cast(%var_4524, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
    %313 = power(%311, %312) /* ty=Tensor[(1, 11, 12), float64] */;
    (%313,)
  };
  %314(%var_4537, %var_4538) /* ty=(Tensor[(1, 11, 12), float64],) */
}

def @func_292() -> (Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) {
  %315 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 9, 13), int16] */, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %316 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(9, 9, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 9, 13), int16] */, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %319 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 9, 13), int16] */, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %320 = bitwise_and(%317, %318) /* ty=Tensor[(9, 9, 13), int16] */;
  %321 = atanh(%319) /* ty=Tensor[(9, 9, 13), float64] */;
  (%320, %321)
}

def @func_1066() -> Tensor[(9, 9, 13), float32] {
  @func_1064() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_5553() -> (Tensor[(1, 2, 3), uint16], Tensor[(6), uint16], Tensor[(9, 9, 13), float32], Tensor[(10, 7, 12), float64]) {
  %322 = cast(meta[relay.Constant][9] /* ty=Tensor[(6), uint16] */, dtype="uint16") /* ty=Tensor[(6), uint16] */;
  %323 = reshape(%322, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), uint16] */;
  %324 = @func_1249() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %325 = %324.1;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %327 = @func_3239(%323) /* ty=Tensor[(1, 2, 3), uint16] */;
  %328 = atan(%326) /* ty=Tensor[(9, 9, 13), float32] */;
  %329 = @func_4014() /* ty=Tensor[(10, 7, 12), float64] */;
  (%327, meta[relay.Constant][9] /* ty=Tensor[(6), uint16] */, %328, %329)
}

def @func_6705(%var_6704: Tensor[(14, 15, 6), float32]) -> (Tensor[(14, 15, 6), float32],) {
  %333 = fn (%var_6688: Tensor[(14, 15, 6), float32]) -> (Tensor[(14, 15, 6), float32],) {
    %330 = cast(9.37073f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %331 = cast(%var_6688, dtype="float32") /* ty=Tensor[(14, 15, 6), float32] */;
    %332 = minimum(%330, %331) /* ty=Tensor[(14, 15, 6), float32] */;
    (%332,)
  };
  %333(%var_6704) /* ty=(Tensor[(14, 15, 6), float32],) */
}

def @func_1755() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) {
  %338 = fn () -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) {
    %334 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
    %335 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
    %336 = %334.3;
    %337 = %335.1;
    (%336, %337)
  };
  %338() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) */
}

def @func_1958() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) {
  %339 = @func_1303() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %340 = %339.1;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %342 = reshape(%341, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
  %343 = @func_1496(%342) /* ty=(Tensor[(9, 9, 13), float32],) */;
  %344 = cast(%340, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
  %345 = %343.0;
  %346 = log2(%344) /* ty=Tensor[(9, 9, 13), float64] */;
  (%345, %346)
}

def @func_7628() -> (Tensor[(5, 13, 8), float32],) {
  @func_7626() /* ty=(Tensor[(5, 13, 8), float32],) */
}

def @func_7534() -> Tensor[(9, 9, 13), float64] {
  @func_7532() /* ty=Tensor[(9, 9, 13), float64] */
}

def @func_1249() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  %347 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %348 = %347.0;
  %349 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %350 = %349.0;
  %351 = cast(%350, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %352 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%348, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %356 = cast(%348, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %357 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%350, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %360 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %361 = %360.1;
  %362 = cast(%361, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %363 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%348, dtype="int16") /* ty=Tensor[(9, 9, 13), int16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %366 = not_equal(%353, %354) /* ty=Tensor[(9, 9, 13), bool] */;
  %367 = %355.0;
  %368 = floor_divide(%358, %359) /* ty=Tensor[(9, 9, 13), float32] */;
  %369 = logical_xor(%364, %365) /* ty=Tensor[(9, 9, 13), int16] */;
  (%366, %367, %368, %369)
}

def @func_3875() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) {
  %376 = fn () -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) {
    %370 = @func_3161() /* ty=(Tensor[(9, 9, 13), float32],) */;
    %371 = %370.0;
    %372 = cast(%371, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %373 = reshape(%372, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
    %374 = @func_2324(%373) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
    %375 = %374.0;
    (%371, %375)
  };
  %376() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */
}

def @func_7027() -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32]) {
  %380 = fn () -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32]) {
    %377 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
    %378 = %377.0;
    %379 = @func_4429() /* ty=Tensor[(9, 9, 13), float32] */;
    (%378, %379)
  };
  %380() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32]) */
}

def @func_4265() -> (Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), float32], Tensor[(1053), float32], Tensor[(10, 7, 12), float32], Tensor[(11, 3, 13), uint64], Tensor[(10, 7, 12), float64]) {
  %381 = @func_3436() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */;
  %382 = cast(meta[relay.Constant][10] /* ty=Tensor[(1053), float32] */, dtype="float32") /* ty=Tensor[(1053), float32] */;
  %383 = reshape(%382, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %384 = @func_2324(%383) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */;
  %385 = @func_3675() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) */;
  %386 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 13), float32] */;
  %387 = cosh(%386) /* ty=Tensor[(11, 3, 13), float32] */;
  %388 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 3, 13), float32] */, dtype="uint64") /* ty=Tensor[(11, 3, 13), uint64] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="uint64") /* ty=Tensor[(11, 3, 13), uint64] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %392 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %393 = %381.1;
  %394 = %384.1;
  %395 = %385.0;
  %396 = left_shift(%390, %391) /* ty=Tensor[(11, 3, 13), uint64] */;
  %397 = %392.1;
  (%393, %394, meta[relay.Constant][10] /* ty=Tensor[(1053), float32] */, %395, %396, %397)
}

def @func_2574() -> Tensor[(9, 9, 13), float32] {
  @func_2572() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_3939() -> Tensor[(10, 7, 12), float64] {
  %398 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %398.1
}

def @func_2863(%var_2861: Tensor[(4, 14, 9), int32], %var_2862: Tensor[(4, 14, 9), int32]) -> (Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) {
  @func_2859(%var_2861, %var_2862) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */
}

def @func_3163() -> (Tensor[(9, 9, 13), float32],) {
  @func_3161() /* ty=(Tensor[(9, 9, 13), float32],) */
}

def @func_1116() -> (Tensor[(9, 9, 13), int32],) {
  %405 = fn () -> (Tensor[(9, 9, 13), int32],) {
    %399 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
    %400 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
    %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%399, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %404 = left_shift(%402, %403) /* ty=Tensor[(9, 9, 13), int32] */;
    (%404,)
  };
  %405() /* ty=(Tensor[(9, 9, 13), int32],) */
}

def @func_4880(%var_4878: Tensor[(6, 12, 11), float64]) -> (Tensor[(6, 12, 11), float64], Tensor[(9, 9, 13), float32]) {
  @func_4877(%var_4878) /* ty=(Tensor[(6, 12, 11), float64], Tensor[(9, 9, 13), float32]) */
}

def @func_5696(%var_5694: Tensor[(1, 88), float32], %var_5695: Tensor[(12, 8, 11), float32]) -> (Tensor[(9, 9, 13), bool], Tensor[(1, 88), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(12, 8, 11), float64], Tensor[(6, 15, 2), bool], Tensor[(180), float64], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), bool]) {
  @func_5692(%var_5694, %var_5695) /* ty=(Tensor[(9, 9, 13), bool], Tensor[(1, 88), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(12, 8, 11), float64], Tensor[(6, 15, 2), bool], Tensor[(180), float64], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), bool]) */
}

def @func_4020() -> Tensor[(9, 9, 13), int16] {
  @func_4018() /* ty=Tensor[(9, 9, 13), int16] */
}

def @func_3368() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %406 = @func_1958() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) */;
  %407 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %408 = %407.0;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %410 = %406.0;
  %411 = asin(%409) /* ty=Tensor[(9, 9, 13), float32] */;
  (%410, %411)
}

def @func_4791() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64]) {
  %423 = fn () -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64]) {
    %412 = @func_3368() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */;
    %413 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
    %414 = cast(%413, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %415 = reshape(%414, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
    %416 = @func_1787(%415) /* ty=(Tensor[(9, 9, 13), bool],) */;
    %417 = cast(%413, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %418 = reshape(%417, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
    %419 = @func_1146(%418) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int64], Tensor[(9, 9, 13), float64]) */;
    %420 = %412.1;
    %421 = %416.0;
    %422 = %419.2;
    (%420, %413, %421, %422)
  };
  %423() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64]) */
}

def @func_2990() -> Tensor[(12, 3, 14), float32] {
  %425 = fn () -> Tensor[(12, 3, 14), float32] {
    %424 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
    log2(%424) /* ty=Tensor[(12, 3, 14), float32] */
  };
  %425() /* ty=Tensor[(12, 3, 14), float32] */
}

def @func_3545() -> Tensor[(9, 9, 13), bool] {
  @func_3543() /* ty=Tensor[(9, 9, 13), bool] */
}

def @func_6229() -> (Tensor[(14, 5, 8), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  %426 = @func_2049() /* ty=(Tensor[(14, 5, 8), float32],) */;
  %427 = %426.0;
  %428 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  %429 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
  (%427, %428, %429)
}

def @func_5998() -> (Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) {
  %430 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %431 = %430.3;
  %432 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="uint16") /* ty=Tensor[(9, 9, 13), uint16] */;
  %435 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%431, dtype="uint16") /* ty=Tensor[(9, 9, 13), uint16] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %438 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %439 = bitwise_xor(%436, %437) /* ty=Tensor[(9, 9, 13), uint16] */;
  %440 = %438.0;
  (%439, %440)
}

def @func_7161(%var_7159: Tensor[(4, 14, 12), int8], %var_7160: Tensor[(4, 14, 12), int8]) -> (Tensor[(4, 14, 12), int8],) {
  %446 = fn (%var_7151: Tensor[(4, 14, 12), int8], %var_7152: Tensor[(4, 14, 12), int8]) -> (Tensor[(4, 14, 12), int8],) {
    %441 = cast(%var_7152, dtype="int8") /* ty=Tensor[(4, 14, 12), int8] */;
    %442 = shape_of(%var_7151, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%var_7151, dtype="int8") /* ty=Tensor[(4, 14, 12), int8] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %445 = bitwise_xor(%443, %444) /* ty=Tensor[(4, 14, 12), int8] */;
    (%445,)
  };
  %446(%var_7159, %var_7160) /* ty=(Tensor[(4, 14, 12), int8],) */
}

def @func_5363(%var_5361: Tensor[(108), float64], %var_5362: uint64) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(108), float64], Tensor[(132), float64], uint64, Tensor[(132), float64]) {
  %463 = fn (%var_5336: Tensor[(108), float64], %var_5348: uint64) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(108), float64], Tensor[(132), float64], uint64, Tensor[(132), float64]) {
    %447 = @func_1958() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64]) */;
    %448 = cast(%var_5336, dtype="float64") /* ty=Tensor[(108), float64] */;
    %449 = cast(%var_5336, dtype="float64") /* ty=Tensor[(108), float64] */;
    %450 = %447.0;
    %451 = cast(%450, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %452 = reshape(%448, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
    %453 = reshape(%449, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
    %454 = reshape(%451, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
    %455 = @func_1037(%452, %453, %454) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
    %456 = cast(%var_5348, dtype="uint64") /* ty=uint64 */;
    %457 = cast(meta[relay.Constant][14] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
    %458 = reshape(%456, newshape=[]) /* ty=uint64 */;
    %459 = reshape(%457, newshape=[132]) /* ty=Tensor[(132), float64] */;
    %460 = @func_5076(%458, %459) /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float64], Tensor[(1, 11, 12), float64], Tensor[(132), float64], Tensor[(7, 15, 4), uint8]) */;
    %461 = %455.10;
    %462 = %460.4;
    (%450, %461, %var_5336, %462, %var_5348, meta[relay.Constant][14] /* ty=Tensor[(132), float64] */)
  };
  %463(%var_5361, %var_5362) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(108), float64], Tensor[(132), float64], uint64, Tensor[(132), float64]) */
}

def @func_573() -> Tensor[(9, 9, 13), float32] {
  %464 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %464.0
}

def @func_1384() -> (Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) {
  %471 = fn () -> (Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) {
    %465 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 7, 12), float64] */, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
    %466 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
    %467 = acos(%466) /* ty=Tensor[(10, 7, 12), float64] */;
    %468 = cast(%467, dtype="float64") /* ty=Tensor[(10, 7, 12), float64] */;
    %469 = log(%465) /* ty=Tensor[(10, 7, 12), float32] */;
    %470 = asinh(%468) /* ty=Tensor[(10, 7, 12), float64] */;
    (%469, %470)
  };
  %471() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */
}

def @func_5297() -> (Tensor[(9, 9, 13), float32],) {
  %473 = fn () -> (Tensor[(9, 9, 13), float32],) {
    %472 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
    (%472,)
  };
  %473() /* ty=(Tensor[(9, 9, 13), float32],) */
}

def @func_1180() -> Tensor[(9, 9, 13), float32] {
  @func_1178() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_2135(%var_2123: Tensor[(6, 18), float64]) -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(6, 18), float32]) {
  %474 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
  %475 = @func_1249() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %476 = cast(%var_2123, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
  %477 = cast(%var_2123, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
  %478 = %475.1;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %480 = reshape(%476, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %481 = reshape(%477, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
  %482 = reshape(%479, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %483 = @func_1037(%480, %481, %482) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %484 = cast(%var_2123, dtype="float32") /* ty=Tensor[(6, 18), float32] */;
  %485 = %474.1;
  %486 = %483.3;
  %487 = tan(%484) /* ty=Tensor[(6, 18), float32] */;
  (%485, %478, %486, %487)
}

def @func_3584() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) {
  %488 = @func_3436() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */;
  %489 = cast(meta[relay.Constant][16] /* ty=Tensor[(504), int32] */, dtype="int32") /* ty=Tensor[(504), int32] */;
  %490 = cast(meta[relay.Constant][16] /* ty=Tensor[(504), int32] */, dtype="int32") /* ty=Tensor[(504), int32] */;
  %491 = reshape(%489, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %492 = reshape(%490, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
  %493 = @func_2859(%491, %492) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
  %494 = %488.0;
  %495 = %493.1;
  (%494, %495, meta[relay.Constant][16] /* ty=Tensor[(504), int32] */)
}

def @func_6629() -> (Tensor[(9, 9, 13), float32], Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64], Tensor[(88, 1), float64]) {
  @func_6627() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64], Tensor[(88, 1), float64]) */
}

def @func_7564(%var_7549: Tensor[(6, 18), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(6, 18), float64], uint64, Tensor[(7, 15, 4), uint64], Tensor[(420), uint64]) {
  %496 = @func_3161() /* ty=(Tensor[(9, 9, 13), float32],) */;
  %497 = cast(%var_7549, dtype="float64") /* ty=Tensor[(6, 18), float64] */;
  %498 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %499 = reshape(%497, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %500 = reshape(%498, newshape=[]) /* ty=uint64 */;
  %501 = @func_5360(%499, %500) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(108), float64], Tensor[(132), float64], uint64, Tensor[(132), float64]) */;
  %502 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %503 = cast(meta[relay.Constant][18] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %504 = reshape(%502, newshape=[]) /* ty=uint64 */;
  %505 = reshape(%503, newshape=[7, 15, 4]) /* ty=Tensor[(7, 15, 4), uint64] */;
  %506 = %496.0;
  %507 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
  %508 = %501.1;
  %509 = @func_4982(%504, %505) /* ty=Tensor[(7, 15, 4), uint64] */;
  (%506, %507, %508, %var_7549, meta[relay.Constant][17] /* ty=uint64 */, %509, meta[relay.Constant][18] /* ty=Tensor[(420), uint64] */)
}

def @func_5130(%var_5128: Tensor[(5, 4, 6), float64]) -> (Tensor[(9, 9, 13), int32], Tensor[(5, 4, 6), float64]) {
  @func_5127(%var_5128) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(5, 4, 6), float64]) */
}

def @func_7042() -> Tensor[(9, 9, 13), float32] {
  %510 = fn () -> Tensor[(9, 9, 13), float32] {
    @func_433() /* ty=Tensor[(9, 9, 13), float32] */
  };
  %510() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_7075() -> Tensor[(9, 9, 13), uint16] {
  %512 = fn () -> Tensor[(9, 9, 13), uint16] {
    %511 = @func_5998() /* ty=(Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) */;
    %511.0
  };
  %512() /* ty=Tensor[(9, 9, 13), uint16] */
}

def @func_5555() -> (Tensor[(1, 2, 3), uint16], Tensor[(6), uint16], Tensor[(9, 9, 13), float32], Tensor[(10, 7, 12), float64]) {
  @func_5553() /* ty=(Tensor[(1, 2, 3), uint16], Tensor[(6), uint16], Tensor[(9, 9, 13), float32], Tensor[(10, 7, 12), float64]) */
}

def @func_2712() -> (Tensor[(10, 7, 12), float32],) {
  @func_2710() /* ty=(Tensor[(10, 7, 12), float32],) */
}

def @func_7238() -> (Tensor[(9, 9, 13), float32],) {
  %513 = @func_5998() /* ty=(Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) */;
  %514 = %513.1;
  (%514,)
}

def @func_3239(%var_3207: Tensor[(1, 2, 3), uint16]) -> Tensor[(1, 2, 3), uint16] {
  %515 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %516 = cast(%var_3207, dtype="uint16") /* ty=Tensor[(1, 2, 3), uint16] */;
  bitwise_and(%515, %516) /* ty=Tensor[(1, 2, 3), uint16] */
}

def @func_6749() -> Tensor[(9, 9, 13), bool] {
  @func_6747() /* ty=Tensor[(9, 9, 13), bool] */
}

def @func_4675() -> (Tensor[(9, 9, 13), float64],) {
  %517 = @func_4474() /* ty=Tensor[(9, 9, 13), float64] */;
  (%517,)
}

def @func_2613(%var_2612: Tensor[(2640), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(2640), float64]) {
  %524 = fn (%var_2609: Tensor[(2640), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(2640), float64]) {
    %518 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
    %519 = cast(%var_2609, dtype="float64") /* ty=Tensor[(2640), float64] */;
    %520 = reshape(%519, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
    %521 = @func_2220(%520) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) */;
    %522 = %518.0;
    %523 = %521.0;
    (%522, %523, %var_2609)
  };
  %524(%var_2612) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(2640), float64]) */
}

def @func_2050() -> (Tensor[(14, 5, 8), float32],) {
  %527 = fn () -> (Tensor[(14, 5, 8), float32],) {
    %525 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 5, 8), float32] */;
    %526 = atan(%525) /* ty=Tensor[(14, 5, 8), float32] */;
    (%526,)
  };
  %527() /* ty=(Tensor[(14, 5, 8), float32],) */
}

def @func_3888() -> (Tensor[(9, 9, 13), bool],) {
  @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */
}

def @func_4986(%var_4984: uint64, %var_4985: Tensor[(7, 15, 4), uint64]) -> Tensor[(7, 15, 4), uint64] {
  @func_4982(%var_4984, %var_4985) /* ty=Tensor[(7, 15, 4), uint64] */
}

def @func_3941() -> Tensor[(10, 7, 12), float64] {
  @func_3939() /* ty=Tensor[(10, 7, 12), float64] */
}

def @func_654(%var_652: Tensor[(6, 3, 6), float64], %var_653: Tensor[(6, 3, 6), float64]) -> (Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), int32], Tensor[(9, 9, 13), float64]) {
  @func_650(%var_652, %var_653) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), int32], Tensor[(9, 9, 13), float64]) */
}

def @func_5855() -> Tensor[(9, 9, 13), float32] {
  @func_5253() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_3886() -> (Tensor[(9, 9, 13), bool],) {
  %528 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %529 = %528.1;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %531 = reshape(%530, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %532 = @func_1537(%531) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %533 = %532.0;
  %534 = cast(%533, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %535 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%529, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = greater_equal(%536, %537) /* ty=Tensor[(9, 9, 13), bool] */;
  (%538,)
}

def @func_3913() -> (Tensor[(5, 4, 13), float32],) {
  @func_3911() /* ty=(Tensor[(5, 4, 13), float32],) */
}

def @func_4708() -> Tensor[(1053), float32] {
  @func_4706() /* ty=Tensor[(1053), float32] */
}

def @func_4475() -> Tensor[(9, 9, 13), float64] {
  %540 = fn () -> Tensor[(9, 9, 13), float64] {
    %539 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
    %539.0
  };
  %540() /* ty=Tensor[(9, 9, 13), float64] */
}

def @func_1041(%var_1038: Tensor[(3, 36), float64], %var_1039: Tensor[(3, 36), float64], %var_1040: Tensor[(9, 9, 13), float32]) -> (Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
  %579 = fn (%var_920: Tensor[(3, 36), float64], %var_975: Tensor[(3, 36), float64], %var_1003: Tensor[(9, 9, 13), float32]) -> (Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) {
    %541 = cast(%var_920, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
    %542 = cast(%var_920, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
    %543 = reshape(%541, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
    %544 = reshape(%542, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), float64] */;
    %545 = @func_650(%543, %544) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), float32], Tensor[(6, 3, 6), int32], Tensor[(9, 9, 13), float64]) */;
    %546 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %547 = %546.0;
    %548 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
    %549 = %548.0;
    %550 = cast(%549, dtype="uint64") /* ty=Tensor[(9, 9, 13), uint64] */;
    %551 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%547, dtype="uint64") /* ty=Tensor[(9, 9, 13), uint64] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %554 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
    %555 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %556 = cast(%var_975, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
    %557 = shape_of(%var_920, dtype="int32") /* ty=Tensor[(2), int32] */;
    %558 = cast(%var_920, dtype="bool") /* ty=Tensor[(3, 36), bool] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %560 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %561 = @func_715() /* ty=(Tensor[(9, 9, 13), float32],) */;
    %562 = %561.0;
    %563 = cast(%var_1003, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%562, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %567 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
    %568 = %545.1;
    %569 = multiply(%552, %553) /* ty=Tensor[(9, 9, 13), uint64] */;
    %570 = %554.0;
    %571 = %555.2;
    %572 = @func_573() /* ty=Tensor[(9, 9, 13), float32] */;
    %573 = equal(%558, %559) /* ty=Tensor[(3, 36), bool] */;
    %574 = %560.3;
    %575 = greater(%565, %566) /* ty=Tensor[(9, 9, 13), bool] */;
    %576 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
    %577 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
    %578 = %567.2;
    (%568, %569, %570, %571, %572, %573, %574, %575, %576, %577, %578)
  };
  %579(%var_1038, %var_1039, %var_1040) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */
}

def @func_6262(%var_6260: Tensor[(10, 7, 12), float32]) -> (Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), int16]) {
  @func_6259(%var_6260) /* ty=(Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), int16]) */
}

def @func_4838(%var_4837: Tensor[(15, 2, 10), int8]) -> (Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) {
  %592 = fn (%var_4813: Tensor[(15, 2, 10), int8]) -> (Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) {
    %580 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 2, 10), int8] */, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
    %581 = shape_of(%var_4813, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(%var_4813, dtype="int8") /* ty=Tensor[(15, 2, 10), int8] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %584 = cast(%var_4813, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
    %585 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 2, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 2, 10), int8] */, dtype="uint16") /* ty=Tensor[(15, 2, 10), uint16] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %588 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 2, 10), int8] */, dtype="float32") /* ty=Tensor[(15, 2, 10), float32] */;
    %589 = bitwise_xor(%582, %583) /* ty=Tensor[(15, 2, 10), int8] */;
    %590 = multiply(%586, %587) /* ty=Tensor[(15, 2, 10), uint16] */;
    %591 = cosh(%588) /* ty=Tensor[(15, 2, 10), float32] */;
    (%589, %590, %591)
  };
  %592(%var_4837) /* ty=(Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) */
}

def @func_3769() -> (Tensor[(9, 9, 13), float32],) {
  %593 = @func_1714() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */;
  %594 = %593.0;
  (%594,)
}

def @func_1064() -> Tensor[(9, 9, 13), float32] {
  @func_573() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_4629() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  @func_4627() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */
}

def @func_4877(%var_4857: Tensor[(6, 12, 11), float64]) -> (Tensor[(6, 12, 11), float64], Tensor[(9, 9, 13), float32]) {
  %595 = cast(%var_4857, dtype="float64") /* ty=Tensor[(6, 12, 11), float64] */;
  %596 = sin(%595) /* ty=Tensor[(6, 12, 11), float64] */;
  %597 = @func_2156() /* ty=Tensor[(9, 9, 13), float32] */;
  (%596, %597)
}

def @func_1498(%var_1497: Tensor[(9, 9, 13), float64]) -> (Tensor[(9, 9, 13), float32],) {
  %605 = fn (%var_1458: Tensor[(9, 9, 13), float64]) -> (Tensor[(9, 9, 13), float32],) {
    %598 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
    %599 = %598.1;
    %600 = cast(%var_1458, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%599, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %604 = power(%602, %603) /* ty=Tensor[(9, 9, 13), float32] */;
    (%604,)
  };
  %605(%var_1497) /* ty=(Tensor[(9, 9, 13), float32],) */
}

def @func_7222(%var_7221: Tensor[(108), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(108), float64]) {
  %616 = fn (%var_7217: Tensor[(108), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(108), float64]) {
    %606 = @func_3368() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */;
    %607 = cast(%var_7217, dtype="float64") /* ty=Tensor[(108), float64] */;
    %608 = cast(%var_7217, dtype="float64") /* ty=Tensor[(108), float64] */;
    %609 = %606.1;
    %610 = cast(%609, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %611 = reshape(%607, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
    %612 = reshape(%608, newshape=[3, 36]) /* ty=Tensor[(3, 36), float64] */;
    %613 = reshape(%610, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
    %614 = @func_1037(%611, %612, %613) /* ty=(Tensor[(6, 3, 6), float32], Tensor[(9, 9, 13), uint64], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(3, 36), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
    %615 = %614.4;
    (%609, %615, %var_7217)
  };
  %616(%var_7221) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(108), float64]) */
}

def @func_5831(%var_5829: Tensor[(2, 6, 12), bool], %var_5830: Tensor[(2, 6, 12), bool]) -> (Tensor[(9, 9, 13), int32], Tensor[(2, 6, 12), float64], Tensor[(2, 6, 12), float64], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64]) {
  %638 = fn (%var_5761: Tensor[(2, 6, 12), bool], %var_5762: Tensor[(2, 6, 12), bool]) -> (Tensor[(9, 9, 13), int32], Tensor[(2, 6, 12), float64], Tensor[(2, 6, 12), float64], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64]) {
    %617 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
    %618 = cast(%var_5762, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
    %619 = cast(%var_5761, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
    %620 = shape_of(%var_5762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%var_5762, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %623 = less(%621, %622) /* ty=Tensor[(2, 6, 12), bool] */;
    %624 = cast(%var_5762, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
    %625 = shape_of(%var_5761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(%var_5761, dtype="bool") /* ty=Tensor[(2, 6, 12), bool] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %628 = logical_and(%626, %627) /* ty=Tensor[(2, 6, 12), bool] */;
    %629 = cast(%628, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
    %630 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%623, dtype="float64") /* ty=Tensor[(2, 6, 12), float64] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %633 = %617.0;
    %634 = sqrt(%618) /* ty=Tensor[(2, 6, 12), float64] */;
    %635 = minimum(%631, %632) /* ty=Tensor[(2, 6, 12), float64] */;
    %636 = @func_4474() /* ty=Tensor[(9, 9, 13), float64] */;
    %637 = @func_4474() /* ty=Tensor[(9, 9, 13), float64] */;
    (%633, %634, %635, %636, %637)
  };
  %638(%var_5829, %var_5830) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(2, 6, 12), float64], Tensor[(2, 6, 12), float64], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64]) */
}

def @func_3543() -> Tensor[(9, 9, 13), bool] {
  %639 = @func_1754() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) */;
  %639.0
}

def @func_6877() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(1, 11, 12), float64], float64, Tensor[(132), float64]) {
  %648 = fn () -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(1, 11, 12), float64], float64, Tensor[(132), float64]) {
    %640 = cast(-5.06312f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %641 = cast(meta[relay.Constant][22] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
    %642 = reshape(%640, newshape=[]) /* ty=float64 */;
    %643 = reshape(%641, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), float64] */;
    %644 = @func_4536(%642, %643) /* ty=(Tensor[(1, 11, 12), float64],) */;
    %645 = @func_6103() /* ty=Tensor[(9, 9, 13), float64] */;
    %646 = @func_6103() /* ty=Tensor[(9, 9, 13), float64] */;
    %647 = %644.0;
    (%645, %646, %647, -5.06312f64 /* ty=float64 */, meta[relay.Constant][22] /* ty=Tensor[(132), float64] */)
  };
  %648() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float64], Tensor[(1, 11, 12), float64], float64, Tensor[(132), float64]) */
}

def @func_7302() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
  %653 = fn () -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
    %649 = @func_1303() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %650 = @func_3584() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32], Tensor[(504), int32]) */;
    %651 = %649.0;
    %652 = %650.1;
    (%651, %652)
  };
  %653() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */
}

def @main(%var_7632: Tensor[(4, 1, 7), float64]) -> Tensor[(4, ?, 7), uint64] {
  %654 = cast(%var_7632, dtype="float64") /* ty=Tensor[(4, 1, 7), float64] */;
  %655 = acosh(%654) /* ty=Tensor[(4, 1, 7), float64] */;
  %656 = cast(%655, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %657 = shape_of(%var_7632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%var_7632, dtype="uint64") /* ty=Tensor[(4, 1, 7), uint64] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%658, %659) /* ty=Tensor[(4, ?, 7), uint64] */
}

def @func_1715() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
  %668 = fn () -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) {
    %660 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
    %661 = %660.0;
    %662 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 9, 13), int32] */, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %666 = @func_1064() /* ty=Tensor[(9, 9, 13), float32] */;
    %667 = logical_and(%664, %665) /* ty=Tensor[(9, 9, 13), bool] */;
    (%666, %667)
  };
  %668() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool]) */
}

def @func_1929(%var_1927: Tensor[(9, 9, 13), float32], %var_1928: Tensor[(9, 9, 13), int32]) -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int32], Tensor[(10, 7, 12), float64]) {
  %691 = fn (%var_1874: Tensor[(9, 9, 13), float32], %var_1914: Tensor[(9, 9, 13), int32]) -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int32], Tensor[(10, 7, 12), float64]) {
    %669 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
    %670 = %669.0;
    %671 = cast(%670, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %672 = reshape(%671, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
    %673 = @func_1496(%672) /* ty=(Tensor[(9, 9, 13), float32],) */;
    %674 = %673.0;
    %675 = cast(%var_1874, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
    %677 = cast(%674, dtype="bool") /* ty=Tensor[(9, 9, 13), bool] */;
    %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %679 = cast(%670, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %680 = reshape(%679, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
    %681 = @func_1787(%680) /* ty=(Tensor[(9, 9, 13), bool],) */;
    %682 = cast(%var_1914, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
    %683 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%670, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %686 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
    %687 = equal(%677, %678) /* ty=Tensor[(9, 9, 13), bool] */;
    %688 = %681.0;
    %689 = minimum(%684, %685) /* ty=Tensor[(9, 9, 13), int32] */;
    %690 = %686.1;
    (%687, %688, %689, %690)
  };
  %691(%var_1927, %var_1928) /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), int32], Tensor[(10, 7, 12), float64]) */
}

def @func_6673() -> (Tensor[(9, 9, 13), bool], Tensor[(11, 16, 15), bool]) {
  @func_6671() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(11, 16, 15), bool]) */
}

def @func_2557(%var_2555: Tensor[(1, 8, 11), float32]) -> (Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) {
  @func_2554(%var_2555) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) */
}

def @func_2655() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) {
  @func_2653() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */
}

def @func_4018() -> Tensor[(9, 9, 13), int16] {
  %692 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %692.1
}

def @func_6000() -> (Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) {
  @func_5998() /* ty=(Tensor[(9, 9, 13), uint16], Tensor[(9, 9, 13), float32]) */
}

def @func_5076(%var_4994: uint64, %var_5064: Tensor[(132), float64]) -> (Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float64], Tensor[(1, 11, 12), float64], Tensor[(132), float64], Tensor[(7, 15, 4), uint8]) {
  %693 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
  %694 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %695 = cast(%var_4994, dtype="float64") /* ty=float64 */;
  %696 = cast(%var_5064, dtype="float64") /* ty=Tensor[(132), float64] */;
  %697 = reshape(%695, newshape=[]) /* ty=float64 */;
  %698 = reshape(%696, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), float64] */;
  %699 = @func_4536(%697, %698) /* ty=(Tensor[(1, 11, 12), float64],) */;
  %700 = cast(%var_4994, dtype="uint64") /* ty=uint64 */;
  %701 = cast(meta[relay.Constant][24] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %702 = reshape(%700, newshape=[]) /* ty=uint64 */;
  %703 = reshape(%701, newshape=[7, 15, 4]) /* ty=Tensor[(7, 15, 4), uint64] */;
  %704 = @func_4982(%702, %703) /* ty=Tensor[(7, 15, 4), uint64] */;
  %705 = cast(%var_4994, dtype="bool") /* ty=bool */;
  %706 = cast(%704, dtype="bool") /* ty=Tensor[(7, 15, 4), bool] */;
  %707 = not_equal(%705, %706) /* ty=Tensor[(7, 15, 4), bool] */;
  %708 = cast(meta[relay.Constant][24] /* ty=Tensor[(420), uint64] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="bool") /* ty=Tensor[(7, 15, 4), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = greater_equal(%710, %711) /* ty=Tensor[(7, 15, 4), bool] */;
  %713 = cast(%712, dtype="uint8") /* ty=Tensor[(7, 15, 4), uint8] */;
  %714 = cast(%var_4994, dtype="uint8") /* ty=uint8 */;
  %715 = @func_3543() /* ty=Tensor[(9, 9, 13), bool] */;
  %716 = %693.2;
  %717 = %694.1;
  %718 = %699.0;
  %719 = multiply(%713, %714) /* ty=Tensor[(7, 15, 4), uint8] */;
  (%715, %716, %717, %718, %var_5064, %719)
}

def @func_2326(%var_2325: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) {
  %741 = fn (%var_2315: Tensor[(9, 9, 13), float32]) -> (Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) {
    %720 = @func_1115() /* ty=(Tensor[(9, 9, 13), int32],) */;
    %721 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
    %722 = %721.0;
    %723 = %720.0;
    %724 = cast(%723, dtype="float64") /* ty=Tensor[(9, 9, 13), float64] */;
    %725 = reshape(%724, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float64] */;
    %726 = @func_1496(%725) /* ty=(Tensor[(9, 9, 13), float32],) */;
    %727 = %726.0;
    %728 = cast(%727, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %729 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%722, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %732 = @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */;
    %733 = %732.0;
    %734 = cast(%var_2315, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
    %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
    %736 = cast(%733, dtype="int32") /* ty=Tensor[(9, 9, 13), int32] */;
    %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %738 = @func_433() /* ty=Tensor[(9, 9, 13), float32] */;
    %739 = add(%730, %731) /* ty=Tensor[(9, 9, 13), float32] */;
    %740 = right_shift(%736, %737) /* ty=Tensor[(9, 9, 13), int32] */;
    (%723, %738, %739, %740)
  };
  %741(%var_2325) /* ty=(Tensor[(9, 9, 13), int32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int32]) */
}

def @func_2710() -> (Tensor[(10, 7, 12), float32],) {
  %742 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
  %743 = %742.0;
  (%743,)
}

def @func_3370() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) {
  @func_3368() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */
}

def @func_2859(%var_2832: Tensor[(4, 14, 9), int32], %var_2833: Tensor[(4, 14, 9), int32]) -> (Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) {
  %744 = cast(%var_2833, dtype="int32") /* ty=Tensor[(4, 14, 9), int32] */;
  %745 = shape_of(%var_2832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%var_2832, dtype="int32") /* ty=Tensor[(4, 14, 9), int32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %748 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
  %749 = bitwise_or(%746, %747) /* ty=Tensor[(4, 14, 9), int32] */;
  %750 = %748.2;
  (%749, %750)
}

def @func_3437() -> (Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) {
  %755 = fn () -> (Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) {
    %751 = @func_536() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float32]) */;
    %752 = @func_2710() /* ty=(Tensor[(10, 7, 12), float32],) */;
    %753 = %751.1;
    %754 = %752.0;
    (%753, %754)
  };
  %755() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), float32]) */
}

def @func_4430() -> Tensor[(9, 9, 13), float32] {
  %756 = fn () -> Tensor[(9, 9, 13), float32] {
    @func_1178() /* ty=Tensor[(9, 9, 13), float32] */
  };
  %756() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_6380() -> (Tensor[(9, 9, 13), bool], Tensor[(15, 2, 10), float32], Tensor[(300), int8], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), float32]) {
  %773 = fn () -> (Tensor[(9, 9, 13), bool], Tensor[(15, 2, 10), float32], Tensor[(300), int8], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), float32]) {
    %757 = @func_2105() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16]) */;
    %758 = cast(meta[relay.Constant][25] /* ty=Tensor[(300), int8] */, dtype="int8") /* ty=Tensor[(300), int8] */;
    %759 = reshape(%758, newshape=[15, 2, 10]) /* ty=Tensor[(15, 2, 10), int8] */;
    %760 = @func_4836(%759) /* ty=(Tensor[(15, 2, 10), int8], Tensor[(15, 2, 10), uint16], Tensor[(15, 2, 10), float32]) */;
    %761 = @func_4627() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32]) */;
    %762 = @func_4675() /* ty=(Tensor[(9, 9, 13), float64],) */;
    %763 = %762.0;
    %764 = cast(%763, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %765 = reshape(%764, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
    %766 = @func_1537(%765) /* ty=(Tensor[(9, 9, 13), uint32],) */;
    %767 = cast(%763, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
    %768 = %757.1;
    %769 = %760.2;
    %770 = %761.1;
    %771 = %766.0;
    %772 = cos(%767) /* ty=Tensor[(9, 9, 13), float32] */;
    (%768, %769, meta[relay.Constant][25] /* ty=Tensor[(300), int8] */, %770, %771, %772)
  };
  %773() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(15, 2, 10), float32], Tensor[(300), int8], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), float32]) */
}

def @func_3911() -> (Tensor[(5, 4, 13), float32],) {
  %774 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
  %775 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(5, 4, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 4, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 4, 13), float32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %778 = mod(%776, %777) /* ty=Tensor[(5, 4, 13), float32] */;
  (%778,)
}

def @func_6104() -> Tensor[(9, 9, 13), float64] {
  %780 = fn () -> Tensor[(9, 9, 13), float64] {
    %779 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
    %779.0
  };
  %780() /* ty=Tensor[(9, 9, 13), float64] */
}

def @func_3626(%var_3625: Tensor[(6, 6, 15), float64]) -> Tensor[(6, 6, 15), float32] {
  %784 = fn (%var_3617: Tensor[(6, 6, 15), float64]) -> Tensor[(6, 6, 15), float32] {
    %781 = cast(%var_3617, dtype="float64") /* ty=Tensor[(6, 6, 15), float64] */;
    %782 = erf(%781) /* ty=Tensor[(6, 6, 15), float64] */;
    %783 = cast(%782, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
    acosh(%783) /* ty=Tensor[(6, 6, 15), float32] */
  };
  %784(%var_3625) /* ty=Tensor[(6, 6, 15), float32] */
}

def @func_2781() -> (Tensor[(9, 9, 13), float64], Tensor[(11, 16, 15), bool], Tensor[(2640), float64]) {
  %791 = fn () -> (Tensor[(9, 9, 13), float64], Tensor[(11, 16, 15), bool], Tensor[(2640), float64]) {
    %785 = @func_2001() /* ty=(Tensor[(9, 9, 13), float64],) */;
    %786 = cast(meta[relay.Constant][28] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
    %787 = reshape(%786, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
    %788 = @func_2220(%787) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(11, 16, 15), bool]) */;
    %789 = %785.0;
    %790 = %788.1;
    (%789, %790, meta[relay.Constant][28] /* ty=Tensor[(2640), float64] */)
  };
  %791() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(11, 16, 15), bool], Tensor[(2640), float64]) */
}

def @func_5692(%var_5644: Tensor[(1, 88), float32], %var_5667: Tensor[(12, 8, 11), float32]) -> (Tensor[(9, 9, 13), bool], Tensor[(1, 88), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(12, 8, 11), float64], Tensor[(6, 15, 2), bool], Tensor[(180), float64], Tensor[(9, 9, 13), uint32], Tensor[(9, 9, 13), bool]) {
  %792 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %793 = @func_292() /* ty=(Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64]) */;
  %794 = cast(%var_5644, dtype="float32") /* ty=Tensor[(1, 88), float32] */;
  %795 = reshape(%794, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float32] */;
  %796 = @func_2554(%795) /* ty=(Tensor[(1, 8, 11), float32], Tensor[(9, 9, 13), float64]) */;
  %797 = %796.0;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %799 = cast(%var_5667, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
  %800 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %801 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %802 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %803 = reshape(%800, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %804 = reshape(%801, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %805 = reshape(%802, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), float64] */;
  %806 = @func_5479(%803, %804, %805) /* ty=(Tensor[(6, 15, 2), float64], Tensor[(6, 15, 2), bool]) */;
  %807 = %792.1;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(9, 9, 13), float32] */;
  %809 = reshape(%808, newshape=[9, 9, 13]) /* ty=Tensor[(9, 9, 13), float32] */;
  %810 = @func_1537(%809) /* ty=(Tensor[(9, 9, 13), uint32],) */;
  %811 = @func_3886() /* ty=(Tensor[(9, 9, 13), bool],) */;
  %812 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
  %813 = @func_5179() /* ty=Tensor[(9, 9, 13), float32] */;
  %814 = %793.0;
  %815 = floor_mod(%798, %799) /* ty=Tensor[(12, 8, 11), float64] */;
  %816 = %806.1;
  %817 = %810.0;
  %818 = %811.0;
  (%807, %var_5644, %812, %813, %814, %815, %816, meta[relay.Constant][29] /* ty=Tensor[(180), float64] */, %817, %818)
}

def @func_434() -> Tensor[(9, 9, 13), float32] {
  %820 = fn () -> Tensor[(9, 9, 13), float32] {
    %819 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
    %819.0
  };
  %820() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_5891(%var_5886: Tensor[(12, 16, 2), float32]) -> Tensor[(12, 16, 2), float32] {
  %821 = cast(%var_5886, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  acosh(%821) /* ty=Tensor[(12, 16, 2), float32] */
}

def @func_6259(%var_6248: Tensor[(10, 7, 12), float32]) -> (Tensor[(10, 7, 12), float32], Tensor[(9, 9, 13), int16]) {
  %822 = @func_3675() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(11, 16, 9), float32]) */;
  %823 = %822.0;
  %824 = cast(%var_6248, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="float32") /* ty=Tensor[(10, 7, 12), float32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %828 = power(%826, %827) /* ty=Tensor[(10, 7, 12), float32] */;
  %829 = @func_4018() /* ty=Tensor[(9, 9, 13), int16] */;
  (%828, %829)
}

def @func_5253() -> Tensor[(9, 9, 13), float32] {
  @func_2572() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_2491(%var_2490: Tensor[(10, 7, 12), float32]) -> (Tensor[(10, 7, 12), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), uint16]) {
  %844 = fn (%var_2451: Tensor[(10, 7, 12), float32]) -> (Tensor[(10, 7, 12), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), uint16]) {
    %830 = @func_1383() /* ty=(Tensor[(10, 7, 12), float32], Tensor[(10, 7, 12), float64]) */;
    %831 = %830.0;
    %832 = cast(%var_2451, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
    %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %834 = cast(%831, dtype="bool") /* ty=Tensor[(10, 7, 12), bool] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %836 = @func_2403() /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
    %837 = cast(%831, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
    %838 = shape_of(%var_2451, dtype="int32") /* ty=Tensor[(3), int32] */;
    %839 = cast(%var_2451, dtype="uint16") /* ty=Tensor[(10, 7, 12), uint16] */;
    %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %841 = equal(%834, %835) /* ty=Tensor[(10, 7, 12), bool] */;
    %842 = %836.0;
    %843 = bitwise_or(%839, %840) /* ty=Tensor[(10, 7, 12), uint16] */;
    (%841, %842, %843)
  };
  %844(%var_2490) /* ty=(Tensor[(10, 7, 12), bool], Tensor[(9, 9, 13), float64], Tensor[(10, 7, 12), uint16]) */
}

def @func_6431() -> Tensor[(10, 7, 12), float32] {
  @func_6429() /* ty=Tensor[(10, 7, 12), float32] */
}

def @func_4061(%var_4058: Tensor[(6, 8, 2), int8], %var_4059: Tensor[(6, 8, 2), int8], %var_4060: Tensor[(504), int32]) -> (Tensor[(6, 8, 2), int8], Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32], Tensor[(504), float32]) {
  @func_4056(%var_4058, %var_4059, %var_4060) /* ty=(Tensor[(6, 8, 2), int8], Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32], Tensor[(504), float32]) */
}

def @func_2572() -> Tensor[(9, 9, 13), float32] {
  @func_1064() /* ty=Tensor[(9, 9, 13), float32] */
}

def @func_5408(%var_5405: Tensor[(96), int8], %var_5406: Tensor[(504), int32], %var_5407: Tensor[(792), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(96), int8], Tensor[(504), int32], Tensor[(6, 12, 11), float64], Tensor[(792), float64], Tensor[(6, 8, 2), int16], Tensor[(9, 9, 13), float32]) {
  %869 = fn (%var_5376: Tensor[(96), int8], %var_5377: Tensor[(504), int32], %var_5380: Tensor[(792), float64]) -> (Tensor[(9, 9, 13), float32], Tensor[(96), int8], Tensor[(504), int32], Tensor[(6, 12, 11), float64], Tensor[(792), float64], Tensor[(6, 8, 2), int16], Tensor[(9, 9, 13), float32]) {
    %845 = cast(%var_5380, dtype="float64") /* ty=Tensor[(792), float64] */;
    %846 = reshape(%845, newshape=[6, 12, 11]) /* ty=Tensor[(6, 12, 11), float64] */;
    %847 = @func_4877(%846) /* ty=(Tensor[(6, 12, 11), float64], Tensor[(9, 9, 13), float32]) */;
    %848 = cast(%var_5376, dtype="int8") /* ty=Tensor[(96), int8] */;
    %849 = cast(%var_5376, dtype="int8") /* ty=Tensor[(96), int8] */;
    %850 = cast(%var_5377, dtype="int32") /* ty=Tensor[(504), int32] */;
    %851 = reshape(%848, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int8] */;
    %852 = reshape(%849, newshape=[6, 8, 2]) /* ty=Tensor[(6, 8, 2), int8] */;
    %853 = reshape(%850, newshape=[504]) /* ty=Tensor[(504), int32] */;
    %854 = @func_4056(%851, %852, %853) /* ty=(Tensor[(6, 8, 2), int8], Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32], Tensor[(504), float32]) */;
    %855 = %854.0;
    %856 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 8, 2), int8] */, dtype="int16") /* ty=Tensor[(6, 8, 2), int16] */;
    %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %858 = cast(%855, dtype="int16") /* ty=Tensor[(6, 8, 2), int16] */;
    %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %860 = cast(%var_5377, dtype="int32") /* ty=Tensor[(504), int32] */;
    %861 = cast(%var_5377, dtype="int32") /* ty=Tensor[(504), int32] */;
    %862 = reshape(%860, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
    %863 = reshape(%861, newshape=[4, 14, 9]) /* ty=Tensor[(4, 14, 9), int32] */;
    %864 = @func_2859(%862, %863) /* ty=(Tensor[(4, 14, 9), int32], Tensor[(9, 9, 13), float32]) */;
    %865 = @func_2572() /* ty=Tensor[(9, 9, 13), float32] */;
    %866 = %847.0;
    %867 = maximum(%858, %859) /* ty=Tensor[(6, 8, 2), int16] */;
    %868 = %864.1;
    (%865, %var_5376, %var_5377, %866, %var_5380, %867, %868)
  };
  %869(%var_5405, %var_5406, %var_5407) /* ty=(Tensor[(9, 9, 13), float32], Tensor[(96), int8], Tensor[(504), int32], Tensor[(6, 12, 11), float64], Tensor[(792), float64], Tensor[(6, 8, 2), int16], Tensor[(9, 9, 13), float32]) */
}

def @func_2138(%var_2136: Tensor[(6, 18), float64]) -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(6, 18), float32]) {
  @func_2135(%var_2136) /* ty=(Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(6, 18), float32]) */
}

def @func_470() -> (Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) {
  @func_468() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), float32]) */
}

def @func_2403() -> (Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) {
  %870 = @func_363() /* ty=(Tensor[(9, 9, 13), float32], Tensor[(9, 9, 13), int16], Tensor[(9, 9, 13), float64], Tensor[(9, 9, 13), bool]) */;
  %871 = @func_1754() /* ty=(Tensor[(9, 9, 13), bool], Tensor[(9, 9, 13), bool]) */;
  %872 = %870.2;
  %873 = %871.1;
  (%872, %873)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen93/build/output.py:2419: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen93/build/output.py", line 2424, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(28) tvmgen_default_fused_cast_acosh_cast_reshape_minimum_kernel0(uint64_t* __restrict__ T_minimum, double* __restrict__ placeholder) {
  T_minimum[(((int)threadIdx.x))] = min(((uint64_t)placeholder[(((int)threadIdx.x))]), ((uint64_t)acosh(placeholder[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

