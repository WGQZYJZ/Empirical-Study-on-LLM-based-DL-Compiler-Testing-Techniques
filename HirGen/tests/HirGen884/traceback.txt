==========mod==========
#[version = "0.0.5"]
def @func_10378() -> (Tensor[(9, 1, 4), float64], Tensor[(8, 4, 7), float32], Tensor[(224), float64], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64]) {
  %0 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %2 = reshape(%1, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), float64] */;
  %3 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %4 = %0.0;
  %5 = @func_4906(%2) /* ty=Tensor[(8, 4, 7), float32] */;
  %6 = @func_8178() /* ty=Tensor[(14, 5, ?), float32] */;
  %7 = %3.0;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(224), float64] */, %6, %7)
}

def @func_7388() -> Tensor[(9, 1, 4), float64] {
  %8 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %8.0
}

def @func_9665(%var_9622: Tensor[(14, 5, 12), bool], %var_9657: Tensor[(14, 5, 12), int16]) -> (Tensor[(14, 5, 12), bool], Tensor[(6, 13, ?), bool], float32) {
  %9 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %10 = %9.1;
  %11 = cast(%10, dtype="int16") /* ty=Tensor[(14, 5, ?), int16] */;
  %12 = cast(%var_9622, dtype="int16") /* ty=Tensor[(14, 5, 12), int16] */;
  %13 = minimum(%11, %12) /* ty=Tensor[(14, 5, 12), int16] */;
  %14 = cast(%var_9657, dtype="bool") /* ty=Tensor[(14, 5, 12), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(14, 5, 12), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = cast(-0.369696f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %19 = reshape(%18, newshape=[]) /* ty=float32 */;
  %20 = @func_475(%19) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %21 = greater_equal(%16, %17) /* ty=Tensor[(14, 5, 12), bool] */;
  %22 = %20.0;
  (%21, %22, -0.369696f /* ty=float32 */)
}

def @func_7957() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) {
  %23 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %24 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %25 = %23.0;
  %26 = %24.0;
  (%25, %26)
}

def @func_12327() -> (Tensor[(15, 9, 3), int32],) {
  %27 = @func_7995() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %28 = %27.0;
  (%28,)
}

def @func_5643(%var_5637: Tensor[(468), float64], %var_5639: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  %29 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %30 = cast(%var_5637, dtype="float64") /* ty=Tensor[(468), float64] */;
  %31 = cast(3.75046f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %32 = cast(%var_5639, dtype="int64") /* ty=Tensor[(256), int64] */;
  %33 = reshape(%30, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %34 = reshape(%31, newshape=[]) /* ty=float32 */;
  %35 = reshape(%32, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %36 = @func_866(%33, %34, %35) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %37 = %29.0;
  %38 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  %39 = %36.5;
  (%37, %38, %39, %var_5637, 3.75046f /* ty=float32 */, %var_5639)
}

def @func_12407(%var_12362: Tensor[(14, 5, 11), bool]) -> (Tensor[(14, 5, 11), bool], Tensor[(14, 5, 11), float32]) {
  %40 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %43 = cast(%var_12362, dtype="bool") /* ty=Tensor[(14, 5, 11), bool] */;
  %44 = cast(%var_12362, dtype="float64") /* ty=Tensor[(14, 5, 11), float64] */;
  %45 = sigmoid(%44) /* ty=Tensor[(14, 5, 11), float64] */;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(14, 5, 11), float32] */;
  %47 = less_equal(%42, %43) /* ty=Tensor[(14, 5, 11), bool] */;
  %48 = log2(%46) /* ty=Tensor[(14, 5, 11), float32] */;
  (%47, %48)
}

def @func_6279() -> (Tensor[(9, 1, 4), float64],) {
  %49 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%49,)
}

def @func_9043() -> Tensor[(9, 1, 4), float64] {
  @func_6794() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_12681(%var_12676: Tensor[(9, 2, 4), uint8]) -> Tensor[(9, 2, 4), bool] {
  %50 = @func_11043() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %51 = %50.1;
  %52 = cast(%var_12676, dtype="bool") /* ty=Tensor[(9, 2, 4), bool] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="bool") /* ty=Tensor[(9, 2, 4), bool] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%54, %55) /* ty=Tensor[(9, 2, 4), bool] */
}

def @func_13353(%var_13345: Tensor[(8, 32), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(1, 256), int64], Tensor[(8, 32), int64], Tensor[(14, 5, ?), int16]) {
  %56 = @func_11128() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) */;
  %57 = @func_8527() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) */;
  %58 = cast(%var_13345, dtype="int64") /* ty=Tensor[(8, 32), int64] */;
  %59 = reshape(%58, newshape=[1, 256]) /* ty=Tensor[(1, 256), int64] */;
  %60 = @func_6708(%59) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) */;
  %61 = %56.0;
  %62 = cast(%61, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %63 = reshape(%62, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), float32] */;
  %64 = @func_5793(%63) /* ty=(Tensor[(14, 5, ?), int16],) */;
  %65 = %57.1;
  %66 = %60.3;
  %67 = %64.0;
  (%61, %65, %66, %var_13345, %67)
}

def @func_8789() -> Tensor[(14, 5, ?), float32] {
  %68 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %68.0
}

def @func_5323(%var_5316: Tensor[(12, 7, 1), bool], %var_5317: Tensor[(12, 7, 8), bool]) -> (Tensor[(12, 7, 8), bool],) {
  %69 = cast(%var_5316, dtype="bool") /* ty=Tensor[(12, 7, 1), bool] */;
  %70 = cast(%var_5317, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %71 = logical_and(%69, %70) /* ty=Tensor[(12, 7, 8), bool] */;
  (%71,)
}

def @func_8744(%var_8736: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64], Tensor[(14, 5, ?), float32], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
  %72 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
  %73 = @func_8625() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %74 = cast(meta[relay.Constant][1] /* ty=Tensor[(2700), float64] */, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %75 = reshape(%74, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
  %76 = @func_7078(%75) /* ty=(Tensor[(15, 15, 12), float64],) */;
  %77 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %78 = cast(%var_8736, dtype="int64") /* ty=Tensor[(256), int64] */;
  %79 = reshape(%78, newshape=[1, 256]) /* ty=Tensor[(1, 256), int64] */;
  %80 = @func_6708(%79) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) */;
  %81 = %72.1;
  %82 = %73.0;
  %83 = %76.0;
  %84 = %77.0;
  %85 = %80.2;
  (%81, %82, %83, meta[relay.Constant][1] /* ty=Tensor[(2700), float64] */, %84, %85, %var_8736)
}

def @func_11699(%var_11662: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(468), float64], Tensor[(468), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) {
  %86 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
  %87 = cast(%var_11662, dtype="float64") /* ty=Tensor[(468), float64] */;
  %88 = cast(-8.67982f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %89 = reshape(%87, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %90 = reshape(%88, newshape=[]) /* ty=float32 */;
  %91 = @func_8230(%89, %90) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) */;
  %92 = @func_10781() /* ty=(Tensor[(468), float64],) */;
  %93 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %94 = %86.3;
  %95 = %91.2;
  %96 = %92.0;
  %97 = @func_5934() /* ty=Tensor[(468), float64] */;
  %98 = %93.0;
  %99 = @func_9043() /* ty=Tensor[(9, 1, 4), float64] */;
  (%94, %95, %var_11662, -8.67982f /* ty=float32 */, %96, %97, %98, %99)
}

def @func_8052() -> Tensor[(9, 1, 4), float64] {
  %100 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %100.0
}

def @func_12804(%var_12784: Tensor[(7, 9, 3), float32]) -> Tensor[(7, 9, 3), float32] {
  %101 = cast(%var_12784, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
  sigmoid(%101) /* ty=Tensor[(7, 9, 3), float32] */
}

def @func_1966(%var_1947: Tensor[(5, 16, 6), int8], %var_1957: float32) -> (Tensor[(5, 16, 6), int8], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  %102 = cast(%var_1947, dtype="int8") /* ty=Tensor[(5, 16, 6), int8] */;
  %103 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(5, 16, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 16, 6), int8] */, dtype="int8") /* ty=Tensor[(5, 16, 6), int8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %106 = cast(meta[relay.Constant][3] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %107 = cast(%var_1957, dtype="float32") /* ty=float32 */;
  %108 = cast(meta[relay.Constant][4] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %109 = reshape(%106, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %110 = reshape(%107, newshape=[]) /* ty=float32 */;
  %111 = reshape(%108, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %112 = @func_866(%109, %110, %111) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %113 = right_shift(%104, %105) /* ty=Tensor[(5, 16, 6), int8] */;
  %114 = %112.2;
  (%113, %114, meta[relay.Constant][3] /* ty=Tensor[(468), float64] */, %var_1957, meta[relay.Constant][4] /* ty=Tensor[(256), int64] */)
}

def @func_475(%var_446: float32) -> (Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) {
  %115 = cast(%var_446, dtype="float32") /* ty=float32 */;
  %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 1), float32] */;
  %117 = power(%115, %116) /* ty=Tensor[(6, 13, 1), float32] */;
  %118 = cast(%117, dtype="bool") /* ty=Tensor[(6, 13, 1), bool] */;
  %119 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 13, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 13, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 1), bool] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %122 = cast(%117, dtype="int16") /* ty=Tensor[(6, 13, 1), int16] */;
  %123 = cast(%var_446, dtype="int16") /* ty=int16 */;
  %124 = equal(%120, %121) /* ty=Tensor[(6, 13, ?), bool] */;
  %125 = subtract(%122, %123) /* ty=Tensor[(6, 13, 1), int16] */;
  (%124, %125)
}

def @func_866(%var_825: Tensor[(13, 4, 9), float64], %var_832: float32, %var_861: Tensor[(256), int64]) -> (Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
  %126 = cast(%var_825, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %127 = cast(%var_832, dtype="float32") /* ty=float32 */;
  %128 = reshape(%127, newshape=[]) /* ty=float32 */;
  %129 = @func_475(%128) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %130 = cast(%var_832, dtype="float32") /* ty=float32 */;
  %131 = reshape(%130, newshape=[]) /* ty=float32 */;
  %132 = @func_475(%131) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %133 = cast(%var_832, dtype="float32") /* ty=float32 */;
  %134 = reshape(%133, newshape=[]) /* ty=float32 */;
  %135 = @func_475(%134) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %136 = %135.0;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(6, 13, ?), float64] */;
  %138 = cast(%var_832, dtype="float64") /* ty=float64 */;
  %139 = cast(%var_861, dtype="int64") /* ty=Tensor[(256), int64] */;
  %140 = cast(%var_861, dtype="int64") /* ty=Tensor[(256), int64] */;
  %141 = reshape(%139, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %142 = reshape(%140, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %143 = @func_578(%141, %142) /* ty=(Tensor[(8, 16, 2), int64],) */;
  %144 = atanh(%126) /* ty=Tensor[(13, 4, 9), float64] */;
  %145 = %129.0;
  %146 = %132.0;
  %147 = floor_mod(%137, %138) /* ty=Tensor[(6, 13, ?), float64] */;
  %148 = %143.0;
  (%144, %145, %146, %147, %148, %var_861)
}

def @func_8230(%var_8225: Tensor[(468, 1), float64], %var_8226: float32) -> (Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) {
  %149 = cast(%var_8225, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %150 = cast(%var_8226, dtype="float32") /* ty=float32 */;
  %151 = reshape(%149, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %152 = reshape(%150, newshape=[]) /* ty=float32 */;
  %153 = @func_4973(%151, %152) /* ty=(Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) */;
  %154 = @func_8052() /* ty=Tensor[(9, 1, 4), float64] */;
  %155 = %153.1;
  (%154, %155, %var_8225, %var_8226)
}

def @func_9608() -> (Tensor[(14, 5, ?), float64], Tensor[(9, 1, 4), float64], Tensor[(3150), float64], float32, Tensor[(256), int64]) {
  %156 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %157 = cast(meta[relay.Constant][6] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %158 = reshape(%157, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %159 = @func_5240(%158) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %160 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
  %161 = %156.0;
  %162 = @func_5404() /* ty=Tensor[(3150), float64] */;
  %163 = %159.4;
  (%160, %161, %162, %163, meta[relay.Constant][6] /* ty=Tensor[(256), int64] */)
}

def @func_9281() -> (Tensor[(14, 5, 4), float64], Tensor[(468), float64]) {
  %164 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
  %165 = %164.4;
  %166 = @func_5934() /* ty=Tensor[(468), float64] */;
  (%165, %166)
}

def @func_9843() -> (Tensor[(9, 1, 4), float32],) {
  %167 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %168 = %167.0;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %170 = acosh(%169) /* ty=Tensor[(9, 1, 4), float32] */;
  (%170,)
}

def @func_6794() -> Tensor[(9, 1, 4), float64] {
  %171 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %171.0
}

def @func_7237(%var_7207: Tensor[(405), int32], %var_7212: Tensor[(1, 480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], float32, Tensor[(468), float64], Tensor[(4, 64), int64], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(3328), int64], Tensor[(1, 480), int8], Tensor[(3328), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) {
  %172 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %173 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %175 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 64), int64] */, dtype="int64") /* ty=Tensor[(4, 64), int64] */;
  %176 = reshape(%174, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %177 = reshape(%175, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %178 = @func_5643(%176, %177) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %179 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %180 = cast(%var_7207, dtype="int32") /* ty=Tensor[(405), int32] */;
  %181 = reshape(%180, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), int32] */;
  %182 = @func_3163(%181) /* ty=(Tensor[(15, 9, 3), int32],) */;
  %183 = cast(%var_7212, dtype="int8") /* ty=Tensor[(1, 480), int8] */;
  %184 = cast(meta[relay.Constant][9] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %185 = reshape(%183, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %186 = reshape(%184, newshape=[3328]) /* ty=Tensor[(3328), float32] */;
  %187 = @func_5574(%185, %186) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) */;
  %188 = @func_5298() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
  %189 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %190 = %172.0;
  %191 = %173.0;
  %192 = %178.4;
  %193 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
  %194 = %179.0;
  %195 = %182.0;
  %196 = %187.4;
  %197 = @func_6377() /* ty=Tensor[(9, 1, 4), float64] */;
  %198 = %188.1;
  %199 = %189.0;
  (%190, %191, %192, meta[relay.Constant][7] /* ty=Tensor[(468), float64] */, meta[relay.Constant][8] /* ty=Tensor[(4, 64), int64] */, %193, %194, %195, %var_7207, %196, %var_7212, meta[relay.Constant][9] /* ty=Tensor[(3328), float32] */, %197, %198, %199)
}

def @func_11344(%var_11302: Tensor[(11, 14, 1), int32], %var_11303: Tensor[(11, 14, 3), int32]) -> (Tensor[(11, 14, 3), int32],) {
  %200 = cast(%var_11302, dtype="int32") /* ty=Tensor[(11, 14, 1), int32] */;
  %201 = cast(%var_11303, dtype="int32") /* ty=Tensor[(11, 14, 3), int32] */;
  %202 = bitwise_xor(%200, %201) /* ty=Tensor[(11, 14, 3), int32] */;
  (%202,)
}

def @func_3163(%var_3155: Tensor[(15, 9, 3), int32]) -> (Tensor[(15, 9, 3), int32],) {
  %203 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 9, 3), int32] */, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %204 = shape_of(%var_3155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_3155, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %207 = multiply(%205, %206) /* ty=Tensor[(15, 9, 3), int32] */;
  (%207,)
}

def @func_7084() -> (Tensor[(9, 1, 4), float64],) {
  %208 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %209 = %208.0;
  (%209,)
}

def @func_4973(%var_4968: Tensor[(468, 1), float64], %var_4969: float32) -> (Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) {
  %210 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
  %211 = cast(%var_4968, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %212 = cast(%var_4969, dtype="float32") /* ty=float32 */;
  %213 = cast(meta[relay.Constant][11] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %214 = reshape(%211, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %215 = reshape(%212, newshape=[]) /* ty=float32 */;
  %216 = reshape(%213, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %217 = @func_866(%214, %215, %216) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %218 = %210.5;
  %219 = %217.2;
  (%218, %219, %var_4968, %var_4969, meta[relay.Constant][11] /* ty=Tensor[(256), int64] */)
}

def @func_11904() -> (Tensor[(14, 5, ?), float32],) {
  %220 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  (%220,)
}

def @func_7078(%var_7055: Tensor[(15, 15, 12), float64]) -> (Tensor[(15, 15, 12), float64],) {
  %221 = cast(%var_7055, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
  %222 = tan(%221) /* ty=Tensor[(15, 15, 12), float64] */;
  (%222,)
}

def @func_13559() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) {
  %223 = @func_11289() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %224 = @func_13084() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %225 = %223.0;
  %226 = %224.0;
  (%225, %226)
}

def @func_10072(%var_10057: Tensor[(8, 28), float64]) -> (Tensor[(13, 16, 16), float32], Tensor[(14, 5, 3328), uint16], Tensor[(468), float64], Tensor[(256), int64], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32], Tensor[(14, 5, 3328), float64], Tensor[(14, 5, 3328), uint32], Tensor[(2, 112), uint32], Tensor[(8, 28), float64], Tensor[(14, 5, 3328), uint16]) {
  %227 = cast(meta[relay.Constant][12] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %228 = reshape(%227, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float32] */;
  %229 = @func_2438(%228) /* ty=(Tensor[(13, 16, 16), float32],) */;
  %230 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
  %231 = %230.3;
  %232 = cast(%231, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %233 = cast(meta[relay.Constant][12] /* ty=Tensor[(3328), float32] */, dtype="bool") /* ty=Tensor[(3328), bool] */;
  %234 = equal(%232, %233) /* ty=Tensor[(14, 5, 3328), bool] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(14, 5, 3328), float64] */;
  %236 = sinh(%235) /* ty=Tensor[(14, 5, 3328), float64] */;
  %237 = cast(%236, dtype="uint16") /* ty=Tensor[(14, 5, 3328), uint16] */;
  %238 = cast(%231, dtype="uint16") /* ty=Tensor[(14, 5, ?), uint16] */;
  %239 = @func_8438() /* ty=Tensor[(468), float64] */;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(468), float64] */;
  %241 = cast(6.02982f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %242 = reshape(%240, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %243 = reshape(%241, newshape=[]) /* ty=float32 */;
  %244 = @func_4973(%242, %243) /* ty=(Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) */;
  %245 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %246 = cast(%234, dtype="float64") /* ty=Tensor[(14, 5, 3328), float64] */;
  %247 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%236, dtype="float64") /* ty=Tensor[(14, 5, 3328), float64] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %250 = cast(%236, dtype="float32") /* ty=Tensor[(14, 5, 3328), float32] */;
  %251 = acosh(%250) /* ty=Tensor[(14, 5, 3328), float32] */;
  %252 = cast(%251, dtype="uint32") /* ty=Tensor[(14, 5, 3328), uint32] */;
  %253 = cast(6.02982f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
  %254 = cast(%var_10057, dtype="float64") /* ty=Tensor[(8, 28), float64] */;
  %255 = reshape(%254, newshape=[2, 112]) /* ty=Tensor[(2, 112), float64] */;
  %256 = @func_6663(%255) /* ty=(Tensor[(2, 112), uint32],) */;
  %257 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 5, 3328), float32] */, dtype="bool") /* ty=Tensor[(14, 5, 3328), bool] */;
  %258 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%251, dtype="bool") /* ty=Tensor[(14, 5, 3328), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = less_equal(%259, %260) /* ty=Tensor[(14, 5, 3328), bool] */;
  %262 = cast(%261, dtype="uint16") /* ty=Tensor[(14, 5, 3328), uint16] */;
  %263 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%251, dtype="uint16") /* ty=Tensor[(14, 5, 3328), uint16] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %266 = %229.0;
  %267 = logical_xor(%237, %238) /* ty=Tensor[(14, 5, 3328), uint16] */;
  %268 = %244.4;
  %269 = @func_6794() /* ty=Tensor[(9, 1, 4), float64] */;
  %270 = %245.0;
  %271 = floor_mod(%248, %249) /* ty=Tensor[(14, 5, 3328), float64] */;
  %272 = bitwise_or(%252, %253) /* ty=Tensor[(14, 5, 3328), uint32] */;
  %273 = %256.0;
  %274 = subtract(%264, %265) /* ty=Tensor[(14, 5, 3328), uint16] */;
  (%266, %267, %239, %268, %269, %270, %271, %272, %273, %var_10057, %274)
}

def @func_9403(%var_9368: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(16, 16), int64], Tensor[(14, 5, 468), bool]) {
  %275 = cast(%var_9368, dtype="float64") /* ty=Tensor[(468), float64] */;
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 16), int64] */, dtype="int64") /* ty=Tensor[(16, 16), int64] */;
  %277 = reshape(%275, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %278 = reshape(%276, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %279 = @func_5643(%277, %278) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %280 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %281 = cast(%var_9368, dtype="bool") /* ty=Tensor[(468), bool] */;
  %282 = cast(%280, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %283 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
  %284 = %279.3;
  %285 = not_equal(%281, %282) /* ty=Tensor[(14, 5, 468), bool] */;
  (%283, %284, meta[relay.Constant][14] /* ty=Tensor[(16, 16), int64] */, %285)
}

def @func_11059() -> Tensor[(14, 5, ?), float32] {
  @func_9288() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_4699() -> Tensor[(9, 1, 4), float64] {
  @func_3769() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_6944() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %286 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %287 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %288 = @func_6794() /* ty=Tensor[(9, 1, 4), float64] */;
  %289 = %286.0;
  %290 = %287.0;
  (%288, %289, %290)
}

def @func_7704() -> (Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) {
  %291 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %292 = %291.0;
  %293 = cast(%292, dtype="bool") /* ty=Tensor[(9, 1, 4), bool] */;
  %294 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 12, 4), float64] */, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
  %295 = cast(%292, dtype="uint16") /* ty=Tensor[(9, 1, 4), uint16] */;
  %296 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 12, 4), float64] */, dtype="uint16") /* ty=Tensor[(9, 12, 4), uint16] */;
  %297 = logical_or(%293, %294) /* ty=Tensor[(9, 12, 4), bool] */;
  %298 = minimum(%295, %296) /* ty=Tensor[(9, 12, 4), uint16] */;
  (%297, %298)
}

def @func_6501() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) {
  %299 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
  %300 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %301 = %300.0;
  %302 = cast(%301, dtype="uint8") /* ty=Tensor[(9, 1, 4), uint8] */;
  %303 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 2, 4), float64] */, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
  %304 = %299.0;
  %305 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
  %306 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  %307 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  %308 = bitwise_xor(%302, %303) /* ty=Tensor[(9, 2, 4), uint8] */;
  (%304, %305, %306, %307, %308)
}

def @func_10843() -> (Tensor[(14, 5, 14), float64], Tensor[(14, 5, ?), float64], Tensor[(14, 5, 3150), uint16]) {
  %309 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %312 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 5, 14), bool] */, dtype="float64") /* ty=Tensor[(14, 5, 14), float64] */;
  %313 = @func_7050() /* ty=Tensor[(3150), float64] */;
  %314 = cast(%313, dtype="uint16") /* ty=Tensor[(3150), uint16] */;
  %315 = cast(%310, dtype="uint16") /* ty=Tensor[(14, 5, ?), uint16] */;
  %316 = floor_divide(%311, %312) /* ty=Tensor[(14, 5, 14), float64] */;
  %317 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
  %318 = multiply(%314, %315) /* ty=Tensor[(14, 5, 3150), uint16] */;
  (%316, %317, %318)
}

def @func_9494(%var_9453: Tensor[(1050), bool], %var_9467: Tensor[(405), int32], %var_9470: Tensor[(4, 120), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, 1), int16], Tensor[(144), uint32], Tensor[(14, 5, ?), bool], Tensor[(405), int32], Tensor[(4, 120), bool]) {
  %319 = @func_8527() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) */;
  %320 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %321 = cast(%var_9453, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %322 = reshape(%321, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), bool] */;
  %323 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %324 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %325 = reshape(%323, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %326 = reshape(%324, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %327 = @func_1705(%325, %326) /* ty=(Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) */;
  %328 = cast(%var_9467, dtype="int32") /* ty=Tensor[(405), int32] */;
  %329 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 120), int8] */, dtype="int8") /* ty=Tensor[(4, 120), int8] */;
  %330 = reshape(%328, newshape=[405]) /* ty=Tensor[(405), int32] */;
  %331 = reshape(%329, newshape=[1, 480]) /* ty=Tensor[(1, 480), int8] */;
  %332 = @func_7237(%330, %331) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], float32, Tensor[(468), float64], Tensor[(4, 64), int64], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(3328), int64], Tensor[(1, 480), int8], Tensor[(3328), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) */;
  %333 = cast(%var_9470, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %334 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(4, 120), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %335 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 120), int8] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %337 = not_equal(%335, %336) /* ty=Tensor[(4, 120), bool] */;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %339 = log10(%338) /* ty=Tensor[(4, 120), float64] */;
  %340 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 120), int8] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(2), int32] */;
  %342 = cast(%339, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %344 = %319.0;
  %345 = %320.0;
  %346 = @func_8038(%322) /* ty=Tensor[(14, 5, 15), float64] */;
  %347 = %327.1;
  %348 = %332.5;
  %349 = greater_equal(%342, %343) /* ty=Tensor[(4, 120), bool] */;
  (%344, %345, %346, %var_9453, %347, meta[relay.Constant][18] /* ty=Tensor[(144), uint32] */, %348, %var_9467, %349)
}

def @func_9139(%var_9101: float32, %var_9102: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64], Tensor[(14, 5, ?), float32], float32, Tensor[(14, 5, ?), bool]) {
  %350 = @func_7084() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %352 = cast(%var_9101, dtype="float32") /* ty=float32 */;
  %353 = cast(%var_9102, dtype="int64") /* ty=Tensor[(256), int64] */;
  %354 = reshape(%351, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %355 = reshape(%352, newshape=[]) /* ty=float32 */;
  %356 = reshape(%353, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %357 = @func_866(%354, %355, %356) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %358 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %360 = cast(%var_9101, dtype="float32") /* ty=float32 */;
  %361 = reshape(%359, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %362 = reshape(%360, newshape=[]) /* ty=float32 */;
  %363 = @func_8230(%361, %362) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) */;
  %364 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %365 = %350.0;
  %366 = %357.5;
  %367 = %358.0;
  %368 = %363.3;
  %369 = %364.0;
  (%365, %366, meta[relay.Constant][20] /* ty=Tensor[(468), float64] */, %var_9101, %var_9102, %367, %368, %369)
}

def @func_7995() -> (Tensor[(15, 9, 3), int32],) {
  %370 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
  %371 = %370.0;
  (%371,)
}

def @func_5793(%var_5777: Tensor[(14, 5, 1), float32]) -> (Tensor[(14, 5, ?), int16],) {
  %372 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %373 = %372.0;
  %374 = cast(%var_5777, dtype="int16") /* ty=Tensor[(14, 5, 1), int16] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="int16") /* ty=Tensor[(14, 5, ?), int16] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %378 = subtract(%376, %377) /* ty=Tensor[(14, 5, ?), int16] */;
  (%378,)
}

def @func_4499(%var_4438: Tensor[(225, 14), uint32]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float64], Tensor[(15, 15, 14), uint32], Tensor[(225, 14), uint32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %379 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %380 = cast(%var_4438, dtype="uint32") /* ty=Tensor[(225, 14), uint32] */;
  %381 = reshape(%380, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
  %382 = @func_3944(%381) /* ty=(Tensor[(15, 15, 14), uint32],) */;
  %383 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %385 = %379.0;
  %386 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
  %387 = %382.0;
  %388 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  %389 = cosh(%384) /* ty=Tensor[(14, 5, ?), float32] */;
  (%385, %386, %387, %var_4438, %388, %389)
}

def @func_10970(%var_10965: Tensor[(8, 416), float32]) -> (Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(832, 4), float32], Tensor[(252), float64], Tensor[(8, 416), float32]) {
  %390 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %391 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
  %392 = @func_5804() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %394 = cast(%var_10965, dtype="float32") /* ty=Tensor[(8, 416), float32] */;
  %395 = reshape(%393, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), float64] */;
  %396 = reshape(%394, newshape=[832, 4]) /* ty=Tensor[(832, 4), float32] */;
  %397 = @func_6107(%395, %396) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) */;
  %398 = %390.0;
  %399 = @func_8438() /* ty=Tensor[(468), float64] */;
  %400 = %391.2;
  %401 = %392.0;
  %402 = %397.4;
  (%398, %399, %400, %401, %402, meta[relay.Constant][21] /* ty=Tensor[(252), float64] */, %var_10965)
}

def @func_7122() -> Tensor[(14, 5, ?), float32] {
  %403 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %403.2
}

def @func_9926() -> (Tensor[(14, 5, ?), float32],) {
  %404 = @func_5804() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %405 = %404.0;
  (%405,)
}

def @func_7376() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
  %406 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %407 = %406.0;
  %408 = @func_6377() /* ty=Tensor[(9, 1, 4), float64] */;
  (%407, %408)
}

def @func_12706() -> Tensor[(9, 1, 4), float64] {
  %409 = @func_11519() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) */;
  %409.0
}

def @func_7790() -> Tensor[(15, 9, 3), int32] {
  %410 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %410.1
}

def @func_7972() -> (Tensor[(468), float64], Tensor[(9, 1, 4), float64]) {
  %411 = @func_7376() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %412 = @func_5934() /* ty=Tensor[(468), float64] */;
  %413 = %411.0;
  (%412, %413)
}

def @func_4883() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) {
  %414 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %415 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %416 = %414.0;
  %417 = %415.0;
  (%416, %417)
}

def @func_10554() -> Tensor[(14, 5, 468), float64] {
  %418 = @func_5934() /* ty=Tensor[(468), float64] */;
  %419 = @func_9288() /* ty=Tensor[(14, 5, ?), float32] */;
  %420 = cast(%418, dtype="uint32") /* ty=Tensor[(468), uint32] */;
  %421 = cast(%419, dtype="uint32") /* ty=Tensor[(14, 5, ?), uint32] */;
  %422 = add(%420, %421) /* ty=Tensor[(14, 5, 468), uint32] */;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(14, 5, 468), float64] */;
  log2(%423) /* ty=Tensor[(14, 5, 468), float64] */
}

def @func_9064() -> Tensor[(14, 5, ?), float32] {
  %424 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %424.0
}

def @func_10297(%var_10283: Tensor[(16, 5, 4), int32]) -> (Tensor[(16, 5, 4), int32], Tensor[(16, 5, 4), float64]) {
  %425 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(16, 5, 4), int32] */;
  %426 = shape_of(%var_10283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_10283, dtype="int32") /* ty=Tensor[(16, 5, 4), int32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %429 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 5, 4), int32] */, dtype="float64") /* ty=Tensor[(16, 5, 4), float64] */;
  %430 = add(%427, %428) /* ty=Tensor[(16, 5, 4), int32] */;
  %431 = log2(%429) /* ty=Tensor[(16, 5, 4), float64] */;
  (%430, %431)
}

def @func_13255() -> Tensor[(9, 12, 4), uint16] {
  %432 = @func_13020() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 12, 4), uint16]) */;
  %432.1
}

def @func_13438() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
  %433 = @func_8625() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %434 = @func_6794() /* ty=Tensor[(9, 1, 4), float64] */;
  %435 = %433.0;
  (%434, %435)
}

def @func_11654() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(6, 78), float64]) {
  %436 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %437 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %438 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %439 = reshape(%438, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %440 = @func_9403(%439) /* ty=(Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(16, 16), int64], Tensor[(14, 5, 468), bool]) */;
  %441 = %436.0;
  %442 = %437.0;
  %443 = %440.1;
  (%441, %442, %443, meta[relay.Constant][23] /* ty=Tensor[(6, 78), float64] */)
}

def @func_9080(%var_9075: Tensor[(11, 1, 7), float32]) -> Tensor[(11, 1, 7), float32] {
  %444 = cast(%var_9075, dtype="float32") /* ty=Tensor[(11, 1, 7), float32] */;
  cos(%444) /* ty=Tensor[(11, 1, 7), float32] */
}

def @func_6107(%var_6063: Tensor[(9, 7, 4), float64], %var_6098: Tensor[(832, 4), float32]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) {
  %445 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %446 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %447 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %449 = cast(%var_6063, dtype="float32") /* ty=Tensor[(9, 7, 4), float32] */;
  %450 = floor_divide(%448, %449) /* ty=Tensor[(9, 7, 4), float32] */;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(9, 7, 4), float64] */;
  %452 = erf(%451) /* ty=Tensor[(9, 7, 4), float64] */;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(9, 7, 4), float64] */;
  %454 = exp(%453) /* ty=Tensor[(9, 7, 4), float64] */;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(9, 7, 4), float32] */;
  %456 = cast(%var_6098, dtype="float32") /* ty=Tensor[(832, 4), float32] */;
  %457 = reshape(%456, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float32] */;
  %458 = @func_2438(%457) /* ty=(Tensor[(13, 16, 16), float32],) */;
  %459 = %445.0;
  %460 = %446.0;
  %461 = sqrt(%455) /* ty=Tensor[(9, 7, 4), float32] */;
  %462 = %458.0;
  (%459, %460, %461, %462, %var_6098)
}

def @func_7003(%var_6991: float32, %var_6994: Tensor[(468), float64]) -> (Tensor[(15, 9, 3), int32], Tensor[(14, 5, ?), bool], Tensor[(6, 13, ?), bool], float32, float32, Tensor[(468), float64], Tensor[(256), int64]) {
  %463 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %464 = @func_5298() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
  %465 = cast(%var_6991, dtype="float32") /* ty=float32 */;
  %466 = reshape(%465, newshape=[]) /* ty=float32 */;
  %467 = @func_475(%466) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %468 = cast(%var_6994, dtype="float64") /* ty=Tensor[(468), float64] */;
  %469 = cast(meta[relay.Constant][24] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %470 = reshape(%468, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %471 = reshape(%469, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %472 = @func_5643(%470, %471) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %473 = %463.0;
  %474 = %464.0;
  %475 = %467.0;
  %476 = %472.4;
  (%473, %474, %475, %var_6991, %476, %var_6994, meta[relay.Constant][24] /* ty=Tensor[(256), int64] */)
}

def @func_10750(%var_10738: float32) -> Tensor[(13, 3, 7), float32] {
  %477 = cast(%var_10738, dtype="float32") /* ty=float32 */;
  %478 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
  divide(%477, %478) /* ty=Tensor[(13, 3, 7), float32] */
}

def @func_11836(%var_11831: Tensor[(1050), bool], %var_11832: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float32], Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(1050), bool], Tensor[(468), float64]) {
  %479 = @func_5804() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %480 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %481 = %480.0;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %483 = @func_7376() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %484 = cast(%var_11831, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %485 = cast(%var_11832, dtype="float64") /* ty=Tensor[(468), float64] */;
  %486 = reshape(%484, newshape=[1050]) /* ty=Tensor[(1050), bool] */;
  %487 = reshape(%485, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %488 = @func_8334(%486, %487) /* ty=(Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) */;
  %489 = @func_8492() /* ty=Tensor[(14, 5, ?), bool] */;
  %490 = %479.0;
  %491 = asin(%482) /* ty=Tensor[(9, 1, 4), float32] */;
  %492 = %483.1;
  %493 = %488.2;
  (%489, %490, %491, %492, %493, %var_11831, %var_11832)
}

def @func_13285() -> Tensor[(9, 1, 4), float64] {
  %494 = @func_11519() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) */;
  %494.0
}

def @main(%var_13738: float32) -> (Tensor[(468), float64], float32, Tensor[(468, 1), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64], Tensor[(2, 128), float64]) {
  %495 = @func_5023() /* ty=(Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) */;
  %496 = @func_7957() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
  %497 = %496.0;
  %498 = cast(meta[relay.Constant][26] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %499 = cast(%var_13738, dtype="float32") /* ty=float32 */;
  %500 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 128), int64] */, dtype="int64") /* ty=Tensor[(2, 128), int64] */;
  %501 = reshape(%498, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %502 = reshape(%499, newshape=[]) /* ty=float32 */;
  %503 = reshape(%500, newshape=[128, 2]) /* ty=Tensor[(128, 2), int64] */;
  %504 = @func_12017(%501, %502, %503) /* ty=(Tensor[(14, 5, ?), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(6, 13, ?), bool], float32, Tensor[(128, 2), int64]) */;
  %505 = %504.8;
  %506 = cast(%497, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %507 = cast(%505, dtype="bool") /* ty=bool */;
  %508 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 128), int64] */, dtype="float64") /* ty=Tensor[(2, 128), float64] */;
  %509 = %495.0;
  %510 = greater(%506, %507) /* ty=Tensor[(14, 5, ?), bool] */;
  %511 = @func_7388() /* ty=Tensor[(9, 1, 4), float64] */;
  %512 = sigmoid(%508) /* ty=Tensor[(2, 128), float64] */;
  (meta[relay.Constant][26] /* ty=Tensor[(468), float64] */, %var_13738, %509, %510, %511, %512)
}

def @func_4160(%var_4129: Tensor[(14, 5, 13), float32], %var_4136: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 13), bool], Tensor[(14, 5, 4), float64]) {
  %513 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %514 = %513.0;
  %515 = cast(%514, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %516 = cast(%var_4129, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
  %517 = cast(%514, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %518 = cast(%var_4136, dtype="bool") /* ty=Tensor[(14, 5, 4), bool] */;
  %519 = less_equal(%517, %518) /* ty=Tensor[(14, 5, 4), bool] */;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
  %521 = equal(%515, %516) /* ty=Tensor[(14, 5, 13), bool] */;
  %522 = sigmoid(%520) /* ty=Tensor[(14, 5, 4), float64] */;
  (%521, %522)
}

def @func_5298() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) {
  %523 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %524 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %525 = %523.0;
  %526 = %524.0;
  (%525, %526)
}

def @func_13316(%var_13306: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(128, 2), int64], Tensor[(1050), bool], Tensor[(468), float64], Tensor[(14, 5, ?), bool]) {
  %527 = cast(meta[relay.Constant][28] /* ty=Tensor[(1050), bool] */, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %528 = cast(%var_13306, dtype="float64") /* ty=Tensor[(468), float64] */;
  %529 = reshape(%527, newshape=[1050]) /* ty=Tensor[(1050), bool] */;
  %530 = reshape(%528, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %531 = @func_8334(%529, %530) /* ty=(Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) */;
  %532 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %533 = @func_9288() /* ty=Tensor[(14, 5, ?), float32] */;
  %534 = %531.5;
  %535 = %532.0;
  (%533, %534, meta[relay.Constant][28] /* ty=Tensor[(1050), bool] */, %var_13306, %535)
}

def @func_13084() -> (Tensor[(14, 5, ?), float32],) {
  %536 = @func_9288() /* ty=Tensor[(14, 5, ?), float32] */;
  (%536,)
}

def @func_578(%var_570: Tensor[(8, 16, 2), int64], %var_571: Tensor[(8, 16, 2), int64]) -> (Tensor[(8, 16, 2), int64],) {
  %537 = cast(%var_571, dtype="int64") /* ty=Tensor[(8, 16, 2), int64] */;
  %538 = shape_of(%var_570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%var_570, dtype="int64") /* ty=Tensor[(8, 16, 2), int64] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %541 = maximum(%539, %540) /* ty=Tensor[(8, 16, 2), int64] */;
  (%541,)
}

def @func_4348() -> (Tensor[(15, 9, 3), int32],) {
  %542 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %543 = %542.1;
  (%543,)
}

def @func_13127() -> (Tensor[(15, 9, 3), int32],) {
  %544 = @func_12327() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %545 = %544.0;
  (%545,)
}

def @func_4053() -> Tensor[(14, 5, ?), float32] {
  %546 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %546.0
}

def @func_4732() -> (Tensor[(14, 5, ?), float32],) {
  %547 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  (%547,)
}

def @func_11247(%var_11219: Tensor[(14, 5, 6), bool]) -> (Tensor[(9, 1, 4), float32], Tensor[(14, 5, 6), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64]) {
  %548 = @func_8052() /* ty=Tensor[(9, 1, 4), float64] */;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %550 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %553 = cast(%var_11219, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %554 = cast(meta[relay.Constant][29] /* ty=Tensor[(2700), float64] */, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %555 = reshape(%554, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
  %556 = @func_7078(%555) /* ty=(Tensor[(15, 15, 12), float64],) */;
  %557 = atanh(%549) /* ty=Tensor[(9, 1, 4), float32] */;
  %558 = floor_divide(%552, %553) /* ty=Tensor[(14, 5, 6), float64] */;
  %559 = %556.0;
  (%557, %558, %559, meta[relay.Constant][29] /* ty=Tensor[(2700), float64] */)
}

def @func_6663(%var_6649: Tensor[(2, 112), float64]) -> (Tensor[(2, 112), uint32],) {
  %560 = @func_5481() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) */;
  %561 = %560.2;
  %562 = cast(%var_6649, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
  %564 = cast(%561, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %566 = power(%564, %565) /* ty=Tensor[(2, 112), float64] */;
  %567 = cast(%var_6649, dtype="bool") /* ty=Tensor[(2, 112), bool] */;
  %568 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
  %569 = cast(%561, dtype="bool") /* ty=Tensor[(2, 112), bool] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %571 = equal(%569, %570) /* ty=Tensor[(2, 112), bool] */;
  %572 = cast(%571, dtype="uint32") /* ty=Tensor[(2, 112), uint32] */;
  %573 = shape_of(%566, dtype="int32") /* ty=Tensor[(2), int32] */;
  %574 = cast(%566, dtype="uint32") /* ty=Tensor[(2, 112), uint32] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %576 = maximum(%574, %575) /* ty=Tensor[(2, 112), uint32] */;
  (%576,)
}

def @func_5574(%var_5513: Tensor[(480), int8], %var_5529: Tensor[(3328), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) {
  %577 = cast(%var_5513, dtype="int8") /* ty=Tensor[(480), int8] */;
  %578 = cast(8.42134f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %579 = reshape(%577, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), int8] */;
  %580 = reshape(%578, newshape=[]) /* ty=float32 */;
  %581 = @func_1966(%579, %580) /* ty=(Tensor[(5, 16, 6), int8], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %582 = cast(%var_5529, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %583 = reshape(%582, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float32] */;
  %584 = @func_2438(%583) /* ty=(Tensor[(13, 16, 16), float32],) */;
  %585 = %584.0;
  %586 = cast(%585, dtype="int64") /* ty=Tensor[(13, 16, 16), int64] */;
  %587 = shape_of(%var_5529, dtype="int32") /* ty=Tensor[(1), int32] */;
  %588 = cast(%var_5529, dtype="int64") /* ty=Tensor[(3328), int64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?), int64] */;
  %590 = cast(%var_5529, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %591 = @func_4699() /* ty=Tensor[(9, 1, 4), float64] */;
  %592 = %581.2;
  %593 = bitwise_xor(%588, %589) /* ty=Tensor[(3328), int64] */;
  %594 = sigmoid(%590) /* ty=Tensor[(3328), float32] */;
  (%591, %592, %var_5513, 8.42134f /* ty=float32 */, %593, %594)
}

def @func_6377() -> Tensor[(9, 1, 4), float64] {
  @func_3769() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_1705(%var_1659: Tensor[(9, 8, 2), uint32], %var_1660: Tensor[(9, 8, 2), uint32]) -> (Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) {
  %595 = cast(%var_1660, dtype="bool") /* ty=Tensor[(9, 8, 2), bool] */;
  %596 = shape_of(%var_1659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%var_1659, dtype="bool") /* ty=Tensor[(9, 8, 2), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = cast(-7.75663f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %600 = reshape(%599, newshape=[]) /* ty=float32 */;
  %601 = @func_475(%600) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %602 = greater(%597, %598) /* ty=Tensor[(9, 8, 2), bool] */;
  %603 = %601.1;
  (%602, %603, -7.75663f /* ty=float32 */)
}

def @func_8662() -> Tensor[(14, 5, ?), float32] {
  %604 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
  %604.1
}

def @func_8492() -> Tensor[(14, 5, ?), bool] {
  %605 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %605.0
}

def @func_9288() -> Tensor[(14, 5, ?), float32] {
  @func_8662() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_7910(%var_7861: Tensor[(900, 3), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 12), float64], Tensor[(900, 3), bool], Tensor[(900, 3), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %606 = @func_5481() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) */;
  %607 = cast(meta[relay.Constant][30] /* ty=Tensor[(900, 3), float64] */, dtype="float64") /* ty=Tensor[(900, 3), float64] */;
  %608 = reshape(%607, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
  %609 = @func_7078(%608) /* ty=(Tensor[(15, 15, 12), float64],) */;
  %610 = cast(%var_7861, dtype="bool") /* ty=Tensor[(900, 3), bool] */;
  %611 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(900, 3), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %612 = cast(meta[relay.Constant][30] /* ty=Tensor[(900, 3), float64] */, dtype="bool") /* ty=Tensor[(900, 3), bool] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %614 = cast(meta[relay.Constant][30] /* ty=Tensor[(900, 3), float64] */, dtype="float32") /* ty=Tensor[(900, 3), float32] */;
  %615 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %616 = @func_7122() /* ty=Tensor[(14, 5, ?), float32] */;
  %617 = %606.0;
  %618 = %609.0;
  %619 = equal(%612, %613) /* ty=Tensor[(900, 3), bool] */;
  %620 = asin(%614) /* ty=Tensor[(900, 3), float32] */;
  %621 = %615.0;
  %622 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  (%616, %617, %618, %619, %620, %621, %622)
}

def @func_12346() -> (Tensor[(9, 12, 4), uint16],) {
  %623 = @func_7704() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) */;
  %624 = %623.1;
  (%624,)
}

def @func_9178() -> (Tensor[(14, 5, ?), float32],) {
  %625 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  (%625,)
}

def @func_3769() -> Tensor[(9, 1, 4), float64] {
  %626 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 1, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  sigmoid(%626) /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_9914(%var_9882: Tensor[(2, 128), int64]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(2, 128), float32]) {
  %627 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %628 = cast(%var_9882, dtype="int64") /* ty=Tensor[(2, 128), int64] */;
  %629 = reshape(%628, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %630 = @func_5240(%629) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %631 = cast(%var_9882, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
  %632 = %627.1;
  %633 = %630.0;
  %634 = log2(%631) /* ty=Tensor[(2, 128), float32] */;
  (%632, %633, %634)
}

def @func_8038(%var_8031: Tensor[(14, 5, 15), bool]) -> Tensor[(14, 5, 15), float64] {
  %635 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %637 = cast(%var_8031, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
  mod(%636, %637) /* ty=Tensor[(14, 5, 15), float64] */
}

def @func_4609() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) {
  %638 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %640 = cast(%638, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %641 = cast(meta[relay.Constant][32] /* ty=Tensor[(3150), uint32] */, dtype="uint32") /* ty=Tensor[(3150), uint32] */;
  %642 = reshape(%641, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
  %643 = @func_3944(%642) /* ty=(Tensor[(15, 15, 14), uint32],) */;
  %644 = cast(meta[relay.Constant][33] /* ty=Tensor[(405), int32] */, dtype="int32") /* ty=Tensor[(405), int32] */;
  %645 = reshape(%644, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), int32] */;
  %646 = @func_3163(%645) /* ty=(Tensor[(15, 9, 3), int32],) */;
  %647 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %648 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %649 = sigmoid(%639) /* ty=Tensor[(14, 5, ?), float32] */;
  %650 = atanh(%640) /* ty=Tensor[(14, 5, ?), float32] */;
  %651 = %643.0;
  %652 = %646.0;
  %653 = %647.0;
  %654 = %648.1;
  (%649, %650, %651, meta[relay.Constant][32] /* ty=Tensor[(3150), uint32] */, %652, meta[relay.Constant][33] /* ty=Tensor[(405), int32] */, %653, %654)
}

def @func_8178() -> Tensor[(14, 5, ?), float32] {
  %655 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
  %655.1
}

def @func_13646() -> (Tensor[(9, 1, 4), float64],) {
  %656 = @func_12706() /* ty=Tensor[(9, 1, 4), float64] */;
  (%656,)
}

def @func_7350() -> (Tensor[(9, 1, 4), float64],) {
  %657 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %658 = %657.0;
  (%658,)
}

def @func_7599() -> (Tensor[(3150), float64],) {
  %659 = @func_5404() /* ty=Tensor[(3150), float64] */;
  (%659,)
}

def @func_6584() -> (Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) {
  %660 = @func_4348() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %661 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %662 = cast(meta[relay.Constant][34] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %663 = cast(meta[relay.Constant][35] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %664 = reshape(%662, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), float32] */;
  %665 = reshape(%663, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
  %666 = @func_4160(%664, %665) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(14, 5, 4), float64]) */;
  %667 = cast(7.58484f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %668 = reshape(%667, newshape=[]) /* ty=float32 */;
  %669 = @func_475(%668) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %670 = %669.1;
  %671 = cast(%670, dtype="int64") /* ty=Tensor[(6, 13, 1), int64] */;
  %672 = cast(meta[relay.Constant][34] /* ty=Tensor[(910), float32] */, dtype="int64") /* ty=Tensor[(910), int64] */;
  %673 = %660.0;
  %674 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  %675 = %661.0;
  %676 = %666.1;
  %677 = minimum(%671, %672) /* ty=Tensor[(6, 13, 910), int64] */;
  (%673, %674, 7.58484f /* ty=float32 */, %675, %676, meta[relay.Constant][35] /* ty=Tensor[(280), float32] */, %677)
}

def @func_8625() -> (Tensor[(9, 1, 4), float64],) {
  %678 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%678,)
}

def @func_12556() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) {
  %679 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
  %680 = @func_9178() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %681 = %679.1;
  %682 = %680.0;
  (%681, %682)
}

def @func_8438() -> Tensor[(468), float64] {
  %683 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
  %683.0
}

def @func_10781() -> (Tensor[(468), float64],) {
  %684 = @func_9242() /* ty=(Tensor[(468), float64],) */;
  %685 = %684.0;
  (%685,)
}

def @func_12273() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %686 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
  %687 = @func_9428() /* ty=Tensor[(14, 5, ?), float32] */;
  %688 = %686.1;
  (%687, %688)
}

def @func_11043() -> (Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) {
  %689 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %690 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %691 = %689.0;
  %692 = %690.4;
  (%691, %692)
}

def @func_7270(%var_7266: Tensor[(1, 9, 16), float64]) -> Tensor[(1, 9, 16), float64] {
  %693 = cast(5.54565f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %694 = cast(%var_7266, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
  multiply(%693, %694) /* ty=Tensor[(1, 9, 16), float64] */
}

def @func_12039(%var_12027: Tensor[(9, 11, 15), int16], %var_12028: Tensor[(9, 11, 15), int16]) -> (Tensor[(9, 11, 15), int16], Tensor[(14, 5, ?), float32]) {
  %695 = cast(%var_12028, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %696 = shape_of(%var_12027, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%var_12027, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %699 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %700 = bitwise_xor(%697, %698) /* ty=Tensor[(9, 11, 15), int16] */;
  %701 = %699.0;
  (%700, %701)
}

def @func_12871() -> Tensor[(468, 1), float64] {
  %702 = @func_5023() /* ty=(Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) */;
  %702.0
}

def @func_5804() -> (Tensor[(14, 5, ?), float32],) {
  %703 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  (%703,)
}

def @func_5240(%var_5232: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  %704 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %705 = cast(meta[relay.Constant][36] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %706 = cast(-1.54655f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %707 = cast(%var_5232, dtype="int64") /* ty=Tensor[(256), int64] */;
  %708 = reshape(%705, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %709 = reshape(%706, newshape=[]) /* ty=float32 */;
  %710 = reshape(%707, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %711 = @func_866(%708, %709, %710) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %712 = %704.0;
  %713 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
  %714 = %711.3;
  (%712, %713, %714, meta[relay.Constant][36] /* ty=Tensor[(468), float64] */, -1.54655f /* ty=float32 */, %var_5232)
}

def @func_12963(%var_12911: Tensor[(14, 5, 9), bool], %var_12933: Tensor[(468), float64], %var_12934: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 8, 2), bool], Tensor[(144), uint32], Tensor[(14, 5, 9), uint32], Tensor[(9, 1, 4), float64], float32, Tensor[(468), float64], Tensor[(256), int64]) {
  %715 = cast(meta[relay.Constant][37] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %716 = cast(meta[relay.Constant][37] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %717 = reshape(%715, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %718 = reshape(%716, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %719 = @func_1705(%717, %718) /* ty=(Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) */;
  %720 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
  %721 = %720.0;
  %722 = cast(%721, dtype="uint32") /* ty=Tensor[(14, 5, ?), uint32] */;
  %723 = cast(%var_12911, dtype="uint32") /* ty=Tensor[(14, 5, 9), uint32] */;
  %724 = cast(%var_12933, dtype="float64") /* ty=Tensor[(468), float64] */;
  %725 = cast(%var_12934, dtype="int64") /* ty=Tensor[(256), int64] */;
  %726 = reshape(%724, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %727 = reshape(%725, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %728 = @func_5643(%726, %727) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %729 = @func_12509() /* ty=Tensor[(14, 5, ?), float32] */;
  %730 = %719.0;
  %731 = left_shift(%722, %723) /* ty=Tensor[(14, 5, 9), uint32] */;
  %732 = @func_12706() /* ty=Tensor[(9, 1, 4), float64] */;
  %733 = %728.4;
  (%729, %730, meta[relay.Constant][37] /* ty=Tensor[(144), uint32] */, %731, %732, %733, %var_12933, %var_12934)
}

def @func_13064() -> Tensor[(14, 5, ?), float32] {
  %734 = @func_11043() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %734.0
}

def @func_7488(%var_7478: Tensor[(70), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), int16], Tensor[(70), float32]) {
  %735 = cast(%var_7478, dtype="float32") /* ty=Tensor[(70), float32] */;
  %736 = reshape(%735, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), float32] */;
  %737 = @func_5793(%736) /* ty=(Tensor[(14, 5, ?), int16],) */;
  %738 = @func_7388() /* ty=Tensor[(9, 1, 4), float64] */;
  %739 = %737.0;
  (%738, %739, %var_7478)
}

def @func_8373(%var_8355: Tensor[(256), int64]) -> (Tensor[(15, 9, 3), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(12, 7, 8), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(14, 5, ?), float64]) {
  %740 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %741 = cast(meta[relay.Constant][38] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %742 = reshape(%741, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %743 = @func_6344(%742) /* ty=(Tensor[(7, 1, 5), float32],) */;
  %744 = cast(%var_8355, dtype="int64") /* ty=Tensor[(256), int64] */;
  %745 = reshape(%744, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %746 = @func_8022(%745) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %747 = cast(meta[relay.Constant][39] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %748 = cast(meta[relay.Constant][40] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %749 = reshape(%747, newshape=[12, 7, 1]) /* ty=Tensor[(12, 7, 1), bool] */;
  %750 = reshape(%748, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), bool] */;
  %751 = @func_5323(%749, %750) /* ty=(Tensor[(12, 7, 8), bool],) */;
  %752 = @func_7957() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
  %753 = %752.1;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %755 = %740.0;
  %756 = %743.0;
  %757 = %746.0;
  %758 = %751.0;
  %759 = atan(%754) /* ty=Tensor[(14, 5, ?), float64] */;
  (%755, %756, meta[relay.Constant][38] /* ty=Tensor[(35), float32] */, %757, %var_8355, %758, meta[relay.Constant][39] /* ty=Tensor[(84), bool] */, meta[relay.Constant][40] /* ty=Tensor[(672), bool] */, %759)
}

def @func_4906(%var_4889: Tensor[(8, 4, 7), float64]) -> Tensor[(8, 4, 7), float32] {
  %760 = cast(%var_4889, dtype="float64") /* ty=Tensor[(8, 4, 7), float64] */;
  %761 = sigmoid(%760) /* ty=Tensor[(8, 4, 7), float64] */;
  %762 = cast(%var_4889, dtype="float32") /* ty=Tensor[(8, 4, 7), float32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float32") /* ty=Tensor[(8, 4, 7), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%764, %765) /* ty=Tensor[(8, 4, 7), float32] */
}

def @func_9757() -> (Tensor[(14, 5, ?), float32],) {
  %766 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %767 = %766.0;
  (%767,)
}

def @func_8022(%var_8007: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
  %768 = cast(%var_8007, dtype="int64") /* ty=Tensor[(256), int64] */;
  %769 = cast(%var_8007, dtype="int64") /* ty=Tensor[(256), int64] */;
  %770 = reshape(%768, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %771 = reshape(%769, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %772 = @func_578(%770, %771) /* ty=(Tensor[(8, 16, 2), int64],) */;
  %773 = @func_4699() /* ty=Tensor[(9, 1, 4), float64] */;
  %774 = %772.0;
  (%773, %774, %var_8007)
}

def @func_4075() -> Tensor[(14, 5, ?), float64] {
  %775 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  rsqrt(%777) /* ty=Tensor[(14, 5, ?), float64] */
}

def @func_11128() -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) {
  %778 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %779 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %780 = @func_4348() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %781 = %778.0;
  %782 = %779.0;
  %783 = %780.0;
  (%781, %782, %783)
}

def @func_8855(%var_8850: float32) -> (Tensor[(15, 9, 3), int32], Tensor[(3150), float64], float32, float32, Tensor[(468), float64]) {
  %784 = cast(%var_8850, dtype="float32") /* ty=float32 */;
  %785 = cast(meta[relay.Constant][41] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %786 = reshape(%784, newshape=[]) /* ty=float32 */;
  %787 = reshape(%785, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %788 = @func_7003(%786, %787) /* ty=(Tensor[(15, 9, 3), int32], Tensor[(14, 5, ?), bool], Tensor[(6, 13, ?), bool], float32, float32, Tensor[(468), float64], Tensor[(256), int64]) */;
  %789 = @func_7790() /* ty=Tensor[(15, 9, 3), int32] */;
  %790 = @func_5404() /* ty=Tensor[(3150), float64] */;
  %791 = %788.3;
  (%789, %790, %791, %var_8850, meta[relay.Constant][41] /* ty=Tensor[(468), float64] */)
}

def @func_5023() -> (Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) {
  %792 = cast(meta[relay.Constant][42] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %793 = cast(-9.72182f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %794 = reshape(%792, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %795 = reshape(%793, newshape=[]) /* ty=float32 */;
  %796 = @func_4973(%794, %795) /* ty=(Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) */;
  %797 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %799 = asinh(%798) /* ty=Tensor[(9, 1, 4), float64] */;
  %800 = cast(%799, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %801 = %796.2;
  %802 = erf(%800) /* ty=Tensor[(9, 1, 4), float64] */;
  (%801, meta[relay.Constant][42] /* ty=Tensor[(468), float64] */, -9.72182f /* ty=float32 */, %802)
}

def @func_13616(%var_13614: Tensor[(1, 256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), int16], Tensor[(1, 256), int64]) {
  %803 = cast(%var_13614, dtype="int64") /* ty=Tensor[(1, 256), int64] */;
  %804 = reshape(%803, newshape=[8, 32]) /* ty=Tensor[(8, 32), int64] */;
  %805 = @func_13353(%804) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(1, 256), int64], Tensor[(8, 32), int64], Tensor[(14, 5, ?), int16]) */;
  %806 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %807 = %805.4;
  (%806, %807, %var_13614)
}

def @func_8527() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) {
  %808 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
  %809 = %808.0;
  %810 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
  (%809, %810)
}

def @func_7050() -> Tensor[(3150), float64] {
  @func_5404() /* ty=Tensor[(3150), float64] */
}

def @func_3726() -> Tensor[(14, 5, ?), float32] {
  %811 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %812 = %811.0;
  %813 = cast(%812, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %814 = log10(%813) /* ty=Tensor[(14, 5, ?), float32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %819 = logical_and(%817, %818) /* ty=Tensor[(14, 5, ?), bool] */;
  %820 = cast(%814, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%822, %823) /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_12102() -> Tensor[(14, 5, ?), bool] {
  %824 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %824.0
}

def @func_12017(%var_11965: Tensor[(468), float64], %var_12014: float32, %var_12015: Tensor[(128, 2), int64]) -> (Tensor[(14, 5, ?), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(6, 13, ?), bool], float32, Tensor[(128, 2), int64]) {
  %825 = @func_6243() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %826 = %825.0;
  %827 = cast(%826, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %828 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %829 = @func_9178() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %830 = cast(%var_11965, dtype="float64") /* ty=Tensor[(468), float64] */;
  %831 = reshape(%830, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %832 = @func_11699(%831) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(468), float64], Tensor[(468), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) */;
  %833 = @func_10378() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(8, 4, 7), float32], Tensor[(224), float64], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64]) */;
  %834 = @func_9242() /* ty=(Tensor[(468), float64],) */;
  %835 = cast(%var_11965, dtype="float64") /* ty=Tensor[(468), float64] */;
  %836 = cast(%var_12014, dtype="float32") /* ty=float32 */;
  %837 = cast(%var_12015, dtype="int64") /* ty=Tensor[(128, 2), int64] */;
  %838 = reshape(%835, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %839 = reshape(%836, newshape=[]) /* ty=float32 */;
  %840 = reshape(%837, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %841 = @func_866(%838, %839, %840) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %842 = cos(%827) /* ty=Tensor[(14, 5, ?), float64] */;
  %843 = %828.0;
  %844 = %829.0;
  %845 = %832.6;
  %846 = %833.4;
  %847 = %834.0;
  %848 = %841.2;
  (%842, %843, %844, %845, %var_11965, %846, %847, %848, %var_12014, %var_12015)
}

def @func_12509() -> Tensor[(14, 5, ?), float32] {
  @func_4053() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_5729() -> (Tensor[(9, 1, 4), float64],) {
  %849 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%849,)
}

def @func_11095() -> Tensor[(9, 1, 4), float64] {
  %850 = @func_7376() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %850.1
}

def @func_3675() -> (Tensor[(14, 5, ?), bool],) {
  %851 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %852 = %851.0;
  (%852,)
}

def @func_6708(%var_6704: Tensor[(1, 256), int64]) -> (Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) {
  %853 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %854 = %853.0;
  %855 = cast(%854, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %856 = @func_5481() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) */;
  %857 = cast(%var_6704, dtype="int64") /* ty=Tensor[(1, 256), int64] */;
  %858 = cast(%var_6704, dtype="int64") /* ty=Tensor[(1, 256), int64] */;
  %859 = reshape(%857, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %860 = reshape(%858, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %861 = @func_578(%859, %860) /* ty=(Tensor[(8, 16, 2), int64],) */;
  %862 = cos(%855) /* ty=Tensor[(9, 1, 4), float32] */;
  %863 = %856.2;
  %864 = %861.0;
  (%862, %863, %864, %var_6704)
}

def @func_9677() -> Tensor[(9, 1, 4), float64] {
  %865 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %865.0
}

def @func_12757() -> (Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32]) {
  %866 = @func_9242() /* ty=(Tensor[(468), float64],) */;
  %867 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %868 = cast(meta[relay.Constant][43] /* ty=Tensor[(3150), uint32] */, dtype="uint32") /* ty=Tensor[(3150), uint32] */;
  %869 = reshape(%868, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
  %870 = @func_3944(%869) /* ty=(Tensor[(15, 15, 14), uint32],) */;
  %871 = %866.0;
  %872 = %867.2;
  %873 = %870.0;
  (%871, %872, %873, meta[relay.Constant][43] /* ty=Tensor[(3150), uint32] */)
}

def @func_5355() -> (Tensor[(14, 5, ?), float32],) {
  %874 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
  %875 = %874.1;
  (%875,)
}

def @func_12117() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %876 = @func_11904() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %877 = %876.0;
  %878 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  (%877, %878)
}

def @func_9428() -> Tensor[(14, 5, ?), float32] {
  %879 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %879.0
}

def @func_11519() -> (Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) {
  %880 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %881 = %880.0;
  %882 = @func_5404() /* ty=Tensor[(3150), float64] */;
  (%881, %882)
}

def @func_9717() -> (Tensor[(468), float64],) {
  %883 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
  %884 = %883.0;
  (%884,)
}

def @func_13368() -> (Tensor[(9, 1, 4), float64],) {
  %885 = @func_6377() /* ty=Tensor[(9, 1, 4), float64] */;
  (%885,)
}

def @func_3608() -> (Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) {
  %886 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 5, 1), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 1), bool] */;
  %887 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(14, 5, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 5, 1), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 1), bool] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %890 = cast(meta[relay.Constant][46] /* ty=Tensor[(405), int32] */, dtype="int32") /* ty=Tensor[(405), int32] */;
  %891 = reshape(%890, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), int32] */;
  %892 = @func_3163(%891) /* ty=(Tensor[(15, 9, 3), int32],) */;
  %893 = greater_equal(%888, %889) /* ty=Tensor[(14, 5, ?), bool] */;
  %894 = %892.0;
  (%893, %894, meta[relay.Constant][46] /* ty=Tensor[(405), int32] */)
}

def @func_3862() -> (Tensor[(14, 5, ?), float32],) {
  %895 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  (%895,)
}

def @func_12236(%var_12227: Tensor[(480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(480), int8], Tensor[(3328), float32], Tensor[(405), int32]) {
  %896 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
  %897 = cast(meta[relay.Constant][47] /* ty=Tensor[(3150), uint32] */, dtype="uint32") /* ty=Tensor[(3150), uint32] */;
  %898 = reshape(%897, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
  %899 = @func_3944(%898) /* ty=(Tensor[(15, 15, 14), uint32],) */;
  %900 = @func_11128() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) */;
  %901 = cast(%var_12227, dtype="int8") /* ty=Tensor[(480), int8] */;
  %902 = cast(meta[relay.Constant][48] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %903 = reshape(%901, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %904 = reshape(%902, newshape=[3328]) /* ty=Tensor[(3328), float32] */;
  %905 = @func_5574(%903, %904) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) */;
  %906 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %907 = %896.1;
  %908 = @func_9677() /* ty=Tensor[(9, 1, 4), float64] */;
  %909 = %899.0;
  %910 = %900.0;
  %911 = %905.0;
  %912 = %906.2;
  (%907, %908, %909, meta[relay.Constant][47] /* ty=Tensor[(3150), uint32] */, %910, %911, %var_12227, meta[relay.Constant][48] /* ty=Tensor[(3328), float32] */, %912)
}

def @func_6627(%var_6623: Tensor[(10, 5, 10), int8]) -> Tensor[(10, 5, 10), int8] {
  %913 = cast(%var_6623, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
  %914 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(meta[relay.Constant][49] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  maximum(%915, %916) /* ty=Tensor[(10, 5, 10), int8] */
}

def @func_5884() -> Tensor[(14, 5, ?), bool] {
  %917 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %917.0
}

def @func_6612(%var_6604: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(468), float64], Tensor[(468), float64], Tensor[(256), int64]) {
  %918 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %919 = cast(%var_6604, dtype="float64") /* ty=Tensor[(468), float64] */;
  %920 = cast(meta[relay.Constant][50] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %921 = reshape(%919, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %922 = reshape(%920, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %923 = @func_5643(%921, %922) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %924 = %918.0;
  %925 = %923.3;
  (%924, %925, %var_6604, meta[relay.Constant][50] /* ty=Tensor[(256), int64] */)
}

def @func_5404() -> Tensor[(3150), float64] {
  %926 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
  %927 = %926.3;
  %928 = cast(%927, dtype="float64") /* ty=Tensor[(3150), float64] */;
  acos(%928) /* ty=Tensor[(3150), float64] */
}

def @func_8960(%var_8940: Tensor[(252), float64], %var_8947: Tensor[(3328), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(252), float64], Tensor[(3328), int16], Tensor[(14, 5, ?), float32]) {
  %929 = cast(%var_8940, dtype="float64") /* ty=Tensor[(252), float64] */;
  %930 = cast(meta[relay.Constant][51] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %931 = reshape(%929, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), float64] */;
  %932 = reshape(%930, newshape=[832, 4]) /* ty=Tensor[(832, 4), float32] */;
  %933 = @func_6107(%931, %932) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) */;
  %934 = cast(meta[relay.Constant][51] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %935 = asin(%934) /* ty=Tensor[(3328), float32] */;
  %936 = cast(%var_8947, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(1), int32] */;
  %938 = cast(%935, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?), int16] */;
  %940 = @func_7388() /* ty=Tensor[(9, 1, 4), float64] */;
  %941 = %933.0;
  %942 = right_shift(%938, %939) /* ty=Tensor[(3328), int16] */;
  %943 = @func_7122() /* ty=Tensor[(14, 5, ?), float32] */;
  (%940, %941, %var_8940, %942, %943)
}

def @func_5481() -> (Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) {
  %944 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 112), float64] */, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %945 = reshape(%944, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), float64] */;
  %946 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %947 = @func_4906(%945) /* ty=Tensor[(8, 4, 7), float32] */;
  (%946, %947, meta[relay.Constant][52] /* ty=Tensor[(2, 112), float64] */)
}

def @func_11289() -> (Tensor[(9, 1, 4), float64],) {
  %948 = @func_9677() /* ty=Tensor[(9, 1, 4), float64] */;
  (%948,)
}

def @func_5934() -> Tensor[(468), float64] {
  %949 = @func_5023() /* ty=(Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) */;
  %949.1
}

def @func_4242() -> (Tensor[(14, 5, ?), bool],) {
  %950 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %951 = %950.0;
  (%951,)
}

def @func_3944(%var_3934: Tensor[(15, 15, 14), uint32]) -> (Tensor[(15, 15, 14), uint32],) {
  %952 = cast(meta[relay.Constant][53] /* ty=Tensor[(15, 1, 14), uint32] */, dtype="uint32") /* ty=Tensor[(15, 1, 14), uint32] */;
  %953 = cast(%var_3934, dtype="uint32") /* ty=Tensor[(15, 15, 14), uint32] */;
  %954 = subtract(%952, %953) /* ty=Tensor[(15, 15, 14), uint32] */;
  (%954,)
}

def @func_12657(%var_12650: Tensor[(14, 5, 12), float32]) -> (Tensor[(14, 5, 12), bool],) {
  %955 = @func_11904() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %956 = %955.0;
  %957 = cast(%956, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %958 = cast(%var_12650, dtype="bool") /* ty=Tensor[(14, 5, 12), bool] */;
  %959 = greater(%957, %958) /* ty=Tensor[(14, 5, 12), bool] */;
  (%959,)
}

def @func_2438(%var_2431: Tensor[(13, 16, 16), float32]) -> (Tensor[(13, 16, 16), float32],) {
  %960 = cast(%var_2431, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
  %961 = asinh(%960) /* ty=Tensor[(13, 16, 16), float32] */;
  (%961,)
}

def @func_9242() -> (Tensor[(468), float64],) {
  %962 = @func_8438() /* ty=Tensor[(468), float64] */;
  (%962,)
}

def @func_5126() -> (Tensor[(14, 5, ?), bool],) {
  %963 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %964 = %963.0;
  (%964,)
}

def @func_6040(%var_6024: Tensor[(480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(3328), int64], Tensor[(480), int8], Tensor[(3328), float32]) {
  %965 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %966 = cast(%var_6024, dtype="int8") /* ty=Tensor[(480), int8] */;
  %967 = cast(meta[relay.Constant][54] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %968 = reshape(%966, newshape=[480]) /* ty=Tensor[(480), int8] */;
  %969 = reshape(%967, newshape=[3328]) /* ty=Tensor[(3328), float32] */;
  %970 = @func_5574(%968, %969) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) */;
  %971 = %965.0;
  %972 = %970.4;
  (%971, %972, %var_6024, meta[relay.Constant][54] /* ty=Tensor[(3328), float32] */)
}

def @func_10243(%var_10229: Tensor[(3, 13, 6), uint16], %var_10230: Tensor[(3, 13, 6), uint16]) -> (Tensor[(3, 13, 6), uint16], Tensor[(9, 1, 4), float64]) {
  %973 = cast(%var_10230, dtype="uint16") /* ty=Tensor[(3, 13, 6), uint16] */;
  %974 = shape_of(%var_10229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %975 = cast(%var_10229, dtype="uint16") /* ty=Tensor[(3, 13, 6), uint16] */;
  %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %977 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %978 = left_shift(%975, %976) /* ty=Tensor[(3, 13, 6), uint16] */;
  %979 = %977.0;
  (%978, %979)
}

def @func_6770() -> (Tensor[(14, 5, ?), bool],) {
  %980 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %981 = %980.0;
  (%981,)
}

def @func_12815() -> Tensor[(9, 1, 4), float64] {
  %982 = @func_11289() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %982.0
}

def @func_13020() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 12, 4), uint16]) {
  %983 = @func_11654() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(6, 78), float64]) */;
  %984 = @func_7704() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) */;
  %985 = %983.0;
  %986 = %984.1;
  (%985, %986)
}

def @func_6850() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
  %987 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %988 = %987.0;
  %989 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%988, %989)
}

def @func_6243() -> (Tensor[(14, 5, ?), bool],) {
  %990 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %991 = %990.0;
  (%991,)
}

def @func_5714() -> (Tensor[(9, 1, 4), float64],) {
  %992 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%992,)
}

def @func_6344(%var_6339: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, 1, 5), float32],) {
  %993 = cast(%var_6339, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  %994 = erf(%993) /* ty=Tensor[(7, 1, 5), float32] */;
  (%994,)
}

def @func_12479() -> (Tensor[(15, 9, 3), int32],) {
  %995 = @func_4348() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %996 = %995.0;
  (%996,)
}

def @func_8888(%var_8861: uint16, %var_8877: Tensor[(14, 5, 3), bool]) -> (Tensor[(7, 2, 11), uint16], Tensor[(14, 5, 3), int8]) {
  %997 = cast(%var_8861, dtype="uint16") /* ty=uint16 */;
  %998 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 2, 11), uint16] */, dtype="uint16") /* ty=Tensor[(7, 2, 11), uint16] */;
  %999 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %1000 = %999.0;
  %1001 = cast(%1000, dtype="int8") /* ty=Tensor[(14, 5, ?), int8] */;
  %1002 = cast(%var_8877, dtype="int8") /* ty=Tensor[(14, 5, 3), int8] */;
  %1003 = left_shift(%997, %998) /* ty=Tensor[(7, 2, 11), uint16] */;
  %1004 = logical_xor(%1001, %1002) /* ty=Tensor[(14, 5, 3), int8] */;
  (%1003, %1004)
}

def @func_8334(%var_8294: Tensor[(1050), bool], %var_8305: Tensor[(468), float64]) -> (Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) {
  %1005 = cast(%var_8294, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %1006 = reshape(%1005, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), bool] */;
  %1007 = cast(%var_8305, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1008 = cast(-0.032114f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1009 = cast(meta[relay.Constant][56] /* ty=Tensor[(128, 2), int64] */, dtype="int64") /* ty=Tensor[(128, 2), int64] */;
  %1010 = reshape(%1007, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %1011 = reshape(%1008, newshape=[]) /* ty=float32 */;
  %1012 = reshape(%1009, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %1013 = @func_866(%1010, %1011, %1012) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %1014 = @func_7704() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) */;
  %1015 = %1014.0;
  %1016 = cast(%1015, dtype="float64") /* ty=Tensor[(9, 12, 4), float64] */;
  %1017 = erf(%1016) /* ty=Tensor[(9, 12, 4), float64] */;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
  %1019 = cast(%1017, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
  %1020 = cast(%1017, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
  %1021 = @func_8038(%1006) /* ty=Tensor[(14, 5, 15), float64] */;
  %1022 = %1013.1;
  %1023 = @func_5934() /* ty=Tensor[(468), float64] */;
  %1024 = atanh(%1018) /* ty=Tensor[(9, 12, 4), float32] */;
  %1025 = cosh(%1019) /* ty=Tensor[(9, 12, 4), float32] */;
  %1026 = @func_7122() /* ty=Tensor[(14, 5, ?), float32] */;
  %1027 = log2(%1020) /* ty=Tensor[(9, 12, 4), float32] */;
  (%1021, %var_8294, %1022, %var_8305, -0.032114f /* ty=float32 */, meta[relay.Constant][56] /* ty=Tensor[(128, 2), int64] */, %1023, %1024, %1025, %1026, %1027)
}

def @func_4627() -> (Tensor[(15, 9, 3), int32],) {
  %1028 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
  %1029 = %1028.4;
  (%1029,)
}

def @func_5200() -> (Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) {
  %1030 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
  %1031 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %1032 = %1030.1;
  %1033 = %1031.0;
  (%1032, %1033)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_11250(%var_11248: Tensor[(14, 5, 6), bool]) -> (Tensor[(9, 1, 4), float32], Tensor[(14, 5, 6), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64]) {
  @func_11247(%var_11248) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(14, 5, 6), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64]) */
}

def @func_9914(%var_9882: Tensor[(2, 128), int64]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(2, 128), float32]) {
  %0 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %1 = cast(%var_9882, dtype="int64") /* ty=Tensor[(2, 128), int64] */;
  %2 = reshape(%1, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %3 = @func_5240(%2) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %4 = cast(%var_9882, dtype="float32") /* ty=Tensor[(2, 128), float32] */;
  %5 = %0.1;
  %6 = %3.0;
  %7 = log2(%4) /* ty=Tensor[(2, 128), float32] */;
  (%5, %6, %7)
}

def @func_6945() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %13 = fn () -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
    %8 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %9 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %10 = @func_6794() /* ty=Tensor[(9, 1, 4), float64] */;
    %11 = %8.0;
    %12 = %9.0;
    (%10, %11, %12)
  };
  %13() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */
}

def @func_10246(%var_10244: Tensor[(3, 13, 6), uint16], %var_10245: Tensor[(3, 13, 6), uint16]) -> (Tensor[(3, 13, 6), uint16], Tensor[(9, 1, 4), float64]) {
  %21 = fn (%var_10229: Tensor[(3, 13, 6), uint16], %var_10230: Tensor[(3, 13, 6), uint16]) -> (Tensor[(3, 13, 6), uint16], Tensor[(9, 1, 4), float64]) {
    %14 = cast(%var_10230, dtype="uint16") /* ty=Tensor[(3, 13, 6), uint16] */;
    %15 = shape_of(%var_10229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%var_10229, dtype="uint16") /* ty=Tensor[(3, 13, 6), uint16] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %18 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %19 = left_shift(%16, %17) /* ty=Tensor[(3, 13, 6), uint16] */;
    %20 = %18.0;
    (%19, %20)
  };
  %21(%var_10244, %var_10245) /* ty=(Tensor[(3, 13, 6), uint16], Tensor[(9, 1, 4), float64]) */
}

def @func_3727() -> Tensor[(14, 5, ?), float32] {
  %35 = fn () -> Tensor[(14, 5, ?), float32] {
    %22 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %23 = %22.0;
    %24 = cast(%23, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
    %25 = log10(%24) /* ty=Tensor[(14, 5, ?), float32] */;
    %26 = cast(%23, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %30 = logical_and(%28, %29) /* ty=Tensor[(14, 5, ?), bool] */;
    %31 = cast(%25, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
    %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%30, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%33, %34) /* ty=Tensor[(14, 5, ?), float32] */
  };
  %35() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_13316(%var_13306: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(128, 2), int64], Tensor[(1050), bool], Tensor[(468), float64], Tensor[(14, 5, ?), bool]) {
  %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(1050), bool] */, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %37 = cast(%var_13306, dtype="float64") /* ty=Tensor[(468), float64] */;
  %38 = reshape(%36, newshape=[1050]) /* ty=Tensor[(1050), bool] */;
  %39 = reshape(%37, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %40 = @func_8334(%38, %39) /* ty=(Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) */;
  %41 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %42 = @func_9288() /* ty=Tensor[(14, 5, ?), float32] */;
  %43 = %40.5;
  %44 = %41.0;
  (%42, %43, meta[relay.Constant][0] /* ty=Tensor[(1050), bool] */, %var_13306, %44)
}

def @func_5323(%var_5316: Tensor[(12, 7, 1), bool], %var_5317: Tensor[(12, 7, 8), bool]) -> (Tensor[(12, 7, 8), bool],) {
  %45 = cast(%var_5316, dtype="bool") /* ty=Tensor[(12, 7, 1), bool] */;
  %46 = cast(%var_5317, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  %47 = logical_and(%45, %46) /* ty=Tensor[(12, 7, 8), bool] */;
  (%47,)
}

def @func_9045() -> Tensor[(9, 1, 4), float64] {
  @func_9043() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_5795(%var_5794: Tensor[(14, 5, 1), float32]) -> (Tensor[(14, 5, ?), int16],) {
  %55 = fn (%var_5777: Tensor[(14, 5, 1), float32]) -> (Tensor[(14, 5, ?), int16],) {
    %48 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
    %49 = %48.0;
    %50 = cast(%var_5777, dtype="int16") /* ty=Tensor[(14, 5, 1), int16] */;
    %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(%49, dtype="int16") /* ty=Tensor[(14, 5, ?), int16] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %54 = subtract(%52, %53) /* ty=Tensor[(14, 5, ?), int16] */;
    (%54,)
  };
  %55(%var_5794) /* ty=(Tensor[(14, 5, ?), int16],) */
}

def @func_8022(%var_8007: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
  %56 = cast(%var_8007, dtype="int64") /* ty=Tensor[(256), int64] */;
  %57 = cast(%var_8007, dtype="int64") /* ty=Tensor[(256), int64] */;
  %58 = reshape(%56, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %59 = reshape(%57, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %60 = @func_578(%58, %59) /* ty=(Tensor[(8, 16, 2), int64],) */;
  %61 = @func_4699() /* ty=Tensor[(9, 1, 4), float64] */;
  %62 = %60.0;
  (%61, %62, %var_8007)
}

def @func_9243() -> (Tensor[(468), float64],) {
  %64 = fn () -> (Tensor[(468), float64],) {
    %63 = @func_8438() /* ty=Tensor[(468), float64] */;
    (%63,)
  };
  %64() /* ty=(Tensor[(468), float64],) */
}

def @func_7601() -> (Tensor[(3150), float64],) {
  @func_7599() /* ty=(Tensor[(3150), float64],) */
}

def @func_870(%var_867: Tensor[(13, 4, 9), float64], %var_868: float32, %var_869: Tensor[(256), int64]) -> (Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
  %88 = fn (%var_825: Tensor[(13, 4, 9), float64], %var_832: float32, %var_861: Tensor[(256), int64]) -> (Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
    %65 = cast(%var_825, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
    %66 = cast(%var_832, dtype="float32") /* ty=float32 */;
    %67 = reshape(%66, newshape=[]) /* ty=float32 */;
    %68 = @func_475(%67) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
    %69 = cast(%var_832, dtype="float32") /* ty=float32 */;
    %70 = reshape(%69, newshape=[]) /* ty=float32 */;
    %71 = @func_475(%70) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
    %72 = cast(%var_832, dtype="float32") /* ty=float32 */;
    %73 = reshape(%72, newshape=[]) /* ty=float32 */;
    %74 = @func_475(%73) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
    %75 = %74.0;
    %76 = cast(%75, dtype="float64") /* ty=Tensor[(6, 13, ?), float64] */;
    %77 = cast(%var_832, dtype="float64") /* ty=float64 */;
    %78 = cast(%var_861, dtype="int64") /* ty=Tensor[(256), int64] */;
    %79 = cast(%var_861, dtype="int64") /* ty=Tensor[(256), int64] */;
    %80 = reshape(%78, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
    %81 = reshape(%79, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
    %82 = @func_578(%80, %81) /* ty=(Tensor[(8, 16, 2), int64],) */;
    %83 = atanh(%65) /* ty=Tensor[(13, 4, 9), float64] */;
    %84 = %68.0;
    %85 = %71.0;
    %86 = floor_mod(%76, %77) /* ty=Tensor[(6, 13, ?), float64] */;
    %87 = %82.0;
    (%83, %84, %85, %86, %87, %var_861)
  };
  %88(%var_867, %var_868, %var_869) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */
}

def @func_5200() -> (Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) {
  %89 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
  %90 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %91 = %89.1;
  %92 = %90.0;
  (%91, %92)
}

def @func_5483() -> (Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) {
  @func_5481() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) */
}

def @func_3166(%var_3164: Tensor[(15, 9, 3), int32]) -> (Tensor[(15, 9, 3), int32],) {
  @func_3163(%var_3164) /* ty=(Tensor[(15, 9, 3), int32],) */
}

def @func_4244() -> (Tensor[(14, 5, ?), bool],) {
  @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */
}

def @func_6107(%var_6063: Tensor[(9, 7, 4), float64], %var_6098: Tensor[(832, 4), float32]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) {
  %93 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %94 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %95 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %97 = cast(%var_6063, dtype="float32") /* ty=Tensor[(9, 7, 4), float32] */;
  %98 = floor_divide(%96, %97) /* ty=Tensor[(9, 7, 4), float32] */;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(9, 7, 4), float64] */;
  %100 = erf(%99) /* ty=Tensor[(9, 7, 4), float64] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(9, 7, 4), float64] */;
  %102 = exp(%101) /* ty=Tensor[(9, 7, 4), float64] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(9, 7, 4), float32] */;
  %104 = cast(%var_6098, dtype="float32") /* ty=Tensor[(832, 4), float32] */;
  %105 = reshape(%104, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float32] */;
  %106 = @func_2438(%105) /* ty=(Tensor[(13, 16, 16), float32],) */;
  %107 = %93.0;
  %108 = %94.0;
  %109 = sqrt(%103) /* ty=Tensor[(9, 7, 4), float32] */;
  %110 = %106.0;
  (%107, %108, %109, %110, %var_6098)
}

def @func_9406(%var_9404: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(16, 16), int64], Tensor[(14, 5, 468), bool]) {
  @func_9403(%var_9404) /* ty=(Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(16, 16), int64], Tensor[(14, 5, 468), bool]) */
}

def @func_11905() -> (Tensor[(14, 5, ?), float32],) {
  %112 = fn () -> (Tensor[(14, 5, ?), float32],) {
    %111 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    (%111,)
  };
  %112() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_4076() -> Tensor[(14, 5, ?), float64] {
  %116 = fn () -> Tensor[(14, 5, ?), float64] {
    %113 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %114 = %113.0;
    %115 = cast(%114, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
    rsqrt(%115) /* ty=Tensor[(14, 5, ?), float64] */
  };
  %116() /* ty=Tensor[(14, 5, ?), float64] */
}

def @func_5715() -> (Tensor[(9, 1, 4), float64],) {
  %118 = fn () -> (Tensor[(9, 1, 4), float64],) {
    %117 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
    (%117,)
  };
  %118() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_6502() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) {
  %129 = fn () -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) {
    %119 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
    %120 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %121 = %120.0;
    %122 = cast(%121, dtype="uint8") /* ty=Tensor[(9, 1, 4), uint8] */;
    %123 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 2, 4), float64] */, dtype="uint8") /* ty=Tensor[(9, 2, 4), uint8] */;
    %124 = %119.0;
    %125 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
    %126 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    %127 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    %128 = bitwise_xor(%122, %123) /* ty=Tensor[(9, 2, 4), uint8] */;
    (%124, %125, %126, %127, %128)
  };
  %129() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */
}

def @func_4163(%var_4161: Tensor[(14, 5, 13), float32], %var_4162: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 13), bool], Tensor[(14, 5, 4), float64]) {
  %140 = fn (%var_4129: Tensor[(14, 5, 13), float32], %var_4136: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 13), bool], Tensor[(14, 5, 4), float64]) {
    %130 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %131 = %130.0;
    %132 = cast(%131, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
    %133 = cast(%var_4129, dtype="bool") /* ty=Tensor[(14, 5, 13), bool] */;
    %134 = cast(%131, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
    %135 = cast(%var_4136, dtype="bool") /* ty=Tensor[(14, 5, 4), bool] */;
    %136 = less_equal(%134, %135) /* ty=Tensor[(14, 5, 4), bool] */;
    %137 = cast(%136, dtype="float64") /* ty=Tensor[(14, 5, 4), float64] */;
    %138 = equal(%132, %133) /* ty=Tensor[(14, 5, 13), bool] */;
    %139 = sigmoid(%137) /* ty=Tensor[(14, 5, 4), float64] */;
    (%138, %139)
  };
  %140(%var_4161, %var_4162) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(14, 5, 4), float64]) */
}

def @func_5934() -> Tensor[(468), float64] {
  %141 = @func_5023() /* ty=(Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) */;
  %141.1
}

def @func_6111(%var_6109: Tensor[(9, 7, 4), float64], %var_6110: Tensor[(832, 4), float32]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) {
  @func_6107(%var_6109, %var_6110) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) */
}

def @func_8625() -> (Tensor[(9, 1, 4), float64],) {
  %142 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%142,)
}

def @func_4733() -> (Tensor[(14, 5, ?), float32],) {
  %144 = fn () -> (Tensor[(14, 5, ?), float32],) {
    %143 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    (%143,)
  };
  %144() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_7389() -> Tensor[(9, 1, 4), float64] {
  %146 = fn () -> Tensor[(9, 1, 4), float64] {
    %145 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
    %145.0
  };
  %146() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_7080(%var_7079: Tensor[(15, 15, 12), float64]) -> (Tensor[(15, 15, 12), float64],) {
  %149 = fn (%var_7055: Tensor[(15, 15, 12), float64]) -> (Tensor[(15, 15, 12), float64],) {
    %147 = cast(%var_7055, dtype="float64") /* ty=Tensor[(15, 15, 12), float64] */;
    %148 = tan(%147) /* ty=Tensor[(15, 15, 12), float64] */;
    (%148,)
  };
  %149(%var_7079) /* ty=(Tensor[(15, 15, 12), float64],) */
}

def @func_9719() -> (Tensor[(468), float64],) {
  @func_9717() /* ty=(Tensor[(468), float64],) */
}

def @func_4242() -> (Tensor[(14, 5, ?), bool],) {
  %150 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %151 = %150.0;
  (%151,)
}

def @func_7003(%var_6991: float32, %var_6994: Tensor[(468), float64]) -> (Tensor[(15, 9, 3), int32], Tensor[(14, 5, ?), bool], Tensor[(6, 13, ?), bool], float32, float32, Tensor[(468), float64], Tensor[(256), int64]) {
  %152 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %153 = @func_5298() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
  %154 = cast(%var_6991, dtype="float32") /* ty=float32 */;
  %155 = reshape(%154, newshape=[]) /* ty=float32 */;
  %156 = @func_475(%155) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %157 = cast(%var_6994, dtype="float64") /* ty=Tensor[(468), float64] */;
  %158 = cast(meta[relay.Constant][2] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %159 = reshape(%157, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %160 = reshape(%158, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %161 = @func_5643(%159, %160) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %162 = %152.0;
  %163 = %153.0;
  %164 = %156.0;
  %165 = %161.4;
  (%162, %163, %164, %var_6991, %165, %var_6994, meta[relay.Constant][2] /* ty=Tensor[(256), int64] */)
}

def @func_11656() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(6, 78), float64]) {
  @func_11654() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(6, 78), float64]) */
}

def @func_4883() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) {
  %166 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %167 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %168 = %166.0;
  %169 = %167.0;
  (%168, %169)
}

def @func_10843() -> (Tensor[(14, 5, 14), float64], Tensor[(14, 5, ?), float64], Tensor[(14, 5, 3150), uint16]) {
  %170 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %171 = %170.0;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %173 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 5, 14), bool] */, dtype="float64") /* ty=Tensor[(14, 5, 14), float64] */;
  %174 = @func_7050() /* ty=Tensor[(3150), float64] */;
  %175 = cast(%174, dtype="uint16") /* ty=Tensor[(3150), uint16] */;
  %176 = cast(%171, dtype="uint16") /* ty=Tensor[(14, 5, ?), uint16] */;
  %177 = floor_divide(%172, %173) /* ty=Tensor[(14, 5, 14), float64] */;
  %178 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
  %179 = multiply(%175, %176) /* ty=Tensor[(14, 5, 3150), uint16] */;
  (%177, %178, %179)
}

def @func_3676() -> (Tensor[(14, 5, ?), bool],) {
  %182 = fn () -> (Tensor[(14, 5, ?), bool],) {
    %180 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
    %181 = %180.0;
    (%181,)
  };
  %182() /* ty=(Tensor[(14, 5, ?), bool],) */
}

def @func_7270(%var_7266: Tensor[(1, 9, 16), float64]) -> Tensor[(1, 9, 16), float64] {
  %183 = cast(5.54565f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %184 = cast(%var_7266, dtype="float64") /* ty=Tensor[(1, 9, 16), float64] */;
  multiply(%183, %184) /* ty=Tensor[(1, 9, 16), float64] */
}

def @func_6281() -> (Tensor[(9, 1, 4), float64],) {
  @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_9290() -> Tensor[(14, 5, ?), float32] {
  @func_9288() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_13353(%var_13345: Tensor[(8, 32), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(1, 256), int64], Tensor[(8, 32), int64], Tensor[(14, 5, ?), int16]) {
  %185 = @func_11128() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) */;
  %186 = @func_8527() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) */;
  %187 = cast(%var_13345, dtype="int64") /* ty=Tensor[(8, 32), int64] */;
  %188 = reshape(%187, newshape=[1, 256]) /* ty=Tensor[(1, 256), int64] */;
  %189 = @func_6708(%188) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) */;
  %190 = %185.0;
  %191 = cast(%190, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %192 = reshape(%191, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), float32] */;
  %193 = @func_5793(%192) /* ty=(Tensor[(14, 5, ?), int16],) */;
  %194 = %186.1;
  %195 = %189.3;
  %196 = %193.0;
  (%190, %194, %195, %var_13345, %196)
}

def @func_9403(%var_9368: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(16, 16), int64], Tensor[(14, 5, 468), bool]) {
  %197 = cast(%var_9368, dtype="float64") /* ty=Tensor[(468), float64] */;
  %198 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 16), int64] */, dtype="int64") /* ty=Tensor[(16, 16), int64] */;
  %199 = reshape(%197, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %200 = reshape(%198, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %201 = @func_5643(%199, %200) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %202 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %203 = cast(%var_9368, dtype="bool") /* ty=Tensor[(468), bool] */;
  %204 = cast(%202, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %205 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
  %206 = %201.3;
  %207 = not_equal(%203, %204) /* ty=Tensor[(14, 5, 468), bool] */;
  (%205, %206, meta[relay.Constant][4] /* ty=Tensor[(16, 16), int64] */, %207)
}

def @func_11520() -> (Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) {
  %211 = fn () -> (Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) {
    %208 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %209 = %208.0;
    %210 = @func_5404() /* ty=Tensor[(3150), float64] */;
    (%209, %210)
  };
  %211() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) */
}

def @func_9610() -> (Tensor[(14, 5, ?), float64], Tensor[(9, 1, 4), float64], Tensor[(3150), float64], float32, Tensor[(256), int64]) {
  @func_9608() /* ty=(Tensor[(14, 5, ?), float64], Tensor[(9, 1, 4), float64], Tensor[(3150), float64], float32, Tensor[(256), int64]) */
}

def @func_12102() -> Tensor[(14, 5, ?), bool] {
  %212 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %212.0
}

def @func_4055() -> Tensor[(14, 5, ?), float32] {
  @func_4053() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_11291() -> (Tensor[(9, 1, 4), float64],) {
  @func_11289() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_12509() -> Tensor[(14, 5, ?), float32] {
  @func_4053() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_5730() -> (Tensor[(9, 1, 4), float64],) {
  %214 = fn () -> (Tensor[(9, 1, 4), float64],) {
    %213 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
    (%213,)
  };
  %214() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_9759() -> (Tensor[(14, 5, ?), float32],) {
  @func_9757() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_8337(%var_8335: Tensor[(1050), bool], %var_8336: Tensor[(468), float64]) -> (Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) {
  %238 = fn (%var_8294: Tensor[(1050), bool], %var_8305: Tensor[(468), float64]) -> (Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) {
    %215 = cast(%var_8294, dtype="bool") /* ty=Tensor[(1050), bool] */;
    %216 = reshape(%215, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), bool] */;
    %217 = cast(%var_8305, dtype="float64") /* ty=Tensor[(468), float64] */;
    %218 = cast(-0.032114f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %219 = cast(meta[relay.Constant][5] /* ty=Tensor[(128, 2), int64] */, dtype="int64") /* ty=Tensor[(128, 2), int64] */;
    %220 = reshape(%217, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %221 = reshape(%218, newshape=[]) /* ty=float32 */;
    %222 = reshape(%219, newshape=[256]) /* ty=Tensor[(256), int64] */;
    %223 = @func_866(%220, %221, %222) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
    %224 = @func_7704() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) */;
    %225 = %224.0;
    %226 = cast(%225, dtype="float64") /* ty=Tensor[(9, 12, 4), float64] */;
    %227 = erf(%226) /* ty=Tensor[(9, 12, 4), float64] */;
    %228 = cast(%227, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
    %229 = cast(%227, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
    %230 = cast(%227, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
    %231 = @func_8038(%216) /* ty=Tensor[(14, 5, 15), float64] */;
    %232 = %223.1;
    %233 = @func_5934() /* ty=Tensor[(468), float64] */;
    %234 = atanh(%228) /* ty=Tensor[(9, 12, 4), float32] */;
    %235 = cosh(%229) /* ty=Tensor[(9, 12, 4), float32] */;
    %236 = @func_7122() /* ty=Tensor[(14, 5, ?), float32] */;
    %237 = log2(%230) /* ty=Tensor[(9, 12, 4), float32] */;
    (%231, %var_8294, %232, %var_8305, -0.032114f /* ty=float32 */, meta[relay.Constant][5] /* ty=Tensor[(128, 2), int64] */, %233, %234, %235, %236, %237)
  };
  %238(%var_8335, %var_8336) /* ty=(Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) */
}

def @func_12968(%var_12965: Tensor[(14, 5, 9), bool], %var_12966: Tensor[(468), float64], %var_12967: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 8, 2), bool], Tensor[(144), uint32], Tensor[(14, 5, 9), uint32], Tensor[(9, 1, 4), float64], float32, Tensor[(468), float64], Tensor[(256), int64]) {
  @func_12963(%var_12965, %var_12966, %var_12967) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 8, 2), bool], Tensor[(144), uint32], Tensor[(14, 5, 9), uint32], Tensor[(9, 1, 4), float64], float32, Tensor[(468), float64], Tensor[(256), int64]) */
}

def @func_5646(%var_5644: Tensor[(468), float64], %var_5645: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  %250 = fn (%var_5637: Tensor[(468), float64], %var_5639: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) {
    %239 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
    %240 = cast(%var_5637, dtype="float64") /* ty=Tensor[(468), float64] */;
    %241 = cast(3.75046f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %242 = cast(%var_5639, dtype="int64") /* ty=Tensor[(256), int64] */;
    %243 = reshape(%240, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %244 = reshape(%241, newshape=[]) /* ty=float32 */;
    %245 = reshape(%242, newshape=[256]) /* ty=Tensor[(256), int64] */;
    %246 = @func_866(%243, %244, %245) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
    %247 = %239.0;
    %248 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    %249 = %246.5;
    (%247, %248, %249, %var_5637, 3.75046f /* ty=float32 */, %var_5639)
  };
  %250(%var_5644, %var_5645) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */
}

def @func_4628() -> (Tensor[(15, 9, 3), int32],) {
  %253 = fn () -> (Tensor[(15, 9, 3), int32],) {
    %251 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
    %252 = %251.4;
    (%252,)
  };
  %253() /* ty=(Tensor[(15, 9, 3), int32],) */
}

def @func_7273(%var_7271: Tensor[(1, 9, 16), float64]) -> Tensor[(1, 9, 16), float64] {
  @func_7270(%var_7271) /* ty=Tensor[(1, 9, 16), float64] */
}

def @func_6042(%var_6041: Tensor[(480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(3328), int64], Tensor[(480), int8], Tensor[(3328), float32]) {
  %262 = fn (%var_6024: Tensor[(480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(3328), int64], Tensor[(480), int8], Tensor[(3328), float32]) {
    %254 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %255 = cast(%var_6024, dtype="int8") /* ty=Tensor[(480), int8] */;
    %256 = cast(meta[relay.Constant][6] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
    %257 = reshape(%255, newshape=[480]) /* ty=Tensor[(480), int8] */;
    %258 = reshape(%256, newshape=[3328]) /* ty=Tensor[(3328), float32] */;
    %259 = @func_5574(%257, %258) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) */;
    %260 = %254.0;
    %261 = %259.4;
    (%260, %261, %var_6024, meta[relay.Constant][6] /* ty=Tensor[(3328), float32] */)
  };
  %262(%var_6041) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(3328), int64], Tensor[(480), int8], Tensor[(3328), float32]) */
}

def @func_12681(%var_12676: Tensor[(9, 2, 4), uint8]) -> Tensor[(9, 2, 4), bool] {
  %263 = @func_11043() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %264 = %263.1;
  %265 = cast(%var_12676, dtype="bool") /* ty=Tensor[(9, 2, 4), bool] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="bool") /* ty=Tensor[(9, 2, 4), bool] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%267, %268) /* ty=Tensor[(9, 2, 4), bool] */
}

def @func_4909(%var_4907: Tensor[(8, 4, 7), float64]) -> Tensor[(8, 4, 7), float32] {
  @func_4906(%var_4907) /* ty=Tensor[(8, 4, 7), float32] */
}

def @func_13086() -> (Tensor[(14, 5, ?), float32],) {
  @func_13084() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_6666(%var_6664: Tensor[(2, 112), float64]) -> (Tensor[(2, 112), uint32],) {
  @func_6663(%var_6664) /* ty=(Tensor[(2, 112), uint32],) */
}

def @func_6347(%var_6345: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, 1, 5), float32],) {
  @func_6344(%var_6345) /* ty=(Tensor[(7, 1, 5), float32],) */
}

def @func_11347(%var_11345: Tensor[(11, 14, 1), int32], %var_11346: Tensor[(11, 14, 3), int32]) -> (Tensor[(11, 14, 3), int32],) {
  %272 = fn (%var_11302: Tensor[(11, 14, 1), int32], %var_11303: Tensor[(11, 14, 3), int32]) -> (Tensor[(11, 14, 3), int32],) {
    %269 = cast(%var_11302, dtype="int32") /* ty=Tensor[(11, 14, 1), int32] */;
    %270 = cast(%var_11303, dtype="int32") /* ty=Tensor[(11, 14, 3), int32] */;
    %271 = bitwise_xor(%269, %270) /* ty=Tensor[(11, 14, 3), int32] */;
    (%271,)
  };
  %272(%var_11345, %var_11346) /* ty=(Tensor[(11, 14, 3), int32],) */
}

def @func_11289() -> (Tensor[(9, 1, 4), float64],) {
  %273 = @func_9677() /* ty=Tensor[(9, 1, 4), float64] */;
  (%273,)
}

def @func_3163(%var_3155: Tensor[(15, 9, 3), int32]) -> (Tensor[(15, 9, 3), int32],) {
  %274 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 9, 3), int32] */, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %275 = shape_of(%var_3155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_3155, dtype="int32") /* ty=Tensor[(15, 9, 3), int32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %278 = multiply(%276, %277) /* ty=Tensor[(15, 9, 3), int32] */;
  (%278,)
}

def @func_8492() -> Tensor[(14, 5, ?), bool] {
  %279 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %279.0
}

def @func_8494() -> Tensor[(14, 5, ?), bool] {
  @func_8492() /* ty=Tensor[(14, 5, ?), bool] */
}

def @func_6243() -> (Tensor[(14, 5, ?), bool],) {
  %280 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %281 = %280.0;
  (%281,)
}

def @func_8857(%var_8856: float32) -> (Tensor[(15, 9, 3), int32], Tensor[(3150), float64], float32, float32, Tensor[(468), float64]) {
  %290 = fn (%var_8850: float32) -> (Tensor[(15, 9, 3), int32], Tensor[(3150), float64], float32, float32, Tensor[(468), float64]) {
    %282 = cast(%var_8850, dtype="float32") /* ty=float32 */;
    %283 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %284 = reshape(%282, newshape=[]) /* ty=float32 */;
    %285 = reshape(%283, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %286 = @func_7003(%284, %285) /* ty=(Tensor[(15, 9, 3), int32], Tensor[(14, 5, ?), bool], Tensor[(6, 13, ?), bool], float32, float32, Tensor[(468), float64], Tensor[(256), int64]) */;
    %287 = @func_7790() /* ty=Tensor[(15, 9, 3), int32] */;
    %288 = @func_5404() /* ty=Tensor[(3150), float64] */;
    %289 = %286.3;
    (%287, %288, %289, %var_8850, meta[relay.Constant][8] /* ty=Tensor[(468), float64] */)
  };
  %290(%var_8856) /* ty=(Tensor[(15, 9, 3), int32], Tensor[(3150), float64], float32, float32, Tensor[(468), float64]) */
}

def @func_10782() -> (Tensor[(468), float64],) {
  %293 = fn () -> (Tensor[(468), float64],) {
    %291 = @func_9242() /* ty=(Tensor[(468), float64],) */;
    %292 = %291.0;
    (%292,)
  };
  %293() /* ty=(Tensor[(468), float64],) */
}

def @func_578(%var_570: Tensor[(8, 16, 2), int64], %var_571: Tensor[(8, 16, 2), int64]) -> (Tensor[(8, 16, 2), int64],) {
  %294 = cast(%var_571, dtype="int64") /* ty=Tensor[(8, 16, 2), int64] */;
  %295 = shape_of(%var_570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%var_570, dtype="int64") /* ty=Tensor[(8, 16, 2), int64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %298 = maximum(%296, %297) /* ty=Tensor[(8, 16, 2), int64] */;
  (%298,)
}

def @func_12238(%var_12237: Tensor[(480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(480), int8], Tensor[(3328), float32], Tensor[(405), int32]) {
  %316 = fn (%var_12227: Tensor[(480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(480), int8], Tensor[(3328), float32], Tensor[(405), int32]) {
    %299 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
    %300 = cast(meta[relay.Constant][9] /* ty=Tensor[(3150), uint32] */, dtype="uint32") /* ty=Tensor[(3150), uint32] */;
    %301 = reshape(%300, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
    %302 = @func_3944(%301) /* ty=(Tensor[(15, 15, 14), uint32],) */;
    %303 = @func_11128() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) */;
    %304 = cast(%var_12227, dtype="int8") /* ty=Tensor[(480), int8] */;
    %305 = cast(meta[relay.Constant][10] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
    %306 = reshape(%304, newshape=[480]) /* ty=Tensor[(480), int8] */;
    %307 = reshape(%305, newshape=[3328]) /* ty=Tensor[(3328), float32] */;
    %308 = @func_5574(%306, %307) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) */;
    %309 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
    %310 = %299.1;
    %311 = @func_9677() /* ty=Tensor[(9, 1, 4), float64] */;
    %312 = %302.0;
    %313 = %303.0;
    %314 = %308.0;
    %315 = %309.2;
    (%310, %311, %312, meta[relay.Constant][9] /* ty=Tensor[(3150), uint32] */, %313, %314, %var_12227, meta[relay.Constant][10] /* ty=Tensor[(3328), float32] */, %315)
  };
  %316(%var_12237) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(480), int8], Tensor[(3328), float32], Tensor[(405), int32]) */
}

def @func_12757() -> (Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32]) {
  %317 = @func_9242() /* ty=(Tensor[(468), float64],) */;
  %318 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %319 = cast(meta[relay.Constant][11] /* ty=Tensor[(3150), uint32] */, dtype="uint32") /* ty=Tensor[(3150), uint32] */;
  %320 = reshape(%319, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
  %321 = @func_3944(%320) /* ty=(Tensor[(15, 15, 14), uint32],) */;
  %322 = %317.0;
  %323 = %318.2;
  %324 = %321.0;
  (%322, %323, %324, meta[relay.Constant][11] /* ty=Tensor[(3150), uint32] */)
}

def @func_6852() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
  @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */
}

def @func_5243(%var_5241: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  @func_5240(%var_5241) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) */
}

def @func_8179() -> Tensor[(14, 5, ?), float32] {
  %326 = fn () -> Tensor[(14, 5, ?), float32] {
    %325 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
    %325.1
  };
  %326() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_10556() -> Tensor[(14, 5, 468), float64] {
  @func_10554() /* ty=Tensor[(14, 5, 468), float64] */
}

def @func_13439() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
  %330 = fn () -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
    %327 = @func_8625() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %328 = @func_6794() /* ty=Tensor[(9, 1, 4), float64] */;
    %329 = %327.0;
    (%328, %329)
  };
  %330() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */
}

def @func_12558() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) {
  @func_12556() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) */
}

def @func_13356(%var_13354: Tensor[(8, 32), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(1, 256), int64], Tensor[(8, 32), int64], Tensor[(14, 5, ?), int16]) {
  @func_13353(%var_13354) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(1, 256), int64], Tensor[(8, 32), int64], Tensor[(14, 5, ?), int16]) */
}

def @func_12806(%var_12805: Tensor[(7, 9, 3), float32]) -> Tensor[(7, 9, 3), float32] {
  %332 = fn (%var_12784: Tensor[(7, 9, 3), float32]) -> Tensor[(7, 9, 3), float32] {
    %331 = cast(%var_12784, dtype="float32") /* ty=Tensor[(7, 9, 3), float32] */;
    sigmoid(%331) /* ty=Tensor[(7, 9, 3), float32] */
  };
  %332(%var_12805) /* ty=Tensor[(7, 9, 3), float32] */
}

def @func_4609() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) {
  %333 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %335 = cast(%333, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
  %336 = cast(meta[relay.Constant][12] /* ty=Tensor[(3150), uint32] */, dtype="uint32") /* ty=Tensor[(3150), uint32] */;
  %337 = reshape(%336, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
  %338 = @func_3944(%337) /* ty=(Tensor[(15, 15, 14), uint32],) */;
  %339 = cast(meta[relay.Constant][13] /* ty=Tensor[(405), int32] */, dtype="int32") /* ty=Tensor[(405), int32] */;
  %340 = reshape(%339, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), int32] */;
  %341 = @func_3163(%340) /* ty=(Tensor[(15, 9, 3), int32],) */;
  %342 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %343 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %344 = sigmoid(%334) /* ty=Tensor[(14, 5, ?), float32] */;
  %345 = atanh(%335) /* ty=Tensor[(14, 5, ?), float32] */;
  %346 = %338.0;
  %347 = %341.0;
  %348 = %342.0;
  %349 = %343.1;
  (%344, %345, %346, meta[relay.Constant][12] /* ty=Tensor[(3150), uint32] */, %347, meta[relay.Constant][13] /* ty=Tensor[(405), int32] */, %348, %349)
}

def @func_7599() -> (Tensor[(3150), float64],) {
  %350 = @func_5404() /* ty=Tensor[(3150), float64] */;
  (%350,)
}

def @func_5023() -> (Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) {
  %351 = cast(meta[relay.Constant][14] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %352 = cast(-9.72182f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %353 = reshape(%351, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %354 = reshape(%352, newshape=[]) /* ty=float32 */;
  %355 = @func_4973(%353, %354) /* ty=(Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) */;
  %356 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %358 = asinh(%357) /* ty=Tensor[(9, 1, 4), float64] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %360 = %355.2;
  %361 = erf(%359) /* ty=Tensor[(9, 1, 4), float64] */;
  (%360, meta[relay.Constant][14] /* ty=Tensor[(468), float64] */, -9.72182f /* ty=float32 */, %361)
}

def @func_6629(%var_6628: Tensor[(10, 5, 10), int8]) -> Tensor[(10, 5, 10), int8] {
  %366 = fn (%var_6623: Tensor[(10, 5, 10), int8]) -> Tensor[(10, 5, 10), int8] {
    %362 = cast(%var_6623, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
    %363 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 5, 10), int8] */, dtype="int8") /* ty=Tensor[(10, 5, 10), int8] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    maximum(%364, %365) /* ty=Tensor[(10, 5, 10), int8] */
  };
  %366(%var_6628) /* ty=Tensor[(10, 5, 10), int8] */
}

def @func_6708(%var_6704: Tensor[(1, 256), int64]) -> (Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) {
  %367 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %368 = %367.0;
  %369 = cast(%368, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %370 = @func_5481() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) */;
  %371 = cast(%var_6704, dtype="int64") /* ty=Tensor[(1, 256), int64] */;
  %372 = cast(%var_6704, dtype="int64") /* ty=Tensor[(1, 256), int64] */;
  %373 = reshape(%371, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %374 = reshape(%372, newshape=[8, 16, 2]) /* ty=Tensor[(8, 16, 2), int64] */;
  %375 = @func_578(%373, %374) /* ty=(Tensor[(8, 16, 2), int64],) */;
  %376 = cos(%369) /* ty=Tensor[(9, 1, 4), float32] */;
  %377 = %370.2;
  %378 = %375.0;
  (%376, %377, %378, %var_6704)
}

def @func_10378() -> (Tensor[(9, 1, 4), float64], Tensor[(8, 4, 7), float32], Tensor[(224), float64], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64]) {
  %379 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %380 = cast(meta[relay.Constant][16] /* ty=Tensor[(224), float64] */, dtype="float64") /* ty=Tensor[(224), float64] */;
  %381 = reshape(%380, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), float64] */;
  %382 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %383 = %379.0;
  %384 = @func_4906(%381) /* ty=Tensor[(8, 4, 7), float32] */;
  %385 = @func_8178() /* ty=Tensor[(14, 5, ?), float32] */;
  %386 = %382.0;
  (%383, %384, meta[relay.Constant][16] /* ty=Tensor[(224), float64] */, %385, %386)
}

def @func_9142(%var_9140: float32, %var_9141: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64], Tensor[(14, 5, ?), float32], float32, Tensor[(14, 5, ?), bool]) {
  %407 = fn (%var_9101: float32, %var_9102: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64], Tensor[(14, 5, ?), float32], float32, Tensor[(14, 5, ?), bool]) {
    %387 = @func_7084() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %388 = cast(meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %389 = cast(%var_9101, dtype="float32") /* ty=float32 */;
    %390 = cast(%var_9102, dtype="int64") /* ty=Tensor[(256), int64] */;
    %391 = reshape(%388, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %392 = reshape(%389, newshape=[]) /* ty=float32 */;
    %393 = reshape(%390, newshape=[256]) /* ty=Tensor[(256), int64] */;
    %394 = @func_866(%391, %392, %393) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
    %395 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %396 = cast(meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %397 = cast(%var_9101, dtype="float32") /* ty=float32 */;
    %398 = reshape(%396, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
    %399 = reshape(%397, newshape=[]) /* ty=float32 */;
    %400 = @func_8230(%398, %399) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) */;
    %401 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %402 = %387.0;
    %403 = %394.5;
    %404 = %395.0;
    %405 = %400.3;
    %406 = %401.0;
    (%402, %403, meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, %var_9101, %var_9102, %404, %405, %406)
  };
  %407(%var_9140, %var_9141) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64], Tensor[(14, 5, ?), float32], float32, Tensor[(14, 5, ?), bool]) */
}

def @func_12118() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %411 = fn () -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
    %408 = @func_11904() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %409 = %408.0;
    %410 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    (%409, %410)
  };
  %411() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */
}

def @func_10845() -> (Tensor[(14, 5, 14), float64], Tensor[(14, 5, ?), float64], Tensor[(14, 5, 3150), uint16]) {
  @func_10843() /* ty=(Tensor[(14, 5, 14), float64], Tensor[(14, 5, ?), float64], Tensor[(14, 5, 3150), uint16]) */
}

def @func_12409(%var_12408: Tensor[(14, 5, 11), bool]) -> (Tensor[(14, 5, 11), bool], Tensor[(14, 5, 11), float32]) {
  %421 = fn (%var_12362: Tensor[(14, 5, 11), bool]) -> (Tensor[(14, 5, 11), bool], Tensor[(14, 5, 11), float32]) {
    %412 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
    %413 = %412.0;
    %414 = cast(%413, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
    %415 = cast(%var_12362, dtype="bool") /* ty=Tensor[(14, 5, 11), bool] */;
    %416 = cast(%var_12362, dtype="float64") /* ty=Tensor[(14, 5, 11), float64] */;
    %417 = sigmoid(%416) /* ty=Tensor[(14, 5, 11), float64] */;
    %418 = cast(%417, dtype="float32") /* ty=Tensor[(14, 5, 11), float32] */;
    %419 = less_equal(%414, %415) /* ty=Tensor[(14, 5, 11), bool] */;
    %420 = log2(%418) /* ty=Tensor[(14, 5, 11), float32] */;
    (%419, %420)
  };
  %421(%var_12408) /* ty=(Tensor[(14, 5, 11), bool], Tensor[(14, 5, 11), float32]) */
}

def @func_7351() -> (Tensor[(9, 1, 4), float64],) {
  %424 = fn () -> (Tensor[(9, 1, 4), float64],) {
    %422 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %423 = %422.0;
    (%423,)
  };
  %424() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_12684(%var_12682: Tensor[(9, 2, 4), uint8]) -> Tensor[(9, 2, 4), bool] {
  @func_12681(%var_12682) /* ty=Tensor[(9, 2, 4), bool] */
}

def @func_4349() -> (Tensor[(15, 9, 3), int32],) {
  %427 = fn () -> (Tensor[(15, 9, 3), int32],) {
    %425 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
    %426 = %425.1;
    (%426,)
  };
  %427() /* ty=(Tensor[(15, 9, 3), int32],) */
}

def @func_5240(%var_5232: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  %428 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %429 = cast(meta[relay.Constant][18] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %430 = cast(-1.54655f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %431 = cast(%var_5232, dtype="int64") /* ty=Tensor[(256), int64] */;
  %432 = reshape(%429, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %433 = reshape(%430, newshape=[]) /* ty=float32 */;
  %434 = reshape(%431, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %435 = @func_866(%432, %433, %434) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %436 = %428.0;
  %437 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
  %438 = %435.3;
  (%436, %437, %438, meta[relay.Constant][18] /* ty=Tensor[(468), float64] */, -1.54655f /* ty=float32 */, %var_5232)
}

def @func_8025(%var_8023: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
  @func_8022(%var_8023) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */
}

def @func_13286() -> Tensor[(9, 1, 4), float64] {
  %440 = fn () -> Tensor[(9, 1, 4), float64] {
    %439 = @func_11519() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) */;
    %439.0
  };
  %440() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_6711(%var_6709: Tensor[(1, 256), int64]) -> (Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) {
  @func_6708(%var_6709) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) */
}

def @func_13021() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 12, 4), uint16]) {
  %445 = fn () -> (Tensor[(9, 1, 4), float64], Tensor[(9, 12, 4), uint16]) {
    %441 = @func_11654() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(6, 78), float64]) */;
    %442 = @func_7704() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) */;
    %443 = %441.0;
    %444 = %442.1;
    (%443, %444)
  };
  %445() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 12, 4), uint16]) */
}

def @func_11247(%var_11219: Tensor[(14, 5, 6), bool]) -> (Tensor[(9, 1, 4), float32], Tensor[(14, 5, 6), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64]) {
  %446 = @func_8052() /* ty=Tensor[(9, 1, 4), float64] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %448 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %449 = %448.0;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %451 = cast(%var_11219, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %452 = cast(meta[relay.Constant][19] /* ty=Tensor[(2700), float64] */, dtype="float64") /* ty=Tensor[(2700), float64] */;
  %453 = reshape(%452, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
  %454 = @func_7078(%453) /* ty=(Tensor[(15, 15, 12), float64],) */;
  %455 = atanh(%447) /* ty=Tensor[(9, 1, 4), float32] */;
  %456 = floor_divide(%450, %451) /* ty=Tensor[(14, 5, 6), float64] */;
  %457 = %454.0;
  (%455, %456, %457, meta[relay.Constant][19] /* ty=Tensor[(2700), float64] */)
}

def @func_5885() -> Tensor[(14, 5, ?), bool] {
  %459 = fn () -> Tensor[(14, 5, ?), bool] {
    %458 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %458.0
  };
  %459() /* ty=Tensor[(14, 5, ?), bool] */
}

def @func_10554() -> Tensor[(14, 5, 468), float64] {
  %460 = @func_5934() /* ty=Tensor[(468), float64] */;
  %461 = @func_9288() /* ty=Tensor[(14, 5, ?), float32] */;
  %462 = cast(%460, dtype="uint32") /* ty=Tensor[(468), uint32] */;
  %463 = cast(%461, dtype="uint32") /* ty=Tensor[(14, 5, ?), uint32] */;
  %464 = add(%462, %463) /* ty=Tensor[(14, 5, 468), uint32] */;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(14, 5, 468), float64] */;
  log2(%465) /* ty=Tensor[(14, 5, 468), float64] */
}

def @func_9757() -> (Tensor[(14, 5, ?), float32],) {
  %466 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %467 = %466.0;
  (%467,)
}

def @func_11839(%var_11837: Tensor[(1050), bool], %var_11838: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float32], Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(1050), bool], Tensor[(468), float64]) {
  %483 = fn (%var_11831: Tensor[(1050), bool], %var_11832: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float32], Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(1050), bool], Tensor[(468), float64]) {
    %468 = @func_5804() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %469 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %470 = %469.0;
    %471 = cast(%470, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
    %472 = @func_7376() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
    %473 = cast(%var_11831, dtype="bool") /* ty=Tensor[(1050), bool] */;
    %474 = cast(%var_11832, dtype="float64") /* ty=Tensor[(468), float64] */;
    %475 = reshape(%473, newshape=[1050]) /* ty=Tensor[(1050), bool] */;
    %476 = reshape(%474, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %477 = @func_8334(%475, %476) /* ty=(Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(128, 2), int64], Tensor[(468), float64], Tensor[(9, 12, 4), float32], Tensor[(9, 12, 4), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 12, 4), float32]) */;
    %478 = @func_8492() /* ty=Tensor[(14, 5, ?), bool] */;
    %479 = %468.0;
    %480 = asin(%471) /* ty=Tensor[(9, 1, 4), float32] */;
    %481 = %472.1;
    %482 = %477.2;
    (%478, %479, %480, %481, %482, %var_11831, %var_11832)
  };
  %483(%var_11837, %var_11838) /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float32], Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(1050), bool], Tensor[(468), float64]) */
}

def @func_1966(%var_1947: Tensor[(5, 16, 6), int8], %var_1957: float32) -> (Tensor[(5, 16, 6), int8], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  %484 = cast(%var_1947, dtype="int8") /* ty=Tensor[(5, 16, 6), int8] */;
  %485 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 16, 6), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 16, 6), int8] */, dtype="int8") /* ty=Tensor[(5, 16, 6), int8] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %488 = cast(meta[relay.Constant][21] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %489 = cast(%var_1957, dtype="float32") /* ty=float32 */;
  %490 = cast(meta[relay.Constant][22] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %491 = reshape(%488, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %492 = reshape(%489, newshape=[]) /* ty=float32 */;
  %493 = reshape(%490, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %494 = @func_866(%491, %492, %493) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %495 = right_shift(%486, %487) /* ty=Tensor[(5, 16, 6), int8] */;
  %496 = %494.2;
  (%495, %496, meta[relay.Constant][21] /* ty=Tensor[(468), float64] */, %var_1957, meta[relay.Constant][22] /* ty=Tensor[(256), int64] */)
}

def @func_7085() -> (Tensor[(9, 1, 4), float64],) {
  %499 = fn () -> (Tensor[(9, 1, 4), float64],) {
    %497 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
    %498 = %497.0;
    (%498,)
  };
  %499() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_6794() -> Tensor[(9, 1, 4), float64] {
  %500 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %500.0
}

def @func_11654() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(6, 78), float64]) {
  %501 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %502 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
  %503 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 78), float64] */, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %504 = reshape(%503, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %505 = @func_9403(%504) /* ty=(Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(16, 16), int64], Tensor[(14, 5, 468), bool]) */;
  %506 = %501.0;
  %507 = %502.0;
  %508 = %505.1;
  (%506, %507, %508, meta[relay.Constant][23] /* ty=Tensor[(6, 78), float64] */)
}

def @func_3769() -> Tensor[(9, 1, 4), float64] {
  %509 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 1, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  sigmoid(%509) /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_11060() -> Tensor[(14, 5, ?), float32] {
  %510 = fn () -> Tensor[(14, 5, ?), float32] {
    @func_9288() /* ty=Tensor[(14, 5, ?), float32] */
  };
  %510() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_5298() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) {
  %511 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %512 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %513 = %511.0;
  %514 = %512.0;
  (%513, %514)
}

def @func_7123() -> Tensor[(14, 5, ?), float32] {
  %516 = fn () -> Tensor[(14, 5, ?), float32] {
    %515 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
    %515.2
  };
  %516() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_6245() -> (Tensor[(14, 5, ?), bool],) {
  @func_6243() /* ty=(Tensor[(14, 5, ?), bool],) */
}

def @func_8627() -> (Tensor[(9, 1, 4), float64],) {
  @func_8625() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_9494(%var_9453: Tensor[(1050), bool], %var_9467: Tensor[(405), int32], %var_9470: Tensor[(4, 120), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, 1), int16], Tensor[(144), uint32], Tensor[(14, 5, ?), bool], Tensor[(405), int32], Tensor[(4, 120), bool]) {
  %517 = @func_8527() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) */;
  %518 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %519 = cast(%var_9453, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %520 = reshape(%519, newshape=[14, 5, 15]) /* ty=Tensor[(14, 5, 15), bool] */;
  %521 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %522 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %523 = reshape(%521, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %524 = reshape(%522, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %525 = @func_1705(%523, %524) /* ty=(Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) */;
  %526 = cast(%var_9467, dtype="int32") /* ty=Tensor[(405), int32] */;
  %527 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 120), int8] */, dtype="int8") /* ty=Tensor[(4, 120), int8] */;
  %528 = reshape(%526, newshape=[405]) /* ty=Tensor[(405), int32] */;
  %529 = reshape(%527, newshape=[1, 480]) /* ty=Tensor[(1, 480), int8] */;
  %530 = @func_7237(%528, %529) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], float32, Tensor[(468), float64], Tensor[(4, 64), int64], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(3328), int64], Tensor[(1, 480), int8], Tensor[(3328), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) */;
  %531 = cast(%var_9470, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %532 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 120), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %533 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 120), int8] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %535 = not_equal(%533, %534) /* ty=Tensor[(4, 120), bool] */;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(4, 120), float64] */;
  %537 = log10(%536) /* ty=Tensor[(4, 120), float64] */;
  %538 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 120), int8] */, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(2), int32] */;
  %540 = cast(%537, dtype="bool") /* ty=Tensor[(4, 120), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %542 = %517.0;
  %543 = %518.0;
  %544 = @func_8038(%520) /* ty=Tensor[(14, 5, 15), float64] */;
  %545 = %525.1;
  %546 = %530.5;
  %547 = greater_equal(%540, %541) /* ty=Tensor[(4, 120), bool] */;
  (%542, %543, %544, %var_9453, %545, meta[relay.Constant][25] /* ty=Tensor[(144), uint32] */, %546, %var_9467, %547)
}

def @func_3946(%var_3945: Tensor[(15, 15, 14), uint32]) -> (Tensor[(15, 15, 14), uint32],) {
  %551 = fn (%var_3934: Tensor[(15, 15, 14), uint32]) -> (Tensor[(15, 15, 14), uint32],) {
    %548 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 1, 14), uint32] */, dtype="uint32") /* ty=Tensor[(15, 1, 14), uint32] */;
    %549 = cast(%var_3934, dtype="uint32") /* ty=Tensor[(15, 15, 14), uint32] */;
    %550 = subtract(%548, %549) /* ty=Tensor[(15, 15, 14), uint32] */;
    (%550,)
  };
  %551(%var_3945) /* ty=(Tensor[(15, 15, 14), uint32],) */
}

def @func_12817() -> Tensor[(9, 1, 4), float64] {
  @func_12815() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_7974() -> (Tensor[(468), float64], Tensor[(9, 1, 4), float64]) {
  @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */
}

def @func_13127() -> (Tensor[(15, 9, 3), int32],) {
  %552 = @func_12327() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %553 = %552.0;
  (%553,)
}

def @func_7997() -> (Tensor[(15, 9, 3), int32],) {
  @func_7995() /* ty=(Tensor[(15, 9, 3), int32],) */
}

def @func_7912(%var_7911: Tensor[(900, 3), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 12), float64], Tensor[(900, 3), bool], Tensor[(900, 3), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %571 = fn (%var_7861: Tensor[(900, 3), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 12), float64], Tensor[(900, 3), bool], Tensor[(900, 3), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
    %554 = @func_5481() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) */;
    %555 = cast(meta[relay.Constant][28] /* ty=Tensor[(900, 3), float64] */, dtype="float64") /* ty=Tensor[(900, 3), float64] */;
    %556 = reshape(%555, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
    %557 = @func_7078(%556) /* ty=(Tensor[(15, 15, 12), float64],) */;
    %558 = cast(%var_7861, dtype="bool") /* ty=Tensor[(900, 3), bool] */;
    %559 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(900, 3), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %560 = cast(meta[relay.Constant][28] /* ty=Tensor[(900, 3), float64] */, dtype="bool") /* ty=Tensor[(900, 3), bool] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %562 = cast(meta[relay.Constant][28] /* ty=Tensor[(900, 3), float64] */, dtype="float32") /* ty=Tensor[(900, 3), float32] */;
    %563 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %564 = @func_7122() /* ty=Tensor[(14, 5, ?), float32] */;
    %565 = %554.0;
    %566 = %557.0;
    %567 = equal(%560, %561) /* ty=Tensor[(900, 3), bool] */;
    %568 = asin(%562) /* ty=Tensor[(900, 3), float32] */;
    %569 = %563.0;
    %570 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
    (%564, %565, %566, %567, %568, %569, %570)
  };
  %571(%var_7911) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 12), float64], Tensor[(900, 3), bool], Tensor[(900, 3), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */
}

def @func_7792() -> Tensor[(15, 9, 3), int32] {
  @func_7790() /* ty=Tensor[(15, 9, 3), int32] */
}

def @func_11045() -> (Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) {
  @func_11043() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */
}

def @func_9665(%var_9622: Tensor[(14, 5, 12), bool], %var_9657: Tensor[(14, 5, 12), int16]) -> (Tensor[(14, 5, 12), bool], Tensor[(6, 13, ?), bool], float32) {
  %572 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %573 = %572.1;
  %574 = cast(%573, dtype="int16") /* ty=Tensor[(14, 5, ?), int16] */;
  %575 = cast(%var_9622, dtype="int16") /* ty=Tensor[(14, 5, 12), int16] */;
  %576 = minimum(%574, %575) /* ty=Tensor[(14, 5, 12), int16] */;
  %577 = cast(%var_9657, dtype="bool") /* ty=Tensor[(14, 5, 12), bool] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="bool") /* ty=Tensor[(14, 5, 12), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = cast(-0.369696f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %582 = reshape(%581, newshape=[]) /* ty=float32 */;
  %583 = @func_475(%582) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %584 = greater_equal(%579, %580) /* ty=Tensor[(14, 5, 12), bool] */;
  %585 = %583.0;
  (%584, %585, -0.369696f /* ty=float32 */)
}

def @func_6585() -> (Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) {
  %604 = fn () -> (Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) {
    %586 = @func_4348() /* ty=(Tensor[(15, 9, 3), int32],) */;
    %587 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %588 = cast(meta[relay.Constant][29] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
    %589 = cast(meta[relay.Constant][30] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %590 = reshape(%588, newshape=[14, 5, 13]) /* ty=Tensor[(14, 5, 13), float32] */;
    %591 = reshape(%589, newshape=[14, 5, 4]) /* ty=Tensor[(14, 5, 4), float32] */;
    %592 = @func_4160(%590, %591) /* ty=(Tensor[(14, 5, 13), bool], Tensor[(14, 5, 4), float64]) */;
    %593 = cast(7.58484f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %594 = reshape(%593, newshape=[]) /* ty=float32 */;
    %595 = @func_475(%594) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
    %596 = %595.1;
    %597 = cast(%596, dtype="int64") /* ty=Tensor[(6, 13, 1), int64] */;
    %598 = cast(meta[relay.Constant][29] /* ty=Tensor[(910), float32] */, dtype="int64") /* ty=Tensor[(910), int64] */;
    %599 = %586.0;
    %600 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
    %601 = %587.0;
    %602 = %592.1;
    %603 = minimum(%597, %598) /* ty=Tensor[(6, 13, 910), int64] */;
    (%599, %600, 7.58484f /* ty=float32 */, %601, %602, meta[relay.Constant][30] /* ty=Tensor[(280), float32] */, %603)
  };
  %604() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */
}

def @func_9282() -> (Tensor[(14, 5, 4), float64], Tensor[(468), float64]) {
  %608 = fn () -> (Tensor[(14, 5, 4), float64], Tensor[(468), float64]) {
    %605 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
    %606 = %605.4;
    %607 = @func_5934() /* ty=Tensor[(468), float64] */;
    (%606, %607)
  };
  %608() /* ty=(Tensor[(14, 5, 4), float64], Tensor[(468), float64]) */
}

def @func_11043() -> (Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) {
  %609 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %610 = @func_6501() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %611 = %609.0;
  %612 = %610.4;
  (%611, %612)
}

def @func_12104() -> Tensor[(14, 5, ?), bool] {
  @func_12102() /* ty=Tensor[(14, 5, ?), bool] */
}

def @func_11096() -> Tensor[(9, 1, 4), float64] {
  %614 = fn () -> Tensor[(9, 1, 4), float64] {
    %613 = @func_7376() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
    %613.1
  };
  %614() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_10972(%var_10971: Tensor[(8, 416), float32]) -> (Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(832, 4), float32], Tensor[(252), float64], Tensor[(8, 416), float32]) {
  %628 = fn (%var_10965: Tensor[(8, 416), float32]) -> (Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(832, 4), float32], Tensor[(252), float64], Tensor[(8, 416), float32]) {
    %615 = @func_3608() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */;
    %616 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
    %617 = @func_5804() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %618 = cast(meta[relay.Constant][31] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
    %619 = cast(%var_10965, dtype="float32") /* ty=Tensor[(8, 416), float32] */;
    %620 = reshape(%618, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), float64] */;
    %621 = reshape(%619, newshape=[832, 4]) /* ty=Tensor[(832, 4), float32] */;
    %622 = @func_6107(%620, %621) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) */;
    %623 = %615.0;
    %624 = @func_8438() /* ty=Tensor[(468), float64] */;
    %625 = %616.2;
    %626 = %617.0;
    %627 = %622.4;
    (%623, %624, %625, %626, %627, meta[relay.Constant][31] /* ty=Tensor[(252), float64] */, %var_10965)
  };
  %628(%var_10971) /* ty=(Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(832, 4), float32], Tensor[(252), float64], Tensor[(8, 416), float32]) */
}

def @func_11129() -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) {
  %635 = fn () -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) {
    %629 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %630 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %631 = @func_4348() /* ty=(Tensor[(15, 9, 3), int32],) */;
    %632 = %629.0;
    %633 = %630.0;
    %634 = %631.0;
    (%632, %633, %634)
  };
  %635() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32]) */
}

def @func_6377() -> Tensor[(9, 1, 4), float64] {
  @func_3769() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_1709(%var_1707: Tensor[(9, 8, 2), uint32], %var_1708: Tensor[(9, 8, 2), uint32]) -> (Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) {
  @func_1705(%var_1707, %var_1708) /* ty=(Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) */
}

def @func_10752(%var_10751: float32) -> Tensor[(13, 3, 7), float32] {
  %638 = fn (%var_10738: float32) -> Tensor[(13, 3, 7), float32] {
    %636 = cast(%var_10738, dtype="float32") /* ty=float32 */;
    %637 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 7), float32] */;
    divide(%636, %637) /* ty=Tensor[(13, 3, 7), float32] */
  };
  %638(%var_10751) /* ty=Tensor[(13, 3, 7), float32] */
}

def @func_2441(%var_2439: Tensor[(13, 16, 16), float32]) -> (Tensor[(13, 16, 16), float32],) {
  @func_2438(%var_2439) /* ty=(Tensor[(13, 16, 16), float32],) */
}

def @func_5804() -> (Tensor[(14, 5, ?), float32],) {
  %639 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
  (%639,)
}

def @func_477(%var_476: float32) -> (Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) {
  %651 = fn (%var_446: float32) -> (Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) {
    %640 = cast(%var_446, dtype="float32") /* ty=float32 */;
    %641 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 1), float32] */;
    %642 = power(%640, %641) /* ty=Tensor[(6, 13, 1), float32] */;
    %643 = cast(%642, dtype="bool") /* ty=Tensor[(6, 13, 1), bool] */;
    %644 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(6, 13, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 13, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 1), bool] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %647 = cast(%642, dtype="int16") /* ty=Tensor[(6, 13, 1), int16] */;
    %648 = cast(%var_446, dtype="int16") /* ty=int16 */;
    %649 = equal(%645, %646) /* ty=Tensor[(6, 13, ?), bool] */;
    %650 = subtract(%647, %648) /* ty=Tensor[(6, 13, 1), int16] */;
    (%649, %650)
  };
  %651(%var_476) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */
}

def @func_10072(%var_10057: Tensor[(8, 28), float64]) -> (Tensor[(13, 16, 16), float32], Tensor[(14, 5, 3328), uint16], Tensor[(468), float64], Tensor[(256), int64], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32], Tensor[(14, 5, 3328), float64], Tensor[(14, 5, 3328), uint32], Tensor[(2, 112), uint32], Tensor[(8, 28), float64], Tensor[(14, 5, 3328), uint16]) {
  %652 = cast(meta[relay.Constant][34] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %653 = reshape(%652, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float32] */;
  %654 = @func_2438(%653) /* ty=(Tensor[(13, 16, 16), float32],) */;
  %655 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
  %656 = %655.3;
  %657 = cast(%656, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %658 = cast(meta[relay.Constant][34] /* ty=Tensor[(3328), float32] */, dtype="bool") /* ty=Tensor[(3328), bool] */;
  %659 = equal(%657, %658) /* ty=Tensor[(14, 5, 3328), bool] */;
  %660 = cast(%659, dtype="float64") /* ty=Tensor[(14, 5, 3328), float64] */;
  %661 = sinh(%660) /* ty=Tensor[(14, 5, 3328), float64] */;
  %662 = cast(%661, dtype="uint16") /* ty=Tensor[(14, 5, 3328), uint16] */;
  %663 = cast(%656, dtype="uint16") /* ty=Tensor[(14, 5, ?), uint16] */;
  %664 = @func_8438() /* ty=Tensor[(468), float64] */;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(468), float64] */;
  %666 = cast(6.02982f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %667 = reshape(%665, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %668 = reshape(%666, newshape=[]) /* ty=float32 */;
  %669 = @func_4973(%667, %668) /* ty=(Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) */;
  %670 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %671 = cast(%659, dtype="float64") /* ty=Tensor[(14, 5, 3328), float64] */;
  %672 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%661, dtype="float64") /* ty=Tensor[(14, 5, 3328), float64] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %675 = cast(%661, dtype="float32") /* ty=Tensor[(14, 5, 3328), float32] */;
  %676 = acosh(%675) /* ty=Tensor[(14, 5, 3328), float32] */;
  %677 = cast(%676, dtype="uint32") /* ty=Tensor[(14, 5, 3328), uint32] */;
  %678 = cast(6.02982f /* ty=float32 */, dtype="uint32") /* ty=uint32 */;
  %679 = cast(%var_10057, dtype="float64") /* ty=Tensor[(8, 28), float64] */;
  %680 = reshape(%679, newshape=[2, 112]) /* ty=Tensor[(2, 112), float64] */;
  %681 = @func_6663(%680) /* ty=(Tensor[(2, 112), uint32],) */;
  %682 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 3328), float32] */, dtype="bool") /* ty=Tensor[(14, 5, 3328), bool] */;
  %683 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%676, dtype="bool") /* ty=Tensor[(14, 5, 3328), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = less_equal(%684, %685) /* ty=Tensor[(14, 5, 3328), bool] */;
  %687 = cast(%686, dtype="uint16") /* ty=Tensor[(14, 5, 3328), uint16] */;
  %688 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%676, dtype="uint16") /* ty=Tensor[(14, 5, 3328), uint16] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %691 = %654.0;
  %692 = logical_xor(%662, %663) /* ty=Tensor[(14, 5, 3328), uint16] */;
  %693 = %669.4;
  %694 = @func_6794() /* ty=Tensor[(9, 1, 4), float64] */;
  %695 = %670.0;
  %696 = floor_mod(%673, %674) /* ty=Tensor[(14, 5, 3328), float64] */;
  %697 = bitwise_or(%677, %678) /* ty=Tensor[(14, 5, 3328), uint32] */;
  %698 = %681.0;
  %699 = subtract(%689, %690) /* ty=Tensor[(14, 5, 3328), uint16] */;
  (%691, %692, %664, %693, %694, %695, %696, %697, %698, %var_10057, %699)
}

def @func_12659(%var_12658: Tensor[(14, 5, 12), float32]) -> (Tensor[(14, 5, 12), bool],) {
  %705 = fn (%var_12650: Tensor[(14, 5, 12), float32]) -> (Tensor[(14, 5, 12), bool],) {
    %700 = @func_11904() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %701 = %700.0;
    %702 = cast(%701, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
    %703 = cast(%var_12650, dtype="bool") /* ty=Tensor[(14, 5, 12), bool] */;
    %704 = greater(%702, %703) /* ty=Tensor[(14, 5, 12), bool] */;
    (%704,)
  };
  %705(%var_12658) /* ty=(Tensor[(14, 5, 12), bool],) */
}

def @func_13368() -> (Tensor[(9, 1, 4), float64],) {
  %706 = @func_6377() /* ty=Tensor[(9, 1, 4), float64] */;
  (%706,)
}

def @func_12329() -> (Tensor[(15, 9, 3), int32],) {
  @func_12327() /* ty=(Tensor[(15, 9, 3), int32],) */
}

def @func_9288() -> Tensor[(14, 5, ?), float32] {
  @func_8662() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_12479() -> (Tensor[(15, 9, 3), int32],) {
  %707 = @func_4348() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %708 = %707.0;
  (%708,)
}

def @func_7958() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) {
  %713 = fn () -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) {
    %709 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %710 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %711 = %709.0;
    %712 = %710.0;
    (%711, %712)
  };
  %713() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */
}

def @func_13084() -> (Tensor[(14, 5, ?), float32],) {
  %714 = @func_9288() /* ty=Tensor[(14, 5, ?), float32] */;
  (%714,)
}

def @func_13129() -> (Tensor[(15, 9, 3), int32],) {
  @func_13127() /* ty=(Tensor[(15, 9, 3), int32],) */
}

def @func_4906(%var_4889: Tensor[(8, 4, 7), float64]) -> Tensor[(8, 4, 7), float32] {
  %715 = cast(%var_4889, dtype="float64") /* ty=Tensor[(8, 4, 7), float64] */;
  %716 = sigmoid(%715) /* ty=Tensor[(8, 4, 7), float64] */;
  %717 = cast(%var_4889, dtype="float32") /* ty=Tensor[(8, 4, 7), float32] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="float32") /* ty=Tensor[(8, 4, 7), float32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%719, %720) /* ty=Tensor[(8, 4, 7), float32] */
}

def @func_9608() -> (Tensor[(14, 5, ?), float64], Tensor[(9, 1, 4), float64], Tensor[(3150), float64], float32, Tensor[(256), int64]) {
  %721 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %722 = cast(meta[relay.Constant][36] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %723 = reshape(%722, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %724 = @func_5240(%723) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float64], Tensor[(6, 13, ?), float64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %725 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
  %726 = %721.0;
  %727 = @func_5404() /* ty=Tensor[(3150), float64] */;
  %728 = %724.4;
  (%725, %726, %727, %728, meta[relay.Constant][36] /* ty=Tensor[(256), int64] */)
}

def @func_12872() -> Tensor[(468, 1), float64] {
  %730 = fn () -> Tensor[(468, 1), float64] {
    %729 = @func_5023() /* ty=(Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) */;
    %729.0
  };
  %730() /* ty=Tensor[(468, 1), float64] */
}

def @func_12511() -> Tensor[(14, 5, ?), float32] {
  @func_12509() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_5574(%var_5513: Tensor[(480), int8], %var_5529: Tensor[(3328), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) {
  %731 = cast(%var_5513, dtype="int8") /* ty=Tensor[(480), int8] */;
  %732 = cast(8.42134f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %733 = reshape(%731, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), int8] */;
  %734 = reshape(%732, newshape=[]) /* ty=float32 */;
  %735 = @func_1966(%733, %734) /* ty=(Tensor[(5, 16, 6), int8], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %736 = cast(%var_5529, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %737 = reshape(%736, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float32] */;
  %738 = @func_2438(%737) /* ty=(Tensor[(13, 16, 16), float32],) */;
  %739 = %738.0;
  %740 = cast(%739, dtype="int64") /* ty=Tensor[(13, 16, 16), int64] */;
  %741 = shape_of(%var_5529, dtype="int32") /* ty=Tensor[(1), int32] */;
  %742 = cast(%var_5529, dtype="int64") /* ty=Tensor[(3328), int64] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?), int64] */;
  %744 = cast(%var_5529, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %745 = @func_4699() /* ty=Tensor[(9, 1, 4), float64] */;
  %746 = %735.2;
  %747 = bitwise_xor(%742, %743) /* ty=Tensor[(3328), int64] */;
  %748 = sigmoid(%744) /* ty=Tensor[(3328), float32] */;
  (%745, %746, %var_5513, 8.42134f /* ty=float32 */, %747, %748)
}

def @func_13064() -> Tensor[(14, 5, ?), float32] {
  %749 = @func_11043() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 2, 4), uint8]) */;
  %749.0
}

def @func_7490(%var_7489: Tensor[(70), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), int16], Tensor[(70), float32]) {
  %755 = fn (%var_7478: Tensor[(70), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), int16], Tensor[(70), float32]) {
    %750 = cast(%var_7478, dtype="float32") /* ty=Tensor[(70), float32] */;
    %751 = reshape(%750, newshape=[14, 5, 1]) /* ty=Tensor[(14, 5, 1), float32] */;
    %752 = @func_5793(%751) /* ty=(Tensor[(14, 5, ?), int16],) */;
    %753 = @func_7388() /* ty=Tensor[(9, 1, 4), float64] */;
    %754 = %752.0;
    (%753, %754, %var_7478)
  };
  %755(%var_7489) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), int16], Tensor[(70), float32]) */
}

def @func_7995() -> (Tensor[(15, 9, 3), int32],) {
  %756 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
  %757 = %756.0;
  (%757,)
}

def @func_8746(%var_8745: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64], Tensor[(14, 5, ?), float32], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
  %772 = fn (%var_8736: Tensor[(256), int64]) -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64], Tensor[(14, 5, ?), float32], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) {
    %758 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
    %759 = @func_8625() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %760 = cast(meta[relay.Constant][37] /* ty=Tensor[(2700), float64] */, dtype="float64") /* ty=Tensor[(2700), float64] */;
    %761 = reshape(%760, newshape=[15, 15, 12]) /* ty=Tensor[(15, 15, 12), float64] */;
    %762 = @func_7078(%761) /* ty=(Tensor[(15, 15, 12), float64],) */;
    %763 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %764 = cast(%var_8736, dtype="int64") /* ty=Tensor[(256), int64] */;
    %765 = reshape(%764, newshape=[1, 256]) /* ty=Tensor[(1, 256), int64] */;
    %766 = @func_6708(%765) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(2, 112), float64], Tensor[(8, 16, 2), int64], Tensor[(1, 256), int64]) */;
    %767 = %758.1;
    %768 = %759.0;
    %769 = %762.0;
    %770 = %763.0;
    %771 = %766.2;
    (%767, %768, %769, meta[relay.Constant][37] /* ty=Tensor[(2700), float64] */, %770, %771, %var_8736)
  };
  %772(%var_8745) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64], Tensor[(15, 15, 12), float64], Tensor[(2700), float64], Tensor[(14, 5, ?), float32], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */
}

def @func_12022(%var_12019: Tensor[(468), float64], %var_12020: float32, %var_12021: Tensor[(128, 2), int64]) -> (Tensor[(14, 5, ?), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(6, 13, ?), bool], float32, Tensor[(128, 2), int64]) {
  @func_12017(%var_12019, %var_12020, %var_12021) /* ty=(Tensor[(14, 5, ?), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(6, 13, ?), bool], float32, Tensor[(128, 2), int64]) */
}

def @func_12039(%var_12027: Tensor[(9, 11, 15), int16], %var_12028: Tensor[(9, 11, 15), int16]) -> (Tensor[(9, 11, 15), int16], Tensor[(14, 5, ?), float32]) {
  %773 = cast(%var_12028, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %774 = shape_of(%var_12027, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_12027, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %777 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %778 = bitwise_xor(%775, %776) /* ty=Tensor[(9, 11, 15), int16] */;
  %779 = %777.0;
  (%778, %779)
}

def @func_13255() -> Tensor[(9, 12, 4), uint16] {
  %780 = @func_13020() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 12, 4), uint16]) */;
  %780.1
}

def @func_8439() -> Tensor[(468), float64] {
  %782 = fn () -> Tensor[(468), float64] {
    %781 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
    %781.0
  };
  %782() /* ty=Tensor[(468), float64] */
}

def @main(%var_13738: float32) -> (Tensor[(468), float64], float32, Tensor[(468, 1), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64], Tensor[(2, 128), float64]) {
  %783 = @func_5025() /* ty=(Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) */;
  %784 = @func_7958() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
  %785 = %784.0;
  %786 = cast(meta[relay.Constant][38] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %787 = cast(%var_13738, dtype="float32") /* ty=float32 */;
  %788 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 128), int64] */, dtype="int64") /* ty=Tensor[(2, 128), int64] */;
  %789 = reshape(%786, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %790 = reshape(%787, newshape=[]) /* ty=float32 */;
  %791 = reshape(%788, newshape=[128, 2]) /* ty=Tensor[(128, 2), int64] */;
  %792 = @func_12022(%789, %790, %791) /* ty=(Tensor[(14, 5, ?), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(6, 13, ?), bool], float32, Tensor[(128, 2), int64]) */;
  %793 = %792.8;
  %794 = cast(%785, dtype="bool") /* ty=Tensor[(14, 5, ?), bool] */;
  %795 = cast(%793, dtype="bool") /* ty=bool */;
  %796 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 128), int64] */, dtype="float64") /* ty=Tensor[(2, 128), float64] */;
  %797 = %783.0;
  %798 = greater(%794, %795) /* ty=Tensor[(14, 5, ?), bool] */;
  %799 = @func_7388() /* ty=Tensor[(9, 1, 4), float64] */;
  %800 = sigmoid(%796) /* ty=Tensor[(2, 128), float64] */;
  (meta[relay.Constant][38] /* ty=Tensor[(468), float64] */, %var_13738, %797, %798, %799, %800)
}

def @func_13066() -> Tensor[(14, 5, ?), float32] {
  @func_13064() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_5327(%var_5325: Tensor[(12, 7, 1), bool], %var_5326: Tensor[(12, 7, 8), bool]) -> (Tensor[(12, 7, 8), bool],) {
  @func_5323(%var_5325, %var_5326) /* ty=(Tensor[(12, 7, 8), bool],) */
}

def @func_8373(%var_8355: Tensor[(256), int64]) -> (Tensor[(15, 9, 3), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(12, 7, 8), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(14, 5, ?), float64]) {
  %801 = @func_4627() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %802 = cast(meta[relay.Constant][40] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %803 = reshape(%802, newshape=[7, 1, 5]) /* ty=Tensor[(7, 1, 5), float32] */;
  %804 = @func_6344(%803) /* ty=(Tensor[(7, 1, 5), float32],) */;
  %805 = cast(%var_8355, dtype="int64") /* ty=Tensor[(256), int64] */;
  %806 = reshape(%805, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %807 = @func_8022(%806) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %808 = cast(meta[relay.Constant][41] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %809 = cast(meta[relay.Constant][42] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %810 = reshape(%808, newshape=[12, 7, 1]) /* ty=Tensor[(12, 7, 1), bool] */;
  %811 = reshape(%809, newshape=[12, 7, 8]) /* ty=Tensor[(12, 7, 8), bool] */;
  %812 = @func_5323(%810, %811) /* ty=(Tensor[(12, 7, 8), bool],) */;
  %813 = @func_7957() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
  %814 = %813.1;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %816 = %801.0;
  %817 = %804.0;
  %818 = %807.0;
  %819 = %812.0;
  %820 = atan(%815) /* ty=Tensor[(14, 5, ?), float64] */;
  (%816, %817, meta[relay.Constant][40] /* ty=Tensor[(35), float32] */, %818, %var_8355, %819, meta[relay.Constant][41] /* ty=Tensor[(84), bool] */, meta[relay.Constant][42] /* ty=Tensor[(672), bool] */, %820)
}

def @func_6279() -> (Tensor[(9, 1, 4), float64],) {
  %821 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%821,)
}

def @func_8891(%var_8889: uint16, %var_8890: Tensor[(14, 5, 3), bool]) -> (Tensor[(7, 2, 11), uint16], Tensor[(14, 5, 3), int8]) {
  %830 = fn (%var_8861: uint16, %var_8877: Tensor[(14, 5, 3), bool]) -> (Tensor[(7, 2, 11), uint16], Tensor[(14, 5, 3), int8]) {
    %822 = cast(%var_8861, dtype="uint16") /* ty=uint16 */;
    %823 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 2, 11), uint16] */, dtype="uint16") /* ty=Tensor[(7, 2, 11), uint16] */;
    %824 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %825 = %824.0;
    %826 = cast(%825, dtype="int8") /* ty=Tensor[(14, 5, ?), int8] */;
    %827 = cast(%var_8877, dtype="int8") /* ty=Tensor[(14, 5, 3), int8] */;
    %828 = left_shift(%822, %823) /* ty=Tensor[(7, 2, 11), uint16] */;
    %829 = logical_xor(%826, %827) /* ty=Tensor[(14, 5, 3), int8] */;
    (%828, %829)
  };
  %830(%var_8889, %var_8890) /* ty=(Tensor[(7, 2, 11), uint16], Tensor[(14, 5, 3), int8]) */
}

def @func_13647() -> (Tensor[(9, 1, 4), float64],) {
  %832 = fn () -> (Tensor[(9, 1, 4), float64],) {
    %831 = @func_12706() /* ty=Tensor[(9, 1, 4), float64] */;
    (%831,)
  };
  %832() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_5481() -> (Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) {
  %833 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 112), float64] */, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %834 = reshape(%833, newshape=[8, 4, 7]) /* ty=Tensor[(8, 4, 7), float64] */;
  %835 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %836 = @func_4906(%834) /* ty=Tensor[(8, 4, 7), float32] */;
  (%835, %836, meta[relay.Constant][44] /* ty=Tensor[(2, 112), float64] */)
}

def @func_9065() -> Tensor[(14, 5, ?), float32] {
  %838 = fn () -> Tensor[(14, 5, ?), float32] {
    %837 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %837.0
  };
  %838() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_13560() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) {
  %843 = fn () -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) {
    %839 = @func_11289() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %840 = @func_13084() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %841 = %839.0;
    %842 = %840.0;
    (%841, %842)
  };
  %843() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) */
}

def @func_13619(%var_13617: Tensor[(1, 256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), int16], Tensor[(1, 256), int64]) {
  @func_13616(%var_13617) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), int16], Tensor[(1, 256), int64]) */
}

def @func_12815() -> Tensor[(9, 1, 4), float64] {
  %844 = @func_11289() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %844.0
}

def @func_1970(%var_1968: Tensor[(5, 16, 6), int8], %var_1969: float32) -> (Tensor[(5, 16, 6), int8], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(256), int64]) {
  @func_1966(%var_1968, %var_1969) /* ty=(Tensor[(5, 16, 6), int8], Tensor[(6, 13, ?), bool], Tensor[(468), float64], float32, Tensor[(256), int64]) */
}

def @func_12707() -> Tensor[(9, 1, 4), float64] {
  %846 = fn () -> Tensor[(9, 1, 4), float64] {
    %845 = @func_11519() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(3150), float64]) */;
    %845.0
  };
  %846() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_5202() -> (Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) {
  @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */
}

def @func_8054() -> Tensor[(9, 1, 4), float64] {
  @func_8052() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_12327() -> (Tensor[(15, 9, 3), int32],) {
  %847 = @func_7995() /* ty=(Tensor[(15, 9, 3), int32],) */;
  %848 = %847.0;
  (%848,)
}

def @func_12759() -> (Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32]) {
  @func_12757() /* ty=(Tensor[(468), float64], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32]) */
}

def @func_6379() -> Tensor[(9, 1, 4), float64] {
  @func_6377() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_8664() -> Tensor[(14, 5, ?), float32] {
  @func_8662() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_5405() -> Tensor[(3150), float64] {
  %852 = fn () -> Tensor[(3150), float64] {
    %849 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
    %850 = %849.3;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(3150), float64] */;
    acos(%851) /* ty=Tensor[(3150), float64] */
  };
  %852() /* ty=Tensor[(3150), float64] */
}

def @func_8052() -> Tensor[(9, 1, 4), float64] {
  %853 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %853.0
}

def @func_11701(%var_11700: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(468), float64], Tensor[(468), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) {
  %868 = fn (%var_11662: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(468), float64], Tensor[(468), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) {
    %854 = @func_6584() /* ty=(Tensor[(15, 9, 3), int32], Tensor[(9, 1, 4), float64], float32, Tensor[(14, 5, ?), float32], Tensor[(14, 5, 4), float64], Tensor[(280), float32], Tensor[(6, 13, 910), int64]) */;
    %855 = cast(%var_11662, dtype="float64") /* ty=Tensor[(468), float64] */;
    %856 = cast(-8.67982f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %857 = reshape(%855, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
    %858 = reshape(%856, newshape=[]) /* ty=float32 */;
    %859 = @func_8230(%857, %858) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) */;
    %860 = @func_10781() /* ty=(Tensor[(468), float64],) */;
    %861 = @func_5126() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %862 = %854.3;
    %863 = %859.2;
    %864 = %860.0;
    %865 = @func_5934() /* ty=Tensor[(468), float64] */;
    %866 = %861.0;
    %867 = @func_9043() /* ty=Tensor[(9, 1, 4), float64] */;
    (%862, %863, %var_11662, -8.67982f /* ty=float32 */, %864, %865, %866, %867)
  };
  %868(%var_11700) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(468), float64], Tensor[(468), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) */
}

def @func_582(%var_580: Tensor[(8, 16, 2), int64], %var_581: Tensor[(8, 16, 2), int64]) -> (Tensor[(8, 16, 2), int64],) {
  @func_578(%var_580, %var_581) /* ty=(Tensor[(8, 16, 2), int64],) */
}

def @func_13616(%var_13614: Tensor[(1, 256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), int16], Tensor[(1, 256), int64]) {
  %869 = cast(%var_13614, dtype="int64") /* ty=Tensor[(1, 256), int64] */;
  %870 = reshape(%869, newshape=[8, 32]) /* ty=Tensor[(8, 32), int64] */;
  %871 = @func_13353(%870) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(1, 256), int64], Tensor[(8, 32), int64], Tensor[(14, 5, ?), int16]) */;
  %872 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
  %873 = %871.4;
  (%872, %873, %var_13614)
}

def @func_6770() -> (Tensor[(14, 5, ?), bool],) {
  %874 = @func_4242() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %875 = %874.0;
  (%875,)
}

def @func_6663(%var_6649: Tensor[(2, 112), float64]) -> (Tensor[(2, 112), uint32],) {
  %876 = @func_5481() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(8, 4, 7), float32], Tensor[(2, 112), float64]) */;
  %877 = %876.2;
  %878 = cast(%var_6649, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %879 = shape_of(%877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %880 = cast(%877, dtype="float64") /* ty=Tensor[(2, 112), float64] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %882 = power(%880, %881) /* ty=Tensor[(2, 112), float64] */;
  %883 = cast(%var_6649, dtype="bool") /* ty=Tensor[(2, 112), bool] */;
  %884 = shape_of(%877, dtype="int32") /* ty=Tensor[(2), int32] */;
  %885 = cast(%877, dtype="bool") /* ty=Tensor[(2, 112), bool] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %887 = equal(%885, %886) /* ty=Tensor[(2, 112), bool] */;
  %888 = cast(%887, dtype="uint32") /* ty=Tensor[(2, 112), uint32] */;
  %889 = shape_of(%882, dtype="int32") /* ty=Tensor[(2), int32] */;
  %890 = cast(%882, dtype="uint32") /* ty=Tensor[(2, 112), uint32] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %892 = maximum(%890, %891) /* ty=Tensor[(2, 112), uint32] */;
  (%892,)
}

def @func_8528() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) {
  %896 = fn () -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) {
    %893 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
    %894 = %893.0;
    %895 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
    (%894, %895)
  };
  %896() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool]) */
}

def @func_9430() -> Tensor[(14, 5, ?), float32] {
  @func_9428() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_6796() -> Tensor[(9, 1, 4), float64] {
  @func_6794() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_5578(%var_5576: Tensor[(480), int8], %var_5577: Tensor[(3328), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) {
  @func_5574(%var_5576, %var_5577) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) */
}

def @func_9179() -> (Tensor[(14, 5, ?), float32],) {
  %898 = fn () -> (Tensor[(14, 5, ?), float32],) {
    %897 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
    (%897,)
  };
  %898() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_6772() -> (Tensor[(14, 5, ?), bool],) {
  @func_6770() /* ty=(Tensor[(14, 5, ?), bool],) */
}

def @func_4885() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) {
  @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */
}

def @func_6344(%var_6339: Tensor[(7, 1, 5), float32]) -> (Tensor[(7, 1, 5), float32],) {
  %899 = cast(%var_6339, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  %900 = erf(%899) /* ty=Tensor[(7, 1, 5), float32] */;
  (%900,)
}

def @func_3771() -> Tensor[(9, 1, 4), float64] {
  @func_3769() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_6615(%var_6613: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(468), float64], Tensor[(468), float64], Tensor[(256), int64]) {
  @func_6612(%var_6613) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(468), float64], Tensor[(468), float64], Tensor[(256), int64]) */
}

def @func_3609() -> (Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) {
  %910 = fn () -> (Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) {
    %901 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 5, 1), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 1), bool] */;
    %902 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(14, 5, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %903 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 5, 1), float64] */, dtype="bool") /* ty=Tensor[(14, 5, 1), bool] */;
    %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %905 = cast(meta[relay.Constant][47] /* ty=Tensor[(405), int32] */, dtype="int32") /* ty=Tensor[(405), int32] */;
    %906 = reshape(%905, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), int32] */;
    %907 = @func_3163(%906) /* ty=(Tensor[(15, 9, 3), int32],) */;
    %908 = greater_equal(%903, %904) /* ty=Tensor[(14, 5, ?), bool] */;
    %909 = %907.0;
    (%908, %909, meta[relay.Constant][47] /* ty=Tensor[(405), int32] */)
  };
  %910() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32], Tensor[(405), int32]) */
}

def @func_3863() -> (Tensor[(14, 5, ?), float32],) {
  %912 = fn () -> (Tensor[(14, 5, ?), float32],) {
    %911 = @func_3726() /* ty=Tensor[(14, 5, ?), float32] */;
    (%911,)
  };
  %912() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_1705(%var_1659: Tensor[(9, 8, 2), uint32], %var_1660: Tensor[(9, 8, 2), uint32]) -> (Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) {
  %913 = cast(%var_1660, dtype="bool") /* ty=Tensor[(9, 8, 2), bool] */;
  %914 = shape_of(%var_1659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%var_1659, dtype="bool") /* ty=Tensor[(9, 8, 2), bool] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %917 = cast(-7.75663f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %918 = reshape(%917, newshape=[]) /* ty=float32 */;
  %919 = @func_475(%918) /* ty=(Tensor[(6, 13, ?), bool], Tensor[(6, 13, 1), int16]) */;
  %920 = greater(%915, %916) /* ty=Tensor[(9, 8, 2), bool] */;
  %921 = %919.1;
  (%920, %921, -7.75663f /* ty=float32 */)
}

def @func_9717() -> (Tensor[(468), float64],) {
  %922 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
  %923 = %922.0;
  (%923,)
}

def @func_8234(%var_8232: Tensor[(468, 1), float64], %var_8233: float32) -> (Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) {
  @func_8230(%var_8232, %var_8233) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) */
}

def @func_7705() -> (Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) {
  %932 = fn () -> (Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) {
    %924 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %925 = %924.0;
    %926 = cast(%925, dtype="bool") /* ty=Tensor[(9, 1, 4), bool] */;
    %927 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 12, 4), float64] */, dtype="bool") /* ty=Tensor[(9, 12, 4), bool] */;
    %928 = cast(%925, dtype="uint16") /* ty=Tensor[(9, 1, 4), uint16] */;
    %929 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 12, 4), float64] */, dtype="uint16") /* ty=Tensor[(9, 12, 4), uint16] */;
    %930 = logical_or(%926, %927) /* ty=Tensor[(9, 12, 4), bool] */;
    %931 = minimum(%928, %929) /* ty=Tensor[(9, 12, 4), uint16] */;
    (%930, %931)
  };
  %932() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) */
}

def @func_6612(%var_6604: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(468), float64], Tensor[(468), float64], Tensor[(256), int64]) {
  %933 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %934 = cast(%var_6604, dtype="float64") /* ty=Tensor[(468), float64] */;
  %935 = cast(meta[relay.Constant][49] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
  %936 = reshape(%934, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %937 = reshape(%935, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %938 = @func_5643(%936, %937) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %939 = %933.0;
  %940 = %938.3;
  (%939, %940, %var_6604, meta[relay.Constant][49] /* ty=Tensor[(256), int64] */)
}

def @func_7240(%var_7238: Tensor[(405), int32], %var_7239: Tensor[(1, 480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], float32, Tensor[(468), float64], Tensor[(4, 64), int64], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(3328), int64], Tensor[(1, 480), int8], Tensor[(3328), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) {
  %969 = fn (%var_7207: Tensor[(405), int32], %var_7212: Tensor[(1, 480), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], float32, Tensor[(468), float64], Tensor[(4, 64), int64], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(3328), int64], Tensor[(1, 480), int8], Tensor[(3328), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) {
    %941 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %942 = @func_5355() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %943 = cast(meta[relay.Constant][50] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %944 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 64), int64] */, dtype="int64") /* ty=Tensor[(4, 64), int64] */;
    %945 = reshape(%943, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %946 = reshape(%944, newshape=[256]) /* ty=Tensor[(256), int64] */;
    %947 = @func_5643(%945, %946) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
    %948 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %949 = cast(%var_7207, dtype="int32") /* ty=Tensor[(405), int32] */;
    %950 = reshape(%949, newshape=[15, 9, 3]) /* ty=Tensor[(15, 9, 3), int32] */;
    %951 = @func_3163(%950) /* ty=(Tensor[(15, 9, 3), int32],) */;
    %952 = cast(%var_7212, dtype="int8") /* ty=Tensor[(1, 480), int8] */;
    %953 = cast(meta[relay.Constant][52] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
    %954 = reshape(%952, newshape=[480]) /* ty=Tensor[(480), int8] */;
    %955 = reshape(%953, newshape=[3328]) /* ty=Tensor[(3328), float32] */;
    %956 = @func_5574(%954, %955) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(480), int8], float32, Tensor[(3328), int64], Tensor[(3328), float32]) */;
    %957 = @func_5298() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */;
    %958 = @func_5714() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %959 = %941.0;
    %960 = %942.0;
    %961 = %947.4;
    %962 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
    %963 = %948.0;
    %964 = %951.0;
    %965 = %956.4;
    %966 = @func_6377() /* ty=Tensor[(9, 1, 4), float64] */;
    %967 = %957.1;
    %968 = %958.0;
    (%959, %960, %961, meta[relay.Constant][50] /* ty=Tensor[(468), float64] */, meta[relay.Constant][51] /* ty=Tensor[(4, 64), int64] */, %962, %963, %964, %var_7207, %965, %var_7212, meta[relay.Constant][52] /* ty=Tensor[(3328), float32] */, %966, %967, %968)
  };
  %969(%var_7238, %var_7239) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], float32, Tensor[(468), float64], Tensor[(4, 64), int64], Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(3328), int64], Tensor[(1, 480), int8], Tensor[(3328), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) */
}

def @func_9917(%var_9915: Tensor[(2, 128), int64]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(2, 128), float32]) {
  @func_9914(%var_9915) /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32], Tensor[(2, 128), float32]) */
}

def @func_5936() -> Tensor[(468), float64] {
  @func_5934() /* ty=Tensor[(468), float64] */
}

def @func_7790() -> Tensor[(15, 9, 3), int32] {
  %970 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %970.1
}

def @func_10075(%var_10073: Tensor[(8, 28), float64]) -> (Tensor[(13, 16, 16), float32], Tensor[(14, 5, 3328), uint16], Tensor[(468), float64], Tensor[(256), int64], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32], Tensor[(14, 5, 3328), float64], Tensor[(14, 5, 3328), uint32], Tensor[(2, 112), uint32], Tensor[(8, 28), float64], Tensor[(14, 5, 3328), uint16]) {
  @func_10072(%var_10073) /* ty=(Tensor[(13, 16, 16), float32], Tensor[(14, 5, 3328), uint16], Tensor[(468), float64], Tensor[(256), int64], Tensor[(9, 1, 4), float64], Tensor[(15, 9, 3), int32], Tensor[(14, 5, 3328), float64], Tensor[(14, 5, 3328), uint32], Tensor[(2, 112), uint32], Tensor[(8, 28), float64], Tensor[(14, 5, 3328), uint16]) */
}

def @func_13370() -> (Tensor[(9, 1, 4), float64],) {
  @func_13368() /* ty=(Tensor[(9, 1, 4), float64],) */
}

def @func_5356() -> (Tensor[(14, 5, ?), float32],) {
  %973 = fn () -> (Tensor[(14, 5, ?), float32],) {
    %971 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
    %972 = %971.1;
    (%972,)
  };
  %973() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_8790() -> Tensor[(14, 5, ?), float32] {
  %975 = fn () -> Tensor[(14, 5, ?), float32] {
    %974 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
    %974.0
  };
  %975() /* ty=Tensor[(14, 5, ?), float32] */
}

def @func_9926() -> (Tensor[(14, 5, ?), float32],) {
  %976 = @func_5804() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %977 = %976.0;
  (%977,)
}

def @func_8964(%var_8962: Tensor[(252), float64], %var_8963: Tensor[(3328), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(252), float64], Tensor[(3328), int16], Tensor[(14, 5, ?), float32]) {
  @func_8960(%var_8962, %var_8963) /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(252), float64], Tensor[(3328), int16], Tensor[(14, 5, ?), float32]) */
}

def @func_9082(%var_9081: Tensor[(11, 1, 7), float32]) -> Tensor[(11, 1, 7), float32] {
  %979 = fn (%var_9075: Tensor[(11, 1, 7), float32]) -> Tensor[(11, 1, 7), float32] {
    %978 = cast(%var_9075, dtype="float32") /* ty=Tensor[(11, 1, 7), float32] */;
    cos(%978) /* ty=Tensor[(11, 1, 7), float32] */
  };
  %979(%var_9081) /* ty=Tensor[(11, 1, 7), float32] */
}

def @func_9428() -> Tensor[(14, 5, ?), float32] {
  %980 = @func_5200() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(15, 9, 3), int32]) */;
  %980.0
}

def @func_8230(%var_8225: Tensor[(468, 1), float64], %var_8226: float32) -> (Tensor[(9, 1, 4), float64], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32) {
  %981 = cast(%var_8225, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
  %982 = cast(%var_8226, dtype="float32") /* ty=float32 */;
  %983 = reshape(%981, newshape=[468, 1]) /* ty=Tensor[(468, 1), float64] */;
  %984 = reshape(%982, newshape=[]) /* ty=float32 */;
  %985 = @func_4973(%983, %984) /* ty=(Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) */;
  %986 = @func_8052() /* ty=Tensor[(9, 1, 4), float64] */;
  %987 = %985.1;
  (%986, %987, %var_8225, %var_8226)
}

def @func_8960(%var_8940: Tensor[(252), float64], %var_8947: Tensor[(3328), float32]) -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(252), float64], Tensor[(3328), int16], Tensor[(14, 5, ?), float32]) {
  %988 = cast(%var_8940, dtype="float64") /* ty=Tensor[(252), float64] */;
  %989 = cast(meta[relay.Constant][53] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %990 = reshape(%988, newshape=[9, 7, 4]) /* ty=Tensor[(9, 7, 4), float64] */;
  %991 = reshape(%989, newshape=[832, 4]) /* ty=Tensor[(832, 4), float32] */;
  %992 = @func_6107(%990, %991) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(9, 7, 4), float32], Tensor[(13, 16, 16), float32], Tensor[(832, 4), float32]) */;
  %993 = cast(meta[relay.Constant][53] /* ty=Tensor[(3328), float32] */, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %994 = asin(%993) /* ty=Tensor[(3328), float32] */;
  %995 = cast(%var_8947, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %996 = shape_of(%994, dtype="int32") /* ty=Tensor[(1), int32] */;
  %997 = cast(%994, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %998 = dyn.reshape(%995, %996, newshape=[]) /* ty=Tensor[(?), int16] */;
  %999 = @func_7388() /* ty=Tensor[(9, 1, 4), float64] */;
  %1000 = %992.0;
  %1001 = right_shift(%997, %998) /* ty=Tensor[(3328), int16] */;
  %1002 = @func_7122() /* ty=Tensor[(14, 5, ?), float32] */;
  (%999, %1000, %var_8940, %1001, %1002)
}

def @func_13319(%var_13317: Tensor[(468), float64]) -> (Tensor[(14, 5, ?), float32], Tensor[(128, 2), int64], Tensor[(1050), bool], Tensor[(468), float64], Tensor[(14, 5, ?), bool]) {
  @func_13316(%var_13317) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(128, 2), int64], Tensor[(1050), bool], Tensor[(468), float64], Tensor[(14, 5, ?), bool]) */
}

def @func_9844() -> (Tensor[(9, 1, 4), float32],) {
  %1007 = fn () -> (Tensor[(9, 1, 4), float32],) {
    %1003 = @func_6850() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
    %1004 = %1003.0;
    %1005 = cast(%1004, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
    %1006 = acosh(%1005) /* ty=Tensor[(9, 1, 4), float32] */;
    (%1006,)
  };
  %1007() /* ty=(Tensor[(9, 1, 4), float32],) */
}

def @func_12556() -> (Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32]) {
  %1008 = @func_7972() /* ty=(Tensor[(468), float64], Tensor[(9, 1, 4), float64]) */;
  %1009 = @func_9178() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %1010 = %1008.1;
  %1011 = %1009.0;
  (%1010, %1011)
}

def @func_7972() -> (Tensor[(468), float64], Tensor[(9, 1, 4), float64]) {
  %1012 = @func_7376() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */;
  %1013 = @func_5934() /* ty=Tensor[(468), float64] */;
  %1014 = %1012.0;
  (%1013, %1014)
}

def @func_2438(%var_2431: Tensor[(13, 16, 16), float32]) -> (Tensor[(13, 16, 16), float32],) {
  %1015 = cast(%var_2431, dtype="float32") /* ty=Tensor[(13, 16, 16), float32] */;
  %1016 = asinh(%1015) /* ty=Tensor[(13, 16, 16), float32] */;
  (%1016,)
}

def @func_12017(%var_11965: Tensor[(468), float64], %var_12014: float32, %var_12015: Tensor[(128, 2), int64]) -> (Tensor[(14, 5, ?), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), bool], Tensor[(468), float64], Tensor[(9, 1, 4), float64], Tensor[(468), float64], Tensor[(6, 13, ?), bool], float32, Tensor[(128, 2), int64]) {
  %1017 = @func_6243() /* ty=(Tensor[(14, 5, ?), bool],) */;
  %1018 = %1017.0;
  %1019 = cast(%1018, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
  %1020 = @func_4732() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %1021 = @func_9178() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %1022 = cast(%var_11965, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1023 = reshape(%1022, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1024 = @func_11699(%1023) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(468), float64], Tensor[(468), float64], Tensor[(14, 5, ?), bool], Tensor[(9, 1, 4), float64]) */;
  %1025 = @func_10378() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(8, 4, 7), float32], Tensor[(224), float64], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64]) */;
  %1026 = @func_9242() /* ty=(Tensor[(468), float64],) */;
  %1027 = cast(%var_11965, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1028 = cast(%var_12014, dtype="float32") /* ty=float32 */;
  %1029 = cast(%var_12015, dtype="int64") /* ty=Tensor[(128, 2), int64] */;
  %1030 = reshape(%1027, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %1031 = reshape(%1028, newshape=[]) /* ty=float32 */;
  %1032 = reshape(%1029, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %1033 = @func_866(%1030, %1031, %1032) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
  %1034 = cos(%1019) /* ty=Tensor[(14, 5, ?), float64] */;
  %1035 = %1020.0;
  %1036 = %1021.0;
  %1037 = %1024.6;
  %1038 = %1025.4;
  %1039 = %1026.0;
  %1040 = %1033.2;
  (%1034, %1035, %1036, %1037, %var_11965, %1038, %1039, %1040, %var_12014, %var_12015)
}

def @func_9678() -> Tensor[(9, 1, 4), float64] {
  %1042 = fn () -> Tensor[(9, 1, 4), float64] {
    %1041 = @func_7350() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %1041.0
  };
  %1042() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_9499(%var_9496: Tensor[(1050), bool], %var_9497: Tensor[(405), int32], %var_9498: Tensor[(4, 120), int8]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, 1), int16], Tensor[(144), uint32], Tensor[(14, 5, ?), bool], Tensor[(405), int32], Tensor[(4, 120), bool]) {
  @func_9494(%var_9496, %var_9497, %var_9498) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64], Tensor[(14, 5, 15), float64], Tensor[(1050), bool], Tensor[(6, 13, 1), int16], Tensor[(144), uint32], Tensor[(14, 5, ?), bool], Tensor[(405), int32], Tensor[(4, 120), bool]) */
}

def @func_12963(%var_12911: Tensor[(14, 5, 9), bool], %var_12933: Tensor[(468), float64], %var_12934: Tensor[(256), int64]) -> (Tensor[(14, 5, ?), float32], Tensor[(9, 8, 2), bool], Tensor[(144), uint32], Tensor[(14, 5, 9), uint32], Tensor[(9, 1, 4), float64], float32, Tensor[(468), float64], Tensor[(256), int64]) {
  %1043 = cast(meta[relay.Constant][54] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %1044 = cast(meta[relay.Constant][54] /* ty=Tensor[(144), uint32] */, dtype="uint32") /* ty=Tensor[(144), uint32] */;
  %1045 = reshape(%1043, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %1046 = reshape(%1044, newshape=[9, 8, 2]) /* ty=Tensor[(9, 8, 2), uint32] */;
  %1047 = @func_1705(%1045, %1046) /* ty=(Tensor[(9, 8, 2), bool], Tensor[(6, 13, 1), int16], float32) */;
  %1048 = @func_4883() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float32]) */;
  %1049 = %1048.0;
  %1050 = cast(%1049, dtype="uint32") /* ty=Tensor[(14, 5, ?), uint32] */;
  %1051 = cast(%var_12911, dtype="uint32") /* ty=Tensor[(14, 5, 9), uint32] */;
  %1052 = cast(%var_12933, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1053 = cast(%var_12934, dtype="int64") /* ty=Tensor[(256), int64] */;
  %1054 = reshape(%1052, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %1055 = reshape(%1053, newshape=[256]) /* ty=Tensor[(256), int64] */;
  %1056 = @func_5643(%1054, %1055) /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(256), int64], Tensor[(468), float64], float32, Tensor[(256), int64]) */;
  %1057 = @func_12509() /* ty=Tensor[(14, 5, ?), float32] */;
  %1058 = %1047.0;
  %1059 = left_shift(%1050, %1051) /* ty=Tensor[(14, 5, 9), uint32] */;
  %1060 = @func_12706() /* ty=Tensor[(9, 1, 4), float64] */;
  %1061 = %1056.4;
  (%1057, %1058, meta[relay.Constant][54] /* ty=Tensor[(144), uint32] */, %1059, %1060, %1061, %var_12933, %var_12934)
}

def @func_5300() -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) {
  @func_5298() /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), bool]) */
}

def @func_6850() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
  %1062 = @func_5729() /* ty=(Tensor[(9, 1, 4), float64],) */;
  %1063 = %1062.0;
  %1064 = @func_3769() /* ty=Tensor[(9, 1, 4), float64] */;
  (%1063, %1064)
}

def @func_7052() -> Tensor[(3150), float64] {
  @func_7050() /* ty=Tensor[(3150), float64] */
}

def @func_10380() -> (Tensor[(9, 1, 4), float64], Tensor[(8, 4, 7), float32], Tensor[(224), float64], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64]) {
  @func_10378() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(8, 4, 7), float32], Tensor[(224), float64], Tensor[(14, 5, ?), float32], Tensor[(9, 1, 4), float64]) */
}

def @func_9928() -> (Tensor[(14, 5, ?), float32],) {
  @func_9926() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_4976(%var_4974: Tensor[(468, 1), float64], %var_4975: float32) -> (Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) {
  %1075 = fn (%var_4968: Tensor[(468, 1), float64], %var_4969: float32) -> (Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) {
    %1065 = @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */;
    %1066 = cast(%var_4968, dtype="float64") /* ty=Tensor[(468, 1), float64] */;
    %1067 = cast(%var_4969, dtype="float32") /* ty=float32 */;
    %1068 = cast(meta[relay.Constant][55] /* ty=Tensor[(256), int64] */, dtype="int64") /* ty=Tensor[(256), int64] */;
    %1069 = reshape(%1066, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %1070 = reshape(%1067, newshape=[]) /* ty=float32 */;
    %1071 = reshape(%1068, newshape=[256]) /* ty=Tensor[(256), int64] */;
    %1072 = @func_866(%1069, %1070, %1071) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), bool], Tensor[(6, 13, ?), float64], Tensor[(8, 16, 2), int64], Tensor[(256), int64]) */;
    %1073 = %1065.5;
    %1074 = %1072.2;
    (%1073, %1074, %var_4968, %var_4969, meta[relay.Constant][55] /* ty=Tensor[(256), int64] */)
  };
  %1075(%var_4974, %var_4975) /* ty=(Tensor[(405), int32], Tensor[(6, 13, ?), bool], Tensor[(468, 1), float64], float32, Tensor[(256), int64]) */
}

def @func_4501(%var_4500: Tensor[(225, 14), uint32]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float64], Tensor[(15, 15, 14), uint32], Tensor[(225, 14), uint32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %1087 = fn (%var_4438: Tensor[(225, 14), uint32]) -> (Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float64], Tensor[(15, 15, 14), uint32], Tensor[(225, 14), uint32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
    %1076 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %1077 = cast(%var_4438, dtype="uint32") /* ty=Tensor[(225, 14), uint32] */;
    %1078 = reshape(%1077, newshape=[15, 15, 14]) /* ty=Tensor[(15, 15, 14), uint32] */;
    %1079 = @func_3944(%1078) /* ty=(Tensor[(15, 15, 14), uint32],) */;
    %1080 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    %1081 = cast(%1080, dtype="float32") /* ty=Tensor[(14, 5, ?), float32] */;
    %1082 = %1076.0;
    %1083 = @func_4075() /* ty=Tensor[(14, 5, ?), float64] */;
    %1084 = %1079.0;
    %1085 = @func_4053() /* ty=Tensor[(14, 5, ?), float32] */;
    %1086 = cosh(%1081) /* ty=Tensor[(14, 5, ?), float32] */;
    (%1082, %1083, %1084, %var_4438, %1085, %1086)
  };
  %1087(%var_4500) /* ty=(Tensor[(14, 5, ?), bool], Tensor[(14, 5, ?), float64], Tensor[(15, 15, 14), uint32], Tensor[(225, 14), uint32], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */
}

def @func_9043() -> Tensor[(9, 1, 4), float64] {
  @func_6794() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_8040(%var_8039: Tensor[(14, 5, 15), bool]) -> Tensor[(14, 5, 15), float64] {
  %1091 = fn (%var_8031: Tensor[(14, 5, 15), bool]) -> Tensor[(14, 5, 15), float64] {
    %1088 = @func_5884() /* ty=Tensor[(14, 5, ?), bool] */;
    %1089 = cast(%1088, dtype="float64") /* ty=Tensor[(14, 5, ?), float64] */;
    %1090 = cast(%var_8031, dtype="float64") /* ty=Tensor[(14, 5, 15), float64] */;
    mod(%1089, %1090) /* ty=Tensor[(14, 5, 15), float64] */
  };
  %1091(%var_8039) /* ty=Tensor[(14, 5, 15), float64] */
}

def @func_4053() -> Tensor[(14, 5, ?), float32] {
  %1092 = @func_3862() /* ty=(Tensor[(14, 5, ?), float32],) */;
  %1092.0
}

def @func_7050() -> Tensor[(3150), float64] {
  @func_5404() /* ty=Tensor[(3150), float64] */
}

def @func_8662() -> Tensor[(14, 5, ?), float32] {
  %1093 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
  %1093.1
}

def @func_12043(%var_12041: Tensor[(9, 11, 15), int16], %var_12042: Tensor[(9, 11, 15), int16]) -> (Tensor[(9, 11, 15), int16], Tensor[(14, 5, ?), float32]) {
  @func_12039(%var_12041, %var_12042) /* ty=(Tensor[(9, 11, 15), int16], Tensor[(14, 5, ?), float32]) */
}

def @func_10299(%var_10298: Tensor[(16, 5, 4), int32]) -> (Tensor[(16, 5, 4), int32], Tensor[(16, 5, 4), float64]) {
  %1101 = fn (%var_10283: Tensor[(16, 5, 4), int32]) -> (Tensor[(16, 5, 4), int32], Tensor[(16, 5, 4), float64]) {
    %1094 = cast(meta[relay.Constant][56] /* ty=Tensor[(16, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(16, 5, 4), int32] */;
    %1095 = shape_of(%var_10283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1096 = cast(%var_10283, dtype="int32") /* ty=Tensor[(16, 5, 4), int32] */;
    %1097 = dyn.reshape(%1094, %1095, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1098 = cast(meta[relay.Constant][56] /* ty=Tensor[(16, 5, 4), int32] */, dtype="float64") /* ty=Tensor[(16, 5, 4), float64] */;
    %1099 = add(%1096, %1097) /* ty=Tensor[(16, 5, 4), int32] */;
    %1100 = log2(%1098) /* ty=Tensor[(16, 5, 4), float64] */;
    (%1099, %1100)
  };
  %1101(%var_10298) /* ty=(Tensor[(16, 5, 4), int32], Tensor[(16, 5, 4), float64]) */
}

def @func_5806() -> (Tensor[(14, 5, ?), float32],) {
  @func_5804() /* ty=(Tensor[(14, 5, ?), float32],) */
}

def @func_7377() -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
  %1105 = fn () -> (Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) {
    %1102 = @func_6279() /* ty=(Tensor[(9, 1, 4), float64],) */;
    %1103 = %1102.0;
    %1104 = @func_6377() /* ty=Tensor[(9, 1, 4), float64] */;
    (%1103, %1104)
  };
  %1105() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(9, 1, 4), float64]) */
}

def @func_7007(%var_7005: float32, %var_7006: Tensor[(468), float64]) -> (Tensor[(15, 9, 3), int32], Tensor[(14, 5, ?), bool], Tensor[(6, 13, ?), bool], float32, float32, Tensor[(468), float64], Tensor[(256), int64]) {
  @func_7003(%var_7005, %var_7006) /* ty=(Tensor[(15, 9, 3), int32], Tensor[(14, 5, ?), bool], Tensor[(6, 13, ?), bool], float32, float32, Tensor[(468), float64], Tensor[(256), int64]) */
}

def @func_4700() -> Tensor[(9, 1, 4), float64] {
  %1106 = fn () -> Tensor[(9, 1, 4), float64] {
    @func_3769() /* ty=Tensor[(9, 1, 4), float64] */
  };
  %1106() /* ty=Tensor[(9, 1, 4), float64] */
}

def @func_12347() -> (Tensor[(9, 12, 4), uint16],) {
  %1109 = fn () -> (Tensor[(9, 12, 4), uint16],) {
    %1107 = @func_7704() /* ty=(Tensor[(9, 12, 4), bool], Tensor[(9, 12, 4), uint16]) */;
    %1108 = %1107.1;
    (%1108,)
  };
  %1109() /* ty=(Tensor[(9, 12, 4), uint16],) */
}

def @func_9669(%var_9667: Tensor[(14, 5, 12), bool], %var_9668: Tensor[(14, 5, 12), int16]) -> (Tensor[(14, 5, 12), bool], Tensor[(6, 13, ?), bool], float32) {
  @func_9665(%var_9667, %var_9668) /* ty=(Tensor[(14, 5, 12), bool], Tensor[(6, 13, ?), bool], float32) */
}

def @func_5025() -> (Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) {
  @func_5023() /* ty=(Tensor[(468, 1), float64], Tensor[(468), float64], float32, Tensor[(9, 1, 4), float64]) */
}

def @func_12274() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
  %1113 = fn () -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) {
    %1110 = @func_6944() /* ty=(Tensor[(9, 1, 4), float64], Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */;
    %1111 = @func_9428() /* ty=Tensor[(14, 5, ?), float32] */;
    %1112 = %1110.1;
    (%1111, %1112)
  };
  %1113() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32]) */
}

def @func_5127() -> (Tensor[(14, 5, ?), bool],) {
  %1116 = fn () -> (Tensor[(14, 5, ?), bool],) {
    %1114 = @func_3675() /* ty=(Tensor[(14, 5, ?), bool],) */;
    %1115 = %1114.0;
    (%1115,)
  };
  %1116() /* ty=(Tensor[(14, 5, ?), bool],) */
}

def @func_8376(%var_8374: Tensor[(256), int64]) -> (Tensor[(15, 9, 3), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(12, 7, 8), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(14, 5, ?), float64]) {
  @func_8373(%var_8374) /* ty=(Tensor[(15, 9, 3), int32], Tensor[(7, 1, 5), float32], Tensor[(35), float32], Tensor[(9, 1, 4), float64], Tensor[(256), int64], Tensor[(12, 7, 8), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(14, 5, ?), float64]) */
}

def @func_4611() -> (Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) {
  @func_4609() /* ty=(Tensor[(14, 5, ?), float32], Tensor[(14, 5, ?), float32], Tensor[(15, 15, 14), uint32], Tensor[(3150), uint32], Tensor[(15, 9, 3), int32], Tensor[(405), int32], Tensor[(14, 5, ?), bool], Tensor[(15, 9, 3), int32]) */
}

def @func_13257() -> Tensor[(9, 12, 4), uint16] {
  @func_13255() /* ty=Tensor[(9, 12, 4), uint16] */
}

def @func_12481() -> (Tensor[(15, 9, 3), int32],) {
  @func_12479() /* ty=(Tensor[(15, 9, 3), int32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen884/build/output.py", line 3526, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:36:38] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

