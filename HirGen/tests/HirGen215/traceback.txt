==========mod==========
#[version = "0.0.5"]
def @func_543() -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) {
  %0 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
  %1 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  (%0, %1)
}

def @func_2246() -> (Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) {
  %2 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 880), float64] */, dtype="float64") /* ty=Tensor[(1, 880), float64] */;
  %4 = reshape(%3, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %5 = @func_2110(%4) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) */;
  %6 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %7 = %2.0;
  %8 = %5.2;
  %9 = %6.1;
  (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(1, 880), float64] */, %9)
}

def @func_2957() -> (Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(910), float64], Tensor[(80), uint16], Tensor[(480), uint16]) {
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %12 = reshape(%10, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %13 = reshape(%11, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %15 = reshape(%14, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %16 = @func_1877(%15) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) */;
  %17 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
  %18 = @func_620(%12, %13) /* ty=Tensor[(5, 14, 13), float64] */;
  %19 = %16.3;
  (%17, %18, meta[relay.Constant][1] /* ty=Tensor[(910), float64] */, %19, meta[relay.Constant][2] /* ty=Tensor[(480), uint16] */)
}

def @func_1656(%var_1594: Tensor[(455, 2), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(455, 2), float64], Tensor[(3, 8, 9), int16]) {
  %20 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %21 = cast(%var_1594, dtype="float64") /* ty=Tensor[(455, 2), float64] */;
  %22 = cast(%var_1594, dtype="float64") /* ty=Tensor[(455, 2), float64] */;
  %23 = reshape(%21, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %24 = reshape(%22, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %25 = cast(%var_1594, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %26 = sinh(%25) /* ty=Tensor[(455, 2), float32] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(455, 2), float64] */;
  %28 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %29 = %20.0;
  %30 = @func_620(%23, %24) /* ty=Tensor[(5, 14, 13), float64] */;
  %31 = atanh(%27) /* ty=Tensor[(455, 2), float64] */;
  %32 = %28.0;
  (%29, %30, %31, %32)
}

def @func_3183(%var_3124: Tensor[(80), uint16], %var_3125: Tensor[(4, 120), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) {
  %33 = cast(%var_3124, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %34 = cast(%var_3125, dtype="uint16") /* ty=Tensor[(4, 120), uint16] */;
  %35 = reshape(%33, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %36 = reshape(%34, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %37 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %38 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
  %39 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %40 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
  %41 = @func_799(%35, %36) /* ty=Tensor[(6, 5, 16), uint64] */;
  %42 = %37.0;
  %43 = %38.2;
  %44 = %39.1;
  %45 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  (%40, %41, %var_3124, %var_3125, %42, %43, %44, %45)
}

def @func_2800() -> (Tensor[(3, 8, 9), float64],) {
  %46 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %47 = %46.0;
  (%47,)
}

def @func_5531() -> (Tensor[(3, 8, 9), float64],) {
  %48 = @func_4739() /* ty=(Tensor[(9, 9, 6), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %49 = %48.1;
  (%49,)
}

def @func_4964() -> (Tensor[(3, 8, 9), float64],) {
  %50 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %51 = %50.0;
  (%51,)
}

def @func_833(%var_811: Tensor[(3, 13, 1), float64]) -> (Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) {
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 768), int8] */, dtype="int8") /* ty=Tensor[(1, 768), int8] */;
  %53 = reshape(%52, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
  %54 = cast(%var_811, dtype="float64") /* ty=Tensor[(3, 13, 1), float64] */;
  %55 = asinh(%54) /* ty=Tensor[(3, 13, 1), float64] */;
  %56 = cast(%55, dtype="int8") /* ty=Tensor[(3, 13, 1), int8] */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 768), int8] */, dtype="int8") /* ty=Tensor[(1, 768), int8] */;
  %58 = multiply(%56, %57) /* ty=Tensor[(3, 13, 768), int8] */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 768), int8] */, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
  %60 = cast(%58, dtype="bool") /* ty=Tensor[(3, 13, 768), bool] */;
  %61 = @func_686(%53) /* ty=Tensor[(16, 8, 6), int8] */;
  %62 = logical_and(%59, %60) /* ty=Tensor[(3, 13, 768), bool] */;
  %63 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  (%61, %62, %63)
}

def @func_4217() -> Tensor[(3, 8, 9), float64] {
  %64 = @func_3525() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %64.1
}

def @func_255() -> Tensor[(3, 8, 9), bool] {
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 8, 9), bool] */, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %66 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(3, 8, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 8, 9), bool] */, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%67, %68) /* ty=Tensor[(3, 8, 9), bool] */
}

def @func_3944(%var_3874: Tensor[(4, 2, 14), float32], %var_3880: Tensor[(216), bool]) -> (Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(3, 8, 9), float64], Tensor[(4, 2, 14), float64]) {
  %69 = cast(%var_3880, dtype="bool") /* ty=Tensor[(216), bool] */;
  %70 = reshape(%69, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
  %71 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
  %72 = cast(%var_3874, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
  %73 = rsqrt(%72) /* ty=Tensor[(4, 2, 14), float32] */;
  %74 = cast(%var_3874, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %78 = divide(%76, %77) /* ty=Tensor[(4, 2, 14), float64] */;
  %79 = cast(%73, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %83 = @func_577(%70) /* ty=Tensor[(3, 8, 9), float32] */;
  %84 = %71.2;
  %85 = power(%81, %82) /* ty=Tensor[(4, 2, 14), float64] */;
  (%83, %var_3880, %84, %85)
}

def @func_2126() -> (Tensor[(16, 10, 14), float64], Tensor[(3, 8, 9), bool]) {
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 14), float64] */;
  %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
  %88 = @func_2007() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) */;
  %89 = divide(%86, %87) /* ty=Tensor[(16, 10, 14), float64] */;
  %90 = %88.0;
  (%89, %90)
}

def @func_4911(%var_4869: Tensor[(11, 1, 15), bool], %var_4870: Tensor[(11, 15, 15), bool]) -> (Tensor[(11, 15, 15), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(1, 2, 10), bool], Tensor[(6, 5, 16), float32], Tensor[(480), uint16], Tensor[(11, 15, 15), int64]) {
  %91 = cast(%var_4869, dtype="bool") /* ty=Tensor[(11, 1, 15), bool] */;
  %92 = cast(%var_4870, dtype="bool") /* ty=Tensor[(11, 15, 15), bool] */;
  %93 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
  %94 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %95 = @func_949() /* ty=(Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) */;
  %96 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %97 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), uint16] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %98 = reshape(%96, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %99 = reshape(%97, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint64] */;
  %100 = @func_1234(%98, %99) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %101 = cast(%var_4870, dtype="float32") /* ty=Tensor[(11, 15, 15), float32] */;
  %102 = log2(%101) /* ty=Tensor[(11, 15, 15), float32] */;
  %103 = cast(%102, dtype="int64") /* ty=Tensor[(11, 15, 15), int64] */;
  %104 = cast(%var_4869, dtype="int64") /* ty=Tensor[(11, 1, 15), int64] */;
  %105 = logical_or(%91, %92) /* ty=Tensor[(11, 15, 15), bool] */;
  %106 = %93.3;
  %107 = %94.0;
  %108 = %95.2;
  %109 = %100.3;
  %110 = left_shift(%103, %104) /* ty=Tensor[(11, 15, 15), int64] */;
  (%105, %106, %107, %108, %109, meta[relay.Constant][8] /* ty=Tensor[(480), uint16] */, %110)
}

def @func_638() -> Tensor[(3, 8, 9), float64] {
  @func_332() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_4316(%var_4310: Tensor[(8, 16, 16), uint16], %var_4311: Tensor[(8, 16, 16), uint16]) -> (Tensor[(8, 16, 16), uint16],) {
  %111 = cast(%var_4311, dtype="uint16") /* ty=Tensor[(8, 16, 16), uint16] */;
  %112 = shape_of(%var_4310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_4310, dtype="uint16") /* ty=Tensor[(8, 16, 16), uint16] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %115 = right_shift(%113, %114) /* ty=Tensor[(8, 16, 16), uint16] */;
  (%115,)
}

def @func_4396() -> Tensor[(3, 8, 9), float64] {
  %116 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
  %116.3
}

def @func_3962() -> (Tensor[(5, 15, 16), float64],) {
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 16), float64] */;
  %118 = tan(%117) /* ty=Tensor[(5, 15, 16), float64] */;
  (%118,)
}

def @func_4485() -> (Tensor[(3, 8, 9), bool], Tensor[(768), int8]) {
  %119 = @func_2126() /* ty=(Tensor[(16, 10, 14), float64], Tensor[(3, 8, 9), bool]) */;
  %120 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %121 = %119.1;
  %122 = %120.2;
  (%121, %122)
}

def @func_2110(%var_2095: Tensor[(16, 11, 5), float64]) -> (Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) {
  %123 = cast(%var_2095, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
  %124 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 910), float64] */, dtype="float64") /* ty=Tensor[(1, 910), float64] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 910), float64] */, dtype="float64") /* ty=Tensor[(1, 910), float64] */;
  %126 = reshape(%124, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %127 = reshape(%125, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %128 = sin(%123) /* ty=Tensor[(16, 11, 5), float64] */;
  %129 = @func_620(%126, %127) /* ty=Tensor[(5, 14, 13), float64] */;
  (%128, %129, meta[relay.Constant][10] /* ty=Tensor[(1, 910), float64] */)
}

def @func_1918() -> (Tensor[(3, 8, 9), float64],) {
  %130 = @func_1013() /* ty=Tensor[(3, 8, 9), float64] */;
  (%130,)
}

def @func_3448() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %131 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %132 = @func_1186() /* ty=Tensor[(3, 8, 9), float64] */;
  (%131, %132)
}

def @func_2319(%var_2249: Tensor[(13, 5, 16), int16], %var_2250: Tensor[(13, 5, 16), int16], %var_2314: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) {
  %133 = cast(%var_2250, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %134 = shape_of(%var_2249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%var_2249, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = equal(%135, %136) /* ty=Tensor[(13, 5, 16), bool] */;
  %138 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(13, 5, 16), uint32] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="uint32") /* ty=Tensor[(13, 5, 16), uint32] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %142 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
  %143 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %144 = cast(meta[relay.Constant][11] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(480), uint16] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %146 = reshape(%144, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %147 = reshape(%145, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint64] */;
  %148 = @func_1234(%146, %147) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %149 = cast(%var_2249, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %150 = atanh(%149) /* ty=Tensor[(13, 5, 16), float64] */;
  %151 = cast(%137, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %155 = cast(%var_2314, dtype="int8") /* ty=Tensor[(13, 5, 16), int8] */;
  %156 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%137, dtype="int8") /* ty=Tensor[(13, 5, 16), int8] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %159 = left_shift(%140, %141) /* ty=Tensor[(13, 5, 16), uint32] */;
  %160 = %142.1;
  %161 = %143.2;
  %162 = %148.2;
  %163 = bitwise_or(%153, %154) /* ty=Tensor[(13, 5, 16), int32] */;
  %164 = logical_xor(%157, %158) /* ty=Tensor[(13, 5, 16), int8] */;
  (%159, %160, %161, %162, meta[relay.Constant][11] /* ty=Tensor[(480), uint16] */, %163, %164)
}

def @func_1877(%var_1864: Tensor[(480), uint16]) -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) {
  %165 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %166 = cast(meta[relay.Constant][12] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %167 = cast(%var_1864, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %168 = reshape(%166, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %169 = reshape(%167, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %170 = @func_799(%168, %169) /* ty=Tensor[(6, 5, 16), uint64] */;
  %171 = cast(%170, dtype="uint16") /* ty=Tensor[(6, 5, 16), uint16] */;
  %172 = cast(%170, dtype="uint64") /* ty=Tensor[(6, 5, 16), uint64] */;
  %173 = reshape(%171, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %174 = reshape(%172, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint64] */;
  %175 = @func_1234(%173, %174) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %176 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
  %177 = %165.0;
  %178 = %175.2;
  (%176, %177, %170, meta[relay.Constant][12] /* ty=Tensor[(80), uint16] */, %var_1864, %178)
}

def @func_507() -> Tensor[(3, 8, 9), int16] {
  %179 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %181 = erf(%180) /* ty=Tensor[(3, 8, 9), float32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %183 = sin(%182) /* ty=Tensor[(3, 8, 9), float32] */;
  %184 = cast(%183, dtype="int16") /* ty=Tensor[(3, 8, 9), int16] */;
  %185 = shape_of(%181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%181, dtype="int16") /* ty=Tensor[(3, 8, 9), int16] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%186, %187) /* ty=Tensor[(3, 8, 9), int16] */
}

def @func_3760() -> (Tensor[(1, 2, 10), uint64],) {
  %188 = @func_2564() /* ty=(Tensor[(1, 2, 10), uint64],) */;
  %189 = %188.0;
  (%189,)
}

def @func_3784() -> Tensor[(3, 8, 9), float64] {
  @func_1574() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3858(%var_3851: Tensor[(14, 7, 5), int8], %var_3852: Tensor[(14, 7, 5), int8]) -> (Tensor[(14, 7, 5), int8],) {
  %190 = cast(%var_3852, dtype="int8") /* ty=Tensor[(14, 7, 5), int8] */;
  %191 = shape_of(%var_3851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%var_3851, dtype="int8") /* ty=Tensor[(14, 7, 5), int8] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %194 = right_shift(%192, %193) /* ty=Tensor[(14, 7, 5), int8] */;
  (%194,)
}

def @func_4429() -> Tensor[(910), float64] {
  %195 = @func_2007() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) */;
  %195.2
}

def @func_3840() -> Tensor[(3, 8, 9), float64] {
  %196 = @func_1192() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %196.0
}

def @func_3683(%var_3639: Tensor[(28), float64], %var_3660: Tensor[(7, 4, 8), float32], %var_3670: Tensor[(7, 4, 8), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(1040), int16], Tensor[(3, 8, 9), int16], Tensor[(28), float64], Tensor[(3, 8, 9), float64], Tensor[(7, 4, 8), int32]) {
  %197 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %198 = @func_2560() /* ty=(Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) */;
  %199 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
  %200 = cast(%var_3639, dtype="float64") /* ty=Tensor[(28), float64] */;
  %201 = reshape(%200, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), float64] */;
  %202 = @func_1793(%201) /* ty=Tensor[(7, 4, 1), float64] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(7, 4, 1), float32] */;
  %204 = acos(%203) /* ty=Tensor[(7, 4, 1), float32] */;
  %205 = cast(%204, dtype="uint64") /* ty=Tensor[(7, 4, 1), uint64] */;
  %206 = cast(%var_3660, dtype="uint64") /* ty=Tensor[(7, 4, 8), uint64] */;
  %207 = minimum(%205, %206) /* ty=Tensor[(7, 4, 8), uint64] */;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
  %209 = atanh(%208) /* ty=Tensor[(7, 4, 8), float64] */;
  %210 = cast(%var_3670, dtype="int32") /* ty=Tensor[(7, 4, 8), int32] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="int32") /* ty=Tensor[(7, 4, 8), int32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %214 = %197.0;
  %215 = %198.1;
  %216 = %199.2;
  %217 = @func_2995() /* ty=Tensor[(3, 8, 9), float64] */;
  %218 = logical_xor(%212, %213) /* ty=Tensor[(7, 4, 8), int32] */;
  (%214, %215, %216, %var_3639, %217, %218)
}

def @func_4285() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %219 = @func_3525() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %220 = @func_4225() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %221 = %219.0;
  %222 = %220.0;
  (%221, %222)
}

def @func_5689() -> (Tensor[(3, 8, 9), float64],) {
  %223 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %224 = %223.0;
  (%224,)
}

def @func_2086(%var_2062: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) {
  %225 = cast(%var_2062, dtype="float64") /* ty=Tensor[(39), float64] */;
  %226 = reshape(%225, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
  %227 = @func_833(%226) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
  %228 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %229 = %227.1;
  (%228, %229, %var_2062)
}

def @func_609() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) {
  %230 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %231 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  (%230, %231)
}

def @func_4577() -> (Tensor[(3, 8, 9), float64],) {
  %232 = @func_4225() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %233 = %232.0;
  (%233,)
}

def @func_1574() -> Tensor[(3, 8, 9), float64] {
  @func_332() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3714() -> (Tensor[(15, 12, 16), float64],) {
  %234 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
  %235 = sigmoid(%234) /* ty=Tensor[(15, 12, 16), float32] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %237 = tan(%236) /* ty=Tensor[(15, 12, 16), float64] */;
  %238 = cast(%237, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
  %239 = cosh(%238) /* ty=Tensor[(15, 12, 16), float64] */;
  (%239,)
}

def @func_4153() -> Tensor[(3, 8, 9), float64] {
  @func_3840() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_2774(%var_2768: Tensor[(720), float64], %var_2769: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(14, 2), float64], Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(480), uint16], Tensor[(1, 1040), int16]) {
  %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 2), float64] */;
  %241 = reshape(%240, newshape=[28]) /* ty=Tensor[(28), float64] */;
  %242 = @func_1816(%241) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(7, 4, 1), float64], Tensor[(28), float64]) */;
  %243 = cast(%var_2768, dtype="float64") /* ty=Tensor[(720), float64] */;
  %244 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %245 = cast(%244, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %246 = cast(%var_2769, dtype="float64") /* ty=Tensor[(39), float64] */;
  %247 = reshape(%243, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float64] */;
  %248 = reshape(%245, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %249 = reshape(%246, newshape=[39]) /* ty=Tensor[(39), float64] */;
  %250 = @func_1536(%247, %248, %249) /* ty=(Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) */;
  %251 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1040), int16] */, dtype="int16") /* ty=Tensor[(1, 1040), int16] */;
  %252 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1040), int16] */, dtype="int16") /* ty=Tensor[(1, 1040), int16] */;
  %253 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 1040), int16] */, dtype="bool") /* ty=Tensor[(1, 1040), bool] */;
  %254 = reshape(%251, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
  %255 = reshape(%252, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
  %256 = reshape(%253, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %257 = @func_2319(%254, %255, %256) /* ty=(Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) */;
  %258 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %259 = %242.0;
  %260 = %250.3;
  %261 = %257.3;
  (%258, %259, meta[relay.Constant][14] /* ty=Tensor[(14, 2), float64] */, %244, %260, %var_2768, %var_2769, %261, meta[relay.Constant][15] /* ty=Tensor[(1, 1040), int16] */)
}

def @func_4225() -> (Tensor[(3, 8, 9), float64],) {
  %262 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %264 = log(%263) /* ty=Tensor[(3, 8, 9), float64] */;
  (%264,)
}

def @func_2995() -> Tensor[(3, 8, 9), float64] {
  %265 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %265.0
}

def @func_686(%var_671: Tensor[(16, 8, 6), int8]) -> Tensor[(16, 8, 6), int8] {
  %266 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 8, 6), int8] */, dtype="int8") /* ty=Tensor[(16, 8, 6), int8] */;
  %267 = shape_of(%var_671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_671, dtype="int8") /* ty=Tensor[(16, 8, 6), int8] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%268, %269) /* ty=Tensor[(16, 8, 6), int8] */
}

def @func_2560() -> (Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) {
  %270 = cast(meta[relay.Constant][17] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %271 = cast(meta[relay.Constant][17] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %272 = cast(meta[relay.Constant][17] /* ty=Tensor[(1040), int16] */, dtype="bool") /* ty=Tensor[(1040), bool] */;
  %273 = reshape(%270, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
  %274 = reshape(%271, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
  %275 = reshape(%272, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %276 = @func_2319(%273, %274, %275) /* ty=(Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) */;
  %277 = cast(meta[relay.Constant][17] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(1040), int16] */, dtype="bool") /* ty=Tensor[(1040), bool] */;
  %280 = reshape(%277, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
  %281 = reshape(%278, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
  %282 = reshape(%279, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
  %283 = @func_2319(%280, %281, %282) /* ty=(Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) */;
  %284 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %285 = cast(meta[relay.Constant][18] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %286 = reshape(%285, newshape=[80]) /* ty=Tensor[(80), uint16] */;
  %287 = @func_1451(%286) /* ty=(Tensor[(11, 10, 3), float64], Tensor[(1, 2, 10), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(3, 8, 9), int16], Tensor[(11, 10, 3), uint64]) */;
  %288 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
  %289 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %290 = %289.0;
  %291 = cast(%290, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %292 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%288, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %295 = %276.2;
  %296 = %283.6;
  %297 = %284.0;
  %298 = %287.4;
  %299 = minimum(%293, %294) /* ty=Tensor[(3, 8, 9), uint32] */;
  (%295, meta[relay.Constant][17] /* ty=Tensor[(1040), int16] */, %296, %297, %298, meta[relay.Constant][18] /* ty=Tensor[(80), uint16] */, %299)
}

def @func_3111(%var_3089: Tensor[(14, 880), float64]) -> (Tensor[(14, 880), bool], Tensor[(14, 880), uint8]) {
  %300 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
  %301 = %300.2;
  %302 = cast(%301, dtype="bool") /* ty=Tensor[(1, 880), bool] */;
  %303 = cast(%var_3089, dtype="bool") /* ty=Tensor[(14, 880), bool] */;
  %304 = cast(%301, dtype="uint8") /* ty=Tensor[(1, 880), uint8] */;
  %305 = cast(%var_3089, dtype="uint8") /* ty=Tensor[(14, 880), uint8] */;
  %306 = equal(%302, %303) /* ty=Tensor[(14, 880), bool] */;
  %307 = left_shift(%304, %305) /* ty=Tensor[(14, 880), uint8] */;
  (%306, %307)
}

def @func_1192() -> (Tensor[(3, 8, 9), float64],) {
  %308 = @func_1013() /* ty=Tensor[(3, 8, 9), float64] */;
  (%308,)
}

def @func_3353() -> Tensor[(3, 8, 9), float64] {
  @func_2854() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_5102(%var_5086: Tensor[(2, 240), uint16]) -> (Tensor[(2, 240), uint32], Tensor[(2, 240), float32]) {
  %309 = @func_2560() /* ty=(Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) */;
  %310 = %309.4;
  %311 = cast(%var_5086, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(2), int32] */;
  %313 = cast(%310, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %315 = cast(%var_5086, dtype="float32") /* ty=Tensor[(2, 240), float32] */;
  %316 = multiply(%313, %314) /* ty=Tensor[(2, 240), uint32] */;
  %317 = rsqrt(%315) /* ty=Tensor[(2, 240), float32] */;
  (%316, %317)
}

def @func_3525() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %318 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
  %319 = %318.1;
  %320 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
  (%319, %320)
}

def @func_1091() -> (Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) {
  %321 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %322 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %323 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %324 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %325 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %326 = %321.0;
  %327 = %322.0;
  %328 = %323.0;
  (%324, %325, %326, %327, %328)
}

def @func_916() -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) {
  %329 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %330 = %329.0;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %332 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
  %333 = sinh(%331) /* ty=Tensor[(3, 8, 9), float32] */;
  %334 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  (%332, %333, %334)
}

def @func_1013() -> Tensor[(3, 8, 9), float64] {
  %335 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
  %335.2
}

def @func_1816(%var_1814: Tensor[(28), float64]) -> (Tensor[(3, 8, 9), float32], Tensor[(7, 4, 1), float64], Tensor[(28), float64]) {
  %336 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %338 = cast(%var_1814, dtype="float64") /* ty=Tensor[(28), float64] */;
  %339 = reshape(%338, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), float64] */;
  %340 = atanh(%337) /* ty=Tensor[(3, 8, 9), float32] */;
  %341 = @func_1793(%339) /* ty=Tensor[(7, 4, 1), float64] */;
  (%340, %341, %var_1814)
}

def @func_4739() -> (Tensor[(9, 9, 6), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) {
  %342 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 1, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 1, 6), bool] */;
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
  %344 = @func_2560() /* ty=(Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) */;
  %345 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %346 = less(%342, %343) /* ty=Tensor[(9, 9, 6), bool] */;
  %347 = %344.3;
  %348 = %345.1;
  (%346, %347, %348)
}

def @func_2145() -> (Tensor[(3, 8, 9), float64],) {
  %349 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %350 = %349.0;
  (%350,)
}

def @func_4820() -> (Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(3, 8, 9), float64], Tensor[(910), float32]) {
  %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %352 = reshape(%351, newshape=[455, 2]) /* ty=Tensor[(455, 2), float64] */;
  %353 = @func_1656(%352) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(455, 2), float64], Tensor[(3, 8, 9), int16]) */;
  %354 = @func_3525() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %355 = cast(meta[relay.Constant][21] /* ty=Tensor[(910), float64] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %356 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %357 = %353.1;
  %358 = %354.0;
  %359 = tan(%355) /* ty=Tensor[(910), float32] */;
  (%356, %357, %358, %359)
}

def @func_1186() -> Tensor[(3, 8, 9), float64] {
  %360 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %361 = %360.1;
  %362 = cast(%361, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %363 = asinh(%362) /* ty=Tensor[(3, 8, 9), float64] */;
  %364 = cast(%361, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%366, %367) /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_5269() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %368 = @func_3995() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %369 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %370 = %368.0;
  (%369, %370)
}

def @func_1793(%var_1788: Tensor[(7, 4, 1), float64]) -> Tensor[(7, 4, 1), float64] {
  %371 = cast(%var_1788, dtype="float64") /* ty=Tensor[(7, 4, 1), float64] */;
  exp(%371) /* ty=Tensor[(7, 4, 1), float64] */
}

def @func_5517(%var_5471: Tensor[(3, 8, 9), float64], %var_5477: Tensor[(480), uint16], %var_5501: Tensor[(39), float64]) -> (Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(39), float64]) {
  %372 = cast(%var_5477, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %373 = reshape(%372, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %374 = @func_1877(%373) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) */;
  %375 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %376 = %375.0;
  %377 = cast(%var_5471, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %378 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%376, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = power(%379, %380) /* ty=Tensor[(3, 8, 9), float32] */;
  %382 = cast(%376, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %386 = cast(%var_5501, dtype="float64") /* ty=Tensor[(39), float64] */;
  %387 = reshape(%386, newshape=[39]) /* ty=Tensor[(39), float64] */;
  %388 = @func_2462(%387) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) */;
  %389 = %374.3;
  %390 = mod(%384, %385) /* ty=Tensor[(3, 8, 9), float32] */;
  %391 = %388.0;
  (%389, %var_5477, %390, %391, %var_5501)
}

def @func_4183() -> Tensor[(3, 8, 9), float64] {
  %392 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %392.0
}

def @func_5389(%var_5358: Tensor[(10, 12, 8), float32]) -> (Tensor[(10, 12, 8), float32], Tensor[(3, 4, 2), bool], Tensor[(3360), float64]) {
  %393 = cast(%var_5358, dtype="float32") /* ty=Tensor[(10, 12, 8), float32] */;
  %394 = @func_2891() /* ty=(Tensor[(3, 4, 2), bool], Tensor[(3, 8, 9), float64]) */;
  %395 = cast(meta[relay.Constant][22] /* ty=Tensor[(3360), int16] */, dtype="int16") /* ty=Tensor[(3360), int16] */;
  %396 = reshape(%395, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), int16] */;
  %397 = @func_4303(%396) /* ty=(Tensor[(15, 16, 14), int16],) */;
  %398 = %397.0;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(15, 16, 14), float64] */;
  %400 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(3360), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %401 = cast(meta[relay.Constant][22] /* ty=Tensor[(3360), int16] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?), float64] */;
  %403 = log(%393) /* ty=Tensor[(10, 12, 8), float32] */;
  %404 = %394.0;
  %405 = divide(%401, %402) /* ty=Tensor[(3360), float64] */;
  (%403, %404, %405)
}

def @func_4031(%var_4009: Tensor[(15, 16, 16), float64], %var_4010: Tensor[(15, 16, 16), float64]) -> (Tensor[(15, 16, 16), float64], Tensor[(3, 8, 9), float64], Tensor[(3360), int8]) {
  %406 = cast(%var_4010, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %407 = shape_of(%var_4009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_4009, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %410 = cast(meta[relay.Constant][23] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %412 = reshape(%410, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), int8] */;
  %413 = reshape(%411, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), int8] */;
  %414 = @func_1361(%412, %413) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32], Tensor[(3, 8, 9), float64]) */;
  %415 = subtract(%408, %409) /* ty=Tensor[(15, 16, 16), float64] */;
  %416 = %414.2;
  (%415, %416, meta[relay.Constant][23] /* ty=Tensor[(3360), int8] */)
}

def @func_4129(%var_4071: Tensor[(40, 2), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(120, 4), uint16], Tensor[(40, 2), uint16], Tensor[(3, 8, 9), bool], Tensor[(39), float64], Tensor[(1, 880), float64], Tensor[(480), uint16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %417 = cast(%var_4071, dtype="uint16") /* ty=Tensor[(40, 2), uint16] */;
  %418 = reshape(%417, newshape=[80]) /* ty=Tensor[(80), uint16] */;
  %419 = @func_1755(%418) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(120, 4), uint16]) */;
  %420 = cast(meta[relay.Constant][24] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %421 = reshape(%420, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
  %422 = @func_833(%421) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
  %423 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
  %424 = %419.5;
  %425 = cast(%424, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %426 = reshape(%425, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %427 = @func_1877(%426) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) */;
  %428 = cast(meta[relay.Constant][24] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %429 = reshape(%428, newshape=[39]) /* ty=Tensor[(39), float64] */;
  %430 = @func_2086(%429) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) */;
  %431 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
  %432 = %422.2;
  %433 = %423.2;
  %434 = %427.4;
  %435 = %430.0;
  %436 = @func_3840() /* ty=Tensor[(3, 8, 9), float64] */;
  (%431, %424, %var_4071, %432, meta[relay.Constant][24] /* ty=Tensor[(39), float64] */, %433, %434, %435, %436)
}

def @func_799(%var_791: Tensor[(1, 5, 16), uint16], %var_792: Tensor[(6, 5, 16), uint16]) -> Tensor[(6, 5, 16), uint64] {
  %437 = cast(%var_791, dtype="uint16") /* ty=Tensor[(1, 5, 16), uint16] */;
  %438 = cast(%var_792, dtype="uint16") /* ty=Tensor[(6, 5, 16), uint16] */;
  %439 = subtract(%437, %438) /* ty=Tensor[(6, 5, 16), uint16] */;
  %440 = cast(%439, dtype="uint64") /* ty=Tensor[(6, 5, 16), uint64] */;
  %441 = cast(%var_791, dtype="uint64") /* ty=Tensor[(1, 5, 16), uint64] */;
  left_shift(%440, %441) /* ty=Tensor[(6, 5, 16), uint64] */
}

def @func_3813() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(15, 12, 16), bool]) {
  %442 = @func_3714() /* ty=(Tensor[(15, 12, 16), float64],) */;
  %443 = %442.0;
  %444 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 12, 16), float64] */, dtype="bool") /* ty=Tensor[(15, 12, 16), bool] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(15, 12, 16), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = @func_1186() /* ty=Tensor[(3, 8, 9), float64] */;
  %449 = @func_3784() /* ty=Tensor[(3, 8, 9), float64] */;
  %450 = less(%446, %447) /* ty=Tensor[(15, 12, 16), bool] */;
  (%448, %449, %450)
}

def @func_1536(%var_1473: Tensor[(15, 16, 3), float64], %var_1494: Tensor[(216), bool], %var_1530: Tensor[(39), float64]) -> (Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) {
  %451 = cast(%var_1473, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %452 = cast(%var_1494, dtype="bool") /* ty=Tensor[(216), bool] */;
  %453 = reshape(%452, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
  %454 = cast(%var_1473, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %455 = cosh(%454) /* ty=Tensor[(15, 16, 3), float64] */;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %457 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
  %458 = cast(%var_1530, dtype="float64") /* ty=Tensor[(39), float64] */;
  %459 = reshape(%458, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
  %460 = @func_833(%459) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
  %461 = exp(%451) /* ty=Tensor[(15, 16, 3), float64] */;
  %462 = @func_577(%453) /* ty=Tensor[(3, 8, 9), float32] */;
  %463 = tan(%456) /* ty=Tensor[(15, 16, 3), float64] */;
  %464 = %457.2;
  %465 = %460.0;
  (%461, %462, %var_1494, %463, %464, %465, %var_1530)
}

def @func_5356() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %466 = @func_4225() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %467 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %468 = @func_4396() /* ty=Tensor[(3, 8, 9), float64] */;
  %469 = %466.0;
  %470 = %467.0;
  (%468, %469, %470)
}

def @func_2389() -> Tensor[(3, 8, 9), float64] {
  %471 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
  %471.1
}

def @func_3995() -> (Tensor[(3, 8, 9), float64],) {
  %472 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %473 = %472.0;
  (%473,)
}

def @func_2462(%var_2460: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) {
  %474 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %475 = cast(%var_2460, dtype="float64") /* ty=Tensor[(39), float64] */;
  %476 = reshape(%475, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
  %477 = @func_833(%476) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
  %478 = %474.1;
  %479 = %477.1;
  (%478, %479, %var_2460)
}

def @func_577(%var_556: Tensor[(3, 8, 9), bool]) -> Tensor[(3, 8, 9), float32] {
  %480 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %481 = cast(%var_556, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %485 = equal(%483, %484) /* ty=Tensor[(3, 8, 9), bool] */;
  %486 = cast(%485, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %487 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%480, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %490 = bitwise_xor(%488, %489) /* ty=Tensor[(3, 8, 9), uint32] */;
  %491 = cast(%490, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %492 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%485, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%493, %494) /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_779(%var_731: Tensor[(16, 48), int8]) -> (Tensor[(16, 8, 6), int8], Tensor[(16, 48), int8], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %495 = cast(%var_731, dtype="int8") /* ty=Tensor[(16, 48), int8] */;
  %496 = reshape(%495, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
  %497 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %498 = %497.1;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %500 = cosh(%499) /* ty=Tensor[(3, 8, 9), float64] */;
  %501 = cast(%500, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %502 = tan(%501) /* ty=Tensor[(3, 8, 9), float64] */;
  %503 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %506 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%502, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = cast(%502, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %510 = @func_686(%496) /* ty=Tensor[(16, 8, 6), int8] */;
  %511 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %512 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %513 = not_equal(%507, %508) /* ty=Tensor[(3, 8, 9), bool] */;
  %514 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %515 = rsqrt(%509) /* ty=Tensor[(3, 8, 9), float64] */;
  (%510, %var_731, %511, %512, %513, %514, %515)
}

def @func_2741(%var_2723: Tensor[(720), float64]) -> (Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(3, 8, 9), float64], Tensor[(?, 2, 10), bool]) {
  %516 = cast(%var_2723, dtype="float64") /* ty=Tensor[(720), float64] */;
  %517 = @func_1002() /* ty=Tensor[(3, 8, 9), bool] */;
  %518 = cast(%517, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %519 = cast(meta[relay.Constant][26] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %520 = reshape(%516, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float64] */;
  %521 = reshape(%518, newshape=[216]) /* ty=Tensor[(216), bool] */;
  %522 = reshape(%519, newshape=[39]) /* ty=Tensor[(39), float64] */;
  %523 = @func_1536(%520, %521, %522) /* ty=(Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) */;
  %524 = @func_2564() /* ty=(Tensor[(1, 2, 10), uint64],) */;
  %525 = %524.0;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
  %527 = rsqrt(%526) /* ty=Tensor[(1, 2, 10), float32] */;
  %528 = cast(%527, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
  %529 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%525, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = %523.0;
  %533 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %534 = logical_and(%530, %531) /* ty=Tensor[(?, 2, 10), bool] */;
  (%517, %532, %var_2723, meta[relay.Constant][26] /* ty=Tensor[(39), float64] */, %533, %534)
}

def @func_3431() -> (Tensor[(12, 2, 7), float64],) {
  %535 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %536 = asinh(%535) /* ty=Tensor[(12, 2, 7), float64] */;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %538 = atan(%537) /* ty=Tensor[(12, 2, 7), float64] */;
  (%538,)
}

def @func_1451(%var_1436: Tensor[(80), uint16]) -> (Tensor[(11, 10, 3), float64], Tensor[(1, 2, 10), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(3, 8, 9), int16], Tensor[(11, 10, 3), uint64]) {
  %539 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %540 = @func_949() /* ty=(Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) */;
  %541 = cast(%var_1436, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %542 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 240), uint16] */, dtype="uint16") /* ty=Tensor[(2, 240), uint16] */;
  %543 = reshape(%541, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %544 = reshape(%542, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %545 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %546 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %547 = cos(%546) /* ty=Tensor[(11, 10, 3), float64] */;
  %548 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10, 3), float64] */, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %552 = log2(%539) /* ty=Tensor[(11, 10, 3), float64] */;
  %553 = %540.1;
  %554 = @func_799(%543, %544) /* ty=Tensor[(6, 5, 16), uint64] */;
  %555 = %545.0;
  %556 = multiply(%550, %551) /* ty=Tensor[(11, 10, 3), uint64] */;
  (%552, %553, %554, %var_1436, meta[relay.Constant][29] /* ty=Tensor[(2, 240), uint16] */, %555, %556)
}

def @func_2007() -> (Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) {
  %557 = cast(meta[relay.Constant][30] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %558 = cast(meta[relay.Constant][30] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %559 = reshape(%557, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %560 = reshape(%558, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %561 = @func_1002() /* ty=Tensor[(3, 8, 9), bool] */;
  %562 = @func_620(%559, %560) /* ty=Tensor[(5, 14, 13), float64] */;
  (%561, %562, meta[relay.Constant][30] /* ty=Tensor[(910), float64] */)
}

def @func_620(%var_612: Tensor[(5, 14, 13), float64], %var_613: Tensor[(5, 14, 13), float64]) -> Tensor[(5, 14, 13), float64] {
  %563 = cast(%var_613, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
  %564 = shape_of(%var_612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%var_612, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%565, %566) /* ty=Tensor[(5, 14, 13), float64] */
}

def @func_2033(%var_2023: Tensor[(2, 12, 11), float64]) -> (Tensor[(2, 12, 11), float64], Tensor[(3, 8, 9), bool]) {
  %567 = cast(%var_2023, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %568 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %569 = sinh(%567) /* ty=Tensor[(2, 12, 11), float64] */;
  %570 = %568.1;
  (%569, %570)
}

def @func_989() -> (Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) {
  %571 = cast(meta[relay.Constant][31] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %572 = reshape(%571, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
  %573 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %574 = @func_686(%572) /* ty=Tensor[(16, 8, 6), int8] */;
  (%573, %574, meta[relay.Constant][31] /* ty=Tensor[(768), int8] */)
}

def @func_1361(%var_1322: Tensor[(16, 14, 15), int8], %var_1323: Tensor[(16, 14, 15), int8]) -> (Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32], Tensor[(3, 8, 9), float64]) {
  %575 = cast(%var_1322, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %576 = cast(%var_1323, dtype="int8") /* ty=Tensor[(16, 14, 15), int8] */;
  %577 = shape_of(%var_1322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_1322, dtype="int8") /* ty=Tensor[(16, 14, 15), int8] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %580 = subtract(%578, %579) /* ty=Tensor[(16, 14, 15), int8] */;
  %581 = cast(%var_1322, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %585 = divide(%583, %584) /* ty=Tensor[(16, 14, 15), float32] */;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %587 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %588 = log2(%575) /* ty=Tensor[(16, 14, 15), float32] */;
  %589 = cos(%586) /* ty=Tensor[(16, 14, 15), float32] */;
  %590 = %587.0;
  (%588, %589, %590)
}

def @func_3587() -> (Tensor[(12, 2, 7), float64],) {
  %591 = @func_3431() /* ty=(Tensor[(12, 2, 7), float64],) */;
  %592 = %591.0;
  (%592,)
}

def @func_5654() -> Tensor[(3, 8, 9), float64] {
  @func_332() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_1002() -> Tensor[(3, 8, 9), bool] {
  @func_255() /* ty=Tensor[(3, 8, 9), bool] */
}

def @func_4947(%var_4934: Tensor[(4, 960), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(4, 960), float64], Tensor[(3360), float64]) {
  %593 = cast(%var_4934, dtype="float64") /* ty=Tensor[(4, 960), float64] */;
  %594 = cast(%var_4934, dtype="float64") /* ty=Tensor[(4, 960), float64] */;
  %595 = reshape(%593, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), float64] */;
  %596 = reshape(%594, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), float64] */;
  %597 = @func_4031(%595, %596) /* ty=(Tensor[(15, 16, 16), float64], Tensor[(3, 8, 9), float64], Tensor[(3360), int8]) */;
  %598 = %597.2;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %600 = @func_3353() /* ty=Tensor[(3, 8, 9), float64] */;
  %601 = sigmoid(%599) /* ty=Tensor[(3360), float64] */;
  (%600, %var_4934, %601)
}

def @func_4303(%var_4297: Tensor[(15, 16, 14), int16]) -> (Tensor[(15, 16, 14), int16],) {
  %602 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 16, 14), int16] */, dtype="int16") /* ty=Tensor[(15, 16, 14), int16] */;
  %603 = shape_of(%var_4297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_4297, dtype="int16") /* ty=Tensor[(15, 16, 14), int16] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %606 = bitwise_and(%604, %605) /* ty=Tensor[(15, 16, 14), int16] */;
  (%606,)
}

def @func_5774() -> Tensor[(3, 8, 9), float64] {
  %607 = @func_5356() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %607.0
}

def @func_4336() -> Tensor[(3, 8, 9), float32] {
  %608 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  exp(%610) /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_2891() -> (Tensor[(3, 4, 2), bool], Tensor[(3, 8, 9), float64]) {
  %611 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 4, 2), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %612 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(3, 4, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 4, 2), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = logical_and(%613, %614) /* ty=Tensor[(3, 4, 2), bool] */;
  %616 = @func_1013() /* ty=Tensor[(3, 8, 9), float64] */;
  (%615, %616)
}

def @func_3794() -> Tensor[(3, 8, 9), float64] {
  %617 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %617.0
}

def @func_4535(%var_4508: Tensor[(880), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(880), float64], Tensor[(3, 8, 9), float64]) {
  %618 = @func_3448() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %619 = cast(%var_4508, dtype="float64") /* ty=Tensor[(880), float64] */;
  %620 = reshape(%619, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %621 = @func_2110(%620) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) */;
  %622 = %618.1;
  %623 = %621.2;
  %624 = @func_4217() /* ty=Tensor[(3, 8, 9), float64] */;
  (%622, %623, %var_4508, %624)
}

def @func_1234(%var_1203: Tensor[(480), uint16], %var_1209: Tensor[(6, 5, 16), uint64]) -> (Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) {
  %625 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
  %626 = cast(meta[relay.Constant][35] /* ty=Tensor[(80, 1), uint16] */, dtype="uint16") /* ty=Tensor[(80, 1), uint16] */;
  %627 = cast(%var_1203, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %628 = reshape(%626, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %629 = reshape(%627, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %630 = @func_799(%628, %629) /* ty=Tensor[(6, 5, 16), uint64] */;
  %631 = cast(%var_1209, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %635 = cast(%var_1209, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
  %636 = cast(meta[relay.Constant][36] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %637 = reshape(%636, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
  %638 = %625.4;
  %639 = power(%633, %634) /* ty=Tensor[(6, 5, 16), float32] */;
  %640 = cosh(%635) /* ty=Tensor[(6, 5, 16), float32] */;
  %641 = @func_686(%637) /* ty=Tensor[(16, 8, 6), int8] */;
  (%638, meta[relay.Constant][35] /* ty=Tensor[(80, 1), uint16] */, %var_1203, %639, %640, %641, meta[relay.Constant][36] /* ty=Tensor[(768), int8] */)
}

def @func_2564() -> (Tensor[(1, 2, 10), uint64],) {
  %642 = @func_949() /* ty=(Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) */;
  %643 = %642.0;
  (%643,)
}

def @func_5220(%var_5185: Tensor[(9, 11, 12), float64]) -> (Tensor[(9, 11, 12), float64], Tensor[(9, 11, 12), float32], Tensor[(3, 8, 9), float64], Tensor[(9, 11, 12), float64], Tensor[(3, 8, 9), float32]) {
  %644 = cast(%var_5185, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %645 = cast(%var_5185, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %646 = log10(%645) /* ty=Tensor[(9, 11, 12), float64] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(9, 11, 12), float32] */;
  %648 = cast(%var_5185, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %649 = @func_1574() /* ty=Tensor[(3, 8, 9), float64] */;
  %650 = cast(%649, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %651 = reshape(%650, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
  %652 = cos(%644) /* ty=Tensor[(9, 11, 12), float64] */;
  %653 = sin(%647) /* ty=Tensor[(9, 11, 12), float32] */;
  %654 = acosh(%648) /* ty=Tensor[(9, 11, 12), float64] */;
  %655 = @func_577(%651) /* ty=Tensor[(3, 8, 9), float32] */;
  (%652, %653, %649, %654, %655)
}

def @main(%var_5846: Tensor[(3, 5, 3), float64]) -> (Tensor[(3, 5, 3), float64],) {
  %656 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %657 = shape_of(%var_5846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%var_5846, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %660 = mod(%658, %659) /* ty=Tensor[(3, 5, 3), float64] */;
  (%660,)
}

def @func_4617(%var_4590: Tensor[(11, 11, 5), int8], %var_4610: Tensor[(11, 11, 5), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(80), uint16], Tensor[(11, 11, 5), int32]) {
  %661 = cast(meta[relay.Constant][38] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %662 = reshape(%661, newshape=[40, 2]) /* ty=Tensor[(40, 2), uint16] */;
  %663 = @func_4129(%662) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(120, 4), uint16], Tensor[(40, 2), uint16], Tensor[(3, 8, 9), bool], Tensor[(39), float64], Tensor[(1, 880), float64], Tensor[(480), uint16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 11, 5), int8] */, dtype="bool") /* ty=Tensor[(11, 11, 5), bool] */;
  %665 = shape_of(%var_4590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_4590, dtype="bool") /* ty=Tensor[(11, 11, 5), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %668 = greater(%666, %667) /* ty=Tensor[(11, 11, 5), bool] */;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(11, 11, 5), float64] */;
  %670 = acos(%669) /* ty=Tensor[(11, 11, 5), float64] */;
  %671 = cast(%var_4610, dtype="int32") /* ty=Tensor[(11, 11, 5), int32] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="int32") /* ty=Tensor[(11, 11, 5), int32] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %675 = %663.0;
  %676 = subtract(%673, %674) /* ty=Tensor[(11, 11, 5), int32] */;
  (%675, meta[relay.Constant][38] /* ty=Tensor[(80), uint16] */, %676)
}

def @func_1755(%var_1736: Tensor[(80), uint16]) -> (Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(120, 4), uint16]) {
  %677 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %679 = @func_1192() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %680 = %679.0;
  %681 = cast(%680, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %682 = reshape(%681, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
  %683 = cast(%var_1736, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %684 = cast(meta[relay.Constant][40] /* ty=Tensor[(120, 4), uint16] */, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
  %685 = reshape(%683, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %686 = reshape(%684, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %687 = sqrt(%678) /* ty=Tensor[(3, 8, 9), float32] */;
  %688 = @func_577(%682) /* ty=Tensor[(3, 8, 9), float32] */;
  %689 = @func_799(%685, %686) /* ty=Tensor[(6, 5, 16), uint64] */;
  (%687, %680, %688, %689, %var_1736, meta[relay.Constant][40] /* ty=Tensor[(120, 4), uint16] */)
}

def @func_5638(%var_5611: Tensor[(15, 12, 16), float64], %var_5625: Tensor[(8, 2, 10), uint64]) -> (Tensor[(15, 12, 16), int16], Tensor[(8, 2, 10), uint8]) {
  %690 = @func_3714() /* ty=(Tensor[(15, 12, 16), float64],) */;
  %691 = %690.0;
  %692 = cast(%var_5611, dtype="int16") /* ty=Tensor[(15, 12, 16), int16] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="int16") /* ty=Tensor[(15, 12, 16), int16] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %696 = @func_2564() /* ty=(Tensor[(1, 2, 10), uint64],) */;
  %697 = %696.0;
  %698 = cast(%697, dtype="uint8") /* ty=Tensor[(1, 2, 10), uint8] */;
  %699 = cast(%var_5625, dtype="uint8") /* ty=Tensor[(8, 2, 10), uint8] */;
  %700 = bitwise_or(%694, %695) /* ty=Tensor[(15, 12, 16), int16] */;
  %701 = logical_xor(%698, %699) /* ty=Tensor[(8, 2, 10), uint8] */;
  (%700, %701)
}

def @func_332() -> Tensor[(3, 8, 9), float64] {
  %702 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  atan(%703) /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3567(%var_3542: Tensor[(80), uint16], %var_3556: Tensor[(6, 5, 16), uint64]) -> (Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(6, 5, 16), bool]) {
  %704 = cast(%var_3542, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %705 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 240), uint16] */, dtype="uint16") /* ty=Tensor[(2, 240), uint16] */;
  %706 = reshape(%704, newshape=[80]) /* ty=Tensor[(80), uint16] */;
  %707 = reshape(%705, newshape=[4, 120]) /* ty=Tensor[(4, 120), uint16] */;
  %708 = @func_3183(%706, %707) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) */;
  %709 = cast(%var_3542, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %710 = %708.1;
  %711 = cast(%710, dtype="uint16") /* ty=Tensor[(6, 5, 16), uint16] */;
  %712 = reshape(%709, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %713 = reshape(%711, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %714 = @func_799(%712, %713) /* ty=Tensor[(6, 5, 16), uint64] */;
  %715 = cast(%var_3556, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %719 = @func_1574() /* ty=Tensor[(3, 8, 9), float64] */;
  %720 = logical_and(%717, %718) /* ty=Tensor[(6, 5, 16), bool] */;
  (%719, %710, %var_3542, meta[relay.Constant][41] /* ty=Tensor[(2, 240), uint16] */, %720)
}

def @func_949() -> (Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) {
  %721 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %722 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 2, 10), uint64] */, dtype="uint64") /* ty=Tensor[(1, 2, 10), uint64] */;
  %723 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="float32") /* ty=float32 */;
  %724 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 2, 10), uint64] */, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
  %725 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 2, 10), uint64] */, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
  %726 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %727 = bitwise_or(%721, %722) /* ty=Tensor[(1, 2, 10), uint64] */;
  %728 = multiply(%723, %724) /* ty=Tensor[(1, 2, 10), float32] */;
  %729 = less(%725, %726) /* ty=Tensor[(1, 2, 10), bool] */;
  (%727, %728, %729)
}

def @func_5453(%var_5436: Tensor[(80, 1), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(1, 880), float64], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(15, 12, 16), float64]) {
  %730 = @func_1186() /* ty=Tensor[(3, 8, 9), float64] */;
  %731 = @func_4820() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(3, 8, 9), float64], Tensor[(910), float32]) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %734 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%730, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %737 = cast(%var_5436, dtype="uint16") /* ty=Tensor[(80, 1), uint16] */;
  %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %739 = reshape(%737, newshape=[80]) /* ty=Tensor[(80), uint16] */;
  %740 = reshape(%738, newshape=[4, 120]) /* ty=Tensor[(4, 120), uint16] */;
  %741 = @func_3183(%739, %740) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) */;
  %742 = @func_3714() /* ty=(Tensor[(15, 12, 16), float64],) */;
  %743 = subtract(%735, %736) /* ty=Tensor[(3, 8, 9), float64] */;
  %744 = %741.5;
  %745 = %742.0;
  (%743, %744, %var_5436, meta[relay.Constant][44] /* ty=Tensor[(480), uint16] */, %745)
}

def @func_2854() -> Tensor[(3, 8, 9), float64] {
  %746 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %746.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2088(%var_2087: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) {
  %5 = fn (%var_2062: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) {
    %0 = cast(%var_2062, dtype="float64") /* ty=Tensor[(39), float64] */;
    %1 = reshape(%0, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
    %2 = @func_833(%1) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
    %3 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
    %4 = %2.1;
    (%3, %4, %var_2062)
  };
  %5(%var_2087) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) */
}

def @func_3570(%var_3568: Tensor[(80), uint16], %var_3569: Tensor[(6, 5, 16), uint64]) -> (Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(6, 5, 16), bool]) {
  %23 = fn (%var_3542: Tensor[(80), uint16], %var_3556: Tensor[(6, 5, 16), uint64]) -> (Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(6, 5, 16), bool]) {
    %6 = cast(%var_3542, dtype="uint16") /* ty=Tensor[(80), uint16] */;
    %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 240), uint16] */, dtype="uint16") /* ty=Tensor[(2, 240), uint16] */;
    %8 = reshape(%6, newshape=[80]) /* ty=Tensor[(80), uint16] */;
    %9 = reshape(%7, newshape=[4, 120]) /* ty=Tensor[(4, 120), uint16] */;
    %10 = @func_3183(%8, %9) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) */;
    %11 = cast(%var_3542, dtype="uint16") /* ty=Tensor[(80), uint16] */;
    %12 = %10.1;
    %13 = cast(%12, dtype="uint16") /* ty=Tensor[(6, 5, 16), uint16] */;
    %14 = reshape(%11, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
    %15 = reshape(%13, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
    %16 = @func_799(%14, %15) /* ty=Tensor[(6, 5, 16), uint64] */;
    %17 = cast(%var_3556, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="bool") /* ty=Tensor[(6, 5, 16), bool] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %21 = @func_1574() /* ty=Tensor[(3, 8, 9), float64] */;
    %22 = logical_and(%19, %20) /* ty=Tensor[(6, 5, 16), bool] */;
    (%21, %12, %var_3542, meta[relay.Constant][0] /* ty=Tensor[(2, 240), uint16] */, %22)
  };
  %23(%var_3568, %var_3569) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(6, 5, 16), bool]) */
}

def @func_2743(%var_2742: Tensor[(720), float64]) -> (Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(3, 8, 9), float64], Tensor[(?, 2, 10), bool]) {
  %43 = fn (%var_2723: Tensor[(720), float64]) -> (Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(3, 8, 9), float64], Tensor[(?, 2, 10), bool]) {
    %24 = cast(%var_2723, dtype="float64") /* ty=Tensor[(720), float64] */;
    %25 = @func_1002() /* ty=Tensor[(3, 8, 9), bool] */;
    %26 = cast(%25, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
    %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
    %28 = reshape(%24, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float64] */;
    %29 = reshape(%26, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %30 = reshape(%27, newshape=[39]) /* ty=Tensor[(39), float64] */;
    %31 = @func_1536(%28, %29, %30) /* ty=(Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) */;
    %32 = @func_2564() /* ty=(Tensor[(1, 2, 10), uint64],) */;
    %33 = %32.0;
    %34 = cast(%33, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
    %35 = rsqrt(%34) /* ty=Tensor[(1, 2, 10), float32] */;
    %36 = cast(%35, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
    %37 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
    %38 = cast(%33, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
    %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %40 = %31.0;
    %41 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
    %42 = logical_and(%38, %39) /* ty=Tensor[(?, 2, 10), bool] */;
    (%25, %40, %var_2723, meta[relay.Constant][1] /* ty=Tensor[(39), float64] */, %41, %42)
  };
  %43(%var_2742) /* ty=(Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(3, 8, 9), float64], Tensor[(?, 2, 10), bool]) */
}

def @func_5531() -> (Tensor[(3, 8, 9), float64],) {
  %44 = @func_4739() /* ty=(Tensor[(9, 9, 6), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %45 = %44.1;
  (%45,)
}

def @func_688(%var_687: Tensor[(16, 8, 6), int8]) -> Tensor[(16, 8, 6), int8] {
  %50 = fn (%var_671: Tensor[(16, 8, 6), int8]) -> Tensor[(16, 8, 6), int8] {
    %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 8, 6), int8] */, dtype="int8") /* ty=Tensor[(16, 8, 6), int8] */;
    %47 = shape_of(%var_671, dtype="int32") /* ty=Tensor[(3), int32] */;
    %48 = cast(%var_671, dtype="int8") /* ty=Tensor[(16, 8, 6), int8] */;
    %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    logical_xor(%48, %49) /* ty=Tensor[(16, 8, 6), int8] */
  };
  %50(%var_687) /* ty=Tensor[(16, 8, 6), int8] */
}

def @func_3962() -> (Tensor[(5, 15, 16), float64],) {
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 15, 16), float64] */;
  %52 = tan(%51) /* ty=Tensor[(5, 15, 16), float64] */;
  (%52,)
}

def @func_2996() -> Tensor[(3, 8, 9), float64] {
  %54 = fn () -> Tensor[(3, 8, 9), float64] {
    %53 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %53.0
  };
  %54() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3688(%var_3685: Tensor[(28), float64], %var_3686: Tensor[(7, 4, 8), float32], %var_3687: Tensor[(7, 4, 8), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(1040), int16], Tensor[(3, 8, 9), int16], Tensor[(28), float64], Tensor[(3, 8, 9), float64], Tensor[(7, 4, 8), int32]) {
  @func_3683(%var_3685, %var_3686, %var_3687) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1040), int16], Tensor[(3, 8, 9), int16], Tensor[(28), float64], Tensor[(3, 8, 9), float64], Tensor[(7, 4, 8), int32]) */
}

def @func_5223(%var_5221: Tensor[(9, 11, 12), float64]) -> (Tensor[(9, 11, 12), float64], Tensor[(9, 11, 12), float32], Tensor[(3, 8, 9), float64], Tensor[(9, 11, 12), float64], Tensor[(3, 8, 9), float32]) {
  @func_5220(%var_5221) /* ty=(Tensor[(9, 11, 12), float64], Tensor[(9, 11, 12), float32], Tensor[(3, 8, 9), float64], Tensor[(9, 11, 12), float64], Tensor[(3, 8, 9), float32]) */
}

def @func_2958() -> (Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(910), float64], Tensor[(80), uint16], Tensor[(480), uint16]) {
  %65 = fn () -> (Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(910), float64], Tensor[(80), uint16], Tensor[(480), uint16]) {
    %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
    %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
    %57 = reshape(%55, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
    %58 = reshape(%56, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
    %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %60 = reshape(%59, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %61 = @func_1877(%60) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) */;
    %62 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
    %63 = @func_620(%57, %58) /* ty=Tensor[(5, 14, 13), float64] */;
    %64 = %61.3;
    (%62, %63, meta[relay.Constant][4] /* ty=Tensor[(910), float64] */, %64, meta[relay.Constant][5] /* ty=Tensor[(480), uint16] */)
  };
  %65() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(910), float64], Tensor[(80), uint16], Tensor[(480), uint16]) */
}

def @func_640() -> Tensor[(3, 8, 9), float64] {
  @func_638() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_4431() -> Tensor[(910), float64] {
  @func_4429() /* ty=Tensor[(910), float64] */
}

def @func_4740() -> (Tensor[(9, 9, 6), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) {
  %73 = fn () -> (Tensor[(9, 9, 6), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) {
    %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1, 6), float32] */, dtype="bool") /* ty=Tensor[(1, 1, 6), bool] */;
    %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 9, 6), float32] */, dtype="bool") /* ty=Tensor[(9, 9, 6), bool] */;
    %68 = @func_2560() /* ty=(Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) */;
    %69 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
    %70 = less(%66, %67) /* ty=Tensor[(9, 9, 6), bool] */;
    %71 = %68.3;
    %72 = %69.1;
    (%70, %71, %72)
  };
  %73() /* ty=(Tensor[(9, 9, 6), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */
}

def @func_5774() -> Tensor[(3, 8, 9), float64] {
  %74 = @func_5356() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %74.0
}

def @func_4227() -> (Tensor[(3, 8, 9), float64],) {
  @func_4225() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_5357() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %80 = fn () -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
    %75 = @func_4225() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %76 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
    %77 = @func_4396() /* ty=Tensor[(3, 8, 9), float64] */;
    %78 = %75.0;
    %79 = %76.0;
    (%77, %78, %79)
  };
  %80() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_609() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) {
  %81 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %82 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  (%81, %82)
}

def @func_2113(%var_2111: Tensor[(16, 11, 5), float64]) -> (Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) {
  @func_2110(%var_2111) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) */
}

def @func_2564() -> (Tensor[(1, 2, 10), uint64],) {
  %83 = @func_949() /* ty=(Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) */;
  %84 = %83.0;
  (%84,)
}

def @func_544() -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) {
  %87 = fn () -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) {
    %85 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
    %86 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
    (%85, %86)
  };
  %87() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */
}

def @func_4950(%var_4948: Tensor[(4, 960), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(4, 960), float64], Tensor[(3360), float64]) {
  @func_4947(%var_4948) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(4, 960), float64], Tensor[(3360), float64]) */
}

def @func_577(%var_556: Tensor[(3, 8, 9), bool]) -> Tensor[(3, 8, 9), float32] {
  %88 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %89 = cast(%var_556, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = equal(%91, %92) /* ty=Tensor[(3, 8, 9), bool] */;
  %94 = cast(%93, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %95 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%88, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %98 = bitwise_xor(%96, %97) /* ty=Tensor[(3, 8, 9), uint32] */;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %100 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%93, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%101, %102) /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_3995() -> (Tensor[(3, 8, 9), float64],) {
  %103 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %104 = %103.0;
  (%104,)
}

def @func_2248() -> (Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) {
  @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_3858(%var_3851: Tensor[(14, 7, 5), int8], %var_3852: Tensor[(14, 7, 5), int8]) -> (Tensor[(14, 7, 5), int8],) {
  %105 = cast(%var_3852, dtype="int8") /* ty=Tensor[(14, 7, 5), int8] */;
  %106 = shape_of(%var_3851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_3851, dtype="int8") /* ty=Tensor[(14, 7, 5), int8] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %109 = right_shift(%107, %108) /* ty=Tensor[(14, 7, 5), int8] */;
  (%109,)
}

def @func_4218() -> Tensor[(3, 8, 9), float64] {
  %111 = fn () -> Tensor[(3, 8, 9), float64] {
    %110 = @func_3525() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
    %110.1
  };
  %111() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_5654() -> Tensor[(3, 8, 9), float64] {
  @func_332() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_989() -> (Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) {
  %112 = cast(meta[relay.Constant][8] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %113 = reshape(%112, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
  %114 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %115 = @func_686(%113) /* ty=Tensor[(16, 8, 6), int8] */;
  (%114, %115, meta[relay.Constant][8] /* ty=Tensor[(768), int8] */)
}

def @func_3526() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %119 = fn () -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
    %116 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
    %117 = %116.1;
    %118 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
    (%117, %118)
  };
  %119() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_2110(%var_2095: Tensor[(16, 11, 5), float64]) -> (Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) {
  %120 = cast(%var_2095, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
  %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 910), float64] */, dtype="float64") /* ty=Tensor[(1, 910), float64] */;
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 910), float64] */, dtype="float64") /* ty=Tensor[(1, 910), float64] */;
  %123 = reshape(%121, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %124 = reshape(%122, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %125 = sin(%120) /* ty=Tensor[(16, 11, 5), float64] */;
  %126 = @func_620(%123, %124) /* ty=Tensor[(5, 14, 13), float64] */;
  (%125, %126, meta[relay.Constant][9] /* ty=Tensor[(1, 910), float64] */)
}

def @func_3715() -> (Tensor[(15, 12, 16), float64],) {
  %133 = fn () -> (Tensor[(15, 12, 16), float64],) {
    %127 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 12, 16), float32] */;
    %128 = sigmoid(%127) /* ty=Tensor[(15, 12, 16), float32] */;
    %129 = cast(%128, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
    %130 = tan(%129) /* ty=Tensor[(15, 12, 16), float64] */;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(15, 12, 16), float64] */;
    %132 = cosh(%131) /* ty=Tensor[(15, 12, 16), float64] */;
    (%132,)
  };
  %133() /* ty=(Tensor[(15, 12, 16), float64],) */
}

def @func_3431() -> (Tensor[(12, 2, 7), float64],) {
  %134 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 2, 7), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %135 = asinh(%134) /* ty=Tensor[(12, 2, 7), float64] */;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(12, 2, 7), float64] */;
  %137 = atan(%136) /* ty=Tensor[(12, 2, 7), float64] */;
  (%137,)
}

def @func_4031(%var_4009: Tensor[(15, 16, 16), float64], %var_4010: Tensor[(15, 16, 16), float64]) -> (Tensor[(15, 16, 16), float64], Tensor[(3, 8, 9), float64], Tensor[(3360), int8]) {
  %138 = cast(%var_4010, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %139 = shape_of(%var_4009, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_4009, dtype="float64") /* ty=Tensor[(15, 16, 16), float64] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %142 = cast(meta[relay.Constant][12] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %143 = cast(meta[relay.Constant][12] /* ty=Tensor[(3360), int8] */, dtype="int8") /* ty=Tensor[(3360), int8] */;
  %144 = reshape(%142, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), int8] */;
  %145 = reshape(%143, newshape=[16, 14, 15]) /* ty=Tensor[(16, 14, 15), int8] */;
  %146 = @func_1361(%144, %145) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32], Tensor[(3, 8, 9), float64]) */;
  %147 = subtract(%140, %141) /* ty=Tensor[(15, 16, 16), float64] */;
  %148 = %146.2;
  (%147, %148, meta[relay.Constant][12] /* ty=Tensor[(3360), int8] */)
}

def @func_5269() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %149 = @func_3995() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %150 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %151 = %149.0;
  (%150, %151)
}

def @func_5391(%var_5390: Tensor[(10, 12, 8), float32]) -> (Tensor[(10, 12, 8), float32], Tensor[(3, 4, 2), bool], Tensor[(3360), float64]) {
  %165 = fn (%var_5358: Tensor[(10, 12, 8), float32]) -> (Tensor[(10, 12, 8), float32], Tensor[(3, 4, 2), bool], Tensor[(3360), float64]) {
    %152 = cast(%var_5358, dtype="float32") /* ty=Tensor[(10, 12, 8), float32] */;
    %153 = @func_2891() /* ty=(Tensor[(3, 4, 2), bool], Tensor[(3, 8, 9), float64]) */;
    %154 = cast(meta[relay.Constant][13] /* ty=Tensor[(3360), int16] */, dtype="int16") /* ty=Tensor[(3360), int16] */;
    %155 = reshape(%154, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), int16] */;
    %156 = @func_4303(%155) /* ty=(Tensor[(15, 16, 14), int16],) */;
    %157 = %156.0;
    %158 = cast(%157, dtype="float64") /* ty=Tensor[(15, 16, 14), float64] */;
    %159 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3360), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %160 = cast(meta[relay.Constant][13] /* ty=Tensor[(3360), int16] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?), float64] */;
    %162 = log(%152) /* ty=Tensor[(10, 12, 8), float32] */;
    %163 = %153.0;
    %164 = divide(%160, %161) /* ty=Tensor[(3360), float64] */;
    (%162, %163, %164)
  };
  %165(%var_5390) /* ty=(Tensor[(10, 12, 8), float32], Tensor[(3, 4, 2), bool], Tensor[(3360), float64]) */
}

def @func_2802() -> (Tensor[(3, 8, 9), float64],) {
  @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_611() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) {
  @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */
}

def @func_1014() -> Tensor[(3, 8, 9), float64] {
  %167 = fn () -> Tensor[(3, 8, 9), float64] {
    %166 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
    %166.2
  };
  %167() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_951() -> (Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) {
  @func_949() /* ty=(Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) */
}

def @func_4035(%var_4033: Tensor[(15, 16, 16), float64], %var_4034: Tensor[(15, 16, 16), float64]) -> (Tensor[(15, 16, 16), float64], Tensor[(3, 8, 9), float64], Tensor[(3360), int8]) {
  @func_4031(%var_4033, %var_4034) /* ty=(Tensor[(15, 16, 16), float64], Tensor[(3, 8, 9), float64], Tensor[(3360), int8]) */
}

def @func_5533() -> (Tensor[(3, 8, 9), float64],) {
  @func_5531() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_1454(%var_1452: Tensor[(80), uint16]) -> (Tensor[(11, 10, 3), float64], Tensor[(1, 2, 10), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(3, 8, 9), int16], Tensor[(11, 10, 3), uint64]) {
  @func_1451(%var_1452) /* ty=(Tensor[(11, 10, 3), float64], Tensor[(1, 2, 10), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(3, 8, 9), int16], Tensor[(11, 10, 3), uint64]) */
}

def @func_1365(%var_1363: Tensor[(16, 14, 15), int8], %var_1364: Tensor[(16, 14, 15), int8]) -> (Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32], Tensor[(3, 8, 9), float64]) {
  @func_1361(%var_1363, %var_1364) /* ty=(Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32], Tensor[(3, 8, 9), float64]) */
}

def @func_257() -> Tensor[(3, 8, 9), bool] {
  @func_255() /* ty=Tensor[(3, 8, 9), bool] */
}

def @func_4285() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %168 = @func_3525() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %169 = @func_4225() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %170 = %168.0;
  %171 = %169.0;
  (%170, %171)
}

def @func_4911(%var_4869: Tensor[(11, 1, 15), bool], %var_4870: Tensor[(11, 15, 15), bool]) -> (Tensor[(11, 15, 15), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(1, 2, 10), bool], Tensor[(6, 5, 16), float32], Tensor[(480), uint16], Tensor[(11, 15, 15), int64]) {
  %172 = cast(%var_4869, dtype="bool") /* ty=Tensor[(11, 1, 15), bool] */;
  %173 = cast(%var_4870, dtype="bool") /* ty=Tensor[(11, 15, 15), bool] */;
  %174 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
  %175 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %176 = @func_949() /* ty=(Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) */;
  %177 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %178 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), uint16] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
  %179 = reshape(%177, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %180 = reshape(%178, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint64] */;
  %181 = @func_1234(%179, %180) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %182 = cast(%var_4870, dtype="float32") /* ty=Tensor[(11, 15, 15), float32] */;
  %183 = log2(%182) /* ty=Tensor[(11, 15, 15), float32] */;
  %184 = cast(%183, dtype="int64") /* ty=Tensor[(11, 15, 15), int64] */;
  %185 = cast(%var_4869, dtype="int64") /* ty=Tensor[(11, 1, 15), int64] */;
  %186 = logical_or(%172, %173) /* ty=Tensor[(11, 15, 15), bool] */;
  %187 = %174.3;
  %188 = %175.0;
  %189 = %176.2;
  %190 = %181.3;
  %191 = left_shift(%184, %185) /* ty=Tensor[(11, 15, 15), int64] */;
  (%186, %187, %188, %189, %190, meta[relay.Constant][14] /* ty=Tensor[(480), uint16] */, %191)
}

def @func_1656(%var_1594: Tensor[(455, 2), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(455, 2), float64], Tensor[(3, 8, 9), int16]) {
  %192 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %193 = cast(%var_1594, dtype="float64") /* ty=Tensor[(455, 2), float64] */;
  %194 = cast(%var_1594, dtype="float64") /* ty=Tensor[(455, 2), float64] */;
  %195 = reshape(%193, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %196 = reshape(%194, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %197 = cast(%var_1594, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %198 = sinh(%197) /* ty=Tensor[(455, 2), float32] */;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(455, 2), float64] */;
  %200 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %201 = %192.0;
  %202 = @func_620(%195, %196) /* ty=Tensor[(5, 14, 13), float64] */;
  %203 = atanh(%199) /* ty=Tensor[(455, 2), float64] */;
  %204 = %200.0;
  (%201, %202, %203, %204)
}

def @func_3784() -> Tensor[(3, 8, 9), float64] {
  @func_1574() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3587() -> (Tensor[(12, 2, 7), float64],) {
  %205 = @func_3431() /* ty=(Tensor[(12, 2, 7), float64],) */;
  %206 = %205.0;
  (%206,)
}

def @func_1004() -> Tensor[(3, 8, 9), bool] {
  @func_1002() /* ty=Tensor[(3, 8, 9), bool] */
}

def @func_580(%var_578: Tensor[(3, 8, 9), bool]) -> Tensor[(3, 8, 9), float32] {
  @func_577(%var_578) /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_1879(%var_1878: Tensor[(480), uint16]) -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) {
  %221 = fn (%var_1864: Tensor[(480), uint16]) -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) {
    %207 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
    %208 = cast(meta[relay.Constant][15] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
    %209 = cast(%var_1864, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %210 = reshape(%208, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
    %211 = reshape(%209, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
    %212 = @func_799(%210, %211) /* ty=Tensor[(6, 5, 16), uint64] */;
    %213 = cast(%212, dtype="uint16") /* ty=Tensor[(6, 5, 16), uint16] */;
    %214 = cast(%212, dtype="uint64") /* ty=Tensor[(6, 5, 16), uint64] */;
    %215 = reshape(%213, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %216 = reshape(%214, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint64] */;
    %217 = @func_1234(%215, %216) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
    %218 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
    %219 = %207.0;
    %220 = %217.2;
    (%218, %219, %212, meta[relay.Constant][15] /* ty=Tensor[(80), uint16] */, %var_1864, %220)
  };
  %221(%var_1878) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) */
}

def @func_3795() -> Tensor[(3, 8, 9), float64] {
  %223 = fn () -> Tensor[(3, 8, 9), float64] {
    %222 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %222.0
  };
  %223() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_2777(%var_2775: Tensor[(720), float64], %var_2776: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(14, 2), float64], Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(480), uint16], Tensor[(1, 1040), int16]) {
  %246 = fn (%var_2768: Tensor[(720), float64], %var_2769: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(14, 2), float64], Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(480), uint16], Tensor[(1, 1040), int16]) {
    %224 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 2), float64] */;
    %225 = reshape(%224, newshape=[28]) /* ty=Tensor[(28), float64] */;
    %226 = @func_1816(%225) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(7, 4, 1), float64], Tensor[(28), float64]) */;
    %227 = cast(%var_2768, dtype="float64") /* ty=Tensor[(720), float64] */;
    %228 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
    %229 = cast(%228, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
    %230 = cast(%var_2769, dtype="float64") /* ty=Tensor[(39), float64] */;
    %231 = reshape(%227, newshape=[15, 16, 3]) /* ty=Tensor[(15, 16, 3), float64] */;
    %232 = reshape(%229, newshape=[216]) /* ty=Tensor[(216), bool] */;
    %233 = reshape(%230, newshape=[39]) /* ty=Tensor[(39), float64] */;
    %234 = @func_1536(%231, %232, %233) /* ty=(Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) */;
    %235 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 1040), int16] */, dtype="int16") /* ty=Tensor[(1, 1040), int16] */;
    %236 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 1040), int16] */, dtype="int16") /* ty=Tensor[(1, 1040), int16] */;
    %237 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 1040), int16] */, dtype="bool") /* ty=Tensor[(1, 1040), bool] */;
    %238 = reshape(%235, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
    %239 = reshape(%236, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
    %240 = reshape(%237, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
    %241 = @func_2319(%238, %239, %240) /* ty=(Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) */;
    %242 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
    %243 = %226.0;
    %244 = %234.3;
    %245 = %241.3;
    (%242, %243, meta[relay.Constant][16] /* ty=Tensor[(14, 2), float64] */, %228, %244, %var_2768, %var_2769, %245, meta[relay.Constant][17] /* ty=Tensor[(1, 1040), int16] */)
  };
  %246(%var_2775, %var_2776) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(14, 2), float64], Tensor[(3, 8, 9), bool], Tensor[(15, 16, 3), float64], Tensor[(720), float64], Tensor[(39), float64], Tensor[(480), uint16], Tensor[(1, 1040), int16]) */
}

def @func_3183(%var_3124: Tensor[(80), uint16], %var_3125: Tensor[(4, 120), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) {
  %247 = cast(%var_3124, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %248 = cast(%var_3125, dtype="uint16") /* ty=Tensor[(4, 120), uint16] */;
  %249 = reshape(%247, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %250 = reshape(%248, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %251 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %252 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
  %253 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %254 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
  %255 = @func_799(%249, %250) /* ty=Tensor[(6, 5, 16), uint64] */;
  %256 = %251.0;
  %257 = %252.2;
  %258 = %253.1;
  %259 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  (%254, %255, %var_3124, %var_3125, %256, %257, %258, %259)
}

def @func_2035(%var_2034: Tensor[(2, 12, 11), float64]) -> (Tensor[(2, 12, 11), float64], Tensor[(3, 8, 9), bool]) {
  %264 = fn (%var_2023: Tensor[(2, 12, 11), float64]) -> (Tensor[(2, 12, 11), float64], Tensor[(3, 8, 9), bool]) {
    %260 = cast(%var_2023, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
    %261 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
    %262 = sinh(%260) /* ty=Tensor[(2, 12, 11), float64] */;
    %263 = %261.1;
    (%262, %263)
  };
  %264(%var_2034) /* ty=(Tensor[(2, 12, 11), float64], Tensor[(3, 8, 9), bool]) */
}

def @func_2007() -> (Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) {
  %265 = cast(meta[relay.Constant][18] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %266 = cast(meta[relay.Constant][18] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %267 = reshape(%265, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %268 = reshape(%266, newshape=[5, 14, 13]) /* ty=Tensor[(5, 14, 13), float64] */;
  %269 = @func_1002() /* ty=Tensor[(3, 8, 9), bool] */;
  %270 = @func_620(%267, %268) /* ty=Tensor[(5, 14, 13), float64] */;
  (%269, %270, meta[relay.Constant][18] /* ty=Tensor[(910), float64] */)
}

def @func_4287() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  @func_4285() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_3589() -> (Tensor[(12, 2, 7), float64],) {
  @func_3587() /* ty=(Tensor[(12, 2, 7), float64],) */
}

def @func_5656() -> Tensor[(3, 8, 9), float64] {
  @func_5654() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_2246() -> (Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) {
  %271 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %272 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 880), float64] */, dtype="float64") /* ty=Tensor[(1, 880), float64] */;
  %273 = reshape(%272, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %274 = @func_2110(%273) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) */;
  %275 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %276 = %271.0;
  %277 = %274.2;
  %278 = %275.1;
  (%276, %277, meta[relay.Constant][19] /* ty=Tensor[(1, 880), float64] */, %278)
}

def @func_4396() -> Tensor[(3, 8, 9), float64] {
  %279 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
  %279.3
}

def @func_3862(%var_3860: Tensor[(14, 7, 5), int8], %var_3861: Tensor[(14, 7, 5), int8]) -> (Tensor[(14, 7, 5), int8],) {
  @func_3858(%var_3860, %var_3861) /* ty=(Tensor[(14, 7, 5), int8],) */
}

def @func_508() -> Tensor[(3, 8, 9), int16] {
  %289 = fn () -> Tensor[(3, 8, 9), int16] {
    %280 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
    %281 = cast(%280, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %282 = erf(%281) /* ty=Tensor[(3, 8, 9), float32] */;
    %283 = cast(%282, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %284 = sin(%283) /* ty=Tensor[(3, 8, 9), float32] */;
    %285 = cast(%284, dtype="int16") /* ty=Tensor[(3, 8, 9), int16] */;
    %286 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%282, dtype="int16") /* ty=Tensor[(3, 8, 9), int16] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    left_shift(%287, %288) /* ty=Tensor[(3, 8, 9), int16] */
  };
  %289() /* ty=Tensor[(3, 8, 9), int16] */
}

def @func_5691() -> (Tensor[(3, 8, 9), float64],) {
  @func_5689() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_3947(%var_3945: Tensor[(4, 2, 14), float32], %var_3946: Tensor[(216), bool]) -> (Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(3, 8, 9), float64], Tensor[(4, 2, 14), float64]) {
  %307 = fn (%var_3874: Tensor[(4, 2, 14), float32], %var_3880: Tensor[(216), bool]) -> (Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(3, 8, 9), float64], Tensor[(4, 2, 14), float64]) {
    %290 = cast(%var_3880, dtype="bool") /* ty=Tensor[(216), bool] */;
    %291 = reshape(%290, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
    %292 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
    %293 = cast(%var_3874, dtype="float32") /* ty=Tensor[(4, 2, 14), float32] */;
    %294 = rsqrt(%293) /* ty=Tensor[(4, 2, 14), float32] */;
    %295 = cast(%var_3874, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
    %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%294, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %299 = divide(%297, %298) /* ty=Tensor[(4, 2, 14), float64] */;
    %300 = cast(%294, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
    %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%299, dtype="float64") /* ty=Tensor[(4, 2, 14), float64] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %304 = @func_577(%291) /* ty=Tensor[(3, 8, 9), float32] */;
    %305 = %292.2;
    %306 = power(%302, %303) /* ty=Tensor[(4, 2, 14), float64] */;
    (%304, %var_3880, %305, %306)
  };
  %307(%var_3945, %var_3946) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(3, 8, 9), float64], Tensor[(4, 2, 14), float64]) */
}

def @func_1818(%var_1817: Tensor[(28), float64]) -> (Tensor[(3, 8, 9), float32], Tensor[(7, 4, 1), float64], Tensor[(28), float64]) {
  %314 = fn (%var_1814: Tensor[(28), float64]) -> (Tensor[(3, 8, 9), float32], Tensor[(7, 4, 1), float64], Tensor[(28), float64]) {
    %308 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
    %309 = cast(%308, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %310 = cast(%var_1814, dtype="float64") /* ty=Tensor[(28), float64] */;
    %311 = reshape(%310, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), float64] */;
    %312 = atanh(%309) /* ty=Tensor[(3, 8, 9), float32] */;
    %313 = @func_1793(%311) /* ty=Tensor[(7, 4, 1), float64] */;
    (%312, %313, %var_1814)
  };
  %314(%var_1817) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(7, 4, 1), float64], Tensor[(28), float64]) */
}

def @func_2390() -> Tensor[(3, 8, 9), float64] {
  %316 = fn () -> Tensor[(3, 8, 9), float64] {
    %315 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
    %315.1
  };
  %316() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_638() -> Tensor[(3, 8, 9), float64] {
  @func_332() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3433() -> (Tensor[(12, 2, 7), float64],) {
  @func_3431() /* ty=(Tensor[(12, 2, 7), float64],) */
}

def @func_3964() -> (Tensor[(5, 15, 16), float64],) {
  @func_3962() /* ty=(Tensor[(5, 15, 16), float64],) */
}

def @func_3761() -> (Tensor[(1, 2, 10), uint64],) {
  %319 = fn () -> (Tensor[(1, 2, 10), uint64],) {
    %317 = @func_2564() /* ty=(Tensor[(1, 2, 10), uint64],) */;
    %318 = %317.0;
    (%318,)
  };
  %319() /* ty=(Tensor[(1, 2, 10), uint64],) */
}

def @func_1659(%var_1657: Tensor[(455, 2), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(455, 2), float64], Tensor[(3, 8, 9), int16]) {
  @func_1656(%var_1657) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(455, 2), float64], Tensor[(3, 8, 9), int16]) */
}

def @func_949() -> (Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) {
  %320 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %321 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 2, 10), uint64] */, dtype="uint64") /* ty=Tensor[(1, 2, 10), uint64] */;
  %322 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="float32") /* ty=float32 */;
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 2, 10), uint64] */, dtype="float32") /* ty=Tensor[(1, 2, 10), float32] */;
  %324 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 2, 10), uint64] */, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
  %325 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %326 = bitwise_or(%320, %321) /* ty=Tensor[(1, 2, 10), uint64] */;
  %327 = multiply(%322, %323) /* ty=Tensor[(1, 2, 10), float32] */;
  %328 = less(%324, %325) /* ty=Tensor[(1, 2, 10), bool] */;
  (%326, %327, %328)
}

def @func_1361(%var_1322: Tensor[(16, 14, 15), int8], %var_1323: Tensor[(16, 14, 15), int8]) -> (Tensor[(16, 14, 15), float32], Tensor[(16, 14, 15), float32], Tensor[(3, 8, 9), float64]) {
  %329 = cast(%var_1322, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %330 = cast(%var_1323, dtype="int8") /* ty=Tensor[(16, 14, 15), int8] */;
  %331 = shape_of(%var_1322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_1322, dtype="int8") /* ty=Tensor[(16, 14, 15), int8] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %334 = subtract(%332, %333) /* ty=Tensor[(16, 14, 15), int8] */;
  %335 = cast(%var_1322, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %339 = divide(%337, %338) /* ty=Tensor[(16, 14, 15), float32] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(16, 14, 15), float32] */;
  %341 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %342 = log2(%329) /* ty=Tensor[(16, 14, 15), float32] */;
  %343 = cos(%340) /* ty=Tensor[(16, 14, 15), float32] */;
  %344 = %341.0;
  (%342, %343, %344)
}

def @func_4338() -> Tensor[(3, 8, 9), float32] {
  @func_4336() /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_5455(%var_5454: Tensor[(80, 1), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(1, 880), float64], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(15, 12, 16), float64]) {
  %361 = fn (%var_5436: Tensor[(80, 1), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(1, 880), float64], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(15, 12, 16), float64]) {
    %345 = @func_1186() /* ty=Tensor[(3, 8, 9), float64] */;
    %346 = @func_4820() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(3, 8, 9), float64], Tensor[(910), float32]) */;
    %347 = %346.0;
    %348 = cast(%347, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
    %349 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
    %350 = cast(%345, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
    %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %352 = cast(%var_5436, dtype="uint16") /* ty=Tensor[(80, 1), uint16] */;
    %353 = cast(meta[relay.Constant][22] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %354 = reshape(%352, newshape=[80]) /* ty=Tensor[(80), uint16] */;
    %355 = reshape(%353, newshape=[4, 120]) /* ty=Tensor[(4, 120), uint16] */;
    %356 = @func_3183(%354, %355) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) */;
    %357 = @func_3714() /* ty=(Tensor[(15, 12, 16), float64],) */;
    %358 = subtract(%350, %351) /* ty=Tensor[(3, 8, 9), float64] */;
    %359 = %356.5;
    %360 = %357.0;
    (%358, %359, %var_5436, meta[relay.Constant][22] /* ty=Tensor[(480), uint16] */, %360)
  };
  %361(%var_5454) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 880), float64], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(15, 12, 16), float64]) */
}

def @func_3842() -> Tensor[(3, 8, 9), float64] {
  @func_3840() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_4336() -> Tensor[(3, 8, 9), float32] {
  %362 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  exp(%364) /* ty=Tensor[(3, 8, 9), float32] */
}

def @func_782(%var_780: Tensor[(16, 48), int8]) -> (Tensor[(16, 8, 6), int8], Tensor[(16, 48), int8], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  @func_779(%var_780) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(16, 48), int8], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_5521(%var_5518: Tensor[(3, 8, 9), float64], %var_5519: Tensor[(480), uint16], %var_5520: Tensor[(39), float64]) -> (Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(39), float64]) {
  %385 = fn (%var_5471: Tensor[(3, 8, 9), float64], %var_5477: Tensor[(480), uint16], %var_5501: Tensor[(39), float64]) -> (Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(39), float64]) {
    %365 = cast(%var_5477, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %366 = reshape(%365, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %367 = @func_1877(%366) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) */;
    %368 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %369 = %368.0;
    %370 = cast(%var_5471, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%369, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %374 = power(%372, %373) /* ty=Tensor[(3, 8, 9), float32] */;
    %375 = cast(%369, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %377 = cast(%374, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %379 = cast(%var_5501, dtype="float64") /* ty=Tensor[(39), float64] */;
    %380 = reshape(%379, newshape=[39]) /* ty=Tensor[(39), float64] */;
    %381 = @func_2462(%380) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) */;
    %382 = %367.3;
    %383 = mod(%377, %378) /* ty=Tensor[(3, 8, 9), float32] */;
    %384 = %381.0;
    (%382, %var_5477, %383, %384, %var_5501)
  };
  %385(%var_5518, %var_5519, %var_5520) /* ty=(Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(39), float64]) */
}

def @func_4964() -> (Tensor[(3, 8, 9), float64],) {
  %386 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %387 = %386.0;
  (%387,)
}

def @func_1540(%var_1537: Tensor[(15, 16, 3), float64], %var_1538: Tensor[(216), bool], %var_1539: Tensor[(39), float64]) -> (Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) {
  %403 = fn (%var_1473: Tensor[(15, 16, 3), float64], %var_1494: Tensor[(216), bool], %var_1530: Tensor[(39), float64]) -> (Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) {
    %388 = cast(%var_1473, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
    %389 = cast(%var_1494, dtype="bool") /* ty=Tensor[(216), bool] */;
    %390 = reshape(%389, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
    %391 = cast(%var_1473, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
    %392 = cosh(%391) /* ty=Tensor[(15, 16, 3), float64] */;
    %393 = cast(%392, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
    %394 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
    %395 = cast(%var_1530, dtype="float64") /* ty=Tensor[(39), float64] */;
    %396 = reshape(%395, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
    %397 = @func_833(%396) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
    %398 = exp(%388) /* ty=Tensor[(15, 16, 3), float64] */;
    %399 = @func_577(%390) /* ty=Tensor[(3, 8, 9), float32] */;
    %400 = tan(%393) /* ty=Tensor[(15, 16, 3), float64] */;
    %401 = %394.2;
    %402 = %397.0;
    (%398, %399, %var_1494, %400, %401, %402, %var_1530)
  };
  %403(%var_1537, %var_1538, %var_1539) /* ty=(Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float32], Tensor[(216), bool], Tensor[(15, 16, 3), float64], Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(39), float64]) */
}

def @func_4485() -> (Tensor[(3, 8, 9), bool], Tensor[(768), int8]) {
  %404 = @func_2126() /* ty=(Tensor[(16, 10, 14), float64], Tensor[(3, 8, 9), bool]) */;
  %405 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
  %406 = %404.1;
  %407 = %405.2;
  (%406, %407)
}

def @func_3840() -> Tensor[(3, 8, 9), float64] {
  %408 = @func_1192() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %408.0
}

def @func_4947(%var_4934: Tensor[(4, 960), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(4, 960), float64], Tensor[(3360), float64]) {
  %409 = cast(%var_4934, dtype="float64") /* ty=Tensor[(4, 960), float64] */;
  %410 = cast(%var_4934, dtype="float64") /* ty=Tensor[(4, 960), float64] */;
  %411 = reshape(%409, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), float64] */;
  %412 = reshape(%410, newshape=[15, 16, 16]) /* ty=Tensor[(15, 16, 16), float64] */;
  %413 = @func_4031(%411, %412) /* ty=(Tensor[(15, 16, 16), float64], Tensor[(3, 8, 9), float64], Tensor[(3360), int8]) */;
  %414 = %413.2;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %416 = @func_3353() /* ty=Tensor[(3, 8, 9), float64] */;
  %417 = sigmoid(%415) /* ty=Tensor[(3360), float64] */;
  (%416, %var_4934, %417)
}

def @func_4398() -> Tensor[(3, 8, 9), float64] {
  @func_4396() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_803(%var_801: Tensor[(1, 5, 16), uint16], %var_802: Tensor[(6, 5, 16), uint16]) -> Tensor[(6, 5, 16), uint64] {
  @func_799(%var_801, %var_802) /* ty=Tensor[(6, 5, 16), uint64] */
}

def @func_1091() -> (Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) {
  %418 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %419 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %420 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %421 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %422 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %423 = %418.0;
  %424 = %419.0;
  %425 = %420.0;
  (%421, %422, %423, %424, %425)
}

def @func_1757(%var_1756: Tensor[(80), uint16]) -> (Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(120, 4), uint16]) {
  %439 = fn (%var_1736: Tensor[(80), uint16]) -> (Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(120, 4), uint16]) {
    %426 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
    %427 = cast(%426, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
    %428 = @func_1192() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %429 = %428.0;
    %430 = cast(%429, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
    %431 = reshape(%430, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
    %432 = cast(%var_1736, dtype="uint16") /* ty=Tensor[(80), uint16] */;
    %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(120, 4), uint16] */, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %434 = reshape(%432, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
    %435 = reshape(%433, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
    %436 = sqrt(%427) /* ty=Tensor[(3, 8, 9), float32] */;
    %437 = @func_577(%431) /* ty=Tensor[(3, 8, 9), float32] */;
    %438 = @func_799(%434, %435) /* ty=Tensor[(6, 5, 16), uint64] */;
    (%436, %429, %437, %438, %var_1736, meta[relay.Constant][23] /* ty=Tensor[(120, 4), uint16] */)
  };
  %439(%var_1756) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(120, 4), uint16]) */
}

def @func_255() -> Tensor[(3, 8, 9), bool] {
  %440 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 8, 9), bool] */, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %441 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 8, 9), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 8, 9), bool] */, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%442, %443) /* ty=Tensor[(3, 8, 9), bool] */
}

def @func_2127() -> (Tensor[(16, 10, 14), float64], Tensor[(3, 8, 9), bool]) {
  %449 = fn () -> (Tensor[(16, 10, 14), float64], Tensor[(3, 8, 9), bool]) {
    %444 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 10, 14), float64] */;
    %445 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
    %446 = @func_2007() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) */;
    %447 = divide(%444, %445) /* ty=Tensor[(16, 10, 14), float64] */;
    %448 = %446.0;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(16, 10, 14), float64], Tensor[(3, 8, 9), bool]) */
}

def @func_1451(%var_1436: Tensor[(80), uint16]) -> (Tensor[(11, 10, 3), float64], Tensor[(1, 2, 10), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(3, 8, 9), int16], Tensor[(11, 10, 3), uint64]) {
  %450 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %451 = @func_949() /* ty=(Tensor[(1, 2, 10), uint64], Tensor[(1, 2, 10), float32], Tensor[(1, 2, 10), bool]) */;
  %452 = cast(%var_1436, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %453 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 240), uint16] */, dtype="uint16") /* ty=Tensor[(2, 240), uint16] */;
  %454 = reshape(%452, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
  %455 = reshape(%453, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
  %456 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
  %457 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %458 = cos(%457) /* ty=Tensor[(11, 10, 3), float64] */;
  %459 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10, 3), float64] */, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="uint64") /* ty=Tensor[(11, 10, 3), uint64] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %463 = log2(%450) /* ty=Tensor[(11, 10, 3), float64] */;
  %464 = %451.1;
  %465 = @func_799(%454, %455) /* ty=Tensor[(6, 5, 16), uint64] */;
  %466 = %456.0;
  %467 = multiply(%461, %462) /* ty=Tensor[(11, 10, 3), uint64] */;
  (%463, %464, %465, %var_1436, meta[relay.Constant][29] /* ty=Tensor[(2, 240), uint16] */, %466, %467)
}

def @func_799(%var_791: Tensor[(1, 5, 16), uint16], %var_792: Tensor[(6, 5, 16), uint16]) -> Tensor[(6, 5, 16), uint64] {
  %468 = cast(%var_791, dtype="uint16") /* ty=Tensor[(1, 5, 16), uint16] */;
  %469 = cast(%var_792, dtype="uint16") /* ty=Tensor[(6, 5, 16), uint16] */;
  %470 = subtract(%468, %469) /* ty=Tensor[(6, 5, 16), uint16] */;
  %471 = cast(%470, dtype="uint64") /* ty=Tensor[(6, 5, 16), uint64] */;
  %472 = cast(%var_791, dtype="uint64") /* ty=Tensor[(1, 5, 16), uint64] */;
  left_shift(%471, %472) /* ty=Tensor[(6, 5, 16), uint64] */
}

def @func_2855() -> Tensor[(3, 8, 9), float64] {
  %474 = fn () -> Tensor[(3, 8, 9), float64] {
    %473 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %473.0
  };
  %474() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_4578() -> (Tensor[(3, 8, 9), float64],) {
  %477 = fn () -> (Tensor[(3, 8, 9), float64],) {
    %475 = @func_4225() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %476 = %475.0;
    (%476,)
  };
  %477() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_4537(%var_4536: Tensor[(880), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(880), float64], Tensor[(3, 8, 9), float64]) {
  %485 = fn (%var_4508: Tensor[(880), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(880), float64], Tensor[(3, 8, 9), float64]) {
    %478 = @func_3448() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
    %479 = cast(%var_4508, dtype="float64") /* ty=Tensor[(880), float64] */;
    %480 = reshape(%479, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
    %481 = @func_2110(%480) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(5, 14, 13), float64], Tensor[(1, 910), float64]) */;
    %482 = %478.1;
    %483 = %481.2;
    %484 = @func_4217() /* ty=Tensor[(3, 8, 9), float64] */;
    (%482, %483, %var_4508, %484)
  };
  %485(%var_4536) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(880), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_833(%var_811: Tensor[(3, 13, 1), float64]) -> (Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) {
  %486 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 768), int8] */, dtype="int8") /* ty=Tensor[(1, 768), int8] */;
  %487 = reshape(%486, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
  %488 = cast(%var_811, dtype="float64") /* ty=Tensor[(3, 13, 1), float64] */;
  %489 = asinh(%488) /* ty=Tensor[(3, 13, 1), float64] */;
  %490 = cast(%489, dtype="int8") /* ty=Tensor[(3, 13, 1), int8] */;
  %491 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 768), int8] */, dtype="int8") /* ty=Tensor[(1, 768), int8] */;
  %492 = multiply(%490, %491) /* ty=Tensor[(3, 13, 768), int8] */;
  %493 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 768), int8] */, dtype="bool") /* ty=Tensor[(1, 768), bool] */;
  %494 = cast(%492, dtype="bool") /* ty=Tensor[(3, 13, 768), bool] */;
  %495 = @func_686(%487) /* ty=Tensor[(16, 8, 6), int8] */;
  %496 = logical_and(%493, %494) /* ty=Tensor[(3, 13, 768), bool] */;
  %497 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  (%495, %496, %497)
}

def @func_5271() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  @func_5269() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_4429() -> Tensor[(910), float64] {
  %498 = @func_2007() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) */;
  %498.2
}

def @func_5776() -> Tensor[(3, 8, 9), float64] {
  @func_5774() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_4319(%var_4317: Tensor[(8, 16, 16), uint16], %var_4318: Tensor[(8, 16, 16), uint16]) -> (Tensor[(8, 16, 16), uint16],) {
  %504 = fn (%var_4310: Tensor[(8, 16, 16), uint16], %var_4311: Tensor[(8, 16, 16), uint16]) -> (Tensor[(8, 16, 16), uint16],) {
    %499 = cast(%var_4311, dtype="uint16") /* ty=Tensor[(8, 16, 16), uint16] */;
    %500 = shape_of(%var_4310, dtype="int32") /* ty=Tensor[(3), int32] */;
    %501 = cast(%var_4310, dtype="uint16") /* ty=Tensor[(8, 16, 16), uint16] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %503 = right_shift(%501, %502) /* ty=Tensor[(8, 16, 16), uint16] */;
    (%503,)
  };
  %504(%var_4317, %var_4318) /* ty=(Tensor[(8, 16, 16), uint16],) */
}

def @func_4487() -> (Tensor[(3, 8, 9), bool], Tensor[(768), int8]) {
  @func_4485() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(768), int8]) */
}

def @func_5220(%var_5185: Tensor[(9, 11, 12), float64]) -> (Tensor[(9, 11, 12), float64], Tensor[(9, 11, 12), float32], Tensor[(3, 8, 9), float64], Tensor[(9, 11, 12), float64], Tensor[(3, 8, 9), float32]) {
  %505 = cast(%var_5185, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %506 = cast(%var_5185, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %507 = log10(%506) /* ty=Tensor[(9, 11, 12), float64] */;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(9, 11, 12), float32] */;
  %509 = cast(%var_5185, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %510 = @func_1574() /* ty=Tensor[(3, 8, 9), float64] */;
  %511 = cast(%510, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %512 = reshape(%511, newshape=[3, 8, 9]) /* ty=Tensor[(3, 8, 9), bool] */;
  %513 = cos(%505) /* ty=Tensor[(9, 11, 12), float64] */;
  %514 = sin(%508) /* ty=Tensor[(9, 11, 12), float32] */;
  %515 = acosh(%509) /* ty=Tensor[(9, 11, 12), float64] */;
  %516 = @func_577(%512) /* ty=Tensor[(3, 8, 9), float32] */;
  (%513, %514, %510, %515, %516)
}

def @func_916() -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) {
  %517 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %520 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
  %521 = sinh(%519) /* ty=Tensor[(3, 8, 9), float32] */;
  %522 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  (%520, %521, %522)
}

def @main(%var_5846: Tensor[(3, 5, 3), float64]) -> (Tensor[(3, 5, 3), float64],) {
  %523 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 5, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %524 = shape_of(%var_5846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_5846, dtype="float64") /* ty=Tensor[(3, 5, 3), float64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %527 = mod(%525, %526) /* ty=Tensor[(3, 5, 3), float64] */;
  (%527,)
}

def @func_4620(%var_4618: Tensor[(11, 11, 5), int8], %var_4619: Tensor[(11, 11, 5), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(80), uint16], Tensor[(11, 11, 5), int32]) {
  %544 = fn (%var_4590: Tensor[(11, 11, 5), int8], %var_4610: Tensor[(11, 11, 5), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(80), uint16], Tensor[(11, 11, 5), int32]) {
    %528 = cast(meta[relay.Constant][32] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
    %529 = reshape(%528, newshape=[40, 2]) /* ty=Tensor[(40, 2), uint16] */;
    %530 = @func_4129(%529) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(120, 4), uint16], Tensor[(40, 2), uint16], Tensor[(3, 8, 9), bool], Tensor[(39), float64], Tensor[(1, 880), float64], Tensor[(480), uint16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
    %531 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 11, 5), int8] */, dtype="bool") /* ty=Tensor[(11, 11, 5), bool] */;
    %532 = shape_of(%var_4590, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%var_4590, dtype="bool") /* ty=Tensor[(11, 11, 5), bool] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %535 = greater(%533, %534) /* ty=Tensor[(11, 11, 5), bool] */;
    %536 = cast(%535, dtype="float64") /* ty=Tensor[(11, 11, 5), float64] */;
    %537 = acos(%536) /* ty=Tensor[(11, 11, 5), float64] */;
    %538 = cast(%var_4610, dtype="int32") /* ty=Tensor[(11, 11, 5), int32] */;
    %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%537, dtype="int32") /* ty=Tensor[(11, 11, 5), int32] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %542 = %530.0;
    %543 = subtract(%540, %541) /* ty=Tensor[(11, 11, 5), int32] */;
    (%542, meta[relay.Constant][32] /* ty=Tensor[(80), uint16] */, %543)
  };
  %544(%var_4618, %var_4619) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(80), uint16], Tensor[(11, 11, 5), int32]) */
}

def @func_623(%var_621: Tensor[(5, 14, 13), float64], %var_622: Tensor[(5, 14, 13), float64]) -> Tensor[(5, 14, 13), float64] {
  %549 = fn (%var_612: Tensor[(5, 14, 13), float64], %var_613: Tensor[(5, 14, 13), float64]) -> Tensor[(5, 14, 13), float64] {
    %545 = cast(%var_613, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
    %546 = shape_of(%var_612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%var_612, dtype="float64") /* ty=Tensor[(5, 14, 13), float64] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%547, %548) /* ty=Tensor[(5, 14, 13), float64] */
  };
  %549(%var_621, %var_622) /* ty=Tensor[(5, 14, 13), float64] */
}

def @func_1237(%var_1235: Tensor[(480), uint16], %var_1236: Tensor[(6, 5, 16), uint64]) -> (Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) {
  %567 = fn (%var_1203: Tensor[(480), uint16], %var_1209: Tensor[(6, 5, 16), uint64]) -> (Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) {
    %550 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
    %551 = cast(meta[relay.Constant][34] /* ty=Tensor[(80, 1), uint16] */, dtype="uint16") /* ty=Tensor[(80, 1), uint16] */;
    %552 = cast(%var_1203, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %553 = reshape(%551, newshape=[1, 5, 16]) /* ty=Tensor[(1, 5, 16), uint16] */;
    %554 = reshape(%552, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint16] */;
    %555 = @func_799(%553, %554) /* ty=Tensor[(6, 5, 16), uint64] */;
    %556 = cast(%var_1209, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
    %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%555, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %560 = cast(%var_1209, dtype="float32") /* ty=Tensor[(6, 5, 16), float32] */;
    %561 = cast(meta[relay.Constant][35] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
    %562 = reshape(%561, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
    %563 = %550.4;
    %564 = power(%558, %559) /* ty=Tensor[(6, 5, 16), float32] */;
    %565 = cosh(%560) /* ty=Tensor[(6, 5, 16), float32] */;
    %566 = @func_686(%562) /* ty=Tensor[(16, 8, 6), int8] */;
    (%563, meta[relay.Constant][34] /* ty=Tensor[(80, 1), uint16] */, %var_1203, %564, %565, %566, meta[relay.Constant][35] /* ty=Tensor[(768), int8] */)
  };
  %567(%var_1235, %var_1236) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */
}

def @func_1575() -> Tensor[(3, 8, 9), float64] {
  %568 = fn () -> Tensor[(3, 8, 9), float64] {
    @func_332() /* ty=Tensor[(3, 8, 9), float64] */
  };
  %568() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_1919() -> (Tensor[(3, 8, 9), float64],) {
  %570 = fn () -> (Tensor[(3, 8, 9), float64],) {
    %569 = @func_1013() /* ty=Tensor[(3, 8, 9), float64] */;
    (%569,)
  };
  %570() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_5105(%var_5103: Tensor[(2, 240), uint16]) -> (Tensor[(2, 240), uint32], Tensor[(2, 240), float32]) {
  @func_5102(%var_5103) /* ty=(Tensor[(2, 240), uint32], Tensor[(2, 240), float32]) */
}

def @func_4820() -> (Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(3, 8, 9), float64], Tensor[(910), float32]) {
  %571 = cast(meta[relay.Constant][36] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %572 = reshape(%571, newshape=[455, 2]) /* ty=Tensor[(455, 2), float64] */;
  %573 = @func_1656(%572) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(5, 14, 13), float64], Tensor[(455, 2), float64], Tensor[(3, 8, 9), int16]) */;
  %574 = @func_3525() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */;
  %575 = cast(meta[relay.Constant][36] /* ty=Tensor[(910), float64] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %576 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %577 = %573.1;
  %578 = %574.0;
  %579 = tan(%575) /* ty=Tensor[(910), float32] */;
  (%576, %577, %578, %579)
}

def @func_4966() -> (Tensor[(3, 8, 9), float64],) {
  @func_4964() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_2892() -> (Tensor[(3, 4, 2), bool], Tensor[(3, 8, 9), float64]) {
  %586 = fn () -> (Tensor[(3, 4, 2), bool], Tensor[(3, 8, 9), float64]) {
    %580 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 4, 2), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
    %581 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 4, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 4, 2), bool] */, dtype="bool") /* ty=Tensor[(3, 4, 2), bool] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %584 = logical_and(%582, %583) /* ty=Tensor[(3, 4, 2), bool] */;
    %585 = @func_1013() /* ty=Tensor[(3, 8, 9), float64] */;
    (%584, %585)
  };
  %586() /* ty=(Tensor[(3, 4, 2), bool], Tensor[(3, 8, 9), float64]) */
}

def @func_2464(%var_2463: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) {
  %593 = fn (%var_2460: Tensor[(39), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) {
    %587 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
    %588 = cast(%var_2460, dtype="float64") /* ty=Tensor[(39), float64] */;
    %589 = reshape(%588, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
    %590 = @func_833(%589) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
    %591 = %587.1;
    %592 = %590.1;
    (%591, %592, %var_2460)
  };
  %593(%var_2463) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) */
}

def @func_3187(%var_3185: Tensor[(80), uint16], %var_3186: Tensor[(4, 120), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) {
  @func_3183(%var_3185, %var_3186) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(4, 120), uint16], Tensor[(3, 8, 9), int16], Tensor[(1, 880), float64], Tensor[(16, 8, 6), int8], Tensor[(3, 8, 9), float64]) */
}

def @func_3450() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  @func_3448() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_4131(%var_4130: Tensor[(40, 2), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(120, 4), uint16], Tensor[(40, 2), uint16], Tensor[(3, 8, 9), bool], Tensor[(39), float64], Tensor[(1, 880), float64], Tensor[(480), uint16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %614 = fn (%var_4071: Tensor[(40, 2), uint16]) -> (Tensor[(3, 8, 9), float64], Tensor[(120, 4), uint16], Tensor[(40, 2), uint16], Tensor[(3, 8, 9), bool], Tensor[(39), float64], Tensor[(1, 880), float64], Tensor[(480), uint16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
    %594 = cast(%var_4071, dtype="uint16") /* ty=Tensor[(40, 2), uint16] */;
    %595 = reshape(%594, newshape=[80]) /* ty=Tensor[(80), uint16] */;
    %596 = @func_1755(%595) /* ty=(Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(120, 4), uint16]) */;
    %597 = cast(meta[relay.Constant][39] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
    %598 = reshape(%597, newshape=[3, 13, 1]) /* ty=Tensor[(3, 13, 1), float64] */;
    %599 = @func_833(%598) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */;
    %600 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
    %601 = %596.5;
    %602 = cast(%601, dtype="uint16") /* ty=Tensor[(120, 4), uint16] */;
    %603 = reshape(%602, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %604 = @func_1877(%603) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), int16], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(480), uint16], Tensor[(480), uint16]) */;
    %605 = cast(meta[relay.Constant][39] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
    %606 = reshape(%605, newshape=[39]) /* ty=Tensor[(39), float64] */;
    %607 = @func_2086(%606) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 13, 768), bool], Tensor[(39), float64]) */;
    %608 = @func_2389() /* ty=Tensor[(3, 8, 9), float64] */;
    %609 = %599.2;
    %610 = %600.2;
    %611 = %604.4;
    %612 = %607.0;
    %613 = @func_3840() /* ty=Tensor[(3, 8, 9), float64] */;
    (%608, %601, %var_4071, %609, meta[relay.Constant][39] /* ty=Tensor[(39), float64] */, %610, %611, %612, %613)
  };
  %614(%var_4130) /* ty=(Tensor[(3, 8, 9), float64], Tensor[(120, 4), uint16], Tensor[(40, 2), uint16], Tensor[(3, 8, 9), bool], Tensor[(39), float64], Tensor[(1, 880), float64], Tensor[(480), uint16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) */
}

def @func_2323(%var_2320: Tensor[(13, 5, 16), int16], %var_2321: Tensor[(13, 5, 16), int16], %var_2322: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) {
  %647 = fn (%var_2249: Tensor[(13, 5, 16), int16], %var_2250: Tensor[(13, 5, 16), int16], %var_2314: Tensor[(13, 5, 16), bool]) -> (Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) {
    %615 = cast(%var_2250, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %616 = shape_of(%var_2249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(%var_2249, dtype="bool") /* ty=Tensor[(13, 5, 16), bool] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %619 = equal(%617, %618) /* ty=Tensor[(13, 5, 16), bool] */;
    %620 = cast(%var_2250, dtype="uint32") /* ty=Tensor[(13, 5, 16), uint32] */;
    %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %622 = cast(%619, dtype="uint32") /* ty=Tensor[(13, 5, 16), uint32] */;
    %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %624 = @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */;
    %625 = @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
    %626 = cast(meta[relay.Constant][40] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %627 = cast(meta[relay.Constant][40] /* ty=Tensor[(480), uint16] */, dtype="uint64") /* ty=Tensor[(480), uint64] */;
    %628 = reshape(%626, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %629 = reshape(%627, newshape=[6, 5, 16]) /* ty=Tensor[(6, 5, 16), uint64] */;
    %630 = @func_1234(%628, %629) /* ty=(Tensor[(3, 8, 9), int16], Tensor[(80, 1), uint16], Tensor[(480), uint16], Tensor[(6, 5, 16), float32], Tensor[(6, 5, 16), float32], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */;
    %631 = cast(%var_2249, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
    %632 = atanh(%631) /* ty=Tensor[(13, 5, 16), float64] */;
    %633 = cast(%619, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %637 = cast(%var_2314, dtype="int8") /* ty=Tensor[(13, 5, 16), int8] */;
    %638 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%619, dtype="int8") /* ty=Tensor[(13, 5, 16), int8] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %641 = left_shift(%622, %623) /* ty=Tensor[(13, 5, 16), uint32] */;
    %642 = %624.1;
    %643 = %625.2;
    %644 = %630.2;
    %645 = bitwise_or(%635, %636) /* ty=Tensor[(13, 5, 16), int32] */;
    %646 = logical_xor(%639, %640) /* ty=Tensor[(13, 5, 16), int8] */;
    (%641, %642, %643, %644, meta[relay.Constant][40] /* ty=Tensor[(480), uint16] */, %645, %646)
  };
  %647(%var_2320, %var_2321, %var_2322) /* ty=(Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) */
}

def @func_333() -> Tensor[(3, 8, 9), float64] {
  %650 = fn () -> Tensor[(3, 8, 9), float64] {
    %648 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
    %649 = cast(%648, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
    atan(%649) /* ty=Tensor[(3, 8, 9), float64] */
  };
  %650() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_2800() -> (Tensor[(3, 8, 9), float64],) {
  %651 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %652 = %651.0;
  (%652,)
}

def @func_4154() -> Tensor[(3, 8, 9), float64] {
  %653 = fn () -> Tensor[(3, 8, 9), float64] {
    @func_3840() /* ty=Tensor[(3, 8, 9), float64] */
  };
  %653() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3683(%var_3639: Tensor[(28), float64], %var_3660: Tensor[(7, 4, 8), float32], %var_3670: Tensor[(7, 4, 8), float64]) -> (Tensor[(3, 8, 9), float64], Tensor[(1040), int16], Tensor[(3, 8, 9), int16], Tensor[(28), float64], Tensor[(3, 8, 9), float64], Tensor[(7, 4, 8), int32]) {
  %654 = @func_2145() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %655 = @func_2560() /* ty=(Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) */;
  %656 = @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */;
  %657 = cast(%var_3639, dtype="float64") /* ty=Tensor[(28), float64] */;
  %658 = reshape(%657, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), float64] */;
  %659 = @func_1793(%658) /* ty=Tensor[(7, 4, 1), float64] */;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(7, 4, 1), float32] */;
  %661 = acos(%660) /* ty=Tensor[(7, 4, 1), float32] */;
  %662 = cast(%661, dtype="uint64") /* ty=Tensor[(7, 4, 1), uint64] */;
  %663 = cast(%var_3660, dtype="uint64") /* ty=Tensor[(7, 4, 8), uint64] */;
  %664 = minimum(%662, %663) /* ty=Tensor[(7, 4, 8), uint64] */;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(7, 4, 8), float64] */;
  %666 = atanh(%665) /* ty=Tensor[(7, 4, 8), float64] */;
  %667 = cast(%var_3670, dtype="int32") /* ty=Tensor[(7, 4, 8), int32] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="int32") /* ty=Tensor[(7, 4, 8), int32] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %671 = %654.0;
  %672 = %655.1;
  %673 = %656.2;
  %674 = @func_2995() /* ty=Tensor[(3, 8, 9), float64] */;
  %675 = logical_xor(%669, %670) /* ty=Tensor[(7, 4, 8), int32] */;
  (%671, %672, %673, %var_3639, %674, %675)
}

def @func_1002() -> Tensor[(3, 8, 9), bool] {
  @func_255() /* ty=Tensor[(3, 8, 9), bool] */
}

def @func_4915(%var_4913: Tensor[(11, 1, 15), bool], %var_4914: Tensor[(11, 15, 15), bool]) -> (Tensor[(11, 15, 15), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(1, 2, 10), bool], Tensor[(6, 5, 16), float32], Tensor[(480), uint16], Tensor[(11, 15, 15), int64]) {
  @func_4911(%var_4913, %var_4914) /* ty=(Tensor[(11, 15, 15), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(1, 2, 10), bool], Tensor[(6, 5, 16), float32], Tensor[(480), uint16], Tensor[(11, 15, 15), int64]) */
}

def @func_3997() -> (Tensor[(3, 8, 9), float64],) {
  @func_3995() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_4305(%var_4304: Tensor[(15, 16, 14), int16]) -> (Tensor[(15, 16, 14), int16],) {
  %681 = fn (%var_4297: Tensor[(15, 16, 14), int16]) -> (Tensor[(15, 16, 14), int16],) {
    %676 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 16, 14), int16] */, dtype="int16") /* ty=Tensor[(15, 16, 14), int16] */;
    %677 = shape_of(%var_4297, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%var_4297, dtype="int16") /* ty=Tensor[(15, 16, 14), int16] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %680 = bitwise_and(%678, %679) /* ty=Tensor[(15, 16, 14), int16] */;
    (%680,)
  };
  %681(%var_4304) /* ty=(Tensor[(15, 16, 14), int16],) */
}

def @func_4185() -> Tensor[(3, 8, 9), float64] {
  @func_4183() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_836(%var_834: Tensor[(3, 13, 1), float64]) -> (Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) {
  @func_833(%var_834) /* ty=(Tensor[(16, 8, 6), int8], Tensor[(3, 13, 768), bool], Tensor[(3, 8, 9), bool]) */
}

def @func_2561() -> (Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) {
  %712 = fn () -> (Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) {
    %682 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
    %683 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
    %684 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), int16] */, dtype="bool") /* ty=Tensor[(1040), bool] */;
    %685 = reshape(%682, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
    %686 = reshape(%683, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
    %687 = reshape(%684, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
    %688 = @func_2319(%685, %686, %687) /* ty=(Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) */;
    %689 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
    %690 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), int16] */, dtype="int16") /* ty=Tensor[(1040), int16] */;
    %691 = cast(meta[relay.Constant][42] /* ty=Tensor[(1040), int16] */, dtype="bool") /* ty=Tensor[(1040), bool] */;
    %692 = reshape(%689, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
    %693 = reshape(%690, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), int16] */;
    %694 = reshape(%691, newshape=[13, 5, 16]) /* ty=Tensor[(13, 5, 16), bool] */;
    %695 = @func_2319(%692, %693, %694) /* ty=(Tensor[(13, 5, 16), uint32], Tensor[(3, 8, 9), float32], Tensor[(768), int8], Tensor[(480), uint16], Tensor[(480), uint16], Tensor[(13, 5, 16), int32], Tensor[(13, 5, 16), int8]) */;
    %696 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %697 = cast(meta[relay.Constant][43] /* ty=Tensor[(80), uint16] */, dtype="uint16") /* ty=Tensor[(80), uint16] */;
    %698 = reshape(%697, newshape=[80]) /* ty=Tensor[(80), uint16] */;
    %699 = @func_1451(%698) /* ty=(Tensor[(11, 10, 3), float64], Tensor[(1, 2, 10), float32], Tensor[(6, 5, 16), uint64], Tensor[(80), uint16], Tensor[(2, 240), uint16], Tensor[(3, 8, 9), int16], Tensor[(11, 10, 3), uint64]) */;
    %700 = @func_507() /* ty=Tensor[(3, 8, 9), int16] */;
    %701 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
    %702 = %701.0;
    %703 = cast(%702, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
    %704 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
    %705 = cast(%700, dtype="uint32") /* ty=Tensor[(3, 8, 9), uint32] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %707 = %688.2;
    %708 = %695.6;
    %709 = %696.0;
    %710 = %699.4;
    %711 = minimum(%705, %706) /* ty=Tensor[(3, 8, 9), uint32] */;
    (%707, meta[relay.Constant][42] /* ty=Tensor[(1040), int16] */, %708, %709, %710, meta[relay.Constant][43] /* ty=Tensor[(80), uint16] */, %711)
  };
  %712() /* ty=(Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) */
}

def @func_2146() -> (Tensor[(3, 8, 9), float64],) {
  %715 = fn () -> (Tensor[(3, 8, 9), float64],) {
    %713 = @func_1918() /* ty=(Tensor[(3, 8, 9), float64],) */;
    %714 = %713.0;
    (%714,)
  };
  %715() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_5102(%var_5086: Tensor[(2, 240), uint16]) -> (Tensor[(2, 240), uint32], Tensor[(2, 240), float32]) {
  %716 = @func_2560() /* ty=(Tensor[(768), int8], Tensor[(1040), int16], Tensor[(13, 5, 16), int8], Tensor[(3, 8, 9), float64], Tensor[(2, 240), uint16], Tensor[(80), uint16], Tensor[(3, 8, 9), uint32]) */;
  %717 = %716.4;
  %718 = cast(%var_5086, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(2), int32] */;
  %720 = cast(%717, dtype="uint32") /* ty=Tensor[(2, 240), uint32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %722 = cast(%var_5086, dtype="float32") /* ty=Tensor[(2, 240), float32] */;
  %723 = multiply(%720, %721) /* ty=Tensor[(2, 240), uint32] */;
  %724 = rsqrt(%722) /* ty=Tensor[(2, 240), float32] */;
  (%723, %724)
}

def @func_1187() -> Tensor[(3, 8, 9), float64] {
  %733 = fn () -> Tensor[(3, 8, 9), float64] {
    %725 = @func_543() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64]) */;
    %726 = %725.1;
    %727 = cast(%726, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
    %728 = asinh(%727) /* ty=Tensor[(3, 8, 9), float64] */;
    %729 = cast(%726, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
    %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%728, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%731, %732) /* ty=Tensor[(3, 8, 9), float64] */
  };
  %733() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_1795(%var_1794: Tensor[(7, 4, 1), float64]) -> Tensor[(7, 4, 1), float64] {
  %735 = fn (%var_1788: Tensor[(7, 4, 1), float64]) -> Tensor[(7, 4, 1), float64] {
    %734 = cast(%var_1788, dtype="float64") /* ty=Tensor[(7, 4, 1), float64] */;
    exp(%734) /* ty=Tensor[(7, 4, 1), float64] */
  };
  %735(%var_1794) /* ty=Tensor[(7, 4, 1), float64] */
}

def @func_991() -> (Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) {
  @func_989() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(16, 8, 6), int8], Tensor[(768), int8]) */
}

def @func_3448() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %736 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %737 = @func_1186() /* ty=Tensor[(3, 8, 9), float64] */;
  (%736, %737)
}

def @func_1093() -> (Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) {
  @func_1091() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), int16]) */
}

def @func_5642(%var_5640: Tensor[(15, 12, 16), float64], %var_5641: Tensor[(8, 2, 10), uint64]) -> (Tensor[(15, 12, 16), int16], Tensor[(8, 2, 10), uint8]) {
  @func_5638(%var_5640, %var_5641) /* ty=(Tensor[(15, 12, 16), int16], Tensor[(8, 2, 10), uint8]) */
}

def @func_3113(%var_3112: Tensor[(14, 880), float64]) -> (Tensor[(14, 880), bool], Tensor[(14, 880), uint8]) {
  %746 = fn (%var_3089: Tensor[(14, 880), float64]) -> (Tensor[(14, 880), bool], Tensor[(14, 880), uint8]) {
    %738 = @func_2246() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(1, 910), float64], Tensor[(1, 880), float64], Tensor[(3, 8, 9), float64]) */;
    %739 = %738.2;
    %740 = cast(%739, dtype="bool") /* ty=Tensor[(1, 880), bool] */;
    %741 = cast(%var_3089, dtype="bool") /* ty=Tensor[(14, 880), bool] */;
    %742 = cast(%739, dtype="uint8") /* ty=Tensor[(1, 880), uint8] */;
    %743 = cast(%var_3089, dtype="uint8") /* ty=Tensor[(14, 880), uint8] */;
    %744 = equal(%740, %741) /* ty=Tensor[(14, 880), bool] */;
    %745 = left_shift(%742, %743) /* ty=Tensor[(14, 880), uint8] */;
    (%744, %745)
  };
  %746(%var_3112) /* ty=(Tensor[(14, 880), bool], Tensor[(14, 880), uint8]) */
}

def @func_4183() -> Tensor[(3, 8, 9), float64] {
  %747 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %747.0
}

def @func_2009() -> (Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) {
  @func_2007() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(910), float64]) */
}

def @func_2566() -> (Tensor[(1, 2, 10), uint64],) {
  @func_2564() /* ty=(Tensor[(1, 2, 10), uint64],) */
}

def @func_5689() -> (Tensor[(3, 8, 9), float64],) {
  %748 = @func_2800() /* ty=(Tensor[(3, 8, 9), float64],) */;
  %749 = %748.0;
  (%749,)
}

def @func_779(%var_731: Tensor[(16, 48), int8]) -> (Tensor[(16, 8, 6), int8], Tensor[(16, 48), int8], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool], Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64]) {
  %750 = cast(%var_731, dtype="int8") /* ty=Tensor[(16, 48), int8] */;
  %751 = reshape(%750, newshape=[16, 8, 6]) /* ty=Tensor[(16, 8, 6), int8] */;
  %752 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %753 = %752.1;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %755 = cosh(%754) /* ty=Tensor[(3, 8, 9), float64] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %757 = tan(%756) /* ty=Tensor[(3, 8, 9), float64] */;
  %758 = @func_609() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), bool]) */;
  %759 = %758.0;
  %760 = cast(%759, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %761 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%757, dtype="bool") /* ty=Tensor[(3, 8, 9), bool] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %764 = cast(%757, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %765 = @func_686(%751) /* ty=Tensor[(16, 8, 6), int8] */;
  %766 = @func_255() /* ty=Tensor[(3, 8, 9), bool] */;
  %767 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %768 = not_equal(%762, %763) /* ty=Tensor[(3, 8, 9), bool] */;
  %769 = @func_332() /* ty=Tensor[(3, 8, 9), float64] */;
  %770 = rsqrt(%764) /* ty=Tensor[(3, 8, 9), float64] */;
  (%765, %var_731, %766, %767, %768, %769, %770)
}

def @func_5638(%var_5611: Tensor[(15, 12, 16), float64], %var_5625: Tensor[(8, 2, 10), uint64]) -> (Tensor[(15, 12, 16), int16], Tensor[(8, 2, 10), uint8]) {
  %771 = @func_3714() /* ty=(Tensor[(15, 12, 16), float64],) */;
  %772 = %771.0;
  %773 = cast(%var_5611, dtype="int16") /* ty=Tensor[(15, 12, 16), int16] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="int16") /* ty=Tensor[(15, 12, 16), int16] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %777 = @func_2564() /* ty=(Tensor[(1, 2, 10), uint64],) */;
  %778 = %777.0;
  %779 = cast(%778, dtype="uint8") /* ty=Tensor[(1, 2, 10), uint8] */;
  %780 = cast(%var_5625, dtype="uint8") /* ty=Tensor[(8, 2, 10), uint8] */;
  %781 = bitwise_or(%775, %776) /* ty=Tensor[(15, 12, 16), int16] */;
  %782 = logical_xor(%779, %780) /* ty=Tensor[(8, 2, 10), uint8] */;
  (%781, %782)
}

def @func_3354() -> Tensor[(3, 8, 9), float64] {
  %783 = fn () -> Tensor[(3, 8, 9), float64] {
    @func_2854() /* ty=Tensor[(3, 8, 9), float64] */
  };
  %783() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_3786() -> Tensor[(3, 8, 9), float64] {
  @func_3784() /* ty=Tensor[(3, 8, 9), float64] */
}

def @func_1193() -> (Tensor[(3, 8, 9), float64],) {
  %785 = fn () -> (Tensor[(3, 8, 9), float64],) {
    %784 = @func_1013() /* ty=Tensor[(3, 8, 9), float64] */;
    (%784,)
  };
  %785() /* ty=(Tensor[(3, 8, 9), float64],) */
}

def @func_918() -> (Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) {
  @func_916() /* ty=(Tensor[(3, 8, 9), int16], Tensor[(3, 8, 9), float32], Tensor[(3, 8, 9), float64]) */
}

def @func_4225() -> (Tensor[(3, 8, 9), float64],) {
  %786 = @func_638() /* ty=Tensor[(3, 8, 9), float64] */;
  %787 = cast(%786, dtype="float64") /* ty=Tensor[(3, 8, 9), float64] */;
  %788 = log(%787) /* ty=Tensor[(3, 8, 9), float64] */;
  (%788,)
}

def @func_4822() -> (Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(3, 8, 9), float64], Tensor[(910), float32]) {
  @func_4820() /* ty=(Tensor[(3, 8, 9), bool], Tensor[(5, 14, 13), float64], Tensor[(3, 8, 9), float64], Tensor[(910), float32]) */
}

def @func_3814() -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(15, 12, 16), bool]) {
  %798 = fn () -> (Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(15, 12, 16), bool]) {
    %789 = @func_3714() /* ty=(Tensor[(15, 12, 16), float64],) */;
    %790 = %789.0;
    %791 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 12, 16), float64] */, dtype="bool") /* ty=Tensor[(15, 12, 16), bool] */;
    %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
    %793 = cast(%790, dtype="bool") /* ty=Tensor[(15, 12, 16), bool] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %795 = @func_1186() /* ty=Tensor[(3, 8, 9), float64] */;
    %796 = @func_3784() /* ty=Tensor[(3, 8, 9), float64] */;
    %797 = less(%793, %794) /* ty=Tensor[(15, 12, 16), bool] */;
    (%795, %796, %797)
  };
  %798() /* ty=(Tensor[(3, 8, 9), float64], Tensor[(3, 8, 9), float64], Tensor[(15, 12, 16), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen215/build/output.py:2192: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen215/build/output.py", line 2197, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(45) tvmgen_default_fused_mod_kernel0(double* __restrict__ T_mod, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_mod[(((int)threadIdx.x))] = fmod(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

