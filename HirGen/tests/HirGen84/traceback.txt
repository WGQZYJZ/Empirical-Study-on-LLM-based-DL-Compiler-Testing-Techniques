==========mod==========
#[version = "0.0.5"]
def @func_4888() -> (Tensor[(12, 16, 4), bool],) {
  %0 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %1 = %0.0;
  (%1,)
}

def @func_833(%var_740: Tensor[(768), int64], %var_808: Tensor[(288), float64], %var_825: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) {
  %2 = cast(%var_740, dtype="int64") /* ty=Tensor[(768), int64] */;
  %3 = reshape(%2, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), int64] */;
  %4 = @func_650(%3) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) */;
  %5 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %6 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %7 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %8 = %7.0;
  %9 = cast(%var_808, dtype="float32") /* ty=Tensor[(288), float32] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(1), int32] */;
  %11 = cast(%8, dtype="float32") /* ty=Tensor[(288), float32] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?), float32] */;
  %13 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %16 = cosh(%15) /* ty=Tensor[(12, 16, 4), float64] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %18 = cast(%var_825, dtype="int16") /* ty=Tensor[(300), int16] */;
  %19 = cast(%var_825, dtype="int16") /* ty=Tensor[(300), int16] */;
  %20 = cast(%var_808, dtype="float64") /* ty=Tensor[(288), float64] */;
  %21 = reshape(%18, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %22 = reshape(%19, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %23 = reshape(%20, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %24 = @func_486(%21, %22, %23) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
  %25 = %4.5;
  %26 = %5.0;
  %27 = %6.0;
  %28 = floor_divide(%11, %12) /* ty=Tensor[(288), float32] */;
  %29 = atan(%17) /* ty=Tensor[(12, 16, 4), float64] */;
  %30 = %24.1;
  (%25, %var_740, %26, %27, %28, %29, %30, %var_825)
}

def @func_1348(%var_1319: Tensor[(4, 15, 3), float32], %var_1329: Tensor[(4, 15, 3), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) {
  %31 = cast(%var_1319, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %32 = cos(%31) /* ty=Tensor[(4, 15, 3), float32] */;
  %33 = cast(%var_1329, dtype="bool") /* ty=Tensor[(4, 15, 3), bool] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="bool") /* ty=Tensor[(4, 15, 3), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %38 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %39 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %40 = logical_and(%35, %36) /* ty=Tensor[(4, 15, 3), bool] */;
  %41 = %37.0;
  %42 = %38.0;
  (%39, %40, %41, %42)
}

def @func_376(%var_370: Tensor[(288), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) {
  %43 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %44 = cast(%var_370, dtype="float64") /* ty=Tensor[(288), float64] */;
  %45 = cast(%var_370, dtype="float64") /* ty=Tensor[(288), float64] */;
  %46 = reshape(%44, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %47 = reshape(%45, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %48 = %43.0;
  %49 = @func_64(%46, %47) /* ty=Tensor[(4, 6, 12), uint32] */;
  (%48, %49, %var_370)
}

def @func_4563() -> (Tensor[(10, 15, 16), float32], Tensor[(288), float64], Tensor[(2, 48), uint64]) {
  %50 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
  %51 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 48), uint64] */, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
  %52 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 48), uint64] */, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
  %53 = reshape(%51, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %54 = reshape(%52, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %55 = @func_1496(%53, %54) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %56 = %50.0;
  %57 = %55.1;
  (%56, %57, meta[relay.Constant][0] /* ty=Tensor[(2, 48), uint64] */)
}

def @func_2270() -> (Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) {
  %58 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %59 = %58.4;
  %60 = cast(%59, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %61 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 144), float64] */, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %63 = reshape(%60, newshape=[768]) /* ty=Tensor[(768), int64] */;
  %64 = reshape(%61, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %65 = reshape(%62, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %66 = @func_833(%63, %64, %65) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) */;
  %67 = %66.1;
  (%59, %67, meta[relay.Constant][1] /* ty=Tensor[(2, 144), float64] */, meta[relay.Constant][2] /* ty=Tensor[(300), int16] */)
}

def @func_2007(%var_1941: Tensor[(12, 16, 4), uint32], %var_1966: Tensor[(12, 16, 4), uint32], %var_1972: Tensor[(180), float32]) -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) {
  %68 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %69 = %68.3;
  %70 = cast(%var_1941, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %74 = cast(%var_1966, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %75 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%69, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = cast(%var_1972, dtype="float32") /* ty=Tensor[(180), float32] */;
  %79 = cast(%var_1972, dtype="float32") /* ty=Tensor[(180), float32] */;
  %80 = reshape(%78, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %81 = reshape(%79, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %82 = @func_1348(%80, %81) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) */;
  %83 = floor_mod(%72, %73) /* ty=Tensor[(12, 16, 4), float32] */;
  %84 = greater_equal(%76, %77) /* ty=Tensor[(12, 16, 4), bool] */;
  %85 = %82.2;
  (%83, %84, %85, %var_1972)
}

def @func_2937(%var_2921: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float64], Tensor[(12, 16, 4), bool], Tensor[(1404), float64]) {
  %86 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
  %87 = %86.0;
  %88 = cast(%var_2921, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %93 = reshape(%92, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %94 = @func_1077(%93) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) */;
  %95 = floor_divide(%90, %91) /* ty=Tensor[(10, 15, 16), float64] */;
  %96 = %94.0;
  (%95, %96, meta[relay.Constant][3] /* ty=Tensor[(1404), float64] */)
}

def @func_2767(%var_2754: Tensor[(12, 16, 4), bool]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) {
  %97 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %98 = %97.0;
  %99 = cast(%var_2754, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %103 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %104 = equal(%101, %102) /* ty=Tensor[(12, 16, 4), bool] */;
  (%103, %104)
}

def @func_2256() -> (Tensor[(288), float64], Tensor[(12, 16, 4), float32]) {
  %105 = @func_2212() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) */;
  %106 = %105.5;
  %107 = @func_2149() /* ty=Tensor[(12, 16, 4), float32] */;
  (%106, %107)
}

def @func_650(%var_597: Tensor[(12, 16, 4), int64]) -> (Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) {
  %108 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %109 = %108.1;
  %110 = cast(%var_597, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %114 = cast(meta[relay.Constant][4] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %115 = reshape(%114, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
  %116 = @func_397(%115) /* ty=(Tensor[(13, 9, 12), float64],) */;
  %117 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %118 = cast(%var_597, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %119 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 72), float64] */, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
  %120 = reshape(%119, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %121 = @func_376(%120) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
  %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 72), float64] */, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
  %123 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 72), float64] */, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
  %124 = reshape(%122, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %125 = reshape(%123, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %126 = floor_divide(%112, %113) /* ty=Tensor[(12, 16, 4), float64] */;
  %127 = %116.0;
  %128 = %117.0;
  %129 = cos(%118) /* ty=Tensor[(12, 16, 4), float32] */;
  %130 = %121.0;
  %131 = @func_64(%124, %125) /* ty=Tensor[(4, 6, 12), uint32] */;
  (%126, %127, meta[relay.Constant][4] /* ty=Tensor[(1404), float64] */, %128, %129, %130, meta[relay.Constant][5] /* ty=Tensor[(4, 72), float64] */, %131)
}

def @func_5505(%var_5412: Tensor[(15, 3, 2), float32], %var_5420: Tensor[(288), float64]) -> (Tensor[(4, 6, 12), uint32], Tensor[(15, 3, 2), int16], Tensor[(96), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(288), bool], Tensor[(288), float64]) {
  %132 = cast(%var_5420, dtype="float64") /* ty=Tensor[(288), float64] */;
  %133 = cast(%var_5420, dtype="float64") /* ty=Tensor[(288), float64] */;
  %134 = reshape(%132, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %135 = reshape(%133, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %136 = cast(%var_5412, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %137 = sqrt(%136) /* ty=Tensor[(15, 3, 2), float32] */;
  %138 = cast(%var_5412, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %142 = bitwise_and(%140, %141) /* ty=Tensor[(15, 3, 2), uint16] */;
  %143 = cast(%142, dtype="int16") /* ty=Tensor[(15, 3, 2), int16] */;
  %144 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%137, dtype="int16") /* ty=Tensor[(15, 3, 2), int16] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %147 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %148 = %147.0;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(288), float32] */;
  %150 = cast(meta[relay.Constant][6] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %151 = cast(meta[relay.Constant][6] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %152 = reshape(%150, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %153 = reshape(%151, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %154 = @func_1496(%152, %153) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %155 = %154.1;
  %156 = cast(%var_5420, dtype="bool") /* ty=Tensor[(288), bool] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(1), int32] */;
  %158 = cast(%155, dtype="bool") /* ty=Tensor[(288), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?), bool] */;
  %160 = cast(%var_5420, dtype="float64") /* ty=Tensor[(288), float64] */;
  %161 = @func_64(%134, %135) /* ty=Tensor[(4, 6, 12), uint32] */;
  %162 = minimum(%145, %146) /* ty=Tensor[(15, 3, 2), int16] */;
  %163 = sqrt(%149) /* ty=Tensor[(288), float32] */;
  %164 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  %165 = less_equal(%158, %159) /* ty=Tensor[(288), bool] */;
  %166 = log(%160) /* ty=Tensor[(288), float64] */;
  (%161, %162, meta[relay.Constant][6] /* ty=Tensor[(96), uint64] */, %163, %164, %165, %166)
}

def @func_3867(%var_3672: Tensor[(6, 30), float32], %var_3681: Tensor[(224), float32], %var_3683: Tensor[(2016), float32], %var_3743: Tensor[(150, 2), int16], %var_3766: Tensor[(384), float32], %var_3861: Tensor[(6, 30), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(14, 1, 16), float64], Tensor[(224), float32], Tensor[(2016), float32], Tensor[(12, 16, 4), float32], Tensor[(150, 2), bool], Tensor[(4, 6, 16), float32], Tensor[(288), float64], Tensor[(384), float32], Tensor[(12, 16, 4), float32], Tensor[(6, 30), bool], Tensor[(12, 16, 4), bool], Tensor[(384), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(2400), float32], Tensor[(6, 30), bool]) {
  %167 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %168 = %167.0;
  %169 = cast(%168, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %170 = cast(%168, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %171 = cast(%var_3672, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %172 = reshape(%169, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
  %173 = reshape(%170, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
  %174 = reshape(%171, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %175 = @func_2007(%172, %173, %174) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) */;
  %176 = cast(%var_3681, dtype="float32") /* ty=Tensor[(224), float32] */;
  %177 = cast(meta[relay.Constant][7] /* ty=Tensor[(150, 2), int16] */, dtype="int16") /* ty=Tensor[(150, 2), int16] */;
  %178 = cast(%var_3681, dtype="float32") /* ty=Tensor[(224), float32] */;
  %179 = cast(%var_3683, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %180 = reshape(%176, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %181 = reshape(%177, newshape=[10, 30]) /* ty=Tensor[(10, 30), int16] */;
  %182 = reshape(%178, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
  %183 = reshape(%179, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float32] */;
  %184 = @func_3345(%180, %181, %182, %183) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 30), int16], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(12, 16, 4), bool], Tensor[(14, ?, 16), uint8], Tensor[(1848), int64], Tensor[(1848), float64], Tensor[(14, ?, 16), bool], Tensor[(14, 9, 16), bool], Tensor[(14, 1, 16), float64], Tensor[(14, ?, 16), float32]) */;
  %185 = cast(%var_3743, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %186 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(150, 2), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %187 = cast(meta[relay.Constant][7] /* ty=Tensor[(150, 2), int16] */, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %189 = cast(%var_3766, dtype="float32") /* ty=Tensor[(384), float32] */;
  %190 = reshape(%189, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %191 = @func_2090(%190) /* ty=(Tensor[(4, 6, 16), float32],) */;
  %192 = @func_2212() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) */;
  %193 = cast(%var_3766, dtype="float64") /* ty=Tensor[(384), float64] */;
  %194 = rsqrt(%193) /* ty=Tensor[(384), float64] */;
  %195 = cast(%194, dtype="float32") /* ty=Tensor[(384), float32] */;
  %196 = atanh(%195) /* ty=Tensor[(384), float32] */;
  %197 = cast(meta[relay.Constant][8] /* ty=Tensor[(384), float32] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(1), int32] */;
  %199 = cast(%196, dtype="float64") /* ty=Tensor[(384), float64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?), float64] */;
  %201 = floor_divide(%199, %200) /* ty=Tensor[(384), float64] */;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(384), float32] */;
  %203 = @func_3149() /* ty=(Tensor[(12, 16, 4), float32],) */;
  %204 = cast(%var_3672, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %205 = sigmoid(%204) /* ty=Tensor[(6, 30), float64] */;
  %206 = cast(%var_3672, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(2), int32] */;
  %208 = cast(%205, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %210 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %211 = cast(%201, dtype="int8") /* ty=Tensor[(384), int8] */;
  %212 = shape_of(%196, dtype="int32") /* ty=Tensor[(1), int32] */;
  %213 = cast(%196, dtype="int8") /* ty=Tensor[(384), int8] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?), int8] */;
  %215 = logical_xor(%213, %214) /* ty=Tensor[(384), int8] */;
  %216 = cast(meta[relay.Constant][8] /* ty=Tensor[(384), float32] */, dtype="int16") /* ty=Tensor[(384), int16] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(1), int32] */;
  %218 = cast(%215, dtype="int16") /* ty=Tensor[(384), int16] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?), int16] */;
  %220 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %221 = cast(meta[relay.Constant][9] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %222 = reshape(%221, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %223 = @func_1701(%222) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
  %224 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %225 = cast(%var_3861, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %226 = shape_of(%205, dtype="int32") /* ty=Tensor[(2), int32] */;
  %227 = cast(%205, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %229 = %175.2;
  %230 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  %231 = %184.11;
  %232 = @func_2966() /* ty=Tensor[(12, 16, 4), float32] */;
  %233 = less(%187, %188) /* ty=Tensor[(150, 2), bool] */;
  %234 = %191.0;
  %235 = %192.4;
  %236 = log10(%202) /* ty=Tensor[(384), float32] */;
  %237 = %203.0;
  %238 = less(%208, %209) /* ty=Tensor[(6, 30), bool] */;
  %239 = %210.0;
  %240 = left_shift(%218, %219) /* ty=Tensor[(384), int16] */;
  %241 = %220.0;
  %242 = %223.0;
  %243 = %224.3;
  %244 = logical_or(%227, %228) /* ty=Tensor[(6, 30), bool] */;
  (%168, %229, %230, %231, %var_3681, %var_3683, %232, %233, %234, %235, %236, %237, %238, %239, %240, %241, %242, meta[relay.Constant][9] /* ty=Tensor[(1848), float64] */, %243, %244)
}

def @func_2304() -> Tensor[(12, 16, 4), bool] {
  @func_1388() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_4695() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 14, 11), float64], Tensor[(1848), float64]) {
  %245 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %246 = cast(meta[relay.Constant][10] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %247 = cast(meta[relay.Constant][10] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %248 = reshape(%246, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %249 = reshape(%247, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %250 = @func_256(%248, %249) /* ty=(Tensor[(12, 14, 11), float64],) */;
  %251 = %245.1;
  %252 = %250.0;
  (%251, %252, meta[relay.Constant][10] /* ty=Tensor[(1848), float64] */)
}

def @func_5982() -> Tensor[(12, 16, 4), float32] {
  @func_2149() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_3138() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) {
  %253 = @func_2949() /* ty=Tensor[(12, 16, 4), bool] */;
  %254 = cast(%253, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %255 = cast(%253, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %256 = cast(meta[relay.Constant][11] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %257 = reshape(%254, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
  %258 = reshape(%255, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
  %259 = reshape(%256, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %260 = @func_2007(%257, %258, %259) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) */;
  %261 = %260.1;
  %262 = @func_2949() /* ty=Tensor[(12, 16, 4), bool] */;
  (%253, %261, meta[relay.Constant][11] /* ty=Tensor[(180), float32] */, %262)
}

def @func_467() -> (Tensor[(12, 16, 4), bool],) {
  %263 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %264 = %263.0;
  (%264,)
}

def @func_2870(%var_2820: Tensor[(288), float64], %var_2828: Tensor[(1404), float64], %var_2838: Tensor[(4, 6, 12), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(12, 16, 4), float32], Tensor[(1404), float64], Tensor[(12, 16, 4), float32], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), uint16], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), float32]) {
  %265 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %266 = cast(%var_2828, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %267 = reshape(%266, newshape=[702, 2]) /* ty=Tensor[(702, 2), float64] */;
  %268 = @func_2529(%267) /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(702, 2), float64], Tensor[(300), int16], Tensor[(12, 16, 4), float32]) */;
  %269 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %270 = cast(%var_2820, dtype="float64") /* ty=Tensor[(288), float64] */;
  %271 = cast(%var_2820, dtype="float64") /* ty=Tensor[(288), float64] */;
  %272 = reshape(%270, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %273 = reshape(%271, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %274 = @func_64(%272, %273) /* ty=Tensor[(4, 6, 12), uint32] */;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %276 = acos(%275) /* ty=Tensor[(4, 6, 12), float32] */;
  %277 = cast(%var_2838, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %281 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 6, 12), float32] */, dtype="uint16") /* ty=Tensor[(4, 6, 12), uint16] */;
  %282 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%276, dtype="uint16") /* ty=Tensor[(4, 6, 12), uint16] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %285 = cast(%276, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %286 = cast(%276, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
  %287 = %265.0;
  %288 = %268.4;
  %289 = %269.1;
  %290 = floor_mod(%279, %280) /* ty=Tensor[(4, 6, 12), float32] */;
  %291 = bitwise_xor(%283, %284) /* ty=Tensor[(4, 6, 12), uint16] */;
  %292 = sigmoid(%285) /* ty=Tensor[(4, 6, 12), float32] */;
  %293 = exp(%286) /* ty=Tensor[(4, 6, 12), float32] */;
  (%287, %var_2820, %288, %var_2828, %289, %290, %291, %292, %293)
}

def @func_1230(%var_1223: Tensor[(84, 22), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 14, 11), float64], Tensor[(84, 22), float64]) {
  %294 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %295 = cast(%var_1223, dtype="float64") /* ty=Tensor[(84, 22), float64] */;
  %296 = cast(%var_1223, dtype="float64") /* ty=Tensor[(84, 22), float64] */;
  %297 = reshape(%295, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %298 = reshape(%296, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %299 = @func_256(%297, %298) /* ty=(Tensor[(12, 14, 11), float64],) */;
  %300 = %294.0;
  %301 = %299.0;
  (%300, %301, %var_1223)
}

def @func_2100(%var_2095: Tensor[(14, 14, 9), int32], %var_2096: Tensor[(14, 14, 9), int32]) -> (Tensor[(14, 14, 9), int32],) {
  %302 = cast(%var_2096, dtype="int32") /* ty=Tensor[(14, 14, 9), int32] */;
  %303 = shape_of(%var_2095, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_2095, dtype="int32") /* ty=Tensor[(14, 14, 9), int32] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %306 = add(%304, %305) /* ty=Tensor[(14, 14, 9), int32] */;
  (%306,)
}

def @func_3173(%var_3166: Tensor[(1, 1848), float64]) -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(1, 1848), float64]) {
  %307 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %308 = cast(%var_3166, dtype="float64") /* ty=Tensor[(1, 1848), float64] */;
  %309 = reshape(%308, newshape=[84, 22]) /* ty=Tensor[(84, 22), float64] */;
  %310 = @func_1230(%309) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 14, 11), float64], Tensor[(84, 22), float64]) */;
  %311 = %307.1;
  %312 = %310.0;
  (%311, %312, %var_3166)
}

def @func_3073(%var_2991: Tensor[(10, 15), float64], %var_3037: Tensor[(300), int16]) -> (Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) {
  %313 = cast(%var_2991, dtype="float64") /* ty=Tensor[(10, 15), float64] */;
  %314 = sigmoid(%313) /* ty=Tensor[(10, 15), float64] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(10, 15), float32] */;
  %316 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 192), int64] */, dtype="int64") /* ty=Tensor[(4, 192), int64] */;
  %317 = reshape(%316, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), int64] */;
  %318 = @func_650(%317) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) */;
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 192), int64] */, dtype="bool") /* ty=Tensor[(4, 192), bool] */;
  %320 = cast(%var_3037, dtype="int16") /* ty=Tensor[(300), int16] */;
  %321 = reshape(%319, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
  %322 = reshape(%320, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %323 = @func_996(%321, %322) /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) */;
  %324 = cast(meta[relay.Constant][14] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %325 = reshape(%324, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %326 = @func_1701(%325) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
  %327 = cosh(%315) /* ty=Tensor[(10, 15), float32] */;
  %328 = %318.4;
  %329 = @func_1570() /* ty=Tensor[(12, 16, 4), bool] */;
  %330 = %323.3;
  %331 = %326.1;
  (%327, %328, meta[relay.Constant][13] /* ty=Tensor[(4, 192), int64] */, %329, %330, %var_3037, %331, meta[relay.Constant][14] /* ty=Tensor[(1848), float64] */)
}

def @func_4128() -> (Tensor[(12, 16, 4), float64],) {
  %332 = @func_2447() /* ty=(Tensor[(12, 16, 4), float64],) */;
  %333 = %332.0;
  (%333,)
}

def @func_397(%var_381: Tensor[(13, 9, 12), float64]) -> (Tensor[(13, 9, 12), float64],) {
  %334 = cast(%var_381, dtype="float64") /* ty=Tensor[(13, 9, 12), float64] */;
  %335 = sin(%334) /* ty=Tensor[(13, 9, 12), float64] */;
  (%335,)
}

def @func_2149() -> Tensor[(12, 16, 4), float32] {
  %336 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  asinh(%337) /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_1077(%var_1069: Tensor[(1404), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) {
  %338 = cast(meta[relay.Constant][15] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %339 = reshape(%338, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
  %340 = @func_397(%339) /* ty=(Tensor[(13, 9, 12), float64],) */;
  %341 = cast(%var_1069, dtype="uint16") /* ty=Tensor[(1404), uint16] */;
  %342 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(1404), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %343 = cast(meta[relay.Constant][15] /* ty=Tensor[(1404), float64] */, dtype="uint16") /* ty=Tensor[(1404), uint16] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %345 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %346 = %340.0;
  %347 = right_shift(%343, %344) /* ty=Tensor[(1404), uint16] */;
  %348 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  (%345, %346, %347, %348)
}

def @func_2529(%var_2477: Tensor[(702, 2), float64]) -> (Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(702, 2), float64], Tensor[(300), int16], Tensor[(12, 16, 4), float32]) {
  %349 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %350 = cast(%var_2477, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
  %351 = reshape(%350, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %352 = @func_1077(%351) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) */;
  %353 = @func_2270() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) */;
  %354 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %356 = %349.0;
  %357 = %352.0;
  %358 = %353.3;
  %359 = exp(%355) /* ty=Tensor[(12, 16, 4), float32] */;
  (%356, %357, %var_2477, %358, %359)
}

def @func_3345(%var_3211: Tensor[(14, 1, 16), float32], %var_3253: Tensor[(10, 30), int16], %var_3304: Tensor[(14, 1, 16), float32], %var_3322: Tensor[(14, 9, 16), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 30), int16], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(12, 16, 4), bool], Tensor[(14, ?, 16), uint8], Tensor[(1848), int64], Tensor[(1848), float64], Tensor[(14, ?, 16), bool], Tensor[(14, 9, 16), bool], Tensor[(14, 1, 16), float64], Tensor[(14, ?, 16), float32]) {
  %360 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %361 = %360.1;
  %362 = cast(%361, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %363 = cast(%var_3253, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %364 = reshape(%362, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
  %365 = reshape(%363, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %366 = @func_996(%364, %365) /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) */;
  %367 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %368 = reshape(%367, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %369 = @func_2090(%368) /* ty=(Tensor[(4, 6, 16), float32],) */;
  %370 = cast(%var_3211, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %371 = acos(%370) /* ty=Tensor[(14, 1, 16), float32] */;
  %372 = cast(%var_3211, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %376 = add(%374, %375) /* ty=Tensor[(14, ?, 16), float32] */;
  %377 = cast(%376, dtype="uint8") /* ty=Tensor[(14, ?, 16), uint8] */;
  %378 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%371, dtype="uint8") /* ty=Tensor[(14, 1, 16), uint8] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %381 = cast(meta[relay.Constant][17] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %382 = reshape(%381, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %383 = @func_1701(%382) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
  %384 = cast(%var_3304, dtype="bool") /* ty=Tensor[(14, 1, 16), bool] */;
  %385 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%376, dtype="bool") /* ty=Tensor[(14, ?, 16), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = cast(%376, dtype="bool") /* ty=Tensor[(14, ?, 16), bool] */;
  %389 = cast(%var_3322, dtype="bool") /* ty=Tensor[(14, 9, 16), bool] */;
  %390 = cast(%var_3304, dtype="float64") /* ty=Tensor[(14, 1, 16), float64] */;
  %391 = cast(%var_3211, dtype="uint8") /* ty=Tensor[(14, 1, 16), uint8] */;
  %392 = shape_of(%376, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%376, dtype="uint8") /* ty=Tensor[(14, ?, 16), uint8] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %395 = right_shift(%393, %394) /* ty=Tensor[(14, ?, 16), uint8] */;
  %396 = cast(%var_3304, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="float32") /* ty=Tensor[(14, ?, 16), float32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %400 = %366.0;
  %401 = %369.0;
  %402 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  %403 = logical_xor(%379, %380) /* ty=Tensor[(14, ?, 16), uint8] */;
  %404 = %383.1;
  %405 = logical_or(%386, %387) /* ty=Tensor[(14, ?, 16), bool] */;
  %406 = logical_or(%388, %389) /* ty=Tensor[(14, 9, 16), bool] */;
  %407 = rsqrt(%390) /* ty=Tensor[(14, 1, 16), float64] */;
  %408 = floor_divide(%398, %399) /* ty=Tensor[(14, ?, 16), float32] */;
  (%361, %400, %var_3253, %401, meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, %402, %403, %404, meta[relay.Constant][17] /* ty=Tensor[(1848), float64] */, %405, %406, %407, %408)
}

def @func_5038() -> (Tensor[(1404), uint16],) {
  %409 = @func_4193() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) */;
  %410 = %409.1;
  (%410,)
}

def @func_3149() -> (Tensor[(12, 16, 4), float32],) {
  %411 = @func_2966() /* ty=Tensor[(12, 16, 4), float32] */;
  (%411,)
}

def @func_5862() -> (Tensor[(12, 16, 4), bool],) {
  %412 = @func_4312() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %413 = %412.0;
  (%413,)
}

def @func_1496(%var_1471: Tensor[(3, 8, 4), uint64], %var_1472: Tensor[(3, 8, 4), uint64]) -> (Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) {
  %414 = cast(%var_1472, dtype="uint64") /* ty=Tensor[(3, 8, 4), uint64] */;
  %415 = shape_of(%var_1471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_1471, dtype="uint64") /* ty=Tensor[(3, 8, 4), uint64] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %418 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %419 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %420 = bitwise_or(%416, %417) /* ty=Tensor[(3, 8, 4), uint64] */;
  %421 = %418.0;
  %422 = %419.0;
  (%420, %421, %422)
}

def @func_2112() -> (Tensor[(10, 15, 16), float32],) {
  %423 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %424 = %423.2;
  (%424,)
}

def @func_6201() -> Tensor[(12, 16, 4), float32] {
  @func_6087() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_3634() -> (Tensor[(12, 16, 4), bool],) {
  %425 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %426 = %425.0;
  (%426,)
}

def @func_5674(%var_5661: Tensor[(11, 16, 12), float64]) -> Tensor[(11, 16, 12), float64] {
  %427 = cast(%var_5661, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
  acos(%427) /* ty=Tensor[(11, 16, 12), float64] */
}

def @func_943() -> Tensor[(12, 16, 4), bool] {
  %428 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %428.0
}

def @func_2949() -> Tensor[(12, 16, 4), bool] {
  @func_1570() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_5001() -> Tensor[(12, 16, 4), bool] {
  @func_1570() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_2212() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) {
  %429 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %430 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %433 = reshape(%432, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), float64] */;
  %434 = @func_1639(%433) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) */;
  %435 = cast(%431, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %436 = cast(meta[relay.Constant][18] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %437 = reshape(%436, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %438 = @func_376(%437) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
  %439 = %429.1;
  %440 = %434.0;
  %441 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %442 = atanh(%435) /* ty=Tensor[(12, 16, 4), float64] */;
  %443 = %438.2;
  (%439, %440, %441, %442, %443, meta[relay.Constant][18] /* ty=Tensor[(288), float64] */)
}

def @func_5204() -> Tensor[(12, 16, 4), float32] {
  %444 = @func_5164() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) */;
  %444.0
}

def @func_6174(%var_6154: Tensor[(96), uint64], %var_6166: Tensor[(3, 30), float32], %var_6167: Tensor[(24, 12), float64]) -> (Tensor[(180), float32], Tensor[(96), uint64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(3, 30), float32], Tensor[(24, 12), float64]) {
  %445 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
  %446 = @func_4292() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) */;
  %447 = %446.0;
  %448 = cast(%var_6154, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %449 = cast(%var_6154, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %450 = reshape(%448, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %451 = reshape(%449, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %452 = @func_1496(%450, %451) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %453 = %452.2;
  %454 = cast(%453, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %455 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%447, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %458 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %459 = cast(%var_6166, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %460 = cast(%var_6167, dtype="float64") /* ty=Tensor[(24, 12), float64] */;
  %461 = reshape(%459, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float32] */;
  %462 = reshape(%460, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %463 = @func_5505(%461, %462) /* ty=(Tensor[(4, 6, 12), uint32], Tensor[(15, 3, 2), int16], Tensor[(96), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(288), bool], Tensor[(288), float64]) */;
  %464 = %445.2;
  %465 = less_equal(%456, %457) /* ty=Tensor[(12, 16, 4), bool] */;
  %466 = %458.0;
  %467 = %463.3;
  (%464, %var_6154, %465, %466, %467, %var_6166, %var_6167)
}

def @func_3424(%var_3395: Tensor[(8, 14, 9), int16], %var_3396: Tensor[(8, 14, 9), int16]) -> (Tensor[(8, 14, 9), int16], Tensor[(12, 154), float32]) {
  %468 = cast(%var_3396, dtype="int16") /* ty=Tensor[(8, 14, 9), int16] */;
  %469 = shape_of(%var_3395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_3395, dtype="int16") /* ty=Tensor[(8, 14, 9), int16] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %472 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 154), float64] */, dtype="float64") /* ty=Tensor[(12, 154), float64] */;
  %473 = log10(%472) /* ty=Tensor[(12, 154), float64] */;
  %474 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 154), float64] */, dtype="float64") /* ty=Tensor[(12, 154), float64] */;
  %475 = reshape(%474, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %476 = @func_1701(%475) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
  %477 = %476.1;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %479 = shape_of(%473, dtype="int32") /* ty=Tensor[(2), int32] */;
  %480 = cast(%473, dtype="float32") /* ty=Tensor[(12, 154), float32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %482 = multiply(%470, %471) /* ty=Tensor[(8, 14, 9), int16] */;
  %483 = maximum(%480, %481) /* ty=Tensor[(12, 154), float32] */;
  (%482, %483)
}

def @func_4292() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) {
  %484 = @func_4230() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %485 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %486 = %484.0;
  %487 = %485.1;
  (%486, %487)
}

def @func_5917() -> (Tensor[(1404), uint16], Tensor[(288), float64], Tensor[(12, 16, 4), int64], Tensor[(4, 72), float64]) {
  %488 = @func_5038() /* ty=(Tensor[(1404), uint16],) */;
  %489 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %490 = @func_4292() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) */;
  %491 = %490.1;
  %492 = cast(%491, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %493 = reshape(%492, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), int64] */;
  %494 = @func_650(%493) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) */;
  %495 = %488.0;
  %496 = %489.1;
  %497 = %494.6;
  (%495, %496, %491, %497)
}

def @func_285() -> (Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) {
  %498 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(12, 16, 4), int8] */;
  %499 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(12, 16, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(12, 16, 4), int8] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %502 = maximum(%500, %501) /* ty=Tensor[(12, 16, 4), int8] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %504 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 16, 4), int8] */, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %505 = erf(%504) /* ty=Tensor[(12, 16, 4), float64] */;
  %506 = cast(%502, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%505, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %510 = tan(%503) /* ty=Tensor[(12, 16, 4), float64] */;
  %511 = logical_xor(%508, %509) /* ty=Tensor[(12, 16, 4), int64] */;
  (%510, %511)
}

def @func_4954() -> Tensor[(12, 16, 4), float64] {
  %512 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  acos(%513) /* ty=Tensor[(12, 16, 4), float64] */
}

def @func_1272() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) {
  %514 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %515 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 4), bool] */, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 4), bool] */, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %520 = not_equal(%517, %518) /* ty=Tensor[(12, 16, 4), bool] */;
  %521 = sin(%519) /* ty=Tensor[(12, 16, 4), float32] */;
  (%520, %521)
}

def @func_3549(%var_3547: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(150), float64], Tensor[(300), int16]) {
  %522 = @func_2270() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) */;
  %523 = cast(meta[relay.Constant][23] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %524 = cast(%var_3547, dtype="int16") /* ty=Tensor[(300), int16] */;
  %525 = reshape(%523, newshape=[10, 15]) /* ty=Tensor[(10, 15), float64] */;
  %526 = reshape(%524, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %527 = @func_3073(%525, %526) /* ty=(Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) */;
  %528 = %522.0;
  %529 = %527.7;
  (%528, %529, meta[relay.Constant][23] /* ty=Tensor[(150), float64] */, %var_3547)
}

def @func_5770() -> Tensor[(12, 16, 4), bool] {
  %530 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %530.0
}

def @func_6302() -> Tensor[(10, 15, 16), float32] {
  %531 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
  %531.0
}

def @func_6087() -> Tensor[(12, 16, 4), float32] {
  %532 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
  %532.1
}

def @func_1639(%var_1617: Tensor[(12, 16, 4), float64]) -> (Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) {
  %533 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
  %534 = cast(%533, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %535 = sigmoid(%534) /* ty=Tensor[(12, 16, 4), float64] */;
  %536 = cast(%var_1617, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %540 = cast(%535, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %541 = divide(%538, %539) /* ty=Tensor[(12, 16, 4), float64] */;
  %542 = log(%540) /* ty=Tensor[(12, 16, 4), float64] */;
  (%541, %542)
}

def @func_6478() -> Tensor[(10, 15, 16), float32] {
  %543 = @func_4563() /* ty=(Tensor[(10, 15, 16), float32], Tensor[(288), float64], Tensor[(2, 48), uint64]) */;
  %543.0
}

def @func_5821(%var_5787: Tensor[(12, 4), float32]) -> (Tensor[(12, 4), float32], Tensor[(12, 16, 4), bool]) {
  %544 = cast(%var_5787, dtype="float32") /* ty=Tensor[(12, 4), float32] */;
  %545 = @func_4193() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) */;
  %546 = acos(%544) /* ty=Tensor[(12, 4), float32] */;
  %547 = %545.0;
  (%546, %547)
}

def @func_339() -> (Tensor[(12, 16, 4), bool],) {
  %548 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %549 = %548.1;
  %550 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 16, 4), int64] */, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %554 = greater(%552, %553) /* ty=Tensor[(12, 16, 4), bool] */;
  (%554,)
}

def @main(%var_6640: Tensor[(11, 11, 4), bool], %var_6641: Tensor[(11, 11, 4), bool], %var_6654: Tensor[(11, 11, 4), bool], %var_6664: Tensor[(11, 11, 4), uint64]) -> (Tensor[(11, 11, 4), bool],) {
  %555 = cast(%var_6641, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %556 = shape_of(%var_6640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_6640, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = logical_and(%557, %558) /* ty=Tensor[(11, 11, 4), bool] */;
  %560 = cast(%var_6654, dtype="uint64") /* ty=Tensor[(11, 11, 4), uint64] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="uint64") /* ty=Tensor[(11, 11, 4), uint64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %564 = right_shift(%562, %563) /* ty=Tensor[(11, 11, 4), uint64] */;
  %565 = cast(%var_6664, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = not_equal(%567, %568) /* ty=Tensor[(11, 11, 4), bool] */;
  (%569,)
}

def @func_2447() -> (Tensor[(12, 16, 4), float64],) {
  %570 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %571 = %570.0;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %573 = sinh(%572) /* ty=Tensor[(12, 16, 4), float64] */;
  (%573,)
}

def @func_4867() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) {
  %574 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
  %575 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  (%574, %575)
}

def @func_6459() -> Tensor[(180), float32] {
  %576 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
  %576.2
}

def @func_4823() -> (Tensor[(12, 16, 4), float32], Tensor[(288), float64], Tensor[(96), uint64]) {
  %577 = cast(meta[relay.Constant][25] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %578 = cast(meta[relay.Constant][25] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %579 = reshape(%577, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %580 = reshape(%578, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %581 = @func_1496(%579, %580) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %582 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
  %583 = %581.1;
  (%582, %583, meta[relay.Constant][25] /* ty=Tensor[(96), uint64] */)
}

def @func_6444(%var_6413: Tensor[(2112), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(11, 16, 12), float64], Tensor[(2112), float64], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64]) {
  %584 = cast(%var_6413, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %585 = reshape(%584, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float64] */;
  %586 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %587 = %586.1;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %589 = reshape(%588, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), float64] */;
  %590 = @func_1639(%589) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) */;
  %591 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
  %592 = @func_5674(%585) /* ty=Tensor[(11, 16, 12), float64] */;
  %593 = %590.1;
  (%591, %592, %var_6413, %587, %593)
}

def @func_5576() -> (Tensor[(12, 16, 4), float32],) {
  %594 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %595 = %594.1;
  (%595,)
}

def @func_2314() -> (Tensor[(12, 16, 4), bool],) {
  %596 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %597 = %596.0;
  (%597,)
}

def @func_6349(%var_6328: Tensor[(12, 16, 4), float32]) -> (Tensor[(12, 16, 4), int64], Tensor[(12, 16, 4), bool], Tensor[(2400), float32]) {
  %598 = @func_4776() /* ty=(Tensor[(12, 16, 4), float32],) */;
  %599 = %598.0;
  %600 = cast(%var_6328, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %604 = cast(meta[relay.Constant][26] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %605 = reshape(%604, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %606 = @func_2937(%605) /* ty=(Tensor[(10, 15, 16), float64], Tensor[(12, 16, 4), bool], Tensor[(1404), float64]) */;
  %607 = left_shift(%602, %603) /* ty=Tensor[(12, 16, 4), int64] */;
  %608 = %606.1;
  (%607, %608, meta[relay.Constant][26] /* ty=Tensor[(2400), float32] */)
}

def @func_4312() -> (Tensor[(12, 16, 4), bool],) {
  %609 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %610 = %609.0;
  (%610,)
}

def @func_1113() -> (Tensor[(16, 288), bool], Tensor[(12, 16, 4), bool]) {
  %611 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %612 = %611.2;
  %613 = cast(%612, dtype="bool") /* ty=Tensor[(1, 288), bool] */;
  %614 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 288), float64] */, dtype="bool") /* ty=Tensor[(16, 288), bool] */;
  %615 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %616 = greater(%613, %614) /* ty=Tensor[(16, 288), bool] */;
  %617 = %615.0;
  (%616, %617)
}

def @func_6592(%var_6515: Tensor[(48, 2), uint64], %var_6517: Tensor[(288), float64], %var_6525: Tensor[(288), float64], %var_6570: Tensor[(288), uint64]) -> (Tensor[(10, 15, 16), float32], Tensor[(48, 2), uint64], Tensor[(90), float32], Tensor[(16, 288), bool], Tensor[(288), uint64]) {
  %618 = @func_1113() /* ty=(Tensor[(16, 288), bool], Tensor[(12, 16, 4), bool]) */;
  %619 = cast(%var_6525, dtype="int64") /* ty=Tensor[(288), int64] */;
  %620 = shape_of(%var_6517, dtype="int32") /* ty=Tensor[(1), int32] */;
  %621 = cast(%var_6517, dtype="int64") /* ty=Tensor[(288), int64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?), int64] */;
  %623 = left_shift(%621, %622) /* ty=Tensor[(288), int64] */;
  %624 = cast(%var_6515, dtype="uint64") /* ty=Tensor[(48, 2), uint64] */;
  %625 = cast(meta[relay.Constant][28] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %626 = cast(%var_6517, dtype="float64") /* ty=Tensor[(288), float64] */;
  %627 = reshape(%624, newshape=[96]) /* ty=Tensor[(96), uint64] */;
  %628 = reshape(%625, newshape=[3, 30]) /* ty=Tensor[(3, 30), float32] */;
  %629 = reshape(%626, newshape=[24, 12]) /* ty=Tensor[(24, 12), float64] */;
  %630 = @func_6174(%627, %628, %629) /* ty=(Tensor[(180), float32], Tensor[(96), uint64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(3, 30), float32], Tensor[(24, 12), float64]) */;
  %631 = %630.6;
  %632 = cast(%631, dtype="uint64") /* ty=Tensor[(24, 12), uint64] */;
  %633 = shape_of(%623, dtype="int32") /* ty=Tensor[(1), int32] */;
  %634 = cast(%623, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %636 = right_shift(%634, %635) /* ty=Tensor[(288), uint64] */;
  %637 = cast(%var_6570, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(1), int32] */;
  %639 = cast(%636, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %641 = @func_5223() /* ty=Tensor[(10, 15, 16), float32] */;
  %642 = %618.0;
  %643 = logical_xor(%639, %640) /* ty=Tensor[(288), uint64] */;
  (%641, %var_6515, meta[relay.Constant][28] /* ty=Tensor[(90), float32] */, %642, %643)
}

def @func_486(%var_475: Tensor[(10, 15, 2), int16], %var_476: Tensor[(10, 15, 2), int16], %var_481: Tensor[(288), float64]) -> (Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) {
  %644 = cast(%var_476, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
  %645 = shape_of(%var_475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%var_475, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = cast(%var_481, dtype="float64") /* ty=Tensor[(288), float64] */;
  %649 = reshape(%648, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %650 = @func_376(%649) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
  %651 = less_equal(%646, %647) /* ty=Tensor[(10, 15, 2), bool] */;
  %652 = %650.0;
  (%651, %652, %var_481)
}

def @func_4193() -> (Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) {
  %653 = cast(meta[relay.Constant][29] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %654 = reshape(%653, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %655 = @func_1077(%654) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) */;
  %656 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
  %657 = %656.1;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %659 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %660 = %655.2;
  %661 = sqrt(%658) /* ty=Tensor[(12, 16, 4), float32] */;
  (%659, %660, meta[relay.Constant][29] /* ty=Tensor[(1404), float64] */, %661)
}

def @func_1701(%var_1692: Tensor[(1848), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) {
  %662 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %663 = cast(%var_1692, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %664 = cast(%var_1692, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %665 = reshape(%663, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %666 = reshape(%664, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %667 = @func_256(%665, %666) /* ty=(Tensor[(12, 14, 11), float64],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="int64") /* ty=Tensor[(12, 14, 11), int64] */;
  %670 = shape_of(%var_1692, dtype="int32") /* ty=Tensor[(1), int32] */;
  %671 = cast(%var_1692, dtype="int64") /* ty=Tensor[(1848), int64] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?), int64] */;
  %673 = %662.0;
  %674 = minimum(%671, %672) /* ty=Tensor[(1848), int64] */;
  (%673, %674)
}

def @func_1546(%var_1520: Tensor[(5, 11, 1), float32], %var_1521: Tensor[(5, 11, 16), float32], %var_1543: Tensor[(300), int16]) -> (Tensor[(5, 11, 16), float32], Tensor[(5, 11, 16), uint32], Tensor[(12, 16, 4), float64], Tensor[(180), float32], Tensor[(288), float64], Tensor[(300), int16]) {
  %675 = cast(%var_1520, dtype="float32") /* ty=Tensor[(5, 11, 1), float32] */;
  %676 = cast(%var_1521, dtype="float32") /* ty=Tensor[(5, 11, 16), float32] */;
  %677 = cast(%var_1520, dtype="uint32") /* ty=Tensor[(5, 11, 1), uint32] */;
  %678 = cast(%var_1521, dtype="uint32") /* ty=Tensor[(5, 11, 16), uint32] */;
  %679 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %680 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %681 = reshape(%679, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %682 = reshape(%680, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %683 = @func_1348(%681, %682) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) */;
  %684 = %683.3;
  %685 = cast(%684, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %686 = cast(%var_1543, dtype="int16") /* ty=Tensor[(300), int16] */;
  %687 = reshape(%685, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
  %688 = reshape(%686, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %689 = @func_996(%687, %688) /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) */;
  %690 = power(%675, %676) /* ty=Tensor[(5, 11, 16), float32] */;
  %691 = left_shift(%677, %678) /* ty=Tensor[(5, 11, 16), uint32] */;
  %692 = %689.0;
  (%690, %691, %684, meta[relay.Constant][30] /* ty=Tensor[(180), float32] */, %692, %var_1543)
}

def @func_64(%var_21: Tensor[(4, 6, 12), float64], %var_22: Tensor[(4, 6, 12), float64]) -> Tensor[(4, 6, 12), uint32] {
  %693 = cast(%var_22, dtype="float64") /* ty=Tensor[(4, 6, 12), float64] */;
  %694 = shape_of(%var_21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_21, dtype="float64") /* ty=Tensor[(4, 6, 12), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %697 = floor_divide(%695, %696) /* ty=Tensor[(4, 6, 12), float64] */;
  %698 = cast(%var_22, dtype="uint32") /* ty=Tensor[(4, 6, 12), uint32] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="uint32") /* ty=Tensor[(4, 6, 12), uint32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%700, %701) /* ty=Tensor[(4, 6, 12), uint32] */
}

def @func_1388() -> Tensor[(12, 16, 4), bool] {
  @func_943() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_1172() -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) {
  %702 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %703 = cast(meta[relay.Constant][31] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %704 = reshape(%703, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %705 = @func_859(%704) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %706 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %707 = %702.0;
  %708 = %705.0;
  (%706, %707, %708, meta[relay.Constant][31] /* ty=Tensor[(2400), float32] */)
}

def @func_5214() -> Tensor[(12, 16, 4), bool] {
  @func_5001() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_2692(%var_2638: Tensor[(2400), float32], %var_2675: Tensor[(1848), float64]) -> (Tensor[(2400), float32], Tensor[(2400), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) {
  %709 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %710 = %709.3;
  %711 = cast(%var_2638, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %713 = cast(%710, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?), float32] */;
  %715 = cast(%var_2638, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %716 = shape_of(%710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(%710, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %719 = @func_2212() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) */;
  %720 = %719.5;
  %721 = cast(%720, dtype="float32") /* ty=Tensor[(288), float32] */;
  %722 = cast(%var_2675, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %723 = reshape(%722, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %724 = @func_1701(%723) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
  %725 = cast(meta[relay.Constant][32] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %726 = reshape(%725, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
  %727 = @func_397(%726) /* ty=(Tensor[(13, 9, 12), float64],) */;
  %728 = divide(%713, %714) /* ty=Tensor[(2400), float32] */;
  %729 = bitwise_or(%717, %718) /* ty=Tensor[(2400), uint64] */;
  %730 = log10(%721) /* ty=Tensor[(288), float32] */;
  %731 = %724.0;
  %732 = %727.0;
  (%728, %729, %730, %731, %var_2675, %732, meta[relay.Constant][32] /* ty=Tensor[(1404), float64] */)
}

def @func_2090(%var_2082: Tensor[(4, 6, 16), float32]) -> (Tensor[(4, 6, 16), float32],) {
  %733 = cast(%var_2082, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %734 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(4, 6, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %737 = divide(%735, %736) /* ty=Tensor[(4, 6, 16), float32] */;
  (%737,)
}

def @func_2355() -> Tensor[(12, 16, 4), float32] {
  %738 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %739 = %738.1;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  log10(%740) /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_5405() -> (Tensor[(8, 6, 6), float32], Tensor[(12, 16, 4), float32]) {
  %741 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 6), float64] */;
  %742 = cosh(%741) /* ty=Tensor[(8, 6, 6), float64] */;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
  %744 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
  %745 = atanh(%743) /* ty=Tensor[(8, 6, 6), float32] */;
  %746 = %744.1;
  (%745, %746)
}

def @func_4230() -> (Tensor[(12, 16, 4), bool],) {
  %747 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  (%747,)
}

def @func_4524(%var_4506: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(55), float32], Tensor[(880), float32], Tensor[(300), int16], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) {
  %748 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %749 = cast(meta[relay.Constant][35] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %750 = cast(meta[relay.Constant][36] /* ty=Tensor[(880), float32] */, dtype="float32") /* ty=Tensor[(880), float32] */;
  %751 = cast(%var_4506, dtype="int16") /* ty=Tensor[(300), int16] */;
  %752 = reshape(%749, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float32] */;
  %753 = reshape(%750, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float32] */;
  %754 = reshape(%751, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %755 = @func_1546(%752, %753, %754) /* ty=(Tensor[(5, 11, 16), float32], Tensor[(5, 11, 16), uint32], Tensor[(12, 16, 4), float64], Tensor[(180), float32], Tensor[(288), float64], Tensor[(300), int16]) */;
  %756 = cast(meta[relay.Constant][37] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %757 = reshape(%756, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
  %758 = @func_397(%757) /* ty=(Tensor[(13, 9, 12), float64],) */;
  %759 = %748.0;
  %760 = %755.4;
  %761 = %758.0;
  (%759, %760, meta[relay.Constant][35] /* ty=Tensor[(55), float32] */, meta[relay.Constant][36] /* ty=Tensor[(880), float32] */, %var_4506, %761, meta[relay.Constant][37] /* ty=Tensor[(1404), float64] */)
}

def @func_996(%var_974: Tensor[(12, 16, 4), bool], %var_981: Tensor[(300), int16]) -> (Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) {
  %762 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %763 = cast(%var_974, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %767 = mod(%765, %766) /* ty=Tensor[(12, 16, 4), float32] */;
  %768 = cast(%762, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %769 = cast(meta[relay.Constant][38] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %770 = cast(%var_981, dtype="int16") /* ty=Tensor[(300), int16] */;
  %771 = reshape(%768, newshape=[768]) /* ty=Tensor[(768), int64] */;
  %772 = reshape(%769, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %773 = reshape(%770, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %774 = @func_833(%771, %772, %773) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) */;
  %775 = %774.2;
  %776 = cast(%775, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %777 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%767, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %780 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %781 = right_shift(%778, %779) /* ty=Tensor[(12, 16, 4), int32] */;
  %782 = %780.1;
  (meta[relay.Constant][38] /* ty=Tensor[(288), float64] */, %var_981, %781, %782)
}

def @func_6244() -> (Tensor[(12, 16, 4), bool],) {
  %783 = @func_6078() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(144, 2), float64]) */;
  %784 = %783.1;
  (%784,)
}

def @func_2079() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) {
  %785 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %786 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %787 = %785.0;
  %788 = %786.0;
  (%787, %788)
}

def @func_2966() -> Tensor[(12, 16, 4), float32] {
  %789 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %789.1
}

def @func_4367() -> (Tensor[(12, 16, 4), bool],) {
  %790 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
  %791 = %790.0;
  (%791,)
}

def @func_4079(%var_4004: Tensor[(300), int16], %var_4005: Tensor[(288), float64]) -> (Tensor[(300), int16], Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15), float32], Tensor[(150), float64]) {
  %792 = cast(%var_4004, dtype="int16") /* ty=Tensor[(300), int16] */;
  %793 = cast(%var_4004, dtype="int16") /* ty=Tensor[(300), int16] */;
  %794 = cast(%var_4005, dtype="float64") /* ty=Tensor[(288), float64] */;
  %795 = reshape(%792, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %796 = reshape(%793, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %797 = reshape(%794, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %798 = @func_486(%795, %796, %797) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
  %799 = %798.1;
  %800 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
  %801 = %800.1;
  %802 = cast(%801, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %803 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%799, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %806 = logical_and(%804, %805) /* ty=Tensor[(12, 16, 4), bool] */;
  %807 = cast(%806, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %808 = reshape(%807, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
  %809 = @func_2767(%808) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %810 = cast(meta[relay.Constant][39] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %811 = cast(%var_4004, dtype="int16") /* ty=Tensor[(300), int16] */;
  %812 = reshape(%810, newshape=[10, 15]) /* ty=Tensor[(10, 15), float64] */;
  %813 = reshape(%811, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %814 = @func_3073(%812, %813) /* ty=(Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) */;
  %815 = %809.0;
  %816 = %814.0;
  (%var_4004, %var_4005, %806, %815, %816, meta[relay.Constant][39] /* ty=Tensor[(150), float64] */)
}

def @func_5289(%var_5232: Tensor[(13, 2, 12), float32], %var_5271: Tensor[(1404), float64]) -> (Tensor[(12, 16, 4), float32], Tensor[(13, 2, 12), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint16], Tensor[(288), float64], Tensor[(1404), float64]) {
  %817 = cast(%var_5232, dtype="float32") /* ty=Tensor[(13, 2, 12), float32] */;
  %818 = tan(%817) /* ty=Tensor[(13, 2, 12), float32] */;
  %819 = cast(%var_5232, dtype="int16") /* ty=Tensor[(13, 2, 12), int16] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%818, dtype="int16") /* ty=Tensor[(13, 2, 12), int16] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %823 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %824 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %825 = cast(meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %826 = cast(%var_5271, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %827 = cast(meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %828 = reshape(%825, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %829 = reshape(%826, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %830 = reshape(%827, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float32] */;
  %831 = @func_2870(%828, %829, %830) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(12, 16, 4), float32], Tensor[(1404), float64], Tensor[(12, 16, 4), float32], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), uint16], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), float32]) */;
  %832 = @func_2966() /* ty=Tensor[(12, 16, 4), float32] */;
  %833 = subtract(%821, %822) /* ty=Tensor[(13, 2, 12), int16] */;
  %834 = %823.0;
  %835 = %824.0;
  %836 = %831.6;
  (%832, %833, %834, %835, %836, meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, %var_5271)
}

def @func_6047() -> (Tensor[(12, 16, 4), bool],) {
  %837 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  (%837,)
}

def @func_6484() -> (Tensor[(12, 16, 4), bool],) {
  %838 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  (%838,)
}

def @func_1586() -> (Tensor[(12, 16, 4), bool],) {
  %839 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %840 = %839.0;
  (%840,)
}

def @func_5223() -> Tensor[(10, 15, 16), float32] {
  %841 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
  %841.0
}

def @func_4483(%var_4420: Tensor[(300, 8), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15, 16), float32], Tensor[(300, 8), float64]) {
  %842 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %843 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %844 = cast(%var_4420, dtype="float32") /* ty=Tensor[(300, 8), float32] */;
  %845 = reshape(%844, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %846 = @func_3468(%845) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %847 = cast(%var_4420, dtype="float64") /* ty=Tensor[(300, 8), float64] */;
  %848 = %842.0;
  %849 = %843.0;
  %850 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %851 = %846.1;
  %852 = sin(%847) /* ty=Tensor[(300, 8), float64] */;
  (%848, %849, %850, %851, %852)
}

def @func_3468(%var_3438: Tensor[(2400), float32]) -> (Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) {
  %853 = @func_3149() /* ty=(Tensor[(12, 16, 4), float32],) */;
  %854 = cast(%var_3438, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %855 = reshape(%854, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %856 = @func_859(%855) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %857 = cast(%var_3438, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %858 = %853.0;
  %859 = %856.0;
  %860 = sinh(%857) /* ty=Tensor[(2400), float32] */;
  (%858, %859, %860)
}

def @func_2402(%var_2386: Tensor[(12, 16, 4), float32]) -> (Tensor[(12, 16, 4), int32],) {
  %861 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %862 = %861.1;
  %863 = cast(%var_2386, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %867 = bitwise_or(%865, %866) /* ty=Tensor[(12, 16, 4), int32] */;
  (%867,)
}

def @func_5164() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) {
  %868 = @func_4776() /* ty=(Tensor[(12, 16, 4), float32],) */;
  %869 = %868.0;
  %870 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
  (%869, %870)
}

def @func_560() -> (Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) {
  %871 = cast(meta[relay.Constant][41] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %872 = cast(meta[relay.Constant][41] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %873 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 288), float64] */, dtype="float64") /* ty=Tensor[(1, 288), float64] */;
  %874 = reshape(%871, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %875 = reshape(%872, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %876 = reshape(%873, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %877 = @func_486(%874, %875, %876) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
  %878 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %879 = %878.0;
  %880 = cast(meta[relay.Constant][41] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %881 = cast(meta[relay.Constant][41] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %882 = %877.2;
  %883 = cast(%882, dtype="float64") /* ty=Tensor[(288), float64] */;
  %884 = reshape(%880, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %885 = reshape(%881, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %886 = reshape(%883, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %887 = @func_486(%884, %885, %886) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
  %888 = %887.1;
  %889 = cast(%888, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %890 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%879, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %893 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %894 = add(%891, %892) /* ty=Tensor[(12, 16, 4), uint32] */;
  %895 = %893.0;
  (%882, meta[relay.Constant][41] /* ty=Tensor[(300), int16] */, meta[relay.Constant][42] /* ty=Tensor[(1, 288), float64] */, %894, %895)
}

def @func_256(%var_251: Tensor[(12, 14, 11), float64], %var_252: Tensor[(12, 14, 11), float64]) -> (Tensor[(12, 14, 11), float64],) {
  %896 = cast(%var_252, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %897 = shape_of(%var_251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%var_251, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %900 = subtract(%898, %899) /* ty=Tensor[(12, 14, 11), float64] */;
  (%900,)
}

def @func_4661() -> (Tensor[(12, 16, 4), bool],) {
  %901 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
  %902 = %901.3;
  (%902,)
}

def @func_5353() -> (Tensor[(1, 288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(10, 15, 16), float32]) {
  %903 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %904 = cast(meta[relay.Constant][43] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %905 = reshape(%904, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %906 = @func_859(%905) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %907 = %906.0;
  %908 = cast(%907, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %909 = reshape(%908, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %910 = @func_859(%909) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %911 = %903.2;
  %912 = %910.0;
  (%911, %907, meta[relay.Constant][43] /* ty=Tensor[(2400), float32] */, %912)
}

def @func_4776() -> (Tensor[(12, 16, 4), float32],) {
  %913 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
  (%913,)
}

def @func_3909() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) {
  %914 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %915 = cast(meta[relay.Constant][44] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %916 = reshape(%915, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
  %917 = @func_3468(%916) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %918 = %914.0;
  %919 = %917.0;
  (%918, %919, meta[relay.Constant][44] /* ty=Tensor[(2400), float32] */)
}

def @func_1570() -> Tensor[(12, 16, 4), bool] {
  %920 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %920.0
}

def @func_859(%var_855: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float32],) {
  %921 = cast(%var_855, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %922 = atanh(%921) /* ty=Tensor[(10, 15, 16), float32] */;
  (%922,)
}

def @func_6078() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(144, 2), float64]) {
  %923 = @func_4888() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %924 = cast(meta[relay.Constant][45] /* ty=Tensor[(144, 2), float64] */, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
  %925 = reshape(%924, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %926 = @func_376(%925) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
  %927 = %923.0;
  %928 = %926.0;
  (%927, %928, meta[relay.Constant][45] /* ty=Tensor[(144, 2), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2114() -> (Tensor[(10, 15, 16), float32],) {
  @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */
}

def @func_2103(%var_2101: Tensor[(14, 14, 9), int32], %var_2102: Tensor[(14, 14, 9), int32]) -> (Tensor[(14, 14, 9), int32],) {
  %5 = fn (%var_2095: Tensor[(14, 14, 9), int32], %var_2096: Tensor[(14, 14, 9), int32]) -> (Tensor[(14, 14, 9), int32],) {
    %0 = cast(%var_2096, dtype="int32") /* ty=Tensor[(14, 14, 9), int32] */;
    %1 = shape_of(%var_2095, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_2095, dtype="int32") /* ty=Tensor[(14, 14, 9), int32] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %4 = add(%2, %3) /* ty=Tensor[(14, 14, 9), int32] */;
    (%4,)
  };
  %5(%var_2101, %var_2102) /* ty=(Tensor[(14, 14, 9), int32],) */
}

def @func_4565() -> (Tensor[(10, 15, 16), float32], Tensor[(288), float64], Tensor[(2, 48), uint64]) {
  @func_4563() /* ty=(Tensor[(10, 15, 16), float32], Tensor[(288), float64], Tensor[(2, 48), uint64]) */
}

def @func_3139() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) {
  %16 = fn () -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) {
    %6 = @func_2949() /* ty=Tensor[(12, 16, 4), bool] */;
    %7 = cast(%6, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
    %8 = cast(%6, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
    %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %10 = reshape(%7, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
    %11 = reshape(%8, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
    %12 = reshape(%9, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %13 = @func_2007(%10, %11, %12) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) */;
    %14 = %13.1;
    %15 = @func_2949() /* ty=Tensor[(12, 16, 4), bool] */;
    (%6, %14, meta[relay.Constant][0] /* ty=Tensor[(180), float32] */, %15)
  };
  %16() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */
}

def @func_1551(%var_1548: Tensor[(5, 11, 1), float32], %var_1549: Tensor[(5, 11, 16), float32], %var_1550: Tensor[(300), int16]) -> (Tensor[(5, 11, 16), float32], Tensor[(5, 11, 16), uint32], Tensor[(12, 16, 4), float64], Tensor[(180), float32], Tensor[(288), float64], Tensor[(300), int16]) {
  @func_1546(%var_1548, %var_1549, %var_1550) /* ty=(Tensor[(5, 11, 16), float32], Tensor[(5, 11, 16), uint32], Tensor[(12, 16, 4), float64], Tensor[(180), float32], Tensor[(288), float64], Tensor[(300), int16]) */
}

def @func_3351(%var_3347: Tensor[(14, 1, 16), float32], %var_3348: Tensor[(10, 30), int16], %var_3349: Tensor[(14, 1, 16), float32], %var_3350: Tensor[(14, 9, 16), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 30), int16], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(12, 16, 4), bool], Tensor[(14, ?, 16), uint8], Tensor[(1848), int64], Tensor[(1848), float64], Tensor[(14, ?, 16), bool], Tensor[(14, 9, 16), bool], Tensor[(14, 1, 16), float64], Tensor[(14, ?, 16), float32]) {
  @func_3345(%var_3347, %var_3348, %var_3349, %var_3350) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 30), int16], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(12, 16, 4), bool], Tensor[(14, ?, 16), uint8], Tensor[(1848), int64], Tensor[(1848), float64], Tensor[(14, ?, 16), bool], Tensor[(14, 9, 16), bool], Tensor[(14, 1, 16), float64], Tensor[(14, ?, 16), float32]) */
}

def @func_5166() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) {
  @func_5164() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) */
}

def @func_6598(%var_6594: Tensor[(48, 2), uint64], %var_6595: Tensor[(288), float64], %var_6596: Tensor[(288), float64], %var_6597: Tensor[(288), uint64]) -> (Tensor[(10, 15, 16), float32], Tensor[(48, 2), uint64], Tensor[(90), float32], Tensor[(16, 288), bool], Tensor[(288), uint64]) {
  @func_6592(%var_6594, %var_6595, %var_6596, %var_6597) /* ty=(Tensor[(10, 15, 16), float32], Tensor[(48, 2), uint64], Tensor[(90), float32], Tensor[(16, 288), bool], Tensor[(288), uint64]) */
}

def @func_469() -> (Tensor[(12, 16, 4), bool],) {
  @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_5772() -> Tensor[(12, 16, 4), bool] {
  @func_5770() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_562() -> (Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) {
  @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */
}

def @func_2012(%var_2009: Tensor[(12, 16, 4), uint32], %var_2010: Tensor[(12, 16, 4), uint32], %var_2011: Tensor[(180), float32]) -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) {
  @func_2007(%var_2009, %var_2010, %var_2011) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) */
}

def @func_2007(%var_1941: Tensor[(12, 16, 4), uint32], %var_1966: Tensor[(12, 16, 4), uint32], %var_1972: Tensor[(180), float32]) -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) {
  %17 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %18 = %17.3;
  %19 = cast(%var_1941, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %23 = cast(%var_1966, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %24 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%18, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %27 = cast(%var_1972, dtype="float32") /* ty=Tensor[(180), float32] */;
  %28 = cast(%var_1972, dtype="float32") /* ty=Tensor[(180), float32] */;
  %29 = reshape(%27, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %30 = reshape(%28, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %31 = @func_1348(%29, %30) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) */;
  %32 = floor_mod(%21, %22) /* ty=Tensor[(12, 16, 4), float32] */;
  %33 = greater_equal(%25, %26) /* ty=Tensor[(12, 16, 4), bool] */;
  %34 = %31.2;
  (%32, %33, %34, %var_1972)
}

def @func_2315() -> (Tensor[(12, 16, 4), bool],) {
  %37 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %35 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %36 = %35.0;
    (%36,)
  };
  %37() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_6179(%var_6176: Tensor[(96), uint64], %var_6177: Tensor[(3, 30), float32], %var_6178: Tensor[(24, 12), float64]) -> (Tensor[(180), float32], Tensor[(96), uint64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(3, 30), float32], Tensor[(24, 12), float64]) {
  @func_6174(%var_6176, %var_6177, %var_6178) /* ty=(Tensor[(180), float32], Tensor[(96), uint64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(3, 30), float32], Tensor[(24, 12), float64]) */
}

def @func_5509(%var_5507: Tensor[(15, 3, 2), float32], %var_5508: Tensor[(288), float64]) -> (Tensor[(4, 6, 12), uint32], Tensor[(15, 3, 2), int16], Tensor[(96), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(288), bool], Tensor[(288), float64]) {
  @func_5505(%var_5507, %var_5508) /* ty=(Tensor[(4, 6, 12), uint32], Tensor[(15, 3, 2), int16], Tensor[(96), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(288), bool], Tensor[(288), float64]) */
}

def @func_5225() -> Tensor[(10, 15, 16), float32] {
  @func_5223() /* ty=Tensor[(10, 15, 16), float32] */
}

def @func_5919() -> (Tensor[(1404), uint16], Tensor[(288), float64], Tensor[(12, 16, 4), int64], Tensor[(4, 72), float64]) {
  @func_5917() /* ty=(Tensor[(1404), uint16], Tensor[(288), float64], Tensor[(12, 16, 4), int64], Tensor[(4, 72), float64]) */
}

def @func_996(%var_974: Tensor[(12, 16, 4), bool], %var_981: Tensor[(300), int16]) -> (Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) {
  %38 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %39 = cast(%var_974, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %43 = mod(%41, %42) /* ty=Tensor[(12, 16, 4), float32] */;
  %44 = cast(%38, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %46 = cast(%var_981, dtype="int16") /* ty=Tensor[(300), int16] */;
  %47 = reshape(%44, newshape=[768]) /* ty=Tensor[(768), int64] */;
  %48 = reshape(%45, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %49 = reshape(%46, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %50 = @func_833(%47, %48, %49) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) */;
  %51 = %50.2;
  %52 = cast(%51, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %53 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%43, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %56 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %57 = right_shift(%54, %55) /* ty=Tensor[(12, 16, 4), int32] */;
  %58 = %56.1;
  (meta[relay.Constant][1] /* ty=Tensor[(288), float64] */, %var_981, %57, %58)
}

def @func_4314() -> (Tensor[(12, 16, 4), bool],) {
  @func_4312() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_2532(%var_2530: Tensor[(702, 2), float64]) -> (Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(702, 2), float64], Tensor[(300), int16], Tensor[(12, 16, 4), float32]) {
  @func_2529(%var_2530) /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(702, 2), float64], Tensor[(300), int16], Tensor[(12, 16, 4), float32]) */
}

def @func_5164() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) {
  %59 = @func_4776() /* ty=(Tensor[(12, 16, 4), float32],) */;
  %60 = %59.0;
  %61 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
  (%60, %61)
}

def @func_6302() -> Tensor[(10, 15, 16), float32] {
  %62 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
  %62.0
}

def @func_1570() -> Tensor[(12, 16, 4), bool] {
  %63 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %63.0
}

def @func_1079(%var_1078: Tensor[(1404), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) {
  %75 = fn (%var_1069: Tensor[(1404), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) {
    %64 = cast(meta[relay.Constant][2] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %65 = reshape(%64, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
    %66 = @func_397(%65) /* ty=(Tensor[(13, 9, 12), float64],) */;
    %67 = cast(%var_1069, dtype="uint16") /* ty=Tensor[(1404), uint16] */;
    %68 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(1404), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(1404), float64] */, dtype="uint16") /* ty=Tensor[(1404), uint16] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %71 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    %72 = %66.0;
    %73 = right_shift(%69, %70) /* ty=Tensor[(1404), uint16] */;
    %74 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    (%71, %72, %73, %74)
  };
  %75(%var_1078) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) */
}

def @func_2093(%var_2091: Tensor[(4, 6, 16), float32]) -> (Tensor[(4, 6, 16), float32],) {
  @func_2090(%var_2091) /* ty=(Tensor[(4, 6, 16), float32],) */
}

def @func_5505(%var_5412: Tensor[(15, 3, 2), float32], %var_5420: Tensor[(288), float64]) -> (Tensor[(4, 6, 12), uint32], Tensor[(15, 3, 2), int16], Tensor[(96), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(288), bool], Tensor[(288), float64]) {
  %76 = cast(%var_5420, dtype="float64") /* ty=Tensor[(288), float64] */;
  %77 = cast(%var_5420, dtype="float64") /* ty=Tensor[(288), float64] */;
  %78 = reshape(%76, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %79 = reshape(%77, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %80 = cast(%var_5412, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %81 = sqrt(%80) /* ty=Tensor[(15, 3, 2), float32] */;
  %82 = cast(%var_5412, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="uint16") /* ty=Tensor[(15, 3, 2), uint16] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %86 = bitwise_and(%84, %85) /* ty=Tensor[(15, 3, 2), uint16] */;
  %87 = cast(%86, dtype="int16") /* ty=Tensor[(15, 3, 2), int16] */;
  %88 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%81, dtype="int16") /* ty=Tensor[(15, 3, 2), int16] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %91 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(288), float32] */;
  %94 = cast(meta[relay.Constant][3] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %95 = cast(meta[relay.Constant][3] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %96 = reshape(%94, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %97 = reshape(%95, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %98 = @func_1496(%96, %97) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %99 = %98.1;
  %100 = cast(%var_5420, dtype="bool") /* ty=Tensor[(288), bool] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(1), int32] */;
  %102 = cast(%99, dtype="bool") /* ty=Tensor[(288), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?), bool] */;
  %104 = cast(%var_5420, dtype="float64") /* ty=Tensor[(288), float64] */;
  %105 = @func_64(%78, %79) /* ty=Tensor[(4, 6, 12), uint32] */;
  %106 = minimum(%89, %90) /* ty=Tensor[(15, 3, 2), int16] */;
  %107 = sqrt(%93) /* ty=Tensor[(288), float32] */;
  %108 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  %109 = less_equal(%102, %103) /* ty=Tensor[(288), bool] */;
  %110 = log(%104) /* ty=Tensor[(288), float64] */;
  (%105, %106, meta[relay.Constant][3] /* ty=Tensor[(96), uint64] */, %107, %108, %109, %110)
}

def @func_1273() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) {
  %119 = fn () -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) {
    %111 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    %112 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 16, 4), bool] */, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
    %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%111, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 16, 4), bool] */, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
    %117 = not_equal(%114, %115) /* ty=Tensor[(12, 16, 4), bool] */;
    %118 = sin(%116) /* ty=Tensor[(12, 16, 4), float32] */;
    (%117, %118)
  };
  %119() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */
}

def @func_2356() -> Tensor[(12, 16, 4), float32] {
  %123 = fn () -> Tensor[(12, 16, 4), float32] {
    %120 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
    %121 = %120.1;
    %122 = cast(%121, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
    log10(%122) /* ty=Tensor[(12, 16, 4), float32] */
  };
  %123() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_5578() -> (Tensor[(12, 16, 4), float32],) {
  @func_5576() /* ty=(Tensor[(12, 16, 4), float32],) */
}

def @func_1232(%var_1231: Tensor[(84, 22), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 14, 11), float64], Tensor[(84, 22), float64]) {
  %132 = fn (%var_1223: Tensor[(84, 22), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 14, 11), float64], Tensor[(84, 22), float64]) {
    %124 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %125 = cast(%var_1223, dtype="float64") /* ty=Tensor[(84, 22), float64] */;
    %126 = cast(%var_1223, dtype="float64") /* ty=Tensor[(84, 22), float64] */;
    %127 = reshape(%125, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
    %128 = reshape(%126, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
    %129 = @func_256(%127, %128) /* ty=(Tensor[(12, 14, 11), float64],) */;
    %130 = %124.0;
    %131 = %129.0;
    (%130, %131, %var_1223)
  };
  %132(%var_1231) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 14, 11), float64], Tensor[(84, 22), float64]) */
}

def @func_2150() -> Tensor[(12, 16, 4), float32] {
  %135 = fn () -> Tensor[(12, 16, 4), float32] {
    %133 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    %134 = cast(%133, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
    asinh(%134) /* ty=Tensor[(12, 16, 4), float32] */
  };
  %135() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_861(%var_860: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float32],) {
  %138 = fn (%var_855: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float32],) {
    %136 = cast(%var_855, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
    %137 = atanh(%136) /* ty=Tensor[(10, 15, 16), float32] */;
    (%137,)
  };
  %138(%var_860) /* ty=(Tensor[(10, 15, 16), float32],) */
}

def @func_3551(%var_3550: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(150), float64], Tensor[(300), int16]) {
  %147 = fn (%var_3547: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(150), float64], Tensor[(300), int16]) {
    %139 = @func_2270() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) */;
    %140 = cast(meta[relay.Constant][5] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %141 = cast(%var_3547, dtype="int16") /* ty=Tensor[(300), int16] */;
    %142 = reshape(%140, newshape=[10, 15]) /* ty=Tensor[(10, 15), float64] */;
    %143 = reshape(%141, newshape=[300]) /* ty=Tensor[(300), int16] */;
    %144 = @func_3073(%142, %143) /* ty=(Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) */;
    %145 = %139.0;
    %146 = %144.7;
    (%145, %146, meta[relay.Constant][5] /* ty=Tensor[(150), float64] */, %var_3547)
  };
  %147(%var_3550) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(150), float64], Tensor[(300), int16]) */
}

def @func_4130() -> (Tensor[(12, 16, 4), float64],) {
  @func_4128() /* ty=(Tensor[(12, 16, 4), float64],) */
}

def @func_397(%var_381: Tensor[(13, 9, 12), float64]) -> (Tensor[(13, 9, 12), float64],) {
  %148 = cast(%var_381, dtype="float64") /* ty=Tensor[(13, 9, 12), float64] */;
  %149 = sin(%148) /* ty=Tensor[(13, 9, 12), float64] */;
  (%149,)
}

def @func_1499(%var_1497: Tensor[(3, 8, 4), uint64], %var_1498: Tensor[(3, 8, 4), uint64]) -> (Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) {
  %159 = fn (%var_1471: Tensor[(3, 8, 4), uint64], %var_1472: Tensor[(3, 8, 4), uint64]) -> (Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) {
    %150 = cast(%var_1472, dtype="uint64") /* ty=Tensor[(3, 8, 4), uint64] */;
    %151 = shape_of(%var_1471, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%var_1471, dtype="uint64") /* ty=Tensor[(3, 8, 4), uint64] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %154 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
    %155 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
    %156 = bitwise_or(%152, %153) /* ty=Tensor[(3, 8, 4), uint64] */;
    %157 = %154.0;
    %158 = %155.0;
    (%156, %157, %158)
  };
  %159(%var_1497, %var_1498) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */
}

def @func_4079(%var_4004: Tensor[(300), int16], %var_4005: Tensor[(288), float64]) -> (Tensor[(300), int16], Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15), float32], Tensor[(150), float64]) {
  %160 = cast(%var_4004, dtype="int16") /* ty=Tensor[(300), int16] */;
  %161 = cast(%var_4004, dtype="int16") /* ty=Tensor[(300), int16] */;
  %162 = cast(%var_4005, dtype="float64") /* ty=Tensor[(288), float64] */;
  %163 = reshape(%160, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %164 = reshape(%161, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %165 = reshape(%162, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %166 = @func_486(%163, %164, %165) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
  %167 = %166.1;
  %168 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
  %169 = %168.1;
  %170 = cast(%169, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %171 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%167, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = logical_and(%172, %173) /* ty=Tensor[(12, 16, 4), bool] */;
  %175 = cast(%174, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %176 = reshape(%175, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
  %177 = @func_2767(%176) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %178 = cast(meta[relay.Constant][6] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %179 = cast(%var_4004, dtype="int16") /* ty=Tensor[(300), int16] */;
  %180 = reshape(%178, newshape=[10, 15]) /* ty=Tensor[(10, 15), float64] */;
  %181 = reshape(%179, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %182 = @func_3073(%180, %181) /* ty=(Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) */;
  %183 = %177.0;
  %184 = %182.0;
  (%var_4004, %var_4005, %174, %183, %184, meta[relay.Constant][6] /* ty=Tensor[(150), float64] */)
}

def @func_3470(%var_3469: Tensor[(2400), float32]) -> (Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) {
  %193 = fn (%var_3438: Tensor[(2400), float32]) -> (Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) {
    %185 = @func_3149() /* ty=(Tensor[(12, 16, 4), float32],) */;
    %186 = cast(%var_3438, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %187 = reshape(%186, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
    %188 = @func_859(%187) /* ty=(Tensor[(10, 15, 16), float32],) */;
    %189 = cast(%var_3438, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %190 = %185.0;
    %191 = %188.0;
    %192 = sinh(%189) /* ty=Tensor[(2400), float32] */;
    (%190, %191, %192)
  };
  %193(%var_3469) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */
}

def @func_4956() -> Tensor[(12, 16, 4), float64] {
  @func_4954() /* ty=Tensor[(12, 16, 4), float64] */
}

def @func_3427(%var_3425: Tensor[(8, 14, 9), int16], %var_3426: Tensor[(8, 14, 9), int16]) -> (Tensor[(8, 14, 9), int16], Tensor[(12, 154), float32]) {
  %210 = fn (%var_3395: Tensor[(8, 14, 9), int16], %var_3396: Tensor[(8, 14, 9), int16]) -> (Tensor[(8, 14, 9), int16], Tensor[(12, 154), float32]) {
    %194 = cast(%var_3396, dtype="int16") /* ty=Tensor[(8, 14, 9), int16] */;
    %195 = shape_of(%var_3395, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%var_3395, dtype="int16") /* ty=Tensor[(8, 14, 9), int16] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %198 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 154), float64] */, dtype="float64") /* ty=Tensor[(12, 154), float64] */;
    %199 = log10(%198) /* ty=Tensor[(12, 154), float64] */;
    %200 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 154), float64] */, dtype="float64") /* ty=Tensor[(12, 154), float64] */;
    %201 = reshape(%200, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
    %202 = @func_1701(%201) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
    %203 = %202.1;
    %204 = cast(%203, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %205 = shape_of(%199, dtype="int32") /* ty=Tensor[(2), int32] */;
    %206 = cast(%199, dtype="float32") /* ty=Tensor[(12, 154), float32] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %208 = multiply(%196, %197) /* ty=Tensor[(8, 14, 9), int16] */;
    %209 = maximum(%206, %207) /* ty=Tensor[(12, 154), float32] */;
    (%208, %209)
  };
  %210(%var_3425, %var_3426) /* ty=(Tensor[(8, 14, 9), int16], Tensor[(12, 154), float32]) */
}

def @func_5676(%var_5675: Tensor[(11, 16, 12), float64]) -> Tensor[(11, 16, 12), float64] {
  %212 = fn (%var_5661: Tensor[(11, 16, 12), float64]) -> Tensor[(11, 16, 12), float64] {
    %211 = cast(%var_5661, dtype="float64") /* ty=Tensor[(11, 16, 12), float64] */;
    acos(%211) /* ty=Tensor[(11, 16, 12), float64] */
  };
  %212(%var_5675) /* ty=Tensor[(11, 16, 12), float64] */
}

def @func_2951() -> Tensor[(12, 16, 4), bool] {
  @func_2949() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_6089() -> Tensor[(12, 16, 4), float32] {
  @func_6087() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_2257() -> (Tensor[(288), float64], Tensor[(12, 16, 4), float32]) {
  %216 = fn () -> (Tensor[(288), float64], Tensor[(12, 16, 4), float32]) {
    %213 = @func_2212() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) */;
    %214 = %213.5;
    %215 = @func_2149() /* ty=Tensor[(12, 16, 4), float32] */;
    (%214, %215)
  };
  %216() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */
}

def @func_6444(%var_6413: Tensor[(2112), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(11, 16, 12), float64], Tensor[(2112), float64], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64]) {
  %217 = cast(%var_6413, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %218 = reshape(%217, newshape=[11, 16, 12]) /* ty=Tensor[(11, 16, 12), float64] */;
  %219 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %220 = %219.1;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %222 = reshape(%221, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), float64] */;
  %223 = @func_1639(%222) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) */;
  %224 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
  %225 = @func_5674(%218) /* ty=Tensor[(11, 16, 12), float64] */;
  %226 = %223.1;
  (%224, %225, %var_6413, %220, %226)
}

def @func_4194() -> (Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) {
  %236 = fn () -> (Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) {
    %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %228 = reshape(%227, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %229 = @func_1077(%228) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) */;
    %230 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
    %231 = %230.1;
    %232 = cast(%231, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
    %233 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    %234 = %229.2;
    %235 = sqrt(%232) /* ty=Tensor[(12, 16, 4), float32] */;
    (%233, %234, meta[relay.Constant][8] /* ty=Tensor[(1404), float64] */, %235)
  };
  %236() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) */
}

def @func_4825() -> (Tensor[(12, 16, 4), float32], Tensor[(288), float64], Tensor[(96), uint64]) {
  @func_4823() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(288), float64], Tensor[(96), uint64]) */
}

def @func_6174(%var_6154: Tensor[(96), uint64], %var_6166: Tensor[(3, 30), float32], %var_6167: Tensor[(24, 12), float64]) -> (Tensor[(180), float32], Tensor[(96), uint64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(3, 30), float32], Tensor[(24, 12), float64]) {
  %237 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
  %238 = @func_4292() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) */;
  %239 = %238.0;
  %240 = cast(%var_6154, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %241 = cast(%var_6154, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %242 = reshape(%240, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %243 = reshape(%241, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %244 = @func_1496(%242, %243) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %245 = %244.2;
  %246 = cast(%245, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %247 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%239, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %250 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %251 = cast(%var_6166, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %252 = cast(%var_6167, dtype="float64") /* ty=Tensor[(24, 12), float64] */;
  %253 = reshape(%251, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float32] */;
  %254 = reshape(%252, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %255 = @func_5505(%253, %254) /* ty=(Tensor[(4, 6, 12), uint32], Tensor[(15, 3, 2), int16], Tensor[(96), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(288), bool], Tensor[(288), float64]) */;
  %256 = %237.2;
  %257 = less_equal(%248, %249) /* ty=Tensor[(12, 16, 4), bool] */;
  %258 = %250.0;
  %259 = %255.3;
  (%256, %var_6154, %257, %258, %259, %var_6166, %var_6167)
}

def @func_1348(%var_1319: Tensor[(4, 15, 3), float32], %var_1329: Tensor[(4, 15, 3), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) {
  %260 = cast(%var_1319, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %261 = cos(%260) /* ty=Tensor[(4, 15, 3), float32] */;
  %262 = cast(%var_1329, dtype="bool") /* ty=Tensor[(4, 15, 3), bool] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="bool") /* ty=Tensor[(4, 15, 3), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %266 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %267 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %268 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %269 = logical_and(%264, %265) /* ty=Tensor[(4, 15, 3), bool] */;
  %270 = %266.0;
  %271 = %267.0;
  (%268, %269, %270, %271)
}

def @func_2270() -> (Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) {
  %272 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %273 = %272.4;
  %274 = cast(%273, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %275 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 144), float64] */, dtype="float64") /* ty=Tensor[(2, 144), float64] */;
  %276 = cast(meta[relay.Constant][10] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %277 = reshape(%274, newshape=[768]) /* ty=Tensor[(768), int64] */;
  %278 = reshape(%275, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %279 = reshape(%276, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %280 = @func_833(%277, %278, %279) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) */;
  %281 = %280.1;
  (%273, %281, meta[relay.Constant][9] /* ty=Tensor[(2, 144), float64] */, meta[relay.Constant][10] /* ty=Tensor[(300), int16] */)
}

def @func_400(%var_398: Tensor[(13, 9, 12), float64]) -> (Tensor[(13, 9, 12), float64],) {
  @func_397(%var_398) /* ty=(Tensor[(13, 9, 12), float64],) */
}

def @func_3345(%var_3211: Tensor[(14, 1, 16), float32], %var_3253: Tensor[(10, 30), int16], %var_3304: Tensor[(14, 1, 16), float32], %var_3322: Tensor[(14, 9, 16), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 30), int16], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(12, 16, 4), bool], Tensor[(14, ?, 16), uint8], Tensor[(1848), int64], Tensor[(1848), float64], Tensor[(14, ?, 16), bool], Tensor[(14, 9, 16), bool], Tensor[(14, 1, 16), float64], Tensor[(14, ?, 16), float32]) {
  %282 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %285 = cast(%var_3253, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %286 = reshape(%284, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
  %287 = reshape(%285, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %288 = @func_996(%286, %287) /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) */;
  %289 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %290 = reshape(%289, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
  %291 = @func_2090(%290) /* ty=(Tensor[(4, 6, 16), float32],) */;
  %292 = cast(%var_3211, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %293 = acos(%292) /* ty=Tensor[(14, 1, 16), float32] */;
  %294 = cast(%var_3211, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %298 = add(%296, %297) /* ty=Tensor[(14, ?, 16), float32] */;
  %299 = cast(%298, dtype="uint8") /* ty=Tensor[(14, ?, 16), uint8] */;
  %300 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%293, dtype="uint8") /* ty=Tensor[(14, 1, 16), uint8] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %303 = cast(meta[relay.Constant][12] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %304 = reshape(%303, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %305 = @func_1701(%304) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
  %306 = cast(%var_3304, dtype="bool") /* ty=Tensor[(14, 1, 16), bool] */;
  %307 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%298, dtype="bool") /* ty=Tensor[(14, ?, 16), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %310 = cast(%298, dtype="bool") /* ty=Tensor[(14, ?, 16), bool] */;
  %311 = cast(%var_3322, dtype="bool") /* ty=Tensor[(14, 9, 16), bool] */;
  %312 = cast(%var_3304, dtype="float64") /* ty=Tensor[(14, 1, 16), float64] */;
  %313 = cast(%var_3211, dtype="uint8") /* ty=Tensor[(14, 1, 16), uint8] */;
  %314 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%298, dtype="uint8") /* ty=Tensor[(14, ?, 16), uint8] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %317 = right_shift(%315, %316) /* ty=Tensor[(14, ?, 16), uint8] */;
  %318 = cast(%var_3304, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float32") /* ty=Tensor[(14, ?, 16), float32] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %322 = %288.0;
  %323 = %291.0;
  %324 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  %325 = logical_xor(%301, %302) /* ty=Tensor[(14, ?, 16), uint8] */;
  %326 = %305.1;
  %327 = logical_or(%308, %309) /* ty=Tensor[(14, ?, 16), bool] */;
  %328 = logical_or(%310, %311) /* ty=Tensor[(14, 9, 16), bool] */;
  %329 = rsqrt(%312) /* ty=Tensor[(14, 1, 16), float64] */;
  %330 = floor_divide(%320, %321) /* ty=Tensor[(14, ?, 16), float32] */;
  (%283, %322, %var_3253, %323, meta[relay.Constant][11] /* ty=Tensor[(384), float32] */, %324, %325, %326, meta[relay.Constant][12] /* ty=Tensor[(1848), float64] */, %327, %328, %329, %330)
}

def @func_1703(%var_1702: Tensor[(1848), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) {
  %344 = fn (%var_1692: Tensor[(1848), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) {
    %331 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
    %332 = cast(%var_1692, dtype="float64") /* ty=Tensor[(1848), float64] */;
    %333 = cast(%var_1692, dtype="float64") /* ty=Tensor[(1848), float64] */;
    %334 = reshape(%332, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
    %335 = reshape(%333, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
    %336 = @func_256(%334, %335) /* ty=(Tensor[(12, 14, 11), float64],) */;
    %337 = %336.0;
    %338 = cast(%337, dtype="int64") /* ty=Tensor[(12, 14, 11), int64] */;
    %339 = shape_of(%var_1692, dtype="int32") /* ty=Tensor[(1), int32] */;
    %340 = cast(%var_1692, dtype="int64") /* ty=Tensor[(1848), int64] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?), int64] */;
    %342 = %331.0;
    %343 = minimum(%340, %341) /* ty=Tensor[(1848), int64] */;
    (%342, %343)
  };
  %344(%var_1702) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */
}

def @func_4662() -> (Tensor[(12, 16, 4), bool],) {
  %347 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %345 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
    %346 = %345.3;
    (%346,)
  };
  %347() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_1572() -> Tensor[(12, 16, 4), bool] {
  @func_1570() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_5214() -> Tensor[(12, 16, 4), bool] {
  @func_5001() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_5355() -> (Tensor[(1, 288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(10, 15, 16), float32]) {
  @func_5353() /* ty=(Tensor[(1, 288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(10, 15, 16), float32]) */
}

def @func_4312() -> (Tensor[(12, 16, 4), bool],) {
  %348 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %349 = %348.0;
  (%349,)
}

def @func_3076(%var_3074: Tensor[(10, 15), float64], %var_3075: Tensor[(300), int16]) -> (Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) {
  %369 = fn (%var_2991: Tensor[(10, 15), float64], %var_3037: Tensor[(300), int16]) -> (Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) {
    %350 = cast(%var_2991, dtype="float64") /* ty=Tensor[(10, 15), float64] */;
    %351 = sigmoid(%350) /* ty=Tensor[(10, 15), float64] */;
    %352 = cast(%351, dtype="float32") /* ty=Tensor[(10, 15), float32] */;
    %353 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 192), int64] */, dtype="int64") /* ty=Tensor[(4, 192), int64] */;
    %354 = reshape(%353, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), int64] */;
    %355 = @func_650(%354) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) */;
    %356 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 192), int64] */, dtype="bool") /* ty=Tensor[(4, 192), bool] */;
    %357 = cast(%var_3037, dtype="int16") /* ty=Tensor[(300), int16] */;
    %358 = reshape(%356, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
    %359 = reshape(%357, newshape=[300]) /* ty=Tensor[(300), int16] */;
    %360 = @func_996(%358, %359) /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) */;
    %361 = cast(meta[relay.Constant][14] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
    %362 = reshape(%361, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
    %363 = @func_1701(%362) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
    %364 = cosh(%352) /* ty=Tensor[(10, 15), float32] */;
    %365 = %355.4;
    %366 = @func_1570() /* ty=Tensor[(12, 16, 4), bool] */;
    %367 = %360.3;
    %368 = %363.1;
    (%364, %365, meta[relay.Constant][13] /* ty=Tensor[(4, 192), int64] */, %366, %367, %var_3037, %368, meta[relay.Constant][14] /* ty=Tensor[(1848), float64] */)
  };
  %369(%var_3074, %var_3075) /* ty=(Tensor[(10, 15), float32], Tensor[(12, 16, 4), float32], Tensor[(4, 192), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64], Tensor[(300), int16], Tensor[(1848), int64], Tensor[(1848), float64]) */
}

def @func_5002() -> Tensor[(12, 16, 4), bool] {
  %370 = fn () -> Tensor[(12, 16, 4), bool] {
    @func_1570() /* ty=Tensor[(12, 16, 4), bool] */
  };
  %370() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_3874(%var_3868: Tensor[(6, 30), float32], %var_3869: Tensor[(224), float32], %var_3870: Tensor[(2016), float32], %var_3871: Tensor[(150, 2), int16], %var_3872: Tensor[(384), float32], %var_3873: Tensor[(6, 30), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(14, 1, 16), float64], Tensor[(224), float32], Tensor[(2016), float32], Tensor[(12, 16, 4), float32], Tensor[(150, 2), bool], Tensor[(4, 6, 16), float32], Tensor[(288), float64], Tensor[(384), float32], Tensor[(12, 16, 4), float32], Tensor[(6, 30), bool], Tensor[(12, 16, 4), bool], Tensor[(384), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(2400), float32], Tensor[(6, 30), bool]) {
  %449 = fn (%var_3672: Tensor[(6, 30), float32], %var_3681: Tensor[(224), float32], %var_3683: Tensor[(2016), float32], %var_3743: Tensor[(150, 2), int16], %var_3766: Tensor[(384), float32], %var_3861: Tensor[(6, 30), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(14, 1, 16), float64], Tensor[(224), float32], Tensor[(2016), float32], Tensor[(12, 16, 4), float32], Tensor[(150, 2), bool], Tensor[(4, 6, 16), float32], Tensor[(288), float64], Tensor[(384), float32], Tensor[(12, 16, 4), float32], Tensor[(6, 30), bool], Tensor[(12, 16, 4), bool], Tensor[(384), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(2400), float32], Tensor[(6, 30), bool]) {
    %371 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %372 = %371.0;
    %373 = cast(%372, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
    %374 = cast(%372, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
    %375 = cast(%var_3672, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %376 = reshape(%373, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
    %377 = reshape(%374, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), uint32] */;
    %378 = reshape(%375, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %379 = @func_2007(%376, %377, %378) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32]) */;
    %380 = cast(%var_3681, dtype="float32") /* ty=Tensor[(224), float32] */;
    %381 = cast(meta[relay.Constant][15] /* ty=Tensor[(150, 2), int16] */, dtype="int16") /* ty=Tensor[(150, 2), int16] */;
    %382 = cast(%var_3681, dtype="float32") /* ty=Tensor[(224), float32] */;
    %383 = cast(%var_3683, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %384 = reshape(%380, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
    %385 = reshape(%381, newshape=[10, 30]) /* ty=Tensor[(10, 30), int16] */;
    %386 = reshape(%382, newshape=[14, 1, 16]) /* ty=Tensor[(14, 1, 16), float32] */;
    %387 = reshape(%383, newshape=[14, 9, 16]) /* ty=Tensor[(14, 9, 16), float32] */;
    %388 = @func_3345(%384, %385, %386, %387) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 30), int16], Tensor[(4, 6, 16), float32], Tensor[(384), float32], Tensor[(12, 16, 4), bool], Tensor[(14, ?, 16), uint8], Tensor[(1848), int64], Tensor[(1848), float64], Tensor[(14, ?, 16), bool], Tensor[(14, 9, 16), bool], Tensor[(14, 1, 16), float64], Tensor[(14, ?, 16), float32]) */;
    %389 = cast(%var_3743, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
    %390 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(150, 2), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %391 = cast(meta[relay.Constant][15] /* ty=Tensor[(150, 2), int16] */, dtype="bool") /* ty=Tensor[(150, 2), bool] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %393 = cast(%var_3766, dtype="float32") /* ty=Tensor[(384), float32] */;
    %394 = reshape(%393, newshape=[4, 6, 16]) /* ty=Tensor[(4, 6, 16), float32] */;
    %395 = @func_2090(%394) /* ty=(Tensor[(4, 6, 16), float32],) */;
    %396 = @func_2212() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) */;
    %397 = cast(%var_3766, dtype="float64") /* ty=Tensor[(384), float64] */;
    %398 = rsqrt(%397) /* ty=Tensor[(384), float64] */;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(384), float32] */;
    %400 = atanh(%399) /* ty=Tensor[(384), float32] */;
    %401 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(1), int32] */;
    %403 = cast(%400, dtype="float64") /* ty=Tensor[(384), float64] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?), float64] */;
    %405 = floor_divide(%403, %404) /* ty=Tensor[(384), float64] */;
    %406 = cast(%405, dtype="float32") /* ty=Tensor[(384), float32] */;
    %407 = @func_3149() /* ty=(Tensor[(12, 16, 4), float32],) */;
    %408 = cast(%var_3672, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %409 = sigmoid(%408) /* ty=Tensor[(6, 30), float64] */;
    %410 = cast(%var_3672, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(2), int32] */;
    %412 = cast(%409, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %414 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %415 = cast(%405, dtype="int8") /* ty=Tensor[(384), int8] */;
    %416 = shape_of(%400, dtype="int32") /* ty=Tensor[(1), int32] */;
    %417 = cast(%400, dtype="int8") /* ty=Tensor[(384), int8] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?), int8] */;
    %419 = logical_xor(%417, %418) /* ty=Tensor[(384), int8] */;
    %420 = cast(meta[relay.Constant][16] /* ty=Tensor[(384), float32] */, dtype="int16") /* ty=Tensor[(384), int16] */;
    %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(1), int32] */;
    %422 = cast(%419, dtype="int16") /* ty=Tensor[(384), int16] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?), int16] */;
    %424 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %425 = cast(meta[relay.Constant][17] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
    %426 = reshape(%425, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
    %427 = @func_1701(%426) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
    %428 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
    %429 = cast(%var_3861, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %430 = shape_of(%409, dtype="int32") /* ty=Tensor[(2), int32] */;
    %431 = cast(%409, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %433 = %379.2;
    %434 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
    %435 = %388.11;
    %436 = @func_2966() /* ty=Tensor[(12, 16, 4), float32] */;
    %437 = less(%391, %392) /* ty=Tensor[(150, 2), bool] */;
    %438 = %395.0;
    %439 = %396.4;
    %440 = log10(%406) /* ty=Tensor[(384), float32] */;
    %441 = %407.0;
    %442 = less(%412, %413) /* ty=Tensor[(6, 30), bool] */;
    %443 = %414.0;
    %444 = left_shift(%422, %423) /* ty=Tensor[(384), int16] */;
    %445 = %424.0;
    %446 = %427.0;
    %447 = %428.3;
    %448 = logical_or(%431, %432) /* ty=Tensor[(6, 30), bool] */;
    (%372, %433, %434, %435, %var_3681, %var_3683, %436, %437, %438, %439, %440, %441, %442, %443, %444, %445, %446, meta[relay.Constant][17] /* ty=Tensor[(1848), float64] */, %447, %448)
  };
  %449(%var_3868, %var_3869, %var_3870, %var_3871, %var_3872, %var_3873) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(14, 1, 16), float64], Tensor[(224), float32], Tensor[(2016), float32], Tensor[(12, 16, 4), float32], Tensor[(150, 2), bool], Tensor[(4, 6, 16), float32], Tensor[(288), float64], Tensor[(384), float32], Tensor[(12, 16, 4), float32], Tensor[(6, 30), bool], Tensor[(12, 16, 4), bool], Tensor[(384), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(2400), float32], Tensor[(6, 30), bool]) */
}

def @func_5576() -> (Tensor[(12, 16, 4), float32],) {
  %450 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %451 = %450.1;
  (%451,)
}

def @func_6087() -> Tensor[(12, 16, 4), float32] {
  %452 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
  %452.1
}

def @func_4823() -> (Tensor[(12, 16, 4), float32], Tensor[(288), float64], Tensor[(96), uint64]) {
  %453 = cast(meta[relay.Constant][18] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %454 = cast(meta[relay.Constant][18] /* ty=Tensor[(96), uint64] */, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %455 = reshape(%453, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %456 = reshape(%454, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %457 = @func_1496(%455, %456) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %458 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
  %459 = %457.1;
  (%458, %459, meta[relay.Constant][18] /* ty=Tensor[(96), uint64] */)
}

def @func_5205() -> Tensor[(12, 16, 4), float32] {
  %461 = fn () -> Tensor[(12, 16, 4), float32] {
    %460 = @func_5164() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) */;
    %460.0
  };
  %461() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_5983() -> Tensor[(12, 16, 4), float32] {
  %462 = fn () -> Tensor[(12, 16, 4), float32] {
    @func_2149() /* ty=Tensor[(12, 16, 4), float32] */
  };
  %462() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_5223() -> Tensor[(10, 15, 16), float32] {
  %463 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
  %463.0
}

def @func_1000(%var_998: Tensor[(12, 16, 4), bool], %var_999: Tensor[(300), int16]) -> (Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) {
  @func_996(%var_998, %var_999) /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) */
}

def @func_4889() -> (Tensor[(12, 16, 4), bool],) {
  %466 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %464 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
    %465 = %464.0;
    (%465,)
  };
  %466() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_5039() -> (Tensor[(1404), uint16],) {
  %469 = fn () -> (Tensor[(1404), uint16],) {
    %467 = @func_4193() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) */;
    %468 = %467.1;
    (%468,)
  };
  %469() /* ty=(Tensor[(1404), uint16],) */
}

def @func_2529(%var_2477: Tensor[(702, 2), float64]) -> (Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(702, 2), float64], Tensor[(300), int16], Tensor[(12, 16, 4), float32]) {
  %470 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %471 = cast(%var_2477, dtype="float64") /* ty=Tensor[(702, 2), float64] */;
  %472 = reshape(%471, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %473 = @func_1077(%472) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) */;
  %474 = @func_2270() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) */;
  %475 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
  %477 = %470.0;
  %478 = %473.0;
  %479 = %474.3;
  %480 = exp(%476) /* ty=Tensor[(12, 16, 4), float32] */;
  (%477, %478, %var_2477, %479, %480)
}

def @func_467() -> (Tensor[(12, 16, 4), bool],) {
  %481 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %482 = %481.0;
  (%482,)
}

def @func_837(%var_834: Tensor[(768), int64], %var_835: Tensor[(288), float64], %var_836: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) {
  %512 = fn (%var_740: Tensor[(768), int64], %var_808: Tensor[(288), float64], %var_825: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) {
    %483 = cast(%var_740, dtype="int64") /* ty=Tensor[(768), int64] */;
    %484 = reshape(%483, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), int64] */;
    %485 = @func_650(%484) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) */;
    %486 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %487 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %488 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
    %489 = %488.0;
    %490 = cast(%var_808, dtype="float32") /* ty=Tensor[(288), float32] */;
    %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(1), int32] */;
    %492 = cast(%489, dtype="float32") /* ty=Tensor[(288), float32] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?), float32] */;
    %494 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %495 = %494.0;
    %496 = cast(%495, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %497 = cosh(%496) /* ty=Tensor[(12, 16, 4), float64] */;
    %498 = cast(%497, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %499 = cast(%var_825, dtype="int16") /* ty=Tensor[(300), int16] */;
    %500 = cast(%var_825, dtype="int16") /* ty=Tensor[(300), int16] */;
    %501 = cast(%var_808, dtype="float64") /* ty=Tensor[(288), float64] */;
    %502 = reshape(%499, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
    %503 = reshape(%500, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
    %504 = reshape(%501, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %505 = @func_486(%502, %503, %504) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
    %506 = %485.5;
    %507 = %486.0;
    %508 = %487.0;
    %509 = floor_divide(%492, %493) /* ty=Tensor[(288), float32] */;
    %510 = atan(%498) /* ty=Tensor[(12, 16, 4), float64] */;
    %511 = %505.1;
    (%506, %var_740, %507, %508, %509, %510, %511, %var_825)
  };
  %512(%var_834, %var_835, %var_836) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(300), int16]) */
}

def @func_1172() -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) {
  %513 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %514 = cast(meta[relay.Constant][19] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %515 = reshape(%514, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %516 = @func_859(%515) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %517 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %518 = %513.0;
  %519 = %516.0;
  (%517, %518, %519, meta[relay.Constant][19] /* ty=Tensor[(2400), float32] */)
}

def @func_4697() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 14, 11), float64], Tensor[(1848), float64]) {
  @func_4695() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 14, 11), float64], Tensor[(1848), float64]) */
}

def @func_2090(%var_2082: Tensor[(4, 6, 16), float32]) -> (Tensor[(4, 6, 16), float32],) {
  %520 = cast(%var_2082, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %521 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(4, 6, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %524 = divide(%522, %523) /* ty=Tensor[(4, 6, 16), float32] */;
  (%524,)
}

def @func_4485(%var_4484: Tensor[(300, 8), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15, 16), float32], Tensor[(300, 8), float64]) {
  %536 = fn (%var_4420: Tensor[(300, 8), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15, 16), float32], Tensor[(300, 8), float64]) {
    %525 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
    %526 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %527 = cast(%var_4420, dtype="float32") /* ty=Tensor[(300, 8), float32] */;
    %528 = reshape(%527, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %529 = @func_3468(%528) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
    %530 = cast(%var_4420, dtype="float64") /* ty=Tensor[(300, 8), float64] */;
    %531 = %525.0;
    %532 = %526.0;
    %533 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    %534 = %529.1;
    %535 = sin(%530) /* ty=Tensor[(300, 8), float64] */;
    (%531, %532, %533, %534, %535)
  };
  %536(%var_4484) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15, 16), float32], Tensor[(300, 8), float64]) */
}

def @func_285() -> (Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) {
  %537 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(12, 16, 4), int8] */;
  %538 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(12, 16, 4), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 16, 4), int8] */, dtype="int8") /* ty=Tensor[(12, 16, 4), int8] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %541 = maximum(%539, %540) /* ty=Tensor[(12, 16, 4), int8] */;
  %542 = cast(%541, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %543 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 16, 4), int8] */, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %544 = erf(%543) /* ty=Tensor[(12, 16, 4), float64] */;
  %545 = cast(%541, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %549 = tan(%542) /* ty=Tensor[(12, 16, 4), float64] */;
  %550 = logical_xor(%547, %548) /* ty=Tensor[(12, 16, 4), int64] */;
  (%549, %550)
}

def @func_1352(%var_1350: Tensor[(4, 15, 3), float32], %var_1351: Tensor[(4, 15, 3), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) {
  @func_1348(%var_1350, %var_1351) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) */
}

def @func_4083(%var_4081: Tensor[(300), int16], %var_4082: Tensor[(288), float64]) -> (Tensor[(300), int16], Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15), float32], Tensor[(150), float64]) {
  @func_4079(%var_4081, %var_4082) /* ty=(Tensor[(300), int16], Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(10, 15), float32], Tensor[(150), float64]) */
}

def @func_5406() -> (Tensor[(8, 6, 6), float32], Tensor[(12, 16, 4), float32]) {
  %557 = fn () -> (Tensor[(8, 6, 6), float32], Tensor[(12, 16, 4), float32]) {
    %551 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 6), float64] */;
    %552 = cosh(%551) /* ty=Tensor[(8, 6, 6), float64] */;
    %553 = cast(%552, dtype="float32") /* ty=Tensor[(8, 6, 6), float32] */;
    %554 = @func_3909() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */;
    %555 = atanh(%553) /* ty=Tensor[(8, 6, 6), float32] */;
    %556 = %554.1;
    (%555, %556)
  };
  %557() /* ty=(Tensor[(8, 6, 6), float32], Tensor[(12, 16, 4), float32]) */
}

def @func_1174() -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) {
  @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */
}

def @func_2949() -> Tensor[(12, 16, 4), bool] {
  @func_1570() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_3635() -> (Tensor[(12, 16, 4), bool],) {
  %560 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %558 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %559 = %558.0;
    (%559,)
  };
  %560() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_2272() -> (Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) {
  @func_2270() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(768), int64], Tensor[(2, 144), float64], Tensor[(300), int16]) */
}

def @func_2692(%var_2638: Tensor[(2400), float32], %var_2675: Tensor[(1848), float64]) -> (Tensor[(2400), float32], Tensor[(2400), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) {
  %561 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %562 = %561.3;
  %563 = cast(%var_2638, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(1), int32] */;
  %565 = cast(%562, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?), float32] */;
  %567 = cast(%var_2638, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %568 = shape_of(%562, dtype="int32") /* ty=Tensor[(1), int32] */;
  %569 = cast(%562, dtype="uint64") /* ty=Tensor[(2400), uint64] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %571 = @func_2212() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) */;
  %572 = %571.5;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(288), float32] */;
  %574 = cast(%var_2675, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %575 = reshape(%574, newshape=[1848]) /* ty=Tensor[(1848), float64] */;
  %576 = @func_1701(%575) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1848), int64]) */;
  %577 = cast(meta[relay.Constant][24] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %578 = reshape(%577, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
  %579 = @func_397(%578) /* ty=(Tensor[(13, 9, 12), float64],) */;
  %580 = divide(%565, %566) /* ty=Tensor[(2400), float32] */;
  %581 = bitwise_or(%569, %570) /* ty=Tensor[(2400), uint64] */;
  %582 = log10(%573) /* ty=Tensor[(288), float32] */;
  %583 = %576.0;
  %584 = %579.0;
  (%580, %581, %582, %583, %var_2675, %584, meta[relay.Constant][24] /* ty=Tensor[(1404), float64] */)
}

def @func_2770(%var_2768: Tensor[(12, 16, 4), bool]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) {
  @func_2767(%var_2768) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */
}

def @func_6461() -> Tensor[(180), float32] {
  @func_6459() /* ty=Tensor[(180), float32] */
}

def @func_5216() -> Tensor[(12, 16, 4), bool] {
  @func_5214() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_259(%var_257: Tensor[(12, 14, 11), float64], %var_258: Tensor[(12, 14, 11), float64]) -> (Tensor[(12, 14, 11), float64],) {
  %590 = fn (%var_251: Tensor[(12, 14, 11), float64], %var_252: Tensor[(12, 14, 11), float64]) -> (Tensor[(12, 14, 11), float64],) {
    %585 = cast(%var_252, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
    %586 = shape_of(%var_251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%var_251, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %589 = subtract(%587, %588) /* ty=Tensor[(12, 14, 11), float64] */;
    (%589,)
  };
  %590(%var_257, %var_258) /* ty=(Tensor[(12, 14, 11), float64],) */
}

def @func_652(%var_651: Tensor[(12, 16, 4), int64]) -> (Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) {
  %615 = fn (%var_597: Tensor[(12, 16, 4), int64]) -> (Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) {
    %591 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
    %592 = %591.1;
    %593 = cast(%var_597, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%592, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %597 = cast(meta[relay.Constant][25] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %598 = reshape(%597, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
    %599 = @func_397(%598) /* ty=(Tensor[(13, 9, 12), float64],) */;
    %600 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %601 = cast(%var_597, dtype="float32") /* ty=Tensor[(12, 16, 4), float32] */;
    %602 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 72), float64] */, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
    %603 = reshape(%602, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %604 = @func_376(%603) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
    %605 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 72), float64] */, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
    %606 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 72), float64] */, dtype="float64") /* ty=Tensor[(4, 72), float64] */;
    %607 = reshape(%605, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
    %608 = reshape(%606, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
    %609 = floor_divide(%595, %596) /* ty=Tensor[(12, 16, 4), float64] */;
    %610 = %599.0;
    %611 = %600.0;
    %612 = cos(%601) /* ty=Tensor[(12, 16, 4), float32] */;
    %613 = %604.0;
    %614 = @func_64(%607, %608) /* ty=Tensor[(4, 6, 12), uint32] */;
    (%609, %610, meta[relay.Constant][25] /* ty=Tensor[(1404), float64] */, %611, %612, %613, meta[relay.Constant][26] /* ty=Tensor[(4, 72), float64] */, %614)
  };
  %615(%var_651) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) */
}

def @func_6078() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(144, 2), float64]) {
  %616 = @func_4888() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %617 = cast(meta[relay.Constant][27] /* ty=Tensor[(144, 2), float64] */, dtype="float64") /* ty=Tensor[(144, 2), float64] */;
  %618 = reshape(%617, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %619 = @func_376(%618) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
  %620 = %616.0;
  %621 = %619.0;
  (%620, %621, meta[relay.Constant][27] /* ty=Tensor[(144, 2), float64] */)
}

def @func_1587() -> (Tensor[(12, 16, 4), bool],) {
  %624 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %622 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
    %623 = %622.0;
    (%623,)
  };
  %624() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_2874(%var_2871: Tensor[(288), float64], %var_2872: Tensor[(1404), float64], %var_2873: Tensor[(4, 6, 12), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(12, 16, 4), float32], Tensor[(1404), float64], Tensor[(12, 16, 4), float32], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), uint16], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), float32]) {
  %654 = fn (%var_2820: Tensor[(288), float64], %var_2828: Tensor[(1404), float64], %var_2838: Tensor[(4, 6, 12), float32]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(12, 16, 4), float32], Tensor[(1404), float64], Tensor[(12, 16, 4), float32], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), uint16], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), float32]) {
    %625 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %626 = cast(%var_2828, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %627 = reshape(%626, newshape=[702, 2]) /* ty=Tensor[(702, 2), float64] */;
    %628 = @func_2529(%627) /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), bool], Tensor[(702, 2), float64], Tensor[(300), int16], Tensor[(12, 16, 4), float32]) */;
    %629 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
    %630 = cast(%var_2820, dtype="float64") /* ty=Tensor[(288), float64] */;
    %631 = cast(%var_2820, dtype="float64") /* ty=Tensor[(288), float64] */;
    %632 = reshape(%630, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
    %633 = reshape(%631, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
    %634 = @func_64(%632, %633) /* ty=Tensor[(4, 6, 12), uint32] */;
    %635 = cast(%634, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
    %636 = acos(%635) /* ty=Tensor[(4, 6, 12), float32] */;
    %637 = cast(%var_2838, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
    %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%636, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %641 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 6, 12), float32] */, dtype="uint16") /* ty=Tensor[(4, 6, 12), uint16] */;
    %642 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %643 = cast(%636, dtype="uint16") /* ty=Tensor[(4, 6, 12), uint16] */;
    %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %645 = cast(%636, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
    %646 = cast(%636, dtype="float32") /* ty=Tensor[(4, 6, 12), float32] */;
    %647 = %625.0;
    %648 = %628.4;
    %649 = %629.1;
    %650 = floor_mod(%639, %640) /* ty=Tensor[(4, 6, 12), float32] */;
    %651 = bitwise_xor(%643, %644) /* ty=Tensor[(4, 6, 12), uint16] */;
    %652 = sigmoid(%645) /* ty=Tensor[(4, 6, 12), float32] */;
    %653 = exp(%646) /* ty=Tensor[(4, 6, 12), float32] */;
    (%647, %var_2820, %648, %var_2828, %649, %650, %651, %652, %653)
  };
  %654(%var_2871, %var_2872, %var_2873) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(12, 16, 4), float32], Tensor[(1404), float64], Tensor[(12, 16, 4), float32], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), uint16], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), float32]) */
}

def @func_4563() -> (Tensor[(10, 15, 16), float32], Tensor[(288), float64], Tensor[(2, 48), uint64]) {
  %655 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
  %656 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 48), uint64] */, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
  %657 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 48), uint64] */, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
  %658 = reshape(%656, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %659 = reshape(%657, newshape=[3, 8, 4]) /* ty=Tensor[(3, 8, 4), uint64] */;
  %660 = @func_1496(%658, %659) /* ty=(Tensor[(3, 8, 4), uint64], Tensor[(288), float64], Tensor[(12, 16, 4), float64]) */;
  %661 = %655.0;
  %662 = %660.1;
  (%661, %662, meta[relay.Constant][29] /* ty=Tensor[(2, 48), uint64] */)
}

def @func_4232() -> (Tensor[(12, 16, 4), bool],) {
  @func_4230() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_491(%var_488: Tensor[(10, 15, 2), int16], %var_489: Tensor[(10, 15, 2), int16], %var_490: Tensor[(288), float64]) -> (Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) {
  @func_486(%var_488, %var_489, %var_490) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */
}

def @func_2305() -> Tensor[(12, 16, 4), bool] {
  %663 = fn () -> Tensor[(12, 16, 4), bool] {
    @func_1388() /* ty=Tensor[(12, 16, 4), bool] */
  };
  %663() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_2449() -> (Tensor[(12, 16, 4), float64],) {
  @func_2447() /* ty=(Tensor[(12, 16, 4), float64],) */
}

def @func_4778() -> (Tensor[(12, 16, 4), float32],) {
  @func_4776() /* ty=(Tensor[(12, 16, 4), float32],) */
}

def @func_5917() -> (Tensor[(1404), uint16], Tensor[(288), float64], Tensor[(12, 16, 4), int64], Tensor[(4, 72), float64]) {
  %664 = @func_5038() /* ty=(Tensor[(1404), uint16],) */;
  %665 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %666 = @func_4292() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) */;
  %667 = %666.1;
  %668 = cast(%667, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
  %669 = reshape(%668, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), int64] */;
  %670 = @func_650(%669) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(4, 72), float64], Tensor[(4, 6, 12), uint32]) */;
  %671 = %664.0;
  %672 = %665.1;
  %673 = %670.6;
  (%671, %672, %667, %673)
}

def @func_4776() -> (Tensor[(12, 16, 4), float32],) {
  %674 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
  (%674,)
}

def @func_6459() -> Tensor[(180), float32] {
  %675 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
  %675.2
}

def @func_6048() -> (Tensor[(12, 16, 4), bool],) {
  %677 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %676 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
    (%676,)
  };
  %677() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_560() -> (Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) {
  %678 = cast(meta[relay.Constant][30] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %679 = cast(meta[relay.Constant][30] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %680 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 288), float64] */, dtype="float64") /* ty=Tensor[(1, 288), float64] */;
  %681 = reshape(%678, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %682 = reshape(%679, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %683 = reshape(%680, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %684 = @func_486(%681, %682, %683) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
  %685 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
  %686 = %685.0;
  %687 = cast(meta[relay.Constant][30] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %688 = cast(meta[relay.Constant][30] /* ty=Tensor[(300), int16] */, dtype="int16") /* ty=Tensor[(300), int16] */;
  %689 = %684.2;
  %690 = cast(%689, dtype="float64") /* ty=Tensor[(288), float64] */;
  %691 = reshape(%687, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %692 = reshape(%688, newshape=[10, 15, 2]) /* ty=Tensor[(10, 15, 2), int16] */;
  %693 = reshape(%690, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %694 = @func_486(%691, %692, %693) /* ty=(Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) */;
  %695 = %694.1;
  %696 = cast(%695, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %697 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%686, dtype="uint32") /* ty=Tensor[(12, 16, 4), uint32] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %700 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %701 = add(%698, %699) /* ty=Tensor[(12, 16, 4), uint32] */;
  %702 = %700.0;
  (%689, meta[relay.Constant][30] /* ty=Tensor[(300), int16] */, meta[relay.Constant][31] /* ty=Tensor[(1, 288), float64] */, %701, %702)
}

def @func_3151() -> (Tensor[(12, 16, 4), float32],) {
  @func_3149() /* ty=(Tensor[(12, 16, 4), float32],) */
}

def @func_944() -> Tensor[(12, 16, 4), bool] {
  %704 = fn () -> Tensor[(12, 16, 4), bool] {
    %703 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %703.0
  };
  %704() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_2696(%var_2694: Tensor[(2400), float32], %var_2695: Tensor[(1848), float64]) -> (Tensor[(2400), float32], Tensor[(2400), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) {
  @func_2692(%var_2694, %var_2695) /* ty=(Tensor[(2400), float32], Tensor[(2400), uint64], Tensor[(288), float32], Tensor[(12, 16, 4), bool], Tensor[(1848), float64], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) */
}

def @func_1389() -> Tensor[(12, 16, 4), bool] {
  %705 = fn () -> Tensor[(12, 16, 4), bool] {
    @func_943() /* ty=Tensor[(12, 16, 4), bool] */
  };
  %705() /* ty=Tensor[(12, 16, 4), bool] */
}

def @func_4230() -> (Tensor[(12, 16, 4), bool],) {
  %706 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
  (%706,)
}

def @func_6245() -> (Tensor[(12, 16, 4), bool],) {
  %709 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %707 = @func_6078() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(144, 2), float64]) */;
    %708 = %707.1;
    (%708,)
  };
  %709() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_6592(%var_6515: Tensor[(48, 2), uint64], %var_6517: Tensor[(288), float64], %var_6525: Tensor[(288), float64], %var_6570: Tensor[(288), uint64]) -> (Tensor[(10, 15, 16), float32], Tensor[(48, 2), uint64], Tensor[(90), float32], Tensor[(16, 288), bool], Tensor[(288), uint64]) {
  %710 = @func_1113() /* ty=(Tensor[(16, 288), bool], Tensor[(12, 16, 4), bool]) */;
  %711 = cast(%var_6525, dtype="int64") /* ty=Tensor[(288), int64] */;
  %712 = shape_of(%var_6517, dtype="int32") /* ty=Tensor[(1), int32] */;
  %713 = cast(%var_6517, dtype="int64") /* ty=Tensor[(288), int64] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?), int64] */;
  %715 = left_shift(%713, %714) /* ty=Tensor[(288), int64] */;
  %716 = cast(%var_6515, dtype="uint64") /* ty=Tensor[(48, 2), uint64] */;
  %717 = cast(meta[relay.Constant][32] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %718 = cast(%var_6517, dtype="float64") /* ty=Tensor[(288), float64] */;
  %719 = reshape(%716, newshape=[96]) /* ty=Tensor[(96), uint64] */;
  %720 = reshape(%717, newshape=[3, 30]) /* ty=Tensor[(3, 30), float32] */;
  %721 = reshape(%718, newshape=[24, 12]) /* ty=Tensor[(24, 12), float64] */;
  %722 = @func_6174(%719, %720, %721) /* ty=(Tensor[(180), float32], Tensor[(96), uint64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float32], Tensor[(3, 30), float32], Tensor[(24, 12), float64]) */;
  %723 = %722.6;
  %724 = cast(%723, dtype="uint64") /* ty=Tensor[(24, 12), uint64] */;
  %725 = shape_of(%715, dtype="int32") /* ty=Tensor[(1), int32] */;
  %726 = cast(%715, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %728 = right_shift(%726, %727) /* ty=Tensor[(288), uint64] */;
  %729 = cast(%var_6570, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(1), int32] */;
  %731 = cast(%728, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %733 = @func_5223() /* ty=Tensor[(10, 15, 16), float32] */;
  %734 = %710.0;
  %735 = logical_xor(%731, %732) /* ty=Tensor[(288), uint64] */;
  (%733, %var_6515, meta[relay.Constant][32] /* ty=Tensor[(90), float32] */, %734, %735)
}

def @func_6479() -> Tensor[(10, 15, 16), float32] {
  %737 = fn () -> Tensor[(10, 15, 16), float32] {
    %736 = @func_4563() /* ty=(Tensor[(10, 15, 16), float32], Tensor[(288), float64], Tensor[(2, 48), uint64]) */;
    %736.0
  };
  %737() /* ty=Tensor[(10, 15, 16), float32] */
}

def @func_1546(%var_1520: Tensor[(5, 11, 1), float32], %var_1521: Tensor[(5, 11, 16), float32], %var_1543: Tensor[(300), int16]) -> (Tensor[(5, 11, 16), float32], Tensor[(5, 11, 16), uint32], Tensor[(12, 16, 4), float64], Tensor[(180), float32], Tensor[(288), float64], Tensor[(300), int16]) {
  %738 = cast(%var_1520, dtype="float32") /* ty=Tensor[(5, 11, 1), float32] */;
  %739 = cast(%var_1521, dtype="float32") /* ty=Tensor[(5, 11, 16), float32] */;
  %740 = cast(%var_1520, dtype="uint32") /* ty=Tensor[(5, 11, 1), uint32] */;
  %741 = cast(%var_1521, dtype="uint32") /* ty=Tensor[(5, 11, 16), uint32] */;
  %742 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %743 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %744 = reshape(%742, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %745 = reshape(%743, newshape=[4, 15, 3]) /* ty=Tensor[(4, 15, 3), float32] */;
  %746 = @func_1348(%744, %745) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 15, 3), bool], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64]) */;
  %747 = %746.3;
  %748 = cast(%747, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %749 = cast(%var_1543, dtype="int16") /* ty=Tensor[(300), int16] */;
  %750 = reshape(%748, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), bool] */;
  %751 = reshape(%749, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %752 = @func_996(%750, %751) /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(12, 16, 4), int32], Tensor[(12, 16, 4), int64]) */;
  %753 = power(%738, %739) /* ty=Tensor[(5, 11, 16), float32] */;
  %754 = left_shift(%740, %741) /* ty=Tensor[(5, 11, 16), uint32] */;
  %755 = %752.0;
  (%753, %754, %747, meta[relay.Constant][33] /* ty=Tensor[(180), float32] */, %755, %var_1543)
}

def @func_2213() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) {
  %771 = fn () -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) {
    %756 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
    %757 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %758 = %757.0;
    %759 = cast(%758, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %760 = reshape(%759, newshape=[12, 16, 4]) /* ty=Tensor[(12, 16, 4), float64] */;
    %761 = @func_1639(%760) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) */;
    %762 = cast(%758, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %763 = cast(meta[relay.Constant][34] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %764 = reshape(%763, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %765 = @func_376(%764) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
    %766 = %756.1;
    %767 = %761.0;
    %768 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    %769 = atanh(%762) /* ty=Tensor[(12, 16, 4), float64] */;
    %770 = %765.2;
    (%766, %767, %768, %769, %770, meta[relay.Constant][34] /* ty=Tensor[(288), float64] */)
  };
  %771() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float64], Tensor[(288), float64], Tensor[(288), float64]) */
}

def @func_5353() -> (Tensor[(1, 288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(10, 15, 16), float32]) {
  %772 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
  %773 = cast(meta[relay.Constant][35] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %774 = reshape(%773, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %775 = @func_859(%774) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %776 = %775.0;
  %777 = cast(%776, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %778 = reshape(%777, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %779 = @func_859(%778) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %780 = %772.2;
  %781 = %779.0;
  (%780, %776, meta[relay.Constant][35] /* ty=Tensor[(2400), float32] */, %781)
}

def @func_4868() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) {
  %784 = fn () -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) {
    %782 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
    %783 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
    (%782, %783)
  };
  %784() /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool]) */
}

def @func_486(%var_475: Tensor[(10, 15, 2), int16], %var_476: Tensor[(10, 15, 2), int16], %var_481: Tensor[(288), float64]) -> (Tensor[(10, 15, 2), bool], Tensor[(12, 16, 4), bool], Tensor[(288), float64]) {
  %785 = cast(%var_476, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
  %786 = shape_of(%var_475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_475, dtype="bool") /* ty=Tensor[(10, 15, 2), bool] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %789 = cast(%var_481, dtype="float64") /* ty=Tensor[(288), float64] */;
  %790 = reshape(%789, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %791 = @func_376(%790) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */;
  %792 = less_equal(%787, %788) /* ty=Tensor[(10, 15, 2), bool] */;
  %793 = %791.0;
  (%792, %793, %var_481)
}

def @main(%var_6640: Tensor[(11, 11, 4), bool], %var_6641: Tensor[(11, 11, 4), bool], %var_6654: Tensor[(11, 11, 4), bool], %var_6664: Tensor[(11, 11, 4), uint64]) -> (Tensor[(11, 11, 4), bool],) {
  %794 = cast(%var_6641, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %795 = shape_of(%var_6640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%var_6640, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %798 = logical_and(%796, %797) /* ty=Tensor[(11, 11, 4), bool] */;
  %799 = cast(%var_6654, dtype="uint64") /* ty=Tensor[(11, 11, 4), uint64] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="uint64") /* ty=Tensor[(11, 11, 4), uint64] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %803 = right_shift(%801, %802) /* ty=Tensor[(11, 11, 4), uint64] */;
  %804 = cast(%var_6664, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="bool") /* ty=Tensor[(11, 11, 4), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = not_equal(%806, %807) /* ty=Tensor[(11, 11, 4), bool] */;
  (%808,)
}

def @func_340() -> (Tensor[(12, 16, 4), bool],) {
  %816 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %809 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
    %810 = %809.1;
    %811 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 16, 4), int64] */, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
    %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
    %813 = cast(%810, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
    %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %815 = greater(%813, %814) /* ty=Tensor[(12, 16, 4), bool] */;
    (%815,)
  };
  %816() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_4524(%var_4506: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(55), float32], Tensor[(880), float32], Tensor[(300), int16], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) {
  %817 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %818 = cast(meta[relay.Constant][37] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %819 = cast(meta[relay.Constant][38] /* ty=Tensor[(880), float32] */, dtype="float32") /* ty=Tensor[(880), float32] */;
  %820 = cast(%var_4506, dtype="int16") /* ty=Tensor[(300), int16] */;
  %821 = reshape(%818, newshape=[5, 11, 1]) /* ty=Tensor[(5, 11, 1), float32] */;
  %822 = reshape(%819, newshape=[5, 11, 16]) /* ty=Tensor[(5, 11, 16), float32] */;
  %823 = reshape(%820, newshape=[300]) /* ty=Tensor[(300), int16] */;
  %824 = @func_1546(%821, %822, %823) /* ty=(Tensor[(5, 11, 16), float32], Tensor[(5, 11, 16), uint32], Tensor[(12, 16, 4), float64], Tensor[(180), float32], Tensor[(288), float64], Tensor[(300), int16]) */;
  %825 = cast(meta[relay.Constant][39] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %826 = reshape(%825, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float64] */;
  %827 = @func_397(%826) /* ty=(Tensor[(13, 9, 12), float64],) */;
  %828 = %817.0;
  %829 = %824.4;
  %830 = %827.0;
  (%828, %829, meta[relay.Constant][37] /* ty=Tensor[(55), float32] */, meta[relay.Constant][38] /* ty=Tensor[(880), float32] */, %var_4506, %830, meta[relay.Constant][39] /* ty=Tensor[(1404), float64] */)
}

def @func_2405(%var_2403: Tensor[(12, 16, 4), float32]) -> (Tensor[(12, 16, 4), int32],) {
  @func_2402(%var_2403) /* ty=(Tensor[(12, 16, 4), int32],) */
}

def @func_376(%var_370: Tensor[(288), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) {
  %831 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %832 = cast(%var_370, dtype="float64") /* ty=Tensor[(288), float64] */;
  %833 = cast(%var_370, dtype="float64") /* ty=Tensor[(288), float64] */;
  %834 = reshape(%832, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %835 = reshape(%833, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float64] */;
  %836 = %831.0;
  %837 = @func_64(%834, %835) /* ty=Tensor[(4, 6, 12), uint32] */;
  (%836, %837, %var_370)
}

def @func_2967() -> Tensor[(12, 16, 4), float32] {
  %839 = fn () -> Tensor[(12, 16, 4), float32] {
    %838 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
    %838.1
  };
  %839() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_6201() -> Tensor[(12, 16, 4), float32] {
  @func_6087() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_2767(%var_2754: Tensor[(12, 16, 4), bool]) -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) {
  %840 = @func_2079() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */;
  %841 = %840.0;
  %842 = cast(%var_2754, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(%841, dtype="bool") /* ty=Tensor[(12, 16, 4), bool] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %846 = @func_943() /* ty=Tensor[(12, 16, 4), bool] */;
  %847 = equal(%844, %845) /* ty=Tensor[(12, 16, 4), bool] */;
  (%846, %847)
}

def @func_6485() -> (Tensor[(12, 16, 4), bool],) {
  %849 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %848 = @func_2304() /* ty=Tensor[(12, 16, 4), bool] */;
    (%848,)
  };
  %849() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_287() -> (Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) {
  @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */
}

def @func_379(%var_377: Tensor[(288), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) {
  @func_376(%var_377) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint32], Tensor[(288), float64]) */
}

def @func_3175(%var_3174: Tensor[(1, 1848), float64]) -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(1, 1848), float64]) {
  %856 = fn (%var_3166: Tensor[(1, 1848), float64]) -> (Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(1, 1848), float64]) {
    %850 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
    %851 = cast(%var_3166, dtype="float64") /* ty=Tensor[(1, 1848), float64] */;
    %852 = reshape(%851, newshape=[84, 22]) /* ty=Tensor[(84, 22), float64] */;
    %853 = @func_1230(%852) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 14, 11), float64], Tensor[(84, 22), float64]) */;
    %854 = %850.1;
    %855 = %853.0;
    (%854, %855, %var_3166)
  };
  %856(%var_3174) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), bool], Tensor[(1, 1848), float64]) */
}

def @func_4368() -> (Tensor[(12, 16, 4), bool],) {
  %859 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %857 = @func_3138() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(180), float32], Tensor[(12, 16, 4), bool]) */;
    %858 = %857.0;
    (%858,)
  };
  %859() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_5292(%var_5290: Tensor[(13, 2, 12), float32], %var_5291: Tensor[(1404), float64]) -> (Tensor[(12, 16, 4), float32], Tensor[(13, 2, 12), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint16], Tensor[(288), float64], Tensor[(1404), float64]) {
  %880 = fn (%var_5232: Tensor[(13, 2, 12), float32], %var_5271: Tensor[(1404), float64]) -> (Tensor[(12, 16, 4), float32], Tensor[(13, 2, 12), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint16], Tensor[(288), float64], Tensor[(1404), float64]) {
    %860 = cast(%var_5232, dtype="float32") /* ty=Tensor[(13, 2, 12), float32] */;
    %861 = tan(%860) /* ty=Tensor[(13, 2, 12), float32] */;
    %862 = cast(%var_5232, dtype="int16") /* ty=Tensor[(13, 2, 12), int16] */;
    %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
    %864 = cast(%861, dtype="int16") /* ty=Tensor[(13, 2, 12), int16] */;
    %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %866 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %867 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %868 = cast(meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %869 = cast(%var_5271, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %870 = cast(meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %871 = reshape(%868, newshape=[288]) /* ty=Tensor[(288), float64] */;
    %872 = reshape(%869, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %873 = reshape(%870, newshape=[4, 6, 12]) /* ty=Tensor[(4, 6, 12), float32] */;
    %874 = @func_2870(%871, %872, %873) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(12, 16, 4), float32], Tensor[(1404), float64], Tensor[(12, 16, 4), float32], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), uint16], Tensor[(4, 6, 12), float32], Tensor[(4, 6, 12), float32]) */;
    %875 = @func_2966() /* ty=Tensor[(12, 16, 4), float32] */;
    %876 = subtract(%864, %865) /* ty=Tensor[(13, 2, 12), int16] */;
    %877 = %866.0;
    %878 = %867.0;
    %879 = %874.6;
    (%875, %876, %877, %878, %879, meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, %var_5271)
  };
  %880(%var_5290, %var_5291) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(13, 2, 12), int16], Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(4, 6, 12), uint16], Tensor[(288), float64], Tensor[(1404), float64]) */
}

def @func_2939(%var_2938: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float64], Tensor[(12, 16, 4), bool], Tensor[(1404), float64]) {
  %892 = fn (%var_2921: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float64], Tensor[(12, 16, 4), bool], Tensor[(1404), float64]) {
    %881 = @func_2112() /* ty=(Tensor[(10, 15, 16), float32],) */;
    %882 = %881.0;
    %883 = cast(%var_2921, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
    %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
    %885 = cast(%882, dtype="float64") /* ty=Tensor[(10, 15, 16), float64] */;
    %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %887 = cast(meta[relay.Constant][41] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %888 = reshape(%887, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %889 = @func_1077(%888) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(13, 9, 12), float64], Tensor[(1404), uint16], Tensor[(12, 16, 4), bool]) */;
    %890 = floor_divide(%885, %886) /* ty=Tensor[(10, 15, 16), float64] */;
    %891 = %889.0;
    (%890, %891, meta[relay.Constant][41] /* ty=Tensor[(1404), float64] */)
  };
  %892(%var_2938) /* ty=(Tensor[(10, 15, 16), float64], Tensor[(12, 16, 4), bool], Tensor[(1404), float64]) */
}

def @func_1114() -> (Tensor[(16, 288), bool], Tensor[(12, 16, 4), bool]) {
  %900 = fn () -> (Tensor[(16, 288), bool], Tensor[(12, 16, 4), bool]) {
    %893 = @func_560() /* ty=(Tensor[(288), float64], Tensor[(300), int16], Tensor[(1, 288), float64], Tensor[(12, 16, 4), uint32], Tensor[(12, 16, 4), bool]) */;
    %894 = %893.2;
    %895 = cast(%894, dtype="bool") /* ty=Tensor[(1, 288), bool] */;
    %896 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 288), float64] */, dtype="bool") /* ty=Tensor[(16, 288), bool] */;
    %897 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %898 = greater(%895, %896) /* ty=Tensor[(16, 288), bool] */;
    %899 = %897.0;
    (%898, %899)
  };
  %900() /* ty=(Tensor[(16, 288), bool], Tensor[(12, 16, 4), bool]) */
}

def @func_1641(%var_1640: Tensor[(12, 16, 4), float64]) -> (Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) {
  %911 = fn (%var_1617: Tensor[(12, 16, 4), float64]) -> (Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) {
    %901 = @func_1388() /* ty=Tensor[(12, 16, 4), bool] */;
    %902 = cast(%901, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %903 = sigmoid(%902) /* ty=Tensor[(12, 16, 4), float64] */;
    %904 = cast(%var_1617, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(3), int32] */;
    %906 = cast(%903, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %908 = cast(%903, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
    %909 = divide(%906, %907) /* ty=Tensor[(12, 16, 4), float64] */;
    %910 = log(%908) /* ty=Tensor[(12, 16, 4), float64] */;
    (%909, %910)
  };
  %911(%var_1640) /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), float64]) */
}

def @func_2447() -> (Tensor[(12, 16, 4), float64],) {
  %912 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %913 = %912.0;
  %914 = cast(%913, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  %915 = sinh(%914) /* ty=Tensor[(12, 16, 4), float64] */;
  (%915,)
}

def @func_5863() -> (Tensor[(12, 16, 4), bool],) {
  %918 = fn () -> (Tensor[(12, 16, 4), bool],) {
    %916 = @func_4312() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %917 = %916.0;
    (%917,)
  };
  %918() /* ty=(Tensor[(12, 16, 4), bool],) */
}

def @func_6304() -> Tensor[(10, 15, 16), float32] {
  @func_6302() /* ty=Tensor[(10, 15, 16), float32] */
}

def @func_4128() -> (Tensor[(12, 16, 4), float64],) {
  %919 = @func_2447() /* ty=(Tensor[(12, 16, 4), float64],) */;
  %920 = %919.0;
  (%920,)
}

def @func_5770() -> Tensor[(12, 16, 4), bool] {
  %921 = @func_467() /* ty=(Tensor[(12, 16, 4), bool],) */;
  %921.0
}

def @func_6447(%var_6445: Tensor[(2112), float64]) -> (Tensor[(12, 16, 4), bool], Tensor[(11, 16, 12), float64], Tensor[(2112), float64], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64]) {
  @func_6444(%var_6445) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(11, 16, 12), float64], Tensor[(2112), float64], Tensor[(12, 16, 4), float32], Tensor[(12, 16, 4), float64]) */
}

def @func_4695() -> (Tensor[(12, 16, 4), float32], Tensor[(12, 14, 11), float64], Tensor[(1848), float64]) {
  %922 = @func_1272() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32]) */;
  %923 = cast(meta[relay.Constant][43] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %924 = cast(meta[relay.Constant][43] /* ty=Tensor[(1848), float64] */, dtype="float64") /* ty=Tensor[(1848), float64] */;
  %925 = reshape(%923, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %926 = reshape(%924, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float64] */;
  %927 = @func_256(%925, %926) /* ty=(Tensor[(12, 14, 11), float64],) */;
  %928 = %922.1;
  %929 = %927.0;
  (%928, %929, meta[relay.Constant][43] /* ty=Tensor[(1848), float64] */)
}

def @func_5823(%var_5822: Tensor[(12, 4), float32]) -> (Tensor[(12, 4), float32], Tensor[(12, 16, 4), bool]) {
  %934 = fn (%var_5787: Tensor[(12, 4), float32]) -> (Tensor[(12, 4), float32], Tensor[(12, 16, 4), bool]) {
    %930 = cast(%var_5787, dtype="float32") /* ty=Tensor[(12, 4), float32] */;
    %931 = @func_4193() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(1404), uint16], Tensor[(1404), float64], Tensor[(12, 16, 4), float32]) */;
    %932 = acos(%930) /* ty=Tensor[(12, 4), float32] */;
    %933 = %931.0;
    (%932, %933)
  };
  %934(%var_5822) /* ty=(Tensor[(12, 4), float32], Tensor[(12, 16, 4), bool]) */
}

def @func_2080() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) {
  %939 = fn () -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) {
    %935 = @func_1586() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %936 = @func_339() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %937 = %935.0;
    %938 = %936.0;
    (%937, %938)
  };
  %939() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool]) */
}

def @func_67(%var_65: Tensor[(4, 6, 12), float64], %var_66: Tensor[(4, 6, 12), float64]) -> Tensor[(4, 6, 12), uint32] {
  %949 = fn (%var_21: Tensor[(4, 6, 12), float64], %var_22: Tensor[(4, 6, 12), float64]) -> Tensor[(4, 6, 12), uint32] {
    %940 = cast(%var_22, dtype="float64") /* ty=Tensor[(4, 6, 12), float64] */;
    %941 = shape_of(%var_21, dtype="int32") /* ty=Tensor[(3), int32] */;
    %942 = cast(%var_21, dtype="float64") /* ty=Tensor[(4, 6, 12), float64] */;
    %943 = dyn.reshape(%940, %941, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %944 = floor_divide(%942, %943) /* ty=Tensor[(4, 6, 12), float64] */;
    %945 = cast(%var_22, dtype="uint32") /* ty=Tensor[(4, 6, 12), uint32] */;
    %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
    %947 = cast(%944, dtype="uint32") /* ty=Tensor[(4, 6, 12), uint32] */;
    %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%947, %948) /* ty=Tensor[(4, 6, 12), uint32] */
  };
  %949(%var_65, %var_66) /* ty=Tensor[(4, 6, 12), uint32] */
}

def @func_4527(%var_4525: Tensor[(300), int16]) -> (Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(55), float32], Tensor[(880), float32], Tensor[(300), int16], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) {
  @func_4524(%var_4525) /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(55), float32], Tensor[(880), float32], Tensor[(300), int16], Tensor[(13, 9, 12), float64], Tensor[(1404), float64]) */
}

def @func_3910() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) {
  %956 = fn () -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) {
    %950 = @func_2314() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %951 = cast(meta[relay.Constant][44] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %952 = reshape(%951, newshape=[2400]) /* ty=Tensor[(2400), float32] */;
    %953 = @func_3468(%952) /* ty=(Tensor[(12, 16, 4), float32], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
    %954 = %950.0;
    %955 = %953.0;
    (%954, %955, meta[relay.Constant][44] /* ty=Tensor[(2400), float32] */)
  };
  %956() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), float32], Tensor[(2400), float32]) */
}

def @func_6080() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(144, 2), float64]) {
  @func_6078() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), bool], Tensor[(144, 2), float64]) */
}

def @func_4954() -> Tensor[(12, 16, 4), float64] {
  %957 = @func_2355() /* ty=Tensor[(12, 16, 4), float32] */;
  %958 = cast(%957, dtype="float64") /* ty=Tensor[(12, 16, 4), float64] */;
  acos(%958) /* ty=Tensor[(12, 16, 4), float64] */
}

def @func_6351(%var_6350: Tensor[(12, 16, 4), float32]) -> (Tensor[(12, 16, 4), int64], Tensor[(12, 16, 4), bool], Tensor[(2400), float32]) {
  %970 = fn (%var_6328: Tensor[(12, 16, 4), float32]) -> (Tensor[(12, 16, 4), int64], Tensor[(12, 16, 4), bool], Tensor[(2400), float32]) {
    %959 = @func_4776() /* ty=(Tensor[(12, 16, 4), float32],) */;
    %960 = %959.0;
    %961 = cast(%var_6328, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
    %962 = shape_of(%960, dtype="int32") /* ty=Tensor[(3), int32] */;
    %963 = cast(%960, dtype="int64") /* ty=Tensor[(12, 16, 4), int64] */;
    %964 = dyn.reshape(%961, %962, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %965 = cast(meta[relay.Constant][45] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %966 = reshape(%965, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
    %967 = @func_2937(%966) /* ty=(Tensor[(10, 15, 16), float64], Tensor[(12, 16, 4), bool], Tensor[(1404), float64]) */;
    %968 = left_shift(%963, %964) /* ty=Tensor[(12, 16, 4), int64] */;
    %969 = %967.1;
    (%968, %969, meta[relay.Constant][45] /* ty=Tensor[(2400), float32] */)
  };
  %970(%var_6350) /* ty=(Tensor[(12, 16, 4), int64], Tensor[(12, 16, 4), bool], Tensor[(2400), float32]) */
}

def @func_2112() -> (Tensor[(10, 15, 16), float32],) {
  %971 = @func_1172() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(288), float64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32]) */;
  %972 = %971.2;
  (%972,)
}

def @func_4293() -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) {
  %977 = fn () -> (Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) {
    %973 = @func_4230() /* ty=(Tensor[(12, 16, 4), bool],) */;
    %974 = @func_285() /* ty=(Tensor[(12, 16, 4), float64], Tensor[(12, 16, 4), int64]) */;
    %975 = %973.0;
    %976 = %974.1;
    (%975, %976)
  };
  %977() /* ty=(Tensor[(12, 16, 4), bool], Tensor[(12, 16, 4), int64]) */
}

def @func_6203() -> Tensor[(12, 16, 4), float32] {
  @func_6201() /* ty=Tensor[(12, 16, 4), float32] */
}

def @func_2402(%var_2386: Tensor[(12, 16, 4), float32]) -> (Tensor[(12, 16, 4), int32],) {
  %978 = @func_2256() /* ty=(Tensor[(288), float64], Tensor[(12, 16, 4), float32]) */;
  %979 = %978.1;
  %980 = cast(%var_2386, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %981 = shape_of(%979, dtype="int32") /* ty=Tensor[(3), int32] */;
  %982 = cast(%979, dtype="int32") /* ty=Tensor[(12, 16, 4), int32] */;
  %983 = dyn.reshape(%980, %981, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %984 = bitwise_or(%982, %983) /* ty=Tensor[(12, 16, 4), int32] */;
  (%984,)
}

def @func_3149() -> (Tensor[(12, 16, 4), float32],) {
  %985 = @func_2966() /* ty=Tensor[(12, 16, 4), float32] */;
  (%985,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen84/build/output.py:2340: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen84/build/output.py", line 2345, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(484) tvmgen_default_fused_reshape_logical_and_cast_cast_reshape_right_shift_cast_cast_reshape_not_eq_6234062514301642753__kernel0(signed char* __restrict__ T_not_equal, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1, signed char* __restrict__ placeholder2, uint64_t* __restrict__ placeholder3) {
  T_not_equal[(((int)threadIdx.x))] = ((signed char)(((bool)(((uint64_t)(((bool)placeholder[(((int)threadIdx.x))]) && ((bool)placeholder1[(((int)threadIdx.x))]))) >> ((uint64_t)((bool)placeholder2[(((int)threadIdx.x))])))) != ((bool)placeholder3[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

