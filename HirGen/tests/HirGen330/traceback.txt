==========mod==========
#[version = "0.0.5"]
def @func_2172(%var_2154: Tensor[(4, 15, 13), float32]) -> Tensor[(4, 15, 13), float32] {
  %0 = cast(%var_2154, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
  sin(%0) /* ty=Tensor[(4, 15, 13), float32] */
}

def @func_6630(%var_6605: Tensor[(11, 6, 11), float64], %var_6623: uint32) -> (Tensor[(11, 6, 11), float64], Tensor[(4, 5, 8), uint32], uint32, Tensor[(160), uint32]) {
  %1 = cast(%var_6605, dtype="float64") /* ty=Tensor[(11, 6, 11), float64] */;
  %2 = cast(%var_6623, dtype="uint32") /* ty=uint32 */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(160), uint32] */, dtype="uint32") /* ty=Tensor[(160), uint32] */;
  %4 = reshape(%2, newshape=[]) /* ty=uint32 */;
  %5 = reshape(%3, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint32] */;
  %6 = @func_5274(%4, %5) /* ty=(Tensor[(4, 5, 8), uint32],) */;
  %7 = sqrt(%1) /* ty=Tensor[(11, 6, 11), float64] */;
  %8 = %6.0;
  (%7, %8, %var_6623, meta[relay.Constant][0] /* ty=Tensor[(160), uint32] */)
}

def @func_8843(%var_8802: Tensor[(780), float32], %var_8815: Tensor[(2816), int8], %var_8826: Tensor[(45), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(5, 30), float64], Tensor[(39, 4), float64], Tensor[(15, 4, 8), float32], Tensor[(45), float64], Tensor[(4, 15, 13), float64]) {
  %9 = cast(%var_8815, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %10 = cast(%var_8815, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 30), float64] */, dtype="float64") /* ty=Tensor[(5, 30), float64] */;
  %13 = cast(meta[relay.Constant][3] /* ty=Tensor[(39, 4), float64] */, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %14 = reshape(%9, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %15 = reshape(%10, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %16 = reshape(%11, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
  %17 = reshape(%12, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %18 = reshape(%13, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %19 = @func_3617(%14, %15, %16, %17, %18) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
  %20 = cast(%var_8826, dtype="float64") /* ty=Tensor[(45), float64] */;
  %21 = reshape(%20, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
  %22 = @func_6527(%21) /* ty=(Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) */;
  %23 = cast(%var_8802, dtype="float32") /* ty=Tensor[(780), float32] */;
  %24 = reshape(%23, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
  %25 = @func_2172(%24) /* ty=Tensor[(4, 15, 13), float32] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
  %27 = asinh(%26) /* ty=Tensor[(4, 15, 13), float32] */;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(4, 15, 13), float64] */;
  %29 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %30 = %19.3;
  %31 = %22.0;
  %32 = cos(%28) /* ty=Tensor[(4, 15, 13), float64] */;
  (%29, %var_8802, %30, %var_8815, meta[relay.Constant][1] /* ty=Tensor[(360), bool] */, meta[relay.Constant][2] /* ty=Tensor[(5, 30), float64] */, meta[relay.Constant][3] /* ty=Tensor[(39, 4), float64] */, %31, %var_8826, %32)
}

def @func_6013(%var_5997: Tensor[(7, 10, 11), float32], %var_6008: Tensor[(360), float64]) -> (Tensor[(7, 10, 11), float32], Tensor[(3, 9, 5), float32], Tensor[(135), float32], Tensor[(360), float64]) {
  %33 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %34 = shape_of(%var_5997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_5997, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %37 = cast(meta[relay.Constant][5] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %38 = cast(%var_6008, dtype="float64") /* ty=Tensor[(360), float64] */;
  %39 = reshape(%37, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
  %40 = reshape(%38, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %41 = @func_1602(%39, %40) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
  %42 = floor_divide(%35, %36) /* ty=Tensor[(7, 10, 11), float32] */;
  %43 = %41.0;
  (%42, %43, meta[relay.Constant][5] /* ty=Tensor[(135), float32] */, %var_6008)
}

def @func_10575() -> Tensor[(16, 3, 16), float32] {
  @func_10107() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_8566() -> Tensor[(16, 3, 16), float32] {
  @func_8006() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_10596(%var_10589: Tensor[(12, 15, 2), uint64], %var_10590: Tensor[(12, 15, 2), uint64]) -> (Tensor[(12, 15, 2), uint64],) {
  %44 = cast(%var_10590, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
  %45 = shape_of(%var_10589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_10589, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %48 = right_shift(%46, %47) /* ty=Tensor[(12, 15, 2), uint64] */;
  (%48,)
}

def @func_5417(%var_5412: Tensor[(15, 4, 8), float32]) -> (Tensor[(15, 4, 8), float32],) {
  %49 = cast(%var_5412, dtype="float32") /* ty=Tensor[(15, 4, 8), float32] */;
  %50 = log10(%49) /* ty=Tensor[(15, 4, 8), float32] */;
  (%50,)
}

def @func_11092(%var_11083: Tensor[(726), float64], %var_11084: uint32) -> (Tensor[(360), float64], Tensor[(726, 1), float64], Tensor[(726), float64], uint32) {
  %51 = cast(%var_11083, dtype="float64") /* ty=Tensor[(726), float64] */;
  %52 = cast(%var_11084, dtype="uint32") /* ty=uint32 */;
  %53 = reshape(%51, newshape=[726, 1]) /* ty=Tensor[(726, 1), float64] */;
  %54 = reshape(%52, newshape=[]) /* ty=uint32 */;
  %55 = @func_9297(%53, %54) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) */;
  %56 = @func_10432() /* ty=Tensor[(360), float64] */;
  %57 = %55.2;
  (%56, %57, %var_11083, %var_11084)
}

def @func_10968(%var_10963: Tensor[(9, 13, 11), uint16]) -> (Tensor[(9, 13, 11), bool],) {
  %58 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 13, 11), uint16] */, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
  %59 = shape_of(%var_10963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_10963, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %62 = greater_equal(%60, %61) /* ty=Tensor[(9, 13, 11), bool] */;
  (%62,)
}

def @func_11962() -> (Tensor[(16, 3, 16), float32],) {
  %63 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
  (%63,)
}

def @func_12205() -> (Tensor[(16, 3, 16), float32],) {
  %64 = @func_8006() /* ty=Tensor[(16, 3, 16), float32] */;
  (%64,)
}

def @func_10402() -> (Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) {
  %65 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %67 = cast(meta[relay.Constant][7] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %68 = reshape(%67, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
  %69 = @func_4713(%68) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
  %70 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %71 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %72 = reshape(%70, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %73 = reshape(%71, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %74 = @func_2429(%72, %73) /* ty=(Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) */;
  %75 = cast(meta[relay.Constant][9] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %76 = reshape(%75, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), float32] */;
  %77 = @func_4204(%76) /* ty=(Tensor[(15, 6, 15), float32],) */;
  %78 = rsqrt(%66) /* ty=Tensor[(16, 3, 16), float64] */;
  %79 = %69.0;
  %80 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
  %81 = %74.1;
  %82 = %77.0;
  (%78, %79, meta[relay.Constant][7] /* ty=Tensor[(50, 6), float32] */, %80, %81, meta[relay.Constant][8] /* ty=Tensor[(360), float64] */, %82, meta[relay.Constant][9] /* ty=Tensor[(1350), float32] */)
}

def @func_2429(%var_2419: Tensor[(8, 3, 15), float64], %var_2420: Tensor[(8, 3, 15), float64]) -> (Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) {
  %83 = cast(%var_2420, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
  %84 = reshape(%83, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %85 = @func_689(%84) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %86 = cast(%var_2420, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
  %87 = shape_of(%var_2419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_2419, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %90 = divide(%88, %89) /* ty=Tensor[(8, 3, 15), float64] */;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(8, 3, 15), float32] */;
  %92 = %85.7;
  %93 = exp(%91) /* ty=Tensor[(8, 3, 15), float32] */;
  (%92, %93)
}

def @func_10634(%var_10621: Tensor[(5, 33), int64]) -> Tensor[(5, 33), bool] {
  %94 = @func_9177() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
  %95 = %94.3;
  %96 = cast(%var_10621, dtype="bool") /* ty=Tensor[(5, 33), bool] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(2), int32] */;
  %98 = cast(%95, dtype="bool") /* ty=Tensor[(5, 33), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  equal(%98, %99) /* ty=Tensor[(5, 33), bool] */
}

def @func_8476(%var_8396: Tensor[(42), uint32], %var_8406: Tensor[(360), float64]) -> (Tensor[(480), float32], Tensor[(33), float64], Tensor[(13, 4, 3), uint16], Tensor[(135), float32], Tensor[(360), float64], Tensor[(480), float32], Tensor[(33, ?), bool], Tensor[(33, 42), uint16], Tensor[(14, ?, 3), bool]) {
  %100 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %101 = cast(meta[relay.Constant][11] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %102 = cast(%var_8406, dtype="float64") /* ty=Tensor[(360), float64] */;
  %103 = reshape(%101, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
  %104 = reshape(%102, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %105 = @func_1602(%103, %104) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
  %106 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %107 = cast(%var_8396, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %108 = cast(meta[relay.Constant][10] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %109 = reshape(%107, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %110 = reshape(%108, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %111 = @func_3351(%109, %110) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %112 = %111.2;
  %113 = cast(meta[relay.Constant][12] /* ty=Tensor[(33, 1), float64] */, dtype="bool") /* ty=Tensor[(33, 1), bool] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(2), int32] */;
  %115 = cast(%112, dtype="bool") /* ty=Tensor[(33, 1), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %117 = cast(%var_8396, dtype="uint16") /* ty=Tensor[(42), uint16] */;
  %118 = cast(meta[relay.Constant][12] /* ty=Tensor[(33, 1), float64] */, dtype="uint16") /* ty=Tensor[(33, 1), uint16] */;
  %119 = cast(%var_8396, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %120 = cast(meta[relay.Constant][12] /* ty=Tensor[(33, 1), float64] */, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
  %121 = reshape(%119, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %122 = reshape(%120, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %123 = @func_3351(%121, %122) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %124 = %100.0;
  %125 = %105.1;
  %126 = %106.0;
  %127 = equal(%115, %116) /* ty=Tensor[(33, ?), bool] */;
  %128 = add(%117, %118) /* ty=Tensor[(33, 42), uint16] */;
  %129 = %123.0;
  (%124, meta[relay.Constant][10] /* ty=Tensor[(33), float64] */, %125, meta[relay.Constant][11] /* ty=Tensor[(135), float32] */, %var_8406, %126, %127, %128, %129)
}

def @func_12061(%var_12058: Tensor[(10, 15, 4), float32]) -> Tensor[(10, 15, 4), float32] {
  %130 = cast(%var_12058, dtype="float32") /* ty=Tensor[(10, 15, 4), float32] */;
  log2(%130) /* ty=Tensor[(10, 15, 4), float32] */
}

def @func_7501() -> (Tensor[(16, 3, 16), float32],) {
  %131 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %132 = asinh(%131) /* ty=Tensor[(16, 3, 16), float32] */;
  (%132,)
}

def @func_4621(%var_4580: Tensor[(13, 10, 10), float32]) -> (Tensor[(13, 10, 10), float32], Tensor[(9, 4, 8), float64], Tensor[(288), float64]) {
  %133 = cast(%var_4580, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %134 = cast(meta[relay.Constant][14] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %135 = reshape(%134, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float64] */;
  %136 = @func_3266(%135) /* ty=(Tensor[(9, 4, 8), float64],) */;
  %137 = atanh(%133) /* ty=Tensor[(13, 10, 10), float32] */;
  %138 = %136.0;
  (%137, %138, meta[relay.Constant][14] /* ty=Tensor[(288), float64] */)
}

def @func_8908(%var_8903: float32) -> Tensor[(6, 16, 2), float32] {
  %139 = cast(%var_8903, dtype="float32") /* ty=float32 */;
  %140 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
  mod(%139, %140) /* ty=Tensor[(6, 16, 2), float32] */
}

def @func_10416() -> Tensor[(16, 3, 16), float32] {
  %141 = @func_10037() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %141.0
}

def @func_8284() -> (Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) {
  %142 = @func_8188() /* ty=(Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) */;
  %143 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %144 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 33), int64] */, dtype="int64") /* ty=Tensor[(1, 33), int64] */;
  %145 = cast(meta[relay.Constant][17] /* ty=Tensor[(99, 3), int64] */, dtype="int64") /* ty=Tensor[(99, 3), int64] */;
  %146 = reshape(%144, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
  %147 = reshape(%145, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
  %148 = @func_321(%146, %147) /* ty=(Tensor[(3, 9, 11), float64],) */;
  %149 = %142.2;
  %150 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
  %151 = %143.0;
  %152 = %148.0;
  (%149, %150, %151, %152, meta[relay.Constant][16] /* ty=Tensor[(1, 33), int64] */, meta[relay.Constant][17] /* ty=Tensor[(99, 3), int64] */)
}

def @func_11377() -> Tensor[(?, 33), uint16] {
  %153 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %154 = %153.4;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(1, 33), float64] */;
  %156 = atan(%155) /* ty=Tensor[(1, 33), float64] */;
  %157 = cast(%154, dtype="uint16") /* ty=Tensor[(1, 33), uint16] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(2), int32] */;
  %159 = cast(%156, dtype="uint16") /* ty=Tensor[(1, 33), uint16] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  right_shift(%159, %160) /* ty=Tensor[(?, 33), uint16] */
}

def @func_9269(%var_9265: Tensor[(5, 12, 4), float64]) -> (Tensor[(5, 12, 4), float64],) {
  %161 = cast(%var_9265, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
  %162 = atanh(%161) /* ty=Tensor[(5, 12, 4), float64] */;
  (%162,)
}

def @func_12138(%var_12096: Tensor[(16, 3, 16), float32]) -> (Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(16, 3, 16), float32]) {
  %163 = @func_11859() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */;
  %164 = %163.2;
  %165 = cast(%var_12096, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %169 = @func_11349() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */;
  %170 = minimum(%167, %168) /* ty=Tensor[(16, 3, 16), int8] */;
  %171 = @func_10995() /* ty=Tensor[(16, 3, 16), float32] */;
  %172 = @func_10432() /* ty=Tensor[(360), float64] */;
  %173 = %169.0;
  (%170, %171, %172, %173)
}

def @func_12336() -> Tensor[(16, 3, 16), float32] {
  @func_9336() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_7664(%var_7633: Tensor[(66), float32]) -> (Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float64]) {
  %174 = cast(%var_7633, dtype="float32") /* ty=Tensor[(66), float32] */;
  %175 = reshape(%174, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
  %176 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %177 = cast(8.95901f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %178 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %179 = reshape(%177, newshape=[]) /* ty=float32 */;
  %180 = reshape(%178, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %181 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %184 = log10(%183) /* ty=Tensor[(16, 3, 16), float32] */;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %186 = @func_5750(%175) /* ty=Tensor[(6, 11, ?), uint16] */;
  %187 = %176.0;
  %188 = @func_2598(%179, %180) /* ty=Tensor[(4, 12, 5), float32] */;
  %189 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
  %190 = atanh(%185) /* ty=Tensor[(16, 3, 16), float64] */;
  (%186, %var_7633, %187, %188, 8.95901f /* ty=float32 */, meta[relay.Constant][18] /* ty=Tensor[(240), float32] */, %189, %190)
}

def @func_11349() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %191 = @func_10455() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %192 = @func_9440() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %193 = %191.0;
  %194 = %192.0;
  (%193, %194)
}

def @func_11665(%var_11655: Tensor[(156), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64]) {
  %195 = cast(meta[relay.Constant][19] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %196 = cast(%var_11655, dtype="float64") /* ty=Tensor[(156), float64] */;
  %197 = reshape(%195, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %198 = reshape(%196, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %199 = @func_554(%197, %198) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %200 = @func_10107() /* ty=Tensor[(16, 3, 16), float32] */;
  %201 = %199.2;
  (%200, %201, meta[relay.Constant][19] /* ty=Tensor[(150), float64] */, %var_11655)
}

def @func_9098(%var_9071: Tensor[(5, 33), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 33), int64]) {
  %202 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %203 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %204 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %205 = %204.4;
  %206 = cast(%205, dtype="int32") /* ty=Tensor[(1, 33), int32] */;
  %207 = cast(%var_9071, dtype="int32") /* ty=Tensor[(5, 33), int32] */;
  %208 = maximum(%206, %207) /* ty=Tensor[(5, 33), int32] */;
  %209 = cast(%208, dtype="float32") /* ty=Tensor[(5, 33), float32] */;
  %210 = log10(%209) /* ty=Tensor[(5, 33), float32] */;
  %211 = cast(%208, dtype="int64") /* ty=Tensor[(5, 33), int64] */;
  %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(2), int32] */;
  %213 = cast(%210, dtype="int64") /* ty=Tensor[(5, 33), int64] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %215 = %202.0;
  %216 = %203.0;
  %217 = right_shift(%213, %214) /* ty=Tensor[(5, 33), int64] */;
  (%215, %216, %217)
}

def @func_8667(%var_8652: Tensor[(16, 3, 16), bool], %var_8663: Tensor[(300), float32]) -> (Tensor[(16, 3, 16), bool], Tensor[(360), float64], Tensor[(300), float32]) {
  %218 = @func_8188() /* ty=(Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) */;
  %219 = %218.0;
  %220 = cast(%var_8652, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%219, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = cast(%var_8663, dtype="float32") /* ty=Tensor[(300), float32] */;
  %225 = reshape(%224, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
  %226 = @func_4713(%225) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
  %227 = greater(%222, %223) /* ty=Tensor[(16, 3, 16), bool] */;
  %228 = %226.2;
  (%227, %228, %var_8663)
}

def @func_11584() -> Tensor[(1, 1, 7), float64] {
  %229 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
  sqrt(%229) /* ty=Tensor[(1, 1, 7), float64] */
}

def @func_7564() -> Tensor[(16, 3, 16), float32] {
  %230 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %230.0
}

def @func_9440() -> (Tensor[(16, 3, 16), float32],) {
  %231 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %232 = %231.0;
  (%232,)
}

def @func_10724() -> Tensor[(16, 3, 16), float64] {
  %233 = @func_10402() /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */;
  %233.0
}

def @func_3617(%var_3517: Tensor[(11, 16, 16), int8], %var_3518: Tensor[(11, 16, 16), int8], %var_3546: Tensor[(10, 12, 3), bool], %var_3587: Tensor[(150), float64], %var_3588: Tensor[(156), float64]) -> (Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) {
  %234 = cast(%var_3518, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
  %235 = shape_of(%var_3517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_3517, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %238 = cast(%var_3518, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
  %240 = cast(meta[relay.Constant][22] /* ty=Tensor[(99, 3), int64] */, dtype="int64") /* ty=Tensor[(99, 3), int64] */;
  %241 = reshape(%239, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
  %242 = reshape(%240, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
  %243 = @func_321(%241, %242) /* ty=(Tensor[(3, 9, 11), float64],) */;
  %244 = cast(%var_3587, dtype="float64") /* ty=Tensor[(150), float64] */;
  %245 = cast(%var_3588, dtype="float64") /* ty=Tensor[(156), float64] */;
  %246 = reshape(%244, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %247 = reshape(%245, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %248 = @func_554(%246, %247) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %249 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 30), float64] */, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
  %250 = reshape(%249, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %251 = @func_689(%250) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %252 = %251.7;
  %253 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 30), float64] */, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="bool") /* ty=Tensor[(10, 12, 3), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = less(%255, %256) /* ty=Tensor[(10, 12, 3), bool] */;
  %258 = cast(%var_3546, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %262 = bitwise_or(%260, %261) /* ty=Tensor[(10, 12, 3), int8] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(10, 12, 3), float32] */;
  %264 = bitwise_or(%236, %237) /* ty=Tensor[(11, 16, 16), int8] */;
  %265 = acosh(%238) /* ty=Tensor[(11, 16, 16), float32] */;
  %266 = %243.0;
  %267 = %248.2;
  %268 = acos(%263) /* ty=Tensor[(10, 12, 3), float32] */;
  (%264, %265, %266, meta[relay.Constant][21] /* ty=Tensor[(33), int64] */, meta[relay.Constant][22] /* ty=Tensor[(99, 3), int64] */, %267, %var_3587, %var_3588, %268)
}

def @func_12085(%var_12080: Tensor[(2, 6, 11), int16]) -> Tensor[(2, 6, 11), int16] {
  %269 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 6, 11), int16] */, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %270 = shape_of(%var_12080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_12080, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%271, %272) /* ty=Tensor[(2, 6, 11), int16] */
}

def @func_9748(%var_9743: Tensor[(150), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(80), float32], Tensor[(150), bool]) {
  %273 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %274 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %275 = cast(meta[relay.Constant][26] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %276 = cast(meta[relay.Constant][27] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %277 = reshape(%274, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %278 = reshape(%275, newshape=[80]) /* ty=Tensor[(80), float32] */;
  %279 = reshape(%276, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %280 = @func_7706(%277, %278, %279) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(13, 4, 3), uint16], Tensor[(15, 9), float32], Tensor[(360), float64], Tensor[(33), int64], Tensor[(80), float32], Tensor[(9, 4, 8), float64], Tensor[(24, 12), float64], Tensor[(16, 3, 16), float32], Tensor[(6, 5, 5), float64], Tensor[(150), float64]) */;
  %281 = cast(%var_9743, dtype="bool") /* ty=Tensor[(150), bool] */;
  %282 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(150), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %283 = cast(meta[relay.Constant][27] /* ty=Tensor[(150), float64] */, dtype="bool") /* ty=Tensor[(150), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?), bool] */;
  %285 = %273.0;
  %286 = %280.8;
  %287 = logical_or(%283, %284) /* ty=Tensor[(150), bool] */;
  (%285, %286, meta[relay.Constant][25] /* ty=Tensor[(360), float64] */, meta[relay.Constant][26] /* ty=Tensor[(80), float32] */, %287)
}

def @func_146(%var_121: Tensor[(13, 4, 3), float64]) -> Tensor[(13, 4, 3), uint16] {
  %288 = cast(%var_121, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
  %289 = sin(%288) /* ty=Tensor[(13, 4, 3), float64] */;
  %290 = cast(%289, dtype="uint16") /* ty=Tensor[(13, 4, 3), uint16] */;
  %291 = shape_of(%var_121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%var_121, dtype="uint16") /* ty=Tensor[(13, 4, 3), uint16] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%292, %293) /* ty=Tensor[(13, 4, 3), uint16] */
}

def @func_10037() -> (Tensor[(16, 3, 16), float32],) {
  %294 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
  (%294,)
}

def @func_9227(%var_9211: Tensor[(7, 3, 2), float64]) -> (Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64]) {
  %295 = cast(%var_9211, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %296 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), float64] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %299 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), float64] */, dtype="int8") /* ty=Tensor[(7, 3, 2), int8] */;
  %300 = shape_of(%var_9211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%var_9211, dtype="int8") /* ty=Tensor[(7, 3, 2), int8] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %303 = bitwise_xor(%301, %302) /* ty=Tensor[(7, 3, 2), int8] */;
  %304 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %308 = equal(%297, %298) /* ty=Tensor[(7, 3, 2), bool] */;
  %309 = floor_divide(%306, %307) /* ty=Tensor[(7, 3, 2), float64] */;
  (%308, %309)
}

def @func_2890(%var_2829: Tensor[(6, 7, 8), int16], %var_2830: Tensor[(6, 7, 8), int16], %var_2851: float32) -> (Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) {
  %310 = cast(%var_2830, dtype="int16") /* ty=Tensor[(6, 7, 8), int16] */;
  %311 = shape_of(%var_2829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%var_2829, dtype="int16") /* ty=Tensor[(6, 7, 8), int16] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %314 = cast(%var_2851, dtype="float32") /* ty=float32 */;
  %315 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %316 = reshape(%314, newshape=[]) /* ty=float32 */;
  %317 = reshape(%315, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %318 = cast(%var_2829, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %319 = atanh(%318) /* ty=Tensor[(6, 7, 8), float64] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(6, 7, 8), float32] */;
  %321 = atan(%320) /* ty=Tensor[(6, 7, 8), float32] */;
  %322 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %323 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%321, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %326 = logical_xor(%312, %313) /* ty=Tensor[(6, 7, 8), int16] */;
  %327 = @func_2598(%316, %317) /* ty=Tensor[(4, 12, 5), float32] */;
  %328 = equal(%324, %325) /* ty=Tensor[(6, 7, 8), bool] */;
  (%326, %327, %var_2851, meta[relay.Constant][29] /* ty=Tensor[(8, 30), float32] */, %328)
}

def @func_554(%var_524: Tensor[(6, 5, 5), float64], %var_543: Tensor[(156), float64]) -> (Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) {
  %329 = cast(%var_524, dtype="float64") /* ty=Tensor[(6, 5, 5), float64] */;
  %330 = sqrt(%329) /* ty=Tensor[(6, 5, 5), float64] */;
  %331 = cast(%330, dtype="float64") /* ty=Tensor[(6, 5, 5), float64] */;
  %332 = cast(%var_543, dtype="float64") /* ty=Tensor[(156), float64] */;
  %333 = reshape(%332, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
  %334 = @func_146(%333) /* ty=Tensor[(13, 4, 3), uint16] */;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
  %336 = reshape(%335, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
  %337 = exp(%331) /* ty=Tensor[(6, 5, 5), float64] */;
  %338 = @func_146(%336) /* ty=Tensor[(13, 4, 3), uint16] */;
  (%337, %334, %var_543, %338)
}

def @func_8006() -> Tensor[(16, 3, 16), float32] {
  @func_7564() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_8321(%var_8308: Tensor[(360), bool], %var_8310: Tensor[(156), float64], %var_8312: Tensor[(6, 14, 10), float64]) -> (Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(1, 150), float64], Tensor[(156), float64], Tensor[(6, 14, 10), uint32]) {
  %339 = cast(meta[relay.Constant][31] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %340 = cast(meta[relay.Constant][31] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %341 = cast(%var_8308, dtype="bool") /* ty=Tensor[(360), bool] */;
  %342 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 150), float64] */, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %343 = cast(%var_8310, dtype="float64") /* ty=Tensor[(156), float64] */;
  %344 = reshape(%339, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %345 = reshape(%340, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %346 = reshape(%341, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
  %347 = reshape(%342, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %348 = reshape(%343, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %349 = @func_3617(%344, %345, %346, %347, %348) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
  %350 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 10), float64] */;
  %351 = cosh(%350) /* ty=Tensor[(6, 14, 10), float64] */;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(6, 14, 10), float64] */;
  %353 = acos(%352) /* ty=Tensor[(6, 14, 10), float64] */;
  %354 = cast(%var_8312, dtype="uint32") /* ty=Tensor[(6, 14, 10), uint32] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="uint32") /* ty=Tensor[(6, 14, 10), uint32] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %358 = %349.5;
  %359 = left_shift(%356, %357) /* ty=Tensor[(6, 14, 10), uint32] */;
  (%358, meta[relay.Constant][31] /* ty=Tensor[(2816), int8] */, %var_8308, meta[relay.Constant][32] /* ty=Tensor[(1, 150), float64] */, %var_8310, %359)
}

def @func_9177() -> (Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) {
  %360 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 260), float32] */, dtype="float32") /* ty=Tensor[(5, 260), float32] */;
  %361 = reshape(%360, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %362 = @func_4621(%361) /* ty=(Tensor[(13, 10, 10), float32], Tensor[(9, 4, 8), float64], Tensor[(288), float64]) */;
  %363 = cast(meta[relay.Constant][35] /* ty=Tensor[(165), int64] */, dtype="int64") /* ty=Tensor[(165), int64] */;
  %364 = reshape(%363, newshape=[5, 33]) /* ty=Tensor[(5, 33), int64] */;
  %365 = @func_9098(%364) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 33), int64]) */;
  %366 = @func_8006() /* ty=Tensor[(16, 3, 16), float32] */;
  %367 = %362.2;
  %368 = %365.2;
  (%366, %367, meta[relay.Constant][34] /* ty=Tensor[(5, 260), float32] */, %368, meta[relay.Constant][35] /* ty=Tensor[(165), int64] */)
}

def @func_12036() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %369 = @func_9440() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %370 = %369.0;
  %371 = @func_9336() /* ty=Tensor[(16, 3, 16), float32] */;
  (%370, %371)
}

def @func_7706(%var_7676: Tensor[(360), float64], %var_7679: Tensor[(80), float32], %var_7701: Tensor[(150), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(13, 4, 3), uint16], Tensor[(15, 9), float32], Tensor[(360), float64], Tensor[(33), int64], Tensor[(80), float32], Tensor[(9, 4, 8), float64], Tensor[(24, 12), float64], Tensor[(16, 3, 16), float32], Tensor[(6, 5, 5), float64], Tensor[(150), float64]) {
  %372 = @func_7605() /* ty=Tensor[(16, 3, 16), float32] */;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %374 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %375 = cast(%var_7676, dtype="float64") /* ty=Tensor[(360), float64] */;
  %376 = reshape(%374, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
  %377 = reshape(%375, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %378 = @func_1602(%376, %377) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
  %379 = cast(%var_7679, dtype="float32") /* ty=Tensor[(80), float32] */;
  %380 = reshape(%379, newshape=[8, 1, 10]) /* ty=Tensor[(8, 1, 10), float32] */;
  %381 = @func_2028(%380) /* ty=(Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) */;
  %382 = cast(meta[relay.Constant][37] /* ty=Tensor[(24, 12), float64] */, dtype="float64") /* ty=Tensor[(24, 12), float64] */;
  %383 = reshape(%382, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float64] */;
  %384 = @func_3266(%383) /* ty=(Tensor[(9, 4, 8), float64],) */;
  %385 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %386 = cast(%var_7701, dtype="float64") /* ty=Tensor[(150), float64] */;
  %387 = %378.1;
  %388 = cast(%387, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
  %389 = reshape(%386, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %390 = reshape(%388, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %391 = @func_554(%389, %390) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %392 = cosh(%373) /* ty=Tensor[(16, 3, 16), float64] */;
  %393 = %381.3;
  %394 = %384.0;
  %395 = %385.0;
  %396 = %391.0;
  (%392, %387, meta[relay.Constant][36] /* ty=Tensor[(15, 9), float32] */, %var_7676, %393, %var_7679, %394, meta[relay.Constant][37] /* ty=Tensor[(24, 12), float64] */, %395, %396, %var_7701)
}

def @func_9118() -> (Tensor[(16, 3, 16), float32],) {
  %397 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
  (%397,)
}

def @func_10257() -> (Tensor[(16, 3, 16), float32],) {
  %398 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
  (%398,)
}

def @func_3296(%var_3288: Tensor[(16, 10, 4), float32]) -> (Tensor[(16, 10, 4), float32],) {
  %399 = cast(%var_3288, dtype="float32") /* ty=Tensor[(16, 10, 4), float32] */;
  %400 = exp(%399) /* ty=Tensor[(16, 10, 4), float32] */;
  (%400,)
}

def @func_9336() -> Tensor[(16, 3, 16), float32] {
  @func_8614() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_8614() -> Tensor[(16, 3, 16), float32] {
  @func_7564() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_9572(%var_9540: Tensor[(297), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(297), float64]) {
  %401 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 33), int64] */, dtype="int64") /* ty=Tensor[(1, 33), int64] */;
  %402 = cast(%var_9540, dtype="int64") /* ty=Tensor[(297), int64] */;
  %403 = reshape(%401, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
  %404 = reshape(%402, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
  %405 = @func_321(%403, %404) /* ty=(Tensor[(3, 9, 11), float64],) */;
  %406 = cast(%var_9540, dtype="float64") /* ty=Tensor[(297), float64] */;
  %407 = atanh(%406) /* ty=Tensor[(297), float64] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(297), float64] */;
  %409 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %410 = %405.0;
  %411 = asinh(%408) /* ty=Tensor[(297), float64] */;
  (%409, %410, meta[relay.Constant][38] /* ty=Tensor[(1, 33), int64] */, %411)
}

def @func_11758() -> (Tensor[(16, 3, 16), float32],) {
  %412 = @func_9177() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
  %413 = %412.0;
  (%413,)
}

def @func_11983(%var_11980: Tensor[(33), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(3, 1, 11), float64], Tensor[(33), float64]) {
  %414 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %415 = cast(%var_11980, dtype="float64") /* ty=Tensor[(33), float64] */;
  %416 = reshape(%415, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), float64] */;
  %417 = @func_2399(%416) /* ty=(Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) */;
  %418 = %414.0;
  %419 = %417.0;
  (%418, %419, %var_11980)
}

def @main() -> (Tensor[(16, 3, 16), float32], Tensor[(5, 260), float32]) {
  %420 = @func_9440() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %421 = @func_9177() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
  %422 = %421.2;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(5, 260), float32] */;
  %424 = %420.0;
  %425 = sin(%423) /* ty=Tensor[(5, 260), float32] */;
  (%424, %425)
}

def @func_7523() -> (Tensor[(16, 3, 16), float32],) {
  %426 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %427 = %426.0;
  (%427,)
}

def @func_10432() -> Tensor[(360), float64] {
  %428 = @func_10402() /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */;
  %429 = %428.5;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(360), float64] */;
  cosh(%430) /* ty=Tensor[(360), float64] */
}

def @func_10455() -> (Tensor[(16, 3, 16), float32],) {
  %431 = @func_7605() /* ty=Tensor[(16, 3, 16), float32] */;
  (%431,)
}

def @func_9994() -> (Tensor[(16, 3, 16), float32],) {
  %432 = @func_9118() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %433 = %432.0;
  (%433,)
}

def @func_11468(%var_11432: Tensor[(297), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(297), int64], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %434 = cast(meta[relay.Constant][39] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %435 = reshape(%434, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
  %436 = @func_10455() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %437 = @func_10402() /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */;
  %438 = cast(meta[relay.Constant][40] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
  %439 = cast(%var_11432, dtype="int64") /* ty=Tensor[(297), int64] */;
  %440 = reshape(%438, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
  %441 = reshape(%439, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
  %442 = @func_321(%440, %441) /* ty=(Tensor[(3, 9, 11), float64],) */;
  %443 = @func_10257() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %444 = @func_9853() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(10, 10, 3), float32], Tensor[(1, 300), float32]) */;
  %445 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
  %446 = @func_146(%435) /* ty=Tensor[(13, 4, 3), uint16] */;
  %447 = %436.0;
  %448 = %437.4;
  %449 = %442.0;
  %450 = %443.0;
  %451 = %444.0;
  (%445, %446, meta[relay.Constant][39] /* ty=Tensor[(156), float64] */, %447, %448, %449, meta[relay.Constant][40] /* ty=Tensor[(33), int64] */, %var_11432, %450, %451)
}

def @func_10989(%var_10976: Tensor[(16, 3, 16), float32]) -> Tensor[(16, 3, 16), bool] {
  %452 = @func_10107() /* ty=Tensor[(16, 3, 16), float32] */;
  %453 = cast(%var_10976, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%455, %456) /* ty=Tensor[(16, 3, 16), bool] */
}

def @func_11200(%var_11110: Tensor[(39, 4), float64], %var_11123: Tensor[(726), float64]) -> (Tensor[(360), float64], Tensor[(16, 3, 16), float32], Tensor[(39, 4), float64], Tensor[(160), uint32], Tensor[(726), float64], uint32, Tensor[(16, 3, 16), float32], Tensor[(16, 176), float64], Tensor[(300), float32]) {
  %457 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 176), int8] */, dtype="int8") /* ty=Tensor[(16, 176), int8] */;
  %458 = @func_10432() /* ty=Tensor[(360), float64] */;
  %459 = cast(%458, dtype="bool") /* ty=Tensor[(360), bool] */;
  %460 = cast(%var_11110, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %461 = reshape(%457, newshape=[2816]) /* ty=Tensor[(2816), int8] */;
  %462 = reshape(%459, newshape=[360]) /* ty=Tensor[(360), bool] */;
  %463 = reshape(%460, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %464 = @func_9786(%461, %462, %463) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) */;
  %465 = cast(%var_11123, dtype="float64") /* ty=Tensor[(726), float64] */;
  %466 = cast(meta[relay.Constant][42] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %467 = reshape(%465, newshape=[726, 1]) /* ty=Tensor[(726, 1), float64] */;
  %468 = reshape(%466, newshape=[]) /* ty=uint32 */;
  %469 = @func_9297(%467, %468) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) */;
  %470 = cast(meta[relay.Constant][41] /* ty=Tensor[(16, 176), int8] */, dtype="float32") /* ty=Tensor[(16, 176), float32] */;
  %471 = asin(%470) /* ty=Tensor[(16, 176), float32] */;
  %472 = cast(%471, dtype="float64") /* ty=Tensor[(16, 176), float64] */;
  %473 = acos(%472) /* ty=Tensor[(16, 176), float64] */;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(16, 176), float64] */;
  %475 = @func_8728() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(10, 12, 3), float64], Tensor[(300), float32]) */;
  %476 = %464.0;
  %477 = %469.1;
  %478 = @func_9336() /* ty=Tensor[(16, 3, 16), float32] */;
  %479 = sqrt(%474) /* ty=Tensor[(16, 176), float64] */;
  %480 = %475.2;
  (%458, %476, %var_11110, %477, %var_11123, meta[relay.Constant][42] /* ty=uint32 */, %478, %479, %480)
}

def @func_5750(%var_5739: Tensor[(6, 11, 1), float32]) -> Tensor[(6, 11, ?), uint16] {
  %481 = cast(%var_5739, dtype="float32") /* ty=Tensor[(6, 11, 1), float32] */;
  %482 = tan(%481) /* ty=Tensor[(6, 11, 1), float32] */;
  %483 = cast(%482, dtype="uint16") /* ty=Tensor[(6, 11, 1), uint16] */;
  %484 = shape_of(%var_5739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_5739, dtype="uint16") /* ty=Tensor[(6, 11, 1), uint16] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%485, %486) /* ty=Tensor[(6, 11, ?), uint16] */
}

def @func_11859() -> (Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %487 = @func_8188() /* ty=(Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) */;
  %488 = %487.2;
  %489 = @func_8614() /* ty=Tensor[(16, 3, 16), float32] */;
  %490 = @func_10416() /* ty=Tensor[(16, 3, 16), float32] */;
  (%488, %489, %490)
}

def @func_5274(%var_5262: uint32, %var_5263: Tensor[(4, 5, 8), uint32]) -> (Tensor[(4, 5, 8), uint32],) {
  %491 = cast(%var_5262, dtype="uint32") /* ty=uint32 */;
  %492 = cast(%var_5263, dtype="uint32") /* ty=Tensor[(4, 5, 8), uint32] */;
  %493 = bitwise_xor(%491, %492) /* ty=Tensor[(4, 5, 8), uint32] */;
  (%493,)
}

def @func_10107() -> Tensor[(16, 3, 16), float32] {
  @func_8006() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_2598(%var_2587: float32, %var_2588: Tensor[(4, 12, 5), float32]) -> Tensor[(4, 12, 5), float32] {
  %494 = cast(%var_2587, dtype="float32") /* ty=float32 */;
  %495 = cast(%var_2588, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
  divide(%494, %495) /* ty=Tensor[(4, 12, 5), float32] */
}

def @func_7605() -> Tensor[(16, 3, 16), float32] {
  @func_7564() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_9786(%var_9777: Tensor[(2816), int8], %var_9778: Tensor[(360), bool], %var_9780: Tensor[(156), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) {
  %496 = cast(%var_9777, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %497 = cast(%var_9777, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %498 = cast(%var_9778, dtype="bool") /* ty=Tensor[(360), bool] */;
  %499 = cast(meta[relay.Constant][43] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %500 = cast(%var_9780, dtype="float64") /* ty=Tensor[(156), float64] */;
  %501 = reshape(%496, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %502 = reshape(%497, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %503 = reshape(%498, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
  %504 = reshape(%499, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %505 = reshape(%500, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %506 = @func_3617(%501, %502, %503, %504, %505) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
  %507 = cast(meta[relay.Constant][43] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %508 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %509 = %506.5;
  %510 = atan(%507) /* ty=Tensor[(25, 6), float64] */;
  (%508, %509, %var_9777, %var_9778, %var_9780, %510)
}

def @func_321(%var_304: Tensor[(3, 1, 11), int64], %var_305: Tensor[(3, 9, 11), int64]) -> (Tensor[(3, 9, 11), float64],) {
  %511 = cast(%var_304, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
  %512 = cast(%var_305, dtype="bool") /* ty=Tensor[(3, 9, 11), bool] */;
  %513 = less(%511, %512) /* ty=Tensor[(3, 9, 11), bool] */;
  %514 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 9, 11), bool] */, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %518 = mod(%516, %517) /* ty=Tensor[(3, 9, 11), float64] */;
  %519 = cast(%518, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
  %520 = cos(%519) /* ty=Tensor[(3, 9, 11), float64] */;
  (%520,)
}

def @func_10183(%var_10114: Tensor[(240), float32], %var_10124: Tensor[(3, 3, 11), float64], %var_10139: Tensor[(25, 6), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(6, 5, 5), float64], Tensor[(25, 6), float64], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(3, 3, 11), uint16], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %521 = cast(-2.5633f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %522 = cast(%var_10114, dtype="float32") /* ty=Tensor[(240), float32] */;
  %523 = reshape(%521, newshape=[]) /* ty=float32 */;
  %524 = reshape(%522, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %525 = cast(%var_10139, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %526 = cast(meta[relay.Constant][47] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %527 = reshape(%525, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %528 = reshape(%526, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %529 = @func_554(%527, %528) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %530 = @func_9994() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %531 = cast(meta[relay.Constant][45] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %532 = cast(meta[relay.Constant][46] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %533 = reshape(%531, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %534 = reshape(%532, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %535 = @func_3351(%533, %534) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %536 = %535.1;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %538 = log2(%537) /* ty=Tensor[(3, 1, 11), float64] */;
  %539 = cast(%538, dtype="int16") /* ty=Tensor[(3, 1, 11), int16] */;
  %540 = cast(%var_10124, dtype="int16") /* ty=Tensor[(3, 3, 11), int16] */;
  %541 = bitwise_xor(%539, %540) /* ty=Tensor[(3, 3, 11), int16] */;
  %542 = cast(%541, dtype="uint16") /* ty=Tensor[(3, 3, 11), uint16] */;
  %543 = cast(-2.5633f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
  %544 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
  %545 = @func_2598(%523, %524) /* ty=Tensor[(4, 12, 5), float32] */;
  %546 = %529.0;
  %547 = %530.0;
  %548 = add(%542, %543) /* ty=Tensor[(3, 3, 11), uint16] */;
  %549 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
  %550 = @func_7605() /* ty=Tensor[(16, 3, 16), float32] */;
  (%544, %545, %var_10114, meta[relay.Constant][45] /* ty=Tensor[(42), uint32] */, meta[relay.Constant][46] /* ty=Tensor[(33), float64] */, %546, %var_10139, meta[relay.Constant][47] /* ty=Tensor[(156), float64] */, %547, %548, %549, %550)
}

def @func_3351(%var_3336: Tensor[(14, 1, 3), uint32], %var_3344: Tensor[(33, 1), float64]) -> (Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) {
  %551 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 1, 3), uint32] */, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %552 = shape_of(%var_3336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_3336, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = cast(%var_3344, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
  %556 = reshape(%555, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), float64] */;
  %557 = @func_2399(%556) /* ty=(Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) */;
  %558 = less_equal(%553, %554) /* ty=Tensor[(14, ?, 3), bool] */;
  %559 = %557.0;
  (%558, %559, %var_3344)
}

def @func_9036(%var_8987: Tensor[(9, 4, 15), float32], %var_8988: Tensor[(9, 4, 15), float32]) -> (Tensor[(9, 4, 15), bool], Tensor[(5, 3, 3), float32], Tensor[(45), float64], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) {
  %560 = cast(%var_8988, dtype="bool") /* ty=Tensor[(9, 4, 15), bool] */;
  %561 = shape_of(%var_8987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_8987, dtype="bool") /* ty=Tensor[(9, 4, 15), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = cast(meta[relay.Constant][49] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %565 = reshape(%564, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
  %566 = @func_6527(%565) /* ty=(Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) */;
  %567 = cast(-4.90014f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %568 = cast(meta[relay.Constant][50] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %569 = reshape(%567, newshape=[]) /* ty=float32 */;
  %570 = reshape(%568, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %571 = cast(meta[relay.Constant][51] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %572 = reshape(%571, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), float32] */;
  %573 = @func_4204(%572) /* ty=(Tensor[(15, 6, 15), float32],) */;
  %574 = greater_equal(%562, %563) /* ty=Tensor[(9, 4, 15), bool] */;
  %575 = %566.2;
  %576 = @func_2598(%569, %570) /* ty=Tensor[(4, 12, 5), float32] */;
  %577 = %573.0;
  (%574, %575, meta[relay.Constant][49] /* ty=Tensor[(45), float64] */, %576, -4.90014f /* ty=float32 */, meta[relay.Constant][50] /* ty=Tensor[(240), float32] */, %577, meta[relay.Constant][51] /* ty=Tensor[(1350), float32] */)
}

def @func_9297(%var_9294: Tensor[(726, 1), float64], %var_9295: uint32) -> (Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) {
  %578 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %579 = cast(%var_9294, dtype="float64") /* ty=Tensor[(726, 1), float64] */;
  %580 = cast(%var_9295, dtype="uint32") /* ty=uint32 */;
  %581 = reshape(%579, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), float64] */;
  %582 = reshape(%580, newshape=[]) /* ty=uint32 */;
  %583 = @func_6630(%581, %582) /* ty=(Tensor[(11, 6, 11), float64], Tensor[(4, 5, 8), uint32], uint32, Tensor[(160), uint32]) */;
  %584 = %578.0;
  %585 = %583.3;
  (%584, %585, %var_9294, %var_9295)
}

def @func_6527(%var_6492: Tensor[(5, 3, 3), float64]) -> (Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) {
  %586 = cast(meta[relay.Constant][52] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %587 = reshape(%586, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float32] */;
  %588 = @func_5417(%587) /* ty=(Tensor[(15, 4, 8), float32],) */;
  %589 = cast(%var_6492, dtype="float64") /* ty=Tensor[(5, 3, 3), float64] */;
  %590 = atanh(%589) /* ty=Tensor[(5, 3, 3), float64] */;
  %591 = cast(%var_6492, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %595 = %588.0;
  %596 = floor_divide(%593, %594) /* ty=Tensor[(5, 3, 3), float32] */;
  (%595, meta[relay.Constant][52] /* ty=Tensor[(480), float32] */, %596)
}

def @func_8789() -> Tensor[(16, 3, 16), float32] {
  @func_8614() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_1189(%var_1161: Tensor[(8, 3, 9), float64], %var_1162: Tensor[(8, 3, 9), float64], %var_1183: Tensor[(11, 3), int64]) -> (Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) {
  %597 = cast(%var_1162, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
  %598 = shape_of(%var_1161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%var_1161, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %601 = cast(meta[relay.Constant][53] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %602 = reshape(%601, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %603 = @func_689(%602) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %604 = cast(%var_1183, dtype="int64") /* ty=Tensor[(11, 3), int64] */;
  %605 = cast(meta[relay.Constant][54] /* ty=Tensor[(297), int64] */, dtype="int64") /* ty=Tensor[(297), int64] */;
  %606 = reshape(%604, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
  %607 = reshape(%605, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
  %608 = @func_321(%606, %607) /* ty=(Tensor[(3, 9, 11), float64],) */;
  %609 = floor_mod(%599, %600) /* ty=Tensor[(8, 3, 9), float64] */;
  %610 = %603.0;
  %611 = %608.0;
  (%609, %610, meta[relay.Constant][53] /* ty=Tensor[(360), float64] */, %611, %var_1183, meta[relay.Constant][54] /* ty=Tensor[(297), int64] */)
}

def @func_3266(%var_3262: Tensor[(9, 4, 8), float64]) -> (Tensor[(9, 4, 8), float64],) {
  %612 = cast(%var_3262, dtype="float64") /* ty=Tensor[(9, 4, 8), float64] */;
  %613 = sinh(%612) /* ty=Tensor[(9, 4, 8), float64] */;
  (%613,)
}

def @func_6893(%var_6860: Tensor[(4, 11, 3), float64], %var_6864: Tensor[(3, 45), float32], %var_6865: Tensor[(360), float64], %var_6873: Tensor[(6, 36), float64], %var_6878: Tensor[(7, 6), uint32]) -> (Tensor[(3, 9, 5), float32], Tensor[(3, 45), float32], Tensor[(360), float64], Tensor[(6, 36), float64], Tensor[(33), int64], Tensor[(33, 1), float64], Tensor[(7, 6), uint32], Tensor[(6, 5, 5), float64], Tensor[(150), float64], Tensor[(39, 4), float64], Tensor[(4, 11, 3), float32]) {
  %614 = cast(%var_6864, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %615 = cast(%var_6865, dtype="float64") /* ty=Tensor[(360), float64] */;
  %616 = reshape(%614, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
  %617 = reshape(%615, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %618 = @func_1602(%616, %617) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
  %619 = cast(%var_6878, dtype="uint32") /* ty=Tensor[(7, 6), uint32] */;
  %620 = cast(meta[relay.Constant][55] /* ty=Tensor[(33), int64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %621 = reshape(%619, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %622 = reshape(%620, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %623 = @func_3351(%621, %622) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %624 = cast(meta[relay.Constant][56] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %625 = cast(meta[relay.Constant][57] /* ty=Tensor[(39, 4), float64] */, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %626 = reshape(%624, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %627 = reshape(%625, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %628 = @func_554(%626, %627) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %629 = cast(%var_6860, dtype="float64") /* ty=Tensor[(4, 11, 3), float64] */;
  %630 = tan(%629) /* ty=Tensor[(4, 11, 3), float64] */;
  %631 = cast(%var_6873, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
  %632 = cast(%var_6873, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
  %633 = cast(meta[relay.Constant][55] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
  %634 = reshape(%631, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
  %635 = reshape(%632, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
  %636 = reshape(%633, newshape=[11, 3]) /* ty=Tensor[(11, 3), int64] */;
  %637 = @func_1189(%634, %635, %636) /* ty=(Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) */;
  %638 = %637.4;
  %639 = cast(%630, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
  %640 = cast(%638, dtype="float32") /* ty=Tensor[(11, 3), float32] */;
  %641 = %618.0;
  %642 = %623.2;
  %643 = %628.0;
  %644 = floor_divide(%639, %640) /* ty=Tensor[(4, 11, 3), float32] */;
  (%641, %var_6864, %var_6865, %var_6873, meta[relay.Constant][55] /* ty=Tensor[(33), int64] */, %642, %var_6878, %643, meta[relay.Constant][56] /* ty=Tensor[(150), float64] */, meta[relay.Constant][57] /* ty=Tensor[(39, 4), float64] */, %644)
}

def @func_7894(%var_7832: Tensor[(480), float32], %var_7861: Tensor[(66), float32], %var_7875: Tensor[(360), bool], %var_7877: Tensor[(156), float64], %var_7881: Tensor[(336), int16]) -> (Tensor[(16, 3, 16), float32], Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(480), float32], Tensor[(5, 9), float64], Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(4, 15, 13), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(150), float64], Tensor[(156), float64], float32, Tensor[(336), int16], float32, Tensor[(10, 12, 3), int32]) {
  %645 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %646 = cast(%var_7832, dtype="float32") /* ty=Tensor[(480), float32] */;
  %647 = reshape(%646, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float32] */;
  %648 = @func_5417(%647) /* ty=(Tensor[(15, 4, 8), float32],) */;
  %649 = cast(meta[relay.Constant][58] /* ty=Tensor[(5, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 9), float64] */;
  %650 = reshape(%649, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
  %651 = @func_6527(%650) /* ty=(Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) */;
  %652 = cast(%var_7861, dtype="float32") /* ty=Tensor[(66), float32] */;
  %653 = reshape(%652, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
  %654 = cast(meta[relay.Constant][59] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %655 = reshape(%654, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
  %656 = cast(meta[relay.Constant][60] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %657 = cast(meta[relay.Constant][60] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %658 = cast(%var_7875, dtype="bool") /* ty=Tensor[(360), bool] */;
  %659 = cast(meta[relay.Constant][61] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %660 = cast(%var_7877, dtype="float64") /* ty=Tensor[(156), float64] */;
  %661 = reshape(%656, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %662 = reshape(%657, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %663 = reshape(%658, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
  %664 = reshape(%659, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %665 = reshape(%660, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %666 = @func_3617(%661, %662, %663, %664, %665) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
  %667 = cast(%var_7881, dtype="int16") /* ty=Tensor[(336), int16] */;
  %668 = cast(%var_7881, dtype="int16") /* ty=Tensor[(336), int16] */;
  %669 = cast(-7.36686f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %670 = reshape(%667, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
  %671 = reshape(%668, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
  %672 = reshape(%669, newshape=[]) /* ty=float32 */;
  %673 = @func_2890(%670, %671, %672) /* ty=(Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) */;
  %674 = cast(%var_7875, dtype="float64") /* ty=Tensor[(360), float64] */;
  %675 = cast(%var_7875, dtype="float64") /* ty=Tensor[(360), float64] */;
  %676 = reshape(%674, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %677 = reshape(%675, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
  %678 = @func_2429(%676, %677) /* ty=(Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) */;
  %679 = %645.0;
  %680 = %648.0;
  %681 = %651.1;
  %682 = @func_5750(%653) /* ty=Tensor[(6, 11, ?), uint16] */;
  %683 = @func_2172(%655) /* ty=Tensor[(4, 15, 13), float32] */;
  %684 = %666.3;
  %685 = %673.2;
  %686 = %678.0;
  (%679, %680, %var_7832, %681, meta[relay.Constant][58] /* ty=Tensor[(5, 9), float64] */, %682, %var_7861, %683, meta[relay.Constant][59] /* ty=Tensor[(780), float32] */, %684, meta[relay.Constant][60] /* ty=Tensor[(2816), int8] */, %var_7875, meta[relay.Constant][61] /* ty=Tensor[(150), float64] */, %var_7877, %685, %var_7881, -7.36686f /* ty=float32 */, %686)
}

def @func_8953(%var_8918: Tensor[(16, 3, 16), float32], %var_8938: Tensor[(360), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(10, 12, 3), int32], Tensor[(360), float64]) {
  %687 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %688 = cast(%var_8918, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %692 = cast(%var_8938, dtype="float64") /* ty=Tensor[(360), float64] */;
  %693 = reshape(%692, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %694 = @func_689(%693) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %695 = floor_divide(%690, %691) /* ty=Tensor[(16, 3, 16), float64] */;
  %696 = %694.7;
  (%695, %696, %var_8938)
}

def @func_9492() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %697 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %698 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  (%697, %698)
}

def @func_5698(%var_5663: Tensor[(13, 15, 14), float32], %var_5664: Tensor[(13, 15, 14), float32], %var_5680: Tensor[(480), uint8], %var_5684: Tensor[(336), int16], %var_5685: float32) -> (Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], float32, Tensor[(336), int16], float32, Tensor[(13, 15, 14), float64]) {
  %699 = cast(%var_5680, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %700 = reshape(%699, newshape=[12, 4, 10]) /* ty=Tensor[(12, 4, 10), uint8] */;
  %701 = @func_3837(%700) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) */;
  %702 = cast(%var_5684, dtype="int16") /* ty=Tensor[(336), int16] */;
  %703 = cast(%var_5684, dtype="int16") /* ty=Tensor[(336), int16] */;
  %704 = cast(%var_5685, dtype="float32") /* ty=float32 */;
  %705 = reshape(%702, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
  %706 = reshape(%703, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
  %707 = reshape(%704, newshape=[]) /* ty=float32 */;
  %708 = @func_2890(%705, %706, %707) /* ty=(Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) */;
  %709 = cast(%var_5664, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
  %710 = shape_of(%var_5663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_5663, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = less(%711, %712) /* ty=Tensor[(13, 15, 14), bool] */;
  %714 = cast(%var_5663, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
  %715 = shape_of(%var_5664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_5664, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = logical_and(%716, %717) /* ty=Tensor[(13, 15, 14), bool] */;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
  %720 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%713, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %723 = %701.0;
  %724 = %708.2;
  %725 = power(%721, %722) /* ty=Tensor[(13, 15, 14), float64] */;
  (%723, %var_5680, %724, %var_5684, %var_5685, %725)
}

def @func_9853() -> (Tensor[(16, 3, 16), float32], Tensor[(10, 10, 3), float32], Tensor[(1, 300), float32]) {
  %726 = @func_9118() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %727 = %726.0;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %729 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
  %730 = reshape(%729, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
  %731 = @func_4713(%730) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
  %732 = erf(%728) /* ty=Tensor[(16, 3, 16), float32] */;
  %733 = %731.0;
  (%732, %733, meta[relay.Constant][62] /* ty=Tensor[(1, 300), float32] */)
}

def @func_8728() -> (Tensor[(16, 3, 16), float32], Tensor[(10, 12, 3), float64], Tensor[(300), float32]) {
  %734 = cast(meta[relay.Constant][63] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %735 = reshape(%734, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
  %736 = @func_4713(%735) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
  %737 = @func_8614() /* ty=Tensor[(16, 3, 16), float32] */;
  %738 = %736.1;
  (%737, %738, meta[relay.Constant][63] /* ty=Tensor[(300), float32] */)
}

def @func_1602(%var_1590: Tensor[(3, 9, 5), float32], %var_1599: Tensor[(1, 360), float64]) -> (Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) {
  %739 = cast(%var_1590, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %740 = cast(%var_1599, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %741 = reshape(%740, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %742 = @func_689(%741) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %743 = acos(%739) /* ty=Tensor[(3, 9, 5), float32] */;
  %744 = %742.5;
  (%743, %744, %var_1599)
}

def @func_10102() -> Tensor[(16, 3, 16), float32] {
  @func_7605() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_3837(%var_3807: Tensor[(12, 4, 10), uint8]) -> (Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) {
  %745 = cast(meta[relay.Constant][64] /* ty=Tensor[(12, 4, 10), uint8] */, dtype="uint8") /* ty=Tensor[(12, 4, 10), uint8] */;
  %746 = shape_of(%var_3807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(%var_3807, dtype="uint8") /* ty=Tensor[(12, 4, 10), uint8] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %749 = cast(meta[relay.Constant][65] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %750 = reshape(%749, newshape=[8, 1, 10]) /* ty=Tensor[(8, 1, 10), float32] */;
  %751 = @func_2028(%750) /* ty=(Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) */;
  %752 = right_shift(%747, %748) /* ty=Tensor[(12, 4, 10), uint8] */;
  %753 = %751.1;
  (%752, %753, meta[relay.Constant][65] /* ty=Tensor[(80), float32] */)
}

def @func_8188() -> (Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) {
  %754 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %756 = log2(%755) /* ty=Tensor[(16, 3, 16), float32] */;
  %757 = cast(meta[relay.Constant][66] /* ty=Tensor[(16, 3, 16), float32] */, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = cast(meta[relay.Constant][67] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %762 = reshape(%761, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float32] */;
  %763 = @func_5417(%762) /* ty=(Tensor[(15, 4, 8), float32],) */;
  %764 = equal(%759, %760) /* ty=Tensor[(16, 3, 16), bool] */;
  %765 = %763.0;
  (%764, %765, meta[relay.Constant][67] /* ty=Tensor[(480), float32] */)
}

def @func_2028(%var_2000: Tensor[(8, 1, 10), float32]) -> (Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) {
  %766 = cast(%var_2000, dtype="float32") /* ty=Tensor[(8, 1, 10), float32] */;
  %767 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 108), float64] */, dtype="float64") /* ty=Tensor[(2, 108), float64] */;
  %768 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 108), float64] */, dtype="float64") /* ty=Tensor[(2, 108), float64] */;
  %769 = cast(meta[relay.Constant][69] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
  %770 = reshape(%767, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
  %771 = reshape(%768, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
  %772 = reshape(%769, newshape=[11, 3]) /* ty=Tensor[(11, 3), int64] */;
  %773 = @func_1189(%770, %771, %772) /* ty=(Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) */;
  %774 = log(%766) /* ty=Tensor[(8, 1, 10), float32] */;
  %775 = %773.4;
  (%774, %775, meta[relay.Constant][68] /* ty=Tensor[(2, 108), float64] */, meta[relay.Constant][69] /* ty=Tensor[(33), int64] */)
}

def @func_10804(%var_10795: Tensor[(33), float64], %var_10799: Tensor[(2730), float32], %var_10800: Tensor[(240, 2), uint8], %var_10802: float32) -> (Tensor[(360), float64], Tensor[(14, ?, 3), bool], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(336), int16], Tensor[(2730), float32], Tensor[(240, 2), uint8], Tensor[(336), int16], float32) {
  %776 = cast(meta[relay.Constant][70] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %777 = cast(%var_10795, dtype="float64") /* ty=Tensor[(33), float64] */;
  %778 = reshape(%776, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %779 = reshape(%777, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %780 = @func_3351(%778, %779) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %781 = cast(%var_10799, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %782 = cast(%var_10799, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %783 = cast(%var_10800, dtype="uint8") /* ty=Tensor[(240, 2), uint8] */;
  %784 = cast(meta[relay.Constant][71] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
  %785 = cast(%var_10802, dtype="float32") /* ty=float32 */;
  %786 = reshape(%781, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
  %787 = reshape(%782, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
  %788 = reshape(%783, newshape=[480]) /* ty=Tensor[(480), uint8] */;
  %789 = reshape(%784, newshape=[336]) /* ty=Tensor[(336), int16] */;
  %790 = reshape(%785, newshape=[]) /* ty=float32 */;
  %791 = @func_5698(%786, %787, %788, %789, %790) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], float32, Tensor[(336), int16], float32, Tensor[(13, 15, 14), float64]) */;
  %792 = @func_10432() /* ty=Tensor[(360), float64] */;
  %793 = %780.0;
  %794 = %791.3;
  (%792, %793, meta[relay.Constant][70] /* ty=Tensor[(42), uint32] */, %var_10795, %794, %var_10799, %var_10800, meta[relay.Constant][71] /* ty=Tensor[(336), int16] */, %var_10802)
}

def @func_10225(%var_10221: Tensor[(360), bool]) -> (Tensor[(16, 3, 16), float32], Tensor[(360), bool], Tensor[(4, 704), int8], Tensor[(360), bool], Tensor[(156), float64]) {
  %795 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %796 = cast(meta[relay.Constant][72] /* ty=Tensor[(4, 704), int8] */, dtype="int8") /* ty=Tensor[(4, 704), int8] */;
  %797 = cast(%var_10221, dtype="bool") /* ty=Tensor[(360), bool] */;
  %798 = cast(meta[relay.Constant][73] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %799 = reshape(%796, newshape=[2816]) /* ty=Tensor[(2816), int8] */;
  %800 = reshape(%797, newshape=[360]) /* ty=Tensor[(360), bool] */;
  %801 = reshape(%798, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %802 = @func_9786(%799, %800, %801) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) */;
  %803 = %795.0;
  %804 = %802.3;
  (%803, %804, meta[relay.Constant][72] /* ty=Tensor[(4, 704), int8] */, %var_10221, meta[relay.Constant][73] /* ty=Tensor[(156), float64] */)
}

def @func_689(%var_652: Tensor[(10, 12, 3), float64]) -> (Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) {
  %805 = cast(meta[relay.Constant][74] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %806 = cast(meta[relay.Constant][75] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %807 = reshape(%805, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %808 = reshape(%806, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %809 = @func_554(%807, %808) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %810 = cast(meta[relay.Constant][74] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %811 = %809.2;
  %812 = cast(%811, dtype="float64") /* ty=Tensor[(156), float64] */;
  %813 = reshape(%810, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %814 = reshape(%812, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %815 = @func_554(%813, %814) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %816 = cast(%var_652, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
  %817 = log2(%816) /* ty=Tensor[(10, 12, 3), float64] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
  %819 = cast(meta[relay.Constant][75] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %820 = reshape(%819, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
  %821 = cast(%811, dtype="float64") /* ty=Tensor[(156), float64] */;
  %822 = reshape(%821, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
  %823 = cast(%var_652, dtype="int32") /* ty=Tensor[(10, 12, 3), int32] */;
  %824 = shape_of(%817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%817, dtype="int32") /* ty=Tensor[(10, 12, 3), int32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %827 = %815.3;
  %828 = atanh(%818) /* ty=Tensor[(10, 12, 3), float64] */;
  %829 = @func_146(%820) /* ty=Tensor[(13, 4, 3), uint16] */;
  %830 = @func_146(%822) /* ty=Tensor[(13, 4, 3), uint16] */;
  %831 = logical_xor(%825, %826) /* ty=Tensor[(10, 12, 3), int32] */;
  (%811, meta[relay.Constant][74] /* ty=Tensor[(150), float64] */, meta[relay.Constant][75] /* ty=Tensor[(156), float64] */, %827, %828, %829, %830, %831)
}

def @func_2399(%var_2381: Tensor[(3, 1, 11), float64]) -> (Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) {
  %832 = cast(%var_2381, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %833 = cast(meta[relay.Constant][76] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %834 = reshape(%833, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
  %835 = atan(%832) /* ty=Tensor[(3, 1, 11), float64] */;
  %836 = @func_2172(%834) /* ty=Tensor[(4, 15, 13), float32] */;
  (%835, %836, meta[relay.Constant][76] /* ty=Tensor[(780), float32] */)
}

def @func_10995() -> Tensor[(16, 3, 16), float32] {
  %837 = @func_10037() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %837.0
}

def @func_11296() -> (Tensor[(16, 3, 16), float32],) {
  %838 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
  (%838,)
}

def @func_11907() -> (Tensor[(15, 1, 6), float64],) {
  %839 = cast(meta[relay.Constant][77] /* ty=Tensor[(15, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
  %840 = sin(%839) /* ty=Tensor[(15, 1, 6), float64] */;
  (%840,)
}

def @func_4713(%var_4699: Tensor[(10, 10, 3), float32]) -> (Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) {
  %841 = cast(%var_4699, dtype="float32") /* ty=Tensor[(10, 10, 3), float32] */;
  %842 = cast(meta[relay.Constant][78] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %843 = reshape(%842, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %844 = @func_689(%843) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %845 = tan(%841) /* ty=Tensor[(10, 10, 3), float32] */;
  %846 = %844.4;
  (%845, %846, meta[relay.Constant][78] /* ty=Tensor[(360), float64] */)
}

def @func_10924(%var_10884: Tensor[(16, 16, 15), float64], %var_10893: Tensor[(480), uint8], %var_10904: Tensor[(640), float32]) -> (Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], Tensor[(16, 10, 4), float32], Tensor[(640), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 260), float32], Tensor[(16, 16, 15), int8]) {
  %847 = cast(%var_10893, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %848 = reshape(%847, newshape=[12, 4, 10]) /* ty=Tensor[(12, 4, 10), uint8] */;
  %849 = @func_3837(%848) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) */;
  %850 = cast(%var_10904, dtype="float32") /* ty=Tensor[(640), float32] */;
  %851 = reshape(%850, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float32] */;
  %852 = @func_3296(%851) /* ty=(Tensor[(16, 10, 4), float32],) */;
  %853 = @func_9177() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
  %854 = cast(%var_10884, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  %855 = rsqrt(%854) /* ty=Tensor[(16, 16, 15), float64] */;
  %856 = cast(%var_10884, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %857 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %858 = cast(%855, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %860 = greater(%858, %859) /* ty=Tensor[(16, 16, 15), bool] */;
  %861 = cast(%855, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %865 = logical_and(%863, %864) /* ty=Tensor[(16, 16, 15), bool] */;
  %866 = cast(%var_10884, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %870 = %849.0;
  %871 = %852.0;
  %872 = @func_10102() /* ty=Tensor[(16, 3, 16), float32] */;
  %873 = %853.2;
  %874 = multiply(%868, %869) /* ty=Tensor[(16, 16, 15), int8] */;
  (%870, %var_10893, %871, %var_10904, %872, %873, %874)
}

def @func_9612() -> Tensor[(16, 3, 16), float32] {
  %875 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %875.2
}

def @func_4204(%var_4196: Tensor[(15, 6, 15), float32]) -> (Tensor[(15, 6, 15), float32],) {
  %876 = cast(%var_4196, dtype="float32") /* ty=Tensor[(15, 6, 15), float32] */;
  %877 = asin(%876) /* ty=Tensor[(15, 6, 15), float32] */;
  (%877,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10403() -> (Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) {
  %18 = fn () -> (Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) {
    %0 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
    %1 = cast(%0, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %3 = reshape(%2, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
    %4 = @func_4713(%3) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
    %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %7 = reshape(%5, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
    %8 = reshape(%6, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
    %9 = @func_2429(%7, %8) /* ty=(Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) */;
    %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %11 = reshape(%10, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), float32] */;
    %12 = @func_4204(%11) /* ty=(Tensor[(15, 6, 15), float32],) */;
    %13 = rsqrt(%1) /* ty=Tensor[(16, 3, 16), float64] */;
    %14 = %4.0;
    %15 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
    %16 = %9.1;
    %17 = %12.0;
    (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(50, 6), float32] */, %15, %16, meta[relay.Constant][1] /* ty=Tensor[(360), float64] */, %17, meta[relay.Constant][2] /* ty=Tensor[(1350), float32] */)
  };
  %18() /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */
}

def @func_2031(%var_2029: Tensor[(8, 1, 10), float32]) -> (Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) {
  @func_2028(%var_2029) /* ty=(Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) */
}

def @func_12088(%var_12086: Tensor[(2, 6, 11), int16]) -> Tensor[(2, 6, 11), int16] {
  @func_12085(%var_12086) /* ty=Tensor[(2, 6, 11), int16] */
}

def @func_12138(%var_12096: Tensor[(16, 3, 16), float32]) -> (Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(16, 3, 16), float32]) {
  %19 = @func_11859() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */;
  %20 = %19.2;
  %21 = cast(%var_12096, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="int8") /* ty=Tensor[(16, 3, 16), int8] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %25 = @func_11349() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */;
  %26 = minimum(%23, %24) /* ty=Tensor[(16, 3, 16), int8] */;
  %27 = @func_10995() /* ty=Tensor[(16, 3, 16), float32] */;
  %28 = @func_10432() /* ty=Tensor[(360), float64] */;
  %29 = %25.0;
  (%26, %27, %28, %29)
}

def @func_2890(%var_2829: Tensor[(6, 7, 8), int16], %var_2830: Tensor[(6, 7, 8), int16], %var_2851: float32) -> (Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) {
  %30 = cast(%var_2830, dtype="int16") /* ty=Tensor[(6, 7, 8), int16] */;
  %31 = shape_of(%var_2829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_2829, dtype="int16") /* ty=Tensor[(6, 7, 8), int16] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %34 = cast(%var_2851, dtype="float32") /* ty=float32 */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %36 = reshape(%34, newshape=[]) /* ty=float32 */;
  %37 = reshape(%35, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %38 = cast(%var_2829, dtype="float64") /* ty=Tensor[(6, 7, 8), float64] */;
  %39 = atanh(%38) /* ty=Tensor[(6, 7, 8), float64] */;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(6, 7, 8), float32] */;
  %41 = atan(%40) /* ty=Tensor[(6, 7, 8), float32] */;
  %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 7, 8), float32] */, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(6, 7, 8), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %46 = logical_xor(%32, %33) /* ty=Tensor[(6, 7, 8), int16] */;
  %47 = @func_2598(%36, %37) /* ty=Tensor[(4, 12, 5), float32] */;
  %48 = equal(%44, %45) /* ty=Tensor[(6, 7, 8), bool] */;
  (%46, %47, %var_2851, meta[relay.Constant][3] /* ty=Tensor[(8, 30), float32] */, %48)
}

def @func_9995() -> (Tensor[(16, 3, 16), float32],) {
  %51 = fn () -> (Tensor[(16, 3, 16), float32],) {
    %49 = @func_9118() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %50 = %49.0;
    (%50,)
  };
  %51() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_10417() -> Tensor[(16, 3, 16), float32] {
  %53 = fn () -> Tensor[(16, 3, 16), float32] {
    %52 = @func_10037() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %52.0
  };
  %53() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_3296(%var_3288: Tensor[(16, 10, 4), float32]) -> (Tensor[(16, 10, 4), float32],) {
  %54 = cast(%var_3288, dtype="float32") /* ty=Tensor[(16, 10, 4), float32] */;
  %55 = exp(%54) /* ty=Tensor[(16, 10, 4), float32] */;
  (%55,)
}

def @func_10995() -> Tensor[(16, 3, 16), float32] {
  %56 = @func_10037() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %56.0
}

def @func_5420(%var_5418: Tensor[(15, 4, 8), float32]) -> (Tensor[(15, 4, 8), float32],) {
  @func_5417(%var_5418) /* ty=(Tensor[(15, 4, 8), float32],) */
}

def @func_10599(%var_10597: Tensor[(12, 15, 2), uint64], %var_10598: Tensor[(12, 15, 2), uint64]) -> (Tensor[(12, 15, 2), uint64],) {
  %62 = fn (%var_10589: Tensor[(12, 15, 2), uint64], %var_10590: Tensor[(12, 15, 2), uint64]) -> (Tensor[(12, 15, 2), uint64],) {
    %57 = cast(%var_10590, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
    %58 = shape_of(%var_10589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %59 = cast(%var_10589, dtype="uint64") /* ty=Tensor[(12, 15, 2), uint64] */;
    %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %61 = right_shift(%59, %60) /* ty=Tensor[(12, 15, 2), uint64] */;
    (%61,)
  };
  %62(%var_10597, %var_10598) /* ty=(Tensor[(12, 15, 2), uint64],) */
}

def @func_7607() -> Tensor[(16, 3, 16), float32] {
  @func_7605() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_9040(%var_9038: Tensor[(9, 4, 15), float32], %var_9039: Tensor[(9, 4, 15), float32]) -> (Tensor[(9, 4, 15), bool], Tensor[(5, 3, 3), float32], Tensor[(45), float64], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) {
  @func_9036(%var_9038, %var_9039) /* ty=(Tensor[(9, 4, 15), bool], Tensor[(5, 3, 3), float32], Tensor[(45), float64], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */
}

def @func_9748(%var_9743: Tensor[(150), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(80), float32], Tensor[(150), bool]) {
  %63 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %65 = cast(meta[relay.Constant][6] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
  %66 = cast(meta[relay.Constant][7] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %67 = reshape(%64, newshape=[360]) /* ty=Tensor[(360), float64] */;
  %68 = reshape(%65, newshape=[80]) /* ty=Tensor[(80), float32] */;
  %69 = reshape(%66, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %70 = @func_7706(%67, %68, %69) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(13, 4, 3), uint16], Tensor[(15, 9), float32], Tensor[(360), float64], Tensor[(33), int64], Tensor[(80), float32], Tensor[(9, 4, 8), float64], Tensor[(24, 12), float64], Tensor[(16, 3, 16), float32], Tensor[(6, 5, 5), float64], Tensor[(150), float64]) */;
  %71 = cast(%var_9743, dtype="bool") /* ty=Tensor[(150), bool] */;
  %72 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(150), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(150), float64] */, dtype="bool") /* ty=Tensor[(150), bool] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?), bool] */;
  %75 = %63.0;
  %76 = %70.8;
  %77 = logical_or(%73, %74) /* ty=Tensor[(150), bool] */;
  (%75, %76, meta[relay.Constant][5] /* ty=Tensor[(360), float64] */, meta[relay.Constant][6] /* ty=Tensor[(80), float32] */, %77)
}

def @func_9441() -> (Tensor[(16, 3, 16), float32],) {
  %80 = fn () -> (Tensor[(16, 3, 16), float32],) {
    %78 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %79 = %78.0;
    (%79,)
  };
  %80() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_7664(%var_7633: Tensor[(66), float32]) -> (Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float64]) {
  %81 = cast(%var_7633, dtype="float32") /* ty=Tensor[(66), float32] */;
  %82 = reshape(%81, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
  %83 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %84 = cast(8.95901f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %85 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %86 = reshape(%84, newshape=[]) /* ty=float32 */;
  %87 = reshape(%85, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %88 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %89 = %88.0;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %91 = log10(%90) /* ty=Tensor[(16, 3, 16), float32] */;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
  %93 = @func_5750(%82) /* ty=Tensor[(6, 11, ?), uint16] */;
  %94 = %83.0;
  %95 = @func_2598(%86, %87) /* ty=Tensor[(4, 12, 5), float32] */;
  %96 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
  %97 = atanh(%92) /* ty=Tensor[(16, 3, 16), float64] */;
  (%93, %var_7633, %94, %95, 8.95901f /* ty=float32 */, meta[relay.Constant][8] /* ty=Tensor[(240), float32] */, %96, %97)
}

def @func_8480(%var_8478: Tensor[(42), uint32], %var_8479: Tensor[(360), float64]) -> (Tensor[(480), float32], Tensor[(33), float64], Tensor[(13, 4, 3), uint16], Tensor[(135), float32], Tensor[(360), float64], Tensor[(480), float32], Tensor[(33, ?), bool], Tensor[(33, 42), uint16], Tensor[(14, ?, 3), bool]) {
  @func_8476(%var_8478, %var_8479) /* ty=(Tensor[(480), float32], Tensor[(33), float64], Tensor[(13, 4, 3), uint16], Tensor[(135), float32], Tensor[(360), float64], Tensor[(480), float32], Tensor[(33, ?), bool], Tensor[(33, 42), uint16], Tensor[(14, ?, 3), bool]) */
}

def @func_6013(%var_5997: Tensor[(7, 10, 11), float32], %var_6008: Tensor[(360), float64]) -> (Tensor[(7, 10, 11), float32], Tensor[(3, 9, 5), float32], Tensor[(135), float32], Tensor[(360), float64]) {
  %98 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %99 = shape_of(%var_5997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%var_5997, dtype="float32") /* ty=Tensor[(7, 10, 11), float32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %102 = cast(meta[relay.Constant][10] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %103 = cast(%var_6008, dtype="float64") /* ty=Tensor[(360), float64] */;
  %104 = reshape(%102, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
  %105 = reshape(%103, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %106 = @func_1602(%104, %105) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
  %107 = floor_divide(%100, %101) /* ty=Tensor[(7, 10, 11), float32] */;
  %108 = %106.0;
  (%107, %108, meta[relay.Constant][10] /* ty=Tensor[(135), float32] */, %var_6008)
}

def @func_2895(%var_2892: Tensor[(6, 7, 8), int16], %var_2893: Tensor[(6, 7, 8), int16], %var_2894: float32) -> (Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) {
  @func_2890(%var_2892, %var_2893, %var_2894) /* ty=(Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) */
}

def @func_10997() -> Tensor[(16, 3, 16), float32] {
  @func_10995() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_4623(%var_4622: Tensor[(13, 10, 10), float32]) -> (Tensor[(13, 10, 10), float32], Tensor[(9, 4, 8), float64], Tensor[(288), float64]) {
  %115 = fn (%var_4580: Tensor[(13, 10, 10), float32]) -> (Tensor[(13, 10, 10), float32], Tensor[(9, 4, 8), float64], Tensor[(288), float64]) {
    %109 = cast(%var_4580, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    %110 = cast(meta[relay.Constant][11] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %111 = reshape(%110, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float64] */;
    %112 = @func_3266(%111) /* ty=(Tensor[(9, 4, 8), float64],) */;
    %113 = atanh(%109) /* ty=Tensor[(13, 10, 10), float32] */;
    %114 = %112.0;
    (%113, %114, meta[relay.Constant][11] /* ty=Tensor[(288), float64] */)
  };
  %115(%var_4622) /* ty=(Tensor[(13, 10, 10), float32], Tensor[(9, 4, 8), float64], Tensor[(288), float64]) */
}

def @func_6633(%var_6631: Tensor[(11, 6, 11), float64], %var_6632: uint32) -> (Tensor[(11, 6, 11), float64], Tensor[(4, 5, 8), uint32], uint32, Tensor[(160), uint32]) {
  %124 = fn (%var_6605: Tensor[(11, 6, 11), float64], %var_6623: uint32) -> (Tensor[(11, 6, 11), float64], Tensor[(4, 5, 8), uint32], uint32, Tensor[(160), uint32]) {
    %116 = cast(%var_6605, dtype="float64") /* ty=Tensor[(11, 6, 11), float64] */;
    %117 = cast(%var_6623, dtype="uint32") /* ty=uint32 */;
    %118 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), uint32] */, dtype="uint32") /* ty=Tensor[(160), uint32] */;
    %119 = reshape(%117, newshape=[]) /* ty=uint32 */;
    %120 = reshape(%118, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint32] */;
    %121 = @func_5274(%119, %120) /* ty=(Tensor[(4, 5, 8), uint32],) */;
    %122 = sqrt(%116) /* ty=Tensor[(11, 6, 11), float64] */;
    %123 = %121.0;
    (%122, %123, %var_6623, meta[relay.Constant][12] /* ty=Tensor[(160), uint32] */)
  };
  %124(%var_6631, %var_6632) /* ty=(Tensor[(11, 6, 11), float64], Tensor[(4, 5, 8), uint32], uint32, Tensor[(160), uint32]) */
}

def @func_9853() -> (Tensor[(16, 3, 16), float32], Tensor[(10, 10, 3), float32], Tensor[(1, 300), float32]) {
  %125 = @func_9118() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %128 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 300), float32] */, dtype="float32") /* ty=Tensor[(1, 300), float32] */;
  %129 = reshape(%128, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
  %130 = @func_4713(%129) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
  %131 = erf(%127) /* ty=Tensor[(16, 3, 16), float32] */;
  %132 = %130.0;
  (%131, %132, meta[relay.Constant][13] /* ty=Tensor[(1, 300), float32] */)
}

def @func_9227(%var_9211: Tensor[(7, 3, 2), float64]) -> (Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64]) {
  %133 = cast(%var_9211, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %134 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(7, 3, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 3, 2), float64] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 3, 2), float64] */, dtype="int8") /* ty=Tensor[(7, 3, 2), int8] */;
  %138 = shape_of(%var_9211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_9211, dtype="int8") /* ty=Tensor[(7, 3, 2), int8] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %141 = bitwise_xor(%139, %140) /* ty=Tensor[(7, 3, 2), int8] */;
  %142 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 3, 2), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %146 = equal(%135, %136) /* ty=Tensor[(7, 3, 2), bool] */;
  %147 = floor_divide(%144, %145) /* ty=Tensor[(7, 3, 2), float64] */;
  (%146, %147)
}

def @func_8325(%var_8322: Tensor[(360), bool], %var_8323: Tensor[(156), float64], %var_8324: Tensor[(6, 14, 10), float64]) -> (Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(1, 150), float64], Tensor[(156), float64], Tensor[(6, 14, 10), uint32]) {
  %169 = fn (%var_8308: Tensor[(360), bool], %var_8310: Tensor[(156), float64], %var_8312: Tensor[(6, 14, 10), float64]) -> (Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(1, 150), float64], Tensor[(156), float64], Tensor[(6, 14, 10), uint32]) {
    %148 = cast(meta[relay.Constant][15] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
    %149 = cast(meta[relay.Constant][15] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
    %150 = cast(%var_8308, dtype="bool") /* ty=Tensor[(360), bool] */;
    %151 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 150), float64] */, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
    %152 = cast(%var_8310, dtype="float64") /* ty=Tensor[(156), float64] */;
    %153 = reshape(%148, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
    %154 = reshape(%149, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
    %155 = reshape(%150, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
    %156 = reshape(%151, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %157 = reshape(%152, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %158 = @func_3617(%153, %154, %155, %156, %157) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
    %159 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 10), float64] */;
    %160 = cosh(%159) /* ty=Tensor[(6, 14, 10), float64] */;
    %161 = cast(%160, dtype="float64") /* ty=Tensor[(6, 14, 10), float64] */;
    %162 = acos(%161) /* ty=Tensor[(6, 14, 10), float64] */;
    %163 = cast(%var_8312, dtype="uint32") /* ty=Tensor[(6, 14, 10), uint32] */;
    %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%162, dtype="uint32") /* ty=Tensor[(6, 14, 10), uint32] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %167 = %158.5;
    %168 = left_shift(%165, %166) /* ty=Tensor[(6, 14, 10), uint32] */;
    (%167, meta[relay.Constant][15] /* ty=Tensor[(2816), int8] */, %var_8308, meta[relay.Constant][16] /* ty=Tensor[(1, 150), float64] */, %var_8310, %168)
  };
  %169(%var_8322, %var_8323, %var_8324) /* ty=(Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(1, 150), float64], Tensor[(156), float64], Tensor[(6, 14, 10), uint32]) */
}

def @func_11092(%var_11083: Tensor[(726), float64], %var_11084: uint32) -> (Tensor[(360), float64], Tensor[(726, 1), float64], Tensor[(726), float64], uint32) {
  %170 = cast(%var_11083, dtype="float64") /* ty=Tensor[(726), float64] */;
  %171 = cast(%var_11084, dtype="uint32") /* ty=uint32 */;
  %172 = reshape(%170, newshape=[726, 1]) /* ty=Tensor[(726, 1), float64] */;
  %173 = reshape(%171, newshape=[]) /* ty=uint32 */;
  %174 = @func_9297(%172, %173) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) */;
  %175 = @func_10432() /* ty=Tensor[(360), float64] */;
  %176 = %174.2;
  (%175, %176, %var_11083, %var_11084)
}

def @func_9337() -> Tensor[(16, 3, 16), float32] {
  %177 = fn () -> Tensor[(16, 3, 16), float32] {
    @func_8614() /* ty=Tensor[(16, 3, 16), float32] */
  };
  %177() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_12085(%var_12080: Tensor[(2, 6, 11), int16]) -> Tensor[(2, 6, 11), int16] {
  %178 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 6, 11), int16] */, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %179 = shape_of(%var_12080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_12080, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%180, %181) /* ty=Tensor[(2, 6, 11), int16] */
}

def @func_2402(%var_2400: Tensor[(3, 1, 11), float64]) -> (Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) {
  @func_2399(%var_2400) /* ty=(Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) */
}

def @func_9230(%var_9228: Tensor[(7, 3, 2), float64]) -> (Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64]) {
  @func_9227(%var_9228) /* ty=(Tensor[(7, 3, 2), bool], Tensor[(7, 3, 2), float64]) */
}

def @func_4716(%var_4714: Tensor[(10, 10, 3), float32]) -> (Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) {
  @func_4713(%var_4714) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */
}

def @func_3354(%var_3352: Tensor[(14, 1, 3), uint32], %var_3353: Tensor[(33, 1), float64]) -> (Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) {
  %191 = fn (%var_3336: Tensor[(14, 1, 3), uint32], %var_3344: Tensor[(33, 1), float64]) -> (Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) {
    %182 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 1, 3), uint32] */, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
    %183 = shape_of(%var_3336, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%var_3336, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %186 = cast(%var_3344, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
    %187 = reshape(%186, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), float64] */;
    %188 = @func_2399(%187) /* ty=(Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) */;
    %189 = less_equal(%184, %185) /* ty=Tensor[(14, ?, 3), bool] */;
    %190 = %188.0;
    (%189, %190, %var_3344)
  };
  %191(%var_3352, %var_3353) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */
}

def @func_11907() -> (Tensor[(15, 1, 6), float64],) {
  %192 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
  %193 = sin(%192) /* ty=Tensor[(15, 1, 6), float64] */;
  (%193,)
}

def @func_9572(%var_9540: Tensor[(297), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(297), float64]) {
  %194 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 33), int64] */, dtype="int64") /* ty=Tensor[(1, 33), int64] */;
  %195 = cast(%var_9540, dtype="int64") /* ty=Tensor[(297), int64] */;
  %196 = reshape(%194, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
  %197 = reshape(%195, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
  %198 = @func_321(%196, %197) /* ty=(Tensor[(3, 9, 11), float64],) */;
  %199 = cast(%var_9540, dtype="float64") /* ty=Tensor[(297), float64] */;
  %200 = atanh(%199) /* ty=Tensor[(297), float64] */;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(297), float64] */;
  %202 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %203 = %198.0;
  %204 = asinh(%201) /* ty=Tensor[(297), float64] */;
  (%202, %203, meta[relay.Constant][21] /* ty=Tensor[(1, 33), int64] */, %204)
}

def @func_5417(%var_5412: Tensor[(15, 4, 8), float32]) -> (Tensor[(15, 4, 8), float32],) {
  %205 = cast(%var_5412, dtype="float32") /* ty=Tensor[(15, 4, 8), float32] */;
  %206 = log10(%205) /* ty=Tensor[(15, 4, 8), float32] */;
  (%206,)
}

def @func_2601(%var_2599: float32, %var_2600: Tensor[(4, 12, 5), float32]) -> Tensor[(4, 12, 5), float32] {
  %209 = fn (%var_2587: float32, %var_2588: Tensor[(4, 12, 5), float32]) -> Tensor[(4, 12, 5), float32] {
    %207 = cast(%var_2587, dtype="float32") /* ty=float32 */;
    %208 = cast(%var_2588, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
    divide(%207, %208) /* ty=Tensor[(4, 12, 5), float32] */
  };
  %209(%var_2599, %var_2600) /* ty=Tensor[(4, 12, 5), float32] */
}

def @func_8476(%var_8396: Tensor[(42), uint32], %var_8406: Tensor[(360), float64]) -> (Tensor[(480), float32], Tensor[(33), float64], Tensor[(13, 4, 3), uint16], Tensor[(135), float32], Tensor[(360), float64], Tensor[(480), float32], Tensor[(33, ?), bool], Tensor[(33, 42), uint16], Tensor[(14, ?, 3), bool]) {
  %210 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %211 = cast(meta[relay.Constant][23] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %212 = cast(%var_8406, dtype="float64") /* ty=Tensor[(360), float64] */;
  %213 = reshape(%211, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
  %214 = reshape(%212, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
  %215 = @func_1602(%213, %214) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
  %216 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %217 = cast(%var_8396, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %218 = cast(meta[relay.Constant][22] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %219 = reshape(%217, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %220 = reshape(%218, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %221 = @func_3351(%219, %220) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %222 = %221.2;
  %223 = cast(meta[relay.Constant][24] /* ty=Tensor[(33, 1), float64] */, dtype="bool") /* ty=Tensor[(33, 1), bool] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(2), int32] */;
  %225 = cast(%222, dtype="bool") /* ty=Tensor[(33, 1), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %227 = cast(%var_8396, dtype="uint16") /* ty=Tensor[(42), uint16] */;
  %228 = cast(meta[relay.Constant][24] /* ty=Tensor[(33, 1), float64] */, dtype="uint16") /* ty=Tensor[(33, 1), uint16] */;
  %229 = cast(%var_8396, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %230 = cast(meta[relay.Constant][24] /* ty=Tensor[(33, 1), float64] */, dtype="float64") /* ty=Tensor[(33, 1), float64] */;
  %231 = reshape(%229, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %232 = reshape(%230, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %233 = @func_3351(%231, %232) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %234 = %210.0;
  %235 = %215.1;
  %236 = %216.0;
  %237 = equal(%225, %226) /* ty=Tensor[(33, ?), bool] */;
  %238 = add(%227, %228) /* ty=Tensor[(33, 42), uint16] */;
  %239 = %233.0;
  (%234, meta[relay.Constant][22] /* ty=Tensor[(33), float64] */, %235, meta[relay.Constant][23] /* ty=Tensor[(135), float32] */, %var_8406, %236, %237, %238, %239)
}

def @func_8285() -> (Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) {
  %251 = fn () -> (Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) {
    %240 = @func_8188() /* ty=(Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) */;
    %241 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %242 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 33), int64] */, dtype="int64") /* ty=Tensor[(1, 33), int64] */;
    %243 = cast(meta[relay.Constant][26] /* ty=Tensor[(99, 3), int64] */, dtype="int64") /* ty=Tensor[(99, 3), int64] */;
    %244 = reshape(%242, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
    %245 = reshape(%243, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
    %246 = @func_321(%244, %245) /* ty=(Tensor[(3, 9, 11), float64],) */;
    %247 = %240.2;
    %248 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
    %249 = %241.0;
    %250 = %246.0;
    (%247, %248, %249, %250, meta[relay.Constant][25] /* ty=Tensor[(1, 33), int64] */, meta[relay.Constant][26] /* ty=Tensor[(99, 3), int64] */)
  };
  %251() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */
}

def @func_8728() -> (Tensor[(16, 3, 16), float32], Tensor[(10, 12, 3), float64], Tensor[(300), float32]) {
  %252 = cast(meta[relay.Constant][27] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %253 = reshape(%252, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
  %254 = @func_4713(%253) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
  %255 = @func_8614() /* ty=Tensor[(16, 3, 16), float32] */;
  %256 = %254.1;
  (%255, %256, meta[relay.Constant][27] /* ty=Tensor[(300), float32] */)
}

def @main() -> (Tensor[(16, 3, 16), float32], Tensor[(5, 260), float32]) {
  %257 = @func_9441() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %258 = @func_9178() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
  %259 = %258.2;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(5, 260), float32] */;
  %261 = %257.0;
  %262 = sin(%260) /* ty=Tensor[(5, 260), float32] */;
  (%261, %262)
}

def @func_11379() -> Tensor[(?, 33), uint16] {
  @func_11377() /* ty=Tensor[(?, 33), uint16] */
}

def @func_11963() -> (Tensor[(16, 3, 16), float32],) {
  %264 = fn () -> (Tensor[(16, 3, 16), float32],) {
    %263 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
    (%263,)
  };
  %264() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_3268(%var_3267: Tensor[(9, 4, 8), float64]) -> (Tensor[(9, 4, 8), float64],) {
  %267 = fn (%var_3262: Tensor[(9, 4, 8), float64]) -> (Tensor[(9, 4, 8), float64],) {
    %265 = cast(%var_3262, dtype="float64") /* ty=Tensor[(9, 4, 8), float64] */;
    %266 = sinh(%265) /* ty=Tensor[(9, 4, 8), float64] */;
    (%266,)
  };
  %267(%var_3267) /* ty=(Tensor[(9, 4, 8), float64],) */
}

def @func_8616() -> Tensor[(16, 3, 16), float32] {
  @func_8614() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_11377() -> Tensor[(?, 33), uint16] {
  %268 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %269 = %268.4;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(1, 33), float64] */;
  %271 = atan(%270) /* ty=Tensor[(1, 33), float64] */;
  %272 = cast(%269, dtype="uint16") /* ty=Tensor[(1, 33), uint16] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(2), int32] */;
  %274 = cast(%271, dtype="uint16") /* ty=Tensor[(1, 33), uint16] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  right_shift(%274, %275) /* ty=Tensor[(?, 33), uint16] */
}

def @func_12337() -> Tensor[(16, 3, 16), float32] {
  %276 = fn () -> Tensor[(16, 3, 16), float32] {
    @func_9336() /* ty=Tensor[(16, 3, 16), float32] */
  };
  %276() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_11350() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %281 = fn () -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
    %277 = @func_10455() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %278 = @func_9440() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %279 = %277.0;
    %280 = %278.0;
    (%279, %280)
  };
  %281() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */
}

def @func_8667(%var_8652: Tensor[(16, 3, 16), bool], %var_8663: Tensor[(300), float32]) -> (Tensor[(16, 3, 16), bool], Tensor[(360), float64], Tensor[(300), float32]) {
  %282 = @func_8188() /* ty=(Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) */;
  %283 = %282.0;
  %284 = cast(%var_8652, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = cast(%var_8663, dtype="float32") /* ty=Tensor[(300), float32] */;
  %289 = reshape(%288, newshape=[10, 10, 3]) /* ty=Tensor[(10, 10, 3), float32] */;
  %290 = @func_4713(%289) /* ty=(Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) */;
  %291 = greater(%286, %287) /* ty=Tensor[(16, 3, 16), bool] */;
  %292 = %290.2;
  (%291, %292, %var_8663)
}

def @func_9118() -> (Tensor[(16, 3, 16), float32],) {
  %293 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
  (%293,)
}

def @func_9036(%var_8987: Tensor[(9, 4, 15), float32], %var_8988: Tensor[(9, 4, 15), float32]) -> (Tensor[(9, 4, 15), bool], Tensor[(5, 3, 3), float32], Tensor[(45), float64], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) {
  %294 = cast(%var_8988, dtype="bool") /* ty=Tensor[(9, 4, 15), bool] */;
  %295 = shape_of(%var_8987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%var_8987, dtype="bool") /* ty=Tensor[(9, 4, 15), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = cast(meta[relay.Constant][28] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %299 = reshape(%298, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
  %300 = @func_6527(%299) /* ty=(Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) */;
  %301 = cast(-4.90014f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %302 = cast(meta[relay.Constant][29] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %303 = reshape(%301, newshape=[]) /* ty=float32 */;
  %304 = reshape(%302, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %305 = cast(meta[relay.Constant][30] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %306 = reshape(%305, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), float32] */;
  %307 = @func_4204(%306) /* ty=(Tensor[(15, 6, 15), float32],) */;
  %308 = greater_equal(%296, %297) /* ty=Tensor[(9, 4, 15), bool] */;
  %309 = %300.2;
  %310 = @func_2598(%303, %304) /* ty=Tensor[(4, 12, 5), float32] */;
  %311 = %307.0;
  (%308, %309, meta[relay.Constant][28] /* ty=Tensor[(45), float64] */, %310, -4.90014f /* ty=float32 */, meta[relay.Constant][29] /* ty=Tensor[(240), float32] */, %311, meta[relay.Constant][30] /* ty=Tensor[(1350), float32] */)
}

def @func_4207(%var_4205: Tensor[(15, 6, 15), float32]) -> (Tensor[(15, 6, 15), float32],) {
  @func_4204(%var_4205) /* ty=(Tensor[(15, 6, 15), float32],) */
}

def @func_8730() -> (Tensor[(16, 3, 16), float32], Tensor[(10, 12, 3), float64], Tensor[(300), float32]) {
  @func_8728() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(10, 12, 3), float64], Tensor[(300), float32]) */
}

def @func_10037() -> (Tensor[(16, 3, 16), float32],) {
  %312 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
  (%312,)
}

def @func_3617(%var_3517: Tensor[(11, 16, 16), int8], %var_3518: Tensor[(11, 16, 16), int8], %var_3546: Tensor[(10, 12, 3), bool], %var_3587: Tensor[(150), float64], %var_3588: Tensor[(156), float64]) -> (Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) {
  %313 = cast(%var_3518, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
  %314 = shape_of(%var_3517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_3517, dtype="int8") /* ty=Tensor[(11, 16, 16), int8] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %317 = cast(%var_3518, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %318 = cast(meta[relay.Constant][31] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
  %319 = cast(meta[relay.Constant][32] /* ty=Tensor[(99, 3), int64] */, dtype="int64") /* ty=Tensor[(99, 3), int64] */;
  %320 = reshape(%318, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
  %321 = reshape(%319, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
  %322 = @func_321(%320, %321) /* ty=(Tensor[(3, 9, 11), float64],) */;
  %323 = cast(%var_3587, dtype="float64") /* ty=Tensor[(150), float64] */;
  %324 = cast(%var_3588, dtype="float64") /* ty=Tensor[(156), float64] */;
  %325 = reshape(%323, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %326 = reshape(%324, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %327 = @func_554(%325, %326) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %328 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 30), float64] */, dtype="float64") /* ty=Tensor[(12, 30), float64] */;
  %329 = reshape(%328, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %330 = @func_689(%329) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %331 = %330.7;
  %332 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 30), float64] */, dtype="bool") /* ty=Tensor[(12, 30), bool] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="bool") /* ty=Tensor[(10, 12, 3), bool] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %336 = less(%334, %335) /* ty=Tensor[(10, 12, 3), bool] */;
  %337 = cast(%var_3546, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="int8") /* ty=Tensor[(10, 12, 3), int8] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %341 = bitwise_or(%339, %340) /* ty=Tensor[(10, 12, 3), int8] */;
  %342 = cast(%341, dtype="float32") /* ty=Tensor[(10, 12, 3), float32] */;
  %343 = bitwise_or(%315, %316) /* ty=Tensor[(11, 16, 16), int8] */;
  %344 = acosh(%317) /* ty=Tensor[(11, 16, 16), float32] */;
  %345 = %322.0;
  %346 = %327.2;
  %347 = acos(%342) /* ty=Tensor[(10, 12, 3), float32] */;
  (%343, %344, %345, meta[relay.Constant][31] /* ty=Tensor[(33), int64] */, meta[relay.Constant][32] /* ty=Tensor[(99, 3), int64] */, %346, %var_3587, %var_3588, %347)
}

def @func_11204(%var_11202: Tensor[(39, 4), float64], %var_11203: Tensor[(726), float64]) -> (Tensor[(360), float64], Tensor[(16, 3, 16), float32], Tensor[(39, 4), float64], Tensor[(160), uint32], Tensor[(726), float64], uint32, Tensor[(16, 3, 16), float32], Tensor[(16, 176), float64], Tensor[(300), float32]) {
  @func_11200(%var_11202, %var_11203) /* ty=(Tensor[(360), float64], Tensor[(16, 3, 16), float32], Tensor[(39, 4), float64], Tensor[(160), uint32], Tensor[(726), float64], uint32, Tensor[(16, 3, 16), float32], Tensor[(16, 176), float64], Tensor[(300), float32]) */
}

def @func_8843(%var_8802: Tensor[(780), float32], %var_8815: Tensor[(2816), int8], %var_8826: Tensor[(45), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(5, 30), float64], Tensor[(39, 4), float64], Tensor[(15, 4, 8), float32], Tensor[(45), float64], Tensor[(4, 15, 13), float64]) {
  %348 = cast(%var_8815, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %349 = cast(%var_8815, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %350 = cast(meta[relay.Constant][34] /* ty=Tensor[(360), bool] */, dtype="bool") /* ty=Tensor[(360), bool] */;
  %351 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 30), float64] */, dtype="float64") /* ty=Tensor[(5, 30), float64] */;
  %352 = cast(meta[relay.Constant][36] /* ty=Tensor[(39, 4), float64] */, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %353 = reshape(%348, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %354 = reshape(%349, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %355 = reshape(%350, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
  %356 = reshape(%351, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %357 = reshape(%352, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %358 = @func_3617(%353, %354, %355, %356, %357) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
  %359 = cast(%var_8826, dtype="float64") /* ty=Tensor[(45), float64] */;
  %360 = reshape(%359, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
  %361 = @func_6527(%360) /* ty=(Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) */;
  %362 = cast(%var_8802, dtype="float32") /* ty=Tensor[(780), float32] */;
  %363 = reshape(%362, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
  %364 = @func_2172(%363) /* ty=Tensor[(4, 15, 13), float32] */;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
  %366 = asinh(%365) /* ty=Tensor[(4, 15, 13), float32] */;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(4, 15, 13), float64] */;
  %368 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %369 = %358.3;
  %370 = %361.0;
  %371 = cos(%367) /* ty=Tensor[(4, 15, 13), float64] */;
  (%368, %var_8802, %369, %var_8815, meta[relay.Constant][34] /* ty=Tensor[(360), bool] */, meta[relay.Constant][35] /* ty=Tensor[(5, 30), float64] */, meta[relay.Constant][36] /* ty=Tensor[(39, 4), float64] */, %370, %var_8826, %371)
}

def @func_9178() -> (Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) {
  %381 = fn () -> (Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) {
    %372 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 260), float32] */, dtype="float32") /* ty=Tensor[(5, 260), float32] */;
    %373 = reshape(%372, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %374 = @func_4621(%373) /* ty=(Tensor[(13, 10, 10), float32], Tensor[(9, 4, 8), float64], Tensor[(288), float64]) */;
    %375 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), int64] */, dtype="int64") /* ty=Tensor[(165), int64] */;
    %376 = reshape(%375, newshape=[5, 33]) /* ty=Tensor[(5, 33), int64] */;
    %377 = @func_9098(%376) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 33), int64]) */;
    %378 = @func_8006() /* ty=Tensor[(16, 3, 16), float32] */;
    %379 = %374.2;
    %380 = %377.2;
    (%378, %379, meta[relay.Constant][37] /* ty=Tensor[(5, 260), float32] */, %380, meta[relay.Constant][38] /* ty=Tensor[(165), int64] */)
  };
  %381() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */
}

def @func_9786(%var_9777: Tensor[(2816), int8], %var_9778: Tensor[(360), bool], %var_9780: Tensor[(156), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) {
  %382 = cast(%var_9777, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %383 = cast(%var_9777, dtype="int8") /* ty=Tensor[(2816), int8] */;
  %384 = cast(%var_9778, dtype="bool") /* ty=Tensor[(360), bool] */;
  %385 = cast(meta[relay.Constant][39] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %386 = cast(%var_9780, dtype="float64") /* ty=Tensor[(156), float64] */;
  %387 = reshape(%382, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %388 = reshape(%383, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
  %389 = reshape(%384, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
  %390 = reshape(%385, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %391 = reshape(%386, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %392 = @func_3617(%387, %388, %389, %390, %391) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
  %393 = cast(meta[relay.Constant][39] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %394 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %395 = %392.5;
  %396 = atan(%393) /* ty=Tensor[(25, 6), float64] */;
  (%394, %395, %var_9777, %var_9778, %var_9780, %396)
}

def @func_10991(%var_10990: Tensor[(16, 3, 16), float32]) -> Tensor[(16, 3, 16), bool] {
  %402 = fn (%var_10976: Tensor[(16, 3, 16), float32]) -> Tensor[(16, 3, 16), bool] {
    %397 = @func_10107() /* ty=Tensor[(16, 3, 16), float32] */;
    %398 = cast(%var_10976, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
    %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%397, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%400, %401) /* ty=Tensor[(16, 3, 16), bool] */
  };
  %402(%var_10990) /* ty=Tensor[(16, 3, 16), bool] */
}

def @func_5277(%var_5275: uint32, %var_5276: Tensor[(4, 5, 8), uint32]) -> (Tensor[(4, 5, 8), uint32],) {
  %406 = fn (%var_5262: uint32, %var_5263: Tensor[(4, 5, 8), uint32]) -> (Tensor[(4, 5, 8), uint32],) {
    %403 = cast(%var_5262, dtype="uint32") /* ty=uint32 */;
    %404 = cast(%var_5263, dtype="uint32") /* ty=Tensor[(4, 5, 8), uint32] */;
    %405 = bitwise_xor(%403, %404) /* ty=Tensor[(4, 5, 8), uint32] */;
    (%405,)
  };
  %406(%var_5275, %var_5276) /* ty=(Tensor[(4, 5, 8), uint32],) */
}

def @func_2028(%var_2000: Tensor[(8, 1, 10), float32]) -> (Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) {
  %407 = cast(%var_2000, dtype="float32") /* ty=Tensor[(8, 1, 10), float32] */;
  %408 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 108), float64] */, dtype="float64") /* ty=Tensor[(2, 108), float64] */;
  %409 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 108), float64] */, dtype="float64") /* ty=Tensor[(2, 108), float64] */;
  %410 = cast(meta[relay.Constant][41] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
  %411 = reshape(%408, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
  %412 = reshape(%409, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
  %413 = reshape(%410, newshape=[11, 3]) /* ty=Tensor[(11, 3), int64] */;
  %414 = @func_1189(%411, %412, %413) /* ty=(Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) */;
  %415 = log(%407) /* ty=Tensor[(8, 1, 10), float32] */;
  %416 = %414.4;
  (%415, %416, meta[relay.Constant][40] /* ty=Tensor[(2, 108), float64] */, meta[relay.Constant][41] /* ty=Tensor[(33), int64] */)
}

def @func_12206() -> (Tensor[(16, 3, 16), float32],) {
  %418 = fn () -> (Tensor[(16, 3, 16), float32],) {
    %417 = @func_8006() /* ty=Tensor[(16, 3, 16), float32] */;
    (%417,)
  };
  %418() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_11860() -> (Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %423 = fn () -> (Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
    %419 = @func_8188() /* ty=(Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) */;
    %420 = %419.2;
    %421 = @func_8614() /* ty=Tensor[(16, 3, 16), float32] */;
    %422 = @func_10416() /* ty=Tensor[(16, 3, 16), float32] */;
    (%420, %421, %422)
  };
  %423() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */
}

def @func_11470(%var_11469: Tensor[(297), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(297), int64], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %442 = fn (%var_11432: Tensor[(297), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(297), int64], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
    %424 = cast(meta[relay.Constant][42] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %425 = reshape(%424, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
    %426 = @func_10455() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %427 = @func_10402() /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */;
    %428 = cast(meta[relay.Constant][43] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
    %429 = cast(%var_11432, dtype="int64") /* ty=Tensor[(297), int64] */;
    %430 = reshape(%428, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
    %431 = reshape(%429, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
    %432 = @func_321(%430, %431) /* ty=(Tensor[(3, 9, 11), float64],) */;
    %433 = @func_10257() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %434 = @func_9853() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(10, 10, 3), float32], Tensor[(1, 300), float32]) */;
    %435 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
    %436 = @func_146(%425) /* ty=Tensor[(13, 4, 3), uint16] */;
    %437 = %426.0;
    %438 = %427.4;
    %439 = %432.0;
    %440 = %433.0;
    %441 = %434.0;
    (%435, %436, meta[relay.Constant][42] /* ty=Tensor[(156), float64] */, %437, %438, %439, meta[relay.Constant][43] /* ty=Tensor[(33), int64] */, %var_11432, %440, %441)
  };
  %442(%var_11469) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(297), int64], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */
}

def @func_9297(%var_9294: Tensor[(726, 1), float64], %var_9295: uint32) -> (Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) {
  %443 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %444 = cast(%var_9294, dtype="float64") /* ty=Tensor[(726, 1), float64] */;
  %445 = cast(%var_9295, dtype="uint32") /* ty=uint32 */;
  %446 = reshape(%444, newshape=[11, 6, 11]) /* ty=Tensor[(11, 6, 11), float64] */;
  %447 = reshape(%445, newshape=[]) /* ty=uint32 */;
  %448 = @func_6630(%446, %447) /* ty=(Tensor[(11, 6, 11), float64], Tensor[(4, 5, 8), uint32], uint32, Tensor[(160), uint32]) */;
  %449 = %443.0;
  %450 = %448.3;
  (%449, %450, %var_9294, %var_9295)
}

def @func_11298() -> (Tensor[(16, 3, 16), float32],) {
  @func_11296() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_1606(%var_1604: Tensor[(3, 9, 5), float32], %var_1605: Tensor[(1, 360), float64]) -> (Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) {
  @func_1602(%var_1604, %var_1605) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */
}

def @func_9494() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  @func_9492() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */
}

def @func_8568() -> Tensor[(16, 3, 16), float32] {
  @func_8566() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_8188() -> (Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) {
  %451 = @func_7564() /* ty=Tensor[(16, 3, 16), float32] */;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %453 = log2(%452) /* ty=Tensor[(16, 3, 16), float32] */;
  %454 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 3, 16), float32] */, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %455 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%453, dtype="bool") /* ty=Tensor[(16, 3, 16), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %458 = cast(meta[relay.Constant][45] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %459 = reshape(%458, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float32] */;
  %460 = @func_5417(%459) /* ty=(Tensor[(15, 4, 8), float32],) */;
  %461 = equal(%456, %457) /* ty=Tensor[(16, 3, 16), bool] */;
  %462 = %460.0;
  (%461, %462, meta[relay.Constant][45] /* ty=Tensor[(480), float32] */)
}

def @func_11096(%var_11094: Tensor[(726), float64], %var_11095: uint32) -> (Tensor[(360), float64], Tensor[(726, 1), float64], Tensor[(726), float64], uint32) {
  @func_11092(%var_11094, %var_11095) /* ty=(Tensor[(360), float64], Tensor[(726, 1), float64], Tensor[(726), float64], uint32) */
}

def @func_9271(%var_9270: Tensor[(5, 12, 4), float64]) -> (Tensor[(5, 12, 4), float64],) {
  %465 = fn (%var_9265: Tensor[(5, 12, 4), float64]) -> (Tensor[(5, 12, 4), float64],) {
    %463 = cast(%var_9265, dtype="float64") /* ty=Tensor[(5, 12, 4), float64] */;
    %464 = atanh(%463) /* ty=Tensor[(5, 12, 4), float64] */;
    (%464,)
  };
  %465(%var_9270) /* ty=(Tensor[(5, 12, 4), float64],) */
}

def @func_8614() -> Tensor[(16, 3, 16), float32] {
  @func_7564() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_5752(%var_5751: Tensor[(6, 11, 1), float32]) -> Tensor[(6, 11, ?), uint16] {
  %472 = fn (%var_5739: Tensor[(6, 11, 1), float32]) -> Tensor[(6, 11, ?), uint16] {
    %466 = cast(%var_5739, dtype="float32") /* ty=Tensor[(6, 11, 1), float32] */;
    %467 = tan(%466) /* ty=Tensor[(6, 11, 1), float32] */;
    %468 = cast(%467, dtype="uint16") /* ty=Tensor[(6, 11, 1), uint16] */;
    %469 = shape_of(%var_5739, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%var_5739, dtype="uint16") /* ty=Tensor[(6, 11, 1), uint16] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_and(%470, %471) /* ty=Tensor[(6, 11, ?), uint16] */
  };
  %472(%var_5751) /* ty=Tensor[(6, 11, ?), uint16] */
}

def @func_10109() -> Tensor[(16, 3, 16), float32] {
  @func_10107() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_9791(%var_9788: Tensor[(2816), int8], %var_9789: Tensor[(360), bool], %var_9790: Tensor[(156), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) {
  @func_9786(%var_9788, %var_9789, %var_9790) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) */
}

def @func_10929(%var_10926: Tensor[(16, 16, 15), float64], %var_10927: Tensor[(480), uint8], %var_10928: Tensor[(640), float32]) -> (Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], Tensor[(16, 10, 4), float32], Tensor[(640), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 260), float32], Tensor[(16, 16, 15), int8]) {
  @func_10924(%var_10926, %var_10927, %var_10928) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], Tensor[(16, 10, 4), float32], Tensor[(640), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 260), float32], Tensor[(16, 16, 15), int8]) */
}

def @func_8566() -> Tensor[(16, 3, 16), float32] {
  @func_8006() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_10039() -> (Tensor[(16, 3, 16), float32],) {
  @func_10037() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_10107() -> Tensor[(16, 3, 16), float32] {
  @func_8006() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_2174(%var_2173: Tensor[(4, 15, 13), float32]) -> Tensor[(4, 15, 13), float32] {
  %474 = fn (%var_2154: Tensor[(4, 15, 13), float32]) -> Tensor[(4, 15, 13), float32] {
    %473 = cast(%var_2154, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
    sin(%473) /* ty=Tensor[(4, 15, 13), float32] */
  };
  %474(%var_2173) /* ty=Tensor[(4, 15, 13), float32] */
}

def @func_8007() -> Tensor[(16, 3, 16), float32] {
  %475 = fn () -> Tensor[(16, 3, 16), float32] {
    @func_7564() /* ty=Tensor[(16, 3, 16), float32] */
  };
  %475() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_11985(%var_11984: Tensor[(33), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(3, 1, 11), float64], Tensor[(33), float64]) {
  %482 = fn (%var_11980: Tensor[(33), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(3, 1, 11), float64], Tensor[(33), float64]) {
    %476 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %477 = cast(%var_11980, dtype="float64") /* ty=Tensor[(33), float64] */;
    %478 = reshape(%477, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), float64] */;
    %479 = @func_2399(%478) /* ty=(Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) */;
    %480 = %476.0;
    %481 = %479.0;
    (%480, %481, %var_11980)
  };
  %482(%var_11984) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(3, 1, 11), float64], Tensor[(33), float64]) */
}

def @func_3839(%var_3838: Tensor[(12, 4, 10), uint8]) -> (Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) {
  %492 = fn (%var_3807: Tensor[(12, 4, 10), uint8]) -> (Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) {
    %483 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 4, 10), uint8] */, dtype="uint8") /* ty=Tensor[(12, 4, 10), uint8] */;
    %484 = shape_of(%var_3807, dtype="int32") /* ty=Tensor[(3), int32] */;
    %485 = cast(%var_3807, dtype="uint8") /* ty=Tensor[(12, 4, 10), uint8] */;
    %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %487 = cast(meta[relay.Constant][47] /* ty=Tensor[(80), float32] */, dtype="float32") /* ty=Tensor[(80), float32] */;
    %488 = reshape(%487, newshape=[8, 1, 10]) /* ty=Tensor[(8, 1, 10), float32] */;
    %489 = @func_2028(%488) /* ty=(Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) */;
    %490 = right_shift(%485, %486) /* ty=Tensor[(12, 4, 10), uint8] */;
    %491 = %489.1;
    (%490, %491, meta[relay.Constant][47] /* ty=Tensor[(80), float32] */)
  };
  %492(%var_3838) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) */
}

def @func_9301(%var_9299: Tensor[(726, 1), float64], %var_9300: uint32) -> (Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) {
  @func_9297(%var_9299, %var_9300) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) */
}

def @func_10257() -> (Tensor[(16, 3, 16), float32],) {
  %493 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
  (%493,)
}

def @func_324(%var_322: Tensor[(3, 1, 11), int64], %var_323: Tensor[(3, 9, 11), int64]) -> (Tensor[(3, 9, 11), float64],) {
  %504 = fn (%var_304: Tensor[(3, 1, 11), int64], %var_305: Tensor[(3, 9, 11), int64]) -> (Tensor[(3, 9, 11), float64],) {
    %494 = cast(%var_304, dtype="bool") /* ty=Tensor[(3, 1, 11), bool] */;
    %495 = cast(%var_305, dtype="bool") /* ty=Tensor[(3, 9, 11), bool] */;
    %496 = less(%494, %495) /* ty=Tensor[(3, 9, 11), bool] */;
    %497 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 9, 11), bool] */, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
    %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%496, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %501 = mod(%499, %500) /* ty=Tensor[(3, 9, 11), float64] */;
    %502 = cast(%501, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
    %503 = cos(%502) /* ty=Tensor[(3, 9, 11), float64] */;
    (%503,)
  };
  %504(%var_322, %var_323) /* ty=(Tensor[(3, 9, 11), float64],) */
}

def @func_4204(%var_4196: Tensor[(15, 6, 15), float32]) -> (Tensor[(15, 6, 15), float32],) {
  %505 = cast(%var_4196, dtype="float32") /* ty=Tensor[(15, 6, 15), float32] */;
  %506 = asin(%505) /* ty=Tensor[(15, 6, 15), float32] */;
  (%506,)
}

def @func_6527(%var_6492: Tensor[(5, 3, 3), float64]) -> (Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) {
  %507 = cast(meta[relay.Constant][49] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %508 = reshape(%507, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float32] */;
  %509 = @func_5417(%508) /* ty=(Tensor[(15, 4, 8), float32],) */;
  %510 = cast(%var_6492, dtype="float64") /* ty=Tensor[(5, 3, 3), float64] */;
  %511 = atanh(%510) /* ty=Tensor[(5, 3, 3), float64] */;
  %512 = cast(%var_6492, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %516 = %509.0;
  %517 = floor_divide(%514, %515) /* ty=Tensor[(5, 3, 3), float32] */;
  (%516, meta[relay.Constant][49] /* ty=Tensor[(480), float32] */, %517)
}

def @func_10188(%var_10185: Tensor[(240), float32], %var_10186: Tensor[(3, 3, 11), float64], %var_10187: Tensor[(25, 6), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(6, 5, 5), float64], Tensor[(25, 6), float64], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(3, 3, 11), uint16], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  @func_10183(%var_10185, %var_10186, %var_10187) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(6, 5, 5), float64], Tensor[(25, 6), float64], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(3, 3, 11), uint16], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */
}

def @func_7523() -> (Tensor[(16, 3, 16), float32],) {
  %518 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %519 = %518.0;
  (%519,)
}

def @func_9120() -> (Tensor[(16, 3, 16), float32],) {
  @func_9118() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_11586() -> Tensor[(1, 1, 7), float64] {
  @func_11584() /* ty=Tensor[(1, 1, 7), float64] */
}

def @func_11909() -> (Tensor[(15, 1, 6), float64],) {
  @func_11907() /* ty=(Tensor[(15, 1, 6), float64],) */
}

def @func_2432(%var_2430: Tensor[(8, 3, 15), float64], %var_2431: Tensor[(8, 3, 15), float64]) -> (Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) {
  %531 = fn (%var_2419: Tensor[(8, 3, 15), float64], %var_2420: Tensor[(8, 3, 15), float64]) -> (Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) {
    %520 = cast(%var_2420, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
    %521 = reshape(%520, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
    %522 = @func_689(%521) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
    %523 = cast(%var_2420, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
    %524 = shape_of(%var_2419, dtype="int32") /* ty=Tensor[(3), int32] */;
    %525 = cast(%var_2419, dtype="float64") /* ty=Tensor[(8, 3, 15), float64] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %527 = divide(%525, %526) /* ty=Tensor[(8, 3, 15), float64] */;
    %528 = cast(%527, dtype="float32") /* ty=Tensor[(8, 3, 15), float32] */;
    %529 = %522.7;
    %530 = exp(%528) /* ty=Tensor[(8, 3, 15), float32] */;
    (%529, %530)
  };
  %531(%var_2430, %var_2431) /* ty=(Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) */
}

def @func_9575(%var_9573: Tensor[(297), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(297), float64]) {
  @func_9572(%var_9573) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(297), float64]) */
}

def @func_8190() -> (Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) {
  @func_8188() /* ty=(Tensor[(16, 3, 16), bool], Tensor[(15, 4, 8), float32], Tensor[(480), float32]) */
}

def @func_9492() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %532 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  %533 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
  (%532, %533)
}

def @func_9614() -> Tensor[(16, 3, 16), float32] {
  @func_9612() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_6017(%var_6015: Tensor[(7, 10, 11), float32], %var_6016: Tensor[(360), float64]) -> (Tensor[(7, 10, 11), float32], Tensor[(3, 9, 5), float32], Tensor[(135), float32], Tensor[(360), float64]) {
  @func_6013(%var_6015, %var_6016) /* ty=(Tensor[(7, 10, 11), float32], Tensor[(3, 9, 5), float32], Tensor[(135), float32], Tensor[(360), float64]) */
}

def @func_7502() -> (Tensor[(16, 3, 16), float32],) {
  %536 = fn () -> (Tensor[(16, 3, 16), float32],) {
    %534 = cast(meta[relay.Constant][50] /* ty=Tensor[(16, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
    %535 = asinh(%534) /* ty=Tensor[(16, 3, 16), float32] */;
    (%535,)
  };
  %536() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_9855() -> (Tensor[(16, 3, 16), float32], Tensor[(10, 10, 3), float32], Tensor[(1, 300), float32]) {
  @func_9853() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(10, 10, 3), float32], Tensor[(1, 300), float32]) */
}

def @func_7525() -> (Tensor[(16, 3, 16), float32],) {
  @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_8790() -> Tensor[(16, 3, 16), float32] {
  %537 = fn () -> Tensor[(16, 3, 16), float32] {
    @func_8614() /* ty=Tensor[(16, 3, 16), float32] */
  };
  %537() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_8956(%var_8954: Tensor[(16, 3, 16), float32], %var_8955: Tensor[(360), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(10, 12, 3), int32], Tensor[(360), float64]) {
  %548 = fn (%var_8918: Tensor[(16, 3, 16), float32], %var_8938: Tensor[(360), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(10, 12, 3), int32], Tensor[(360), float64]) {
    %538 = @func_8566() /* ty=Tensor[(16, 3, 16), float32] */;
    %539 = cast(%var_8918, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
    %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%538, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %543 = cast(%var_8938, dtype="float64") /* ty=Tensor[(360), float64] */;
    %544 = reshape(%543, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
    %545 = @func_689(%544) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
    %546 = floor_divide(%541, %542) /* ty=Tensor[(16, 3, 16), float64] */;
    %547 = %545.7;
    (%546, %547, %var_8938)
  };
  %548(%var_8954, %var_8955) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 12, 3), int32], Tensor[(360), float64]) */
}

def @func_4713(%var_4699: Tensor[(10, 10, 3), float32]) -> (Tensor[(10, 10, 3), float32], Tensor[(10, 12, 3), float64], Tensor[(360), float64]) {
  %549 = cast(%var_4699, dtype="float32") /* ty=Tensor[(10, 10, 3), float32] */;
  %550 = cast(meta[relay.Constant][51] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %551 = reshape(%550, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %552 = @func_689(%551) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %553 = tan(%549) /* ty=Tensor[(10, 10, 3), float32] */;
  %554 = %552.4;
  (%553, %554, meta[relay.Constant][51] /* ty=Tensor[(360), float64] */)
}

def @func_7564() -> Tensor[(16, 3, 16), float32] {
  %555 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %555.0
}

def @func_10183(%var_10114: Tensor[(240), float32], %var_10124: Tensor[(3, 3, 11), float64], %var_10139: Tensor[(25, 6), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(6, 5, 5), float64], Tensor[(25, 6), float64], Tensor[(156), float64], Tensor[(16, 3, 16), float32], Tensor[(3, 3, 11), uint16], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %556 = cast(-2.5633f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %557 = cast(%var_10114, dtype="float32") /* ty=Tensor[(240), float32] */;
  %558 = reshape(%556, newshape=[]) /* ty=float32 */;
  %559 = reshape(%557, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %560 = cast(%var_10139, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %561 = cast(meta[relay.Constant][54] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %562 = reshape(%560, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
  %563 = reshape(%561, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %564 = @func_554(%562, %563) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
  %565 = @func_9994() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %566 = cast(meta[relay.Constant][52] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %567 = cast(meta[relay.Constant][53] /* ty=Tensor[(33), float64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
  %568 = reshape(%566, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
  %569 = reshape(%567, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
  %570 = @func_3351(%568, %569) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
  %571 = %570.1;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %573 = log2(%572) /* ty=Tensor[(3, 1, 11), float64] */;
  %574 = cast(%573, dtype="int16") /* ty=Tensor[(3, 1, 11), int16] */;
  %575 = cast(%var_10124, dtype="int16") /* ty=Tensor[(3, 3, 11), int16] */;
  %576 = bitwise_xor(%574, %575) /* ty=Tensor[(3, 3, 11), int16] */;
  %577 = cast(%576, dtype="uint16") /* ty=Tensor[(3, 3, 11), uint16] */;
  %578 = cast(-2.5633f /* ty=float32 */, dtype="uint16") /* ty=uint16 */;
  %579 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
  %580 = @func_2598(%558, %559) /* ty=Tensor[(4, 12, 5), float32] */;
  %581 = %564.0;
  %582 = %565.0;
  %583 = add(%577, %578) /* ty=Tensor[(3, 3, 11), uint16] */;
  %584 = @func_8789() /* ty=Tensor[(16, 3, 16), float32] */;
  %585 = @func_7605() /* ty=Tensor[(16, 3, 16), float32] */;
  (%579, %580, %var_10114, meta[relay.Constant][52] /* ty=Tensor[(42), uint32] */, meta[relay.Constant][53] /* ty=Tensor[(33), float64] */, %581, %var_10139, meta[relay.Constant][54] /* ty=Tensor[(156), float64] */, %582, %583, %584, %585)
}

def @func_146(%var_121: Tensor[(13, 4, 3), float64]) -> Tensor[(13, 4, 3), uint16] {
  %586 = cast(%var_121, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
  %587 = sin(%586) /* ty=Tensor[(13, 4, 3), float64] */;
  %588 = cast(%587, dtype="uint16") /* ty=Tensor[(13, 4, 3), uint16] */;
  %589 = shape_of(%var_121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_121, dtype="uint16") /* ty=Tensor[(13, 4, 3), uint16] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%590, %591) /* ty=Tensor[(13, 4, 3), uint16] */
}

def @func_11667(%var_11666: Tensor[(156), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64]) {
  %599 = fn (%var_11655: Tensor[(156), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64]) {
    %592 = cast(meta[relay.Constant][55] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %593 = cast(%var_11655, dtype="float64") /* ty=Tensor[(156), float64] */;
    %594 = reshape(%592, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
    %595 = reshape(%593, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %596 = @func_554(%594, %595) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
    %597 = @func_10107() /* ty=Tensor[(16, 3, 16), float32] */;
    %598 = %596.2;
    (%597, %598, meta[relay.Constant][55] /* ty=Tensor[(150), float64] */, %var_11655)
  };
  %599(%var_11666) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64]) */
}

def @func_12036() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  %600 = @func_9440() /* ty=(Tensor[(16, 3, 16), float32],) */;
  %601 = %600.0;
  %602 = @func_9336() /* ty=Tensor[(16, 3, 16), float32] */;
  (%601, %602)
}

def @func_12038() -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) {
  @func_12036() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32]) */
}

def @func_3624(%var_3619: Tensor[(11, 16, 16), int8], %var_3620: Tensor[(11, 16, 16), int8], %var_3621: Tensor[(10, 12, 3), bool], %var_3622: Tensor[(150), float64], %var_3623: Tensor[(156), float64]) -> (Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) {
  @func_3617(%var_3619, %var_3620, %var_3621, %var_3622, %var_3623) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */
}

def @func_10577() -> Tensor[(16, 3, 16), float32] {
  @func_10575() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_2399(%var_2381: Tensor[(3, 1, 11), float64]) -> (Tensor[(3, 1, 11), float64], Tensor[(4, 15, 13), float32], Tensor[(780), float32]) {
  %603 = cast(%var_2381, dtype="float64") /* ty=Tensor[(3, 1, 11), float64] */;
  %604 = cast(meta[relay.Constant][56] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %605 = reshape(%604, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
  %606 = atan(%603) /* ty=Tensor[(3, 1, 11), float64] */;
  %607 = @func_2172(%605) /* ty=Tensor[(4, 15, 13), float32] */;
  (%606, %607, meta[relay.Constant][56] /* ty=Tensor[(780), float32] */)
}

def @func_10809(%var_10805: Tensor[(33), float64], %var_10806: Tensor[(2730), float32], %var_10807: Tensor[(240, 2), uint8], %var_10808: float32) -> (Tensor[(360), float64], Tensor[(14, ?, 3), bool], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(336), int16], Tensor[(2730), float32], Tensor[(240, 2), uint8], Tensor[(336), int16], float32) {
  %627 = fn (%var_10795: Tensor[(33), float64], %var_10799: Tensor[(2730), float32], %var_10800: Tensor[(240, 2), uint8], %var_10802: float32) -> (Tensor[(360), float64], Tensor[(14, ?, 3), bool], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(336), int16], Tensor[(2730), float32], Tensor[(240, 2), uint8], Tensor[(336), int16], float32) {
    %608 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
    %609 = cast(%var_10795, dtype="float64") /* ty=Tensor[(33), float64] */;
    %610 = reshape(%608, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
    %611 = reshape(%609, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
    %612 = @func_3351(%610, %611) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
    %613 = cast(%var_10799, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %614 = cast(%var_10799, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %615 = cast(%var_10800, dtype="uint8") /* ty=Tensor[(240, 2), uint8] */;
    %616 = cast(meta[relay.Constant][58] /* ty=Tensor[(336), int16] */, dtype="int16") /* ty=Tensor[(336), int16] */;
    %617 = cast(%var_10802, dtype="float32") /* ty=float32 */;
    %618 = reshape(%613, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
    %619 = reshape(%614, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
    %620 = reshape(%615, newshape=[480]) /* ty=Tensor[(480), uint8] */;
    %621 = reshape(%616, newshape=[336]) /* ty=Tensor[(336), int16] */;
    %622 = reshape(%617, newshape=[]) /* ty=float32 */;
    %623 = @func_5698(%618, %619, %620, %621, %622) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], float32, Tensor[(336), int16], float32, Tensor[(13, 15, 14), float64]) */;
    %624 = @func_10432() /* ty=Tensor[(360), float64] */;
    %625 = %612.0;
    %626 = %623.3;
    (%624, %625, meta[relay.Constant][57] /* ty=Tensor[(42), uint32] */, %var_10795, %626, %var_10799, %var_10800, meta[relay.Constant][58] /* ty=Tensor[(336), int16] */, %var_10802)
  };
  %627(%var_10805, %var_10806, %var_10807, %var_10808) /* ty=(Tensor[(360), float64], Tensor[(14, ?, 3), bool], Tensor[(42), uint32], Tensor[(33), float64], Tensor[(336), int16], Tensor[(2730), float32], Tensor[(240, 2), uint8], Tensor[(336), int16], float32) */
}

def @func_557(%var_555: Tensor[(6, 5, 5), float64], %var_556: Tensor[(156), float64]) -> (Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) {
  %638 = fn (%var_524: Tensor[(6, 5, 5), float64], %var_543: Tensor[(156), float64]) -> (Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) {
    %628 = cast(%var_524, dtype="float64") /* ty=Tensor[(6, 5, 5), float64] */;
    %629 = sqrt(%628) /* ty=Tensor[(6, 5, 5), float64] */;
    %630 = cast(%629, dtype="float64") /* ty=Tensor[(6, 5, 5), float64] */;
    %631 = cast(%var_543, dtype="float64") /* ty=Tensor[(156), float64] */;
    %632 = reshape(%631, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
    %633 = @func_146(%632) /* ty=Tensor[(13, 4, 3), uint16] */;
    %634 = cast(%633, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
    %635 = reshape(%634, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
    %636 = exp(%630) /* ty=Tensor[(6, 5, 5), float64] */;
    %637 = @func_146(%635) /* ty=Tensor[(13, 4, 3), uint16] */;
    (%636, %633, %var_543, %637)
  };
  %638(%var_555, %var_556) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */
}

def @func_9751(%var_9749: Tensor[(150), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(80), float32], Tensor[(150), bool]) {
  @func_9748(%var_9749) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(80), float32], Tensor[(150), bool]) */
}

def @func_11200(%var_11110: Tensor[(39, 4), float64], %var_11123: Tensor[(726), float64]) -> (Tensor[(360), float64], Tensor[(16, 3, 16), float32], Tensor[(39, 4), float64], Tensor[(160), uint32], Tensor[(726), float64], uint32, Tensor[(16, 3, 16), float32], Tensor[(16, 176), float64], Tensor[(300), float32]) {
  %639 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 176), int8] */, dtype="int8") /* ty=Tensor[(16, 176), int8] */;
  %640 = @func_10432() /* ty=Tensor[(360), float64] */;
  %641 = cast(%640, dtype="bool") /* ty=Tensor[(360), bool] */;
  %642 = cast(%var_11110, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
  %643 = reshape(%639, newshape=[2816]) /* ty=Tensor[(2816), int8] */;
  %644 = reshape(%641, newshape=[360]) /* ty=Tensor[(360), bool] */;
  %645 = reshape(%642, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %646 = @func_9786(%643, %644, %645) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) */;
  %647 = cast(%var_11123, dtype="float64") /* ty=Tensor[(726), float64] */;
  %648 = cast(meta[relay.Constant][60] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %649 = reshape(%647, newshape=[726, 1]) /* ty=Tensor[(726, 1), float64] */;
  %650 = reshape(%648, newshape=[]) /* ty=uint32 */;
  %651 = @func_9297(%649, %650) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(160), uint32], Tensor[(726, 1), float64], uint32) */;
  %652 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 176), int8] */, dtype="float32") /* ty=Tensor[(16, 176), float32] */;
  %653 = asin(%652) /* ty=Tensor[(16, 176), float32] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(16, 176), float64] */;
  %655 = acos(%654) /* ty=Tensor[(16, 176), float64] */;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(16, 176), float64] */;
  %657 = @func_8728() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(10, 12, 3), float64], Tensor[(300), float32]) */;
  %658 = %646.0;
  %659 = %651.1;
  %660 = @func_9336() /* ty=Tensor[(16, 3, 16), float32] */;
  %661 = sqrt(%656) /* ty=Tensor[(16, 176), float64] */;
  %662 = %657.2;
  (%640, %658, %var_11110, %659, %var_11123, meta[relay.Constant][60] /* ty=uint32 */, %660, %661, %662)
}

def @func_8848(%var_8845: Tensor[(780), float32], %var_8846: Tensor[(2816), int8], %var_8847: Tensor[(45), float64]) -> (Tensor[(16, 3, 16), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(5, 30), float64], Tensor[(39, 4), float64], Tensor[(15, 4, 8), float32], Tensor[(45), float64], Tensor[(4, 15, 13), float64]) {
  @func_8843(%var_8845, %var_8846, %var_8847) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(5, 30), float64], Tensor[(39, 4), float64], Tensor[(15, 4, 8), float32], Tensor[(45), float64], Tensor[(4, 15, 13), float64]) */
}

def @func_7667(%var_7665: Tensor[(66), float32]) -> (Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float64]) {
  @func_7664(%var_7665) /* ty=(Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(16, 3, 16), float32], Tensor[(4, 12, 5), float32], float32, Tensor[(240), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float64]) */
}

def @func_8910(%var_8909: float32) -> Tensor[(6, 16, 2), float32] {
  %665 = fn (%var_8903: float32) -> Tensor[(6, 16, 2), float32] {
    %663 = cast(%var_8903, dtype="float32") /* ty=float32 */;
    %664 = cast(meta[relay.Constant][61] /* ty=Tensor[(6, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
    mod(%663, %664) /* ty=Tensor[(6, 16, 2), float32] */
  };
  %665(%var_8909) /* ty=Tensor[(6, 16, 2), float32] */
}

def @func_10456() -> (Tensor[(16, 3, 16), float32],) {
  %667 = fn () -> (Tensor[(16, 3, 16), float32],) {
    %666 = @func_7605() /* ty=Tensor[(16, 3, 16), float32] */;
    (%666,)
  };
  %667() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_691(%var_690: Tensor[(10, 12, 3), float64]) -> (Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) {
  %695 = fn (%var_652: Tensor[(10, 12, 3), float64]) -> (Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) {
    %668 = cast(meta[relay.Constant][62] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %669 = cast(meta[relay.Constant][63] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %670 = reshape(%668, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
    %671 = reshape(%669, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %672 = @func_554(%670, %671) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
    %673 = cast(meta[relay.Constant][62] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %674 = %672.2;
    %675 = cast(%674, dtype="float64") /* ty=Tensor[(156), float64] */;
    %676 = reshape(%673, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
    %677 = reshape(%675, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %678 = @func_554(%676, %677) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
    %679 = cast(%var_652, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
    %680 = log2(%679) /* ty=Tensor[(10, 12, 3), float64] */;
    %681 = cast(%680, dtype="float64") /* ty=Tensor[(10, 12, 3), float64] */;
    %682 = cast(meta[relay.Constant][63] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %683 = reshape(%682, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
    %684 = cast(%674, dtype="float64") /* ty=Tensor[(156), float64] */;
    %685 = reshape(%684, newshape=[13, 4, 3]) /* ty=Tensor[(13, 4, 3), float64] */;
    %686 = cast(%var_652, dtype="int32") /* ty=Tensor[(10, 12, 3), int32] */;
    %687 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%680, dtype="int32") /* ty=Tensor[(10, 12, 3), int32] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %690 = %678.3;
    %691 = atanh(%681) /* ty=Tensor[(10, 12, 3), float64] */;
    %692 = @func_146(%683) /* ty=Tensor[(13, 4, 3), uint16] */;
    %693 = @func_146(%685) /* ty=Tensor[(13, 4, 3), uint16] */;
    %694 = logical_xor(%688, %689) /* ty=Tensor[(10, 12, 3), int32] */;
    (%674, meta[relay.Constant][62] /* ty=Tensor[(150), float64] */, meta[relay.Constant][63] /* ty=Tensor[(156), float64] */, %690, %691, %692, %693, %694)
  };
  %695(%var_690) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */
}

def @func_12141(%var_12139: Tensor[(16, 3, 16), float32]) -> (Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(16, 3, 16), float32]) {
  @func_12138(%var_12139) /* ty=(Tensor[(16, 3, 16), int8], Tensor[(16, 3, 16), float32], Tensor[(360), float64], Tensor[(16, 3, 16), float32]) */
}

def @func_10104() -> Tensor[(16, 3, 16), float32] {
  @func_10102() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_11760() -> (Tensor[(16, 3, 16), float32],) {
  @func_11758() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_149(%var_147: Tensor[(13, 4, 3), float64]) -> Tensor[(13, 4, 3), uint16] {
  @func_146(%var_147) /* ty=Tensor[(13, 4, 3), uint16] */
}

def @func_6899(%var_6894: Tensor[(4, 11, 3), float64], %var_6895: Tensor[(3, 45), float32], %var_6896: Tensor[(360), float64], %var_6897: Tensor[(6, 36), float64], %var_6898: Tensor[(7, 6), uint32]) -> (Tensor[(3, 9, 5), float32], Tensor[(3, 45), float32], Tensor[(360), float64], Tensor[(6, 36), float64], Tensor[(33), int64], Tensor[(33, 1), float64], Tensor[(7, 6), uint32], Tensor[(6, 5, 5), float64], Tensor[(150), float64], Tensor[(39, 4), float64], Tensor[(4, 11, 3), float32]) {
  %727 = fn (%var_6860: Tensor[(4, 11, 3), float64], %var_6864: Tensor[(3, 45), float32], %var_6865: Tensor[(360), float64], %var_6873: Tensor[(6, 36), float64], %var_6878: Tensor[(7, 6), uint32]) -> (Tensor[(3, 9, 5), float32], Tensor[(3, 45), float32], Tensor[(360), float64], Tensor[(6, 36), float64], Tensor[(33), int64], Tensor[(33, 1), float64], Tensor[(7, 6), uint32], Tensor[(6, 5, 5), float64], Tensor[(150), float64], Tensor[(39, 4), float64], Tensor[(4, 11, 3), float32]) {
    %696 = cast(%var_6864, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
    %697 = cast(%var_6865, dtype="float64") /* ty=Tensor[(360), float64] */;
    %698 = reshape(%696, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
    %699 = reshape(%697, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
    %700 = @func_1602(%698, %699) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
    %701 = cast(%var_6878, dtype="uint32") /* ty=Tensor[(7, 6), uint32] */;
    %702 = cast(meta[relay.Constant][64] /* ty=Tensor[(33), int64] */, dtype="float64") /* ty=Tensor[(33), float64] */;
    %703 = reshape(%701, newshape=[14, 1, 3]) /* ty=Tensor[(14, 1, 3), uint32] */;
    %704 = reshape(%702, newshape=[33, 1]) /* ty=Tensor[(33, 1), float64] */;
    %705 = @func_3351(%703, %704) /* ty=(Tensor[(14, ?, 3), bool], Tensor[(3, 1, 11), float64], Tensor[(33, 1), float64]) */;
    %706 = cast(meta[relay.Constant][65] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %707 = cast(meta[relay.Constant][66] /* ty=Tensor[(39, 4), float64] */, dtype="float64") /* ty=Tensor[(39, 4), float64] */;
    %708 = reshape(%706, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
    %709 = reshape(%707, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %710 = @func_554(%708, %709) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
    %711 = cast(%var_6860, dtype="float64") /* ty=Tensor[(4, 11, 3), float64] */;
    %712 = tan(%711) /* ty=Tensor[(4, 11, 3), float64] */;
    %713 = cast(%var_6873, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
    %714 = cast(%var_6873, dtype="float64") /* ty=Tensor[(6, 36), float64] */;
    %715 = cast(meta[relay.Constant][64] /* ty=Tensor[(33), int64] */, dtype="int64") /* ty=Tensor[(33), int64] */;
    %716 = reshape(%713, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
    %717 = reshape(%714, newshape=[8, 3, 9]) /* ty=Tensor[(8, 3, 9), float64] */;
    %718 = reshape(%715, newshape=[11, 3]) /* ty=Tensor[(11, 3), int64] */;
    %719 = @func_1189(%716, %717, %718) /* ty=(Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) */;
    %720 = %719.4;
    %721 = cast(%712, dtype="float32") /* ty=Tensor[(4, 11, 3), float32] */;
    %722 = cast(%720, dtype="float32") /* ty=Tensor[(11, 3), float32] */;
    %723 = %700.0;
    %724 = %705.2;
    %725 = %710.0;
    %726 = floor_divide(%721, %722) /* ty=Tensor[(4, 11, 3), float32] */;
    (%723, %var_6864, %var_6865, %var_6873, meta[relay.Constant][64] /* ty=Tensor[(33), int64] */, %724, %var_6878, %725, meta[relay.Constant][65] /* ty=Tensor[(150), float64] */, meta[relay.Constant][66] /* ty=Tensor[(39, 4), float64] */, %726)
  };
  %727(%var_6894, %var_6895, %var_6896, %var_6897, %var_6898) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(3, 45), float32], Tensor[(360), float64], Tensor[(6, 36), float64], Tensor[(33), int64], Tensor[(33, 1), float64], Tensor[(7, 6), uint32], Tensor[(6, 5, 5), float64], Tensor[(150), float64], Tensor[(39, 4), float64], Tensor[(4, 11, 3), float32]) */
}

def @func_11584() -> Tensor[(1, 1, 7), float64] {
  %728 = cast(meta[relay.Constant][67] /* ty=Tensor[(1, 1, 7), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 7), float64] */;
  sqrt(%728) /* ty=Tensor[(1, 1, 7), float64] */
}

def @func_8671(%var_8669: Tensor[(16, 3, 16), bool], %var_8670: Tensor[(300), float32]) -> (Tensor[(16, 3, 16), bool], Tensor[(360), float64], Tensor[(300), float32]) {
  @func_8667(%var_8669, %var_8670) /* ty=(Tensor[(16, 3, 16), bool], Tensor[(360), float64], Tensor[(300), float32]) */
}

def @func_10259() -> (Tensor[(16, 3, 16), float32],) {
  @func_10257() /* ty=(Tensor[(16, 3, 16), float32],) */
}

def @func_10970(%var_10969: Tensor[(9, 13, 11), uint16]) -> (Tensor[(9, 13, 11), bool],) {
  %734 = fn (%var_10963: Tensor[(9, 13, 11), uint16]) -> (Tensor[(9, 13, 11), bool],) {
    %729 = cast(meta[relay.Constant][68] /* ty=Tensor[(9, 13, 11), uint16] */, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
    %730 = shape_of(%var_10963, dtype="int32") /* ty=Tensor[(3), int32] */;
    %731 = cast(%var_10963, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
    %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %733 = greater_equal(%731, %732) /* ty=Tensor[(9, 13, 11), bool] */;
    (%733,)
  };
  %734(%var_10969) /* ty=(Tensor[(9, 13, 11), bool],) */
}

def @func_10102() -> Tensor[(16, 3, 16), float32] {
  @func_7605() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_1193(%var_1190: Tensor[(8, 3, 9), float64], %var_1191: Tensor[(8, 3, 9), float64], %var_1192: Tensor[(11, 3), int64]) -> (Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) {
  %750 = fn (%var_1161: Tensor[(8, 3, 9), float64], %var_1162: Tensor[(8, 3, 9), float64], %var_1183: Tensor[(11, 3), int64]) -> (Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) {
    %735 = cast(%var_1162, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
    %736 = shape_of(%var_1161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %737 = cast(%var_1161, dtype="float64") /* ty=Tensor[(8, 3, 9), float64] */;
    %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %739 = cast(meta[relay.Constant][69] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %740 = reshape(%739, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
    %741 = @func_689(%740) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
    %742 = cast(%var_1183, dtype="int64") /* ty=Tensor[(11, 3), int64] */;
    %743 = cast(meta[relay.Constant][70] /* ty=Tensor[(297), int64] */, dtype="int64") /* ty=Tensor[(297), int64] */;
    %744 = reshape(%742, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), int64] */;
    %745 = reshape(%743, newshape=[3, 9, 11]) /* ty=Tensor[(3, 9, 11), int64] */;
    %746 = @func_321(%744, %745) /* ty=(Tensor[(3, 9, 11), float64],) */;
    %747 = floor_mod(%737, %738) /* ty=Tensor[(8, 3, 9), float64] */;
    %748 = %741.0;
    %749 = %746.0;
    (%747, %748, meta[relay.Constant][69] /* ty=Tensor[(360), float64] */, %749, %var_1183, meta[relay.Constant][70] /* ty=Tensor[(297), int64] */)
  };
  %750(%var_1190, %var_1191, %var_1192) /* ty=(Tensor[(8, 3, 9), float64], Tensor[(156), float64], Tensor[(360), float64], Tensor[(3, 9, 11), float64], Tensor[(11, 3), int64], Tensor[(297), int64]) */
}

def @func_6530(%var_6528: Tensor[(5, 3, 3), float64]) -> (Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) {
  @func_6527(%var_6528) /* ty=(Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) */
}

def @func_10636(%var_10635: Tensor[(5, 33), int64]) -> Tensor[(5, 33), bool] {
  %757 = fn (%var_10621: Tensor[(5, 33), int64]) -> Tensor[(5, 33), bool] {
    %751 = @func_9177() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
    %752 = %751.3;
    %753 = cast(%var_10621, dtype="bool") /* ty=Tensor[(5, 33), bool] */;
    %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(2), int32] */;
    %755 = cast(%752, dtype="bool") /* ty=Tensor[(5, 33), bool] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    equal(%755, %756) /* ty=Tensor[(5, 33), bool] */
  };
  %757(%var_10635) /* ty=Tensor[(5, 33), bool] */
}

def @func_7900(%var_7895: Tensor[(480), float32], %var_7896: Tensor[(66), float32], %var_7897: Tensor[(360), bool], %var_7898: Tensor[(156), float64], %var_7899: Tensor[(336), int16]) -> (Tensor[(16, 3, 16), float32], Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(480), float32], Tensor[(5, 9), float64], Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(4, 15, 13), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(150), float64], Tensor[(156), float64], float32, Tensor[(336), int16], float32, Tensor[(10, 12, 3), int32]) {
  %800 = fn (%var_7832: Tensor[(480), float32], %var_7861: Tensor[(66), float32], %var_7875: Tensor[(360), bool], %var_7877: Tensor[(156), float64], %var_7881: Tensor[(336), int16]) -> (Tensor[(16, 3, 16), float32], Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(480), float32], Tensor[(5, 9), float64], Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(4, 15, 13), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(150), float64], Tensor[(156), float64], float32, Tensor[(336), int16], float32, Tensor[(10, 12, 3), int32]) {
    %758 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %759 = cast(%var_7832, dtype="float32") /* ty=Tensor[(480), float32] */;
    %760 = reshape(%759, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float32] */;
    %761 = @func_5417(%760) /* ty=(Tensor[(15, 4, 8), float32],) */;
    %762 = cast(meta[relay.Constant][71] /* ty=Tensor[(5, 9), float64] */, dtype="float64") /* ty=Tensor[(5, 9), float64] */;
    %763 = reshape(%762, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
    %764 = @func_6527(%763) /* ty=(Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(5, 3, 3), float32]) */;
    %765 = cast(%var_7861, dtype="float32") /* ty=Tensor[(66), float32] */;
    %766 = reshape(%765, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float32] */;
    %767 = cast(meta[relay.Constant][72] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
    %768 = reshape(%767, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
    %769 = cast(meta[relay.Constant][73] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
    %770 = cast(meta[relay.Constant][73] /* ty=Tensor[(2816), int8] */, dtype="int8") /* ty=Tensor[(2816), int8] */;
    %771 = cast(%var_7875, dtype="bool") /* ty=Tensor[(360), bool] */;
    %772 = cast(meta[relay.Constant][74] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %773 = cast(%var_7877, dtype="float64") /* ty=Tensor[(156), float64] */;
    %774 = reshape(%769, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
    %775 = reshape(%770, newshape=[11, 16, 16]) /* ty=Tensor[(11, 16, 16), int8] */;
    %776 = reshape(%771, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), bool] */;
    %777 = reshape(%772, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %778 = reshape(%773, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %779 = @func_3617(%774, %775, %776, %777, %778) /* ty=(Tensor[(11, 16, 16), int8], Tensor[(11, 16, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(33), int64], Tensor[(99, 3), int64], Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(10, 12, 3), float32]) */;
    %780 = cast(%var_7881, dtype="int16") /* ty=Tensor[(336), int16] */;
    %781 = cast(%var_7881, dtype="int16") /* ty=Tensor[(336), int16] */;
    %782 = cast(-7.36686f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %783 = reshape(%780, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
    %784 = reshape(%781, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
    %785 = reshape(%782, newshape=[]) /* ty=float32 */;
    %786 = @func_2890(%783, %784, %785) /* ty=(Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) */;
    %787 = cast(%var_7875, dtype="float64") /* ty=Tensor[(360), float64] */;
    %788 = cast(%var_7875, dtype="float64") /* ty=Tensor[(360), float64] */;
    %789 = reshape(%787, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
    %790 = reshape(%788, newshape=[8, 3, 15]) /* ty=Tensor[(8, 3, 15), float64] */;
    %791 = @func_2429(%789, %790) /* ty=(Tensor[(10, 12, 3), int32], Tensor[(8, 3, 15), float32]) */;
    %792 = %758.0;
    %793 = %761.0;
    %794 = %764.1;
    %795 = @func_5750(%766) /* ty=Tensor[(6, 11, ?), uint16] */;
    %796 = @func_2172(%768) /* ty=Tensor[(4, 15, 13), float32] */;
    %797 = %779.3;
    %798 = %786.2;
    %799 = %791.0;
    (%792, %793, %var_7832, %794, meta[relay.Constant][71] /* ty=Tensor[(5, 9), float64] */, %795, %var_7861, %796, meta[relay.Constant][72] /* ty=Tensor[(780), float32] */, %797, meta[relay.Constant][73] /* ty=Tensor[(2816), int8] */, %var_7875, meta[relay.Constant][74] /* ty=Tensor[(150), float64] */, %var_7877, %798, %var_7881, -7.36686f /* ty=float32 */, %799)
  };
  %800(%var_7895, %var_7896, %var_7897, %var_7898, %var_7899) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(15, 4, 8), float32], Tensor[(480), float32], Tensor[(480), float32], Tensor[(5, 9), float64], Tensor[(6, 11, ?), uint16], Tensor[(66), float32], Tensor[(4, 15, 13), float32], Tensor[(780), float32], Tensor[(33), int64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(150), float64], Tensor[(156), float64], float32, Tensor[(336), int16], float32, Tensor[(10, 12, 3), int32]) */
}

def @func_10433() -> Tensor[(360), float64] {
  %804 = fn () -> Tensor[(360), float64] {
    %801 = @func_10402() /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */;
    %802 = %801.5;
    %803 = cast(%802, dtype="float64") /* ty=Tensor[(360), float64] */;
    cosh(%803) /* ty=Tensor[(360), float64] */
  };
  %804() /* ty=Tensor[(360), float64] */
}

def @func_10227(%var_10226: Tensor[(360), bool]) -> (Tensor[(16, 3, 16), float32], Tensor[(360), bool], Tensor[(4, 704), int8], Tensor[(360), bool], Tensor[(156), float64]) {
  %815 = fn (%var_10221: Tensor[(360), bool]) -> (Tensor[(16, 3, 16), float32], Tensor[(360), bool], Tensor[(4, 704), int8], Tensor[(360), bool], Tensor[(156), float64]) {
    %805 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %806 = cast(meta[relay.Constant][75] /* ty=Tensor[(4, 704), int8] */, dtype="int8") /* ty=Tensor[(4, 704), int8] */;
    %807 = cast(%var_10221, dtype="bool") /* ty=Tensor[(360), bool] */;
    %808 = cast(meta[relay.Constant][76] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %809 = reshape(%806, newshape=[2816]) /* ty=Tensor[(2816), int8] */;
    %810 = reshape(%807, newshape=[360]) /* ty=Tensor[(360), bool] */;
    %811 = reshape(%808, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %812 = @func_9786(%809, %810, %811) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(156), float64], Tensor[(2816), int8], Tensor[(360), bool], Tensor[(156), float64], Tensor[(25, 6), float64]) */;
    %813 = %805.0;
    %814 = %812.3;
    (%813, %814, meta[relay.Constant][75] /* ty=Tensor[(4, 704), int8] */, %var_10221, meta[relay.Constant][76] /* ty=Tensor[(156), float64] */)
  };
  %815(%var_10226) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(360), bool], Tensor[(4, 704), int8], Tensor[(360), bool], Tensor[(156), float64]) */
}

def @func_3299(%var_3297: Tensor[(16, 10, 4), float32]) -> (Tensor[(16, 10, 4), float32],) {
  @func_3296(%var_3297) /* ty=(Tensor[(16, 10, 4), float32],) */
}

def @func_5704(%var_5699: Tensor[(13, 15, 14), float32], %var_5700: Tensor[(13, 15, 14), float32], %var_5701: Tensor[(480), uint8], %var_5702: Tensor[(336), int16], %var_5703: float32) -> (Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], float32, Tensor[(336), int16], float32, Tensor[(13, 15, 14), float64]) {
  %843 = fn (%var_5663: Tensor[(13, 15, 14), float32], %var_5664: Tensor[(13, 15, 14), float32], %var_5680: Tensor[(480), uint8], %var_5684: Tensor[(336), int16], %var_5685: float32) -> (Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], float32, Tensor[(336), int16], float32, Tensor[(13, 15, 14), float64]) {
    %816 = cast(%var_5680, dtype="uint8") /* ty=Tensor[(480), uint8] */;
    %817 = reshape(%816, newshape=[12, 4, 10]) /* ty=Tensor[(12, 4, 10), uint8] */;
    %818 = @func_3837(%817) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) */;
    %819 = cast(%var_5684, dtype="int16") /* ty=Tensor[(336), int16] */;
    %820 = cast(%var_5684, dtype="int16") /* ty=Tensor[(336), int16] */;
    %821 = cast(%var_5685, dtype="float32") /* ty=float32 */;
    %822 = reshape(%819, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
    %823 = reshape(%820, newshape=[6, 7, 8]) /* ty=Tensor[(6, 7, 8), int16] */;
    %824 = reshape(%821, newshape=[]) /* ty=float32 */;
    %825 = @func_2890(%822, %823, %824) /* ty=(Tensor[(6, 7, 8), int16], Tensor[(4, 12, 5), float32], float32, Tensor[(8, 30), float32], Tensor[(6, 7, 8), bool]) */;
    %826 = cast(%var_5664, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
    %827 = shape_of(%var_5663, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%var_5663, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %830 = less(%828, %829) /* ty=Tensor[(13, 15, 14), bool] */;
    %831 = cast(%var_5663, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
    %832 = shape_of(%var_5664, dtype="int32") /* ty=Tensor[(3), int32] */;
    %833 = cast(%var_5664, dtype="bool") /* ty=Tensor[(13, 15, 14), bool] */;
    %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %835 = logical_and(%833, %834) /* ty=Tensor[(13, 15, 14), bool] */;
    %836 = cast(%835, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
    %837 = shape_of(%830, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%830, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %840 = %818.0;
    %841 = %825.2;
    %842 = power(%838, %839) /* ty=Tensor[(13, 15, 14), float64] */;
    (%840, %var_5680, %841, %var_5684, %var_5685, %842)
  };
  %843(%var_5699, %var_5700, %var_5701, %var_5702, %var_5703) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], float32, Tensor[(336), int16], float32, Tensor[(13, 15, 14), float64]) */
}

def @func_1602(%var_1590: Tensor[(3, 9, 5), float32], %var_1599: Tensor[(1, 360), float64]) -> (Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) {
  %844 = cast(%var_1590, dtype="float32") /* ty=Tensor[(3, 9, 5), float32] */;
  %845 = cast(%var_1599, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %846 = reshape(%845, newshape=[10, 12, 3]) /* ty=Tensor[(10, 12, 3), float64] */;
  %847 = @func_689(%846) /* ty=(Tensor[(156), float64], Tensor[(150), float64], Tensor[(156), float64], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), float64], Tensor[(13, 4, 3), uint16], Tensor[(13, 4, 3), uint16], Tensor[(10, 12, 3), int32]) */;
  %848 = acos(%844) /* ty=Tensor[(3, 9, 5), float32] */;
  %849 = %847.5;
  (%848, %849, %var_1599)
}

def @func_7566() -> Tensor[(16, 3, 16), float32] {
  @func_7564() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_11758() -> (Tensor[(16, 3, 16), float32],) {
  %850 = @func_9177() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
  %851 = %850.0;
  (%851,)
}

def @func_9100(%var_9099: Tensor[(5, 33), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 33), int64]) {
  %868 = fn (%var_9071: Tensor[(5, 33), int64]) -> (Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 33), int64]) {
    %852 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %853 = @func_7523() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %854 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
    %855 = %854.4;
    %856 = cast(%855, dtype="int32") /* ty=Tensor[(1, 33), int32] */;
    %857 = cast(%var_9071, dtype="int32") /* ty=Tensor[(5, 33), int32] */;
    %858 = maximum(%856, %857) /* ty=Tensor[(5, 33), int32] */;
    %859 = cast(%858, dtype="float32") /* ty=Tensor[(5, 33), float32] */;
    %860 = log10(%859) /* ty=Tensor[(5, 33), float32] */;
    %861 = cast(%858, dtype="int64") /* ty=Tensor[(5, 33), int64] */;
    %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(2), int32] */;
    %863 = cast(%860, dtype="int64") /* ty=Tensor[(5, 33), int64] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %865 = %852.0;
    %866 = %853.0;
    %867 = right_shift(%863, %864) /* ty=Tensor[(5, 33), int64] */;
    (%865, %866, %867)
  };
  %868(%var_9099) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 33), int64]) */
}

def @func_10575() -> Tensor[(16, 3, 16), float32] {
  @func_10107() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_7710(%var_7707: Tensor[(360), float64], %var_7708: Tensor[(80), float32], %var_7709: Tensor[(150), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(13, 4, 3), uint16], Tensor[(15, 9), float32], Tensor[(360), float64], Tensor[(33), int64], Tensor[(80), float32], Tensor[(9, 4, 8), float64], Tensor[(24, 12), float64], Tensor[(16, 3, 16), float32], Tensor[(6, 5, 5), float64], Tensor[(150), float64]) {
  %894 = fn (%var_7676: Tensor[(360), float64], %var_7679: Tensor[(80), float32], %var_7701: Tensor[(150), float64]) -> (Tensor[(16, 3, 16), float64], Tensor[(13, 4, 3), uint16], Tensor[(15, 9), float32], Tensor[(360), float64], Tensor[(33), int64], Tensor[(80), float32], Tensor[(9, 4, 8), float64], Tensor[(24, 12), float64], Tensor[(16, 3, 16), float32], Tensor[(6, 5, 5), float64], Tensor[(150), float64]) {
    %869 = @func_7605() /* ty=Tensor[(16, 3, 16), float32] */;
    %870 = cast(%869, dtype="float64") /* ty=Tensor[(16, 3, 16), float64] */;
    %871 = cast(meta[relay.Constant][77] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
    %872 = cast(%var_7676, dtype="float64") /* ty=Tensor[(360), float64] */;
    %873 = reshape(%871, newshape=[3, 9, 5]) /* ty=Tensor[(3, 9, 5), float32] */;
    %874 = reshape(%872, newshape=[1, 360]) /* ty=Tensor[(1, 360), float64] */;
    %875 = @func_1602(%873, %874) /* ty=(Tensor[(3, 9, 5), float32], Tensor[(13, 4, 3), uint16], Tensor[(1, 360), float64]) */;
    %876 = cast(%var_7679, dtype="float32") /* ty=Tensor[(80), float32] */;
    %877 = reshape(%876, newshape=[8, 1, 10]) /* ty=Tensor[(8, 1, 10), float32] */;
    %878 = @func_2028(%877) /* ty=(Tensor[(8, 1, 10), float32], Tensor[(11, 3), int64], Tensor[(2, 108), float64], Tensor[(33), int64]) */;
    %879 = cast(meta[relay.Constant][78] /* ty=Tensor[(24, 12), float64] */, dtype="float64") /* ty=Tensor[(24, 12), float64] */;
    %880 = reshape(%879, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float64] */;
    %881 = @func_3266(%880) /* ty=(Tensor[(9, 4, 8), float64],) */;
    %882 = @func_7501() /* ty=(Tensor[(16, 3, 16), float32],) */;
    %883 = cast(%var_7701, dtype="float64") /* ty=Tensor[(150), float64] */;
    %884 = %875.1;
    %885 = cast(%884, dtype="float64") /* ty=Tensor[(13, 4, 3), float64] */;
    %886 = reshape(%883, newshape=[6, 5, 5]) /* ty=Tensor[(6, 5, 5), float64] */;
    %887 = reshape(%885, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %888 = @func_554(%886, %887) /* ty=(Tensor[(6, 5, 5), float64], Tensor[(13, 4, 3), uint16], Tensor[(156), float64], Tensor[(13, 4, 3), uint16]) */;
    %889 = cosh(%870) /* ty=Tensor[(16, 3, 16), float64] */;
    %890 = %878.3;
    %891 = %881.0;
    %892 = %882.0;
    %893 = %888.0;
    (%889, %884, meta[relay.Constant][77] /* ty=Tensor[(15, 9), float32] */, %var_7676, %890, %var_7679, %891, meta[relay.Constant][78] /* ty=Tensor[(24, 12), float64] */, %892, %893, %var_7701)
  };
  %894(%var_7707, %var_7708, %var_7709) /* ty=(Tensor[(16, 3, 16), float64], Tensor[(13, 4, 3), uint16], Tensor[(15, 9), float32], Tensor[(360), float64], Tensor[(33), int64], Tensor[(80), float32], Tensor[(9, 4, 8), float64], Tensor[(24, 12), float64], Tensor[(16, 3, 16), float32], Tensor[(6, 5, 5), float64], Tensor[(150), float64]) */
}

def @func_11296() -> (Tensor[(16, 3, 16), float32],) {
  %895 = @func_9612() /* ty=Tensor[(16, 3, 16), float32] */;
  (%895,)
}

def @func_9612() -> Tensor[(16, 3, 16), float32] {
  %896 = @func_8284() /* ty=(Tensor[(480), float32], Tensor[(16, 3, 16), float32], Tensor[(16, 3, 16), float32], Tensor[(3, 9, 11), float64], Tensor[(1, 33), int64], Tensor[(99, 3), int64]) */;
  %896.2
}

def @func_12063(%var_12062: Tensor[(10, 15, 4), float32]) -> Tensor[(10, 15, 4), float32] {
  %898 = fn (%var_12058: Tensor[(10, 15, 4), float32]) -> Tensor[(10, 15, 4), float32] {
    %897 = cast(%var_12058, dtype="float32") /* ty=Tensor[(10, 15, 4), float32] */;
    log2(%897) /* ty=Tensor[(10, 15, 4), float32] */
  };
  %898(%var_12062) /* ty=Tensor[(10, 15, 4), float32] */
}

def @func_10924(%var_10884: Tensor[(16, 16, 15), float64], %var_10893: Tensor[(480), uint8], %var_10904: Tensor[(640), float32]) -> (Tensor[(12, 4, 10), uint8], Tensor[(480), uint8], Tensor[(16, 10, 4), float32], Tensor[(640), float32], Tensor[(16, 3, 16), float32], Tensor[(5, 260), float32], Tensor[(16, 16, 15), int8]) {
  %899 = cast(%var_10893, dtype="uint8") /* ty=Tensor[(480), uint8] */;
  %900 = reshape(%899, newshape=[12, 4, 10]) /* ty=Tensor[(12, 4, 10), uint8] */;
  %901 = @func_3837(%900) /* ty=(Tensor[(12, 4, 10), uint8], Tensor[(11, 3), int64], Tensor[(80), float32]) */;
  %902 = cast(%var_10904, dtype="float32") /* ty=Tensor[(640), float32] */;
  %903 = reshape(%902, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float32] */;
  %904 = @func_3296(%903) /* ty=(Tensor[(16, 10, 4), float32],) */;
  %905 = @func_9177() /* ty=(Tensor[(16, 3, 16), float32], Tensor[(288), float64], Tensor[(5, 260), float32], Tensor[(5, 33), int64], Tensor[(165), int64]) */;
  %906 = cast(%var_10884, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  %907 = rsqrt(%906) /* ty=Tensor[(16, 16, 15), float64] */;
  %908 = cast(%var_10884, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %909 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%907, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %912 = greater(%910, %911) /* ty=Tensor[(16, 16, 15), bool] */;
  %913 = cast(%907, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %917 = logical_and(%915, %916) /* ty=Tensor[(16, 16, 15), bool] */;
  %918 = cast(%var_10884, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%917, dtype="int8") /* ty=Tensor[(16, 16, 15), int8] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %922 = %901.0;
  %923 = %904.0;
  %924 = @func_10102() /* ty=Tensor[(16, 3, 16), float32] */;
  %925 = %905.2;
  %926 = multiply(%920, %921) /* ty=Tensor[(16, 16, 15), int8] */;
  (%922, %var_10893, %923, %var_10904, %924, %925, %926)
}

def @func_7605() -> Tensor[(16, 3, 16), float32] {
  @func_7564() /* ty=Tensor[(16, 3, 16), float32] */
}

def @func_10725() -> Tensor[(16, 3, 16), float64] {
  %928 = fn () -> Tensor[(16, 3, 16), float64] {
    %927 = @func_10402() /* ty=(Tensor[(16, 3, 16), float64], Tensor[(10, 10, 3), float32], Tensor[(50, 6), float32], Tensor[(16, 3, 16), float32], Tensor[(8, 3, 15), float32], Tensor[(360), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), float32]) */;
    %927.0
  };
  %928() /* ty=Tensor[(16, 3, 16), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen330/build/output.py", line 2274, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:07:40] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

