==========mod==========
#[version = "0.0.5"]
def @func_2072() -> (Tensor[(15, 14, 6), float64],) {
  %0 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %1 = %0.1;
  (%1,)
}

def @func_3170() -> Tensor[(15, 14, 6), float64] {
  %2 = @func_2379() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %2.0
}

def @func_287(%var_269: Tensor[(16, 8, 12), float32], %var_270: Tensor[(16, 8, 12), float32]) -> (Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) {
  %3 = cast(%var_270, dtype="float32") /* ty=Tensor[(16, 8, 12), float32] */;
  %4 = shape_of(%var_269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_269, dtype="float32") /* ty=Tensor[(16, 8, 12), float32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %8 = reshape(%7, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %9 = @func_102(%8) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %10 = floor_mod(%5, %6) /* ty=Tensor[(16, 8, 12), float32] */;
  %11 = %9.2;
  (%10, %11, meta[relay.Constant][0] /* ty=Tensor[(520), float32] */)
}

def @func_3300(%var_3221: Tensor[(1536), float32], %var_3231: Tensor[(576), float32], %var_3232: Tensor[(490), float64], %var_3253: Tensor[(2366), uint8]) -> (Tensor[(15, 14, 6), float64], Tensor[(16, 8, 12), float32], Tensor[(1536), float32], Tensor[(15, 14, 6), uint16], Tensor[(576), float32], Tensor[(490), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64], Tensor[(7, 10, 7), bool], Tensor[(2366), float32], Tensor[(2366), float32], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float32]) {
  %12 = @func_2379() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %13 = cast(%var_3221, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %14 = cast(%var_3221, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %15 = reshape(%13, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %16 = reshape(%14, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %17 = @func_287(%15, %16) /* ty=(Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %18 = cast(%var_3231, dtype="float32") /* ty=Tensor[(576), float32] */;
  %19 = cast(%var_3232, dtype="float64") /* ty=Tensor[(490), float64] */;
  %20 = reshape(%18, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %21 = reshape(%19, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float64] */;
  %22 = @func_2942(%20, %21) /* ty=(Tensor[(8, 4, 1), float64], Tensor[(32), float64], Tensor[(5, 11, 12), float64], Tensor[(660), uint16], Tensor[(12, 8, 6), float32], Tensor[(576), float32], Tensor[(12, 8, 6), float32], Tensor[(7, 10, 7), uint64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %24 = reshape(%23, newshape=[2, 8, 15]) /* ty=Tensor[(2, 8, 15), float64] */;
  %25 = @func_2832(%24) /* ty=(Tensor[(2, 8, 15), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %27 = reshape(%26, newshape=[1, 1, 8]) /* ty=Tensor[(1, 1, 8), float64] */;
  %28 = cast(%var_3253, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
  %29 = reshape(%28, newshape=[14, 13, 13]) /* ty=Tensor[(14, 13, 13), uint8] */;
  %30 = @func_431(%29) /* ty=(Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(2366), uint8] */, dtype="float32") /* ty=Tensor[(2366), float32] */;
  %32 = shape_of(%var_3253, dtype="int32") /* ty=Tensor[(1), int32] */;
  %33 = cast(%var_3253, dtype="float32") /* ty=Tensor[(2366), float32] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?), float32] */;
  %35 = cast(%var_3253, dtype="float32") /* ty=Tensor[(2366), float32] */;
  %36 = %12.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %38 = cast(%36, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %39 = reshape(%37, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
  %40 = reshape(%38, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
  %41 = @func_1935(%39, %40) /* ty=(Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) */;
  %42 = %41.1;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %44 = log(%43) /* ty=Tensor[(15, 14, 6), float32] */;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %46 = acosh(%45) /* ty=Tensor[(15, 14, 6), float64] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %48 = %17.0;
  %49 = %22.10;
  %50 = %25.0;
  %51 = @func_3127(%27) /* ty=Tensor[(1, 1, 8), float64] */;
  %52 = %30.1;
  %53 = floor_divide(%33, %34) /* ty=Tensor[(2366), float32] */;
  %54 = log10(%35) /* ty=Tensor[(2366), float32] */;
  %55 = @func_2112() /* ty=Tensor[(15, 14, 6), float64] */;
  %56 = atanh(%47) /* ty=Tensor[(15, 14, 6), float32] */;
  (%36, %48, %var_3221, %49, %var_3231, %var_3232, %50, meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, %51, meta[relay.Constant][2] /* ty=Tensor[(8), float64] */, %52, %53, %54, %55, %56)
}

def @func_3552(%var_3523: Tensor[(490, 1), float32], %var_3528: Tensor[(32), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(7, 10, 7), bool], Tensor[(490, 1), float32], Tensor[(8, 4, ?), float32]) {
  %57 = cast(%var_3523, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %58 = cast(%var_3523, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %59 = reshape(%57, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %60 = reshape(%58, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %61 = @func_27(%59, %60) /* ty=(Tensor[(7, 10, 7), bool],) */;
  %62 = cast(%var_3528, dtype="float64") /* ty=Tensor[(32), float64] */;
  %63 = reshape(%62, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %64 = @func_591(%63) /* ty=(Tensor[(8, 4, 1), float64],) */;
  %65 = %64.0;
  %66 = cast(%var_3528, dtype="float32") /* ty=Tensor[(32), float32] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="float32") /* ty=Tensor[(8, 4, 1), float32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %70 = @func_3170() /* ty=Tensor[(15, 14, 6), float64] */;
  %71 = %61.0;
  %72 = add(%68, %69) /* ty=Tensor[(8, 4, ?), float32] */;
  (%70, %71, %var_3523, %72)
}

def @func_2675(%var_2662: Tensor[(13, 5, 15), uint64]) -> (Tensor[(13, 5, 15), uint64], Tensor[(15, 14, 6), uint16]) {
  %73 = cast(%var_2662, dtype="uint64") /* ty=Tensor[(13, 5, 15), uint64] */;
  %74 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(13, 5, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 5, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 5, 15), uint64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %77 = maximum(%75, %76) /* ty=Tensor[(13, 5, 15), uint64] */;
  %78 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
  (%77, %78)
}

def @func_1754(%var_1644: Tensor[(169, 14), uint8], %var_1702: Tensor[(84), bool]) -> (Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) {
  %79 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %80 = %79.2;
  %81 = cast(%var_1644, dtype="int64") /* ty=Tensor[(169, 14), int64] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(2), int32] */;
  %83 = cast(%80, dtype="int64") /* ty=Tensor[(169, 14), int64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %87 = reshape(%85, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %88 = reshape(%86, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %89 = @func_287(%87, %88) /* ty=(Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(1536), float32] */, dtype="uint32") /* ty=Tensor[(1536), uint32] */;
  %91 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(1536), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %92 = cast(meta[relay.Constant][5] /* ty=Tensor[(1536), float32] */, dtype="uint32") /* ty=Tensor[(1536), uint32] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %94 = cast(%var_1702, dtype="bool") /* ty=Tensor[(84), bool] */;
  %95 = cast(%var_1702, dtype="bool") /* ty=Tensor[(84), bool] */;
  %96 = reshape(%94, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
  %97 = reshape(%95, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
  %98 = cast(%var_1644, dtype="float32") /* ty=Tensor[(169, 14), float32] */;
  %99 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %100 = logical_xor(%83, %84) /* ty=Tensor[(169, 14), int64] */;
  %101 = %89.1;
  %102 = add(%92, %93) /* ty=Tensor[(1536), uint32] */;
  %103 = @func_1620() /* ty=Tensor[(726), float64] */;
  %104 = @func_382(%96, %97) /* ty=Tensor[(14, 2, 3), float32] */;
  %105 = acos(%98) /* ty=Tensor[(169, 14), float32] */;
  %106 = %99.1;
  (%100, %101, %102, %103, %104, %var_1702, %105, %106)
}

def @func_2252() -> (Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) {
  %107 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %108 = %107.0;
  %109 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 14, 6), float64] */, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %113 = @func_1836() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
  %115 = reshape(%114, newshape=[14, 13, 13]) /* ty=Tensor[(14, 13, 13), uint8] */;
  %116 = @func_431(%115) /* ty=(Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %117 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %118 = less_equal(%111, %112) /* ty=Tensor[(15, 14, 6), bool] */;
  %119 = %113.3;
  %120 = %116.1;
  %121 = %117.1;
  (%118, %119, %120, meta[relay.Constant][8] /* ty=Tensor[(2366), uint8] */, %121)
}

def @func_4504() -> Tensor[(15, 14, 6), float64] {
  %122 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %122.0
}

def @func_3944(%var_3937: Tensor[(12, 3, 1), float32], %var_3938: Tensor[(12, 3, 16), float32]) -> Tensor[(12, 3, 16), float32] {
  %123 = cast(%var_3937, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %124 = cast(%var_3938, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  power(%123, %124) /* ty=Tensor[(12, 3, 16), float32] */
}

def @func_2446() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(520, 1), float32]) {
  %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(520, 1), float32] */, dtype="float32") /* ty=Tensor[(520, 1), float32] */;
  %126 = reshape(%125, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %127 = @func_102(%126) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %128 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
  %129 = %127.2;
  (%128, %129, meta[relay.Constant][9] /* ty=Tensor[(520, 1), float32] */)
}

def @func_4886(%var_4861: Tensor[(32), float64]) -> (Tensor[(726), float32], Tensor[(15, 14, 6), float64], Tensor[(32), float64], Tensor[(84), bool]) {
  %130 = cast(%var_4861, dtype="float64") /* ty=Tensor[(32), float64] */;
  %131 = reshape(%130, newshape=[32, 1]) /* ty=Tensor[(32, 1), float64] */;
  %132 = @func_2725(%131) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(6, 144), float64], Tensor[(32, 1), float64], Tensor[(8, 4, 624), int32]) */;
  %133 = @func_3774() /* ty=(Tensor[(84), bool],) */;
  %134 = @func_2513() /* ty=Tensor[(726), float32] */;
  %135 = %132.1;
  %136 = %133.0;
  (%134, %135, %var_4861, %136)
}

def @func_3906(%var_3899: Tensor[(13, 6, 12), float32]) -> Tensor[(13, 6, 12), float32] {
  %137 = cast(%var_3899, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  asin(%137) /* ty=Tensor[(13, 6, 12), float32] */
}

def @func_3996() -> (Tensor[(7, 10, 7), bool], Tensor[(726), float32]) {
  %138 = @func_3882() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool]) */;
  %139 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %140 = %138.1;
  %141 = %139.1;
  (%140, %141)
}

def @func_1033(%var_957: Tensor[(8, 13, 6), float32], %var_979: Tensor[(864), float64]) -> (Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) {
  %142 = cast(%var_979, dtype="float64") /* ty=Tensor[(864), float64] */;
  %143 = reshape(%142, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
  %144 = cast(%var_957, dtype="float32") /* ty=Tensor[(8, 13, 6), float32] */;
  %145 = log10(%144) /* ty=Tensor[(8, 13, 6), float32] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(8, 13, 6), float32] */;
  %147 = @func_838(%143) /* ty=Tensor[(9, 12, 8), float64] */;
  %148 = cos(%146) /* ty=Tensor[(8, 13, 6), float32] */;
  (%147, %var_979, %148)
}

def @func_102(%var_68: Tensor[(8, 13, 5), float32]) -> (Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) {
  %149 = cast(meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %150 = cast(meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %151 = reshape(%149, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %152 = reshape(%150, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %153 = @func_27(%151, %152) /* ty=(Tensor[(7, 10, 7), bool],) */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %155 = %153.0;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %157 = reshape(%154, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %158 = reshape(%156, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %159 = @func_27(%157, %158) /* ty=(Tensor[(7, 10, 7), bool],) */;
  %160 = cast(%var_68, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
  %161 = sigmoid(%160) /* ty=Tensor[(8, 13, 5), float32] */;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %163 = sqrt(%162) /* ty=Tensor[(8, 13, 5), float64] */;
  %164 = cast(%163, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %165 = erf(%164) /* ty=Tensor[(8, 13, 5), float64] */;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %167 = cast(%161, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %168 = %159.0;
  %169 = sin(%166) /* ty=Tensor[(8, 13, 5), float64] */;
  %170 = acos(%167) /* ty=Tensor[(8, 13, 5), float64] */;
  (%155, meta[relay.Constant][10] /* ty=Tensor[(490), float32] */, %168, %169, %170)
}

def @func_4182(%var_4123: Tensor[(6, 9, 6), uint8], %var_4131: Tensor[(1280), float64], %var_4156: Tensor[(864), float64], %var_4161: Tensor[(15, 14, 6), uint16]) -> (Tensor[(6, 9, 6), bool], Tensor[(15, 14, 6), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), float32], Tensor[(624), float32], Tensor[(1215), int32]) {
  %171 = cast(%var_4123, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %172 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = cast(%var_4131, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %176 = cast(meta[relay.Constant][12] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %177 = reshape(%175, newshape=[1280]) /* ty=Tensor[(1280), float64] */;
  %178 = reshape(%176, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %179 = @func_2962(%177, %178) /* ty=(Tensor[(726), float32], Tensor[(10, 8, 16), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(15, 14, 6), float64]) */;
  %180 = @func_3774() /* ty=(Tensor[(84), bool],) */;
  %181 = cast(meta[relay.Constant][13] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %182 = cast(%var_4156, dtype="float64") /* ty=Tensor[(864), float64] */;
  %183 = reshape(%181, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %184 = reshape(%182, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %185 = @func_2627(%183, %184) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) */;
  %186 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %187 = %186.2;
  %188 = cast(%var_4161, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = greater(%190, %191) /* ty=Tensor[(15, 14, 6), bool] */;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %194 = cast(meta[relay.Constant][14] /* ty=Tensor[(1215), int32] */, dtype="int32") /* ty=Tensor[(1215), int32] */;
  %195 = cast(meta[relay.Constant][13] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %196 = reshape(%194, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int32] */;
  %197 = reshape(%195, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %198 = @func_3725(%196, %197) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), uint16], Tensor[(9, 9, 15), bool]) */;
  %199 = less_equal(%173, %174) /* ty=Tensor[(6, 9, 6), bool] */;
  %200 = %179.4;
  %201 = %180.0;
  %202 = %185.1;
  %203 = erf(%193) /* ty=Tensor[(15, 14, 6), float32] */;
  %204 = %198.1;
  (%199, %200, %var_4131, meta[relay.Constant][12] /* ty=Tensor[(1536), float32] */, %201, %202, meta[relay.Constant][13] /* ty=Tensor[(624), float32] */, %var_4156, %203, %204, meta[relay.Constant][14] /* ty=Tensor[(1215), int32] */)
}

def @func_1325(%var_1296: Tensor[(10, 8, 16), float64], %var_1297: Tensor[(10, 8, 16), float64], %var_1319: Tensor[(1536), float32]) -> (Tensor[(10, 8, 16), float64], Tensor[(10, 8, 16), float64], Tensor[(520), float32], Tensor[(1536), float32]) {
  %205 = cast(%var_1297, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  %206 = shape_of(%var_1296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_1296, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %209 = cast(%var_1296, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
  %210 = cast(%var_1319, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %211 = cast(%var_1319, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %212 = reshape(%210, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %213 = reshape(%211, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %214 = @func_287(%212, %213) /* ty=(Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %215 = divide(%207, %208) /* ty=Tensor[(10, 8, 16), float64] */;
  %216 = rsqrt(%209) /* ty=Tensor[(10, 8, 16), float64] */;
  %217 = %214.2;
  (%215, %216, %217, %var_1319)
}

def @func_3593(%var_3571: int32, %var_3572: Tensor[(14, 13, 10), int32], %var_3591: Tensor[(8), float64]) -> (Tensor[(14, 13, 10), uint16], Tensor[(14, 13, 10), int32], Tensor[(15, 14, 6), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64]) {
  %218 = cast(%var_3571, dtype="bool") /* ty=bool */;
  %219 = cast(%var_3572, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
  %220 = equal(%218, %219) /* ty=Tensor[(14, 13, 10), bool] */;
  %221 = cast(%var_3572, dtype="uint16") /* ty=Tensor[(14, 13, 10), uint16] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="uint16") /* ty=Tensor[(14, 13, 10), uint16] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %225 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 13, 10), int32] */, dtype="int32") /* ty=Tensor[(14, 13, 10), int32] */;
  %226 = shape_of(%var_3572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_3572, dtype="int32") /* ty=Tensor[(14, 13, 10), int32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %229 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
  %230 = cast(%var_3591, dtype="float64") /* ty=Tensor[(8), float64] */;
  %231 = reshape(%230, newshape=[1, 1, 8]) /* ty=Tensor[(1, 1, 8), float64] */;
  %232 = bitwise_or(%223, %224) /* ty=Tensor[(14, 13, 10), uint16] */;
  %233 = subtract(%227, %228) /* ty=Tensor[(14, 13, 10), int32] */;
  %234 = %229.4;
  %235 = @func_3127(%231) /* ty=Tensor[(1, 1, 8), float64] */;
  (%232, %233, %234, %235, %var_3591)
}

def @func_2112() -> Tensor[(15, 14, 6), float64] {
  %236 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %236.0
}

def @func_1183() -> (Tensor[(15, 14, 6), uint16],) {
  %237 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %238 = %237.0;
  (%238,)
}

def @func_1972() -> Tensor[(15, 14, 6), uint16] {
  %239 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %239.0
}

def @func_3785(%var_3781: Tensor[(1, 6, 2), float32]) -> (Tensor[(1, 6, 2), float32],) {
  %240 = cast(%var_3781, dtype="float32") /* ty=Tensor[(1, 6, 2), float32] */;
  %241 = log10(%240) /* ty=Tensor[(1, 6, 2), float32] */;
  (%241,)
}

def @func_3053() -> Tensor[(84), bool] {
  %242 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %242.1
}

def @func_4818(%var_4801: Tensor[(1820), int32]) -> (Tensor[(15, 14, 6), uint16], Tensor[(14, 13, 10), int32], int32, Tensor[(1, 8), float64], Tensor[(1820), float32]) {
  %243 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %244 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %245 = cast(%var_4801, dtype="int32") /* ty=Tensor[(1820), int32] */;
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 8), float64] */;
  %247 = reshape(%244, newshape=[]) /* ty=int32 */;
  %248 = reshape(%245, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), int32] */;
  %249 = reshape(%246, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %250 = @func_3593(%247, %248, %249) /* ty=(Tensor[(14, 13, 10), uint16], Tensor[(14, 13, 10), int32], Tensor[(15, 14, 6), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64]) */;
  %251 = cast(%var_4801, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %252 = %243.0;
  %253 = %250.1;
  %254 = sqrt(%251) /* ty=Tensor[(1820), float32] */;
  (%252, %253, -8 /* ty=int32 */, meta[relay.Constant][16] /* ty=Tensor[(1, 8), float64] */, %254)
}

def @func_3774() -> (Tensor[(84), bool],) {
  %255 = @func_3653() /* ty=Tensor[(84), bool] */;
  (%255,)
}

def @func_3743(%var_3739: Tensor[(490, 1), float64]) -> (Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), uint16], Tensor[(1536), float32], Tensor[(576), float32], Tensor[(490, 1), float64], Tensor[(2366), uint8]) {
  %256 = cast(meta[relay.Constant][17] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %257 = cast(meta[relay.Constant][18] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %258 = cast(%var_3739, dtype="float64") /* ty=Tensor[(490, 1), float64] */;
  %259 = cast(meta[relay.Constant][19] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
  %260 = reshape(%256, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %261 = reshape(%257, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %262 = reshape(%258, newshape=[490]) /* ty=Tensor[(490), float64] */;
  %263 = reshape(%259, newshape=[2366]) /* ty=Tensor[(2366), uint8] */;
  %264 = @func_3300(%260, %261, %262, %263) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(16, 8, 12), float32], Tensor[(1536), float32], Tensor[(15, 14, 6), uint16], Tensor[(576), float32], Tensor[(490), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64], Tensor[(7, 10, 7), bool], Tensor[(2366), float32], Tensor[(2366), float32], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float32]) */;
  %265 = @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */;
  %266 = %264.3;
  (%265, %266, meta[relay.Constant][17] /* ty=Tensor[(1536), float32] */, meta[relay.Constant][18] /* ty=Tensor[(576), float32] */, %var_3739, meta[relay.Constant][19] /* ty=Tensor[(2366), uint8] */)
}

def @func_3882() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool]) {
  %267 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %268 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
  %269 = %267.2;
  %270 = %268.2;
  (%269, %270)
}

def @main(%var_5193: Tensor[(10, 15, 5), float32]) -> Tensor[(10, 15, 5), float32] {
  %271 = cast(%var_5193, dtype="float32") /* ty=Tensor[(10, 15, 5), float32] */;
  sin(%271) /* ty=Tensor[(10, 15, 5), float32] */
}

def @func_3653() -> Tensor[(84), bool] {
  %272 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %272.3
}

def @func_2832(%var_2811: Tensor[(2, 8, 15), float64]) -> (Tensor[(2, 8, 15), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) {
  %273 = cast(%var_2811, dtype="float64") /* ty=Tensor[(2, 8, 15), float64] */;
  %274 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
  %275 = sqrt(%273) /* ty=Tensor[(2, 8, 15), float64] */;
  %276 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
  %277 = %274.4;
  (%275, %276, %277)
}

def @func_192(%var_166: Tensor[(11, 11, 6), float64]) -> (Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) {
  %278 = cast(%var_166, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %279 = acos(%278) /* ty=Tensor[(11, 11, 6), float64] */;
  %280 = cast(%279, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
  %281 = shape_of(%var_166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%var_166, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %284 = subtract(%282, %283) /* ty=Tensor[(11, 11, 6), uint8] */;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %286 = atan(%285) /* ty=Tensor[(11, 11, 6), float64] */;
  %287 = cast(%279, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %291 = logical_or(%289, %290) /* ty=Tensor[(11, 11, 6), bool] */;
  %292 = cast(%286, dtype="int8") /* ty=Tensor[(11, 11, 6), int8] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="int8") /* ty=Tensor[(11, 11, 6), int8] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %296 = cast(%284, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %297 = bitwise_xor(%294, %295) /* ty=Tensor[(11, 11, 6), int8] */;
  %298 = log2(%296) /* ty=Tensor[(11, 11, 6), float64] */;
  (%297, %298)
}

def @func_1620() -> Tensor[(726), float64] {
  %299 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %300 = %299.3;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(726), float64] */;
  %302 = tan(%301) /* ty=Tensor[(726), float64] */;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(726), float64] */;
  exp(%303) /* ty=Tensor[(726), float64] */
}

def @func_4067(%var_4038: Tensor[(576), float32]) -> (Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16], Tensor[(576), float32]) {
  %304 = @func_3774() /* ty=(Tensor[(84), bool],) */;
  %305 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %306 = cast(%var_4038, dtype="float32") /* ty=Tensor[(576), float32] */;
  %307 = reshape(%306, newshape=[2, 288]) /* ty=Tensor[(2, 288), float32] */;
  %308 = @func_3374(%307) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(12, 8, 6), float32], Tensor[(2, 288), float32], Tensor[(15, 14, 6), float64]) */;
  %309 = %304.0;
  %310 = %305.0;
  %311 = %308.0;
  (%309, %310, %311, %var_4038)
}

def @func_3127(%var_3123: Tensor[(1, 1, 8), float64]) -> Tensor[(1, 1, 8), float64] {
  %312 = cast(%var_3123, dtype="float64") /* ty=Tensor[(1, 1, 8), float64] */;
  asin(%312) /* ty=Tensor[(1, 1, 8), float64] */
}

def @func_3802(%var_3797: Tensor[(6, 11, 10), float32]) -> (Tensor[(6, 11, 10), float32], Tensor[(6, 11, 10), float32]) {
  %313 = cast(%var_3797, dtype="float32") /* ty=Tensor[(6, 11, 10), float32] */;
  %314 = cast(%var_3797, dtype="float32") /* ty=Tensor[(6, 11, 10), float32] */;
  %315 = erf(%313) /* ty=Tensor[(6, 11, 10), float32] */;
  %316 = log2(%314) /* ty=Tensor[(6, 11, 10), float32] */;
  (%315, %316)
}

def @func_5093(%var_5086: Tensor[(11, 11, 6), int8]) -> Tensor[(11, 11, 6), bool] {
  %317 = @func_1836() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) */;
  %318 = %317.1;
  %319 = cast(%var_5086, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%321, %322) /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_2627(%var_2609: Tensor[(624), float32], %var_2610: Tensor[(864), float64]) -> (Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) {
  %323 = cast(%var_2609, dtype="float32") /* ty=Tensor[(624), float32] */;
  %324 = cast(%var_2610, dtype="float64") /* ty=Tensor[(864), float64] */;
  %325 = reshape(%323, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %326 = reshape(%324, newshape=[36, 24]) /* ty=Tensor[(36, 24), float64] */;
  %327 = @func_2586(%325, %326) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) */;
  %328 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
  %329 = %327.0;
  (%328, %329, %var_2609, %var_2610)
}

def @func_2513() -> Tensor[(726), float32] {
  %330 = @func_1620() /* ty=Tensor[(726), float64] */;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(726), float32] */;
  acos(%331) /* ty=Tensor[(726), float32] */
}

def @func_27(%var_10: Tensor[(7, 10, 7), float32], %var_20: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), bool],) {
  %332 = cast(%var_10, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %333 = asinh(%332) /* ty=Tensor[(7, 10, 7), float32] */;
  %334 = cast(%var_20, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = logical_or(%336, %337) /* ty=Tensor[(7, 10, 7), bool] */;
  (%338,)
}

def @func_382(%var_375: Tensor[(14, 2, 3), bool], %var_376: Tensor[(14, 2, 3), bool]) -> Tensor[(14, 2, 3), float32] {
  %339 = cast(%var_376, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %340 = shape_of(%var_375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_375, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = logical_and(%341, %342) /* ty=Tensor[(14, 2, 3), bool] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  atanh(%344) /* ty=Tensor[(14, 2, 3), float32] */
}

def @func_2379() -> (Tensor[(15, 14, 6), float64],) {
  %345 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %348 = atan(%347) /* ty=Tensor[(15, 14, 6), float64] */;
  (%348,)
}

def @func_838(%var_830: Tensor[(9, 12, 8), float64]) -> Tensor[(9, 12, 8), float64] {
  %349 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
  %350 = shape_of(%var_830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_830, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%351, %352) /* ty=Tensor[(9, 12, 8), float64] */
}

def @func_4266() -> (Tensor[(726), bool],) {
  %353 = cast(meta[relay.Constant][21] /* ty=Tensor[(726), float64] */, dtype="float32") /* ty=Tensor[(726), float32] */;
  %354 = log2(%353) /* ty=Tensor[(726), float32] */;
  %355 = @func_1620() /* ty=Tensor[(726), float64] */;
  %356 = cast(meta[relay.Constant][21] /* ty=Tensor[(726), float64] */, dtype="uint8") /* ty=Tensor[(726), uint8] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(1), int32] */;
  %358 = cast(%355, dtype="uint8") /* ty=Tensor[(726), uint8] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %360 = maximum(%358, %359) /* ty=Tensor[(726), uint8] */;
  %361 = cast(%360, dtype="bool") /* ty=Tensor[(726), bool] */;
  %362 = shape_of(%354, dtype="int32") /* ty=Tensor[(1), int32] */;
  %363 = cast(%354, dtype="bool") /* ty=Tensor[(726), bool] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?), bool] */;
  %365 = greater(%363, %364) /* ty=Tensor[(726), bool] */;
  (%365,)
}

def @func_3453(%var_3384: uint32, %var_3385: Tensor[(5, 12, 2), uint32], %var_3406: Tensor[(140), int8], %var_3426: Tensor[(84), bool]) -> (Tensor[(5, 12, 2), uint32], Tensor[(4, 7, 5), int8], Tensor[(140), int8], Tensor[(726), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool], Tensor[(5, 12, 2), float64]) {
  %366 = cast(%var_3384, dtype="uint32") /* ty=uint32 */;
  %367 = cast(%var_3385, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
  %368 = cast(%var_3406, dtype="int8") /* ty=Tensor[(140), int8] */;
  %369 = cast(%var_3406, dtype="int8") /* ty=Tensor[(140), int8] */;
  %370 = reshape(%368, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int8] */;
  %371 = reshape(%369, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int8] */;
  %372 = @func_782(%370, %371) /* ty=(Tensor[(4, 7, 5), int8],) */;
  %373 = cast(meta[relay.Constant][22] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
  %374 = cast(%var_3426, dtype="bool") /* ty=Tensor[(84), bool] */;
  %375 = reshape(%373, newshape=[169, 14]) /* ty=Tensor[(169, 14), uint8] */;
  %376 = reshape(%374, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %377 = @func_1754(%375, %376) /* ty=(Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) */;
  %378 = cast(%var_3385, dtype="float64") /* ty=Tensor[(5, 12, 2), float64] */;
  %379 = atanh(%378) /* ty=Tensor[(5, 12, 2), float64] */;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(5, 12, 2), float64] */;
  %381 = cast(%var_3384, dtype="float64") /* ty=float64 */;
  %382 = right_shift(%366, %367) /* ty=Tensor[(5, 12, 2), uint32] */;
  %383 = %372.0;
  %384 = @func_1620() /* ty=Tensor[(726), float64] */;
  %385 = %377.5;
  %386 = divide(%380, %381) /* ty=Tensor[(5, 12, 2), float64] */;
  (%382, %383, %var_3406, %384, %385, meta[relay.Constant][22] /* ty=Tensor[(2366), uint8] */, %var_3426, %386)
}

def @func_2647(%var_2642: Tensor[(12, 8, 6), float32]) -> Tensor[(12, 8, 6), float32] {
  %387 = cast(%var_2642, dtype="float32") /* ty=Tensor[(12, 8, 6), float32] */;
  sin(%387) /* ty=Tensor[(12, 8, 6), float32] */
}

def @func_3922() -> (Tensor[(15, 14, 6), uint16], Tensor[(726), float32]) {
  %388 = @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */;
  %389 = @func_2513() /* ty=Tensor[(726), float32] */;
  (%388, %389)
}

def @func_5071(%var_5055: Tensor[(13, 5, 16), float64], %var_5060: Tensor[(624), float32], %var_5061: Tensor[(864), float64]) -> (Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), int32], Tensor[(8, 13, 6), float32], Tensor[(624), float32], Tensor[(864), float64]) {
  %390 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %391 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(13, 5, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %394 = cast(%var_5055, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
  %395 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(13, 5, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 5, 16), float64] */, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %398 = cast(%var_5060, dtype="float32") /* ty=Tensor[(624), float32] */;
  %399 = cast(%var_5061, dtype="float64") /* ty=Tensor[(864), float64] */;
  %400 = reshape(%398, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), float32] */;
  %401 = reshape(%399, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %402 = @func_1033(%400, %401) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) */;
  %403 = mod(%392, %393) /* ty=Tensor[(13, 5, 16), float64] */;
  %404 = right_shift(%396, %397) /* ty=Tensor[(13, 5, 16), int32] */;
  %405 = %402.2;
  (%403, %404, %405, %var_5060, %var_5061)
}

def @func_882(%var_847: Tensor[(5, 11, 12), uint16], %var_848: Tensor[(5, 11, 12), uint16]) -> (Tensor[(5, 11, 12), uint16], Tensor[(5, 11, 12), float64]) {
  %406 = cast(%var_848, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
  %407 = shape_of(%var_847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_847, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %410 = cast(%var_848, dtype="int8") /* ty=Tensor[(5, 11, 12), int8] */;
  %411 = shape_of(%var_847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%var_847, dtype="int8") /* ty=Tensor[(5, 11, 12), int8] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %414 = right_shift(%412, %413) /* ty=Tensor[(5, 11, 12), int8] */;
  %415 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 11, 12), int8] */, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %419 = logical_xor(%408, %409) /* ty=Tensor[(5, 11, 12), uint16] */;
  %420 = floor_mod(%417, %418) /* ty=Tensor[(5, 11, 12), float64] */;
  (%419, %420)
}

def @func_1836() -> (Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) {
  %421 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %422 = cast(meta[relay.Constant][26] /* ty=Tensor[(363, 2), float64] */, dtype="float64") /* ty=Tensor[(363, 2), float64] */;
  %423 = reshape(%422, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), float64] */;
  %424 = @func_192(%423) /* ty=(Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) */;
  %425 = cast(meta[relay.Constant][27] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %426 = reshape(%425, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %427 = @func_102(%426) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %428 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %429 = %421.0;
  %430 = %424.0;
  %431 = %427.2;
  %432 = %428.0;
  (%429, %430, meta[relay.Constant][26] /* ty=Tensor[(363, 2), float64] */, %431, meta[relay.Constant][27] /* ty=Tensor[(520), float32] */, %432)
}

def @func_1935(%var_1879: Tensor[(15, 14, 6), float64], %var_1907: Tensor[(15, 14, 6), float64]) -> (Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) {
  %433 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %434 = %433.1;
  %435 = cast(%var_1879, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %439 = cast(%var_1907, dtype="int32") /* ty=Tensor[(15, 14, 6), int32] */;
  %440 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%434, dtype="int32") /* ty=Tensor[(15, 14, 6), int32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %443 = cast(meta[relay.Constant][28] /* ty=Tensor[(726), float64] */, dtype="float64") /* ty=Tensor[(726), float64] */;
  %444 = reshape(%443, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), float64] */;
  %445 = @func_192(%444) /* ty=(Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) */;
  %446 = divide(%437, %438) /* ty=Tensor[(15, 14, 6), float32] */;
  %447 = logical_xor(%441, %442) /* ty=Tensor[(15, 14, 6), int32] */;
  %448 = %445.1;
  (%446, %447, %448, meta[relay.Constant][28] /* ty=Tensor[(726), float64] */)
}

def @func_2586(%var_2581: Tensor[(624), float32], %var_2582: Tensor[(36, 24), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) {
  %449 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %450 = cast(%var_2581, dtype="float32") /* ty=Tensor[(624), float32] */;
  %451 = cast(%var_2582, dtype="float64") /* ty=Tensor[(36, 24), float64] */;
  %452 = reshape(%450, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), float32] */;
  %453 = reshape(%451, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %454 = @func_1033(%452, %453) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) */;
  %455 = %449.0;
  %456 = %454.1;
  (%455, %456, %var_2581, %var_2582)
}

def @func_1167() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) {
  %457 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 14, 6), uint16] */, dtype="uint16") /* ty=Tensor[(15, 14, 6), uint16] */;
  %458 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(15, 14, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 14, 6), uint16] */, dtype="uint16") /* ty=Tensor[(15, 14, 6), uint16] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %461 = cast(meta[relay.Constant][31] /* ty=Tensor[(169, 14), uint8] */, dtype="uint8") /* ty=Tensor[(169, 14), uint8] */;
  %462 = reshape(%461, newshape=[14, 13, 13]) /* ty=Tensor[(14, 13, 13), uint8] */;
  %463 = @func_431(%462) /* ty=(Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %464 = bitwise_and(%459, %460) /* ty=Tensor[(15, 14, 6), uint16] */;
  %465 = %463.1;
  (%464, %465, meta[relay.Constant][31] /* ty=Tensor[(169, 14), uint8] */)
}

def @func_2153() -> (Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) {
  %466 = cast(meta[relay.Constant][32] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
  %467 = cast(meta[relay.Constant][33] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %468 = reshape(%466, newshape=[169, 14]) /* ty=Tensor[(169, 14), uint8] */;
  %469 = reshape(%467, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %470 = @func_1754(%468, %469) /* ty=(Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) */;
  %471 = @func_2112() /* ty=Tensor[(15, 14, 6), float64] */;
  %472 = %470.5;
  (%471, %472, meta[relay.Constant][32] /* ty=Tensor[(2366), uint8] */, meta[relay.Constant][33] /* ty=Tensor[(84), bool] */)
}

def @func_591(%var_586: Tensor[(8, 4, 1), float64]) -> (Tensor[(8, 4, 1), float64],) {
  %473 = cast(%var_586, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %474 = atanh(%473) /* ty=Tensor[(8, 4, 1), float64] */;
  (%474,)
}

def @func_4639(%var_4594: Tensor[(15, 11, 16), uint32], %var_4595: Tensor[(15, 11, 16), uint32], %var_4606: Tensor[(864), float64]) -> (Tensor[(15, 11, 16), uint32], Tensor[(15, 11, 16), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(864), float64]) {
  %475 = cast(%var_4595, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
  %476 = shape_of(%var_4594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_4594, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %479 = cast(%var_4594, dtype="float64") /* ty=Tensor[(15, 11, 16), float64] */;
  %480 = cast(meta[relay.Constant][34] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %481 = cast(%var_4606, dtype="float64") /* ty=Tensor[(864), float64] */;
  %482 = reshape(%480, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), float32] */;
  %483 = reshape(%481, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %484 = @func_1033(%482, %483) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) */;
  %485 = bitwise_or(%477, %478) /* ty=Tensor[(15, 11, 16), uint32] */;
  %486 = sinh(%479) /* ty=Tensor[(15, 11, 16), float64] */;
  %487 = %484.1;
  (%485, %486, %487, meta[relay.Constant][34] /* ty=Tensor[(624), float32] */, %var_4606)
}

def @func_3046() -> (Tensor[(15, 14, 6), float32], Tensor[(11, 11, 6), int8]) {
  %488 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %491 = @func_1836() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) */;
  %492 = rsqrt(%490) /* ty=Tensor[(15, 14, 6), float32] */;
  %493 = %491.1;
  (%492, %493)
}

def @func_4376(%var_4367: Tensor[(1, 84), bool]) -> (Tensor[(15, 14, 6), float32], Tensor[(14, 2, 3), float32], Tensor[(1, 84), bool]) {
  %494 = @func_3922() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(726), float32]) */;
  %495 = %494.0;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %497 = cast(%var_4367, dtype="bool") /* ty=Tensor[(1, 84), bool] */;
  %498 = cast(%var_4367, dtype="bool") /* ty=Tensor[(1, 84), bool] */;
  %499 = reshape(%497, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
  %500 = reshape(%498, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
  %501 = acos(%496) /* ty=Tensor[(15, 14, 6), float32] */;
  %502 = @func_382(%499, %500) /* ty=Tensor[(14, 2, 3), float32] */;
  (%501, %502, %var_4367)
}

def @func_2098(%var_2088: uint64, %var_2089: Tensor[(5, 13, 1), uint64]) -> (Tensor[(5, 13, 1), uint64],) {
  %503 = cast(%var_2088, dtype="uint64") /* ty=uint64 */;
  %504 = cast(%var_2089, dtype="uint64") /* ty=Tensor[(5, 13, 1), uint64] */;
  %505 = left_shift(%503, %504) /* ty=Tensor[(5, 13, 1), uint64] */;
  (%505,)
}

def @func_3495() -> Tensor[(15, 14, 6), uint16] {
  %506 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %506.0
}

def @func_1418() -> (Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) {
  %507 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %508 = cast(meta[relay.Constant][35] /* ty=Tensor[(726), float64] */, dtype="float64") /* ty=Tensor[(726), float64] */;
  %509 = reshape(%508, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), float64] */;
  %510 = @func_192(%509) /* ty=(Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="uint32") /* ty=Tensor[(11, 11, 6), uint32] */;
  %513 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(726), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %514 = cast(meta[relay.Constant][35] /* ty=Tensor[(726), float64] */, dtype="uint32") /* ty=Tensor[(726), uint32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %516 = minimum(%514, %515) /* ty=Tensor[(726), uint32] */;
  %517 = cast(%511, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(1), int32] */;
  %519 = cast(%516, dtype="float32") /* ty=Tensor[(726), float32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?), float32] */;
  %521 = cast(meta[relay.Constant][35] /* ty=Tensor[(726), float64] */, dtype="float32") /* ty=Tensor[(726), float32] */;
  %522 = log10(%521) /* ty=Tensor[(726), float32] */;
  %523 = cast(%511, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(1), int32] */;
  %525 = cast(%522, dtype="uint8") /* ty=Tensor[(726), uint8] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %527 = bitwise_or(%525, %526) /* ty=Tensor[(726), uint8] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(726), float64] */;
  %529 = asinh(%528) /* ty=Tensor[(726), float64] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(726), float32] */;
  %531 = cast(%527, dtype="float64") /* ty=Tensor[(726), float64] */;
  %532 = sin(%531) /* ty=Tensor[(726), float64] */;
  %533 = cast(%532, dtype="int32") /* ty=Tensor[(726), int32] */;
  %534 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(726), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %535 = cast(meta[relay.Constant][35] /* ty=Tensor[(726), float64] */, dtype="int32") /* ty=Tensor[(726), int32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?), int32] */;
  %537 = cast(%522, dtype="int8") /* ty=Tensor[(726), int8] */;
  %538 = shape_of(%527, dtype="int32") /* ty=Tensor[(1), int32] */;
  %539 = cast(%527, dtype="int8") /* ty=Tensor[(726), int8] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?), int8] */;
  %541 = %507.1;
  %542 = power(%519, %520) /* ty=Tensor[(726), float32] */;
  %543 = acosh(%530) /* ty=Tensor[(726), float32] */;
  %544 = subtract(%535, %536) /* ty=Tensor[(726), int32] */;
  %545 = right_shift(%539, %540) /* ty=Tensor[(726), int8] */;
  (%541, %542, %543, %544, %545)
}

def @func_3374(%var_3364: Tensor[(2, 288), float32]) -> (Tensor[(15, 14, 6), uint16], Tensor[(12, 8, 6), float32], Tensor[(2, 288), float32], Tensor[(15, 14, 6), float64]) {
  %546 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %547 = cast(%var_3364, dtype="float32") /* ty=Tensor[(2, 288), float32] */;
  %548 = reshape(%547, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), float32] */;
  %549 = %546.2;
  %550 = @func_2647(%548) /* ty=Tensor[(12, 8, 6), float32] */;
  %551 = @func_3170() /* ty=Tensor[(15, 14, 6), float64] */;
  (%549, %550, %var_3364, %551)
}

def @func_782(%var_774: Tensor[(4, 7, 5), int8], %var_775: Tensor[(4, 7, 5), int8]) -> (Tensor[(4, 7, 5), int8],) {
  %552 = cast(%var_775, dtype="int8") /* ty=Tensor[(4, 7, 5), int8] */;
  %553 = shape_of(%var_774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%var_774, dtype="int8") /* ty=Tensor[(4, 7, 5), int8] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %556 = logical_xor(%554, %555) /* ty=Tensor[(4, 7, 5), int8] */;
  (%556,)
}

def @func_4103() -> Tensor[(15, 14, 6), uint16] {
  @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */
}

def @func_2725(%var_2717: Tensor[(32, 1), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(6, 144), float64], Tensor[(32, 1), float64], Tensor[(8, 4, 624), int32]) {
  %557 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %558 = cast(%var_2717, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
  %559 = reshape(%558, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %560 = @func_591(%559) /* ty=(Tensor[(8, 4, 1), float64],) */;
  %561 = %560.0;
  %562 = cast(meta[relay.Constant][36] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %563 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 144), float64] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
  %564 = reshape(%562, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %565 = reshape(%563, newshape=[36, 24]) /* ty=Tensor[(36, 24), float64] */;
  %566 = @func_2586(%564, %565) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) */;
  %567 = %566.2;
  %568 = cast(%561, dtype="int32") /* ty=Tensor[(8, 4, 1), int32] */;
  %569 = cast(%567, dtype="int32") /* ty=Tensor[(624), int32] */;
  %570 = %557.0;
  %571 = @func_2112() /* ty=Tensor[(15, 14, 6), float64] */;
  %572 = right_shift(%568, %569) /* ty=Tensor[(8, 4, 624), int32] */;
  (%570, %571, meta[relay.Constant][36] /* ty=Tensor[(624), float32] */, meta[relay.Constant][37] /* ty=Tensor[(6, 144), float64] */, %var_2717, %572)
}

def @func_638(%var_598: Tensor[(8, 4, 1), float64], %var_605: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool], Tensor[(8, 4, 1), float32]) {
  %573 = cast(%var_598, dtype="bool") /* ty=Tensor[(8, 4, 1), bool] */;
  %574 = cast(%var_605, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %575 = cast(%var_598, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %576 = sin(%575) /* ty=Tensor[(8, 4, 1), float64] */;
  %577 = cast(%576, dtype="float32") /* ty=Tensor[(8, 4, 1), float32] */;
  %578 = logical_or(%573, %574) /* ty=Tensor[(8, 4, 8), bool] */;
  %579 = asin(%577) /* ty=Tensor[(8, 4, 1), float32] */;
  (%578, %579)
}

def @func_4968(%var_4953: Tensor[(1820), int32]) -> (Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), uint16], Tensor[(1820), int32]) {
  %580 = @func_2446() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(520, 1), float32]) */;
  %581 = cast(%var_4953, dtype="int32") /* ty=Tensor[(1820), int32] */;
  %582 = reshape(%581, newshape=[1820]) /* ty=Tensor[(1820), int32] */;
  %583 = @func_4818(%582) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(14, 13, 10), int32], int32, Tensor[(1, 8), float64], Tensor[(1820), float32]) */;
  %584 = %580.1;
  %585 = %583.0;
  (%584, %585, %var_4953)
}

def @func_431(%var_420: Tensor[(14, 13, 13), uint8]) -> (Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) {
  %586 = cast(%var_420, dtype="uint8") /* ty=Tensor[(14, 13, 13), uint8] */;
  %587 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(14, 13, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 13, 13), uint8] */, dtype="uint8") /* ty=Tensor[(14, 13, 13), uint8] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %590 = cast(meta[relay.Constant][39] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %591 = reshape(%590, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %592 = @func_102(%591) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %593 = right_shift(%588, %589) /* ty=Tensor[(14, 13, 13), uint8] */;
  %594 = %592.2;
  (%593, %594, meta[relay.Constant][39] /* ty=Tensor[(520), float32] */)
}

def @func_2962(%var_2954: Tensor[(1280), float64], %var_2955: Tensor[(1536), float32]) -> (Tensor[(726), float32], Tensor[(10, 8, 16), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(15, 14, 6), float64]) {
  %595 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %596 = cast(%var_2954, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %597 = cast(%var_2954, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %598 = cast(%var_2955, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %599 = reshape(%596, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), float64] */;
  %600 = reshape(%597, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), float64] */;
  %601 = reshape(%598, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %602 = @func_1325(%599, %600, %601) /* ty=(Tensor[(10, 8, 16), float64], Tensor[(10, 8, 16), float64], Tensor[(520), float32], Tensor[(1536), float32]) */;
  %603 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
  %604 = %595.1;
  %605 = %602.0;
  %606 = %603.4;
  (%604, %605, %var_2954, %var_2955, %606)
}

def @func_4580() -> (Tensor[(726), float64], Tensor[(15, 14, 6), float64]) {
  %607 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %608 = @func_1620() /* ty=Tensor[(726), float64] */;
  %609 = %607.0;
  (%608, %609)
}

def @func_4738() -> (Tensor[(15, 14, 6), uint16],) {
  %610 = @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */;
  (%610,)
}

def @func_1271() -> (Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) {
  %611 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %612 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %613 = %612.0;
  %614 = cast(%613, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %615 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %616 = %611.1;
  %617 = tan(%614) /* ty=Tensor[(15, 14, 6), float64] */;
  %618 = %615.0;
  (%616, %617, %618)
}

def @func_2779(%var_2774: Tensor[(726), float64]) -> (Tensor[(726), bool],) {
  %619 = @func_1620() /* ty=Tensor[(726), float64] */;
  %620 = cast(%var_2774, dtype="bool") /* ty=Tensor[(726), bool] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(1), int32] */;
  %622 = cast(%619, dtype="bool") /* ty=Tensor[(726), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?), bool] */;
  %624 = logical_and(%622, %623) /* ty=Tensor[(726), bool] */;
  (%624,)
}

def @func_2942(%var_2878: Tensor[(576), float32], %var_2917: Tensor[(7, 10, 7), float64]) -> (Tensor[(8, 4, 1), float64], Tensor[(32), float64], Tensor[(5, 11, 12), float64], Tensor[(660), uint16], Tensor[(12, 8, 6), float32], Tensor[(576), float32], Tensor[(12, 8, 6), float32], Tensor[(7, 10, 7), uint64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) {
  %625 = cast(meta[relay.Constant][40] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %626 = reshape(%625, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %627 = @func_591(%626) /* ty=(Tensor[(8, 4, 1), float64],) */;
  %628 = cast(meta[relay.Constant][41] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %629 = cast(meta[relay.Constant][41] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %630 = reshape(%628, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), uint16] */;
  %631 = reshape(%629, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), uint16] */;
  %632 = @func_882(%630, %631) /* ty=(Tensor[(5, 11, 12), uint16], Tensor[(5, 11, 12), float64]) */;
  %633 = cast(%var_2878, dtype="float32") /* ty=Tensor[(576), float32] */;
  %634 = reshape(%633, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), float32] */;
  %635 = cast(%var_2878, dtype="float32") /* ty=Tensor[(576), float32] */;
  %636 = reshape(%635, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), float32] */;
  %637 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %638 = %637.1;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %640 = acos(%639) /* ty=Tensor[(7, 10, 7), float64] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %642 = asin(%641) /* ty=Tensor[(7, 10, 7), float64] */;
  %643 = cast(%640, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%642, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %647 = power(%645, %646) /* ty=Tensor[(7, 10, 7), float32] */;
  %648 = cast(%640, dtype="uint64") /* ty=Tensor[(7, 10, 7), uint64] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="uint64") /* ty=Tensor[(7, 10, 7), uint64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %652 = cast(%var_2917, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %653 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%640, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %656 = cast(%642, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %657 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %658 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %659 = %627.0;
  %660 = %632.1;
  %661 = @func_2647(%634) /* ty=Tensor[(12, 8, 6), float32] */;
  %662 = @func_2647(%636) /* ty=Tensor[(12, 8, 6), float32] */;
  %663 = logical_xor(%650, %651) /* ty=Tensor[(7, 10, 7), uint64] */;
  %664 = mod(%654, %655) /* ty=Tensor[(7, 10, 7), float32] */;
  %665 = log(%656) /* ty=Tensor[(7, 10, 7), float64] */;
  %666 = %657.0;
  %667 = %658.0;
  (%659, meta[relay.Constant][40] /* ty=Tensor[(32), float64] */, %660, meta[relay.Constant][41] /* ty=Tensor[(660), uint16] */, %661, %var_2878, %662, %663, %664, %665, %666, %667)
}

def @func_3112() -> (Tensor[(11, 11, 6), float64], Tensor[(726), float64], Tensor[(3, 420), float64]) {
  %668 = @func_3046() /* ty=(Tensor[(15, 14, 6), float32], Tensor[(11, 11, 6), int8]) */;
  %669 = %668.1;
  %670 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 11, 6), int8] */, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %674 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 420), float64] */, dtype="float64") /* ty=Tensor[(3, 420), float64] */;
  %675 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 420), float64] */, dtype="float64") /* ty=Tensor[(3, 420), float64] */;
  %676 = reshape(%674, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
  %677 = reshape(%675, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
  %678 = @func_1935(%676, %677) /* ty=(Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) */;
  %679 = power(%672, %673) /* ty=Tensor[(11, 11, 6), float64] */;
  %680 = %678.3;
  (%679, %680, meta[relay.Constant][43] /* ty=Tensor[(3, 420), float64] */)
}

def @func_4342() -> (Tensor[(2366), uint8],) {
  %681 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %682 = %681.2;
  (%682,)
}

def @func_3725(%var_3694: Tensor[(9, 9, 15), int32], %var_3702: Tensor[(624), float32]) -> (Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), uint16], Tensor[(9, 9, 15), bool]) {
  %683 = cast(%var_3702, dtype="float32") /* ty=Tensor[(624), float32] */;
  %684 = cast(meta[relay.Constant][44] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %685 = reshape(%683, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %686 = reshape(%684, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %687 = @func_2627(%685, %686) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) */;
  %688 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %689 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 9, 15), int32] */, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %690 = shape_of(%var_3694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_3694, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %693 = equal(%691, %692) /* ty=Tensor[(9, 9, 15), bool] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %695 = atanh(%694) /* ty=Tensor[(9, 9, 15), float32] */;
  %696 = cast(%693, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = %687.1;
  %701 = %688.0;
  %702 = greater_equal(%698, %699) /* ty=Tensor[(9, 9, 15), bool] */;
  (%700, %var_3702, meta[relay.Constant][44] /* ty=Tensor[(864), float64] */, %701, %702)
}

def @func_4934() -> (Tensor[(84), bool],) {
  %703 = @func_3774() /* ty=(Tensor[(84), bool],) */;
  %704 = %703.0;
  (%704,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4103() -> Tensor[(15, 14, 6), uint16] {
  @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */
}

def @func_4188(%var_4184: Tensor[(6, 9, 6), uint8], %var_4185: Tensor[(1280), float64], %var_4186: Tensor[(864), float64], %var_4187: Tensor[(15, 14, 6), uint16]) -> (Tensor[(6, 9, 6), bool], Tensor[(15, 14, 6), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), float32], Tensor[(624), float32], Tensor[(1215), int32]) {
  @func_4182(%var_4184, %var_4185, %var_4186, %var_4187) /* ty=(Tensor[(6, 9, 6), bool], Tensor[(15, 14, 6), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), float32], Tensor[(624), float32], Tensor[(1215), int32]) */
}

def @func_1972() -> Tensor[(15, 14, 6), uint16] {
  %0 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %0.0
}

def @func_882(%var_847: Tensor[(5, 11, 12), uint16], %var_848: Tensor[(5, 11, 12), uint16]) -> (Tensor[(5, 11, 12), uint16], Tensor[(5, 11, 12), float64]) {
  %1 = cast(%var_848, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
  %2 = shape_of(%var_847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_847, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %5 = cast(%var_848, dtype="int8") /* ty=Tensor[(5, 11, 12), int8] */;
  %6 = shape_of(%var_847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_847, dtype="int8") /* ty=Tensor[(5, 11, 12), int8] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %9 = right_shift(%7, %8) /* ty=Tensor[(5, 11, 12), int8] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 11, 12), int8] */, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %14 = logical_xor(%3, %4) /* ty=Tensor[(5, 11, 12), uint16] */;
  %15 = floor_mod(%12, %13) /* ty=Tensor[(5, 11, 12), float64] */;
  (%14, %15)
}

def @func_4344() -> (Tensor[(2366), uint8],) {
  @func_4342() /* ty=(Tensor[(2366), uint8],) */
}

def @func_1271() -> (Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) {
  %16 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %17 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %18 = %17.0;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %20 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %21 = %16.1;
  %22 = tan(%19) /* ty=Tensor[(15, 14, 6), float64] */;
  %23 = %20.0;
  (%21, %22, %23)
}

def @func_2098(%var_2088: uint64, %var_2089: Tensor[(5, 13, 1), uint64]) -> (Tensor[(5, 13, 1), uint64],) {
  %24 = cast(%var_2088, dtype="uint64") /* ty=uint64 */;
  %25 = cast(%var_2089, dtype="uint64") /* ty=Tensor[(5, 13, 1), uint64] */;
  %26 = left_shift(%24, %25) /* ty=Tensor[(5, 13, 1), uint64] */;
  (%26,)
}

def @func_382(%var_375: Tensor[(14, 2, 3), bool], %var_376: Tensor[(14, 2, 3), bool]) -> Tensor[(14, 2, 3), float32] {
  %27 = cast(%var_376, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %28 = shape_of(%var_375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_375, dtype="bool") /* ty=Tensor[(14, 2, 3), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %31 = logical_and(%29, %30) /* ty=Tensor[(14, 2, 3), bool] */;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(14, 2, 3), float32] */;
  atanh(%32) /* ty=Tensor[(14, 2, 3), float32] */
}

def @func_1754(%var_1644: Tensor[(169, 14), uint8], %var_1702: Tensor[(84), bool]) -> (Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) {
  %33 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %34 = %33.2;
  %35 = cast(%var_1644, dtype="int64") /* ty=Tensor[(169, 14), int64] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
  %37 = cast(%34, dtype="int64") /* ty=Tensor[(169, 14), int64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %41 = reshape(%39, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %42 = reshape(%40, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
  %43 = @func_287(%41, %42) /* ty=(Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(1536), float32] */, dtype="uint32") /* ty=Tensor[(1536), uint32] */;
  %45 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(1536), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(1536), float32] */, dtype="uint32") /* ty=Tensor[(1536), uint32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %48 = cast(%var_1702, dtype="bool") /* ty=Tensor[(84), bool] */;
  %49 = cast(%var_1702, dtype="bool") /* ty=Tensor[(84), bool] */;
  %50 = reshape(%48, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
  %51 = reshape(%49, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
  %52 = cast(%var_1644, dtype="float32") /* ty=Tensor[(169, 14), float32] */;
  %53 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %54 = logical_xor(%37, %38) /* ty=Tensor[(169, 14), int64] */;
  %55 = %43.1;
  %56 = add(%46, %47) /* ty=Tensor[(1536), uint32] */;
  %57 = @func_1620() /* ty=Tensor[(726), float64] */;
  %58 = @func_382(%50, %51) /* ty=Tensor[(14, 2, 3), float32] */;
  %59 = acos(%52) /* ty=Tensor[(169, 14), float32] */;
  %60 = %53.1;
  (%54, %55, %56, %57, %58, %var_1702, %59, %60)
}

def @func_2381() -> (Tensor[(15, 14, 6), float64],) {
  @func_2379() /* ty=(Tensor[(15, 14, 6), float64],) */
}

def @func_3374(%var_3364: Tensor[(2, 288), float32]) -> (Tensor[(15, 14, 6), uint16], Tensor[(12, 8, 6), float32], Tensor[(2, 288), float32], Tensor[(15, 14, 6), float64]) {
  %61 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %62 = cast(%var_3364, dtype="float32") /* ty=Tensor[(2, 288), float32] */;
  %63 = reshape(%62, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), float32] */;
  %64 = %61.2;
  %65 = @func_2647(%63) /* ty=Tensor[(12, 8, 6), float32] */;
  %66 = @func_3170() /* ty=Tensor[(15, 14, 6), float64] */;
  (%64, %65, %var_3364, %66)
}

def @func_3785(%var_3781: Tensor[(1, 6, 2), float32]) -> (Tensor[(1, 6, 2), float32],) {
  %67 = cast(%var_3781, dtype="float32") /* ty=Tensor[(1, 6, 2), float32] */;
  %68 = log10(%67) /* ty=Tensor[(1, 6, 2), float32] */;
  (%68,)
}

def @func_3805(%var_3803: Tensor[(6, 11, 10), float32]) -> (Tensor[(6, 11, 10), float32], Tensor[(6, 11, 10), float32]) {
  @func_3802(%var_3803) /* ty=(Tensor[(6, 11, 10), float32], Tensor[(6, 11, 10), float32]) */
}

def @func_3496() -> Tensor[(15, 14, 6), uint16] {
  %70 = fn () -> Tensor[(15, 14, 6), uint16] {
    %69 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
    %69.0
  };
  %70() /* ty=Tensor[(15, 14, 6), uint16] */
}

def @func_3944(%var_3937: Tensor[(12, 3, 1), float32], %var_3938: Tensor[(12, 3, 16), float32]) -> Tensor[(12, 3, 16), float32] {
  %71 = cast(%var_3937, dtype="float32") /* ty=Tensor[(12, 3, 1), float32] */;
  %72 = cast(%var_3938, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  power(%71, %72) /* ty=Tensor[(12, 3, 16), float32] */
}

def @func_3377(%var_3375: Tensor[(2, 288), float32]) -> (Tensor[(15, 14, 6), uint16], Tensor[(12, 8, 6), float32], Tensor[(2, 288), float32], Tensor[(15, 14, 6), float64]) {
  @func_3374(%var_3375) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(12, 8, 6), float32], Tensor[(2, 288), float32], Tensor[(15, 14, 6), float64]) */
}

def @func_3048() -> (Tensor[(15, 14, 6), float32], Tensor[(11, 11, 6), int8]) {
  @func_3046() /* ty=(Tensor[(15, 14, 6), float32], Tensor[(11, 11, 6), int8]) */
}

def @func_3923() -> (Tensor[(15, 14, 6), uint16], Tensor[(726), float32]) {
  %75 = fn () -> (Tensor[(15, 14, 6), uint16], Tensor[(726), float32]) {
    %73 = @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */;
    %74 = @func_2513() /* ty=Tensor[(726), float32] */;
    (%73, %74)
  };
  %75() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(726), float32]) */
}

def @func_3884() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool]) {
  @func_3882() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool]) */
}

def @func_4968(%var_4953: Tensor[(1820), int32]) -> (Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), uint16], Tensor[(1820), int32]) {
  %76 = @func_2446() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(520, 1), float32]) */;
  %77 = cast(%var_4953, dtype="int32") /* ty=Tensor[(1820), int32] */;
  %78 = reshape(%77, newshape=[1820]) /* ty=Tensor[(1820), int32] */;
  %79 = @func_4818(%78) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(14, 13, 10), int32], int32, Tensor[(1, 8), float64], Tensor[(1820), float32]) */;
  %80 = %76.1;
  %81 = %79.0;
  (%80, %81, %var_4953)
}

def @func_433(%var_432: Tensor[(14, 13, 13), uint8]) -> (Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) {
  %91 = fn (%var_420: Tensor[(14, 13, 13), uint8]) -> (Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) {
    %82 = cast(%var_420, dtype="uint8") /* ty=Tensor[(14, 13, 13), uint8] */;
    %83 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(14, 13, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %84 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 13, 13), uint8] */, dtype="uint8") /* ty=Tensor[(14, 13, 13), uint8] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %86 = cast(meta[relay.Constant][4] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %87 = reshape(%86, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
    %88 = @func_102(%87) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
    %89 = right_shift(%84, %85) /* ty=Tensor[(14, 13, 13), uint8] */;
    %90 = %88.2;
    (%89, %90, meta[relay.Constant][4] /* ty=Tensor[(520), float32] */)
  };
  %91(%var_432) /* ty=(Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */
}

def @func_1273() -> (Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) {
  @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */
}

def @func_3054() -> Tensor[(84), bool] {
  %93 = fn () -> Tensor[(84), bool] {
    %92 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
    %92.1
  };
  %93() /* ty=Tensor[(84), bool] */
}

def @func_3129(%var_3128: Tensor[(1, 1, 8), float64]) -> Tensor[(1, 1, 8), float64] {
  %95 = fn (%var_3123: Tensor[(1, 1, 8), float64]) -> Tensor[(1, 1, 8), float64] {
    %94 = cast(%var_3123, dtype="float64") /* ty=Tensor[(1, 1, 8), float64] */;
    asin(%94) /* ty=Tensor[(1, 1, 8), float64] */
  };
  %95(%var_3128) /* ty=Tensor[(1, 1, 8), float64] */
}

def @func_102(%var_68: Tensor[(8, 13, 5), float32]) -> (Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) {
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %98 = reshape(%96, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %99 = reshape(%97, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %100 = @func_27(%98, %99) /* ty=(Tensor[(7, 10, 7), bool],) */;
  %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %102 = %100.0;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %104 = reshape(%101, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %105 = reshape(%103, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %106 = @func_27(%104, %105) /* ty=(Tensor[(7, 10, 7), bool],) */;
  %107 = cast(%var_68, dtype="float32") /* ty=Tensor[(8, 13, 5), float32] */;
  %108 = sigmoid(%107) /* ty=Tensor[(8, 13, 5), float32] */;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %110 = sqrt(%109) /* ty=Tensor[(8, 13, 5), float64] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %112 = erf(%111) /* ty=Tensor[(8, 13, 5), float64] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %114 = cast(%108, dtype="float64") /* ty=Tensor[(8, 13, 5), float64] */;
  %115 = %106.0;
  %116 = sin(%113) /* ty=Tensor[(8, 13, 5), float64] */;
  %117 = acos(%114) /* ty=Tensor[(8, 13, 5), float64] */;
  (%102, meta[relay.Constant][5] /* ty=Tensor[(490), float32] */, %115, %116, %117)
}

def @func_1939(%var_1937: Tensor[(15, 14, 6), float64], %var_1938: Tensor[(15, 14, 6), float64]) -> (Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) {
  @func_1935(%var_1937, %var_1938) /* ty=(Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) */
}

def @func_2627(%var_2609: Tensor[(624), float32], %var_2610: Tensor[(864), float64]) -> (Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) {
  %118 = cast(%var_2609, dtype="float32") /* ty=Tensor[(624), float32] */;
  %119 = cast(%var_2610, dtype="float64") /* ty=Tensor[(864), float64] */;
  %120 = reshape(%118, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %121 = reshape(%119, newshape=[36, 24]) /* ty=Tensor[(36, 24), float64] */;
  %122 = @func_2586(%120, %121) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) */;
  %123 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
  %124 = %122.0;
  (%123, %124, %var_2609, %var_2610)
}

def @func_3556(%var_3554: Tensor[(490, 1), float32], %var_3555: Tensor[(32), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(7, 10, 7), bool], Tensor[(490, 1), float32], Tensor[(8, 4, ?), float32]) {
  @func_3552(%var_3554, %var_3555) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(7, 10, 7), bool], Tensor[(490, 1), float32], Tensor[(8, 4, ?), float32]) */
}

def @func_4580() -> (Tensor[(726), float64], Tensor[(15, 14, 6), float64]) {
  %125 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %126 = @func_1620() /* ty=Tensor[(726), float64] */;
  %127 = %125.0;
  (%126, %127)
}

def @main(%var_5193: Tensor[(10, 15, 5), float32]) -> Tensor[(10, 15, 5), float32] {
  %128 = cast(%var_5193, dtype="float32") /* ty=Tensor[(10, 15, 5), float32] */;
  sin(%128) /* ty=Tensor[(10, 15, 5), float32] */
}

def @func_105(%var_103: Tensor[(8, 13, 5), float32]) -> (Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) {
  @func_102(%var_103) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */
}

def @func_2112() -> Tensor[(15, 14, 6), float64] {
  %129 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %129.0
}

def @func_2649(%var_2648: Tensor[(12, 8, 6), float32]) -> Tensor[(12, 8, 6), float32] {
  %131 = fn (%var_2642: Tensor[(12, 8, 6), float32]) -> Tensor[(12, 8, 6), float32] {
    %130 = cast(%var_2642, dtype="float32") /* ty=Tensor[(12, 8, 6), float32] */;
    sin(%130) /* ty=Tensor[(12, 8, 6), float32] */
  };
  %131(%var_2648) /* ty=Tensor[(12, 8, 6), float32] */
}

def @func_4182(%var_4123: Tensor[(6, 9, 6), uint8], %var_4131: Tensor[(1280), float64], %var_4156: Tensor[(864), float64], %var_4161: Tensor[(15, 14, 6), uint16]) -> (Tensor[(6, 9, 6), bool], Tensor[(15, 14, 6), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), float32], Tensor[(624), float32], Tensor[(1215), int32]) {
  %132 = cast(%var_4123, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %133 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 9, 6), uint8] */, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = cast(%var_4131, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %137 = cast(meta[relay.Constant][7] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %138 = reshape(%136, newshape=[1280]) /* ty=Tensor[(1280), float64] */;
  %139 = reshape(%137, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %140 = @func_2962(%138, %139) /* ty=(Tensor[(726), float32], Tensor[(10, 8, 16), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(15, 14, 6), float64]) */;
  %141 = @func_3774() /* ty=(Tensor[(84), bool],) */;
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %143 = cast(%var_4156, dtype="float64") /* ty=Tensor[(864), float64] */;
  %144 = reshape(%142, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %145 = reshape(%143, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %146 = @func_2627(%144, %145) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) */;
  %147 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %148 = %147.2;
  %149 = cast(%var_4161, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%148, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %153 = greater(%151, %152) /* ty=Tensor[(15, 14, 6), bool] */;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %155 = cast(meta[relay.Constant][9] /* ty=Tensor[(1215), int32] */, dtype="int32") /* ty=Tensor[(1215), int32] */;
  %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %157 = reshape(%155, newshape=[9, 9, 15]) /* ty=Tensor[(9, 9, 15), int32] */;
  %158 = reshape(%156, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %159 = @func_3725(%157, %158) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), uint16], Tensor[(9, 9, 15), bool]) */;
  %160 = less_equal(%134, %135) /* ty=Tensor[(6, 9, 6), bool] */;
  %161 = %140.4;
  %162 = %141.0;
  %163 = %146.1;
  %164 = erf(%154) /* ty=Tensor[(15, 14, 6), float32] */;
  %165 = %159.1;
  (%160, %161, %var_4131, meta[relay.Constant][7] /* ty=Tensor[(1536), float32] */, %162, %163, meta[relay.Constant][8] /* ty=Tensor[(624), float32] */, %var_4156, %164, %165, meta[relay.Constant][9] /* ty=Tensor[(1215), int32] */)
}

def @func_4506() -> Tensor[(15, 14, 6), float64] {
  @func_4504() /* ty=Tensor[(15, 14, 6), float64] */
}

def @func_3743(%var_3739: Tensor[(490, 1), float64]) -> (Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), uint16], Tensor[(1536), float32], Tensor[(576), float32], Tensor[(490, 1), float64], Tensor[(2366), uint8]) {
  %166 = cast(meta[relay.Constant][10] /* ty=Tensor[(1536), float32] */, dtype="float32") /* ty=Tensor[(1536), float32] */;
  %167 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, dtype="float32") /* ty=Tensor[(576), float32] */;
  %168 = cast(%var_3739, dtype="float64") /* ty=Tensor[(490, 1), float64] */;
  %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
  %170 = reshape(%166, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
  %171 = reshape(%167, newshape=[576]) /* ty=Tensor[(576), float32] */;
  %172 = reshape(%168, newshape=[490]) /* ty=Tensor[(490), float64] */;
  %173 = reshape(%169, newshape=[2366]) /* ty=Tensor[(2366), uint8] */;
  %174 = @func_3300(%170, %171, %172, %173) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(16, 8, 12), float32], Tensor[(1536), float32], Tensor[(15, 14, 6), uint16], Tensor[(576), float32], Tensor[(490), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64], Tensor[(7, 10, 7), bool], Tensor[(2366), float32], Tensor[(2366), float32], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float32]) */;
  %175 = @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */;
  %176 = %174.3;
  (%175, %176, meta[relay.Constant][10] /* ty=Tensor[(1536), float32] */, meta[relay.Constant][11] /* ty=Tensor[(576), float32] */, %var_3739, meta[relay.Constant][12] /* ty=Tensor[(2366), uint8] */)
}

def @func_4888(%var_4887: Tensor[(32), float64]) -> (Tensor[(726), float32], Tensor[(15, 14, 6), float64], Tensor[(32), float64], Tensor[(84), bool]) {
  %184 = fn (%var_4861: Tensor[(32), float64]) -> (Tensor[(726), float32], Tensor[(15, 14, 6), float64], Tensor[(32), float64], Tensor[(84), bool]) {
    %177 = cast(%var_4861, dtype="float64") /* ty=Tensor[(32), float64] */;
    %178 = reshape(%177, newshape=[32, 1]) /* ty=Tensor[(32, 1), float64] */;
    %179 = @func_2725(%178) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(6, 144), float64], Tensor[(32, 1), float64], Tensor[(8, 4, 624), int32]) */;
    %180 = @func_3774() /* ty=(Tensor[(84), bool],) */;
    %181 = @func_2513() /* ty=Tensor[(726), float32] */;
    %182 = %179.1;
    %183 = %180.0;
    (%181, %182, %var_4861, %183)
  };
  %184(%var_4887) /* ty=(Tensor[(726), float32], Tensor[(15, 14, 6), float64], Tensor[(32), float64], Tensor[(84), bool]) */
}

def @func_30(%var_28: Tensor[(7, 10, 7), float32], %var_29: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), bool],) {
  %192 = fn (%var_10: Tensor[(7, 10, 7), float32], %var_20: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), bool],) {
    %185 = cast(%var_10, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %186 = asinh(%185) /* ty=Tensor[(7, 10, 7), float32] */;
    %187 = cast(%var_20, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%186, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %191 = logical_or(%189, %190) /* ty=Tensor[(7, 10, 7), bool] */;
    (%191,)
  };
  %192(%var_28, %var_29) /* ty=(Tensor[(7, 10, 7), bool],) */
}

def @func_5076(%var_5073: Tensor[(13, 5, 16), float64], %var_5074: Tensor[(624), float32], %var_5075: Tensor[(864), float64]) -> (Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), int32], Tensor[(8, 13, 6), float32], Tensor[(624), float32], Tensor[(864), float64]) {
  @func_5071(%var_5073, %var_5074, %var_5075) /* ty=(Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), int32], Tensor[(8, 13, 6), float32], Tensor[(624), float32], Tensor[(864), float64]) */
}

def @func_2114() -> Tensor[(15, 14, 6), float64] {
  @func_2112() /* ty=Tensor[(15, 14, 6), float64] */
}

def @func_3113() -> (Tensor[(11, 11, 6), float64], Tensor[(726), float64], Tensor[(3, 420), float64]) {
  %206 = fn () -> (Tensor[(11, 11, 6), float64], Tensor[(726), float64], Tensor[(3, 420), float64]) {
    %193 = @func_3046() /* ty=(Tensor[(15, 14, 6), float32], Tensor[(11, 11, 6), int8]) */;
    %194 = %193.1;
    %195 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 11, 6), int8] */, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
    %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%194, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %199 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 420), float64] */, dtype="float64") /* ty=Tensor[(3, 420), float64] */;
    %200 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 420), float64] */, dtype="float64") /* ty=Tensor[(3, 420), float64] */;
    %201 = reshape(%199, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
    %202 = reshape(%200, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
    %203 = @func_1935(%201, %202) /* ty=(Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) */;
    %204 = power(%197, %198) /* ty=Tensor[(11, 11, 6), float64] */;
    %205 = %203.3;
    (%204, %205, meta[relay.Constant][14] /* ty=Tensor[(3, 420), float64] */)
  };
  %206() /* ty=(Tensor[(11, 11, 6), float64], Tensor[(726), float64], Tensor[(3, 420), float64]) */
}

def @func_3729(%var_3727: Tensor[(9, 9, 15), int32], %var_3728: Tensor[(624), float32]) -> (Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), uint16], Tensor[(9, 9, 15), bool]) {
  @func_3725(%var_3727, %var_3728) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), uint16], Tensor[(9, 9, 15), bool]) */
}

def @func_2782(%var_2780: Tensor[(726), float64]) -> (Tensor[(726), bool],) {
  @func_2779(%var_2780) /* ty=(Tensor[(726), bool],) */
}

def @func_1167() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) {
  %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 14, 6), uint16] */, dtype="uint16") /* ty=Tensor[(15, 14, 6), uint16] */;
  %208 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(15, 14, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 14, 6), uint16] */, dtype="uint16") /* ty=Tensor[(15, 14, 6), uint16] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %211 = cast(meta[relay.Constant][17] /* ty=Tensor[(169, 14), uint8] */, dtype="uint8") /* ty=Tensor[(169, 14), uint8] */;
  %212 = reshape(%211, newshape=[14, 13, 13]) /* ty=Tensor[(14, 13, 13), uint8] */;
  %213 = @func_431(%212) /* ty=(Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %214 = bitwise_and(%209, %210) /* ty=Tensor[(15, 14, 6), uint16] */;
  %215 = %213.1;
  (%214, %215, meta[relay.Constant][17] /* ty=Tensor[(169, 14), uint8] */)
}

def @func_5095(%var_5094: Tensor[(11, 11, 6), int8]) -> Tensor[(11, 11, 6), bool] {
  %222 = fn (%var_5086: Tensor[(11, 11, 6), int8]) -> Tensor[(11, 11, 6), bool] {
    %216 = @func_1836() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) */;
    %217 = %216.1;
    %218 = cast(%var_5086, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%220, %221) /* ty=Tensor[(11, 11, 6), bool] */
  };
  %222(%var_5094) /* ty=Tensor[(11, 11, 6), bool] */
}

def @func_3552(%var_3523: Tensor[(490, 1), float32], %var_3528: Tensor[(32), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(7, 10, 7), bool], Tensor[(490, 1), float32], Tensor[(8, 4, ?), float32]) {
  %223 = cast(%var_3523, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %224 = cast(%var_3523, dtype="float32") /* ty=Tensor[(490, 1), float32] */;
  %225 = reshape(%223, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %226 = reshape(%224, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %227 = @func_27(%225, %226) /* ty=(Tensor[(7, 10, 7), bool],) */;
  %228 = cast(%var_3528, dtype="float64") /* ty=Tensor[(32), float64] */;
  %229 = reshape(%228, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %230 = @func_591(%229) /* ty=(Tensor[(8, 4, 1), float64],) */;
  %231 = %230.0;
  %232 = cast(%var_3528, dtype="float32") /* ty=Tensor[(32), float32] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="float32") /* ty=Tensor[(8, 4, 1), float32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %236 = @func_3170() /* ty=Tensor[(15, 14, 6), float64] */;
  %237 = %227.0;
  %238 = add(%234, %235) /* ty=Tensor[(8, 4, ?), float32] */;
  (%236, %237, %var_3523, %238)
}

def @func_2834(%var_2833: Tensor[(2, 8, 15), float64]) -> (Tensor[(2, 8, 15), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) {
  %244 = fn (%var_2811: Tensor[(2, 8, 15), float64]) -> (Tensor[(2, 8, 15), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) {
    %239 = cast(%var_2811, dtype="float64") /* ty=Tensor[(2, 8, 15), float64] */;
    %240 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
    %241 = sqrt(%239) /* ty=Tensor[(2, 8, 15), float64] */;
    %242 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
    %243 = %240.4;
    (%241, %242, %243)
  };
  %244(%var_2833) /* ty=(Tensor[(2, 8, 15), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) */
}

def @func_1621() -> Tensor[(726), float64] {
  %250 = fn () -> Tensor[(726), float64] {
    %245 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
    %246 = %245.3;
    %247 = cast(%246, dtype="float64") /* ty=Tensor[(726), float64] */;
    %248 = tan(%247) /* ty=Tensor[(726), float64] */;
    %249 = cast(%248, dtype="float64") /* ty=Tensor[(726), float64] */;
    exp(%249) /* ty=Tensor[(726), float64] */
  };
  %250() /* ty=Tensor[(726), float64] */
}

def @func_1837() -> (Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) {
  %263 = fn () -> (Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) {
    %251 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
    %252 = cast(meta[relay.Constant][18] /* ty=Tensor[(363, 2), float64] */, dtype="float64") /* ty=Tensor[(363, 2), float64] */;
    %253 = reshape(%252, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), float64] */;
    %254 = @func_192(%253) /* ty=(Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) */;
    %255 = cast(meta[relay.Constant][19] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %256 = reshape(%255, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
    %257 = @func_102(%256) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
    %258 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
    %259 = %251.0;
    %260 = %254.0;
    %261 = %257.2;
    %262 = %258.0;
    (%259, %260, meta[relay.Constant][18] /* ty=Tensor[(363, 2), float64] */, %261, meta[relay.Constant][19] /* ty=Tensor[(520), float32] */, %262)
  };
  %263() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) */
}

def @func_2586(%var_2581: Tensor[(624), float32], %var_2582: Tensor[(36, 24), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) {
  %264 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %265 = cast(%var_2581, dtype="float32") /* ty=Tensor[(624), float32] */;
  %266 = cast(%var_2582, dtype="float64") /* ty=Tensor[(36, 24), float64] */;
  %267 = reshape(%265, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), float32] */;
  %268 = reshape(%266, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %269 = @func_1033(%267, %268) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) */;
  %270 = %264.0;
  %271 = %269.1;
  (%270, %271, %var_2581, %var_2582)
}

def @func_4504() -> Tensor[(15, 14, 6), float64] {
  %272 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %272.0
}

def @func_4936() -> (Tensor[(84), bool],) {
  @func_4934() /* ty=(Tensor[(84), bool],) */
}

def @func_287(%var_269: Tensor[(16, 8, 12), float32], %var_270: Tensor[(16, 8, 12), float32]) -> (Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) {
  %273 = cast(%var_270, dtype="float32") /* ty=Tensor[(16, 8, 12), float32] */;
  %274 = shape_of(%var_269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%var_269, dtype="float32") /* ty=Tensor[(16, 8, 12), float32] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %277 = cast(meta[relay.Constant][20] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %278 = reshape(%277, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %279 = @func_102(%278) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
  %280 = floor_mod(%275, %276) /* ty=Tensor[(16, 8, 12), float32] */;
  %281 = %279.2;
  (%280, %281, meta[relay.Constant][20] /* ty=Tensor[(520), float32] */)
}

def @func_1329(%var_1326: Tensor[(10, 8, 16), float64], %var_1327: Tensor[(10, 8, 16), float64], %var_1328: Tensor[(1536), float32]) -> (Tensor[(10, 8, 16), float64], Tensor[(10, 8, 16), float64], Tensor[(520), float32], Tensor[(1536), float32]) {
  %295 = fn (%var_1296: Tensor[(10, 8, 16), float64], %var_1297: Tensor[(10, 8, 16), float64], %var_1319: Tensor[(1536), float32]) -> (Tensor[(10, 8, 16), float64], Tensor[(10, 8, 16), float64], Tensor[(520), float32], Tensor[(1536), float32]) {
    %282 = cast(%var_1297, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
    %283 = shape_of(%var_1296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %284 = cast(%var_1296, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
    %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %286 = cast(%var_1296, dtype="float64") /* ty=Tensor[(10, 8, 16), float64] */;
    %287 = cast(%var_1319, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %288 = cast(%var_1319, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %289 = reshape(%287, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
    %290 = reshape(%288, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
    %291 = @func_287(%289, %290) /* ty=(Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
    %292 = divide(%284, %285) /* ty=Tensor[(10, 8, 16), float64] */;
    %293 = rsqrt(%286) /* ty=Tensor[(10, 8, 16), float64] */;
    %294 = %291.2;
    (%292, %293, %294, %var_1319)
  };
  %295(%var_1326, %var_1327, %var_1328) /* ty=(Tensor[(10, 8, 16), float64], Tensor[(10, 8, 16), float64], Tensor[(520), float32], Tensor[(1536), float32]) */
}

def @func_785(%var_783: Tensor[(4, 7, 5), int8], %var_784: Tensor[(4, 7, 5), int8]) -> (Tensor[(4, 7, 5), int8],) {
  %301 = fn (%var_774: Tensor[(4, 7, 5), int8], %var_775: Tensor[(4, 7, 5), int8]) -> (Tensor[(4, 7, 5), int8],) {
    %296 = cast(%var_775, dtype="int8") /* ty=Tensor[(4, 7, 5), int8] */;
    %297 = shape_of(%var_774, dtype="int32") /* ty=Tensor[(3), int32] */;
    %298 = cast(%var_774, dtype="int8") /* ty=Tensor[(4, 7, 5), int8] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %300 = logical_xor(%298, %299) /* ty=Tensor[(4, 7, 5), int8] */;
    (%300,)
  };
  %301(%var_783, %var_784) /* ty=(Tensor[(4, 7, 5), int8],) */
}

def @func_2447() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(520, 1), float32]) {
  %307 = fn () -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(520, 1), float32]) {
    %302 = cast(meta[relay.Constant][21] /* ty=Tensor[(520, 1), float32] */, dtype="float32") /* ty=Tensor[(520, 1), float32] */;
    %303 = reshape(%302, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
    %304 = @func_102(%303) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(7, 10, 7), bool], Tensor[(8, 13, 5), float64], Tensor[(8, 13, 5), float64]) */;
    %305 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
    %306 = %304.2;
    (%305, %306, meta[relay.Constant][21] /* ty=Tensor[(520, 1), float32] */)
  };
  %307() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(520, 1), float32]) */
}

def @func_2590(%var_2588: Tensor[(624), float32], %var_2589: Tensor[(36, 24), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) {
  @func_2586(%var_2588, %var_2589) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) */
}

def @func_1169() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) {
  @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */
}

def @func_593(%var_592: Tensor[(8, 4, 1), float64]) -> (Tensor[(8, 4, 1), float64],) {
  %310 = fn (%var_586: Tensor[(8, 4, 1), float64]) -> (Tensor[(8, 4, 1), float64],) {
    %308 = cast(%var_586, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
    %309 = atanh(%308) /* ty=Tensor[(8, 4, 1), float64] */;
    (%309,)
  };
  %310(%var_592) /* ty=(Tensor[(8, 4, 1), float64],) */
}

def @func_3458(%var_3454: uint32, %var_3455: Tensor[(5, 12, 2), uint32], %var_3456: Tensor[(140), int8], %var_3457: Tensor[(84), bool]) -> (Tensor[(5, 12, 2), uint32], Tensor[(4, 7, 5), int8], Tensor[(140), int8], Tensor[(726), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool], Tensor[(5, 12, 2), float64]) {
  %332 = fn (%var_3384: uint32, %var_3385: Tensor[(5, 12, 2), uint32], %var_3406: Tensor[(140), int8], %var_3426: Tensor[(84), bool]) -> (Tensor[(5, 12, 2), uint32], Tensor[(4, 7, 5), int8], Tensor[(140), int8], Tensor[(726), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool], Tensor[(5, 12, 2), float64]) {
    %311 = cast(%var_3384, dtype="uint32") /* ty=uint32 */;
    %312 = cast(%var_3385, dtype="uint32") /* ty=Tensor[(5, 12, 2), uint32] */;
    %313 = cast(%var_3406, dtype="int8") /* ty=Tensor[(140), int8] */;
    %314 = cast(%var_3406, dtype="int8") /* ty=Tensor[(140), int8] */;
    %315 = reshape(%313, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int8] */;
    %316 = reshape(%314, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), int8] */;
    %317 = @func_782(%315, %316) /* ty=(Tensor[(4, 7, 5), int8],) */;
    %318 = cast(meta[relay.Constant][22] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
    %319 = cast(%var_3426, dtype="bool") /* ty=Tensor[(84), bool] */;
    %320 = reshape(%318, newshape=[169, 14]) /* ty=Tensor[(169, 14), uint8] */;
    %321 = reshape(%319, newshape=[84]) /* ty=Tensor[(84), bool] */;
    %322 = @func_1754(%320, %321) /* ty=(Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) */;
    %323 = cast(%var_3385, dtype="float64") /* ty=Tensor[(5, 12, 2), float64] */;
    %324 = atanh(%323) /* ty=Tensor[(5, 12, 2), float64] */;
    %325 = cast(%324, dtype="float64") /* ty=Tensor[(5, 12, 2), float64] */;
    %326 = cast(%var_3384, dtype="float64") /* ty=float64 */;
    %327 = right_shift(%311, %312) /* ty=Tensor[(5, 12, 2), uint32] */;
    %328 = %317.0;
    %329 = @func_1620() /* ty=Tensor[(726), float64] */;
    %330 = %322.5;
    %331 = divide(%325, %326) /* ty=Tensor[(5, 12, 2), float64] */;
    (%327, %328, %var_3406, %329, %330, meta[relay.Constant][22] /* ty=Tensor[(2366), uint8] */, %var_3426, %331)
  };
  %332(%var_3454, %var_3455, %var_3456, %var_3457) /* ty=(Tensor[(5, 12, 2), uint32], Tensor[(4, 7, 5), int8], Tensor[(140), int8], Tensor[(726), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool], Tensor[(5, 12, 2), float64]) */
}

def @func_2515() -> Tensor[(726), float32] {
  @func_2513() /* ty=Tensor[(726), float32] */
}

def @func_2946(%var_2944: Tensor[(576), float32], %var_2945: Tensor[(7, 10, 7), float64]) -> (Tensor[(8, 4, 1), float64], Tensor[(32), float64], Tensor[(5, 11, 12), float64], Tensor[(660), uint16], Tensor[(12, 8, 6), float32], Tensor[(576), float32], Tensor[(12, 8, 6), float32], Tensor[(7, 10, 7), uint64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) {
  @func_2942(%var_2944, %var_2945) /* ty=(Tensor[(8, 4, 1), float64], Tensor[(32), float64], Tensor[(5, 11, 12), float64], Tensor[(660), uint16], Tensor[(12, 8, 6), float32], Tensor[(576), float32], Tensor[(12, 8, 6), float32], Tensor[(7, 10, 7), uint64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) */
}

def @func_2102(%var_2100: uint64, %var_2101: Tensor[(5, 13, 1), uint64]) -> (Tensor[(5, 13, 1), uint64],) {
  @func_2098(%var_2100, %var_2101) /* ty=(Tensor[(5, 13, 1), uint64],) */
}

def @func_291(%var_289: Tensor[(16, 8, 12), float32], %var_290: Tensor[(16, 8, 12), float32]) -> (Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) {
  @func_287(%var_289, %var_290) /* ty=(Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */
}

def @func_3775() -> (Tensor[(84), bool],) {
  %334 = fn () -> (Tensor[(84), bool],) {
    %333 = @func_3653() /* ty=Tensor[(84), bool] */;
    (%333,)
  };
  %334() /* ty=(Tensor[(84), bool],) */
}

def @func_3725(%var_3694: Tensor[(9, 9, 15), int32], %var_3702: Tensor[(624), float32]) -> (Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64], Tensor[(15, 14, 6), uint16], Tensor[(9, 9, 15), bool]) {
  %335 = cast(%var_3702, dtype="float32") /* ty=Tensor[(624), float32] */;
  %336 = cast(meta[relay.Constant][23] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %337 = reshape(%335, newshape=[624]) /* ty=Tensor[(624), float32] */;
  %338 = reshape(%336, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %339 = @func_2627(%337, %338) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) */;
  %340 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %341 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 9, 15), int32] */, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %342 = shape_of(%var_3694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_3694, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %345 = equal(%343, %344) /* ty=Tensor[(9, 9, 15), bool] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %347 = atanh(%346) /* ty=Tensor[(9, 9, 15), float32] */;
  %348 = cast(%345, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="bool") /* ty=Tensor[(9, 9, 15), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %352 = %339.1;
  %353 = %340.0;
  %354 = greater_equal(%350, %351) /* ty=Tensor[(9, 9, 15), bool] */;
  (%352, %var_3702, meta[relay.Constant][23] /* ty=Tensor[(864), float64] */, %353, %354)
}

def @func_386(%var_384: Tensor[(14, 2, 3), bool], %var_385: Tensor[(14, 2, 3), bool]) -> Tensor[(14, 2, 3), float32] {
  @func_382(%var_384, %var_385) /* ty=Tensor[(14, 2, 3), float32] */
}

def @func_2677(%var_2676: Tensor[(13, 5, 15), uint64]) -> (Tensor[(13, 5, 15), uint64], Tensor[(15, 14, 6), uint16]) {
  %361 = fn (%var_2662: Tensor[(13, 5, 15), uint64]) -> (Tensor[(13, 5, 15), uint64], Tensor[(15, 14, 6), uint16]) {
    %355 = cast(%var_2662, dtype="uint64") /* ty=Tensor[(13, 5, 15), uint64] */;
    %356 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(13, 5, 15), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 5, 15), uint64] */, dtype="uint64") /* ty=Tensor[(13, 5, 15), uint64] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %359 = maximum(%357, %358) /* ty=Tensor[(13, 5, 15), uint64] */;
    %360 = @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */;
    (%359, %360)
  };
  %361(%var_2676) /* ty=(Tensor[(13, 5, 15), uint64], Tensor[(15, 14, 6), uint16]) */
}

def @func_4342() -> (Tensor[(2366), uint8],) {
  %362 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %363 = %362.2;
  (%363,)
}

def @func_2154() -> (Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) {
  %371 = fn () -> (Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) {
    %364 = cast(meta[relay.Constant][26] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
    %365 = cast(meta[relay.Constant][27] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
    %366 = reshape(%364, newshape=[169, 14]) /* ty=Tensor[(169, 14), uint8] */;
    %367 = reshape(%365, newshape=[84]) /* ty=Tensor[(84), bool] */;
    %368 = @func_1754(%366, %367) /* ty=(Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) */;
    %369 = @func_2112() /* ty=Tensor[(15, 14, 6), float64] */;
    %370 = %368.5;
    (%369, %370, meta[relay.Constant][26] /* ty=Tensor[(2366), uint8] */, meta[relay.Constant][27] /* ty=Tensor[(84), bool] */)
  };
  %371() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */
}

def @func_840(%var_839: Tensor[(9, 12, 8), float64]) -> Tensor[(9, 12, 8), float64] {
  %376 = fn (%var_830: Tensor[(9, 12, 8), float64]) -> Tensor[(9, 12, 8), float64] {
    %372 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 12, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
    %373 = shape_of(%var_830, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%var_830, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%374, %375) /* ty=Tensor[(9, 12, 8), float64] */
  };
  %376(%var_839) /* ty=Tensor[(9, 12, 8), float64] */
}

def @func_3597(%var_3594: int32, %var_3595: Tensor[(14, 13, 10), int32], %var_3596: Tensor[(8), float64]) -> (Tensor[(14, 13, 10), uint16], Tensor[(14, 13, 10), int32], Tensor[(15, 14, 6), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64]) {
  %395 = fn (%var_3571: int32, %var_3572: Tensor[(14, 13, 10), int32], %var_3591: Tensor[(8), float64]) -> (Tensor[(14, 13, 10), uint16], Tensor[(14, 13, 10), int32], Tensor[(15, 14, 6), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64]) {
    %377 = cast(%var_3571, dtype="bool") /* ty=bool */;
    %378 = cast(%var_3572, dtype="bool") /* ty=Tensor[(14, 13, 10), bool] */;
    %379 = equal(%377, %378) /* ty=Tensor[(14, 13, 10), bool] */;
    %380 = cast(%var_3572, dtype="uint16") /* ty=Tensor[(14, 13, 10), uint16] */;
    %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%379, dtype="uint16") /* ty=Tensor[(14, 13, 10), uint16] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %384 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 13, 10), int32] */, dtype="int32") /* ty=Tensor[(14, 13, 10), int32] */;
    %385 = shape_of(%var_3572, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%var_3572, dtype="int32") /* ty=Tensor[(14, 13, 10), int32] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %388 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
    %389 = cast(%var_3591, dtype="float64") /* ty=Tensor[(8), float64] */;
    %390 = reshape(%389, newshape=[1, 1, 8]) /* ty=Tensor[(1, 1, 8), float64] */;
    %391 = bitwise_or(%382, %383) /* ty=Tensor[(14, 13, 10), uint16] */;
    %392 = subtract(%386, %387) /* ty=Tensor[(14, 13, 10), int32] */;
    %393 = %388.4;
    %394 = @func_3127(%390) /* ty=Tensor[(1, 1, 8), float64] */;
    (%391, %392, %393, %394, %var_3591)
  };
  %395(%var_3594, %var_3595, %var_3596) /* ty=(Tensor[(14, 13, 10), uint16], Tensor[(14, 13, 10), int32], Tensor[(15, 14, 6), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64]) */
}

def @func_4643(%var_4640: Tensor[(15, 11, 16), uint32], %var_4641: Tensor[(15, 11, 16), uint32], %var_4642: Tensor[(864), float64]) -> (Tensor[(15, 11, 16), uint32], Tensor[(15, 11, 16), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(864), float64]) {
  %409 = fn (%var_4594: Tensor[(15, 11, 16), uint32], %var_4595: Tensor[(15, 11, 16), uint32], %var_4606: Tensor[(864), float64]) -> (Tensor[(15, 11, 16), uint32], Tensor[(15, 11, 16), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(864), float64]) {
    %396 = cast(%var_4595, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
    %397 = shape_of(%var_4594, dtype="int32") /* ty=Tensor[(3), int32] */;
    %398 = cast(%var_4594, dtype="uint32") /* ty=Tensor[(15, 11, 16), uint32] */;
    %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %400 = cast(%var_4594, dtype="float64") /* ty=Tensor[(15, 11, 16), float64] */;
    %401 = cast(meta[relay.Constant][30] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %402 = cast(%var_4606, dtype="float64") /* ty=Tensor[(864), float64] */;
    %403 = reshape(%401, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), float32] */;
    %404 = reshape(%402, newshape=[864]) /* ty=Tensor[(864), float64] */;
    %405 = @func_1033(%403, %404) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) */;
    %406 = bitwise_or(%398, %399) /* ty=Tensor[(15, 11, 16), uint32] */;
    %407 = sinh(%400) /* ty=Tensor[(15, 11, 16), float64] */;
    %408 = %405.1;
    (%406, %407, %408, meta[relay.Constant][30] /* ty=Tensor[(624), float32] */, %var_4606)
  };
  %409(%var_4640, %var_4641, %var_4642) /* ty=(Tensor[(15, 11, 16), uint32], Tensor[(15, 11, 16), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(864), float64]) */
}

def @func_2513() -> Tensor[(726), float32] {
  %410 = @func_1620() /* ty=Tensor[(726), float64] */;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(726), float32] */;
  acos(%411) /* ty=Tensor[(726), float32] */
}

def @func_4267() -> (Tensor[(726), bool],) {
  %425 = fn () -> (Tensor[(726), bool],) {
    %412 = cast(meta[relay.Constant][31] /* ty=Tensor[(726), float64] */, dtype="float32") /* ty=Tensor[(726), float32] */;
    %413 = log2(%412) /* ty=Tensor[(726), float32] */;
    %414 = @func_1620() /* ty=Tensor[(726), float64] */;
    %415 = cast(meta[relay.Constant][31] /* ty=Tensor[(726), float64] */, dtype="uint8") /* ty=Tensor[(726), uint8] */;
    %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(1), int32] */;
    %417 = cast(%414, dtype="uint8") /* ty=Tensor[(726), uint8] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %419 = maximum(%417, %418) /* ty=Tensor[(726), uint8] */;
    %420 = cast(%419, dtype="bool") /* ty=Tensor[(726), bool] */;
    %421 = shape_of(%413, dtype="int32") /* ty=Tensor[(1), int32] */;
    %422 = cast(%413, dtype="bool") /* ty=Tensor[(726), bool] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?), bool] */;
    %424 = greater(%422, %423) /* ty=Tensor[(726), bool] */;
    (%424,)
  };
  %425() /* ty=(Tensor[(726), bool],) */
}

def @func_3996() -> (Tensor[(7, 10, 7), bool], Tensor[(726), float32]) {
  %426 = @func_3882() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool]) */;
  %427 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %428 = %426.1;
  %429 = %427.1;
  (%428, %429)
}

def @func_3908(%var_3907: Tensor[(13, 6, 12), float32]) -> Tensor[(13, 6, 12), float32] {
  %431 = fn (%var_3899: Tensor[(13, 6, 12), float32]) -> Tensor[(13, 6, 12), float32] {
    %430 = cast(%var_3899, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
    asin(%430) /* ty=Tensor[(13, 6, 12), float32] */
  };
  %431(%var_3907) /* ty=Tensor[(13, 6, 12), float32] */
}

def @func_194(%var_193: Tensor[(11, 11, 6), float64]) -> (Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) {
  %453 = fn (%var_166: Tensor[(11, 11, 6), float64]) -> (Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) {
    %432 = cast(%var_166, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
    %433 = acos(%432) /* ty=Tensor[(11, 11, 6), float64] */;
    %434 = cast(%433, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
    %435 = shape_of(%var_166, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%var_166, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %438 = subtract(%436, %437) /* ty=Tensor[(11, 11, 6), uint8] */;
    %439 = cast(%438, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
    %440 = atan(%439) /* ty=Tensor[(11, 11, 6), float64] */;
    %441 = cast(%433, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%440, dtype="bool") /* ty=Tensor[(11, 11, 6), bool] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %445 = logical_or(%443, %444) /* ty=Tensor[(11, 11, 6), bool] */;
    %446 = cast(%440, dtype="int8") /* ty=Tensor[(11, 11, 6), int8] */;
    %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
    %448 = cast(%445, dtype="int8") /* ty=Tensor[(11, 11, 6), int8] */;
    %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %450 = cast(%438, dtype="float64") /* ty=Tensor[(11, 11, 6), float64] */;
    %451 = bitwise_xor(%448, %449) /* ty=Tensor[(11, 11, 6), int8] */;
    %452 = log2(%450) /* ty=Tensor[(11, 11, 6), float64] */;
    (%451, %452)
  };
  %453(%var_193) /* ty=(Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) */
}

def @func_1183() -> (Tensor[(15, 14, 6), uint16],) {
  %454 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %455 = %454.0;
  (%455,)
}

def @func_2965(%var_2963: Tensor[(1280), float64], %var_2964: Tensor[(1536), float32]) -> (Tensor[(726), float32], Tensor[(10, 8, 16), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(15, 14, 6), float64]) {
  %468 = fn (%var_2954: Tensor[(1280), float64], %var_2955: Tensor[(1536), float32]) -> (Tensor[(726), float32], Tensor[(10, 8, 16), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(15, 14, 6), float64]) {
    %456 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
    %457 = cast(%var_2954, dtype="float64") /* ty=Tensor[(1280), float64] */;
    %458 = cast(%var_2954, dtype="float64") /* ty=Tensor[(1280), float64] */;
    %459 = cast(%var_2955, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %460 = reshape(%457, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), float64] */;
    %461 = reshape(%458, newshape=[10, 8, 16]) /* ty=Tensor[(10, 8, 16), float64] */;
    %462 = reshape(%459, newshape=[1536]) /* ty=Tensor[(1536), float32] */;
    %463 = @func_1325(%460, %461, %462) /* ty=(Tensor[(10, 8, 16), float64], Tensor[(10, 8, 16), float64], Tensor[(520), float32], Tensor[(1536), float32]) */;
    %464 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
    %465 = %456.1;
    %466 = %463.0;
    %467 = %464.4;
    (%465, %466, %var_2954, %var_2955, %467)
  };
  %468(%var_2963, %var_2964) /* ty=(Tensor[(726), float32], Tensor[(10, 8, 16), float64], Tensor[(1280), float64], Tensor[(1536), float32], Tensor[(15, 14, 6), float64]) */
}

def @func_3653() -> Tensor[(84), bool] {
  %469 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
  %469.3
}

def @func_3882() -> (Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool]) {
  %470 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %471 = @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */;
  %472 = %470.2;
  %473 = %471.2;
  (%472, %473)
}

def @func_4739() -> (Tensor[(15, 14, 6), uint16],) {
  %475 = fn () -> (Tensor[(15, 14, 6), uint16],) {
    %474 = @func_3495() /* ty=Tensor[(15, 14, 6), uint16] */;
    (%474,)
  };
  %475() /* ty=(Tensor[(15, 14, 6), uint16],) */
}

def @func_4821(%var_4819: Tensor[(1820), int32]) -> (Tensor[(15, 14, 6), uint16], Tensor[(14, 13, 10), int32], int32, Tensor[(1, 8), float64], Tensor[(1820), float32]) {
  @func_4818(%var_4819) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(14, 13, 10), int32], int32, Tensor[(1, 8), float64], Tensor[(1820), float32]) */
}

def @func_4971(%var_4969: Tensor[(1820), int32]) -> (Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), uint16], Tensor[(1820), int32]) {
  @func_4968(%var_4969) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), uint16], Tensor[(1820), int32]) */
}

def @func_3305(%var_3301: Tensor[(1536), float32], %var_3302: Tensor[(576), float32], %var_3303: Tensor[(490), float64], %var_3304: Tensor[(2366), uint8]) -> (Tensor[(15, 14, 6), float64], Tensor[(16, 8, 12), float32], Tensor[(1536), float32], Tensor[(15, 14, 6), uint16], Tensor[(576), float32], Tensor[(490), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64], Tensor[(7, 10, 7), bool], Tensor[(2366), float32], Tensor[(2366), float32], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float32]) {
  %521 = fn (%var_3221: Tensor[(1536), float32], %var_3231: Tensor[(576), float32], %var_3232: Tensor[(490), float64], %var_3253: Tensor[(2366), uint8]) -> (Tensor[(15, 14, 6), float64], Tensor[(16, 8, 12), float32], Tensor[(1536), float32], Tensor[(15, 14, 6), uint16], Tensor[(576), float32], Tensor[(490), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64], Tensor[(7, 10, 7), bool], Tensor[(2366), float32], Tensor[(2366), float32], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float32]) {
    %476 = @func_2379() /* ty=(Tensor[(15, 14, 6), float64],) */;
    %477 = cast(%var_3221, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %478 = cast(%var_3221, dtype="float32") /* ty=Tensor[(1536), float32] */;
    %479 = reshape(%477, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
    %480 = reshape(%478, newshape=[16, 8, 12]) /* ty=Tensor[(16, 8, 12), float32] */;
    %481 = @func_287(%479, %480) /* ty=(Tensor[(16, 8, 12), float32], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
    %482 = cast(%var_3231, dtype="float32") /* ty=Tensor[(576), float32] */;
    %483 = cast(%var_3232, dtype="float64") /* ty=Tensor[(490), float64] */;
    %484 = reshape(%482, newshape=[576]) /* ty=Tensor[(576), float32] */;
    %485 = reshape(%483, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float64] */;
    %486 = @func_2942(%484, %485) /* ty=(Tensor[(8, 4, 1), float64], Tensor[(32), float64], Tensor[(5, 11, 12), float64], Tensor[(660), uint16], Tensor[(12, 8, 6), float32], Tensor[(576), float32], Tensor[(12, 8, 6), float32], Tensor[(7, 10, 7), uint64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) */;
    %487 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %488 = reshape(%487, newshape=[2, 8, 15]) /* ty=Tensor[(2, 8, 15), float64] */;
    %489 = @func_2832(%488) /* ty=(Tensor[(2, 8, 15), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) */;
    %490 = cast(meta[relay.Constant][33] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %491 = reshape(%490, newshape=[1, 1, 8]) /* ty=Tensor[(1, 1, 8), float64] */;
    %492 = cast(%var_3253, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
    %493 = reshape(%492, newshape=[14, 13, 13]) /* ty=Tensor[(14, 13, 13), uint8] */;
    %494 = @func_431(%493) /* ty=(Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
    %495 = cast(meta[relay.Constant][34] /* ty=Tensor[(2366), uint8] */, dtype="float32") /* ty=Tensor[(2366), float32] */;
    %496 = shape_of(%var_3253, dtype="int32") /* ty=Tensor[(1), int32] */;
    %497 = cast(%var_3253, dtype="float32") /* ty=Tensor[(2366), float32] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?), float32] */;
    %499 = cast(%var_3253, dtype="float32") /* ty=Tensor[(2366), float32] */;
    %500 = %476.0;
    %501 = cast(%500, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
    %502 = cast(%500, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
    %503 = reshape(%501, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
    %504 = reshape(%502, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), float64] */;
    %505 = @func_1935(%503, %504) /* ty=(Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) */;
    %506 = %505.1;
    %507 = cast(%506, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
    %508 = log(%507) /* ty=Tensor[(15, 14, 6), float32] */;
    %509 = cast(%508, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
    %510 = acosh(%509) /* ty=Tensor[(15, 14, 6), float64] */;
    %511 = cast(%510, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
    %512 = %481.0;
    %513 = %486.10;
    %514 = %489.0;
    %515 = @func_3127(%491) /* ty=Tensor[(1, 1, 8), float64] */;
    %516 = %494.1;
    %517 = floor_divide(%497, %498) /* ty=Tensor[(2366), float32] */;
    %518 = log10(%499) /* ty=Tensor[(2366), float32] */;
    %519 = @func_2112() /* ty=Tensor[(15, 14, 6), float64] */;
    %520 = atanh(%511) /* ty=Tensor[(15, 14, 6), float32] */;
    (%500, %512, %var_3221, %513, %var_3231, %var_3232, %514, meta[relay.Constant][32] /* ty=Tensor[(240), float64] */, %515, meta[relay.Constant][33] /* ty=Tensor[(8), float64] */, %516, %517, %518, %519, %520)
  };
  %521(%var_3301, %var_3302, %var_3303, %var_3304) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(16, 8, 12), float32], Tensor[(1536), float32], Tensor[(15, 14, 6), uint16], Tensor[(576), float32], Tensor[(490), float64], Tensor[(2, 8, 15), float64], Tensor[(240), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64], Tensor[(7, 10, 7), bool], Tensor[(2366), float32], Tensor[(2366), float32], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float32]) */
}

def @func_4582() -> (Tensor[(726), float64], Tensor[(15, 14, 6), float64]) {
  @func_4580() /* ty=(Tensor[(726), float64], Tensor[(15, 14, 6), float64]) */
}

def @func_1758(%var_1756: Tensor[(169, 14), uint8], %var_1757: Tensor[(84), bool]) -> (Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) {
  @func_1754(%var_1756, %var_1757) /* ty=(Tensor[(169, 14), int64], Tensor[(7, 10, 7), bool], Tensor[(1536), uint32], Tensor[(726), float64], Tensor[(14, 2, 3), float32], Tensor[(84), bool], Tensor[(169, 14), float32], Tensor[(726), float32]) */
}

def @func_3655() -> Tensor[(84), bool] {
  @func_3653() /* ty=Tensor[(84), bool] */
}

def @func_2631(%var_2629: Tensor[(624), float32], %var_2630: Tensor[(864), float64]) -> (Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) {
  @func_2627(%var_2629, %var_2630) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(864), float64]) */
}

def @func_1974() -> Tensor[(15, 14, 6), uint16] {
  @func_1972() /* ty=Tensor[(15, 14, 6), uint16] */
}

def @func_2727(%var_2726: Tensor[(32, 1), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(6, 144), float64], Tensor[(32, 1), float64], Tensor[(8, 4, 624), int32]) {
  %538 = fn (%var_2717: Tensor[(32, 1), float64]) -> (Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(6, 144), float64], Tensor[(32, 1), float64], Tensor[(8, 4, 624), int32]) {
    %522 = @func_2153() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(84), bool], Tensor[(2366), uint8], Tensor[(84), bool]) */;
    %523 = cast(%var_2717, dtype="float64") /* ty=Tensor[(32, 1), float64] */;
    %524 = reshape(%523, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
    %525 = @func_591(%524) /* ty=(Tensor[(8, 4, 1), float64],) */;
    %526 = %525.0;
    %527 = cast(meta[relay.Constant][35] /* ty=Tensor[(624), float32] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %528 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 144), float64] */, dtype="float64") /* ty=Tensor[(6, 144), float64] */;
    %529 = reshape(%527, newshape=[624]) /* ty=Tensor[(624), float32] */;
    %530 = reshape(%528, newshape=[36, 24]) /* ty=Tensor[(36, 24), float64] */;
    %531 = @func_2586(%529, %530) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(864), float64], Tensor[(624), float32], Tensor[(36, 24), float64]) */;
    %532 = %531.2;
    %533 = cast(%526, dtype="int32") /* ty=Tensor[(8, 4, 1), int32] */;
    %534 = cast(%532, dtype="int32") /* ty=Tensor[(624), int32] */;
    %535 = %522.0;
    %536 = @func_2112() /* ty=Tensor[(15, 14, 6), float64] */;
    %537 = right_shift(%533, %534) /* ty=Tensor[(8, 4, 624), int32] */;
    (%535, %536, meta[relay.Constant][35] /* ty=Tensor[(624), float32] */, meta[relay.Constant][36] /* ty=Tensor[(6, 144), float64] */, %var_2717, %537)
  };
  %538(%var_2726) /* ty=(Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), float64], Tensor[(624), float32], Tensor[(6, 144), float64], Tensor[(32, 1), float64], Tensor[(8, 4, 624), int32]) */
}

def @func_3046() -> (Tensor[(15, 14, 6), float32], Tensor[(11, 11, 6), int8]) {
  %539 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %542 = @func_1836() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) */;
  %543 = rsqrt(%541) /* ty=Tensor[(15, 14, 6), float32] */;
  %544 = %542.1;
  (%543, %544)
}

def @func_4934() -> (Tensor[(84), bool],) {
  %545 = @func_3774() /* ty=(Tensor[(84), bool],) */;
  %546 = %545.0;
  (%546,)
}

def @func_3802(%var_3797: Tensor[(6, 11, 10), float32]) -> (Tensor[(6, 11, 10), float32], Tensor[(6, 11, 10), float32]) {
  %547 = cast(%var_3797, dtype="float32") /* ty=Tensor[(6, 11, 10), float32] */;
  %548 = cast(%var_3797, dtype="float32") /* ty=Tensor[(6, 11, 10), float32] */;
  %549 = erf(%547) /* ty=Tensor[(6, 11, 10), float32] */;
  %550 = log2(%548) /* ty=Tensor[(6, 11, 10), float32] */;
  (%549, %550)
}

def @func_5071(%var_5055: Tensor[(13, 5, 16), float64], %var_5060: Tensor[(624), float32], %var_5061: Tensor[(864), float64]) -> (Tensor[(13, 5, 16), float64], Tensor[(13, 5, 16), int32], Tensor[(8, 13, 6), float32], Tensor[(624), float32], Tensor[(864), float64]) {
  %551 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %552 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(13, 5, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 5, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 16), float64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %555 = cast(%var_5055, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
  %556 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(13, 5, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 5, 16), float64] */, dtype="int32") /* ty=Tensor[(13, 5, 16), int32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %559 = cast(%var_5060, dtype="float32") /* ty=Tensor[(624), float32] */;
  %560 = cast(%var_5061, dtype="float64") /* ty=Tensor[(864), float64] */;
  %561 = reshape(%559, newshape=[8, 13, 6]) /* ty=Tensor[(8, 13, 6), float32] */;
  %562 = reshape(%560, newshape=[864]) /* ty=Tensor[(864), float64] */;
  %563 = @func_1033(%561, %562) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) */;
  %564 = mod(%553, %554) /* ty=Tensor[(13, 5, 16), float64] */;
  %565 = right_shift(%557, %558) /* ty=Tensor[(13, 5, 16), int32] */;
  %566 = %563.2;
  (%564, %565, %566, %var_5060, %var_5061)
}

def @func_4105() -> Tensor[(15, 14, 6), uint16] {
  @func_4103() /* ty=Tensor[(15, 14, 6), uint16] */
}

def @func_4378(%var_4377: Tensor[(1, 84), bool]) -> (Tensor[(15, 14, 6), float32], Tensor[(14, 2, 3), float32], Tensor[(1, 84), bool]) {
  %576 = fn (%var_4367: Tensor[(1, 84), bool]) -> (Tensor[(15, 14, 6), float32], Tensor[(14, 2, 3), float32], Tensor[(1, 84), bool]) {
    %567 = @func_3922() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(726), float32]) */;
    %568 = %567.0;
    %569 = cast(%568, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
    %570 = cast(%var_4367, dtype="bool") /* ty=Tensor[(1, 84), bool] */;
    %571 = cast(%var_4367, dtype="bool") /* ty=Tensor[(1, 84), bool] */;
    %572 = reshape(%570, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
    %573 = reshape(%571, newshape=[14, 2, 3]) /* ty=Tensor[(14, 2, 3), bool] */;
    %574 = acos(%569) /* ty=Tensor[(15, 14, 6), float32] */;
    %575 = @func_382(%572, %573) /* ty=Tensor[(14, 2, 3), float32] */;
    (%574, %575, %var_4367)
  };
  %576(%var_4377) /* ty=(Tensor[(15, 14, 6), float32], Tensor[(14, 2, 3), float32], Tensor[(1, 84), bool]) */
}

def @func_4818(%var_4801: Tensor[(1820), int32]) -> (Tensor[(15, 14, 6), uint16], Tensor[(14, 13, 10), int32], int32, Tensor[(1, 8), float64], Tensor[(1820), float32]) {
  %577 = @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */;
  %578 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %579 = cast(%var_4801, dtype="int32") /* ty=Tensor[(1820), int32] */;
  %580 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 8), float64] */, dtype="float64") /* ty=Tensor[(1, 8), float64] */;
  %581 = reshape(%578, newshape=[]) /* ty=int32 */;
  %582 = reshape(%579, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), int32] */;
  %583 = reshape(%580, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %584 = @func_3593(%581, %582, %583) /* ty=(Tensor[(14, 13, 10), uint16], Tensor[(14, 13, 10), int32], Tensor[(15, 14, 6), float64], Tensor[(1, 1, 8), float64], Tensor[(8), float64]) */;
  %585 = cast(%var_4801, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %586 = %577.0;
  %587 = %584.1;
  %588 = sqrt(%585) /* ty=Tensor[(1820), float32] */;
  (%586, %587, -8 /* ty=int32 */, meta[relay.Constant][39] /* ty=Tensor[(1, 8), float64] */, %588)
}

def @func_3788(%var_3786: Tensor[(1, 6, 2), float32]) -> (Tensor[(1, 6, 2), float32],) {
  @func_3785(%var_3786) /* ty=(Tensor[(1, 6, 2), float32],) */
}

def @func_2379() -> (Tensor[(15, 14, 6), float64],) {
  %589 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %590 = %589.0;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(15, 14, 6), float64] */;
  %592 = atan(%591) /* ty=Tensor[(15, 14, 6), float64] */;
  (%592,)
}

def @func_886(%var_884: Tensor[(5, 11, 12), uint16], %var_885: Tensor[(5, 11, 12), uint16]) -> (Tensor[(5, 11, 12), uint16], Tensor[(5, 11, 12), float64]) {
  @func_882(%var_884, %var_885) /* ty=(Tensor[(5, 11, 12), uint16], Tensor[(5, 11, 12), float64]) */
}

def @func_1185() -> (Tensor[(15, 14, 6), uint16],) {
  @func_1183() /* ty=(Tensor[(15, 14, 6), uint16],) */
}

def @func_2073() -> (Tensor[(15, 14, 6), float64],) {
  %595 = fn () -> (Tensor[(15, 14, 6), float64],) {
    %593 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
    %594 = %593.1;
    (%594,)
  };
  %595() /* ty=(Tensor[(15, 14, 6), float64],) */
}

def @func_1033(%var_957: Tensor[(8, 13, 6), float32], %var_979: Tensor[(864), float64]) -> (Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) {
  %596 = cast(%var_979, dtype="float64") /* ty=Tensor[(864), float64] */;
  %597 = reshape(%596, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
  %598 = cast(%var_957, dtype="float32") /* ty=Tensor[(8, 13, 6), float32] */;
  %599 = log10(%598) /* ty=Tensor[(8, 13, 6), float32] */;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(8, 13, 6), float32] */;
  %601 = @func_838(%597) /* ty=Tensor[(9, 12, 8), float64] */;
  %602 = cos(%600) /* ty=Tensor[(8, 13, 6), float32] */;
  (%601, %var_979, %602)
}

def @func_3998() -> (Tensor[(7, 10, 7), bool], Tensor[(726), float32]) {
  @func_3996() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(726), float32]) */
}

def @func_638(%var_598: Tensor[(8, 4, 1), float64], %var_605: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool], Tensor[(8, 4, 1), float32]) {
  %603 = cast(%var_598, dtype="bool") /* ty=Tensor[(8, 4, 1), bool] */;
  %604 = cast(%var_605, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %605 = cast(%var_598, dtype="float64") /* ty=Tensor[(8, 4, 1), float64] */;
  %606 = sin(%605) /* ty=Tensor[(8, 4, 1), float64] */;
  %607 = cast(%606, dtype="float32") /* ty=Tensor[(8, 4, 1), float32] */;
  %608 = logical_or(%603, %604) /* ty=Tensor[(8, 4, 8), bool] */;
  %609 = asin(%607) /* ty=Tensor[(8, 4, 1), float32] */;
  (%608, %609)
}

def @func_3172() -> Tensor[(15, 14, 6), float64] {
  @func_3170() /* ty=Tensor[(15, 14, 6), float64] */
}

def @func_2942(%var_2878: Tensor[(576), float32], %var_2917: Tensor[(7, 10, 7), float64]) -> (Tensor[(8, 4, 1), float64], Tensor[(32), float64], Tensor[(5, 11, 12), float64], Tensor[(660), uint16], Tensor[(12, 8, 6), float32], Tensor[(576), float32], Tensor[(12, 8, 6), float32], Tensor[(7, 10, 7), uint64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float64], Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), float64]) {
  %610 = cast(meta[relay.Constant][40] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %611 = reshape(%610, newshape=[8, 4, 1]) /* ty=Tensor[(8, 4, 1), float64] */;
  %612 = @func_591(%611) /* ty=(Tensor[(8, 4, 1), float64],) */;
  %613 = cast(meta[relay.Constant][41] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %614 = cast(meta[relay.Constant][41] /* ty=Tensor[(660), uint16] */, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %615 = reshape(%613, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), uint16] */;
  %616 = reshape(%614, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), uint16] */;
  %617 = @func_882(%615, %616) /* ty=(Tensor[(5, 11, 12), uint16], Tensor[(5, 11, 12), float64]) */;
  %618 = cast(%var_2878, dtype="float32") /* ty=Tensor[(576), float32] */;
  %619 = reshape(%618, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), float32] */;
  %620 = cast(%var_2878, dtype="float32") /* ty=Tensor[(576), float32] */;
  %621 = reshape(%620, newshape=[12, 8, 6]) /* ty=Tensor[(12, 8, 6), float32] */;
  %622 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %623 = %622.1;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %625 = acos(%624) /* ty=Tensor[(7, 10, 7), float64] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %627 = asin(%626) /* ty=Tensor[(7, 10, 7), float64] */;
  %628 = cast(%625, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %632 = power(%630, %631) /* ty=Tensor[(7, 10, 7), float32] */;
  %633 = cast(%625, dtype="uint64") /* ty=Tensor[(7, 10, 7), uint64] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="uint64") /* ty=Tensor[(7, 10, 7), uint64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %637 = cast(%var_2917, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %638 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%625, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %641 = cast(%627, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %642 = @func_1167() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(7, 10, 7), bool], Tensor[(169, 14), uint8]) */;
  %643 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %644 = %612.0;
  %645 = %617.1;
  %646 = @func_2647(%619) /* ty=Tensor[(12, 8, 6), float32] */;
  %647 = @func_2647(%621) /* ty=Tensor[(12, 8, 6), float32] */;
  %648 = logical_xor(%635, %636) /* ty=Tensor[(7, 10, 7), uint64] */;
  %649 = mod(%639, %640) /* ty=Tensor[(7, 10, 7), float32] */;
  %650 = log(%641) /* ty=Tensor[(7, 10, 7), float64] */;
  %651 = %642.0;
  %652 = %643.0;
  (%644, meta[relay.Constant][40] /* ty=Tensor[(32), float64] */, %645, meta[relay.Constant][41] /* ty=Tensor[(660), uint16] */, %646, %var_2878, %647, %648, %649, %650, %651, %652)
}

def @func_2252() -> (Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) {
  %653 = @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */;
  %654 = %653.0;
  %655 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 14, 6), float64] */, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = @func_1836() /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(11, 11, 6), int8], Tensor[(363, 2), float64], Tensor[(7, 10, 7), bool], Tensor[(520), float32], Tensor[(7, 10, 7), bool]) */;
  %660 = cast(meta[relay.Constant][43] /* ty=Tensor[(2366), uint8] */, dtype="uint8") /* ty=Tensor[(2366), uint8] */;
  %661 = reshape(%660, newshape=[14, 13, 13]) /* ty=Tensor[(14, 13, 13), uint8] */;
  %662 = @func_431(%661) /* ty=(Tensor[(14, 13, 13), uint8], Tensor[(7, 10, 7), bool], Tensor[(520), float32]) */;
  %663 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %664 = less_equal(%657, %658) /* ty=Tensor[(15, 14, 6), bool] */;
  %665 = %659.3;
  %666 = %662.1;
  %667 = %663.1;
  (%664, %665, %666, meta[relay.Constant][43] /* ty=Tensor[(2366), uint8] */, %667)
}

def @func_2779(%var_2774: Tensor[(726), float64]) -> (Tensor[(726), bool],) {
  %668 = @func_1620() /* ty=Tensor[(726), float64] */;
  %669 = cast(%var_2774, dtype="bool") /* ty=Tensor[(726), bool] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(1), int32] */;
  %671 = cast(%668, dtype="bool") /* ty=Tensor[(726), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?), bool] */;
  %673 = logical_and(%671, %672) /* ty=Tensor[(726), bool] */;
  (%673,)
}

def @func_1037(%var_1035: Tensor[(8, 13, 6), float32], %var_1036: Tensor[(864), float64]) -> (Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) {
  @func_1033(%var_1035, %var_1036) /* ty=(Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(8, 13, 6), float32]) */
}

def @func_3746(%var_3744: Tensor[(490, 1), float64]) -> (Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), uint16], Tensor[(1536), float32], Tensor[(576), float32], Tensor[(490, 1), float64], Tensor[(2366), uint8]) {
  @func_3743(%var_3744) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(15, 14, 6), uint16], Tensor[(1536), float32], Tensor[(576), float32], Tensor[(490, 1), float64], Tensor[(2366), uint8]) */
}

def @func_2254() -> (Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) {
  @func_2252() /* ty=(Tensor[(15, 14, 6), bool], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), bool], Tensor[(2366), uint8], Tensor[(15, 14, 6), float64]) */
}

def @func_642(%var_640: Tensor[(8, 4, 1), float64], %var_641: Tensor[(8, 4, 8), float64]) -> (Tensor[(8, 4, 8), bool], Tensor[(8, 4, 1), float32]) {
  @func_638(%var_640, %var_641) /* ty=(Tensor[(8, 4, 8), bool], Tensor[(8, 4, 1), float32]) */
}

def @func_3170() -> Tensor[(15, 14, 6), float64] {
  %674 = @func_2379() /* ty=(Tensor[(15, 14, 6), float64],) */;
  %674.0
}

def @func_1420() -> (Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) {
  @func_1418() /* ty=(Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) */
}

def @func_1935(%var_1879: Tensor[(15, 14, 6), float64], %var_1907: Tensor[(15, 14, 6), float64]) -> (Tensor[(15, 14, 6), float32], Tensor[(15, 14, 6), int32], Tensor[(11, 11, 6), float64], Tensor[(726), float64]) {
  %675 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %676 = %675.1;
  %677 = cast(%var_1879, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="float32") /* ty=Tensor[(15, 14, 6), float32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %681 = cast(%var_1907, dtype="int32") /* ty=Tensor[(15, 14, 6), int32] */;
  %682 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%676, dtype="int32") /* ty=Tensor[(15, 14, 6), int32] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %685 = cast(meta[relay.Constant][44] /* ty=Tensor[(726), float64] */, dtype="float64") /* ty=Tensor[(726), float64] */;
  %686 = reshape(%685, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), float64] */;
  %687 = @func_192(%686) /* ty=(Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) */;
  %688 = divide(%679, %680) /* ty=Tensor[(15, 14, 6), float32] */;
  %689 = logical_xor(%683, %684) /* ty=Tensor[(15, 14, 6), int32] */;
  %690 = %687.1;
  (%688, %689, %690, meta[relay.Constant][44] /* ty=Tensor[(726), float64] */)
}

def @func_1418() -> (Tensor[(15, 14, 6), float64], Tensor[(726), float32], Tensor[(726), float32], Tensor[(726), int32], Tensor[(726), int8]) {
  %691 = @func_1271() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16]) */;
  %692 = cast(meta[relay.Constant][45] /* ty=Tensor[(726), float64] */, dtype="float64") /* ty=Tensor[(726), float64] */;
  %693 = reshape(%692, newshape=[11, 11, 6]) /* ty=Tensor[(11, 11, 6), float64] */;
  %694 = @func_192(%693) /* ty=(Tensor[(11, 11, 6), int8], Tensor[(11, 11, 6), float64]) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="uint32") /* ty=Tensor[(11, 11, 6), uint32] */;
  %697 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(726), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %698 = cast(meta[relay.Constant][45] /* ty=Tensor[(726), float64] */, dtype="uint32") /* ty=Tensor[(726), uint32] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %700 = minimum(%698, %699) /* ty=Tensor[(726), uint32] */;
  %701 = cast(%695, dtype="float32") /* ty=Tensor[(11, 11, 6), float32] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(1), int32] */;
  %703 = cast(%700, dtype="float32") /* ty=Tensor[(726), float32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?), float32] */;
  %705 = cast(meta[relay.Constant][45] /* ty=Tensor[(726), float64] */, dtype="float32") /* ty=Tensor[(726), float32] */;
  %706 = log10(%705) /* ty=Tensor[(726), float32] */;
  %707 = cast(%695, dtype="uint8") /* ty=Tensor[(11, 11, 6), uint8] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(1), int32] */;
  %709 = cast(%706, dtype="uint8") /* ty=Tensor[(726), uint8] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %711 = bitwise_or(%709, %710) /* ty=Tensor[(726), uint8] */;
  %712 = cast(%711, dtype="float64") /* ty=Tensor[(726), float64] */;
  %713 = asinh(%712) /* ty=Tensor[(726), float64] */;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(726), float32] */;
  %715 = cast(%711, dtype="float64") /* ty=Tensor[(726), float64] */;
  %716 = sin(%715) /* ty=Tensor[(726), float64] */;
  %717 = cast(%716, dtype="int32") /* ty=Tensor[(726), int32] */;
  %718 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(726), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %719 = cast(meta[relay.Constant][45] /* ty=Tensor[(726), float64] */, dtype="int32") /* ty=Tensor[(726), int32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?), int32] */;
  %721 = cast(%706, dtype="int8") /* ty=Tensor[(726), int8] */;
  %722 = shape_of(%711, dtype="int32") /* ty=Tensor[(1), int32] */;
  %723 = cast(%711, dtype="int8") /* ty=Tensor[(726), int8] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?), int8] */;
  %725 = %691.1;
  %726 = power(%703, %704) /* ty=Tensor[(726), float32] */;
  %727 = acosh(%714) /* ty=Tensor[(726), float32] */;
  %728 = subtract(%719, %720) /* ty=Tensor[(726), int32] */;
  %729 = right_shift(%723, %724) /* ty=Tensor[(726), int8] */;
  (%725, %726, %727, %728, %729)
}

def @func_3948(%var_3946: Tensor[(12, 3, 1), float32], %var_3947: Tensor[(12, 3, 16), float32]) -> Tensor[(12, 3, 16), float32] {
  @func_3944(%var_3946, %var_3947) /* ty=Tensor[(12, 3, 16), float32] */
}

def @func_4069(%var_4068: Tensor[(576), float32]) -> (Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16], Tensor[(576), float32]) {
  %738 = fn (%var_4038: Tensor[(576), float32]) -> (Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16], Tensor[(576), float32]) {
    %730 = @func_3774() /* ty=(Tensor[(84), bool],) */;
    %731 = @func_2072() /* ty=(Tensor[(15, 14, 6), float64],) */;
    %732 = cast(%var_4038, dtype="float32") /* ty=Tensor[(576), float32] */;
    %733 = reshape(%732, newshape=[2, 288]) /* ty=Tensor[(2, 288), float32] */;
    %734 = @func_3374(%733) /* ty=(Tensor[(15, 14, 6), uint16], Tensor[(12, 8, 6), float32], Tensor[(2, 288), float32], Tensor[(15, 14, 6), float64]) */;
    %735 = %730.0;
    %736 = %731.0;
    %737 = %734.0;
    (%735, %736, %737, %var_4038)
  };
  %738(%var_4068) /* ty=(Tensor[(84), bool], Tensor[(15, 14, 6), float64], Tensor[(15, 14, 6), uint16], Tensor[(576), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen63/build/output.py:1736: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen63/build/output.py", line 1741, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(750) tvmgen_default_fused_sin_kernel0(float* __restrict__ T_sin, float* __restrict__ placeholder) {
  T_sin[(((int)threadIdx.x))] = __sinf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

