==========mod==========
#[version = "0.0.5"]
def @func_3826() -> Tensor[(13, 10, 3), bool] {
  %0 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %0.0
}

def @func_5145(%var_5141: Tensor[(4, 2, 4), uint32]) -> (Tensor[(4, 2, 4), bool],) {
  %1 = cast(%var_5141, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %2 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 2, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 2, 4), uint32] */, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %5 = less(%3, %4) /* ty=Tensor[(4, 2, 4), bool] */;
  (%5,)
}

def @func_9123() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  %6 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %7 = @func_4889() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %8 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
  %9 = @func_7801() /* ty=Tensor[(13, 10, 3), bool] */;
  %10 = %6.2;
  %11 = %7.0;
  %12 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %13 = @func_1752() /* ty=Tensor[(13, 10, 3), float32] */;
  %14 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%8, %9, %10, %11, %12, %13, %14)
}

def @func_4315() -> Tensor[(36), int16] {
  %15 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %15.0
}

def @func_7422() -> (Tensor[(13, 10, 3), bool],) {
  %16 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
  (%16,)
}

def @func_9459() -> (Tensor[(13, 10, 3), bool],) {
  %17 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
  (%17,)
}

def @func_2122() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %18 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %19 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %20 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  %21 = %18.2;
  (%19, %20, %21)
}

def @func_4972() -> (Tensor[(5, 12), float64],) {
  %22 = @func_3125() /* ty=(Tensor[(5, 12), float64], Tensor[(390), float64]) */;
  %23 = %22.0;
  (%23,)
}

def @func_1264(%var_1257: Tensor[(13, 10, 3), bool]) -> Tensor[(13, 10, 3), float32] {
  %24 = @func_596() /* ty=Tensor[(13, 10, 3), bool] */;
  %25 = cast(%var_1257, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%27, %28) /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_4054(%var_4047: float64, %var_4048: Tensor[(240), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) {
  %29 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %30 = cast(%var_4047, dtype="float64") /* ty=float64 */;
  %31 = cast(%var_4048, dtype="float64") /* ty=Tensor[(240), float64] */;
  %32 = reshape(%30, newshape=[]) /* ty=float64 */;
  %33 = reshape(%31, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %34 = @func_3733(%32, %33) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) */;
  %35 = %29.0;
  %36 = %34.4;
  (%35, %36, %var_4047, %var_4048)
}

def @func_7625(%var_7618: Tensor[(12, 4, 5), float64]) -> Tensor[(12, 4, 5), float64] {
  %37 = cast(%var_7618, dtype="float64") /* ty=Tensor[(12, 4, 5), float64] */;
  asin(%37) /* ty=Tensor[(12, 4, 5), float64] */
}

def @func_8952(%var_8943: Tensor[(252), int16], %var_8950: Tensor[(1, 40), uint32]) -> (Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(252), int16], Tensor[(390), float64], Tensor[(13, 10, 3), bool], Tensor[(1, 40), uint32]) {
  %38 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %39 = cast(%var_8943, dtype="int16") /* ty=Tensor[(252), int16] */;
  %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %41 = reshape(%39, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %42 = reshape(%40, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %43 = @func_705(%41, %42) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %44 = cast(%var_8950, dtype="uint32") /* ty=Tensor[(1, 40), uint32] */;
  %45 = reshape(%44, newshape=[4, 2, 5]) /* ty=Tensor[(4, 2, 5), uint32] */;
  %46 = @func_3866(%45) /* ty=(Tensor[(4, 2, 5), uint32], Tensor[(13, 10, 3), bool]) */;
  %47 = %38.3;
  %48 = %43.3;
  %49 = %46.1;
  (%47, %48, %var_8943, meta[relay.Constant][1] /* ty=Tensor[(390), float64] */, %49, %var_8950)
}

def @func_10184(%var_10125: Tensor[(8, 1, 15), bool], %var_10126: Tensor[(8, 9, 15), bool], %var_10151: float64, %var_10152: Tensor[(240), float64]) -> (Tensor[(8, 9, 15), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(15, 8, 2), uint64], float64, Tensor[(240), float64], Tensor[(5, 8, 10), float64]) {
  %50 = cast(%var_10125, dtype="bool") /* ty=Tensor[(8, 1, 15), bool] */;
  %51 = cast(%var_10126, dtype="bool") /* ty=Tensor[(8, 9, 15), bool] */;
  %52 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %53 = @func_9459() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %54 = cast(%var_10151, dtype="float64") /* ty=float64 */;
  %55 = cast(%var_10152, dtype="float64") /* ty=Tensor[(240), float64] */;
  %56 = reshape(%54, newshape=[]) /* ty=float64 */;
  %57 = reshape(%55, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %58 = @func_3733(%56, %57) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) */;
  %59 = cast(%var_10151, dtype="float64") /* ty=float64 */;
  %60 = reshape(%59, newshape=[]) /* ty=float64 */;
  %61 = @func_6514(%60) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) */;
  %62 = logical_or(%50, %51) /* ty=Tensor[(8, 9, 15), bool] */;
  %63 = %52.0;
  %64 = %53.0;
  %65 = %58.1;
  %66 = %61.1;
  (%62, %63, %64, %65, %var_10151, %var_10152, %66)
}

def @func_3433() -> (Tensor[(13, 10, 3), bool],) {
  %67 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %68 = %67.2;
  (%68,)
}

def @func_7363(%var_7357: uint16, %var_7358: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], uint16, Tensor[(154), uint16]) {
  %69 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %70 = cast(%var_7357, dtype="uint16") /* ty=uint16 */;
  %71 = cast(%var_7358, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %72 = reshape(%70, newshape=[]) /* ty=uint16 */;
  %73 = reshape(%71, newshape=[154]) /* ty=Tensor[(154), uint16] */;
  %74 = @func_2193(%72, %73) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154), uint16]) */;
  %75 = %69.0;
  %76 = %74.0;
  (%75, %76, %var_7357, %var_7358)
}

def @func_9482() -> Tensor[(13, 10, 3), bool] {
  %77 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %77.0
}

def @func_5710(%var_5668: Tensor[(15, 3, 13), float32]) -> (Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(15, 3, 13), float64], Tensor[(5, 12), float64]) {
  %78 = cast(%var_5668, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %79 = cosh(%78) /* ty=Tensor[(15, 3, 13), float32] */;
  %80 = cast(%var_5668, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %85 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%79, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %88 = cast(%var_5668, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
  %89 = @func_4972() /* ty=(Tensor[(5, 12), float64],) */;
  %90 = bitwise_xor(%82, %83) /* ty=Tensor[(15, 3, 13), uint16] */;
  %91 = power(%86, %87) /* ty=Tensor[(15, 3, 13), float32] */;
  %92 = atan(%88) /* ty=Tensor[(15, 3, 13), float64] */;
  %93 = %89.0;
  (%90, %91, %92, %93)
}

def @func_9795() -> Tensor[(36), int16] {
  @func_3204() /* ty=Tensor[(36), int16] */
}

def @func_2307() -> (Tensor[(12, 2, 9), float32],) {
  %94 = @func_2012() /* ty=(Tensor[(12, 2, 9), float32], Tensor[(12, 2, 9), float32]) */;
  %95 = %94.0;
  (%95,)
}

def @func_3246() -> Tensor[(13, 10, 3), float32] {
  %96 = @func_1468() /* ty=Tensor[(13, 10, 3), bool] */;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  tan(%97) /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_5660() -> Tensor[(13, 10, 3), bool] {
  %98 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %98.0
}

def @func_5507() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), bool]) {
  %99 = @func_5284() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %100 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
  %101 = @func_1949() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) */;
  %102 = %99.0;
  %103 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
  %104 = %100.0;
  %105 = %101.1;
  (%102, %103, %104, %105)
}

def @func_8622() -> (Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  %106 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %107 = @func_6542() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %108 = %106.4;
  %109 = @func_3246() /* ty=Tensor[(13, 10, 3), float32] */;
  %110 = %107.0;
  (%108, %109, %110)
}

def @func_7967() -> (Tensor[(13, 10, 3), bool],) {
  %111 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %112 = %111.0;
  (%112,)
}

def @func_3419(%var_3400: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) {
  %113 = cast(%var_3400, dtype="bool") /* ty=Tensor[(768), bool] */;
  %114 = cast(%var_3400, dtype="bool") /* ty=Tensor[(768), bool] */;
  %115 = reshape(%113, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), bool] */;
  %116 = reshape(%114, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), bool] */;
  %117 = @func_2812(%115, %116) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float32]) */;
  %118 = @func_1365() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %119 = @func_2213() /* ty=Tensor[(13, 10, 3), bool] */;
  %120 = %117.1;
  %121 = %118.0;
  (%119, %120, %var_3400, %121)
}

def @func_1076(%var_1065: uint16, %var_1066: Tensor[(11, 1, 14), uint16]) -> (Tensor[(11, 1, 14), uint16],) {
  %122 = cast(%var_1065, dtype="uint16") /* ty=uint16 */;
  %123 = cast(%var_1066, dtype="uint16") /* ty=Tensor[(11, 1, 14), uint16] */;
  %124 = bitwise_xor(%122, %123) /* ty=Tensor[(11, 1, 14), uint16] */;
  (%124,)
}

def @func_9691() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %125 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %126 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
  %127 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %128 = %125.0;
  %129 = %126.2;
  %130 = %127.0;
  %131 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  (%128, %129, %130, %131)
}

def @func_9655(%var_9653: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), bool], Tensor[(768), bool]) {
  %132 = @func_5660() /* ty=Tensor[(13, 10, 3), bool] */;
  %133 = cast(%132, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %134 = reshape(%133, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), bool] */;
  %135 = cast(%var_9653, dtype="bool") /* ty=Tensor[(768), bool] */;
  %136 = reshape(%135, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %137 = @func_9160(%136) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) */;
  %138 = @func_4849(%134) /* ty=Tensor[(13, 10, 3), uint8] */;
  %139 = %137.0;
  (%132, %138, %139, %var_9653)
}

def @func_490() -> Tensor[(13, 10, 3), bool] {
  @func_443() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_8195(%var_8118: Tensor[(16, 8, 12), uint32], %var_8119: Tensor[(16, 8, 12), uint32]) -> (Tensor[(16, 8, 12), uint32], Tensor[(13, 10, 3), bool]) {
  %140 = cast(%var_8119, dtype="uint32") /* ty=Tensor[(16, 8, 12), uint32] */;
  %141 = shape_of(%var_8118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_8118, dtype="uint32") /* ty=Tensor[(16, 8, 12), uint32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %144 = bitwise_and(%142, %143) /* ty=Tensor[(16, 8, 12), uint32] */;
  %145 = @func_2237() /* ty=Tensor[(13, 10, 3), bool] */;
  (%144, %145)
}

def @func_7869() -> (Tensor[(36), int16],) {
  %146 = @func_4315() /* ty=Tensor[(36), int16] */;
  (%146,)
}

def @func_2061() -> (Tensor[(13, 10, 3), bool],) {
  %147 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%147,)
}

def @func_7953() -> Tensor[(13, 10, 3), float32] {
  @func_1752() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_281() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %148 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %149 = rsqrt(%148) /* ty=Tensor[(13, 10, 3), float64] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %151 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(13, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %154 = mod(%152, %153) /* ty=Tensor[(13, 10, 3), float64] */;
  %155 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 10, 3), float64] */, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %159 = cast(%154, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %160 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%149, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %163 = greater_equal(%157, %158) /* ty=Tensor[(13, 10, 3), bool] */;
  %164 = greater(%161, %162) /* ty=Tensor[(13, 10, 3), bool] */;
  (%163, %164)
}

def @func_1983(%var_1970: float64, %var_1971: Tensor[(5, 8, 10), float64]) -> (Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) {
  %165 = cast(%var_1970, dtype="float64") /* ty=float64 */;
  %166 = cast(%var_1971, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
  %167 = mod(%165, %166) /* ty=Tensor[(5, 8, 10), float64] */;
  %168 = @func_596() /* ty=Tensor[(13, 10, 3), bool] */;
  (%167, %168)
}

def @func_566() -> Tensor[(13, 10, 3), bool] {
  %169 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %169.0
}

def @func_5239() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  %170 = @func_2584() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %171 = @func_3783() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */;
  %172 = %170.0;
  %173 = %171.1;
  %174 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  (%172, %173, %174)
}

def @func_7194(%var_7185: Tensor[(12, 15, 3), int64]) -> Tensor[(12, 15, 3), bool] {
  %175 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 15, 3), int64] */, dtype="bool") /* ty=Tensor[(12, 15, 3), bool] */;
  %176 = shape_of(%var_7185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_7185, dtype="bool") /* ty=Tensor[(12, 15, 3), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%177, %178) /* ty=Tensor[(12, 15, 3), bool] */
}

def @func_1949() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) {
  %179 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %180 = @func_1823() /* ty=Tensor[(13, 10, 3), bool] */;
  %181 = %179.0;
  %182 = @func_1764() /* ty=Tensor[(36), int16] */;
  %183 = @func_1764() /* ty=Tensor[(36), int16] */;
  (%180, %181, %182, %183)
}

def @func_6376() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) {
  %184 = @func_3783() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */;
  %185 = %184.0;
  %186 = @func_3082() /* ty=Tensor[(13, 10, 3), float32] */;
  (%185, %186)
}

def @func_3525(%var_3519: Tensor[(1, 2, 11), int32], %var_3520: Tensor[(4, 2, 11), int32]) -> Tensor[(4, 2, 11), bool] {
  %187 = cast(%var_3519, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
  %188 = cast(%var_3520, dtype="bool") /* ty=Tensor[(4, 2, 11), bool] */;
  less_equal(%187, %188) /* ty=Tensor[(4, 2, 11), bool] */
}

def @func_4758(%var_4738: Tensor[(400), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(252), int16], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) {
  %189 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %190 = %189.1;
  %191 = cast(%190, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
  %192 = reshape(%191, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
  %193 = @func_1638(%192) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
  %194 = cast(%190, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
  %195 = reshape(%194, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
  %196 = @func_1638(%195) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
  %197 = cast(-7.07913f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %198 = cast(%var_4738, dtype="float64") /* ty=Tensor[(400), float64] */;
  %199 = reshape(%197, newshape=[]) /* ty=float64 */;
  %200 = reshape(%198, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), float64] */;
  %201 = @func_1983(%199, %200) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) */;
  %202 = @func_4315() /* ty=Tensor[(36), int16] */;
  %203 = %193.0;
  %204 = %196.0;
  %205 = %201.0;
  (%190, %202, %203, %204, %205, -7.07913f64 /* ty=float64 */, %var_4738)
}

def @func_5403() -> Tensor[(13, 10, 3), float32] {
  @func_3246() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_2567(%var_2539: int64, %var_2540: Tensor[(13, 16, 11), int64]) -> (Tensor[(13, 16, 11), int64], Tensor[(13, 10, 3), bool]) {
  %206 = cast(%var_2539, dtype="int64") /* ty=int64 */;
  %207 = cast(%var_2540, dtype="int64") /* ty=Tensor[(13, 16, 11), int64] */;
  %208 = bitwise_xor(%206, %207) /* ty=Tensor[(13, 16, 11), int64] */;
  %209 = @func_776() /* ty=Tensor[(13, 10, 3), bool] */;
  (%208, %209)
}

def @func_5934(%var_5921: Tensor[(252, 1), int16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int8], Tensor[(252, 1), int16], Tensor[(13, 10, 3), bool], Tensor[(1, 192), float64]) {
  %210 = cast(%var_5921, dtype="int16") /* ty=Tensor[(252, 1), int16] */;
  %211 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %213 = reshape(%210, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %214 = reshape(%212, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %215 = @func_705(%213, %214) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %216 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %217 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %218 = reshape(%216, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float64] */;
  %219 = reshape(%217, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float64] */;
  %220 = @func_796(%218, %219) /* ty=(Tensor[(3, 16, 4), float64], Tensor[(13, 10, 3), bool]) */;
  %221 = %215.4;
  %222 = %220.1;
  (%211, %221, %var_5921, %222, meta[relay.Constant][6] /* ty=Tensor[(1, 192), float64] */)
}

def @func_8499() -> (Tensor[(13, 10, 3), float32],) {
  %223 = @func_1752() /* ty=Tensor[(13, 10, 3), float32] */;
  (%223,)
}

def @func_6542() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %224 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %225 = %224.1;
  %226 = @func_3826() /* ty=Tensor[(13, 10, 3), bool] */;
  (%225, %226)
}

def @func_8709() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %227 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %228 = @func_4638() /* ty=Tensor[(13, 10, 3), bool] */;
  %229 = %227.1;
  (%228, %229)
}

def @func_9369() -> Tensor[(13, 10, 3), bool] {
  @func_7467() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3204() -> Tensor[(36), int16] {
  %230 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %230.0
}

def @func_10062(%var_9999: Tensor[(13, 5, 4), int32], %var_10047: Tensor[(13, 5, 4), int32]) -> (Tensor[(13, 5, 4), int32], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 5, 4), int32]) {
  %231 = cast(%var_9999, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %232 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(13, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %235 = @func_4473() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %236 = @func_5239() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %237 = cast(%var_10047, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %238 = shape_of(%var_9999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%var_9999, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %241 = bitwise_xor(%233, %234) /* ty=Tensor[(13, 5, 4), int32] */;
  %242 = %235.0;
  %243 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  %244 = %236.0;
  %245 = @func_4647() /* ty=Tensor[(13, 10, 3), bool] */;
  %246 = maximum(%239, %240) /* ty=Tensor[(13, 5, 4), int32] */;
  (%241, %242, %243, %244, %245, %246)
}

def @func_10539(%var_10478: Tensor[(12, 2, 9), int8]) -> (Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  %247 = @func_5539() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint32], Tensor[(390), int8]) */;
  %248 = @func_9292() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %249 = @func_6921() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8]) */;
  %250 = %249.1;
  %251 = cast(%var_10478, dtype="int16") /* ty=Tensor[(12, 2, 9), int16] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="int16") /* ty=Tensor[(12, 2, 9), int16] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %255 = cast(meta[relay.Constant][8] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %256 = reshape(%255, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %257 = @func_3419(%256) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) */;
  %258 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %259 = @func_3433() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %260 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %261 = @func_4435() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %262 = %247.1;
  %263 = %248.0;
  %264 = @func_5646() /* ty=Tensor[(13, 10, 3), bool] */;
  %265 = right_shift(%253, %254) /* ty=Tensor[(12, 2, 9), int16] */;
  %266 = %257.2;
  %267 = %258.0;
  %268 = %259.0;
  %269 = %260.0;
  %270 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  %271 = @func_5403() /* ty=Tensor[(13, 10, 3), float32] */;
  %272 = %261.0;
  (%262, %263, %264, %265, %266, meta[relay.Constant][8] /* ty=Tensor[(768), bool] */, %267, %268, %269, %270, %271, %272)
}

def @func_7742() -> Tensor[(13, 10, 3), bool] {
  %273 = @func_4103() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %273.1
}

def @func_11448() -> Tensor[(36), int16] {
  @func_3204() /* ty=Tensor[(36), int16] */
}

def @func_7606(%var_7581: Tensor[(11, 10, 6), bool]) -> (Tensor[(11, 10, 6), int8], Tensor[(11, 10, 6), float32]) {
  %274 = cast(%var_7581, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %275 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 10, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 10, 6), bool] */, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = logical_and(%276, %277) /* ty=Tensor[(11, 10, 6), bool] */;
  %279 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 10, 6), bool] */, dtype="int8") /* ty=Tensor[(11, 10, 6), int8] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="int8") /* ty=Tensor[(11, 10, 6), int8] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %283 = cast(%var_7581, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %284 = log(%283) /* ty=Tensor[(11, 10, 6), float64] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %286 = bitwise_or(%281, %282) /* ty=Tensor[(11, 10, 6), int8] */;
  %287 = erf(%285) /* ty=Tensor[(11, 10, 6), float32] */;
  (%286, %287)
}

def @main(%var_11557: Tensor[(117), uint16]) -> (Tensor[(252), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), uint32], Tensor[(216), int8], Tensor[(117), uint16], Tensor[(3, 234), uint16], Tensor[(13, 6, 9), float64]) {
  %288 = @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %289 = cast(meta[relay.Constant][11] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
  %290 = reshape(%289, newshape=[12, 2, 9]) /* ty=Tensor[(12, 2, 9), int8] */;
  %291 = @func_10539(%290) /* ty=(Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %292 = cast(%var_11557, dtype="uint16") /* ty=Tensor[(117), uint16] */;
  %293 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 234), uint16] */, dtype="uint16") /* ty=Tensor[(3, 234), uint16] */;
  %294 = reshape(%292, newshape=[13, 1, 9]) /* ty=Tensor[(13, 1, 9), uint16] */;
  %295 = reshape(%293, newshape=[13, 6, 9]) /* ty=Tensor[(13, 6, 9), uint16] */;
  %296 = @func_8920(%294, %295) /* ty=(Tensor[(13, 6, 9), bool], Tensor[(13, 10, 3), bool]) */;
  %297 = %296.0;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(13, 6, 9), float64] */;
  %299 = %288.1;
  %300 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  %301 = %291.0;
  %302 = tan(%298) /* ty=Tensor[(13, 6, 9), float64] */;
  (%299, %300, %301, meta[relay.Constant][11] /* ty=Tensor[(216), int8] */, %var_11557, meta[relay.Constant][12] /* ty=Tensor[(3, 234), uint16] */, %302)
}

def @func_705(%var_641: Tensor[(252), int16], %var_648: Tensor[(13, 10, 3), float64]) -> (Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) {
  %303 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
  %304 = cast(%var_641, dtype="int16") /* ty=Tensor[(252), int16] */;
  %305 = reshape(%303, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), int16] */;
  %306 = reshape(%304, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int16] */;
  %307 = @func_53(%305, %306) /* ty=(Tensor[(6, 7, 6), int16],) */;
  %308 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %310 = erf(%309) /* ty=Tensor[(13, 10, 3), float64] */;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %312 = log10(%311) /* ty=Tensor[(13, 10, 3), float64] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %314 = cos(%313) /* ty=Tensor[(13, 10, 3), float32] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %316 = cast(%314, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %317 = cosh(%316) /* ty=Tensor[(13, 10, 3), float32] */;
  %318 = cast(%var_648, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %319 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%310, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %322 = bitwise_and(%320, %321) /* ty=Tensor[(13, 10, 3), uint8] */;
  %323 = cast(%322, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
  %324 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%317, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %327 = %307.0;
  %328 = log(%315) /* ty=Tensor[(13, 10, 3), float32] */;
  %329 = logical_xor(%325, %326) /* ty=Tensor[(13, 10, 3), int8] */;
  %330 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
  (%327, meta[relay.Constant][13] /* ty=Tensor[(36), int16] */, %var_641, %328, %329, %330)
}

def @func_5284() -> (Tensor[(13, 10, 3), bool],) {
  %331 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %332 = %331.1;
  %333 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
  %334 = cast(%333, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %335 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%332, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %338 = equal(%336, %337) /* ty=Tensor[(13, 10, 3), bool] */;
  (%338,)
}

def @func_8994() -> (Tensor[(13, 10, 3), bool],) {
  %339 = @func_2584() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %340 = %339.0;
  (%340,)
}

def @func_3317() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %341 = @func_2237() /* ty=Tensor[(13, 10, 3), bool] */;
  %342 = @func_1850() /* ty=Tensor[(13, 10, 3), bool] */;
  (%341, %342)
}

def @func_3157(%var_3154: Tensor[(2, 12, 11), float32]) -> (Tensor[(2, 12, 11), float32],) {
  %343 = cast(%var_3154, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
  %344 = log2(%343) /* ty=Tensor[(2, 12, 11), float32] */;
  (%344,)
}

def @func_6113(%var_6084: int64, %var_6085: Tensor[(100), int64]) -> (Tensor[(13, 10, 3), bool], Tensor[(5, 5, 4), int64], int64, Tensor[(100), int64], Tensor[(13, 10, 3), bool]) {
  %345 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %346 = cast(%var_6084, dtype="int64") /* ty=int64 */;
  %347 = cast(%var_6085, dtype="int64") /* ty=Tensor[(100), int64] */;
  %348 = reshape(%346, newshape=[]) /* ty=int64 */;
  %349 = reshape(%347, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), int64] */;
  %350 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %351 = %345.0;
  %352 = @func_4285(%348, %349) /* ty=Tensor[(5, 5, 4), int64] */;
  %353 = %350.0;
  (%351, %352, %var_6084, %var_6085, %353)
}

def @func_6810() -> (Tensor[(13, 10, 3), bool],) {
  %354 = @func_6596() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %355 = %354.2;
  (%355,)
}

def @func_2812(%var_2798: Tensor[(6, 8, 16), bool], %var_2799: Tensor[(6, 8, 16), bool]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float32]) {
  %356 = cast(%var_2799, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %357 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%var_2798, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = cast(%var_2798, dtype="float32") /* ty=Tensor[(6, 8, 16), float32] */;
  %361 = logical_or(%358, %359) /* ty=Tensor[(6, 8, 16), bool] */;
  %362 = rsqrt(%360) /* ty=Tensor[(6, 8, 16), float32] */;
  (%361, %362)
}

def @func_1638(%var_1610: Tensor[(13, 10, 3), int8]) -> (Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) {
  %363 = cast(meta[relay.Constant][14] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %364 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %365 = %364.1;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %367 = reshape(%363, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %368 = reshape(%366, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %369 = @func_705(%367, %368) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %370 = %369.4;
  %371 = cast(%var_1610, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %375 = cast(%365, dtype="uint32") /* ty=Tensor[(13, 10, 3), uint32] */;
  %376 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%370, dtype="uint32") /* ty=Tensor[(13, 10, 3), uint32] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %379 = bitwise_or(%373, %374) /* ty=Tensor[(13, 10, 3), uint8] */;
  %380 = multiply(%377, %378) /* ty=Tensor[(13, 10, 3), uint32] */;
  (meta[relay.Constant][14] /* ty=Tensor[(252), int16] */, %379, %380)
}

def @func_2501() -> Tensor[(13, 10, 3), float64] {
  %381 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %382 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 10, 3), bool] */, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%384, %385) /* ty=Tensor[(13, 10, 3), float64] */
}

def @func_4930(%var_4919: Tensor[(3, 6, 8), float64]) -> Tensor[(3, 6, 8), float64] {
  %386 = cast(%var_4919, dtype="float64") /* ty=Tensor[(3, 6, 8), float64] */;
  log(%386) /* ty=Tensor[(3, 6, 8), float64] */
}

def @func_7080() -> (Tensor[(13, 10, 3), bool],) {
  %387 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %388 = %387.0;
  (%388,)
}

def @func_1574() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) {
  %389 = @func_443() /* ty=Tensor[(13, 10, 3), bool] */;
  %390 = cast(%389, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %391 = reshape(%390, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), bool] */;
  %392 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %393 = cast(meta[relay.Constant][16] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %394 = %392.0;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %396 = reshape(%393, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %397 = reshape(%395, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %398 = @func_705(%396, %397) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %399 = %398.1;
  %400 = cast(%399, dtype="int16") /* ty=Tensor[(36), int16] */;
  %401 = cast(meta[relay.Constant][16] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %402 = reshape(%400, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), int16] */;
  %403 = reshape(%401, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int16] */;
  %404 = @func_53(%402, %403) /* ty=(Tensor[(6, 7, 6), int16],) */;
  %405 = @func_1264(%391) /* ty=Tensor[(13, 10, 3), float32] */;
  %406 = %404.0;
  (%389, %405, %394, %399, meta[relay.Constant][16] /* ty=Tensor[(252), int16] */, %406)
}

def @func_6929(%var_6924: bool, %var_6925: Tensor[(4, 8, 9), bool]) -> Tensor[(4, 8, 9), bool] {
  %407 = cast(%var_6924, dtype="bool") /* ty=bool */;
  %408 = cast(%var_6925, dtype="bool") /* ty=Tensor[(4, 8, 9), bool] */;
  logical_and(%407, %408) /* ty=Tensor[(4, 8, 9), bool] */
}

def @func_2237() -> Tensor[(13, 10, 3), bool] {
  %409 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %409.0
}

def @func_1365() -> (Tensor[(13, 10, 3), bool],) {
  %410 = @func_1305() /* ty=Tensor[(13, 10, 3), bool] */;
  (%410,)
}

def @func_8397(%var_8366: Tensor[(660, 1), bool]) -> (Tensor[(13, 10, 3), float32], Tensor[(11, 10, 6), float32], Tensor[(660, 1), bool]) {
  %411 = @func_5757() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %412 = cast(%var_8366, dtype="bool") /* ty=Tensor[(660, 1), bool] */;
  %413 = reshape(%412, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), bool] */;
  %414 = @func_7606(%413) /* ty=(Tensor[(11, 10, 6), int8], Tensor[(11, 10, 6), float32]) */;
  %415 = %411.0;
  %416 = %414.1;
  (%415, %416, %var_8366)
}

def @func_3783() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %417 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %418 = %417.0;
  %419 = @func_1764() /* ty=Tensor[(36), int16] */;
  (%418, %419)
}

def @func_1823() -> Tensor[(13, 10, 3), bool] {
  %420 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %420.1
}

def @func_7333() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %421 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %422 = %421.0;
  %423 = @func_3204() /* ty=Tensor[(36), int16] */;
  (%422, %423)
}

def @func_8302(%var_8291: Tensor[(154, 1), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154, 1), uint16]) {
  %424 = @func_6668() /* ty=(Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %425 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %426 = cast(meta[relay.Constant][17] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %427 = cast(%var_8291, dtype="uint16") /* ty=Tensor[(154, 1), uint16] */;
  %428 = reshape(%426, newshape=[]) /* ty=uint16 */;
  %429 = reshape(%427, newshape=[154]) /* ty=Tensor[(154), uint16] */;
  %430 = @func_7363(%428, %429) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], uint16, Tensor[(154), uint16]) */;
  %431 = %424.3;
  %432 = %425.0;
  %433 = %430.3;
  (%431, %432, %433, meta[relay.Constant][17] /* ty=uint16 */, %var_8291)
}

def @func_2404() -> Tensor[(13, 10, 3), bool] {
  @func_490() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_1759() -> Tensor[(13, 10, 3), bool] {
  %434 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %434.0
}

def @func_3623() -> (Tensor[(13, 10, 3), bool], Tensor[(400), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %435 = cast(2.9559f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %436 = cast(meta[relay.Constant][18] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %437 = reshape(%435, newshape=[]) /* ty=float64 */;
  %438 = reshape(%436, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), float64] */;
  %439 = @func_1983(%437, %438) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) */;
  %440 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
  %441 = cast(%440, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %442 = asin(%441) /* ty=Tensor[(13, 10, 3), float64] */;
  %443 = cast(%442, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %444 = cast(2.9559f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %445 = %439.1;
  %446 = not_equal(%443, %444) /* ty=Tensor[(13, 10, 3), bool] */;
  %447 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
  (%445, meta[relay.Constant][18] /* ty=Tensor[(400), float64] */, %446, %447)
}

def @func_9975() -> (Tensor[(13, 10, 3), bool],) {
  %448 = @func_5660() /* ty=Tensor[(13, 10, 3), bool] */;
  (%448,)
}

def @func_5319(%var_5311: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240, 1), float64]) {
  %449 = @func_2584() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %450 = cast(%var_5311, dtype="float64") /* ty=float64 */;
  %451 = cast(meta[relay.Constant][19] /* ty=Tensor[(240, 1), float64] */, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %452 = reshape(%450, newshape=[]) /* ty=float64 */;
  %453 = reshape(%451, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %454 = @func_4558(%452, %453) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240), float64]) */;
  %455 = %449.0;
  %456 = %454.0;
  (%455, %456, %var_5311, meta[relay.Constant][19] /* ty=Tensor[(240, 1), float64] */)
}

def @func_1736() -> (Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  %457 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
  %458 = cast(%457, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
  %459 = reshape(%458, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
  %460 = @func_1638(%459) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
  %461 = cast(meta[relay.Constant][20] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
  %462 = %460.0;
  %463 = cast(%462, dtype="int16") /* ty=Tensor[(252), int16] */;
  %464 = reshape(%461, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), int16] */;
  %465 = reshape(%463, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int16] */;
  %466 = @func_53(%464, %465) /* ty=(Tensor[(6, 7, 6), int16],) */;
  %467 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %468 = %466.0;
  %469 = %467.1;
  (%457, %462, %468, meta[relay.Constant][20] /* ty=Tensor[(36), int16] */, %469)
}

def @func_4123() -> Tensor[(13, 10, 3), bool] {
  %470 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %470.0
}

def @func_2193(%var_2184: uint16, %var_2185: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154), uint16]) {
  %471 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %472 = cast(%var_2184, dtype="uint16") /* ty=uint16 */;
  %473 = cast(%var_2185, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %474 = reshape(%472, newshape=[]) /* ty=uint16 */;
  %475 = reshape(%473, newshape=[154]) /* ty=Tensor[(154), uint16] */;
  %476 = @func_1198(%474, %475) /* ty=(Tensor[(11, 1, 14), uint16], Tensor[(154), uint16], Tensor[(13, 10, 3), int64]) */;
  %477 = %471.0;
  %478 = %476.1;
  (%477, %478, %var_2184, %var_2185)
}

def @func_5430() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %479 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %480 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
  %481 = %479.0;
  (%480, %481)
}

def @func_4473() -> (Tensor[(13, 10, 3), float32],) {
  %482 = @func_2278() /* ty=Tensor[(13, 10, 3), float32] */;
  (%482,)
}

def @func_9849(%var_9809: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(11, 1, 14), uint16], uint16, Tensor[(154), uint16], Tensor[(13, 10, 3), bool], Tensor[(768), bool], float64, Tensor[(240), float64]) {
  %483 = @func_4103() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %484 = cast(meta[relay.Constant][21] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %485 = cast(%var_9809, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %486 = reshape(%484, newshape=[]) /* ty=uint16 */;
  %487 = reshape(%485, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), uint16] */;
  %488 = @func_1076(%486, %487) /* ty=(Tensor[(11, 1, 14), uint16],) */;
  %489 = cast(meta[relay.Constant][21] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %490 = reshape(%489, newshape=[]) /* ty=float64 */;
  %491 = @func_5319(%490) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240, 1), float64]) */;
  %492 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %493 = reshape(%492, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %494 = @func_9160(%493) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) */;
  %495 = %494.2;
  %496 = cast(%495, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %497 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(768), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %498 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?), bool] */;
  %500 = cast(meta[relay.Constant][21] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %501 = cast(meta[relay.Constant][23] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %502 = reshape(%500, newshape=[]) /* ty=float64 */;
  %503 = reshape(%501, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %504 = @func_4054(%502, %503) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */;
  %505 = %483.0;
  %506 = %488.0;
  %507 = %491.1;
  %508 = less_equal(%498, %499) /* ty=Tensor[(768), bool] */;
  %509 = %504.2;
  (%505, %506, meta[relay.Constant][21] /* ty=uint16 */, %var_9809, %507, %508, %509, meta[relay.Constant][23] /* ty=Tensor[(240), float64] */)
}

def @func_3457() -> (Tensor[(13, 10, 3), bool],) {
  %510 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %511 = %510.0;
  (%511,)
}

def @func_6150() -> (Tensor[(252), int16],) {
  %512 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
  %513 = %512.1;
  (%513,)
}

def @func_596() -> Tensor[(13, 10, 3), bool] {
  @func_490() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_2848() -> Tensor[(13, 10, 3), bool] {
  @func_596() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_4215(%var_4202: Tensor[(16, 2, 15), float64]) -> (Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float64]) {
  %514 = cast(%var_4202, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %515 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(16, 2, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %518 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %519 = maximum(%516, %517) /* ty=Tensor[(16, 2, 15), float64] */;
  %520 = asin(%518) /* ty=Tensor[(16, 2, 15), float64] */;
  (%519, %520)
}

def @func_10643() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %521 = @func_10092() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %522 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %523 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %524 = %521.0;
  %525 = %522.0;
  %526 = %523.0;
  (%524, %525, %526)
}

def @func_6210(%var_6200: Tensor[(8, 1430), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(11, 10, 13), bool], Tensor[(252), int16], Tensor[(8, 1430), bool]) {
  %527 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %528 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1430), float64] */, dtype="float64") /* ty=Tensor[(1, 1430), float64] */;
  %529 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1430), float64] */, dtype="float64") /* ty=Tensor[(1, 1430), float64] */;
  %530 = reshape(%528, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float64] */;
  %531 = reshape(%529, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float64] */;
  %532 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
  %533 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 1430), float64] */, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %534 = cast(%var_6200, dtype="bool") /* ty=Tensor[(8, 1430), bool] */;
  %535 = %527.1;
  %536 = @func_4982(%530, %531) /* ty=Tensor[(11, 10, 13), bool] */;
  %537 = %532.1;
  %538 = greater(%533, %534) /* ty=Tensor[(8, 1430), bool] */;
  (%535, %536, %537, %538)
}

def @func_1850() -> Tensor[(13, 10, 3), bool] {
  %539 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %539.0
}

def @func_9436() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %540 = @func_1949() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) */;
  %541 = @func_8994() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %542 = %540.0;
  %543 = %541.0;
  (%542, %543)
}

def @func_1468() -> Tensor[(13, 10, 3), bool] {
  %544 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %544.0
}

def @func_5539() -> (Tensor[(252), int16], Tensor[(13, 10, 3), uint32], Tensor[(390), int8]) {
  %545 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %546 = cast(meta[relay.Constant][26] /* ty=Tensor[(390), int8] */, dtype="int8") /* ty=Tensor[(390), int8] */;
  %547 = reshape(%546, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
  %548 = @func_1638(%547) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
  %549 = %545.4;
  %550 = %548.2;
  (%549, %550, meta[relay.Constant][26] /* ty=Tensor[(390), int8] */)
}

def @func_1764() -> Tensor[(36), int16] {
  %551 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %551.3
}

def @func_1394() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %552 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %553 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %554 = @func_776() /* ty=Tensor[(13, 10, 3), bool] */;
  %555 = %552.1;
  %556 = %553.0;
  (%554, %555, %556)
}

def @func_6921() -> (Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8]) {
  %557 = @func_3433() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %558 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
  %559 = %557.0;
  %560 = %558.0;
  (%559, %560)
}

def @func_2278() -> Tensor[(13, 10, 3), float32] {
  %561 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  sinh(%563) /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_7801() -> Tensor[(13, 10, 3), bool] {
  @func_1960() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_7538() -> Tensor[(13, 10, 3), bool] {
  @func_4123() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_9510() -> Tensor[(13, 10, 3), bool] {
  @func_7538() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_7280(%var_7250: Tensor[(144), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(3, 6, 8), float64], Tensor[(144), float64]) {
  %564 = @func_7134() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %565 = cast(%var_7250, dtype="float64") /* ty=Tensor[(144), float64] */;
  %566 = reshape(%565, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float64] */;
  %567 = %564.0;
  %568 = @func_4930(%566) /* ty=Tensor[(3, 6, 8), float64] */;
  (%567, %568, %var_7250)
}

def @func_5131() -> (Tensor[(13, 10, 3), bool],) {
  %569 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %570 = %569.1;
  (%570,)
}

def @func_9160(%var_9158: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) {
  %571 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %572 = @func_9123() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %573 = cast(%var_9158, dtype="bool") /* ty=Tensor[(768), bool] */;
  %574 = reshape(%573, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %575 = @func_3419(%574) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) */;
  %576 = %571.0;
  %577 = %572.3;
  %578 = %575.1;
  (%576, %577, %578, %var_9158)
}

def @func_8680(%var_8672: Tensor[(1, 4, 5), float64], %var_8673: Tensor[(3, 4, 5), float64]) -> Tensor[(3, 4, 5), float64] {
  %579 = cast(%var_8672, dtype="float64") /* ty=Tensor[(1, 4, 5), float64] */;
  %580 = cast(%var_8673, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  power(%579, %580) /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_9757() -> Tensor[(13, 10, 3), bool] {
  @func_7467() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_4647() -> Tensor[(13, 10, 3), bool] {
  %581 = @func_2122() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %581.1
}

def @func_1142() -> (Tensor[(13, 10, 3), bool],) {
  %582 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  (%582,)
}

def @func_10891() -> (Tensor[(13, 10, 3), bool],) {
  %583 = @func_9459() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %584 = %583.0;
  (%584,)
}

def @func_8898(%var_8886: Tensor[(3, 10, 14), float64]) -> (Tensor[(3, 10, 14), float64],) {
  %585 = cast(%var_8886, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
  %586 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(3, 10, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %589 = mod(%587, %588) /* ty=Tensor[(3, 10, 14), float64] */;
  (%589,)
}

def @func_10283(%var_10273: Tensor[(2, 2, 12), int8], %var_10274: Tensor[(2, 2, 12), int8]) -> (Tensor[(2, 2, 12), bool],) {
  %590 = cast(%var_10274, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %591 = shape_of(%var_10273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%var_10273, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = greater(%592, %593) /* ty=Tensor[(2, 2, 12), bool] */;
  (%594,)
}

def @func_1000(%var_991: Tensor[(13, 9, 14), uint8], %var_992: Tensor[(13, 9, 14), uint8]) -> (Tensor[(13, 9, 14), bool],) {
  %595 = cast(%var_992, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %596 = shape_of(%var_991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%var_991, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = less_equal(%597, %598) /* ty=Tensor[(13, 9, 14), bool] */;
  (%599,)
}

def @func_4285(%var_4272: int64, %var_4273: Tensor[(5, 5, 4), int64]) -> Tensor[(5, 5, 4), int64] {
  %600 = cast(%var_4272, dtype="int64") /* ty=int64 */;
  %601 = cast(%var_4273, dtype="int64") /* ty=Tensor[(5, 5, 4), int64] */;
  right_shift(%600, %601) /* ty=Tensor[(5, 5, 4), int64] */
}

def @func_10321() -> Tensor[(13, 10, 3), bool] {
  %602 = @func_8709() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %602.0
}

def @func_5757() -> (Tensor[(13, 10, 3), float32],) {
  %603 = @func_4473() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %604 = %603.0;
  (%604,)
}

def @func_10755() -> Tensor[(13, 10, 3), bool] {
  @func_490() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5395() -> (Tensor[(3, 11, 13), int8],) {
  %605 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 13), float64] */;
  %606 = acos(%605) /* ty=Tensor[(3, 11, 13), float64] */;
  %607 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 13), float64] */, dtype="int8") /* ty=Tensor[(3, 11, 13), int8] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="int8") /* ty=Tensor[(3, 11, 13), int8] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %611 = add(%609, %610) /* ty=Tensor[(3, 11, 13), int8] */;
  (%611,)
}

def @func_10982(%var_10947: Tensor[(60), float64], %var_10953: Tensor[(3, 4, 5), float64]) -> (Tensor[(36), int16], Tensor[(20), float64], Tensor[(60), float64], Tensor[(3, 4, 5), float32]) {
  %612 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %613 = cast(meta[relay.Constant][30] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %614 = cast(%var_10947, dtype="float64") /* ty=Tensor[(60), float64] */;
  %615 = reshape(%613, newshape=[1, 4, 5]) /* ty=Tensor[(1, 4, 5), float64] */;
  %616 = reshape(%614, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %617 = @func_8680(%615, %616) /* ty=Tensor[(3, 4, 5), float64] */;
  %618 = cast(%var_10953, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %622 = %612.3;
  %623 = minimum(%620, %621) /* ty=Tensor[(3, 4, 5), float32] */;
  (%622, meta[relay.Constant][30] /* ty=Tensor[(20), float64] */, %var_10947, %623)
}

def @func_9987() -> Tensor[(13, 10, 3), float32] {
  @func_3082() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_2923(%var_2905: Tensor[(11, 13, 16), float64]) -> (Tensor[(11, 13, 16), float64], Tensor[(13, 10, 3), bool]) {
  %624 = cast(%var_2905, dtype="float64") /* ty=Tensor[(11, 13, 16), float64] */;
  %625 = sin(%624) /* ty=Tensor[(11, 13, 16), float64] */;
  %626 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
  (%625, %626)
}

def @func_9633() -> (Tensor[(13, 10, 3), bool], Tensor[(5, 11, 11), bool], Tensor[(13, 10, 3), bool]) {
  %627 = cast(meta[relay.Constant][31] /* ty=Tensor[(605), bool] */, dtype="bool") /* ty=Tensor[(605), bool] */;
  %628 = cast(meta[relay.Constant][31] /* ty=Tensor[(605), bool] */, dtype="bool") /* ty=Tensor[(605), bool] */;
  %629 = reshape(%627, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), bool] */;
  %630 = reshape(%628, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), bool] */;
  %631 = @func_8089(%629, %630) /* ty=(Tensor[(5, 11, 11), float32],) */;
  %632 = %631.0;
  %633 = cast(meta[relay.Constant][31] /* ty=Tensor[(605), bool] */, dtype="bool") /* ty=Tensor[(605), bool] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %637 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
  %638 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
  %639 = greater_equal(%635, %636) /* ty=Tensor[(5, 11, 11), bool] */;
  %640 = %637.2;
  (%638, %639, %640)
}

def @func_6705() -> (Tensor[(36), int16],) {
  %641 = @func_1764() /* ty=Tensor[(36), int16] */;
  (%641,)
}

def @func_527() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %642 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
  %643 = @func_443() /* ty=Tensor[(13, 10, 3), bool] */;
  (%642, %643)
}

def @func_3066() -> Tensor[(13, 10, 3), bool] {
  %644 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %644.1
}

def @func_2781() -> (Tensor[(12, 2, 9), int8], Tensor[(252), int16]) {
  %645 = @func_2307() /* ty=(Tensor[(12, 2, 9), float32],) */;
  %646 = %645.0;
  %647 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 2, 9), float32] */, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %651 = @func_1894() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), bool]) */;
  %652 = left_shift(%649, %650) /* ty=Tensor[(12, 2, 9), int8] */;
  %653 = %651.0;
  (%652, %653)
}

def @func_4435() -> (Tensor[(13, 10, 3), bool],) {
  %654 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
  (%654,)
}

def @func_6464() -> (Tensor[(13, 10, 3), bool],) {
  %655 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %656 = %655.1;
  (%656,)
}

def @func_4103() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %657 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %658 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  (%657, %658)
}

def @func_1232() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %659 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %660 = %659.0;
  %661 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  (%660, %661)
}

def @func_3005() -> (Tensor[(252), int16], Tensor[(13, 10, 3), int32]) {
  %662 = @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %663 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %664 = %663.0;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %666 = atanh(%665) /* ty=Tensor[(13, 10, 3), float64] */;
  %667 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %668 = cast(%667, dtype="int32") /* ty=Tensor[(13, 10, 3), int32] */;
  %669 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%666, dtype="int32") /* ty=Tensor[(13, 10, 3), int32] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %672 = %662.1;
  %673 = maximum(%670, %671) /* ty=Tensor[(13, 10, 3), int32] */;
  (%672, %673)
}

def @func_6596() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %674 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %675 = @func_1468() /* ty=Tensor[(13, 10, 3), bool] */;
  %676 = %674.0;
  %677 = @func_2237() /* ty=Tensor[(13, 10, 3), bool] */;
  (%675, %676, %677)
}

def @func_8111() -> (Tensor[(13, 10, 3), float32], Tensor[(12, 15, 3), bool], Tensor[(540), int64]) {
  %678 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %679 = cast(meta[relay.Constant][33] /* ty=Tensor[(540), int64] */, dtype="int64") /* ty=Tensor[(540), int64] */;
  %680 = reshape(%679, newshape=[12, 15, 3]) /* ty=Tensor[(12, 15, 3), int64] */;
  %681 = %678.1;
  %682 = @func_7194(%680) /* ty=Tensor[(12, 15, 3), bool] */;
  (%681, %682, meta[relay.Constant][33] /* ty=Tensor[(540), int64] */)
}

def @func_10868() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %683 = @func_7860() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %684 = %683.0;
  %685 = @func_10344() /* ty=Tensor[(13, 10, 3), bool] */;
  (%684, %685)
}

def @func_3481() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %686 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %687 = %686.0;
  %688 = @func_3204() /* ty=Tensor[(36), int16] */;
  (%687, %688)
}

def @func_796(%var_782: Tensor[(3, 16, 4), float64], %var_783: Tensor[(3, 16, 4), float64]) -> (Tensor[(3, 16, 4), float64], Tensor[(13, 10, 3), bool]) {
  %689 = cast(%var_783, dtype="float64") /* ty=Tensor[(3, 16, 4), float64] */;
  %690 = shape_of(%var_782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_782, dtype="float64") /* ty=Tensor[(3, 16, 4), float64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %693 = floor_divide(%691, %692) /* ty=Tensor[(3, 16, 4), float64] */;
  %694 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  (%693, %694)
}

def @func_8009() -> Tensor[(13, 10, 3), bool] {
  %695 = @func_6596() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %695.2
}

def @func_1305() -> Tensor[(13, 10, 3), bool] {
  %696 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %696.0
}

def @func_5052(%var_5017: Tensor[(13, 2, 5), uint8]) -> (Tensor[(13, 2, 5), uint8], Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(13, 10, 3), bool]) {
  %697 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 2, 5), uint8] */, dtype="uint8") /* ty=Tensor[(13, 2, 5), uint8] */;
  %698 = shape_of(%var_5017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%var_5017, dtype="uint8") /* ty=Tensor[(13, 2, 5), uint8] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %701 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %702 = @func_1894() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), bool]) */;
  %703 = maximum(%699, %700) /* ty=Tensor[(13, 2, 5), uint8] */;
  %704 = %701.0;
  %705 = %702.0;
  %706 = @func_4647() /* ty=Tensor[(13, 10, 3), bool] */;
  (%703, %704, %705, %706)
}

def @func_5646() -> Tensor[(13, 10, 3), bool] {
  @func_1850() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_4982(%var_4977: Tensor[(11, 10, 13), float64], %var_4978: Tensor[(11, 10, 13), float64]) -> Tensor[(11, 10, 13), bool] {
  %707 = cast(%var_4978, dtype="bool") /* ty=Tensor[(11, 10, 13), bool] */;
  %708 = shape_of(%var_4977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%var_4977, dtype="bool") /* ty=Tensor[(11, 10, 13), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%709, %710) /* ty=Tensor[(11, 10, 13), bool] */
}

def @func_8089(%var_8075: Tensor[(5, 11, 11), bool], %var_8076: Tensor[(5, 11, 11), bool]) -> (Tensor[(5, 11, 11), float32],) {
  %711 = cast(%var_8076, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %712 = shape_of(%var_8075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%var_8075, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %715 = logical_and(%713, %714) /* ty=Tensor[(5, 11, 11), bool] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
  %717 = sin(%716) /* ty=Tensor[(5, 11, 11), float32] */;
  (%717,)
}

def @func_9338(%var_9323: Tensor[(4, 15, 14), float64], %var_9324: Tensor[(4, 15, 14), float64]) -> (Tensor[(4, 15, 14), float64], Tensor[(4, 15, 14), float32]) {
  %718 = cast(%var_9324, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
  %719 = shape_of(%var_9323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%var_9323, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %722 = cast(%var_9324, dtype="float32") /* ty=Tensor[(4, 15, 14), float32] */;
  %723 = mod(%720, %721) /* ty=Tensor[(4, 15, 14), float64] */;
  %724 = erf(%722) /* ty=Tensor[(4, 15, 14), float32] */;
  (%723, %724)
}

def @func_10267() -> (Tensor[(13, 10, 3), float32],) {
  %725 = @func_8499() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %726 = %725.0;
  (%726,)
}

def @func_10440() -> Tensor[(13, 10, 3), bool] {
  %727 = @func_5131() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %727.0
}

def @func_10689(%var_10686: Tensor[(10, 15, 2), float32]) -> (Tensor[(10, 15, 2), float32],) {
  %728 = cast(%var_10686, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  %729 = atanh(%728) /* ty=Tensor[(10, 15, 2), float32] */;
  (%729,)
}

def @func_11102(%var_11056: Tensor[(216), int8]) -> (Tensor[(5, 12), float64], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), float32]) {
  %730 = @func_5886() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) */;
  %731 = cast(%var_11056, dtype="int8") /* ty=Tensor[(216), int8] */;
  %732 = reshape(%731, newshape=[12, 2, 9]) /* ty=Tensor[(12, 2, 9), int8] */;
  %733 = @func_10539(%732) /* ty=(Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %734 = %733.3;
  %735 = cast(%var_11056, dtype="int8") /* ty=Tensor[(216), int8] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %739 = %730.1;
  %740 = subtract(%737, %738) /* ty=Tensor[(12, 2, 9), int8] */;
  %741 = @func_3082() /* ty=Tensor[(13, 10, 3), float32] */;
  (%739, %740, %741)
}

def @func_4889() -> (Tensor[(13, 10, 3), bool],) {
  %742 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  (%742,)
}

def @func_6342(%var_6325: Tensor[(1, 4, 14), uint16], %var_6326: Tensor[(1, 4, 14), uint16]) -> (Tensor[(?, 4, 14), uint16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(1, 4, 14), float64]) {
  %743 = cast(%var_6326, dtype="uint16") /* ty=Tensor[(1, 4, 14), uint16] */;
  %744 = shape_of(%var_6325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%var_6325, dtype="uint16") /* ty=Tensor[(1, 4, 14), uint16] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %747 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
  %748 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
  %749 = cast(%var_6326, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %750 = minimum(%745, %746) /* ty=Tensor[(?, 4, 14), uint16] */;
  %751 = %747.2;
  %752 = %748.1;
  %753 = log2(%749) /* ty=Tensor[(1, 4, 14), float64] */;
  (%750, %751, %752, %753)
}

def @func_2213() -> Tensor[(13, 10, 3), bool] {
  @func_566() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_1198(%var_1184: uint16, %var_1185: Tensor[(154), uint16]) -> (Tensor[(11, 1, 14), uint16], Tensor[(154), uint16], Tensor[(13, 10, 3), int64]) {
  %754 = cast(%var_1184, dtype="uint16") /* ty=uint16 */;
  %755 = cast(%var_1185, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %756 = reshape(%754, newshape=[]) /* ty=uint16 */;
  %757 = reshape(%755, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), uint16] */;
  %758 = @func_1076(%756, %757) /* ty=(Tensor[(11, 1, 14), uint16],) */;
  %759 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %760 = %759.0;
  %761 = cast(%var_1184, dtype="int64") /* ty=int64 */;
  %762 = cast(%760, dtype="int64") /* ty=Tensor[(13, 10, 3), int64] */;
  %763 = %758.0;
  %764 = add(%761, %762) /* ty=Tensor[(13, 10, 3), int64] */;
  (%763, %var_1185, %764)
}

def @func_7134() -> (Tensor[(13, 10, 3), bool],) {
  %765 = @func_1804() /* ty=Tensor[(13, 10, 3), bool] */;
  (%765,)
}

def @func_3125() -> (Tensor[(5, 12), float64], Tensor[(390), float64]) {
  %766 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 12), float64] */;
  %767 = cast(meta[relay.Constant][36] /* ty=Tensor[(390), bool] */, dtype="bool") /* ty=Tensor[(390), bool] */;
  %768 = reshape(%767, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), bool] */;
  %769 = @func_1264(%768) /* ty=Tensor[(13, 10, 3), float32] */;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %771 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(390), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %772 = cast(meta[relay.Constant][36] /* ty=Tensor[(390), bool] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?), float64] */;
  %774 = rsqrt(%766) /* ty=Tensor[(5, 12), float64] */;
  %775 = power(%772, %773) /* ty=Tensor[(390), float64] */;
  (%774, %775)
}

def @func_1804() -> Tensor[(13, 10, 3), bool] {
  @func_776() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_4849(%var_4836: Tensor[(13, 10, 3), bool]) -> Tensor[(13, 10, 3), uint8] {
  %776 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  %777 = cast(%var_4836, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%779, %780) /* ty=Tensor[(13, 10, 3), uint8] */
}

def @func_5339(%var_5336: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) {
  %781 = cast(%var_5336, dtype="float64") /* ty=float64 */;
  %782 = cast(meta[relay.Constant][37] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %783 = reshape(%781, newshape=[]) /* ty=float64 */;
  %784 = reshape(%782, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %785 = @func_4054(%783, %784) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */;
  %786 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  %787 = %785.1;
  (%786, %787, %var_5336, meta[relay.Constant][37] /* ty=Tensor[(240), float64] */)
}

def @func_53(%var_48: Tensor[(6, 1, 6), int16], %var_49: Tensor[(6, 7, 6), int16]) -> (Tensor[(6, 7, 6), int16],) {
  %788 = cast(%var_48, dtype="int16") /* ty=Tensor[(6, 1, 6), int16] */;
  %789 = cast(%var_49, dtype="int16") /* ty=Tensor[(6, 7, 6), int16] */;
  %790 = bitwise_xor(%788, %789) /* ty=Tensor[(6, 7, 6), int16] */;
  (%790,)
}

def @func_11332(%var_11309: Tensor[(4, 12, 8), float64], %var_11317: Tensor[(4, 12, 8), float64]) -> (Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), float32]) {
  %791 = cast(%var_11309, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
  %792 = cast(%var_11317, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %793 = shape_of(%var_11309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_11309, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %796 = sigmoid(%791) /* ty=Tensor[(4, 12, 8), float64] */;
  %797 = floor_mod(%794, %795) /* ty=Tensor[(4, 12, 8), float32] */;
  (%796, %797)
}

def @func_5886() -> (Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) {
  %798 = @func_3623() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(400), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %799 = @func_3125() /* ty=(Tensor[(5, 12), float64], Tensor[(390), float64]) */;
  %800 = %798.2;
  %801 = %799.0;
  %802 = @func_1823() /* ty=Tensor[(13, 10, 3), bool] */;
  (%800, %801, %802)
}

def @func_8920(%var_8902: Tensor[(13, 1, 9), uint16], %var_8903: Tensor[(13, 6, 9), uint16]) -> (Tensor[(13, 6, 9), bool], Tensor[(13, 10, 3), bool]) {
  %803 = cast(%var_8902, dtype="bool") /* ty=Tensor[(13, 1, 9), bool] */;
  %804 = cast(%var_8903, dtype="bool") /* ty=Tensor[(13, 6, 9), bool] */;
  %805 = @func_5430() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %806 = equal(%803, %804) /* ty=Tensor[(13, 6, 9), bool] */;
  %807 = %805.0;
  (%806, %807)
}

def @func_11512() -> (Tensor[(13, 10, 3), bool],) {
  %808 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %809 = %808.0;
  (%809,)
}

def @func_3854(%var_3833: Tensor[(252), int16]) -> Tensor[(252), int16] {
  %810 = @func_3005() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), int32]) */;
  %811 = %810.0;
  %812 = cast(%var_3833, dtype="int16") /* ty=Tensor[(252), int16] */;
  %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(1), int32] */;
  %814 = cast(%811, dtype="int16") /* ty=Tensor[(252), int16] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?), int16] */;
  bitwise_and(%814, %815) /* ty=Tensor[(252), int16] */
}

def @func_10841() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %816 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %817 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %818 = %816.0;
  %819 = %817.0;
  (%818, %819)
}

def @func_7860() -> (Tensor[(13, 10, 3), bool],) {
  %820 = @func_3433() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %821 = %820.0;
  (%821,)
}

def @func_3670() -> Tensor[(13, 10, 3), bool] {
  @func_1305() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_2584() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %822 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %823 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %824 = %822.0;
  %825 = %823.0;
  (%824, %825)
}

def @func_1752() -> Tensor[(13, 10, 3), float32] {
  %826 = @func_1350() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %826.0
}

def @func_443() -> Tensor[(13, 10, 3), bool] {
  %827 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %827.0
}

def @func_4531() -> (Tensor[(13, 10, 3), bool],) {
  %828 = @func_3317() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %829 = %828.1;
  (%829,)
}

def @func_6668() -> (Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %830 = @func_5586() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %831 = @func_5507() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), bool]) */;
  %832 = @func_3204() /* ty=Tensor[(36), int16] */;
  %833 = %830.0;
  %834 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
  %835 = %831.0;
  (%832, %833, %834, %835)
}

def @func_6049(%var_6005: Tensor[(15, 9, 15), float64], %var_6006: Tensor[(15, 9, 15), float64], %var_6041: uint16) -> (Tensor[(11, 1, 14), uint16], uint16, Tensor[(154, 1), uint16], Tensor[(13, 10, 3), bool], Tensor[(15, 9, 15), float64]) {
  %836 = cast(%var_6041, dtype="uint16") /* ty=uint16 */;
  %837 = cast(meta[relay.Constant][38] /* ty=Tensor[(154, 1), uint16] */, dtype="uint16") /* ty=Tensor[(154, 1), uint16] */;
  %838 = reshape(%836, newshape=[]) /* ty=uint16 */;
  %839 = reshape(%837, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), uint16] */;
  %840 = @func_1076(%838, %839) /* ty=(Tensor[(11, 1, 14), uint16],) */;
  %841 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %842 = cast(%var_6005, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %843 = cos(%842) /* ty=Tensor[(15, 9, 15), float64] */;
  %844 = cast(%var_6006, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %845 = shape_of(%var_6005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%var_6005, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %848 = floor_divide(%846, %847) /* ty=Tensor[(15, 9, 15), float64] */;
  %849 = cast(%848, dtype="uint8") /* ty=Tensor[(15, 9, 15), uint8] */;
  %850 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%843, dtype="uint8") /* ty=Tensor[(15, 9, 15), uint8] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %853 = subtract(%851, %852) /* ty=Tensor[(15, 9, 15), uint8] */;
  %854 = cast(%853, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %855 = acos(%854) /* ty=Tensor[(15, 9, 15), float32] */;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %857 = %840.0;
  %858 = %841.1;
  %859 = exp(%856) /* ty=Tensor[(15, 9, 15), float64] */;
  (%857, %var_6041, meta[relay.Constant][38] /* ty=Tensor[(154, 1), uint16] */, %858, %859)
}

def @func_11243() -> (Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  %860 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %861 = %860.0;
  %862 = @func_4638() /* ty=Tensor[(13, 10, 3), bool] */;
  (%861, %862)
}

def @func_11418() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %863 = @func_4889() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %864 = @func_7538() /* ty=Tensor[(13, 10, 3), bool] */;
  %865 = @func_1823() /* ty=Tensor[(13, 10, 3), bool] */;
  %866 = %863.0;
  (%864, %865, %866)
}

def @func_10580(%var_10567: Tensor[(2, 8, 13), float64], %var_10568: Tensor[(2, 8, 13), float64]) -> (Tensor[(2, 8, 13), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %867 = cast(%var_10568, dtype="float64") /* ty=Tensor[(2, 8, 13), float64] */;
  %868 = shape_of(%var_10567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%var_10567, dtype="float64") /* ty=Tensor[(2, 8, 13), float64] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %871 = @func_7967() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %872 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %873 = floor_mod(%869, %870) /* ty=Tensor[(2, 8, 13), float64] */;
  %874 = %871.0;
  %875 = %872.0;
  (%873, %874, %875)
}

def @func_1128() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %876 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %877 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
  %878 = %876.0;
  (%877, %878)
}

def @func_3866(%var_3859: Tensor[(4, 2, 5), uint32]) -> (Tensor[(4, 2, 5), uint32], Tensor[(13, 10, 3), bool]) {
  %879 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %880 = cast(%var_3859, dtype="uint32") /* ty=Tensor[(4, 2, 5), uint32] */;
  %881 = right_shift(%879, %880) /* ty=Tensor[(4, 2, 5), uint32] */;
  %882 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
  (%881, %882)
}

def @func_2012() -> (Tensor[(12, 2, 9), float32], Tensor[(12, 2, 9), float32]) {
  %883 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %884 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(12, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %887 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %888 = power(%885, %886) /* ty=Tensor[(12, 2, 9), float32] */;
  %889 = erf(%887) /* ty=Tensor[(12, 2, 9), float32] */;
  (%888, %889)
}

def @func_8240() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %890 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %891 = %890.0;
  %892 = @func_2404() /* ty=Tensor[(13, 10, 3), bool] */;
  (%891, %892)
}

def @func_850() -> (Tensor[(13, 10, 3), bool],) {
  %893 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %894 = %893.0;
  (%894,)
}

def @func_3654() -> (Tensor[(6, 7, 6), int16], Tensor[(12, 2, 9), float32]) {
  %895 = @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %896 = @func_2307() /* ty=(Tensor[(12, 2, 9), float32],) */;
  %897 = %895.2;
  %898 = %896.0;
  (%897, %898)
}

def @func_6514(%var_6506: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) {
  %899 = cast(%var_6506, dtype="float64") /* ty=float64 */;
  %900 = cast(meta[relay.Constant][42] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
  %901 = reshape(%899, newshape=[]) /* ty=float64 */;
  %902 = reshape(%900, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), float64] */;
  %903 = @func_1983(%901, %902) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) */;
  %904 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
  %905 = %903.0;
  (%904, %905, %var_6506, meta[relay.Constant][42] /* ty=Tensor[(400), float64] */)
}

def @func_8330() -> Tensor[(13, 10, 3), bool] {
  %906 = @func_7134() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %906.0
}

def @func_1960() -> Tensor[(13, 10, 3), bool] {
  %907 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %907.1
}

def @func_3082() -> Tensor[(13, 10, 3), float32] {
  %908 = @func_1350() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %908.0
}

def @func_3733(%var_3675: float64, %var_3676: Tensor[(15, 8, 2), float64]) -> (Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) {
  %909 = cast(%var_3675, dtype="float64") /* ty=float64 */;
  %910 = cast(%var_3676, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %911 = cast(%var_3676, dtype="uint64") /* ty=Tensor[(15, 8, 2), uint64] */;
  %912 = cast(%var_3675, dtype="uint64") /* ty=uint64 */;
  %913 = @func_3005() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), int32]) */;
  %914 = floor_divide(%909, %910) /* ty=Tensor[(15, 8, 2), float64] */;
  %915 = logical_xor(%911, %912) /* ty=Tensor[(15, 8, 2), uint64] */;
  %916 = @func_776() /* ty=Tensor[(13, 10, 3), bool] */;
  %917 = @func_1850() /* ty=Tensor[(13, 10, 3), bool] */;
  %918 = %913.1;
  %919 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  (%914, %915, %916, %917, %918, %919)
}

def @func_9292() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %920 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %921 = @func_5886() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) */;
  %922 = %920.0;
  %923 = %921.0;
  (%922, %923)
}

def @func_2856() -> (Tensor[(13, 10, 3), bool],) {
  %924 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%924,)
}

def @func_10352() -> Tensor[(13, 10, 3), bool] {
  %925 = @func_8709() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %925.0
}

def @func_7467() -> Tensor[(13, 10, 3), bool] {
  %926 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %926.0
}

def @func_11156(%var_11153: Tensor[(216), int8]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(768), bool], Tensor[(216), int8]) {
  %927 = @func_4889() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %928 = cast(%var_11153, dtype="int8") /* ty=Tensor[(216), int8] */;
  %929 = reshape(%928, newshape=[12, 2, 9]) /* ty=Tensor[(12, 2, 9), int8] */;
  %930 = @func_10539(%929) /* ty=(Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %931 = @func_9369() /* ty=Tensor[(13, 10, 3), bool] */;
  %932 = %927.0;
  %933 = %930.4;
  (%931, %932, %933, %var_11153)
}

def @func_348() -> Tensor[(13, 10, 3), bool] {
  %934 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %934.0
}

def @func_756() -> Tensor[(13, 10, 3), bool] {
  %935 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %935.1
}

def @func_8526(%var_8504: Tensor[(10, 3, 15), uint8]) -> (Tensor[(36), int16], Tensor[(10, 3, 15), uint8]) {
  %936 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %937 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 3, 15), uint8] */, dtype="bool") /* ty=Tensor[(10, 3, 15), bool] */;
  %938 = shape_of(%var_8504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%var_8504, dtype="bool") /* ty=Tensor[(10, 3, 15), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = not_equal(%939, %940) /* ty=Tensor[(10, 3, 15), bool] */;
  %942 = cast(%var_8504, dtype="uint8") /* ty=Tensor[(10, 3, 15), uint8] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%941, dtype="uint8") /* ty=Tensor[(10, 3, 15), uint8] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %946 = %936.0;
  %947 = right_shift(%944, %945) /* ty=Tensor[(10, 3, 15), uint8] */;
  (%946, %947)
}

def @func_1894() -> (Tensor[(252), int16], Tensor[(13, 10, 3), bool]) {
  %948 = @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %949 = %948.1;
  %950 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%949, %950)
}

def @func_1350() -> (Tensor[(13, 10, 3), float32],) {
  %951 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %952 = %951.0;
  %953 = cast(%952, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %954 = acos(%953) /* ty=Tensor[(13, 10, 3), float32] */;
  (%954,)
}

def @func_10344() -> Tensor[(13, 10, 3), bool] {
  @func_2404() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_9266(%var_9246: Tensor[(15, 14, 9), int32]) -> (Tensor[(15, 14, 9), bool], Tensor[(15, 14, 9), bool]) {
  %955 = cast(%var_9246, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
  %956 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(15, 14, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %959 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
  %960 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(15, 14, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %963 = not_equal(%957, %958) /* ty=Tensor[(15, 14, 9), bool] */;
  %964 = logical_and(%961, %962) /* ty=Tensor[(15, 14, 9), bool] */;
  (%963, %964)
}

def @func_4558(%var_4555: float64, %var_4556: Tensor[(240), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240), float64]) {
  %965 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %966 = cast(%var_4555, dtype="float64") /* ty=float64 */;
  %967 = cast(%var_4556, dtype="float64") /* ty=Tensor[(240), float64] */;
  %968 = reshape(%966, newshape=[]) /* ty=float64 */;
  %969 = reshape(%967, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
  %970 = @func_3733(%968, %969) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) */;
  %971 = %965.0;
  %972 = %970.2;
  (%971, %972, %var_4555, %var_4556)
}

def @func_8800() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %973 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  %974 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  %975 = @func_7801() /* ty=Tensor[(13, 10, 3), bool] */;
  %976 = @func_1305() /* ty=Tensor[(13, 10, 3), bool] */;
  (%973, %974, %975, %976)
}

def @func_291() -> Tensor[(13, 10, 3), bool] {
  %977 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %977.1
}

def @func_1055() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %978 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %979 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %980 = %978.0;
  %981 = %979.1;
  %982 = @func_443() /* ty=Tensor[(13, 10, 3), bool] */;
  (%980, %981, %982)
}

def @func_776() -> Tensor[(13, 10, 3), bool] {
  %983 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %983.1
}

def @func_7127(%var_7117: Tensor[(1, 252), int16]) -> (Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), float32], Tensor[(1, 252), int16]) {
  %984 = @func_5586() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %985 = cast(%var_7117, dtype="int16") /* ty=Tensor[(1, 252), int16] */;
  %986 = %984.0;
  %987 = cast(%986, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %988 = reshape(%985, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %989 = reshape(%987, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %990 = @func_705(%988, %989) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %991 = %990.3;
  (%986, %991, %var_7117)
}

def @func_2377() -> (Tensor[(36), int16],) {
  %992 = @func_1764() /* ty=Tensor[(36), int16] */;
  (%992,)
}

def @func_6742() -> Tensor[(13, 10, 3), bool] {
  %993 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %993.0
}

def @func_10092() -> (Tensor[(13, 10, 3), bool],) {
  %994 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%994,)
}

def @func_5586() -> (Tensor[(13, 10, 3), float32],) {
  %995 = @func_4103() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %996 = %995.1;
  %997 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 10, 3), bool] */, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %998 = shape_of(%996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %999 = cast(%996, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1001 = power(%999, %1000) /* ty=Tensor[(13, 10, 3), float32] */;
  (%1001,)
}

def @func_6296() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) {
  %1002 = @func_1949() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) */;
  %1003 = cast(-3.28126f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1004 = reshape(%1003, newshape=[]) /* ty=float64 */;
  %1005 = @func_5339(%1004) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */;
  %1006 = @func_3654() /* ty=(Tensor[(6, 7, 6), int16], Tensor[(12, 2, 9), float32]) */;
  %1007 = %1002.1;
  %1008 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
  %1009 = %1005.0;
  %1010 = %1006.0;
  (%1007, %1008, %1009, -3.28126f64 /* ty=float64 */, %1010)
}

def @func_4638() -> Tensor[(13, 10, 3), bool] {
  %1011 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %1011.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_11450() -> Tensor[(36), int16] {
  @func_11448() /* ty=Tensor[(36), int16] */
}

def @func_8241() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %3 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %0 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %1 = %0.0;
    %2 = @func_2404() /* ty=Tensor[(13, 10, 3), bool] */;
    (%1, %2)
  };
  %3() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_1754() -> Tensor[(13, 10, 3), float32] {
  @func_1752() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_5405() -> Tensor[(13, 10, 3), float32] {
  @func_5403() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_8711() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_8709() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_10267() -> (Tensor[(13, 10, 3), float32],) {
  %4 = @func_8499() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %5 = %4.0;
  (%5,)
}

def @func_1266(%var_1265: Tensor[(13, 10, 3), bool]) -> Tensor[(13, 10, 3), float32] {
  %11 = fn (%var_1257: Tensor[(13, 10, 3), bool]) -> Tensor[(13, 10, 3), float32] {
    %6 = @func_596() /* ty=Tensor[(13, 10, 3), bool] */;
    %7 = cast(%var_1257, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%6, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%9, %10) /* ty=Tensor[(13, 10, 3), float32] */
  };
  %11(%var_1265) /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_6516(%var_6515: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) {
  %19 = fn (%var_6506: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) {
    %12 = cast(%var_6506, dtype="float64") /* ty=float64 */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %14 = reshape(%12, newshape=[]) /* ty=float64 */;
    %15 = reshape(%13, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), float64] */;
    %16 = @func_1983(%14, %15) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) */;
    %17 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
    %18 = %16.0;
    (%17, %18, %var_6506, meta[relay.Constant][0] /* ty=Tensor[(400), float64] */)
  };
  %19(%var_6515) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) */
}

def @func_8952(%var_8943: Tensor[(252), int16], %var_8950: Tensor[(1, 40), uint32]) -> (Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(252), int16], Tensor[(390), float64], Tensor[(13, 10, 3), bool], Tensor[(1, 40), uint32]) {
  %20 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %21 = cast(%var_8943, dtype="int16") /* ty=Tensor[(252), int16] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %23 = reshape(%21, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %24 = reshape(%22, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %25 = @func_705(%23, %24) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %26 = cast(%var_8950, dtype="uint32") /* ty=Tensor[(1, 40), uint32] */;
  %27 = reshape(%26, newshape=[4, 2, 5]) /* ty=Tensor[(4, 2, 5), uint32] */;
  %28 = @func_3866(%27) /* ty=(Tensor[(4, 2, 5), uint32], Tensor[(13, 10, 3), bool]) */;
  %29 = %20.3;
  %30 = %25.3;
  %31 = %28.1;
  (%29, %30, %var_8943, meta[relay.Constant][1] /* ty=Tensor[(390), float64] */, %31, %var_8950)
}

def @func_8011() -> Tensor[(13, 10, 3), bool] {
  @func_8009() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_6543() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %35 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %32 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %33 = %32.1;
    %34 = @func_3826() /* ty=Tensor[(13, 10, 3), bool] */;
    (%33, %34)
  };
  %35() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_7869() -> (Tensor[(36), int16],) {
  %36 = @func_4315() /* ty=Tensor[(36), int16] */;
  (%36,)
}

def @func_4849(%var_4836: Tensor[(13, 10, 3), bool]) -> Tensor[(13, 10, 3), uint8] {
  %37 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  %38 = cast(%var_4836, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%40, %41) /* ty=Tensor[(13, 10, 3), uint8] */
}

def @func_7967() -> (Tensor[(13, 10, 3), bool],) {
  %42 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %43 = %42.0;
  (%43,)
}

def @func_11419() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %48 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %44 = @func_4889() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %45 = @func_7538() /* ty=Tensor[(13, 10, 3), bool] */;
    %46 = @func_1823() /* ty=Tensor[(13, 10, 3), bool] */;
    %47 = %44.0;
    (%45, %46, %47)
  };
  %48() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_9849(%var_9809: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(11, 1, 14), uint16], uint16, Tensor[(154), uint16], Tensor[(13, 10, 3), bool], Tensor[(768), bool], float64, Tensor[(240), float64]) {
  %49 = @func_4103() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %50 = cast(meta[relay.Constant][2] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %51 = cast(%var_9809, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %52 = reshape(%50, newshape=[]) /* ty=uint16 */;
  %53 = reshape(%51, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), uint16] */;
  %54 = @func_1076(%52, %53) /* ty=(Tensor[(11, 1, 14), uint16],) */;
  %55 = cast(meta[relay.Constant][2] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %56 = reshape(%55, newshape=[]) /* ty=float64 */;
  %57 = @func_5319(%56) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240, 1), float64]) */;
  %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %59 = reshape(%58, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %60 = @func_9160(%59) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) */;
  %61 = %60.2;
  %62 = cast(%61, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %63 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(768), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?), bool] */;
  %66 = cast(meta[relay.Constant][2] /* ty=uint16 */, dtype="float64") /* ty=float64 */;
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %68 = reshape(%66, newshape=[]) /* ty=float64 */;
  %69 = reshape(%67, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %70 = @func_4054(%68, %69) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */;
  %71 = %49.0;
  %72 = %54.0;
  %73 = %57.1;
  %74 = less_equal(%64, %65) /* ty=Tensor[(768), bool] */;
  %75 = %70.2;
  (%71, %72, meta[relay.Constant][2] /* ty=uint16 */, %var_9809, %73, %74, %75, meta[relay.Constant][4] /* ty=Tensor[(240), float64] */)
}

def @func_10286(%var_10284: Tensor[(2, 2, 12), int8], %var_10285: Tensor[(2, 2, 12), int8]) -> (Tensor[(2, 2, 12), bool],) {
  %81 = fn (%var_10273: Tensor[(2, 2, 12), int8], %var_10274: Tensor[(2, 2, 12), int8]) -> (Tensor[(2, 2, 12), bool],) {
    %76 = cast(%var_10274, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
    %77 = shape_of(%var_10273, dtype="int32") /* ty=Tensor[(3), int32] */;
    %78 = cast(%var_10273, dtype="bool") /* ty=Tensor[(2, 2, 12), bool] */;
    %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %80 = greater(%78, %79) /* ty=Tensor[(2, 2, 12), bool] */;
    (%80,)
  };
  %81(%var_10284, %var_10285) /* ty=(Tensor[(2, 2, 12), bool],) */
}

def @func_7861() -> (Tensor[(13, 10, 3), bool],) {
  %84 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %82 = @func_3433() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %83 = %82.0;
    (%83,)
  };
  %84() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_8304(%var_8303: Tensor[(154, 1), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154, 1), uint16]) {
  %95 = fn (%var_8291: Tensor[(154, 1), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154, 1), uint16]) {
    %85 = @func_6668() /* ty=(Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %86 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %87 = cast(meta[relay.Constant][5] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %88 = cast(%var_8291, dtype="uint16") /* ty=Tensor[(154, 1), uint16] */;
    %89 = reshape(%87, newshape=[]) /* ty=uint16 */;
    %90 = reshape(%88, newshape=[154]) /* ty=Tensor[(154), uint16] */;
    %91 = @func_7363(%89, %90) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], uint16, Tensor[(154), uint16]) */;
    %92 = %85.3;
    %93 = %86.0;
    %94 = %91.3;
    (%92, %93, %94, meta[relay.Constant][5] /* ty=uint16 */, %var_8291)
  };
  %95(%var_8303) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154, 1), uint16]) */
}

def @func_8009() -> Tensor[(13, 10, 3), bool] {
  %96 = @func_6596() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %96.2
}

def @func_6933(%var_6931: bool, %var_6932: Tensor[(4, 8, 9), bool]) -> Tensor[(4, 8, 9), bool] {
  @func_6929(%var_6931, %var_6932) /* ty=Tensor[(4, 8, 9), bool] */
}

def @func_3126() -> (Tensor[(5, 12), float64], Tensor[(390), float64]) {
  %107 = fn () -> (Tensor[(5, 12), float64], Tensor[(390), float64]) {
    %97 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 12), float64] */;
    %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(390), bool] */, dtype="bool") /* ty=Tensor[(390), bool] */;
    %99 = reshape(%98, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), bool] */;
    %100 = @func_1264(%99) /* ty=Tensor[(13, 10, 3), float32] */;
    %101 = cast(%100, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %102 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(390), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(390), bool] */, dtype="float64") /* ty=Tensor[(390), float64] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?), float64] */;
    %105 = rsqrt(%97) /* ty=Tensor[(5, 12), float64] */;
    %106 = power(%103, %104) /* ty=Tensor[(390), float64] */;
    (%105, %106)
  };
  %107() /* ty=(Tensor[(5, 12), float64], Tensor[(390), float64]) */
}

def @func_4561(%var_4559: float64, %var_4560: Tensor[(240), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240), float64]) {
  %116 = fn (%var_4555: float64, %var_4556: Tensor[(240), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240), float64]) {
    %108 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %109 = cast(%var_4555, dtype="float64") /* ty=float64 */;
    %110 = cast(%var_4556, dtype="float64") /* ty=Tensor[(240), float64] */;
    %111 = reshape(%109, newshape=[]) /* ty=float64 */;
    %112 = reshape(%110, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
    %113 = @func_3733(%111, %112) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) */;
    %114 = %108.0;
    %115 = %113.2;
    (%114, %115, %var_4555, %var_4556)
  };
  %116(%var_4559, %var_4560) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240), float64]) */
}

def @func_5339(%var_5336: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) {
  %117 = cast(%var_5336, dtype="float64") /* ty=float64 */;
  %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %119 = reshape(%117, newshape=[]) /* ty=float64 */;
  %120 = reshape(%118, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %121 = @func_4054(%119, %120) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */;
  %122 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  %123 = %121.1;
  (%122, %123, %var_5336, meta[relay.Constant][8] /* ty=Tensor[(240), float64] */)
}

def @func_1394() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %124 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %125 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %126 = @func_776() /* ty=Tensor[(13, 10, 3), bool] */;
  %127 = %124.1;
  %128 = %125.0;
  (%126, %127, %128)
}

def @func_6117(%var_6115: int64, %var_6116: Tensor[(100), int64]) -> (Tensor[(13, 10, 3), bool], Tensor[(5, 5, 4), int64], int64, Tensor[(100), int64], Tensor[(13, 10, 3), bool]) {
  @func_6113(%var_6115, %var_6116) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 5, 4), int64], int64, Tensor[(100), int64], Tensor[(13, 10, 3), bool]) */
}

def @func_9294() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_9292() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_1961() -> Tensor[(13, 10, 3), bool] {
  %130 = fn () -> Tensor[(13, 10, 3), bool] {
    %129 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %129.1
  };
  %130() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5131() -> (Tensor[(13, 10, 3), bool],) {
  %131 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %132 = %131.1;
  (%132,)
}

def @func_2858() -> (Tensor[(13, 10, 3), bool],) {
  @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_2849() -> Tensor[(13, 10, 3), bool] {
  %133 = fn () -> Tensor[(13, 10, 3), bool] {
    @func_596() /* ty=Tensor[(13, 10, 3), bool] */
  };
  %133() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_2570(%var_2568: int64, %var_2569: Tensor[(13, 16, 11), int64]) -> (Tensor[(13, 16, 11), int64], Tensor[(13, 10, 3), bool]) {
  %138 = fn (%var_2539: int64, %var_2540: Tensor[(13, 16, 11), int64]) -> (Tensor[(13, 16, 11), int64], Tensor[(13, 10, 3), bool]) {
    %134 = cast(%var_2539, dtype="int64") /* ty=int64 */;
    %135 = cast(%var_2540, dtype="int64") /* ty=Tensor[(13, 16, 11), int64] */;
    %136 = bitwise_xor(%134, %135) /* ty=Tensor[(13, 16, 11), int64] */;
    %137 = @func_776() /* ty=Tensor[(13, 10, 3), bool] */;
    (%136, %137)
  };
  %138(%var_2568, %var_2569) /* ty=(Tensor[(13, 16, 11), int64], Tensor[(13, 10, 3), bool]) */
}

def @func_6346(%var_6344: Tensor[(1, 4, 14), uint16], %var_6345: Tensor[(1, 4, 14), uint16]) -> (Tensor[(?, 4, 14), uint16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(1, 4, 14), float64]) {
  @func_6342(%var_6344, %var_6345) /* ty=(Tensor[(?, 4, 14), uint16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(1, 4, 14), float64]) */
}

def @func_8400(%var_8398: Tensor[(660, 1), bool]) -> (Tensor[(13, 10, 3), float32], Tensor[(11, 10, 6), float32], Tensor[(660, 1), bool]) {
  @func_8397(%var_8398) /* ty=(Tensor[(13, 10, 3), float32], Tensor[(11, 10, 6), float32], Tensor[(660, 1), bool]) */
}

def @func_10583(%var_10581: Tensor[(2, 8, 13), float64], %var_10582: Tensor[(2, 8, 13), float64]) -> (Tensor[(2, 8, 13), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %148 = fn (%var_10567: Tensor[(2, 8, 13), float64], %var_10568: Tensor[(2, 8, 13), float64]) -> (Tensor[(2, 8, 13), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %139 = cast(%var_10568, dtype="float64") /* ty=Tensor[(2, 8, 13), float64] */;
    %140 = shape_of(%var_10567, dtype="int32") /* ty=Tensor[(3), int32] */;
    %141 = cast(%var_10567, dtype="float64") /* ty=Tensor[(2, 8, 13), float64] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %143 = @func_7967() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %144 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %145 = floor_mod(%141, %142) /* ty=Tensor[(2, 8, 13), float64] */;
    %146 = %143.0;
    %147 = %144.0;
    (%145, %146, %147)
  };
  %148(%var_10581, %var_10582) /* ty=(Tensor[(2, 8, 13), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_5937(%var_5935: Tensor[(252, 1), int16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int8], Tensor[(252, 1), int16], Tensor[(13, 10, 3), bool], Tensor[(1, 192), float64]) {
  @func_5934(%var_5935) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int8], Tensor[(252, 1), int16], Tensor[(13, 10, 3), bool], Tensor[(1, 192), float64]) */
}

def @func_3435() -> (Tensor[(13, 10, 3), bool],) {
  @func_3433() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_1766() -> Tensor[(36), int16] {
  @func_1764() /* ty=Tensor[(36), int16] */
}

def @func_4982(%var_4977: Tensor[(11, 10, 13), float64], %var_4978: Tensor[(11, 10, 13), float64]) -> Tensor[(11, 10, 13), bool] {
  %149 = cast(%var_4978, dtype="bool") /* ty=Tensor[(11, 10, 13), bool] */;
  %150 = shape_of(%var_4977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_4977, dtype="bool") /* ty=Tensor[(11, 10, 13), bool] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%151, %152) /* ty=Tensor[(11, 10, 13), bool] */
}

def @func_1825() -> Tensor[(13, 10, 3), bool] {
  @func_1823() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_851() -> (Tensor[(13, 10, 3), bool],) {
  %155 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %153 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %154 = %153.0;
    (%154,)
  };
  %155() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_5148(%var_5146: Tensor[(4, 2, 4), uint32]) -> (Tensor[(4, 2, 4), bool],) {
  @func_5145(%var_5146) /* ty=(Tensor[(4, 2, 4), bool],) */
}

def @func_5509() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), bool]) {
  @func_5507() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), bool]) */
}

def @func_10689(%var_10686: Tensor[(10, 15, 2), float32]) -> (Tensor[(10, 15, 2), float32],) {
  %156 = cast(%var_10686, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  %157 = atanh(%156) /* ty=Tensor[(10, 15, 2), float32] */;
  (%157,)
}

def @func_5757() -> (Tensor[(13, 10, 3), float32],) {
  %158 = @func_4473() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %159 = %158.0;
  (%159,)
}

def @func_7742() -> Tensor[(13, 10, 3), bool] {
  %160 = @func_4103() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %160.1
}

def @func_2502() -> Tensor[(13, 10, 3), float64] {
  %166 = fn () -> Tensor[(13, 10, 3), float64] {
    %161 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
    %162 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 10, 3), bool] */, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%161, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%164, %165) /* ty=Tensor[(13, 10, 3), float64] */
  };
  %166() /* ty=Tensor[(13, 10, 3), float64] */
}

def @func_5284() -> (Tensor[(13, 10, 3), bool],) {
  %167 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %168 = %167.1;
  %169 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
  %170 = cast(%169, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %171 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%168, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = equal(%172, %173) /* ty=Tensor[(13, 10, 3), bool] */;
  (%174,)
}

def @func_3481() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %175 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %176 = %175.0;
  %177 = @func_3204() /* ty=Tensor[(36), int16] */;
  (%176, %177)
}

def @func_6054(%var_6051: Tensor[(15, 9, 15), float64], %var_6052: Tensor[(15, 9, 15), float64], %var_6053: uint16) -> (Tensor[(11, 1, 14), uint16], uint16, Tensor[(154, 1), uint16], Tensor[(13, 10, 3), bool], Tensor[(15, 9, 15), float64]) {
  @func_6049(%var_6051, %var_6052, %var_6053) /* ty=(Tensor[(11, 1, 14), uint16], uint16, Tensor[(154, 1), uint16], Tensor[(13, 10, 3), bool], Tensor[(15, 9, 15), float64]) */
}

def @func_3457() -> (Tensor[(13, 10, 3), bool],) {
  %178 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %179 = %178.0;
  (%179,)
}

def @func_7803() -> Tensor[(13, 10, 3), bool] {
  @func_7801() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_2856() -> (Tensor[(13, 10, 3), bool],) {
  %180 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%180,)
}

def @func_8624() -> (Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  @func_8622() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */
}

def @func_7196(%var_7195: Tensor[(12, 15, 3), int64]) -> Tensor[(12, 15, 3), bool] {
  %185 = fn (%var_7185: Tensor[(12, 15, 3), int64]) -> Tensor[(12, 15, 3), bool] {
    %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 15, 3), int64] */, dtype="bool") /* ty=Tensor[(12, 15, 3), bool] */;
    %182 = shape_of(%var_7185, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%var_7185, dtype="bool") /* ty=Tensor[(12, 15, 3), bool] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%183, %184) /* ty=Tensor[(12, 15, 3), bool] */
  };
  %185(%var_7195) /* ty=Tensor[(12, 15, 3), bool] */
}

def @func_6113(%var_6084: int64, %var_6085: Tensor[(100), int64]) -> (Tensor[(13, 10, 3), bool], Tensor[(5, 5, 4), int64], int64, Tensor[(100), int64], Tensor[(13, 10, 3), bool]) {
  %186 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %187 = cast(%var_6084, dtype="int64") /* ty=int64 */;
  %188 = cast(%var_6085, dtype="int64") /* ty=Tensor[(100), int64] */;
  %189 = reshape(%187, newshape=[]) /* ty=int64 */;
  %190 = reshape(%188, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), int64] */;
  %191 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %192 = %186.0;
  %193 = @func_4285(%189, %190) /* ty=Tensor[(5, 5, 4), int64] */;
  %194 = %191.0;
  (%192, %193, %var_6084, %var_6085, %194)
}

def @func_8199(%var_8197: Tensor[(16, 8, 12), uint32], %var_8198: Tensor[(16, 8, 12), uint32]) -> (Tensor[(16, 8, 12), uint32], Tensor[(13, 10, 3), bool]) {
  @func_8195(%var_8197, %var_8198) /* ty=(Tensor[(16, 8, 12), uint32], Tensor[(13, 10, 3), bool]) */
}

def @func_9975() -> (Tensor[(13, 10, 3), bool],) {
  %195 = @func_5660() /* ty=Tensor[(13, 10, 3), bool] */;
  (%195,)
}

def @func_6376() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) {
  %196 = @func_3783() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */;
  %197 = %196.0;
  %198 = @func_3082() /* ty=Tensor[(13, 10, 3), float32] */;
  (%197, %198)
}

def @func_3007() -> (Tensor[(252), int16], Tensor[(13, 10, 3), int32]) {
  @func_3005() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), int32]) */
}

def @func_9292() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %199 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %200 = @func_5886() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) */;
  %201 = %199.0;
  %202 = %200.0;
  (%201, %202)
}

def @func_4647() -> Tensor[(13, 10, 3), bool] {
  %203 = @func_2122() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %203.1
}

def @func_4974() -> (Tensor[(5, 12), float64],) {
  @func_4972() /* ty=(Tensor[(5, 12), float64],) */
}

def @func_6929(%var_6924: bool, %var_6925: Tensor[(4, 8, 9), bool]) -> Tensor[(4, 8, 9), bool] {
  %204 = cast(%var_6924, dtype="bool") /* ty=bool */;
  %205 = cast(%var_6925, dtype="bool") /* ty=Tensor[(4, 8, 9), bool] */;
  logical_and(%204, %205) /* ty=Tensor[(4, 8, 9), bool] */
}

def @func_9692() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %213 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %206 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %207 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
    %208 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
    %209 = %206.0;
    %210 = %207.2;
    %211 = %208.0;
    %212 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
    (%209, %210, %211, %212)
  };
  %213() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_1352() -> (Tensor[(13, 10, 3), float32],) {
  @func_1350() /* ty=(Tensor[(13, 10, 3), float32],) */
}

def @func_8111() -> (Tensor[(13, 10, 3), float32], Tensor[(12, 15, 3), bool], Tensor[(540), int64]) {
  %214 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %215 = cast(meta[relay.Constant][11] /* ty=Tensor[(540), int64] */, dtype="int64") /* ty=Tensor[(540), int64] */;
  %216 = reshape(%215, newshape=[12, 15, 3]) /* ty=Tensor[(12, 15, 3), int64] */;
  %217 = %214.1;
  %218 = @func_7194(%216) /* ty=Tensor[(12, 15, 3), bool] */;
  (%217, %218, meta[relay.Constant][11] /* ty=Tensor[(540), int64] */)
}

def @func_4124() -> Tensor[(13, 10, 3), bool] {
  %220 = fn () -> Tensor[(13, 10, 3), bool] {
    %219 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %219.0
  };
  %220() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_9510() -> Tensor[(13, 10, 3), bool] {
  @func_7538() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_6297() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) {
  %230 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) {
    %221 = @func_1949() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) */;
    %222 = cast(-3.28126f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %223 = reshape(%222, newshape=[]) /* ty=float64 */;
    %224 = @func_5339(%223) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */;
    %225 = @func_3654() /* ty=(Tensor[(6, 7, 6), int16], Tensor[(12, 2, 9), float32]) */;
    %226 = %221.1;
    %227 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
    %228 = %224.0;
    %229 = %225.0;
    (%226, %227, %228, -3.28126f64 /* ty=float64 */, %229)
  };
  %230() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */
}

def @func_1350() -> (Tensor[(13, 10, 3), float32],) {
  %231 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
  %234 = acos(%233) /* ty=Tensor[(13, 10, 3), float32] */;
  (%234,)
}

def @func_1396() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_8994() -> (Tensor[(13, 10, 3), bool],) {
  %235 = @func_2584() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %236 = %235.0;
  (%236,)
}

def @func_1761() -> Tensor[(13, 10, 3), bool] {
  @func_1759() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_7871() -> (Tensor[(36), int16],) {
  @func_7869() /* ty=(Tensor[(36), int16],) */
}

def @func_5055(%var_5053: Tensor[(13, 2, 5), uint8]) -> (Tensor[(13, 2, 5), uint8], Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(13, 10, 3), bool]) {
  @func_5052(%var_5053) /* ty=(Tensor[(13, 2, 5), uint8], Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(13, 10, 3), bool]) */
}

def @func_2378() -> (Tensor[(36), int16],) {
  %238 = fn () -> (Tensor[(36), int16],) {
    %237 = @func_1764() /* ty=Tensor[(36), int16] */;
    (%237,)
  };
  %238() /* ty=(Tensor[(36), int16],) */
}

def @func_5145(%var_5141: Tensor[(4, 2, 4), uint32]) -> (Tensor[(4, 2, 4), bool],) {
  %239 = cast(%var_5141, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %240 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(4, 2, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 2, 4), uint32] */, dtype="bool") /* ty=Tensor[(4, 2, 4), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = less(%241, %242) /* ty=Tensor[(4, 2, 4), bool] */;
  (%243,)
}

def @func_9342(%var_9340: Tensor[(4, 15, 14), float64], %var_9341: Tensor[(4, 15, 14), float64]) -> (Tensor[(4, 15, 14), float64], Tensor[(4, 15, 14), float32]) {
  @func_9338(%var_9340, %var_9341) /* ty=(Tensor[(4, 15, 14), float64], Tensor[(4, 15, 14), float32]) */
}

def @func_2309() -> (Tensor[(12, 2, 9), float32],) {
  @func_2307() /* ty=(Tensor[(12, 2, 9), float32],) */
}

def @func_6598() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_6596() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_8900(%var_8899: Tensor[(3, 10, 14), float64]) -> (Tensor[(3, 10, 14), float64],) {
  %249 = fn (%var_8886: Tensor[(3, 10, 14), float64]) -> (Tensor[(3, 10, 14), float64],) {
    %244 = cast(%var_8886, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
    %245 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3, 10, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 10, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %248 = mod(%246, %247) /* ty=Tensor[(3, 10, 14), float64] */;
    (%248,)
  };
  %249(%var_8899) /* ty=(Tensor[(3, 10, 14), float64],) */
}

def @func_10986(%var_10984: Tensor[(60), float64], %var_10985: Tensor[(3, 4, 5), float64]) -> (Tensor[(36), int16], Tensor[(20), float64], Tensor[(60), float64], Tensor[(3, 4, 5), float32]) {
  @func_10982(%var_10984, %var_10985) /* ty=(Tensor[(36), int16], Tensor[(20), float64], Tensor[(60), float64], Tensor[(3, 4, 5), float32]) */
}

def @func_2196(%var_2194: uint16, %var_2195: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154), uint16]) {
  %258 = fn (%var_2184: uint16, %var_2185: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154), uint16]) {
    %250 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %251 = cast(%var_2184, dtype="uint16") /* ty=uint16 */;
    %252 = cast(%var_2185, dtype="uint16") /* ty=Tensor[(154), uint16] */;
    %253 = reshape(%251, newshape=[]) /* ty=uint16 */;
    %254 = reshape(%252, newshape=[154]) /* ty=Tensor[(154), uint16] */;
    %255 = @func_1198(%253, %254) /* ty=(Tensor[(11, 1, 14), uint16], Tensor[(154), uint16], Tensor[(13, 10, 3), int64]) */;
    %256 = %250.0;
    %257 = %255.1;
    (%256, %257, %var_2184, %var_2185)
  };
  %258(%var_2194, %var_2195) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154), uint16]) */
}

def @func_1986(%var_1984: float64, %var_1985: Tensor[(5, 8, 10), float64]) -> (Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) {
  %263 = fn (%var_1970: float64, %var_1971: Tensor[(5, 8, 10), float64]) -> (Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) {
    %259 = cast(%var_1970, dtype="float64") /* ty=float64 */;
    %260 = cast(%var_1971, dtype="float64") /* ty=Tensor[(5, 8, 10), float64] */;
    %261 = mod(%259, %260) /* ty=Tensor[(5, 8, 10), float64] */;
    %262 = @func_596() /* ty=Tensor[(13, 10, 3), bool] */;
    (%261, %262)
  };
  %263(%var_1984, %var_1985) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) */
}

def @func_567() -> Tensor[(13, 10, 3), bool] {
  %265 = fn () -> Tensor[(13, 10, 3), bool] {
    %264 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %264.0
  };
  %265() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3528(%var_3526: Tensor[(1, 2, 11), int32], %var_3527: Tensor[(4, 2, 11), int32]) -> Tensor[(4, 2, 11), bool] {
  %268 = fn (%var_3519: Tensor[(1, 2, 11), int32], %var_3520: Tensor[(4, 2, 11), int32]) -> Tensor[(4, 2, 11), bool] {
    %266 = cast(%var_3519, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
    %267 = cast(%var_3520, dtype="bool") /* ty=Tensor[(4, 2, 11), bool] */;
    less_equal(%266, %267) /* ty=Tensor[(4, 2, 11), bool] */
  };
  %268(%var_3526, %var_3527) /* ty=Tensor[(4, 2, 11), bool] */
}

def @func_2237() -> Tensor[(13, 10, 3), bool] {
  %269 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %269.0
}

def @func_2782() -> (Tensor[(12, 2, 9), int8], Tensor[(252), int16]) {
  %279 = fn () -> (Tensor[(12, 2, 9), int8], Tensor[(252), int16]) {
    %270 = @func_2307() /* ty=(Tensor[(12, 2, 9), float32],) */;
    %271 = %270.0;
    %272 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 2, 9), float32] */, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
    %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
    %274 = cast(%271, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
    %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %276 = @func_1894() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), bool]) */;
    %277 = left_shift(%274, %275) /* ty=Tensor[(12, 2, 9), int8] */;
    %278 = %276.0;
    (%277, %278)
  };
  %279() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */
}

def @func_4890() -> (Tensor[(13, 10, 3), bool],) {
  %281 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %280 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
    (%280,)
  };
  %281() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_9655(%var_9653: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), bool], Tensor[(768), bool]) {
  %282 = @func_5660() /* ty=Tensor[(13, 10, 3), bool] */;
  %283 = cast(%282, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %284 = reshape(%283, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), bool] */;
  %285 = cast(%var_9653, dtype="bool") /* ty=Tensor[(768), bool] */;
  %286 = reshape(%285, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %287 = @func_9160(%286) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) */;
  %288 = @func_4849(%284) /* ty=Tensor[(13, 10, 3), uint8] */;
  %289 = %287.0;
  (%282, %288, %289, %var_9653)
}

def @func_8397(%var_8366: Tensor[(660, 1), bool]) -> (Tensor[(13, 10, 3), float32], Tensor[(11, 10, 6), float32], Tensor[(660, 1), bool]) {
  %290 = @func_5757() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %291 = cast(%var_8366, dtype="bool") /* ty=Tensor[(660, 1), bool] */;
  %292 = reshape(%291, newshape=[11, 10, 6]) /* ty=Tensor[(11, 10, 6), bool] */;
  %293 = @func_7606(%292) /* ty=(Tensor[(11, 10, 6), int8], Tensor[(11, 10, 6), float32]) */;
  %294 = %290.0;
  %295 = %293.1;
  (%294, %295, %var_8366)
}

def @func_9759() -> Tensor[(13, 10, 3), bool] {
  @func_9757() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_10062(%var_9999: Tensor[(13, 5, 4), int32], %var_10047: Tensor[(13, 5, 4), int32]) -> (Tensor[(13, 5, 4), int32], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 5, 4), int32]) {
  %296 = cast(%var_9999, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %297 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(13, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 5, 4), int32] */, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %300 = @func_4473() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %301 = @func_5239() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %302 = cast(%var_10047, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %303 = shape_of(%var_9999, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_9999, dtype="int32") /* ty=Tensor[(13, 5, 4), int32] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %306 = bitwise_xor(%298, %299) /* ty=Tensor[(13, 5, 4), int32] */;
  %307 = %300.0;
  %308 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  %309 = %301.0;
  %310 = @func_4647() /* ty=Tensor[(13, 10, 3), bool] */;
  %311 = maximum(%304, %305) /* ty=Tensor[(13, 5, 4), int32] */;
  (%306, %307, %308, %309, %310, %311)
}

def @func_4285(%var_4272: int64, %var_4273: Tensor[(5, 5, 4), int64]) -> Tensor[(5, 5, 4), int64] {
  %312 = cast(%var_4272, dtype="int64") /* ty=int64 */;
  %313 = cast(%var_4273, dtype="int64") /* ty=Tensor[(5, 5, 4), int64] */;
  right_shift(%312, %313) /* ty=Tensor[(5, 5, 4), int64] */
}

def @func_7606(%var_7581: Tensor[(11, 10, 6), bool]) -> (Tensor[(11, 10, 6), int8], Tensor[(11, 10, 6), float32]) {
  %314 = cast(%var_7581, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %315 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(11, 10, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 10, 6), bool] */, dtype="bool") /* ty=Tensor[(11, 10, 6), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = logical_and(%316, %317) /* ty=Tensor[(11, 10, 6), bool] */;
  %319 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 10, 6), bool] */, dtype="int8") /* ty=Tensor[(11, 10, 6), int8] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="int8") /* ty=Tensor[(11, 10, 6), int8] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %323 = cast(%var_7581, dtype="float64") /* ty=Tensor[(11, 10, 6), float64] */;
  %324 = log(%323) /* ty=Tensor[(11, 10, 6), float64] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(11, 10, 6), float32] */;
  %326 = bitwise_or(%321, %322) /* ty=Tensor[(11, 10, 6), int8] */;
  %327 = erf(%325) /* ty=Tensor[(11, 10, 6), float32] */;
  (%326, %327)
}

def @func_3318() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %330 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %328 = @func_2237() /* ty=Tensor[(13, 10, 3), bool] */;
    %329 = @func_1850() /* ty=Tensor[(13, 10, 3), bool] */;
    (%328, %329)
  };
  %330() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_3737(%var_3735: float64, %var_3736: Tensor[(15, 8, 2), float64]) -> (Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) {
  @func_3733(%var_3735, %var_3736) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) */
}

def @func_9436() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %331 = @func_1949() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) */;
  %332 = @func_8994() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %333 = %331.0;
  %334 = %332.0;
  (%333, %334)
}

def @func_4531() -> (Tensor[(13, 10, 3), bool],) {
  %335 = @func_3317() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %336 = %335.1;
  (%336,)
}

def @func_2279() -> Tensor[(13, 10, 3), float32] {
  %340 = fn () -> Tensor[(13, 10, 3), float32] {
    %337 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %338 = %337.0;
    %339 = cast(%338, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    sinh(%339) /* ty=Tensor[(13, 10, 3), float32] */
  };
  %340() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_4760(%var_4759: Tensor[(400), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(252), int16], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) {
  %358 = fn (%var_4738: Tensor[(400), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(252), int16], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) {
    %341 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %342 = %341.1;
    %343 = cast(%342, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
    %344 = reshape(%343, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
    %345 = @func_1638(%344) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
    %346 = cast(%342, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
    %347 = reshape(%346, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
    %348 = @func_1638(%347) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
    %349 = cast(-7.07913f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %350 = cast(%var_4738, dtype="float64") /* ty=Tensor[(400), float64] */;
    %351 = reshape(%349, newshape=[]) /* ty=float64 */;
    %352 = reshape(%350, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), float64] */;
    %353 = @func_1983(%351, %352) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) */;
    %354 = @func_4315() /* ty=Tensor[(36), int16] */;
    %355 = %345.0;
    %356 = %348.0;
    %357 = %353.0;
    (%342, %354, %355, %356, %357, -7.07913f64 /* ty=float64 */, %var_4738)
  };
  %358(%var_4759) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(252), int16], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) */
}

def @func_6812() -> (Tensor[(13, 10, 3), bool],) {
  @func_6810() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_282() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %376 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %359 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %360 = rsqrt(%359) /* ty=Tensor[(13, 10, 3), float64] */;
    %361 = cast(%360, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %362 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(13, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %363 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 10, 3), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %365 = mod(%363, %364) /* ty=Tensor[(13, 10, 3), float64] */;
    %366 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 10, 3), float64] */, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
    %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %368 = cast(%365, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
    %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %370 = cast(%365, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
    %371 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %372 = cast(%360, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
    %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %374 = greater_equal(%368, %369) /* ty=Tensor[(13, 10, 3), bool] */;
    %375 = greater(%372, %373) /* ty=Tensor[(13, 10, 3), bool] */;
    (%374, %375)
  };
  %376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_3247() -> Tensor[(13, 10, 3), float32] {
  %379 = fn () -> Tensor[(13, 10, 3), float32] {
    %377 = @func_1468() /* ty=Tensor[(13, 10, 3), bool] */;
    %378 = cast(%377, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    tan(%378) /* ty=Tensor[(13, 10, 3), float32] */
  };
  %379() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_6151() -> (Tensor[(252), int16],) {
  %382 = fn () -> (Tensor[(252), int16],) {
    %380 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
    %381 = %380.1;
    (%381,)
  };
  %382() /* ty=(Tensor[(252), int16],) */
}

def @func_11335(%var_11333: Tensor[(4, 12, 8), float64], %var_11334: Tensor[(4, 12, 8), float64]) -> (Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), float32]) {
  %390 = fn (%var_11309: Tensor[(4, 12, 8), float64], %var_11317: Tensor[(4, 12, 8), float64]) -> (Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), float32]) {
    %383 = cast(%var_11309, dtype="float64") /* ty=Tensor[(4, 12, 8), float64] */;
    %384 = cast(%var_11317, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
    %385 = shape_of(%var_11309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%var_11309, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %388 = sigmoid(%383) /* ty=Tensor[(4, 12, 8), float64] */;
    %389 = floor_mod(%386, %387) /* ty=Tensor[(4, 12, 8), float32] */;
    (%388, %389)
  };
  %390(%var_11333, %var_11334) /* ty=(Tensor[(4, 12, 8), float64], Tensor[(4, 12, 8), float32]) */
}

def @func_1202(%var_1200: uint16, %var_1201: Tensor[(154), uint16]) -> (Tensor[(11, 1, 14), uint16], Tensor[(154), uint16], Tensor[(13, 10, 3), int64]) {
  @func_1198(%var_1200, %var_1201) /* ty=(Tensor[(11, 1, 14), uint16], Tensor[(154), uint16], Tensor[(13, 10, 3), int64]) */
}

def @func_4215(%var_4202: Tensor[(16, 2, 15), float64]) -> (Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float64]) {
  %391 = cast(%var_4202, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %392 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(16, 2, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %395 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 15), float64] */;
  %396 = maximum(%393, %394) /* ty=Tensor[(16, 2, 15), float64] */;
  %397 = asin(%395) /* ty=Tensor[(16, 2, 15), float64] */;
  (%396, %397)
}

def @func_4436() -> (Tensor[(13, 10, 3), bool],) {
  %399 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %398 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
    (%398,)
  };
  %399() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_1305() -> Tensor[(13, 10, 3), bool] {
  %400 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %400.0
}

def @func_10321() -> Tensor[(13, 10, 3), bool] {
  %401 = @func_8709() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %401.0
}

def @func_7422() -> (Tensor[(13, 10, 3), bool],) {
  %402 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
  (%402,)
}

def @func_7127(%var_7117: Tensor[(1, 252), int16]) -> (Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), float32], Tensor[(1, 252), int16]) {
  %403 = @func_5586() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %404 = cast(%var_7117, dtype="int16") /* ty=Tensor[(1, 252), int16] */;
  %405 = %403.0;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %407 = reshape(%404, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %408 = reshape(%406, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %409 = @func_705(%407, %408) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %410 = %409.3;
  (%405, %410, %var_7117)
}

def @func_1738() -> (Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */
}

def @func_4932(%var_4931: Tensor[(3, 6, 8), float64]) -> Tensor[(3, 6, 8), float64] {
  %412 = fn (%var_4919: Tensor[(3, 6, 8), float64]) -> Tensor[(3, 6, 8), float64] {
    %411 = cast(%var_4919, dtype="float64") /* ty=Tensor[(3, 6, 8), float64] */;
    log(%411) /* ty=Tensor[(3, 6, 8), float64] */
  };
  %412(%var_4931) /* ty=Tensor[(3, 6, 8), float64] */
}

def @func_9125() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  @func_9123() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */
}

def @func_5934(%var_5921: Tensor[(252, 1), int16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int8], Tensor[(252, 1), int16], Tensor[(13, 10, 3), bool], Tensor[(1, 192), float64]) {
  %413 = cast(%var_5921, dtype="int16") /* ty=Tensor[(252, 1), int16] */;
  %414 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %416 = reshape(%413, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %417 = reshape(%415, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %418 = @func_705(%416, %417) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %419 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %420 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 192), float64] */, dtype="float64") /* ty=Tensor[(1, 192), float64] */;
  %421 = reshape(%419, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float64] */;
  %422 = reshape(%420, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float64] */;
  %423 = @func_796(%421, %422) /* ty=(Tensor[(3, 16, 4), float64], Tensor[(13, 10, 3), bool]) */;
  %424 = %418.4;
  %425 = %423.1;
  (%414, %424, %var_5921, %425, meta[relay.Constant][21] /* ty=Tensor[(1, 192), float64] */)
}

def @func_6743() -> Tensor[(13, 10, 3), bool] {
  %427 = fn () -> Tensor[(13, 10, 3), bool] {
    %426 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %426.0
  };
  %427() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_10757() -> Tensor[(13, 10, 3), bool] {
  @func_10755() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_4218(%var_4216: Tensor[(16, 2, 15), float64]) -> (Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float64]) {
  @func_4215(%var_4216) /* ty=(Tensor[(16, 2, 15), float64], Tensor[(16, 2, 15), float64]) */
}

def @func_6706() -> (Tensor[(36), int16],) {
  %429 = fn () -> (Tensor[(36), int16],) {
    %428 = @func_1764() /* ty=Tensor[(36), int16] */;
    (%428,)
  };
  %429() /* ty=(Tensor[(36), int16],) */
}

def @func_9658(%var_9656: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), bool], Tensor[(768), bool]) {
  @func_9655(%var_9656) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), bool], Tensor[(768), bool]) */
}

def @func_2815(%var_2813: Tensor[(6, 8, 16), bool], %var_2814: Tensor[(6, 8, 16), bool]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float32]) {
  %437 = fn (%var_2798: Tensor[(6, 8, 16), bool], %var_2799: Tensor[(6, 8, 16), bool]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float32]) {
    %430 = cast(%var_2799, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
    %431 = shape_of(%var_2798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%var_2798, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %434 = cast(%var_2798, dtype="float32") /* ty=Tensor[(6, 8, 16), float32] */;
    %435 = logical_or(%432, %433) /* ty=Tensor[(6, 8, 16), bool] */;
    %436 = rsqrt(%434) /* ty=Tensor[(6, 8, 16), float32] */;
    (%435, %436)
  };
  %437(%var_2813, %var_2814) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float32]) */
}

def @func_10092() -> (Tensor[(13, 10, 3), bool],) {
  %438 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%438,)
}

def @func_7801() -> Tensor[(13, 10, 3), bool] {
  @func_1960() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_7081() -> (Tensor[(13, 10, 3), bool],) {
  %441 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %439 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %440 = %439.0;
    (%440,)
  };
  %441() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_8501() -> (Tensor[(13, 10, 3), float32],) {
  @func_8499() /* ty=(Tensor[(13, 10, 3), float32],) */
}

def @func_8622() -> (Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  %442 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %443 = @func_6542() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %444 = %442.4;
  %445 = @func_3246() /* ty=Tensor[(13, 10, 3), float32] */;
  %446 = %443.0;
  (%444, %445, %446)
}

def @func_1736() -> (Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  %447 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
  %448 = cast(%447, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
  %449 = reshape(%448, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
  %450 = @func_1638(%449) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
  %451 = cast(meta[relay.Constant][22] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
  %452 = %450.0;
  %453 = cast(%452, dtype="int16") /* ty=Tensor[(252), int16] */;
  %454 = reshape(%451, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), int16] */;
  %455 = reshape(%453, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int16] */;
  %456 = @func_53(%454, %455) /* ty=(Tensor[(6, 7, 6), int16],) */;
  %457 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %458 = %456.0;
  %459 = %457.1;
  (%447, %452, %458, meta[relay.Constant][22] /* ty=Tensor[(36), int16] */, %459)
}

def @func_10189(%var_10185: Tensor[(8, 1, 15), bool], %var_10186: Tensor[(8, 9, 15), bool], %var_10187: float64, %var_10188: Tensor[(240), float64]) -> (Tensor[(8, 9, 15), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(15, 8, 2), uint64], float64, Tensor[(240), float64], Tensor[(5, 8, 10), float64]) {
  %477 = fn (%var_10125: Tensor[(8, 1, 15), bool], %var_10126: Tensor[(8, 9, 15), bool], %var_10151: float64, %var_10152: Tensor[(240), float64]) -> (Tensor[(8, 9, 15), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(15, 8, 2), uint64], float64, Tensor[(240), float64], Tensor[(5, 8, 10), float64]) {
    %460 = cast(%var_10125, dtype="bool") /* ty=Tensor[(8, 1, 15), bool] */;
    %461 = cast(%var_10126, dtype="bool") /* ty=Tensor[(8, 9, 15), bool] */;
    %462 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %463 = @func_9459() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %464 = cast(%var_10151, dtype="float64") /* ty=float64 */;
    %465 = cast(%var_10152, dtype="float64") /* ty=Tensor[(240), float64] */;
    %466 = reshape(%464, newshape=[]) /* ty=float64 */;
    %467 = reshape(%465, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
    %468 = @func_3733(%466, %467) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) */;
    %469 = cast(%var_10151, dtype="float64") /* ty=float64 */;
    %470 = reshape(%469, newshape=[]) /* ty=float64 */;
    %471 = @func_6514(%470) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 8, 10), float64], float64, Tensor[(400), float64]) */;
    %472 = logical_or(%460, %461) /* ty=Tensor[(8, 9, 15), bool] */;
    %473 = %462.0;
    %474 = %463.0;
    %475 = %468.1;
    %476 = %471.1;
    (%472, %473, %474, %475, %var_10151, %var_10152, %476)
  };
  %477(%var_10185, %var_10186, %var_10187, %var_10188) /* ty=(Tensor[(8, 9, 15), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(15, 8, 2), uint64], float64, Tensor[(240), float64], Tensor[(5, 8, 10), float64]) */
}

def @func_2926(%var_2924: Tensor[(11, 13, 16), float64]) -> (Tensor[(11, 13, 16), float64], Tensor[(13, 10, 3), bool]) {
  @func_2923(%var_2924) /* ty=(Tensor[(11, 13, 16), float64], Tensor[(13, 10, 3), bool]) */
}

def @func_7609(%var_7607: Tensor[(11, 10, 6), bool]) -> (Tensor[(11, 10, 6), int8], Tensor[(11, 10, 6), float32]) {
  @func_7606(%var_7607) /* ty=(Tensor[(11, 10, 6), int8], Tensor[(11, 10, 6), float32]) */
}

def @func_10892() -> (Tensor[(13, 10, 3), bool],) {
  %480 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %478 = @func_9459() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %479 = %478.0;
    (%479,)
  };
  %480() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_9852(%var_9850: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(11, 1, 14), uint16], uint16, Tensor[(154), uint16], Tensor[(13, 10, 3), bool], Tensor[(768), bool], float64, Tensor[(240), float64]) {
  @func_9849(%var_9850) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(11, 1, 14), uint16], uint16, Tensor[(154), uint16], Tensor[(13, 10, 3), bool], Tensor[(768), bool], float64, Tensor[(240), float64]) */
}

def @func_796(%var_782: Tensor[(3, 16, 4), float64], %var_783: Tensor[(3, 16, 4), float64]) -> (Tensor[(3, 16, 4), float64], Tensor[(13, 10, 3), bool]) {
  %481 = cast(%var_783, dtype="float64") /* ty=Tensor[(3, 16, 4), float64] */;
  %482 = shape_of(%var_782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%var_782, dtype="float64") /* ty=Tensor[(3, 16, 4), float64] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %485 = floor_divide(%483, %484) /* ty=Tensor[(3, 16, 4), float64] */;
  %486 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  (%485, %486)
}

def @func_1640(%var_1639: Tensor[(13, 10, 3), int8]) -> (Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) {
  %505 = fn (%var_1610: Tensor[(13, 10, 3), int8]) -> (Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) {
    %487 = cast(meta[relay.Constant][23] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
    %488 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %489 = %488.1;
    %490 = cast(%489, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %491 = reshape(%487, newshape=[252]) /* ty=Tensor[(252), int16] */;
    %492 = reshape(%490, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
    %493 = @func_705(%491, %492) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
    %494 = %493.4;
    %495 = cast(%var_1610, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
    %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(%494, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %499 = cast(%489, dtype="uint32") /* ty=Tensor[(13, 10, 3), uint32] */;
    %500 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
    %501 = cast(%494, dtype="uint32") /* ty=Tensor[(13, 10, 3), uint32] */;
    %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %503 = bitwise_or(%497, %498) /* ty=Tensor[(13, 10, 3), uint8] */;
    %504 = multiply(%501, %502) /* ty=Tensor[(13, 10, 3), uint32] */;
    (meta[relay.Constant][23] /* ty=Tensor[(252), int16] */, %503, %504)
  };
  %505(%var_1639) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */
}

def @func_9988() -> Tensor[(13, 10, 3), float32] {
  %506 = fn () -> Tensor[(13, 10, 3), float32] {
    @func_3082() /* ty=Tensor[(13, 10, 3), float32] */
  };
  %506() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_1823() -> Tensor[(13, 10, 3), bool] {
  %507 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %507.1
}

def @func_5660() -> Tensor[(13, 10, 3), bool] {
  %508 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %508.0
}

def @func_3459() -> (Tensor[(13, 10, 3), bool],) {
  @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_597() -> Tensor[(13, 10, 3), bool] {
  %509 = fn () -> Tensor[(13, 10, 3), bool] {
    @func_490() /* ty=Tensor[(13, 10, 3), bool] */
  };
  %509() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_800(%var_798: Tensor[(3, 16, 4), float64], %var_799: Tensor[(3, 16, 4), float64]) -> (Tensor[(3, 16, 4), float64], Tensor[(13, 10, 3), bool]) {
  @func_796(%var_798, %var_799) /* ty=(Tensor[(3, 16, 4), float64], Tensor[(13, 10, 3), bool]) */
}

def @func_10066(%var_10064: Tensor[(13, 5, 4), int32], %var_10065: Tensor[(13, 5, 4), int32]) -> (Tensor[(13, 5, 4), int32], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 5, 4), int32]) {
  @func_10062(%var_10064, %var_10065) /* ty=(Tensor[(13, 5, 4), int32], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 5, 4), int32]) */
}

def @func_3868(%var_3867: Tensor[(4, 2, 5), uint32]) -> (Tensor[(4, 2, 5), uint32], Tensor[(13, 10, 3), bool]) {
  %514 = fn (%var_3859: Tensor[(4, 2, 5), uint32]) -> (Tensor[(4, 2, 5), uint32], Tensor[(13, 10, 3), bool]) {
    %510 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %511 = cast(%var_3859, dtype="uint32") /* ty=Tensor[(4, 2, 5), uint32] */;
    %512 = right_shift(%510, %511) /* ty=Tensor[(4, 2, 5), uint32] */;
    %513 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
    (%512, %513)
  };
  %514(%var_3867) /* ty=(Tensor[(4, 2, 5), uint32], Tensor[(13, 10, 3), bool]) */
}

def @func_7424() -> (Tensor[(13, 10, 3), bool],) {
  @func_7422() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_1574() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) {
  %515 = @func_443() /* ty=Tensor[(13, 10, 3), bool] */;
  %516 = cast(%515, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
  %517 = reshape(%516, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), bool] */;
  %518 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %519 = cast(meta[relay.Constant][25] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %520 = %518.0;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %522 = reshape(%519, newshape=[252]) /* ty=Tensor[(252), int16] */;
  %523 = reshape(%521, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), float64] */;
  %524 = @func_705(%522, %523) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */;
  %525 = %524.1;
  %526 = cast(%525, dtype="int16") /* ty=Tensor[(36), int16] */;
  %527 = cast(meta[relay.Constant][25] /* ty=Tensor[(252), int16] */, dtype="int16") /* ty=Tensor[(252), int16] */;
  %528 = reshape(%526, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), int16] */;
  %529 = reshape(%527, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int16] */;
  %530 = @func_53(%528, %529) /* ty=(Tensor[(6, 7, 6), int16],) */;
  %531 = @func_1264(%517) /* ty=Tensor[(13, 10, 3), float32] */;
  %532 = %530.0;
  (%515, %531, %520, %525, meta[relay.Constant][25] /* ty=Tensor[(252), int16] */, %532)
}

def @func_8331() -> Tensor[(13, 10, 3), bool] {
  %534 = fn () -> Tensor[(13, 10, 3), bool] {
    %533 = @func_7134() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %533.0
  };
  %534() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3068() -> Tensor[(13, 10, 3), bool] {
  @func_3066() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3066() -> Tensor[(13, 10, 3), bool] {
  %535 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %535.1
}

def @func_10842() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %540 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
    %536 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %537 = @func_2377() /* ty=(Tensor[(36), int16],) */;
    %538 = %536.0;
    %539 = %537.0;
    (%538, %539)
  };
  %540() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */
}

def @func_4852(%var_4850: Tensor[(13, 10, 3), bool]) -> Tensor[(13, 10, 3), uint8] {
  @func_4849(%var_4850) /* ty=Tensor[(13, 10, 3), uint8] */
}

def @func_4104() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %543 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %541 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
    %542 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
    (%541, %542)
  };
  %543() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_5712(%var_5711: Tensor[(15, 3, 13), float32]) -> (Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(15, 3, 13), float64], Tensor[(5, 12), float64]) {
  %560 = fn (%var_5668: Tensor[(15, 3, 13), float32]) -> (Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(15, 3, 13), float64], Tensor[(5, 12), float64]) {
    %544 = cast(%var_5668, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
    %545 = cosh(%544) /* ty=Tensor[(15, 3, 13), float32] */;
    %546 = cast(%var_5668, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
    %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %548 = cast(%545, dtype="uint16") /* ty=Tensor[(15, 3, 13), uint16] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %550 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
    %551 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%545, dtype="float32") /* ty=Tensor[(15, 3, 13), float32] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %554 = cast(%var_5668, dtype="float64") /* ty=Tensor[(15, 3, 13), float64] */;
    %555 = @func_4972() /* ty=(Tensor[(5, 12), float64],) */;
    %556 = bitwise_xor(%548, %549) /* ty=Tensor[(15, 3, 13), uint16] */;
    %557 = power(%552, %553) /* ty=Tensor[(15, 3, 13), float32] */;
    %558 = atan(%554) /* ty=Tensor[(15, 3, 13), float64] */;
    %559 = %555.0;
    (%556, %557, %558, %559)
  };
  %560(%var_5711) /* ty=(Tensor[(15, 3, 13), uint16], Tensor[(15, 3, 13), float32], Tensor[(15, 3, 13), float64], Tensor[(5, 12), float64]) */
}

def @func_9438() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_9436() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_5662() -> Tensor[(13, 10, 3), bool] {
  @func_5660() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_10539(%var_10478: Tensor[(12, 2, 9), int8]) -> (Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  %561 = @func_5539() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint32], Tensor[(390), int8]) */;
  %562 = @func_9292() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %563 = @func_6921() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8]) */;
  %564 = %563.1;
  %565 = cast(%var_10478, dtype="int16") /* ty=Tensor[(12, 2, 9), int16] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="int16") /* ty=Tensor[(12, 2, 9), int16] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %569 = cast(meta[relay.Constant][27] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %570 = reshape(%569, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %571 = @func_3419(%570) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) */;
  %572 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %573 = @func_3433() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %574 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %575 = @func_4435() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %576 = %561.1;
  %577 = %562.0;
  %578 = @func_5646() /* ty=Tensor[(13, 10, 3), bool] */;
  %579 = right_shift(%567, %568) /* ty=Tensor[(12, 2, 9), int16] */;
  %580 = %571.2;
  %581 = %572.0;
  %582 = %573.0;
  %583 = %574.0;
  %584 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  %585 = @func_5403() /* ty=Tensor[(13, 10, 3), float32] */;
  %586 = %575.0;
  (%576, %577, %578, %579, %580, meta[relay.Constant][27] /* ty=Tensor[(768), bool] */, %581, %582, %583, %584, %585, %586)
}

def @func_2307() -> (Tensor[(12, 2, 9), float32],) {
  %587 = @func_2012() /* ty=(Tensor[(12, 2, 9), float32], Tensor[(12, 2, 9), float32]) */;
  %588 = %587.0;
  (%588,)
}

def @func_4649() -> Tensor[(13, 10, 3), bool] {
  @func_4647() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_444() -> Tensor[(13, 10, 3), bool] {
  %590 = fn () -> Tensor[(13, 10, 3), bool] {
    %589 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %589.0
  };
  %590() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5052(%var_5017: Tensor[(13, 2, 5), uint8]) -> (Tensor[(13, 2, 5), uint8], Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(13, 10, 3), bool]) {
  %591 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 2, 5), uint8] */, dtype="uint8") /* ty=Tensor[(13, 2, 5), uint8] */;
  %592 = shape_of(%var_5017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%var_5017, dtype="uint8") /* ty=Tensor[(13, 2, 5), uint8] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %595 = @func_2856() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %596 = @func_1894() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), bool]) */;
  %597 = maximum(%593, %594) /* ty=Tensor[(13, 2, 5), uint8] */;
  %598 = %595.0;
  %599 = %596.0;
  %600 = @func_4647() /* ty=Tensor[(13, 10, 3), bool] */;
  (%597, %598, %599, %600)
}

def @func_10353() -> Tensor[(13, 10, 3), bool] {
  %602 = fn () -> Tensor[(13, 10, 3), bool] {
    %601 = @func_8709() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %601.0
  };
  %602() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_1806() -> Tensor[(13, 10, 3), bool] {
  @func_1804() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_1004(%var_1002: Tensor[(13, 9, 14), uint8], %var_1003: Tensor[(13, 9, 14), uint8]) -> (Tensor[(13, 9, 14), bool],) {
  @func_1000(%var_1002, %var_1003) /* ty=(Tensor[(13, 9, 14), bool],) */
}

def @func_5888() -> (Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) {
  @func_5886() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) */
}

def @func_529() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_1198(%var_1184: uint16, %var_1185: Tensor[(154), uint16]) -> (Tensor[(11, 1, 14), uint16], Tensor[(154), uint16], Tensor[(13, 10, 3), int64]) {
  %603 = cast(%var_1184, dtype="uint16") /* ty=uint16 */;
  %604 = cast(%var_1185, dtype="uint16") /* ty=Tensor[(154), uint16] */;
  %605 = reshape(%603, newshape=[]) /* ty=uint16 */;
  %606 = reshape(%604, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), uint16] */;
  %607 = @func_1076(%605, %606) /* ty=(Tensor[(11, 1, 14), uint16],) */;
  %608 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %609 = %608.0;
  %610 = cast(%var_1184, dtype="int64") /* ty=int64 */;
  %611 = cast(%609, dtype="int64") /* ty=Tensor[(13, 10, 3), int64] */;
  %612 = %607.0;
  %613 = add(%610, %611) /* ty=Tensor[(13, 10, 3), int64] */;
  (%612, %var_1185, %613)
}

def @func_4972() -> (Tensor[(5, 12), float64],) {
  %614 = @func_3125() /* ty=(Tensor[(5, 12), float64], Tensor[(390), float64]) */;
  %615 = %614.0;
  (%615,)
}

def @func_5886() -> (Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) {
  %616 = @func_3623() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(400), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %617 = @func_3125() /* ty=(Tensor[(5, 12), float64], Tensor[(390), float64]) */;
  %618 = %616.2;
  %619 = %617.0;
  %620 = @func_1823() /* ty=Tensor[(13, 10, 3), bool] */;
  (%618, %619, %620)
}

def @func_350() -> Tensor[(13, 10, 3), bool] {
  @func_348() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5587() -> (Tensor[(13, 10, 3), float32],) {
  %628 = fn () -> (Tensor[(13, 10, 3), float32],) {
    %621 = @func_4103() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %622 = %621.1;
    %623 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 10, 3), bool] */, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
    %625 = cast(%622, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %627 = power(%625, %626) /* ty=Tensor[(13, 10, 3), float32] */;
    (%627,)
  };
  %628() /* ty=(Tensor[(13, 10, 3), float32],) */
}

def @func_11105(%var_11103: Tensor[(216), int8]) -> (Tensor[(5, 12), float64], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), float32]) {
  @func_11102(%var_11103) /* ty=(Tensor[(5, 12), float64], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), float32]) */
}

def @func_2014() -> (Tensor[(12, 2, 9), float32], Tensor[(12, 2, 9), float32]) {
  @func_2012() /* ty=(Tensor[(12, 2, 9), float32], Tensor[(12, 2, 9), float32]) */
}

def @func_11243() -> (Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  %629 = @func_2377() /* ty=(Tensor[(36), int16],) */;
  %630 = %629.0;
  %631 = @func_4638() /* ty=Tensor[(13, 10, 3), bool] */;
  (%630, %631)
}

def @func_8683(%var_8681: Tensor[(1, 4, 5), float64], %var_8682: Tensor[(3, 4, 5), float64]) -> Tensor[(3, 4, 5), float64] {
  %634 = fn (%var_8672: Tensor[(1, 4, 5), float64], %var_8673: Tensor[(3, 4, 5), float64]) -> Tensor[(3, 4, 5), float64] {
    %632 = cast(%var_8672, dtype="float64") /* ty=Tensor[(1, 4, 5), float64] */;
    %633 = cast(%var_8673, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
    power(%632, %633) /* ty=Tensor[(3, 4, 5), float64] */
  };
  %634(%var_8681, %var_8682) /* ty=Tensor[(3, 4, 5), float64] */
}

def @func_5540() -> (Tensor[(252), int16], Tensor[(13, 10, 3), uint32], Tensor[(390), int8]) {
  %641 = fn () -> (Tensor[(252), int16], Tensor[(13, 10, 3), uint32], Tensor[(390), int8]) {
    %635 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
    %636 = cast(meta[relay.Constant][30] /* ty=Tensor[(390), int8] */, dtype="int8") /* ty=Tensor[(390), int8] */;
    %637 = reshape(%636, newshape=[13, 10, 3]) /* ty=Tensor[(13, 10, 3), int8] */;
    %638 = @func_1638(%637) /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint8], Tensor[(13, 10, 3), uint32]) */;
    %639 = %635.4;
    %640 = %638.2;
    (%639, %640, meta[relay.Constant][30] /* ty=Tensor[(390), int8] */)
  };
  %641() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), uint32], Tensor[(390), int8]) */
}

def @func_3421(%var_3420: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) {
  %651 = fn (%var_3400: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) {
    %642 = cast(%var_3400, dtype="bool") /* ty=Tensor[(768), bool] */;
    %643 = cast(%var_3400, dtype="bool") /* ty=Tensor[(768), bool] */;
    %644 = reshape(%642, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), bool] */;
    %645 = reshape(%643, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), bool] */;
    %646 = @func_2812(%644, %645) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float32]) */;
    %647 = @func_1365() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %648 = @func_2213() /* ty=Tensor[(13, 10, 3), bool] */;
    %649 = %646.1;
    %650 = %647.0;
    (%648, %649, %var_3400, %650)
  };
  %651(%var_3420) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_490() -> Tensor[(13, 10, 3), bool] {
  @func_443() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_293() -> Tensor[(13, 10, 3), bool] {
  @func_291() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_8499() -> (Tensor[(13, 10, 3), float32],) {
  %652 = @func_1752() /* ty=Tensor[(13, 10, 3), float32] */;
  (%652,)
}

def @func_8956(%var_8954: Tensor[(252), int16], %var_8955: Tensor[(1, 40), uint32]) -> (Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(252), int16], Tensor[(390), float64], Tensor[(13, 10, 3), bool], Tensor[(1, 40), uint32]) {
  @func_8952(%var_8954, %var_8955) /* ty=(Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(252), int16], Tensor[(390), float64], Tensor[(13, 10, 3), bool], Tensor[(1, 40), uint32]) */
}

def @func_708(%var_706: Tensor[(252), int16], %var_707: Tensor[(13, 10, 3), float64]) -> (Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) {
  %681 = fn (%var_641: Tensor[(252), int16], %var_648: Tensor[(13, 10, 3), float64]) -> (Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) {
    %653 = cast(meta[relay.Constant][31] /* ty=Tensor[(36), int16] */, dtype="int16") /* ty=Tensor[(36), int16] */;
    %654 = cast(%var_641, dtype="int16") /* ty=Tensor[(252), int16] */;
    %655 = reshape(%653, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), int16] */;
    %656 = reshape(%654, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int16] */;
    %657 = @func_53(%655, %656) /* ty=(Tensor[(6, 7, 6), int16],) */;
    %658 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
    %659 = cast(%658, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %660 = erf(%659) /* ty=Tensor[(13, 10, 3), float64] */;
    %661 = cast(%660, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %662 = log10(%661) /* ty=Tensor[(13, 10, 3), float64] */;
    %663 = cast(%662, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %664 = cos(%663) /* ty=Tensor[(13, 10, 3), float32] */;
    %665 = cast(%664, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %666 = cast(%664, dtype="float32") /* ty=Tensor[(13, 10, 3), float32] */;
    %667 = cosh(%666) /* ty=Tensor[(13, 10, 3), float32] */;
    %668 = cast(%var_648, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
    %669 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%660, dtype="uint8") /* ty=Tensor[(13, 10, 3), uint8] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %672 = bitwise_and(%670, %671) /* ty=Tensor[(13, 10, 3), uint8] */;
    %673 = cast(%672, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
    %674 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%667, dtype="int8") /* ty=Tensor[(13, 10, 3), int8] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %677 = %657.0;
    %678 = log(%665) /* ty=Tensor[(13, 10, 3), float32] */;
    %679 = logical_xor(%675, %676) /* ty=Tensor[(13, 10, 3), int8] */;
    %680 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
    (%677, meta[relay.Constant][31] /* ty=Tensor[(36), int16] */, %var_641, %678, %679, %680)
  };
  %681(%var_706, %var_707) /* ty=(Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(252), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), int8], Tensor[(13, 10, 3), bool]) */
}

def @func_1233() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %685 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %682 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %683 = %682.0;
    %684 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
    (%683, %684)
  };
  %685() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_10982(%var_10947: Tensor[(60), float64], %var_10953: Tensor[(3, 4, 5), float64]) -> (Tensor[(36), int16], Tensor[(20), float64], Tensor[(60), float64], Tensor[(3, 4, 5), float32]) {
  %686 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %687 = cast(meta[relay.Constant][32] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %688 = cast(%var_10947, dtype="float64") /* ty=Tensor[(60), float64] */;
  %689 = reshape(%687, newshape=[1, 4, 5]) /* ty=Tensor[(1, 4, 5), float64] */;
  %690 = reshape(%688, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), float64] */;
  %691 = @func_8680(%689, %690) /* ty=Tensor[(3, 4, 5), float64] */;
  %692 = cast(%var_10953, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="float32") /* ty=Tensor[(3, 4, 5), float32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %696 = %686.3;
  %697 = minimum(%694, %695) /* ty=Tensor[(3, 4, 5), float32] */;
  (%696, meta[relay.Constant][32] /* ty=Tensor[(20), float64] */, %var_10947, %697)
}

def @func_7628(%var_7626: Tensor[(12, 4, 5), float64]) -> Tensor[(12, 4, 5), float64] {
  @func_7625(%var_7626) /* ty=Tensor[(12, 4, 5), float64] */
}

def @func_3827() -> Tensor[(13, 10, 3), bool] {
  %699 = fn () -> Tensor[(13, 10, 3), bool] {
    %698 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %698.0
  };
  %699() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5507() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), bool]) {
  %700 = @func_5284() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %701 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
  %702 = @func_1949() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) */;
  %703 = %700.0;
  %704 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
  %705 = %701.0;
  %706 = %702.1;
  (%703, %704, %705, %706)
}

def @func_1143() -> (Tensor[(13, 10, 3), bool],) {
  %708 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %707 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
    (%707,)
  };
  %708() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_11159(%var_11157: Tensor[(216), int8]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(768), bool], Tensor[(216), int8]) {
  @func_11156(%var_11157) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(768), bool], Tensor[(216), int8]) */
}

def @func_10542(%var_10540: Tensor[(12, 2, 9), int8]) -> (Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  @func_10539(%var_10540) /* ty=(Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */
}

def @func_1752() -> Tensor[(13, 10, 3), float32] {
  %709 = @func_1350() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %709.0
}

def @func_3157(%var_3154: Tensor[(2, 12, 11), float32]) -> (Tensor[(2, 12, 11), float32],) {
  %710 = cast(%var_3154, dtype="float32") /* ty=Tensor[(2, 12, 11), float32] */;
  %711 = log2(%710) /* ty=Tensor[(2, 12, 11), float32] */;
  (%711,)
}

def @func_1129() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %715 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %712 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %713 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
    %714 = %712.0;
    (%713, %714)
  };
  %715() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_6596() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %716 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %717 = @func_1468() /* ty=Tensor[(13, 10, 3), bool] */;
  %718 = %716.0;
  %719 = @func_2237() /* ty=Tensor[(13, 10, 3), bool] */;
  (%717, %718, %719)
}

def @func_1759() -> Tensor[(13, 10, 3), bool] {
  %720 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %720.0
}

def @func_6810() -> (Tensor[(13, 10, 3), bool],) {
  %721 = @func_6596() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %722 = %721.2;
  (%722,)
}

def @func_2122() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %723 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %724 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %725 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
  %726 = %723.2;
  (%724, %725, %726)
}

def @func_7136() -> (Tensor[(13, 10, 3), bool],) {
  @func_7134() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_2405() -> Tensor[(13, 10, 3), bool] {
  %727 = fn () -> Tensor[(13, 10, 3), bool] {
    @func_490() /* ty=Tensor[(13, 10, 3), bool] */
  };
  %727() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_6668() -> (Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %728 = @func_5586() /* ty=(Tensor[(13, 10, 3), float32],) */;
  %729 = @func_5507() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), bool]) */;
  %730 = @func_3204() /* ty=Tensor[(36), int16] */;
  %731 = %728.0;
  %732 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
  %733 = %729.0;
  (%730, %731, %732, %733)
}

def @func_7130(%var_7128: Tensor[(1, 252), int16]) -> (Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), float32], Tensor[(1, 252), int16]) {
  @func_7127(%var_7128) /* ty=(Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), float32], Tensor[(1, 252), int16]) */
}

def @func_7366(%var_7364: uint16, %var_7365: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], uint16, Tensor[(154), uint16]) {
  %742 = fn (%var_7357: uint16, %var_7358: Tensor[(154), uint16]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], uint16, Tensor[(154), uint16]) {
    %734 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %735 = cast(%var_7357, dtype="uint16") /* ty=uint16 */;
    %736 = cast(%var_7358, dtype="uint16") /* ty=Tensor[(154), uint16] */;
    %737 = reshape(%735, newshape=[]) /* ty=uint16 */;
    %738 = reshape(%736, newshape=[154]) /* ty=Tensor[(154), uint16] */;
    %739 = @func_2193(%737, %738) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(154), uint16], uint16, Tensor[(154), uint16]) */;
    %740 = %734.0;
    %741 = %739.0;
    (%740, %741, %var_7357, %var_7358)
  };
  %742(%var_7364, %var_7365) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], uint16, Tensor[(154), uint16]) */
}

def @func_9634() -> (Tensor[(13, 10, 3), bool], Tensor[(5, 11, 11), bool], Tensor[(13, 10, 3), bool]) {
  %757 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(5, 11, 11), bool], Tensor[(13, 10, 3), bool]) {
    %743 = cast(meta[relay.Constant][33] /* ty=Tensor[(605), bool] */, dtype="bool") /* ty=Tensor[(605), bool] */;
    %744 = cast(meta[relay.Constant][33] /* ty=Tensor[(605), bool] */, dtype="bool") /* ty=Tensor[(605), bool] */;
    %745 = reshape(%743, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), bool] */;
    %746 = reshape(%744, newshape=[5, 11, 11]) /* ty=Tensor[(5, 11, 11), bool] */;
    %747 = @func_8089(%745, %746) /* ty=(Tensor[(5, 11, 11), float32],) */;
    %748 = %747.0;
    %749 = cast(meta[relay.Constant][33] /* ty=Tensor[(605), bool] */, dtype="bool") /* ty=Tensor[(605), bool] */;
    %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%748, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %753 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
    %754 = @func_4123() /* ty=Tensor[(13, 10, 3), bool] */;
    %755 = greater_equal(%751, %752) /* ty=Tensor[(5, 11, 11), bool] */;
    %756 = %753.2;
    (%754, %755, %756)
  };
  %757() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 11, 11), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_1804() -> Tensor[(13, 10, 3), bool] {
  @func_776() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3655() -> (Tensor[(6, 7, 6), int16], Tensor[(12, 2, 9), float32]) {
  %762 = fn () -> (Tensor[(6, 7, 6), int16], Tensor[(12, 2, 9), float32]) {
    %758 = @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
    %759 = @func_2307() /* ty=(Tensor[(12, 2, 9), float32],) */;
    %760 = %758.2;
    %761 = %759.0;
    (%760, %761)
  };
  %762() /* ty=(Tensor[(6, 7, 6), int16], Tensor[(12, 2, 9), float32]) */
}

def @func_5240() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  %768 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
    %763 = @func_2584() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %764 = @func_3783() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */;
    %765 = %763.0;
    %766 = %764.1;
    %767 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
    (%765, %766, %767)
  };
  %768() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */
}

def @func_6049(%var_6005: Tensor[(15, 9, 15), float64], %var_6006: Tensor[(15, 9, 15), float64], %var_6041: uint16) -> (Tensor[(11, 1, 14), uint16], uint16, Tensor[(154, 1), uint16], Tensor[(13, 10, 3), bool], Tensor[(15, 9, 15), float64]) {
  %769 = cast(%var_6041, dtype="uint16") /* ty=uint16 */;
  %770 = cast(meta[relay.Constant][34] /* ty=Tensor[(154, 1), uint16] */, dtype="uint16") /* ty=Tensor[(154, 1), uint16] */;
  %771 = reshape(%769, newshape=[]) /* ty=uint16 */;
  %772 = reshape(%770, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), uint16] */;
  %773 = @func_1076(%771, %772) /* ty=(Tensor[(11, 1, 14), uint16],) */;
  %774 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %775 = cast(%var_6005, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %776 = cos(%775) /* ty=Tensor[(15, 9, 15), float64] */;
  %777 = cast(%var_6006, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %778 = shape_of(%var_6005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_6005, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %781 = floor_divide(%779, %780) /* ty=Tensor[(15, 9, 15), float64] */;
  %782 = cast(%781, dtype="uint8") /* ty=Tensor[(15, 9, 15), uint8] */;
  %783 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%776, dtype="uint8") /* ty=Tensor[(15, 9, 15), uint8] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %786 = subtract(%784, %785) /* ty=Tensor[(15, 9, 15), uint8] */;
  %787 = cast(%786, dtype="float32") /* ty=Tensor[(15, 9, 15), float32] */;
  %788 = acos(%787) /* ty=Tensor[(15, 9, 15), float32] */;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(15, 9, 15), float64] */;
  %790 = %773.0;
  %791 = %774.1;
  %792 = exp(%789) /* ty=Tensor[(15, 9, 15), float64] */;
  (%790, %var_6041, meta[relay.Constant][34] /* ty=Tensor[(154, 1), uint16] */, %791, %792)
}

def @func_7539() -> Tensor[(13, 10, 3), bool] {
  %793 = fn () -> Tensor[(13, 10, 3), bool] {
    @func_4123() /* ty=Tensor[(13, 10, 3), bool] */
  };
  %793() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_6342(%var_6325: Tensor[(1, 4, 14), uint16], %var_6326: Tensor[(1, 4, 14), uint16]) -> (Tensor[(?, 4, 14), uint16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(1, 4, 14), float64]) {
  %794 = cast(%var_6326, dtype="uint16") /* ty=Tensor[(1, 4, 14), uint16] */;
  %795 = shape_of(%var_6325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%var_6325, dtype="uint16") /* ty=Tensor[(1, 4, 14), uint16] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %798 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
  %799 = @func_6296() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(6, 7, 6), int16]) */;
  %800 = cast(%var_6326, dtype="float64") /* ty=Tensor[(1, 4, 14), float64] */;
  %801 = minimum(%796, %797) /* ty=Tensor[(?, 4, 14), uint16] */;
  %802 = %798.2;
  %803 = %799.1;
  %804 = log2(%800) /* ty=Tensor[(1, 4, 14), float64] */;
  (%801, %802, %803, %804)
}

def @func_11448() -> Tensor[(36), int16] {
  @func_3204() /* ty=Tensor[(36), int16] */
}

def @func_758() -> Tensor[(13, 10, 3), bool] {
  @func_756() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_2012() -> (Tensor[(12, 2, 9), float32], Tensor[(12, 2, 9), float32]) {
  %805 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %806 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(12, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %809 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 9), float32] */;
  %810 = power(%807, %808) /* ty=Tensor[(12, 2, 9), float32] */;
  %811 = erf(%809) /* ty=Tensor[(12, 2, 9), float32] */;
  (%810, %811)
}

def @func_8092(%var_8090: Tensor[(5, 11, 11), bool], %var_8091: Tensor[(5, 11, 11), bool]) -> (Tensor[(5, 11, 11), float32],) {
  %819 = fn (%var_8075: Tensor[(5, 11, 11), bool], %var_8076: Tensor[(5, 11, 11), bool]) -> (Tensor[(5, 11, 11), float32],) {
    %812 = cast(%var_8076, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
    %813 = shape_of(%var_8075, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%var_8075, dtype="bool") /* ty=Tensor[(5, 11, 11), bool] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %816 = logical_and(%814, %815) /* ty=Tensor[(5, 11, 11), bool] */;
    %817 = cast(%816, dtype="float32") /* ty=Tensor[(5, 11, 11), float32] */;
    %818 = sin(%817) /* ty=Tensor[(5, 11, 11), float32] */;
    (%818,)
  };
  %819(%var_8090, %var_8091) /* ty=(Tensor[(5, 11, 11), float32],) */
}

def @func_6921() -> (Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8]) {
  %820 = @func_3433() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %821 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
  %822 = %820.0;
  %823 = %821.0;
  (%822, %823)
}

def @func_291() -> Tensor[(13, 10, 3), bool] {
  %824 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %824.1
}

def @func_1366() -> (Tensor[(13, 10, 3), bool],) {
  %826 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %825 = @func_1305() /* ty=Tensor[(13, 10, 3), bool] */;
    (%825,)
  };
  %826() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_9369() -> Tensor[(13, 10, 3), bool] {
  @func_7467() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3670() -> Tensor[(13, 10, 3), bool] {
  @func_1305() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_4474() -> (Tensor[(13, 10, 3), float32],) {
  %828 = fn () -> (Tensor[(13, 10, 3), float32],) {
    %827 = @func_2278() /* ty=Tensor[(13, 10, 3), float32] */;
    (%827,)
  };
  %828() /* ty=(Tensor[(13, 10, 3), float32],) */
}

def @func_5133() -> (Tensor[(13, 10, 3), bool],) {
  @func_5131() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_10441() -> Tensor[(13, 10, 3), bool] {
  %830 = fn () -> Tensor[(13, 10, 3), bool] {
    %829 = @func_5131() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %829.0
  };
  %830() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_10755() -> Tensor[(13, 10, 3), bool] {
  @func_490() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_2585() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %835 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %831 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %832 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %833 = %831.0;
    %834 = %832.0;
    (%833, %834)
  };
  %835() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_11156(%var_11153: Tensor[(216), int8]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(768), bool], Tensor[(216), int8]) {
  %836 = @func_4889() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %837 = cast(%var_11153, dtype="int8") /* ty=Tensor[(216), int8] */;
  %838 = reshape(%837, newshape=[12, 2, 9]) /* ty=Tensor[(12, 2, 9), int8] */;
  %839 = @func_10539(%838) /* ty=(Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %840 = @func_9369() /* ty=Tensor[(13, 10, 3), bool] */;
  %841 = %836.0;
  %842 = %839.4;
  (%840, %841, %842, %var_11153)
}

def @func_527() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %843 = @func_291() /* ty=Tensor[(13, 10, 3), bool] */;
  %844 = @func_443() /* ty=Tensor[(13, 10, 3), bool] */;
  (%843, %844)
}

def @func_4639() -> Tensor[(13, 10, 3), bool] {
  %846 = fn () -> Tensor[(13, 10, 3), bool] {
    %845 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %845.0
  };
  %846() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3005() -> (Tensor[(252), int16], Tensor[(13, 10, 3), int32]) {
  %847 = @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %848 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %849 = %848.0;
  %850 = cast(%849, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
  %851 = atanh(%850) /* ty=Tensor[(13, 10, 3), float64] */;
  %852 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %853 = cast(%852, dtype="int32") /* ty=Tensor[(13, 10, 3), int32] */;
  %854 = shape_of(%851, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%851, dtype="int32") /* ty=Tensor[(13, 10, 3), int32] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %857 = %847.1;
  %858 = maximum(%855, %856) /* ty=Tensor[(13, 10, 3), int32] */;
  (%857, %858)
}

def @func_10323() -> Tensor[(13, 10, 3), bool] {
  @func_10321() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_7134() -> (Tensor[(13, 10, 3), bool],) {
  %859 = @func_1804() /* ty=Tensor[(13, 10, 3), bool] */;
  (%859,)
}

def @func_8996() -> (Tensor[(13, 10, 3), bool],) {
  @func_8994() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_2215() -> Tensor[(13, 10, 3), bool] {
  @func_2213() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_2124() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_2122() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_5395() -> (Tensor[(3, 11, 13), int8],) {
  %860 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 11, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 13), float64] */;
  %861 = acos(%860) /* ty=Tensor[(3, 11, 13), float64] */;
  %862 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 11, 13), float64] */, dtype="int8") /* ty=Tensor[(3, 11, 13), int8] */;
  %863 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%861, dtype="int8") /* ty=Tensor[(3, 11, 13), int8] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %866 = add(%864, %865) /* ty=Tensor[(3, 11, 13), int8] */;
  (%866,)
}

def @func_9757() -> Tensor[(13, 10, 3), bool] {
  @func_7467() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_7954() -> Tensor[(13, 10, 3), float32] {
  %867 = fn () -> Tensor[(13, 10, 3), float32] {
    @func_1752() /* ty=Tensor[(13, 10, 3), float32] */
  };
  %867() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_2062() -> (Tensor[(13, 10, 3), bool],) {
  %869 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %868 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
    (%868,)
  };
  %869() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_9977() -> (Tensor[(13, 10, 3), bool],) {
  @func_9975() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_1896() -> (Tensor[(252), int16], Tensor[(13, 10, 3), bool]) {
  @func_1894() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), bool]) */
}

def @func_5403() -> Tensor[(13, 10, 3), float32] {
  @func_3246() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_5431() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %873 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %870 = @func_1128() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %871 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
    %872 = %870.0;
    (%871, %872)
  };
  %873() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_4316() -> Tensor[(36), int16] {
  %875 = fn () -> Tensor[(36), int16] {
    %874 = @func_2377() /* ty=(Tensor[(36), int16],) */;
    %874.0
  };
  %875() /* ty=Tensor[(36), int16] */
}

def @func_4533() -> (Tensor[(13, 10, 3), bool],) {
  @func_4531() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_9123() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) {
  %876 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %877 = @func_4889() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %878 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
  %879 = @func_7801() /* ty=Tensor[(13, 10, 3), bool] */;
  %880 = %876.2;
  %881 = %877.0;
  %882 = @func_756() /* ty=Tensor[(13, 10, 3), bool] */;
  %883 = @func_1752() /* ty=Tensor[(13, 10, 3), float32] */;
  %884 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%878, %879, %880, %881, %882, %883, %884)
}

def @func_6210(%var_6200: Tensor[(8, 1430), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(11, 10, 13), bool], Tensor[(252), int16], Tensor[(8, 1430), bool]) {
  %885 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %886 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 1430), float64] */, dtype="float64") /* ty=Tensor[(1, 1430), float64] */;
  %887 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 1430), float64] */, dtype="float64") /* ty=Tensor[(1, 1430), float64] */;
  %888 = reshape(%886, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float64] */;
  %889 = reshape(%887, newshape=[11, 10, 13]) /* ty=Tensor[(11, 10, 13), float64] */;
  %890 = @func_2781() /* ty=(Tensor[(12, 2, 9), int8], Tensor[(252), int16]) */;
  %891 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 1430), float64] */, dtype="bool") /* ty=Tensor[(1, 1430), bool] */;
  %892 = cast(%var_6200, dtype="bool") /* ty=Tensor[(8, 1430), bool] */;
  %893 = %885.1;
  %894 = @func_4982(%888, %889) /* ty=Tensor[(11, 10, 13), bool] */;
  %895 = %890.1;
  %896 = greater(%891, %892) /* ty=Tensor[(8, 1430), bool] */;
  (%893, %894, %895, %896)
}

def @func_1764() -> Tensor[(36), int16] {
  %897 = @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */;
  %897.3
}

def @func_9268(%var_9267: Tensor[(15, 14, 9), int32]) -> (Tensor[(15, 14, 9), bool], Tensor[(15, 14, 9), bool]) {
  %908 = fn (%var_9246: Tensor[(15, 14, 9), int32]) -> (Tensor[(15, 14, 9), bool], Tensor[(15, 14, 9), bool]) {
    %898 = cast(%var_9246, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
    %899 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(15, 14, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %900 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
    %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %902 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
    %903 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(15, 14, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %904 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 14, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 14, 9), bool] */;
    %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %906 = not_equal(%900, %901) /* ty=Tensor[(15, 14, 9), bool] */;
    %907 = logical_and(%904, %905) /* ty=Tensor[(15, 14, 9), bool] */;
    (%906, %907)
  };
  %908(%var_9267) /* ty=(Tensor[(15, 14, 9), bool], Tensor[(15, 14, 9), bool]) */
}

def @func_10345() -> Tensor[(13, 10, 3), bool] {
  %909 = fn () -> Tensor[(13, 10, 3), bool] {
    @func_2404() /* ty=Tensor[(13, 10, 3), bool] */
  };
  %909() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_11245() -> (Tensor[(36), int16], Tensor[(13, 10, 3), bool]) {
  @func_11243() /* ty=(Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */
}

def @func_1894() -> (Tensor[(252), int16], Tensor[(13, 10, 3), bool]) {
  %910 = @func_1736() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %911 = %910.1;
  %912 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  (%911, %912)
}

def @func_1080(%var_1078: uint16, %var_1079: Tensor[(11, 1, 14), uint16]) -> (Tensor[(11, 1, 14), uint16],) {
  @func_1076(%var_1078, %var_1079) /* ty=(Tensor[(11, 1, 14), uint16],) */
}

def @func_1307() -> Tensor[(13, 10, 3), bool] {
  @func_1305() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_1950() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) {
  %918 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) {
    %913 = @func_1394() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %914 = @func_1823() /* ty=Tensor[(13, 10, 3), bool] */;
    %915 = %913.0;
    %916 = @func_1764() /* ty=Tensor[(36), int16] */;
    %917 = @func_1764() /* ty=Tensor[(36), int16] */;
    (%914, %915, %916, %917)
  };
  %918() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(36), int16]) */
}

def @func_776() -> Tensor[(13, 10, 3), bool] {
  %919 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %919.1
}

def @func_3160(%var_3158: Tensor[(2, 12, 11), float32]) -> (Tensor[(2, 12, 11), float32],) {
  @func_3157(%var_3158) /* ty=(Tensor[(2, 12, 11), float32],) */
}

def @func_3205() -> Tensor[(36), int16] {
  %921 = fn () -> Tensor[(36), int16] {
    %920 = @func_2377() /* ty=(Tensor[(36), int16],) */;
    %920.0
  };
  %921() /* ty=Tensor[(36), int16] */
}

def @func_3856(%var_3855: Tensor[(252), int16]) -> Tensor[(252), int16] {
  %928 = fn (%var_3833: Tensor[(252), int16]) -> Tensor[(252), int16] {
    %922 = @func_3005() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), int32]) */;
    %923 = %922.0;
    %924 = cast(%var_3833, dtype="int16") /* ty=Tensor[(252), int16] */;
    %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(1), int32] */;
    %926 = cast(%923, dtype="int16") /* ty=Tensor[(252), int16] */;
    %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?), int16] */;
    bitwise_and(%926, %927) /* ty=Tensor[(252), int16] */
  };
  %928(%var_3855) /* ty=Tensor[(252), int16] */
}

def @func_3083() -> Tensor[(13, 10, 3), float32] {
  %930 = fn () -> Tensor[(13, 10, 3), float32] {
    %929 = @func_1350() /* ty=(Tensor[(13, 10, 3), float32],) */;
    %929.0
  };
  %930() /* ty=Tensor[(13, 10, 3), float32] */
}

def @func_11102(%var_11056: Tensor[(216), int8]) -> (Tensor[(5, 12), float64], Tensor[(12, 2, 9), int8], Tensor[(13, 10, 3), float32]) {
  %931 = @func_5886() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(5, 12), float64], Tensor[(13, 10, 3), bool]) */;
  %932 = cast(%var_11056, dtype="int8") /* ty=Tensor[(216), int8] */;
  %933 = reshape(%932, newshape=[12, 2, 9]) /* ty=Tensor[(12, 2, 9), int8] */;
  %934 = @func_10539(%933) /* ty=(Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %935 = %934.3;
  %936 = cast(%var_11056, dtype="int8") /* ty=Tensor[(216), int8] */;
  %937 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %938 = cast(%935, dtype="int8") /* ty=Tensor[(12, 2, 9), int8] */;
  %939 = dyn.reshape(%936, %937, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %940 = %931.1;
  %941 = subtract(%938, %939) /* ty=Tensor[(12, 2, 9), int8] */;
  %942 = @func_3082() /* ty=Tensor[(13, 10, 3), float32] */;
  (%940, %941, %942)
}

def @func_4057(%var_4055: float64, %var_4056: Tensor[(240), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) {
  %951 = fn (%var_4047: float64, %var_4048: Tensor[(240), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) {
    %943 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %944 = cast(%var_4047, dtype="float64") /* ty=float64 */;
    %945 = cast(%var_4048, dtype="float64") /* ty=Tensor[(240), float64] */;
    %946 = reshape(%944, newshape=[]) /* ty=float64 */;
    %947 = reshape(%945, newshape=[15, 8, 2]) /* ty=Tensor[(15, 8, 2), float64] */;
    %948 = @func_3733(%946, %947) /* ty=(Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) */;
    %949 = %943.0;
    %950 = %948.4;
    (%949, %950, %var_4047, %var_4048)
  };
  %951(%var_4055, %var_4056) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */
}

def @func_2213() -> Tensor[(13, 10, 3), bool] {
  @func_566() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_10094() -> (Tensor[(13, 10, 3), bool],) {
  @func_10092() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_3733(%var_3675: float64, %var_3676: Tensor[(15, 8, 2), float64]) -> (Tensor[(15, 8, 2), float64], Tensor[(15, 8, 2), uint64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], Tensor[(13, 10, 3), bool]) {
  %952 = cast(%var_3675, dtype="float64") /* ty=float64 */;
  %953 = cast(%var_3676, dtype="float64") /* ty=Tensor[(15, 8, 2), float64] */;
  %954 = cast(%var_3676, dtype="uint64") /* ty=Tensor[(15, 8, 2), uint64] */;
  %955 = cast(%var_3675, dtype="uint64") /* ty=uint64 */;
  %956 = @func_3005() /* ty=(Tensor[(252), int16], Tensor[(13, 10, 3), int32]) */;
  %957 = floor_divide(%952, %953) /* ty=Tensor[(15, 8, 2), float64] */;
  %958 = logical_xor(%954, %955) /* ty=Tensor[(15, 8, 2), uint64] */;
  %959 = @func_776() /* ty=Tensor[(13, 10, 3), bool] */;
  %960 = @func_1850() /* ty=Tensor[(13, 10, 3), bool] */;
  %961 = %956.1;
  %962 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
  (%957, %958, %959, %960, %961, %962)
}

def @func_492() -> Tensor[(13, 10, 3), bool] {
  @func_490() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5648() -> Tensor[(13, 10, 3), bool] {
  @func_5646() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_756() -> Tensor[(13, 10, 3), bool] {
  %963 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %963.1
}

def @func_8709() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %964 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %965 = @func_4638() /* ty=Tensor[(13, 10, 3), bool] */;
  %966 = %964.1;
  (%965, %966)
}

def @func_8801() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %971 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %967 = @func_566() /* ty=Tensor[(13, 10, 3), bool] */;
    %968 = @func_490() /* ty=Tensor[(13, 10, 3), bool] */;
    %969 = @func_7801() /* ty=Tensor[(13, 10, 3), bool] */;
    %970 = @func_1305() /* ty=Tensor[(13, 10, 3), bool] */;
    (%967, %968, %969, %970)
  };
  %971() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_4986(%var_4984: Tensor[(11, 10, 13), float64], %var_4985: Tensor[(11, 10, 13), float64]) -> Tensor[(11, 10, 13), bool] {
  @func_4982(%var_4984, %var_4985) /* ty=Tensor[(11, 10, 13), bool] */
}

def @func_9160(%var_9158: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) {
  %972 = @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */;
  %973 = @func_9123() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %974 = cast(%var_9158, dtype="bool") /* ty=Tensor[(768), bool] */;
  %975 = reshape(%974, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %976 = @func_3419(%975) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool], Tensor[(13, 10, 3), bool]) */;
  %977 = %972.0;
  %978 = %973.3;
  %979 = %976.1;
  (%977, %978, %979, %var_9158)
}

def @func_2239() -> Tensor[(13, 10, 3), bool] {
  @func_2237() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3433() -> (Tensor[(13, 10, 3), bool],) {
  %980 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %981 = %980.2;
  (%981,)
}

def @func_9338(%var_9323: Tensor[(4, 15, 14), float64], %var_9324: Tensor[(4, 15, 14), float64]) -> (Tensor[(4, 15, 14), float64], Tensor[(4, 15, 14), float32]) {
  %982 = cast(%var_9324, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
  %983 = shape_of(%var_9323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %984 = cast(%var_9323, dtype="float64") /* ty=Tensor[(4, 15, 14), float64] */;
  %985 = dyn.reshape(%982, %983, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %986 = cast(%var_9324, dtype="float32") /* ty=Tensor[(4, 15, 14), float32] */;
  %987 = mod(%984, %985) /* ty=Tensor[(4, 15, 14), float64] */;
  %988 = erf(%986) /* ty=Tensor[(4, 15, 14), float32] */;
  (%987, %988)
}

def @func_6466() -> (Tensor[(13, 10, 3), bool],) {
  @func_6464() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_5342(%var_5340: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) {
  @func_5339(%var_5340) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), int32], float64, Tensor[(240), float64]) */
}

def @func_7969() -> (Tensor[(13, 10, 3), bool],) {
  @func_7967() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_10692(%var_10690: Tensor[(10, 15, 2), float32]) -> (Tensor[(10, 15, 2), float32],) {
  @func_10689(%var_10690) /* ty=(Tensor[(10, 15, 2), float32],) */
}

def @func_11513() -> (Tensor[(13, 10, 3), bool],) {
  %991 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %989 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %990 = %989.0;
    (%990,)
  };
  %991() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_8920(%var_8902: Tensor[(13, 1, 9), uint16], %var_8903: Tensor[(13, 6, 9), uint16]) -> (Tensor[(13, 6, 9), bool], Tensor[(13, 10, 3), bool]) {
  %992 = cast(%var_8902, dtype="bool") /* ty=Tensor[(13, 1, 9), bool] */;
  %993 = cast(%var_8903, dtype="bool") /* ty=Tensor[(13, 6, 9), bool] */;
  %994 = @func_5430() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %995 = equal(%992, %993) /* ty=Tensor[(13, 6, 9), bool] */;
  %996 = %994.0;
  (%995, %996)
}

def @func_1056() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %1002 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %997 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %998 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %999 = %997.0;
    %1000 = %998.1;
    %1001 = @func_443() /* ty=Tensor[(13, 10, 3), bool] */;
    (%999, %1000, %1001)
  };
  %1002() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_6923() -> (Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8]) {
  @func_6921() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int8]) */
}

def @func_9482() -> Tensor[(13, 10, 3), bool] {
  %1003 = @func_2061() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %1003.0
}

def @func_9512() -> Tensor[(13, 10, 3), bool] {
  @func_9510() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_7625(%var_7618: Tensor[(12, 4, 5), float64]) -> Tensor[(12, 4, 5), float64] {
  %1004 = cast(%var_7618, dtype="float64") /* ty=Tensor[(12, 4, 5), float64] */;
  asin(%1004) /* ty=Tensor[(12, 4, 5), float64] */
}

def @func_9796() -> Tensor[(36), int16] {
  %1005 = fn () -> Tensor[(36), int16] {
    @func_3204() /* ty=Tensor[(36), int16] */
  };
  %1005() /* ty=Tensor[(36), int16] */
}

def @func_1000(%var_991: Tensor[(13, 9, 14), uint8], %var_992: Tensor[(13, 9, 14), uint8]) -> (Tensor[(13, 9, 14), bool],) {
  %1006 = cast(%var_992, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %1007 = shape_of(%var_991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(%var_991, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1010 = less_equal(%1008, %1009) /* ty=Tensor[(13, 9, 14), bool] */;
  (%1010,)
}

def @func_1576() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) {
  @func_1574() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(252), int16], Tensor[(6, 7, 6), int16]) */
}

def @func_3672() -> Tensor[(13, 10, 3), bool] {
  @func_3670() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_3483() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  @func_3481() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */
}

def @func_8113() -> (Tensor[(13, 10, 3), float32], Tensor[(12, 15, 3), bool], Tensor[(540), int64]) {
  @func_8111() /* ty=(Tensor[(13, 10, 3), float32], Tensor[(12, 15, 3), bool], Tensor[(540), int64]) */
}

def @func_7744() -> Tensor[(13, 10, 3), bool] {
  @func_7742() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_10869() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %1014 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %1011 = @func_7860() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %1012 = %1011.0;
    %1013 = @func_10344() /* ty=Tensor[(13, 10, 3), bool] */;
    (%1012, %1013)
  };
  %1014() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_778() -> Tensor[(13, 10, 3), bool] {
  @func_776() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5759() -> (Tensor[(13, 10, 3), float32],) {
  @func_5757() /* ty=(Tensor[(13, 10, 3), float32],) */
}

def @func_4289(%var_4287: int64, %var_4288: Tensor[(5, 5, 4), int64]) -> Tensor[(5, 5, 4), int64] {
  @func_4285(%var_4287, %var_4288) /* ty=Tensor[(5, 5, 4), int64] */
}

def @func_7335() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  @func_7333() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */
}

def @func_5319(%var_5311: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240, 1), float64]) {
  %1015 = @func_2584() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %1016 = cast(%var_5311, dtype="float64") /* ty=float64 */;
  %1017 = cast(meta[relay.Constant][42] /* ty=Tensor[(240, 1), float64] */, dtype="float64") /* ty=Tensor[(240, 1), float64] */;
  %1018 = reshape(%1016, newshape=[]) /* ty=float64 */;
  %1019 = reshape(%1017, newshape=[240]) /* ty=Tensor[(240), float64] */;
  %1020 = @func_4558(%1018, %1019) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240), float64]) */;
  %1021 = %1015.0;
  %1022 = %1020.0;
  (%1021, %1022, %var_5311, meta[relay.Constant][42] /* ty=Tensor[(240, 1), float64] */)
}

def @func_9371() -> Tensor[(13, 10, 3), bool] {
  @func_9369() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_53(%var_48: Tensor[(6, 1, 6), int16], %var_49: Tensor[(6, 7, 6), int16]) -> (Tensor[(6, 7, 6), int16],) {
  %1023 = cast(%var_48, dtype="int16") /* ty=Tensor[(6, 1, 6), int16] */;
  %1024 = cast(%var_49, dtype="int16") /* ty=Tensor[(6, 7, 6), int16] */;
  %1025 = bitwise_xor(%1023, %1024) /* ty=Tensor[(6, 7, 6), int16] */;
  (%1025,)
}

def @func_348() -> Tensor[(13, 10, 3), bool] {
  %1026 = @func_281() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %1026.0
}

def @func_6378() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) {
  @func_6376() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32]) */
}

def @func_57(%var_55: Tensor[(6, 1, 6), int16], %var_56: Tensor[(6, 7, 6), int16]) -> (Tensor[(6, 7, 6), int16],) {
  @func_53(%var_55, %var_56) /* ty=(Tensor[(6, 7, 6), int16],) */
}

def @func_6670() -> (Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  @func_6668() /* ty=(Tensor[(36), int16], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_5397() -> (Tensor[(3, 11, 13), int8],) {
  @func_5395() /* ty=(Tensor[(3, 11, 13), int8],) */
}

def @main(%var_11557: Tensor[(117), uint16]) -> (Tensor[(252), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), uint32], Tensor[(216), int8], Tensor[(117), uint16], Tensor[(3, 234), uint16], Tensor[(13, 6, 9), float64]) {
  %1027 = @func_1738() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(252), int16], Tensor[(6, 7, 6), int16], Tensor[(36), int16], Tensor[(13, 10, 3), bool]) */;
  %1028 = cast(meta[relay.Constant][43] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
  %1029 = reshape(%1028, newshape=[12, 2, 9]) /* ty=Tensor[(12, 2, 9), int8] */;
  %1030 = @func_10542(%1029) /* ty=(Tensor[(13, 10, 3), uint32], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(12, 2, 9), int16], Tensor[(768), bool], Tensor[(768), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), float32], Tensor[(13, 10, 3), bool]) */;
  %1031 = cast(%var_11557, dtype="uint16") /* ty=Tensor[(117), uint16] */;
  %1032 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 234), uint16] */, dtype="uint16") /* ty=Tensor[(3, 234), uint16] */;
  %1033 = reshape(%1031, newshape=[13, 1, 9]) /* ty=Tensor[(13, 1, 9), uint16] */;
  %1034 = reshape(%1032, newshape=[13, 6, 9]) /* ty=Tensor[(13, 6, 9), uint16] */;
  %1035 = @func_8924(%1033, %1034) /* ty=(Tensor[(13, 6, 9), bool], Tensor[(13, 10, 3), bool]) */;
  %1036 = %1035.0;
  %1037 = cast(%1036, dtype="float64") /* ty=Tensor[(13, 6, 9), float64] */;
  %1038 = %1027.1;
  %1039 = @func_1759() /* ty=Tensor[(13, 10, 3), bool] */;
  %1040 = %1030.0;
  %1041 = tan(%1037) /* ty=Tensor[(13, 6, 9), float64] */;
  (%1038, %1039, %1040, meta[relay.Constant][43] /* ty=Tensor[(216), int8] */, %var_11557, meta[relay.Constant][44] /* ty=Tensor[(3, 234), uint16] */, %1041)
}

def @func_3624() -> (Tensor[(13, 10, 3), bool], Tensor[(400), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
  %1055 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(400), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) {
    %1042 = cast(2.9559f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %1043 = cast(meta[relay.Constant][45] /* ty=Tensor[(400), float64] */, dtype="float64") /* ty=Tensor[(400), float64] */;
    %1044 = reshape(%1042, newshape=[]) /* ty=float64 */;
    %1045 = reshape(%1043, newshape=[5, 8, 10]) /* ty=Tensor[(5, 8, 10), float64] */;
    %1046 = @func_1983(%1044, %1045) /* ty=(Tensor[(5, 8, 10), float64], Tensor[(13, 10, 3), bool]) */;
    %1047 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
    %1048 = cast(%1047, dtype="float64") /* ty=Tensor[(13, 10, 3), float64] */;
    %1049 = asin(%1048) /* ty=Tensor[(13, 10, 3), float64] */;
    %1050 = cast(%1049, dtype="bool") /* ty=Tensor[(13, 10, 3), bool] */;
    %1051 = cast(2.9559f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %1052 = %1046.1;
    %1053 = not_equal(%1050, %1051) /* ty=Tensor[(13, 10, 3), bool] */;
    %1054 = @func_348() /* ty=Tensor[(13, 10, 3), bool] */;
    (%1052, meta[relay.Constant][45] /* ty=Tensor[(400), float64] */, %1053, %1054)
  };
  %1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(400), float64], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_10644() -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %1062 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
    %1056 = @func_10092() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %1057 = @func_3457() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %1058 = @func_2377() /* ty=(Tensor[(36), int16],) */;
    %1059 = %1056.0;
    %1060 = %1057.0;
    %1061 = %1058.0;
    (%1059, %1060, %1061)
  };
  %1062() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */
}

def @func_7468() -> Tensor[(13, 10, 3), bool] {
  %1064 = fn () -> Tensor[(13, 10, 3), bool] {
    %1063 = @func_1232() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %1063.0
  };
  %1064() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_5286() -> (Tensor[(13, 10, 3), bool],) {
  @func_5284() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_7282(%var_7281: Tensor[(144), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(3, 6, 8), float64], Tensor[(144), float64]) {
  %1070 = fn (%var_7250: Tensor[(144), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(3, 6, 8), float64], Tensor[(144), float64]) {
    %1065 = @func_7134() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %1066 = cast(%var_7250, dtype="float64") /* ty=Tensor[(144), float64] */;
    %1067 = reshape(%1066, newshape=[3, 6, 8]) /* ty=Tensor[(3, 6, 8), float64] */;
    %1068 = %1065.0;
    %1069 = @func_4930(%1067) /* ty=Tensor[(3, 6, 8), float64] */;
    (%1068, %1069, %var_7250)
  };
  %1070(%var_7281) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(3, 6, 8), float64], Tensor[(144), float64]) */
}

def @func_3784() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %1074 = fn () -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
    %1071 = @func_1055() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
    %1072 = %1071.0;
    %1073 = @func_1764() /* ty=Tensor[(36), int16] */;
    (%1072, %1073)
  };
  %1074() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(36), int16]) */
}

def @func_6464() -> (Tensor[(13, 10, 3), bool],) {
  %1075 = @func_527() /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool]) */;
  %1076 = %1075.1;
  (%1076,)
}

def @func_2923(%var_2905: Tensor[(11, 13, 16), float64]) -> (Tensor[(11, 13, 16), float64], Tensor[(13, 10, 3), bool]) {
  %1077 = cast(%var_2905, dtype="float64") /* ty=Tensor[(11, 13, 16), float64] */;
  %1078 = sin(%1077) /* ty=Tensor[(11, 13, 16), float64] */;
  %1079 = @func_2848() /* ty=Tensor[(13, 10, 3), bool] */;
  (%1078, %1079)
}

def @func_9163(%var_9161: Tensor[(768), bool]) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) {
  @func_9160(%var_9161) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], Tensor[(6, 8, 16), float32], Tensor[(768), bool]) */
}

def @func_10269() -> (Tensor[(13, 10, 3), float32],) {
  @func_10267() /* ty=(Tensor[(13, 10, 3), float32],) */
}

def @func_5646() -> Tensor[(13, 10, 3), bool] {
  @func_1850() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_8528(%var_8527: Tensor[(10, 3, 15), uint8]) -> (Tensor[(36), int16], Tensor[(10, 3, 15), uint8]) {
  %1092 = fn (%var_8504: Tensor[(10, 3, 15), uint8]) -> (Tensor[(36), int16], Tensor[(10, 3, 15), uint8]) {
    %1080 = @func_2377() /* ty=(Tensor[(36), int16],) */;
    %1081 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 15), uint8] */, dtype="bool") /* ty=Tensor[(10, 3, 15), bool] */;
    %1082 = shape_of(%var_8504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1083 = cast(%var_8504, dtype="bool") /* ty=Tensor[(10, 3, 15), bool] */;
    %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1085 = not_equal(%1083, %1084) /* ty=Tensor[(10, 3, 15), bool] */;
    %1086 = cast(%var_8504, dtype="uint8") /* ty=Tensor[(10, 3, 15), uint8] */;
    %1087 = shape_of(%1085, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1088 = cast(%1085, dtype="uint8") /* ty=Tensor[(10, 3, 15), uint8] */;
    %1089 = dyn.reshape(%1086, %1087, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %1090 = %1080.0;
    %1091 = right_shift(%1088, %1089) /* ty=Tensor[(10, 3, 15), uint8] */;
    (%1090, %1091)
  };
  %1092(%var_8527) /* ty=(Tensor[(36), int16], Tensor[(10, 3, 15), uint8]) */
}

def @func_1468() -> Tensor[(13, 10, 3), bool] {
  %1093 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %1093.0
}

def @func_8195(%var_8118: Tensor[(16, 8, 12), uint32], %var_8119: Tensor[(16, 8, 12), uint32]) -> (Tensor[(16, 8, 12), uint32], Tensor[(13, 10, 3), bool]) {
  %1094 = cast(%var_8119, dtype="uint32") /* ty=Tensor[(16, 8, 12), uint32] */;
  %1095 = shape_of(%var_8118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1096 = cast(%var_8118, dtype="uint32") /* ty=Tensor[(16, 8, 12), uint32] */;
  %1097 = dyn.reshape(%1094, %1095, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1098 = bitwise_and(%1096, %1097) /* ty=Tensor[(16, 8, 12), uint32] */;
  %1099 = @func_2237() /* ty=Tensor[(13, 10, 3), bool] */;
  (%1098, %1099)
}

def @func_1470() -> Tensor[(13, 10, 3), bool] {
  @func_1468() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_8924(%var_8922: Tensor[(13, 1, 9), uint16], %var_8923: Tensor[(13, 6, 9), uint16]) -> (Tensor[(13, 6, 9), bool], Tensor[(13, 10, 3), bool]) {
  @func_8920(%var_8922, %var_8923) /* ty=(Tensor[(13, 6, 9), bool], Tensor[(13, 10, 3), bool]) */
}

def @func_9484() -> Tensor[(13, 10, 3), bool] {
  @func_9482() /* ty=Tensor[(13, 10, 3), bool] */
}

def @func_6213(%var_6211: Tensor[(8, 1430), float64]) -> (Tensor[(13, 10, 3), bool], Tensor[(11, 10, 13), bool], Tensor[(252), int16], Tensor[(8, 1430), bool]) {
  @func_6210(%var_6211) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(11, 10, 13), bool], Tensor[(252), int16], Tensor[(8, 1430), bool]) */
}

def @func_1076(%var_1065: uint16, %var_1066: Tensor[(11, 1, 14), uint16]) -> (Tensor[(11, 1, 14), uint16],) {
  %1100 = cast(%var_1065, dtype="uint16") /* ty=uint16 */;
  %1101 = cast(%var_1066, dtype="uint16") /* ty=Tensor[(11, 1, 14), uint16] */;
  %1102 = bitwise_xor(%1100, %1101) /* ty=Tensor[(11, 1, 14), uint16] */;
  (%1102,)
}

def @func_5322(%var_5320: float64) -> (Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240, 1), float64]) {
  @func_5319(%var_5320) /* ty=(Tensor[(13, 10, 3), bool], Tensor[(13, 10, 3), bool], float64, Tensor[(240, 1), float64]) */
}

def @func_9460() -> (Tensor[(13, 10, 3), bool],) {
  %1104 = fn () -> (Tensor[(13, 10, 3), bool],) {
    %1103 = @func_3670() /* ty=Tensor[(13, 10, 3), bool] */;
    (%1103,)
  };
  %1104() /* ty=(Tensor[(13, 10, 3), bool],) */
}

def @func_7333() -> (Tensor[(13, 10, 3), bool], Tensor[(36), int16]) {
  %1105 = @func_1142() /* ty=(Tensor[(13, 10, 3), bool],) */;
  %1106 = %1105.0;
  %1107 = @func_3204() /* ty=Tensor[(36), int16] */;
  (%1106, %1107)
}

def @func_1851() -> Tensor[(13, 10, 3), bool] {
  %1109 = fn () -> Tensor[(13, 10, 3), bool] {
    %1108 = @func_850() /* ty=(Tensor[(13, 10, 3), bool],) */;
    %1108.0
  };
  %1109() /* ty=Tensor[(13, 10, 3), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen389/build/output.py", line 4130, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:12:57] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

