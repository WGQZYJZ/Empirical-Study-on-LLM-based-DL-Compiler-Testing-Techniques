==========mod==========
#[version = "0.0.5"]
def @func_14839() -> (Tensor[(9, 12, 1), float64],) {
  %0 = @func_11948() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_10705() -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(66), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  %2 = @func_6612() /* ty=(Tensor[(30), int64],) */;
  %3 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %5 = reshape(%4, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %6 = @func_7737(%5) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %7 = @func_8032() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %8 = %2.0;
  %9 = %3.0;
  %10 = %6.3;
  %11 = %7.0;
  (%8, %9, %10, meta[relay.Constant][0] /* ty=Tensor[(66), float64] */, %11)
}

def @func_12450() -> (Tensor[(66), float64], Tensor[(6, 11, 1), float64], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %12 = @func_9379() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(66), float64]) */;
  %13 = @func_8202() /* ty=(Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */;
  %14 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
  %15 = @func_9080() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %16 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %17 = %12.1;
  %18 = %13.1;
  %19 = %14.1;
  %20 = %15.0;
  %21 = %16.1;
  (%17, %18, %19, %20, %21)
}

def @func_7236(%var_7212: Tensor[(40), uint16]) -> (Tensor[(7, 10, 7), int8], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(40), uint16], Tensor[(1, 108), float64]) {
  %22 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %23 = %22.0;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 10, 7), float32] */, dtype="int8") /* ty=Tensor[(7, 10, 7), int8] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="int8") /* ty=Tensor[(7, 10, 7), int8] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %28 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %29 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %30 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %31 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %32 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %33 = cast(%var_7212, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %34 = reshape(%33, newshape=[40, 1]) /* ty=Tensor[(40, 1), uint16] */;
  %35 = @func_4814(%34) /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) */;
  %36 = minimum(%26, %27) /* ty=Tensor[(7, 10, 7), int8] */;
  %37 = %28.1;
  %38 = %29.0;
  %39 = %30.0;
  %40 = %31.2;
  %41 = %32.2;
  %42 = %35.0;
  %43 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  (%36, %37, %38, %39, %40, %41, %42, %var_7212, %43)
}

def @func_3072(%var_3066: Tensor[(7, 10, 7), float32]) -> Tensor[(7, 10, 7), bool] {
  %44 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %45 = cast(%var_3066, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%47, %48) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_5065(%var_5056: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
  %49 = @func_4631() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %50 = cast(%var_5056, dtype="int64") /* ty=Tensor[(30), int64] */;
  %51 = reshape(%50, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %52 = @func_4680(%51) /* ty=(Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
  %53 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %54 = %49.0;
  %55 = %52.4;
  %56 = %53.0;
  (%54, %55, %var_5056, %56)
}

def @func_10451() -> (Tensor[(30), int64], Tensor[(6, 11, 1), float64], Tensor[(112), float64], Tensor[(66), float64]) {
  %57 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %60 = reshape(%58, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %61 = reshape(%59, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %62 = @func_5185(%60, %61) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %63 = %57.2;
  %64 = %62.3;
  (%63, %64, meta[relay.Constant][2] /* ty=Tensor[(112), float64] */, meta[relay.Constant][3] /* ty=Tensor[(66), float64] */)
}

def @func_13310(%var_13285: Tensor[(540), int32]) -> (Tensor[(6, 108), float32], Tensor[(4, 15, 9), int32], Tensor[(540), int32], Tensor[(1, 108), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64]) {
  %65 = @func_7894() /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) */;
  %66 = %65.0;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %68 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 108), float64] */, dtype="float32") /* ty=Tensor[(6, 108), float32] */;
  %69 = cast(%var_13285, dtype="int32") /* ty=Tensor[(540), int32] */;
  %70 = reshape(%69, newshape=[4, 15, 9]) /* ty=Tensor[(4, 15, 9), int32] */;
  %71 = cast(%66, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %72 = cast(meta[relay.Constant][5] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %73 = reshape(%72, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %74 = @func_921(%73) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %75 = minimum(%67, %68) /* ty=Tensor[(6, 108), float32] */;
  %76 = @func_3738(%70) /* ty=Tensor[(4, 15, 9), int32] */;
  %77 = cos(%71) /* ty=Tensor[(1, 108), float32] */;
  %78 = %74.0;
  (%75, %76, %var_13285, %77, %78, meta[relay.Constant][5] /* ty=Tensor[(66), float64] */)
}

def @func_11926() -> (Tensor[(7, 10, 7), float32],) {
  %79 = @func_6690() /* ty=Tensor[(7, 10, 7), float32] */;
  (%79,)
}

def @func_14651() -> Tensor[(30), int64] {
  %80 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %80.2
}

def @func_5843(%var_5838: Tensor[(40), uint16]) -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(40), uint16]) {
  %81 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
  %82 = cast(%var_5838, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %83 = reshape(%82, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint16] */;
  %84 = @func_3711(%83) /* ty=(Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) */;
  %85 = %81.0;
  %86 = %84.1;
  (%85, %86, %var_5838)
}

def @func_12877() -> (Tensor[(1, 108), float64],) {
  %87 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
  %88 = %87.0;
  (%88,)
}

def @func_4411(%var_4406: Tensor[(4, 1, 4), float64]) -> (Tensor[(4, 1, 4), float64],) {
  %89 = cast(%var_4406, dtype="float64") /* ty=Tensor[(4, 1, 4), float64] */;
  %90 = cos(%89) /* ty=Tensor[(4, 1, 4), float64] */;
  (%90,)
}

def @func_6206() -> (Tensor[(7, 10, 7), float32],) {
  %91 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %92 = %91.1;
  (%92,)
}

def @func_6555(%var_6542: Tensor[(4, 28), float64]) -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %93 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %94 = cast(%var_6542, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 66), float64] */, dtype="float64") /* ty=Tensor[(1, 66), float64] */;
  %96 = reshape(%94, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %97 = reshape(%95, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %98 = @func_5185(%96, %97) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %99 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %100 = %93.4;
  %101 = %98.0;
  %102 = %99.0;
  %103 = @func_4575() /* ty=Tensor[(7, 10, 7), float32] */;
  (%100, %101, %var_6542, meta[relay.Constant][6] /* ty=Tensor[(1, 66), float64] */, %102, %103)
}

def @func_6690() -> Tensor[(7, 10, 7), float32] {
  %104 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %104.0
}

def @func_9379() -> (Tensor[(7, 10, 7), bool], Tensor[(66), float64]) {
  %105 = @func_8312() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */;
  %106 = %105.1;
  %107 = @func_7335() /* ty=Tensor[(66), float64] */;
  (%106, %107)
}

def @func_11629(%var_11595: Tensor[(14, 13, 2), float64], %var_11622: Tensor[(16), float64]) -> (Tensor[(14, 13, 2), float64], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) {
  %108 = cast(%var_11595, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %109 = cast(%var_11622, dtype="float64") /* ty=Tensor[(16), float64] */;
  %110 = reshape(%109, newshape=[4, 1, 4]) /* ty=Tensor[(4, 1, 4), float64] */;
  %111 = @func_4411(%110) /* ty=(Tensor[(4, 1, 4), float64],) */;
  %112 = atan(%108) /* ty=Tensor[(14, 13, 2), float64] */;
  %113 = %111.0;
  (%112, %113, %var_11622)
}

def @func_12551(%var_12530: Tensor[(10, 16, 1), float32]) -> Tensor[(10, 16, ?), float64] {
  %114 = cast(%var_12530, dtype="float32") /* ty=Tensor[(10, 16, 1), float32] */;
  %115 = rsqrt(%114) /* ty=Tensor[(10, 16, 1), float32] */;
  %116 = cast(%var_12530, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%118, %119) /* ty=Tensor[(10, 16, ?), float64] */
}

def @func_9554() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %120 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %121 = @func_6295() /* ty=Tensor[(7, 10, 7), float32] */;
  %122 = @func_4575() /* ty=Tensor[(7, 10, 7), float32] */;
  %123 = %120.0;
  (%121, %122, %123)
}

def @func_14799() -> Tensor[(7, 10, 7), float32] {
  %124 = @func_12726() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %124.0
}

def @func_6591(%var_6583: Tensor[(1, 30), int64], %var_6589: Tensor[(22, 3), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(1, 30), int64], Tensor[(7, 10, 7), float32], Tensor[(112), float64], Tensor[(22, 3), float64]) {
  %125 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %126 = cast(%var_6583, dtype="int64") /* ty=Tensor[(1, 30), int64] */;
  %127 = reshape(%126, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %128 = @func_4680(%127) /* ty=(Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
  %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %130 = cast(%var_6589, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %131 = reshape(%129, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %132 = reshape(%130, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %133 = @func_5185(%131, %132) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %134 = %125.0;
  %135 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %136 = %128.3;
  %137 = %133.7;
  (%134, %135, %136, %var_6583, %137, meta[relay.Constant][7] /* ty=Tensor[(112), float64] */, %var_6589)
}

def @func_9340(%var_9317: Tensor[(972), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 108), int32]) {
  %138 = cast(%var_9317, dtype="float64") /* ty=Tensor[(972), float64] */;
  %139 = reshape(%138, newshape=[9, 108]) /* ty=Tensor[(9, 108), float64] */;
  %140 = @func_7593(%139) /* ty=(Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) */;
  %141 = %140.1;
  %142 = cast(%var_9317, dtype="int32") /* ty=Tensor[(972), int32] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(2), int32] */;
  %144 = cast(%141, dtype="int32") /* ty=Tensor[(9, 108), int32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %146 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
  %147 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
  %148 = bitwise_xor(%144, %145) /* ty=Tensor[(9, 108), int32] */;
  (%146, %147, %148)
}

def @func_3738(%var_3729: Tensor[(4, 15, 9), int32]) -> Tensor[(4, 15, 9), int32] {
  %149 = cast(%var_3729, dtype="int32") /* ty=Tensor[(4, 15, 9), int32] */;
  %150 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(4, 15, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 15, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 15, 9), int32] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  left_shift(%151, %152) /* ty=Tensor[(4, 15, 9), int32] */
}

def @func_6014(%var_6001: Tensor[(9, 5, 5), float64]) -> Tensor[(9, 5, 5), int32] {
  %153 = cast(%var_6001, dtype="float64") /* ty=Tensor[(9, 5, 5), float64] */;
  %154 = log(%153) /* ty=Tensor[(9, 5, 5), float64] */;
  %155 = cast(%var_6001, dtype="int32") /* ty=Tensor[(9, 5, 5), int32] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="int32") /* ty=Tensor[(9, 5, 5), int32] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%157, %158) /* ty=Tensor[(9, 5, 5), int32] */
}

def @func_8202() -> (Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  %159 = cast(meta[relay.Constant][9] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %160 = reshape(%159, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %161 = @func_921(%160) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %162 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %163 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %164 = %161.0;
  %165 = %162.0;
  (%163, %164, meta[relay.Constant][9] /* ty=Tensor[(66), float64] */, %165)
}

def @func_7753() -> (Tensor[(7, 10, 7), float32],) {
  %166 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  (%166,)
}

def @func_13635() -> Tensor[(7, 10, 7), float32] {
  %167 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %167.0
}

def @func_7505() -> Tensor[(7, 10, 7), float32] {
  @func_2897() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_4680(%var_4658: Tensor[(30), int64]) -> (Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
  %168 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %169 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %170 = %169.1;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %172 = reshape(%171, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %173 = cast(%var_4658, dtype="int64") /* ty=Tensor[(30), int64] */;
  %174 = reshape(%173, newshape=[30, 1]) /* ty=Tensor[(30, 1), int64] */;
  %175 = @func_3955(%174) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) */;
  %176 = @func_4631() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %177 = %168.2;
  %178 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %179 = @func_3072(%172) /* ty=Tensor[(7, 10, 7), bool] */;
  %180 = %175.1;
  %181 = %176.0;
  (%177, %170, %178, %179, %180, %var_4658, %181)
}

def @func_10147() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64]) {
  %182 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %183 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
  %184 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  %185 = %182.1;
  %186 = %183.1;
  (%184, %185, %186)
}

def @func_10582(%var_10565: Tensor[(7, 108), float64], %var_10570: Tensor[(16, 108), float64]) -> (Tensor[(10, 15, ?), int32], Tensor[(7, 108), float64], Tensor[(16, 108), bool], Tensor[(30), int64], Tensor[(1, 30), int64]) {
  %187 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
  %188 = exp(%187) /* ty=Tensor[(10, 15, 1), float64] */;
  %189 = cast(%188, dtype="uint64") /* ty=Tensor[(10, 15, 1), uint64] */;
  %190 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(10, 15, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 15, 1), float64] */, dtype="uint64") /* ty=Tensor[(10, 15, 1), uint64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %193 = bitwise_and(%191, %192) /* ty=Tensor[(10, 15, ?), uint64] */;
  %194 = cast(%193, dtype="bool") /* ty=Tensor[(10, 15, ?), bool] */;
  %195 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%188, dtype="bool") /* ty=Tensor[(10, 15, 1), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %198 = not_equal(%196, %197) /* ty=Tensor[(10, 15, ?), bool] */;
  %199 = cast(%188, dtype="bool") /* ty=Tensor[(10, 15, 1), bool] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="bool") /* ty=Tensor[(10, 15, ?), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = logical_and(%201, %202) /* ty=Tensor[(10, 15, ?), bool] */;
  %204 = cast(%203, dtype="int32") /* ty=Tensor[(10, 15, ?), int32] */;
  %205 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%193, dtype="int32") /* ty=Tensor[(10, 15, ?), int32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %208 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
  %209 = %208.0;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
  %211 = cast(%var_10565, dtype="float64") /* ty=Tensor[(7, 108), float64] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %213 = cast(%var_10570, dtype="bool") /* ty=Tensor[(16, 108), bool] */;
  %214 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 30), int64] */, dtype="int64") /* ty=Tensor[(1, 30), int64] */;
  %215 = reshape(%214, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %216 = @func_9018(%215) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 108), bool], Tensor[(6, 108), uint8], Tensor[(5, 13, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
  %217 = bitwise_or(%206, %207) /* ty=Tensor[(10, 15, ?), int32] */;
  %218 = floor_mod(%210, %211) /* ty=Tensor[(7, 108), float64] */;
  %219 = greater_equal(%212, %213) /* ty=Tensor[(16, 108), bool] */;
  %220 = %216.4;
  (%217, %218, %219, %220, meta[relay.Constant][11] /* ty=Tensor[(1, 30), int64] */)
}

def @func_6532(%var_6515: Tensor[(13, 108), float64]) -> Tensor[(13, 108), bool] {
  %221 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %222 = cast(%221, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %223 = cast(%var_6515, dtype="float32") /* ty=Tensor[(13, 108), float32] */;
  %224 = divide(%222, %223) /* ty=Tensor[(13, 108), float32] */;
  %225 = cast(%var_6515, dtype="bool") /* ty=Tensor[(13, 108), bool] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(2), int32] */;
  %227 = cast(%224, dtype="bool") /* ty=Tensor[(13, 108), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%227, %228) /* ty=Tensor[(13, 108), bool] */
}

def @func_8746(%var_8731: Tensor[(12, 16, 10), int8], %var_8732: Tensor[(12, 16, 10), int8]) -> Tensor[(12, 16, 10), int8] {
  %229 = cast(%var_8732, dtype="int8") /* ty=Tensor[(12, 16, 10), int8] */;
  %230 = shape_of(%var_8731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_8731, dtype="int8") /* ty=Tensor[(12, 16, 10), int8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%231, %232) /* ty=Tensor[(12, 16, 10), int8] */
}

def @func_12517() -> (Tensor[(7, 10, 7), bool],) {
  %233 = @func_8312() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */;
  %234 = %233.1;
  (%234,)
}

def @func_3287() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %235 = cast(meta[relay.Constant][12] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %236 = reshape(%235, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %237 = @func_3212(%236) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %238 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %240 = reshape(%239, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %241 = @func_3212(%240) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %242 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %243 = %237.0;
  %244 = %238.0;
  %245 = %241.2;
  (%242, %243, meta[relay.Constant][12] /* ty=Tensor[(30), int64] */, %244, %245)
}

def @func_7036(%var_7031: Tensor[(13, 9, 2), bool]) -> (Tensor[(13, 9, 2), bool],) {
  %246 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 9, 2), bool] */, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %247 = shape_of(%var_7031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_7031, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %250 = logical_and(%248, %249) /* ty=Tensor[(13, 9, 2), bool] */;
  (%250,)
}

def @func_12295(%var_12290: Tensor[(2, 108), float32]) -> (Tensor[(30), int64], Tensor[(2, 108), bool]) {
  %251 = @func_10451() /* ty=(Tensor[(30), int64], Tensor[(6, 11, 1), float64], Tensor[(112), float64], Tensor[(66), float64]) */;
  %252 = @func_11448() /* ty=(Tensor[(1, 108), float32],) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %255 = cast(%var_12290, dtype="bool") /* ty=Tensor[(2, 108), bool] */;
  %256 = %251.0;
  %257 = not_equal(%254, %255) /* ty=Tensor[(2, 108), bool] */;
  (%256, %257)
}

def @func_14372() -> (Tensor[(7, 10, 7), float32], Tensor[(10, 16, ?), float64], Tensor[(160, 1), float32]) {
  %258 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %259 = cast(meta[relay.Constant][14] /* ty=Tensor[(160, 1), float32] */, dtype="float32") /* ty=Tensor[(160, 1), float32] */;
  %260 = reshape(%259, newshape=[10, 16, 1]) /* ty=Tensor[(10, 16, 1), float32] */;
  %261 = %258.1;
  %262 = @func_12551(%260) /* ty=Tensor[(10, 16, ?), float64] */;
  (%261, %262, meta[relay.Constant][14] /* ty=Tensor[(160, 1), float32] */)
}

def @func_14451() -> (Tensor[(30), int64],) {
  %263 = @func_6612() /* ty=(Tensor[(30), int64],) */;
  %264 = %263.0;
  (%264,)
}

def @func_4363() -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) {
  %265 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %266 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %267 = reshape(%266, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %268 = @func_147(%267) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %269 = %265.0;
  %270 = %268.0;
  (%269, %270, meta[relay.Constant][15] /* ty=Tensor[(3, 36), float64] */)
}

def @func_14147() -> Tensor[(7, 10, 7), float32] {
  @func_8775() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_13036() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %271 = @func_12869() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %272 = %271.1;
  %273 = @func_9515() /* ty=Tensor[(7, 10, 7), float32] */;
  (%272, %273)
}

def @func_3485() -> (Tensor[(7, 10, 7), float32],) {
  %274 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
  (%274,)
}

def @func_7593(%var_7566: Tensor[(9, 108), float64]) -> (Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) {
  %275 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %276 = cast(%275, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %277 = cast(%var_7566, dtype="bool") /* ty=Tensor[(9, 108), bool] */;
  %278 = cast(%var_7566, dtype="bool") /* ty=Tensor[(9, 108), bool] */;
  %279 = cast(%275, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %280 = greater(%278, %279) /* ty=Tensor[(9, 108), bool] */;
  %281 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 108), bool] */, dtype="uint16") /* ty=Tensor[(9, 108), uint16] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(2), int32] */;
  %283 = cast(%280, dtype="uint16") /* ty=Tensor[(9, 108), uint16] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %285 = logical_and(%276, %277) /* ty=Tensor[(9, 108), bool] */;
  %286 = right_shift(%283, %284) /* ty=Tensor[(9, 108), uint16] */;
  (%285, %286)
}

def @func_13183() -> Tensor[(66), float64] {
  %287 = @func_8202() /* ty=(Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */;
  %287.2
}

def @func_3006(%var_2974: Tensor[(6, 1, 16), int64], %var_2975: Tensor[(6, 8, 16), int64]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) {
  %288 = cast(%var_2974, dtype="bool") /* ty=Tensor[(6, 1, 16), bool] */;
  %289 = cast(%var_2975, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %290 = cast(%var_2974, dtype="float32") /* ty=Tensor[(6, 1, 16), float32] */;
  %291 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %292 = greater_equal(%288, %289) /* ty=Tensor[(6, 8, 16), bool] */;
  %293 = acosh(%290) /* ty=Tensor[(6, 1, 16), float32] */;
  %294 = %291.1;
  (%292, %293, %294)
}

def @func_10972() -> (Tensor[(7, 10, 7), float32],) {
  %295 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %296 = %295.0;
  (%296,)
}

def @func_8885() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %297 = @func_5418() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %298 = @func_4943() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %299 = @func_8775() /* ty=Tensor[(7, 10, 7), float32] */;
  %300 = %297.0;
  %301 = %298.1;
  (%299, %300, %301)
}

def @func_5483() -> (Tensor[(9, 12, 1), float64],) {
  %302 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %303 = %302.2;
  (%303,)
}

def @func_9252(%var_9237: int8, %var_9238: Tensor[(13, 3, 13), int8]) -> Tensor[(13, 3, 13), int8] {
  %304 = cast(%var_9237, dtype="int8") /* ty=int8 */;
  %305 = cast(%var_9238, dtype="int8") /* ty=Tensor[(13, 3, 13), int8] */;
  bitwise_and(%304, %305) /* ty=Tensor[(13, 3, 13), int8] */
}

def @func_11024() -> (Tensor[(7, 10, 7), uint16],) {
  %306 = @func_6912() /* ty=(Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) */;
  %307 = %306.0;
  (%307,)
}

def @func_12352() -> (Tensor[(1, 108), float32],) {
  %308 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %309 = %308.2;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %311 = erf(%310) /* ty=Tensor[(1, 108), float32] */;
  (%311,)
}

def @func_14102() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %312 = @func_12370() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %313 = @func_8153() /* ty=Tensor[(7, 10, 7), float32] */;
  %314 = %312.0;
  (%313, %314)
}

def @func_3039() -> (Tensor[(7, 10, 7), float32],) {
  %315 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %316 = %315.0;
  (%316,)
}

def @func_8775() -> Tensor[(7, 10, 7), float32] {
  %317 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %317.0
}

def @func_4216() -> Tensor[(1, 108), float64] {
  %318 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %318.4
}

def @func_14253() -> (Tensor[(5, 3, 2), int64], Tensor[(7, 10, 7), float32]) {
  %319 = @func_11526() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float64]) */;
  %320 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %321 = %319.1;
  %322 = %320.1;
  (%321, %322)
}

def @func_3360() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) {
  %323 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %324 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %325 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 30), int64] */, dtype="int64") /* ty=Tensor[(1, 30), int64] */;
  %326 = reshape(%325, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %327 = @func_3212(%326) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %328 = %323.0;
  %329 = %324.1;
  %330 = %327.2;
  (%328, %329, %330, meta[relay.Constant][17] /* ty=Tensor[(1, 30), int64] */)
}

def @func_4943() -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %331 = @func_4575() /* ty=Tensor[(7, 10, 7), float32] */;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %333 = reshape(%332, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %334 = @func_1964(%333) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
  %335 = %334.1;
  (%331, %335)
}

def @func_4872() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %336 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %337 = %336.0;
  %338 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  (%337, %338)
}

def @func_7552(%var_7546: Tensor[(117, 2), bool]) -> (Tensor[(7, 10, 7), float32], Tensor[(13, 9, 2), bool], Tensor[(117, 2), bool]) {
  %339 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %340 = cast(%var_7546, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %341 = reshape(%340, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), bool] */;
  %342 = @func_7036(%341) /* ty=(Tensor[(13, 9, 2), bool],) */;
  %343 = %339.0;
  %344 = %342.0;
  (%343, %344, %var_7546)
}

def @func_12083() -> Tensor[(7, 10, 7), float32] {
  @func_4575() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_11418(%var_11411: int8, %var_11412: Tensor[(507), int8]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(13, 3, 13), int8], int8, Tensor[(507), int8]) {
  %345 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %346 = cast(%var_11411, dtype="int8") /* ty=int8 */;
  %347 = cast(%var_11412, dtype="int8") /* ty=Tensor[(507), int8] */;
  %348 = reshape(%346, newshape=[]) /* ty=int8 */;
  %349 = reshape(%347, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int8] */;
  %350 = %345.0;
  %351 = @func_9515() /* ty=Tensor[(7, 10, 7), float32] */;
  %352 = @func_9252(%348, %349) /* ty=Tensor[(13, 3, 13), int8] */;
  (%350, %351, %352, %var_11411, %var_11412)
}

def @func_7983() -> (Tensor[(7, 10, 7), float32],) {
  %353 = @func_7894() /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) */;
  %354 = %353.1;
  (%354,)
}

def @func_12726() -> (Tensor[(7, 10, 7), float32],) {
  %355 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %356 = %355.1;
  (%356,)
}

def @func_7307() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) {
  %357 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %358 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %359 = @func_5550() /* ty=Tensor[(9, 12, 1), float64] */;
  %360 = cast(%359, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %361 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 12, 13), float64] */, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %362 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
  %363 = %357.0;
  %364 = %358.3;
  %365 = equal(%360, %361) /* ty=Tensor[(9, 12, 13), bool] */;
  %366 = %362.0;
  (%363, %364, %365, %366)
}

def @func_12671() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %367 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %368 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
  %369 = %367.1;
  (%368, %369)
}

def @func_14761() -> (Tensor[(11, 108), bool],) {
  %370 = @func_11448() /* ty=(Tensor[(1, 108), float32],) */;
  %371 = %370.0;
  %372 = cast(%371, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
  %373 = cast(meta[relay.Constant][19] /* ty=Tensor[(11, 108), float32] */, dtype="uint16") /* ty=Tensor[(11, 108), uint16] */;
  %374 = right_shift(%372, %373) /* ty=Tensor[(11, 108), uint16] */;
  %375 = cast(%374, dtype="bool") /* ty=Tensor[(11, 108), bool] */;
  %376 = cast(%371, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %377 = greater_equal(%375, %376) /* ty=Tensor[(11, 108), bool] */;
  (%377,)
}

def @func_9130() -> (Tensor[(7, 10, 7), float32],) {
  %378 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %379 = %378.0;
  (%379,)
}

def @func_5185(%var_5152: Tensor[(112), float64], %var_5158: Tensor[(66), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %380 = cast(%var_5152, dtype="float64") /* ty=Tensor[(112), float64] */;
  %381 = reshape(%380, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), float64] */;
  %382 = cast(%var_5158, dtype="float64") /* ty=Tensor[(66), float64] */;
  %383 = reshape(%382, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %384 = @func_921(%383) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %385 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %387 = reshape(%386, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %388 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %389 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %390 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %391 = @func_4304(%381) /* ty=Tensor[(7, 2, 8), float64] */;
  %392 = %384.0;
  %393 = @func_3072(%387) /* ty=Tensor[(7, 10, 7), bool] */;
  %394 = %388.1;
  %395 = %389.1;
  %396 = %390.0;
  (%385, %391, %var_5152, %392, %var_5158, %393, %394, %395, %396)
}

def @func_12633() -> Tensor[(7, 10, 7), float32] {
  @func_12508() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_3932() -> (Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) {
  %397 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %398 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %399 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %400 = %397.0;
  %401 = %398.0;
  %402 = %399.4;
  (%400, %401, %402)
}

def @func_4631() -> (Tensor[(7, 10, 7), float32],) {
  %403 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %404 = %403.3;
  (%404,)
}

def @func_14611() -> (Tensor[(7, 10, 7), float32],) {
  %405 = @func_8491() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %406 = %405.2;
  (%406,)
}

def @func_7089() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %407 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
  %408 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
  (%407, %408)
}

def @func_10935() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
  %409 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %410 = @func_9130() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %411 = %410.0;
  %412 = cast(%411, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %413 = reshape(%412, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %414 = @func_5972(%413) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) */;
  %415 = %409.0;
  %416 = %414.0;
  (%415, %411, %416)
}

def @func_5739() -> (Tensor[(30), int64], Tensor[(1, 108), float64]) {
  %417 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %418 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
  %419 = %417.2;
  %420 = %418.0;
  (%419, %420)
}

def @func_10508() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %421 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %422 = @func_9080() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %423 = %421.0;
  %424 = %422.0;
  (%423, %424)
}

def @func_5569() -> (Tensor[(1, 108), float64],) {
  %425 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  (%425,)
}

def @func_3711(%var_3694: Tensor[(10, 4, 1), uint16]) -> (Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) {
  %426 = cast(meta[relay.Constant][20] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %427 = cast(%var_3694, dtype="uint16") /* ty=Tensor[(10, 4, 1), uint16] */;
  %428 = bitwise_xor(%426, %427) /* ty=Tensor[(10, 4, 1), uint16] */;
  %429 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
  (%428, %429)
}

def @func_9515() -> Tensor[(7, 10, 7), float32] {
  %430 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %430.0
}

def @func_6295() -> Tensor[(7, 10, 7), float32] {
  %431 = @func_5610() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %431.1
}

def @func_13791() -> (Tensor[(7, 10, 7), float64], Tensor[(66), float64], Tensor[(30), int64]) {
  %432 = @func_6912() /* ty=(Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) */;
  %433 = @func_12450() /* ty=(Tensor[(66), float64], Tensor[(6, 11, 1), float64], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %434 = @func_11844() /* ty=(Tensor[(30), int64],) */;
  %435 = %432.1;
  %436 = %433.0;
  %437 = %434.0;
  (%435, %436, %437)
}

def @func_12365() -> (Tensor[(1, 30), int64],) {
  %438 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %439 = %438.3;
  (%439,)
}

def @func_5729() -> (Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) {
  %440 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 96), int64] */, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
  %441 = cast(meta[relay.Constant][22] /* ty=Tensor[(64, 12), int64] */, dtype="int64") /* ty=Tensor[(64, 12), int64] */;
  %442 = reshape(%440, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), int64] */;
  %443 = reshape(%441, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), int64] */;
  %444 = @func_3006(%442, %443) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) */;
  %445 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %446 = %445.2;
  %447 = cast(%446, dtype="uint8") /* ty=Tensor[(9, 12, 1), uint8] */;
  %448 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 96), int64] */, dtype="uint8") /* ty=Tensor[(1, 96), uint8] */;
  %449 = %444.2;
  %450 = maximum(%447, %448) /* ty=Tensor[(9, 12, 96), uint8] */;
  (%449, meta[relay.Constant][22] /* ty=Tensor[(64, 12), int64] */, %450)
}

def @func_14557() -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %451 = @func_8937() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %452 = @func_11948() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %453 = %451.1;
  %454 = %452.0;
  (%453, %454)
}

def @main(%var_14901: Tensor[(13, 30), int64], %var_14927: Tensor[(11, 108), bool]) -> (Tensor[(9, 108), bool], Tensor[(18, 54), float64], Tensor[(13, 30), bool], Tensor[(11, 108), bool], Tensor[(13, 30), bool], Tensor[(11, 108), float32], Tensor[(11, 108), float32]) {
  %455 = cast(meta[relay.Constant][23] /* ty=Tensor[(18, 54), float64] */, dtype="float64") /* ty=Tensor[(18, 54), float64] */;
  %456 = reshape(%455, newshape=[9, 108]) /* ty=Tensor[(9, 108), float64] */;
  %457 = @func_7593(%456) /* ty=(Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) */;
  %458 = @func_12365() /* ty=(Tensor[(1, 30), int64],) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %461 = cast(%var_14901, dtype="float32") /* ty=Tensor[(13, 30), float32] */;
  %462 = power(%460, %461) /* ty=Tensor[(13, 30), float32] */;
  %463 = cast(%var_14901, dtype="bool") /* ty=Tensor[(13, 30), bool] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(2), int32] */;
  %465 = cast(%462, dtype="bool") /* ty=Tensor[(13, 30), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %467 = @func_14761() /* ty=(Tensor[(11, 108), bool],) */;
  %468 = %467.0;
  %469 = cast(%var_14927, dtype="bool") /* ty=Tensor[(11, 108), bool] */;
  %470 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %471 = cast(%468, dtype="bool") /* ty=Tensor[(11, 108), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %473 = cast(%462, dtype="bool") /* ty=Tensor[(13, 30), bool] */;
  %474 = cast(%459, dtype="bool") /* ty=Tensor[(1, 30), bool] */;
  %475 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 108), bool] */, dtype="float32") /* ty=Tensor[(11, 108), float32] */;
  %476 = shape_of(%468, dtype="int32") /* ty=Tensor[(2), int32] */;
  %477 = cast(%468, dtype="float32") /* ty=Tensor[(11, 108), float32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %479 = cast(%var_14927, dtype="float32") /* ty=Tensor[(11, 108), float32] */;
  %480 = %457.0;
  %481 = greater(%465, %466) /* ty=Tensor[(13, 30), bool] */;
  %482 = logical_or(%471, %472) /* ty=Tensor[(11, 108), bool] */;
  %483 = less(%473, %474) /* ty=Tensor[(13, 30), bool] */;
  %484 = floor_mod(%477, %478) /* ty=Tensor[(11, 108), float32] */;
  %485 = cos(%479) /* ty=Tensor[(11, 108), float32] */;
  (%480, meta[relay.Constant][23] /* ty=Tensor[(18, 54), float64] */, %481, %482, %483, %484, %485)
}

def @func_13893() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %486 = @func_13494() /* ty=(Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */;
  %487 = %486.1;
  %488 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  (%487, %488)
}

def @func_3389() -> Tensor[(7, 10, 7), float32] {
  %489 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %490 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %491 = %490.0;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %493 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%489, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%494, %495) /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_2689() -> (Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) {
  %496 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %497 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 490), float32] */, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
  %498 = reshape(%497, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %499 = @func_1964(%498) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
  %500 = sinh(%496) /* ty=Tensor[(5, 13, 7), float32] */;
  %501 = %499.0;
  (%500, %501, meta[relay.Constant][26] /* ty=Tensor[(1, 490), float32] */)
}

def @func_8622(%var_8595: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32]) {
  %502 = cast(%var_8595, dtype="float64") /* ty=Tensor[(108), float64] */;
  %503 = reshape(%502, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %504 = @func_147(%503) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %507 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
  %508 = cosh(%506) /* ty=Tensor[(9, 12, 1), float64] */;
  %509 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
  (%507, %var_8595, %508, %509)
}

def @func_4203(%var_4197: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %510 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %511 = cast(%var_4197, dtype="int64") /* ty=Tensor[(30), int64] */;
  %512 = reshape(%511, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %513 = @func_3212(%512) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %514 = %510.0;
  %515 = %513.0;
  (%514, %515, %var_4197)
}

def @func_13376() -> Tensor[(30), int64] {
  %516 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %516.2
}

def @func_9018(%var_8992: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(6, 108), bool], Tensor[(6, 108), uint8], Tensor[(5, 13, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
  %517 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %518 = %517.4;
  %519 = cast(%518, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %520 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 108), float64] */, dtype="bool") /* ty=Tensor[(6, 108), bool] */;
  %521 = cast(%518, dtype="uint8") /* ty=Tensor[(1, 108), uint8] */;
  %522 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 108), float64] */, dtype="uint8") /* ty=Tensor[(6, 108), uint8] */;
  %523 = cast(%var_8992, dtype="int64") /* ty=Tensor[(30), int64] */;
  %524 = reshape(%523, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %525 = @func_3212(%524) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %526 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %527 = @func_8153() /* ty=Tensor[(7, 10, 7), float32] */;
  %528 = greater_equal(%519, %520) /* ty=Tensor[(6, 108), bool] */;
  %529 = bitwise_or(%521, %522) /* ty=Tensor[(6, 108), uint8] */;
  %530 = %525.3;
  %531 = %526.1;
  (%527, %528, %529, %530, %var_8992, %531)
}

def @func_10354() -> (Tensor[(7, 10, 7), float32],) {
  %532 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %533 = %532.1;
  (%533,)
}

def @func_6982() -> Tensor[(7, 10, 7), float32] {
  %534 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %534.0
}

def @func_4071() -> Tensor[(7, 10, 7), float32] {
  %535 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %535.0
}

def @func_3419() -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %536 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %537 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %538 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %539 = %536.2;
  %540 = %537.0;
  %541 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %542 = %538.0;
  (%539, %540, %541, %542)
}

def @func_8032() -> (Tensor[(7, 10, 7), float32],) {
  %543 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %544 = %543.0;
  (%544,)
}

def @func_5610() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %545 = @func_4943() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %546 = %545.0;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %548 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %549 = log2(%547) /* ty=Tensor[(7, 10, 7), float32] */;
  %550 = %548.1;
  (%549, %550)
}

def @func_13003() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %551 = @func_10972() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %552 = @func_11010() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %553 = %551.0;
  %554 = %552.0;
  (%553, %554)
}

def @func_6464(%var_6452: Tensor[(10, 10, 66), bool]) -> (Tensor[(6, 11, 1), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(9, 12, 1), float64], Tensor[(10, 10, 66), int16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64]) {
  %555 = cast(meta[relay.Constant][28] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %556 = reshape(%555, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %557 = @func_921(%556) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %558 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %559 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
  %560 = atanh(%559) /* ty=Tensor[(10, 10, 1), float64] */;
  %561 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 10, 1), float64] */, dtype="bool") /* ty=Tensor[(10, 10, 1), bool] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%560, dtype="bool") /* ty=Tensor[(10, 10, 1), bool] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %565 = equal(%563, %564) /* ty=Tensor[(10, 10, ?), bool] */;
  %566 = cast(%560, dtype="uint16") /* ty=Tensor[(10, 10, 1), uint16] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="uint16") /* ty=Tensor[(10, 10, ?), uint16] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %570 = add(%568, %569) /* ty=Tensor[(10, 10, ?), uint16] */;
  %571 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 10, 1), float64] */, dtype="bool") /* ty=Tensor[(10, 10, 1), bool] */;
  %572 = cast(meta[relay.Constant][28] /* ty=Tensor[(66), float64] */, dtype="bool") /* ty=Tensor[(66), bool] */;
  %573 = greater(%571, %572) /* ty=Tensor[(10, 10, 66), bool] */;
  %574 = cast(%570, dtype="bool") /* ty=Tensor[(10, 10, ?), bool] */;
  %575 = cast(%573, dtype="bool") /* ty=Tensor[(10, 10, 66), bool] */;
  %576 = logical_and(%574, %575) /* ty=Tensor[(10, 10, 66), bool] */;
  %577 = cast(%565, dtype="int64") /* ty=Tensor[(10, 10, ?), int64] */;
  %578 = cast(%576, dtype="int64") /* ty=Tensor[(10, 10, 66), int64] */;
  %579 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %580 = cast(%var_6452, dtype="int16") /* ty=Tensor[(10, 10, 66), int16] */;
  %581 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%576, dtype="int16") /* ty=Tensor[(10, 10, 66), int16] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %584 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %585 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %586 = cast(%576, dtype="int64") /* ty=Tensor[(10, 10, 66), int64] */;
  %587 = cast(meta[relay.Constant][28] /* ty=Tensor[(66), float64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
  %588 = %557.1;
  %589 = %558.0;
  %590 = bitwise_and(%577, %578) /* ty=Tensor[(10, 10, 66), int64] */;
  %591 = %579.0;
  %592 = maximum(%582, %583) /* ty=Tensor[(10, 10, 66), int16] */;
  %593 = %584.3;
  %594 = %585.0;
  %595 = add(%586, %587) /* ty=Tensor[(10, 10, 66), int64] */;
  (%588, %589, %590, %591, %592, %593, %594, %595)
}

def @func_11010() -> (Tensor[(7, 10, 7), float32],) {
  %596 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %597 = %596.1;
  (%597,)
}

def @func_14116() -> Tensor[(30), int64] {
  %598 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %598.4
}

def @func_8937() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %599 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %600 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %601 = %599.0;
  %602 = %600.0;
  (%601, %602)
}

def @func_13494() -> (Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  %603 = @func_7335() /* ty=Tensor[(66), float64] */;
  %604 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  (%603, %604)
}

def @func_11670(%var_11666: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(18), float32], Tensor[(108), float64], Tensor[(14, 16, 10), bool]) {
  %605 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %606 = cast(meta[relay.Constant][30] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %607 = cast(%var_11666, dtype="float64") /* ty=Tensor[(108), float64] */;
  %608 = reshape(%606, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float32] */;
  %609 = reshape(%607, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %610 = @func_8290(%608, %609) /* ty=(Tensor[(6, 1, 3), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64]) */;
  %611 = %610.1;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %613 = reshape(%612, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %614 = @func_11154(%613) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(108), float64]) */;
  %615 = %605.0;
  %616 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  %617 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %618 = %614.1;
  (%615, %616, %617, %611, meta[relay.Constant][30] /* ty=Tensor[(18), float32] */, %var_11666, %618)
}

def @func_13569() -> (Tensor[(7, 10, 7), float32],) {
  %619 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
  (%619,)
}

def @func_12134() -> Tensor[(7, 10, 7), float32] {
  %620 = @func_7894() /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) */;
  %620.1
}

def @func_12765() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %621 = @func_9130() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %622 = %621.0;
  %623 = @func_12633() /* ty=Tensor[(7, 10, 7), float32] */;
  (%622, %623)
}

def @func_9235() -> Tensor[(9, 12, 1), float64] {
  %624 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %624.0
}

def @func_5550() -> Tensor[(9, 12, 1), float64] {
  %625 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %625.0
}

def @func_12233(%var_12223: Tensor[(108), float64]) -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(108), float64]) {
  %626 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
  %627 = cast(%var_12223, dtype="float64") /* ty=Tensor[(108), float64] */;
  %628 = reshape(%627, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %629 = @func_8622(%628) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32]) */;
  %630 = %626.1;
  %631 = %629.3;
  (%630, %631, %var_12223)
}

def @func_5972(%var_5939: Tensor[(490), float32]) -> (Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) {
  %632 = cast(%var_5939, dtype="float32") /* ty=Tensor[(490), float32] */;
  %633 = reshape(%632, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %634 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
  %635 = %634.0;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %637 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %638 = @func_2916(%633) /* ty=Tensor[(7, 10, 7), bool] */;
  %639 = sin(%636) /* ty=Tensor[(1, 108), float32] */;
  %640 = %637.1;
  (%638, %var_5939, %639, %640)
}

def @func_8491() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %641 = @func_7089() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %642 = @func_7089() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %643 = @func_6295() /* ty=Tensor[(7, 10, 7), float32] */;
  %644 = %641.0;
  %645 = %642.0;
  (%643, %644, %645)
}

def @func_3120() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %646 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %647 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %648 = %646.0;
  %649 = %647.0;
  (%648, %649)
}

def @func_7349(%var_7344: Tensor[(112), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(1, 66), float64], Tensor[(112), float64]) {
  %650 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %651 = cast(%var_7344, dtype="float64") /* ty=Tensor[(112), float64] */;
  %652 = reshape(%651, newshape=[4, 28]) /* ty=Tensor[(4, 28), float64] */;
  %653 = @func_6555(%652) /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %654 = %650.3;
  %655 = %653.3;
  (%654, %655, %var_7344)
}

def @func_6612() -> (Tensor[(30), int64],) {
  %656 = @func_5739() /* ty=(Tensor[(30), int64], Tensor[(1, 108), float64]) */;
  %657 = %656.0;
  (%657,)
}

def @func_7894() -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) {
  %658 = @func_5739() /* ty=(Tensor[(30), int64], Tensor[(1, 108), float64]) */;
  %659 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %660 = %658.1;
  %661 = %659.1;
  (%660, %661)
}

def @func_11756() -> (Tensor[(7, 10, 7), float32],) {
  %662 = @func_10354() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %663 = %662.0;
  (%663,)
}

def @func_8290(%var_8274: Tensor[(6, 1, 3), float32], %var_8278: Tensor[(108), float64]) -> (Tensor[(6, 1, 3), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64]) {
  %664 = cast(%var_8274, dtype="float32") /* ty=Tensor[(6, 1, 3), float32] */;
  %665 = cast(%var_8278, dtype="float64") /* ty=Tensor[(108), float64] */;
  %666 = reshape(%665, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %667 = @func_147(%666) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %668 = sinh(%664) /* ty=Tensor[(6, 1, 3), float32] */;
  %669 = %667.0;
  (%668, %669, %var_8278)
}

def @func_2916(%var_2911: Tensor[(7, 10, 7), float32]) -> Tensor[(7, 10, 7), bool] {
  %670 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %671 = cast(%var_2911, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%673, %674) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_2965() -> (Tensor[(7, 10, 7), float32],) {
  %675 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  (%675,)
}

def @func_5301(%var_5203: Tensor[(4, 108), float64], %var_5292: Tensor[(96), int64], %var_5293: Tensor[(768), int64]) -> (Tensor[(16, 108), int8], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(4, 108), bool], Tensor[(16, 108), float32], Tensor[(7, 10, 7), float32], Tensor[(96), int64], Tensor[(768), int64], Tensor[(5, 13, 7), float32]) {
  %676 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %677 = cast(%676, dtype="int8") /* ty=Tensor[(1, 108), int8] */;
  %678 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 108), float64] */, dtype="int8") /* ty=Tensor[(16, 108), int8] */;
  %679 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %680 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %681 = @func_4631() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %682 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %683 = cast(%676, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
  %684 = cast(%var_5203, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
  %685 = minimum(%683, %684) /* ty=Tensor[(4, 108), float64] */;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
  %687 = sin(%686) /* ty=Tensor[(4, 108), float64] */;
  %688 = cast(%var_5203, dtype="bool") /* ty=Tensor[(4, 108), bool] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(2), int32] */;
  %690 = cast(%687, dtype="bool") /* ty=Tensor[(4, 108), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %692 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 108), float64] */, dtype="float32") /* ty=Tensor[(16, 108), float32] */;
  %693 = cast(%var_5292, dtype="int64") /* ty=Tensor[(96), int64] */;
  %694 = cast(%var_5293, dtype="int64") /* ty=Tensor[(768), int64] */;
  %695 = reshape(%693, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), int64] */;
  %696 = reshape(%694, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), int64] */;
  %697 = @func_3006(%695, %696) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) */;
  %698 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %699 = left_shift(%677, %678) /* ty=Tensor[(16, 108), int8] */;
  %700 = %679.1;
  %701 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
  %702 = %680.0;
  %703 = %681.0;
  %704 = %682.0;
  %705 = logical_and(%690, %691) /* ty=Tensor[(4, 108), bool] */;
  %706 = sinh(%692) /* ty=Tensor[(16, 108), float32] */;
  %707 = %697.2;
  %708 = %698.1;
  (%699, %700, %701, %702, %703, %704, %705, %706, %707, %var_5292, %var_5293, %708)
}

def @func_9997() -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %709 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %710 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %711 = %709.0;
  %712 = %710.1;
  (%711, %712)
}

def @func_9698(%var_9673: Tensor[(1, 108), float64]) -> (Tensor[(?, 108), uint16], Tensor[(9, 12, 1), float64], Tensor[(14, 16, 10), bool]) {
  %713 = @func_7307() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) */;
  %714 = %713.3;
  %715 = cast(%var_9673, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(2), int32] */;
  %717 = cast(%714, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %719 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %720 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
  %721 = bitwise_and(%717, %718) /* ty=Tensor[(?, 108), uint16] */;
  %722 = %719.2;
  %723 = %720.0;
  (%721, %722, %723)
}

def @func_3783() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %724 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %725 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %726 = %724.1;
  (%725, %726)
}

def @func_12124() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %727 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %728 = %727.1;
  %729 = @func_11723() /* ty=Tensor[(7, 10, 7), float32] */;
  (%728, %729)
}

def @func_12869() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %730 = @func_11756() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %731 = @func_12124() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %732 = %730.0;
  %733 = %731.1;
  (%732, %733)
}

def @func_3720() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %734 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %735 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %736 = %734.0;
  %737 = %735.0;
  (%736, %737)
}

def @func_12912(%var_12899: Tensor[(12, 18), float32]) -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(12, 18), float32]) {
  %738 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %739 = cast(%var_12899, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %740 = reshape(%739, newshape=[2, 108]) /* ty=Tensor[(2, 108), float32] */;
  %741 = @func_12295(%740) /* ty=(Tensor[(30), int64], Tensor[(2, 108), bool]) */;
  %742 = %738.0;
  %743 = %741.0;
  (%742, %743, %var_12899)
}

def @func_4575() -> Tensor[(7, 10, 7), float32] {
  %744 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %744.0
}

def @func_11282() -> (Tensor[(9, 12, 96), uint8],) {
  %745 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
  %746 = %745.2;
  (%746,)
}

def @func_10182() -> Tensor[(30), int64] {
  %747 = @func_6612() /* ty=(Tensor[(30), int64],) */;
  %747.0
}

def @func_11154(%var_11149: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(108), float64]) {
  %748 = cast(%var_11149, dtype="float64") /* ty=Tensor[(108), float64] */;
  %749 = reshape(%748, newshape=[1, 108]) /* ty=Tensor[(1, 108), float64] */;
  %750 = @func_9698(%749) /* ty=(Tensor[(?, 108), uint16], Tensor[(9, 12, 1), float64], Tensor[(14, 16, 10), bool]) */;
  %751 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %752 = %750.2;
  (%751, %752, %var_11149)
}

def @func_11195() -> Tensor[(7, 10, 7), float32] {
  %753 = @func_10354() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %753.0
}

def @func_13111() -> Tensor[(7, 10, 7), float32] {
  @func_10519() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_9666() -> (Tensor[(6, 11, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %754 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %755 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %756 = %754.1;
  %757 = %755.1;
  %758 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
  (%756, %757, %758)
}

def @func_9897(%var_9877: Tensor[(40), uint16]) -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(40), uint16]) {
  %759 = cast(%var_9877, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %760 = reshape(%759, newshape=[40]) /* ty=Tensor[(40), uint16] */;
  %761 = @func_7236(%760) /* ty=(Tensor[(7, 10, 7), int8], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(40), uint16], Tensor[(1, 108), float64]) */;
  %762 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
  %763 = %761.4;
  (%762, %763, %var_9877)
}

def @func_10519() -> Tensor[(7, 10, 7), float32] {
  @func_4071() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_9638() -> Tensor[(66), float64] {
  %764 = @func_9379() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(66), float64]) */;
  %764.1
}

def @func_3955(%var_3937: Tensor[(30, 1), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) {
  %765 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %766 = cast(%var_3937, dtype="int64") /* ty=Tensor[(30, 1), int64] */;
  %767 = reshape(%766, newshape=[5, 3, 2]) /* ty=Tensor[(5, 3, 2), int64] */;
  %768 = cast(%var_3937, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
  %769 = %765.0;
  %770 = @func_514(%767) /* ty=Tensor[(5, 3, 2), int64] */;
  %771 = atan(%768) /* ty=Tensor[(30, 1), float32] */;
  (%769, %770, %771)
}

def @func_11844() -> (Tensor[(30), int64],) {
  %772 = @func_10182() /* ty=Tensor[(30), int64] */;
  (%772,)
}

def @func_9928() -> (Tensor[(7, 10, 7), float32],) {
  %773 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  (%773,)
}

def @func_12508() -> Tensor[(7, 10, 7), float32] {
  @func_2897() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_5401() -> (Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) {
  %774 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
  %775 = cast(meta[relay.Constant][32] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %776 = reshape(%775, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %777 = @func_5065(%776) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
  %778 = %774.0;
  %779 = %777.2;
  (%778, %779, meta[relay.Constant][32] /* ty=Tensor[(30), int64] */)
}

def @func_3986() -> Tensor[(7, 10, 7), float32] {
  %780 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %780.1
}

def @func_11948() -> (Tensor[(9, 12, 1), float64],) {
  %781 = @func_5550() /* ty=Tensor[(9, 12, 1), float64] */;
  (%781,)
}

def @func_6369() -> Tensor[(7, 10, 7), float32] {
  %782 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %782.0
}

def @func_2841() -> Tensor[(7, 10, 7), float32] {
  %783 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %783.1
}

def @func_1964(%var_1933: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) {
  %784 = cast(%var_1933, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %785 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 108), float64] */, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
  %786 = reshape(%785, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %787 = @func_147(%786) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %788 = cosh(%784) /* ty=Tensor[(7, 10, 7), float32] */;
  %789 = %787.0;
  (%788, %789, meta[relay.Constant][33] /* ty=Tensor[(1, 108), float64] */)
}

def @func_10893(%var_10866: Tensor[(15, 3, 7), float32], %var_10867: Tensor[(15, 3, 7), float32]) -> (Tensor[(15, 3, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
  %790 = cast(%var_10867, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %791 = shape_of(%var_10866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%var_10866, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %794 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %795 = @func_9851() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %796 = mod(%792, %793) /* ty=Tensor[(15, 3, 7), float32] */;
  %797 = %794.0;
  %798 = %795.1;
  (%796, %797, %798)
}

def @func_3585() -> (Tensor[(7, 10, 7), float32],) {
  %799 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %800 = %799.0;
  (%800,)
}

def @func_10242(%var_10235: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), uint32],) {
  %801 = @func_4943() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %802 = %801.1;
  %803 = cast(%802, dtype="uint32") /* ty=Tensor[(9, 12, 1), uint32] */;
  %804 = cast(%var_10235, dtype="uint32") /* ty=Tensor[(9, 12, 8), uint32] */;
  %805 = bitwise_or(%803, %804) /* ty=Tensor[(9, 12, 8), uint32] */;
  (%805,)
}

def @func_11723() -> Tensor[(7, 10, 7), float32] {
  %806 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %806.1
}

def @func_5334() -> (Tensor[(1, 108), float64],) {
  %807 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %808 = %807.4;
  (%808,)
}

def @func_13609(%var_13587: Tensor[(7, 1, 4), int16], %var_13588: Tensor[(7, 4, 4), int16]) -> (Tensor[(7, 4, 4), int16], Tensor[(7, 10, 7), float32]) {
  %809 = cast(%var_13587, dtype="int16") /* ty=Tensor[(7, 1, 4), int16] */;
  %810 = cast(%var_13588, dtype="int16") /* ty=Tensor[(7, 4, 4), int16] */;
  %811 = @func_7983() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %812 = left_shift(%809, %810) /* ty=Tensor[(7, 4, 4), int16] */;
  %813 = %811.0;
  (%812, %813)
}

def @func_13849(%var_13843: Tensor[(972, 1), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(972, 1), float64], Tensor[(7, 10, 7), float32]) {
  %814 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %815 = cast(%var_13843, dtype="float64") /* ty=Tensor[(972, 1), float64] */;
  %816 = reshape(%815, newshape=[972]) /* ty=Tensor[(972), float64] */;
  %817 = @func_9340(%816) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 108), int32]) */;
  %818 = @func_9928() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %819 = %814.0;
  %820 = %817.0;
  %821 = %818.0;
  (%819, %820, %var_13843, %821)
}

def @func_8381() -> (Tensor[(7, 10, 7), float32],) {
  %822 = @func_6206() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %823 = %822.0;
  (%823,)
}

def @func_4304(%var_4296: Tensor[(7, 2, 8), float64]) -> Tensor[(7, 2, 8), float64] {
  %824 = cast(%var_4296, dtype="float64") /* ty=Tensor[(7, 2, 8), float64] */;
  %825 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(7, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 2, 8), float64] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%826, %827) /* ty=Tensor[(7, 2, 8), float64] */
}

def @func_12952() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(112), float64]) {
  %828 = @func_8032() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %829 = cast(meta[relay.Constant][35] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %830 = reshape(%829, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %831 = @func_7349(%830) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(1, 66), float64], Tensor[(112), float64]) */;
  %832 = %828.0;
  %833 = %831.0;
  (%832, %833, meta[relay.Constant][35] /* ty=Tensor[(112), float64] */)
}

def @func_7737(%var_7712: Tensor[(66), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %834 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %835 = cast(meta[relay.Constant][36] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %836 = cast(%var_7712, dtype="float64") /* ty=Tensor[(66), float64] */;
  %837 = reshape(%835, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %838 = reshape(%836, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %839 = @func_5185(%837, %838) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %840 = @func_7307() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) */;
  %841 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %842 = %834.1;
  %843 = %839.1;
  %844 = %840.0;
  %845 = %841.1;
  (%842, %843, meta[relay.Constant][36] /* ty=Tensor[(112), float64] */, %var_7712, %844, %845)
}

def @func_7335() -> Tensor[(66), float64] {
  %846 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %846.2
}

def @func_10818(%var_10812: Tensor[(5, 6), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(5, 6), int64]) {
  %847 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
  %848 = @func_10354() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %849 = @func_9928() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %850 = cast(%var_10812, dtype="int64") /* ty=Tensor[(5, 6), int64] */;
  %851 = reshape(%850, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %852 = @func_5065(%851) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
  %853 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
  %854 = %847.0;
  %855 = %848.0;
  %856 = %849.0;
  %857 = %852.0;
  (%853, %854, %855, %856, %857, %var_10812)
}

def @func_11358(%var_11330: Tensor[(9, 12, 2), float64], %var_11339: Tensor[(96), int64], %var_11340: Tensor[(384, 2), int64], %var_11341: Tensor[(540), int32], %var_11344: Tensor[(112, 1), float64]) -> (Tensor[(9, 12, 2), uint32], Tensor[(66), float64], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(540), int32], Tensor[(7, 2, 8), float64], Tensor[(112, 1), float64]) {
  %858 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
  %859 = %858.0;
  %860 = cast(%859, dtype="uint32") /* ty=Tensor[(9, 12, 1), uint32] */;
  %861 = cast(%var_11330, dtype="uint32") /* ty=Tensor[(9, 12, 2), uint32] */;
  %862 = cast(%var_11339, dtype="int64") /* ty=Tensor[(96), int64] */;
  %863 = cast(%var_11340, dtype="int64") /* ty=Tensor[(384, 2), int64] */;
  %864 = cast(%var_11341, dtype="int32") /* ty=Tensor[(540), int32] */;
  %865 = reshape(%862, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %866 = reshape(%863, newshape=[384, 2]) /* ty=Tensor[(384, 2), int64] */;
  %867 = reshape(%864, newshape=[540]) /* ty=Tensor[(540), int32] */;
  %868 = @func_7849(%865, %866, %867) /* ty=(Tensor[(30), int64], Tensor[(30), int64], Tensor[(6, 1, 16), float32], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(6, 11, 1), float32], Tensor[(66), float64], Tensor[(4, 15, 9), int32], Tensor[(540), int32]) */;
  %869 = cast(%var_11344, dtype="float64") /* ty=Tensor[(112, 1), float64] */;
  %870 = reshape(%869, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), float64] */;
  %871 = left_shift(%860, %861) /* ty=Tensor[(9, 12, 2), uint32] */;
  %872 = %868.6;
  %873 = @func_4304(%870) /* ty=Tensor[(7, 2, 8), float64] */;
  (%871, %872, %var_11339, %var_11340, %var_11341, %873, %var_11344)
}

def @func_6820() -> (Tensor[(7, 10, 7), float32],) {
  %874 = @func_6369() /* ty=Tensor[(7, 10, 7), float32] */;
  (%874,)
}

def @func_13994() -> (Tensor[(?, 108), bool], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %875 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
  %876 = %875.0;
  %877 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %878 = %877.1;
  %879 = cast(%878, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %880 = shape_of(%876, dtype="int32") /* ty=Tensor[(2), int32] */;
  %881 = cast(%876, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %883 = @func_13003() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %884 = %883.1;
  %885 = cast(%884, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %886 = reshape(%885, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %887 = @func_1964(%886) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
  %888 = logical_and(%881, %882) /* ty=Tensor[(?, 108), bool] */;
  %889 = %887.1;
  (%888, %884, %889)
}

def @func_13199() -> (Tensor[(7, 10, 7), float32],) {
  %890 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %891 = %890.1;
  (%891,)
}

def @func_9442() -> (Tensor[(14, 16, 10), bool], Tensor[(30), int64]) {
  %892 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 10), float64] */;
  %893 = cos(%892) /* ty=Tensor[(14, 16, 10), float64] */;
  %894 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 16, 10), float64] */, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %895 = shape_of(%893, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%893, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %898 = @func_6612() /* ty=(Tensor[(30), int64],) */;
  %899 = less_equal(%896, %897) /* ty=Tensor[(14, 16, 10), bool] */;
  %900 = %898.0;
  (%899, %900)
}

def @func_4388() -> Tensor[(7, 10, 7), float32] {
  @func_3389() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_8425(%var_8413: Tensor[(9, 12, 96), uint8]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 96), bool]) {
  %901 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
  %902 = %901.2;
  %903 = cast(%var_8413, dtype="bool") /* ty=Tensor[(9, 12, 96), bool] */;
  %904 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%902, dtype="bool") /* ty=Tensor[(9, 12, 96), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %907 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
  %908 = greater_equal(%905, %906) /* ty=Tensor[(9, 12, 96), bool] */;
  (%907, %908)
}

def @func_5418() -> (Tensor[(7, 10, 7), float32],) {
  %909 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %910 = %909.1;
  (%910,)
}

def @func_12370() -> (Tensor[(7, 10, 7), float32],) {
  %911 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  (%911,)
}

def @func_4814(%var_4746: Tensor[(40, 1), uint16]) -> (Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) {
  %912 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %913 = cast(%var_4746, dtype="float32") /* ty=Tensor[(40, 1), float32] */;
  %914 = sin(%913) /* ty=Tensor[(40, 1), float32] */;
  %915 = cast(%var_4746, dtype="uint16") /* ty=Tensor[(40, 1), uint16] */;
  %916 = reshape(%915, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint16] */;
  %917 = @func_3711(%916) /* ty=(Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) */;
  %918 = %917.0;
  %919 = cast(%918, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %920 = shape_of(%var_4746, dtype="int32") /* ty=Tensor[(2), int32] */;
  %921 = cast(%var_4746, dtype="bool") /* ty=Tensor[(40, 1), bool] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %923 = logical_and(%921, %922) /* ty=Tensor[(40, ?), bool] */;
  %924 = cast(%923, dtype="bool") /* ty=Tensor[(40, ?), bool] */;
  %925 = shape_of(%918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%918, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %928 = logical_or(%926, %927) /* ty=Tensor[(10, 4, ?), bool] */;
  %929 = cast(%928, dtype="float32") /* ty=Tensor[(10, 4, ?), float32] */;
  %930 = shape_of(%914, dtype="int32") /* ty=Tensor[(2), int32] */;
  %931 = cast(%914, dtype="float32") /* ty=Tensor[(40, 1), float32] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %933 = floor_mod(%931, %932) /* ty=Tensor[(40, ?), float32] */;
  %934 = cast(%914, dtype="bool") /* ty=Tensor[(40, 1), bool] */;
  %935 = shape_of(%933, dtype="int32") /* ty=Tensor[(2), int32] */;
  %936 = cast(%933, dtype="bool") /* ty=Tensor[(40, ?), bool] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %938 = %912.1;
  %939 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
  %940 = logical_or(%936, %937) /* ty=Tensor[(40, ?), bool] */;
  (%938, %939, %940)
}

def @func_7460(%var_7415: Tensor[(5, 6, 2), bool], %var_7416: Tensor[(5, 6, 2), bool]) -> (Tensor[(5, 6, 2), bool], Tensor[(7, 10, 7), float32]) {
  %941 = cast(%var_7416, dtype="bool") /* ty=Tensor[(5, 6, 2), bool] */;
  %942 = shape_of(%var_7415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_7415, dtype="bool") /* ty=Tensor[(5, 6, 2), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %946 = logical_and(%943, %944) /* ty=Tensor[(5, 6, 2), bool] */;
  %947 = %945.1;
  (%946, %947)
}

def @func_12490() -> Tensor[(7, 10, 7), float32] {
  %948 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %948.1
}

def @func_14078() -> Tensor[(7, 10, 7), uint16] {
  %949 = @func_11024() /* ty=(Tensor[(7, 10, 7), uint16],) */;
  %949.0
}

def @func_7849(%var_7816: Tensor[(96), int64], %var_7817: Tensor[(384, 2), int64], %var_7847: Tensor[(540), int32]) -> (Tensor[(30), int64], Tensor[(30), int64], Tensor[(6, 1, 16), float32], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(6, 11, 1), float32], Tensor[(66), float64], Tensor[(4, 15, 9), int32], Tensor[(540), int32]) {
  %950 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %951 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %952 = cast(%var_7816, dtype="int64") /* ty=Tensor[(96), int64] */;
  %953 = cast(%var_7817, dtype="int64") /* ty=Tensor[(384, 2), int64] */;
  %954 = reshape(%952, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), int64] */;
  %955 = reshape(%953, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), int64] */;
  %956 = @func_3006(%954, %955) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) */;
  %957 = cast(meta[relay.Constant][38] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %958 = reshape(%957, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %959 = @func_921(%958) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %960 = cast(%var_7847, dtype="int32") /* ty=Tensor[(540), int32] */;
  %961 = reshape(%960, newshape=[4, 15, 9]) /* ty=Tensor[(4, 15, 9), int32] */;
  %962 = %950.2;
  %963 = %951.2;
  %964 = %956.1;
  %965 = %959.1;
  %966 = @func_3738(%961) /* ty=Tensor[(4, 15, 9), int32] */;
  (%962, %963, %964, %var_7816, %var_7817, %965, meta[relay.Constant][38] /* ty=Tensor[(66), float64] */, %966, %var_7847)
}

def @func_12026(%var_11969: Tensor[(14, 15, 4), int8]) -> (Tensor[(14, 15, 4), int8], Tensor[(7, 10, 7), float32], Tensor[(14, 15, 4), float32]) {
  %967 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 15, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 15, 4), int8] */;
  %968 = shape_of(%var_11969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %969 = cast(%var_11969, dtype="int8") /* ty=Tensor[(14, 15, 4), int8] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %971 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %972 = cast(%var_11969, dtype="float32") /* ty=Tensor[(14, 15, 4), float32] */;
  %973 = maximum(%969, %970) /* ty=Tensor[(14, 15, 4), int8] */;
  %974 = %971.0;
  %975 = erf(%972) /* ty=Tensor[(14, 15, 4), float32] */;
  (%973, %974, %975)
}

def @func_8312() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
  %976 = @func_6369() /* ty=Tensor[(7, 10, 7), float32] */;
  %977 = cast(%976, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %978 = reshape(%977, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %979 = @func_5972(%978) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) */;
  %980 = %979.0;
  (%976, %980)
}

def @func_6607() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %981 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %982 = %981.0;
  %983 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  (%982, %983)
}

def @func_13257(%var_13218: Tensor[(3, 11, 5), float64]) -> (Tensor[(3, 11, 5), float64], Tensor[(30, 1), float32], Tensor[(10, 3), int64], Tensor[(7, 10, 7), bool]) {
  %984 = cast(%var_13218, dtype="float64") /* ty=Tensor[(3, 11, 5), float64] */;
  %985 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 3), int64] */, dtype="int64") /* ty=Tensor[(10, 3), int64] */;
  %986 = reshape(%985, newshape=[30, 1]) /* ty=Tensor[(30, 1), int64] */;
  %987 = @func_3955(%986) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) */;
  %988 = @func_8312() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */;
  %989 = sqrt(%984) /* ty=Tensor[(3, 11, 5), float64] */;
  %990 = %987.2;
  %991 = %988.1;
  (%989, %990, meta[relay.Constant][40] /* ty=Tensor[(10, 3), int64] */, %991)
}

def @func_4611() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %992 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %993 = %992.1;
  %994 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  (%993, %994)
}

def @func_3671() -> (Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) {
  %995 = cast(meta[relay.Constant][41] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %996 = reshape(%995, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %997 = @func_921(%996) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %998 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
  %999 = cast(%998, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %1000 = reshape(%999, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %1001 = @func_1964(%1000) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
  %1002 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %1003 = %997.0;
  %1004 = %1001.2;
  (%1002, %1003, meta[relay.Constant][41] /* ty=Tensor[(66), float64] */, %998, %1004)
}

def @func_921(%var_913: Tensor[(6, 11, 1), float64]) -> (Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) {
  %1005 = cast(%var_913, dtype="float64") /* ty=Tensor[(6, 11, 1), float64] */;
  %1006 = cast(%var_913, dtype="float32") /* ty=Tensor[(6, 11, 1), float32] */;
  %1007 = asin(%1005) /* ty=Tensor[(6, 11, 1), float64] */;
  %1008 = sqrt(%1006) /* ty=Tensor[(6, 11, 1), float32] */;
  (%1007, %1008)
}

def @func_6493(%var_6485: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), bool],) {
  %1009 = @func_5550() /* ty=Tensor[(9, 12, 1), float64] */;
  %1010 = cast(%1009, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %1011 = cast(%var_6485, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %1012 = equal(%1010, %1011) /* ty=Tensor[(9, 12, 2), bool] */;
  (%1012,)
}

def @func_11526() -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float64]) {
  %1013 = @func_9666() /* ty=(Tensor[(6, 11, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1014 = cast(meta[relay.Constant][42] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %1015 = reshape(%1014, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %1016 = @func_3212(%1015) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %1017 = @func_6912() /* ty=(Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) */;
  %1018 = %1013.1;
  %1019 = %1016.1;
  %1020 = %1017.1;
  (%1018, %1019, meta[relay.Constant][42] /* ty=Tensor[(30), int64] */, %1020)
}

def @func_9212(%var_9162: Tensor[(225), float64], %var_9186: Tensor[(10, 4), uint16], %var_9200: Tensor[(768), int64]) -> (Tensor[(9, 12, 1), float64], Tensor[(225), float64], Tensor[(9, 5, 5), float32], Tensor[(40, ?), bool], Tensor[(10, 4), uint16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(432), float64], Tensor[(96), int64], Tensor[(768), int64]) {
  %1021 = @func_8885() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %1022 = cast(%var_9162, dtype="float64") /* ty=Tensor[(225), float64] */;
  %1023 = reshape(%1022, newshape=[9, 5, 5]) /* ty=Tensor[(9, 5, 5), float64] */;
  %1024 = @func_6014(%1023) /* ty=Tensor[(9, 5, 5), int32] */;
  %1025 = cast(%1024, dtype="float32") /* ty=Tensor[(9, 5, 5), float32] */;
  %1026 = cast(%var_9186, dtype="uint16") /* ty=Tensor[(10, 4), uint16] */;
  %1027 = reshape(%1026, newshape=[40, 1]) /* ty=Tensor[(40, 1), uint16] */;
  %1028 = @func_4814(%1027) /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) */;
  %1029 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1030 = cast(meta[relay.Constant][43] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %1031 = cast(meta[relay.Constant][44] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %1032 = cast(%var_9200, dtype="int64") /* ty=Tensor[(768), int64] */;
  %1033 = reshape(%1030, newshape=[4, 108]) /* ty=Tensor[(4, 108), float64] */;
  %1034 = reshape(%1031, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %1035 = reshape(%1032, newshape=[768]) /* ty=Tensor[(768), int64] */;
  %1036 = @func_5301(%1033, %1034, %1035) /* ty=(Tensor[(16, 108), int8], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(4, 108), bool], Tensor[(16, 108), float32], Tensor[(7, 10, 7), float32], Tensor[(96), int64], Tensor[(768), int64], Tensor[(5, 13, 7), float32]) */;
  %1037 = %1021.2;
  %1038 = sinh(%1025) /* ty=Tensor[(9, 5, 5), float32] */;
  %1039 = %1028.2;
  %1040 = %1029.0;
  %1041 = %1036.2;
  (%1037, %var_9162, %1038, %1039, %var_9186, %1040, %1041, meta[relay.Constant][43] /* ty=Tensor[(432), float64] */, meta[relay.Constant][44] /* ty=Tensor[(96), int64] */, %var_9200)
}

def @func_13946(%var_13927: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(108), float64]) {
  %1042 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1043 = cast(%var_13927, dtype="float64") /* ty=Tensor[(108), float64] */;
  %1044 = reshape(%1043, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %1045 = @func_12233(%1044) /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(108), float64]) */;
  %1046 = %1042.0;
  %1047 = %1045.2;
  (%1046, %1047, %var_13927)
}

def @func_2897() -> Tensor[(7, 10, 7), float32] {
  %1048 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %1049 = cast(%1048, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  sqrt(%1049) /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_514(%var_502: Tensor[(5, 3, 2), int64]) -> Tensor[(5, 3, 2), int64] {
  %1050 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 3, 2), int64] */, dtype="int64") /* ty=Tensor[(1, 3, 2), int64] */;
  %1051 = cast(%var_502, dtype="int64") /* ty=Tensor[(5, 3, 2), int64] */;
  multiply(%1050, %1051) /* ty=Tensor[(5, 3, 2), int64] */
}

def @func_7974() -> Tensor[(7, 10, 7), float32] {
  @func_2897() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_11308(%var_11302: Tensor[(6600), bool]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(6600), bool]) {
  %1052 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1053 = @func_8885() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %1054 = @func_9554() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1055 = cast(%var_11302, dtype="bool") /* ty=Tensor[(6600), bool] */;
  %1056 = reshape(%1055, newshape=[10, 10, 66]) /* ty=Tensor[(10, 10, 66), bool] */;
  %1057 = @func_6464(%1056) /* ty=(Tensor[(6, 11, 1), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(9, 12, 1), float64], Tensor[(10, 10, 66), int16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64]) */;
  %1058 = %1052.0;
  %1059 = %1053.1;
  %1060 = %1054.2;
  %1061 = %1057.2;
  (%1058, %1059, %1060, %1061, %var_11302)
}

def @func_12176() -> Tensor[(7, 10, 7), float32] {
  %1062 = @func_6607() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1062.1
}

def @func_3212(%var_3188: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) {
  %1063 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1064 = cast(%var_3188, dtype="int64") /* ty=Tensor[(30), int64] */;
  %1065 = reshape(%1064, newshape=[5, 3, 2]) /* ty=Tensor[(5, 3, 2), int64] */;
  %1066 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %1067 = %1066.0;
  %1068 = cast(%1067, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %1069 = acosh(%1068) /* ty=Tensor[(5, 13, 7), float64] */;
  %1070 = cast(%1069, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %1071 = %1063.1;
  %1072 = @func_514(%1065) /* ty=Tensor[(5, 3, 2), int64] */;
  %1073 = atanh(%1070) /* ty=Tensor[(5, 13, 7), float32] */;
  (%1071, %1072, %var_3188, %1073)
}

def @func_14431(%var_14423: Tensor[(2, 56), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(2, 56), float64]) {
  %1074 = cast(%var_14423, dtype="float64") /* ty=Tensor[(2, 56), float64] */;
  %1075 = reshape(%1074, newshape=[4, 28]) /* ty=Tensor[(4, 28), float64] */;
  %1076 = @func_6555(%1075) /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1077 = @func_8775() /* ty=Tensor[(7, 10, 7), float32] */;
  %1078 = %1076.5;
  (%1077, %1078, %var_14423)
}

def @func_8098() -> (Tensor[(13, 11, 15), uint16], Tensor[(7, 10, 7), float32]) {
  %1079 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 11, 15), uint16] */, dtype="uint16") /* ty=Tensor[(13, 11, 15), uint16] */;
  %1080 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(13, 11, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1081 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 11, 15), uint16] */, dtype="uint16") /* ty=Tensor[(13, 11, 15), uint16] */;
  %1082 = dyn.reshape(%1079, %1080, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1083 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1084 = right_shift(%1081, %1082) /* ty=Tensor[(13, 11, 15), uint16] */;
  %1085 = %1083.0;
  (%1084, %1085)
}

def @func_7640() -> (Tensor[(7, 10, 7), float32], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) {
  %1086 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1087 = cast(meta[relay.Constant][48] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %1088 = reshape(%1087, newshape=[4, 1, 4]) /* ty=Tensor[(4, 1, 4), float64] */;
  %1089 = @func_4411(%1088) /* ty=(Tensor[(4, 1, 4), float64],) */;
  %1090 = %1086.3;
  %1091 = %1089.0;
  (%1090, %1091, meta[relay.Constant][48] /* ty=Tensor[(16), float64] */)
}

def @func_14597() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1092 = @func_9130() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1093 = %1092.0;
  %1094 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1093, %1094)
}

def @func_4435() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %1095 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %1096 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %1097 = %1095.1;
  %1098 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
  %1099 = %1096.1;
  (%1097, %1098, %1099)
}

def @func_11116(%var_11030: Tensor[(9, 14, 3), float64], %var_11065: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 7), float32], Tensor[(9, 14, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 8), uint32], Tensor[(864), float64], Tensor[(7, 10, 7), float32]) {
  %1100 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1101 = cast(%var_11065, dtype="float64") /* ty=Tensor[(108), float64] */;
  %1102 = reshape(%1101, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %1103 = @func_147(%1102) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %1104 = @func_10508() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1105 = cast(%var_11030, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %1106 = rsqrt(%1105) /* ty=Tensor[(9, 14, 3), float64] */;
  %1107 = cast(%1106, dtype="float32") /* ty=Tensor[(9, 14, 3), float32] */;
  %1108 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1109 = cast(meta[relay.Constant][49] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %1110 = reshape(%1109, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
  %1111 = @func_10242(%1110) /* ty=(Tensor[(9, 12, 8), uint32],) */;
  %1112 = %1100.0;
  %1113 = %1103.0;
  %1114 = %1104.0;
  %1115 = exp(%1107) /* ty=Tensor[(9, 14, 3), float32] */;
  %1116 = %1108.0;
  %1117 = %1111.0;
  %1118 = @func_10519() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1112, %1113, %var_11065, %1114, %1115, %1116, %1117, meta[relay.Constant][49] /* ty=Tensor[(864), float64] */, %1118)
}

def @func_9851() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %1119 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
  %1120 = cast(%1119, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %1121 = reshape(%1120, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %1122 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1123 = cast(meta[relay.Constant][50] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %1124 = reshape(%1123, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %1125 = @func_4203(%1124) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %1126 = @func_2916(%1121) /* ty=Tensor[(7, 10, 7), bool] */;
  %1127 = %1122.0;
  %1128 = %1125.0;
  (%1119, %1126, %1127, %1128, meta[relay.Constant][50] /* ty=Tensor[(30), int64] */)
}

def @func_13648() -> Tensor[(7, 10, 7), float32] {
  %1129 = @func_12952() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(112), float64]) */;
  %1129.1
}

def @func_6940() -> Tensor[(7, 10, 7), float32] {
  %1130 = @func_5418() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1130.0
}

def @func_147(%var_136: Tensor[(9, 12, 1), float64]) -> (Tensor[(9, 12, 1), float64],) {
  %1131 = cast(%var_136, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %1132 = asin(%1131) /* ty=Tensor[(9, 12, 1), float64] */;
  (%1132,)
}

def @func_11448() -> (Tensor[(1, 108), float32],) {
  %1133 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %1134 = cast(%1133, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %1135 = rsqrt(%1134) /* ty=Tensor[(1, 108), float32] */;
  (%1135,)
}

def @func_8153() -> Tensor[(7, 10, 7), float32] {
  @func_4388() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_9080() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1136 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %1137 = %1136.0;
  %1138 = @func_4071() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1137, %1138)
}

def @func_6709() -> Tensor[(7, 10, 7), float32] {
  @func_2841() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_6912() -> (Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) {
  %1139 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1140 = %1139.0;
  %1141 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 10, 7), float32] */, dtype="uint16") /* ty=Tensor[(7, 10, 7), uint16] */;
  %1142 = shape_of(%1140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1143 = cast(%1140, dtype="uint16") /* ty=Tensor[(7, 10, 7), uint16] */;
  %1144 = dyn.reshape(%1141, %1142, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1145 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 10, 7), float32] */, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
  %1146 = bitwise_or(%1143, %1144) /* ty=Tensor[(7, 10, 7), uint16] */;
  %1147 = atan(%1145) /* ty=Tensor[(7, 10, 7), float64] */;
  (%1146, %1147)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_11308(%var_11302: Tensor[(6600), bool]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(6600), bool]) {
  %0 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1 = @func_8885() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %2 = @func_9554() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %3 = cast(%var_11302, dtype="bool") /* ty=Tensor[(6600), bool] */;
  %4 = reshape(%3, newshape=[10, 10, 66]) /* ty=Tensor[(10, 10, 66), bool] */;
  %5 = @func_6464(%4) /* ty=(Tensor[(6, 11, 1), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(9, 12, 1), float64], Tensor[(10, 10, 66), int16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64]) */;
  %6 = %0.0;
  %7 = %1.1;
  %8 = %2.2;
  %9 = %5.2;
  (%6, %7, %8, %9, %var_11302)
}

def @func_13037() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %13 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %10 = @func_12869() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %11 = %10.1;
    %12 = @func_9515() /* ty=Tensor[(7, 10, 7), float32] */;
    (%11, %12)
  };
  %13() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_13948(%var_13947: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(108), float64]) {
  %20 = fn (%var_13927: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(108), float64]) {
    %14 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %15 = cast(%var_13927, dtype="float64") /* ty=Tensor[(108), float64] */;
    %16 = reshape(%15, newshape=[108]) /* ty=Tensor[(108), float64] */;
    %17 = @func_12233(%16) /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(108), float64]) */;
    %18 = %14.0;
    %19 = %17.2;
    (%18, %19, %var_13927)
  };
  %20(%var_13947) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(108), float64]) */
}

def @func_7507() -> Tensor[(7, 10, 7), float32] {
  @func_7505() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_13637() -> Tensor[(7, 10, 7), float32] {
  @func_13635() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_3487() -> (Tensor[(7, 10, 7), float32],) {
  @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_4577() -> Tensor[(7, 10, 7), float32] {
  @func_4575() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_12554(%var_12552: Tensor[(10, 16, 1), float32]) -> Tensor[(10, 16, ?), float64] {
  @func_12551(%var_12552) /* ty=Tensor[(10, 16, ?), float64] */
}

def @func_9999() -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  @func_9997() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */
}

def @func_14102() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %21 = @func_12370() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %22 = @func_8153() /* ty=Tensor[(7, 10, 7), float32] */;
  %23 = %21.0;
  (%22, %23)
}

def @func_3215(%var_3213: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) {
  @func_3212(%var_3213) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */
}

def @func_12551(%var_12530: Tensor[(10, 16, 1), float32]) -> Tensor[(10, 16, ?), float64] {
  %24 = cast(%var_12530, dtype="float32") /* ty=Tensor[(10, 16, 1), float32] */;
  %25 = rsqrt(%24) /* ty=Tensor[(10, 16, 1), float32] */;
  %26 = cast(%var_12530, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="float64") /* ty=Tensor[(10, 16, 1), float64] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%28, %29) /* ty=Tensor[(10, 16, ?), float64] */
}

def @func_12727() -> (Tensor[(7, 10, 7), float32],) {
  %32 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %30 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %31 = %30.1;
    (%31,)
  };
  %32() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_12952() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(112), float64]) {
  %33 = @func_8032() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %34 = cast(meta[relay.Constant][0] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %35 = reshape(%34, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %36 = @func_7349(%35) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(1, 66), float64], Tensor[(112), float64]) */;
  %37 = %33.0;
  %38 = %36.0;
  (%37, %38, meta[relay.Constant][0] /* ty=Tensor[(112), float64] */)
}

def @func_13995() -> (Tensor[(?, 108), bool], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %54 = fn () -> (Tensor[(?, 108), bool], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
    %39 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
    %40 = %39.0;
    %41 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
    %42 = %41.1;
    %43 = cast(%42, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
    %44 = shape_of(%40, dtype="int32") /* ty=Tensor[(2), int32] */;
    %45 = cast(%40, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %47 = @func_13003() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %48 = %47.1;
    %49 = cast(%48, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %50 = reshape(%49, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %51 = @func_1964(%50) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
    %52 = logical_and(%45, %46) /* ty=Tensor[(?, 108), bool] */;
    %53 = %51.1;
    (%52, %48, %53)
  };
  %54() /* ty=(Tensor[(?, 108), bool], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */
}

def @func_3287() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %56 = reshape(%55, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %57 = @func_3212(%56) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %58 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %59 = cast(meta[relay.Constant][1] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %60 = reshape(%59, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %61 = @func_3212(%60) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %62 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %63 = %57.0;
  %64 = %58.0;
  %65 = %61.2;
  (%62, %63, meta[relay.Constant][1] /* ty=Tensor[(30), int64] */, %64, %65)
}

def @func_11284() -> (Tensor[(9, 12, 96), uint8],) {
  @func_11282() /* ty=(Tensor[(9, 12, 96), uint8],) */
}

def @func_4364() -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) {
  %72 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) {
    %66 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %67 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
    %68 = reshape(%67, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
    %69 = @func_147(%68) /* ty=(Tensor[(9, 12, 1), float64],) */;
    %70 = %66.0;
    %71 = %69.0;
    (%70, %71, meta[relay.Constant][2] /* ty=Tensor[(3, 36), float64] */)
  };
  %72() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */
}

def @func_10182() -> Tensor[(30), int64] {
  %73 = @func_6612() /* ty=(Tensor[(30), int64],) */;
  %73.0
}

def @func_13894() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %77 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %74 = @func_13494() /* ty=(Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */;
    %75 = %74.1;
    %76 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
    (%75, %76)
  };
  %77() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_13496() -> (Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  @func_13494() /* ty=(Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */
}

def @func_3362() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) {
  @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */
}

def @func_4413(%var_4412: Tensor[(4, 1, 4), float64]) -> (Tensor[(4, 1, 4), float64],) {
  %80 = fn (%var_4406: Tensor[(4, 1, 4), float64]) -> (Tensor[(4, 1, 4), float64],) {
    %78 = cast(%var_4406, dtype="float64") /* ty=Tensor[(4, 1, 4), float64] */;
    %79 = cos(%78) /* ty=Tensor[(4, 1, 4), float64] */;
    (%79,)
  };
  %80(%var_4412) /* ty=(Tensor[(4, 1, 4), float64],) */
}

def @func_9900(%var_9898: Tensor[(40), uint16]) -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(40), uint16]) {
  @func_9897(%var_9898) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(40), uint16]) */
}

def @func_9897(%var_9877: Tensor[(40), uint16]) -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(40), uint16]) {
  %81 = cast(%var_9877, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %82 = reshape(%81, newshape=[40]) /* ty=Tensor[(40), uint16] */;
  %83 = @func_7236(%82) /* ty=(Tensor[(7, 10, 7), int8], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(40), uint16], Tensor[(1, 108), float64]) */;
  %84 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
  %85 = %83.4;
  (%84, %85, %var_9877)
}

def @func_3485() -> (Tensor[(7, 10, 7), float32],) {
  %86 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
  (%86,)
}

def @func_7039(%var_7037: Tensor[(13, 9, 2), bool]) -> (Tensor[(13, 9, 2), bool],) {
  @func_7036(%var_7037) /* ty=(Tensor[(13, 9, 2), bool],) */
}

def @func_10820(%var_10819: Tensor[(5, 6), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(5, 6), int64]) {
  %98 = fn (%var_10812: Tensor[(5, 6), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(5, 6), int64]) {
    %87 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
    %88 = @func_10354() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %89 = @func_9928() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %90 = cast(%var_10812, dtype="int64") /* ty=Tensor[(5, 6), int64] */;
    %91 = reshape(%90, newshape=[30]) /* ty=Tensor[(30), int64] */;
    %92 = @func_5065(%91) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
    %93 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
    %94 = %87.0;
    %95 = %88.0;
    %96 = %89.0;
    %97 = %92.0;
    (%93, %94, %95, %96, %97, %var_10812)
  };
  %98(%var_10819) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(5, 6), int64]) */
}

def @func_14762() -> (Tensor[(11, 108), bool],) {
  %107 = fn () -> (Tensor[(11, 108), bool],) {
    %99 = @func_11448() /* ty=(Tensor[(1, 108), float32],) */;
    %100 = %99.0;
    %101 = cast(%100, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
    %102 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 108), float32] */, dtype="uint16") /* ty=Tensor[(11, 108), uint16] */;
    %103 = right_shift(%101, %102) /* ty=Tensor[(11, 108), uint16] */;
    %104 = cast(%103, dtype="bool") /* ty=Tensor[(11, 108), bool] */;
    %105 = cast(%100, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
    %106 = greater_equal(%104, %105) /* ty=Tensor[(11, 108), bool] */;
    (%106,)
  };
  %107() /* ty=(Tensor[(11, 108), bool],) */
}

def @func_12879() -> (Tensor[(1, 108), float64],) {
  @func_12877() /* ty=(Tensor[(1, 108), float64],) */
}

def @func_7854(%var_7851: Tensor[(96), int64], %var_7852: Tensor[(384, 2), int64], %var_7853: Tensor[(540), int32]) -> (Tensor[(30), int64], Tensor[(30), int64], Tensor[(6, 1, 16), float32], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(6, 11, 1), float32], Tensor[(66), float64], Tensor[(4, 15, 9), int32], Tensor[(540), int32]) {
  @func_7849(%var_7851, %var_7852, %var_7853) /* ty=(Tensor[(30), int64], Tensor[(30), int64], Tensor[(6, 1, 16), float32], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(6, 11, 1), float32], Tensor[(66), float64], Tensor[(4, 15, 9), int32], Tensor[(540), int32]) */
}

def @func_11844() -> (Tensor[(30), int64],) {
  %108 = @func_10182() /* ty=Tensor[(30), int64] */;
  (%108,)
}

def @func_13260(%var_13258: Tensor[(3, 11, 5), float64]) -> (Tensor[(3, 11, 5), float64], Tensor[(30, 1), float32], Tensor[(10, 3), int64], Tensor[(7, 10, 7), bool]) {
  @func_13257(%var_13258) /* ty=(Tensor[(3, 11, 5), float64], Tensor[(30, 1), float32], Tensor[(10, 3), int64], Tensor[(7, 10, 7), bool]) */
}

def @func_10896(%var_10894: Tensor[(15, 3, 7), float32], %var_10895: Tensor[(15, 3, 7), float32]) -> (Tensor[(15, 3, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
  %118 = fn (%var_10866: Tensor[(15, 3, 7), float32], %var_10867: Tensor[(15, 3, 7), float32]) -> (Tensor[(15, 3, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
    %109 = cast(%var_10867, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %110 = shape_of(%var_10866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%var_10866, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %113 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %114 = @func_9851() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
    %115 = mod(%111, %112) /* ty=Tensor[(15, 3, 7), float32] */;
    %116 = %113.0;
    %117 = %114.1;
    (%115, %116, %117)
  };
  %118(%var_10894, %var_10895) /* ty=(Tensor[(15, 3, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */
}

def @func_5185(%var_5152: Tensor[(112), float64], %var_5158: Tensor[(66), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %119 = cast(%var_5152, dtype="float64") /* ty=Tensor[(112), float64] */;
  %120 = reshape(%119, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), float64] */;
  %121 = cast(%var_5158, dtype="float64") /* ty=Tensor[(66), float64] */;
  %122 = reshape(%121, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %123 = @func_921(%122) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %124 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %126 = reshape(%125, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %127 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %128 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %129 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %130 = @func_4304(%120) /* ty=Tensor[(7, 2, 8), float64] */;
  %131 = %123.0;
  %132 = @func_3072(%126) /* ty=Tensor[(7, 10, 7), bool] */;
  %133 = %127.1;
  %134 = %128.1;
  %135 = %129.0;
  (%124, %130, %var_5152, %131, %var_5158, %132, %133, %134, %135)
}

def @func_8777() -> Tensor[(7, 10, 7), float32] {
  @func_8775() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_12767() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_12765() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_6370() -> Tensor[(7, 10, 7), float32] {
  %137 = fn () -> Tensor[(7, 10, 7), float32] {
    %136 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
    %136.0
  };
  %137() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_8625(%var_8623: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32]) {
  @func_8622(%var_8623) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32]) */
}

def @func_9997() -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %138 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %139 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %140 = %138.0;
  %141 = %139.1;
  (%140, %141)
}

def @func_3390() -> Tensor[(7, 10, 7), float32] {
  %149 = fn () -> Tensor[(7, 10, 7), float32] {
    %142 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
    %143 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %144 = %143.0;
    %145 = cast(%144, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %146 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(%142, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%147, %148) /* ty=Tensor[(7, 10, 7), float32] */
  };
  %149() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_13649() -> Tensor[(7, 10, 7), float32] {
  %151 = fn () -> Tensor[(7, 10, 7), float32] {
    %150 = @func_12952() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(112), float64]) */;
    %150.1
  };
  %151() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_6614() -> (Tensor[(30), int64],) {
  @func_6612() /* ty=(Tensor[(30), int64],) */
}

def @func_14612() -> (Tensor[(7, 10, 7), float32],) {
  %154 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %152 = @func_8491() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %153 = %152.2;
    (%153,)
  };
  %154() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_4814(%var_4746: Tensor[(40, 1), uint16]) -> (Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) {
  %155 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %156 = cast(%var_4746, dtype="float32") /* ty=Tensor[(40, 1), float32] */;
  %157 = sin(%156) /* ty=Tensor[(40, 1), float32] */;
  %158 = cast(%var_4746, dtype="uint16") /* ty=Tensor[(40, 1), uint16] */;
  %159 = reshape(%158, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint16] */;
  %160 = @func_3711(%159) /* ty=(Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %163 = shape_of(%var_4746, dtype="int32") /* ty=Tensor[(2), int32] */;
  %164 = cast(%var_4746, dtype="bool") /* ty=Tensor[(40, 1), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %166 = logical_and(%164, %165) /* ty=Tensor[(40, ?), bool] */;
  %167 = cast(%166, dtype="bool") /* ty=Tensor[(40, ?), bool] */;
  %168 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%161, dtype="bool") /* ty=Tensor[(10, 4, 1), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = logical_or(%169, %170) /* ty=Tensor[(10, 4, ?), bool] */;
  %172 = cast(%171, dtype="float32") /* ty=Tensor[(10, 4, ?), float32] */;
  %173 = shape_of(%157, dtype="int32") /* ty=Tensor[(2), int32] */;
  %174 = cast(%157, dtype="float32") /* ty=Tensor[(40, 1), float32] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %176 = floor_mod(%174, %175) /* ty=Tensor[(40, ?), float32] */;
  %177 = cast(%157, dtype="bool") /* ty=Tensor[(40, 1), bool] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(2), int32] */;
  %179 = cast(%176, dtype="bool") /* ty=Tensor[(40, ?), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %181 = %155.1;
  %182 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
  %183 = logical_or(%179, %180) /* ty=Tensor[(40, ?), bool] */;
  (%181, %182, %183)
}

def @func_12295(%var_12290: Tensor[(2, 108), float32]) -> (Tensor[(30), int64], Tensor[(2, 108), bool]) {
  %184 = @func_10451() /* ty=(Tensor[(30), int64], Tensor[(6, 11, 1), float64], Tensor[(112), float64], Tensor[(66), float64]) */;
  %185 = @func_11448() /* ty=(Tensor[(1, 108), float32],) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %188 = cast(%var_12290, dtype="bool") /* ty=Tensor[(2, 108), bool] */;
  %189 = %184.0;
  %190 = not_equal(%187, %188) /* ty=Tensor[(2, 108), bool] */;
  (%189, %190)
}

def @func_2842() -> Tensor[(7, 10, 7), float32] {
  %192 = fn () -> Tensor[(7, 10, 7), float32] {
    %191 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
    %191.1
  };
  %192() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_3986() -> Tensor[(7, 10, 7), float32] {
  %193 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %193.1
}

def @func_10184() -> Tensor[(30), int64] {
  @func_10182() /* ty=Tensor[(30), int64] */
}

def @func_14254() -> (Tensor[(5, 3, 2), int64], Tensor[(7, 10, 7), float32]) {
  %198 = fn () -> (Tensor[(5, 3, 2), int64], Tensor[(7, 10, 7), float32]) {
    %194 = @func_11526() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float64]) */;
    %195 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %196 = %194.1;
    %197 = %195.1;
    (%196, %197)
  };
  %198() /* ty=(Tensor[(5, 3, 2), int64], Tensor[(7, 10, 7), float32]) */
}

def @func_3419() -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %199 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %200 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %201 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %202 = %199.2;
  %203 = %200.0;
  %204 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %205 = %201.0;
  (%202, %203, %204, %205)
}

def @func_4817(%var_4815: Tensor[(40, 1), uint16]) -> (Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) {
  @func_4814(%var_4815) /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) */
}

def @func_12136() -> Tensor[(7, 10, 7), float32] {
  @func_12134() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_6595(%var_6593: Tensor[(1, 30), int64], %var_6594: Tensor[(22, 3), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(1, 30), int64], Tensor[(7, 10, 7), float32], Tensor[(112), float64], Tensor[(22, 3), float64]) {
  @func_6591(%var_6593, %var_6594) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(1, 30), int64], Tensor[(7, 10, 7), float32], Tensor[(112), float64], Tensor[(22, 3), float64]) */
}

def @func_12298(%var_12296: Tensor[(2, 108), float32]) -> (Tensor[(30), int64], Tensor[(2, 108), bool]) {
  @func_12295(%var_12296) /* ty=(Tensor[(30), int64], Tensor[(2, 108), bool]) */
}

def @func_13377() -> Tensor[(30), int64] {
  %207 = fn () -> Tensor[(30), int64] {
    %206 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
    %206.2
  };
  %207() /* ty=Tensor[(30), int64] */
}

def @func_12028(%var_12027: Tensor[(14, 15, 4), int8]) -> (Tensor[(14, 15, 4), int8], Tensor[(7, 10, 7), float32], Tensor[(14, 15, 4), float32]) {
  %217 = fn (%var_11969: Tensor[(14, 15, 4), int8]) -> (Tensor[(14, 15, 4), int8], Tensor[(7, 10, 7), float32], Tensor[(14, 15, 4), float32]) {
    %208 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 15, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 15, 4), int8] */;
    %209 = shape_of(%var_11969, dtype="int32") /* ty=Tensor[(3), int32] */;
    %210 = cast(%var_11969, dtype="int8") /* ty=Tensor[(14, 15, 4), int8] */;
    %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %212 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %213 = cast(%var_11969, dtype="float32") /* ty=Tensor[(14, 15, 4), float32] */;
    %214 = maximum(%210, %211) /* ty=Tensor[(14, 15, 4), int8] */;
    %215 = %212.0;
    %216 = erf(%213) /* ty=Tensor[(14, 15, 4), float32] */;
    (%214, %215, %216)
  };
  %217(%var_12027) /* ty=(Tensor[(14, 15, 4), int8], Tensor[(7, 10, 7), float32], Tensor[(14, 15, 4), float32]) */
}

def @func_3289() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */
}

def @func_8746(%var_8731: Tensor[(12, 16, 10), int8], %var_8732: Tensor[(12, 16, 10), int8]) -> Tensor[(12, 16, 10), int8] {
  %218 = cast(%var_8732, dtype="int8") /* ty=Tensor[(12, 16, 10), int8] */;
  %219 = shape_of(%var_8731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_8731, dtype="int8") /* ty=Tensor[(12, 16, 10), int8] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%220, %221) /* ty=Tensor[(12, 16, 10), int8] */
}

def @func_5483() -> (Tensor[(9, 12, 1), float64],) {
  %222 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %223 = %222.2;
  (%223,)
}

def @func_13613(%var_13611: Tensor[(7, 1, 4), int16], %var_13612: Tensor[(7, 4, 4), int16]) -> (Tensor[(7, 4, 4), int16], Tensor[(7, 10, 7), float32]) {
  @func_13609(%var_13611, %var_13612) /* ty=(Tensor[(7, 4, 4), int16], Tensor[(7, 10, 7), float32]) */
}

def @func_4217() -> Tensor[(1, 108), float64] {
  %225 = fn () -> Tensor[(1, 108), float64] {
    %224 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %224.4
  };
  %225() /* ty=Tensor[(1, 108), float64] */
}

def @func_2966() -> (Tensor[(7, 10, 7), float32],) {
  %227 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %226 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
    (%226,)
  };
  %227() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_8937() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %228 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %229 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %230 = %228.0;
  %231 = %229.0;
  (%230, %231)
}

def @main(%var_14901: Tensor[(13, 30), int64], %var_14927: Tensor[(11, 108), bool]) -> (Tensor[(9, 108), bool], Tensor[(18, 54), float64], Tensor[(13, 30), bool], Tensor[(11, 108), bool], Tensor[(13, 30), bool], Tensor[(11, 108), float32], Tensor[(11, 108), float32]) {
  %232 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 54), float64] */, dtype="float64") /* ty=Tensor[(18, 54), float64] */;
  %233 = reshape(%232, newshape=[9, 108]) /* ty=Tensor[(9, 108), float64] */;
  %234 = @func_7596(%233) /* ty=(Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) */;
  %235 = @func_12366() /* ty=(Tensor[(1, 30), int64],) */;
  %236 = %235.0;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %238 = cast(%var_14901, dtype="float32") /* ty=Tensor[(13, 30), float32] */;
  %239 = power(%237, %238) /* ty=Tensor[(13, 30), float32] */;
  %240 = cast(%var_14901, dtype="bool") /* ty=Tensor[(13, 30), bool] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(2), int32] */;
  %242 = cast(%239, dtype="bool") /* ty=Tensor[(13, 30), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %244 = @func_14762() /* ty=(Tensor[(11, 108), bool],) */;
  %245 = %244.0;
  %246 = cast(%var_14927, dtype="bool") /* ty=Tensor[(11, 108), bool] */;
  %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(2), int32] */;
  %248 = cast(%245, dtype="bool") /* ty=Tensor[(11, 108), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %250 = cast(%239, dtype="bool") /* ty=Tensor[(13, 30), bool] */;
  %251 = cast(%236, dtype="bool") /* ty=Tensor[(1, 30), bool] */;
  %252 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 108), bool] */, dtype="float32") /* ty=Tensor[(11, 108), float32] */;
  %253 = shape_of(%245, dtype="int32") /* ty=Tensor[(2), int32] */;
  %254 = cast(%245, dtype="float32") /* ty=Tensor[(11, 108), float32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %256 = cast(%var_14927, dtype="float32") /* ty=Tensor[(11, 108), float32] */;
  %257 = %234.0;
  %258 = greater(%242, %243) /* ty=Tensor[(13, 30), bool] */;
  %259 = logical_or(%248, %249) /* ty=Tensor[(11, 108), bool] */;
  %260 = less(%250, %251) /* ty=Tensor[(13, 30), bool] */;
  %261 = floor_mod(%254, %255) /* ty=Tensor[(11, 108), float32] */;
  %262 = cos(%256) /* ty=Tensor[(11, 108), float32] */;
  (%257, meta[relay.Constant][5] /* ty=Tensor[(18, 54), float64] */, %258, %259, %260, %261, %262)
}

def @func_11154(%var_11149: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(108), float64]) {
  %263 = cast(%var_11149, dtype="float64") /* ty=Tensor[(108), float64] */;
  %264 = reshape(%263, newshape=[1, 108]) /* ty=Tensor[(1, 108), float64] */;
  %265 = @func_9698(%264) /* ty=(Tensor[(?, 108), uint16], Tensor[(9, 12, 1), float64], Tensor[(14, 16, 10), bool]) */;
  %266 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  %267 = %265.2;
  (%266, %267, %var_11149)
}

def @func_11723() -> Tensor[(7, 10, 7), float32] {
  %268 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %268.1
}

def @func_7985() -> (Tensor[(7, 10, 7), float32],) {
  @func_7983() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_14116() -> Tensor[(30), int64] {
  %269 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %269.4
}

def @func_9442() -> (Tensor[(14, 16, 10), bool], Tensor[(30), int64]) {
  %270 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 16, 10), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 10), float64] */;
  %271 = cos(%270) /* ty=Tensor[(14, 16, 10), float64] */;
  %272 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 16, 10), float64] */, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="bool") /* ty=Tensor[(14, 16, 10), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = @func_6612() /* ty=(Tensor[(30), int64],) */;
  %277 = less_equal(%274, %275) /* ty=Tensor[(14, 16, 10), bool] */;
  %278 = %276.0;
  (%277, %278)
}

def @func_11282() -> (Tensor[(9, 12, 96), uint8],) {
  %279 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
  %280 = %279.2;
  (%280,)
}

def @func_14558() -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %285 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
    %281 = @func_8937() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %282 = @func_11948() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %283 = %281.1;
    %284 = %282.0;
    (%283, %284)
  };
  %285() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */
}

def @func_9252(%var_9237: int8, %var_9238: Tensor[(13, 3, 13), int8]) -> Tensor[(13, 3, 13), int8] {
  %286 = cast(%var_9237, dtype="int8") /* ty=int8 */;
  %287 = cast(%var_9238, dtype="int8") /* ty=Tensor[(13, 3, 13), int8] */;
  bitwise_and(%286, %287) /* ty=Tensor[(13, 3, 13), int8] */
}

def @func_11026() -> (Tensor[(7, 10, 7), uint16],) {
  @func_11024() /* ty=(Tensor[(7, 10, 7), uint16],) */
}

def @func_8383() -> (Tensor[(7, 10, 7), float32],) {
  @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_7737(%var_7712: Tensor[(66), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %288 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %289 = cast(meta[relay.Constant][8] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %290 = cast(%var_7712, dtype="float64") /* ty=Tensor[(66), float64] */;
  %291 = reshape(%289, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %292 = reshape(%290, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %293 = @func_5185(%291, %292) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %294 = @func_7307() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) */;
  %295 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %296 = %288.1;
  %297 = %293.1;
  %298 = %294.0;
  %299 = %295.1;
  (%296, %297, meta[relay.Constant][8] /* ty=Tensor[(112), float64] */, %var_7712, %298, %299)
}

def @func_12954() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(112), float64]) {
  @func_12952() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(112), float64]) */
}

def @func_9082() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_9080() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_6913() -> (Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) {
  %309 = fn () -> (Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) {
    %300 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %301 = %300.0;
    %302 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10, 7), float32] */, dtype="uint16") /* ty=Tensor[(7, 10, 7), uint16] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%301, dtype="uint16") /* ty=Tensor[(7, 10, 7), uint16] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %306 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10, 7), float32] */, dtype="float64") /* ty=Tensor[(7, 10, 7), float64] */;
    %307 = bitwise_or(%304, %305) /* ty=Tensor[(7, 10, 7), uint16] */;
    %308 = atan(%306) /* ty=Tensor[(7, 10, 7), float64] */;
    (%307, %308)
  };
  %309() /* ty=(Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) */
}

def @func_10355() -> (Tensor[(7, 10, 7), float32],) {
  %312 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %310 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %311 = %310.1;
    (%311,)
  };
  %312() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_3212(%var_3188: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) {
  %313 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %314 = cast(%var_3188, dtype="int64") /* ty=Tensor[(30), int64] */;
  %315 = reshape(%314, newshape=[5, 3, 2]) /* ty=Tensor[(5, 3, 2), int64] */;
  %316 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %317 = %316.0;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %319 = acosh(%318) /* ty=Tensor[(5, 13, 7), float64] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %321 = %313.1;
  %322 = @func_514(%315) /* ty=Tensor[(5, 3, 2), int64] */;
  %323 = atanh(%320) /* ty=Tensor[(5, 13, 7), float32] */;
  (%321, %322, %var_3188, %323)
}

def @func_12492() -> Tensor[(7, 10, 7), float32] {
  @func_12490() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_10508() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %324 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %325 = @func_9080() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %326 = %324.0;
  %327 = %325.0;
  (%326, %327)
}

def @func_11927() -> (Tensor[(7, 10, 7), float32],) {
  %329 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %328 = @func_6690() /* ty=Tensor[(7, 10, 7), float32] */;
    (%328,)
  };
  %329() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_14452() -> (Tensor[(30), int64],) {
  %332 = fn () -> (Tensor[(30), int64],) {
    %330 = @func_6612() /* ty=(Tensor[(30), int64],) */;
    %331 = %330.0;
    (%331,)
  };
  %332() /* ty=(Tensor[(30), int64],) */
}

def @func_9080() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %333 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %334 = %333.0;
  %335 = @func_4071() /* ty=Tensor[(7, 10, 7), float32] */;
  (%334, %335)
}

def @func_12914(%var_12913: Tensor[(12, 18), float32]) -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(12, 18), float32]) {
  %342 = fn (%var_12899: Tensor[(12, 18), float32]) -> (Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(12, 18), float32]) {
    %336 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %337 = cast(%var_12899, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
    %338 = reshape(%337, newshape=[2, 108]) /* ty=Tensor[(2, 108), float32] */;
    %339 = @func_12295(%338) /* ty=(Tensor[(30), int64], Tensor[(2, 108), bool]) */;
    %340 = %336.0;
    %341 = %339.0;
    (%340, %341, %var_12899)
  };
  %342(%var_12913) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(12, 18), float32]) */
}

def @func_8034() -> (Tensor[(7, 10, 7), float32],) {
  @func_8032() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_9236() -> Tensor[(9, 12, 1), float64] {
  %344 = fn () -> Tensor[(9, 12, 1), float64] {
    %343 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %343.0
  };
  %344() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_4874() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_5741() -> (Tensor[(30), int64], Tensor[(1, 108), float64]) {
  @func_5739() /* ty=(Tensor[(30), int64], Tensor[(1, 108), float64]) */
}

def @func_6206() -> (Tensor[(7, 10, 7), float32],) {
  %345 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %346 = %345.1;
  (%346,)
}

def @func_6535(%var_6533: Tensor[(13, 108), float64]) -> Tensor[(13, 108), bool] {
  @func_6532(%var_6533) /* ty=Tensor[(13, 108), bool] */
}

def @func_14598() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %350 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %347 = @func_9130() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %348 = %347.0;
    %349 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
    (%348, %349)
  };
  %350() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_14078() -> Tensor[(7, 10, 7), uint16] {
  %351 = @func_11024() /* ty=(Tensor[(7, 10, 7), uint16],) */;
  %351.0
}

def @func_10148() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64]) {
  %357 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64]) {
    %352 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %353 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
    %354 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
    %355 = %352.1;
    %356 = %353.1;
    (%354, %355, %356)
  };
  %357() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64]) */
}

def @func_12877() -> (Tensor[(1, 108), float64],) {
  %358 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
  %359 = %358.0;
  (%359,)
}

def @func_12450() -> (Tensor[(66), float64], Tensor[(6, 11, 1), float64], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %360 = @func_9379() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(66), float64]) */;
  %361 = @func_8202() /* ty=(Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */;
  %362 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
  %363 = @func_9080() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %364 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %365 = %360.1;
  %366 = %361.1;
  %367 = %362.1;
  %368 = %363.0;
  %369 = %364.1;
  (%365, %366, %367, %368, %369)
}

def @func_7596(%var_7594: Tensor[(9, 108), float64]) -> (Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) {
  @func_7593(%var_7594) /* ty=(Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) */
}

def @func_8098() -> (Tensor[(13, 11, 15), uint16], Tensor[(7, 10, 7), float32]) {
  %370 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 11, 15), uint16] */, dtype="uint16") /* ty=Tensor[(13, 11, 15), uint16] */;
  %371 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(13, 11, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 11, 15), uint16] */, dtype="uint16") /* ty=Tensor[(13, 11, 15), uint16] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %374 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %375 = right_shift(%372, %373) /* ty=Tensor[(13, 11, 15), uint16] */;
  %376 = %374.0;
  (%375, %376)
}

def @func_8427(%var_8426: Tensor[(9, 12, 96), uint8]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 96), bool]) {
  %385 = fn (%var_8413: Tensor[(9, 12, 96), uint8]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 96), bool]) {
    %377 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
    %378 = %377.2;
    %379 = cast(%var_8413, dtype="bool") /* ty=Tensor[(9, 12, 96), bool] */;
    %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %381 = cast(%378, dtype="bool") /* ty=Tensor[(9, 12, 96), bool] */;
    %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %383 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
    %384 = greater_equal(%381, %382) /* ty=Tensor[(9, 12, 96), bool] */;
    (%383, %384)
  };
  %385(%var_8426) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 96), bool]) */
}

def @func_921(%var_913: Tensor[(6, 11, 1), float64]) -> (Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) {
  %386 = cast(%var_913, dtype="float64") /* ty=Tensor[(6, 11, 1), float64] */;
  %387 = cast(%var_913, dtype="float32") /* ty=Tensor[(6, 11, 1), float32] */;
  %388 = asin(%386) /* ty=Tensor[(6, 11, 1), float64] */;
  %389 = sqrt(%387) /* ty=Tensor[(6, 11, 1), float32] */;
  (%388, %389)
}

def @func_12235(%var_12234: Tensor[(108), float64]) -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(108), float64]) {
  %396 = fn (%var_12223: Tensor[(108), float64]) -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(108), float64]) {
    %390 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
    %391 = cast(%var_12223, dtype="float64") /* ty=Tensor[(108), float64] */;
    %392 = reshape(%391, newshape=[108]) /* ty=Tensor[(108), float64] */;
    %393 = @func_8622(%392) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32]) */;
    %394 = %390.1;
    %395 = %393.3;
    (%394, %395, %var_12223)
  };
  %396(%var_12234) /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(108), float64]) */
}

def @func_9851() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %397 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %399 = reshape(%398, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %400 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %401 = cast(meta[relay.Constant][12] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %402 = reshape(%401, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %403 = @func_4203(%402) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %404 = @func_2916(%399) /* ty=Tensor[(7, 10, 7), bool] */;
  %405 = %400.0;
  %406 = %403.0;
  (%397, %404, %405, %406, meta[relay.Constant][12] /* ty=Tensor[(30), int64] */)
}

def @func_11120(%var_11118: Tensor[(9, 14, 3), float64], %var_11119: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 7), float32], Tensor[(9, 14, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 8), uint32], Tensor[(864), float64], Tensor[(7, 10, 7), float32]) {
  @func_11116(%var_11118, %var_11119) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 7), float32], Tensor[(9, 14, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 8), uint32], Tensor[(864), float64], Tensor[(7, 10, 7), float32]) */
}

def @func_13791() -> (Tensor[(7, 10, 7), float64], Tensor[(66), float64], Tensor[(30), int64]) {
  %407 = @func_6912() /* ty=(Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) */;
  %408 = @func_12450() /* ty=(Tensor[(66), float64], Tensor[(6, 11, 1), float64], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %409 = @func_11844() /* ty=(Tensor[(30), int64],) */;
  %410 = %407.1;
  %411 = %408.0;
  %412 = %409.0;
  (%410, %411, %412)
}

def @func_14118() -> Tensor[(30), int64] {
  @func_14116() /* ty=Tensor[(30), int64] */
}

def @func_7593(%var_7566: Tensor[(9, 108), float64]) -> (Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) {
  %413 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %414 = cast(%413, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %415 = cast(%var_7566, dtype="bool") /* ty=Tensor[(9, 108), bool] */;
  %416 = cast(%var_7566, dtype="bool") /* ty=Tensor[(9, 108), bool] */;
  %417 = cast(%413, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
  %418 = greater(%416, %417) /* ty=Tensor[(9, 108), bool] */;
  %419 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 108), bool] */, dtype="uint16") /* ty=Tensor[(9, 108), uint16] */;
  %420 = shape_of(%418, dtype="int32") /* ty=Tensor[(2), int32] */;
  %421 = cast(%418, dtype="uint16") /* ty=Tensor[(9, 108), uint16] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %423 = logical_and(%414, %415) /* ty=Tensor[(9, 108), bool] */;
  %424 = right_shift(%421, %422) /* ty=Tensor[(9, 108), uint16] */;
  (%423, %424)
}

def @func_11758() -> (Tensor[(7, 10, 7), float32],) {
  @func_11756() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_11632(%var_11630: Tensor[(14, 13, 2), float64], %var_11631: Tensor[(16), float64]) -> (Tensor[(14, 13, 2), float64], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) {
  %431 = fn (%var_11595: Tensor[(14, 13, 2), float64], %var_11622: Tensor[(16), float64]) -> (Tensor[(14, 13, 2), float64], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) {
    %425 = cast(%var_11595, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
    %426 = cast(%var_11622, dtype="float64") /* ty=Tensor[(16), float64] */;
    %427 = reshape(%426, newshape=[4, 1, 4]) /* ty=Tensor[(4, 1, 4), float64] */;
    %428 = @func_4411(%427) /* ty=(Tensor[(4, 1, 4), float64],) */;
    %429 = atan(%425) /* ty=Tensor[(14, 13, 2), float64] */;
    %430 = %428.0;
    (%429, %430, %var_11622)
  };
  %431(%var_11630, %var_11631) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) */
}

def @func_9131() -> (Tensor[(7, 10, 7), float32],) {
  %434 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %432 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %433 = %432.0;
    (%433,)
  };
  %434() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_7849(%var_7816: Tensor[(96), int64], %var_7817: Tensor[(384, 2), int64], %var_7847: Tensor[(540), int32]) -> (Tensor[(30), int64], Tensor[(30), int64], Tensor[(6, 1, 16), float32], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(6, 11, 1), float32], Tensor[(66), float64], Tensor[(4, 15, 9), int32], Tensor[(540), int32]) {
  %435 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %436 = @func_5401() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */;
  %437 = cast(%var_7816, dtype="int64") /* ty=Tensor[(96), int64] */;
  %438 = cast(%var_7817, dtype="int64") /* ty=Tensor[(384, 2), int64] */;
  %439 = reshape(%437, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), int64] */;
  %440 = reshape(%438, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), int64] */;
  %441 = @func_3006(%439, %440) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) */;
  %442 = cast(meta[relay.Constant][14] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %443 = reshape(%442, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %444 = @func_921(%443) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %445 = cast(%var_7847, dtype="int32") /* ty=Tensor[(540), int32] */;
  %446 = reshape(%445, newshape=[4, 15, 9]) /* ty=Tensor[(4, 15, 9), int32] */;
  %447 = %435.2;
  %448 = %436.2;
  %449 = %441.1;
  %450 = %444.1;
  %451 = @func_3738(%446) /* ty=Tensor[(4, 15, 9), int32] */;
  (%447, %448, %449, %var_7816, %var_7817, %450, meta[relay.Constant][14] /* ty=Tensor[(66), float64] */, %451, %var_7847)
}

def @func_3122() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_12372() -> (Tensor[(7, 10, 7), float32],) {
  @func_12370() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_9516() -> Tensor[(7, 10, 7), float32] {
  %453 = fn () -> Tensor[(7, 10, 7), float32] {
    %452 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %452.0
  };
  %453() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_11449() -> (Tensor[(1, 108), float32],) {
  %457 = fn () -> (Tensor[(1, 108), float32],) {
    %454 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
    %455 = cast(%454, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
    %456 = rsqrt(%455) /* ty=Tensor[(1, 108), float32] */;
    (%456,)
  };
  %457() /* ty=(Tensor[(1, 108), float32],) */
}

def @func_5570() -> (Tensor[(1, 108), float64],) {
  %459 = fn () -> (Tensor[(1, 108), float64],) {
    %458 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
    (%458,)
  };
  %459() /* ty=(Tensor[(1, 108), float64],) */
}

def @func_11010() -> (Tensor[(7, 10, 7), float32],) {
  %460 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %461 = %460.1;
  (%461,)
}

def @func_11948() -> (Tensor[(9, 12, 1), float64],) {
  %462 = @func_5550() /* ty=Tensor[(9, 12, 1), float64] */;
  (%462,)
}

def @func_5843(%var_5838: Tensor[(40), uint16]) -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(40), uint16]) {
  %463 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
  %464 = cast(%var_5838, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %465 = reshape(%464, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), uint16] */;
  %466 = @func_3711(%465) /* ty=(Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) */;
  %467 = %463.0;
  %468 = %466.1;
  (%467, %468, %var_5838)
}

def @func_8155() -> Tensor[(7, 10, 7), float32] {
  @func_8153() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_7349(%var_7344: Tensor[(112), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(1, 66), float64], Tensor[(112), float64]) {
  %469 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
  %470 = cast(%var_7344, dtype="float64") /* ty=Tensor[(112), float64] */;
  %471 = reshape(%470, newshape=[4, 28]) /* ty=Tensor[(4, 28), float64] */;
  %472 = @func_6555(%471) /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %473 = %469.3;
  %474 = %472.3;
  (%473, %474, %var_7344)
}

def @func_3072(%var_3066: Tensor[(7, 10, 7), float32]) -> Tensor[(7, 10, 7), bool] {
  %475 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %476 = cast(%var_3066, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%478, %479) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_14431(%var_14423: Tensor[(2, 56), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(2, 56), float64]) {
  %480 = cast(%var_14423, dtype="float64") /* ty=Tensor[(2, 56), float64] */;
  %481 = reshape(%480, newshape=[4, 28]) /* ty=Tensor[(4, 28), float64] */;
  %482 = @func_6555(%481) /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %483 = @func_8775() /* ty=Tensor[(7, 10, 7), float32] */;
  %484 = %482.5;
  (%483, %484, %var_14423)
}

def @func_12452() -> (Tensor[(66), float64], Tensor[(6, 11, 1), float64], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_12450() /* ty=(Tensor[(66), float64], Tensor[(6, 11, 1), float64], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_5611() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %491 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %485 = @func_4943() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
    %486 = %485.0;
    %487 = cast(%486, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %488 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %489 = log2(%487) /* ty=Tensor[(7, 10, 7), float32] */;
    %490 = %488.1;
    (%489, %490)
  };
  %491() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_1967(%var_1965: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) {
  @func_1964(%var_1965) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */
}

def @func_4945() -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  @func_4943() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */
}

def @func_3957(%var_3956: Tensor[(30, 1), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) {
  %499 = fn (%var_3937: Tensor[(30, 1), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) {
    %492 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %493 = cast(%var_3937, dtype="int64") /* ty=Tensor[(30, 1), int64] */;
    %494 = reshape(%493, newshape=[5, 3, 2]) /* ty=Tensor[(5, 3, 2), int64] */;
    %495 = cast(%var_3937, dtype="float32") /* ty=Tensor[(30, 1), float32] */;
    %496 = %492.0;
    %497 = @func_514(%494) /* ty=Tensor[(5, 3, 2), int64] */;
    %498 = atan(%495) /* ty=Tensor[(30, 1), float32] */;
    (%496, %497, %498)
  };
  %499(%var_3956) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) */
}

def @func_14373() -> (Tensor[(7, 10, 7), float32], Tensor[(10, 16, ?), float64], Tensor[(160, 1), float32]) {
  %505 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(10, 16, ?), float64], Tensor[(160, 1), float32]) {
    %500 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %501 = cast(meta[relay.Constant][15] /* ty=Tensor[(160, 1), float32] */, dtype="float32") /* ty=Tensor[(160, 1), float32] */;
    %502 = reshape(%501, newshape=[10, 16, 1]) /* ty=Tensor[(10, 16, 1), float32] */;
    %503 = %500.1;
    %504 = @func_12551(%502) /* ty=Tensor[(10, 16, ?), float64] */;
    (%503, %504, meta[relay.Constant][15] /* ty=Tensor[(160, 1), float32] */)
  };
  %505() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(10, 16, ?), float64], Tensor[(160, 1), float32]) */
}

def @func_12672() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %509 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %506 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
    %507 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
    %508 = %506.1;
    (%507, %508)
  };
  %509() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_11672(%var_11671: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(18), float32], Tensor[(108), float64], Tensor[(14, 16, 10), bool]) {
  %524 = fn (%var_11666: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(18), float32], Tensor[(108), float64], Tensor[(14, 16, 10), bool]) {
    %510 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %511 = cast(meta[relay.Constant][16] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
    %512 = cast(%var_11666, dtype="float64") /* ty=Tensor[(108), float64] */;
    %513 = reshape(%511, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float32] */;
    %514 = reshape(%512, newshape=[108]) /* ty=Tensor[(108), float64] */;
    %515 = @func_8290(%513, %514) /* ty=(Tensor[(6, 1, 3), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64]) */;
    %516 = %515.1;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %518 = reshape(%517, newshape=[108]) /* ty=Tensor[(108), float64] */;
    %519 = @func_11154(%518) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(108), float64]) */;
    %520 = %510.0;
    %521 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
    %522 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
    %523 = %519.1;
    (%520, %521, %522, %516, meta[relay.Constant][16] /* ty=Tensor[(18), float32] */, %var_11666, %523)
  };
  %524(%var_11671) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(18), float32], Tensor[(108), float64], Tensor[(14, 16, 10), bool]) */
}

def @func_7975() -> Tensor[(7, 10, 7), float32] {
  %525 = fn () -> Tensor[(7, 10, 7), float32] {
    @func_2897() /* ty=Tensor[(7, 10, 7), float32] */
  };
  %525() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_11024() -> (Tensor[(7, 10, 7), uint16],) {
  %526 = @func_6912() /* ty=(Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) */;
  %527 = %526.0;
  (%527,)
}

def @func_6609() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_6607() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_8032() -> (Tensor[(7, 10, 7), float32],) {
  %528 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %529 = %528.0;
  (%529,)
}

def @func_9667() -> (Tensor[(6, 11, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %535 = fn () -> (Tensor[(6, 11, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %530 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %531 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %532 = %530.1;
    %533 = %531.1;
    %534 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
    (%532, %533, %534)
  };
  %535() /* ty=(Tensor[(6, 11, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_8885() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %536 = @func_5418() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %537 = @func_4943() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %538 = @func_8775() /* ty=Tensor[(7, 10, 7), float32] */;
  %539 = %536.0;
  %540 = %537.1;
  (%538, %539, %540)
}

def @func_9020(%var_9019: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(6, 108), bool], Tensor[(6, 108), uint8], Tensor[(5, 13, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
  %556 = fn (%var_8992: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(6, 108), bool], Tensor[(6, 108), uint8], Tensor[(5, 13, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
    %541 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %542 = %541.4;
    %543 = cast(%542, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
    %544 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 108), float64] */, dtype="bool") /* ty=Tensor[(6, 108), bool] */;
    %545 = cast(%542, dtype="uint8") /* ty=Tensor[(1, 108), uint8] */;
    %546 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 108), float64] */, dtype="uint8") /* ty=Tensor[(6, 108), uint8] */;
    %547 = cast(%var_8992, dtype="int64") /* ty=Tensor[(30), int64] */;
    %548 = reshape(%547, newshape=[30]) /* ty=Tensor[(30), int64] */;
    %549 = @func_3212(%548) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
    %550 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %551 = @func_8153() /* ty=Tensor[(7, 10, 7), float32] */;
    %552 = greater_equal(%543, %544) /* ty=Tensor[(6, 108), bool] */;
    %553 = bitwise_or(%545, %546) /* ty=Tensor[(6, 108), uint8] */;
    %554 = %549.3;
    %555 = %550.1;
    (%551, %552, %553, %554, %var_8992, %555)
  };
  %556(%var_9019) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 108), bool], Tensor[(6, 108), uint8], Tensor[(5, 13, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */
}

def @func_8314() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
  @func_8312() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */
}

def @func_3587() -> (Tensor[(7, 10, 7), float32],) {
  @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_5846(%var_5844: Tensor[(40), uint16]) -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(40), uint16]) {
  @func_5843(%var_5844) /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(40), uint16]) */
}

def @func_3010(%var_3008: Tensor[(6, 1, 16), int64], %var_3009: Tensor[(6, 8, 16), int64]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) {
  @func_3006(%var_3008, %var_3009) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_12134() -> Tensor[(7, 10, 7), float32] {
  %557 = @func_7894() /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) */;
  %557.1
}

def @func_3721() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %562 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %558 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %559 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %560 = %558.0;
    %561 = %559.0;
    (%560, %561)
  };
  %562() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_4631() -> (Tensor[(7, 10, 7), float32],) {
  %563 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %564 = %563.3;
  (%564,)
}

def @func_3421() -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_3740(%var_3739: Tensor[(4, 15, 9), int32]) -> Tensor[(4, 15, 9), int32] {
  %569 = fn (%var_3729: Tensor[(4, 15, 9), int32]) -> Tensor[(4, 15, 9), int32] {
    %565 = cast(%var_3729, dtype="int32") /* ty=Tensor[(4, 15, 9), int32] */;
    %566 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(4, 15, 9), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 15, 9), int32] */, dtype="int32") /* ty=Tensor[(4, 15, 9), int32] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    left_shift(%567, %568) /* ty=Tensor[(4, 15, 9), int32] */
  };
  %569(%var_3739) /* ty=Tensor[(4, 15, 9), int32] */
}

def @func_4306(%var_4305: Tensor[(7, 2, 8), float64]) -> Tensor[(7, 2, 8), float64] {
  %574 = fn (%var_4296: Tensor[(7, 2, 8), float64]) -> Tensor[(7, 2, 8), float64] {
    %570 = cast(%var_4296, dtype="float64") /* ty=Tensor[(7, 2, 8), float64] */;
    %571 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(7, 2, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 2, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 2, 8), float64] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%572, %573) /* ty=Tensor[(7, 2, 8), float64] */
  };
  %574(%var_4305) /* ty=Tensor[(7, 2, 8), float64] */
}

def @func_7236(%var_7212: Tensor[(40), uint16]) -> (Tensor[(7, 10, 7), int8], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(40), uint16], Tensor[(1, 108), float64]) {
  %575 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %576 = %575.0;
  %577 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 10, 7), float32] */, dtype="int8") /* ty=Tensor[(7, 10, 7), int8] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="int8") /* ty=Tensor[(7, 10, 7), int8] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %581 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %582 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %583 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %584 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %585 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %586 = cast(%var_7212, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %587 = reshape(%586, newshape=[40, 1]) /* ty=Tensor[(40, 1), uint16] */;
  %588 = @func_4814(%587) /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) */;
  %589 = minimum(%579, %580) /* ty=Tensor[(7, 10, 7), int8] */;
  %590 = %581.1;
  %591 = %582.0;
  %592 = %583.0;
  %593 = %584.2;
  %594 = %585.2;
  %595 = %588.0;
  %596 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  (%589, %590, %591, %592, %593, %594, %595, %var_7212, %596)
}

def @func_10519() -> Tensor[(7, 10, 7), float32] {
  @func_4071() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_11725() -> Tensor[(7, 10, 7), float32] {
  @func_11723() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_11311(%var_11309: Tensor[(6600), bool]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(6600), bool]) {
  @func_11308(%var_11309) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(6600), bool]) */
}

def @func_149(%var_148: Tensor[(9, 12, 1), float64]) -> (Tensor[(9, 12, 1), float64],) {
  %599 = fn (%var_136: Tensor[(9, 12, 1), float64]) -> (Tensor[(9, 12, 1), float64],) {
    %597 = cast(%var_136, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %598 = asin(%597) /* ty=Tensor[(9, 12, 1), float64] */;
    (%598,)
  };
  %599(%var_148) /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_9700(%var_9699: Tensor[(1, 108), float64]) -> (Tensor[(?, 108), uint16], Tensor[(9, 12, 1), float64], Tensor[(14, 16, 10), bool]) {
  %611 = fn (%var_9673: Tensor[(1, 108), float64]) -> (Tensor[(?, 108), uint16], Tensor[(9, 12, 1), float64], Tensor[(14, 16, 10), bool]) {
    %600 = @func_7307() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) */;
    %601 = %600.3;
    %602 = cast(%var_9673, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
    %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(2), int32] */;
    %604 = cast(%601, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
    %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %606 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
    %607 = @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */;
    %608 = bitwise_and(%604, %605) /* ty=Tensor[(?, 108), uint16] */;
    %609 = %606.2;
    %610 = %607.0;
    (%608, %609, %610)
  };
  %611(%var_9699) /* ty=(Tensor[(?, 108), uint16], Tensor[(9, 12, 1), float64], Tensor[(14, 16, 10), bool]) */
}

def @func_2690() -> (Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) {
  %618 = fn () -> (Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) {
    %612 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
    %613 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 490), float32] */, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
    %614 = reshape(%613, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %615 = @func_1964(%614) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
    %616 = sinh(%612) /* ty=Tensor[(5, 13, 7), float32] */;
    %617 = %615.0;
    (%616, %617, meta[relay.Constant][22] /* ty=Tensor[(1, 490), float32] */)
  };
  %618() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */
}

def @func_12871() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_12869() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_7552(%var_7546: Tensor[(117, 2), bool]) -> (Tensor[(7, 10, 7), float32], Tensor[(13, 9, 2), bool], Tensor[(117, 2), bool]) {
  %619 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %620 = cast(%var_7546, dtype="bool") /* ty=Tensor[(117, 2), bool] */;
  %621 = reshape(%620, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), bool] */;
  %622 = @func_7036(%621) /* ty=(Tensor[(13, 9, 2), bool],) */;
  %623 = %619.0;
  %624 = %622.0;
  (%623, %624, %var_7546)
}

def @func_6710() -> Tensor[(7, 10, 7), float32] {
  %625 = fn () -> Tensor[(7, 10, 7), float32] {
    @func_2841() /* ty=Tensor[(7, 10, 7), float32] */
  };
  %625() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_10973() -> (Tensor[(7, 10, 7), float32],) {
  %628 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %626 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
    %627 = %626.0;
    (%627,)
  };
  %628() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_7336() -> Tensor[(66), float64] {
  %630 = fn () -> Tensor[(66), float64] {
    %629 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %629.2
  };
  %630() /* ty=Tensor[(66), float64] */
}

def @func_6466(%var_6465: Tensor[(10, 10, 66), bool]) -> (Tensor[(6, 11, 1), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(9, 12, 1), float64], Tensor[(10, 10, 66), int16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64]) {
  %672 = fn (%var_6452: Tensor[(10, 10, 66), bool]) -> (Tensor[(6, 11, 1), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(9, 12, 1), float64], Tensor[(10, 10, 66), int16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64]) {
    %631 = cast(meta[relay.Constant][23] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %632 = reshape(%631, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
    %633 = @func_921(%632) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
    %634 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
    %635 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 10, 1), float64] */;
    %636 = atanh(%635) /* ty=Tensor[(10, 10, 1), float64] */;
    %637 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 10, 1), float64] */, dtype="bool") /* ty=Tensor[(10, 10, 1), bool] */;
    %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%636, dtype="bool") /* ty=Tensor[(10, 10, 1), bool] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %641 = equal(%639, %640) /* ty=Tensor[(10, 10, ?), bool] */;
    %642 = cast(%636, dtype="uint16") /* ty=Tensor[(10, 10, 1), uint16] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="uint16") /* ty=Tensor[(10, 10, ?), uint16] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %646 = add(%644, %645) /* ty=Tensor[(10, 10, ?), uint16] */;
    %647 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 10, 1), float64] */, dtype="bool") /* ty=Tensor[(10, 10, 1), bool] */;
    %648 = cast(meta[relay.Constant][23] /* ty=Tensor[(66), float64] */, dtype="bool") /* ty=Tensor[(66), bool] */;
    %649 = greater(%647, %648) /* ty=Tensor[(10, 10, 66), bool] */;
    %650 = cast(%646, dtype="bool") /* ty=Tensor[(10, 10, ?), bool] */;
    %651 = cast(%649, dtype="bool") /* ty=Tensor[(10, 10, 66), bool] */;
    %652 = logical_and(%650, %651) /* ty=Tensor[(10, 10, 66), bool] */;
    %653 = cast(%641, dtype="int64") /* ty=Tensor[(10, 10, ?), int64] */;
    %654 = cast(%652, dtype="int64") /* ty=Tensor[(10, 10, 66), int64] */;
    %655 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %656 = cast(%var_6452, dtype="int16") /* ty=Tensor[(10, 10, 66), int16] */;
    %657 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%652, dtype="int16") /* ty=Tensor[(10, 10, 66), int16] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %660 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %661 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %662 = cast(%652, dtype="int64") /* ty=Tensor[(10, 10, 66), int64] */;
    %663 = cast(meta[relay.Constant][23] /* ty=Tensor[(66), float64] */, dtype="int64") /* ty=Tensor[(66), int64] */;
    %664 = %633.1;
    %665 = %634.0;
    %666 = bitwise_and(%653, %654) /* ty=Tensor[(10, 10, 66), int64] */;
    %667 = %655.0;
    %668 = maximum(%658, %659) /* ty=Tensor[(10, 10, 66), int16] */;
    %669 = %660.3;
    %670 = %661.0;
    %671 = add(%662, %663) /* ty=Tensor[(10, 10, 66), int64] */;
    (%664, %665, %666, %667, %668, %669, %670, %671)
  };
  %672(%var_6465) /* ty=(Tensor[(6, 11, 1), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64], Tensor[(9, 12, 1), float64], Tensor[(10, 10, 66), int16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(10, 10, 66), int64]) */
}

def @func_6532(%var_6515: Tensor[(13, 108), float64]) -> Tensor[(13, 108), bool] {
  %673 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %675 = cast(%var_6515, dtype="float32") /* ty=Tensor[(13, 108), float32] */;
  %676 = divide(%674, %675) /* ty=Tensor[(13, 108), float32] */;
  %677 = cast(%var_6515, dtype="bool") /* ty=Tensor[(13, 108), bool] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(2), int32] */;
  %679 = cast(%676, dtype="bool") /* ty=Tensor[(13, 108), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  greater(%679, %680) /* ty=Tensor[(13, 108), bool] */
}

def @func_10706() -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(66), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  %691 = fn () -> (Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(66), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
    %681 = @func_6612() /* ty=(Tensor[(30), int64],) */;
    %682 = @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */;
    %683 = cast(meta[relay.Constant][25] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %684 = reshape(%683, newshape=[66]) /* ty=Tensor[(66), float64] */;
    %685 = @func_7737(%684) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
    %686 = @func_8032() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %687 = %681.0;
    %688 = %682.0;
    %689 = %685.3;
    %690 = %686.0;
    (%687, %688, %689, meta[relay.Constant][25] /* ty=Tensor[(66), float64] */, %690)
  };
  %691() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(66), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */
}

def @func_13200() -> (Tensor[(7, 10, 7), float32],) {
  %694 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %692 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %693 = %692.1;
    (%693,)
  };
  %694() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_9380() -> (Tensor[(7, 10, 7), bool], Tensor[(66), float64]) {
  %698 = fn () -> (Tensor[(7, 10, 7), bool], Tensor[(66), float64]) {
    %695 = @func_8312() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */;
    %696 = %695.1;
    %697 = @func_7335() /* ty=Tensor[(66), float64] */;
    (%696, %697)
  };
  %698() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(66), float64]) */
}

def @func_3120() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %699 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %700 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %701 = %699.0;
  %702 = %700.0;
  (%701, %702)
}

def @func_14104() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_14102() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_12125() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %706 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %703 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %704 = %703.1;
    %705 = @func_11723() /* ty=Tensor[(7, 10, 7), float32] */;
    (%704, %705)
  };
  %706() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_3713(%var_3712: Tensor[(10, 4, 1), uint16]) -> (Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) {
  %711 = fn (%var_3694: Tensor[(10, 4, 1), uint16]) -> (Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) {
    %707 = cast(meta[relay.Constant][26] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %708 = cast(%var_3694, dtype="uint16") /* ty=Tensor[(10, 4, 1), uint16] */;
    %709 = bitwise_xor(%707, %708) /* ty=Tensor[(10, 4, 1), uint16] */;
    %710 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
    (%709, %710)
  };
  %711(%var_3712) /* ty=(Tensor[(10, 4, 1), uint16], Tensor[(7, 10, 7), float32]) */
}

def @func_4072() -> Tensor[(7, 10, 7), float32] {
  %713 = fn () -> Tensor[(7, 10, 7), float32] {
    %712 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %712.0
  };
  %713() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_6493(%var_6485: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), bool],) {
  %714 = @func_5550() /* ty=Tensor[(9, 12, 1), float64] */;
  %715 = cast(%714, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
  %716 = cast(%var_6485, dtype="bool") /* ty=Tensor[(9, 12, 2), bool] */;
  %717 = equal(%715, %716) /* ty=Tensor[(9, 12, 2), bool] */;
  (%717,)
}

def @func_4943() -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %718 = @func_4575() /* ty=Tensor[(7, 10, 7), float32] */;
  %719 = cast(%718, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %720 = reshape(%719, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
  %721 = @func_1964(%720) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
  %722 = %721.1;
  (%718, %722)
}

def @func_9853() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  @func_9851() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */
}

def @func_5402() -> (Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) {
  %729 = fn () -> (Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) {
    %723 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
    %724 = cast(meta[relay.Constant][27] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
    %725 = reshape(%724, newshape=[30]) /* ty=Tensor[(30), int64] */;
    %726 = @func_5065(%725) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
    %727 = %723.0;
    %728 = %726.2;
    (%727, %728, meta[relay.Constant][27] /* ty=Tensor[(30), int64] */)
  };
  %729() /* ty=(Tensor[(1, 108), float64], Tensor[(30), int64], Tensor[(30), int64]) */
}

def @func_11950() -> (Tensor[(9, 12, 1), float64],) {
  @func_11948() /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_6591(%var_6583: Tensor[(1, 30), int64], %var_6589: Tensor[(22, 3), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool], Tensor[(1, 30), int64], Tensor[(7, 10, 7), float32], Tensor[(112), float64], Tensor[(22, 3), float64]) {
  %730 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %731 = cast(%var_6583, dtype="int64") /* ty=Tensor[(1, 30), int64] */;
  %732 = reshape(%731, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %733 = @func_4680(%732) /* ty=(Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
  %734 = cast(meta[relay.Constant][28] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %735 = cast(%var_6589, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %736 = reshape(%734, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %737 = reshape(%735, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %738 = @func_5185(%736, %737) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %739 = %730.0;
  %740 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  %741 = %733.3;
  %742 = %738.7;
  (%739, %740, %741, %var_6583, %742, meta[relay.Constant][28] /* ty=Tensor[(112), float64] */, %var_6589)
}

def @func_13184() -> Tensor[(66), float64] {
  %744 = fn () -> Tensor[(66), float64] {
    %743 = @func_8202() /* ty=(Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */;
    %743.2
  };
  %744() /* ty=Tensor[(66), float64] */
}

def @func_5305(%var_5302: Tensor[(4, 108), float64], %var_5303: Tensor[(96), int64], %var_5304: Tensor[(768), int64]) -> (Tensor[(16, 108), int8], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(4, 108), bool], Tensor[(16, 108), float32], Tensor[(7, 10, 7), float32], Tensor[(96), int64], Tensor[(768), int64], Tensor[(5, 13, 7), float32]) {
  %778 = fn (%var_5203: Tensor[(4, 108), float64], %var_5292: Tensor[(96), int64], %var_5293: Tensor[(768), int64]) -> (Tensor[(16, 108), int8], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(4, 108), bool], Tensor[(16, 108), float32], Tensor[(7, 10, 7), float32], Tensor[(96), int64], Tensor[(768), int64], Tensor[(5, 13, 7), float32]) {
    %745 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
    %746 = cast(%745, dtype="int8") /* ty=Tensor[(1, 108), int8] */;
    %747 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 108), float64] */, dtype="int8") /* ty=Tensor[(16, 108), int8] */;
    %748 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %749 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %750 = @func_4631() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %751 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
    %752 = cast(%745, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
    %753 = cast(%var_5203, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
    %754 = minimum(%752, %753) /* ty=Tensor[(4, 108), float64] */;
    %755 = cast(%754, dtype="float64") /* ty=Tensor[(4, 108), float64] */;
    %756 = sin(%755) /* ty=Tensor[(4, 108), float64] */;
    %757 = cast(%var_5203, dtype="bool") /* ty=Tensor[(4, 108), bool] */;
    %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(2), int32] */;
    %759 = cast(%756, dtype="bool") /* ty=Tensor[(4, 108), bool] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %761 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 108), float64] */, dtype="float32") /* ty=Tensor[(16, 108), float32] */;
    %762 = cast(%var_5292, dtype="int64") /* ty=Tensor[(96), int64] */;
    %763 = cast(%var_5293, dtype="int64") /* ty=Tensor[(768), int64] */;
    %764 = reshape(%762, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), int64] */;
    %765 = reshape(%763, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), int64] */;
    %766 = @func_3006(%764, %765) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) */;
    %767 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
    %768 = left_shift(%746, %747) /* ty=Tensor[(16, 108), int8] */;
    %769 = %748.1;
    %770 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
    %771 = %749.0;
    %772 = %750.0;
    %773 = %751.0;
    %774 = logical_and(%759, %760) /* ty=Tensor[(4, 108), bool] */;
    %775 = sinh(%761) /* ty=Tensor[(16, 108), float32] */;
    %776 = %766.2;
    %777 = %767.1;
    (%768, %769, %770, %771, %772, %773, %774, %775, %776, %var_5292, %var_5293, %777)
  };
  %778(%var_5302, %var_5303, %var_5304) /* ty=(Tensor[(16, 108), int8], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(4, 108), bool], Tensor[(16, 108), float32], Tensor[(7, 10, 7), float32], Tensor[(96), int64], Tensor[(768), int64], Tensor[(5, 13, 7), float32]) */
}

def @func_10245(%var_10243: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), uint32],) {
  @func_10242(%var_10243) /* ty=(Tensor[(9, 12, 8), uint32],) */
}

def @func_6208() -> (Tensor[(7, 10, 7), float32],) {
  @func_6206() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_4872() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %779 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %780 = %779.0;
  %781 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  (%780, %781)
}

def @func_6017(%var_6015: Tensor[(9, 5, 5), float64]) -> Tensor[(9, 5, 5), int32] {
  @func_6014(%var_6015) /* ty=Tensor[(9, 5, 5), int32] */
}

def @func_4436() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  %787 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
    %782 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
    %783 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
    %784 = %782.1;
    %785 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
    %786 = %783.1;
    (%784, %785, %786)
  };
  %787() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */
}

def @func_14434(%var_14432: Tensor[(2, 56), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(2, 56), float64]) {
  @func_14431(%var_14432) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(2, 56), float64]) */
}

def @func_5974(%var_5973: Tensor[(490), float32]) -> (Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) {
  %797 = fn (%var_5939: Tensor[(490), float32]) -> (Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) {
    %788 = cast(%var_5939, dtype="float32") /* ty=Tensor[(490), float32] */;
    %789 = reshape(%788, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %790 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
    %791 = %790.0;
    %792 = cast(%791, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
    %793 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %794 = @func_2916(%789) /* ty=Tensor[(7, 10, 7), bool] */;
    %795 = sin(%792) /* ty=Tensor[(1, 108), float32] */;
    %796 = %793.1;
    (%794, %var_5939, %795, %796)
  };
  %797(%var_5973) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_6820() -> (Tensor[(7, 10, 7), float32],) {
  %798 = @func_6369() /* ty=Tensor[(7, 10, 7), float32] */;
  (%798,)
}

def @func_8381() -> (Tensor[(7, 10, 7), float32],) {
  %799 = @func_6206() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %800 = %799.0;
  (%800,)
}

def @func_7555(%var_7553: Tensor[(117, 2), bool]) -> (Tensor[(7, 10, 7), float32], Tensor[(13, 9, 2), bool], Tensor[(117, 2), bool]) {
  @func_7552(%var_7553) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(13, 9, 2), bool], Tensor[(117, 2), bool]) */
}

def @func_8750(%var_8748: Tensor[(12, 16, 10), int8], %var_8749: Tensor[(12, 16, 10), int8]) -> Tensor[(12, 16, 10), int8] {
  @func_8746(%var_8748, %var_8749) /* ty=Tensor[(12, 16, 10), int8] */
}

def @func_3040() -> (Tensor[(7, 10, 7), float32],) {
  %803 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %801 = @func_2965() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %802 = %801.0;
    (%802,)
  };
  %803() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_517(%var_515: Tensor[(5, 3, 2), int64]) -> Tensor[(5, 3, 2), int64] {
  @func_514(%var_515) /* ty=Tensor[(5, 3, 2), int64] */
}

def @func_11421(%var_11419: int8, %var_11420: Tensor[(507), int8]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(13, 3, 13), int8], int8, Tensor[(507), int8]) {
  %812 = fn (%var_11411: int8, %var_11412: Tensor[(507), int8]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(13, 3, 13), int8], int8, Tensor[(507), int8]) {
    %804 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %805 = cast(%var_11411, dtype="int8") /* ty=int8 */;
    %806 = cast(%var_11412, dtype="int8") /* ty=Tensor[(507), int8] */;
    %807 = reshape(%805, newshape=[]) /* ty=int8 */;
    %808 = reshape(%806, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), int8] */;
    %809 = %804.0;
    %810 = @func_9515() /* ty=Tensor[(7, 10, 7), float32] */;
    %811 = @func_9252(%807, %808) /* ty=Tensor[(13, 3, 13), int8] */;
    (%809, %810, %811, %var_11411, %var_11412)
  };
  %812(%var_11419, %var_11420) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(13, 3, 13), int8], int8, Tensor[(507), int8]) */
}

def @func_6014(%var_6001: Tensor[(9, 5, 5), float64]) -> Tensor[(9, 5, 5), int32] {
  %813 = cast(%var_6001, dtype="float64") /* ty=Tensor[(9, 5, 5), float64] */;
  %814 = log(%813) /* ty=Tensor[(9, 5, 5), float64] */;
  %815 = cast(%var_6001, dtype="int32") /* ty=Tensor[(9, 5, 5), int32] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="int32") /* ty=Tensor[(9, 5, 5), int32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%817, %818) /* ty=Tensor[(9, 5, 5), int32] */
}

def @func_9444() -> (Tensor[(14, 16, 10), bool], Tensor[(30), int64]) {
  @func_9442() /* ty=(Tensor[(14, 16, 10), bool], Tensor[(30), int64]) */
}

def @func_12634() -> Tensor[(7, 10, 7), float32] {
  %819 = fn () -> Tensor[(7, 10, 7), float32] {
    @func_12508() /* ty=Tensor[(7, 10, 7), float32] */
  };
  %819() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_12517() -> (Tensor[(7, 10, 7), bool],) {
  %820 = @func_8312() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */;
  %821 = %820.1;
  (%821,)
}

def @func_12509() -> Tensor[(7, 10, 7), float32] {
  %822 = fn () -> Tensor[(7, 10, 7), float32] {
    @func_2897() /* ty=Tensor[(7, 10, 7), float32] */
  };
  %822() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_8204() -> (Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  @func_8202() /* ty=(Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) */
}

def @func_8491() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %823 = @func_7089() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %824 = @func_7089() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %825 = @func_6295() /* ty=Tensor[(7, 10, 7), float32] */;
  %826 = %823.0;
  %827 = %824.0;
  (%825, %826, %827)
}

def @func_4575() -> Tensor[(7, 10, 7), float32] {
  %828 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %828.0
}

def @func_4389() -> Tensor[(7, 10, 7), float32] {
  %829 = fn () -> Tensor[(7, 10, 7), float32] {
    @func_3389() /* ty=Tensor[(7, 10, 7), float32] */
  };
  %829() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_12352() -> (Tensor[(1, 108), float32],) {
  %830 = @func_3932() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */;
  %831 = %830.2;
  %832 = cast(%831, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
  %833 = erf(%832) /* ty=Tensor[(1, 108), float32] */;
  (%833,)
}

def @func_13312(%var_13311: Tensor[(540), int32]) -> (Tensor[(6, 108), float32], Tensor[(4, 15, 9), int32], Tensor[(540), int32], Tensor[(1, 108), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64]) {
  %848 = fn (%var_13285: Tensor[(540), int32]) -> (Tensor[(6, 108), float32], Tensor[(4, 15, 9), int32], Tensor[(540), int32], Tensor[(1, 108), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64]) {
    %834 = @func_7894() /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) */;
    %835 = %834.0;
    %836 = cast(%835, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
    %837 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 108), float64] */, dtype="float32") /* ty=Tensor[(6, 108), float32] */;
    %838 = cast(%var_13285, dtype="int32") /* ty=Tensor[(540), int32] */;
    %839 = reshape(%838, newshape=[4, 15, 9]) /* ty=Tensor[(4, 15, 9), int32] */;
    %840 = cast(%835, dtype="float32") /* ty=Tensor[(1, 108), float32] */;
    %841 = cast(meta[relay.Constant][31] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %842 = reshape(%841, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
    %843 = @func_921(%842) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
    %844 = minimum(%836, %837) /* ty=Tensor[(6, 108), float32] */;
    %845 = @func_3738(%839) /* ty=Tensor[(4, 15, 9), int32] */;
    %846 = cos(%840) /* ty=Tensor[(1, 108), float32] */;
    %847 = %843.0;
    (%844, %845, %var_13285, %846, %847, meta[relay.Constant][31] /* ty=Tensor[(66), float64] */)
  };
  %848(%var_13311) /* ty=(Tensor[(6, 108), float32], Tensor[(4, 15, 9), int32], Tensor[(540), int32], Tensor[(1, 108), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64]) */
}

def @func_4611() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %849 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %850 = %849.1;
  %851 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
  (%850, %851)
}

def @func_7036(%var_7031: Tensor[(13, 9, 2), bool]) -> (Tensor[(13, 9, 2), bool],) {
  %852 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 9, 2), bool] */, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %853 = shape_of(%var_7031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%var_7031, dtype="bool") /* ty=Tensor[(13, 9, 2), bool] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %856 = logical_and(%854, %855) /* ty=Tensor[(13, 9, 2), bool] */;
  (%856,)
}

def @func_11196() -> Tensor[(7, 10, 7), float32] {
  %858 = fn () -> Tensor[(7, 10, 7), float32] {
    %857 = @func_10354() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %857.0
  };
  %858() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_7895() -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) {
  %863 = fn () -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) {
    %859 = @func_5739() /* ty=(Tensor[(30), int64], Tensor[(1, 108), float64]) */;
    %860 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
    %861 = %859.1;
    %862 = %860.1;
    (%861, %862)
  };
  %863() /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) */
}

def @func_7641() -> (Tensor[(7, 10, 7), float32], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) {
  %870 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) {
    %864 = @func_3419() /* ty=(Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %865 = cast(meta[relay.Constant][33] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %866 = reshape(%865, newshape=[4, 1, 4]) /* ty=Tensor[(4, 1, 4), float64] */;
    %867 = @func_4411(%866) /* ty=(Tensor[(4, 1, 4), float64],) */;
    %868 = %864.3;
    %869 = %867.0;
    (%868, %869, meta[relay.Constant][33] /* ty=Tensor[(16), float64] */)
  };
  %870() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(4, 1, 4), float64], Tensor[(16), float64]) */
}

def @func_4633() -> (Tensor[(7, 10, 7), float32],) {
  @func_4631() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_514(%var_502: Tensor[(5, 3, 2), int64]) -> Tensor[(5, 3, 2), int64] {
  %871 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 3, 2), int64] */, dtype="int64") /* ty=Tensor[(1, 3, 2), int64] */;
  %872 = cast(%var_502, dtype="int64") /* ty=Tensor[(5, 3, 2), int64] */;
  multiply(%871, %872) /* ty=Tensor[(5, 3, 2), int64] */
}

def @func_12869() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %873 = @func_11756() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %874 = @func_12124() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %875 = %873.0;
  %876 = %874.1;
  (%875, %876)
}

def @func_5335() -> (Tensor[(1, 108), float64],) {
  %879 = fn () -> (Tensor[(1, 108), float64],) {
    %877 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %878 = %877.4;
    (%878,)
  };
  %879() /* ty=(Tensor[(1, 108), float64],) */
}

def @func_5419() -> (Tensor[(7, 10, 7), float32],) {
  %882 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %880 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
    %881 = %880.1;
    (%881,)
  };
  %882() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_8939() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_8937() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_12354() -> (Tensor[(1, 108), float32],) {
  @func_12352() /* ty=(Tensor[(1, 108), float32],) */
}

def @func_13635() -> Tensor[(7, 10, 7), float32] {
  %883 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
  %883.0
}

def @func_3075(%var_3073: Tensor[(7, 10, 7), float32]) -> Tensor[(7, 10, 7), bool] {
  @func_3072(%var_3073) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_3784() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %887 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %884 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
    %885 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
    %886 = %884.1;
    (%885, %886)
  };
  %887() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_7755() -> (Tensor[(7, 10, 7), float32],) {
  @func_7753() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_13257(%var_13218: Tensor[(3, 11, 5), float64]) -> (Tensor[(3, 11, 5), float64], Tensor[(30, 1), float32], Tensor[(10, 3), int64], Tensor[(7, 10, 7), bool]) {
  %888 = cast(%var_13218, dtype="float64") /* ty=Tensor[(3, 11, 5), float64] */;
  %889 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 3), int64] */, dtype="int64") /* ty=Tensor[(10, 3), int64] */;
  %890 = reshape(%889, newshape=[30, 1]) /* ty=Tensor[(30, 1), int64] */;
  %891 = @func_3955(%890) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) */;
  %892 = @func_8312() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */;
  %893 = sqrt(%888) /* ty=Tensor[(3, 11, 5), float64] */;
  %894 = %891.2;
  %895 = %892.1;
  (%893, %894, meta[relay.Constant][35] /* ty=Tensor[(10, 3), int64] */, %895)
}

def @func_4682(%var_4681: Tensor[(30), int64]) -> (Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
  %910 = fn (%var_4658: Tensor[(30), int64]) -> (Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
    %896 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
    %897 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
    %898 = %897.1;
    %899 = cast(%898, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %900 = reshape(%899, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %901 = cast(%var_4658, dtype="int64") /* ty=Tensor[(30), int64] */;
    %902 = reshape(%901, newshape=[30, 1]) /* ty=Tensor[(30, 1), int64] */;
    %903 = @func_3955(%902) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30, 1), float32]) */;
    %904 = @func_4631() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %905 = %896.2;
    %906 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
    %907 = @func_3072(%900) /* ty=Tensor[(7, 10, 7), bool] */;
    %908 = %903.1;
    %909 = %904.0;
    (%905, %898, %906, %907, %908, %var_4658, %909)
  };
  %910(%var_4681) /* ty=(Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */
}

def @func_11526() -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float64]) {
  %911 = @func_9666() /* ty=(Tensor[(6, 11, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %912 = cast(meta[relay.Constant][36] /* ty=Tensor[(30), int64] */, dtype="int64") /* ty=Tensor[(30), int64] */;
  %913 = reshape(%912, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %914 = @func_3212(%913) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %915 = @func_6912() /* ty=(Tensor[(7, 10, 7), uint16], Tensor[(7, 10, 7), float64]) */;
  %916 = %911.1;
  %917 = %914.1;
  %918 = %915.1;
  (%916, %917, meta[relay.Constant][36] /* ty=Tensor[(30), int64] */, %918)
}

def @func_3360() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) {
  %919 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %920 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %921 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 30), int64] */, dtype="int64") /* ty=Tensor[(1, 30), int64] */;
  %922 = reshape(%921, newshape=[30]) /* ty=Tensor[(30), int64] */;
  %923 = @func_3212(%922) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
  %924 = %919.0;
  %925 = %920.1;
  %926 = %923.2;
  (%924, %925, %926, meta[relay.Constant][37] /* ty=Tensor[(1, 30), int64] */)
}

def @func_12177() -> Tensor[(7, 10, 7), float32] {
  %928 = fn () -> Tensor[(7, 10, 7), float32] {
    %927 = @func_6607() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %927.1
  };
  %928() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_14652() -> Tensor[(30), int64] {
  %930 = fn () -> Tensor[(30), int64] {
    %929 = @func_3287() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */;
    %929.2
  };
  %930() /* ty=Tensor[(30), int64] */
}

def @func_10451() -> (Tensor[(30), int64], Tensor[(6, 11, 1), float64], Tensor[(112), float64], Tensor[(66), float64]) {
  %931 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %932 = cast(meta[relay.Constant][38] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %933 = cast(meta[relay.Constant][39] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %934 = reshape(%932, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %935 = reshape(%933, newshape=[66]) /* ty=Tensor[(66), float64] */;
  %936 = @func_5185(%934, %935) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %937 = %931.2;
  %938 = %936.3;
  (%937, %938, meta[relay.Constant][38] /* ty=Tensor[(112), float64] */, meta[relay.Constant][39] /* ty=Tensor[(66), float64] */)
}

def @func_12366() -> (Tensor[(1, 30), int64],) {
  %941 = fn () -> (Tensor[(1, 30), int64],) {
    %939 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
    %940 = %939.3;
    (%940,)
  };
  %941() /* ty=(Tensor[(1, 30), int64],) */
}

def @func_6983() -> Tensor[(7, 10, 7), float32] {
  %943 = fn () -> Tensor[(7, 10, 7), float32] {
    %942 = @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %942.0
  };
  %943() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_3933() -> (Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) {
  %950 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) {
    %944 = @func_3485() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %945 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
    %946 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %947 = %944.0;
    %948 = %945.0;
    %949 = %946.4;
    (%947, %948, %949)
  };
  %950() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(1, 108), float64]) */
}

def @func_5551() -> Tensor[(9, 12, 1), float64] {
  %952 = fn () -> Tensor[(9, 12, 1), float64] {
    %951 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %951.0
  };
  %952() /* ty=Tensor[(9, 12, 1), float64] */
}

def @func_13111() -> Tensor[(7, 10, 7), float32] {
  @func_10519() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_13852(%var_13850: Tensor[(972, 1), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(972, 1), float64], Tensor[(7, 10, 7), float32]) {
  @func_13849(%var_13850) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(972, 1), float64], Tensor[(7, 10, 7), float32]) */
}

def @func_8887() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) {
  @func_8885() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */
}

def @func_11116(%var_11030: Tensor[(9, 14, 3), float64], %var_11065: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 7), float32], Tensor[(9, 14, 3), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 8), uint32], Tensor[(864), float64], Tensor[(7, 10, 7), float32]) {
  %953 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %954 = cast(%var_11065, dtype="float64") /* ty=Tensor[(108), float64] */;
  %955 = reshape(%954, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %956 = @func_147(%955) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %957 = @func_10508() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %958 = cast(%var_11030, dtype="float64") /* ty=Tensor[(9, 14, 3), float64] */;
  %959 = rsqrt(%958) /* ty=Tensor[(9, 14, 3), float64] */;
  %960 = cast(%959, dtype="float32") /* ty=Tensor[(9, 14, 3), float32] */;
  %961 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %962 = cast(meta[relay.Constant][40] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %963 = reshape(%962, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
  %964 = @func_10242(%963) /* ty=(Tensor[(9, 12, 8), uint32],) */;
  %965 = %953.0;
  %966 = %956.0;
  %967 = %957.0;
  %968 = exp(%960) /* ty=Tensor[(9, 14, 3), float32] */;
  %969 = %961.0;
  %970 = %964.0;
  %971 = @func_10519() /* ty=Tensor[(7, 10, 7), float32] */;
  (%965, %966, %var_11065, %967, %968, %969, %970, meta[relay.Constant][40] /* ty=Tensor[(864), float64] */, %971)
}

def @func_9212(%var_9162: Tensor[(225), float64], %var_9186: Tensor[(10, 4), uint16], %var_9200: Tensor[(768), int64]) -> (Tensor[(9, 12, 1), float64], Tensor[(225), float64], Tensor[(9, 5, 5), float32], Tensor[(40, ?), bool], Tensor[(10, 4), uint16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(432), float64], Tensor[(96), int64], Tensor[(768), int64]) {
  %972 = @func_8885() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %973 = cast(%var_9162, dtype="float64") /* ty=Tensor[(225), float64] */;
  %974 = reshape(%973, newshape=[9, 5, 5]) /* ty=Tensor[(9, 5, 5), float64] */;
  %975 = @func_6014(%974) /* ty=Tensor[(9, 5, 5), int32] */;
  %976 = cast(%975, dtype="float32") /* ty=Tensor[(9, 5, 5), float32] */;
  %977 = cast(%var_9186, dtype="uint16") /* ty=Tensor[(10, 4), uint16] */;
  %978 = reshape(%977, newshape=[40, 1]) /* ty=Tensor[(40, 1), uint16] */;
  %979 = @func_4814(%978) /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(40, ?), bool]) */;
  %980 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %981 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %982 = cast(meta[relay.Constant][42] /* ty=Tensor[(96), int64] */, dtype="int64") /* ty=Tensor[(96), int64] */;
  %983 = cast(%var_9200, dtype="int64") /* ty=Tensor[(768), int64] */;
  %984 = reshape(%981, newshape=[4, 108]) /* ty=Tensor[(4, 108), float64] */;
  %985 = reshape(%982, newshape=[96]) /* ty=Tensor[(96), int64] */;
  %986 = reshape(%983, newshape=[768]) /* ty=Tensor[(768), int64] */;
  %987 = @func_5301(%984, %985, %986) /* ty=(Tensor[(16, 108), int8], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(4, 108), bool], Tensor[(16, 108), float32], Tensor[(7, 10, 7), float32], Tensor[(96), int64], Tensor[(768), int64], Tensor[(5, 13, 7), float32]) */;
  %988 = %972.2;
  %989 = sinh(%976) /* ty=Tensor[(9, 5, 5), float32] */;
  %990 = %979.2;
  %991 = %980.0;
  %992 = %987.2;
  (%988, %var_9162, %989, %990, %var_9186, %991, %992, meta[relay.Constant][41] /* ty=Tensor[(432), float64] */, meta[relay.Constant][42] /* ty=Tensor[(96), int64] */, %var_9200)
}

def @func_5189(%var_5187: Tensor[(112), float64], %var_5188: Tensor[(66), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_5185(%var_5187, %var_5188) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_7983() -> (Tensor[(7, 10, 7), float32],) {
  %993 = @func_7894() /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32]) */;
  %994 = %993.1;
  (%994,)
}

def @func_13113() -> Tensor[(7, 10, 7), float32] {
  @func_13111() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_12490() -> Tensor[(7, 10, 7), float32] {
  %995 = @func_3720() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %995.1
}

def @func_13793() -> (Tensor[(7, 10, 7), float64], Tensor[(66), float64], Tensor[(30), int64]) {
  @func_13791() /* ty=(Tensor[(7, 10, 7), float64], Tensor[(66), float64], Tensor[(30), int64]) */
}

def @func_4613() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_3988() -> Tensor[(7, 10, 7), float32] {
  @func_3986() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_2898() -> Tensor[(7, 10, 7), float32] {
  %998 = fn () -> Tensor[(7, 10, 7), float32] {
    %996 = @func_2841() /* ty=Tensor[(7, 10, 7), float32] */;
    %997 = cast(%996, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    sqrt(%997) /* ty=Tensor[(7, 10, 7), float32] */
  };
  %998() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_8775() -> Tensor[(7, 10, 7), float32] {
  %999 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %999.0
}

def @func_5067(%var_5066: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
  %1008 = fn (%var_5056: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) {
    %1000 = @func_4631() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1001 = cast(%var_5056, dtype="int64") /* ty=Tensor[(30), int64] */;
    %1002 = reshape(%1001, newshape=[30]) /* ty=Tensor[(30), int64] */;
    %1003 = @func_4680(%1002) /* ty=(Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64], Tensor[(7, 10, 7), bool], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
    %1004 = @func_3783() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %1005 = %1000.0;
    %1006 = %1003.4;
    %1007 = %1004.0;
    (%1005, %1006, %var_5056, %1007)
  };
  %1008(%var_5066) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */
}

def @func_7239(%var_7237: Tensor[(40), uint16]) -> (Tensor[(7, 10, 7), int8], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(40), uint16], Tensor[(1, 108), float64]) {
  @func_7236(%var_7237) /* ty=(Tensor[(7, 10, 7), int8], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32], Tensor[(5, 13, 7), float32], Tensor[(40), uint16], Tensor[(1, 108), float64]) */
}

def @func_9342(%var_9341: Tensor[(972), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 108), int32]) {
  %1020 = fn (%var_9317: Tensor[(972), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 108), int32]) {
    %1009 = cast(%var_9317, dtype="float64") /* ty=Tensor[(972), float64] */;
    %1010 = reshape(%1009, newshape=[9, 108]) /* ty=Tensor[(9, 108), float64] */;
    %1011 = @func_7593(%1010) /* ty=(Tensor[(9, 108), bool], Tensor[(9, 108), uint16]) */;
    %1012 = %1011.1;
    %1013 = cast(%var_9317, dtype="int32") /* ty=Tensor[(972), int32] */;
    %1014 = shape_of(%1012, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1015 = cast(%1012, dtype="int32") /* ty=Tensor[(9, 108), int32] */;
    %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %1017 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
    %1018 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
    %1019 = bitwise_xor(%1015, %1016) /* ty=Tensor[(9, 108), int32] */;
    (%1017, %1018, %1019)
  };
  %1020(%var_9341) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 108), int32]) */
}

def @func_7352(%var_7350: Tensor[(112), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(1, 66), float64], Tensor[(112), float64]) {
  @func_7349(%var_7350) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(1, 66), float64], Tensor[(112), float64]) */
}

def @func_12370() -> (Tensor[(7, 10, 7), float32],) {
  %1021 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1021,)
}

def @func_11846() -> (Tensor[(30), int64],) {
  @func_11844() /* ty=(Tensor[(30), int64],) */
}

def @func_11528() -> (Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float64]) {
  @func_11526() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(7, 10, 7), float64]) */
}

def @func_8153() -> Tensor[(7, 10, 7), float32] {
  @func_4388() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_8202() -> (Tensor[(1, 108), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  %1022 = cast(meta[relay.Constant][43] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %1023 = reshape(%1022, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
  %1024 = @func_921(%1023) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
  %1025 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1026 = @func_4216() /* ty=Tensor[(1, 108), float64] */;
  %1027 = %1024.0;
  %1028 = %1025.0;
  (%1026, %1027, meta[relay.Constant][43] /* ty=Tensor[(66), float64] */, %1028)
}

def @func_13494() -> (Tensor[(66), float64], Tensor[(7, 10, 7), float32]) {
  %1029 = @func_7335() /* ty=Tensor[(66), float64] */;
  %1030 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1029, %1030)
}

def @func_13571() -> (Tensor[(7, 10, 7), float32],) {
  @func_13569() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_7463(%var_7461: Tensor[(5, 6, 2), bool], %var_7462: Tensor[(5, 6, 2), bool]) -> (Tensor[(5, 6, 2), bool], Tensor[(7, 10, 7), float32]) {
  %1038 = fn (%var_7415: Tensor[(5, 6, 2), bool], %var_7416: Tensor[(5, 6, 2), bool]) -> (Tensor[(5, 6, 2), bool], Tensor[(7, 10, 7), float32]) {
    %1031 = cast(%var_7416, dtype="bool") /* ty=Tensor[(5, 6, 2), bool] */;
    %1032 = shape_of(%var_7415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1033 = cast(%var_7415, dtype="bool") /* ty=Tensor[(5, 6, 2), bool] */;
    %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1035 = @func_4872() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %1036 = logical_and(%1033, %1034) /* ty=Tensor[(5, 6, 2), bool] */;
    %1037 = %1035.1;
    (%1036, %1037)
  };
  %1038(%var_7461, %var_7462) /* ty=(Tensor[(5, 6, 2), bool], Tensor[(7, 10, 7), float32]) */
}

def @func_9639() -> Tensor[(66), float64] {
  %1040 = fn () -> Tensor[(66), float64] {
    %1039 = @func_9379() /* ty=(Tensor[(7, 10, 7), bool], Tensor[(66), float64]) */;
    %1039.1
  };
  %1040() /* ty=Tensor[(66), float64] */
}

def @func_9217(%var_9214: Tensor[(225), float64], %var_9215: Tensor[(10, 4), uint16], %var_9216: Tensor[(768), int64]) -> (Tensor[(9, 12, 1), float64], Tensor[(225), float64], Tensor[(9, 5, 5), float32], Tensor[(40, ?), bool], Tensor[(10, 4), uint16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(432), float64], Tensor[(96), int64], Tensor[(768), int64]) {
  @func_9212(%var_9214, %var_9215, %var_9216) /* ty=(Tensor[(9, 12, 1), float64], Tensor[(225), float64], Tensor[(9, 5, 5), float32], Tensor[(40, ?), bool], Tensor[(10, 4), uint16], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(432), float64], Tensor[(96), int64], Tensor[(768), int64]) */
}

def @func_13004() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1045 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %1041 = @func_10972() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1042 = @func_11010() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1043 = %1041.0;
    %1044 = %1042.0;
    (%1043, %1044)
  };
  %1045() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_5729() -> (Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) {
  %1046 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 96), int64] */, dtype="int64") /* ty=Tensor[(1, 96), int64] */;
  %1047 = cast(meta[relay.Constant][45] /* ty=Tensor[(64, 12), int64] */, dtype="int64") /* ty=Tensor[(64, 12), int64] */;
  %1048 = reshape(%1046, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), int64] */;
  %1049 = reshape(%1047, newshape=[6, 8, 16]) /* ty=Tensor[(6, 8, 16), int64] */;
  %1050 = @func_3006(%1048, %1049) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) */;
  %1051 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %1052 = %1051.2;
  %1053 = cast(%1052, dtype="uint8") /* ty=Tensor[(9, 12, 1), uint8] */;
  %1054 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 96), int64] */, dtype="uint8") /* ty=Tensor[(1, 96), uint8] */;
  %1055 = %1050.2;
  %1056 = maximum(%1053, %1054) /* ty=Tensor[(9, 12, 96), uint8] */;
  (%1055, meta[relay.Constant][45] /* ty=Tensor[(64, 12), int64] */, %1056)
}

def @func_8293(%var_8291: Tensor[(6, 1, 3), float32], %var_8292: Tensor[(108), float64]) -> (Tensor[(6, 1, 3), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64]) {
  %1063 = fn (%var_8274: Tensor[(6, 1, 3), float32], %var_8278: Tensor[(108), float64]) -> (Tensor[(6, 1, 3), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64]) {
    %1057 = cast(%var_8274, dtype="float32") /* ty=Tensor[(6, 1, 3), float32] */;
    %1058 = cast(%var_8278, dtype="float64") /* ty=Tensor[(108), float64] */;
    %1059 = reshape(%1058, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
    %1060 = @func_147(%1059) /* ty=(Tensor[(9, 12, 1), float64],) */;
    %1061 = sinh(%1057) /* ty=Tensor[(6, 1, 3), float32] */;
    %1062 = %1060.0;
    (%1061, %1062, %var_8278)
  };
  %1063(%var_8291, %var_8292) /* ty=(Tensor[(6, 1, 3), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64]) */
}

def @func_8493() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_8491() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_6612() -> (Tensor[(30), int64],) {
  %1064 = @func_5739() /* ty=(Tensor[(30), int64], Tensor[(1, 108), float64]) */;
  %1065 = %1064.0;
  (%1065,)
}

def @func_10242(%var_10235: Tensor[(9, 12, 8), float64]) -> (Tensor[(9, 12, 8), uint32],) {
  %1066 = @func_4943() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
  %1067 = %1066.1;
  %1068 = cast(%1067, dtype="uint32") /* ty=Tensor[(9, 12, 1), uint32] */;
  %1069 = cast(%var_10235, dtype="uint32") /* ty=Tensor[(9, 12, 8), uint32] */;
  %1070 = bitwise_or(%1068, %1069) /* ty=Tensor[(9, 12, 8), uint32] */;
  (%1070,)
}

def @func_3585() -> (Tensor[(7, 10, 7), float32],) {
  %1071 = @func_3120() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
  %1072 = %1071.0;
  (%1072,)
}

def @func_2918(%var_2917: Tensor[(7, 10, 7), float32]) -> Tensor[(7, 10, 7), bool] {
  %1078 = fn (%var_2911: Tensor[(7, 10, 7), float32]) -> Tensor[(7, 10, 7), bool] {
    %1073 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
    %1074 = cast(%var_2911, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
    %1075 = shape_of(%1073, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1076 = cast(%1073, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
    %1077 = dyn.reshape(%1074, %1075, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%1076, %1077) /* ty=Tensor[(7, 10, 7), bool] */
  };
  %1078(%var_2917) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_10585(%var_10583: Tensor[(7, 108), float64], %var_10584: Tensor[(16, 108), float64]) -> (Tensor[(10, 15, ?), int32], Tensor[(7, 108), float64], Tensor[(16, 108), bool], Tensor[(30), int64], Tensor[(1, 30), int64]) {
  %1113 = fn (%var_10565: Tensor[(7, 108), float64], %var_10570: Tensor[(16, 108), float64]) -> (Tensor[(10, 15, ?), int32], Tensor[(7, 108), float64], Tensor[(16, 108), bool], Tensor[(30), int64], Tensor[(1, 30), int64]) {
    %1079 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 15, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
    %1080 = exp(%1079) /* ty=Tensor[(10, 15, 1), float64] */;
    %1081 = cast(%1080, dtype="uint64") /* ty=Tensor[(10, 15, 1), uint64] */;
    %1082 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 15, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1083 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 15, 1), float64] */, dtype="uint64") /* ty=Tensor[(10, 15, 1), uint64] */;
    %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1085 = bitwise_and(%1083, %1084) /* ty=Tensor[(10, 15, ?), uint64] */;
    %1086 = cast(%1085, dtype="bool") /* ty=Tensor[(10, 15, ?), bool] */;
    %1087 = shape_of(%1080, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1088 = cast(%1080, dtype="bool") /* ty=Tensor[(10, 15, 1), bool] */;
    %1089 = dyn.reshape(%1086, %1087, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1090 = not_equal(%1088, %1089) /* ty=Tensor[(10, 15, ?), bool] */;
    %1091 = cast(%1080, dtype="bool") /* ty=Tensor[(10, 15, 1), bool] */;
    %1092 = shape_of(%1090, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1093 = cast(%1090, dtype="bool") /* ty=Tensor[(10, 15, ?), bool] */;
    %1094 = dyn.reshape(%1091, %1092, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1095 = logical_and(%1093, %1094) /* ty=Tensor[(10, 15, ?), bool] */;
    %1096 = cast(%1095, dtype="int32") /* ty=Tensor[(10, 15, ?), int32] */;
    %1097 = shape_of(%1085, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1098 = cast(%1085, dtype="int32") /* ty=Tensor[(10, 15, ?), int32] */;
    %1099 = dyn.reshape(%1096, %1097, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1100 = @func_5569() /* ty=(Tensor[(1, 108), float64],) */;
    %1101 = %1100.0;
    %1102 = cast(%1101, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
    %1103 = cast(%var_10565, dtype="float64") /* ty=Tensor[(7, 108), float64] */;
    %1104 = cast(%1101, dtype="bool") /* ty=Tensor[(1, 108), bool] */;
    %1105 = cast(%var_10570, dtype="bool") /* ty=Tensor[(16, 108), bool] */;
    %1106 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 30), int64] */, dtype="int64") /* ty=Tensor[(1, 30), int64] */;
    %1107 = reshape(%1106, newshape=[30]) /* ty=Tensor[(30), int64] */;
    %1108 = @func_9018(%1107) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 108), bool], Tensor[(6, 108), uint8], Tensor[(5, 13, 7), float32], Tensor[(30), int64], Tensor[(7, 10, 7), float32]) */;
    %1109 = bitwise_or(%1098, %1099) /* ty=Tensor[(10, 15, ?), int32] */;
    %1110 = floor_mod(%1102, %1103) /* ty=Tensor[(7, 108), float64] */;
    %1111 = greater_equal(%1104, %1105) /* ty=Tensor[(16, 108), bool] */;
    %1112 = %1108.4;
    (%1109, %1110, %1111, %1112, meta[relay.Constant][47] /* ty=Tensor[(1, 30), int64] */)
  };
  %1113(%var_10583, %var_10584) /* ty=(Tensor[(10, 15, ?), int32], Tensor[(7, 108), float64], Tensor[(16, 108), bool], Tensor[(30), int64], Tensor[(1, 30), int64]) */
}

def @func_11756() -> (Tensor[(7, 10, 7), float32],) {
  %1114 = @func_10354() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1115 = %1114.0;
  (%1115,)
}

def @func_14080() -> Tensor[(7, 10, 7), uint16] {
  @func_14078() /* ty=Tensor[(7, 10, 7), uint16] */
}

def @func_14148() -> Tensor[(7, 10, 7), float32] {
  %1116 = fn () -> Tensor[(7, 10, 7), float32] {
    @func_8775() /* ty=Tensor[(7, 10, 7), float32] */
  };
  %1116() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_12084() -> Tensor[(7, 10, 7), float32] {
  %1117 = fn () -> Tensor[(7, 10, 7), float32] {
    @func_4575() /* ty=Tensor[(7, 10, 7), float32] */
  };
  %1117() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_10521() -> Tensor[(7, 10, 7), float32] {
  @func_10519() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_6691() -> Tensor[(7, 10, 7), float32] {
  %1119 = fn () -> Tensor[(7, 10, 7), float32] {
    %1118 = @func_4611() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %1118.0
  };
  %1119() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_6296() -> Tensor[(7, 10, 7), float32] {
  %1121 = fn () -> Tensor[(7, 10, 7), float32] {
    %1120 = @func_5610() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %1120.1
  };
  %1121() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_14840() -> (Tensor[(9, 12, 1), float64],) {
  %1124 = fn () -> (Tensor[(9, 12, 1), float64],) {
    %1122 = @func_11948() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %1123 = %1122.0;
    (%1123,)
  };
  %1124() /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_5739() -> (Tensor[(30), int64], Tensor[(1, 108), float64]) {
  %1125 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
  %1126 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
  %1127 = %1125.2;
  %1128 = %1126.0;
  (%1127, %1128)
}

def @func_10936() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
  %1137 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
    %1129 = @func_4435() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64]) */;
    %1130 = @func_9130() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1131 = %1130.0;
    %1132 = cast(%1131, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %1133 = reshape(%1132, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %1134 = @func_5972(%1133) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) */;
    %1135 = %1129.0;
    %1136 = %1134.0;
    (%1135, %1131, %1136)
  };
  %1137() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) */
}

def @func_13849(%var_13843: Tensor[(972, 1), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(972, 1), float64], Tensor[(7, 10, 7), float32]) {
  %1138 = @func_3039() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1139 = cast(%var_13843, dtype="float64") /* ty=Tensor[(972, 1), float64] */;
  %1140 = reshape(%1139, newshape=[972]) /* ty=Tensor[(972), float64] */;
  %1141 = @func_9340(%1140) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 108), int32]) */;
  %1142 = @func_9928() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1143 = %1138.0;
  %1144 = %1141.0;
  %1145 = %1142.0;
  (%1143, %1144, %var_13843, %1145)
}

def @func_12519() -> (Tensor[(7, 10, 7), bool],) {
  @func_12517() /* ty=(Tensor[(7, 10, 7), bool],) */
}

def @func_10453() -> (Tensor[(30), int64], Tensor[(6, 11, 1), float64], Tensor[(112), float64], Tensor[(66), float64]) {
  @func_10451() /* ty=(Tensor[(30), int64], Tensor[(6, 11, 1), float64], Tensor[(112), float64], Tensor[(66), float64]) */
}

def @func_6607() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1146 = @func_4363() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(3, 36), float64]) */;
  %1147 = %1146.0;
  %1148 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1147, %1148)
}

def @func_7090() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1151 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %1149 = @func_4388() /* ty=Tensor[(7, 10, 7), float32] */;
    %1150 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
    (%1149, %1150)
  };
  %1151() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_11012() -> (Tensor[(7, 10, 7), float32],) {
  @func_11010() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_11364(%var_11359: Tensor[(9, 12, 2), float64], %var_11360: Tensor[(96), int64], %var_11361: Tensor[(384, 2), int64], %var_11362: Tensor[(540), int32], %var_11363: Tensor[(112, 1), float64]) -> (Tensor[(9, 12, 2), uint32], Tensor[(66), float64], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(540), int32], Tensor[(7, 2, 8), float64], Tensor[(112, 1), float64]) {
  %1168 = fn (%var_11330: Tensor[(9, 12, 2), float64], %var_11339: Tensor[(96), int64], %var_11340: Tensor[(384, 2), int64], %var_11341: Tensor[(540), int32], %var_11344: Tensor[(112, 1), float64]) -> (Tensor[(9, 12, 2), uint32], Tensor[(66), float64], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(540), int32], Tensor[(7, 2, 8), float64], Tensor[(112, 1), float64]) {
    %1152 = @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */;
    %1153 = %1152.0;
    %1154 = cast(%1153, dtype="uint32") /* ty=Tensor[(9, 12, 1), uint32] */;
    %1155 = cast(%var_11330, dtype="uint32") /* ty=Tensor[(9, 12, 2), uint32] */;
    %1156 = cast(%var_11339, dtype="int64") /* ty=Tensor[(96), int64] */;
    %1157 = cast(%var_11340, dtype="int64") /* ty=Tensor[(384, 2), int64] */;
    %1158 = cast(%var_11341, dtype="int32") /* ty=Tensor[(540), int32] */;
    %1159 = reshape(%1156, newshape=[96]) /* ty=Tensor[(96), int64] */;
    %1160 = reshape(%1157, newshape=[384, 2]) /* ty=Tensor[(384, 2), int64] */;
    %1161 = reshape(%1158, newshape=[540]) /* ty=Tensor[(540), int32] */;
    %1162 = @func_7849(%1159, %1160, %1161) /* ty=(Tensor[(30), int64], Tensor[(30), int64], Tensor[(6, 1, 16), float32], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(6, 11, 1), float32], Tensor[(66), float64], Tensor[(4, 15, 9), int32], Tensor[(540), int32]) */;
    %1163 = cast(%var_11344, dtype="float64") /* ty=Tensor[(112, 1), float64] */;
    %1164 = reshape(%1163, newshape=[7, 2, 8]) /* ty=Tensor[(7, 2, 8), float64] */;
    %1165 = left_shift(%1154, %1155) /* ty=Tensor[(9, 12, 2), uint32] */;
    %1166 = %1162.6;
    %1167 = @func_4304(%1164) /* ty=Tensor[(7, 2, 8), float64] */;
    (%1165, %1166, %var_11339, %var_11340, %var_11341, %1167, %var_11344)
  };
  %1168(%var_11359, %var_11360, %var_11361, %var_11362, %var_11363) /* ty=(Tensor[(9, 12, 2), uint32], Tensor[(66), float64], Tensor[(96), int64], Tensor[(384, 2), int64], Tensor[(540), int32], Tensor[(7, 2, 8), float64], Tensor[(112, 1), float64]) */
}

def @func_1964(%var_1933: Tensor[(7, 10, 7), float32]) -> (Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) {
  %1169 = cast(%var_1933, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %1170 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 108), float64] */, dtype="float64") /* ty=Tensor[(1, 108), float64] */;
  %1171 = reshape(%1170, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %1172 = @func_147(%1171) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %1173 = cosh(%1169) /* ty=Tensor[(7, 10, 7), float32] */;
  %1174 = %1172.0;
  (%1173, %1174, meta[relay.Constant][48] /* ty=Tensor[(1, 108), float64] */)
}

def @func_6941() -> Tensor[(7, 10, 7), float32] {
  %1176 = fn () -> Tensor[(7, 10, 7), float32] {
    %1175 = @func_5418() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1175.0
  };
  %1176() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_6557(%var_6556: Tensor[(4, 28), float64]) -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1188 = fn (%var_6542: Tensor[(4, 28), float64]) -> (Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %1177 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %1178 = cast(%var_6542, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
    %1179 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 66), float64] */, dtype="float64") /* ty=Tensor[(1, 66), float64] */;
    %1180 = reshape(%1178, newshape=[112]) /* ty=Tensor[(112), float64] */;
    %1181 = reshape(%1179, newshape=[66]) /* ty=Tensor[(66), float64] */;
    %1182 = @func_5185(%1180, %1181) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), bool], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */;
    %1183 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1184 = %1177.4;
    %1185 = %1182.0;
    %1186 = %1183.0;
    %1187 = @func_4575() /* ty=Tensor[(7, 10, 7), float32] */;
    (%1184, %1185, %var_6542, meta[relay.Constant][49] /* ty=Tensor[(1, 66), float64] */, %1186, %1187)
  };
  %1188(%var_6556) /* ty=(Tensor[(1, 108), float64], Tensor[(7, 10, 7), float32], Tensor[(4, 28), float64], Tensor[(1, 66), float64], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_3672() -> (Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) {
  %1199 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) {
    %1189 = cast(meta[relay.Constant][50] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %1190 = reshape(%1189, newshape=[6, 11, 1]) /* ty=Tensor[(6, 11, 1), float64] */;
    %1191 = @func_921(%1190) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */;
    %1192 = @func_3389() /* ty=Tensor[(7, 10, 7), float32] */;
    %1193 = cast(%1192, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
    %1194 = reshape(%1193, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), float32] */;
    %1195 = @func_1964(%1194) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(9, 12, 1), float64], Tensor[(1, 108), float64]) */;
    %1196 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
    %1197 = %1191.0;
    %1198 = %1195.2;
    (%1196, %1197, meta[relay.Constant][50] /* ty=Tensor[(66), float64] */, %1192, %1198)
  };
  %1199() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */
}

def @func_7505() -> Tensor[(7, 10, 7), float32] {
  @func_2897() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_14800() -> Tensor[(7, 10, 7), float32] {
  %1201 = fn () -> Tensor[(7, 10, 7), float32] {
    %1200 = @func_12726() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1200.0
  };
  %1201() /* ty=Tensor[(7, 10, 7), float32] */
}

def @func_9555() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1206 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
    %1202 = @func_8381() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1203 = @func_6295() /* ty=Tensor[(7, 10, 7), float32] */;
    %1204 = @func_4575() /* ty=Tensor[(7, 10, 7), float32] */;
    %1205 = %1202.0;
    (%1203, %1204, %1205)
  };
  %1206() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_7740(%var_7738: Tensor[(66), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  @func_7737(%var_7738) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 2, 8), float64], Tensor[(112), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */
}

def @func_6822() -> (Tensor[(7, 10, 7), float32],) {
  @func_6820() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_10510() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  @func_10508() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) */
}

def @func_6496(%var_6494: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), bool],) {
  @func_6493(%var_6494) /* ty=(Tensor[(9, 12, 2), bool],) */
}

def @func_7308() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) {
  %1217 = fn () -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) {
    %1207 = @func_3585() /* ty=(Tensor[(7, 10, 7), float32],) */;
    %1208 = @func_3671() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(6, 11, 1), float64], Tensor[(66), float64], Tensor[(7, 10, 7), float32], Tensor[(1, 108), float64]) */;
    %1209 = @func_5550() /* ty=Tensor[(9, 12, 1), float64] */;
    %1210 = cast(%1209, dtype="bool") /* ty=Tensor[(9, 12, 1), bool] */;
    %1211 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 12, 13), float64] */, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
    %1212 = @func_5334() /* ty=(Tensor[(1, 108), float64],) */;
    %1213 = %1207.0;
    %1214 = %1208.3;
    %1215 = equal(%1210, %1211) /* ty=Tensor[(9, 12, 13), bool] */;
    %1216 = %1212.0;
    (%1213, %1214, %1215, %1216)
  };
  %1217() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(9, 12, 13), bool], Tensor[(1, 108), float64]) */
}

def @func_4205(%var_4204: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
  %1224 = fn (%var_4197: Tensor[(30), int64]) -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) {
    %1218 = @func_3360() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64], Tensor[(1, 30), int64]) */;
    %1219 = cast(%var_4197, dtype="int64") /* ty=Tensor[(30), int64] */;
    %1220 = reshape(%1219, newshape=[30]) /* ty=Tensor[(30), int64] */;
    %1221 = @func_3212(%1220) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(5, 3, 2), int64], Tensor[(30), int64], Tensor[(5, 13, 7), float32]) */;
    %1222 = %1218.0;
    %1223 = %1221.0;
    (%1222, %1223, %var_4197)
  };
  %1224(%var_4204) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(30), int64]) */
}

def @func_8100() -> (Tensor[(13, 11, 15), uint16], Tensor[(7, 10, 7), float32]) {
  @func_8098() /* ty=(Tensor[(13, 11, 15), uint16], Tensor[(7, 10, 7), float32]) */
}

def @func_924(%var_922: Tensor[(6, 11, 1), float64]) -> (Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) {
  @func_921(%var_922) /* ty=(Tensor[(6, 11, 1), float64], Tensor[(6, 11, 1), float32]) */
}

def @func_11157(%var_11155: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(108), float64]) {
  @func_11154(%var_11155) /* ty=(Tensor[(7, 10, 7), float32], Tensor[(14, 16, 10), bool], Tensor[(108), float64]) */
}

def @func_13609(%var_13587: Tensor[(7, 1, 4), int16], %var_13588: Tensor[(7, 4, 4), int16]) -> (Tensor[(7, 4, 4), int16], Tensor[(7, 10, 7), float32]) {
  %1225 = cast(%var_13587, dtype="int16") /* ty=Tensor[(7, 1, 4), int16] */;
  %1226 = cast(%var_13588, dtype="int16") /* ty=Tensor[(7, 4, 4), int16] */;
  %1227 = @func_7983() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1228 = left_shift(%1225, %1226) /* ty=Tensor[(7, 4, 4), int16] */;
  %1229 = %1227.0;
  (%1228, %1229)
}

def @func_5731() -> (Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) {
  @func_5729() /* ty=(Tensor[(7, 10, 7), float32], Tensor[(64, 12), int64], Tensor[(9, 12, 96), uint8]) */
}

def @func_8622(%var_8595: Tensor[(108), float64]) -> (Tensor[(7, 10, 7), float32], Tensor[(108), float64], Tensor[(9, 12, 1), float64], Tensor[(7, 10, 7), float32]) {
  %1230 = cast(%var_8595, dtype="float64") /* ty=Tensor[(108), float64] */;
  %1231 = reshape(%1230, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %1232 = @func_147(%1231) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %1233 = %1232.0;
  %1234 = cast(%1233, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %1235 = @func_7505() /* ty=Tensor[(7, 10, 7), float32] */;
  %1236 = cosh(%1234) /* ty=Tensor[(9, 12, 1), float64] */;
  %1237 = @func_6940() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1235, %var_8595, %1236, %1237)
}

def @func_7753() -> (Tensor[(7, 10, 7), float32],) {
  %1238 = @func_6709() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1238,)
}

def @func_3006(%var_2974: Tensor[(6, 1, 16), int64], %var_2975: Tensor[(6, 8, 16), int64]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 1, 16), float32], Tensor[(7, 10, 7), float32]) {
  %1239 = cast(%var_2974, dtype="bool") /* ty=Tensor[(6, 1, 16), bool] */;
  %1240 = cast(%var_2975, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %1241 = cast(%var_2974, dtype="float32") /* ty=Tensor[(6, 1, 16), float32] */;
  %1242 = @func_2689() /* ty=(Tensor[(5, 13, 7), float32], Tensor[(7, 10, 7), float32], Tensor[(1, 490), float32]) */;
  %1243 = greater_equal(%1239, %1240) /* ty=Tensor[(6, 8, 16), bool] */;
  %1244 = acosh(%1241) /* ty=Tensor[(6, 1, 16), float32] */;
  %1245 = %1242.1;
  (%1243, %1244, %1245)
}

def @func_13569() -> (Tensor[(7, 10, 7), float32],) {
  %1246 = @func_3986() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1246,)
}

def @func_9929() -> (Tensor[(7, 10, 7), float32],) {
  %1248 = fn () -> (Tensor[(7, 10, 7), float32],) {
    %1247 = @func_2897() /* ty=Tensor[(7, 10, 7), float32] */;
    (%1247,)
  };
  %1248() /* ty=(Tensor[(7, 10, 7), float32],) */
}

def @func_12765() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), float32]) {
  %1249 = @func_9130() /* ty=(Tensor[(7, 10, 7), float32],) */;
  %1250 = %1249.0;
  %1251 = @func_12633() /* ty=Tensor[(7, 10, 7), float32] */;
  (%1250, %1251)
}

def @func_8312() -> (Tensor[(7, 10, 7), float32], Tensor[(7, 10, 7), bool]) {
  %1252 = @func_6369() /* ty=Tensor[(7, 10, 7), float32] */;
  %1253 = cast(%1252, dtype="float32") /* ty=Tensor[(7, 10, 7), float32] */;
  %1254 = reshape(%1253, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %1255 = @func_5972(%1254) /* ty=(Tensor[(7, 10, 7), bool], Tensor[(490), float32], Tensor[(1, 108), float32], Tensor[(7, 10, 7), float32]) */;
  %1256 = %1255.0;
  (%1252, %1256)
}

def @func_9256(%var_9254: int8, %var_9255: Tensor[(13, 3, 13), int8]) -> Tensor[(13, 3, 13), int8] {
  @func_9252(%var_9254, %var_9255) /* ty=Tensor[(13, 3, 13), int8] */
}

def @func_5485() -> (Tensor[(9, 12, 1), float64],) {
  @func_5483() /* ty=(Tensor[(9, 12, 1), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen821/build/output.py", line 4264, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:21:15] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

