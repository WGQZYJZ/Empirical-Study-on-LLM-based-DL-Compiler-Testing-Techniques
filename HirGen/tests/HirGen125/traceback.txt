==========mod==========
#[version = "0.0.5"]
def @func_2327(%var_2297: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(1430), float64]) {
  %0 = @func_1516() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %1 = cast(%var_2297, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %2 = reshape(%1, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %3 = @func_1944(%2) /* ty=(Tensor[(1430), float32], Tensor[(1430), bool]) */;
  %4 = @func_1882() /* ty=(Tensor[(1430), float32], Tensor[(1430), float64]) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %7 = atanh(%6) /* ty=Tensor[(1430), float32] */;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %9 = %0.0;
  %10 = %3.0;
  %11 = asin(%8) /* ty=Tensor[(1430), float64] */;
  (%9, %10, %var_2297, %11)
}

def @func_3891(%var_3887: Tensor[(2, 10, 12), int64]) -> Tensor[(2, 10, 12), bool] {
  %12 = cast(2 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %13 = cast(%var_3887, dtype="bool") /* ty=Tensor[(2, 10, 12), bool] */;
  less_equal(%12, %13) /* ty=Tensor[(2, 10, 12), bool] */
}

def @func_3990() -> (Tensor[(9, 6, 15), int16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16]) {
  %14 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(143, 10), int16] */, dtype="int16") /* ty=Tensor[(143, 10), int16] */;
  %16 = reshape(%15, newshape=[1430]) /* ty=Tensor[(1430), int16] */;
  %17 = @func_1236(%16) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %18 = %14.0;
  %19 = %17.1;
  (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(143, 10), int16] */)
}

def @func_3042(%var_3001: Tensor[(35, 9), float32]) -> (Tensor[(35, 9), float32], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(1, 56), float64], Tensor[(11, 13, 10), int64], Tensor[(11, 13, 10), float32]) {
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 56), float64] */, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %24 = reshape(%20, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %25 = reshape(%21, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %26 = reshape(%22, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %27 = reshape(%23, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %28 = @func_1392(%24, %25, %26, %27) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */;
  %29 = @func_2097() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) */;
  %30 = %29.1;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %32 = sin(%31) /* ty=Tensor[(11, 13, 10), float32] */;
  %33 = cast(%32, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
  %34 = cast(%32, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
  %35 = cast(%var_3001, dtype="float32") /* ty=Tensor[(35, 9), float32] */;
  %36 = cast(%var_3001, dtype="float32") /* ty=Tensor[(35, 9), float32] */;
  %37 = reshape(%33, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
  %38 = reshape(%34, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
  %39 = reshape(%35, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %40 = reshape(%36, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %41 = @func_648(%37, %38, %39, %40) /* ty=(Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) */;
  %42 = %41.0;
  %43 = cast(%42, dtype="int64") /* ty=Tensor[(11, 13, 10), int64] */;
  %44 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%32, dtype="int64") /* ty=Tensor[(11, 13, 10), int64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 13, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %48 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%32, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %51 = %28.2;
  %52 = add(%45, %46) /* ty=Tensor[(11, 13, 10), int64] */;
  %53 = mod(%49, %50) /* ty=Tensor[(11, 13, 10), float32] */;
  (%var_3001, %51, meta[relay.Constant][1] /* ty=Tensor[(640), float32] */, meta[relay.Constant][2] /* ty=Tensor[(1, 56), float64] */, %52, %53)
}

def @func_2965(%var_2954: Tensor[(6, 16, 7), float32], %var_2955: Tensor[(6, 16, 7), float32]) -> Tensor[(6, 16, 7), float64] {
  %54 = cast(%var_2955, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %55 = shape_of(%var_2954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_2954, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %58 = floor_divide(%56, %57) /* ty=Tensor[(6, 16, 7), float32] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  acosh(%59) /* ty=Tensor[(6, 16, 7), float64] */
}

def @func_4268() -> (Tensor[(12, 15, 3), int32], Tensor[(12, 15, 3), float64]) {
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 3), float32] */;
  %61 = cos(%60) /* ty=Tensor[(12, 15, 3), float32] */;
  %62 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(12, 15, 3), int32] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="int32") /* ty=Tensor[(12, 15, 3), int32] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %66 = cast(%61, dtype="float64") /* ty=Tensor[(12, 15, 3), float64] */;
  %67 = right_shift(%64, %65) /* ty=Tensor[(12, 15, 3), int32] */;
  %68 = atan(%66) /* ty=Tensor[(12, 15, 3), float64] */;
  (%67, %68)
}

def @func_2536(%var_2498: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), uint16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), float32]) {
  %69 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
  %70 = %69.0;
  %71 = cast(%var_2498, dtype="uint16") /* ty=Tensor[(3, 16, 16), uint16] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="uint16") /* ty=Tensor[(3, 16, 16), uint16] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(143, 10), float32] */, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(143, 10), float32] */, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %77 = reshape(%75, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %78 = reshape(%76, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %79 = subtract(%73, %74) /* ty=Tensor[(3, 16, 16), uint16] */;
  %80 = @func_111(%77, %78) /* ty=Tensor[(11, 13, 10), int16] */;
  (%79, %80, meta[relay.Constant][6] /* ty=Tensor[(143, 10), float32] */)
}

def @func_76(%var_55: Tensor[(4, 7, 2), float64]) -> (Tensor[(4, 7, 2), int8],) {
  %81 = cast(%var_55, dtype="float64") /* ty=Tensor[(4, 7, 2), float64] */;
  %82 = log(%81) /* ty=Tensor[(4, 7, 2), float64] */;
  %83 = cast(%82, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
  %84 = shape_of(%var_55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%var_55, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %87 = multiply(%85, %86) /* ty=Tensor[(4, 7, 2), uint32] */;
  %88 = cast(%82, dtype="int8") /* ty=Tensor[(4, 7, 2), int8] */;
  %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%87, dtype="int8") /* ty=Tensor[(4, 7, 2), int8] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %92 = logical_xor(%90, %91) /* ty=Tensor[(4, 7, 2), int8] */;
  (%92,)
}

def @func_111(%var_80: Tensor[(11, 13, 10), float32], %var_81: Tensor[(11, 13, 10), float32]) -> Tensor[(11, 13, 10), int16] {
  %93 = cast(%var_81, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %94 = shape_of(%var_80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%var_80, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = not_equal(%95, %96) /* ty=Tensor[(11, 13, 10), bool] */;
  %98 = cast(%var_81, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_and(%100, %101) /* ty=Tensor[(11, 13, 10), int16] */
}

def @func_3290(%var_3222: Tensor[(715, 2), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(11, 13, 10), int16], Tensor[(9, 6, 15), int16], Tensor[(1430), float32], Tensor[(270), float32], Tensor[(1430), float64], Tensor[(715, 2), bool]) {
  %102 = cast(%var_3222, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
  %103 = cast(%var_3222, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
  %104 = reshape(%102, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %105 = reshape(%103, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %106 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %107 = cast(meta[relay.Constant][7] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %108 = @func_2086() /* ty=Tensor[(3, 16, 16), bool] */;
  %109 = cast(%108, dtype="int8") /* ty=Tensor[(3, 16, 16), int8] */;
  %110 = reshape(%107, newshape=[3, 6, 15]) /* ty=Tensor[(3, 6, 15), float32] */;
  %111 = reshape(%109, newshape=[768]) /* ty=Tensor[(768), int8] */;
  %112 = @func_1500(%110, %111) /* ty=(Tensor[(3, 6, 15), float32], Tensor[(56), float64], Tensor[(768), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %113 = cast(%var_3222, dtype="float64") /* ty=Tensor[(715, 2), float64] */;
  %114 = sigmoid(%113) /* ty=Tensor[(715, 2), float64] */;
  %115 = cast(%var_3222, dtype="bool") /* ty=Tensor[(715, 2), bool] */;
  %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(2), int32] */;
  %117 = cast(%114, dtype="bool") /* ty=Tensor[(715, 2), bool] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %119 = @func_111(%104, %105) /* ty=Tensor[(11, 13, 10), int16] */;
  %120 = %106.0;
  %121 = %112.4;
  %122 = @func_2693() /* ty=Tensor[(1430), float64] */;
  %123 = less(%117, %118) /* ty=Tensor[(715, 2), bool] */;
  (%108, %119, %120, %121, meta[relay.Constant][7] /* ty=Tensor[(270), float32] */, %122, %123)
}

def @func_648(%var_519: Tensor[(11, 13, 10), int16], %var_524: Tensor[(11, 13, 10), int16], %var_604: Tensor[(315), float32], %var_643: Tensor[(315), float32]) -> (Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) {
  %124 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %125 = %124.1;
  %126 = cast(%var_519, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %130 = cast(%var_524, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %131 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%125, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = less_equal(%132, %133) /* ty=Tensor[(11, 13, 10), bool] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %136 = cast(%125, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %137 = reshape(%135, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %138 = reshape(%136, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %139 = @func_111(%137, %138) /* ty=Tensor[(11, 13, 10), int16] */;
  %140 = cast(%139, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %141 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%134, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = cast(%var_519, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %145 = floor_mod(%128, %129) /* ty=Tensor[(11, 13, 10), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %147 = reshape(%144, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %148 = reshape(%146, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %149 = cast(%var_604, dtype="float32") /* ty=Tensor[(315), float32] */;
  %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %151 = logical_or(%142, %143) /* ty=Tensor[(11, 13, 10), bool] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %153 = reshape(%149, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %154 = reshape(%150, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %155 = reshape(%152, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %156 = @func_433(%153, %154, %155) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %157 = cast(%var_604, dtype="float32") /* ty=Tensor[(315), float32] */;
  %158 = cast(meta[relay.Constant][8] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %159 = @func_111(%147, %148) /* ty=Tensor[(11, 13, 10), int16] */;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
  %161 = reshape(%157, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %162 = reshape(%158, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %163 = reshape(%160, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %164 = @func_433(%161, %162, %163) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %165 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %166 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %167 = cast(%var_604, dtype="float32") /* ty=Tensor[(315), float32] */;
  %168 = asin(%167) /* ty=Tensor[(315), float32] */;
  %169 = cast(%var_643, dtype="bool") /* ty=Tensor[(315), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(1), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(315), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?), bool] */;
  %173 = %156.1;
  %174 = %164.3;
  %175 = %165.1;
  %176 = %166.2;
  %177 = greater(%171, %172) /* ty=Tensor[(315), bool] */;
  (%145, %151, %159, %173, meta[relay.Constant][8] /* ty=Tensor[(56), float64] */, %174, %175, %176, %177)
}

def @func_4022(%var_4013: Tensor[(1430), float32], %var_4018: Tensor[(1430), float32]) -> (Tensor[(1430), bool], Tensor[(1430), float32]) {
  %178 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %179 = %178.0;
  %180 = cast(%var_4013, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(1), int32] */;
  %182 = cast(%179, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?), bool] */;
  %184 = cast(%var_4018, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %185 = shape_of(%var_4013, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(%var_4013, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), float32] */;
  %188 = not_equal(%182, %183) /* ty=Tensor[(1430), bool] */;
  %189 = subtract(%186, %187) /* ty=Tensor[(1430), float32] */;
  (%188, %189)
}

def @func_1808() -> (Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) {
  %190 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %191 = cast(meta[relay.Constant][9] /* ty=Tensor[(81, 10), float64] */, dtype="float64") /* ty=Tensor[(81, 10), float64] */;
  %192 = reshape(%191, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), float64] */;
  %193 = @func_1601(%192) /* ty=Tensor[(9, 6, 15), float64] */;
  %194 = cast(meta[relay.Constant][9] /* ty=Tensor[(81, 10), float64] */, dtype="int16") /* ty=Tensor[(81, 10), int16] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="int16") /* ty=Tensor[(9, 6, 15), int16] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %198 = %190.0;
  %199 = bitwise_and(%196, %197) /* ty=Tensor[(9, 6, 15), int16] */;
  (%198, %199)
}

def @func_433(%var_385: Tensor[(3, 7, 15), float32], %var_417: Tensor[(56), float64], %var_420: Tensor[(1430), float32]) -> (Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %200 = cast(0.109392f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %201 = cast(%var_385, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %202 = floor_divide(%200, %201) /* ty=Tensor[(3, 7, 15), float32] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %204 = sinh(%203) /* ty=Tensor[(3, 7, 15), float32] */;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %206 = log2(%205) /* ty=Tensor[(3, 7, 15), float64] */;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %208 = cast(%var_417, dtype="float64") /* ty=Tensor[(56), float64] */;
  %209 = reshape(%208, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
  %210 = @func_76(%209) /* ty=(Tensor[(4, 7, 2), int8],) */;
  %211 = cast(%var_420, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %212 = cast(%var_420, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %213 = reshape(%211, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %214 = reshape(%212, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %215 = log(%207) /* ty=Tensor[(3, 7, 15), float32] */;
  %216 = %210.0;
  %217 = @func_111(%213, %214) /* ty=Tensor[(11, 13, 10), int16] */;
  (%215, %216, %var_417, %217, %var_420)
}

def @func_2237() -> (Tensor[(3, 16, 16), int8],) {
  %218 = @func_1829() /* ty=Tensor[(3, 16, 16), int8] */;
  (%218,)
}

def @func_3444(%var_3425: Tensor[(9, 9, 2), float32], %var_3426: Tensor[(9, 9, 2), float32]) -> Tensor[(9, 9, 2), float32] {
  %219 = cast(%var_3426, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
  %220 = shape_of(%var_3425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_3425, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %223 = mod(%221, %222) /* ty=Tensor[(9, 9, 2), float32] */;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(9, 9, 2), float64] */;
  %225 = acosh(%224) /* ty=Tensor[(9, 9, 2), float64] */;
  %226 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 9, 2), float64] */, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%228, %229) /* ty=Tensor[(9, 9, 2), float32] */
}

def @func_2693() -> Tensor[(1430), float64] {
  @func_1621() /* ty=Tensor[(1430), float64] */
}

def @func_4417(%var_4400: Tensor[(1430, 1), float32]) -> (Tensor[(3, 16, 16), uint32], Tensor[(9, 6, 15), int16], Tensor[(1430, 1), float32], Tensor[(315), float32], Tensor[(3, 16, 16), float32]) {
  %230 = @func_3759() /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), uint32]) */;
  %231 = cast(%var_4400, dtype="float32") /* ty=Tensor[(1430, 1), float32] */;
  %232 = reshape(%231, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %233 = @func_2426(%232) /* ty=(Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) */;
  %234 = cast(%var_4400, dtype="int16") /* ty=Tensor[(1430, 1), int16] */;
  %235 = reshape(%234, newshape=[143, 10]) /* ty=Tensor[(143, 10), int16] */;
  %236 = @func_1115(%235) /* ty=(Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) */;
  %237 = @func_3334() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %240 = %230.1;
  %241 = %233.3;
  %242 = %236.3;
  %243 = log(%239) /* ty=Tensor[(3, 16, 16), float32] */;
  (%240, %241, %var_4400, %242, %243)
}

def @func_4585() -> (Tensor[(3, 16, 16), int8], Tensor[(12, 15, 3), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(56), float64], Tensor[(143, 10), float32]) {
  %244 = @func_4268() /* ty=(Tensor[(12, 15, 3), int32], Tensor[(12, 15, 3), float64]) */;
  %245 = cast(meta[relay.Constant][11] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %246 = cast(meta[relay.Constant][12] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %247 = cast(meta[relay.Constant][13] /* ty=Tensor[(143, 10), float32] */, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %248 = reshape(%245, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %249 = reshape(%246, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %250 = reshape(%247, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %251 = @func_433(%248, %249, %250) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %252 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  %253 = %244.1;
  %254 = %251.1;
  (%252, %253, %254, meta[relay.Constant][11] /* ty=Tensor[(315), float32] */, meta[relay.Constant][12] /* ty=Tensor[(56), float64] */, meta[relay.Constant][13] /* ty=Tensor[(143, 10), float32] */)
}

def @func_2630(%var_2622: Tensor[(1430), float32]) -> (Tensor[(9, 6, 15), float32], Tensor[(56), float64], Tensor[(315), float32], Tensor[(1430), float32]) {
  %255 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
  %256 = %255.1;
  %257 = cast(%256, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
  %258 = cast(meta[relay.Constant][14] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %259 = cast(%var_2622, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %260 = reshape(%258, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %261 = reshape(%259, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %262 = @func_2596(%260, %261) /* ty=(Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) */;
  %263 = asinh(%257) /* ty=Tensor[(9, 6, 15), float32] */;
  %264 = %262.2;
  (%263, %264, meta[relay.Constant][14] /* ty=Tensor[(315), float32] */, %var_2622)
}

def @func_1183() -> (Tensor[(1430), float32],) {
  %265 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %266 = %265.2;
  (%266,)
}

def @func_1236(%var_1226: Tensor[(1430), int16]) -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %267 = cast(%var_1226, dtype="int16") /* ty=Tensor[(1430), int16] */;
  %268 = reshape(%267, newshape=[143, 10]) /* ty=Tensor[(143, 10), int16] */;
  %269 = @func_1115(%268) /* ty=(Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) */;
  %270 = cast(meta[relay.Constant][15] /* ty=Tensor[(1430), int16] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %271 = shape_of(%var_1226, dtype="int32") /* ty=Tensor[(1), int32] */;
  %272 = cast(%var_1226, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?), float32] */;
  %274 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  %275 = %269.1;
  %276 = floor_mod(%272, %273) /* ty=Tensor[(1430), float32] */;
  (%274, %275, %276)
}

def @func_2596(%var_2582: Tensor[(315), float32], %var_2584: Tensor[(1430), float32]) -> (Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) {
  %277 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %278 = cast(%var_2582, dtype="float32") /* ty=Tensor[(315), float32] */;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %280 = cast(%var_2584, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %281 = reshape(%278, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %282 = reshape(%279, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %283 = reshape(%280, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %284 = @func_433(%281, %282, %283) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %285 = %284.4;
  %286 = cast(%285, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %287 = shape_of(%var_2584, dtype="int32") /* ty=Tensor[(1), int32] */;
  %288 = cast(%var_2584, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?), bool] */;
  %290 = %277.0;
  %291 = less_equal(%288, %289) /* ty=Tensor[(1430), bool] */;
  (%290, %var_2582, meta[relay.Constant][16] /* ty=Tensor[(56), float64] */, %291)
}

def @func_2859() -> (Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) {
  %292 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %293 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %294 = %292.0;
  %295 = %293.0;
  (%294, %295)
}

def @func_4364(%var_4362: Tensor[(1848), float32]) -> (Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(1848), float32]) {
  %296 = @func_2097() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) */;
  %297 = cast(%var_4362, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %298 = reshape(%297, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
  %299 = @func_2355(%298) /* ty=(Tensor[(12, 14, 11), float32], Tensor[(1430), float32]) */;
  %300 = %296.1;
  %301 = %299.1;
  (%300, %301, %var_4362)
}

def @func_1500(%var_1469: Tensor[(3, 6, 15), float32], %var_1477: Tensor[(768), int8]) -> (Tensor[(3, 6, 15), float32], Tensor[(56), float64], Tensor[(768), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %302 = cast(%var_1469, dtype="float32") /* ty=Tensor[(3, 6, 15), float32] */;
  %303 = cast(%var_1477, dtype="int8") /* ty=Tensor[(768), int8] */;
  %304 = reshape(%303, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), int8] */;
  %305 = @func_692(%304) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) */;
  %306 = cast(meta[relay.Constant][17] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %307 = cast(meta[relay.Constant][17] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %308 = reshape(%306, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %309 = reshape(%307, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %310 = log(%302) /* ty=Tensor[(3, 6, 15), float32] */;
  %311 = %305.2;
  %312 = @func_111(%308, %309) /* ty=Tensor[(11, 13, 10), int16] */;
  (%310, %311, %var_1477, %312, meta[relay.Constant][17] /* ty=Tensor[(1430), float32] */)
}

def @func_2355(%var_2345: Tensor[(12, 14, 11), float32]) -> (Tensor[(12, 14, 11), float32], Tensor[(1430), float32]) {
  %313 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
  %314 = cast(%var_2345, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
  %315 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
  %316 = maximum(%313, %314) /* ty=Tensor[(12, 14, 11), float32] */;
  %317 = %315.2;
  (%316, %317)
}

def @func_3620(%var_3579: Tensor[(143, 10), float32], %var_3583: Tensor[(1430), bool], %var_3609: Tensor[(224), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(143, 10), float32], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(224), float32], Tensor[(1430), float32]) {
  %318 = cast(%var_3583, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %319 = atan(%318) /* ty=Tensor[(1430), float64] */;
  %320 = cast(%var_3583, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(1), int32] */;
  %322 = cast(%319, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?), float32] */;
  %324 = cast(%var_3609, dtype="float32") /* ty=Tensor[(224), float32] */;
  %325 = reshape(%324, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %326 = @func_3121(%325) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) */;
  %327 = cast(%var_3579, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %328 = reshape(%327, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %329 = @func_1944(%328) /* ty=(Tensor[(1430), float32], Tensor[(1430), bool]) */;
  %330 = %329.1;
  %331 = cast(%var_3583, dtype="int16") /* ty=Tensor[(1430), int16] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(1), int32] */;
  %333 = cast(%330, dtype="int16") /* ty=Tensor[(1430), int16] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?), int16] */;
  %335 = bitwise_or(%333, %334) /* ty=Tensor[(1430), int16] */;
  %336 = cast(%335, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %337 = shape_of(%319, dtype="int32") /* ty=Tensor[(1), int32] */;
  %338 = cast(%319, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?), bool] */;
  %340 = equal(%338, %339) /* ty=Tensor[(1430), bool] */;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %342 = @func_2086() /* ty=Tensor[(3, 16, 16), bool] */;
  %343 = floor_divide(%322, %323) /* ty=Tensor[(1430), float32] */;
  %344 = %326.1;
  %345 = rsqrt(%341) /* ty=Tensor[(1430), float32] */;
  (%342, %var_3579, %343, %344, %var_3609, %345)
}

def @func_3421() -> (Tensor[(3, 16, 16), int8],) {
  %346 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  (%346,)
}

def @func_4667(%var_4637: Tensor[(9, 6, 15), int16]) -> (Tensor[(9, 6, 15), float64], Tensor[(9, 6, 15), float32]) {
  %347 = @func_2050() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(3, 16, 16), int8]) */;
  %348 = %347.0;
  %349 = cast(%var_4637, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %353 = cast(%var_4637, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
  %354 = power(%351, %352) /* ty=Tensor[(9, 6, 15), float64] */;
  %355 = acosh(%353) /* ty=Tensor[(9, 6, 15), float32] */;
  (%354, %355)
}

def @func_2086() -> Tensor[(3, 16, 16), bool] {
  %356 = @func_1680() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %356.0
}

def @func_3177() -> (Tensor[(1430), float32], Tensor[(1430), float32]) {
  %357 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %358 = @func_2859() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) */;
  %359 = %358.1;
  %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(1), int32] */;
  %362 = cast(%359, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?), float32] */;
  %364 = %357.2;
  %365 = multiply(%362, %363) /* ty=Tensor[(1430), float32] */;
  (%364, %365)
}

def @func_1621() -> Tensor[(1430), float64] {
  %366 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
  %367 = %366.2;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(1430), float64] */;
  asinh(%368) /* ty=Tensor[(1430), float64] */
}

def @func_3520(%var_3494: Tensor[(2, 16, 7), int8]) -> (Tensor[(2, 16, 7), int8], Tensor[(9, 6, 15), int16], Tensor[(11, 130), int16], Tensor[(3, 16, 16), float32], Tensor[(1430), float64]) {
  %369 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 16, 7), int8] */, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
  %370 = shape_of(%var_3494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_3494, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %373 = greater_equal(%371, %372) /* ty=Tensor[(2, 16, 7), bool] */;
  %374 = cast(%373, dtype="int8") /* ty=Tensor[(2, 16, 7), int8] */;
  %375 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(2, 16, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 16, 7), int8] */, dtype="int8") /* ty=Tensor[(2, 16, 7), int8] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %378 = @func_2859() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) */;
  %379 = cast(meta[relay.Constant][21] /* ty=Tensor[(11, 130), int16] */, dtype="int16") /* ty=Tensor[(11, 130), int16] */;
  %380 = reshape(%379, newshape=[1430]) /* ty=Tensor[(1430), int16] */;
  %381 = @func_1236(%380) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %382 = %381.0;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %384 = bitwise_or(%376, %377) /* ty=Tensor[(2, 16, 7), int8] */;
  %385 = %378.0;
  %386 = sqrt(%383) /* ty=Tensor[(3, 16, 16), float32] */;
  %387 = @func_2693() /* ty=Tensor[(1430), float64] */;
  (%384, %385, meta[relay.Constant][21] /* ty=Tensor[(11, 130), int16] */, %386, %387)
}

def @func_3759() -> (Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), uint32]) {
  %388 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %389 = @func_2949() /* ty=Tensor[(3, 16, 16), bool] */;
  %390 = %388.3;
  (%389, %390)
}

def @func_766() -> (Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) {
  %391 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %392 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %393 = %392.2;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %395 = cast(%393, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %396 = reshape(%394, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %397 = reshape(%395, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %398 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %399 = reshape(%398, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), int8] */;
  %400 = @func_692(%399) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %403 = atanh(%402) /* ty=Tensor[(3, 16, 16), float64] */;
  %404 = cast(meta[relay.Constant][22] /* ty=Tensor[(768), int8] */, dtype="uint32") /* ty=Tensor[(768), uint32] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="uint32") /* ty=Tensor[(3, 16, 16), uint32] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %408 = %391.2;
  %409 = @func_111(%396, %397) /* ty=Tensor[(11, 13, 10), int16] */;
  %410 = multiply(%406, %407) /* ty=Tensor[(3, 16, 16), uint32] */;
  (%408, %393, %409, %410)
}

def @func_1680() -> (Tensor[(3, 16, 16), bool],) {
  %411 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %414 = log2(%413) /* ty=Tensor[(3, 16, 16), float32] */;
  %415 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 16, 16), float32] */, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = logical_and(%417, %418) /* ty=Tensor[(3, 16, 16), bool] */;
  (%419,)
}

def @func_3488() -> (Tensor[(3, 16, 16), int8],) {
  %420 = @func_2237() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %421 = %420.0;
  (%421,)
}

def @func_3121(%var_3115: Tensor[(8, 28), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) {
  %422 = @func_2876() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %423 = %422.0;
  %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 28), float32] */, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %429 = reshape(%428, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), float32] */;
  %430 = @func_2770(%429) /* ty=(Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) */;
  %431 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %432 = @func_1516() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %433 = cast(%var_3115, dtype="bool") /* ty=Tensor[(8, 28), bool] */;
  %434 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(8, 28), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 28), float32] */, dtype="bool") /* ty=Tensor[(8, 28), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %437 = logical_or(%426, %427) /* ty=Tensor[(3, 16, 16), bool] */;
  %438 = %430.1;
  %439 = %431.0;
  %440 = %432.0;
  %441 = greater_equal(%435, %436) /* ty=Tensor[(8, 28), bool] */;
  (%437, %438, %439, %440, %441)
}

def @func_3215(%var_3210: Tensor[(10, 2, 8), float32]) -> Tensor[(10, 2, 8), float32] {
  %442 = cast(%var_3210, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  atanh(%442) /* ty=Tensor[(10, 2, 8), float32] */
}

def @func_2426(%var_2405: Tensor[(1430), float32]) -> (Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) {
  %443 = cast(%var_2405, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %444 = reshape(%443, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %445 = @func_930(%444) /* ty=(Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) */;
  %446 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
  %449 = asin(%448) /* ty=Tensor[(9, 6, 15), float32] */;
  %450 = cast(%449, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
  %451 = erf(%450) /* ty=Tensor[(9, 6, 15), float32] */;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
  %453 = sinh(%452) /* ty=Tensor[(9, 6, 15), float64] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
  %455 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %456 = %445.3;
  %457 = atanh(%454) /* ty=Tensor[(9, 6, 15), float32] */;
  %458 = %455.0;
  (%456, %var_2405, %457, %458)
}

def @func_1882() -> (Tensor[(1430), float32], Tensor[(1430), float64]) {
  %459 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %460 = %459.0;
  %461 = @func_1621() /* ty=Tensor[(1430), float64] */;
  (%460, %461)
}

def @func_4227(%var_4215: Tensor[(5, 63), float32]) -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int64], Tensor[(5, 63), float32]) {
  %462 = @func_3421() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %463 = cast(%var_4215, dtype="float32") /* ty=Tensor[(5, 63), float32] */;
  %464 = reshape(%463, newshape=[35, 9]) /* ty=Tensor[(35, 9), float32] */;
  %465 = @func_3042(%464) /* ty=(Tensor[(35, 9), float32], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(1, 56), float64], Tensor[(11, 13, 10), int64], Tensor[(11, 13, 10), float32]) */;
  %466 = %462.0;
  %467 = %465.4;
  (%466, %467, %var_4215)
}

def @func_4333(%var_4311: Tensor[(13, 16, 8), bool]) -> (Tensor[(13, 16, 8), bool], Tensor[(3, 16, 16), bool]) {
  %468 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 16, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %469 = shape_of(%var_4311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_4311, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %472 = @func_3456() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %473 = logical_or(%470, %471) /* ty=Tensor[(13, 16, 8), bool] */;
  %474 = %472.0;
  (%473, %474)
}

def @func_4479(%var_4466: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), float64], Tensor[(1430), int8]) {
  %475 = @func_1829() /* ty=Tensor[(3, 16, 16), int8] */;
  %476 = cast(%var_4466, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %480 = @func_2927() /* ty=(Tensor[(1430), int8],) */;
  %481 = mod(%478, %479) /* ty=Tensor[(3, 16, 16), float64] */;
  %482 = %480.0;
  (%481, %482)
}

def @func_2097() -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) {
  %483 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %484 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %485 = %483.0;
  %486 = %484.1;
  (%485, %486)
}

def @func_2050() -> (Tensor[(9, 6, 15), int16], Tensor[(3, 16, 16), int8]) {
  %487 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
  %488 = %487.1;
  %489 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  (%488, %489)
}

def @func_3392() -> (Tensor[(1430), float32],) {
  %490 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %491 = %490.0;
  (%491,)
}

def @func_3334() -> (Tensor[(3, 16, 16), bool],) {
  %492 = @func_2876() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %493 = %492.0;
  (%493,)
}

def @func_3571() -> (Tensor[(3, 16, 16), int8],) {
  %494 = @func_3488() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %495 = %494.0;
  (%495,)
}

def @func_1752() -> (Tensor[(1430), float64],) {
  %496 = @func_1621() /* ty=Tensor[(1430), float64] */;
  (%496,)
}

def @func_1829() -> Tensor[(3, 16, 16), int8] {
  @func_772() /* ty=Tensor[(3, 16, 16), int8] */
}

def @func_930(%var_927: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) {
  %497 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %498 = %497.0;
  %499 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 16, 16), int8] */, dtype="int64") /* ty=Tensor[(3, 16, 16), int64] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="int64") /* ty=Tensor[(3, 16, 16), int64] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %503 = logical_xor(%501, %502) /* ty=Tensor[(3, 16, 16), int64] */;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %505 = cast(meta[relay.Constant][28] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %506 = cast(meta[relay.Constant][29] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
  %507 = cast(%var_927, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %508 = reshape(%505, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %509 = reshape(%506, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %510 = reshape(%507, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %511 = @func_433(%508, %509, %510) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %512 = asin(%504) /* ty=Tensor[(3, 16, 16), float64] */;
  %513 = %511.1;
  (%512, %513, meta[relay.Constant][28] /* ty=Tensor[(315), float32] */, meta[relay.Constant][29] /* ty=Tensor[(28, 2), float64] */, %var_927)
}

def @func_692(%var_671: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) {
  %514 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %515 = %514.0;
  %516 = cast(%var_671, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %520 = cast(meta[relay.Constant][30] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %521 = reshape(%520, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
  %522 = @func_76(%521) /* ty=(Tensor[(4, 7, 2), int8],) */;
  %523 = less(%518, %519) /* ty=Tensor[(3, 16, 16), bool] */;
  %524 = %522.0;
  (%523, %524, meta[relay.Constant][30] /* ty=Tensor[(56), float64] */)
}

def @func_1601(%var_1588: Tensor[(9, 6, 15), float64]) -> Tensor[(9, 6, 15), float64] {
  %525 = cast(%var_1588, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
  sigmoid(%525) /* ty=Tensor[(9, 6, 15), float64] */
}

def @func_4204(%var_4195: Tensor[(14, 5, 14), uint16]) -> (Tensor[(14, 5, 14), uint16],) {
  %526 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 5, 14), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 14), uint16] */;
  %527 = shape_of(%var_4195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_4195, dtype="uint16") /* ty=Tensor[(14, 5, 14), uint16] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %530 = multiply(%528, %529) /* ty=Tensor[(14, 5, 14), uint16] */;
  (%530,)
}

def @func_4165(%var_4155: Tensor[(12, 4, 6), float64]) -> (Tensor[(12, 4, 6), float64],) {
  %531 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %532 = shape_of(%var_4155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%var_4155, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %535 = divide(%533, %534) /* ty=Tensor[(12, 4, 6), float64] */;
  (%535,)
}

def @func_2770(%var_2753: Tensor[(14, 16, 1), float32]) -> (Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) {
  %536 = cast(%var_2753, dtype="float32") /* ty=Tensor[(14, 16, 1), float32] */;
  %537 = acosh(%536) /* ty=Tensor[(14, 16, 1), float32] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(14, 16, 1), float32] */;
  %539 = rsqrt(%538) /* ty=Tensor[(14, 16, 1), float32] */;
  %540 = @func_1829() /* ty=Tensor[(3, 16, 16), int8] */;
  (%539, %540)
}

def @main(%var_4691: Tensor[(980), uint16], %var_4718: Tensor[(640), float32], %var_4732: Tensor[(143, 10), bool]) -> (Tensor[(5, 63), float32], Tensor[(315), float32], Tensor[(14, 5, 14), uint16], Tensor[(980), uint16], Tensor[(1430), float32], Tensor[(640), float32], Tensor[(56), float64], Tensor[(3, 16, 16), int8], Tensor[(8, 28), float32], Tensor[(315), float32], Tensor[(143, 10), float64], Tensor[(143, 10), float32]) {
  %541 = cast(meta[relay.Constant][33] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %542 = reshape(%541, newshape=[5, 63]) /* ty=Tensor[(5, 63), float32] */;
  %543 = @func_4227(%542) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int64], Tensor[(5, 63), float32]) */;
  %544 = cast(%var_4691, dtype="uint16") /* ty=Tensor[(980), uint16] */;
  %545 = reshape(%544, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint16] */;
  %546 = @func_4204(%545) /* ty=(Tensor[(14, 5, 14), uint16],) */;
  %547 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %548 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %549 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %550 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %551 = reshape(%547, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %552 = reshape(%548, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %553 = reshape(%549, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %554 = reshape(%550, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %555 = @func_1392(%551, %552, %553, %554) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */;
  %556 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 28), float32] */, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %557 = reshape(%556, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), float32] */;
  %558 = @func_2770(%557) /* ty=(Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) */;
  %559 = %555.4;
  %560 = cast(%559, dtype="int16") /* ty=Tensor[(1430), int16] */;
  %561 = reshape(%560, newshape=[143, 10]) /* ty=Tensor[(143, 10), int16] */;
  %562 = @func_1115(%561) /* ty=(Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) */;
  %563 = @func_4585() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(12, 15, 3), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(56), float64], Tensor[(143, 10), float32]) */;
  %564 = %563.5;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(143, 10), float64] */;
  %566 = acosh(%565) /* ty=Tensor[(143, 10), float64] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(143, 10), float64] */;
  %568 = cast(%566, dtype="float64") /* ty=Tensor[(143, 10), float64] */;
  %569 = sin(%568) /* ty=Tensor[(143, 10), float64] */;
  %570 = cast(%564, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(2), int32] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %574 = greater(%572, %573) /* ty=Tensor[(143, 10), bool] */;
  %575 = cast(%var_4732, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(2), int32] */;
  %577 = cast(%574, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %579 = greater_equal(%577, %578) /* ty=Tensor[(143, 10), bool] */;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %581 = %543.2;
  %582 = %546.0;
  %583 = %558.1;
  %584 = %562.3;
  %585 = exp(%567) /* ty=Tensor[(143, 10), float64] */;
  %586 = erf(%580) /* ty=Tensor[(143, 10), float32] */;
  (%581, meta[relay.Constant][33] /* ty=Tensor[(315), float32] */, %582, %var_4691, %559, %var_4718, meta[relay.Constant][34] /* ty=Tensor[(56), float64] */, %583, meta[relay.Constant][35] /* ty=Tensor[(8, 28), float32] */, %584, %585, %586)
}

def @func_848() -> (Tensor[(3, 16, 16), int8],) {
  %587 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  (%587,)
}

def @func_1029() -> (Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) {
  %588 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %589 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %590 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %591 = %588.1;
  %592 = %589.0;
  %593 = %590.2;
  (%591, %592, %593)
}

def @func_1516() -> (Tensor[(3, 16, 16), int8],) {
  %594 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %595 = %594.0;
  (%595,)
}

def @func_3456() -> (Tensor[(3, 16, 16), bool],) {
  %596 = @func_3334() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %597 = %596.0;
  (%597,)
}

def @func_4111() -> Tensor[(1430), float64] {
  %598 = @func_1882() /* ty=(Tensor[(1430), float32], Tensor[(1430), float64]) */;
  %598.1
}

def @func_1392(%var_1311: Tensor[(10, 8, 8), float32], %var_1323: Tensor[(56), float64], %var_1343: Tensor[(10, 8, 8), float32], %var_1355: Tensor[(10, 8, 8), float32]) -> (Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) {
  %599 = cast(%var_1323, dtype="float64") /* ty=Tensor[(56), float64] */;
  %600 = reshape(%599, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
  %601 = @func_76(%600) /* ty=(Tensor[(4, 7, 2), int8],) */;
  %602 = cast(%var_1311, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
  %603 = sqrt(%602) /* ty=Tensor[(10, 8, 8), float32] */;
  %604 = cast(%var_1355, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %608 = cast(meta[relay.Constant][36] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %609 = reshape(%608, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %610 = @func_930(%609) /* ty=(Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) */;
  %611 = cast(%var_1343, dtype="uint8") /* ty=Tensor[(10, 8, 8), uint8] */;
  %612 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%603, dtype="uint8") /* ty=Tensor[(10, 8, 8), uint8] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %615 = subtract(%613, %614) /* ty=Tensor[(10, 8, 8), uint8] */;
  %616 = cast(%var_1311, dtype="int16") /* ty=Tensor[(10, 8, 8), int16] */;
  %617 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%603, dtype="int16") /* ty=Tensor[(10, 8, 8), int16] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %620 = add(%618, %619) /* ty=Tensor[(10, 8, 8), int16] */;
  %621 = cast(%620, dtype="uint64") /* ty=Tensor[(10, 8, 8), uint64] */;
  %622 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%615, dtype="uint64") /* ty=Tensor[(10, 8, 8), uint64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %625 = %601.0;
  %626 = floor_divide(%606, %607) /* ty=Tensor[(10, 8, 8), float32] */;
  %627 = %610.2;
  %628 = bitwise_or(%623, %624) /* ty=Tensor[(10, 8, 8), uint64] */;
  (%625, %var_1323, %626, %627, meta[relay.Constant][36] /* ty=Tensor[(1430), float32] */, %628)
}

def @func_1944(%var_1912: Tensor[(1430), float32]) -> (Tensor[(1430), float32], Tensor[(1430), bool]) {
  %629 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
  %630 = %629.2;
  %631 = cast(%var_1912, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(1), int32] */;
  %633 = cast(%630, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?), float32] */;
  %635 = cast(%630, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %636 = shape_of(%var_1912, dtype="int32") /* ty=Tensor[(1), int32] */;
  %637 = cast(%var_1912, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?), bool] */;
  %639 = mod(%633, %634) /* ty=Tensor[(1430), float32] */;
  %640 = less(%637, %638) /* ty=Tensor[(1430), bool] */;
  (%639, %640)
}

def @func_3467(%var_3459: Tensor[(4, 2, 5), float32], %var_3463: Tensor[(315), float32], %var_3464: Tensor[(715, 2), float32]) -> (Tensor[(4, 2, 5), float32], Tensor[(1430), bool], Tensor[(315), float32], Tensor[(715, 2), float32]) {
  %641 = cast(%var_3459, dtype="float32") /* ty=Tensor[(4, 2, 5), float32] */;
  %642 = cast(%var_3463, dtype="float32") /* ty=Tensor[(315), float32] */;
  %643 = cast(%var_3464, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
  %644 = reshape(%642, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %645 = reshape(%643, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %646 = @func_2596(%644, %645) /* ty=(Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) */;
  %647 = asinh(%641) /* ty=Tensor[(4, 2, 5), float32] */;
  %648 = %646.3;
  (%647, %648, %var_3463, %var_3464)
}

def @func_2458(%var_2455: Tensor[(20, 32), float32]) -> (Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(315), float32], Tensor[(20, 32), float32], Tensor[(56), float64]) {
  %649 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %650 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %651 = cast(%var_2455, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %652 = cast(meta[relay.Constant][37] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %653 = cast(%var_2455, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %654 = cast(%var_2455, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %655 = reshape(%651, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %656 = reshape(%652, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %657 = reshape(%653, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %658 = reshape(%654, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %659 = @func_1392(%655, %656, %657, %658) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */;
  %660 = %649.0;
  %661 = %650.1;
  %662 = %659.3;
  (%660, %661, %662, %var_2455, meta[relay.Constant][37] /* ty=Tensor[(56), float64] */)
}

def @func_2876() -> (Tensor[(3, 16, 16), bool],) {
  %663 = @func_2086() /* ty=Tensor[(3, 16, 16), bool] */;
  (%663,)
}

def @func_1115(%var_1100: Tensor[(143, 10), int16]) -> (Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) {
  %664 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %666 = cast(%var_1100, dtype="int16") /* ty=Tensor[(143, 10), int16] */;
  %667 = cast(%var_1100, dtype="int16") /* ty=Tensor[(143, 10), int16] */;
  %668 = cast(meta[relay.Constant][38] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %669 = cast(meta[relay.Constant][38] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %670 = reshape(%666, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
  %671 = reshape(%667, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
  %672 = reshape(%668, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %673 = reshape(%669, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %674 = @func_648(%670, %671, %672, %673) /* ty=(Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) */;
  %675 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %676 = exp(%665) /* ty=Tensor[(3, 16, 16), float32] */;
  %677 = %674.2;
  %678 = %675.1;
  (%676, %677, %var_1100, meta[relay.Constant][38] /* ty=Tensor[(315), float32] */, %678)
}

def @func_2277(%var_2254: Tensor[(9, 6, 15), int16], %var_2260: Tensor[(11, 130), float32]) -> (Tensor[(9, 6, 15), bool], Tensor[(1430), bool], Tensor[(11, 130), float32], Tensor[(1430), float32]) {
  %679 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
  %680 = %679.1;
  %681 = cast(%var_2254, dtype="bool") /* ty=Tensor[(9, 6, 15), bool] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="bool") /* ty=Tensor[(9, 6, 15), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = cast(%var_2260, dtype="float32") /* ty=Tensor[(11, 130), float32] */;
  %686 = reshape(%685, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %687 = @func_1944(%686) /* ty=(Tensor[(1430), float32], Tensor[(1430), bool]) */;
  %688 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %689 = less_equal(%683, %684) /* ty=Tensor[(9, 6, 15), bool] */;
  %690 = %687.1;
  %691 = %688.0;
  (%689, %690, %var_2260, %691)
}

def @func_2949() -> Tensor[(3, 16, 16), bool] {
  @func_2086() /* ty=Tensor[(3, 16, 16), bool] */
}

def @func_3791() -> Tensor[(3, 16, 16), bool] {
  @func_2086() /* ty=Tensor[(3, 16, 16), bool] */
}

def @func_501() -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %692 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %693 = asinh(%692) /* ty=Tensor[(3, 16, 16), float32] */;
  %694 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 16, 16), float32] */, dtype="int8") /* ty=Tensor[(3, 16, 16), int8] */;
  %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%693, dtype="int8") /* ty=Tensor[(3, 16, 16), int8] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %698 = cast(meta[relay.Constant][40] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %699 = cast(meta[relay.Constant][40] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %700 = reshape(%698, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %701 = reshape(%699, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %702 = left_shift(%696, %697) /* ty=Tensor[(3, 16, 16), int8] */;
  %703 = @func_111(%700, %701) /* ty=Tensor[(11, 13, 10), int16] */;
  (%702, %703, meta[relay.Constant][40] /* ty=Tensor[(1430), float32] */)
}

def @func_4278() -> (Tensor[(3, 16, 16), int8], Tensor[(3, 16, 16), bool], Tensor[(224), float32], Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) {
  %704 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
  %705 = cast(meta[relay.Constant][41] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %706 = reshape(%705, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %707 = @func_3121(%706) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) */;
  %708 = cast(meta[relay.Constant][42] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %709 = reshape(%708, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %710 = @func_2426(%709) /* ty=(Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) */;
  %711 = %704.1;
  %712 = %707.0;
  %713 = %710.3;
  (%711, %712, meta[relay.Constant][41] /* ty=Tensor[(224), float32] */, %713, meta[relay.Constant][42] /* ty=Tensor[(1430), float32] */)
}

def @func_3155(%var_3145: Tensor[(56), float64], %var_3151: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), uint32], Tensor[(56), float64], Tensor[(4, 7, 2), float64], Tensor[(1430), float32], Tensor[(1430), float32]) {
  %714 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %715 = cast(%var_3145, dtype="float64") /* ty=Tensor[(56), float64] */;
  %716 = reshape(%715, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
  %717 = @func_76(%716) /* ty=(Tensor[(4, 7, 2), int8],) */;
  %718 = %717.0;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(4, 7, 2), float64] */;
  %720 = cast(%var_3151, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %721 = reshape(%720, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %722 = @func_2327(%721) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(1430), float64]) */;
  %723 = %714.3;
  %724 = acosh(%719) /* ty=Tensor[(4, 7, 2), float64] */;
  %725 = %722.2;
  (%723, %var_3145, %724, %725, %var_3151)
}

def @func_1778(%var_1759: Tensor[(11, 8, 2), float64]) -> Tensor[(11, 8, 2), float64] {
  %726 = cast(%var_1759, dtype="float64") /* ty=Tensor[(11, 8, 2), float64] */;
  acos(%726) /* ty=Tensor[(11, 8, 2), float64] */
}

def @func_865(%var_859: Tensor[(9, 4, 1), float32]) -> (Tensor[(9, 4, 5), bool],) {
  %727 = cast(%var_859, dtype="bool") /* ty=Tensor[(9, 4, 1), bool] */;
  %728 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 4, 5), float32] */, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %729 = greater_equal(%727, %728) /* ty=Tensor[(9, 4, 5), bool] */;
  (%729,)
}

def @func_1990() -> (Tensor[(9, 6, 15), int16],) {
  %730 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
  %731 = %730.1;
  (%731,)
}

def @func_772() -> Tensor[(3, 16, 16), int8] {
  %732 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %732.0
}

def @func_2927() -> (Tensor[(1430), int8],) {
  %733 = @func_1752() /* ty=(Tensor[(1430), float64],) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %736 = acos(%735) /* ty=Tensor[(1430), float64] */;
  %737 = cast(%736, dtype="int8") /* ty=Tensor[(1430), int8] */;
  %738 = shape_of(%734, dtype="int32") /* ty=Tensor[(1), int32] */;
  %739 = cast(%734, dtype="int8") /* ty=Tensor[(1430), int8] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?), int8] */;
  %741 = maximum(%739, %740) /* ty=Tensor[(1430), int8] */;
  (%741,)
}

def @func_1168(%var_1137: Tensor[(3, 16, 16), int8], %var_1149: Tensor[(3, 16, 16), bool], %var_1155: Tensor[(715, 2), float32]) -> (Tensor[(11, 13, 10), int16], Tensor[(715, 2), float32], Tensor[(3, 16, 16), float64]) {
  %742 = cast(%var_1155, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
  %743 = cast(%var_1155, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
  %744 = reshape(%742, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %745 = reshape(%743, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %746 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  %747 = cast(%var_1137, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = not_equal(%749, %750) /* ty=Tensor[(3, 16, 16), bool] */;
  %752 = cast(%var_1149, dtype="int16") /* ty=Tensor[(3, 16, 16), int16] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="int16") /* ty=Tensor[(3, 16, 16), int16] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %756 = right_shift(%754, %755) /* ty=Tensor[(3, 16, 16), int16] */;
  %757 = cast(%756, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %758 = tan(%757) /* ty=Tensor[(3, 16, 16), float64] */;
  %759 = cast(%758, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %760 = @func_111(%744, %745) /* ty=Tensor[(11, 13, 10), int16] */;
  %761 = cosh(%759) /* ty=Tensor[(3, 16, 16), float64] */;
  (%760, %var_1155, %761)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1184() -> (Tensor[(1430), float32],) {
  %2 = fn () -> (Tensor[(1430), float32],) {
    %0 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %1 = %0.2;
    (%1,)
  };
  %2() /* ty=(Tensor[(1430), float32],) */
}

def @func_1030() -> (Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) {
  %9 = fn () -> (Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) {
    %3 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
    %4 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %5 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %6 = %3.1;
    %7 = %4.0;
    %8 = %5.2;
    (%6, %7, %8)
  };
  %9() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */
}

def @func_653(%var_649: Tensor[(11, 13, 10), int16], %var_650: Tensor[(11, 13, 10), int16], %var_651: Tensor[(315), float32], %var_652: Tensor[(315), float32]) -> (Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) {
  %64 = fn (%var_519: Tensor[(11, 13, 10), int16], %var_524: Tensor[(11, 13, 10), int16], %var_604: Tensor[(315), float32], %var_643: Tensor[(315), float32]) -> (Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) {
    %10 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %11 = %10.1;
    %12 = cast(%var_519, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%11, dtype="float64") /* ty=Tensor[(11, 13, 10), float64] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %16 = cast(%var_524, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
    %17 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %18 = cast(%11, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
    %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %20 = less_equal(%18, %19) /* ty=Tensor[(11, 13, 10), bool] */;
    %21 = cast(%20, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %22 = cast(%11, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %23 = reshape(%21, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %24 = reshape(%22, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %25 = @func_111(%23, %24) /* ty=Tensor[(11, 13, 10), int16] */;
    %26 = cast(%25, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
    %27 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%20, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %30 = cast(%var_519, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %31 = floor_mod(%14, %15) /* ty=Tensor[(11, 13, 10), float64] */;
    %32 = cast(%31, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %33 = reshape(%30, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %34 = reshape(%32, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %35 = cast(%var_604, dtype="float32") /* ty=Tensor[(315), float32] */;
    %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %37 = logical_or(%28, %29) /* ty=Tensor[(11, 13, 10), bool] */;
    %38 = cast(%37, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %39 = reshape(%35, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
    %40 = reshape(%36, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %41 = reshape(%38, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %42 = @func_433(%39, %40, %41) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %43 = cast(%var_604, dtype="float32") /* ty=Tensor[(315), float32] */;
    %44 = cast(meta[relay.Constant][0] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %45 = @func_111(%33, %34) /* ty=Tensor[(11, 13, 10), int16] */;
    %46 = cast(%45, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %47 = reshape(%43, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
    %48 = reshape(%44, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %49 = reshape(%46, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %50 = @func_433(%47, %48, %49) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %51 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %52 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %53 = cast(%var_604, dtype="float32") /* ty=Tensor[(315), float32] */;
    %54 = asin(%53) /* ty=Tensor[(315), float32] */;
    %55 = cast(%var_643, dtype="bool") /* ty=Tensor[(315), bool] */;
    %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(1), int32] */;
    %57 = cast(%54, dtype="bool") /* ty=Tensor[(315), bool] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?), bool] */;
    %59 = %42.1;
    %60 = %50.3;
    %61 = %51.1;
    %62 = %52.2;
    %63 = greater(%57, %58) /* ty=Tensor[(315), bool] */;
    (%31, %37, %45, %59, meta[relay.Constant][0] /* ty=Tensor[(56), float64] */, %60, %61, %62, %63)
  };
  %64(%var_649, %var_650, %var_651, %var_652) /* ty=(Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) */
}

def @func_1682() -> (Tensor[(3, 16, 16), bool],) {
  @func_1680() /* ty=(Tensor[(3, 16, 16), bool],) */
}

def @func_3490() -> (Tensor[(3, 16, 16), int8],) {
  @func_3488() /* ty=(Tensor[(3, 16, 16), int8],) */
}

def @func_4229(%var_4228: Tensor[(5, 63), float32]) -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int64], Tensor[(5, 63), float32]) {
  %71 = fn (%var_4215: Tensor[(5, 63), float32]) -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int64], Tensor[(5, 63), float32]) {
    %65 = @func_3421() /* ty=(Tensor[(3, 16, 16), int8],) */;
    %66 = cast(%var_4215, dtype="float32") /* ty=Tensor[(5, 63), float32] */;
    %67 = reshape(%66, newshape=[35, 9]) /* ty=Tensor[(35, 9), float32] */;
    %68 = @func_3042(%67) /* ty=(Tensor[(35, 9), float32], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(1, 56), float64], Tensor[(11, 13, 10), int64], Tensor[(11, 13, 10), float32]) */;
    %69 = %65.0;
    %70 = %68.4;
    (%69, %70, %var_4215)
  };
  %71(%var_4228) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int64], Tensor[(5, 63), float32]) */
}

def @func_4587() -> (Tensor[(3, 16, 16), int8], Tensor[(12, 15, 3), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(56), float64], Tensor[(143, 10), float32]) {
  @func_4585() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(12, 15, 3), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(56), float64], Tensor[(143, 10), float32]) */
}

def @func_4206(%var_4205: Tensor[(14, 5, 14), uint16]) -> (Tensor[(14, 5, 14), uint16],) {
  %77 = fn (%var_4195: Tensor[(14, 5, 14), uint16]) -> (Tensor[(14, 5, 14), uint16],) {
    %72 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 5, 14), uint16] */, dtype="uint16") /* ty=Tensor[(14, 5, 14), uint16] */;
    %73 = shape_of(%var_4195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(%var_4195, dtype="uint16") /* ty=Tensor[(14, 5, 14), uint16] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %76 = multiply(%74, %75) /* ty=Tensor[(14, 5, 14), uint16] */;
    (%76,)
  };
  %77(%var_4205) /* ty=(Tensor[(14, 5, 14), uint16],) */
}

def @func_3992() -> (Tensor[(9, 6, 15), int16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16]) {
  @func_3990() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16]) */
}

def @func_4336(%var_4334: Tensor[(13, 16, 8), bool]) -> (Tensor[(13, 16, 8), bool], Tensor[(3, 16, 16), bool]) {
  @func_4333(%var_4334) /* ty=(Tensor[(13, 16, 8), bool], Tensor[(3, 16, 16), bool]) */
}

def @func_694(%var_693: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) {
  %89 = fn (%var_671: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) {
    %78 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %79 = %78.0;
    %80 = cast(%var_671, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%79, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %85 = reshape(%84, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
    %86 = @func_76(%85) /* ty=(Tensor[(4, 7, 2), int8],) */;
    %87 = less(%82, %83) /* ty=Tensor[(3, 16, 16), bool] */;
    %88 = %86.0;
    (%87, %88, meta[relay.Constant][2] /* ty=Tensor[(56), float64] */)
  };
  %89(%var_693) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) */
}

def @func_1754() -> (Tensor[(1430), float64],) {
  @func_1752() /* ty=(Tensor[(1430), float64],) */
}

def @func_437(%var_434: Tensor[(3, 7, 15), float32], %var_435: Tensor[(56), float64], %var_436: Tensor[(1430), float32]) -> (Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %108 = fn (%var_385: Tensor[(3, 7, 15), float32], %var_417: Tensor[(56), float64], %var_420: Tensor[(1430), float32]) -> (Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
    %90 = cast(0.109392f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %91 = cast(%var_385, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
    %92 = floor_divide(%90, %91) /* ty=Tensor[(3, 7, 15), float32] */;
    %93 = cast(%92, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
    %94 = sinh(%93) /* ty=Tensor[(3, 7, 15), float32] */;
    %95 = cast(%94, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
    %96 = log2(%95) /* ty=Tensor[(3, 7, 15), float64] */;
    %97 = cast(%96, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
    %98 = cast(%var_417, dtype="float64") /* ty=Tensor[(56), float64] */;
    %99 = reshape(%98, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
    %100 = @func_76(%99) /* ty=(Tensor[(4, 7, 2), int8],) */;
    %101 = cast(%var_420, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %102 = cast(%var_420, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %103 = reshape(%101, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %104 = reshape(%102, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %105 = log(%97) /* ty=Tensor[(3, 7, 15), float32] */;
    %106 = %100.0;
    %107 = @func_111(%103, %104) /* ty=Tensor[(11, 13, 10), int16] */;
    (%105, %106, %var_417, %107, %var_420)
  };
  %108(%var_434, %var_435, %var_436) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */
}

def @func_3990() -> (Tensor[(9, 6, 15), int16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16]) {
  %109 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %110 = cast(meta[relay.Constant][3] /* ty=Tensor[(143, 10), int16] */, dtype="int16") /* ty=Tensor[(143, 10), int16] */;
  %111 = reshape(%110, newshape=[1430]) /* ty=Tensor[(1430), int16] */;
  %112 = @func_1236(%111) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %113 = %109.0;
  %114 = %112.1;
  (%113, %114, meta[relay.Constant][3] /* ty=Tensor[(143, 10), int16] */)
}

def @func_1778(%var_1759: Tensor[(11, 8, 2), float64]) -> Tensor[(11, 8, 2), float64] {
  %115 = cast(%var_1759, dtype="float64") /* ty=Tensor[(11, 8, 2), float64] */;
  acos(%115) /* ty=Tensor[(11, 8, 2), float64] */
}

def @func_2969(%var_2967: Tensor[(6, 16, 7), float32], %var_2968: Tensor[(6, 16, 7), float32]) -> Tensor[(6, 16, 7), float64] {
  @func_2965(%var_2967, %var_2968) /* ty=Tensor[(6, 16, 7), float64] */
}

def @func_114(%var_112: Tensor[(11, 13, 10), float32], %var_113: Tensor[(11, 13, 10), float32]) -> Tensor[(11, 13, 10), int16] {
  %125 = fn (%var_80: Tensor[(11, 13, 10), float32], %var_81: Tensor[(11, 13, 10), float32]) -> Tensor[(11, 13, 10), int16] {
    %116 = cast(%var_81, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
    %117 = shape_of(%var_80, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%var_80, dtype="bool") /* ty=Tensor[(11, 13, 10), bool] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %120 = not_equal(%118, %119) /* ty=Tensor[(11, 13, 10), bool] */;
    %121 = cast(%var_81, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
    %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
    %123 = cast(%120, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_and(%123, %124) /* ty=Tensor[(11, 13, 10), int16] */
  };
  %125(%var_112, %var_113) /* ty=Tensor[(11, 13, 10), int16] */
}

def @func_4026(%var_4024: Tensor[(1430), float32], %var_4025: Tensor[(1430), float32]) -> (Tensor[(1430), bool], Tensor[(1430), float32]) {
  @func_4022(%var_4024, %var_4025) /* ty=(Tensor[(1430), bool], Tensor[(1430), float32]) */
}

def @func_4333(%var_4311: Tensor[(13, 16, 8), bool]) -> (Tensor[(13, 16, 8), bool], Tensor[(3, 16, 16), bool]) {
  %126 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 16, 8), bool] */, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %127 = shape_of(%var_4311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_4311, dtype="bool") /* ty=Tensor[(13, 16, 8), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %130 = @func_3456() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %131 = logical_or(%128, %129) /* ty=Tensor[(13, 16, 8), bool] */;
  %132 = %130.0;
  (%131, %132)
}

def @func_768() -> (Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) {
  @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */
}

def @func_3447(%var_3445: Tensor[(9, 9, 2), float32], %var_3446: Tensor[(9, 9, 2), float32]) -> Tensor[(9, 9, 2), float32] {
  %144 = fn (%var_3425: Tensor[(9, 9, 2), float32], %var_3426: Tensor[(9, 9, 2), float32]) -> Tensor[(9, 9, 2), float32] {
    %133 = cast(%var_3426, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
    %134 = shape_of(%var_3425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%var_3425, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %137 = mod(%135, %136) /* ty=Tensor[(9, 9, 2), float32] */;
    %138 = cast(%137, dtype="float64") /* ty=Tensor[(9, 9, 2), float64] */;
    %139 = acosh(%138) /* ty=Tensor[(9, 9, 2), float64] */;
    %140 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 9, 2), float64] */, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
    %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(%139, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%142, %143) /* ty=Tensor[(9, 9, 2), float32] */
  };
  %144(%var_3445, %var_3446) /* ty=Tensor[(9, 9, 2), float32] */
}

def @func_772() -> Tensor[(3, 16, 16), int8] {
  %145 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %145.0
}

def @func_2773(%var_2771: Tensor[(14, 16, 1), float32]) -> (Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) {
  @func_2770(%var_2771) /* ty=(Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) */
}

def @func_1392(%var_1311: Tensor[(10, 8, 8), float32], %var_1323: Tensor[(56), float64], %var_1343: Tensor[(10, 8, 8), float32], %var_1355: Tensor[(10, 8, 8), float32]) -> (Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) {
  %146 = cast(%var_1323, dtype="float64") /* ty=Tensor[(56), float64] */;
  %147 = reshape(%146, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
  %148 = @func_76(%147) /* ty=(Tensor[(4, 7, 2), int8],) */;
  %149 = cast(%var_1311, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
  %150 = sqrt(%149) /* ty=Tensor[(10, 8, 8), float32] */;
  %151 = cast(%var_1355, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="float32") /* ty=Tensor[(10, 8, 8), float32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %155 = cast(meta[relay.Constant][6] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %156 = reshape(%155, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %157 = @func_930(%156) /* ty=(Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) */;
  %158 = cast(%var_1343, dtype="uint8") /* ty=Tensor[(10, 8, 8), uint8] */;
  %159 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%150, dtype="uint8") /* ty=Tensor[(10, 8, 8), uint8] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %162 = subtract(%160, %161) /* ty=Tensor[(10, 8, 8), uint8] */;
  %163 = cast(%var_1311, dtype="int16") /* ty=Tensor[(10, 8, 8), int16] */;
  %164 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%150, dtype="int16") /* ty=Tensor[(10, 8, 8), int16] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %167 = add(%165, %166) /* ty=Tensor[(10, 8, 8), int16] */;
  %168 = cast(%167, dtype="uint64") /* ty=Tensor[(10, 8, 8), uint64] */;
  %169 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%162, dtype="uint64") /* ty=Tensor[(10, 8, 8), uint64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %172 = %148.0;
  %173 = floor_divide(%153, %154) /* ty=Tensor[(10, 8, 8), float32] */;
  %174 = %157.2;
  %175 = bitwise_or(%170, %171) /* ty=Tensor[(10, 8, 8), uint64] */;
  (%172, %var_1323, %173, %174, meta[relay.Constant][6] /* ty=Tensor[(1430), float32] */, %175)
}

def @func_1622() -> Tensor[(1430), float64] {
  %179 = fn () -> Tensor[(1430), float64] {
    %176 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
    %177 = %176.2;
    %178 = cast(%177, dtype="float64") /* ty=Tensor[(1430), float64] */;
    asinh(%178) /* ty=Tensor[(1430), float64] */
  };
  %179() /* ty=Tensor[(1430), float64] */
}

def @func_503() -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */
}

def @func_3894(%var_3892: Tensor[(2, 10, 12), int64]) -> Tensor[(2, 10, 12), bool] {
  @func_3891(%var_3892) /* ty=Tensor[(2, 10, 12), bool] */
}

def @func_3620(%var_3579: Tensor[(143, 10), float32], %var_3583: Tensor[(1430), bool], %var_3609: Tensor[(224), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(143, 10), float32], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(224), float32], Tensor[(1430), float32]) {
  %180 = cast(%var_3583, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %181 = atan(%180) /* ty=Tensor[(1430), float64] */;
  %182 = cast(%var_3583, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %183 = shape_of(%181, dtype="int32") /* ty=Tensor[(1), int32] */;
  %184 = cast(%181, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?), float32] */;
  %186 = cast(%var_3609, dtype="float32") /* ty=Tensor[(224), float32] */;
  %187 = reshape(%186, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %188 = @func_3121(%187) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) */;
  %189 = cast(%var_3579, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %190 = reshape(%189, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %191 = @func_1944(%190) /* ty=(Tensor[(1430), float32], Tensor[(1430), bool]) */;
  %192 = %191.1;
  %193 = cast(%var_3583, dtype="int16") /* ty=Tensor[(1430), int16] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(1), int32] */;
  %195 = cast(%192, dtype="int16") /* ty=Tensor[(1430), int16] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?), int16] */;
  %197 = bitwise_or(%195, %196) /* ty=Tensor[(1430), int16] */;
  %198 = cast(%197, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %199 = shape_of(%181, dtype="int32") /* ty=Tensor[(1), int32] */;
  %200 = cast(%181, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?), bool] */;
  %202 = equal(%200, %201) /* ty=Tensor[(1430), bool] */;
  %203 = cast(%202, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %204 = @func_2086() /* ty=Tensor[(3, 16, 16), bool] */;
  %205 = floor_divide(%184, %185) /* ty=Tensor[(1430), float32] */;
  %206 = %188.1;
  %207 = rsqrt(%203) /* ty=Tensor[(1430), float32] */;
  (%204, %var_3579, %205, %206, %var_3609, %207)
}

def @func_3625(%var_3622: Tensor[(143, 10), float32], %var_3623: Tensor[(1430), bool], %var_3624: Tensor[(224), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(143, 10), float32], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(224), float32], Tensor[(1430), float32]) {
  @func_3620(%var_3622, %var_3623, %var_3624) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(143, 10), float32], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(224), float32], Tensor[(1430), float32]) */
}

def @func_4022(%var_4013: Tensor[(1430), float32], %var_4018: Tensor[(1430), float32]) -> (Tensor[(1430), bool], Tensor[(1430), float32]) {
  %208 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %209 = %208.0;
  %210 = cast(%var_4013, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(1), int32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(1430), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?), bool] */;
  %214 = cast(%var_4018, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %215 = shape_of(%var_4013, dtype="int32") /* ty=Tensor[(1), int32] */;
  %216 = cast(%var_4013, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?), float32] */;
  %218 = not_equal(%212, %213) /* ty=Tensor[(1430), bool] */;
  %219 = subtract(%216, %217) /* ty=Tensor[(1430), float32] */;
  (%218, %219)
}

def @func_2357(%var_2356: Tensor[(12, 14, 11), float32]) -> (Tensor[(12, 14, 11), float32], Tensor[(1430), float32]) {
  %225 = fn (%var_2345: Tensor[(12, 14, 11), float32]) -> (Tensor[(12, 14, 11), float32], Tensor[(1430), float32]) {
    %220 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 1), float32] */;
    %221 = cast(%var_2345, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
    %222 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
    %223 = maximum(%220, %221) /* ty=Tensor[(12, 14, 11), float32] */;
    %224 = %222.2;
    (%223, %224)
  };
  %225(%var_2356) /* ty=(Tensor[(12, 14, 11), float32], Tensor[(1430), float32]) */
}

def @func_3891(%var_3887: Tensor[(2, 10, 12), int64]) -> Tensor[(2, 10, 12), bool] {
  %226 = cast(2 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %227 = cast(%var_3887, dtype="bool") /* ty=Tensor[(2, 10, 12), bool] */;
  less_equal(%226, %227) /* ty=Tensor[(2, 10, 12), bool] */
}

def @func_3471(%var_3468: Tensor[(4, 2, 5), float32], %var_3469: Tensor[(315), float32], %var_3470: Tensor[(715, 2), float32]) -> (Tensor[(4, 2, 5), float32], Tensor[(1430), bool], Tensor[(315), float32], Tensor[(715, 2), float32]) {
  %236 = fn (%var_3459: Tensor[(4, 2, 5), float32], %var_3463: Tensor[(315), float32], %var_3464: Tensor[(715, 2), float32]) -> (Tensor[(4, 2, 5), float32], Tensor[(1430), bool], Tensor[(315), float32], Tensor[(715, 2), float32]) {
    %228 = cast(%var_3459, dtype="float32") /* ty=Tensor[(4, 2, 5), float32] */;
    %229 = cast(%var_3463, dtype="float32") /* ty=Tensor[(315), float32] */;
    %230 = cast(%var_3464, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
    %231 = reshape(%229, newshape=[315]) /* ty=Tensor[(315), float32] */;
    %232 = reshape(%230, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %233 = @func_2596(%231, %232) /* ty=(Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) */;
    %234 = asinh(%228) /* ty=Tensor[(4, 2, 5), float32] */;
    %235 = %233.3;
    (%234, %235, %var_3463, %var_3464)
  };
  %236(%var_3468, %var_3469, %var_3470) /* ty=(Tensor[(4, 2, 5), float32], Tensor[(1430), bool], Tensor[(315), float32], Tensor[(715, 2), float32]) */
}

def @func_3155(%var_3145: Tensor[(56), float64], %var_3151: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), uint32], Tensor[(56), float64], Tensor[(4, 7, 2), float64], Tensor[(1430), float32], Tensor[(1430), float32]) {
  %237 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %238 = cast(%var_3145, dtype="float64") /* ty=Tensor[(56), float64] */;
  %239 = reshape(%238, newshape=[4, 7, 2]) /* ty=Tensor[(4, 7, 2), float64] */;
  %240 = @func_76(%239) /* ty=(Tensor[(4, 7, 2), int8],) */;
  %241 = %240.0;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(4, 7, 2), float64] */;
  %243 = cast(%var_3151, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %244 = reshape(%243, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %245 = @func_2327(%244) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(1430), float64]) */;
  %246 = %237.3;
  %247 = acosh(%242) /* ty=Tensor[(4, 7, 2), float64] */;
  %248 = %245.2;
  (%246, %var_3145, %247, %248, %var_3151)
}

def @func_3422() -> (Tensor[(3, 16, 16), int8],) {
  %250 = fn () -> (Tensor[(3, 16, 16), int8],) {
    %249 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
    (%249,)
  };
  %250() /* ty=(Tensor[(3, 16, 16), int8],) */
}

def @func_1517() -> (Tensor[(3, 16, 16), int8],) {
  %253 = fn () -> (Tensor[(3, 16, 16), int8],) {
    %251 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
    %252 = %251.0;
    (%252,)
  };
  %253() /* ty=(Tensor[(3, 16, 16), int8],) */
}

def @func_4165(%var_4155: Tensor[(12, 4, 6), float64]) -> (Tensor[(12, 4, 6), float64],) {
  %254 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 4, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %255 = shape_of(%var_4155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_4155, dtype="float64") /* ty=Tensor[(12, 4, 6), float64] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %258 = divide(%256, %257) /* ty=Tensor[(12, 4, 6), float64] */;
  (%258,)
}

def @func_774() -> Tensor[(3, 16, 16), int8] {
  @func_772() /* ty=Tensor[(3, 16, 16), int8] */
}

def @func_1810() -> (Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) {
  @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */
}

def @func_1115(%var_1100: Tensor[(143, 10), int16]) -> (Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) {
  %259 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  %260 = cast(%259, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %261 = cast(%var_1100, dtype="int16") /* ty=Tensor[(143, 10), int16] */;
  %262 = cast(%var_1100, dtype="int16") /* ty=Tensor[(143, 10), int16] */;
  %263 = cast(meta[relay.Constant][9] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %264 = cast(meta[relay.Constant][9] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %265 = reshape(%261, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
  %266 = reshape(%262, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
  %267 = reshape(%263, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %268 = reshape(%264, newshape=[315]) /* ty=Tensor[(315), float32] */;
  %269 = @func_648(%265, %266, %267, %268) /* ty=(Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) */;
  %270 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %271 = exp(%260) /* ty=Tensor[(3, 16, 16), float32] */;
  %272 = %269.2;
  %273 = %270.1;
  (%271, %272, %var_1100, meta[relay.Constant][9] /* ty=Tensor[(315), float32] */, %273)
}

def @func_4278() -> (Tensor[(3, 16, 16), int8], Tensor[(3, 16, 16), bool], Tensor[(224), float32], Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) {
  %274 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
  %275 = cast(meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %276 = reshape(%275, newshape=[8, 28]) /* ty=Tensor[(8, 28), float32] */;
  %277 = @func_3121(%276) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) */;
  %278 = cast(meta[relay.Constant][11] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %279 = reshape(%278, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %280 = @func_2426(%279) /* ty=(Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) */;
  %281 = %274.1;
  %282 = %277.0;
  %283 = %280.3;
  (%281, %282, meta[relay.Constant][10] /* ty=Tensor[(224), float32] */, %283, meta[relay.Constant][11] /* ty=Tensor[(1430), float32] */)
}

def @func_2770(%var_2753: Tensor[(14, 16, 1), float32]) -> (Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) {
  %284 = cast(%var_2753, dtype="float32") /* ty=Tensor[(14, 16, 1), float32] */;
  %285 = acosh(%284) /* ty=Tensor[(14, 16, 1), float32] */;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(14, 16, 1), float32] */;
  %287 = rsqrt(%286) /* ty=Tensor[(14, 16, 1), float32] */;
  %288 = @func_1829() /* ty=Tensor[(3, 16, 16), int8] */;
  (%287, %288)
}

def @func_2428(%var_2427: Tensor[(1430), float32]) -> (Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) {
  %305 = fn (%var_2405: Tensor[(1430), float32]) -> (Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) {
    %289 = cast(%var_2405, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %290 = reshape(%289, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %291 = @func_930(%290) /* ty=(Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) */;
    %292 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
    %293 = %292.0;
    %294 = cast(%293, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
    %295 = asin(%294) /* ty=Tensor[(9, 6, 15), float32] */;
    %296 = cast(%295, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
    %297 = erf(%296) /* ty=Tensor[(9, 6, 15), float32] */;
    %298 = cast(%297, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
    %299 = sinh(%298) /* ty=Tensor[(9, 6, 15), float64] */;
    %300 = cast(%299, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
    %301 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
    %302 = %291.3;
    %303 = atanh(%300) /* ty=Tensor[(9, 6, 15), float32] */;
    %304 = %301.0;
    (%302, %var_2405, %303, %304)
  };
  %305(%var_2427) /* ty=(Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) */
}

def @func_2097() -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) {
  %306 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %307 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %308 = %306.0;
  %309 = %307.1;
  (%308, %309)
}

def @func_1603(%var_1602: Tensor[(9, 6, 15), float64]) -> Tensor[(9, 6, 15), float64] {
  %311 = fn (%var_1588: Tensor[(9, 6, 15), float64]) -> Tensor[(9, 6, 15), float64] {
    %310 = cast(%var_1588, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
    sigmoid(%310) /* ty=Tensor[(9, 6, 15), float64] */
  };
  %311(%var_1602) /* ty=Tensor[(9, 6, 15), float64] */
}

def @func_4366(%var_4365: Tensor[(1848), float32]) -> (Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(1848), float32]) {
  %318 = fn (%var_4362: Tensor[(1848), float32]) -> (Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(1848), float32]) {
    %312 = @func_2097() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) */;
    %313 = cast(%var_4362, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %314 = reshape(%313, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
    %315 = @func_2355(%314) /* ty=(Tensor[(12, 14, 11), float32], Tensor[(1430), float32]) */;
    %316 = %312.1;
    %317 = %315.1;
    (%316, %317, %var_4362)
  };
  %318(%var_4365) /* ty=(Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(1848), float32]) */
}

def @func_2458(%var_2455: Tensor[(20, 32), float32]) -> (Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(315), float32], Tensor[(20, 32), float32], Tensor[(56), float64]) {
  %319 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %320 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %321 = cast(%var_2455, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %322 = cast(meta[relay.Constant][12] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %323 = cast(%var_2455, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %324 = cast(%var_2455, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %325 = reshape(%321, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %326 = reshape(%322, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %327 = reshape(%323, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %328 = reshape(%324, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %329 = @func_1392(%325, %326, %327, %328) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */;
  %330 = %319.0;
  %331 = %320.1;
  %332 = %329.3;
  (%330, %331, %332, %var_2455, meta[relay.Constant][12] /* ty=Tensor[(56), float64] */)
}

def @func_4419(%var_4418: Tensor[(1430, 1), float32]) -> (Tensor[(3, 16, 16), uint32], Tensor[(9, 6, 15), int16], Tensor[(1430, 1), float32], Tensor[(315), float32], Tensor[(3, 16, 16), float32]) {
  %347 = fn (%var_4400: Tensor[(1430, 1), float32]) -> (Tensor[(3, 16, 16), uint32], Tensor[(9, 6, 15), int16], Tensor[(1430, 1), float32], Tensor[(315), float32], Tensor[(3, 16, 16), float32]) {
    %333 = @func_3759() /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), uint32]) */;
    %334 = cast(%var_4400, dtype="float32") /* ty=Tensor[(1430, 1), float32] */;
    %335 = reshape(%334, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %336 = @func_2426(%335) /* ty=(Tensor[(28, 2), float64], Tensor[(1430), float32], Tensor[(9, 6, 15), float32], Tensor[(9, 6, 15), int16]) */;
    %337 = cast(%var_4400, dtype="int16") /* ty=Tensor[(1430, 1), int16] */;
    %338 = reshape(%337, newshape=[143, 10]) /* ty=Tensor[(143, 10), int16] */;
    %339 = @func_1115(%338) /* ty=(Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) */;
    %340 = @func_3334() /* ty=(Tensor[(3, 16, 16), bool],) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
    %343 = %333.1;
    %344 = %336.3;
    %345 = %339.3;
    %346 = log(%342) /* ty=Tensor[(3, 16, 16), float32] */;
    (%343, %344, %var_4400, %345, %346)
  };
  %347(%var_4418) /* ty=(Tensor[(3, 16, 16), uint32], Tensor[(9, 6, 15), int16], Tensor[(1430, 1), float32], Tensor[(315), float32], Tensor[(3, 16, 16), float32]) */
}

def @func_2088() -> Tensor[(3, 16, 16), bool] {
  @func_2086() /* ty=Tensor[(3, 16, 16), bool] */
}

def @func_4280() -> (Tensor[(3, 16, 16), int8], Tensor[(3, 16, 16), bool], Tensor[(224), float32], Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) {
  @func_4278() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(3, 16, 16), bool], Tensor[(224), float32], Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) */
}

def @func_2050() -> (Tensor[(9, 6, 15), int16], Tensor[(3, 16, 16), int8]) {
  %348 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
  %349 = %348.1;
  %350 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  (%349, %350)
}

def @func_3571() -> (Tensor[(3, 16, 16), int8],) {
  %351 = @func_3488() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %352 = %351.0;
  (%352,)
}

def @func_4669(%var_4668: Tensor[(9, 6, 15), int16]) -> (Tensor[(9, 6, 15), float64], Tensor[(9, 6, 15), float32]) {
  %362 = fn (%var_4637: Tensor[(9, 6, 15), int16]) -> (Tensor[(9, 6, 15), float64], Tensor[(9, 6, 15), float32]) {
    %353 = @func_2050() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(3, 16, 16), int8]) */;
    %354 = %353.0;
    %355 = cast(%var_4637, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
    %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%354, dtype="float64") /* ty=Tensor[(9, 6, 15), float64] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %359 = cast(%var_4637, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
    %360 = power(%357, %358) /* ty=Tensor[(9, 6, 15), float64] */;
    %361 = acosh(%359) /* ty=Tensor[(9, 6, 15), float32] */;
    (%360, %361)
  };
  %362(%var_4668) /* ty=(Tensor[(9, 6, 15), float64], Tensor[(9, 6, 15), float32]) */
}

def @func_4168(%var_4166: Tensor[(12, 4, 6), float64]) -> (Tensor[(12, 4, 6), float64],) {
  @func_4165(%var_4166) /* ty=(Tensor[(12, 4, 6), float64],) */
}

def @func_1946(%var_1945: Tensor[(1430), float32]) -> (Tensor[(1430), float32], Tensor[(1430), bool]) {
  %375 = fn (%var_1912: Tensor[(1430), float32]) -> (Tensor[(1430), float32], Tensor[(1430), bool]) {
    %363 = @func_1029() /* ty=(Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(1430), float32]) */;
    %364 = %363.2;
    %365 = cast(%var_1912, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(1), int32] */;
    %367 = cast(%364, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?), float32] */;
    %369 = cast(%364, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %370 = shape_of(%var_1912, dtype="int32") /* ty=Tensor[(1), int32] */;
    %371 = cast(%var_1912, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?), bool] */;
    %373 = mod(%367, %368) /* ty=Tensor[(1430), float32] */;
    %374 = less(%371, %372) /* ty=Tensor[(1430), bool] */;
    (%373, %374)
  };
  %375(%var_1945) /* ty=(Tensor[(1430), float32], Tensor[(1430), bool]) */
}

def @func_2632(%var_2631: Tensor[(1430), float32]) -> (Tensor[(9, 6, 15), float32], Tensor[(56), float64], Tensor[(315), float32], Tensor[(1430), float32]) {
  %386 = fn (%var_2622: Tensor[(1430), float32]) -> (Tensor[(9, 6, 15), float32], Tensor[(56), float64], Tensor[(315), float32], Tensor[(1430), float32]) {
    %376 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
    %377 = %376.1;
    %378 = cast(%377, dtype="float32") /* ty=Tensor[(9, 6, 15), float32] */;
    %379 = cast(meta[relay.Constant][13] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
    %380 = cast(%var_2622, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %381 = reshape(%379, newshape=[315]) /* ty=Tensor[(315), float32] */;
    %382 = reshape(%380, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %383 = @func_2596(%381, %382) /* ty=(Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) */;
    %384 = asinh(%378) /* ty=Tensor[(9, 6, 15), float32] */;
    %385 = %383.2;
    (%384, %385, meta[relay.Constant][13] /* ty=Tensor[(315), float32] */, %var_2622)
  };
  %386(%var_2631) /* ty=(Tensor[(9, 6, 15), float32], Tensor[(56), float64], Tensor[(315), float32], Tensor[(1430), float32]) */
}

def @func_3573() -> (Tensor[(3, 16, 16), int8],) {
  @func_3571() /* ty=(Tensor[(3, 16, 16), int8],) */
}

def @func_1398(%var_1394: Tensor[(10, 8, 8), float32], %var_1395: Tensor[(56), float64], %var_1396: Tensor[(10, 8, 8), float32], %var_1397: Tensor[(10, 8, 8), float32]) -> (Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) {
  @func_1392(%var_1394, %var_1395, %var_1396, %var_1397) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */
}

def @main(%var_4691: Tensor[(980), uint16], %var_4718: Tensor[(640), float32], %var_4732: Tensor[(143, 10), bool]) -> (Tensor[(5, 63), float32], Tensor[(315), float32], Tensor[(14, 5, 14), uint16], Tensor[(980), uint16], Tensor[(1430), float32], Tensor[(640), float32], Tensor[(56), float64], Tensor[(3, 16, 16), int8], Tensor[(8, 28), float32], Tensor[(315), float32], Tensor[(143, 10), float64], Tensor[(143, 10), float32]) {
  %387 = cast(meta[relay.Constant][14] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %388 = reshape(%387, newshape=[5, 63]) /* ty=Tensor[(5, 63), float32] */;
  %389 = @func_4229(%388) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int64], Tensor[(5, 63), float32]) */;
  %390 = cast(%var_4691, dtype="uint16") /* ty=Tensor[(980), uint16] */;
  %391 = reshape(%390, newshape=[14, 5, 14]) /* ty=Tensor[(14, 5, 14), uint16] */;
  %392 = @func_4206(%391) /* ty=(Tensor[(14, 5, 14), uint16],) */;
  %393 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %394 = cast(meta[relay.Constant][15] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %395 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %396 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %397 = reshape(%393, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %398 = reshape(%394, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %399 = reshape(%395, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %400 = reshape(%396, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %401 = @func_1398(%397, %398, %399, %400) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */;
  %402 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 28), float32] */, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
  %403 = reshape(%402, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), float32] */;
  %404 = @func_2773(%403) /* ty=(Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) */;
  %405 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %406 = cast(meta[relay.Constant][15] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %407 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %408 = cast(%var_4718, dtype="float32") /* ty=Tensor[(640), float32] */;
  %409 = reshape(%405, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %410 = reshape(%406, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %411 = reshape(%407, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %412 = reshape(%408, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
  %413 = @func_1392(%409, %410, %411, %412) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */;
  %414 = %413.4;
  %415 = cast(%414, dtype="int16") /* ty=Tensor[(1430), int16] */;
  %416 = reshape(%415, newshape=[143, 10]) /* ty=Tensor[(143, 10), int16] */;
  %417 = @func_1118(%416) /* ty=(Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) */;
  %418 = @func_4587() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(12, 15, 3), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(56), float64], Tensor[(143, 10), float32]) */;
  %419 = %418.5;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(143, 10), float64] */;
  %421 = acosh(%420) /* ty=Tensor[(143, 10), float64] */;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(143, 10), float64] */;
  %423 = cast(%421, dtype="float64") /* ty=Tensor[(143, 10), float64] */;
  %424 = sin(%423) /* ty=Tensor[(143, 10), float64] */;
  %425 = cast(%419, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(2), int32] */;
  %427 = cast(%424, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %429 = greater(%427, %428) /* ty=Tensor[(143, 10), bool] */;
  %430 = cast(%var_4732, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(2), int32] */;
  %432 = cast(%429, dtype="bool") /* ty=Tensor[(143, 10), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %434 = greater_equal(%432, %433) /* ty=Tensor[(143, 10), bool] */;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %436 = %389.2;
  %437 = %392.0;
  %438 = %401.4;
  %439 = %404.1;
  %440 = %417.3;
  %441 = exp(%422) /* ty=Tensor[(143, 10), float64] */;
  %442 = erf(%435) /* ty=Tensor[(143, 10), float32] */;
  (%436, meta[relay.Constant][14] /* ty=Tensor[(315), float32] */, %437, %var_4691, %438, %var_4718, meta[relay.Constant][15] /* ty=Tensor[(56), float64] */, %439, meta[relay.Constant][16] /* ty=Tensor[(8, 28), float32] */, %440, %441, %442)
}

def @func_3520(%var_3494: Tensor[(2, 16, 7), int8]) -> (Tensor[(2, 16, 7), int8], Tensor[(9, 6, 15), int16], Tensor[(11, 130), int16], Tensor[(3, 16, 16), float32], Tensor[(1430), float64]) {
  %443 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 7), int8] */, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
  %444 = shape_of(%var_3494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%var_3494, dtype="bool") /* ty=Tensor[(2, 16, 7), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %447 = greater_equal(%445, %446) /* ty=Tensor[(2, 16, 7), bool] */;
  %448 = cast(%447, dtype="int8") /* ty=Tensor[(2, 16, 7), int8] */;
  %449 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 7), int8] */, dtype="int8") /* ty=Tensor[(2, 16, 7), int8] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %452 = @func_2859() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) */;
  %453 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 130), int16] */, dtype="int16") /* ty=Tensor[(11, 130), int16] */;
  %454 = reshape(%453, newshape=[1430]) /* ty=Tensor[(1430), int16] */;
  %455 = @func_1236(%454) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %458 = bitwise_or(%450, %451) /* ty=Tensor[(2, 16, 7), int8] */;
  %459 = %452.0;
  %460 = sqrt(%457) /* ty=Tensor[(3, 16, 16), float32] */;
  %461 = @func_2693() /* ty=Tensor[(1430), float64] */;
  (%458, %459, meta[relay.Constant][18] /* ty=Tensor[(11, 130), int16] */, %460, %461)
}

def @func_1808() -> (Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) {
  %462 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %463 = cast(meta[relay.Constant][19] /* ty=Tensor[(81, 10), float64] */, dtype="float64") /* ty=Tensor[(81, 10), float64] */;
  %464 = reshape(%463, newshape=[9, 6, 15]) /* ty=Tensor[(9, 6, 15), float64] */;
  %465 = @func_1601(%464) /* ty=Tensor[(9, 6, 15), float64] */;
  %466 = cast(meta[relay.Constant][19] /* ty=Tensor[(81, 10), float64] */, dtype="int16") /* ty=Tensor[(81, 10), int16] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="int16") /* ty=Tensor[(9, 6, 15), int16] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %470 = %462.0;
  %471 = bitwise_and(%468, %469) /* ty=Tensor[(9, 6, 15), int16] */;
  (%470, %471)
}

def @func_2965(%var_2954: Tensor[(6, 16, 7), float32], %var_2955: Tensor[(6, 16, 7), float32]) -> Tensor[(6, 16, 7), float64] {
  %472 = cast(%var_2955, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %473 = shape_of(%var_2954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_2954, dtype="float32") /* ty=Tensor[(6, 16, 7), float32] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %476 = floor_divide(%474, %475) /* ty=Tensor[(6, 16, 7), float32] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(6, 16, 7), float64] */;
  acosh(%477) /* ty=Tensor[(6, 16, 7), float64] */
}

def @func_766() -> (Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) {
  %478 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %479 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %480 = %479.2;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %482 = cast(%480, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %483 = reshape(%481, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %484 = reshape(%482, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %485 = cast(meta[relay.Constant][20] /* ty=Tensor[(768), int8] */, dtype="int8") /* ty=Tensor[(768), int8] */;
  %486 = reshape(%485, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), int8] */;
  %487 = @func_692(%486) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) */;
  %488 = %487.0;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %490 = atanh(%489) /* ty=Tensor[(3, 16, 16), float64] */;
  %491 = cast(meta[relay.Constant][20] /* ty=Tensor[(768), int8] */, dtype="uint32") /* ty=Tensor[(768), uint32] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="uint32") /* ty=Tensor[(3, 16, 16), uint32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %495 = %478.2;
  %496 = @func_111(%483, %484) /* ty=Tensor[(11, 13, 10), int16] */;
  %497 = multiply(%493, %494) /* ty=Tensor[(3, 16, 16), uint32] */;
  (%495, %480, %496, %497)
}

def @func_1830() -> Tensor[(3, 16, 16), int8] {
  %498 = fn () -> Tensor[(3, 16, 16), int8] {
    @func_772() /* ty=Tensor[(3, 16, 16), int8] */
  };
  %498() /* ty=Tensor[(3, 16, 16), int8] */
}

def @func_865(%var_859: Tensor[(9, 4, 1), float32]) -> (Tensor[(9, 4, 5), bool],) {
  %499 = cast(%var_859, dtype="bool") /* ty=Tensor[(9, 4, 1), bool] */;
  %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 4, 5), float32] */, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %501 = greater_equal(%499, %500) /* ty=Tensor[(9, 4, 5), bool] */;
  (%501,)
}

def @func_1503(%var_1501: Tensor[(3, 6, 15), float32], %var_1502: Tensor[(768), int8]) -> (Tensor[(3, 6, 15), float32], Tensor[(56), float64], Tensor[(768), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %513 = fn (%var_1469: Tensor[(3, 6, 15), float32], %var_1477: Tensor[(768), int8]) -> (Tensor[(3, 6, 15), float32], Tensor[(56), float64], Tensor[(768), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
    %502 = cast(%var_1469, dtype="float32") /* ty=Tensor[(3, 6, 15), float32] */;
    %503 = cast(%var_1477, dtype="int8") /* ty=Tensor[(768), int8] */;
    %504 = reshape(%503, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), int8] */;
    %505 = @func_692(%504) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(4, 7, 2), int8], Tensor[(56), float64]) */;
    %506 = cast(meta[relay.Constant][22] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %507 = cast(meta[relay.Constant][22] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %508 = reshape(%506, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %509 = reshape(%507, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %510 = log(%502) /* ty=Tensor[(3, 6, 15), float32] */;
    %511 = %505.2;
    %512 = @func_111(%508, %509) /* ty=Tensor[(11, 13, 10), int16] */;
    (%510, %511, %var_1477, %512, meta[relay.Constant][22] /* ty=Tensor[(1430), float32] */)
  };
  %513(%var_1501, %var_1502) /* ty=(Tensor[(3, 6, 15), float32], Tensor[(56), float64], Tensor[(768), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */
}

def @func_4481(%var_4480: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), float64], Tensor[(1430), int8]) {
  %522 = fn (%var_4466: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), float64], Tensor[(1430), int8]) {
    %514 = @func_1829() /* ty=Tensor[(3, 16, 16), int8] */;
    %515 = cast(%var_4466, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
    %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %517 = cast(%514, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
    %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %519 = @func_2927() /* ty=(Tensor[(1430), int8],) */;
    %520 = mod(%517, %518) /* ty=Tensor[(3, 16, 16), float64] */;
    %521 = %519.0;
    (%520, %521)
  };
  %522(%var_4480) /* ty=(Tensor[(3, 16, 16), float64], Tensor[(1430), int8]) */
}

def @func_4585() -> (Tensor[(3, 16, 16), int8], Tensor[(12, 15, 3), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(56), float64], Tensor[(143, 10), float32]) {
  %523 = @func_4268() /* ty=(Tensor[(12, 15, 3), int32], Tensor[(12, 15, 3), float64]) */;
  %524 = cast(meta[relay.Constant][23] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
  %526 = cast(meta[relay.Constant][25] /* ty=Tensor[(143, 10), float32] */, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %527 = reshape(%524, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %528 = reshape(%525, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %529 = reshape(%526, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %530 = @func_433(%527, %528, %529) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %531 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  %532 = %523.1;
  %533 = %530.1;
  (%531, %532, %533, meta[relay.Constant][23] /* ty=Tensor[(315), float32] */, meta[relay.Constant][24] /* ty=Tensor[(56), float64] */, meta[relay.Constant][25] /* ty=Tensor[(143, 10), float32] */)
}

def @func_2951() -> Tensor[(3, 16, 16), bool] {
  @func_2949() /* ty=Tensor[(3, 16, 16), bool] */
}

def @func_1172(%var_1169: Tensor[(3, 16, 16), int8], %var_1170: Tensor[(3, 16, 16), bool], %var_1171: Tensor[(715, 2), float32]) -> (Tensor[(11, 13, 10), int16], Tensor[(715, 2), float32], Tensor[(3, 16, 16), float64]) {
  %554 = fn (%var_1137: Tensor[(3, 16, 16), int8], %var_1149: Tensor[(3, 16, 16), bool], %var_1155: Tensor[(715, 2), float32]) -> (Tensor[(11, 13, 10), int16], Tensor[(715, 2), float32], Tensor[(3, 16, 16), float64]) {
    %534 = cast(%var_1155, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
    %535 = cast(%var_1155, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
    %536 = reshape(%534, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %537 = reshape(%535, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
    %538 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
    %539 = cast(%var_1137, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%538, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %543 = not_equal(%541, %542) /* ty=Tensor[(3, 16, 16), bool] */;
    %544 = cast(%var_1149, dtype="int16") /* ty=Tensor[(3, 16, 16), int16] */;
    %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%543, dtype="int16") /* ty=Tensor[(3, 16, 16), int16] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %548 = right_shift(%546, %547) /* ty=Tensor[(3, 16, 16), int16] */;
    %549 = cast(%548, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
    %550 = tan(%549) /* ty=Tensor[(3, 16, 16), float64] */;
    %551 = cast(%550, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
    %552 = @func_111(%536, %537) /* ty=Tensor[(11, 13, 10), int16] */;
    %553 = cosh(%551) /* ty=Tensor[(3, 16, 16), float64] */;
    (%552, %var_1155, %553)
  };
  %554(%var_1169, %var_1170, %var_1171) /* ty=(Tensor[(11, 13, 10), int16], Tensor[(715, 2), float32], Tensor[(3, 16, 16), float64]) */
}

def @func_848() -> (Tensor[(3, 16, 16), int8],) {
  %555 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
  (%555,)
}

def @func_4269() -> (Tensor[(12, 15, 3), int32], Tensor[(12, 15, 3), float64]) {
  %565 = fn () -> (Tensor[(12, 15, 3), int32], Tensor[(12, 15, 3), float64]) {
    %556 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 3), float32] */;
    %557 = cos(%556) /* ty=Tensor[(12, 15, 3), float32] */;
    %558 = cast(meta[relay.Constant][27] /* ty=Tensor[(12, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(12, 15, 3), int32] */;
    %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%557, dtype="int32") /* ty=Tensor[(12, 15, 3), int32] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %562 = cast(%557, dtype="float64") /* ty=Tensor[(12, 15, 3), float64] */;
    %563 = right_shift(%560, %561) /* ty=Tensor[(12, 15, 3), int32] */;
    %564 = atan(%562) /* ty=Tensor[(12, 15, 3), float64] */;
    (%563, %564)
  };
  %565() /* ty=(Tensor[(12, 15, 3), int32], Tensor[(12, 15, 3), float64]) */
}

def @func_850() -> (Tensor[(3, 16, 16), int8],) {
  @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */
}

def @func_2280(%var_2278: Tensor[(9, 6, 15), int16], %var_2279: Tensor[(11, 130), float32]) -> (Tensor[(9, 6, 15), bool], Tensor[(1430), bool], Tensor[(11, 130), float32], Tensor[(1430), float32]) {
  %579 = fn (%var_2254: Tensor[(9, 6, 15), int16], %var_2260: Tensor[(11, 130), float32]) -> (Tensor[(9, 6, 15), bool], Tensor[(1430), bool], Tensor[(11, 130), float32], Tensor[(1430), float32]) {
    %566 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
    %567 = %566.1;
    %568 = cast(%var_2254, dtype="bool") /* ty=Tensor[(9, 6, 15), bool] */;
    %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(%567, dtype="bool") /* ty=Tensor[(9, 6, 15), bool] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %572 = cast(%var_2260, dtype="float32") /* ty=Tensor[(11, 130), float32] */;
    %573 = reshape(%572, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %574 = @func_1944(%573) /* ty=(Tensor[(1430), float32], Tensor[(1430), bool]) */;
    %575 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
    %576 = less_equal(%570, %571) /* ty=Tensor[(9, 6, 15), bool] */;
    %577 = %574.1;
    %578 = %575.0;
    (%576, %577, %var_2260, %578)
  };
  %579(%var_2278, %var_2279) /* ty=(Tensor[(9, 6, 15), bool], Tensor[(1430), bool], Tensor[(11, 130), float32], Tensor[(1430), float32]) */
}

def @func_2099() -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) {
  @func_2097() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) */
}

def @func_2599(%var_2597: Tensor[(315), float32], %var_2598: Tensor[(1430), float32]) -> (Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) {
  %595 = fn (%var_2582: Tensor[(315), float32], %var_2584: Tensor[(1430), float32]) -> (Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) {
    %580 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
    %581 = cast(%var_2582, dtype="float32") /* ty=Tensor[(315), float32] */;
    %582 = cast(meta[relay.Constant][28] /* ty=Tensor[(56), float64] */, dtype="float64") /* ty=Tensor[(56), float64] */;
    %583 = cast(%var_2584, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %584 = reshape(%581, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
    %585 = reshape(%582, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %586 = reshape(%583, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %587 = @func_433(%584, %585, %586) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %588 = %587.4;
    %589 = cast(%588, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %590 = shape_of(%var_2584, dtype="int32") /* ty=Tensor[(1), int32] */;
    %591 = cast(%var_2584, dtype="bool") /* ty=Tensor[(1430), bool] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?), bool] */;
    %593 = %580.0;
    %594 = less_equal(%591, %592) /* ty=Tensor[(1430), bool] */;
    (%593, %var_2582, meta[relay.Constant][28] /* ty=Tensor[(56), float64] */, %594)
  };
  %595(%var_2597, %var_2598) /* ty=(Tensor[(9, 6, 15), int16], Tensor[(315), float32], Tensor[(56), float64], Tensor[(1430), bool]) */
}

def @func_3394() -> (Tensor[(1430), float32],) {
  @func_3392() /* ty=(Tensor[(1430), float32],) */
}

def @func_1883() -> (Tensor[(1430), float32], Tensor[(1430), float64]) {
  %599 = fn () -> (Tensor[(1430), float32], Tensor[(1430), float64]) {
    %596 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
    %597 = %596.0;
    %598 = @func_1621() /* ty=Tensor[(1430), float64] */;
    (%597, %598)
  };
  %599() /* ty=(Tensor[(1430), float32], Tensor[(1430), float64]) */
}

def @func_3523(%var_3521: Tensor[(2, 16, 7), int8]) -> (Tensor[(2, 16, 7), int8], Tensor[(9, 6, 15), int16], Tensor[(11, 130), int16], Tensor[(3, 16, 16), float32], Tensor[(1430), float64]) {
  @func_3520(%var_3521) /* ty=(Tensor[(2, 16, 7), int8], Tensor[(9, 6, 15), int16], Tensor[(11, 130), int16], Tensor[(3, 16, 16), float32], Tensor[(1430), float64]) */
}

def @func_1752() -> (Tensor[(1430), float64],) {
  %600 = @func_1621() /* ty=Tensor[(1430), float64] */;
  (%600,)
}

def @func_1238(%var_1237: Tensor[(1430), int16]) -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %611 = fn (%var_1226: Tensor[(1430), int16]) -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
    %601 = cast(%var_1226, dtype="int16") /* ty=Tensor[(1430), int16] */;
    %602 = reshape(%601, newshape=[143, 10]) /* ty=Tensor[(143, 10), int16] */;
    %603 = @func_1115(%602) /* ty=(Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) */;
    %604 = cast(meta[relay.Constant][29] /* ty=Tensor[(1430), int16] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %605 = shape_of(%var_1226, dtype="int32") /* ty=Tensor[(1), int32] */;
    %606 = cast(%var_1226, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?), float32] */;
    %608 = @func_772() /* ty=Tensor[(3, 16, 16), int8] */;
    %609 = %603.1;
    %610 = floor_mod(%606, %607) /* ty=Tensor[(1430), float32] */;
    (%608, %609, %610)
  };
  %611(%var_1237) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */
}

def @func_2694() -> Tensor[(1430), float64] {
  %612 = fn () -> Tensor[(1430), float64] {
    @func_1621() /* ty=Tensor[(1430), float64] */
  };
  %612() /* ty=Tensor[(1430), float64] */
}

def @func_2052() -> (Tensor[(9, 6, 15), int16], Tensor[(3, 16, 16), int8]) {
  @func_2050() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(3, 16, 16), int8]) */
}

def @func_3759() -> (Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), uint32]) {
  %613 = @func_766() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(3, 16, 16), uint32]) */;
  %614 = @func_2949() /* ty=Tensor[(3, 16, 16), bool] */;
  %615 = %613.3;
  (%614, %615)
}

def @func_2929() -> (Tensor[(1430), int8],) {
  @func_2927() /* ty=(Tensor[(1430), int8],) */
}

def @func_2927() -> (Tensor[(1430), int8],) {
  %616 = @func_1752() /* ty=(Tensor[(1430), float64],) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(1430), float64] */;
  %619 = acos(%618) /* ty=Tensor[(1430), float64] */;
  %620 = cast(%619, dtype="int8") /* ty=Tensor[(1430), int8] */;
  %621 = shape_of(%617, dtype="int32") /* ty=Tensor[(1), int32] */;
  %622 = cast(%617, dtype="int8") /* ty=Tensor[(1430), int8] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?), int8] */;
  %624 = maximum(%622, %623) /* ty=Tensor[(1430), int8] */;
  (%624,)
}

def @func_3458() -> (Tensor[(3, 16, 16), bool],) {
  @func_3456() /* ty=(Tensor[(3, 16, 16), bool],) */
}

def @func_3791() -> Tensor[(3, 16, 16), bool] {
  @func_2086() /* ty=Tensor[(3, 16, 16), bool] */
}

def @func_2876() -> (Tensor[(3, 16, 16), bool],) {
  %625 = @func_2086() /* ty=Tensor[(3, 16, 16), bool] */;
  (%625,)
}

def @func_3761() -> (Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), uint32]) {
  @func_3759() /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), uint32]) */
}

def @func_933(%var_931: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) {
  @func_930(%var_931) /* ty=(Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) */
}

def @func_78(%var_77: Tensor[(4, 7, 2), float64]) -> (Tensor[(4, 7, 2), int8],) {
  %638 = fn (%var_55: Tensor[(4, 7, 2), float64]) -> (Tensor[(4, 7, 2), int8],) {
    %626 = cast(%var_55, dtype="float64") /* ty=Tensor[(4, 7, 2), float64] */;
    %627 = log(%626) /* ty=Tensor[(4, 7, 2), float64] */;
    %628 = cast(%627, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
    %629 = shape_of(%var_55, dtype="int32") /* ty=Tensor[(3), int32] */;
    %630 = cast(%var_55, dtype="uint32") /* ty=Tensor[(4, 7, 2), uint32] */;
    %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %632 = multiply(%630, %631) /* ty=Tensor[(4, 7, 2), uint32] */;
    %633 = cast(%627, dtype="int8") /* ty=Tensor[(4, 7, 2), int8] */;
    %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%632, dtype="int8") /* ty=Tensor[(4, 7, 2), int8] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %637 = logical_xor(%635, %636) /* ty=Tensor[(4, 7, 2), int8] */;
    (%637,)
  };
  %638(%var_77) /* ty=(Tensor[(4, 7, 2), int8],) */
}

def @func_2536(%var_2498: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), uint16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), float32]) {
  %639 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
  %640 = %639.0;
  %641 = cast(%var_2498, dtype="uint16") /* ty=Tensor[(3, 16, 16), uint16] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="uint16") /* ty=Tensor[(3, 16, 16), uint16] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %645 = cast(meta[relay.Constant][30] /* ty=Tensor[(143, 10), float32] */, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %646 = cast(meta[relay.Constant][30] /* ty=Tensor[(143, 10), float32] */, dtype="float32") /* ty=Tensor[(143, 10), float32] */;
  %647 = reshape(%645, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %648 = reshape(%646, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %649 = subtract(%643, %644) /* ty=Tensor[(3, 16, 16), uint16] */;
  %650 = @func_111(%647, %648) /* ty=Tensor[(11, 13, 10), int16] */;
  (%649, %650, meta[relay.Constant][30] /* ty=Tensor[(143, 10), float32] */)
}

def @func_1781(%var_1779: Tensor[(11, 8, 2), float64]) -> Tensor[(11, 8, 2), float64] {
  @func_1778(%var_1779) /* ty=Tensor[(11, 8, 2), float64] */
}

def @func_2238() -> (Tensor[(3, 16, 16), int8],) {
  %652 = fn () -> (Tensor[(3, 16, 16), int8],) {
    %651 = @func_1829() /* ty=Tensor[(3, 16, 16), int8] */;
    (%651,)
  };
  %652() /* ty=(Tensor[(3, 16, 16), int8],) */
}

def @func_3044(%var_3043: Tensor[(35, 9), float32]) -> (Tensor[(35, 9), float32], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(1, 56), float64], Tensor[(11, 13, 10), int64], Tensor[(11, 13, 10), float32]) {
  %687 = fn (%var_3001: Tensor[(35, 9), float32]) -> (Tensor[(35, 9), float32], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(1, 56), float64], Tensor[(11, 13, 10), int64], Tensor[(11, 13, 10), float32]) {
    %653 = cast(meta[relay.Constant][31] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %654 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 56), float64] */, dtype="float64") /* ty=Tensor[(1, 56), float64] */;
    %655 = cast(meta[relay.Constant][31] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %656 = cast(meta[relay.Constant][31] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %657 = reshape(%653, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
    %658 = reshape(%654, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %659 = reshape(%655, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
    %660 = reshape(%656, newshape=[10, 8, 8]) /* ty=Tensor[(10, 8, 8), float32] */;
    %661 = @func_1392(%657, %658, %659, %660) /* ty=(Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(10, 8, 8), float32], Tensor[(315), float32], Tensor[(1430), float32], Tensor[(10, 8, 8), uint64]) */;
    %662 = @func_2097() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16]) */;
    %663 = %662.1;
    %664 = cast(%663, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %665 = sin(%664) /* ty=Tensor[(11, 13, 10), float32] */;
    %666 = cast(%665, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
    %667 = cast(%665, dtype="int16") /* ty=Tensor[(11, 13, 10), int16] */;
    %668 = cast(%var_3001, dtype="float32") /* ty=Tensor[(35, 9), float32] */;
    %669 = cast(%var_3001, dtype="float32") /* ty=Tensor[(35, 9), float32] */;
    %670 = reshape(%666, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
    %671 = reshape(%667, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), int16] */;
    %672 = reshape(%668, newshape=[315]) /* ty=Tensor[(315), float32] */;
    %673 = reshape(%669, newshape=[315]) /* ty=Tensor[(315), float32] */;
    %674 = @func_648(%670, %671, %672, %673) /* ty=(Tensor[(11, 13, 10), float64], Tensor[(11, 13, 10), bool], Tensor[(11, 13, 10), int16], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(11, 13, 10), int16], Tensor[(1430), float32], Tensor[(315), bool]) */;
    %675 = %674.0;
    %676 = cast(%675, dtype="int64") /* ty=Tensor[(11, 13, 10), int64] */;
    %677 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%665, dtype="int64") /* ty=Tensor[(11, 13, 10), int64] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %680 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 13, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %681 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%665, dtype="float32") /* ty=Tensor[(11, 13, 10), float32] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %684 = %661.2;
    %685 = add(%678, %679) /* ty=Tensor[(11, 13, 10), int64] */;
    %686 = mod(%682, %683) /* ty=Tensor[(11, 13, 10), float32] */;
    (%var_3001, %684, meta[relay.Constant][31] /* ty=Tensor[(640), float32] */, meta[relay.Constant][32] /* ty=Tensor[(1, 56), float64] */, %685, %686)
  };
  %687(%var_3043) /* ty=(Tensor[(35, 9), float32], Tensor[(10, 8, 8), float32], Tensor[(640), float32], Tensor[(1, 56), float64], Tensor[(11, 13, 10), int64], Tensor[(11, 13, 10), float32]) */
}

def @func_2539(%var_2537: Tensor[(3, 16, 16), int8]) -> (Tensor[(3, 16, 16), uint16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), float32]) {
  @func_2536(%var_2537) /* ty=(Tensor[(3, 16, 16), uint16], Tensor[(11, 13, 10), int16], Tensor[(143, 10), float32]) */
}

def @func_2949() -> Tensor[(3, 16, 16), bool] {
  @func_2086() /* ty=Tensor[(3, 16, 16), bool] */
}

def @func_2859() -> (Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) {
  %688 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %689 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %690 = %688.0;
  %691 = %689.0;
  (%690, %691)
}

def @func_868(%var_866: Tensor[(9, 4, 1), float32]) -> (Tensor[(9, 4, 5), bool],) {
  @func_865(%var_866) /* ty=(Tensor[(9, 4, 5), bool],) */
}

def @func_3159(%var_3157: Tensor[(56), float64], %var_3158: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), uint32], Tensor[(56), float64], Tensor[(4, 7, 2), float64], Tensor[(1430), float32], Tensor[(1430), float32]) {
  @func_3155(%var_3157, %var_3158) /* ty=(Tensor[(3, 16, 16), uint32], Tensor[(56), float64], Tensor[(4, 7, 2), float64], Tensor[(1430), float32], Tensor[(1430), float32]) */
}

def @func_3178() -> (Tensor[(1430), float32], Tensor[(1430), float32]) {
  %701 = fn () -> (Tensor[(1430), float32], Tensor[(1430), float32]) {
    %692 = @func_501() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
    %693 = @func_2859() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) */;
    %694 = %693.1;
    %695 = cast(meta[relay.Constant][34] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(1), int32] */;
    %697 = cast(%694, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?), float32] */;
    %699 = %692.2;
    %700 = multiply(%697, %698) /* ty=Tensor[(1430), float32] */;
    (%699, %700)
  };
  %701() /* ty=(Tensor[(1430), float32], Tensor[(1430), float32]) */
}

def @func_3217(%var_3216: Tensor[(10, 2, 8), float32]) -> Tensor[(10, 2, 8), float32] {
  %703 = fn (%var_3210: Tensor[(10, 2, 8), float32]) -> Tensor[(10, 2, 8), float32] {
    %702 = cast(%var_3210, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
    atanh(%702) /* ty=Tensor[(10, 2, 8), float32] */
  };
  %703(%var_3216) /* ty=Tensor[(10, 2, 8), float32] */
}

def @func_501() -> (Tensor[(3, 16, 16), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) {
  %704 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %705 = asinh(%704) /* ty=Tensor[(3, 16, 16), float32] */;
  %706 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 16, 16), float32] */, dtype="int8") /* ty=Tensor[(3, 16, 16), int8] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="int8") /* ty=Tensor[(3, 16, 16), int8] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %710 = cast(meta[relay.Constant][36] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %711 = cast(meta[relay.Constant][36] /* ty=Tensor[(1430), float32] */, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %712 = reshape(%710, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %713 = reshape(%711, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %714 = left_shift(%708, %709) /* ty=Tensor[(3, 16, 16), int8] */;
  %715 = @func_111(%712, %713) /* ty=Tensor[(11, 13, 10), int16] */;
  (%714, %715, meta[relay.Constant][36] /* ty=Tensor[(1430), float32] */)
}

def @func_2086() -> Tensor[(3, 16, 16), bool] {
  %716 = @func_1680() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %716.0
}

def @func_3290(%var_3222: Tensor[(715, 2), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(11, 13, 10), int16], Tensor[(9, 6, 15), int16], Tensor[(1430), float32], Tensor[(270), float32], Tensor[(1430), float64], Tensor[(715, 2), bool]) {
  %717 = cast(%var_3222, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
  %718 = cast(%var_3222, dtype="float32") /* ty=Tensor[(715, 2), float32] */;
  %719 = reshape(%717, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %720 = reshape(%718, newshape=[11, 13, 10]) /* ty=Tensor[(11, 13, 10), float32] */;
  %721 = @func_1990() /* ty=(Tensor[(9, 6, 15), int16],) */;
  %722 = cast(meta[relay.Constant][37] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %723 = @func_2086() /* ty=Tensor[(3, 16, 16), bool] */;
  %724 = cast(%723, dtype="int8") /* ty=Tensor[(3, 16, 16), int8] */;
  %725 = reshape(%722, newshape=[3, 6, 15]) /* ty=Tensor[(3, 6, 15), float32] */;
  %726 = reshape(%724, newshape=[768]) /* ty=Tensor[(768), int8] */;
  %727 = @func_1500(%725, %726) /* ty=(Tensor[(3, 6, 15), float32], Tensor[(56), float64], Tensor[(768), int8], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %728 = cast(%var_3222, dtype="float64") /* ty=Tensor[(715, 2), float64] */;
  %729 = sigmoid(%728) /* ty=Tensor[(715, 2), float64] */;
  %730 = cast(%var_3222, dtype="bool") /* ty=Tensor[(715, 2), bool] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(2), int32] */;
  %732 = cast(%729, dtype="bool") /* ty=Tensor[(715, 2), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %734 = @func_111(%719, %720) /* ty=Tensor[(11, 13, 10), int16] */;
  %735 = %721.0;
  %736 = %727.4;
  %737 = @func_2693() /* ty=Tensor[(1430), float64] */;
  %738 = less(%732, %733) /* ty=Tensor[(715, 2), bool] */;
  (%723, %734, %735, %736, meta[relay.Constant][37] /* ty=Tensor[(270), float32] */, %737, %738)
}

def @func_1118(%var_1116: Tensor[(143, 10), int16]) -> (Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) {
  @func_1115(%var_1116) /* ty=(Tensor[(3, 16, 16), float32], Tensor[(11, 13, 10), int16], Tensor[(143, 10), int16], Tensor[(315), float32], Tensor[(1430), float32]) */
}

def @func_2878() -> (Tensor[(3, 16, 16), bool],) {
  @func_2876() /* ty=(Tensor[(3, 16, 16), bool],) */
}

def @func_2329(%var_2328: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(1430), float64]) {
  %751 = fn (%var_2297: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(1430), float64]) {
    %739 = @func_1516() /* ty=(Tensor[(3, 16, 16), int8],) */;
    %740 = cast(%var_2297, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %741 = reshape(%740, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
    %742 = @func_1944(%741) /* ty=(Tensor[(1430), float32], Tensor[(1430), bool]) */;
    %743 = @func_1882() /* ty=(Tensor[(1430), float32], Tensor[(1430), float64]) */;
    %744 = %743.0;
    %745 = cast(%744, dtype="float32") /* ty=Tensor[(1430), float32] */;
    %746 = atanh(%745) /* ty=Tensor[(1430), float32] */;
    %747 = cast(%746, dtype="float64") /* ty=Tensor[(1430), float64] */;
    %748 = %739.0;
    %749 = %742.0;
    %750 = asin(%747) /* ty=Tensor[(1430), float64] */;
    (%748, %749, %var_2297, %750)
  };
  %751(%var_2328) /* ty=(Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(1430), float32], Tensor[(1430), float64]) */
}

def @func_2461(%var_2459: Tensor[(20, 32), float32]) -> (Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(315), float32], Tensor[(20, 32), float32], Tensor[(56), float64]) {
  @func_2458(%var_2459) /* ty=(Tensor[(1430), float32], Tensor[(11, 13, 10), int16], Tensor[(315), float32], Tensor[(20, 32), float32], Tensor[(56), float64]) */
}

def @func_3335() -> (Tensor[(3, 16, 16), bool],) {
  %754 = fn () -> (Tensor[(3, 16, 16), bool],) {
    %752 = @func_2876() /* ty=(Tensor[(3, 16, 16), bool],) */;
    %753 = %752.0;
    (%753,)
  };
  %754() /* ty=(Tensor[(3, 16, 16), bool],) */
}

def @func_3293(%var_3291: Tensor[(715, 2), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(11, 13, 10), int16], Tensor[(9, 6, 15), int16], Tensor[(1430), float32], Tensor[(270), float32], Tensor[(1430), float64], Tensor[(715, 2), bool]) {
  @func_3290(%var_3291) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(11, 13, 10), int16], Tensor[(9, 6, 15), int16], Tensor[(1430), float32], Tensor[(270), float32], Tensor[(1430), float64], Tensor[(715, 2), bool]) */
}

def @func_3123(%var_3122: Tensor[(8, 28), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) {
  %775 = fn (%var_3115: Tensor[(8, 28), float32]) -> (Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) {
    %755 = @func_2876() /* ty=(Tensor[(3, 16, 16), bool],) */;
    %756 = %755.0;
    %757 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
    %759 = cast(%756, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %761 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 28), float32] */, dtype="float32") /* ty=Tensor[(8, 28), float32] */;
    %762 = reshape(%761, newshape=[14, 16, 1]) /* ty=Tensor[(14, 16, 1), float32] */;
    %763 = @func_2770(%762) /* ty=(Tensor[(14, 16, 1), float32], Tensor[(3, 16, 16), int8]) */;
    %764 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
    %765 = @func_1516() /* ty=(Tensor[(3, 16, 16), int8],) */;
    %766 = cast(%var_3115, dtype="bool") /* ty=Tensor[(8, 28), bool] */;
    %767 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(8, 28), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %768 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 28), float32] */, dtype="bool") /* ty=Tensor[(8, 28), bool] */;
    %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %770 = logical_or(%759, %760) /* ty=Tensor[(3, 16, 16), bool] */;
    %771 = %763.1;
    %772 = %764.0;
    %773 = %765.0;
    %774 = greater_equal(%768, %769) /* ty=Tensor[(8, 28), bool] */;
    (%770, %771, %772, %773, %774)
  };
  %775(%var_3122) /* ty=(Tensor[(3, 16, 16), bool], Tensor[(3, 16, 16), int8], Tensor[(1430), float32], Tensor[(3, 16, 16), int8], Tensor[(8, 28), bool]) */
}

def @func_3392() -> (Tensor[(1430), float32],) {
  %776 = @func_1183() /* ty=(Tensor[(1430), float32],) */;
  %777 = %776.0;
  (%777,)
}

def @func_1991() -> (Tensor[(9, 6, 15), int16],) {
  %780 = fn () -> (Tensor[(9, 6, 15), int16],) {
    %778 = @func_1808() /* ty=(Tensor[(3, 16, 16), int8], Tensor[(9, 6, 15), int16]) */;
    %779 = %778.1;
    (%779,)
  };
  %780() /* ty=(Tensor[(9, 6, 15), int16],) */
}

def @func_4112() -> Tensor[(1430), float64] {
  %782 = fn () -> Tensor[(1430), float64] {
    %781 = @func_1882() /* ty=(Tensor[(1430), float32], Tensor[(1430), float64]) */;
    %781.1
  };
  %782() /* ty=Tensor[(1430), float64] */
}

def @func_2861() -> (Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) {
  @func_2859() /* ty=(Tensor[(9, 6, 15), int16], Tensor[(1430), float32]) */
}

def @func_3793() -> Tensor[(3, 16, 16), bool] {
  @func_3791() /* ty=Tensor[(3, 16, 16), bool] */
}

def @func_930(%var_927: Tensor[(1430), float32]) -> (Tensor[(3, 16, 16), float64], Tensor[(4, 7, 2), int8], Tensor[(315), float32], Tensor[(28, 2), float64], Tensor[(1430), float32]) {
  %783 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %784 = %783.0;
  %785 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 16, 16), int8] */, dtype="int64") /* ty=Tensor[(3, 16, 16), int64] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="int64") /* ty=Tensor[(3, 16, 16), int64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %789 = logical_xor(%787, %788) /* ty=Tensor[(3, 16, 16), int64] */;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %791 = cast(meta[relay.Constant][41] /* ty=Tensor[(315), float32] */, dtype="float32") /* ty=Tensor[(315), float32] */;
  %792 = cast(meta[relay.Constant][42] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
  %793 = cast(%var_927, dtype="float32") /* ty=Tensor[(1430), float32] */;
  %794 = reshape(%791, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float32] */;
  %795 = reshape(%792, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %796 = reshape(%793, newshape=[1430]) /* ty=Tensor[(1430), float32] */;
  %797 = @func_433(%794, %795, %796) /* ty=(Tensor[(3, 7, 15), float32], Tensor[(4, 7, 2), int8], Tensor[(56), float64], Tensor[(11, 13, 10), int16], Tensor[(1430), float32]) */;
  %798 = asin(%790) /* ty=Tensor[(3, 16, 16), float64] */;
  %799 = %797.1;
  (%798, %799, meta[relay.Constant][41] /* ty=Tensor[(315), float32] */, meta[relay.Constant][42] /* ty=Tensor[(28, 2), float64] */, %var_927)
}

def @func_1680() -> (Tensor[(3, 16, 16), bool],) {
  %800 = @func_848() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %801 = %800.0;
  %802 = cast(%801, dtype="float32") /* ty=Tensor[(3, 16, 16), float32] */;
  %803 = log2(%802) /* ty=Tensor[(3, 16, 16), float32] */;
  %804 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 16, 16), float32] */, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = logical_and(%806, %807) /* ty=Tensor[(3, 16, 16), bool] */;
  (%808,)
}

def @func_3456() -> (Tensor[(3, 16, 16), bool],) {
  %809 = @func_3334() /* ty=(Tensor[(3, 16, 16), bool],) */;
  %810 = %809.0;
  (%810,)
}

def @func_3488() -> (Tensor[(3, 16, 16), int8],) {
  %811 = @func_2237() /* ty=(Tensor[(3, 16, 16), int8],) */;
  %812 = %811.0;
  (%812,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen125/build/output.py", line 1799, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:51:27] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

