==========mod==========
#[version = "0.0.5"]
def @func_9791() -> (Tensor[(8, 1, 5), float32],) {
  %0 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %2 = cosh(%1) /* ty=Tensor[(8, 1, 5), float32] */;
  (%2,)
}

def @func_8684() -> (Tensor[(600), float32], Tensor[(8, 15, 5), uint32], Tensor[(8, 1, 5), float32], Tensor[(2016), float64]) {
  %3 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %4 = %3.0;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %6 = reshape(%5, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), float32] */;
  %7 = @func_4016(%6) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) */;
  %8 = %7.0;
  %9 = cast(%4, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
  %10 = cast(%8, dtype="uint32") /* ty=Tensor[(8, 15, 5), uint32] */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %12 = reshape(%11, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float64] */;
  %13 = @func_3508(%12) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(16, 9, 14), int64]) */;
  %14 = bitwise_or(%9, %10) /* ty=Tensor[(8, 15, 5), uint32] */;
  %15 = %13.0;
  (meta[relay.Constant][0] /* ty=Tensor[(600), float32] */, %14, %15, meta[relay.Constant][1] /* ty=Tensor[(2016), float64] */)
}

def @func_5997() -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], bool, Tensor[(560), bool], Tensor[(504), int64]) {
  %16 = @func_5577() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) */;
  %17 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %19 = cast(meta[relay.Constant][3] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %20 = reshape(%17, newshape=[]) /* ty=bool */;
  %21 = reshape(%18, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), bool] */;
  %22 = reshape(%19, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %23 = @func_1241(%20, %21, %22) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) */;
  %24 = %16.0;
  %25 = %23.0;
  (%24, %25, False /* ty=bool */, meta[relay.Constant][2] /* ty=Tensor[(560), bool] */, meta[relay.Constant][3] /* ty=Tensor[(504), int64] */)
}

def @func_9076(%var_9054: Tensor[(8, 13, 5), float32]) -> (Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) {
  %26 = @func_4778() /* ty=Tensor[(8, 1, 5), float32] */;
  %27 = cast(%26, dtype="int32") /* ty=Tensor[(8, 1, 5), int32] */;
  %28 = cast(%var_9054, dtype="int32") /* ty=Tensor[(8, 13, 5), int32] */;
  %29 = logical_xor(%27, %28) /* ty=Tensor[(8, 13, 5), int32] */;
  %30 = cast(%26, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %31 = cast(%29, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %32 = @func_7065() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %33 = @func_6661() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %34 = not_equal(%30, %31) /* ty=Tensor[(8, 13, 5), bool] */;
  %35 = %32.0;
  %36 = %33.0;
  (%34, %35, %36)
}

def @func_7100() -> (Tensor[(8, 1, 5), float32],) {
  %37 = @func_5949() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %38 = %37.0;
  (%38,)
}

def @func_9594() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64]) {
  %39 = @func_6304() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) */;
  %40 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %41 = %39.0;
  %42 = %40.0;
  (%41, %42)
}

def @func_1716(%var_1710: Tensor[(9, 14, 9), float32]) -> (Tensor[(9, 14, 9), uint64],) {
  %43 = cast(%var_1710, dtype="float32") /* ty=Tensor[(9, 14, 9), float32] */;
  %44 = asin(%43) /* ty=Tensor[(9, 14, 9), float32] */;
  %45 = cast(%44, dtype="uint64") /* ty=Tensor[(9, 14, 9), uint64] */;
  %46 = shape_of(%var_1710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_1710, dtype="uint64") /* ty=Tensor[(9, 14, 9), uint64] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %49 = logical_xor(%47, %48) /* ty=Tensor[(9, 14, 9), uint64] */;
  (%49,)
}

def @func_10572() -> (uint16,) {
  %50 = @func_10524() /* ty=uint16 */;
  (%50,)
}

def @func_4751() -> Tensor[(8, 1, 5), float32] {
  %51 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %52 = %51.1;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  asinh(%53) /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_5074(%var_5025: Tensor[(320), float32], %var_5035: uint16) -> (Tensor[(1152), uint16], Tensor[(320), float32], Tensor[(6, 16, 12), uint16], uint16, Tensor[(504), int64], Tensor[(8, 8, 5), uint32], Tensor[(504), int64], Tensor[(560), bool], Tensor[(8, 8, 5), float32], Tensor[(8, 1, 5), float32]) {
  %54 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %55 = cast(%var_5035, dtype="uint16") /* ty=uint16 */;
  %56 = %54.2;
  %57 = cast(%56, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %59 = reshape(%55, newshape=[]) /* ty=uint16 */;
  %60 = reshape(%57, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
  %61 = reshape(%58, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %62 = @func_2135(%59, %60, %61) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %63 = cast(%var_5025, dtype="float32") /* ty=Tensor[(320), float32] */;
  %64 = reshape(%63, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %65 = @func_3990(%64) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %66 = %65.0;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %68 = sigmoid(%67) /* ty=Tensor[(8, 8, 5), float32] */;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %70 = reshape(%69, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %71 = @func_3990(%70) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %72 = cast(%var_5035, dtype="bool") /* ty=bool */;
  %73 = cast(meta[relay.Constant][5] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %75 = reshape(%72, newshape=[]) /* ty=bool */;
  %76 = reshape(%73, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), bool] */;
  %77 = reshape(%74, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %78 = @func_1241(%75, %76, %77) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) */;
  %79 = cast(%68, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %80 = %62.0;
  %81 = %71.0;
  %82 = %78.1;
  %83 = tan(%79) /* ty=Tensor[(8, 8, 5), float32] */;
  %84 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  (%56, %var_5025, %80, %var_5035, meta[relay.Constant][4] /* ty=Tensor[(504), int64] */, %81, %82, meta[relay.Constant][5] /* ty=Tensor[(560), bool] */, %83, %84)
}

def @func_5577() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) {
  %85 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %87 = reshape(%86, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float32] */;
  %88 = %85.0;
  %89 = @func_2378(%87) /* ty=Tensor[(8, 4, 16), float32] */;
  (%88, %89, meta[relay.Constant][6] /* ty=Tensor[(128), float32] */)
}

def @func_9232(%var_9213: Tensor[(8, 2, 5), float64]) -> (Tensor[(8, 2, 5), int64],) {
  %90 = @func_8797() /* ty=Tensor[(8, 1, 5), float64] */;
  %91 = cast(%90, dtype="int64") /* ty=Tensor[(8, 1, 5), int64] */;
  %92 = cast(%var_9213, dtype="int64") /* ty=Tensor[(8, 2, 5), int64] */;
  %93 = bitwise_or(%91, %92) /* ty=Tensor[(8, 2, 5), int64] */;
  (%93,)
}

def @func_2900(%var_2886: uint16) -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) {
  %94 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %95 = cast(%var_2886, dtype="uint16") /* ty=uint16 */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %97 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %98 = reshape(%95, newshape=[]) /* ty=uint16 */;
  %99 = reshape(%96, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
  %100 = reshape(%97, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %101 = @func_2135(%98, %99, %100) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %102 = cast(%var_2886, dtype="uint16") /* ty=uint16 */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %104 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %105 = reshape(%102, newshape=[]) /* ty=uint16 */;
  %106 = reshape(%103, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
  %107 = reshape(%104, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %108 = @func_2135(%105, %106, %107) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %109 = %94.0;
  %110 = %101.3;
  %111 = %108.1;
  (%109, %110, %var_2886, meta[relay.Constant][7] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][8] /* ty=Tensor[(504), int64] */, %111)
}

def @func_10731() -> Tensor[(8, 1, 5), float32] {
  @func_5545() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_3917(%var_3897: Tensor[(7, 3, 5), uint64]) -> (Tensor[(7, 3, 5), float32],) {
  %112 = cast(%var_3897, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
  %113 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 3, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 3, 5), uint64] */, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %116 = logical_xor(%114, %115) /* ty=Tensor[(7, 3, 5), uint64] */;
  %117 = cast(%116, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
  %118 = shape_of(%var_3897, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_3897, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %121 = add(%119, %120) /* ty=Tensor[(7, 3, 5), uint64] */;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(7, 3, 5), float32] */;
  %123 = log2(%122) /* ty=Tensor[(7, 3, 5), float32] */;
  (%123,)
}

def @func_10623() -> (Tensor[(8, ?, 5), float64],) {
  %124 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %125 = %124.0;
  (%125,)
}

def @func_3805(%var_3800: Tensor[(7, 14, 14), float64]) -> (Tensor[(7, 14, 14), float64],) {
  %126 = cast(%var_3800, dtype="float64") /* ty=Tensor[(7, 14, 14), float64] */;
  %127 = log10(%126) /* ty=Tensor[(7, 14, 14), float64] */;
  (%127,)
}

def @func_2442(%var_2408: Tensor[(1134), float32]) -> (Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) {
  %128 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %131 = atan(%130) /* ty=Tensor[(8, 1, 5), float64] */;
  %132 = cast(%131, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %133 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%129, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = greater(%134, %135) /* ty=Tensor[(8, ?, 5), bool] */;
  %137 = cast(%131, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="float64") /* ty=Tensor[(8, ?, 5), float64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %141 = cast(%var_2408, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %142 = reshape(%141, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float32] */;
  %143 = @func_1716(%142) /* ty=(Tensor[(9, 14, 9), uint64],) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(9, 14, 9), float64] */;
  %146 = shape_of(%var_2408, dtype="int32") /* ty=Tensor[(1), int32] */;
  %147 = cast(%var_2408, dtype="float64") /* ty=Tensor[(1134), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?), float64] */;
  %149 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %150 = floor_divide(%139, %140) /* ty=Tensor[(8, ?, 5), float64] */;
  %151 = mod(%147, %148) /* ty=Tensor[(1134), float64] */;
  %152 = %149.0;
  (%150, %151, %152)
}

def @func_3405() -> Tensor[(504), int64] {
  %153 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %153.3
}

def @func_7216() -> (Tensor[(6, 16, 12), uint16], Tensor[(8, 1, 5), float32]) {
  %154 = @func_6059() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(6, 16, 12), uint16], Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], uint16) */;
  %155 = %154.1;
  %156 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  (%155, %156)
}

def @func_9649() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %157 = @func_5506() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) */;
  %158 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  %159 = %157.0;
  (%158, %159)
}

def @func_3778(%var_3776: Tensor[(1134), float32]) -> (Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) {
  %160 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %161 = %160.1;
  %162 = cast(%161, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 9, 5), float32] */, dtype="uint64") /* ty=Tensor[(8, 9, 5), uint64] */;
  %164 = cast(%var_3776, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %165 = reshape(%164, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %166 = @func_2442(%165) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %167 = left_shift(%162, %163) /* ty=Tensor[(8, 9, 5), uint64] */;
  %168 = %166.1;
  (%167, %168, %var_3776)
}

def @func_7447() -> (uint16, Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 8, 5), uint32]) {
  %169 = @func_6168() /* ty=(uint16,) */;
  %170 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %171 = cast(meta[relay.Constant][11] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %172 = reshape(%171, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %173 = @func_3990(%172) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %175 = reshape(%174, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %176 = @func_3990(%175) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %177 = %169.0;
  %178 = %170.3;
  %179 = %173.0;
  %180 = %176.0;
  (%177, %178, %179, meta[relay.Constant][11] /* ty=Tensor[(320), float32] */, %180)
}

def @func_10036(%var_10015: Tensor[(560), float32]) -> (Tensor[(8, 3, 5), bool], Tensor[(8, 14, 5), int8], Tensor[(560), float32], Tensor[(8, 1, 5), float32], Tensor[(9, 126), float32]) {
  %181 = cast(%var_10015, dtype="float32") /* ty=Tensor[(560), float32] */;
  %182 = reshape(%181, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), float32] */;
  %183 = @func_6435(%182) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) */;
  %184 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 126), float32] */, dtype="float32") /* ty=Tensor[(9, 126), float32] */;
  %185 = reshape(%184, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %186 = @func_2442(%185) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %187 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
  %188 = %183.1;
  %189 = %186.2;
  (%187, %188, %var_10015, %189, meta[relay.Constant][12] /* ty=Tensor[(9, 126), float32] */)
}

def @func_6362(%var_6349: Tensor[(700, 2), float32], %var_6351: Tensor[(8, 3, 5), float32]) -> (Tensor[(10, 10, 14), float32], Tensor[(700, 2), float32], Tensor[(8, 3, 5), bool], Tensor[(8, 3, 5), float32]) {
  %190 = cast(%var_6349, dtype="float32") /* ty=Tensor[(700, 2), float32] */;
  %191 = reshape(%190, newshape=[1400]) /* ty=Tensor[(1400), float32] */;
  %192 = @func_4941(%191) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) */;
  %193 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %194 = %193.1;
  %195 = cast(%194, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %196 = cast(%var_6351, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
  %197 = cast(%var_6351, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %198 = %192.1;
  %199 = greater(%195, %196) /* ty=Tensor[(8, 3, 5), bool] */;
  %200 = sinh(%197) /* ty=Tensor[(8, 3, 5), float32] */;
  (%198, %var_6349, %199, %200)
}

def @func_5762(%var_5749: Tensor[(8, 1, 5), float32]) -> Tensor[(8, ?, 5), int32] {
  %201 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %202 = %201.5;
  %203 = cast(%var_5749, dtype="int32") /* ty=Tensor[(8, 1, 5), int32] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="int32") /* ty=Tensor[(8, 1, 5), int32] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%205, %206) /* ty=Tensor[(8, ?, 5), int32] */
}

def @func_1420(%var_1414: Tensor[(1, 8, 11), float64], %var_1418: Tensor[(504), int64]) -> (Tensor[(1, 8, 11), float64], Tensor[(14, 6, 6), float32], Tensor[(504), int64]) {
  %207 = cast(%var_1414, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %208 = cast(%var_1418, dtype="int64") /* ty=Tensor[(504), int64] */;
  %209 = cast(%var_1418, dtype="int64") /* ty=Tensor[(504), int64] */;
  %210 = reshape(%208, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %211 = reshape(%209, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %212 = @func_575(%210, %211) /* ty=(Tensor[(14, 6, 6), float32],) */;
  %213 = sinh(%207) /* ty=Tensor[(1, 8, 11), float64] */;
  %214 = %212.0;
  (%213, %214, %var_1418)
}

def @func_4096() -> uint16 {
  %215 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %215.1
}

def @func_6393() -> (Tensor[(10, 10, 14), float32],) {
  %216 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %217 = %216.4;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  %219 = acos(%218) /* ty=Tensor[(10, 10, 14), float32] */;
  (%219,)
}

def @func_3298() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %220 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %221 = %220.0;
  %222 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  (%221, %222)
}

def @func_7601(%var_7557: Tensor[(8, 14, 5), float32]) -> (Tensor[(8, 14, 5), bool], Tensor[(8, ?, 5), int32], Tensor[(10, 10, 14), float32]) {
  %223 = @func_6096() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %224 = %223.0;
  %225 = cast(%224, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %226 = cast(%var_7557, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
  %227 = @func_7501() /* ty=(uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) */;
  %228 = less(%225, %226) /* ty=Tensor[(8, 14, 5), bool] */;
  %229 = %227.1;
  %230 = @func_5199() /* ty=Tensor[(10, 10, 14), float32] */;
  (%228, %229, %230)
}

def @func_4961(%var_4954: Tensor[(8, 3, 5), bool]) -> Tensor[(8, 3, 5), uint64] {
  %231 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
  %232 = cast(%var_4954, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%234, %235) /* ty=Tensor[(8, 3, 5), uint64] */
}

def @func_4650(%var_4595: Tensor[(600), float32], %var_4612: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(600), float32], Tensor[(1134), uint32], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) {
  %236 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %237 = cast(%var_4595, dtype="float32") /* ty=Tensor[(600), float32] */;
  %238 = reshape(%237, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), float32] */;
  %239 = @func_4016(%238) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) */;
  %240 = cast(meta[relay.Constant][13] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %241 = reshape(%240, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %242 = @func_2694(%241) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, 7, 5), bool]) */;
  %243 = %242.1;
  %244 = cast(meta[relay.Constant][13] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(1), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?), float32] */;
  %248 = floor_mod(%246, %247) /* ty=Tensor[(1134), float32] */;
  %249 = cast(%var_4612, dtype="uint32") /* ty=Tensor[(1134), uint32] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(1), int32] */;
  %251 = cast(%248, dtype="uint32") /* ty=Tensor[(1134), uint32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %253 = cast(%248, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %254 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %255 = @func_4501() /* ty=Tensor[(8, 1, 5), float32] */;
  %256 = %236.1;
  %257 = %239.1;
  %258 = left_shift(%251, %252) /* ty=Tensor[(1134), uint32] */;
  %259 = erf(%253) /* ty=Tensor[(1134), float32] */;
  %260 = %254.0;
  (%255, %256, %257, %var_4595, %258, %259, %260)
}

def @func_5173() -> (Tensor[(8, 1, 5), float64],) {
  %261 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %262 = %261.0;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %264 = acos(%263) /* ty=Tensor[(8, 1, 5), float64] */;
  (%264,)
}

def @func_8062(%var_8046: Tensor[(8, 3, 5), bool]) -> (Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), bool], Tensor[(20, 70), float32]) {
  %265 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
  %266 = cast(%var_8046, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = cast(meta[relay.Constant][14] /* ty=Tensor[(20, 70), float32] */, dtype="float32") /* ty=Tensor[(20, 70), float32] */;
  %271 = floor_mod(%268, %269) /* ty=Tensor[(8, 3, 5), float64] */;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %273 = reshape(%270, newshape=[700, 2]) /* ty=Tensor[(700, 2), float32] */;
  %274 = reshape(%272, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
  %275 = @func_6362(%273, %274) /* ty=(Tensor[(10, 10, 14), float32], Tensor[(700, 2), float32], Tensor[(8, 3, 5), bool], Tensor[(8, 3, 5), float32]) */;
  %276 = %275.2;
  (%271, %276, meta[relay.Constant][14] /* ty=Tensor[(20, 70), float32] */)
}

def @func_9168(%var_9121: Tensor[(8, 16, 5), float32]) -> (Tensor[(8, 16, 5), uint64], Tensor[(8, 16, 5), float64]) {
  %277 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %278 = cast(%var_9121, dtype="uint64") /* ty=Tensor[(8, 16, 5), uint64] */;
  %279 = cast(%277, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %280 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
  %281 = cast(%280, dtype="uint16") /* ty=Tensor[(8, 1, 5), uint16] */;
  %282 = cast(%var_9121, dtype="uint16") /* ty=Tensor[(8, 16, 5), uint16] */;
  %283 = minimum(%281, %282) /* ty=Tensor[(8, 16, 5), uint16] */;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %285 = bitwise_xor(%278, %279) /* ty=Tensor[(8, 16, 5), uint64] */;
  %286 = cosh(%284) /* ty=Tensor[(8, 16, 5), float64] */;
  (%285, %286)
}

def @func_4459() -> (Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) {
  %287 = cast(meta[relay.Constant][15] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %288 = reshape(%287, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %289 = @func_2442(%288) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %290 = %289.0;
  %291 = cast(%290, dtype="float32") /* ty=Tensor[(8, ?, 5), float32] */;
  %292 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %293 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %294 = sqrt(%291) /* ty=Tensor[(8, ?, 5), float32] */;
  %295 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %296 = %292.3;
  (%293, meta[relay.Constant][15] /* ty=Tensor[(1134), float32] */, %294, %295, %296)
}

def @func_7674() -> (Tensor[(8, 1, 5), float64],) {
  %297 = @func_7216() /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(8, 1, 5), float32]) */;
  %298 = %297.1;
  %299 = @func_4096() /* ty=uint16 */;
  %300 = cast(%298, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %301 = cast(%299, dtype="float64") /* ty=float64 */;
  %302 = floor_mod(%300, %301) /* ty=Tensor[(8, 1, 5), float64] */;
  (%302,)
}

def @func_8253(%var_8185: Tensor[(2, 9, 14), int64], %var_8186: Tensor[(2, 9, 14), int64], %var_8193: Tensor[(2, 9, 14), int64]) -> (Tensor[(2, 9, 14), int64], Tensor[(8, 1, 5), float64], Tensor[(2, 9, 14), int16], Tensor[(8, 1, 5), float32]) {
  %303 = cast(%var_8193, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %304 = shape_of(%var_8186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_8186, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %307 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %308 = cast(%var_8186, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %309 = shape_of(%var_8185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_8185, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = less_equal(%310, %311) /* ty=Tensor[(2, 9, 14), bool] */;
  %313 = cast(%var_8185, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %317 = logical_xor(%305, %306) /* ty=Tensor[(2, 9, 14), int64] */;
  %318 = %307.0;
  %319 = right_shift(%315, %316) /* ty=Tensor[(2, 9, 14), int16] */;
  %320 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
  (%317, %318, %319, %320)
}

def @func_8766() -> (Tensor[(1, 15, 14), float32],) {
  %321 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 14), float32] */;
  %322 = rsqrt(%321) /* ty=Tensor[(1, 15, 14), float32] */;
  (%322,)
}

def @func_2694(%var_2667: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, 7, 5), bool]) {
  %323 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %324 = cast(%var_2667, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %325 = reshape(%324, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %326 = @func_2442(%325) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="bool") /* ty=Tensor[(8, ?, 5), bool] */;
  %329 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 7, 5), float64] */, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %330 = equal(%328, %329) /* ty=Tensor[(8, 7, 5), bool] */;
  %331 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 7, 5), bool] */, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = %323.0;
  %336 = less(%333, %334) /* ty=Tensor[(8, 7, 5), bool] */;
  (%335, %var_2667, %336)
}

def @func_5252(%var_5240: uint16, %var_5246: Tensor[(1, 980), int16]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), bool], Tensor[(8, ?, 5), float64], Tensor[(8, 1, 5), float32], uint16, Tensor[(7, 10, 14), bool], Tensor[(1, 980), int16]) {
  %337 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %338 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %339 = cast(%var_5240, dtype="uint16") /* ty=uint16 */;
  %340 = reshape(%339, newshape=[]) /* ty=uint16 */;
  %341 = @func_3019(%340) /* ty=(Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) */;
  %342 = cast(%var_5246, dtype="int16") /* ty=Tensor[(1, 980), int16] */;
  %343 = reshape(%342, newshape=[7, 10, 14]) /* ty=Tensor[(7, 10, 14), int16] */;
  %344 = @func_2743(%343) /* ty=(Tensor[(7, 10, 14), bool],) */;
  %345 = %337.0;
  %346 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
  %347 = %338.0;
  %348 = %341.1;
  %349 = %344.0;
  (%345, %346, %347, %348, %var_5240, %349, %var_5246)
}

def @func_2964() -> Tensor[(8, 1, 5), float32] {
  @func_2513() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_9353() -> (Tensor[(10, 10, 14), float32], Tensor[(8, ?, 5), float32]) {
  %350 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %351 = @func_5274() /* ty=(Tensor[(8, ?, 5), float32],) */;
  %352 = %350.3;
  %353 = %351.0;
  (%352, %353)
}

def @func_3124(%var_3109: Tensor[(8, 3, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), int16], Tensor[(8, ?, 5), int16]) {
  %354 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %355 = cast(%354, dtype="int16") /* ty=Tensor[(8, 1, 5), int16] */;
  %356 = cast(%var_3109, dtype="int16") /* ty=Tensor[(8, 3, 5), int16] */;
  %357 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %358 = cast(%357, dtype="int16") /* ty=Tensor[(8, 1, 5), int16] */;
  %359 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%354, dtype="int16") /* ty=Tensor[(8, 1, 5), int16] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %362 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %363 = maximum(%355, %356) /* ty=Tensor[(8, 3, 5), int16] */;
  %364 = left_shift(%360, %361) /* ty=Tensor[(8, ?, 5), int16] */;
  (%362, %363, %364)
}

def @func_7958() -> (uint16,) {
  %365 = @func_5342() /* ty=uint16 */;
  (%365,)
}

def @func_7532() -> Tensor[(8, 1, 5), float32] {
  @func_4751() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_8384() -> (Tensor[(8, 1, 5), float32],) {
  %366 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  (%366,)
}

def @func_6304() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) {
  %367 = @func_5997() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], bool, Tensor[(560), bool], Tensor[(504), int64]) */;
  %368 = cast(meta[relay.Constant][19] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %369 = reshape(%368, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %370 = @func_2442(%369) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %371 = %370.1;
  %372 = cast(%371, dtype="int16") /* ty=Tensor[(1134), int16] */;
  %373 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(1134), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %374 = cast(meta[relay.Constant][19] /* ty=Tensor[(1134), float32] */, dtype="int16") /* ty=Tensor[(1134), int16] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?), int16] */;
  %376 = %367.0;
  %377 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %378 = bitwise_and(%374, %375) /* ty=Tensor[(1134), int16] */;
  (%376, %377, %378)
}

def @func_6435(%var_6425: Tensor[(8, 14, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) {
  %379 = @func_4501() /* ty=Tensor[(8, 1, 5), float32] */;
  %380 = cast(%379, dtype="int8") /* ty=Tensor[(8, 1, 5), int8] */;
  %381 = cast(%var_6425, dtype="int8") /* ty=Tensor[(8, 14, 5), int8] */;
  %382 = @func_5529() /* ty=Tensor[(8, 1, 5), float32] */;
  %383 = add(%380, %381) /* ty=Tensor[(8, 14, 5), int8] */;
  (%382, %383)
}

def @func_5941(%var_5908: Tensor[(980), int16], %var_5919: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint32], Tensor[(1134), float32], Tensor[(1134), float32], Tensor[(980), float32], Tensor[(8, 1, 5), float32]) {
  %384 = cast(meta[relay.Constant][20] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %385 = cast(%var_5908, dtype="int16") /* ty=Tensor[(980), int16] */;
  %386 = reshape(%384, newshape=[]) /* ty=uint16 */;
  %387 = reshape(%385, newshape=[1, 980]) /* ty=Tensor[(1, 980), int16] */;
  %388 = @func_5252(%386, %387) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), bool], Tensor[(8, ?, 5), float64], Tensor[(8, 1, 5), float32], uint16, Tensor[(7, 10, 14), bool], Tensor[(1, 980), int16]) */;
  %389 = @func_5710() /* ty=Tensor[(8, 1, 5), float32] */;
  %390 = cast(%389, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
  %391 = cast(meta[relay.Constant][20] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %392 = cast(%var_5919, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %393 = reshape(%392, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %394 = @func_3778(%393) /* ty=(Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) */;
  %395 = cast(%var_5908, dtype="float32") /* ty=Tensor[(980), float32] */;
  %396 = %388.3;
  %397 = add(%390, %391) /* ty=Tensor[(8, 1, 5), uint32] */;
  %398 = %394.2;
  %399 = sqrt(%395) /* ty=Tensor[(980), float32] */;
  %400 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  (%396, %397, %398, %var_5919, %399, %400)
}

def @func_10201(%var_10154: Tensor[(4, 15, 9), float64]) -> (Tensor[(8, ?, 5), float32], Tensor[(4, 15, 9), float32], Tensor[(8, ?, 5), float64], Tensor[(520), float32]) {
  %401 = @func_9353() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, ?, 5), float32]) */;
  %402 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
  %403 = shape_of(%var_10154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%var_10154, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %406 = power(%404, %405) /* ty=Tensor[(4, 15, 9), float64] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
  %408 = exp(%407) /* ty=Tensor[(4, 15, 9), float64] */;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(4, 15, 9), float32] */;
  %410 = log2(%409) /* ty=Tensor[(4, 15, 9), float32] */;
  %411 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 9), float32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="float32") /* ty=Tensor[(4, 15, 9), float32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %415 = cast(meta[relay.Constant][23] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %416 = reshape(%415, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %417 = @func_9076(%416) /* ty=(Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) */;
  %418 = %401.1;
  %419 = subtract(%413, %414) /* ty=Tensor[(4, 15, 9), float32] */;
  %420 = %417.2;
  (%418, %419, %420, meta[relay.Constant][23] /* ty=Tensor[(520), float32] */)
}

def @func_9708(%var_9669: Tensor[(315), int64]) -> (Tensor[(10, 10, 14), float32], Tensor[(15, 7, 3), int64], Tensor[(315), int64], Tensor[(8, 2, 5), int64], Tensor[(80), float64]) {
  %421 = @func_7722() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) */;
  %422 = cast(%var_9669, dtype="int64") /* ty=Tensor[(315), int64] */;
  %423 = reshape(%422, newshape=[15, 7, 3]) /* ty=Tensor[(15, 7, 3), int64] */;
  %424 = @func_9466(%423) /* ty=(Tensor[(15, 7, 3), int64],) */;
  %425 = cast(meta[relay.Constant][24] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %426 = reshape(%425, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), float64] */;
  %427 = @func_9232(%426) /* ty=(Tensor[(8, 2, 5), int64],) */;
  %428 = %421.0;
  %429 = %424.0;
  %430 = %427.0;
  (%428, %429, %var_9669, %430, meta[relay.Constant][24] /* ty=Tensor[(80), float64] */)
}

def @func_5506() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) {
  %431 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %434 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 40), float32] */, dtype="float32") /* ty=Tensor[(8, 40), float32] */;
  %435 = reshape(%434, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %436 = @func_3990(%435) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %437 = acosh(%433) /* ty=Tensor[(8, 1, 5), float32] */;
  %438 = %436.0;
  (%437, %438, meta[relay.Constant][25] /* ty=Tensor[(8, 40), float32] */)
}

def @func_9507(%var_9498: Tensor[(9, 8, 14), float64]) -> Tensor[(9, 8, 14), bool] {
  %439 = cast(%var_9498, dtype="float64") /* ty=Tensor[(9, 8, 14), float64] */;
  %440 = erf(%439) /* ty=Tensor[(9, 8, 14), float64] */;
  %441 = cast(%var_9498, dtype="bool") /* ty=Tensor[(9, 8, 14), bool] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="bool") /* ty=Tensor[(9, 8, 14), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%443, %444) /* ty=Tensor[(9, 8, 14), bool] */
}

def @func_7385() -> (Tensor[(8, 1, 5), float64], Tensor[(9, 11, 15), int16], Tensor[(1485), int16], uint16) {
  %445 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %446 = cast(meta[relay.Constant][26] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %447 = reshape(%446, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), int16] */;
  %448 = @func_6570(%447) /* ty=(Tensor[(9, 11, 15), int16], Tensor[(8, 8, 5), uint32], Tensor[(9, 11, 15), float32]) */;
  %449 = @func_7254() /* ty=(uint16, Tensor[(8, 1, 5), float32]) */;
  %450 = %445.1;
  %451 = %448.0;
  %452 = %449.0;
  (%450, %451, meta[relay.Constant][26] /* ty=Tensor[(1485), int16] */, %452)
}

def @func_9904(%var_9894: Tensor[(8, 9, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 11, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(8, 9, 5), float32]) {
  %453 = @func_9594() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64]) */;
  %454 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
  %455 = @func_9392() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(504), int64]) */;
  %456 = @func_6526() /* ty=Tensor[(8, 1, 5), float32] */;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %458 = cast(%var_9894, dtype="float32") /* ty=Tensor[(8, 9, 5), float32] */;
  %459 = %453.0;
  %460 = %454.3;
  %461 = %455.1;
  %462 = subtract(%457, %458) /* ty=Tensor[(8, 9, 5), float32] */;
  (%459, %460, %461, %462)
}

def @func_5199() -> Tensor[(10, 10, 14), float32] {
  %463 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %463.3
}

def @func_6661() -> (Tensor[(8, ?, 5), float64],) {
  %464 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %465 = %464.0;
  (%465,)
}

def @func_10747() -> Tensor[(40), float32] {
  %466 = @func_7722() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) */;
  %466.2
}

def @func_2743(%var_2700: Tensor[(7, 10, 14), int16]) -> (Tensor[(7, 10, 14), bool],) {
  %467 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 1, 14), int16] */, dtype="bool") /* ty=Tensor[(7, 1, 14), bool] */;
  %468 = cast(%var_2700, dtype="bool") /* ty=Tensor[(7, 10, 14), bool] */;
  %469 = greater_equal(%467, %468) /* ty=Tensor[(7, 10, 14), bool] */;
  (%469,)
}

def @func_8093() -> Tensor[(8, 1, 5), float64] {
  %470 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %470.1
}

def @func_10501() -> uint16 {
  %471 = @func_9967() /* ty=(uint16,) */;
  %471.0
}

def @func_5091() -> Tensor[(8, 1, 5), float64] {
  %472 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %473 = %472.6;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  sin(%474) /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_9309() -> (uint16,) {
  %475 = @func_4856() /* ty=uint16 */;
  (%475,)
}

def @func_5710() -> Tensor[(8, 1, 5), float32] {
  %476 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %476.1
}

def @func_1241(%var_1208: bool, %var_1209: Tensor[(4, 10, 14), bool], %var_1226: Tensor[(504), int64]) -> (Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) {
  %477 = cast(%var_1226, dtype="int64") /* ty=Tensor[(504), int64] */;
  %478 = cast(%var_1226, dtype="int64") /* ty=Tensor[(504), int64] */;
  %479 = reshape(%477, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %480 = reshape(%478, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %481 = @func_575(%479, %480) /* ty=(Tensor[(14, 6, 6), float32],) */;
  %482 = cast(%var_1208, dtype="bool") /* ty=bool */;
  %483 = cast(%var_1209, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %484 = logical_and(%482, %483) /* ty=Tensor[(4, 10, 14), bool] */;
  %485 = cast(%484, dtype="float32") /* ty=Tensor[(4, 10, 14), float32] */;
  %486 = atan(%485) /* ty=Tensor[(4, 10, 14), float32] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %488 = %481.0;
  %489 = acosh(%487) /* ty=Tensor[(4, 10, 14), float64] */;
  (%488, %var_1226, %489)
}

def @func_3990(%var_3985: Tensor[(8, 8, 5), float32]) -> (Tensor[(8, 8, 5), uint32],) {
  %490 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %491 = cast(%490, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
  %492 = cast(%var_3985, dtype="uint32") /* ty=Tensor[(8, 8, 5), uint32] */;
  %493 = minimum(%491, %492) /* ty=Tensor[(8, 8, 5), uint32] */;
  (%493,)
}

def @func_4825(%var_4819: bool) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], bool) {
  %494 = cast(%var_4819, dtype="bool") /* ty=bool */;
  %495 = reshape(%494, newshape=[]) /* ty=bool */;
  %496 = @func_2637(%495) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(560), bool], Tensor[(504), int64], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint64], Tensor[(8, 1, 5), float32]) */;
  %497 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %498 = %496.5;
  (%497, %498, %var_4819)
}

def @func_6526() -> Tensor[(8, 1, 5), float32] {
  %499 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %499.3
}

def @func_6096() -> (Tensor[(8, 1, 5), float32],) {
  %500 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  (%500,)
}

def @func_4501() -> Tensor[(8, 1, 5), float32] {
  @func_2513() /* ty=Tensor[(8, 1, 5), float32] */
}

def @main(%var_10893: Tensor[(1, 3, 9), float64]) -> Tensor[(1, 3, 9), float64] {
  %501 = cast(%var_10893, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  acos(%501) /* ty=Tensor[(1, 3, 9), float64] */
}

def @func_4280() -> Tensor[(8, 1, 5), float32] {
  %502 = @func_4153() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %502.0
}

def @func_6168() -> (uint16,) {
  %503 = @func_4856() /* ty=uint16 */;
  (%503,)
}

def @func_575(%var_565: Tensor[(14, 6, 6), int64], %var_566: Tensor[(14, 6, 6), int64]) -> (Tensor[(14, 6, 6), float32],) {
  %504 = cast(%var_566, dtype="int64") /* ty=Tensor[(14, 6, 6), int64] */;
  %505 = shape_of(%var_565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%var_565, dtype="int64") /* ty=Tensor[(14, 6, 6), int64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %508 = add(%506, %507) /* ty=Tensor[(14, 6, 6), int64] */;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(14, 6, 6), float32] */;
  %510 = log10(%509) /* ty=Tensor[(14, 6, 6), float32] */;
  (%510,)
}

def @func_3632() -> Tensor[(8, 3, 5), bool] {
  %511 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %512 = cast(%511, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %513 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 3, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
  logical_and(%512, %513) /* ty=Tensor[(8, 3, 5), bool] */
}

def @func_5949() -> (Tensor[(8, 1, 5), float32],) {
  %514 = @func_4153() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %515 = %514.0;
  (%515,)
}

def @func_6876(%var_6869: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) {
  %516 = cast(%var_6869, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %517 = reshape(%516, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float32] */;
  %518 = @func_1716(%517) /* ty=(Tensor[(9, 14, 9), uint64],) */;
  %519 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %520 = @func_5710() /* ty=Tensor[(8, 1, 5), float32] */;
  %521 = %518.0;
  %522 = %519.1;
  (%520, %521, %var_6869, %522)
}

def @func_2135(%var_2094: uint16, %var_2095: Tensor[(6, 16, 12), uint16], %var_2128: Tensor[(504), int64]) -> (Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) {
  %523 = cast(%var_2094, dtype="uint16") /* ty=uint16 */;
  %524 = cast(%var_2095, dtype="uint16") /* ty=Tensor[(6, 16, 12), uint16] */;
  %525 = cast(%var_2128, dtype="int64") /* ty=Tensor[(504), int64] */;
  %526 = cast(%var_2128, dtype="int64") /* ty=Tensor[(504), int64] */;
  %527 = reshape(%525, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %528 = reshape(%526, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %529 = @func_575(%527, %528) /* ty=(Tensor[(14, 6, 6), float32],) */;
  %530 = cast(%var_2128, dtype="int64") /* ty=Tensor[(504), int64] */;
  %531 = %529.0;
  %532 = cast(%531, dtype="int64") /* ty=Tensor[(14, 6, 6), int64] */;
  %533 = reshape(%530, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %534 = reshape(%532, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %535 = @func_575(%533, %534) /* ty=(Tensor[(14, 6, 6), float32],) */;
  %536 = minimum(%523, %524) /* ty=Tensor[(6, 16, 12), uint16] */;
  %537 = %535.0;
  (%536, %531, %var_2128, %537)
}

def @func_8960(%var_8942: Tensor[(3, 6, 15), float64]) -> (Tensor[(3, 6, 15), float64], Tensor[(8, 1, 5), float32]) {
  %538 = cast(%var_8942, dtype="float64") /* ty=Tensor[(3, 6, 15), float64] */;
  %539 = sqrt(%538) /* ty=Tensor[(3, 6, 15), float64] */;
  %540 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  (%539, %540)
}

def @func_3019(%var_2999: uint16) -> (Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) {
  %541 = cast(%var_2999, dtype="uint16") /* ty=uint16 */;
  %542 = reshape(%541, newshape=[]) /* ty=uint16 */;
  %543 = @func_2900(%542) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %544 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %545 = cast(%var_2999, dtype="float32") /* ty=float32 */;
  %546 = cast(%544, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %547 = divide(%545, %546) /* ty=Tensor[(8, 1, 5), float32] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %549 = %543.3;
  %550 = log(%548) /* ty=Tensor[(8, 1, 5), float32] */;
  (%549, %550)
}

def @func_10863() -> uint16 {
  %551 = @func_7254() /* ty=(uint16, Tensor[(8, 1, 5), float32]) */;
  %551.0
}

def @func_2637(%var_2587: bool) -> (Tensor[(14, 6, 6), float32], Tensor[(560), bool], Tensor[(504), int64], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint64], Tensor[(8, 1, 5), float32]) {
  %552 = cast(%var_2587, dtype="bool") /* ty=bool */;
  %553 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %554 = cast(meta[relay.Constant][30] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %555 = reshape(%552, newshape=[]) /* ty=bool */;
  %556 = reshape(%553, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), bool] */;
  %557 = reshape(%554, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %558 = @func_1241(%555, %556, %557) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) */;
  %559 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %560 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %561 = %560.0;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %563 = log10(%562) /* ty=Tensor[(8, 1, 5), float32] */;
  %564 = cast(%563, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %565 = cast(%var_2587, dtype="uint64") /* ty=uint64 */;
  %566 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %567 = %558.0;
  %568 = %559.0;
  %569 = subtract(%564, %565) /* ty=Tensor[(8, 1, 5), uint64] */;
  %570 = %566.0;
  (%567, meta[relay.Constant][29] /* ty=Tensor[(560), bool] */, meta[relay.Constant][30] /* ty=Tensor[(504), int64] */, %568, %569, %570)
}

def @func_7254() -> (uint16, Tensor[(8, 1, 5), float32]) {
  %571 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %572 = %571.0;
  %573 = @func_4751() /* ty=Tensor[(8, 1, 5), float32] */;
  (%572, %573)
}

def @func_3675(%var_3668: Tensor[(6, 4, 5), float32]) -> Tensor[(6, 4, 5), float64] {
  %574 = cast(-5.22723f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %575 = cast(%var_3668, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
  %576 = floor_mod(%574, %575) /* ty=Tensor[(6, 4, 5), float32] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
  rsqrt(%577) /* ty=Tensor[(6, 4, 5), float64] */
}

def @func_10460() -> Tensor[(13, 6, 13), float64] {
  %578 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
  log10(%578) /* ty=Tensor[(13, 6, 13), float64] */
}

def @func_2813() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %579 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %580 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %581 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %582 = %581.0;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %584 = cast(meta[relay.Constant][32] /* ty=Tensor[(1400), float32] */, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %585 = reshape(%584, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), float32] */;
  %586 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %587 = %579.0;
  %588 = %580.0;
  %589 = rsqrt(%583) /* ty=Tensor[(8, 1, 5), float64] */;
  %590 = @func_2019(%585) /* ty=Tensor[(10, 10, 14), float32] */;
  %591 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %592 = %586.0;
  (%587, %588, %589, %590, meta[relay.Constant][32] /* ty=Tensor[(1400), float32] */, %591, %592)
}

def @func_10345() -> (Tensor[(1134), int16], Tensor[(8, 1, 5), float32], Tensor[(520), float32], Tensor[(8, 3, 5), bool], Tensor[(560), float32], Tensor[(1134), float32]) {
  %593 = @func_6304() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) */;
  %594 = cast(meta[relay.Constant][33] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %595 = reshape(%594, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %596 = @func_9076(%595) /* ty=(Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) */;
  %597 = cast(meta[relay.Constant][34] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %598 = reshape(%597, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %599 = @func_10036(%598) /* ty=(Tensor[(8, 3, 5), bool], Tensor[(8, 14, 5), int8], Tensor[(560), float32], Tensor[(8, 1, 5), float32], Tensor[(9, 126), float32]) */;
  %600 = %593.2;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %602 = reshape(%601, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %603 = @func_3778(%602) /* ty=(Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) */;
  %604 = %596.1;
  %605 = %599.0;
  %606 = %603.2;
  (%600, %604, meta[relay.Constant][33] /* ty=Tensor[(520), float32] */, %605, meta[relay.Constant][34] /* ty=Tensor[(560), float32] */, %606)
}

def @func_4153() -> (Tensor[(8, 1, 5), float32],) {
  %607 = @func_3475() /* ty=Tensor[(8, 1, 5), float32] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %609 = erf(%608) /* ty=Tensor[(8, 1, 5), float32] */;
  (%609,)
}

def @func_3475() -> Tensor[(8, 1, 5), float32] {
  %610 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %610.0
}

def @func_2336() -> (Tensor[(8, 1, 5), float32],) {
  %611 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %612 = %611.0;
  (%612,)
}

def @func_5274() -> (Tensor[(8, ?, 5), float32],) {
  %613 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %614 = %613.2;
  (%614,)
}

def @func_6809() -> Tensor[(8, 1, 5), float32] {
  %615 = @func_6096() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %615.0
}

def @func_6990() -> uint16 {
  @func_5342() /* ty=uint16 */
}

def @func_4065() -> (Tensor[(8, ?, 5), float64],) {
  %616 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %617 = %616.0;
  %618 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %619 = cast(%618, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %620 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%617, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %623 = power(%621, %622) /* ty=Tensor[(8, ?, 5), float64] */;
  (%623,)
}

def @func_10283() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(560), float32]) {
  %624 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %625 = cast(meta[relay.Constant][35] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %626 = reshape(%625, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), float32] */;
  %627 = @func_6435(%626) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) */;
  %628 = %624.1;
  %629 = %627.0;
  (%628, %629, meta[relay.Constant][35] /* ty=Tensor[(560), float32] */)
}

def @func_5529() -> Tensor[(8, 1, 5), float32] {
  %630 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %630.0
}

def @func_7260() -> (Tensor[(320), float32],) {
  %631 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
  %632 = %631.2;
  (%632,)
}

def @func_5342() -> uint16 {
  @func_4856() /* ty=uint16 */
}

def @func_8893() -> (uint16, uint16) {
  %633 = @func_6990() /* ty=uint16 */;
  %634 = @func_6990() /* ty=uint16 */;
  (%633, %634)
}

def @func_9967() -> (uint16,) {
  %635 = @func_8893() /* ty=(uint16, uint16) */;
  %636 = %635.1;
  (%636,)
}

def @func_5648(%var_5628: Tensor[(120), bool]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), uint64], Tensor[(120), bool], Tensor[(8, 3, 5), int16]) {
  %637 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %638 = cast(%var_5628, dtype="bool") /* ty=Tensor[(120), bool] */;
  %639 = reshape(%638, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), bool] */;
  %640 = @func_4961(%639) /* ty=Tensor[(8, 3, 5), uint64] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %642 = reshape(%641, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
  %643 = @func_3124(%642) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), int16], Tensor[(8, ?, 5), int16]) */;
  %644 = @func_5545() /* ty=Tensor[(8, 1, 5), float32] */;
  %645 = %637.0;
  %646 = %643.1;
  (%644, %645, %640, %var_5628, %646)
}

def @func_9392() -> (Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(504), int64]) {
  %647 = @func_8827() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %648 = @func_8939() /* ty=Tensor[(8, 1, 5), float64] */;
  %649 = %647.0;
  %650 = @func_3405() /* ty=Tensor[(504), int64] */;
  (%648, %649, %650)
}

def @func_2019(%var_2013: Tensor[(10, 10, 14), float32]) -> Tensor[(10, 10, 14), float32] {
  %651 = cast(%var_2013, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  sqrt(%651) /* ty=Tensor[(10, 10, 14), float32] */
}

def @func_9733(%var_9728: Tensor[(5, 6, 14), float32], %var_9729: Tensor[(5, 6, 14), float32]) -> (Tensor[(5, 6, 14), float32],) {
  %652 = cast(%var_9729, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %653 = shape_of(%var_9728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_9728, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %656 = floor_mod(%654, %655) /* ty=Tensor[(5, 6, 14), float32] */;
  (%656,)
}

def @func_9466(%var_9459: Tensor[(15, 7, 3), int64]) -> (Tensor[(15, 7, 3), int64],) {
  %657 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 1, 3), int64] */, dtype="int64") /* ty=Tensor[(15, 1, 3), int64] */;
  %658 = cast(%var_9459, dtype="int64") /* ty=Tensor[(15, 7, 3), int64] */;
  %659 = minimum(%657, %658) /* ty=Tensor[(15, 7, 3), int64] */;
  (%659,)
}

def @func_6570(%var_6557: Tensor[(9, 11, 15), int16]) -> (Tensor[(9, 11, 15), int16], Tensor[(8, 8, 5), uint32], Tensor[(9, 11, 15), float32]) {
  %660 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 11, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %661 = shape_of(%var_6557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_6557, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %664 = @func_5506() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) */;
  %665 = cast(%var_6557, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %666 = left_shift(%662, %663) /* ty=Tensor[(9, 11, 15), int16] */;
  %667 = %664.1;
  %668 = erf(%665) /* ty=Tensor[(9, 11, 15), float32] */;
  (%666, %667, %668)
}

def @func_6794(%var_6786: Tensor[(6, 16, 12), uint16]) -> Tensor[(6, 16, 12), uint8] {
  %669 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %670 = %669.0;
  %671 = cast(%var_6786, dtype="uint8") /* ty=Tensor[(6, 16, 12), uint8] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="uint8") /* ty=Tensor[(6, 16, 12), uint8] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%673, %674) /* ty=Tensor[(6, 16, 12), uint8] */
}

def @func_4778() -> Tensor[(8, 1, 5), float32] {
  @func_4280() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_10100(%var_10057: Tensor[(520), float32]) -> (Tensor[(520), float32], Tensor[(8, ?, 5), uint32]) {
  %675 = cast(%var_10057, dtype="float32") /* ty=Tensor[(520), float32] */;
  %676 = reshape(%675, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %677 = @func_9076(%676) /* ty=(Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) */;
  %678 = %677.2;
  %679 = @func_4530() /* ty=(Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %680 = %679.2;
  %681 = cast(%680, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
  %682 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%678, dtype="uint32") /* ty=Tensor[(8, ?, 5), uint32] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %685 = logical_xor(%683, %684) /* ty=Tensor[(8, ?, 5), uint32] */;
  (%var_10057, %685)
}

def @func_10480() -> (Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64]) {
  %686 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %687 = @func_8093() /* ty=Tensor[(8, 1, 5), float64] */;
  %688 = %686.0;
  (%687, %688)
}

def @func_6120() -> (uint16, Tensor[(8, 1, 5), float64]) {
  %689 = @func_5342() /* ty=uint16 */;
  %690 = @func_5091() /* ty=Tensor[(8, 1, 5), float64] */;
  (%689, %690)
}

def @func_4271() -> (Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) {
  %691 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %692 = %691.6;
  %693 = cast(%692, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %694 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 11, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 11, 5), bool] */;
  %695 = cast(meta[relay.Constant][39] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %696 = reshape(%695, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %697 = @func_3990(%696) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %698 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 11, 5), float32] */, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
  %699 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %700 = greater_equal(%693, %694) /* ty=Tensor[(8, 11, 5), bool] */;
  %701 = %697.0;
  %702 = erf(%698) /* ty=Tensor[(8, 11, 5), float64] */;
  %703 = %699.0;
  (%700, %701, meta[relay.Constant][39] /* ty=Tensor[(320), float32] */, %702, %703)
}

def @func_8626() -> (Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) {
  %704 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %705 = cast(meta[relay.Constant][40] /* ty=Tensor[(1400), float32] */, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %706 = reshape(%705, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), float32] */;
  %707 = %704.0;
  %708 = @func_2019(%706) /* ty=Tensor[(10, 10, 14), float32] */;
  (%707, %708, meta[relay.Constant][40] /* ty=Tensor[(1400), float32] */)
}

def @func_2571() -> (Tensor[(8, 1, 5), float32],) {
  %709 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %710 = %709.0;
  (%710,)
}

def @func_8939() -> Tensor[(8, 1, 5), float64] {
  %711 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %711.1
}

def @func_5545() -> Tensor[(8, 1, 5), float32] {
  %712 = @func_4153() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %712.0
}

def @func_8797() -> Tensor[(8, 1, 5), float64] {
  %713 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %713.0
}

def @func_8012(%var_7994: Tensor[(504), int64]) -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], Tensor[(88), float64], Tensor[(504), int64]) {
  %714 = cast(meta[relay.Constant][41] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %715 = cast(%var_7994, dtype="int64") /* ty=Tensor[(504), int64] */;
  %716 = reshape(%714, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
  %717 = reshape(%715, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %718 = @func_1420(%716, %717) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(14, 6, 6), float32], Tensor[(504), int64]) */;
  %719 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
  %720 = %718.1;
  (%719, %720, meta[relay.Constant][41] /* ty=Tensor[(88), float64] */, %var_7994)
}

def @func_7065() -> (Tensor[(8, 1, 5), float32],) {
  %721 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %722 = %721.0;
  (%722,)
}

def @func_10524() -> uint16 {
  @func_4096() /* ty=uint16 */
}

def @func_9546() -> Tensor[(10, 10, 14), float32] {
  %723 = @func_7722() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) */;
  %723.0
}

def @func_6059() -> (Tensor[(8, 1, 5), float32], Tensor[(6, 16, 12), uint16], Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], uint16) {
  %724 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %725 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %726 = reshape(%725, newshape=[]) /* ty=uint16 */;
  %727 = @func_3019(%726) /* ty=(Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) */;
  %728 = @func_4778() /* ty=Tensor[(8, 1, 5), float32] */;
  %729 = %724.0;
  %730 = @func_5199() /* ty=Tensor[(10, 10, 14), float32] */;
  %731 = %727.1;
  (%728, %729, %730, %731, meta[relay.Constant][42] /* ty=uint16 */)
}

def @func_6939() -> Tensor[(8, 1, 5), float64] {
  %732 = @func_3475() /* ty=Tensor[(8, 1, 5), float32] */;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  tan(%733) /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_10138() -> (Tensor[(8, 1, 5), float32],) {
  %734 = @func_6526() /* ty=Tensor[(8, 1, 5), float32] */;
  (%734,)
}

def @func_8827() -> (Tensor[(8, 1, 5), float64],) {
  %735 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %736 = %735.1;
  (%736,)
}

def @func_2305() -> (Tensor[(8, 1, 5), float32],) {
  %737 = cast(-2.48814f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %738 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %739 = maximum(%737, %738) /* ty=Tensor[(8, 1, 5), float32] */;
  (%739,)
}

def @func_8331(%var_8300: Tensor[(16, 14, 6), uint8], %var_8301: Tensor[(16, 14, 6), uint8], %var_8320: Tensor[(567, 2), float32]) -> (Tensor[(16, 14, 6), bool], uint16, uint16, Tensor[(16, 14, 6), float64], Tensor[(7, 3, 5), float32], Tensor[(567, 2), float32]) {
  %740 = cast(%var_8301, dtype="bool") /* ty=Tensor[(16, 14, 6), bool] */;
  %741 = shape_of(%var_8300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%var_8300, dtype="bool") /* ty=Tensor[(16, 14, 6), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = cast(meta[relay.Constant][44] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %745 = reshape(%744, newshape=[]) /* ty=uint16 */;
  %746 = @func_2900(%745) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %747 = cast(%var_8300, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
  %748 = cast(%var_8320, dtype="float32") /* ty=Tensor[(567, 2), float32] */;
  %749 = reshape(%748, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %750 = @func_5324(%749) /* ty=(Tensor[(7, 3, 5), float32], Tensor[(1, 105), uint64], Tensor[(10, 10, 14), float64], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32]) */;
  %751 = less(%742, %743) /* ty=Tensor[(16, 14, 6), bool] */;
  %752 = %746.2;
  %753 = rsqrt(%747) /* ty=Tensor[(16, 14, 6), float64] */;
  %754 = %750.0;
  (%751, %752, meta[relay.Constant][44] /* ty=uint16 */, %753, %754, %var_8320)
}

def @func_4016(%var_4005: Tensor[(8, 15, 5), float32]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) {
  %755 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %756 = %755.1;
  %757 = cast(%756, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %758 = cast(%var_4005, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %759 = left_shift(%757, %758) /* ty=Tensor[(8, 15, 5), uint64] */;
  %760 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  (%759, %760)
}

def @func_8520() -> (Tensor[(8, 4, 16), float32],) {
  %761 = @func_5577() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) */;
  %762 = %761.1;
  (%762,)
}

def @func_10412() -> Tensor[(8, 1, 5), float32] {
  %763 = @func_9008() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %763.0
}

def @func_4941(%var_4922: Tensor[(1400), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) {
  %764 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %765 = cast(%var_4922, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %766 = reshape(%765, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), float32] */;
  %767 = cast(%var_4922, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %768 = %764.0;
  %769 = @func_2019(%766) /* ty=Tensor[(10, 10, 14), float32] */;
  %770 = rsqrt(%767) /* ty=Tensor[(1400), float32] */;
  (%768, %769, %770)
}

def @func_7722() -> (Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) {
  %771 = @func_6393() /* ty=(Tensor[(10, 10, 14), float32],) */;
  %772 = @func_4530() /* ty=(Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %773 = @func_7501() /* ty=(uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) */;
  %774 = %771.0;
  %775 = %772.1;
  %776 = %773.2;
  (%774, %775, %776)
}

def @func_4530() -> (Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %777 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %778 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %779 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %780 = %777.2;
  %781 = %778.0;
  %782 = %779.1;
  (%780, %781, %782)
}

def @func_2378(%var_2373: Tensor[(8, 1, 16), float32]) -> Tensor[(8, 4, 16), float32] {
  %783 = cast(%var_2373, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
  %784 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
  divide(%783, %784) /* ty=Tensor[(8, 4, 16), float32] */
}

def @func_7501() -> (uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) {
  %785 = @func_6168() /* ty=(uint16,) */;
  %786 = cast(meta[relay.Constant][46] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %787 = reshape(%786, newshape=[8, 1, 5]) /* ty=Tensor[(8, 1, 5), float32] */;
  %788 = %785.0;
  %789 = @func_5762(%787) /* ty=Tensor[(8, ?, 5), int32] */;
  (%788, %789, meta[relay.Constant][46] /* ty=Tensor[(40), float32] */)
}

def @func_9270() -> (Tensor[(8, 8, 5), uint32],) {
  %790 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
  %791 = %790.1;
  (%791,)
}

def @func_9008() -> (Tensor[(8, 1, 5), float32],) {
  %792 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %793 = %792.1;
  (%793,)
}

def @func_8986() -> Tensor[(8, 1, 5), float64] {
  %794 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %794.1
}

def @func_2868(%var_2863: Tensor[(128), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) {
  %795 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %796 = cast(%var_2863, dtype="float32") /* ty=Tensor[(128), float32] */;
  %797 = reshape(%796, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float32] */;
  %798 = %795.0;
  %799 = @func_2378(%797) /* ty=Tensor[(8, 4, 16), float32] */;
  (%798, %799, %var_2863)
}

def @func_5324(%var_5322: Tensor[(1134), float32]) -> (Tensor[(7, 3, 5), float32], Tensor[(1, 105), uint64], Tensor[(10, 10, 14), float64], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32]) {
  %800 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 105), uint64] */, dtype="uint64") /* ty=Tensor[(1, 105), uint64] */;
  %801 = reshape(%800, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint64] */;
  %802 = @func_3917(%801) /* ty=(Tensor[(7, 3, 5), float32],) */;
  %803 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %804 = %803.4;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  %806 = asinh(%805) /* ty=Tensor[(10, 10, 14), float32] */;
  %807 = cast(%804, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%806, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %811 = cast(%var_5322, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %812 = reshape(%811, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float32] */;
  %813 = @func_1716(%812) /* ty=(Tensor[(9, 14, 9), uint64],) */;
  %814 = %802.0;
  %815 = power(%809, %810) /* ty=Tensor[(10, 10, 14), float64] */;
  %816 = %813.0;
  (%814, meta[relay.Constant][47] /* ty=Tensor[(1, 105), uint64] */, %815, %816, %var_5322)
}

def @func_2513() -> Tensor[(8, 1, 5), float32] {
  %817 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %817.0
}

def @func_3508(%var_3477: Tensor[(16, 9, 14), float64]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(16, 9, 14), int64]) {
  %818 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %819 = cast(%var_3477, dtype="float64") /* ty=Tensor[(16, 9, 14), float64] */;
  %820 = atanh(%819) /* ty=Tensor[(16, 9, 14), float64] */;
  %821 = cast(%var_3477, dtype="int64") /* ty=Tensor[(16, 9, 14), int64] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="int64") /* ty=Tensor[(16, 9, 14), int64] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %825 = %818.0;
  %826 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %827 = minimum(%823, %824) /* ty=Tensor[(16, 9, 14), int64] */;
  (%825, %826, %827)
}

def @func_3726() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %828 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %829 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %830 = %828.0;
  %831 = %829.0;
  (%830, %831)
}

def @func_7420(%var_7387: Tensor[(7, 1, 2), float32], %var_7388: Tensor[(7, 12, 2), float32]) -> (Tensor[(7, 12, 2), float32],) {
  %832 = cast(%var_7387, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
  %833 = cast(%var_7388, dtype="float32") /* ty=Tensor[(7, 12, 2), float32] */;
  %834 = multiply(%832, %833) /* ty=Tensor[(7, 12, 2), float32] */;
  (%834,)
}

def @func_3229() -> (Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) {
  %835 = cast(meta[relay.Constant][48] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %836 = cast(meta[relay.Constant][49] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %837 = cast(meta[relay.Constant][50] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %838 = reshape(%835, newshape=[]) /* ty=uint16 */;
  %839 = reshape(%836, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
  %840 = reshape(%837, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %841 = @func_2135(%838, %839, %840) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %842 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %843 = %842.0;
  %844 = cast(%843, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %845 = %841.0;
  %846 = atanh(%844) /* ty=Tensor[(8, 1, 5), float64] */;
  (%845, meta[relay.Constant][48] /* ty=uint16 */, meta[relay.Constant][49] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][50] /* ty=Tensor[(504), int64] */, %846)
}

def @func_4856() -> uint16 {
  %847 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %847.1
}

def @func_10111() -> (Tensor[(320), float32],) {
  %848 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
  %849 = %848.2;
  (%849,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5276() -> (Tensor[(8, ?, 5), float32],) {
  @func_5274() /* ty=(Tensor[(8, ?, 5), float32],) */
}

def @func_2965() -> Tensor[(8, 1, 5), float32] {
  %0 = fn () -> Tensor[(8, 1, 5), float32] {
    @func_2513() /* ty=Tensor[(8, 1, 5), float32] */
  };
  %0() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_9394() -> (Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(504), int64]) {
  @func_9392() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(504), int64]) */
}

def @func_8963(%var_8961: Tensor[(3, 6, 15), float64]) -> (Tensor[(3, 6, 15), float64], Tensor[(8, 1, 5), float32]) {
  @func_8960(%var_8961) /* ty=(Tensor[(3, 6, 15), float64], Tensor[(8, 1, 5), float32]) */
}

def @func_2870(%var_2869: Tensor[(128), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) {
  %6 = fn (%var_2863: Tensor[(128), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) {
    %1 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %2 = cast(%var_2863, dtype="float32") /* ty=Tensor[(128), float32] */;
    %3 = reshape(%2, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float32] */;
    %4 = %1.0;
    %5 = @func_2378(%3) /* ty=Tensor[(8, 4, 16), float32] */;
    (%4, %5, %var_2863)
  };
  %6(%var_2869) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) */
}

def @func_2697(%var_2695: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, 7, 5), bool]) {
  @func_2694(%var_2695) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, 7, 5), bool]) */
}

def @func_10481() -> (Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64]) {
  %10 = fn () -> (Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64]) {
    %7 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
    %8 = @func_8093() /* ty=Tensor[(8, 1, 5), float64] */;
    %9 = %7.0;
    (%8, %9)
  };
  %10() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64]) */
}

def @func_5651(%var_5649: Tensor[(120), bool]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), uint64], Tensor[(120), bool], Tensor[(8, 3, 5), int16]) {
  @func_5648(%var_5649) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), uint64], Tensor[(120), bool], Tensor[(8, 3, 5), int16]) */
}

def @func_9509(%var_9508: Tensor[(9, 8, 14), float64]) -> Tensor[(9, 8, 14), bool] {
  %17 = fn (%var_9498: Tensor[(9, 8, 14), float64]) -> Tensor[(9, 8, 14), bool] {
    %11 = cast(%var_9498, dtype="float64") /* ty=Tensor[(9, 8, 14), float64] */;
    %12 = erf(%11) /* ty=Tensor[(9, 8, 14), float64] */;
    %13 = cast(%var_9498, dtype="bool") /* ty=Tensor[(9, 8, 14), bool] */;
    %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
    %15 = cast(%12, dtype="bool") /* ty=Tensor[(9, 8, 14), bool] */;
    %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%15, %16) /* ty=Tensor[(9, 8, 14), bool] */
  };
  %17(%var_9508) /* ty=Tensor[(9, 8, 14), bool] */
}

def @func_6939() -> Tensor[(8, 1, 5), float64] {
  %18 = @func_3475() /* ty=Tensor[(8, 1, 5), float32] */;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  tan(%19) /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_5765(%var_5763: Tensor[(8, 1, 5), float32]) -> Tensor[(8, ?, 5), int32] {
  @func_5762(%var_5763) /* ty=Tensor[(8, ?, 5), int32] */
}

def @func_3807(%var_3806: Tensor[(7, 14, 14), float64]) -> (Tensor[(7, 14, 14), float64],) {
  %22 = fn (%var_3800: Tensor[(7, 14, 14), float64]) -> (Tensor[(7, 14, 14), float64],) {
    %20 = cast(%var_3800, dtype="float64") /* ty=Tensor[(7, 14, 14), float64] */;
    %21 = log10(%20) /* ty=Tensor[(7, 14, 14), float64] */;
    (%21,)
  };
  %22(%var_3806) /* ty=(Tensor[(7, 14, 14), float64],) */
}

def @func_3231() -> (Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) {
  @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */
}

def @func_2019(%var_2013: Tensor[(10, 10, 14), float32]) -> Tensor[(10, 10, 14), float32] {
  %23 = cast(%var_2013, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  sqrt(%23) /* ty=Tensor[(10, 10, 14), float32] */
}

def @func_5531() -> Tensor[(8, 1, 5), float32] {
  @func_5529() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_10864() -> uint16 {
  %25 = fn () -> uint16 {
    %24 = @func_7254() /* ty=(uint16, Tensor[(8, 1, 5), float32]) */;
    %24.0
  };
  %25() /* ty=uint16 */
}

def @func_7100() -> (Tensor[(8, 1, 5), float32],) {
  %26 = @func_5949() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %27 = %26.0;
  (%27,)
}

def @func_10039(%var_10037: Tensor[(560), float32]) -> (Tensor[(8, 3, 5), bool], Tensor[(8, 14, 5), int8], Tensor[(560), float32], Tensor[(8, 1, 5), float32], Tensor[(9, 126), float32]) {
  @func_10036(%var_10037) /* ty=(Tensor[(8, 3, 5), bool], Tensor[(8, 14, 5), int8], Tensor[(560), float32], Tensor[(8, 1, 5), float32], Tensor[(9, 126), float32]) */
}

def @func_8386() -> (Tensor[(8, 1, 5), float32],) {
  @func_8384() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_10138() -> (Tensor[(8, 1, 5), float32],) {
  %28 = @func_6526() /* ty=Tensor[(8, 1, 5), float32] */;
  (%28,)
}

def @func_5711() -> Tensor[(8, 1, 5), float32] {
  %30 = fn () -> Tensor[(8, 1, 5), float32] {
    %29 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %29.1
  };
  %30() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_7216() -> (Tensor[(6, 16, 12), uint16], Tensor[(8, 1, 5), float32]) {
  %31 = @func_6059() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(6, 16, 12), uint16], Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], uint16) */;
  %32 = %31.1;
  %33 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  (%32, %33)
}

def @func_7065() -> (Tensor[(8, 1, 5), float32],) {
  %34 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %35 = %34.0;
  (%35,)
}

def @func_3632() -> Tensor[(8, 3, 5), bool] {
  %36 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %37 = cast(%36, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %38 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 3, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
  logical_and(%37, %38) /* ty=Tensor[(8, 3, 5), bool] */
}

def @func_6305() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) {
  %51 = fn () -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) {
    %39 = @func_5997() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], bool, Tensor[(560), bool], Tensor[(504), int64]) */;
    %40 = cast(meta[relay.Constant][1] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
    %41 = reshape(%40, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
    %42 = @func_2442(%41) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
    %43 = %42.1;
    %44 = cast(%43, dtype="int16") /* ty=Tensor[(1134), int16] */;
    %45 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(1134), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(1134), float32] */, dtype="int16") /* ty=Tensor[(1134), int16] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?), int16] */;
    %48 = %39.0;
    %49 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
    %50 = bitwise_and(%46, %47) /* ty=Tensor[(1134), int16] */;
    (%48, %49, %50)
  };
  %51() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) */
}

def @func_4281() -> Tensor[(8, 1, 5), float32] {
  %53 = fn () -> Tensor[(8, 1, 5), float32] {
    %52 = @func_4153() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %52.0
  };
  %53() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_5577() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) {
  %54 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(128), float32] */, dtype="float32") /* ty=Tensor[(128), float32] */;
  %56 = reshape(%55, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float32] */;
  %57 = %54.0;
  %58 = @func_2378(%56) /* ty=Tensor[(8, 4, 16), float32] */;
  (%57, %58, meta[relay.Constant][2] /* ty=Tensor[(128), float32] */)
}

def @func_5327(%var_5325: Tensor[(1134), float32]) -> (Tensor[(7, 3, 5), float32], Tensor[(1, 105), uint64], Tensor[(10, 10, 14), float64], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32]) {
  @func_5324(%var_5325) /* ty=(Tensor[(7, 3, 5), float32], Tensor[(1, 105), uint64], Tensor[(10, 10, 14), float64], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32]) */
}

def @func_8960(%var_8942: Tensor[(3, 6, 15), float64]) -> (Tensor[(3, 6, 15), float64], Tensor[(8, 1, 5), float32]) {
  %59 = cast(%var_8942, dtype="float64") /* ty=Tensor[(3, 6, 15), float64] */;
  %60 = sqrt(%59) /* ty=Tensor[(3, 6, 15), float64] */;
  %61 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  (%60, %61)
}

def @func_9733(%var_9728: Tensor[(5, 6, 14), float32], %var_9729: Tensor[(5, 6, 14), float32]) -> (Tensor[(5, 6, 14), float32],) {
  %62 = cast(%var_9729, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %63 = shape_of(%var_9728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_9728, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %66 = floor_mod(%64, %65) /* ty=Tensor[(5, 6, 14), float32] */;
  (%66,)
}

def @func_7261() -> (Tensor[(320), float32],) {
  %69 = fn () -> (Tensor[(320), float32],) {
    %67 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
    %68 = %67.2;
    (%68,)
  };
  %69() /* ty=(Tensor[(320), float32],) */
}

def @func_6810() -> Tensor[(8, 1, 5), float32] {
  %71 = fn () -> Tensor[(8, 1, 5), float32] {
    %70 = @func_6096() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %70.0
  };
  %71() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_3634() -> Tensor[(8, 3, 5), bool] {
  @func_3632() /* ty=Tensor[(8, 3, 5), bool] */
}

def @func_10413() -> Tensor[(8, 1, 5), float32] {
  %73 = fn () -> Tensor[(8, 1, 5), float32] {
    %72 = @func_9008() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %72.0
  };
  %73() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_6570(%var_6557: Tensor[(9, 11, 15), int16]) -> (Tensor[(9, 11, 15), int16], Tensor[(8, 8, 5), uint32], Tensor[(9, 11, 15), float32]) {
  %74 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 11, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %75 = shape_of(%var_6557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_6557, dtype="int16") /* ty=Tensor[(9, 11, 15), int16] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %78 = @func_5506() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) */;
  %79 = cast(%var_6557, dtype="float32") /* ty=Tensor[(9, 11, 15), float32] */;
  %80 = left_shift(%76, %77) /* ty=Tensor[(9, 11, 15), int16] */;
  %81 = %78.1;
  %82 = erf(%79) /* ty=Tensor[(9, 11, 15), float32] */;
  (%80, %81, %82)
}

def @func_10524() -> uint16 {
  @func_4096() /* ty=uint16 */
}

def @func_5256(%var_5254: uint16, %var_5255: Tensor[(1, 980), int16]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), bool], Tensor[(8, ?, 5), float64], Tensor[(8, 1, 5), float32], uint16, Tensor[(7, 10, 14), bool], Tensor[(1, 980), int16]) {
  @func_5252(%var_5254, %var_5255) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), bool], Tensor[(8, ?, 5), float64], Tensor[(8, 1, 5), float32], uint16, Tensor[(7, 10, 14), bool], Tensor[(1, 980), int16]) */
}

def @func_3677(%var_3676: Tensor[(6, 4, 5), float32]) -> Tensor[(6, 4, 5), float64] {
  %87 = fn (%var_3668: Tensor[(6, 4, 5), float32]) -> Tensor[(6, 4, 5), float64] {
    %83 = cast(-5.22723f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %84 = cast(%var_3668, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
    %85 = floor_mod(%83, %84) /* ty=Tensor[(6, 4, 5), float32] */;
    %86 = cast(%85, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
    rsqrt(%86) /* ty=Tensor[(6, 4, 5), float64] */
  };
  %87(%var_3676) /* ty=Tensor[(6, 4, 5), float64] */
}

def @func_4856() -> uint16 {
  %88 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %88.1
}

def @func_7503() -> (uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) {
  @func_7501() /* ty=(uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) */
}

def @func_4066() -> (Tensor[(8, ?, 5), float64],) {
  %97 = fn () -> (Tensor[(8, ?, 5), float64],) {
    %89 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %90 = %89.0;
    %91 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %92 = cast(%91, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
    %93 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%90, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %96 = power(%94, %95) /* ty=Tensor[(8, ?, 5), float64] */;
    (%96,)
  };
  %97() /* ty=(Tensor[(8, ?, 5), float64],) */
}

def @func_4272() -> (Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) {
  %111 = fn () -> (Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) {
    %98 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %99 = %98.6;
    %100 = cast(%99, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
    %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 11, 5), float32] */, dtype="bool") /* ty=Tensor[(8, 11, 5), bool] */;
    %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
    %103 = reshape(%102, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
    %104 = @func_3990(%103) /* ty=(Tensor[(8, 8, 5), uint32],) */;
    %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 11, 5), float32] */, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
    %106 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
    %107 = greater_equal(%100, %101) /* ty=Tensor[(8, 11, 5), bool] */;
    %108 = %104.0;
    %109 = erf(%105) /* ty=Tensor[(8, 11, 5), float64] */;
    %110 = %106.0;
    (%107, %108, meta[relay.Constant][5] /* ty=Tensor[(320), float32] */, %109, %110)
  };
  %111() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */
}

def @func_7386() -> (Tensor[(8, 1, 5), float64], Tensor[(9, 11, 15), int16], Tensor[(1485), int16], uint16) {
  %120 = fn () -> (Tensor[(8, 1, 5), float64], Tensor[(9, 11, 15), int16], Tensor[(1485), int16], uint16) {
    %112 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
    %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(1485), int16] */, dtype="int16") /* ty=Tensor[(1485), int16] */;
    %114 = reshape(%113, newshape=[9, 11, 15]) /* ty=Tensor[(9, 11, 15), int16] */;
    %115 = @func_6570(%114) /* ty=(Tensor[(9, 11, 15), int16], Tensor[(8, 8, 5), uint32], Tensor[(9, 11, 15), float32]) */;
    %116 = @func_7254() /* ty=(uint16, Tensor[(8, 1, 5), float32]) */;
    %117 = %112.1;
    %118 = %115.0;
    %119 = %116.0;
    (%117, %118, meta[relay.Constant][6] /* ty=Tensor[(1485), int16] */, %119)
  };
  %120() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(9, 11, 15), int16], Tensor[(1485), int16], uint16) */
}

def @func_9906(%var_9905: Tensor[(8, 9, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 11, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(8, 9, 5), float32]) {
  %131 = fn (%var_9894: Tensor[(8, 9, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 11, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(8, 9, 5), float32]) {
    %121 = @func_9594() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64]) */;
    %122 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
    %123 = @func_9392() /* ty=(Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(504), int64]) */;
    %124 = @func_6526() /* ty=Tensor[(8, 1, 5), float32] */;
    %125 = cast(%124, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
    %126 = cast(%var_9894, dtype="float32") /* ty=Tensor[(8, 9, 5), float32] */;
    %127 = %121.0;
    %128 = %122.3;
    %129 = %123.1;
    %130 = subtract(%125, %126) /* ty=Tensor[(8, 9, 5), float32] */;
    (%127, %128, %129, %130)
  };
  %131(%var_9905) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 11, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(8, 9, 5), float32]) */
}

def @func_1420(%var_1414: Tensor[(1, 8, 11), float64], %var_1418: Tensor[(504), int64]) -> (Tensor[(1, 8, 11), float64], Tensor[(14, 6, 6), float32], Tensor[(504), int64]) {
  %132 = cast(%var_1414, dtype="float64") /* ty=Tensor[(1, 8, 11), float64] */;
  %133 = cast(%var_1418, dtype="int64") /* ty=Tensor[(504), int64] */;
  %134 = cast(%var_1418, dtype="int64") /* ty=Tensor[(504), int64] */;
  %135 = reshape(%133, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %136 = reshape(%134, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %137 = @func_575(%135, %136) /* ty=(Tensor[(14, 6, 6), float32],) */;
  %138 = sinh(%132) /* ty=Tensor[(1, 8, 11), float64] */;
  %139 = %137.0;
  (%138, %139, %var_1418)
}

def @func_9310() -> (uint16,) {
  %141 = fn () -> (uint16,) {
    %140 = @func_4856() /* ty=uint16 */;
    (%140,)
  };
  %141() /* ty=(uint16,) */
}

def @func_4653(%var_4651: Tensor[(600), float32], %var_4652: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(600), float32], Tensor[(1134), uint32], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) {
  %167 = fn (%var_4595: Tensor[(600), float32], %var_4612: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(600), float32], Tensor[(1134), uint32], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) {
    %142 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %143 = cast(%var_4595, dtype="float32") /* ty=Tensor[(600), float32] */;
    %144 = reshape(%143, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), float32] */;
    %145 = @func_4016(%144) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) */;
    %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
    %147 = reshape(%146, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
    %148 = @func_2694(%147) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, 7, 5), bool]) */;
    %149 = %148.1;
    %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
    %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(1), int32] */;
    %152 = cast(%149, dtype="float32") /* ty=Tensor[(1134), float32] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?), float32] */;
    %154 = floor_mod(%152, %153) /* ty=Tensor[(1134), float32] */;
    %155 = cast(%var_4612, dtype="uint32") /* ty=Tensor[(1134), uint32] */;
    %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(1), int32] */;
    %157 = cast(%154, dtype="uint32") /* ty=Tensor[(1134), uint32] */;
    %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %159 = cast(%154, dtype="float32") /* ty=Tensor[(1134), float32] */;
    %160 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %161 = @func_4501() /* ty=Tensor[(8, 1, 5), float32] */;
    %162 = %142.1;
    %163 = %145.1;
    %164 = left_shift(%157, %158) /* ty=Tensor[(1134), uint32] */;
    %165 = erf(%159) /* ty=Tensor[(1134), float32] */;
    %166 = %160.0;
    (%161, %162, %163, %var_4595, %164, %165, %166)
  };
  %167(%var_4651, %var_4652) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(600), float32], Tensor[(1134), uint32], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_3126(%var_3125: Tensor[(8, 3, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), int16], Tensor[(8, ?, 5), int16]) {
  %179 = fn (%var_3109: Tensor[(8, 3, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), int16], Tensor[(8, ?, 5), int16]) {
    %168 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %169 = cast(%168, dtype="int16") /* ty=Tensor[(8, 1, 5), int16] */;
    %170 = cast(%var_3109, dtype="int16") /* ty=Tensor[(8, 3, 5), int16] */;
    %171 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
    %172 = cast(%171, dtype="int16") /* ty=Tensor[(8, 1, 5), int16] */;
    %173 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %174 = cast(%168, dtype="int16") /* ty=Tensor[(8, 1, 5), int16] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %176 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %177 = maximum(%169, %170) /* ty=Tensor[(8, 3, 5), int16] */;
    %178 = left_shift(%174, %175) /* ty=Tensor[(8, ?, 5), int16] */;
    (%176, %177, %178)
  };
  %179(%var_3125) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), int16], Tensor[(8, ?, 5), int16]) */
}

def @func_6060() -> (Tensor[(8, 1, 5), float32], Tensor[(6, 16, 12), uint16], Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], uint16) {
  %188 = fn () -> (Tensor[(8, 1, 5), float32], Tensor[(6, 16, 12), uint16], Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], uint16) {
    %180 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
    %181 = cast(meta[relay.Constant][8] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %182 = reshape(%181, newshape=[]) /* ty=uint16 */;
    %183 = @func_3019(%182) /* ty=(Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) */;
    %184 = @func_4778() /* ty=Tensor[(8, 1, 5), float32] */;
    %185 = %180.0;
    %186 = @func_5199() /* ty=Tensor[(10, 10, 14), float32] */;
    %187 = %183.1;
    (%184, %185, %186, %187, meta[relay.Constant][8] /* ty=uint16 */)
  };
  %188() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(6, 16, 12), uint16], Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], uint16) */
}

def @func_5344() -> uint16 {
  @func_5342() /* ty=uint16 */
}

def @func_5941(%var_5908: Tensor[(980), int16], %var_5919: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint32], Tensor[(1134), float32], Tensor[(1134), float32], Tensor[(980), float32], Tensor[(8, 1, 5), float32]) {
  %189 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %190 = cast(%var_5908, dtype="int16") /* ty=Tensor[(980), int16] */;
  %191 = reshape(%189, newshape=[]) /* ty=uint16 */;
  %192 = reshape(%190, newshape=[1, 980]) /* ty=Tensor[(1, 980), int16] */;
  %193 = @func_5252(%191, %192) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), bool], Tensor[(8, ?, 5), float64], Tensor[(8, 1, 5), float32], uint16, Tensor[(7, 10, 14), bool], Tensor[(1, 980), int16]) */;
  %194 = @func_5710() /* ty=Tensor[(8, 1, 5), float32] */;
  %195 = cast(%194, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
  %196 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="uint32") /* ty=uint32 */;
  %197 = cast(%var_5919, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %198 = reshape(%197, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %199 = @func_3778(%198) /* ty=(Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) */;
  %200 = cast(%var_5908, dtype="float32") /* ty=Tensor[(980), float32] */;
  %201 = %193.3;
  %202 = add(%195, %196) /* ty=Tensor[(8, 1, 5), uint32] */;
  %203 = %199.2;
  %204 = sqrt(%200) /* ty=Tensor[(980), float32] */;
  %205 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  (%201, %202, %203, %var_5919, %204, %205)
}

def @func_8988() -> Tensor[(8, 1, 5), float64] {
  @func_8986() /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_3021(%var_3020: uint16) -> (Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) {
  %216 = fn (%var_2999: uint16) -> (Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) {
    %206 = cast(%var_2999, dtype="uint16") /* ty=uint16 */;
    %207 = reshape(%206, newshape=[]) /* ty=uint16 */;
    %208 = @func_2900(%207) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
    %209 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %210 = cast(%var_2999, dtype="float32") /* ty=float32 */;
    %211 = cast(%209, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
    %212 = divide(%210, %211) /* ty=Tensor[(8, 1, 5), float32] */;
    %213 = cast(%212, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
    %214 = %208.3;
    %215 = log(%213) /* ty=Tensor[(8, 1, 5), float32] */;
    (%214, %215)
  };
  %216(%var_3020) /* ty=(Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) */
}

def @func_10501() -> uint16 {
  %217 = @func_9967() /* ty=(uint16,) */;
  %217.0
}

def @func_8094() -> Tensor[(8, 1, 5), float64] {
  %219 = fn () -> Tensor[(8, 1, 5), float64] {
    %218 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
    %218.1
  };
  %219() /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_6098() -> (Tensor[(8, 1, 5), float32],) {
  @func_6096() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_4827(%var_4826: bool) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], bool) {
  %225 = fn (%var_4819: bool) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], bool) {
    %220 = cast(%var_4819, dtype="bool") /* ty=bool */;
    %221 = reshape(%220, newshape=[]) /* ty=bool */;
    %222 = @func_2637(%221) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(560), bool], Tensor[(504), int64], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint64], Tensor[(8, 1, 5), float32]) */;
    %223 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %224 = %222.5;
    (%223, %224, %var_4819)
  };
  %225(%var_4826) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], bool) */
}

def @func_1424(%var_1422: Tensor[(1, 8, 11), float64], %var_1423: Tensor[(504), int64]) -> (Tensor[(1, 8, 11), float64], Tensor[(14, 6, 6), float32], Tensor[(504), int64]) {
  @func_1420(%var_1422, %var_1423) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(14, 6, 6), float32], Tensor[(504), int64]) */
}

def @func_7256() -> (uint16, Tensor[(8, 1, 5), float32]) {
  @func_7254() /* ty=(uint16, Tensor[(8, 1, 5), float32]) */
}

def @func_9010() -> (Tensor[(8, 1, 5), float32],) {
  @func_9008() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_2640(%var_2638: bool) -> (Tensor[(14, 6, 6), float32], Tensor[(560), bool], Tensor[(504), int64], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint64], Tensor[(8, 1, 5), float32]) {
  @func_2637(%var_2638) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(560), bool], Tensor[(504), int64], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint64], Tensor[(8, 1, 5), float32]) */
}

def @func_4096() -> uint16 {
  %226 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %226.1
}

def @func_9737(%var_9735: Tensor[(5, 6, 14), float32], %var_9736: Tensor[(5, 6, 14), float32]) -> (Tensor[(5, 6, 14), float32],) {
  @func_9733(%var_9735, %var_9736) /* ty=(Tensor[(5, 6, 14), float32],) */
}

def @func_2337() -> (Tensor[(8, 1, 5), float32],) {
  %229 = fn () -> (Tensor[(8, 1, 5), float32],) {
    %227 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %228 = %227.0;
    (%228,)
  };
  %229() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_3229() -> (Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) {
  %230 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %233 = reshape(%230, newshape=[]) /* ty=uint16 */;
  %234 = reshape(%231, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
  %235 = reshape(%232, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %236 = @func_2135(%233, %234, %235) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %237 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %240 = %236.0;
  %241 = atanh(%239) /* ty=Tensor[(8, 1, 5), float64] */;
  (%240, meta[relay.Constant][10] /* ty=uint16 */, meta[relay.Constant][11] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][12] /* ty=Tensor[(504), int64] */, %241)
}

def @func_6878(%var_6877: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) {
  %249 = fn (%var_6869: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) {
    %242 = cast(%var_6869, dtype="float32") /* ty=Tensor[(1134), float32] */;
    %243 = reshape(%242, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float32] */;
    %244 = @func_1716(%243) /* ty=(Tensor[(9, 14, 9), uint64],) */;
    %245 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %246 = @func_5710() /* ty=Tensor[(8, 1, 5), float32] */;
    %247 = %244.0;
    %248 = %245.1;
    (%246, %247, %var_6869, %248)
  };
  %249(%var_6877) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_8827() -> (Tensor[(8, 1, 5), float64],) {
  %250 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %251 = %250.1;
  (%251,)
}

def @func_10624() -> (Tensor[(8, ?, 5), float64],) {
  %254 = fn () -> (Tensor[(8, ?, 5), float64],) {
    %252 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
    %253 = %252.0;
    (%253,)
  };
  %254() /* ty=(Tensor[(8, ?, 5), float64],) */
}

def @func_2694(%var_2667: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, 7, 5), bool]) {
  %255 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %256 = cast(%var_2667, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %257 = reshape(%256, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %258 = @func_2442(%257) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %259 = %258.0;
  %260 = cast(%259, dtype="bool") /* ty=Tensor[(8, ?, 5), bool] */;
  %261 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 7, 5), float64] */, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %262 = equal(%260, %261) /* ty=Tensor[(8, 7, 5), bool] */;
  %263 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 7, 5), bool] */, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="bool") /* ty=Tensor[(8, 7, 5), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %267 = %255.0;
  %268 = less(%265, %266) /* ty=Tensor[(8, 7, 5), bool] */;
  (%267, %var_2667, %268)
}

def @func_2305() -> (Tensor[(8, 1, 5), float32],) {
  %269 = cast(-2.48814f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %270 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %271 = maximum(%269, %270) /* ty=Tensor[(8, 1, 5), float32] */;
  (%271,)
}

def @func_2814() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %286 = fn () -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
    %272 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %273 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %274 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %275 = %274.0;
    %276 = cast(%275, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
    %277 = cast(meta[relay.Constant][16] /* ty=Tensor[(1400), float32] */, dtype="float32") /* ty=Tensor[(1400), float32] */;
    %278 = reshape(%277, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), float32] */;
    %279 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %280 = %272.0;
    %281 = %273.0;
    %282 = rsqrt(%276) /* ty=Tensor[(8, 1, 5), float64] */;
    %283 = @func_2019(%278) /* ty=Tensor[(10, 10, 14), float32] */;
    %284 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %285 = %279.0;
    (%280, %281, %282, %283, meta[relay.Constant][16] /* ty=Tensor[(1400), float32] */, %284, %285)
  };
  %286() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_5529() -> Tensor[(8, 1, 5), float32] {
  %287 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %287.0
}

def @func_6169() -> (uint16,) {
  %289 = fn () -> (uint16,) {
    %288 = @func_4856() /* ty=uint16 */;
    (%288,)
  };
  %289() /* ty=(uint16,) */
}

def @func_8986() -> Tensor[(8, 1, 5), float64] {
  %290 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %290.1
}

def @func_6663() -> (Tensor[(8, ?, 5), float64],) {
  @func_6661() /* ty=(Tensor[(8, ?, 5), float64],) */
}

def @func_7533() -> Tensor[(8, 1, 5), float32] {
  %291 = fn () -> Tensor[(8, 1, 5), float32] {
    @func_4751() /* ty=Tensor[(8, 1, 5), float32] */
  };
  %291() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_9079(%var_9077: Tensor[(8, 13, 5), float32]) -> (Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) {
  @func_9076(%var_9077) /* ty=(Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) */
}

def @func_8012(%var_7994: Tensor[(504), int64]) -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], Tensor[(88), float64], Tensor[(504), int64]) {
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %293 = cast(%var_7994, dtype="int64") /* ty=Tensor[(504), int64] */;
  %294 = reshape(%292, newshape=[1, 8, 11]) /* ty=Tensor[(1, 8, 11), float64] */;
  %295 = reshape(%293, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %296 = @func_1420(%294, %295) /* ty=(Tensor[(1, 8, 11), float64], Tensor[(14, 6, 6), float32], Tensor[(504), int64]) */;
  %297 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
  %298 = %296.1;
  (%297, %298, meta[relay.Constant][17] /* ty=Tensor[(88), float64] */, %var_7994)
}

def @func_2380(%var_2379: Tensor[(8, 1, 16), float32]) -> Tensor[(8, 4, 16), float32] {
  %301 = fn (%var_2373: Tensor[(8, 1, 16), float32]) -> Tensor[(8, 4, 16), float32] {
    %299 = cast(%var_2373, dtype="float32") /* ty=Tensor[(8, 1, 16), float32] */;
    %300 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 4, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 4, 16), float32] */;
    divide(%299, %300) /* ty=Tensor[(8, 4, 16), float32] */
  };
  %301(%var_2379) /* ty=Tensor[(8, 4, 16), float32] */
}

def @func_5579() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) {
  @func_5577() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) */
}

def @func_8767() -> (Tensor[(1, 15, 14), float32],) {
  %304 = fn () -> (Tensor[(1, 15, 14), float32],) {
    %302 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 14), float32] */;
    %303 = rsqrt(%302) /* ty=Tensor[(1, 15, 14), float32] */;
    (%303,)
  };
  %304() /* ty=(Tensor[(1, 15, 14), float32],) */
}

def @func_5951() -> (Tensor[(8, 1, 5), float32],) {
  @func_5949() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_5949() -> (Tensor[(8, 1, 5), float32],) {
  %305 = @func_4153() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %306 = %305.0;
  (%306,)
}

def @func_8522() -> (Tensor[(8, 4, 16), float32],) {
  @func_8520() /* ty=(Tensor[(8, 4, 16), float32],) */
}

def @func_5648(%var_5628: Tensor[(120), bool]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), uint64], Tensor[(120), bool], Tensor[(8, 3, 5), int16]) {
  %307 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %308 = cast(%var_5628, dtype="bool") /* ty=Tensor[(120), bool] */;
  %309 = reshape(%308, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), bool] */;
  %310 = @func_4961(%309) /* ty=Tensor[(8, 3, 5), uint64] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %312 = reshape(%311, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
  %313 = @func_3124(%312) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), int16], Tensor[(8, ?, 5), int16]) */;
  %314 = @func_5545() /* ty=Tensor[(8, 1, 5), float32] */;
  %315 = %307.0;
  %316 = %313.1;
  (%314, %315, %310, %var_5628, %316)
}

def @func_4459() -> (Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) {
  %317 = cast(meta[relay.Constant][20] /* ty=Tensor[(1134), float32] */, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %318 = reshape(%317, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %319 = @func_2442(%318) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float32") /* ty=Tensor[(8, ?, 5), float32] */;
  %322 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %323 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %324 = sqrt(%321) /* ty=Tensor[(8, ?, 5), float32] */;
  %325 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  %326 = %322.3;
  (%323, meta[relay.Constant][20] /* ty=Tensor[(1134), float32] */, %324, %325, %326)
}

def @func_5762(%var_5749: Tensor[(8, 1, 5), float32]) -> Tensor[(8, ?, 5), int32] {
  %327 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %328 = %327.5;
  %329 = cast(%var_5749, dtype="int32") /* ty=Tensor[(8, 1, 5), int32] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="int32") /* ty=Tensor[(8, 1, 5), int32] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%331, %332) /* ty=Tensor[(8, ?, 5), int32] */
}

def @func_8064(%var_8063: Tensor[(8, 3, 5), bool]) -> (Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), bool], Tensor[(20, 70), float32]) {
  %345 = fn (%var_8046: Tensor[(8, 3, 5), bool]) -> (Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), bool], Tensor[(20, 70), float32]) {
    %333 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
    %334 = cast(%var_8046, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
    %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%333, dtype="float64") /* ty=Tensor[(8, 3, 5), float64] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %338 = cast(meta[relay.Constant][21] /* ty=Tensor[(20, 70), float32] */, dtype="float32") /* ty=Tensor[(20, 70), float32] */;
    %339 = floor_mod(%336, %337) /* ty=Tensor[(8, 3, 5), float64] */;
    %340 = cast(%339, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
    %341 = reshape(%338, newshape=[700, 2]) /* ty=Tensor[(700, 2), float32] */;
    %342 = reshape(%340, newshape=[8, 3, 5]) /* ty=Tensor[(8, 3, 5), float32] */;
    %343 = @func_6362(%341, %342) /* ty=(Tensor[(10, 10, 14), float32], Tensor[(700, 2), float32], Tensor[(8, 3, 5), bool], Tensor[(8, 3, 5), float32]) */;
    %344 = %343.2;
    (%339, %344, meta[relay.Constant][21] /* ty=Tensor[(20, 70), float32] */)
  };
  %345(%var_8063) /* ty=(Tensor[(8, 3, 5), float64], Tensor[(8, 3, 5), bool], Tensor[(20, 70), float32]) */
}

def @func_6435(%var_6425: Tensor[(8, 14, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) {
  %346 = @func_4501() /* ty=Tensor[(8, 1, 5), float32] */;
  %347 = cast(%346, dtype="int8") /* ty=Tensor[(8, 1, 5), int8] */;
  %348 = cast(%var_6425, dtype="int8") /* ty=Tensor[(8, 14, 5), int8] */;
  %349 = @func_5529() /* ty=Tensor[(8, 1, 5), float32] */;
  %350 = add(%347, %348) /* ty=Tensor[(8, 14, 5), int8] */;
  (%349, %350)
}

def @func_9271() -> (Tensor[(8, 8, 5), uint32],) {
  %353 = fn () -> (Tensor[(8, 8, 5), uint32],) {
    %351 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
    %352 = %351.1;
    (%352,)
  };
  %353() /* ty=(Tensor[(8, 8, 5), uint32],) */
}

def @func_3993(%var_3991: Tensor[(8, 8, 5), float32]) -> (Tensor[(8, 8, 5), uint32],) {
  @func_3990(%var_3991) /* ty=(Tensor[(8, 8, 5), uint32],) */
}

def @func_7102() -> (Tensor[(8, 1, 5), float32],) {
  @func_7100() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_7218() -> (Tensor[(6, 16, 12), uint16], Tensor[(8, 1, 5), float32]) {
  @func_7216() /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(8, 1, 5), float32]) */
}

def @func_9596() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64]) {
  @func_9594() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64]) */
}

def @func_9651() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  @func_9649() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_5342() -> uint16 {
  @func_4856() /* ty=uint16 */
}

def @func_6941() -> Tensor[(8, 1, 5), float64] {
  @func_6939() /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_2022(%var_2020: Tensor[(10, 10, 14), float32]) -> Tensor[(10, 10, 14), float32] {
  @func_2019(%var_2020) /* ty=Tensor[(10, 10, 14), float32] */
}

def @func_5078(%var_5076: Tensor[(320), float32], %var_5077: uint16) -> (Tensor[(1152), uint16], Tensor[(320), float32], Tensor[(6, 16, 12), uint16], uint16, Tensor[(504), int64], Tensor[(8, 8, 5), uint32], Tensor[(504), int64], Tensor[(560), bool], Tensor[(8, 8, 5), float32], Tensor[(8, 1, 5), float32]) {
  @func_5074(%var_5076, %var_5077) /* ty=(Tensor[(1152), uint16], Tensor[(320), float32], Tensor[(6, 16, 12), uint16], uint16, Tensor[(504), int64], Tensor[(8, 8, 5), uint32], Tensor[(504), int64], Tensor[(560), bool], Tensor[(8, 8, 5), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_7959() -> (uint16,) {
  %355 = fn () -> (uint16,) {
    %354 = @func_5342() /* ty=uint16 */;
    (%354,)
  };
  %355() /* ty=(uint16,) */
}

def @func_10203(%var_10202: Tensor[(4, 15, 9), float64]) -> (Tensor[(8, ?, 5), float32], Tensor[(4, 15, 9), float32], Tensor[(8, ?, 5), float64], Tensor[(520), float32]) {
  %376 = fn (%var_10154: Tensor[(4, 15, 9), float64]) -> (Tensor[(8, ?, 5), float32], Tensor[(4, 15, 9), float32], Tensor[(8, ?, 5), float64], Tensor[(520), float32]) {
    %356 = @func_9353() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, ?, 5), float32]) */;
    %357 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
    %358 = shape_of(%var_10154, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%var_10154, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %361 = power(%359, %360) /* ty=Tensor[(4, 15, 9), float64] */;
    %362 = cast(%361, dtype="float64") /* ty=Tensor[(4, 15, 9), float64] */;
    %363 = exp(%362) /* ty=Tensor[(4, 15, 9), float64] */;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(4, 15, 9), float32] */;
    %365 = log2(%364) /* ty=Tensor[(4, 15, 9), float32] */;
    %366 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 9), float32] */;
    %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %368 = cast(%365, dtype="float32") /* ty=Tensor[(4, 15, 9), float32] */;
    %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %370 = cast(meta[relay.Constant][24] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %371 = reshape(%370, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
    %372 = @func_9076(%371) /* ty=(Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) */;
    %373 = %356.1;
    %374 = subtract(%368, %369) /* ty=Tensor[(4, 15, 9), float32] */;
    %375 = %372.2;
    (%373, %374, %375, meta[relay.Constant][24] /* ty=Tensor[(520), float32] */)
  };
  %376(%var_10202) /* ty=(Tensor[(8, ?, 5), float32], Tensor[(4, 15, 9), float32], Tensor[(8, ?, 5), float64], Tensor[(520), float32]) */
}

def @func_7424(%var_7422: Tensor[(7, 1, 2), float32], %var_7423: Tensor[(7, 12, 2), float32]) -> (Tensor[(7, 12, 2), float32],) {
  @func_7420(%var_7422, %var_7423) /* ty=(Tensor[(7, 12, 2), float32],) */
}

def @func_10347() -> (Tensor[(1134), int16], Tensor[(8, 1, 5), float32], Tensor[(520), float32], Tensor[(8, 3, 5), bool], Tensor[(560), float32], Tensor[(1134), float32]) {
  @func_10345() /* ty=(Tensor[(1134), int16], Tensor[(8, 1, 5), float32], Tensor[(520), float32], Tensor[(8, 3, 5), bool], Tensor[(560), float32], Tensor[(1134), float32]) */
}

def @func_10112() -> (Tensor[(320), float32],) {
  %379 = fn () -> (Tensor[(320), float32],) {
    %377 = @func_4271() /* ty=(Tensor[(8, 11, 5), bool], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 11, 5), float64], Tensor[(8, ?, 5), float64]) */;
    %378 = %377.2;
    (%378,)
  };
  %379() /* ty=(Tensor[(320), float32],) */
}

def @func_5998() -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], bool, Tensor[(560), bool], Tensor[(504), int64]) {
  %390 = fn () -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], bool, Tensor[(560), bool], Tensor[(504), int64]) {
    %380 = @func_5577() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) */;
    %381 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %382 = cast(meta[relay.Constant][25] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
    %383 = cast(meta[relay.Constant][26] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
    %384 = reshape(%381, newshape=[]) /* ty=bool */;
    %385 = reshape(%382, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), bool] */;
    %386 = reshape(%383, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %387 = @func_1241(%384, %385, %386) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) */;
    %388 = %380.0;
    %389 = %387.0;
    (%388, %389, False /* ty=bool */, meta[relay.Constant][25] /* ty=Tensor[(560), bool] */, meta[relay.Constant][26] /* ty=Tensor[(504), int64] */)
  };
  %390() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], bool, Tensor[(560), bool], Tensor[(504), int64]) */
}

def @func_4154() -> (Tensor[(8, 1, 5), float32],) {
  %394 = fn () -> (Tensor[(8, 1, 5), float32],) {
    %391 = @func_3475() /* ty=Tensor[(8, 1, 5), float32] */;
    %392 = cast(%391, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
    %393 = erf(%392) /* ty=Tensor[(8, 1, 5), float32] */;
    (%393,)
  };
  %394() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_2572() -> (Tensor[(8, 1, 5), float32],) {
  %397 = fn () -> (Tensor[(8, 1, 5), float32],) {
    %395 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %396 = %395.0;
    (%396,)
  };
  %397() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_10285() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(560), float32]) {
  @func_10283() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(560), float32]) */
}

def @func_8798() -> Tensor[(8, 1, 5), float64] {
  %399 = fn () -> Tensor[(8, 1, 5), float64] {
    %398 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
    %398.0
  };
  %399() /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_6362(%var_6349: Tensor[(700, 2), float32], %var_6351: Tensor[(8, 3, 5), float32]) -> (Tensor[(10, 10, 14), float32], Tensor[(700, 2), float32], Tensor[(8, 3, 5), bool], Tensor[(8, 3, 5), float32]) {
  %400 = cast(%var_6349, dtype="float32") /* ty=Tensor[(700, 2), float32] */;
  %401 = reshape(%400, newshape=[1400]) /* ty=Tensor[(1400), float32] */;
  %402 = @func_4941(%401) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) */;
  %403 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %404 = %403.1;
  %405 = cast(%404, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %406 = cast(%var_6351, dtype="bool") /* ty=Tensor[(8, 3, 5), bool] */;
  %407 = cast(%var_6351, dtype="float32") /* ty=Tensor[(8, 3, 5), float32] */;
  %408 = %402.1;
  %409 = greater(%405, %406) /* ty=Tensor[(8, 3, 5), bool] */;
  %410 = sinh(%407) /* ty=Tensor[(8, 3, 5), float32] */;
  (%408, %var_6349, %409, %410)
}

def @func_9170(%var_9169: Tensor[(8, 16, 5), float32]) -> (Tensor[(8, 16, 5), uint64], Tensor[(8, 16, 5), float64]) {
  %421 = fn (%var_9121: Tensor[(8, 16, 5), float32]) -> (Tensor[(8, 16, 5), uint64], Tensor[(8, 16, 5), float64]) {
    %411 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %412 = cast(%var_9121, dtype="uint64") /* ty=Tensor[(8, 16, 5), uint64] */;
    %413 = cast(%411, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
    %414 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
    %415 = cast(%414, dtype="uint16") /* ty=Tensor[(8, 1, 5), uint16] */;
    %416 = cast(%var_9121, dtype="uint16") /* ty=Tensor[(8, 16, 5), uint16] */;
    %417 = minimum(%415, %416) /* ty=Tensor[(8, 16, 5), uint16] */;
    %418 = cast(%417, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
    %419 = bitwise_xor(%412, %413) /* ty=Tensor[(8, 16, 5), uint64] */;
    %420 = cosh(%418) /* ty=Tensor[(8, 16, 5), float64] */;
    (%419, %420)
  };
  %421(%var_9169) /* ty=(Tensor[(8, 16, 5), uint64], Tensor[(8, 16, 5), float64]) */
}

def @func_7420(%var_7387: Tensor[(7, 1, 2), float32], %var_7388: Tensor[(7, 12, 2), float32]) -> (Tensor[(7, 12, 2), float32],) {
  %422 = cast(%var_7387, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
  %423 = cast(%var_7388, dtype="float32") /* ty=Tensor[(7, 12, 2), float32] */;
  %424 = multiply(%422, %423) /* ty=Tensor[(7, 12, 2), float32] */;
  (%424,)
}

def @func_10573() -> (uint16,) {
  %426 = fn () -> (uint16,) {
    %425 = @func_10524() /* ty=uint16 */;
    (%425,)
  };
  %426() /* ty=(uint16,) */
}

def @func_9968() -> (uint16,) {
  %429 = fn () -> (uint16,) {
    %427 = @func_8893() /* ty=(uint16, uint16) */;
    %428 = %427.1;
    (%428,)
  };
  %429() /* ty=(uint16,) */
}

def @func_7447() -> (uint16, Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 8, 5), uint32]) {
  %430 = @func_6168() /* ty=(uint16,) */;
  %431 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %432 = cast(meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %433 = reshape(%432, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %434 = @func_3990(%433) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %435 = cast(meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, dtype="float32") /* ty=Tensor[(320), float32] */;
  %436 = reshape(%435, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %437 = @func_3990(%436) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %438 = %430.0;
  %439 = %431.3;
  %440 = %434.0;
  %441 = %437.0;
  (%438, %439, %440, meta[relay.Constant][27] /* ty=Tensor[(320), float32] */, %441)
}

def @func_10461() -> Tensor[(13, 6, 13), float64] {
  %443 = fn () -> Tensor[(13, 6, 13), float64] {
    %442 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
    log10(%442) /* ty=Tensor[(13, 6, 13), float64] */
  };
  %443() /* ty=Tensor[(13, 6, 13), float64] */
}

def @func_8829() -> (Tensor[(8, 1, 5), float64],) {
  @func_8827() /* ty=(Tensor[(8, 1, 5), float64],) */
}

def @func_2445(%var_2443: Tensor[(1134), float32]) -> (Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) {
  @func_2442(%var_2443) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */
}

def @func_2902(%var_2901: uint16) -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) {
  %462 = fn (%var_2886: uint16) -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) {
    %444 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %445 = cast(%var_2886, dtype="uint16") /* ty=uint16 */;
    %446 = cast(meta[relay.Constant][29] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
    %447 = cast(meta[relay.Constant][30] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
    %448 = reshape(%445, newshape=[]) /* ty=uint16 */;
    %449 = reshape(%446, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
    %450 = reshape(%447, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %451 = @func_2135(%448, %449, %450) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
    %452 = cast(%var_2886, dtype="uint16") /* ty=uint16 */;
    %453 = cast(meta[relay.Constant][29] /* ty=Tensor[(1152), uint16] */, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
    %454 = cast(meta[relay.Constant][30] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
    %455 = reshape(%452, newshape=[]) /* ty=uint16 */;
    %456 = reshape(%453, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
    %457 = reshape(%454, newshape=[504]) /* ty=Tensor[(504), int64] */;
    %458 = @func_2135(%455, %456, %457) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
    %459 = %444.0;
    %460 = %451.3;
    %461 = %458.1;
    (%459, %460, %var_2886, meta[relay.Constant][29] /* ty=Tensor[(1152), uint16] */, meta[relay.Constant][30] /* ty=Tensor[(504), int64] */, %461)
  };
  %462(%var_2901) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */
}

def @func_8253(%var_8185: Tensor[(2, 9, 14), int64], %var_8186: Tensor[(2, 9, 14), int64], %var_8193: Tensor[(2, 9, 14), int64]) -> (Tensor[(2, 9, 14), int64], Tensor[(8, 1, 5), float64], Tensor[(2, 9, 14), int16], Tensor[(8, 1, 5), float32]) {
  %463 = cast(%var_8193, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %464 = shape_of(%var_8186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_8186, dtype="int64") /* ty=Tensor[(2, 9, 14), int64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %467 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %468 = cast(%var_8186, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %469 = shape_of(%var_8185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_8185, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %472 = less_equal(%470, %471) /* ty=Tensor[(2, 9, 14), bool] */;
  %473 = cast(%var_8185, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="int16") /* ty=Tensor[(2, 9, 14), int16] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %477 = logical_xor(%465, %466) /* ty=Tensor[(2, 9, 14), int64] */;
  %478 = %467.0;
  %479 = right_shift(%475, %476) /* ty=Tensor[(2, 9, 14), int16] */;
  %480 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
  (%477, %478, %479, %480)
}

def @func_3476() -> Tensor[(8, 1, 5), float32] {
  %482 = fn () -> Tensor[(8, 1, 5), float32] {
    %481 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %481.0
  };
  %482() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_5324(%var_5322: Tensor[(1134), float32]) -> (Tensor[(7, 3, 5), float32], Tensor[(1, 105), uint64], Tensor[(10, 10, 14), float64], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32]) {
  %483 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 105), uint64] */, dtype="uint64") /* ty=Tensor[(1, 105), uint64] */;
  %484 = reshape(%483, newshape=[7, 3, 5]) /* ty=Tensor[(7, 3, 5), uint64] */;
  %485 = @func_3917(%484) /* ty=(Tensor[(7, 3, 5), float32],) */;
  %486 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %487 = %486.4;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  %489 = asinh(%488) /* ty=Tensor[(10, 10, 14), float32] */;
  %490 = cast(%487, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%489, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %494 = cast(%var_5322, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %495 = reshape(%494, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float32] */;
  %496 = @func_1716(%495) /* ty=(Tensor[(9, 14, 9), uint64],) */;
  %497 = %485.0;
  %498 = power(%492, %493) /* ty=Tensor[(10, 10, 14), float64] */;
  %499 = %496.0;
  (%497, meta[relay.Constant][31] /* ty=Tensor[(1, 105), uint64] */, %498, %499, %var_5322)
}

def @func_4858() -> uint16 {
  @func_4856() /* ty=uint16 */
}

def @func_9392() -> (Tensor[(8, 1, 5), float64], Tensor[(8, 1, 5), float64], Tensor[(504), int64]) {
  %500 = @func_8827() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %501 = @func_8939() /* ty=Tensor[(8, 1, 5), float64] */;
  %502 = %500.0;
  %503 = @func_3405() /* ty=Tensor[(504), int64] */;
  (%501, %502, %503)
}

def @func_9547() -> Tensor[(10, 10, 14), float32] {
  %505 = fn () -> Tensor[(10, 10, 14), float32] {
    %504 = @func_7722() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) */;
    %504.0
  };
  %505() /* ty=Tensor[(10, 10, 14), float32] */
}

def @func_5274() -> (Tensor[(8, ?, 5), float32],) {
  %506 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %507 = %506.2;
  (%507,)
}

def @func_5945(%var_5943: Tensor[(980), int16], %var_5944: Tensor[(1134), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint32], Tensor[(1134), float32], Tensor[(1134), float32], Tensor[(980), float32], Tensor[(8, 1, 5), float32]) {
  @func_5941(%var_5943, %var_5944) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint32], Tensor[(1134), float32], Tensor[(1134), float32], Tensor[(980), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_8893() -> (uint16, uint16) {
  %508 = @func_6990() /* ty=uint16 */;
  %509 = @func_6990() /* ty=uint16 */;
  (%508, %509)
}

def @func_6366(%var_6364: Tensor[(700, 2), float32], %var_6365: Tensor[(8, 3, 5), float32]) -> (Tensor[(10, 10, 14), float32], Tensor[(700, 2), float32], Tensor[(8, 3, 5), bool], Tensor[(8, 3, 5), float32]) {
  @func_6362(%var_6364, %var_6365) /* ty=(Tensor[(10, 10, 14), float32], Tensor[(700, 2), float32], Tensor[(8, 3, 5), bool], Tensor[(8, 3, 5), float32]) */
}

def @func_10102(%var_10101: Tensor[(520), float32]) -> (Tensor[(520), float32], Tensor[(8, ?, 5), uint32]) {
  %521 = fn (%var_10057: Tensor[(520), float32]) -> (Tensor[(520), float32], Tensor[(8, ?, 5), uint32]) {
    %510 = cast(%var_10057, dtype="float32") /* ty=Tensor[(520), float32] */;
    %511 = reshape(%510, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
    %512 = @func_9076(%511) /* ty=(Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) */;
    %513 = %512.2;
    %514 = @func_4530() /* ty=(Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %515 = %514.2;
    %516 = cast(%515, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
    %517 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%513, dtype="uint32") /* ty=Tensor[(8, ?, 5), uint32] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %520 = logical_xor(%518, %519) /* ty=Tensor[(8, ?, 5), uint32] */;
    (%var_10057, %520)
  };
  %521(%var_10101) /* ty=(Tensor[(520), float32], Tensor[(8, ?, 5), uint32]) */
}

def @func_6438(%var_6436: Tensor[(8, 14, 5), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) {
  @func_6435(%var_6436) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) */
}

def @func_7603(%var_7602: Tensor[(8, 14, 5), float32]) -> (Tensor[(8, 14, 5), bool], Tensor[(8, ?, 5), int32], Tensor[(10, 10, 14), float32]) {
  %530 = fn (%var_7557: Tensor[(8, 14, 5), float32]) -> (Tensor[(8, 14, 5), bool], Tensor[(8, ?, 5), int32], Tensor[(10, 10, 14), float32]) {
    %522 = @func_6096() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %523 = %522.0;
    %524 = cast(%523, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
    %525 = cast(%var_7557, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
    %526 = @func_7501() /* ty=(uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) */;
    %527 = less(%524, %525) /* ty=Tensor[(8, 14, 5), bool] */;
    %528 = %526.1;
    %529 = @func_5199() /* ty=Tensor[(10, 10, 14), float32] */;
    (%527, %528, %529)
  };
  %530(%var_7602) /* ty=(Tensor[(8, 14, 5), bool], Tensor[(8, ?, 5), int32], Tensor[(10, 10, 14), float32]) */
}

def @func_8015(%var_8013: Tensor[(504), int64]) -> (Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], Tensor[(88), float64], Tensor[(504), int64]) {
  @func_8012(%var_8013) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], Tensor[(88), float64], Tensor[(504), int64]) */
}

def @func_4779() -> Tensor[(8, 1, 5), float32] {
  %531 = fn () -> Tensor[(8, 1, 5), float32] {
    @func_4280() /* ty=Tensor[(8, 1, 5), float32] */
  };
  %531() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_5506() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) {
  %532 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %533 = %532.0;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %535 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 40), float32] */, dtype="float32") /* ty=Tensor[(8, 40), float32] */;
  %536 = reshape(%535, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %537 = @func_3990(%536) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %538 = acosh(%534) /* ty=Tensor[(8, 1, 5), float32] */;
  %539 = %537.0;
  (%538, %539, meta[relay.Constant][32] /* ty=Tensor[(8, 40), float32] */)
}

def @func_8384() -> (Tensor[(8, 1, 5), float32],) {
  %540 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  (%540,)
}

def @func_5508() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) {
  @func_5506() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) */
}

def @func_6393() -> (Tensor[(10, 10, 14), float32],) {
  %541 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
  %542 = %541.4;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(10, 10, 14), float32] */;
  %544 = acos(%543) /* ty=Tensor[(10, 10, 14), float32] */;
  (%544,)
}

def @func_8685() -> (Tensor[(600), float32], Tensor[(8, 15, 5), uint32], Tensor[(8, 1, 5), float32], Tensor[(2016), float64]) {
  %558 = fn () -> (Tensor[(600), float32], Tensor[(8, 15, 5), uint32], Tensor[(8, 1, 5), float32], Tensor[(2016), float64]) {
    %545 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %546 = %545.0;
    %547 = cast(meta[relay.Constant][33] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %548 = reshape(%547, newshape=[8, 15, 5]) /* ty=Tensor[(8, 15, 5), float32] */;
    %549 = @func_4016(%548) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) */;
    %550 = %549.0;
    %551 = cast(%546, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
    %552 = cast(%550, dtype="uint32") /* ty=Tensor[(8, 15, 5), uint32] */;
    %553 = cast(meta[relay.Constant][34] /* ty=Tensor[(2016), float64] */, dtype="float64") /* ty=Tensor[(2016), float64] */;
    %554 = reshape(%553, newshape=[16, 9, 14]) /* ty=Tensor[(16, 9, 14), float64] */;
    %555 = @func_3508(%554) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(16, 9, 14), int64]) */;
    %556 = bitwise_or(%551, %552) /* ty=Tensor[(8, 15, 5), uint32] */;
    %557 = %555.0;
    (meta[relay.Constant][33] /* ty=Tensor[(600), float32] */, %556, %557, meta[relay.Constant][34] /* ty=Tensor[(2016), float64] */)
  };
  %558() /* ty=(Tensor[(600), float32], Tensor[(8, 15, 5), uint32], Tensor[(8, 1, 5), float32], Tensor[(2016), float64]) */
}

def @func_9710(%var_9709: Tensor[(315), int64]) -> (Tensor[(10, 10, 14), float32], Tensor[(15, 7, 3), int64], Tensor[(315), int64], Tensor[(8, 2, 5), int64], Tensor[(80), float64]) {
  %569 = fn (%var_9669: Tensor[(315), int64]) -> (Tensor[(10, 10, 14), float32], Tensor[(15, 7, 3), int64], Tensor[(315), int64], Tensor[(8, 2, 5), int64], Tensor[(80), float64]) {
    %559 = @func_7722() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) */;
    %560 = cast(%var_9669, dtype="int64") /* ty=Tensor[(315), int64] */;
    %561 = reshape(%560, newshape=[15, 7, 3]) /* ty=Tensor[(15, 7, 3), int64] */;
    %562 = @func_9466(%561) /* ty=(Tensor[(15, 7, 3), int64],) */;
    %563 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
    %564 = reshape(%563, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), float64] */;
    %565 = @func_9232(%564) /* ty=(Tensor[(8, 2, 5), int64],) */;
    %566 = %559.0;
    %567 = %562.0;
    %568 = %565.0;
    (%566, %567, %var_9669, %568, meta[relay.Constant][35] /* ty=Tensor[(80), float64] */)
  };
  %569(%var_9709) /* ty=(Tensor[(10, 10, 14), float32], Tensor[(15, 7, 3), int64], Tensor[(315), int64], Tensor[(8, 2, 5), int64], Tensor[(80), float64]) */
}

def @func_6122() -> (uint16, Tensor[(8, 1, 5), float64]) {
  @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */
}

def @func_4502() -> Tensor[(8, 1, 5), float32] {
  %570 = fn () -> Tensor[(8, 1, 5), float32] {
    @func_2513() /* ty=Tensor[(8, 1, 5), float32] */
  };
  %570() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_6573(%var_6571: Tensor[(9, 11, 15), int16]) -> (Tensor[(9, 11, 15), int16], Tensor[(8, 8, 5), uint32], Tensor[(9, 11, 15), float32]) {
  @func_6570(%var_6571) /* ty=(Tensor[(9, 11, 15), int16], Tensor[(8, 8, 5), uint32], Tensor[(9, 11, 15), float32]) */
}

def @func_8895() -> (uint16, uint16) {
  @func_8893() /* ty=(uint16, uint16) */
}

def @func_9232(%var_9213: Tensor[(8, 2, 5), float64]) -> (Tensor[(8, 2, 5), int64],) {
  %571 = @func_8797() /* ty=Tensor[(8, 1, 5), float64] */;
  %572 = cast(%571, dtype="int64") /* ty=Tensor[(8, 1, 5), int64] */;
  %573 = cast(%var_9213, dtype="int64") /* ty=Tensor[(8, 2, 5), int64] */;
  %574 = bitwise_or(%572, %573) /* ty=Tensor[(8, 2, 5), int64] */;
  (%574,)
}

def @func_2139(%var_2136: uint16, %var_2137: Tensor[(6, 16, 12), uint16], %var_2138: Tensor[(504), int64]) -> (Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) {
  %590 = fn (%var_2094: uint16, %var_2095: Tensor[(6, 16, 12), uint16], %var_2128: Tensor[(504), int64]) -> (Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) {
    %575 = cast(%var_2094, dtype="uint16") /* ty=uint16 */;
    %576 = cast(%var_2095, dtype="uint16") /* ty=Tensor[(6, 16, 12), uint16] */;
    %577 = cast(%var_2128, dtype="int64") /* ty=Tensor[(504), int64] */;
    %578 = cast(%var_2128, dtype="int64") /* ty=Tensor[(504), int64] */;
    %579 = reshape(%577, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
    %580 = reshape(%578, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
    %581 = @func_575(%579, %580) /* ty=(Tensor[(14, 6, 6), float32],) */;
    %582 = cast(%var_2128, dtype="int64") /* ty=Tensor[(504), int64] */;
    %583 = %581.0;
    %584 = cast(%583, dtype="int64") /* ty=Tensor[(14, 6, 6), int64] */;
    %585 = reshape(%582, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
    %586 = reshape(%584, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
    %587 = @func_575(%585, %586) /* ty=(Tensor[(14, 6, 6), float32],) */;
    %588 = minimum(%575, %576) /* ty=Tensor[(6, 16, 12), uint16] */;
    %589 = %587.0;
    (%588, %583, %var_2128, %589)
  };
  %590(%var_2136, %var_2137, %var_2138) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */
}

def @func_1246(%var_1243: bool, %var_1244: Tensor[(4, 10, 14), bool], %var_1245: Tensor[(504), int64]) -> (Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) {
  @func_1241(%var_1243, %var_1244, %var_1245) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) */
}

def @func_5546() -> Tensor[(8, 1, 5), float32] {
  %592 = fn () -> Tensor[(8, 1, 5), float32] {
    %591 = @func_4153() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %591.0
  };
  %592() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_6992() -> uint16 {
  @func_6990() /* ty=uint16 */
}

def @func_7723() -> (Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) {
  %599 = fn () -> (Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) {
    %593 = @func_6393() /* ty=(Tensor[(10, 10, 14), float32],) */;
    %594 = @func_4530() /* ty=(Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %595 = @func_7501() /* ty=(uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) */;
    %596 = %593.0;
    %597 = %594.1;
    %598 = %595.2;
    (%596, %597, %598)
  };
  %599() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) */
}

def @func_3727() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %604 = fn () -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
    %600 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %601 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %602 = %600.0;
    %603 = %601.0;
    (%602, %603)
  };
  %604() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_7675() -> (Tensor[(8, 1, 5), float64],) {
  %611 = fn () -> (Tensor[(8, 1, 5), float64],) {
    %605 = @func_7216() /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(8, 1, 5), float32]) */;
    %606 = %605.1;
    %607 = @func_4096() /* ty=uint16 */;
    %608 = cast(%606, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
    %609 = cast(%607, dtype="float64") /* ty=float64 */;
    %610 = floor_mod(%608, %609) /* ty=Tensor[(8, 1, 5), float64] */;
    (%610,)
  };
  %611() /* ty=(Tensor[(8, 1, 5), float64],) */
}

def @func_6990() -> uint16 {
  @func_5342() /* ty=uint16 */
}

def @func_8941() -> Tensor[(8, 1, 5), float64] {
  @func_8939() /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_3406() -> Tensor[(504), int64] {
  %613 = fn () -> Tensor[(504), int64] {
    %612 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
    %612.3
  };
  %613() /* ty=Tensor[(504), int64] */
}

def @func_8939() -> Tensor[(8, 1, 5), float64] {
  %614 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %614.1
}

def @func_4019(%var_4017: Tensor[(8, 15, 5), float32]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) {
  @func_4016(%var_4017) /* ty=(Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) */
}

def @func_10345() -> (Tensor[(1134), int16], Tensor[(8, 1, 5), float32], Tensor[(520), float32], Tensor[(8, 3, 5), bool], Tensor[(560), float32], Tensor[(1134), float32]) {
  %615 = @func_6304() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) */;
  %616 = cast(meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %617 = reshape(%616, newshape=[8, 13, 5]) /* ty=Tensor[(8, 13, 5), float32] */;
  %618 = @func_9076(%617) /* ty=(Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) */;
  %619 = cast(meta[relay.Constant][37] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %620 = reshape(%619, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %621 = @func_10036(%620) /* ty=(Tensor[(8, 3, 5), bool], Tensor[(8, 14, 5), int8], Tensor[(560), float32], Tensor[(8, 1, 5), float32], Tensor[(9, 126), float32]) */;
  %622 = %615.2;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %624 = reshape(%623, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %625 = @func_3778(%624) /* ty=(Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) */;
  %626 = %618.1;
  %627 = %621.0;
  %628 = %625.2;
  (%622, %626, meta[relay.Constant][36] /* ty=Tensor[(520), float32] */, %627, meta[relay.Constant][37] /* ty=Tensor[(560), float32] */, %628)
}

def @func_10036(%var_10015: Tensor[(560), float32]) -> (Tensor[(8, 3, 5), bool], Tensor[(8, 14, 5), int8], Tensor[(560), float32], Tensor[(8, 1, 5), float32], Tensor[(9, 126), float32]) {
  %629 = cast(%var_10015, dtype="float32") /* ty=Tensor[(560), float32] */;
  %630 = reshape(%629, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), float32] */;
  %631 = @func_6435(%630) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) */;
  %632 = cast(meta[relay.Constant][38] /* ty=Tensor[(9, 126), float32] */, dtype="float32") /* ty=Tensor[(9, 126), float32] */;
  %633 = reshape(%632, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
  %634 = @func_2442(%633) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
  %635 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
  %636 = %631.1;
  %637 = %634.2;
  (%635, %636, %var_10015, %637, meta[relay.Constant][38] /* ty=Tensor[(9, 126), float32] */)
}

def @func_5174() -> (Tensor[(8, 1, 5), float64],) {
  %642 = fn () -> (Tensor[(8, 1, 5), float64],) {
    %638 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %639 = %638.0;
    %640 = cast(%639, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
    %641 = acos(%640) /* ty=Tensor[(8, 1, 5), float64] */;
    (%641,)
  };
  %642() /* ty=(Tensor[(8, 1, 5), float64],) */
}

def @func_5200() -> Tensor[(10, 10, 14), float32] {
  %644 = fn () -> Tensor[(10, 10, 14), float32] {
    %643 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %643.3
  };
  %644() /* ty=Tensor[(10, 10, 14), float32] */
}

def @func_10732() -> Tensor[(8, 1, 5), float32] {
  %645 = fn () -> Tensor[(8, 1, 5), float32] {
    @func_5545() /* ty=Tensor[(8, 1, 5), float32] */
  };
  %645() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_6796(%var_6795: Tensor[(6, 16, 12), uint16]) -> Tensor[(6, 16, 12), uint8] {
  %652 = fn (%var_6786: Tensor[(6, 16, 12), uint16]) -> Tensor[(6, 16, 12), uint8] {
    %646 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
    %647 = %646.0;
    %648 = cast(%var_6786, dtype="uint8") /* ty=Tensor[(6, 16, 12), uint8] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="uint8") /* ty=Tensor[(6, 16, 12), uint8] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    logical_xor(%650, %651) /* ty=Tensor[(6, 16, 12), uint8] */
  };
  %652(%var_6795) /* ty=Tensor[(6, 16, 12), uint8] */
}

def @func_4943(%var_4942: Tensor[(1400), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) {
  %660 = fn (%var_4922: Tensor[(1400), float32]) -> (Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) {
    %653 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %654 = cast(%var_4922, dtype="float32") /* ty=Tensor[(1400), float32] */;
    %655 = reshape(%654, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), float32] */;
    %656 = cast(%var_4922, dtype="float32") /* ty=Tensor[(1400), float32] */;
    %657 = %653.0;
    %658 = @func_2019(%655) /* ty=Tensor[(10, 10, 14), float32] */;
    %659 = rsqrt(%656) /* ty=Tensor[(1400), float32] */;
    (%657, %658, %659)
  };
  %660(%var_4942) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) */
}

def @func_4963(%var_4962: Tensor[(8, 3, 5), bool]) -> Tensor[(8, 3, 5), uint64] {
  %666 = fn (%var_4954: Tensor[(8, 3, 5), bool]) -> Tensor[(8, 3, 5), uint64] {
    %661 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
    %662 = cast(%var_4954, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="uint64") /* ty=Tensor[(8, 3, 5), uint64] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_and(%664, %665) /* ty=Tensor[(8, 3, 5), uint64] */
  };
  %666(%var_4962) /* ty=Tensor[(8, 3, 5), uint64] */
}

def @func_2743(%var_2700: Tensor[(7, 10, 14), int16]) -> (Tensor[(7, 10, 14), bool],) {
  %667 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 1, 14), int16] */, dtype="bool") /* ty=Tensor[(7, 1, 14), bool] */;
  %668 = cast(%var_2700, dtype="bool") /* ty=Tensor[(7, 10, 14), bool] */;
  %669 = greater_equal(%667, %668) /* ty=Tensor[(7, 10, 14), bool] */;
  (%669,)
}

def @func_9076(%var_9054: Tensor[(8, 13, 5), float32]) -> (Tensor[(8, 13, 5), bool], Tensor[(8, 1, 5), float32], Tensor[(8, ?, 5), float64]) {
  %670 = @func_4778() /* ty=Tensor[(8, 1, 5), float32] */;
  %671 = cast(%670, dtype="int32") /* ty=Tensor[(8, 1, 5), int32] */;
  %672 = cast(%var_9054, dtype="int32") /* ty=Tensor[(8, 13, 5), int32] */;
  %673 = logical_xor(%671, %672) /* ty=Tensor[(8, 13, 5), int32] */;
  %674 = cast(%670, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %675 = cast(%673, dtype="bool") /* ty=Tensor[(8, 13, 5), bool] */;
  %676 = @func_7065() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %677 = @func_6661() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %678 = not_equal(%674, %675) /* ty=Tensor[(8, 13, 5), bool] */;
  %679 = %676.0;
  %680 = %677.0;
  (%678, %679, %680)
}

def @func_2307() -> (Tensor[(8, 1, 5), float32],) {
  @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_8520() -> (Tensor[(8, 4, 16), float32],) {
  %681 = @func_5577() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 4, 16), float32], Tensor[(128), float32]) */;
  %682 = %681.1;
  (%682,)
}

def @func_9235(%var_9233: Tensor[(8, 2, 5), float64]) -> (Tensor[(8, 2, 5), int64],) {
  @func_9232(%var_9233) /* ty=(Tensor[(8, 2, 5), int64],) */
}

def @func_6096() -> (Tensor[(8, 1, 5), float32],) {
  %683 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  (%683,)
}

def @func_7254() -> (uint16, Tensor[(8, 1, 5), float32]) {
  %684 = @func_6120() /* ty=(uint16, Tensor[(8, 1, 5), float64]) */;
  %685 = %684.0;
  %686 = @func_4751() /* ty=Tensor[(8, 1, 5), float32] */;
  (%685, %686)
}

def @func_10140() -> (Tensor[(8, 1, 5), float32],) {
  @func_10138() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_8627() -> (Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) {
  %692 = fn () -> (Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) {
    %687 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %688 = cast(meta[relay.Constant][40] /* ty=Tensor[(1400), float32] */, dtype="float32") /* ty=Tensor[(1400), float32] */;
    %689 = reshape(%688, newshape=[10, 10, 14]) /* ty=Tensor[(10, 10, 14), float32] */;
    %690 = %687.0;
    %691 = @func_2019(%689) /* ty=Tensor[(10, 10, 14), float32] */;
    (%690, %691, meta[relay.Constant][40] /* ty=Tensor[(1400), float32] */)
  };
  %692() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32], Tensor[(1400), float32]) */
}

def @func_10283() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(560), float32]) {
  %693 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %694 = cast(meta[relay.Constant][41] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %695 = reshape(%694, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), float32] */;
  %696 = @func_6435(%695) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 14, 5), int8]) */;
  %697 = %693.1;
  %698 = %696.0;
  (%697, %698, meta[relay.Constant][41] /* ty=Tensor[(560), float32] */)
}

def @func_10748() -> Tensor[(40), float32] {
  %700 = fn () -> Tensor[(40), float32] {
    %699 = @func_7722() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, 1, 5), float32], Tensor[(40), float32]) */;
    %699.2
  };
  %700() /* ty=Tensor[(40), float32] */
}

def @func_3299() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %704 = fn () -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
    %701 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %702 = %701.0;
    %703 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
    (%702, %703)
  };
  %704() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */
}

def @main(%var_10893: Tensor[(1, 3, 9), float64]) -> Tensor[(1, 3, 9), float64] {
  %705 = cast(%var_10893, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  acos(%705) /* ty=Tensor[(1, 3, 9), float64] */
}

def @func_1241(%var_1208: bool, %var_1209: Tensor[(4, 10, 14), bool], %var_1226: Tensor[(504), int64]) -> (Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) {
  %706 = cast(%var_1226, dtype="int64") /* ty=Tensor[(504), int64] */;
  %707 = cast(%var_1226, dtype="int64") /* ty=Tensor[(504), int64] */;
  %708 = reshape(%706, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %709 = reshape(%707, newshape=[14, 6, 6]) /* ty=Tensor[(14, 6, 6), int64] */;
  %710 = @func_575(%708, %709) /* ty=(Tensor[(14, 6, 6), float32],) */;
  %711 = cast(%var_1208, dtype="bool") /* ty=bool */;
  %712 = cast(%var_1209, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %713 = logical_and(%711, %712) /* ty=Tensor[(4, 10, 14), bool] */;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(4, 10, 14), float32] */;
  %715 = atan(%714) /* ty=Tensor[(4, 10, 14), float32] */;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %717 = %710.0;
  %718 = acosh(%716) /* ty=Tensor[(4, 10, 14), float64] */;
  (%717, %var_1226, %718)
}

def @func_9594() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64]) {
  %719 = @func_6304() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(1134), int16]) */;
  %720 = @func_7674() /* ty=(Tensor[(8, 1, 5), float64],) */;
  %721 = %719.0;
  %722 = %720.0;
  (%721, %722)
}

def @func_5252(%var_5240: uint16, %var_5246: Tensor[(1, 980), int16]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 3, 5), bool], Tensor[(8, ?, 5), float64], Tensor[(8, 1, 5), float32], uint16, Tensor[(7, 10, 14), bool], Tensor[(1, 980), int16]) {
  %723 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %724 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %725 = cast(%var_5240, dtype="uint16") /* ty=uint16 */;
  %726 = reshape(%725, newshape=[]) /* ty=uint16 */;
  %727 = @func_3019(%726) /* ty=(Tensor[(1152), uint16], Tensor[(8, 1, 5), float32]) */;
  %728 = cast(%var_5246, dtype="int16") /* ty=Tensor[(1, 980), int16] */;
  %729 = reshape(%728, newshape=[7, 10, 14]) /* ty=Tensor[(7, 10, 14), int16] */;
  %730 = @func_2743(%729) /* ty=(Tensor[(7, 10, 14), bool],) */;
  %731 = %723.0;
  %732 = @func_3632() /* ty=Tensor[(8, 3, 5), bool] */;
  %733 = %724.0;
  %734 = %727.1;
  %735 = %730.0;
  (%731, %732, %733, %734, %var_5240, %735, %var_5246)
}

def @func_4531() -> (Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %742 = fn () -> (Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
    %736 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
    %737 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %738 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %739 = %736.2;
    %740 = %737.0;
    %741 = %738.1;
    (%739, %740, %741)
  };
  %742() /* ty=(Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */
}

def @func_8335(%var_8332: Tensor[(16, 14, 6), uint8], %var_8333: Tensor[(16, 14, 6), uint8], %var_8334: Tensor[(567, 2), float32]) -> (Tensor[(16, 14, 6), bool], uint16, uint16, Tensor[(16, 14, 6), float64], Tensor[(7, 3, 5), float32], Tensor[(567, 2), float32]) {
  %758 = fn (%var_8300: Tensor[(16, 14, 6), uint8], %var_8301: Tensor[(16, 14, 6), uint8], %var_8320: Tensor[(567, 2), float32]) -> (Tensor[(16, 14, 6), bool], uint16, uint16, Tensor[(16, 14, 6), float64], Tensor[(7, 3, 5), float32], Tensor[(567, 2), float32]) {
    %743 = cast(%var_8301, dtype="bool") /* ty=Tensor[(16, 14, 6), bool] */;
    %744 = shape_of(%var_8300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(%var_8300, dtype="bool") /* ty=Tensor[(16, 14, 6), bool] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %747 = cast(meta[relay.Constant][42] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %748 = reshape(%747, newshape=[]) /* ty=uint16 */;
    %749 = @func_2900(%748) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(14, 6, 6), float32], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
    %750 = cast(%var_8300, dtype="float64") /* ty=Tensor[(16, 14, 6), float64] */;
    %751 = cast(%var_8320, dtype="float32") /* ty=Tensor[(567, 2), float32] */;
    %752 = reshape(%751, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
    %753 = @func_5324(%752) /* ty=(Tensor[(7, 3, 5), float32], Tensor[(1, 105), uint64], Tensor[(10, 10, 14), float64], Tensor[(9, 14, 9), uint64], Tensor[(1134), float32]) */;
    %754 = less(%745, %746) /* ty=Tensor[(16, 14, 6), bool] */;
    %755 = %749.2;
    %756 = rsqrt(%750) /* ty=Tensor[(16, 14, 6), float64] */;
    %757 = %753.0;
    (%754, %755, meta[relay.Constant][42] /* ty=uint16 */, %756, %757, %var_8320)
  };
  %758(%var_8332, %var_8333, %var_8334) /* ty=(Tensor[(16, 14, 6), bool], uint16, uint16, Tensor[(16, 14, 6), float64], Tensor[(7, 3, 5), float32], Tensor[(567, 2), float32]) */
}

def @func_5092() -> Tensor[(8, 1, 5), float64] {
  %762 = fn () -> Tensor[(8, 1, 5), float64] {
    %759 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %760 = %759.6;
    %761 = cast(%760, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
    sin(%761) /* ty=Tensor[(8, 1, 5), float64] */
  };
  %762() /* ty=Tensor[(8, 1, 5), float64] */
}

def @func_6661() -> (Tensor[(8, ?, 5), float64],) {
  %763 = @func_4065() /* ty=(Tensor[(8, ?, 5), float64],) */;
  %764 = %763.0;
  (%764,)
}

def @func_8258(%var_8255: Tensor[(2, 9, 14), int64], %var_8256: Tensor[(2, 9, 14), int64], %var_8257: Tensor[(2, 9, 14), int64]) -> (Tensor[(2, 9, 14), int64], Tensor[(8, 1, 5), float64], Tensor[(2, 9, 14), int16], Tensor[(8, 1, 5), float32]) {
  @func_8253(%var_8255, %var_8256, %var_8257) /* ty=(Tensor[(2, 9, 14), int64], Tensor[(8, 1, 5), float64], Tensor[(2, 9, 14), int16], Tensor[(8, 1, 5), float32]) */
}

def @func_3919(%var_3918: Tensor[(7, 3, 5), uint64]) -> (Tensor[(7, 3, 5), float32],) {
  %777 = fn (%var_3897: Tensor[(7, 3, 5), uint64]) -> (Tensor[(7, 3, 5), float32],) {
    %765 = cast(%var_3897, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
    %766 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(7, 3, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %767 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 3, 5), uint64] */, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
    %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %769 = logical_xor(%767, %768) /* ty=Tensor[(7, 3, 5), uint64] */;
    %770 = cast(%769, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
    %771 = shape_of(%var_3897, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%var_3897, dtype="uint64") /* ty=Tensor[(7, 3, 5), uint64] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %774 = add(%772, %773) /* ty=Tensor[(7, 3, 5), uint64] */;
    %775 = cast(%774, dtype="float32") /* ty=Tensor[(7, 3, 5), float32] */;
    %776 = log2(%775) /* ty=Tensor[(7, 3, 5), float32] */;
    (%776,)
  };
  %777(%var_3918) /* ty=(Tensor[(7, 3, 5), float32],) */
}

def @func_9354() -> (Tensor[(10, 10, 14), float32], Tensor[(8, ?, 5), float32]) {
  %782 = fn () -> (Tensor[(10, 10, 14), float32], Tensor[(8, ?, 5), float32]) {
    %778 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %779 = @func_5274() /* ty=(Tensor[(8, ?, 5), float32],) */;
    %780 = %778.3;
    %781 = %779.0;
    (%780, %781)
  };
  %782() /* ty=(Tensor[(10, 10, 14), float32], Tensor[(8, ?, 5), float32]) */
}

def @func_6395() -> (Tensor[(10, 10, 14), float32],) {
  @func_6393() /* ty=(Tensor[(10, 10, 14), float32],) */
}

def @func_579(%var_577: Tensor[(14, 6, 6), int64], %var_578: Tensor[(14, 6, 6), int64]) -> (Tensor[(14, 6, 6), float32],) {
  @func_575(%var_577, %var_578) /* ty=(Tensor[(14, 6, 6), float32],) */
}

def @func_10526() -> uint16 {
  @func_10524() /* ty=uint16 */
}

def @func_3990(%var_3985: Tensor[(8, 8, 5), float32]) -> (Tensor[(8, 8, 5), uint32],) {
  %783 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  %784 = cast(%783, dtype="uint32") /* ty=Tensor[(8, 1, 5), uint32] */;
  %785 = cast(%var_3985, dtype="uint32") /* ty=Tensor[(8, 8, 5), uint32] */;
  %786 = minimum(%784, %785) /* ty=Tensor[(8, 8, 5), uint32] */;
  (%786,)
}

def @func_4461() -> (Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) {
  @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */
}

def @func_9468(%var_9467: Tensor[(15, 7, 3), int64]) -> (Tensor[(15, 7, 3), int64],) {
  %790 = fn (%var_9459: Tensor[(15, 7, 3), int64]) -> (Tensor[(15, 7, 3), int64],) {
    %787 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 1, 3), int64] */, dtype="int64") /* ty=Tensor[(15, 1, 3), int64] */;
    %788 = cast(%var_9459, dtype="int64") /* ty=Tensor[(15, 7, 3), int64] */;
    %789 = minimum(%787, %788) /* ty=Tensor[(15, 7, 3), int64] */;
    (%789,)
  };
  %790(%var_9467) /* ty=(Tensor[(15, 7, 3), int64],) */
}

def @func_3510(%var_3509: Tensor[(16, 9, 14), float64]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(16, 9, 14), int64]) {
  %801 = fn (%var_3477: Tensor[(16, 9, 14), float64]) -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(16, 9, 14), int64]) {
    %791 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
    %792 = cast(%var_3477, dtype="float64") /* ty=Tensor[(16, 9, 14), float64] */;
    %793 = atanh(%792) /* ty=Tensor[(16, 9, 14), float64] */;
    %794 = cast(%var_3477, dtype="int64") /* ty=Tensor[(16, 9, 14), int64] */;
    %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%793, dtype="int64") /* ty=Tensor[(16, 9, 14), int64] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %798 = %791.0;
    %799 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
    %800 = minimum(%796, %797) /* ty=Tensor[(16, 9, 14), int64] */;
    (%798, %799, %800)
  };
  %801(%var_3509) /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(16, 9, 14), int64]) */
}

def @func_2442(%var_2408: Tensor[(1134), float32]) -> (Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) {
  %802 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %803 = %802.0;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %805 = atan(%804) /* ty=Tensor[(8, 1, 5), float64] */;
  %806 = cast(%805, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %807 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%803, dtype="bool") /* ty=Tensor[(8, 1, 5), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = greater(%808, %809) /* ty=Tensor[(8, ?, 5), bool] */;
  %811 = cast(%805, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%810, dtype="float64") /* ty=Tensor[(8, ?, 5), float64] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %815 = cast(%var_2408, dtype="float32") /* ty=Tensor[(1134), float32] */;
  %816 = reshape(%815, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float32] */;
  %817 = @func_1716(%816) /* ty=(Tensor[(9, 14, 9), uint64],) */;
  %818 = %817.0;
  %819 = cast(%818, dtype="float64") /* ty=Tensor[(9, 14, 9), float64] */;
  %820 = shape_of(%var_2408, dtype="int32") /* ty=Tensor[(1), int32] */;
  %821 = cast(%var_2408, dtype="float64") /* ty=Tensor[(1134), float64] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?), float64] */;
  %823 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %824 = floor_divide(%813, %814) /* ty=Tensor[(8, ?, 5), float64] */;
  %825 = mod(%821, %822) /* ty=Tensor[(1134), float64] */;
  %826 = %823.0;
  (%824, %825, %826)
}

def @func_2515() -> Tensor[(8, 1, 5), float32] {
  @func_2513() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_5074(%var_5025: Tensor[(320), float32], %var_5035: uint16) -> (Tensor[(1152), uint16], Tensor[(320), float32], Tensor[(6, 16, 12), uint16], uint16, Tensor[(504), int64], Tensor[(8, 8, 5), uint32], Tensor[(504), int64], Tensor[(560), bool], Tensor[(8, 8, 5), float32], Tensor[(8, 1, 5), float32]) {
  %827 = @func_3229() /* ty=(Tensor[(6, 16, 12), uint16], uint16, Tensor[(1152), uint16], Tensor[(504), int64], Tensor[(8, 1, 5), float64]) */;
  %828 = cast(%var_5035, dtype="uint16") /* ty=uint16 */;
  %829 = %827.2;
  %830 = cast(%829, dtype="uint16") /* ty=Tensor[(1152), uint16] */;
  %831 = cast(meta[relay.Constant][45] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %832 = reshape(%828, newshape=[]) /* ty=uint16 */;
  %833 = reshape(%830, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint16] */;
  %834 = reshape(%831, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %835 = @func_2135(%832, %833, %834) /* ty=(Tensor[(6, 16, 12), uint16], Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(14, 6, 6), float32]) */;
  %836 = cast(%var_5025, dtype="float32") /* ty=Tensor[(320), float32] */;
  %837 = reshape(%836, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %838 = @func_3990(%837) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %839 = %838.0;
  %840 = cast(%839, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %841 = sigmoid(%840) /* ty=Tensor[(8, 8, 5), float32] */;
  %842 = cast(%841, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %843 = reshape(%842, newshape=[8, 8, 5]) /* ty=Tensor[(8, 8, 5), float32] */;
  %844 = @func_3990(%843) /* ty=(Tensor[(8, 8, 5), uint32],) */;
  %845 = cast(%var_5035, dtype="bool") /* ty=bool */;
  %846 = cast(meta[relay.Constant][46] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %847 = cast(meta[relay.Constant][45] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %848 = reshape(%845, newshape=[]) /* ty=bool */;
  %849 = reshape(%846, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), bool] */;
  %850 = reshape(%847, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %851 = @func_1241(%848, %849, %850) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) */;
  %852 = cast(%841, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  %853 = %835.0;
  %854 = %844.0;
  %855 = %851.1;
  %856 = tan(%852) /* ty=Tensor[(8, 8, 5), float32] */;
  %857 = @func_2513() /* ty=Tensor[(8, 1, 5), float32] */;
  (%829, %var_5025, %853, %var_5035, meta[relay.Constant][45] /* ty=Tensor[(504), int64] */, %854, %855, meta[relay.Constant][46] /* ty=Tensor[(560), bool] */, %856, %857)
}

def @func_2746(%var_2744: Tensor[(7, 10, 14), int16]) -> (Tensor[(7, 10, 14), bool],) {
  @func_2743(%var_2744) /* ty=(Tensor[(7, 10, 14), bool],) */
}

def @func_9008() -> (Tensor[(8, 1, 5), float32],) {
  %858 = @func_3298() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %859 = %858.1;
  (%859,)
}

def @func_4016(%var_4005: Tensor[(8, 15, 5), float32]) -> (Tensor[(8, 15, 5), uint64], Tensor[(8, 1, 5), float32]) {
  %860 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
  %861 = %860.1;
  %862 = cast(%861, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %863 = cast(%var_4005, dtype="uint64") /* ty=Tensor[(8, 15, 5), uint64] */;
  %864 = left_shift(%862, %863) /* ty=Tensor[(8, 15, 5), uint64] */;
  %865 = @func_2964() /* ty=Tensor[(8, 1, 5), float32] */;
  (%864, %865)
}

def @func_1718(%var_1717: Tensor[(9, 14, 9), float32]) -> (Tensor[(9, 14, 9), uint64],) {
  %873 = fn (%var_1710: Tensor[(9, 14, 9), float32]) -> (Tensor[(9, 14, 9), uint64],) {
    %866 = cast(%var_1710, dtype="float32") /* ty=Tensor[(9, 14, 9), float32] */;
    %867 = asin(%866) /* ty=Tensor[(9, 14, 9), float32] */;
    %868 = cast(%867, dtype="uint64") /* ty=Tensor[(9, 14, 9), uint64] */;
    %869 = shape_of(%var_1710, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%var_1710, dtype="uint64") /* ty=Tensor[(9, 14, 9), uint64] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %872 = logical_xor(%870, %871) /* ty=Tensor[(9, 14, 9), uint64] */;
    (%872,)
  };
  %873(%var_1717) /* ty=(Tensor[(9, 14, 9), uint64],) */
}

def @func_4098() -> uint16 {
  @func_4096() /* ty=uint16 */
}

def @func_2637(%var_2587: bool) -> (Tensor[(14, 6, 6), float32], Tensor[(560), bool], Tensor[(504), int64], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), uint64], Tensor[(8, 1, 5), float32]) {
  %874 = cast(%var_2587, dtype="bool") /* ty=bool */;
  %875 = cast(meta[relay.Constant][47] /* ty=Tensor[(560), bool] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %876 = cast(meta[relay.Constant][48] /* ty=Tensor[(504), int64] */, dtype="int64") /* ty=Tensor[(504), int64] */;
  %877 = reshape(%874, newshape=[]) /* ty=bool */;
  %878 = reshape(%875, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), bool] */;
  %879 = reshape(%876, newshape=[504]) /* ty=Tensor[(504), int64] */;
  %880 = @func_1241(%877, %878, %879) /* ty=(Tensor[(14, 6, 6), float32], Tensor[(504), int64], Tensor[(4, 10, 14), float64]) */;
  %881 = @func_2305() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %882 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %883 = %882.0;
  %884 = cast(%883, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
  %885 = log10(%884) /* ty=Tensor[(8, 1, 5), float32] */;
  %886 = cast(%885, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
  %887 = cast(%var_2587, dtype="uint64") /* ty=uint64 */;
  %888 = @func_2571() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %889 = %880.0;
  %890 = %881.0;
  %891 = subtract(%886, %887) /* ty=Tensor[(8, 1, 5), uint64] */;
  %892 = %888.0;
  (%889, meta[relay.Constant][47] /* ty=Tensor[(560), bool] */, meta[relay.Constant][48] /* ty=Tensor[(504), int64] */, %890, %891, %892)
}

def @func_3780(%var_3779: Tensor[(1134), float32]) -> (Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) {
  %902 = fn (%var_3776: Tensor[(1134), float32]) -> (Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) {
    %893 = @func_2813() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float64], Tensor[(10, 10, 14), float32], Tensor[(1400), float32], Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %894 = %893.1;
    %895 = cast(%894, dtype="uint64") /* ty=Tensor[(8, 1, 5), uint64] */;
    %896 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 9, 5), float32] */, dtype="uint64") /* ty=Tensor[(8, 9, 5), uint64] */;
    %897 = cast(%var_3776, dtype="float32") /* ty=Tensor[(1134), float32] */;
    %898 = reshape(%897, newshape=[1134]) /* ty=Tensor[(1134), float32] */;
    %899 = @func_2442(%898) /* ty=(Tensor[(8, ?, 5), float64], Tensor[(1134), float64], Tensor[(8, 1, 5), float32]) */;
    %900 = left_shift(%895, %896) /* ty=Tensor[(8, 9, 5), uint64] */;
    %901 = %899.1;
    (%900, %901, %var_3776)
  };
  %902(%var_3779) /* ty=(Tensor[(8, 9, 5), uint64], Tensor[(1134), float64], Tensor[(1134), float32]) */
}

def @func_6120() -> (uint16, Tensor[(8, 1, 5), float64]) {
  %903 = @func_5342() /* ty=uint16 */;
  %904 = @func_5091() /* ty=Tensor[(8, 1, 5), float64] */;
  (%903, %904)
}

def @func_7067() -> (Tensor[(8, 1, 5), float32],) {
  @func_7065() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_6527() -> Tensor[(8, 1, 5), float32] {
  %906 = fn () -> Tensor[(8, 1, 5), float32] {
    %905 = @func_4459() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(1134), float32], Tensor[(8, ?, 5), float32], Tensor[(8, 1, 5), float32], Tensor[(10, 10, 14), float32]) */;
    %905.3
  };
  %906() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_4752() -> Tensor[(8, 1, 5), float32] {
  %910 = fn () -> Tensor[(8, 1, 5), float32] {
    %907 = @func_3726() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) */;
    %908 = %907.1;
    %909 = cast(%908, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
    asinh(%909) /* ty=Tensor[(8, 1, 5), float32] */
  };
  %910() /* ty=Tensor[(8, 1, 5), float32] */
}

def @func_7449() -> (uint16, Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 8, 5), uint32]) {
  @func_7447() /* ty=(uint16, Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(320), float32], Tensor[(8, 8, 5), uint32]) */
}

def @func_7501() -> (uint16, Tensor[(8, ?, 5), int32], Tensor[(40), float32]) {
  %911 = @func_6168() /* ty=(uint16,) */;
  %912 = cast(meta[relay.Constant][50] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %913 = reshape(%912, newshape=[8, 1, 5]) /* ty=Tensor[(8, 1, 5), float32] */;
  %914 = %911.0;
  %915 = @func_5762(%913) /* ty=Tensor[(8, ?, 5), int32] */;
  (%914, %915, meta[relay.Constant][50] /* ty=Tensor[(40), float32] */)
}

def @func_10503() -> uint16 {
  @func_10501() /* ty=uint16 */
}

def @func_9792() -> (Tensor[(8, 1, 5), float32],) {
  %919 = fn () -> (Tensor[(8, 1, 5), float32],) {
    %916 = @func_6809() /* ty=Tensor[(8, 1, 5), float32] */;
    %917 = cast(%916, dtype="float32") /* ty=Tensor[(8, 1, 5), float32] */;
    %918 = cosh(%917) /* ty=Tensor[(8, 1, 5), float32] */;
    (%918,)
  };
  %919() /* ty=(Tensor[(8, 1, 5), float32],) */
}

def @func_2513() -> Tensor[(8, 1, 5), float32] {
  %920 = @func_2336() /* ty=(Tensor[(8, 1, 5), float32],) */;
  %920.0
}

def @func_9649() -> (Tensor[(8, 1, 5), float32], Tensor[(8, 1, 5), float32]) {
  %921 = @func_5506() /* ty=(Tensor[(8, 1, 5), float32], Tensor[(8, 8, 5), uint32], Tensor[(8, 40), float32]) */;
  %922 = @func_4280() /* ty=Tensor[(8, 1, 5), float32] */;
  %923 = %921.0;
  (%922, %923)
}

def @func_575(%var_565: Tensor[(14, 6, 6), int64], %var_566: Tensor[(14, 6, 6), int64]) -> (Tensor[(14, 6, 6), float32],) {
  %924 = cast(%var_566, dtype="int64") /* ty=Tensor[(14, 6, 6), int64] */;
  %925 = shape_of(%var_565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%var_565, dtype="int64") /* ty=Tensor[(14, 6, 6), int64] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %928 = add(%926, %927) /* ty=Tensor[(14, 6, 6), int64] */;
  %929 = cast(%928, dtype="float32") /* ty=Tensor[(14, 6, 6), float32] */;
  %930 = log10(%929) /* ty=Tensor[(14, 6, 6), float32] */;
  (%930,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen544/build/output.py:2952: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen544/build/output.py", line 2957, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(27) tvmgen_default_fused_acos_kernel0(double* __restrict__ T_acos, double* __restrict__ placeholder) {
  T_acos[(((int)threadIdx.x))] = acos(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

