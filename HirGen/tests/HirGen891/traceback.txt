==========mod==========
#[version = "0.0.5"]
def @func_8339() -> Tensor[(5, 8, 1), float64] {
  %0 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %0.0
}

def @func_7292() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) {
  %1 = @func_5409() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %2 = %1.0;
  %3 = @func_5136() /* ty=Tensor[(5, 8, ?), int16] */;
  (%2, %3)
}

def @func_7434() -> Tensor[(5, 8, ?), bool] {
  @func_5376() /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_7123() -> Tensor[(5, 8, ?), float64] {
  %4 = @func_6009() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) */;
  %4.0
}

def @func_4789() -> (Tensor[(5, 8, 1), float64],) {
  %5 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %6 = %5.0;
  (%6,)
}

def @func_8667() -> Tensor[(5, 8, ?), bool] {
  @func_5376() /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_5490() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) {
  %7 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %8 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %10 = reshape(%9, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
  %11 = @func_2564(%10) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
  %12 = %7.0;
  %13 = %8.0;
  %14 = %11.3;
  (%12, %13, %14, meta[relay.Constant][0] /* ty=Tensor[(160), float64] */)
}

def @func_3982(%var_3968: Tensor[(1056), int8], %var_3969: Tensor[(660), float64], %var_3970: Tensor[(16, 10), float64]) -> (Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) {
  %15 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %16 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %17 = cast(%var_3968, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %18 = cast(%var_3969, dtype="float64") /* ty=Tensor[(660), float64] */;
  %19 = cast(%var_3970, dtype="float64") /* ty=Tensor[(16, 10), float64] */;
  %20 = reshape(%17, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %21 = reshape(%18, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %22 = reshape(%19, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %23 = @func_2685(%20, %21, %22) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(10, 6, 11), float64], Tensor[(660), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */;
  %24 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %25 = %15.2;
  %26 = %16.0;
  %27 = %23.1;
  %28 = %24.0;
  (%25, %26, %27, %var_3968, %var_3969, %var_3970, %28)
}

def @func_4289(%var_4272: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), float32], Tensor[(5, 8, 1), float64]) {
  %29 = cast(%var_4272, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
  %30 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %31 = acosh(%29) /* ty=Tensor[(9, 15, 9), float32] */;
  %32 = %30.1;
  (%31, %32)
}

def @func_5376() -> Tensor[(5, 8, ?), bool] {
  %33 = @func_5259() /* ty=(Tensor[(4, 12, 2), uint32], Tensor[(5, 8, ?), bool], Tensor[(1056), int8]) */;
  %33.1
}

def @func_10130() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(64), uint16]) {
  %34 = @func_8621() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), bool], Tensor[(64, 1), uint16], Tensor[(64), uint16]) */;
  %35 = @func_9192() /* ty=Tensor[(5, 8, 1), float64] */;
  %36 = @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */;
  %37 = %34.3;
  (%35, %36, %37)
}

def @func_8063() -> (Tensor[(5, 8, 1), float64],) {
  %38 = @func_7210() /* ty=Tensor[(5, 8, 1), float64] */;
  (%38,)
}

def @func_5535() -> (Tensor[(5, 8, ?), int16],) {
  %39 = @func_3907() /* ty=Tensor[(5, 8, ?), int16] */;
  (%39,)
}

def @func_10631() -> (Tensor[(160), float64],) {
  %40 = @func_4614() /* ty=(Tensor[(160), float64],) */;
  %41 = %40.0;
  (%41,)
}

def @func_5259() -> (Tensor[(4, 12, 2), uint32], Tensor[(5, 8, ?), bool], Tensor[(1056), int8]) {
  %42 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
  %43 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %44 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
  %45 = %42.0;
  %46 = %43.0;
  %47 = %44.0;
  (%45, %46, %47)
}

def @func_3456() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) {
  %48 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 528), int8] */, dtype="int8") /* ty=Tensor[(2, 528), int8] */;
  %49 = reshape(%48, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %50 = @func_322(%49) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %51 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %52 = %50.0;
  (%51, %52, meta[relay.Constant][1] /* ty=Tensor[(2, 528), int8] */)
}

def @func_3877() -> (Tensor[(5, 8, ?), bool],) {
  %53 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %54 = %53.0;
  (%54,)
}

def @func_6100(%var_6068: Tensor[(5, 8, 5), float64], %var_6089: Tensor[(280), float32]) -> (Tensor[(5, 8, 5), uint8], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(7, 10, 4), bool], Tensor[(280), float32], Tensor[(660, 1), float64], Tensor[(2, 528), int8]) {
  %55 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
  %56 = %55.1;
  %57 = cast(%56, dtype="uint8") /* ty=Tensor[(5, 8, ?), uint8] */;
  %58 = cast(%var_6068, dtype="uint8") /* ty=Tensor[(5, 8, 5), uint8] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %60 = reshape(%59, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %61 = cast(%var_6089, dtype="float32") /* ty=Tensor[(280), float32] */;
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(660, 1), float64] */, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 528), int8] */, dtype="int8") /* ty=Tensor[(2, 528), int8] */;
  %64 = reshape(%61, newshape=[7, 10, 4]) /* ty=Tensor[(7, 10, 4), float32] */;
  %65 = reshape(%62, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %66 = reshape(%63, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %67 = @func_1376(%64, %65, %66) /* ty=(Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %68 = minimum(%57, %58) /* ty=Tensor[(5, 8, 5), uint8] */;
  %69 = @func_1770(%60) /* ty=Tensor[(2, 2, 16), uint16] */;
  %70 = %67.0;
  (%68, %69, meta[relay.Constant][2] /* ty=Tensor[(64), uint16] */, %70, %var_6089, meta[relay.Constant][3] /* ty=Tensor[(660, 1), float64] */, meta[relay.Constant][4] /* ty=Tensor[(2, 528), int8] */)
}

def @func_11276(%var_11269: Tensor[(5, 8, 8), uint64]) -> (Tensor[(5, 8, 8), bool],) {
  %71 = @func_7490() /* ty=(Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 1), float64]) */;
  %72 = %71.0;
  %73 = cast(%72, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
  %74 = cast(%var_11269, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
  %75 = less(%73, %74) /* ty=Tensor[(5, 8, 8), bool] */;
  (%75,)
}

def @func_8854() -> Tensor[(5, 8, 1), float64] {
  %76 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %76.0
}

def @func_1540() -> Tensor[(5, 8, 1), float64] {
  %77 = @func_1427() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %77.0
}

def @func_4694() -> (Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) {
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 8), float64] */;
  %79 = sinh(%78) /* ty=Tensor[(2, 3, 8), float64] */;
  %80 = @func_4573() /* ty=Tensor[(5, 8, ?), int16] */;
  (%79, %80)
}

def @func_10780(%var_10736: Tensor[(3, 3, 3), int64]) -> (Tensor[(3, 3, 3), bool], Tensor[(5, 8, 1), float64]) {
  %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 3, 3), int64] */, dtype="bool") /* ty=Tensor[(3, 3, 3), bool] */;
  %82 = shape_of(%var_10736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_10736, dtype="bool") /* ty=Tensor[(3, 3, 3), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %85 = @func_10720() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8]) */;
  %86 = not_equal(%83, %84) /* ty=Tensor[(3, 3, 3), bool] */;
  %87 = %85.0;
  (%86, %87)
}

def @func_1900() -> Tensor[(5, 8, 1), float64] {
  @func_1540() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_11620(%var_11609: Tensor[(64), uint16]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(64), uint16]) {
  %88 = @func_8063() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %89 = cast(%var_11609, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %90 = reshape(%89, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
  %91 = @func_2977(%90) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
  %92 = %88.0;
  %93 = %91.0;
  (%92, %93, %var_11609)
}

def @func_6009() -> (Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) {
  %94 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %95 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %96 = %94.0;
  %97 = %95.0;
  (%96, %97)
}

def @func_10385() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64]) {
  %98 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
  %99 = %98.2;
  %100 = @func_9192() /* ty=Tensor[(5, 8, 1), float64] */;
  (%99, %100)
}

def @func_1331(%var_1311: Tensor[(1056), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) {
  %101 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %102 = cast(%var_1311, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %103 = reshape(%102, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %104 = @func_322(%103) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %107 = cast(meta[relay.Constant][7] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %109 = cast(%var_1311, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %110 = reshape(%107, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %111 = reshape(%108, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %112 = reshape(%109, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %113 = @func_481(%110, %111, %112) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %114 = %101.0;
  %115 = asin(%106) /* ty=Tensor[(11, 12, 8), float32] */;
  %116 = %113.1;
  (%114, %var_1311, %115, %116, meta[relay.Constant][7] /* ty=Tensor[(660), float64] */)
}

def @func_1214() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
  %117 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %118 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  (%117, %118)
}

def @func_8529() -> (Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) {
  %119 = @func_7292() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
  %120 = %119.1;
  %121 = cast(%120, dtype="uint32") /* ty=Tensor[(5, 8, ?), uint32] */;
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 8, 3), int16] */, dtype="uint32") /* ty=Tensor[(5, 8, 3), uint32] */;
  %123 = bitwise_or(%121, %122) /* ty=Tensor[(5, 8, 3), uint32] */;
  %124 = @func_2728() /* ty=Tensor[(64), uint16] */;
  %125 = @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%123, %124, %125)
}

def @func_10004(%var_9991: Tensor[(1056), int8], %var_9992: Tensor[(4, 16), uint16], %var_9993: Tensor[(1014), float32]) -> (Tensor[(5, 8, 5), int64], Tensor[(4, 16), uint16], Tensor[(1014), float32], Tensor[(5, 8, 1056), float64]) {
  %126 = cast(%var_9991, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %127 = cast(%var_9992, dtype="uint16") /* ty=Tensor[(4, 16), uint16] */;
  %128 = cast(%var_9993, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %129 = reshape(%126, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %130 = reshape(%127, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %131 = reshape(%128, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
  %132 = @func_4938(%129, %130, %131) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
  %133 = @func_7434() /* ty=Tensor[(5, 8, ?), bool] */;
  %134 = cast(%var_9991, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %135 = cast(%133, dtype="float64") /* ty=Tensor[(5, 8, ?), float64] */;
  %136 = %132.1;
  %137 = divide(%134, %135) /* ty=Tensor[(5, 8, 1056), float64] */;
  (%136, %var_9992, %var_9993, %137)
}

def @func_9460() -> Tensor[(11, 12, 8), int8] {
  @func_3042() /* ty=Tensor[(11, 12, 8), int8] */
}

def @func_11580() -> (Tensor[(5, 8, ?), uint64],) {
  %138 = @func_7943() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%138,)
}

def @func_4032(%var_4027: Tensor[(5, 12, 7), float64]) -> (Tensor[(5, 12, 7), float64],) {
  %139 = cast(%var_4027, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
  %140 = sigmoid(%139) /* ty=Tensor[(5, 12, 7), float64] */;
  (%140,)
}

def @func_6526() -> Tensor[(5, 8, ?), uint64] {
  %141 = @func_4647() /* ty=(Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) */;
  %141.1
}

def @func_8821() -> Tensor[(5, 8, ?), bool] {
  %142 = @func_8277() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %142.0
}

def @func_8020() -> (Tensor[(5, 8, 64), bool], Tensor[(64), uint16], Tensor[(2, 528), int16]) {
  %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %144 = reshape(%143, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %145 = @func_4879(%144) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) */;
  %146 = @func_3456() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) */;
  %147 = %146.2;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %149 = tan(%148) /* ty=Tensor[(2, 528), float64] */;
  %150 = cast(%147, dtype="uint64") /* ty=Tensor[(2, 528), uint64] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(2), int32] */;
  %152 = cast(%149, dtype="uint64") /* ty=Tensor[(2, 528), uint64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %154 = bitwise_and(%152, %153) /* ty=Tensor[(2, 528), uint64] */;
  %155 = cast(%154, dtype="int16") /* ty=Tensor[(2, 528), int16] */;
  %156 = shape_of(%149, dtype="int32") /* ty=Tensor[(2), int32] */;
  %157 = cast(%149, dtype="int16") /* ty=Tensor[(2, 528), int16] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %159 = %145.3;
  %160 = add(%157, %158) /* ty=Tensor[(2, 528), int16] */;
  (%159, meta[relay.Constant][9] /* ty=Tensor[(64), uint16] */, %160)
}

def @func_4997() -> (Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(1014), float32], Tensor[(5, 8, ?), int16]) {
  %161 = cast(meta[relay.Constant][10] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %162 = @func_2728() /* ty=Tensor[(64), uint16] */;
  %163 = cast(%162, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %164 = cast(meta[relay.Constant][11] /* ty=Tensor[(1014), float32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %165 = reshape(%161, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %166 = reshape(%163, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %167 = reshape(%164, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
  %168 = @func_4938(%165, %166, %167) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
  %169 = @func_4694() /* ty=(Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) */;
  %170 = %168.2;
  %171 = %169.1;
  (%162, %170, meta[relay.Constant][10] /* ty=Tensor[(1056), int8] */, meta[relay.Constant][11] /* ty=Tensor[(1014), float32] */, %171)
}

def @func_5205() -> (Tensor[(5, 8, ?), int16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  %172 = @func_4730() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %173 = @func_5136() /* ty=Tensor[(5, 8, ?), int16] */;
  %174 = @func_2781() /* ty=Tensor[(64), uint16] */;
  %175 = %172.0;
  (%173, %174, %175)
}

def @func_12163() -> (Tensor[(5, 8, ?), int16],) {
  %176 = @func_12114() /* ty=Tensor[(5, 8, ?), int16] */;
  (%176,)
}

def @func_1529() -> (Tensor[(5, 8, 1), float64],) {
  %177 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %178 = %177.0;
  (%178,)
}

def @func_3343(%var_3333: Tensor[(6, 13, 13), float32]) -> (Tensor[(6, 13, 13), float32], Tensor[(5, 8, 1), float64], Tensor[(6, 13, 13), float64]) {
  %179 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 13), float32] */;
  %180 = shape_of(%var_3333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_3333, dtype="float32") /* ty=Tensor[(6, 13, 13), float32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %183 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %184 = cast(%var_3333, dtype="float64") /* ty=Tensor[(6, 13, 13), float64] */;
  %185 = floor_divide(%181, %182) /* ty=Tensor[(6, 13, 13), float32] */;
  %186 = %183.0;
  %187 = sinh(%184) /* ty=Tensor[(6, 13, 13), float64] */;
  (%185, %186, %187)
}

def @main(%var_12200: Tensor[(420), float64]) -> (Tensor[(5, 12, 7), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, 420), bool]) {
  %188 = cast(%var_12200, dtype="float64") /* ty=Tensor[(420), float64] */;
  %189 = reshape(%188, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float64] */;
  %190 = @func_4032(%189) /* ty=(Tensor[(5, 12, 7), float64],) */;
  %191 = @func_8778() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool]) */;
  %192 = @func_4647() /* ty=(Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) */;
  %193 = %192.1;
  %194 = cast(%var_12200, dtype="int64") /* ty=Tensor[(420), int64] */;
  %195 = cast(%193, dtype="int64") /* ty=Tensor[(5, 8, ?), int64] */;
  %196 = maximum(%194, %195) /* ty=Tensor[(5, 8, 420), int64] */;
  %197 = cast(%196, dtype="bool") /* ty=Tensor[(5, 8, 420), bool] */;
  %198 = cast(%var_12200, dtype="bool") /* ty=Tensor[(420), bool] */;
  %199 = logical_or(%197, %198) /* ty=Tensor[(5, 8, 420), bool] */;
  %200 = cast(%199, dtype="bool") /* ty=Tensor[(5, 8, 420), bool] */;
  %201 = cast(%var_12200, dtype="bool") /* ty=Tensor[(420), bool] */;
  %202 = %190.0;
  %203 = %191.0;
  %204 = not_equal(%200, %201) /* ty=Tensor[(5, 8, 420), bool] */;
  (%202, %203, %204)
}

def @func_3042() -> Tensor[(11, 12, 8), int8] {
  %205 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %205.1
}

def @func_5409() -> (Tensor[(5, 8, ?), int16],) {
  %206 = @func_4573() /* ty=Tensor[(5, 8, ?), int16] */;
  (%206,)
}

def @func_322(%var_298: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), int8],) {
  %207 = cast(%var_298, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
  %208 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(11, 12, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 12, 8), int8] */, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %211 = minimum(%209, %210) /* ty=Tensor[(11, 12, 8), int8] */;
  (%211,)
}

def @func_1619() -> (Tensor[(5, 8, 1), float64],) {
  %212 = @func_1540() /* ty=Tensor[(5, 8, 1), float64] */;
  (%212,)
}

def @func_4647() -> (Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) {
  %213 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %214 = %213.0;
  %215 = @func_3311() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %216 = %215.2;
  %217 = cast(%216, dtype="uint8") /* ty=Tensor[(5, 8, 1), uint8] */;
  %218 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%214, dtype="uint8") /* ty=Tensor[(5, 8, ?), uint8] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %221 = left_shift(%219, %220) /* ty=Tensor[(5, 8, ?), uint8] */;
  %222 = @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%221, %222)
}

def @func_10187() -> (Tensor[(4, 12, 2), uint32],) {
  %223 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
  %224 = %223.0;
  (%224,)
}

def @func_11720() -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, 3), uint32]) {
  %225 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %226 = @func_8529() /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) */;
  %227 = %225.0;
  %228 = %226.0;
  (%227, %228)
}

def @func_10993() -> (Tensor[(4, 12, 2), uint32], Tensor[(15, 2, 3), bool], Tensor[(15, 6), int8], Tensor[(5, 8, ?), int16]) {
  %229 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
  %230 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 6), int8] */;
  %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 6), int8] */;
  %232 = reshape(%230, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), int8] */;
  %233 = reshape(%231, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), int8] */;
  %234 = @func_5745(%232, %233) /* ty=(Tensor[(15, 2, 3), bool], Tensor[(5, 8, 1), float64]) */;
  %235 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %236 = %229.0;
  %237 = %234.0;
  %238 = %235.0;
  (%236, %237, meta[relay.Constant][14] /* ty=Tensor[(15, 6), int8] */, %238)
}

def @func_4250() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) {
  %239 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(5, 8, ?), float64] */;
  %242 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %243 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
  %244 = acosh(%241) /* ty=Tensor[(5, 8, ?), float64] */;
  %245 = %242.0;
  (%243, %244, %245)
}

def @func_5153() -> (Tensor[(4, 12, 2), uint32],) {
  %246 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %247 = erf(%246) /* ty=Tensor[(4, 12, 2), float64] */;
  %248 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 12, 2), float64] */, dtype="uint32") /* ty=Tensor[(4, 12, 2), uint32] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="uint32") /* ty=Tensor[(4, 12, 2), uint32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %252 = logical_xor(%250, %251) /* ty=Tensor[(4, 12, 2), uint32] */;
  (%252,)
}

def @func_7589(%var_7552: Tensor[(2, 528), int8]) -> (Tensor[(2, 528), bool], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(2, 528), bool]) {
  %253 = @func_3456() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) */;
  %254 = %253.2;
  %255 = cast(%var_7552, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(2), int32] */;
  %257 = cast(%254, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %259 = cast(%var_7552, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %260 = shape_of(%254, dtype="int32") /* ty=Tensor[(2), int32] */;
  %261 = cast(%254, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %263 = right_shift(%261, %262) /* ty=Tensor[(2, 528), int32] */;
  %264 = cast(%263, dtype="int8") /* ty=Tensor[(2, 528), int8] */;
  %265 = cast(meta[relay.Constant][16] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %266 = cast(meta[relay.Constant][17] /* ty=Tensor[(1014), float32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %267 = reshape(%264, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %268 = reshape(%265, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %269 = reshape(%266, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
  %270 = @func_4938(%267, %268, %269) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
  %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 528), int32] */, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %272 = shape_of(%263, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%263, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %275 = less(%257, %258) /* ty=Tensor[(2, 528), bool] */;
  %276 = %270.4;
  %277 = greater_equal(%273, %274) /* ty=Tensor[(2, 528), bool] */;
  (%275, %276, meta[relay.Constant][16] /* ty=Tensor[(64), uint16] */, meta[relay.Constant][17] /* ty=Tensor[(1014), float32] */, %277)
}

def @func_6222(%var_6208: Tensor[(16, 3, 4), float32]) -> Tensor[(16, 3, 4), float32] {
  %278 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
  %279 = shape_of(%var_6208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_6208, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%280, %281) /* ty=Tensor[(16, 3, 4), float32] */
}

def @func_11594() -> Tensor[(5, 8, ?), float64] {
  @func_6475() /* ty=Tensor[(5, 8, ?), float64] */
}

def @func_1376(%var_1338: Tensor[(7, 10, 4), float32], %var_1366: Tensor[(660), float64], %var_1367: Tensor[(1056), int8]) -> (Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) {
  %282 = cast(%var_1338, dtype="float32") /* ty=Tensor[(7, 10, 4), float32] */;
  %283 = sqrt(%282) /* ty=Tensor[(7, 10, 4), float32] */;
  %284 = cast(%var_1338, dtype="bool") /* ty=Tensor[(7, 10, 4), bool] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(7, 10, 4), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = cast(%var_1366, dtype="float64") /* ty=Tensor[(660), float64] */;
  %289 = cast(%var_1366, dtype="float64") /* ty=Tensor[(660), float64] */;
  %290 = cast(%var_1367, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %291 = reshape(%288, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %292 = reshape(%289, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %293 = reshape(%290, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %294 = @func_481(%291, %292, %293) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %295 = logical_or(%286, %287) /* ty=Tensor[(7, 10, 4), bool] */;
  %296 = %294.1;
  (%295, %296, %var_1366, %var_1367)
}

def @func_3183() -> (Tensor[(5, 8, 1), float64],) {
  %297 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  (%297,)
}

def @func_481(%var_454: Tensor[(10, 6, 11), float64], %var_455: Tensor[(10, 6, 11), float64], %var_464: Tensor[(1056), int8]) -> (Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
  %298 = cast(%var_455, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %299 = shape_of(%var_454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_454, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %302 = cast(%var_464, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %303 = reshape(%302, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %304 = @func_322(%303) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %305 = floor_mod(%300, %301) /* ty=Tensor[(10, 6, 11), float64] */;
  %306 = %304.0;
  (%305, %306, %var_464)
}

def @func_3759() -> (Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) {
  %307 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %308 = cast(%307, dtype="int64") /* ty=Tensor[(5, 8, 1), int64] */;
  %309 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 8, 5), float64] */, dtype="int64") /* ty=Tensor[(5, 8, 5), int64] */;
  %310 = cast(%307, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %311 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
  %312 = subtract(%310, %311) /* ty=Tensor[(5, 8, 5), float64] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %314 = bitwise_xor(%308, %309) /* ty=Tensor[(5, 8, 5), int64] */;
  %315 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %316 = erf(%313) /* ty=Tensor[(5, 8, 5), float32] */;
  (%314, %315, %316)
}

def @func_6901(%var_6889: Tensor[(5, 8, 132), float64], %var_6896: Tensor[(660), float64], %var_6897: Tensor[(1056), int8]) -> (Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) {
  %317 = @func_2294() /* ty=(Tensor[(5, 8, 132), float64],) */;
  %318 = %317.0;
  %319 = cast(%var_6889, dtype="bool") /* ty=Tensor[(5, 8, 132), bool] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="bool") /* ty=Tensor[(5, 8, 132), bool] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 56), float32] */, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
  %324 = cast(%var_6896, dtype="float64") /* ty=Tensor[(660), float64] */;
  %325 = cast(%var_6897, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %326 = reshape(%323, newshape=[7, 10, 4]) /* ty=Tensor[(7, 10, 4), float32] */;
  %327 = reshape(%324, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %328 = reshape(%325, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %329 = @func_1376(%326, %327, %328) /* ty=(Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %330 = logical_and(%321, %322) /* ty=Tensor[(5, 8, 132), bool] */;
  %331 = %329.1;
  (%330, %331, meta[relay.Constant][21] /* ty=Tensor[(5, 56), float32] */, %var_6896, %var_6897)
}

def @func_3311() -> (Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
  %332 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %335 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %336 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %337 = sinh(%334) /* ty=Tensor[(5, 8, 1), float64] */;
  %338 = @func_2781() /* ty=Tensor[(64), uint16] */;
  %339 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  %340 = %335.0;
  %341 = %336.1;
  (%337, %338, %339, %340, %341)
}

def @func_2594(%var_2585: Tensor[(11, 14, 15), int8]) -> Tensor[(11, 14, 15), int8] {
  %342 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %343 = cast(%var_2585, dtype="int8") /* ty=Tensor[(11, 14, 15), int8] */;
  subtract(%342, %343) /* ty=Tensor[(11, 14, 15), int8] */
}

def @func_5745(%var_5725: Tensor[(15, 2, 3), int8], %var_5726: Tensor[(15, 2, 3), int8]) -> (Tensor[(15, 2, 3), bool], Tensor[(5, 8, 1), float64]) {
  %344 = cast(%var_5726, dtype="bool") /* ty=Tensor[(15, 2, 3), bool] */;
  %345 = shape_of(%var_5725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_5725, dtype="bool") /* ty=Tensor[(15, 2, 3), bool] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %348 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %349 = less_equal(%346, %347) /* ty=Tensor[(15, 2, 3), bool] */;
  %350 = %348.1;
  (%349, %350)
}

def @func_7253(%var_7242: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), float32], Tensor[(5, 8, 1), float64]) {
  %351 = cast(%var_7242, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
  %352 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
  %353 = log10(%351) /* ty=Tensor[(15, 8, 8), float32] */;
  %354 = %352.0;
  (%353, %354)
}

def @func_8277() -> (Tensor[(5, 8, ?), bool],) {
  %355 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %356 = %355.0;
  (%356,)
}

def @func_11175(%var_11173: Tensor[(480), float64]) -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, 12), bool], Tensor[(480), float64]) {
  %357 = @func_3877() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %358 = cast(%var_11173, dtype="float64") /* ty=Tensor[(480), float64] */;
  %359 = reshape(%358, newshape=[5, 8, 12]) /* ty=Tensor[(5, 8, 12), float64] */;
  %360 = @func_3614(%359) /* ty=(Tensor[(5, 8, 12), bool], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %361 = %357.0;
  %362 = %360.0;
  (%361, %362, %var_11173)
}

def @func_4478() -> (Tensor[(5, 8, 1), float64],) {
  %363 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %364 = %363.0;
  (%364,)
}

def @func_11286() -> (Tensor[(5, 8, 1), float64],) {
  %365 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  (%365,)
}

def @func_5919() -> Tensor[(1056), int8] {
  %366 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
  %366.0
}

def @func_9673(%var_9667: Tensor[(5, 8, 1), uint64]) -> Tensor[(5, 8, ?), bool] {
  %367 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %368 = %367.0;
  %369 = cast(%var_9667, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%371, %372) /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_8778() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool]) {
  %373 = @func_5409() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %374 = %373.0;
  %375 = @func_8667() /* ty=Tensor[(5, 8, ?), bool] */;
  (%374, %375)
}

def @func_9449(%var_9407: Tensor[(2, 10, 7), bool], %var_9408: Tensor[(2, 10, 7), bool], %var_9433: Tensor[(2, 10, 7), bool]) -> (Tensor[(2, 10, 7), bool], Tensor[(11, 12, 8), int8], Tensor[(2, 10, 7), float32]) {
  %376 = cast(%var_9408, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %377 = shape_of(%var_9407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%var_9407, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = @func_7309() /* ty=(Tensor[(11, 12, 8), int8],) */;
  %381 = cast(%var_9433, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %382 = shape_of(%var_9407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_9407, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %385 = logical_or(%378, %379) /* ty=Tensor[(2, 10, 7), bool] */;
  %386 = %380.0;
  %387 = floor_divide(%383, %384) /* ty=Tensor[(2, 10, 7), float32] */;
  (%385, %386, %387)
}

def @func_8869() -> (Tensor[(5, 8, ?), uint64],) {
  %388 = @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%388,)
}

def @func_10476() -> (Tensor[(5, 8, 1), float64],) {
  %389 = @func_10172() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) */;
  %390 = %389.2;
  (%390,)
}

def @func_12017(%var_12003: Tensor[(5, 8, 1), float64]) -> (Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) {
  %391 = @func_3311() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %392 = %391.4;
  %393 = cast(%var_12003, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %397 = @func_6270() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) */;
  %398 = logical_xor(%395, %396) /* ty=Tensor[(5, 8, ?), uint64] */;
  %399 = %397.2;
  (%398, %399)
}

def @func_9284() -> Tensor[(5, 8, 1), float64] {
  %400 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %400.1
}

def @func_10928() -> (Tensor[(64), uint16], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), uint8]) {
  %401 = @func_4647() /* ty=(Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) */;
  %402 = @func_8205() /* ty=Tensor[(64), uint16] */;
  %403 = @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */;
  %404 = %401.0;
  (%402, %403, %404)
}

def @func_5136() -> Tensor[(5, 8, ?), int16] {
  @func_4573() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_12114() -> Tensor[(5, 8, ?), int16] {
  %405 = @func_7292() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
  %405.0
}

def @func_7089() -> (Tensor[(5, 8, 1), float64],) {
  %406 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %407 = %406.3;
  (%407,)
}

def @func_12193() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) {
  %408 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %409 = @func_7390() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
  %410 = %408.0;
  %411 = @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */;
  %412 = %409.0;
  (%410, %411, %412)
}

def @func_9192() -> Tensor[(5, 8, 1), float64] {
  %413 = @func_4423() /* ty=(Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %413.3
}

def @func_7490() -> (Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 1), float64]) {
  %414 = @func_6982() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */;
  %415 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %416 = %414.1;
  %417 = %415.1;
  (%416, %417)
}

def @func_9948() -> (Tensor[(5, 8, ?), bool],) {
  %418 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %419 = %418.0;
  (%419,)
}

def @func_9267() -> Tensor[(5, 8, 1), float64] {
  %420 = @func_3795() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %420.0
}

def @func_4154() -> (Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) {
  %421 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
  %422 = @func_2927() /* ty=Tensor[(5, 8, 1), float64] */;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %424 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%421, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %427 = @func_3795() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %428 = floor_divide(%425, %426) /* ty=Tensor[(5, 8, ?), float64] */;
  %429 = %427.0;
  (%428, %429)
}

def @func_4938(%var_4895: Tensor[(1056), int8], %var_4916: Tensor[(64), uint16], %var_4925: Tensor[(1014), float32]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) {
  %430 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %431 = cast(%var_4895, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %432 = cast(meta[relay.Constant][23] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %433 = cast(meta[relay.Constant][24] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %434 = reshape(%431, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %435 = reshape(%432, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %436 = reshape(%433, newshape=[16, 10]) /* ty=Tensor[(16, 10), float64] */;
  %437 = @func_3982(%434, %435, %436) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) */;
  %438 = cast(%var_4925, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %439 = reshape(%438, newshape=[6, 13, 13]) /* ty=Tensor[(6, 13, 13), float32] */;
  %440 = @func_3343(%439) /* ty=(Tensor[(6, 13, 13), float32], Tensor[(5, 8, 1), float64], Tensor[(6, 13, 13), float64]) */;
  %441 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %442 = cast(%var_4916, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %443 = reshape(%442, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %444 = @func_4879(%443) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) */;
  %445 = %444.2;
  %446 = cast(%445, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %447 = cast(%var_4916, dtype="bool") /* ty=Tensor[(64), bool] */;
  %448 = %430.0;
  %449 = %437.6;
  %450 = %440.0;
  %451 = %441.0;
  %452 = greater_equal(%446, %447) /* ty=Tensor[(5, 8, 64), bool] */;
  (%448, %449, %var_4895, meta[relay.Constant][23] /* ty=Tensor[(660), float64] */, meta[relay.Constant][24] /* ty=Tensor[(160), float64] */, %450, %var_4925, %451, %452)
}

def @func_7680(%var_7640: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), uint64], Tensor[(5, 8, ?), int16]) {
  %453 = cast(%var_7640, dtype="float32") /* ty=Tensor[(16, 11, 9), float32] */;
  %454 = cos(%453) /* ty=Tensor[(16, 11, 9), float32] */;
  %455 = cast(%var_7640, dtype="uint64") /* ty=Tensor[(16, 11, 9), uint64] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="uint64") /* ty=Tensor[(16, 11, 9), uint64] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %459 = right_shift(%457, %458) /* ty=Tensor[(16, 11, 9), uint64] */;
  %460 = @func_5136() /* ty=Tensor[(5, 8, ?), int16] */;
  (%459, %460)
}

def @func_7210() -> Tensor[(5, 8, 1), float64] {
  %461 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %461.1
}

def @func_11912() -> (Tensor[(5, 8, 4), uint64],) {
  %462 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
  %463 = %462.1;
  (%463,)
}

def @func_1427() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
  %464 = cast(meta[relay.Constant][25] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %465 = reshape(%464, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %466 = @func_322(%465) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %467 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %468 = %466.0;
  (%467, %468, meta[relay.Constant][25] /* ty=Tensor[(1056), int8] */)
}

def @func_4879(%var_4815: Tensor[(2, 2, 16), uint16]) -> (Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) {
  %469 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %470 = reshape(%469, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %471 = @func_1770(%470) /* ty=Tensor[(2, 2, 16), uint16] */;
  %472 = cast(%var_4815, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
  %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%471, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = cast(%471, dtype="uint16") /* ty=Tensor[(2, 2, 16), uint16] */;
  %477 = reshape(%476, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
  %478 = @func_2977(%477) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
  %479 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %480 = @func_2927() /* ty=Tensor[(5, 8, 1), float64] */;
  %481 = cast(%480, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %482 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), uint16] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %483 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %484 = cast(%480, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %485 = cast(meta[relay.Constant][26] /* ty=Tensor[(64), uint16] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %486 = less(%484, %485) /* ty=Tensor[(5, 8, 64), bool] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(5, 8, 64), float64] */;
  %488 = greater(%474, %475) /* ty=Tensor[(2, 2, 16), bool] */;
  %489 = %478.0;
  %490 = %479.0;
  %491 = logical_and(%481, %482) /* ty=Tensor[(5, 8, 64), bool] */;
  %492 = %483.0;
  %493 = cos(%487) /* ty=Tensor[(5, 8, 64), float64] */;
  (%488, %489, %490, %491, %492, %493)
}

def @func_1931() -> Tensor[(5, 8, 1), float64] {
  %494 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %494.0
}

def @func_11987() -> (Tensor[(5, 8, ?), bool],) {
  %495 = @func_5376() /* ty=Tensor[(5, 8, ?), bool] */;
  (%495,)
}

def @func_7830(%var_7826: Tensor[(5280, 1), float64], %var_7827: Tensor[(330, 2), float64], %var_7828: Tensor[(1056, 1), int8]) -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(660), float64], Tensor[(5280, 1), float64], Tensor[(330, 2), float64], Tensor[(1056, 1), int8]) {
  %496 = @func_6009() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) */;
  %497 = @func_7390() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
  %498 = cast(%var_7826, dtype="float64") /* ty=Tensor[(5280, 1), float64] */;
  %499 = cast(%var_7827, dtype="float64") /* ty=Tensor[(330, 2), float64] */;
  %500 = cast(%var_7828, dtype="int8") /* ty=Tensor[(1056, 1), int8] */;
  %501 = reshape(%498, newshape=[5, 8, 132]) /* ty=Tensor[(5, 8, 132), float64] */;
  %502 = reshape(%499, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %503 = reshape(%500, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %504 = @func_6901(%501, %502, %503) /* ty=(Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %505 = %496.1;
  %506 = %497.1;
  %507 = @func_4573() /* ty=Tensor[(5, 8, ?), int16] */;
  %508 = %504.3;
  (%505, %506, %507, %508, %var_7826, %var_7827, %var_7828)
}

def @func_8571() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16]) {
  %509 = @func_4730() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %510 = @func_5409() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %511 = %509.0;
  %512 = %510.0;
  (%511, %512)
}

def @func_8621() -> (Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), bool], Tensor[(64, 1), uint16], Tensor[(64), uint16]) {
  %513 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %514 = cast(meta[relay.Constant][27] /* ty=Tensor[(64, 1), uint16] */, dtype="uint16") /* ty=Tensor[(64, 1), uint16] */;
  %515 = reshape(%514, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %516 = @func_4879(%515) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) */;
  %517 = @func_8529() /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) */;
  %518 = %513.1;
  %519 = %516.0;
  %520 = %517.1;
  (%518, %519, meta[relay.Constant][27] /* ty=Tensor[(64, 1), uint16] */, %520)
}

def @func_5870() -> (Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) {
  %521 = cast(meta[relay.Constant][28] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %522 = reshape(%521, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
  %523 = @func_2453(%522) /* ty=Tensor[(15, 3, 1), float32] */;
  %524 = cast(%523, dtype="bool") /* ty=Tensor[(15, 3, 1), bool] */;
  %525 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(45), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %526 = cast(meta[relay.Constant][28] /* ty=Tensor[(45), float32] */, dtype="bool") /* ty=Tensor[(45), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?), bool] */;
  %528 = @func_5098() /* ty=Tensor[(5, 8, 1), float64] */;
  %529 = logical_and(%526, %527) /* ty=Tensor[(45), bool] */;
  %530 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  (%528, %529, %530)
}

def @func_4730() -> (Tensor[(5, 8, 1), float64],) {
  %531 = @func_2927() /* ty=Tensor[(5, 8, 1), float64] */;
  (%531,)
}

def @func_4573() -> Tensor[(5, 8, ?), int16] {
  @func_3907() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_11701(%var_11679: Tensor[(5, 8, 8), float64]) -> (Tensor[(5, 8, 8), uint16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) {
  %532 = @func_6009() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) */;
  %533 = %532.0;
  %534 = cast(%533, dtype="uint16") /* ty=Tensor[(5, 8, ?), uint16] */;
  %535 = cast(%var_11679, dtype="uint16") /* ty=Tensor[(5, 8, 8), uint16] */;
  %536 = cast(meta[relay.Constant][29] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %537 = reshape(%536, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
  %538 = multiply(%534, %535) /* ty=Tensor[(5, 8, 8), uint16] */;
  %539 = @func_2453(%537) /* ty=Tensor[(15, 3, 1), float32] */;
  (%538, %539, meta[relay.Constant][29] /* ty=Tensor[(45), float32] */)
}

def @func_10577() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool]) {
  %540 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %541 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %542 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %543 = %540.0;
  %544 = %541.1;
  %545 = %542.0;
  (%543, %544, %545)
}

def @func_6639() -> Tensor[(5, 8, 132), float64] {
  %546 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %546.2
}

def @func_3033(%var_3018: Tensor[(160), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) {
  %547 = cast(%var_3018, dtype="float64") /* ty=Tensor[(160), float64] */;
  %548 = reshape(%547, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
  %549 = @func_2357(%548) /* ty=(Tensor[(5, 8, 4), uint64],) */;
  %550 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %553 = erf(%552) /* ty=Tensor[(5, 8, 1), float64] */;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %555 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %556 = %549.0;
  %557 = exp(%554) /* ty=Tensor[(5, 8, 1), float64] */;
  (%555, %556, %var_3018, %557)
}

def @func_8379() -> (Tensor[(1056), int8], Tensor[(5, 8, 160), int16]) {
  %558 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
  %559 = @func_6695() /* ty=(Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %560 = %559.0;
  %561 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %562 = %561.0;
  %563 = cast(%560, dtype="int16") /* ty=Tensor[(160), int16] */;
  %564 = cast(%562, dtype="int16") /* ty=Tensor[(5, 8, 1), int16] */;
  %565 = %558.0;
  %566 = right_shift(%563, %564) /* ty=Tensor[(5, 8, 160), int16] */;
  (%565, %566)
}

def @func_6982() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) {
  %567 = @func_4423() /* ty=(Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %568 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %569 = %567.1;
  %570 = %568.0;
  (%569, %570)
}

def @func_1770(%var_1765: Tensor[(2, 2, 16), uint16]) -> Tensor[(2, 2, 16), uint16] {
  %571 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 2, 16), uint16] */, dtype="uint16") /* ty=Tensor[(2, 2, 16), uint16] */;
  %572 = shape_of(%var_1765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_1765, dtype="uint16") /* ty=Tensor[(2, 2, 16), uint16] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%573, %574) /* ty=Tensor[(2, 2, 16), uint16] */
}

def @func_3907() -> Tensor[(5, 8, ?), int16] {
  %575 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %575.0
}

def @func_8994() -> Tensor[(5, 8, 1), float64] {
  @func_1696() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_8205() -> Tensor[(64), uint16] {
  %576 = @func_5445() /* ty=(Tensor[(64), uint16],) */;
  %576.0
}

def @func_4423() -> (Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  %577 = cast(meta[relay.Constant][31] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %578 = reshape(%577, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
  %579 = @func_2977(%578) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
  %580 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %582 = @func_3042() /* ty=Tensor[(11, 12, 8), int8] */;
  %583 = %579.0;
  %584 = atan(%581) /* ty=Tensor[(5, 8, 1), float64] */;
  (%582, %583, meta[relay.Constant][31] /* ty=Tensor[(64), uint16] */, %584)
}

def @func_5098() -> Tensor[(5, 8, 1), float64] {
  %585 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %585.0
}

def @func_2607(%var_2599: Tensor[(13, 5, 8), float32]) -> Tensor[(13, 5, 8), float32] {
  %586 = cast(%var_2599, dtype="float32") /* ty=Tensor[(13, 5, 8), float32] */;
  log2(%586) /* ty=Tensor[(13, 5, 8), float32] */
}

def @func_6174(%var_6146: Tensor[(660), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(160), float64], Tensor[(160), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1056), float64]) {
  %587 = @func_1427() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %588 = %587.2;
  %589 = cast(%588, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %590 = cast(%var_6146, dtype="float64") /* ty=Tensor[(660), float64] */;
  %591 = cast(meta[relay.Constant][32] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %592 = reshape(%589, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %593 = reshape(%590, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %594 = reshape(%591, newshape=[16, 10]) /* ty=Tensor[(16, 10), float64] */;
  %595 = @func_3982(%592, %593, %594) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) */;
  %596 = @func_4614() /* ty=(Tensor[(160), float64],) */;
  %597 = @func_5535() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %598 = @func_3907() /* ty=Tensor[(5, 8, ?), int16] */;
  %599 = cast(%588, dtype="int64") /* ty=Tensor[(1056), int64] */;
  %600 = cast(%598, dtype="int64") /* ty=Tensor[(5, 8, ?), int64] */;
  %601 = bitwise_xor(%599, %600) /* ty=Tensor[(5, 8, 1056), int64] */;
  %602 = cast(%601, dtype="float64") /* ty=Tensor[(5, 8, 1056), float64] */;
  %603 = %595.1;
  %604 = %596.0;
  %605 = %597.0;
  %606 = sin(%602) /* ty=Tensor[(5, 8, 1056), float64] */;
  (%603, %var_6146, meta[relay.Constant][32] /* ty=Tensor[(160), float64] */, %604, %605, %606)
}

def @func_10978(%var_10966: Tensor[(5, 8, 12), bool]) -> (Tensor[(5, 8, 12), float32],) {
  %607 = @func_8667() /* ty=Tensor[(5, 8, ?), bool] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(5, 8, ?), float32] */;
  %609 = cast(%var_10966, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %610 = multiply(%608, %609) /* ty=Tensor[(5, 8, 12), float32] */;
  (%610,)
}

def @func_3396() -> (Tensor[(5, 8, ?), bool],) {
  %611 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %612 = %611.0;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
  %614 = acos(%613) /* ty=Tensor[(5, 8, 1), float32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = less(%617, %618) /* ty=Tensor[(5, 8, ?), bool] */;
  (%619,)
}

def @func_3062() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) {
  %620 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %621 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %622 = reshape(%621, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
  %623 = @func_2357(%622) /* ty=(Tensor[(5, 8, 4), uint64],) */;
  %624 = %620.0;
  %625 = %623.0;
  (%624, %625, meta[relay.Constant][33] /* ty=Tensor[(160), float64] */)
}

def @func_5445() -> (Tensor[(64), uint16],) {
  %626 = @func_2781() /* ty=Tensor[(64), uint16] */;
  (%626,)
}

def @func_3543() -> (Tensor[(5, 8, ?), bool],) {
  %627 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %628 = %627.0;
  (%628,)
}

def @func_5585() -> (Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) {
  %629 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 16), float64] */;
  %630 = @func_5205() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %631 = @func_3877() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %632 = tan(%629) /* ty=Tensor[(12, 10, 16), float64] */;
  %633 = %630.0;
  %634 = %631.0;
  %635 = @func_2728() /* ty=Tensor[(64), uint16] */;
  (%632, %633, %634, %635)
}

def @func_7930(%var_7913: Tensor[(2, 6, 12), float32]) -> (Tensor[(2, 6, 12), float32],) {
  %636 = cast(%var_7913, dtype="float32") /* ty=Tensor[(2, 6, 12), float32] */;
  %637 = exp(%636) /* ty=Tensor[(2, 6, 12), float32] */;
  (%637,)
}

def @func_1758(%var_1739: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) {
  %638 = @func_1427() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %639 = %638.1;
  %640 = cast(%var_1739, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %644 = cast(%var_1739, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
  %645 = reshape(%644, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %646 = @func_1331(%645) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) */;
  %647 = bitwise_or(%642, %643) /* ty=Tensor[(11, 12, 8), int32] */;
  %648 = %646.0;
  (%647, %648)
}

def @func_4614() -> (Tensor[(160), float64],) {
  %649 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
  %650 = %649.2;
  (%650,)
}

def @func_6878() -> (Tensor[(64), uint16], Tensor[(5, 8, ?), float64]) {
  %651 = @func_6270() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) */;
  %652 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %653 = %651.1;
  %654 = %652.0;
  (%653, %654)
}

def @func_2728() -> Tensor[(64), uint16] {
  %655 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %655.6
}

def @func_7797(%var_7790: Tensor[(80, 2), float64]) -> (Tensor[(5, 8, 4), uint64], Tensor[(80, 2), float64], Tensor[(5, 8, 1), float32]) {
  %656 = cast(%var_7790, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
  %657 = reshape(%656, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
  %658 = @func_2564(%657) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
  %659 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
  %662 = %658.1;
  %663 = log(%661) /* ty=Tensor[(5, 8, 1), float32] */;
  (%662, %var_7790, %663)
}

def @func_1696() -> Tensor[(5, 8, 1), float64] {
  %664 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %664.1
}

def @func_10839(%var_10818: Tensor[(5, 8, 7), int16]) -> (Tensor[(5, 8, 7), bool], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 7), float64], Tensor[(5, 8, 1), float64]) {
  %665 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
  %668 = cast(%var_10818, dtype="bool") /* ty=Tensor[(5, 8, 7), bool] */;
  %669 = @func_2294() /* ty=(Tensor[(5, 8, 132), float64],) */;
  %670 = cast(%var_10818, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
  %671 = @func_5870() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) */;
  %672 = greater(%667, %668) /* ty=Tensor[(5, 8, 7), bool] */;
  %673 = %669.0;
  %674 = log(%670) /* ty=Tensor[(5, 8, 7), float64] */;
  %675 = %671.0;
  (%672, %673, %674, %675)
}

def @func_4669() -> (Tensor[(5, 8, ?), int16],) {
  %676 = @func_3907() /* ty=Tensor[(5, 8, ?), int16] */;
  (%676,)
}

def @func_6743(%var_6717: Tensor[(1, 45), float32]) -> (Tensor[(5, 8, 1), float64], Tensor[(1, 45), float32], Tensor[(5, 8, ?), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 64), int64], Tensor[(5, 8, 1), float64]) {
  %677 = cast(%var_6717, dtype="float32") /* ty=Tensor[(1, 45), float32] */;
  %678 = reshape(%677, newshape=[45]) /* ty=Tensor[(45), float32] */;
  %679 = @func_6381(%678) /* ty=(Tensor[(4, 12, 2), uint32], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) */;
  %680 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %681 = cast(meta[relay.Constant][35] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %682 = reshape(%681, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %683 = @func_322(%682) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %684 = @func_2728() /* ty=Tensor[(64), uint16] */;
  %685 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  %686 = cast(%684, dtype="int64") /* ty=Tensor[(64), int64] */;
  %687 = cast(%685, dtype="int64") /* ty=Tensor[(5, 8, 1), int64] */;
  %688 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %689 = %679.1;
  %690 = %680.0;
  %691 = %683.0;
  %692 = bitwise_xor(%686, %687) /* ty=Tensor[(5, 8, 64), int64] */;
  %693 = %688.0;
  (%689, %var_6717, %690, %691, meta[relay.Constant][35] /* ty=Tensor[(1056), int8] */, %692, %693)
}

def @func_8684() -> (Tensor[(11, 12, 8), int32],) {
  %694 = @func_6695() /* ty=(Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %695 = %694.1;
  (%695,)
}

def @func_2357(%var_2335: Tensor[(5, 8, 4), float64]) -> (Tensor[(5, 8, 4), uint64],) {
  %696 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
  %697 = cast(%696, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %698 = cast(%var_2335, dtype="uint64") /* ty=Tensor[(5, 8, 4), uint64] */;
  %699 = right_shift(%697, %698) /* ty=Tensor[(5, 8, 4), uint64] */;
  (%699,)
}

def @func_8788(%var_8784: Tensor[(3, 2, 7), uint32]) -> Tensor[(3, 2, 7), uint32] {
  %700 = cast(%var_8784, dtype="uint32") /* ty=Tensor[(3, 2, 7), uint32] */;
  %701 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(3, 2, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 2, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 2, 7), uint32] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%702, %703) /* ty=Tensor[(3, 2, 7), uint32] */
}

def @func_6953(%var_6941: Tensor[(64), uint16]) -> (Tensor[(5, 8, ?), bool], Tensor[(2, 32), uint16], Tensor[(64), uint16]) {
  %704 = @func_3877() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %705 = %704.0;
  %706 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %707 = %706.0;
  %708 = cast(%707, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %709 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%705, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %712 = cast(%var_6941, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %713 = reshape(%712, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
  %714 = @func_2977(%713) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
  %715 = greater_equal(%710, %711) /* ty=Tensor[(5, 8, ?), bool] */;
  %716 = %714.2;
  (%715, %716, %var_6941)
}

def @func_11976() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) {
  %717 = @func_11286() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %718 = @func_8869() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %719 = %717.0;
  %720 = %718.0;
  (%719, %720)
}

def @func_10172() -> (Tensor[(5, 8, 5), int64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) {
  %721 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %722 = @func_5490() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */;
  %723 = %721.0;
  %724 = %722.3;
  %725 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  (%723, %724, %725)
}

def @func_11329(%var_11317: Tensor[(4, 264), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(4, 264), uint64]) {
  %726 = @func_6982() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */;
  %727 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 264), int8] */, dtype="int8") /* ty=Tensor[(4, 264), int8] */;
  %728 = reshape(%727, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %729 = @func_1331(%728) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) */;
  %730 = cast(%var_11317, dtype="uint64") /* ty=Tensor[(4, 264), uint64] */;
  %731 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(4, 264), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %732 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 264), int8] */, dtype="uint64") /* ty=Tensor[(4, 264), uint64] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %734 = %726.0;
  %735 = %729.4;
  %736 = bitwise_or(%732, %733) /* ty=Tensor[(4, 264), uint64] */;
  (%734, %735, %736)
}

def @func_5835(%var_5792: Tensor[(64), uint16], %var_5823: Tensor[(88, 12), float64]) -> (Tensor[(5, 8, ?), int16], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(88, 12), bool], Tensor[(88, 12), float32]) {
  %737 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
  %738 = cast(meta[relay.Constant][38] /* ty=Tensor[(88, 12), int8] */, dtype="int8") /* ty=Tensor[(88, 12), int8] */;
  %739 = cast(%var_5792, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %740 = cast(meta[relay.Constant][39] /* ty=Tensor[(1014), float32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %741 = reshape(%738, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %742 = reshape(%739, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %743 = reshape(%740, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
  %744 = @func_4938(%741, %742, %743) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
  %745 = cast(meta[relay.Constant][38] /* ty=Tensor[(88, 12), int8] */, dtype="float64") /* ty=Tensor[(88, 12), float64] */;
  %746 = log10(%745) /* ty=Tensor[(88, 12), float64] */;
  %747 = cast(%var_5823, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(2), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %751 = cast(meta[relay.Constant][38] /* ty=Tensor[(88, 12), int8] */, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %752 = shape_of(%746, dtype="int32") /* ty=Tensor[(2), int32] */;
  %753 = cast(%746, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %755 = greater(%753, %754) /* ty=Tensor[(88, 12), bool] */;
  %756 = cast(%755, dtype="float32") /* ty=Tensor[(88, 12), float32] */;
  %757 = %737.2;
  %758 = %744.4;
  %759 = not_equal(%749, %750) /* ty=Tensor[(88, 12), bool] */;
  %760 = atan(%756) /* ty=Tensor[(88, 12), float32] */;
  (%757, %758, %var_5792, meta[relay.Constant][39] /* ty=Tensor[(1014), float32] */, %759, %760)
}

def @func_3507() -> Tensor[(5, 8, ?), uint64] {
  %761 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %761.0
}

def @func_7052() -> Tensor[(5, 8, 132), float64] {
  @func_6639() /* ty=Tensor[(5, 8, 132), float64] */
}

def @func_2453(%var_2440: Tensor[(15, 3, 1), float32]) -> Tensor[(15, 3, 1), float32] {
  %762 = cast(%var_2440, dtype="float32") /* ty=Tensor[(15, 3, 1), float32] */;
  tan(%762) /* ty=Tensor[(15, 3, 1), float32] */
}

def @func_5954(%var_5928: Tensor[(11, 8, 6), uint8]) -> (Tensor[(11, 8, 6), float64], Tensor[(11, 8, 6), float32]) {
  %763 = cast(%var_5928, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
  %764 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(11, 8, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 8, 6), uint8] */, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = not_equal(%765, %766) /* ty=Tensor[(11, 8, 6), bool] */;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
  %769 = atan(%768) /* ty=Tensor[(11, 8, 6), float64] */;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
  %771 = cast(%769, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
  %772 = sqrt(%770) /* ty=Tensor[(11, 8, 6), float64] */;
  %773 = atanh(%771) /* ty=Tensor[(11, 8, 6), float32] */;
  (%772, %773)
}

def @func_1968() -> Tensor[(5, 8, 1), float64] {
  %774 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %774.1
}

def @func_6270() -> (Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) {
  %775 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %776 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %777 = %775.2;
  %778 = @func_2781() /* ty=Tensor[(64), uint16] */;
  %779 = %776.0;
  (%777, %778, %779)
}

def @func_11900(%var_11814: Tensor[(1056), int8], %var_11896: Tensor[(5, 8, 280), uint8]) -> (Tensor[(2, 3, 8), float64], Tensor[(7, 10, 4), bool], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(64), uint16], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 280), int64], Tensor[(5, 8, 280), uint16]) {
  %780 = @func_4694() /* ty=(Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) */;
  %781 = cast(meta[relay.Constant][41] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %783 = cast(%var_11814, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %784 = reshape(%781, newshape=[7, 10, 4]) /* ty=Tensor[(7, 10, 4), float32] */;
  %785 = reshape(%782, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %786 = reshape(%783, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %787 = @func_1376(%784, %785, %786) /* ty=(Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %788 = cast(meta[relay.Constant][42] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %789 = reshape(%788, newshape=[660, 1]) /* ty=Tensor[(660, 1), float64] */;
  %790 = @func_6589(%789) /* ty=(Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(660, 1), float64], Tensor[(1056), int8]) */;
  %791 = @func_10928() /* ty=(Tensor[(64), uint16], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), uint8]) */;
  %792 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %793 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %794 = @func_8277() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %795 = %794.0;
  %796 = cast(meta[relay.Constant][41] /* ty=Tensor[(280), float32] */, dtype="uint8") /* ty=Tensor[(280), uint8] */;
  %797 = cast(%795, dtype="uint8") /* ty=Tensor[(5, 8, ?), uint8] */;
  %798 = bitwise_and(%796, %797) /* ty=Tensor[(5, 8, 280), uint8] */;
  %799 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="int16") /* ty=Tensor[(5, 8, 280), int16] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="int16") /* ty=Tensor[(5, 8, 280), int16] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %803 = multiply(%801, %802) /* ty=Tensor[(5, 8, 280), int16] */;
  %804 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="int64") /* ty=Tensor[(5, 8, 280), int64] */;
  %805 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%803, dtype="int64") /* ty=Tensor[(5, 8, 280), int64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %808 = cast(%var_11896, dtype="uint16") /* ty=Tensor[(5, 8, 280), uint16] */;
  %809 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="uint16") /* ty=Tensor[(5, 8, 280), uint16] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %812 = %780.0;
  %813 = %787.0;
  %814 = %790.3;
  %815 = %791.0;
  %816 = %792.0;
  %817 = %793.0;
  %818 = minimum(%806, %807) /* ty=Tensor[(5, 8, 280), int64] */;
  %819 = bitwise_or(%810, %811) /* ty=Tensor[(5, 8, 280), uint16] */;
  (%812, %813, meta[relay.Constant][42] /* ty=Tensor[(660), float64] */, %var_11814, %814, %815, %816, %817, %818, %819)
}

def @func_7943() -> Tensor[(5, 8, ?), uint64] {
  @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_2564(%var_2491: Tensor[(80, 2), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) {
  %820 = cast(%var_2491, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
  %821 = reshape(%820, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
  %822 = @func_2357(%821) /* ty=(Tensor[(5, 8, 4), uint64],) */;
  %823 = cast(%var_2491, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %824 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
  %825 = %822.0;
  %826 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
  %827 = sin(%823) /* ty=Tensor[(80, 2), float32] */;
  (%824, %825, %826, %827)
}

def @func_2977(%var_2968: Tensor[(2, 32), uint16]) -> (Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) {
  %828 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %829 = cast(%var_2968, dtype="uint16") /* ty=Tensor[(2, 32), uint16] */;
  %830 = reshape(%829, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %831 = %828.0;
  %832 = @func_1770(%830) /* ty=Tensor[(2, 2, 16), uint16] */;
  (%831, %832, %var_2968)
}

def @func_3682() -> (Tensor[(5, 8, ?), int16],) {
  %833 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %834 = %833.4;
  %835 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %836 = cast(%835, dtype="int16") /* ty=Tensor[(5, 8, 1), int16] */;
  %837 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%834, dtype="int16") /* ty=Tensor[(5, 8, 1), int16] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %840 = maximum(%838, %839) /* ty=Tensor[(5, 8, ?), int16] */;
  (%840,)
}

def @func_6695() -> (Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) {
  %841 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
  %842 = cast(meta[relay.Constant][44] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %843 = reshape(%842, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %844 = @func_1758(%843) /* ty=(Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) */;
  %845 = %841.2;
  %846 = %844.0;
  (%845, %846, meta[relay.Constant][44] /* ty=Tensor[(1056), int8] */)
}

def @func_9127(%var_9086: Tensor[(3, 10, 4), float32], %var_9087: Tensor[(3, 10, 4), float32]) -> (Tensor[(3, 10, 4), float32], Tensor[(15, 3, 1), float32], Tensor[(5, 8, 45), uint32], Tensor[(11, 12, 8), int8]) {
  %847 = cast(%var_9087, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
  %848 = shape_of(%var_9086, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_9086, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %851 = cast(meta[relay.Constant][45] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %852 = reshape(%851, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
  %853 = @func_8667() /* ty=Tensor[(5, 8, ?), bool] */;
  %854 = cast(%853, dtype="uint32") /* ty=Tensor[(5, 8, ?), uint32] */;
  %855 = cast(meta[relay.Constant][45] /* ty=Tensor[(45), float32] */, dtype="uint32") /* ty=Tensor[(45), uint32] */;
  %856 = divide(%849, %850) /* ty=Tensor[(3, 10, 4), float32] */;
  %857 = @func_2453(%852) /* ty=Tensor[(15, 3, 1), float32] */;
  %858 = multiply(%854, %855) /* ty=Tensor[(5, 8, 45), uint32] */;
  %859 = @func_3042() /* ty=Tensor[(11, 12, 8), int8] */;
  (%856, %857, %858, %859)
}

def @func_9489(%var_9473: Tensor[(64), uint16], %var_9482: Tensor[(5280), float64], %var_9483: Tensor[(660), float64], %var_9484: Tensor[(1056), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(160), float64], Tensor[(11, 12, 8), int8], Tensor[(5280), float64], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(5, 8, 1), float64]) {
  %860 = cast(%var_9473, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %861 = reshape(%860, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %862 = @func_6953(%861) /* ty=(Tensor[(5, 8, ?), bool], Tensor[(2, 32), uint16], Tensor[(64), uint16]) */;
  %863 = cast(meta[relay.Constant][46] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %864 = reshape(%863, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %865 = @func_3033(%864) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) */;
  %866 = cast(%var_9482, dtype="float64") /* ty=Tensor[(5280), float64] */;
  %867 = cast(%var_9483, dtype="float64") /* ty=Tensor[(660), float64] */;
  %868 = cast(%var_9484, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %869 = reshape(%866, newshape=[5, 8, 132]) /* ty=Tensor[(5, 8, 132), float64] */;
  %870 = reshape(%867, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %871 = reshape(%868, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %872 = @func_6901(%869, %870, %871) /* ty=(Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %873 = @func_5870() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) */;
  %874 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %875 = @func_7210() /* ty=Tensor[(5, 8, 1), float64] */;
  %876 = %862.0;
  %877 = %865.3;
  %878 = %872.1;
  %879 = %873.2;
  (%874, %875, %876, %var_9473, %877, meta[relay.Constant][46] /* ty=Tensor[(160), float64] */, %878, %var_9482, %var_9483, %var_9484, %879)
}

def @func_7309() -> (Tensor[(11, 12, 8), int8],) {
  %880 = @func_3042() /* ty=Tensor[(11, 12, 8), int8] */;
  (%880,)
}

def @func_5714(%var_5674: Tensor[(8, 20), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float32], Tensor[(8, 20), float32]) {
  %881 = cast(%var_5674, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %882 = reshape(%881, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
  %883 = @func_2564(%882) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
  %884 = @func_5585() /* ty=(Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) */;
  %885 = %884.1;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(5, 8, ?), float32] */;
  %887 = cast(%var_5674, dtype="float32") /* ty=Tensor[(8, 20), float32] */;
  %888 = %883.0;
  %889 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %890 = log2(%886) /* ty=Tensor[(5, 8, ?), float32] */;
  %891 = sinh(%887) /* ty=Tensor[(8, 20), float32] */;
  (%888, %889, %890, %891)
}

def @func_2781() -> Tensor[(64), uint16] {
  @func_2728() /* ty=Tensor[(64), uint16] */
}

def @func_11991() -> Tensor[(5, 8, ?), uint64] {
  @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_11364() -> Tensor[(5, 8, 132), float64] {
  @func_7052() /* ty=Tensor[(5, 8, 132), float64] */
}

def @func_6321(%var_6300: Tensor[(5, 8, 3), float64]) -> (Tensor[(5, 8, 3), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
  %892 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %893 = %892.1;
  %894 = cast(%893, dtype="int64") /* ty=Tensor[(5, 8, 1), int64] */;
  %895 = cast(%var_6300, dtype="int64") /* ty=Tensor[(5, 8, 3), int64] */;
  %896 = @func_3795() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %897 = maximum(%894, %895) /* ty=Tensor[(5, 8, 3), int64] */;
  %898 = %896.0;
  %899 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
  (%897, %898, %899)
}

def @func_6475() -> Tensor[(5, 8, ?), float64] {
  %900 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %900.0
}

def @func_6589(%var_6581: Tensor[(660, 1), float64]) -> (Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(660, 1), float64], Tensor[(1056), int8]) {
  %901 = cast(%var_6581, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %902 = cast(%var_6581, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %903 = cast(meta[relay.Constant][47] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %904 = reshape(%901, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %905 = reshape(%902, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %906 = reshape(%903, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %907 = @func_481(%904, %905, %906) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %908 = @func_2728() /* ty=Tensor[(64), uint16] */;
  %909 = %907.2;
  (%908, %909, %var_6581, meta[relay.Constant][47] /* ty=Tensor[(1056), int8] */)
}

def @func_4012() -> (Tensor[(1056), int8],) {
  %910 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %911 = %910.5;
  (%911,)
}

def @func_2096() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  %912 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 132), int8] */, dtype="int8") /* ty=Tensor[(8, 132), int8] */;
  %913 = reshape(%912, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %914 = @func_322(%913) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %915 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %916 = cast(%915, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %917 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 132), int8] */, dtype="float64") /* ty=Tensor[(8, 132), float64] */;
  %918 = cast(%915, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %919 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 132), int8] */, dtype="bool") /* ty=Tensor[(8, 132), bool] */;
  %920 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 132), int8] */, dtype="int8") /* ty=Tensor[(8, 132), int8] */;
  %921 = reshape(%920, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %922 = @func_1758(%921) /* ty=(Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) */;
  %923 = cast(meta[relay.Constant][49] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %924 = reshape(%923, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %925 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %926 = @func_1540() /* ty=Tensor[(5, 8, 1), float64] */;
  %927 = %914.0;
  %928 = divide(%916, %917) /* ty=Tensor[(5, 8, 132), float64] */;
  %929 = logical_or(%918, %919) /* ty=Tensor[(5, 8, 132), bool] */;
  %930 = %922.1;
  %931 = @func_1770(%924) /* ty=Tensor[(2, 2, 16), uint16] */;
  %932 = %925.0;
  (%926, %927, %928, %929, %930, %931, meta[relay.Constant][49] /* ty=Tensor[(64), uint16] */, %932)
}

def @func_2190() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) {
  %933 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %934 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %935 = cast(meta[relay.Constant][50] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %936 = reshape(%935, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %937 = @func_1758(%936) /* ty=(Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) */;
  %938 = %933.0;
  %939 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
  %940 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %941 = %934.1;
  %942 = %937.0;
  (%938, %939, %940, %941, %942, meta[relay.Constant][50] /* ty=Tensor[(1056), int8] */)
}

def @func_2294() -> (Tensor[(5, 8, 132), float64],) {
  %943 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %944 = %943.2;
  (%944,)
}

def @func_3614(%var_3584: Tensor[(5, 8, 12), float64]) -> (Tensor[(5, 8, 12), bool], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
  %945 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %946 = %945.0;
  %947 = cast(%946, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %948 = cast(%var_3584, dtype="bool") /* ty=Tensor[(5, 8, 12), bool] */;
  %949 = cast(meta[relay.Constant][51] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %950 = reshape(%949, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %951 = @func_322(%950) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %952 = logical_or(%947, %948) /* ty=Tensor[(5, 8, 12), bool] */;
  %953 = %951.0;
  (%952, %953, meta[relay.Constant][51] /* ty=Tensor[(1056), int8] */)
}

def @func_2847() -> (Tensor[(5, 8, ?), uint64],) {
  %954 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  %955 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 8, 1), float64] */, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%954, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %959 = bitwise_and(%957, %958) /* ty=Tensor[(5, 8, ?), uint64] */;
  (%959,)
}

def @func_6381(%var_6374: Tensor[(45), float32]) -> (Tensor[(4, 12, 2), uint32], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) {
  %960 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
  %961 = @func_5490() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */;
  %962 = cast(%var_6374, dtype="float32") /* ty=Tensor[(45), float32] */;
  %963 = reshape(%962, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
  %964 = %960.0;
  %965 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
  %966 = %961.0;
  %967 = @func_2453(%963) /* ty=Tensor[(15, 3, 1), float32] */;
  (%964, %965, %966, %967, %var_6374)
}

def @func_2685(%var_2636: Tensor[(1056), int8], %var_2672: Tensor[(660), float64], %var_2678: Tensor[(160), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(10, 6, 11), float64], Tensor[(660), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) {
  %968 = cast(%var_2636, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %969 = reshape(%968, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %970 = @func_322(%969) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %971 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %972 = cast(%var_2672, dtype="float64") /* ty=Tensor[(660), float64] */;
  %973 = cast(%var_2672, dtype="float64") /* ty=Tensor[(660), float64] */;
  %974 = %970.0;
  %975 = cast(%974, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
  %976 = reshape(%972, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %977 = reshape(%973, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %978 = reshape(%975, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %979 = @func_481(%976, %977, %978) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %980 = cast(%var_2678, dtype="float64") /* ty=Tensor[(160), float64] */;
  %981 = reshape(%980, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
  %982 = @func_2564(%981) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
  %983 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
  %984 = @func_1540() /* ty=Tensor[(5, 8, 1), float64] */;
  %985 = %971.0;
  %986 = %979.0;
  %987 = %982.3;
  (%983, %974, %var_2636, %984, %985, %986, %var_2672, %987, %var_2678)
}

def @func_7390() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) {
  %988 = @func_5535() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %989 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %990 = @func_5585() /* ty=(Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) */;
  %991 = %988.0;
  %992 = %989.0;
  %993 = %990.1;
  (%991, %992, %993)
}

def @func_10260(%var_10245: Tensor[(1584), float32]) -> (Tensor[(5, 8, 1056), int64], Tensor[(2, 528), bool], Tensor[(5, 8, 1), float64], Tensor[(16, 11, 9), uint64], Tensor[(1584), float32]) {
  %994 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
  %995 = %994.0;
  %996 = @func_6475() /* ty=Tensor[(5, 8, ?), float64] */;
  %997 = cast(%995, dtype="int64") /* ty=Tensor[(1056), int64] */;
  %998 = cast(%996, dtype="int64") /* ty=Tensor[(5, 8, ?), int64] */;
  %999 = cast(%995, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %1000 = reshape(%999, newshape=[2, 528]) /* ty=Tensor[(2, 528), int8] */;
  %1001 = @func_7589(%1000) /* ty=(Tensor[(2, 528), bool], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(2, 528), bool]) */;
  %1002 = @func_6982() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */;
  %1003 = cast(%var_10245, dtype="float32") /* ty=Tensor[(1584), float32] */;
  %1004 = reshape(%1003, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
  %1005 = @func_7680(%1004) /* ty=(Tensor[(16, 11, 9), uint64], Tensor[(5, 8, ?), int16]) */;
  %1006 = maximum(%997, %998) /* ty=Tensor[(5, 8, 1056), int64] */;
  %1007 = %1001.4;
  %1008 = %1002.0;
  %1009 = %1005.0;
  (%1006, %1007, %1008, %1009, %var_10245)
}

def @func_1176() -> Tensor[(5, 8, 1), float64] {
  %1010 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  sigmoid(%1010) /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_3795() -> (Tensor[(5, 8, 1), float64],) {
  %1011 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %1012 = %1011.0;
  (%1012,)
}

def @func_9308() -> Tensor[(5, 8, ?), int16] {
  %1013 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
  %1013.2
}

def @func_10720() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8]) {
  %1014 = @func_4478() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %1015 = @func_4423() /* ty=(Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %1016 = %1014.0;
  %1017 = %1015.0;
  (%1016, %1017)
}

def @func_2927() -> Tensor[(5, 8, 1), float64] {
  @func_1176() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_9220(%var_9194: Tensor[(1, 7, 4), int16], %var_9195: Tensor[(14, 7, 4), int16]) -> Tensor[(14, 7, 4), int16] {
  %1018 = cast(%var_9194, dtype="int16") /* ty=Tensor[(1, 7, 4), int16] */;
  %1019 = cast(%var_9195, dtype="int16") /* ty=Tensor[(14, 7, 4), int16] */;
  logical_xor(%1018, %1019) /* ty=Tensor[(14, 7, 4), int16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2357(%var_2335: Tensor[(5, 8, 4), float64]) -> (Tensor[(5, 8, 4), uint64],) {
  %0 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
  %1 = cast(%0, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
  %2 = cast(%var_2335, dtype="uint64") /* ty=Tensor[(5, 8, 4), uint64] */;
  %3 = right_shift(%1, %2) /* ty=Tensor[(5, 8, 4), uint64] */;
  (%3,)
}

def @func_2610(%var_2608: Tensor[(13, 5, 8), float32]) -> Tensor[(13, 5, 8), float32] {
  @func_2607(%var_2608) /* ty=Tensor[(13, 5, 8), float32] */
}

def @func_10386() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64]) {
  %7 = fn () -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64]) {
    %4 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
    %5 = %4.2;
    %6 = @func_9192() /* ty=Tensor[(5, 8, 1), float64] */;
    (%5, %6)
  };
  %7() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64]) */
}

def @func_3312() -> (Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
  %18 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
    %8 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %9 = %8.0;
    %10 = cast(%9, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
    %11 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %12 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
    %13 = sinh(%10) /* ty=Tensor[(5, 8, 1), float64] */;
    %14 = @func_2781() /* ty=Tensor[(64), uint16] */;
    %15 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
    %16 = %11.0;
    %17 = %12.1;
    (%13, %14, %15, %16, %17)
  };
  %18() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */
}

def @func_8871() -> (Tensor[(5, 8, ?), uint64],) {
  @func_8869() /* ty=(Tensor[(5, 8, ?), uint64],) */
}

def @func_8022() -> (Tensor[(5, 8, 64), bool], Tensor[(64), uint16], Tensor[(2, 528), int16]) {
  @func_8020() /* ty=(Tensor[(5, 8, 64), bool], Tensor[(64), uint16], Tensor[(2, 528), int16]) */
}

def @func_6696() -> (Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) {
  %25 = fn () -> (Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) {
    %19 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
    %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %21 = reshape(%20, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
    %22 = @func_1758(%21) /* ty=(Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) */;
    %23 = %19.2;
    %24 = %22.0;
    (%23, %24, meta[relay.Constant][0] /* ty=Tensor[(1056), int8] */)
  };
  %25() /* ty=(Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */
}

def @func_8869() -> (Tensor[(5, 8, ?), uint64],) {
  %26 = @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%26,)
}

def @func_11701(%var_11679: Tensor[(5, 8, 8), float64]) -> (Tensor[(5, 8, 8), uint16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) {
  %27 = @func_6009() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) */;
  %28 = %27.0;
  %29 = cast(%28, dtype="uint16") /* ty=Tensor[(5, 8, ?), uint16] */;
  %30 = cast(%var_11679, dtype="uint16") /* ty=Tensor[(5, 8, 8), uint16] */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %32 = reshape(%31, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
  %33 = multiply(%29, %30) /* ty=Tensor[(5, 8, 8), uint16] */;
  %34 = @func_2453(%32) /* ty=Tensor[(15, 3, 1), float32] */;
  (%33, %34, meta[relay.Constant][1] /* ty=Tensor[(45), float32] */)
}

def @func_10631() -> (Tensor[(160), float64],) {
  %35 = @func_4614() /* ty=(Tensor[(160), float64],) */;
  %36 = %35.0;
  (%36,)
}

def @func_7054() -> Tensor[(5, 8, 132), float64] {
  @func_7052() /* ty=Tensor[(5, 8, 132), float64] */
}

def @func_9223(%var_9221: Tensor[(1, 7, 4), int16], %var_9222: Tensor[(14, 7, 4), int16]) -> Tensor[(14, 7, 4), int16] {
  %39 = fn (%var_9194: Tensor[(1, 7, 4), int16], %var_9195: Tensor[(14, 7, 4), int16]) -> Tensor[(14, 7, 4), int16] {
    %37 = cast(%var_9194, dtype="int16") /* ty=Tensor[(1, 7, 4), int16] */;
    %38 = cast(%var_9195, dtype="int16") /* ty=Tensor[(14, 7, 4), int16] */;
    logical_xor(%37, %38) /* ty=Tensor[(14, 7, 4), int16] */
  };
  %39(%var_9221, %var_9222) /* ty=Tensor[(14, 7, 4), int16] */
}

def @func_9285() -> Tensor[(5, 8, 1), float64] {
  %41 = fn () -> Tensor[(5, 8, 1), float64] {
    %40 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
    %40.1
  };
  %41() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_1697() -> Tensor[(5, 8, 1), float64] {
  %43 = fn () -> Tensor[(5, 8, 1), float64] {
    %42 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
    %42.1
  };
  %43() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_12164() -> (Tensor[(5, 8, ?), int16],) {
  %45 = fn () -> (Tensor[(5, 8, ?), int16],) {
    %44 = @func_12114() /* ty=Tensor[(5, 8, ?), int16] */;
    (%44,)
  };
  %45() /* ty=(Tensor[(5, 8, ?), int16],) */
}

def @func_6321(%var_6300: Tensor[(5, 8, 3), float64]) -> (Tensor[(5, 8, 3), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
  %46 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %47 = %46.1;
  %48 = cast(%47, dtype="int64") /* ty=Tensor[(5, 8, 1), int64] */;
  %49 = cast(%var_6300, dtype="int64") /* ty=Tensor[(5, 8, 3), int64] */;
  %50 = @func_3795() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %51 = maximum(%48, %49) /* ty=Tensor[(5, 8, 3), int64] */;
  %52 = %50.0;
  %53 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
  (%51, %52, %53)
}

def @func_7945() -> Tensor[(5, 8, ?), uint64] {
  @func_7943() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_5099() -> Tensor[(5, 8, 1), float64] {
  %55 = fn () -> Tensor[(5, 8, 1), float64] {
    %54 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %54.0
  };
  %55() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_1331(%var_1311: Tensor[(1056), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) {
  %56 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %57 = cast(%var_1311, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %58 = reshape(%57, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %59 = @func_322(%58) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(11, 12, 8), float32] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %64 = cast(%var_1311, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %65 = reshape(%62, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %66 = reshape(%63, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
  %67 = reshape(%64, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %68 = @func_481(%65, %66, %67) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %69 = %56.0;
  %70 = asin(%61) /* ty=Tensor[(11, 12, 8), float32] */;
  %71 = %68.1;
  (%69, %var_1311, %70, %71, meta[relay.Constant][2] /* ty=Tensor[(660), float64] */)
}

def @func_2689(%var_2686: Tensor[(1056), int8], %var_2687: Tensor[(660), float64], %var_2688: Tensor[(160), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(10, 6, 11), float64], Tensor[(660), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) {
  %92 = fn (%var_2636: Tensor[(1056), int8], %var_2672: Tensor[(660), float64], %var_2678: Tensor[(160), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(10, 6, 11), float64], Tensor[(660), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) {
    %72 = cast(%var_2636, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %73 = reshape(%72, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
    %74 = @func_322(%73) /* ty=(Tensor[(11, 12, 8), int8],) */;
    %75 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %76 = cast(%var_2672, dtype="float64") /* ty=Tensor[(660), float64] */;
    %77 = cast(%var_2672, dtype="float64") /* ty=Tensor[(660), float64] */;
    %78 = %74.0;
    %79 = cast(%78, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
    %80 = reshape(%76, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %81 = reshape(%77, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %82 = reshape(%79, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %83 = @func_481(%80, %81, %82) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
    %84 = cast(%var_2678, dtype="float64") /* ty=Tensor[(160), float64] */;
    %85 = reshape(%84, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
    %86 = @func_2564(%85) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
    %87 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
    %88 = @func_1540() /* ty=Tensor[(5, 8, 1), float64] */;
    %89 = %75.0;
    %90 = %83.0;
    %91 = %86.3;
    (%87, %78, %var_2636, %88, %89, %90, %var_2672, %91, %var_2678)
  };
  %92(%var_2686, %var_2687, %var_2688) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(10, 6, 11), float64], Tensor[(660), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */
}

def @func_6905(%var_6902: Tensor[(5, 8, 132), float64], %var_6903: Tensor[(660), float64], %var_6904: Tensor[(1056), int8]) -> (Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) {
  %108 = fn (%var_6889: Tensor[(5, 8, 132), float64], %var_6896: Tensor[(660), float64], %var_6897: Tensor[(1056), int8]) -> (Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) {
    %93 = @func_2294() /* ty=(Tensor[(5, 8, 132), float64],) */;
    %94 = %93.0;
    %95 = cast(%var_6889, dtype="bool") /* ty=Tensor[(5, 8, 132), bool] */;
    %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
    %97 = cast(%94, dtype="bool") /* ty=Tensor[(5, 8, 132), bool] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 56), float32] */, dtype="float32") /* ty=Tensor[(5, 56), float32] */;
    %100 = cast(%var_6896, dtype="float64") /* ty=Tensor[(660), float64] */;
    %101 = cast(%var_6897, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %102 = reshape(%99, newshape=[7, 10, 4]) /* ty=Tensor[(7, 10, 4), float32] */;
    %103 = reshape(%100, newshape=[660]) /* ty=Tensor[(660), float64] */;
    %104 = reshape(%101, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %105 = @func_1376(%102, %103, %104) /* ty=(Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) */;
    %106 = logical_and(%97, %98) /* ty=Tensor[(5, 8, 132), bool] */;
    %107 = %105.1;
    (%106, %107, meta[relay.Constant][3] /* ty=Tensor[(5, 56), float32] */, %var_6896, %var_6897)
  };
  %108(%var_6902, %var_6903, %var_6904) /* ty=(Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) */
}

def @func_11978() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) {
  @func_11976() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */
}

def @func_2294() -> (Tensor[(5, 8, 132), float64],) {
  %109 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %110 = %109.2;
  (%110,)
}

def @func_8854() -> Tensor[(5, 8, 1), float64] {
  %111 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %111.0
}

def @func_3982(%var_3968: Tensor[(1056), int8], %var_3969: Tensor[(660), float64], %var_3970: Tensor[(16, 10), float64]) -> (Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) {
  %112 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %113 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %114 = cast(%var_3968, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %115 = cast(%var_3969, dtype="float64") /* ty=Tensor[(660), float64] */;
  %116 = cast(%var_3970, dtype="float64") /* ty=Tensor[(16, 10), float64] */;
  %117 = reshape(%114, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %118 = reshape(%115, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %119 = reshape(%116, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %120 = @func_2685(%117, %118, %119) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(10, 6, 11), float64], Tensor[(660), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */;
  %121 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %122 = %112.2;
  %123 = %113.0;
  %124 = %120.1;
  %125 = %121.0;
  (%122, %123, %124, %var_3968, %var_3969, %var_3970, %125)
}

def @func_6477() -> Tensor[(5, 8, ?), float64] {
  @func_6475() /* ty=Tensor[(5, 8, ?), float64] */
}

def @func_8063() -> (Tensor[(5, 8, 1), float64],) {
  %126 = @func_7210() /* ty=Tensor[(5, 8, 1), float64] */;
  (%126,)
}

def @func_5207() -> (Tensor[(5, 8, ?), int16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  @func_5205() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */
}

def @func_5446() -> (Tensor[(64), uint16],) {
  %128 = fn () -> (Tensor[(64), uint16],) {
    %127 = @func_2781() /* ty=Tensor[(64), uint16] */;
    (%127,)
  };
  %128() /* ty=(Tensor[(64), uint16],) */
}

def @func_10981(%var_10979: Tensor[(5, 8, 12), bool]) -> (Tensor[(5, 8, 12), float32],) {
  @func_10978(%var_10979) /* ty=(Tensor[(5, 8, 12), float32],) */
}

def @func_7435() -> Tensor[(5, 8, ?), bool] {
  %129 = fn () -> Tensor[(5, 8, ?), bool] {
    @func_5376() /* ty=Tensor[(5, 8, ?), bool] */
  };
  %129() /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_7943() -> Tensor[(5, 8, ?), uint64] {
  @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_4014() -> (Tensor[(1056), int8],) {
  @func_4012() /* ty=(Tensor[(1056), int8],) */
}

def @func_10262(%var_10261: Tensor[(1584), float32]) -> (Tensor[(5, 8, 1056), int64], Tensor[(2, 528), bool], Tensor[(5, 8, 1), float64], Tensor[(16, 11, 9), uint64], Tensor[(1584), float32]) {
  %146 = fn (%var_10245: Tensor[(1584), float32]) -> (Tensor[(5, 8, 1056), int64], Tensor[(2, 528), bool], Tensor[(5, 8, 1), float64], Tensor[(16, 11, 9), uint64], Tensor[(1584), float32]) {
    %130 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
    %131 = %130.0;
    %132 = @func_6475() /* ty=Tensor[(5, 8, ?), float64] */;
    %133 = cast(%131, dtype="int64") /* ty=Tensor[(1056), int64] */;
    %134 = cast(%132, dtype="int64") /* ty=Tensor[(5, 8, ?), int64] */;
    %135 = cast(%131, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %136 = reshape(%135, newshape=[2, 528]) /* ty=Tensor[(2, 528), int8] */;
    %137 = @func_7589(%136) /* ty=(Tensor[(2, 528), bool], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(2, 528), bool]) */;
    %138 = @func_6982() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */;
    %139 = cast(%var_10245, dtype="float32") /* ty=Tensor[(1584), float32] */;
    %140 = reshape(%139, newshape=[16, 11, 9]) /* ty=Tensor[(16, 11, 9), float32] */;
    %141 = @func_7680(%140) /* ty=(Tensor[(16, 11, 9), uint64], Tensor[(5, 8, ?), int16]) */;
    %142 = maximum(%133, %134) /* ty=Tensor[(5, 8, 1056), int64] */;
    %143 = %137.4;
    %144 = %138.0;
    %145 = %141.0;
    (%142, %143, %144, %145, %var_10245)
  };
  %146(%var_10261) /* ty=(Tensor[(5, 8, 1056), int64], Tensor[(2, 528), bool], Tensor[(5, 8, 1), float64], Tensor[(16, 11, 9), uint64], Tensor[(1584), float32]) */
}

def @func_11286() -> (Tensor[(5, 8, 1), float64],) {
  %147 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  (%147,)
}

def @func_10132() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(64), uint16]) {
  @func_10130() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(64), uint16]) */
}

def @func_4478() -> (Tensor[(5, 8, 1), float64],) {
  %148 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %149 = %148.0;
  (%149,)
}

def @func_4879(%var_4815: Tensor[(2, 2, 16), uint16]) -> (Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) {
  %150 = cast(meta[relay.Constant][4] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %151 = reshape(%150, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %152 = @func_1770(%151) /* ty=Tensor[(2, 2, 16), uint16] */;
  %153 = cast(%var_4815, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="bool") /* ty=Tensor[(2, 2, 16), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = cast(%152, dtype="uint16") /* ty=Tensor[(2, 2, 16), uint16] */;
  %158 = reshape(%157, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
  %159 = @func_2977(%158) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
  %160 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %161 = @func_2927() /* ty=Tensor[(5, 8, 1), float64] */;
  %162 = cast(%161, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %163 = cast(meta[relay.Constant][4] /* ty=Tensor[(64), uint16] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %164 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %165 = cast(%161, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %166 = cast(meta[relay.Constant][4] /* ty=Tensor[(64), uint16] */, dtype="bool") /* ty=Tensor[(64), bool] */;
  %167 = less(%165, %166) /* ty=Tensor[(5, 8, 64), bool] */;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(5, 8, 64), float64] */;
  %169 = greater(%155, %156) /* ty=Tensor[(2, 2, 16), bool] */;
  %170 = %159.0;
  %171 = %160.0;
  %172 = logical_and(%162, %163) /* ty=Tensor[(5, 8, 64), bool] */;
  %173 = %164.0;
  %174 = cos(%168) /* ty=Tensor[(5, 8, 64), float64] */;
  (%169, %170, %171, %172, %173, %174)
}

def @func_10477() -> (Tensor[(5, 8, 1), float64],) {
  %177 = fn () -> (Tensor[(5, 8, 1), float64],) {
    %175 = @func_10172() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) */;
    %176 = %175.2;
    (%176,)
  };
  %177() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_6475() -> Tensor[(5, 8, ?), float64] {
  %178 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %178.0
}

def @func_3396() -> (Tensor[(5, 8, ?), bool],) {
  %179 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %180 = %179.0;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
  %182 = acos(%181) /* ty=Tensor[(5, 8, 1), float32] */;
  %183 = cast(%180, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %187 = less(%185, %186) /* ty=Tensor[(5, 8, ?), bool] */;
  (%187,)
}

def @func_5138() -> Tensor[(5, 8, ?), int16] {
  @func_5136() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_9948() -> (Tensor[(5, 8, ?), bool],) {
  %188 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %189 = %188.0;
  (%189,)
}

def @func_2927() -> Tensor[(5, 8, 1), float64] {
  @func_1176() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_4424() -> (Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  %198 = fn () -> (Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
    %190 = cast(meta[relay.Constant][5] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
    %191 = reshape(%190, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
    %192 = @func_2977(%191) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
    %193 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
    %194 = cast(%193, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
    %195 = @func_3042() /* ty=Tensor[(11, 12, 8), int8] */;
    %196 = %192.0;
    %197 = atan(%194) /* ty=Tensor[(5, 8, 1), float64] */;
    (%195, %196, meta[relay.Constant][5] /* ty=Tensor[(64), uint16] */, %197)
  };
  %198() /* ty=(Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */
}

def @func_3343(%var_3333: Tensor[(6, 13, 13), float32]) -> (Tensor[(6, 13, 13), float32], Tensor[(5, 8, 1), float64], Tensor[(6, 13, 13), float64]) {
  %199 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 13), float32] */;
  %200 = shape_of(%var_3333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_3333, dtype="float32") /* ty=Tensor[(6, 13, 13), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %203 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %204 = cast(%var_3333, dtype="float64") /* ty=Tensor[(6, 13, 13), float64] */;
  %205 = floor_divide(%201, %202) /* ty=Tensor[(6, 13, 13), float32] */;
  %206 = %203.0;
  %207 = sinh(%204) /* ty=Tensor[(6, 13, 13), float64] */;
  (%205, %206, %207)
}

def @func_9950() -> (Tensor[(5, 8, ?), bool],) {
  @func_9948() /* ty=(Tensor[(5, 8, ?), bool],) */
}

def @func_6743(%var_6717: Tensor[(1, 45), float32]) -> (Tensor[(5, 8, 1), float64], Tensor[(1, 45), float32], Tensor[(5, 8, ?), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 64), int64], Tensor[(5, 8, 1), float64]) {
  %208 = cast(%var_6717, dtype="float32") /* ty=Tensor[(1, 45), float32] */;
  %209 = reshape(%208, newshape=[45]) /* ty=Tensor[(45), float32] */;
  %210 = @func_6381(%209) /* ty=(Tensor[(4, 12, 2), uint32], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) */;
  %211 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %212 = cast(meta[relay.Constant][7] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %213 = reshape(%212, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %214 = @func_322(%213) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %215 = @func_2728() /* ty=Tensor[(64), uint16] */;
  %216 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  %217 = cast(%215, dtype="int64") /* ty=Tensor[(64), int64] */;
  %218 = cast(%216, dtype="int64") /* ty=Tensor[(5, 8, 1), int64] */;
  %219 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %220 = %210.1;
  %221 = %211.0;
  %222 = %214.0;
  %223 = bitwise_xor(%217, %218) /* ty=Tensor[(5, 8, 64), int64] */;
  %224 = %219.0;
  (%220, %var_6717, %221, %222, meta[relay.Constant][7] /* ty=Tensor[(1056), int8] */, %223, %224)
}

def @func_10187() -> (Tensor[(4, 12, 2), uint32],) {
  %225 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
  %226 = %225.0;
  (%226,)
}

def @func_11595() -> Tensor[(5, 8, ?), float64] {
  %227 = fn () -> Tensor[(5, 8, ?), float64] {
    @func_6475() /* ty=Tensor[(5, 8, ?), float64] */
  };
  %227() /* ty=Tensor[(5, 8, ?), float64] */
}

def @func_2296() -> (Tensor[(5, 8, 132), float64],) {
  @func_2294() /* ty=(Tensor[(5, 8, 132), float64],) */
}

def @func_8668() -> Tensor[(5, 8, ?), bool] {
  %228 = fn () -> Tensor[(5, 8, ?), bool] {
    @func_5376() /* ty=Tensor[(5, 8, ?), bool] */
  };
  %228() /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_1772(%var_1771: Tensor[(2, 2, 16), uint16]) -> Tensor[(2, 2, 16), uint16] {
  %233 = fn (%var_1765: Tensor[(2, 2, 16), uint16]) -> Tensor[(2, 2, 16), uint16] {
    %229 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 2, 16), uint16] */, dtype="uint16") /* ty=Tensor[(2, 2, 16), uint16] */;
    %230 = shape_of(%var_1765, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(%var_1765, dtype="uint16") /* ty=Tensor[(2, 2, 16), uint16] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    left_shift(%231, %232) /* ty=Tensor[(2, 2, 16), uint16] */
  };
  %233(%var_1771) /* ty=Tensor[(2, 2, 16), uint16] */
}

def @func_6956(%var_6954: Tensor[(64), uint16]) -> (Tensor[(5, 8, ?), bool], Tensor[(2, 32), uint16], Tensor[(64), uint16]) {
  @func_6953(%var_6954) /* ty=(Tensor[(5, 8, ?), bool], Tensor[(2, 32), uint16], Tensor[(64), uint16]) */
}

def @func_11288() -> (Tensor[(5, 8, 1), float64],) {
  @func_11286() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_10930() -> (Tensor[(64), uint16], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), uint8]) {
  @func_10928() /* ty=(Tensor[(64), uint16], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), uint8]) */
}

def @func_11900(%var_11814: Tensor[(1056), int8], %var_11896: Tensor[(5, 8, 280), uint8]) -> (Tensor[(2, 3, 8), float64], Tensor[(7, 10, 4), bool], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(64), uint16], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 280), int64], Tensor[(5, 8, 280), uint16]) {
  %234 = @func_4694() /* ty=(Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) */;
  %235 = cast(meta[relay.Constant][9] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %236 = cast(meta[relay.Constant][10] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %237 = cast(%var_11814, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %238 = reshape(%235, newshape=[7, 10, 4]) /* ty=Tensor[(7, 10, 4), float32] */;
  %239 = reshape(%236, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %240 = reshape(%237, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %241 = @func_1376(%238, %239, %240) /* ty=(Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %242 = cast(meta[relay.Constant][10] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
  %243 = reshape(%242, newshape=[660, 1]) /* ty=Tensor[(660, 1), float64] */;
  %244 = @func_6589(%243) /* ty=(Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(660, 1), float64], Tensor[(1056), int8]) */;
  %245 = @func_10928() /* ty=(Tensor[(64), uint16], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), uint8]) */;
  %246 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %247 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %248 = @func_8277() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %249 = %248.0;
  %250 = cast(meta[relay.Constant][9] /* ty=Tensor[(280), float32] */, dtype="uint8") /* ty=Tensor[(280), uint8] */;
  %251 = cast(%249, dtype="uint8") /* ty=Tensor[(5, 8, ?), uint8] */;
  %252 = bitwise_and(%250, %251) /* ty=Tensor[(5, 8, 280), uint8] */;
  %253 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="int16") /* ty=Tensor[(5, 8, 280), int16] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="int16") /* ty=Tensor[(5, 8, 280), int16] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %257 = multiply(%255, %256) /* ty=Tensor[(5, 8, 280), int16] */;
  %258 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="int64") /* ty=Tensor[(5, 8, 280), int64] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="int64") /* ty=Tensor[(5, 8, 280), int64] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %262 = cast(%var_11896, dtype="uint16") /* ty=Tensor[(5, 8, 280), uint16] */;
  %263 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 8, 280), uint8] */, dtype="uint16") /* ty=Tensor[(5, 8, 280), uint16] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %266 = %234.0;
  %267 = %241.0;
  %268 = %244.3;
  %269 = %245.0;
  %270 = %246.0;
  %271 = %247.0;
  %272 = minimum(%260, %261) /* ty=Tensor[(5, 8, 280), int64] */;
  %273 = bitwise_or(%264, %265) /* ty=Tensor[(5, 8, 280), uint16] */;
  (%266, %267, meta[relay.Constant][10] /* ty=Tensor[(660), float64] */, %var_11814, %268, %269, %270, %271, %272, %273)
}

def @func_11976() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) {
  %274 = @func_11286() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %275 = @func_8869() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %276 = %274.0;
  %277 = %275.0;
  (%276, %277)
}

def @func_9131(%var_9129: Tensor[(3, 10, 4), float32], %var_9130: Tensor[(3, 10, 4), float32]) -> (Tensor[(3, 10, 4), float32], Tensor[(15, 3, 1), float32], Tensor[(5, 8, 45), uint32], Tensor[(11, 12, 8), int8]) {
  @func_9127(%var_9129, %var_9130) /* ty=(Tensor[(3, 10, 4), float32], Tensor[(15, 3, 1), float32], Tensor[(5, 8, 45), uint32], Tensor[(11, 12, 8), int8]) */
}

def @func_10993() -> (Tensor[(4, 12, 2), uint32], Tensor[(15, 2, 3), bool], Tensor[(15, 6), int8], Tensor[(5, 8, ?), int16]) {
  %278 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
  %279 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 6), int8] */;
  %280 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 6), int8] */, dtype="int8") /* ty=Tensor[(15, 6), int8] */;
  %281 = reshape(%279, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), int8] */;
  %282 = reshape(%280, newshape=[15, 2, 3]) /* ty=Tensor[(15, 2, 3), int8] */;
  %283 = @func_5745(%281, %282) /* ty=(Tensor[(15, 2, 3), bool], Tensor[(5, 8, 1), float64]) */;
  %284 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %285 = %278.0;
  %286 = %283.0;
  %287 = %284.0;
  (%285, %286, meta[relay.Constant][12] /* ty=Tensor[(15, 6), int8] */, %287)
}

def @func_4731() -> (Tensor[(5, 8, 1), float64],) {
  %289 = fn () -> (Tensor[(5, 8, 1), float64],) {
    %288 = @func_2927() /* ty=Tensor[(5, 8, 1), float64] */;
    (%288,)
  };
  %289() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_7830(%var_7826: Tensor[(5280, 1), float64], %var_7827: Tensor[(330, 2), float64], %var_7828: Tensor[(1056, 1), int8]) -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(660), float64], Tensor[(5280, 1), float64], Tensor[(330, 2), float64], Tensor[(1056, 1), int8]) {
  %290 = @func_6009() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) */;
  %291 = @func_7390() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
  %292 = cast(%var_7826, dtype="float64") /* ty=Tensor[(5280, 1), float64] */;
  %293 = cast(%var_7827, dtype="float64") /* ty=Tensor[(330, 2), float64] */;
  %294 = cast(%var_7828, dtype="int8") /* ty=Tensor[(1056, 1), int8] */;
  %295 = reshape(%292, newshape=[5, 8, 132]) /* ty=Tensor[(5, 8, 132), float64] */;
  %296 = reshape(%293, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %297 = reshape(%294, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %298 = @func_6901(%295, %296, %297) /* ty=(Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %299 = %290.1;
  %300 = %291.1;
  %301 = @func_4573() /* ty=Tensor[(5, 8, ?), int16] */;
  %302 = %298.3;
  (%299, %300, %301, %302, %var_7826, %var_7827, %var_7828)
}

def @func_4480() -> (Tensor[(5, 8, 1), float64],) {
  @func_4478() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_8822() -> Tensor[(5, 8, ?), bool] {
  %304 = fn () -> Tensor[(5, 8, ?), bool] {
    %303 = @func_8277() /* ty=(Tensor[(5, 8, ?), bool],) */;
    %303.0
  };
  %304() /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_1541() -> Tensor[(5, 8, 1), float64] {
  %306 = fn () -> Tensor[(5, 8, 1), float64] {
    %305 = @func_1427() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
    %305.0
  };
  %306() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_8791(%var_8789: Tensor[(3, 2, 7), uint32]) -> Tensor[(3, 2, 7), uint32] {
  @func_8788(%var_8789) /* ty=Tensor[(3, 2, 7), uint32] */
}

def @func_7210() -> Tensor[(5, 8, 1), float64] {
  %307 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %307.1
}

def @func_7682(%var_7681: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), uint64], Tensor[(5, 8, ?), int16]) {
  %316 = fn (%var_7640: Tensor[(16, 11, 9), float32]) -> (Tensor[(16, 11, 9), uint64], Tensor[(5, 8, ?), int16]) {
    %308 = cast(%var_7640, dtype="float32") /* ty=Tensor[(16, 11, 9), float32] */;
    %309 = cos(%308) /* ty=Tensor[(16, 11, 9), float32] */;
    %310 = cast(%var_7640, dtype="uint64") /* ty=Tensor[(16, 11, 9), uint64] */;
    %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(%309, dtype="uint64") /* ty=Tensor[(16, 11, 9), uint64] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %314 = right_shift(%312, %313) /* ty=Tensor[(16, 11, 9), uint64] */;
    %315 = @func_5136() /* ty=Tensor[(5, 8, ?), int16] */;
    (%314, %315)
  };
  %316(%var_7681) /* ty=(Tensor[(16, 11, 9), uint64], Tensor[(5, 8, ?), int16]) */
}

def @func_486(%var_483: Tensor[(10, 6, 11), float64], %var_484: Tensor[(10, 6, 11), float64], %var_485: Tensor[(1056), int8]) -> (Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
  @func_481(%var_483, %var_484, %var_485) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */
}

def @func_6639() -> Tensor[(5, 8, 132), float64] {
  %317 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %317.2
}

def @func_3398() -> (Tensor[(5, 8, ?), bool],) {
  @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */
}

def @func_5535() -> (Tensor[(5, 8, ?), int16],) {
  %318 = @func_3907() /* ty=Tensor[(5, 8, ?), int16] */;
  (%318,)
}

def @func_8529() -> (Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) {
  %319 = @func_7292() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
  %320 = %319.1;
  %321 = cast(%320, dtype="uint32") /* ty=Tensor[(5, 8, ?), uint32] */;
  %322 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 8, 3), int16] */, dtype="uint32") /* ty=Tensor[(5, 8, 3), uint32] */;
  %323 = bitwise_or(%321, %322) /* ty=Tensor[(5, 8, 3), uint32] */;
  %324 = @func_2728() /* ty=Tensor[(64), uint16] */;
  %325 = @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%323, %324, %325)
}

def @func_5839(%var_5837: Tensor[(64), uint16], %var_5838: Tensor[(88, 12), float64]) -> (Tensor[(5, 8, ?), int16], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(88, 12), bool], Tensor[(88, 12), float32]) {
  @func_5835(%var_5837, %var_5838) /* ty=(Tensor[(5, 8, ?), int16], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(88, 12), bool], Tensor[(88, 12), float32]) */
}

def @func_12019(%var_12018: Tensor[(5, 8, 1), float64]) -> (Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) {
  %335 = fn (%var_12003: Tensor[(5, 8, 1), float64]) -> (Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) {
    %326 = @func_3311() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
    %327 = %326.4;
    %328 = cast(%var_12003, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
    %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
    %330 = cast(%327, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
    %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %332 = @func_6270() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) */;
    %333 = logical_xor(%330, %331) /* ty=Tensor[(5, 8, ?), uint64] */;
    %334 = %332.2;
    (%333, %334)
  };
  %335(%var_12018) /* ty=(Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) */
}

def @func_8020() -> (Tensor[(5, 8, 64), bool], Tensor[(64), uint16], Tensor[(2, 528), int16]) {
  %336 = cast(meta[relay.Constant][14] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %337 = reshape(%336, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %338 = @func_4879(%337) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) */;
  %339 = @func_3456() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) */;
  %340 = %339.2;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(2, 528), float64] */;
  %342 = tan(%341) /* ty=Tensor[(2, 528), float64] */;
  %343 = cast(%340, dtype="uint64") /* ty=Tensor[(2, 528), uint64] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(2), int32] */;
  %345 = cast(%342, dtype="uint64") /* ty=Tensor[(2, 528), uint64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %347 = bitwise_and(%345, %346) /* ty=Tensor[(2, 528), uint64] */;
  %348 = cast(%347, dtype="int16") /* ty=Tensor[(2, 528), int16] */;
  %349 = shape_of(%342, dtype="int32") /* ty=Tensor[(2), int32] */;
  %350 = cast(%342, dtype="int16") /* ty=Tensor[(2, 528), int16] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %352 = %338.3;
  %353 = add(%350, %351) /* ty=Tensor[(2, 528), int16] */;
  (%352, meta[relay.Constant][14] /* ty=Tensor[(64), uint16] */, %353)
}

def @func_4615() -> (Tensor[(160), float64],) {
  %356 = fn () -> (Tensor[(160), float64],) {
    %354 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
    %355 = %354.2;
    (%355,)
  };
  %356() /* ty=(Tensor[(160), float64],) */
}

def @func_2728() -> Tensor[(64), uint16] {
  %357 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %357.6
}

def @func_11364() -> Tensor[(5, 8, 132), float64] {
  @func_7052() /* ty=Tensor[(5, 8, 132), float64] */
}

def @func_8206() -> Tensor[(64), uint16] {
  %359 = fn () -> Tensor[(64), uint16] {
    %358 = @func_5445() /* ty=(Tensor[(64), uint16],) */;
    %358.0
  };
  %359() /* ty=Tensor[(64), uint16] */
}

def @func_5921() -> Tensor[(1056), int8] {
  @func_5919() /* ty=Tensor[(1056), int8] */
}

def @func_8572() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16]) {
  %364 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16]) {
    %360 = @func_4730() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %361 = @func_5409() /* ty=(Tensor[(5, 8, ?), int16],) */;
    %362 = %360.0;
    %363 = %361.0;
    (%362, %363)
  };
  %364() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16]) */
}

def @func_10928() -> (Tensor[(64), uint16], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), uint8]) {
  %365 = @func_4647() /* ty=(Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) */;
  %366 = @func_8205() /* ty=Tensor[(64), uint16] */;
  %367 = @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */;
  %368 = %365.0;
  (%366, %367, %368)
}

def @func_7310() -> (Tensor[(11, 12, 8), int8],) {
  %370 = fn () -> (Tensor[(11, 12, 8), int8],) {
    %369 = @func_3042() /* ty=Tensor[(11, 12, 8), int8] */;
    (%369,)
  };
  %370() /* ty=(Tensor[(11, 12, 8), int8],) */
}

def @func_11331(%var_11330: Tensor[(4, 264), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(4, 264), uint64]) {
  %382 = fn (%var_11317: Tensor[(4, 264), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(4, 264), uint64]) {
    %371 = @func_6982() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */;
    %372 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 264), int8] */, dtype="int8") /* ty=Tensor[(4, 264), int8] */;
    %373 = reshape(%372, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %374 = @func_1331(%373) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) */;
    %375 = cast(%var_11317, dtype="uint64") /* ty=Tensor[(4, 264), uint64] */;
    %376 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(4, 264), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %377 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 264), int8] */, dtype="uint64") /* ty=Tensor[(4, 264), uint64] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %379 = %371.0;
    %380 = %374.4;
    %381 = bitwise_or(%377, %378) /* ty=Tensor[(4, 264), uint64] */;
    (%379, %380, %381)
  };
  %382(%var_11330) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(4, 264), uint64]) */
}

def @func_1931() -> Tensor[(5, 8, 1), float64] {
  %383 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %383.0
}

def @func_3043() -> Tensor[(11, 12, 8), int8] {
  %385 = fn () -> Tensor[(11, 12, 8), int8] {
    %384 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
    %384.1
  };
  %385() /* ty=Tensor[(11, 12, 8), int8] */
}

def @func_2730() -> Tensor[(64), uint16] {
  @func_2728() /* ty=Tensor[(64), uint16] */
}

def @func_6009() -> (Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) {
  %386 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %387 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %388 = %386.0;
  %389 = %387.0;
  (%388, %389)
}

def @func_3543() -> (Tensor[(5, 8, ?), bool],) {
  %390 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %391 = %390.0;
  (%391,)
}

def @func_5136() -> Tensor[(5, 8, ?), int16] {
  @func_4573() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_10579() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool]) {
  @func_10577() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool]) */
}

def @func_12116() -> Tensor[(5, 8, ?), int16] {
  @func_12114() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_8623() -> (Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), bool], Tensor[(64, 1), uint16], Tensor[(64), uint16]) {
  @func_8621() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), bool], Tensor[(64, 1), uint16], Tensor[(64), uint16]) */
}

def @func_9269() -> Tensor[(5, 8, 1), float64] {
  @func_9267() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_8994() -> Tensor[(5, 8, 1), float64] {
  @func_1696() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_8779() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool]) {
  %395 = fn () -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool]) {
    %392 = @func_5409() /* ty=(Tensor[(5, 8, ?), int16],) */;
    %393 = %392.0;
    %394 = @func_8667() /* ty=Tensor[(5, 8, ?), bool] */;
    (%393, %394)
  };
  %395() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool]) */
}

def @func_12114() -> Tensor[(5, 8, ?), int16] {
  %396 = @func_7292() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
  %396.0
}

def @func_5956(%var_5955: Tensor[(11, 8, 6), uint8]) -> (Tensor[(11, 8, 6), float64], Tensor[(11, 8, 6), float32]) {
  %408 = fn (%var_5928: Tensor[(11, 8, 6), uint8]) -> (Tensor[(11, 8, 6), float64], Tensor[(11, 8, 6), float32]) {
    %397 = cast(%var_5928, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
    %398 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(11, 8, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %399 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 8, 6), uint8] */, dtype="bool") /* ty=Tensor[(11, 8, 6), bool] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %401 = not_equal(%399, %400) /* ty=Tensor[(11, 8, 6), bool] */;
    %402 = cast(%401, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
    %403 = atan(%402) /* ty=Tensor[(11, 8, 6), float64] */;
    %404 = cast(%403, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
    %405 = cast(%403, dtype="float32") /* ty=Tensor[(11, 8, 6), float32] */;
    %406 = sqrt(%404) /* ty=Tensor[(11, 8, 6), float64] */;
    %407 = atanh(%405) /* ty=Tensor[(11, 8, 6), float32] */;
    (%406, %407)
  };
  %408(%var_5955) /* ty=(Tensor[(11, 8, 6), float64], Tensor[(11, 8, 6), float32]) */
}

def @func_10172() -> (Tensor[(5, 8, 5), int64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) {
  %409 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %410 = @func_5490() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */;
  %411 = %409.0;
  %412 = %410.3;
  %413 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
  (%411, %412, %413)
}

def @func_7212() -> Tensor[(5, 8, 1), float64] {
  @func_7210() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_11988() -> (Tensor[(5, 8, ?), bool],) {
  %415 = fn () -> (Tensor[(5, 8, ?), bool],) {
    %414 = @func_5376() /* ty=Tensor[(5, 8, ?), bool] */;
    (%414,)
  };
  %415() /* ty=(Tensor[(5, 8, ?), bool],) */
}

def @func_7390() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) {
  %416 = @func_5535() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %417 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %418 = @func_5585() /* ty=(Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) */;
  %419 = %416.0;
  %420 = %417.0;
  %421 = %418.1;
  (%419, %420, %421)
}

def @func_3184() -> (Tensor[(5, 8, 1), float64],) {
  %423 = fn () -> (Tensor[(5, 8, 1), float64],) {
    %422 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
    (%422,)
  };
  %423() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_11278(%var_11277: Tensor[(5, 8, 8), uint64]) -> (Tensor[(5, 8, 8), bool],) {
  %429 = fn (%var_11269: Tensor[(5, 8, 8), uint64]) -> (Tensor[(5, 8, 8), bool],) {
    %424 = @func_7490() /* ty=(Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 1), float64]) */;
    %425 = %424.0;
    %426 = cast(%425, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
    %427 = cast(%var_11269, dtype="bool") /* ty=Tensor[(5, 8, 8), bool] */;
    %428 = less(%426, %427) /* ty=Tensor[(5, 8, 8), bool] */;
    (%428,)
  };
  %429(%var_11277) /* ty=(Tensor[(5, 8, 8), bool],) */
}

def @func_5586() -> (Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) {
  %437 = fn () -> (Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) {
    %430 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(12, 10, 16), float64] */;
    %431 = @func_5205() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
    %432 = @func_3877() /* ty=(Tensor[(5, 8, ?), bool],) */;
    %433 = tan(%430) /* ty=Tensor[(12, 10, 16), float64] */;
    %434 = %431.0;
    %435 = %432.0;
    %436 = @func_2728() /* ty=Tensor[(64), uint16] */;
    (%433, %434, %435, %436)
  };
  %437() /* ty=(Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) */
}

def @func_6880() -> (Tensor[(64), uint16], Tensor[(5, 8, ?), float64]) {
  @func_6878() /* ty=(Tensor[(64), uint16], Tensor[(5, 8, ?), float64]) */
}

def @func_6011() -> (Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) {
  @func_6009() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) */
}

def @func_7292() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) {
  %438 = @func_5409() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %439 = %438.0;
  %440 = @func_5136() /* ty=Tensor[(5, 8, ?), int16] */;
  (%439, %440)
}

def @func_7835(%var_7832: Tensor[(5280, 1), float64], %var_7833: Tensor[(330, 2), float64], %var_7834: Tensor[(1056, 1), int8]) -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(660), float64], Tensor[(5280, 1), float64], Tensor[(330, 2), float64], Tensor[(1056, 1), int8]) {
  @func_7830(%var_7832, %var_7833, %var_7834) /* ty=(Tensor[(5, 8, ?), bool], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(660), float64], Tensor[(5280, 1), float64], Tensor[(330, 2), float64], Tensor[(1056, 1), int8]) */
}

def @func_8277() -> (Tensor[(5, 8, ?), bool],) {
  %441 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %442 = %441.0;
  (%442,)
}

def @func_4649() -> (Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) {
  @func_4647() /* ty=(Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) */
}

def @func_6224(%var_6223: Tensor[(16, 3, 4), float32]) -> Tensor[(16, 3, 4), float32] {
  %447 = fn (%var_6208: Tensor[(16, 3, 4), float32]) -> Tensor[(16, 3, 4), float32] {
    %443 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
    %444 = shape_of(%var_6208, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%var_6208, dtype="float32") /* ty=Tensor[(16, 3, 4), float32] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%445, %446) /* ty=Tensor[(16, 3, 4), float32] */
  };
  %447(%var_6223) /* ty=Tensor[(16, 3, 4), float32] */
}

def @func_7255(%var_7254: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), float32], Tensor[(5, 8, 1), float64]) {
  %452 = fn (%var_7242: Tensor[(15, 8, 8), float32]) -> (Tensor[(15, 8, 8), float32], Tensor[(5, 8, 1), float64]) {
    %448 = cast(%var_7242, dtype="float32") /* ty=Tensor[(15, 8, 8), float32] */;
    %449 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
    %450 = log10(%448) /* ty=Tensor[(15, 8, 8), float32] */;
    %451 = %449.0;
    (%450, %451)
  };
  %452(%var_7254) /* ty=(Tensor[(15, 8, 8), float32], Tensor[(5, 8, 1), float64]) */
}

def @func_5492() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) {
  @func_5490() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */
}

def @func_9489(%var_9473: Tensor[(64), uint16], %var_9482: Tensor[(5280), float64], %var_9483: Tensor[(660), float64], %var_9484: Tensor[(1056), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(160), float64], Tensor[(11, 12, 8), int8], Tensor[(5280), float64], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(5, 8, 1), float64]) {
  %453 = cast(%var_9473, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %454 = reshape(%453, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %455 = @func_6953(%454) /* ty=(Tensor[(5, 8, ?), bool], Tensor[(2, 32), uint16], Tensor[(64), uint16]) */;
  %456 = cast(meta[relay.Constant][19] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %457 = reshape(%456, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %458 = @func_3033(%457) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) */;
  %459 = cast(%var_9482, dtype="float64") /* ty=Tensor[(5280), float64] */;
  %460 = cast(%var_9483, dtype="float64") /* ty=Tensor[(660), float64] */;
  %461 = cast(%var_9484, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %462 = reshape(%459, newshape=[5, 8, 132]) /* ty=Tensor[(5, 8, 132), float64] */;
  %463 = reshape(%460, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %464 = reshape(%461, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %465 = @func_6901(%462, %463, %464) /* ty=(Tensor[(5, 8, 132), bool], Tensor[(11, 12, 8), int8], Tensor[(5, 56), float32], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %466 = @func_5870() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) */;
  %467 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %468 = @func_7210() /* ty=Tensor[(5, 8, 1), float64] */;
  %469 = %455.0;
  %470 = %458.3;
  %471 = %465.1;
  %472 = %466.2;
  (%467, %468, %469, %var_9473, %470, meta[relay.Constant][19] /* ty=Tensor[(160), float64] */, %471, %var_9482, %var_9483, %var_9484, %472)
}

def @func_325(%var_323: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), int8],) {
  @func_322(%var_323) /* ty=(Tensor[(11, 12, 8), int8],) */
}

def @func_10130() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(64), uint16]) {
  %473 = @func_8621() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), bool], Tensor[(64, 1), uint16], Tensor[(64), uint16]) */;
  %474 = @func_9192() /* ty=Tensor[(5, 8, 1), float64] */;
  %475 = @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */;
  %476 = %473.3;
  (%474, %475, %476)
}

def @func_2360(%var_2358: Tensor[(5, 8, 4), float64]) -> (Tensor[(5, 8, 4), uint64],) {
  @func_2357(%var_2358) /* ty=(Tensor[(5, 8, 4), uint64],) */
}

def @func_5714(%var_5674: Tensor[(8, 20), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float32], Tensor[(8, 20), float32]) {
  %477 = cast(%var_5674, dtype="float64") /* ty=Tensor[(8, 20), float64] */;
  %478 = reshape(%477, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
  %479 = @func_2564(%478) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
  %480 = @func_5585() /* ty=(Tensor[(12, 10, 16), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool], Tensor[(64), uint16]) */;
  %481 = %480.1;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(5, 8, ?), float32] */;
  %483 = cast(%var_5674, dtype="float32") /* ty=Tensor[(8, 20), float32] */;
  %484 = %479.0;
  %485 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %486 = log2(%482) /* ty=Tensor[(5, 8, ?), float32] */;
  %487 = sinh(%483) /* ty=Tensor[(8, 20), float32] */;
  (%484, %485, %486, %487)
}

def @func_7933(%var_7931: Tensor[(2, 6, 12), float32]) -> (Tensor[(2, 6, 12), float32],) {
  @func_7930(%var_7931) /* ty=(Tensor[(2, 6, 12), float32],) */
}

def @func_322(%var_298: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), int8],) {
  %488 = cast(%var_298, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
  %489 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(11, 12, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 12, 8), int8] */, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %492 = minimum(%490, %491) /* ty=Tensor[(11, 12, 8), int8] */;
  (%492,)
}

def @func_7592(%var_7590: Tensor[(2, 528), int8]) -> (Tensor[(2, 528), bool], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(2, 528), bool]) {
  @func_7589(%var_7590) /* ty=(Tensor[(2, 528), bool], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(2, 528), bool]) */
}

def @func_1761(%var_1759: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) {
  @func_1758(%var_1759) /* ty=(Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) */
}

def @func_10721() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8]) {
  %497 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8]) {
    %493 = @func_4478() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %494 = @func_4423() /* ty=(Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
    %495 = %493.0;
    %496 = %494.0;
    (%495, %496)
  };
  %497() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8]) */
}

def @func_6953(%var_6941: Tensor[(64), uint16]) -> (Tensor[(5, 8, ?), bool], Tensor[(2, 32), uint16], Tensor[(64), uint16]) {
  %498 = @func_3877() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %499 = %498.0;
  %500 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %501 = %500.0;
  %502 = cast(%501, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %503 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%499, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = cast(%var_6941, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %507 = reshape(%506, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
  %508 = @func_2977(%507) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
  %509 = greater_equal(%504, %505) /* ty=Tensor[(5, 8, ?), bool] */;
  %510 = %508.2;
  (%509, %510, %var_6941)
}

def @func_4012() -> (Tensor[(1056), int8],) {
  %511 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %512 = %511.5;
  (%512,)
}

def @func_3509() -> Tensor[(5, 8, ?), uint64] {
  @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_3878() -> (Tensor[(5, 8, ?), bool],) {
  %515 = fn () -> (Tensor[(5, 8, ?), bool],) {
    %513 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
    %514 = %513.0;
    (%514,)
  };
  %515() /* ty=(Tensor[(5, 8, ?), bool],) */
}

def @func_7124() -> Tensor[(5, 8, ?), float64] {
  %517 = fn () -> Tensor[(5, 8, ?), float64] {
    %516 = @func_6009() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), bool]) */;
    %516.0
  };
  %517() /* ty=Tensor[(5, 8, ?), float64] */
}

def @func_5835(%var_5792: Tensor[(64), uint16], %var_5823: Tensor[(88, 12), float64]) -> (Tensor[(5, 8, ?), int16], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(88, 12), bool], Tensor[(88, 12), float32]) {
  %518 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
  %519 = cast(meta[relay.Constant][21] /* ty=Tensor[(88, 12), int8] */, dtype="int8") /* ty=Tensor[(88, 12), int8] */;
  %520 = cast(%var_5792, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %521 = cast(meta[relay.Constant][22] /* ty=Tensor[(1014), float32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %522 = reshape(%519, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %523 = reshape(%520, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %524 = reshape(%521, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
  %525 = @func_4938(%522, %523, %524) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
  %526 = cast(meta[relay.Constant][21] /* ty=Tensor[(88, 12), int8] */, dtype="float64") /* ty=Tensor[(88, 12), float64] */;
  %527 = log10(%526) /* ty=Tensor[(88, 12), float64] */;
  %528 = cast(%var_5823, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(2), int32] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %532 = cast(meta[relay.Constant][21] /* ty=Tensor[(88, 12), int8] */, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %533 = shape_of(%527, dtype="int32") /* ty=Tensor[(2), int32] */;
  %534 = cast(%527, dtype="bool") /* ty=Tensor[(88, 12), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %536 = greater(%534, %535) /* ty=Tensor[(88, 12), bool] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(88, 12), float32] */;
  %538 = %518.2;
  %539 = %525.4;
  %540 = not_equal(%530, %531) /* ty=Tensor[(88, 12), bool] */;
  %541 = atan(%537) /* ty=Tensor[(88, 12), float32] */;
  (%538, %539, %var_5792, meta[relay.Constant][22] /* ty=Tensor[(1014), float32] */, %540, %541)
}

def @func_9495(%var_9491: Tensor[(64), uint16], %var_9492: Tensor[(5280), float64], %var_9493: Tensor[(660), float64], %var_9494: Tensor[(1056), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(160), float64], Tensor[(11, 12, 8), int8], Tensor[(5280), float64], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(5, 8, 1), float64]) {
  @func_9489(%var_9491, %var_9492, %var_9493, %var_9494) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(160), float64], Tensor[(11, 12, 8), int8], Tensor[(5280), float64], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(5, 8, 1), float64]) */
}

def @func_3760() -> (Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) {
  %552 = fn () -> (Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) {
    %542 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
    %543 = cast(%542, dtype="int64") /* ty=Tensor[(5, 8, 1), int64] */;
    %544 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 8, 5), float64] */, dtype="int64") /* ty=Tensor[(5, 8, 5), int64] */;
    %545 = cast(%542, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
    %546 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 8, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 5), float64] */;
    %547 = subtract(%545, %546) /* ty=Tensor[(5, 8, 5), float64] */;
    %548 = cast(%547, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %549 = bitwise_xor(%543, %544) /* ty=Tensor[(5, 8, 5), int64] */;
    %550 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
    %551 = erf(%548) /* ty=Tensor[(5, 8, 5), float32] */;
    (%549, %550, %551)
  };
  %552() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */
}

def @func_8531() -> (Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) {
  @func_8529() /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) */
}

def @func_6271() -> (Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) {
  %558 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) {
    %553 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
    %554 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
    %555 = %553.2;
    %556 = @func_2781() /* ty=Tensor[(64), uint16] */;
    %557 = %554.0;
    (%555, %556, %557)
  };
  %558() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) */
}

def @func_10995() -> (Tensor[(4, 12, 2), uint32], Tensor[(15, 2, 3), bool], Tensor[(15, 6), int8], Tensor[(5, 8, ?), int16]) {
  @func_10993() /* ty=(Tensor[(4, 12, 2), uint32], Tensor[(15, 2, 3), bool], Tensor[(15, 6), int8], Tensor[(5, 8, ?), int16]) */
}

def @func_9462() -> Tensor[(11, 12, 8), int8] {
  @func_9460() /* ty=Tensor[(11, 12, 8), int8] */
}

def @func_7799(%var_7798: Tensor[(80, 2), float64]) -> (Tensor[(5, 8, 4), uint64], Tensor[(80, 2), float64], Tensor[(5, 8, 1), float32]) {
  %567 = fn (%var_7790: Tensor[(80, 2), float64]) -> (Tensor[(5, 8, 4), uint64], Tensor[(80, 2), float64], Tensor[(5, 8, 1), float32]) {
    %559 = cast(%var_7790, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
    %560 = reshape(%559, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
    %561 = @func_2564(%560) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
    %562 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %563 = %562.0;
    %564 = cast(%563, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
    %565 = %561.1;
    %566 = log(%564) /* ty=Tensor[(5, 8, 1), float32] */;
    (%565, %var_7790, %566)
  };
  %567(%var_7798) /* ty=(Tensor[(5, 8, 4), uint64], Tensor[(80, 2), float64], Tensor[(5, 8, 1), float32]) */
}

def @func_5260() -> (Tensor[(4, 12, 2), uint32], Tensor[(5, 8, ?), bool], Tensor[(1056), int8]) {
  %574 = fn () -> (Tensor[(4, 12, 2), uint32], Tensor[(5, 8, ?), bool], Tensor[(1056), int8]) {
    %568 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
    %569 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
    %570 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
    %571 = %568.0;
    %572 = %569.0;
    %573 = %570.0;
    (%571, %572, %573)
  };
  %574() /* ty=(Tensor[(4, 12, 2), uint32], Tensor[(5, 8, ?), bool], Tensor[(1056), int8]) */
}

def @func_11722() -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, 3), uint32]) {
  @func_11720() /* ty=(Tensor[(5, 8, ?), bool], Tensor[(5, 8, 3), uint32]) */
}

def @func_1619() -> (Tensor[(5, 8, 1), float64],) {
  %575 = @func_1540() /* ty=Tensor[(5, 8, 1), float64] */;
  (%575,)
}

def @func_2191() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) {
  %586 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) {
    %576 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
    %577 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
    %578 = cast(meta[relay.Constant][24] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %579 = reshape(%578, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
    %580 = @func_1758(%579) /* ty=(Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) */;
    %581 = %576.0;
    %582 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
    %583 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
    %584 = %577.1;
    %585 = %580.0;
    (%581, %582, %583, %584, %585, meta[relay.Constant][24] /* ty=Tensor[(1056), int8] */)
  };
  %586() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */
}

def @func_9309() -> Tensor[(5, 8, ?), int16] {
  %588 = fn () -> Tensor[(5, 8, ?), int16] {
    %587 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
    %587.2
  };
  %588() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_1215() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
  %591 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
    %589 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
    %590 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
    (%589, %590)
  };
  %591() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */
}

def @func_4251() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) {
  %599 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) {
    %592 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
    %593 = %592.0;
    %594 = cast(%593, dtype="float64") /* ty=Tensor[(5, 8, ?), float64] */;
    %595 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
    %596 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
    %597 = acosh(%594) /* ty=Tensor[(5, 8, ?), float64] */;
    %598 = %595.0;
    (%596, %597, %598)
  };
  %599() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */
}

def @func_7089() -> (Tensor[(5, 8, 1), float64],) {
  %600 = @func_2190() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %601 = %600.3;
  (%601,)
}

def @func_4670() -> (Tensor[(5, 8, ?), int16],) {
  %603 = fn () -> (Tensor[(5, 8, ?), int16],) {
    %602 = @func_3907() /* ty=Tensor[(5, 8, ?), int16] */;
    (%602,)
  };
  %603() /* ty=(Tensor[(5, 8, ?), int16],) */
}

def @func_4790() -> (Tensor[(5, 8, 1), float64],) {
  %606 = fn () -> (Tensor[(5, 8, 1), float64],) {
    %604 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %605 = %604.0;
    (%605,)
  };
  %606() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_2098() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */
}

def @func_1530() -> (Tensor[(5, 8, 1), float64],) {
  %609 = fn () -> (Tensor[(5, 8, 1), float64],) {
    %607 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
    %608 = %607.0;
    (%608,)
  };
  %609() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_6591(%var_6590: Tensor[(660, 1), float64]) -> (Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(660, 1), float64], Tensor[(1056), int8]) {
  %619 = fn (%var_6581: Tensor[(660, 1), float64]) -> (Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(660, 1), float64], Tensor[(1056), int8]) {
    %610 = cast(%var_6581, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
    %611 = cast(%var_6581, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
    %612 = cast(meta[relay.Constant][25] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %613 = reshape(%610, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %614 = reshape(%611, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %615 = reshape(%612, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %616 = @func_481(%613, %614, %615) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
    %617 = @func_2728() /* ty=Tensor[(64), uint16] */;
    %618 = %616.2;
    (%617, %618, %var_6581, meta[relay.Constant][25] /* ty=Tensor[(1056), int8] */)
  };
  %619(%var_6590) /* ty=(Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(660, 1), float64], Tensor[(1056), int8]) */
}

def @func_3036(%var_3034: Tensor[(160), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) {
  @func_3033(%var_3034) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) */
}

def @func_5205() -> (Tensor[(5, 8, ?), int16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  %620 = @func_4730() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %621 = @func_5136() /* ty=Tensor[(5, 8, ?), int16] */;
  %622 = @func_2781() /* ty=Tensor[(64), uint16] */;
  %623 = %620.0;
  (%621, %622, %623)
}

def @func_1428() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
  %629 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
    %624 = cast(meta[relay.Constant][26] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %625 = reshape(%624, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
    %626 = @func_322(%625) /* ty=(Tensor[(11, 12, 8), int8],) */;
    %627 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
    %628 = %626.0;
    (%627, %628, meta[relay.Constant][26] /* ty=Tensor[(1056), int8] */)
  };
  %629() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */
}

def @func_2848() -> (Tensor[(5, 8, ?), uint64],) {
  %636 = fn () -> (Tensor[(5, 8, ?), uint64],) {
    %630 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
    %631 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 8, 1), float64] */, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%630, dtype="uint64") /* ty=Tensor[(5, 8, 1), uint64] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %635 = bitwise_and(%633, %634) /* ty=Tensor[(5, 8, ?), uint64] */;
    (%635,)
  };
  %636() /* ty=(Tensor[(5, 8, ?), uint64],) */
}

def @func_6983() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) {
  %641 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) {
    %637 = @func_4423() /* ty=(Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
    %638 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
    %639 = %637.1;
    %640 = %638.0;
    (%639, %640)
  };
  %641() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */
}

def @func_6100(%var_6068: Tensor[(5, 8, 5), float64], %var_6089: Tensor[(280), float32]) -> (Tensor[(5, 8, 5), uint8], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(7, 10, 4), bool], Tensor[(280), float32], Tensor[(660, 1), float64], Tensor[(2, 528), int8]) {
  %642 = @func_4250() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float64], Tensor[(5, 8, ?), int16]) */;
  %643 = %642.1;
  %644 = cast(%643, dtype="uint8") /* ty=Tensor[(5, 8, ?), uint8] */;
  %645 = cast(%var_6068, dtype="uint8") /* ty=Tensor[(5, 8, 5), uint8] */;
  %646 = cast(meta[relay.Constant][28] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %647 = reshape(%646, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %648 = cast(%var_6089, dtype="float32") /* ty=Tensor[(280), float32] */;
  %649 = cast(meta[relay.Constant][29] /* ty=Tensor[(660, 1), float64] */, dtype="float64") /* ty=Tensor[(660, 1), float64] */;
  %650 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 528), int8] */, dtype="int8") /* ty=Tensor[(2, 528), int8] */;
  %651 = reshape(%648, newshape=[7, 10, 4]) /* ty=Tensor[(7, 10, 4), float32] */;
  %652 = reshape(%649, newshape=[660]) /* ty=Tensor[(660), float64] */;
  %653 = reshape(%650, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %654 = @func_1376(%651, %652, %653) /* ty=(Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) */;
  %655 = minimum(%644, %645) /* ty=Tensor[(5, 8, 5), uint8] */;
  %656 = @func_1770(%647) /* ty=Tensor[(2, 2, 16), uint16] */;
  %657 = %654.0;
  (%655, %656, meta[relay.Constant][28] /* ty=Tensor[(64), uint16] */, %657, %var_6089, meta[relay.Constant][29] /* ty=Tensor[(660, 1), float64] */, meta[relay.Constant][30] /* ty=Tensor[(2, 528), int8] */)
}

def @func_3908() -> Tensor[(5, 8, ?), int16] {
  %659 = fn () -> Tensor[(5, 8, ?), int16] {
    %658 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
    %658.0
  };
  %659() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_5717(%var_5715: Tensor[(8, 20), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float32], Tensor[(8, 20), float32]) {
  @func_5714(%var_5715) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), float32], Tensor[(8, 20), float32]) */
}

def @func_1901() -> Tensor[(5, 8, 1), float64] {
  %660 = fn () -> Tensor[(5, 8, 1), float64] {
    @func_1540() /* ty=Tensor[(5, 8, 1), float64] */
  };
  %660() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_11580() -> (Tensor[(5, 8, ?), uint64],) {
  %661 = @func_7943() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%661,)
}

def @func_2782() -> Tensor[(64), uint16] {
  %662 = fn () -> Tensor[(64), uint16] {
    @func_2728() /* ty=Tensor[(64), uint16] */
  };
  %662() /* ty=Tensor[(64), uint16] */
}

def @func_3507() -> Tensor[(5, 8, ?), uint64] {
  %663 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
  %663.0
}

def @func_5376() -> Tensor[(5, 8, ?), bool] {
  %664 = @func_5259() /* ty=(Tensor[(4, 12, 2), uint32], Tensor[(5, 8, ?), bool], Tensor[(1056), int8]) */;
  %664.1
}

def @func_10008(%var_10005: Tensor[(1056), int8], %var_10006: Tensor[(4, 16), uint16], %var_10007: Tensor[(1014), float32]) -> (Tensor[(5, 8, 5), int64], Tensor[(4, 16), uint16], Tensor[(1014), float32], Tensor[(5, 8, 1056), float64]) {
  %677 = fn (%var_9991: Tensor[(1056), int8], %var_9992: Tensor[(4, 16), uint16], %var_9993: Tensor[(1014), float32]) -> (Tensor[(5, 8, 5), int64], Tensor[(4, 16), uint16], Tensor[(1014), float32], Tensor[(5, 8, 1056), float64]) {
    %665 = cast(%var_9991, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %666 = cast(%var_9992, dtype="uint16") /* ty=Tensor[(4, 16), uint16] */;
    %667 = cast(%var_9993, dtype="float32") /* ty=Tensor[(1014), float32] */;
    %668 = reshape(%665, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %669 = reshape(%666, newshape=[64]) /* ty=Tensor[(64), uint16] */;
    %670 = reshape(%667, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
    %671 = @func_4938(%668, %669, %670) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
    %672 = @func_7434() /* ty=Tensor[(5, 8, ?), bool] */;
    %673 = cast(%var_9991, dtype="float64") /* ty=Tensor[(1056), float64] */;
    %674 = cast(%672, dtype="float64") /* ty=Tensor[(5, 8, ?), float64] */;
    %675 = %671.1;
    %676 = divide(%673, %674) /* ty=Tensor[(5, 8, 1056), float64] */;
    (%675, %var_9992, %var_9993, %676)
  };
  %677(%var_10005, %var_10006, %var_10007) /* ty=(Tensor[(5, 8, 5), int64], Tensor[(4, 16), uint16], Tensor[(1014), float32], Tensor[(5, 8, 1056), float64]) */
}

def @func_6878() -> (Tensor[(64), uint16], Tensor[(5, 8, ?), float64]) {
  %678 = @func_6270() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, ?), int16]) */;
  %679 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
  %680 = %678.1;
  %681 = %679.0;
  (%680, %681)
}

def @func_10189() -> (Tensor[(4, 12, 2), uint32],) {
  @func_10187() /* ty=(Tensor[(4, 12, 2), uint32],) */
}

def @func_3796() -> (Tensor[(5, 8, 1), float64],) {
  %684 = fn () -> (Tensor[(5, 8, 1), float64],) {
    %682 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %683 = %682.0;
    (%683,)
  };
  %684() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_2929() -> Tensor[(5, 8, 1), float64] {
  @func_2927() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_2455(%var_2454: Tensor[(15, 3, 1), float32]) -> Tensor[(15, 3, 1), float32] {
  %686 = fn (%var_2440: Tensor[(15, 3, 1), float32]) -> Tensor[(15, 3, 1), float32] {
    %685 = cast(%var_2440, dtype="float32") /* ty=Tensor[(15, 3, 1), float32] */;
    tan(%685) /* ty=Tensor[(15, 3, 1), float32] */
  };
  %686(%var_2454) /* ty=Tensor[(15, 3, 1), float32] */
}

def @func_10174() -> (Tensor[(5, 8, 5), int64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) {
  @func_10172() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) */
}

def @func_11177(%var_11176: Tensor[(480), float64]) -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, 12), bool], Tensor[(480), float64]) {
  %693 = fn (%var_11173: Tensor[(480), float64]) -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, 12), bool], Tensor[(480), float64]) {
    %687 = @func_3877() /* ty=(Tensor[(5, 8, ?), bool],) */;
    %688 = cast(%var_11173, dtype="float64") /* ty=Tensor[(480), float64] */;
    %689 = reshape(%688, newshape=[5, 8, 12]) /* ty=Tensor[(5, 8, 12), float64] */;
    %690 = @func_3614(%689) /* ty=(Tensor[(5, 8, 12), bool], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
    %691 = %687.0;
    %692 = %690.0;
    (%691, %692, %var_11173)
  };
  %693(%var_11176) /* ty=(Tensor[(5, 8, ?), bool], Tensor[(5, 8, 12), bool], Tensor[(480), float64]) */
}

def @func_11704(%var_11702: Tensor[(5, 8, 8), float64]) -> (Tensor[(5, 8, 8), uint16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) {
  @func_11701(%var_11702) /* ty=(Tensor[(5, 8, 8), uint16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) */
}

def @func_5410() -> (Tensor[(5, 8, ?), int16],) {
  %695 = fn () -> (Tensor[(5, 8, ?), int16],) {
    %694 = @func_4573() /* ty=Tensor[(5, 8, ?), int16] */;
    (%694,)
  };
  %695() /* ty=(Tensor[(5, 8, ?), int16],) */
}

def @func_4998() -> (Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(1014), float32], Tensor[(5, 8, ?), int16]) {
  %707 = fn () -> (Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(1014), float32], Tensor[(5, 8, ?), int16]) {
    %696 = cast(meta[relay.Constant][31] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %697 = @func_2728() /* ty=Tensor[(64), uint16] */;
    %698 = cast(%697, dtype="uint16") /* ty=Tensor[(64), uint16] */;
    %699 = cast(meta[relay.Constant][32] /* ty=Tensor[(1014), float32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
    %700 = reshape(%696, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %701 = reshape(%698, newshape=[64]) /* ty=Tensor[(64), uint16] */;
    %702 = reshape(%699, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
    %703 = @func_4938(%700, %701, %702) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
    %704 = @func_4694() /* ty=(Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) */;
    %705 = %703.2;
    %706 = %704.1;
    (%697, %705, meta[relay.Constant][31] /* ty=Tensor[(1056), int8] */, meta[relay.Constant][32] /* ty=Tensor[(1014), float32] */, %706)
  };
  %707() /* ty=(Tensor[(64), uint16], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(1014), float32], Tensor[(5, 8, ?), int16]) */
}

def @func_11991() -> Tensor[(5, 8, ?), uint64] {
  @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_10577() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), bool]) {
  %708 = @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %709 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
  %710 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %711 = %708.0;
  %712 = %709.1;
  %713 = %710.0;
  (%711, %712, %713)
}

def @func_3616(%var_3615: Tensor[(5, 8, 12), float64]) -> (Tensor[(5, 8, 12), bool], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
  %723 = fn (%var_3584: Tensor[(5, 8, 12), float64]) -> (Tensor[(5, 8, 12), bool], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
    %714 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %715 = %714.0;
    %716 = cast(%715, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
    %717 = cast(%var_3584, dtype="bool") /* ty=Tensor[(5, 8, 12), bool] */;
    %718 = cast(meta[relay.Constant][33] /* ty=Tensor[(1056), int8] */, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %719 = reshape(%718, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
    %720 = @func_322(%719) /* ty=(Tensor[(11, 12, 8), int8],) */;
    %721 = logical_or(%716, %717) /* ty=Tensor[(5, 8, 12), bool] */;
    %722 = %720.0;
    (%721, %722, meta[relay.Constant][33] /* ty=Tensor[(1056), int8] */)
  };
  %723(%var_3615) /* ty=(Tensor[(5, 8, 12), bool], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */
}

def @func_2594(%var_2585: Tensor[(11, 14, 15), int8]) -> Tensor[(11, 14, 15), int8] {
  %724 = cast(meta[relay.Constant][34] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %725 = cast(%var_2585, dtype="int8") /* ty=Tensor[(11, 14, 15), int8] */;
  subtract(%724, %725) /* ty=Tensor[(11, 14, 15), int8] */
}

def @func_3346(%var_3344: Tensor[(6, 13, 13), float32]) -> (Tensor[(6, 13, 13), float32], Tensor[(5, 8, 1), float64], Tensor[(6, 13, 13), float64]) {
  @func_3343(%var_3344) /* ty=(Tensor[(6, 13, 13), float32], Tensor[(5, 8, 1), float64], Tensor[(6, 13, 13), float64]) */
}

def @func_11904(%var_11902: Tensor[(1056), int8], %var_11903: Tensor[(5, 8, 280), uint8]) -> (Tensor[(2, 3, 8), float64], Tensor[(7, 10, 4), bool], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(64), uint16], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 280), int64], Tensor[(5, 8, 280), uint16]) {
  @func_11900(%var_11902, %var_11903) /* ty=(Tensor[(2, 3, 8), float64], Tensor[(7, 10, 4), bool], Tensor[(660), float64], Tensor[(1056), int8], Tensor[(1056), int8], Tensor[(64), uint16], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 280), int64], Tensor[(5, 8, 280), uint16]) */
}

def @func_4695() -> (Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) {
  %729 = fn () -> (Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) {
    %726 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 3, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 8), float64] */;
    %727 = sinh(%726) /* ty=Tensor[(2, 3, 8), float64] */;
    %728 = @func_4573() /* ty=Tensor[(5, 8, ?), int16] */;
    (%727, %728)
  };
  %729() /* ty=(Tensor[(2, 3, 8), float64], Tensor[(5, 8, ?), int16]) */
}

def @func_7294() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) {
  @func_7292() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */
}

def @func_9675(%var_9674: Tensor[(5, 8, 1), uint64]) -> Tensor[(5, 8, ?), bool] {
  %736 = fn (%var_9667: Tensor[(5, 8, 1), uint64]) -> Tensor[(5, 8, ?), bool] {
    %730 = @func_2847() /* ty=(Tensor[(5, 8, ?), uint64],) */;
    %731 = %730.0;
    %732 = cast(%var_9667, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
    %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
    %734 = cast(%731, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%734, %735) /* ty=Tensor[(5, 8, ?), bool] */
  };
  %736(%var_9674) /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_4647() -> (Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) {
  %737 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %738 = %737.0;
  %739 = @func_3311() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %740 = %739.2;
  %741 = cast(%740, dtype="uint8") /* ty=Tensor[(5, 8, 1), uint8] */;
  %742 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%738, dtype="uint8") /* ty=Tensor[(5, 8, ?), uint8] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %745 = left_shift(%743, %744) /* ty=Tensor[(5, 8, ?), uint8] */;
  %746 = @func_3507() /* ty=Tensor[(5, 8, ?), uint64] */;
  (%745, %746)
}

def @func_6641() -> Tensor[(5, 8, 132), float64] {
  @func_6639() /* ty=Tensor[(5, 8, 132), float64] */
}

def @func_481(%var_454: Tensor[(10, 6, 11), float64], %var_455: Tensor[(10, 6, 11), float64], %var_464: Tensor[(1056), int8]) -> (Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) {
  %747 = cast(%var_455, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %748 = shape_of(%var_454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_454, dtype="float64") /* ty=Tensor[(10, 6, 11), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = cast(%var_464, dtype="int8") /* ty=Tensor[(1056), int8] */;
  %752 = reshape(%751, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %753 = @func_322(%752) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %754 = floor_mod(%749, %750) /* ty=Tensor[(10, 6, 11), float64] */;
  %755 = %753.0;
  (%754, %755, %var_464)
}

def @func_5871() -> (Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) {
  %766 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) {
    %756 = cast(meta[relay.Constant][36] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
    %757 = reshape(%756, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
    %758 = @func_2453(%757) /* ty=Tensor[(15, 3, 1), float32] */;
    %759 = cast(%758, dtype="bool") /* ty=Tensor[(15, 3, 1), bool] */;
    %760 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(45), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %761 = cast(meta[relay.Constant][36] /* ty=Tensor[(45), float32] */, dtype="bool") /* ty=Tensor[(45), bool] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?), bool] */;
    %763 = @func_5098() /* ty=Tensor[(5, 8, 1), float64] */;
    %764 = logical_and(%761, %762) /* ty=Tensor[(45), bool] */;
    %765 = @func_1696() /* ty=Tensor[(5, 8, 1), float64] */;
    (%763, %764, %765)
  };
  %766() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) */
}

def @func_8381() -> (Tensor[(1056), int8], Tensor[(5, 8, 160), int16]) {
  @func_8379() /* ty=(Tensor[(1056), int8], Tensor[(5, 8, 160), int16]) */
}

def @func_2977(%var_2968: Tensor[(2, 32), uint16]) -> (Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) {
  %767 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %768 = cast(%var_2968, dtype="uint16") /* ty=Tensor[(2, 32), uint16] */;
  %769 = reshape(%768, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %770 = %767.0;
  %771 = @func_1770(%769) /* ty=Tensor[(2, 2, 16), uint16] */;
  (%770, %771, %var_2968)
}

def @func_2096() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) {
  %772 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 132), int8] */, dtype="int8") /* ty=Tensor[(8, 132), int8] */;
  %773 = reshape(%772, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %774 = @func_322(%773) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %775 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %777 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 132), int8] */, dtype="float64") /* ty=Tensor[(8, 132), float64] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
  %779 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 132), int8] */, dtype="bool") /* ty=Tensor[(8, 132), bool] */;
  %780 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 132), int8] */, dtype="int8") /* ty=Tensor[(8, 132), int8] */;
  %781 = reshape(%780, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %782 = @func_1758(%781) /* ty=(Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) */;
  %783 = cast(meta[relay.Constant][38] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %784 = reshape(%783, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %785 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %786 = @func_1540() /* ty=Tensor[(5, 8, 1), float64] */;
  %787 = %774.0;
  %788 = divide(%776, %777) /* ty=Tensor[(5, 8, 132), float64] */;
  %789 = logical_or(%778, %779) /* ty=Tensor[(5, 8, 132), bool] */;
  %790 = %782.1;
  %791 = @func_1770(%784) /* ty=Tensor[(2, 2, 16), uint16] */;
  %792 = %785.0;
  (%786, %787, %788, %789, %790, %791, meta[relay.Constant][38] /* ty=Tensor[(64), uint16] */, %792)
}

def @func_5919() -> Tensor[(1056), int8] {
  %793 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
  %793.0
}

def @func_7052() -> Tensor[(5, 8, 132), float64] {
  @func_6639() /* ty=Tensor[(5, 8, 132), float64] */
}

def @func_3033(%var_3018: Tensor[(160), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64], Tensor[(5, 8, 1), float64]) {
  %794 = cast(%var_3018, dtype="float64") /* ty=Tensor[(160), float64] */;
  %795 = reshape(%794, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
  %796 = @func_2357(%795) /* ty=(Tensor[(5, 8, 4), uint64],) */;
  %797 = @func_1529() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %800 = erf(%799) /* ty=Tensor[(5, 8, 1), float64] */;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  %802 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %803 = %796.0;
  %804 = exp(%801) /* ty=Tensor[(5, 8, 1), float64] */;
  (%802, %803, %var_3018, %804)
}

def @func_6176(%var_6175: Tensor[(660), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(160), float64], Tensor[(160), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1056), float64]) {
  %825 = fn (%var_6146: Tensor[(660), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(160), float64], Tensor[(160), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1056), float64]) {
    %805 = @func_1427() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
    %806 = %805.2;
    %807 = cast(%806, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %808 = cast(%var_6146, dtype="float64") /* ty=Tensor[(660), float64] */;
    %809 = cast(meta[relay.Constant][39] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %810 = reshape(%807, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %811 = reshape(%808, newshape=[660]) /* ty=Tensor[(660), float64] */;
    %812 = reshape(%809, newshape=[16, 10]) /* ty=Tensor[(16, 10), float64] */;
    %813 = @func_3982(%810, %811, %812) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) */;
    %814 = @func_4614() /* ty=(Tensor[(160), float64],) */;
    %815 = @func_5535() /* ty=(Tensor[(5, 8, ?), int16],) */;
    %816 = @func_3907() /* ty=Tensor[(5, 8, ?), int16] */;
    %817 = cast(%806, dtype="int64") /* ty=Tensor[(1056), int64] */;
    %818 = cast(%816, dtype="int64") /* ty=Tensor[(5, 8, ?), int64] */;
    %819 = bitwise_xor(%817, %818) /* ty=Tensor[(5, 8, 1056), int64] */;
    %820 = cast(%819, dtype="float64") /* ty=Tensor[(5, 8, 1056), float64] */;
    %821 = %813.1;
    %822 = %814.0;
    %823 = %815.0;
    %824 = sin(%820) /* ty=Tensor[(5, 8, 1056), float64] */;
    (%821, %var_6146, meta[relay.Constant][39] /* ty=Tensor[(160), float64] */, %822, %823, %824)
  };
  %825(%var_6175) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(660), float64], Tensor[(160), float64], Tensor[(160), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1056), float64]) */
}

def @func_8621() -> (Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), bool], Tensor[(64, 1), uint16], Tensor[(64), uint16]) {
  %826 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
  %827 = cast(meta[relay.Constant][40] /* ty=Tensor[(64, 1), uint16] */, dtype="uint16") /* ty=Tensor[(64, 1), uint16] */;
  %828 = reshape(%827, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
  %829 = @func_4879(%828) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) */;
  %830 = @func_8529() /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) */;
  %831 = %826.1;
  %832 = %829.0;
  %833 = %830.1;
  (%831, %832, meta[relay.Constant][40] /* ty=Tensor[(64, 1), uint16] */, %833)
}

def @func_6746(%var_6744: Tensor[(1, 45), float32]) -> (Tensor[(5, 8, 1), float64], Tensor[(1, 45), float32], Tensor[(5, 8, ?), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 64), int64], Tensor[(5, 8, 1), float64]) {
  @func_6743(%var_6744) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(1, 45), float32], Tensor[(5, 8, ?), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(5, 8, 64), int64], Tensor[(5, 8, 1), float64]) */
}

def @func_7589(%var_7552: Tensor[(2, 528), int8]) -> (Tensor[(2, 528), bool], Tensor[(160), float64], Tensor[(64), uint16], Tensor[(1014), float32], Tensor[(2, 528), bool]) {
  %834 = @func_3456() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) */;
  %835 = %834.2;
  %836 = cast(%var_7552, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(2), int32] */;
  %838 = cast(%835, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %840 = cast(%var_7552, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %841 = shape_of(%835, dtype="int32") /* ty=Tensor[(2), int32] */;
  %842 = cast(%835, dtype="int32") /* ty=Tensor[(2, 528), int32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %844 = right_shift(%842, %843) /* ty=Tensor[(2, 528), int32] */;
  %845 = cast(%844, dtype="int8") /* ty=Tensor[(2, 528), int8] */;
  %846 = cast(meta[relay.Constant][41] /* ty=Tensor[(64), uint16] */, dtype="uint16") /* ty=Tensor[(64), uint16] */;
  %847 = cast(meta[relay.Constant][42] /* ty=Tensor[(1014), float32] */, dtype="float32") /* ty=Tensor[(1014), float32] */;
  %848 = reshape(%845, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %849 = reshape(%846, newshape=[64]) /* ty=Tensor[(64), uint16] */;
  %850 = reshape(%847, newshape=[1014]) /* ty=Tensor[(1014), float32] */;
  %851 = @func_4938(%848, %849, %850) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */;
  %852 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 528), int32] */, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %853 = shape_of(%844, dtype="int32") /* ty=Tensor[(2), int32] */;
  %854 = cast(%844, dtype="bool") /* ty=Tensor[(2, 528), bool] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %856 = less(%838, %839) /* ty=Tensor[(2, 528), bool] */;
  %857 = %851.4;
  %858 = greater_equal(%854, %855) /* ty=Tensor[(2, 528), bool] */;
  (%856, %857, meta[relay.Constant][41] /* ty=Tensor[(64), uint16] */, meta[relay.Constant][42] /* ty=Tensor[(1014), float32] */, %858)
}

def @func_7392() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) {
  @func_7390() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */
}

def @func_9454(%var_9451: Tensor[(2, 10, 7), bool], %var_9452: Tensor[(2, 10, 7), bool], %var_9453: Tensor[(2, 10, 7), bool]) -> (Tensor[(2, 10, 7), bool], Tensor[(11, 12, 8), int8], Tensor[(2, 10, 7), float32]) {
  @func_9449(%var_9451, %var_9452, %var_9453) /* ty=(Tensor[(2, 10, 7), bool], Tensor[(11, 12, 8), int8], Tensor[(2, 10, 7), float32]) */
}

def @func_11582() -> (Tensor[(5, 8, ?), uint64],) {
  @func_11580() /* ty=(Tensor[(5, 8, ?), uint64],) */
}

def @func_5154() -> (Tensor[(4, 12, 2), uint32],) {
  %866 = fn () -> (Tensor[(4, 12, 2), uint32],) {
    %859 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %860 = erf(%859) /* ty=Tensor[(4, 12, 2), float64] */;
    %861 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 12, 2), float64] */, dtype="uint32") /* ty=Tensor[(4, 12, 2), uint32] */;
    %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(%860, dtype="uint32") /* ty=Tensor[(4, 12, 2), uint32] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %865 = logical_xor(%863, %864) /* ty=Tensor[(4, 12, 2), uint32] */;
    (%865,)
  };
  %866() /* ty=(Tensor[(4, 12, 2), uint32],) */
}

def @func_5378() -> Tensor[(5, 8, ?), bool] {
  @func_5376() /* ty=Tensor[(5, 8, ?), bool] */
}

def @func_3545() -> (Tensor[(5, 8, ?), bool],) {
  @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */
}

def @func_11720() -> (Tensor[(5, 8, ?), bool], Tensor[(5, 8, 3), uint32]) {
  %867 = @func_3543() /* ty=(Tensor[(5, 8, ?), bool],) */;
  %868 = @func_8529() /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(64), uint16], Tensor[(5, 8, ?), uint64]) */;
  %869 = %867.0;
  %870 = %868.0;
  (%869, %870)
}

def @func_8788(%var_8784: Tensor[(3, 2, 7), uint32]) -> Tensor[(3, 2, 7), uint32] {
  %871 = cast(%var_8784, dtype="uint32") /* ty=Tensor[(3, 2, 7), uint32] */;
  %872 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(3, 2, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 2, 7), uint32] */, dtype="uint32") /* ty=Tensor[(3, 2, 7), uint32] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%873, %874) /* ty=Tensor[(3, 2, 7), uint32] */
}

def @func_1969() -> Tensor[(5, 8, 1), float64] {
  %876 = fn () -> Tensor[(5, 8, 1), float64] {
    %875 = @func_1214() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */;
    %875.1
  };
  %876() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_8856() -> Tensor[(5, 8, 1), float64] {
  @func_8854() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_3682() -> (Tensor[(5, 8, ?), int16],) {
  %877 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
  %878 = %877.4;
  %879 = @func_1176() /* ty=Tensor[(5, 8, 1), float64] */;
  %880 = cast(%879, dtype="int16") /* ty=Tensor[(5, 8, 1), int16] */;
  %881 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%878, dtype="int16") /* ty=Tensor[(5, 8, 1), int16] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %884 = maximum(%882, %883) /* ty=Tensor[(5, 8, ?), int16] */;
  (%884,)
}

def @func_8996() -> Tensor[(5, 8, 1), float64] {
  @func_8994() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_10978(%var_10966: Tensor[(5, 8, 12), bool]) -> (Tensor[(5, 8, 12), float32],) {
  %885 = @func_8667() /* ty=Tensor[(5, 8, ?), bool] */;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(5, 8, ?), float32] */;
  %887 = cast(%var_10966, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %888 = multiply(%886, %887) /* ty=Tensor[(5, 8, 12), float32] */;
  (%888,)
}

def @main(%var_12200: Tensor[(420), float64]) -> (Tensor[(5, 12, 7), float64], Tensor[(5, 8, ?), int16], Tensor[(5, 8, 420), bool]) {
  %889 = cast(%var_12200, dtype="float64") /* ty=Tensor[(420), float64] */;
  %890 = reshape(%889, newshape=[5, 12, 7]) /* ty=Tensor[(5, 12, 7), float64] */;
  %891 = @func_4034(%890) /* ty=(Tensor[(5, 12, 7), float64],) */;
  %892 = @func_8779() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), bool]) */;
  %893 = @func_4649() /* ty=(Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) */;
  %894 = %893.1;
  %895 = cast(%var_12200, dtype="int64") /* ty=Tensor[(420), int64] */;
  %896 = cast(%894, dtype="int64") /* ty=Tensor[(5, 8, ?), int64] */;
  %897 = maximum(%895, %896) /* ty=Tensor[(5, 8, 420), int64] */;
  %898 = cast(%897, dtype="bool") /* ty=Tensor[(5, 8, 420), bool] */;
  %899 = cast(%var_12200, dtype="bool") /* ty=Tensor[(420), bool] */;
  %900 = logical_or(%898, %899) /* ty=Tensor[(5, 8, 420), bool] */;
  %901 = cast(%900, dtype="bool") /* ty=Tensor[(5, 8, 420), bool] */;
  %902 = cast(%var_12200, dtype="bool") /* ty=Tensor[(420), bool] */;
  %903 = %891.0;
  %904 = %892.0;
  %905 = not_equal(%901, %902) /* ty=Tensor[(5, 8, 420), bool] */;
  (%903, %904, %905)
}

def @func_1178() -> Tensor[(5, 8, 1), float64] {
  @func_1176() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_9193() -> Tensor[(5, 8, 1), float64] {
  %907 = fn () -> Tensor[(5, 8, 1), float64] {
    %906 = @func_4423() /* ty=(Tensor[(11, 12, 8), int8], Tensor[(5, 8, 1), float64], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
    %906.3
  };
  %907() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_1176() -> Tensor[(5, 8, 1), float64] {
  %908 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
  sigmoid(%908) /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_3987(%var_3984: Tensor[(1056), int8], %var_3985: Tensor[(660), float64], %var_3986: Tensor[(16, 10), float64]) -> (Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) {
  @func_3982(%var_3984, %var_3985, %var_3986) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) */
}

def @func_6104(%var_6102: Tensor[(5, 8, 5), float64], %var_6103: Tensor[(280), float32]) -> (Tensor[(5, 8, 5), uint8], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(7, 10, 4), bool], Tensor[(280), float32], Tensor[(660, 1), float64], Tensor[(2, 528), int8]) {
  @func_6100(%var_6102, %var_6103) /* ty=(Tensor[(5, 8, 5), uint8], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(7, 10, 4), bool], Tensor[(280), float32], Tensor[(660, 1), float64], Tensor[(2, 528), int8]) */
}

def @func_6527() -> Tensor[(5, 8, ?), uint64] {
  %910 = fn () -> Tensor[(5, 8, ?), uint64] {
    %909 = @func_4647() /* ty=(Tensor[(5, 8, ?), uint8], Tensor[(5, 8, ?), uint64]) */;
    %909.1
  };
  %910() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_10783(%var_10781: Tensor[(3, 3, 3), int64]) -> (Tensor[(3, 3, 3), bool], Tensor[(5, 8, 1), float64]) {
  @func_10780(%var_10781) /* ty=(Tensor[(3, 3, 3), bool], Tensor[(5, 8, 1), float64]) */
}

def @func_9267() -> Tensor[(5, 8, 1), float64] {
  %911 = @func_3795() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %911.0
}

def @func_6324(%var_6322: Tensor[(5, 8, 3), float64]) -> (Tensor[(5, 8, 3), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) {
  @func_6321(%var_6322) /* ty=(Tensor[(5, 8, 3), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64]) */
}

def @func_8685() -> (Tensor[(11, 12, 8), int32],) {
  %914 = fn () -> (Tensor[(11, 12, 8), int32],) {
    %912 = @func_6695() /* ty=(Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
    %913 = %912.1;
    (%913,)
  };
  %914() /* ty=(Tensor[(11, 12, 8), int32],) */
}

def @func_5537() -> (Tensor[(5, 8, ?), int16],) {
  @func_5535() /* ty=(Tensor[(5, 8, ?), int16],) */
}

def @func_2607(%var_2599: Tensor[(13, 5, 8), float32]) -> Tensor[(13, 5, 8), float32] {
  %915 = cast(%var_2599, dtype="float32") /* ty=Tensor[(13, 5, 8), float32] */;
  log2(%915) /* ty=Tensor[(13, 5, 8), float32] */
}

def @func_4291(%var_4290: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), float32], Tensor[(5, 8, 1), float64]) {
  %920 = fn (%var_4272: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), float32], Tensor[(5, 8, 1), float64]) {
    %916 = cast(%var_4272, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
    %917 = @func_3759() /* ty=(Tensor[(5, 8, 5), int64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), float32]) */;
    %918 = acosh(%916) /* ty=Tensor[(9, 15, 9), float32] */;
    %919 = %917.1;
    (%918, %919)
  };
  %920(%var_4290) /* ty=(Tensor[(9, 15, 9), float32], Tensor[(5, 8, 1), float64]) */
}

def @func_11993() -> Tensor[(5, 8, ?), uint64] {
  @func_11991() /* ty=Tensor[(5, 8, ?), uint64] */
}

def @func_11366() -> Tensor[(5, 8, 132), float64] {
  @func_11364() /* ty=Tensor[(5, 8, 132), float64] */
}

def @func_3456() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) {
  %921 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 528), int8] */, dtype="int8") /* ty=Tensor[(2, 528), int8] */;
  %922 = reshape(%921, newshape=[11, 12, 8]) /* ty=Tensor[(11, 12, 8), int8] */;
  %923 = @func_322(%922) /* ty=(Tensor[(11, 12, 8), int8],) */;
  %924 = @func_1931() /* ty=Tensor[(5, 8, 1), float64] */;
  %925 = %923.0;
  (%924, %925, meta[relay.Constant][47] /* ty=Tensor[(2, 528), int8] */)
}

def @func_2567(%var_2565: Tensor[(80, 2), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) {
  @func_2564(%var_2565) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */
}

def @func_11914() -> (Tensor[(5, 8, 4), uint64],) {
  @func_11912() /* ty=(Tensor[(5, 8, 4), uint64],) */
}

def @func_4034(%var_4033: Tensor[(5, 12, 7), float64]) -> (Tensor[(5, 12, 7), float64],) {
  %928 = fn (%var_4027: Tensor[(5, 12, 7), float64]) -> (Tensor[(5, 12, 7), float64],) {
    %926 = cast(%var_4027, dtype="float64") /* ty=Tensor[(5, 12, 7), float64] */;
    %927 = sigmoid(%926) /* ty=Tensor[(5, 12, 7), float64] */;
    (%927,)
  };
  %928(%var_4033) /* ty=(Tensor[(5, 12, 7), float64],) */
}

def @func_1933() -> Tensor[(5, 8, 1), float64] {
  @func_1931() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_2564(%var_2491: Tensor[(80, 2), float64]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) {
  %929 = cast(%var_2491, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
  %930 = reshape(%929, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
  %931 = @func_2357(%930) /* ty=(Tensor[(5, 8, 4), uint64],) */;
  %932 = cast(%var_2491, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %933 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
  %934 = %931.0;
  %935 = @func_1968() /* ty=Tensor[(5, 8, 1), float64] */;
  %936 = sin(%932) /* ty=Tensor[(80, 2), float32] */;
  (%933, %934, %935, %936)
}

def @func_1380(%var_1377: Tensor[(7, 10, 4), float32], %var_1378: Tensor[(660), float64], %var_1379: Tensor[(1056), int8]) -> (Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) {
  %952 = fn (%var_1338: Tensor[(7, 10, 4), float32], %var_1366: Tensor[(660), float64], %var_1367: Tensor[(1056), int8]) -> (Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) {
    %937 = cast(%var_1338, dtype="float32") /* ty=Tensor[(7, 10, 4), float32] */;
    %938 = sqrt(%937) /* ty=Tensor[(7, 10, 4), float32] */;
    %939 = cast(%var_1338, dtype="bool") /* ty=Tensor[(7, 10, 4), bool] */;
    %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
    %941 = cast(%938, dtype="bool") /* ty=Tensor[(7, 10, 4), bool] */;
    %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %943 = cast(%var_1366, dtype="float64") /* ty=Tensor[(660), float64] */;
    %944 = cast(%var_1366, dtype="float64") /* ty=Tensor[(660), float64] */;
    %945 = cast(%var_1367, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %946 = reshape(%943, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %947 = reshape(%944, newshape=[10, 6, 11]) /* ty=Tensor[(10, 6, 11), float64] */;
    %948 = reshape(%945, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %949 = @func_481(%946, %947, %948) /* ty=(Tensor[(10, 6, 11), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
    %950 = logical_or(%941, %942) /* ty=Tensor[(7, 10, 4), bool] */;
    %951 = %949.1;
    (%950, %951, %var_1366, %var_1367)
  };
  %952(%var_1377, %var_1378, %var_1379) /* ty=(Tensor[(7, 10, 4), bool], Tensor[(11, 12, 8), int8], Tensor[(660), float64], Tensor[(1056), int8]) */
}

def @func_5490() -> (Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) {
  %953 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
  %954 = @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %955 = cast(meta[relay.Constant][48] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %956 = reshape(%955, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
  %957 = @func_2564(%956) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32]) */;
  %958 = %953.0;
  %959 = %954.0;
  %960 = %957.3;
  (%958, %959, %960, meta[relay.Constant][48] /* ty=Tensor[(160), float64] */)
}

def @func_8279() -> (Tensor[(5, 8, ?), bool],) {
  @func_8277() /* ty=(Tensor[(5, 8, ?), bool],) */
}

def @func_8065() -> (Tensor[(5, 8, 1), float64],) {
  @func_8063() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_12194() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) {
  %966 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) {
    %961 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %962 = @func_7390() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16], Tensor[(5, 8, ?), int16]) */;
    %963 = %961.0;
    %964 = @func_6526() /* ty=Tensor[(5, 8, ?), uint64] */;
    %965 = %962.0;
    (%963, %964, %965)
  };
  %966() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, ?), int16]) */
}

def @func_6383(%var_6382: Tensor[(45), float32]) -> (Tensor[(4, 12, 2), uint32], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) {
  %975 = fn (%var_6374: Tensor[(45), float32]) -> (Tensor[(4, 12, 2), uint32], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) {
    %967 = @func_5153() /* ty=(Tensor[(4, 12, 2), uint32],) */;
    %968 = @func_5490() /* ty=(Tensor[(5, 8, ?), int16], Tensor[(5, 8, 1), float64], Tensor[(80, 2), float32], Tensor[(160), float64]) */;
    %969 = cast(%var_6374, dtype="float32") /* ty=Tensor[(45), float32] */;
    %970 = reshape(%969, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
    %971 = %967.0;
    %972 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
    %973 = %968.0;
    %974 = @func_2453(%970) /* ty=Tensor[(15, 3, 1), float32] */;
    (%971, %972, %973, %974, %var_6374)
  };
  %975(%var_6382) /* ty=(Tensor[(4, 12, 2), uint32], Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), int16], Tensor[(15, 3, 1), float32], Tensor[(45), float32]) */
}

def @func_10841(%var_10840: Tensor[(5, 8, 7), int16]) -> (Tensor[(5, 8, 7), bool], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 7), float64], Tensor[(5, 8, 1), float64]) {
  %987 = fn (%var_10818: Tensor[(5, 8, 7), int16]) -> (Tensor[(5, 8, 7), bool], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 7), float64], Tensor[(5, 8, 1), float64]) {
    %976 = @func_4669() /* ty=(Tensor[(5, 8, ?), int16],) */;
    %977 = %976.0;
    %978 = cast(%977, dtype="bool") /* ty=Tensor[(5, 8, ?), bool] */;
    %979 = cast(%var_10818, dtype="bool") /* ty=Tensor[(5, 8, 7), bool] */;
    %980 = @func_2294() /* ty=(Tensor[(5, 8, 132), float64],) */;
    %981 = cast(%var_10818, dtype="float64") /* ty=Tensor[(5, 8, 7), float64] */;
    %982 = @func_5870() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(45), bool], Tensor[(5, 8, 1), float64]) */;
    %983 = greater(%978, %979) /* ty=Tensor[(5, 8, 7), bool] */;
    %984 = %980.0;
    %985 = log(%981) /* ty=Tensor[(5, 8, 7), float64] */;
    %986 = %982.0;
    (%983, %984, %985, %986)
  };
  %987(%var_10840) /* ty=(Tensor[(5, 8, 7), bool], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 7), float64], Tensor[(5, 8, 1), float64]) */
}

def @func_2597(%var_2595: Tensor[(11, 14, 15), int8]) -> Tensor[(11, 14, 15), int8] {
  @func_2594(%var_2595) /* ty=Tensor[(11, 14, 15), int8] */
}

def @func_4882(%var_4880: Tensor[(2, 2, 16), uint16]) -> (Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) {
  @func_4879(%var_4880) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) */
}

def @func_3684() -> (Tensor[(5, 8, ?), int16],) {
  @func_3682() /* ty=(Tensor[(5, 8, ?), int16],) */
}

def @func_1621() -> (Tensor[(5, 8, 1), float64],) {
  @func_1619() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_4155() -> (Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) {
  %997 = fn () -> (Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) {
    %988 = @func_1900() /* ty=Tensor[(5, 8, 1), float64] */;
    %989 = @func_2927() /* ty=Tensor[(5, 8, 1), float64] */;
    %990 = cast(%989, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
    %991 = shape_of(%988, dtype="int32") /* ty=Tensor[(3), int32] */;
    %992 = cast(%988, dtype="float64") /* ty=Tensor[(5, 8, 1), float64] */;
    %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %994 = @func_3795() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %995 = floor_divide(%992, %993) /* ty=Tensor[(5, 8, ?), float64] */;
    %996 = %994.0;
    (%995, %996)
  };
  %997() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */
}

def @func_9127(%var_9086: Tensor[(3, 10, 4), float32], %var_9087: Tensor[(3, 10, 4), float32]) -> (Tensor[(3, 10, 4), float32], Tensor[(15, 3, 1), float32], Tensor[(5, 8, 45), uint32], Tensor[(11, 12, 8), int8]) {
  %998 = cast(%var_9087, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
  %999 = shape_of(%var_9086, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1000 = cast(%var_9086, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
  %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1002 = cast(meta[relay.Constant][49] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %1003 = reshape(%1002, newshape=[15, 3, 1]) /* ty=Tensor[(15, 3, 1), float32] */;
  %1004 = @func_8667() /* ty=Tensor[(5, 8, ?), bool] */;
  %1005 = cast(%1004, dtype="uint32") /* ty=Tensor[(5, 8, ?), uint32] */;
  %1006 = cast(meta[relay.Constant][49] /* ty=Tensor[(45), float32] */, dtype="uint32") /* ty=Tensor[(45), uint32] */;
  %1007 = divide(%1000, %1001) /* ty=Tensor[(3, 10, 4), float32] */;
  %1008 = @func_2453(%1003) /* ty=Tensor[(15, 3, 1), float32] */;
  %1009 = multiply(%1005, %1006) /* ty=Tensor[(5, 8, 45), uint32] */;
  %1010 = @func_3042() /* ty=Tensor[(11, 12, 8), int8] */;
  (%1007, %1008, %1009, %1010)
}

def @func_7091() -> (Tensor[(5, 8, 1), float64],) {
  @func_7089() /* ty=(Tensor[(5, 8, 1), float64],) */
}

def @func_9449(%var_9407: Tensor[(2, 10, 7), bool], %var_9408: Tensor[(2, 10, 7), bool], %var_9433: Tensor[(2, 10, 7), bool]) -> (Tensor[(2, 10, 7), bool], Tensor[(11, 12, 8), int8], Tensor[(2, 10, 7), float32]) {
  %1011 = cast(%var_9408, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %1012 = shape_of(%var_9407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%var_9407, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1015 = @func_7309() /* ty=(Tensor[(11, 12, 8), int8],) */;
  %1016 = cast(%var_9433, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %1017 = shape_of(%var_9407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1018 = cast(%var_9407, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1020 = logical_or(%1013, %1014) /* ty=Tensor[(2, 10, 7), bool] */;
  %1021 = %1015.0;
  %1022 = floor_divide(%1018, %1019) /* ty=Tensor[(2, 10, 7), float32] */;
  (%1020, %1021, %1022)
}

def @func_4942(%var_4939: Tensor[(1056), int8], %var_4940: Tensor[(64), uint16], %var_4941: Tensor[(1014), float32]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) {
  %1046 = fn (%var_4895: Tensor[(1056), int8], %var_4916: Tensor[(64), uint16], %var_4925: Tensor[(1014), float32]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) {
    %1023 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %1024 = cast(%var_4895, dtype="int8") /* ty=Tensor[(1056), int8] */;
    %1025 = cast(meta[relay.Constant][50] /* ty=Tensor[(660), float64] */, dtype="float64") /* ty=Tensor[(660), float64] */;
    %1026 = cast(meta[relay.Constant][51] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %1027 = reshape(%1024, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
    %1028 = reshape(%1025, newshape=[660]) /* ty=Tensor[(660), float64] */;
    %1029 = reshape(%1026, newshape=[16, 10]) /* ty=Tensor[(16, 10), float64] */;
    %1030 = @func_3982(%1027, %1028, %1029) /* ty=(Tensor[(5, 8, 5), float32], Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(16, 10), float64], Tensor[(5, 8, 5), int64]) */;
    %1031 = cast(%var_4925, dtype="float32") /* ty=Tensor[(1014), float32] */;
    %1032 = reshape(%1031, newshape=[6, 13, 13]) /* ty=Tensor[(6, 13, 13), float32] */;
    %1033 = @func_3343(%1032) /* ty=(Tensor[(6, 13, 13), float32], Tensor[(5, 8, 1), float64], Tensor[(6, 13, 13), float64]) */;
    %1034 = @func_3396() /* ty=(Tensor[(5, 8, ?), bool],) */;
    %1035 = cast(%var_4916, dtype="uint16") /* ty=Tensor[(64), uint16] */;
    %1036 = reshape(%1035, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), uint16] */;
    %1037 = @func_4879(%1036) /* ty=(Tensor[(2, 2, 16), bool], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(5, 8, 64), bool], Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 64), float64]) */;
    %1038 = %1037.2;
    %1039 = cast(%1038, dtype="bool") /* ty=Tensor[(5, 8, 1), bool] */;
    %1040 = cast(%var_4916, dtype="bool") /* ty=Tensor[(64), bool] */;
    %1041 = %1023.0;
    %1042 = %1030.6;
    %1043 = %1033.0;
    %1044 = %1034.0;
    %1045 = greater_equal(%1039, %1040) /* ty=Tensor[(5, 8, 64), bool] */;
    (%1041, %1042, %var_4895, meta[relay.Constant][50] /* ty=Tensor[(660), float64] */, meta[relay.Constant][51] /* ty=Tensor[(160), float64] */, %1043, %var_4925, %1044, %1045)
  };
  %1046(%var_4939, %var_4940, %var_4941) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 5), int64], Tensor[(1056), int8], Tensor[(660), float64], Tensor[(160), float64], Tensor[(6, 13, 13), float32], Tensor[(1014), float32], Tensor[(5, 8, ?), bool], Tensor[(5, 8, 64), bool]) */
}

def @func_1334(%var_1332: Tensor[(1056), int8]) -> (Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) {
  @func_1331(%var_1332) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) */
}

def @func_5748(%var_5746: Tensor[(15, 2, 3), int8], %var_5747: Tensor[(15, 2, 3), int8]) -> (Tensor[(15, 2, 3), bool], Tensor[(5, 8, 1), float64]) {
  %1054 = fn (%var_5725: Tensor[(15, 2, 3), int8], %var_5726: Tensor[(15, 2, 3), int8]) -> (Tensor[(15, 2, 3), bool], Tensor[(5, 8, 1), float64]) {
    %1047 = cast(%var_5726, dtype="bool") /* ty=Tensor[(15, 2, 3), bool] */;
    %1048 = shape_of(%var_5725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1049 = cast(%var_5725, dtype="bool") /* ty=Tensor[(15, 2, 3), bool] */;
    %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1051 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
    %1052 = less_equal(%1049, %1050) /* ty=Tensor[(15, 2, 3), bool] */;
    %1053 = %1051.1;
    (%1052, %1053)
  };
  %1054(%var_5746, %var_5747) /* ty=(Tensor[(15, 2, 3), bool], Tensor[(5, 8, 1), float64]) */
}

def @func_1758(%var_1739: Tensor[(11, 12, 8), int8]) -> (Tensor[(11, 12, 8), int32], Tensor[(5, 8, 1), float64]) {
  %1055 = @func_1427() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(1056), int8]) */;
  %1056 = %1055.1;
  %1057 = cast(%var_1739, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %1058 = shape_of(%1056, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1059 = cast(%1056, dtype="int32") /* ty=Tensor[(11, 12, 8), int32] */;
  %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1061 = cast(%var_1739, dtype="int8") /* ty=Tensor[(11, 12, 8), int8] */;
  %1062 = reshape(%1061, newshape=[1056]) /* ty=Tensor[(1056), int8] */;
  %1063 = @func_1331(%1062) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(1056), int8], Tensor[(11, 12, 8), float32], Tensor[(11, 12, 8), int8], Tensor[(660), float64]) */;
  %1064 = bitwise_or(%1059, %1060) /* ty=Tensor[(11, 12, 8), int32] */;
  %1065 = %1063.0;
  (%1064, %1065)
}

def @func_8379() -> (Tensor[(1056), int8], Tensor[(5, 8, 160), int16]) {
  %1066 = @func_4012() /* ty=(Tensor[(1056), int8],) */;
  %1067 = @func_6695() /* ty=(Tensor[(160), float64], Tensor[(11, 12, 8), int32], Tensor[(1056), int8]) */;
  %1068 = %1067.0;
  %1069 = @func_3183() /* ty=(Tensor[(5, 8, 1), float64],) */;
  %1070 = %1069.0;
  %1071 = cast(%1068, dtype="int16") /* ty=Tensor[(160), int16] */;
  %1072 = cast(%1070, dtype="int16") /* ty=Tensor[(5, 8, 1), int16] */;
  %1073 = %1066.0;
  %1074 = right_shift(%1071, %1072) /* ty=Tensor[(5, 8, 160), int16] */;
  (%1073, %1074)
}

def @func_7930(%var_7913: Tensor[(2, 6, 12), float32]) -> (Tensor[(2, 6, 12), float32],) {
  %1075 = cast(%var_7913, dtype="float32") /* ty=Tensor[(2, 6, 12), float32] */;
  %1076 = exp(%1075) /* ty=Tensor[(2, 6, 12), float32] */;
  (%1076,)
}

def @func_11912() -> (Tensor[(5, 8, 4), uint64],) {
  %1077 = @func_3062() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */;
  %1078 = %1077.1;
  (%1078,)
}

def @func_4574() -> Tensor[(5, 8, ?), int16] {
  %1079 = fn () -> Tensor[(5, 8, ?), int16] {
    @func_3907() /* ty=Tensor[(5, 8, ?), int16] */
  };
  %1079() /* ty=Tensor[(5, 8, ?), int16] */
}

def @func_7491() -> (Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 1), float64]) {
  %1084 = fn () -> (Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 1), float64]) {
    %1080 = @func_6982() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, ?), uint64]) */;
    %1081 = @func_4154() /* ty=(Tensor[(5, 8, ?), float64], Tensor[(5, 8, 1), float64]) */;
    %1082 = %1080.1;
    %1083 = %1081.1;
    (%1082, %1083)
  };
  %1084() /* ty=(Tensor[(5, 8, ?), uint64], Tensor[(5, 8, 1), float64]) */
}

def @func_9460() -> Tensor[(11, 12, 8), int8] {
  @func_3042() /* ty=Tensor[(11, 12, 8), int8] */
}

def @func_2980(%var_2978: Tensor[(2, 32), uint16]) -> (Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) {
  @func_2977(%var_2978) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */
}

def @func_10780(%var_10736: Tensor[(3, 3, 3), int64]) -> (Tensor[(3, 3, 3), bool], Tensor[(5, 8, 1), float64]) {
  %1085 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 3, 3), int64] */, dtype="bool") /* ty=Tensor[(3, 3, 3), bool] */;
  %1086 = shape_of(%var_10736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1087 = cast(%var_10736, dtype="bool") /* ty=Tensor[(3, 3, 3), bool] */;
  %1088 = dyn.reshape(%1085, %1086, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1089 = @func_10720() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8]) */;
  %1090 = not_equal(%1087, %1088) /* ty=Tensor[(3, 3, 3), bool] */;
  %1091 = %1089.0;
  (%1090, %1091)
}

def @func_8340() -> Tensor[(5, 8, 1), float64] {
  %1093 = fn () -> Tensor[(5, 8, 1), float64] {
    %1092 = @func_4789() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %1092.0
  };
  %1093() /* ty=Tensor[(5, 8, 1), float64] */
}

def @func_3063() -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) {
  %1100 = fn () -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) {
    %1094 = @func_2096() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(5, 8, 132), float64], Tensor[(5, 8, 132), bool], Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(64), uint16], Tensor[(5, 8, 1), float64]) */;
    %1095 = cast(meta[relay.Constant][53] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %1096 = reshape(%1095, newshape=[5, 8, 4]) /* ty=Tensor[(5, 8, 4), float64] */;
    %1097 = @func_2357(%1096) /* ty=(Tensor[(5, 8, 4), uint64],) */;
    %1098 = %1094.0;
    %1099 = %1097.0;
    (%1098, %1099, meta[relay.Constant][53] /* ty=Tensor[(160), float64] */)
  };
  %1100() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 4), uint64], Tensor[(160), float64]) */
}

def @func_11622(%var_11621: Tensor[(64), uint16]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(64), uint16]) {
  %1107 = fn (%var_11609: Tensor[(64), uint16]) -> (Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(64), uint16]) {
    %1101 = @func_8063() /* ty=(Tensor[(5, 8, 1), float64],) */;
    %1102 = cast(%var_11609, dtype="uint16") /* ty=Tensor[(64), uint16] */;
    %1103 = reshape(%1102, newshape=[2, 32]) /* ty=Tensor[(2, 32), uint16] */;
    %1104 = @func_2977(%1103) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(2, 2, 16), uint16], Tensor[(2, 32), uint16]) */;
    %1105 = %1101.0;
    %1106 = %1104.0;
    (%1105, %1106, %var_11609)
  };
  %1107(%var_11621) /* ty=(Tensor[(5, 8, 1), float64], Tensor[(5, 8, 1), float64], Tensor[(64), uint16]) */
}

def @func_10633() -> (Tensor[(160), float64],) {
  @func_10631() /* ty=(Tensor[(160), float64],) */
}

def @func_3458() -> (Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) {
  @func_3456() /* ty=(Tensor[(5, 8, 1), float64], Tensor[(11, 12, 8), int8], Tensor[(2, 528), int8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen891/build/output.py", line 3613, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:38:42] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

