==========mod==========
#[version = "0.0.5"]
def @func_3925() -> Tensor[(4, 6, 5), uint64] {
  %0 = @func_2559() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %0.0
}

def @func_722(%var_714: Tensor[(10, 7, 8), int64], %var_715: Tensor[(10, 7, 8), int64]) -> Tensor[(10, 7, 8), int64] {
  %1 = cast(%var_715, dtype="int64") /* ty=Tensor[(10, 7, 8), int64] */;
  %2 = shape_of(%var_714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_714, dtype="int64") /* ty=Tensor[(10, 7, 8), int64] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%3, %4) /* ty=Tensor[(10, 7, 8), int64] */
}

def @func_4615() -> Tensor[(11, 1, 6), int16] {
  %5 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 1, 6), int16] */, dtype="int16") /* ty=Tensor[(11, 1, 6), int16] */;
  bitwise_xor(%5, %6) /* ty=Tensor[(11, 1, 6), int16] */
}

def @func_3657(%var_3640: Tensor[(12, 6, 13), uint64], %var_3641: Tensor[(12, 6, 13), uint64]) -> Tensor[(12, 6, 13), float64] {
  %7 = cast(%var_3641, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %8 = shape_of(%var_3640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%var_3640, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = not_equal(%9, %10) /* ty=Tensor[(12, 6, 13), bool] */;
  %12 = cast(%var_3640, dtype="float64") /* ty=Tensor[(12, 6, 13), float64] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="float64") /* ty=Tensor[(12, 6, 13), float64] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%14, %15) /* ty=Tensor[(12, 6, 13), float64] */
}

def @func_1528(%var_1476: Tensor[(3, 364), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  %16 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %17 = @func_855() /* ty=Tensor[(1, 364), float64] */;
  %18 = cast(%17, dtype="bool") /* ty=Tensor[(1, 364), bool] */;
  %19 = cast(%var_1476, dtype="bool") /* ty=Tensor[(3, 364), bool] */;
  %20 = cast(%17, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %21 = @func_1317() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %22 = %16.1;
  %23 = greater(%18, %19) /* ty=Tensor[(3, 364), bool] */;
  %24 = rsqrt(%20) /* ty=Tensor[(1, 364), float32] */;
  %25 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %26 = %21.1;
  (%22, %23, %24, %25, %26)
}

def @func_4491() -> Tensor[(4, 6, 5), float32] {
  %27 = @func_4027() /* ty=(Tensor[(4, 6, 5), float32],) */;
  %27.0
}

def @func_5141() -> (Tensor[(4, 6, 5), uint64],) {
  %28 = @func_1102() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%28,)
}

def @func_855() -> Tensor[(1, 364), float64] {
  %29 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %29.2
}

def @func_4634() -> (Tensor[(4, 6, 5), float64], Tensor[(1, 364), float64]) {
  %30 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %31 = %30.3;
  %32 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  (%31, %32)
}

def @func_1730(%var_1699: Tensor[(14, 4, 1), int32], %var_1700: Tensor[(14, 4, 13), int32]) -> Tensor[(14, 4, 13), int16] {
  %33 = cast(%var_1699, dtype="int32") /* ty=Tensor[(14, 4, 1), int32] */;
  %34 = cast(%var_1700, dtype="int32") /* ty=Tensor[(14, 4, 13), int32] */;
  %35 = bitwise_and(%33, %34) /* ty=Tensor[(14, 4, 13), int32] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(14, 4, 13), float32] */;
  %37 = atanh(%36) /* ty=Tensor[(14, 4, 13), float32] */;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(14, 4, 13), float32] */;
  %39 = sqrt(%38) /* ty=Tensor[(14, 4, 13), float32] */;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(14, 4, 13), float64] */;
  %41 = cos(%40) /* ty=Tensor[(14, 4, 13), float64] */;
  %42 = cast(%35, dtype="int16") /* ty=Tensor[(14, 4, 13), int16] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="int16") /* ty=Tensor[(14, 4, 13), int16] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%44, %45) /* ty=Tensor[(14, 4, 13), int16] */
}

def @func_538(%var_516: Tensor[(364), float64], %var_525: Tensor[(4, 6, 5), uint64]) -> (Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) {
  %46 = cast(%var_516, dtype="float64") /* ty=Tensor[(364), float64] */;
  %47 = reshape(%46, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %48 = @func_402() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %49 = %48.1;
  %50 = cast(%var_525, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %54 = @func_184(%47) /* ty=Tensor[(14, 13, 2), float64] */;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %56 = reshape(%55, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %57 = power(%52, %53) /* ty=Tensor[(4, 6, 5), float64] */;
  %58 = @func_184(%56) /* ty=Tensor[(14, 13, 2), float64] */;
  (%54, %var_516, %57, %58)
}

def @func_2706() -> Tensor[(4, 6, 5), uint64] {
  %59 = @func_1334() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %59.0
}

def @func_5260() -> Tensor[(1, 364), float64] {
  %60 = @func_4818() /* ty=(Tensor[(1, 364), float64],) */;
  %60.0
}

def @func_577() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %61 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %62 = %61.1;
  %63 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%62, %63)
}

def @func_1250() -> (Tensor[(14, 13, 2), float64],) {
  %64 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
  (%64,)
}

def @func_707() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %65 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %66 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %67 = %65.1;
  %68 = %66.0;
  (%67, %68)
}

def @func_1358() -> Tensor[(4, 6, 5), uint64] {
  %69 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %69.0
}

def @func_2559() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %70 = @func_2086() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %71 = @func_707() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %72 = %70.0;
  %73 = %71.0;
  (%72, %73)
}

def @func_2167(%var_2161: Tensor[(180), float64], %var_2162: Tensor[(560), int64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64], Tensor[(180), float64], Tensor[(560), int64]) {
  %74 = @func_1944() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %75 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %76 = cast(%var_2161, dtype="float64") /* ty=Tensor[(180), float64] */;
  %77 = cast(%var_2162, dtype="int64") /* ty=Tensor[(560), int64] */;
  %78 = reshape(%76, newshape=[6, 5, 6]) /* ty=Tensor[(6, 5, 6), float64] */;
  %79 = reshape(%77, newshape=[8, 70]) /* ty=Tensor[(8, 70), int64] */;
  %80 = @func_1297(%78, %79) /* ty=(Tensor[(1, 364), float64], Tensor[(6, 5, 6), float32], Tensor[(10, 7, 8), int64], Tensor[(8, 70), int64]) */;
  %81 = %74.0;
  %82 = %75.0;
  %83 = %80.0;
  (%81, %82, %83, %var_2161, %var_2162)
}

def @func_2361(%var_2350: Tensor[(16, 6, 1), float32]) -> (Tensor[(16, 6, 1), float32],) {
  %84 = cast(%var_2350, dtype="float32") /* ty=Tensor[(16, 6, 1), float32] */;
  %85 = atanh(%84) /* ty=Tensor[(16, 6, 1), float32] */;
  (%85,)
}

def @func_1219(%var_1206: Tensor[(2, 1, 13), float64]) -> (Tensor[(2, 1, 13), float32],) {
  %86 = cast(%var_1206, dtype="float64") /* ty=Tensor[(2, 1, 13), float64] */;
  %87 = sin(%86) /* ty=Tensor[(2, 1, 13), float64] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(2, 1, 13), float32] */;
  %89 = tan(%88) /* ty=Tensor[(2, 1, 13), float32] */;
  %90 = cast(%89, dtype="float32") /* ty=Tensor[(2, 1, 13), float32] */;
  %91 = exp(%90) /* ty=Tensor[(2, 1, 13), float32] */;
  (%91,)
}

def @func_1317() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  %92 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %93 = @func_1250() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %94 = %92.0;
  %95 = %93.0;
  (%94, %95)
}

def @func_1582(%var_1564: Tensor[(364), float64]) -> (Tensor[(364), int64], Tensor[(4, 6, 5), uint64]) {
  %96 = @func_1038() /* ty=(Tensor[(364), float64],) */;
  %97 = %96.0;
  %98 = cast(%var_1564, dtype="int64") /* ty=Tensor[(364), int64] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(1), int32] */;
  %100 = cast(%97, dtype="int64") /* ty=Tensor[(364), int64] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?), int64] */;
  %102 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %103 = bitwise_and(%100, %101) /* ty=Tensor[(364), int64] */;
  %104 = %102.1;
  (%103, %104)
}

def @func_2309(%var_2296: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) {
  %105 = @func_1448() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %106 = %105.0;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %108 = cast(%var_2296, dtype="float64") /* ty=Tensor[(364), float64] */;
  %109 = cast(%106, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %110 = reshape(%108, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %111 = reshape(%109, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %112 = @func_1130(%110, %111) /* ty=(Tensor[(14, 13, 2), bool], Tensor[(14, 13, 2), float64], Tensor[(120), uint64]) */;
  %113 = cos(%107) /* ty=Tensor[(4, 6, 5), float64] */;
  %114 = %112.0;
  (%113, %114, %var_2296)
}

def @func_3276() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
  %115 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %116 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
  %117 = %115.1;
  %118 = %116.1;
  (%117, %118)
}

def @func_3973() -> (Tensor[(4, 6, 5), uint64],) {
  %119 = @func_2706() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%119,)
}

def @func_3776(%var_3754: float32, %var_3755: Tensor[(3, 12, 15), float32], %var_3762: Tensor[(3, 12, 15), float32]) -> Tensor[(3, 12, 15), uint32] {
  %120 = cast(%var_3754, dtype="float32") /* ty=float32 */;
  %121 = cast(%var_3755, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
  %122 = minimum(%120, %121) /* ty=Tensor[(3, 12, 15), float32] */;
  %123 = cast(%var_3762, dtype="uint32") /* ty=Tensor[(3, 12, 15), uint32] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="uint32") /* ty=Tensor[(3, 12, 15), uint32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%125, %126) /* ty=Tensor[(3, 12, 15), uint32] */
}

def @func_3098(%var_3068: Tensor[(11, 16, 16), int64], %var_3085: Tensor[(11, 16, 16), int64]) -> (Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(4, 6, 5), uint64]) {
  %127 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 16, 16), int64] */, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %128 = shape_of(%var_3068, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%var_3068, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = cast(%var_3085, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %132 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(11, 16, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 16, 16), int64] */, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = cast(%var_3068, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
  %136 = cosh(%135) /* ty=Tensor[(11, 16, 16), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
  %138 = @func_1448() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %139 = greater_equal(%129, %130) /* ty=Tensor[(11, 16, 16), bool] */;
  %140 = not_equal(%133, %134) /* ty=Tensor[(11, 16, 16), bool] */;
  %141 = exp(%137) /* ty=Tensor[(11, 16, 16), float64] */;
  %142 = %138.1;
  (%139, %140, %141, %142)
}

def @func_5231(%var_5202: Tensor[(2, 704), float64]) -> (Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(2, 704), float64], Tensor[(3, 364), bool], Tensor[(7, 156), float64], Tensor[(1, 364), float64]) {
  %143 = @func_4589() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %144 = @func_1038() /* ty=(Tensor[(364), float64],) */;
  %145 = cast(%var_5202, dtype="float64") /* ty=Tensor[(2, 704), float64] */;
  %146 = cast(%var_5202, dtype="float64") /* ty=Tensor[(2, 704), float64] */;
  %147 = reshape(%145, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float64] */;
  %148 = reshape(%146, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float64] */;
  %149 = @func_4073(%147, %148) /* ty=(Tensor[(11, 8, 16), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %150 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 156), float64] */, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
  %151 = reshape(%150, newshape=[3, 364]) /* ty=Tensor[(3, 364), float64] */;
  %152 = @func_1528(%151) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %153 = @func_4818() /* ty=(Tensor[(1, 364), float64],) */;
  %154 = %143.0;
  %155 = %144.0;
  %156 = %149.2;
  %157 = %152.1;
  %158 = %153.0;
  (%154, %155, %156, %var_5202, %157, meta[relay.Constant][3] /* ty=Tensor[(7, 156), float64] */, %158)
}

def @func_3165(%var_3134: Tensor[(364), float64], %var_3140: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(364), uint64], Tensor[(4, 6, 5), int16], Tensor[(364), float32]) {
  %159 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %160 = cast(%var_3140, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %161 = shape_of(%var_3134, dtype="int32") /* ty=Tensor[(1), int32] */;
  %162 = cast(%var_3134, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %164 = %159.0;
  %165 = cast(%164, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %166 = reshape(%165, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %167 = @func_2611(%166) /* ty=(Tensor[(4, 6, 5), int16],) */;
  %168 = cast(meta[relay.Constant][4] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %169 = reshape(%168, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %170 = @func_2309(%169) /* ty=(Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) */;
  %171 = %170.2;
  %172 = cast(%var_3134, dtype="bool") /* ty=Tensor[(364), bool] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(1), int32] */;
  %174 = cast(%171, dtype="bool") /* ty=Tensor[(364), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?), bool] */;
  %176 = greater_equal(%174, %175) /* ty=Tensor[(364), bool] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(364), float32] */;
  %178 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %179 = right_shift(%162, %163) /* ty=Tensor[(364), uint64] */;
  %180 = %167.0;
  %181 = asin(%177) /* ty=Tensor[(364), float32] */;
  (%164, %178, meta[relay.Constant][4] /* ty=Tensor[(364), float64] */, %179, %180, %181)
}

def @func_4155() -> (Tensor[(4, 6, 5), uint64],) {
  %182 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %183 = %182.1;
  (%183,)
}

def @func_2550(%var_2515: Tensor[(4, 6, 5), uint64]) -> (Tensor[(4, 6, 5), bool], Tensor[(14, 13, 2), float64]) {
  %184 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %185 = %184.3;
  %186 = cast(%var_2515, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
  %191 = not_equal(%188, %189) /* ty=Tensor[(4, 6, 5), bool] */;
  %192 = %190.0;
  (%191, %192)
}

def @main(%var_5516: Tensor[(11, 4, 16), int64], %var_5517: Tensor[(11, 4, 16), int64], %var_5581: Tensor[(15, 364), float64]) -> (Tensor[(1, 364), float64], Tensor[(1408), float64], Tensor[(364), float64], Tensor[(4, 6, 5), bool], Tensor[(11, 4, 16), bool], Tensor[(15, 364), bool], Tensor[(15, 364), float64], Tensor[(11, 4, 16), float64]) {
  %193 = cast(meta[relay.Constant][5] /* ty=Tensor[(1408), float64] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %194 = reshape(%193, newshape=[2, 704]) /* ty=Tensor[(2, 704), float64] */;
  %195 = @func_5231(%194) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(2, 704), float64], Tensor[(3, 364), bool], Tensor[(7, 156), float64], Tensor[(1, 364), float64]) */;
  %196 = %195.6;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %198 = cast(%196, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %199 = reshape(%197, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %200 = reshape(%198, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %201 = @func_3165(%199, %200) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(364), uint64], Tensor[(4, 6, 5), int16], Tensor[(364), float32]) */;
  %202 = @func_3529() /* ty=(Tensor[(4, 6, 5), bool],) */;
  %203 = cast(%var_5516, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %204 = asin(%203) /* ty=Tensor[(11, 4, 16), float64] */;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %206 = atanh(%205) /* ty=Tensor[(11, 4, 16), float64] */;
  %207 = cast(%var_5517, dtype="int64") /* ty=Tensor[(11, 4, 16), int64] */;
  %208 = shape_of(%var_5516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_5516, dtype="int64") /* ty=Tensor[(11, 4, 16), int64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %211 = bitwise_xor(%209, %210) /* ty=Tensor[(11, 4, 16), int64] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %213 = tan(%212) /* ty=Tensor[(11, 4, 16), float64] */;
  %214 = cast(%213, dtype="bool") /* ty=Tensor[(11, 4, 16), bool] */;
  %215 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%206, dtype="bool") /* ty=Tensor[(11, 4, 16), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %218 = %201.2;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(364), float64] */;
  %220 = cast(%var_5581, dtype="float64") /* ty=Tensor[(15, 364), float64] */;
  %221 = reshape(%219, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %222 = reshape(%220, newshape=[15, 364]) /* ty=Tensor[(15, 364), float64] */;
  %223 = @func_1071(%221, %222) /* ty=(Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) */;
  %224 = cast(%204, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %225 = %202.0;
  %226 = greater_equal(%216, %217) /* ty=Tensor[(11, 4, 16), bool] */;
  %227 = %223.3;
  %228 = rsqrt(%224) /* ty=Tensor[(11, 4, 16), float64] */;
  (%196, meta[relay.Constant][5] /* ty=Tensor[(1408), float64] */, %218, %225, %226, %227, %var_5581, %228)
}

def @func_5368() -> Tensor[(11, 1, 6), int16] {
  @func_4615() /* ty=Tensor[(11, 1, 6), int16] */
}

def @func_242() -> (Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) {
  %229 = cast(meta[relay.Constant][6] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %230 = reshape(%229, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %231 = @func_184(%230) /* ty=Tensor[(14, 13, 2), float64] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %233 = reshape(%232, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %234 = cast(%231, dtype="float32") /* ty=Tensor[(14, 13, 2), float32] */;
  %235 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %236 = @func_184(%233) /* ty=Tensor[(14, 13, 2), float64] */;
  %237 = log10(%234) /* ty=Tensor[(14, 13, 2), float32] */;
  %238 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%235, meta[relay.Constant][6] /* ty=Tensor[(364), float64] */, %236, %237, %238)
}

def @func_256() -> (Tensor[(4, 6, 5), uint64],) {
  %239 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%239,)
}

def @func_3054(%var_3027: Tensor[(2, 1, 15), float64], %var_3028: Tensor[(2, 14, 15), float64]) -> (Tensor[(2, 14, 15), float64], Tensor[(2, 14, 15), bool]) {
  %240 = cast(%var_3027, dtype="float64") /* ty=Tensor[(2, 1, 15), float64] */;
  %241 = cast(%var_3028, dtype="float64") /* ty=Tensor[(2, 14, 15), float64] */;
  %242 = cast(%var_3028, dtype="float64") /* ty=Tensor[(2, 14, 15), float64] */;
  %243 = tan(%242) /* ty=Tensor[(2, 14, 15), float64] */;
  %244 = cast(%var_3028, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
  %245 = cast(%var_3027, dtype="bool") /* ty=Tensor[(2, 1, 15), bool] */;
  %246 = logical_and(%244, %245) /* ty=Tensor[(2, 14, 15), bool] */;
  %247 = cast(%246, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
  %248 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%243, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %251 = mod(%240, %241) /* ty=Tensor[(2, 14, 15), float64] */;
  %252 = less(%249, %250) /* ty=Tensor[(2, 14, 15), bool] */;
  (%251, %252)
}

def @func_3882(%var_3874: Tensor[(4, 6, 5), uint64]) -> Tensor[(4, 6, 5), bool] {
  %253 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %254 = %253.0;
  %255 = cast(%var_3874, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%257, %258) /* ty=Tensor[(4, 6, 5), bool] */
}

def @func_654() -> (Tensor[(4, 6, 5), uint64],) {
  %259 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %260 = %259.1;
  (%260,)
}

def @func_1297(%var_1263: Tensor[(6, 5, 6), float64], %var_1274: Tensor[(8, 70), int64]) -> (Tensor[(1, 364), float64], Tensor[(6, 5, 6), float32], Tensor[(10, 7, 8), int64], Tensor[(8, 70), int64]) {
  %261 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %262 = cast(%var_1263, dtype="float64") /* ty=Tensor[(6, 5, 6), float64] */;
  %263 = rsqrt(%262) /* ty=Tensor[(6, 5, 6), float64] */;
  %264 = cast(%263, dtype="float32") /* ty=Tensor[(6, 5, 6), float32] */;
  %265 = cast(%var_1274, dtype="int64") /* ty=Tensor[(8, 70), int64] */;
  %266 = cast(%var_1274, dtype="int64") /* ty=Tensor[(8, 70), int64] */;
  %267 = reshape(%265, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int64] */;
  %268 = reshape(%266, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int64] */;
  %269 = %261.2;
  %270 = erf(%264) /* ty=Tensor[(6, 5, 6), float32] */;
  %271 = @func_722(%267, %268) /* ty=Tensor[(10, 7, 8), int64] */;
  (%269, %270, %271, %var_1274)
}

def @func_4540() -> (Tensor[(4, 6, 5), uint64],) {
  %272 = @func_2980() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) */;
  %273 = %272.1;
  (%273,)
}

def @func_5347() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  %274 = @func_2559() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %275 = @func_2858() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %276 = %274.0;
  %277 = %275.0;
  (%276, %277)
}

def @func_4006(%var_3988: int32, %var_3989: Tensor[(1, 6), int32]) -> Tensor[(1, 6), int32] {
  %278 = cast(%var_3988, dtype="int32") /* ty=int32 */;
  %279 = cast(%var_3989, dtype="int32") /* ty=Tensor[(1, 6), int32] */;
  add(%278, %279) /* ty=Tensor[(1, 6), int32] */
}

def @func_472() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %280 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %281 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %282 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %283 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %284 = %280.0;
  %285 = %281.3;
  %286 = %282.0;
  %287 = %283.4;
  (%284, %285, %286, %287)
}

def @func_3636() -> (Tensor[(4, 6, 5), float64], Tensor[(364), float64], Tensor[(364, 1), float64]) {
  %288 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %290 = cast(meta[relay.Constant][7] /* ty=Tensor[(364, 1), float64] */, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
  %291 = cast(%288, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %292 = reshape(%290, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %293 = reshape(%291, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %294 = @func_538(%292, %293) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) */;
  %295 = erf(%289) /* ty=Tensor[(4, 6, 5), float64] */;
  %296 = %294.1;
  (%295, %296, meta[relay.Constant][7] /* ty=Tensor[(364, 1), float64] */)
}

def @func_1130(%var_1120: Tensor[(14, 13, 2), float64], %var_1127: Tensor[(120), uint64]) -> (Tensor[(14, 13, 2), bool], Tensor[(14, 13, 2), float64], Tensor[(120), uint64]) {
  %297 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
  %298 = cast(%var_1120, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = cast(%297, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %303 = cast(%var_1127, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %304 = reshape(%302, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %305 = reshape(%303, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %306 = @func_538(%304, %305) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) */;
  %307 = less(%300, %301) /* ty=Tensor[(14, 13, 2), bool] */;
  %308 = %306.3;
  (%307, %308, %var_1127)
}

def @func_402() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %309 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %310 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %311 = %309.1;
  (%310, %311)
}

def @func_4685() -> (Tensor[(4, 6, 5), uint64],) {
  %312 = @func_1334() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %313 = %312.0;
  (%313,)
}

def @func_3423(%var_3345: Tensor[(1092, 1), float64], %var_3378: Tensor[(375), int16]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 375), bool], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 364), bool]) {
  %314 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %315 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %316 = cast(%var_3378, dtype="int16") /* ty=Tensor[(375), int16] */;
  %317 = cast(%var_3378, dtype="int16") /* ty=Tensor[(375), int16] */;
  %318 = reshape(%316, newshape=[5, 5, 15]) /* ty=Tensor[(5, 5, 15), int16] */;
  %319 = reshape(%317, newshape=[5, 5, 15]) /* ty=Tensor[(5, 5, 15), int16] */;
  %320 = @func_2323(%318, %319) /* ty=(Tensor[(5, 5, 15), int16], Tensor[(4, 6, 5), uint64]) */;
  %321 = cast(%var_3378, dtype="bool") /* ty=Tensor[(375), bool] */;
  %322 = cast(%var_3345, dtype="bool") /* ty=Tensor[(1092, 1), bool] */;
  %323 = @func_1038() /* ty=(Tensor[(364), float64],) */;
  %324 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %325 = cast(%var_3345, dtype="bool") /* ty=Tensor[(1092, 1), bool] */;
  %326 = cast(meta[relay.Constant][8] /* ty=Tensor[(364), float64] */, dtype="bool") /* ty=Tensor[(364), bool] */;
  %327 = less(%325, %326) /* ty=Tensor[(1092, 364), bool] */;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(1092, 364), float64] */;
  %329 = sigmoid(%328) /* ty=Tensor[(1092, 364), float64] */;
  %330 = cast(meta[relay.Constant][8] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %331 = cast(%var_3345, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
  %332 = reshape(%330, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %333 = reshape(%331, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %334 = @func_2065(%332, %333) /* ty=(Tensor[(364), bool], Tensor[(1, 364), float32], Tensor[(1092), float64]) */;
  %335 = %334.0;
  %336 = cast(%329, dtype="bool") /* ty=Tensor[(1092, 364), bool] */;
  %337 = cast(%335, dtype="bool") /* ty=Tensor[(364), bool] */;
  %338 = %314.0;
  %339 = @func_2706() /* ty=Tensor[(4, 6, 5), uint64] */;
  %340 = %315.3;
  %341 = %320.1;
  %342 = greater_equal(%321, %322) /* ty=Tensor[(1092, 375), bool] */;
  %343 = %323.0;
  %344 = %324.0;
  %345 = greater_equal(%336, %337) /* ty=Tensor[(1092, 364), bool] */;
  (%338, %339, %340, %341, %342, %343, %344, %345)
}

def @func_674() -> (Tensor[(4, 6, 5), uint64],) {
  %346 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %347 = %346.0;
  (%347,)
}

def @func_2677(%var_2666: int8, %var_2667: Tensor[(10, 14, 8), int8]) -> (Tensor[(10, 14, 8), int8],) {
  %348 = cast(%var_2666, dtype="int8") /* ty=int8 */;
  %349 = cast(%var_2667, dtype="int8") /* ty=Tensor[(10, 14, 8), int8] */;
  %350 = bitwise_or(%348, %349) /* ty=Tensor[(10, 14, 8), int8] */;
  (%350,)
}

def @func_1162() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
  %351 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %352 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
  %353 = %351.3;
  %354 = @func_1102() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%352, %353, %354)
}

def @func_4736(%var_4712: Tensor[(1, 6, 12), float32], %var_4720: Tensor[(420), float64]) -> (Tensor[(1, 6, 12), float32], Tensor[(2, 14, 15), bool], Tensor[(30), float64], Tensor[(420), float64], Tensor[(4, 6, 5), uint64]) {
  %355 = cast(%var_4712, dtype="float32") /* ty=Tensor[(1, 6, 12), float32] */;
  %356 = cast(meta[relay.Constant][9] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %357 = cast(%var_4720, dtype="float64") /* ty=Tensor[(420), float64] */;
  %358 = reshape(%356, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float64] */;
  %359 = reshape(%357, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float64] */;
  %360 = @func_3054(%358, %359) /* ty=(Tensor[(2, 14, 15), float64], Tensor[(2, 14, 15), bool]) */;
  %361 = rsqrt(%355) /* ty=Tensor[(1, 6, 12), float32] */;
  %362 = %360.1;
  %363 = @func_1358() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%361, %362, meta[relay.Constant][9] /* ty=Tensor[(30), float64] */, %var_4720, %363)
}

def @func_4937() -> Tensor[(4, 6, 5), uint64] {
  %364 = @func_1162() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %364.2
}

def @func_1102() -> Tensor[(4, 6, 5), uint64] {
  %365 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %365.0
}

def @func_4272() -> (Tensor[(4, 6, 5), uint64],) {
  %366 = @func_4155() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %367 = %366.0;
  (%367,)
}

def @func_3738() -> (Tensor[(4, 6, 5), float64],) {
  %368 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %369 = %368.0;
  (%369,)
}

def @func_4818() -> (Tensor[(1, 364), float64],) {
  %370 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  (%370,)
}

def @func_4566(%var_4543: Tensor[(6, 14, 8), float64]) -> (Tensor[(6, 14, 8), float64], Tensor[(6, 14, 8), float64]) {
  %371 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 14, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
  %372 = shape_of(%var_4543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_4543, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %375 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 14, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
  %376 = subtract(%373, %374) /* ty=Tensor[(6, 14, 8), float64] */;
  %377 = cos(%375) /* ty=Tensor[(6, 14, 8), float64] */;
  (%376, %377)
}

def @func_2626() -> Tensor[(1, 364), float64] {
  %378 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %378.2
}

def @func_4027() -> (Tensor[(4, 6, 5), float32],) {
  %379 = @func_3321() /* ty=Tensor[(4, 6, 5), float32] */;
  (%379,)
}

def @func_4340(%var_4333: Tensor[(1092), float64]) -> (Tensor[(1, 364), float64], Tensor[(4, 6, 5), float64], Tensor[(120), uint64], Tensor[(14, 13, 2), float64], Tensor[(512), float64], Tensor[(3, 364), bool], Tensor[(1092), float64]) {
  %380 = cast(meta[relay.Constant][11] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %381 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  %382 = cast(%381, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %383 = reshape(%380, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %384 = reshape(%382, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %385 = @func_985(%383, %384) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) */;
  %386 = cast(meta[relay.Constant][12] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %387 = reshape(%386, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float64] */;
  %388 = @func_1659(%387) /* ty=(Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) */;
  %389 = cast(%var_4333, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %390 = reshape(%389, newshape=[3, 364]) /* ty=Tensor[(3, 364), float64] */;
  %391 = @func_1528(%390) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %392 = %385.4;
  %393 = %388.1;
  %394 = %391.1;
  (%381, %392, meta[relay.Constant][11] /* ty=Tensor[(120), uint64] */, %393, meta[relay.Constant][12] /* ty=Tensor[(512), float64] */, %394, %var_4333)
}

def @func_4300() -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64]) {
  %395 = @func_4027() /* ty=(Tensor[(4, 6, 5), float32],) */;
  %396 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
  %397 = %395.0;
  %398 = %396.1;
  (%397, %398)
}

def @func_3529() -> (Tensor[(4, 6, 5), bool],) {
  %399 = @func_2011() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %402 = asinh(%401) /* ty=Tensor[(4, 6, 5), float64] */;
  %403 = cast(%400, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = logical_and(%405, %406) /* ty=Tensor[(4, 6, 5), bool] */;
  (%407,)
}

def @func_184(%var_177: Tensor[(14, 13, 2), float64]) -> Tensor[(14, 13, 2), float64] {
  %408 = cast(%var_177, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  acosh(%408) /* ty=Tensor[(14, 13, 2), float64] */
}

def @func_2652() -> Tensor[(14, 13, 2), float64] {
  @func_613() /* ty=Tensor[(14, 13, 2), float64] */
}

def @func_4589() -> (Tensor[(14, 13, 2), float64],) {
  %409 = @func_1250() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %412 = asin(%411) /* ty=Tensor[(14, 13, 2), float64] */;
  (%412,)
}

def @func_613() -> Tensor[(14, 13, 2), float64] {
  %413 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %413.1
}

def @func_4231(%var_4220: Tensor[(8, 3, 2), uint8]) -> Tensor[(8, 3, 2), uint8] {
  %414 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 3, 2), uint8] */, dtype="uint8") /* ty=Tensor[(8, 3, 2), uint8] */;
  %415 = shape_of(%var_4220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_4220, dtype="uint8") /* ty=Tensor[(8, 3, 2), uint8] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%416, %417) /* ty=Tensor[(8, 3, 2), uint8] */
}

def @func_2444() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
  %418 = @func_1250() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %419 = @func_2011() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %420 = %418.0;
  %421 = %419.0;
  (%420, %421)
}

def @func_4871(%var_4863: Tensor[(5460), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(5460), float64]) {
  %422 = @func_4685() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %423 = cast(%var_4863, dtype="float64") /* ty=Tensor[(5460), float64] */;
  %424 = %422.0;
  %425 = cast(%424, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %426 = reshape(%423, newshape=[5460]) /* ty=Tensor[(5460), float64] */;
  %427 = reshape(%425, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %428 = @func_1852(%426, %427) /* ty=(Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) */;
  %429 = %428.2;
  (%424, %429, %var_4863)
}

def @func_2137() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %430 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %431 = @func_1944() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %432 = %430.0;
  %433 = %431.1;
  (%432, %433)
}

def @func_985(%var_902: Tensor[(4, 6, 5), uint64], %var_947: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) {
  %434 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %435 = %434.0;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  %437 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %438 = %437.1;
  %439 = cast(%var_947, dtype="float64") /* ty=Tensor[(364), float64] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(1), int32] */;
  %441 = cast(%438, dtype="float64") /* ty=Tensor[(364), float64] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?), float64] */;
  %443 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %444 = %443.1;
  %445 = cast(%var_902, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %446 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%435, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %449 = subtract(%447, %448) /* ty=Tensor[(4, 6, 5), float64] */;
  %450 = cast(%449, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
  %451 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%444, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %454 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %455 = cosh(%436) /* ty=Tensor[(4, 6, 5), float32] */;
  %456 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %457 = power(%441, %442) /* ty=Tensor[(364), float64] */;
  %458 = right_shift(%452, %453) /* ty=Tensor[(4, 6, 5), int16] */;
  %459 = %454.0;
  (%455, %456, %457, %458, %459)
}

def @func_1071(%var_1043: Tensor[(14, 13, 2), float64], %var_1066: Tensor[(15, 364), float64]) -> (Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) {
  %460 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %461 = %460.1;
  %462 = cast(%var_1043, dtype="float32") /* ty=Tensor[(14, 13, 2), float32] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="float32") /* ty=Tensor[(14, 13, 2), float32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %466 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %467 = @func_855() /* ty=Tensor[(1, 364), float64] */;
  %468 = cast(%467, dtype="bool") /* ty=Tensor[(1, 364), bool] */;
  %469 = cast(%var_1066, dtype="bool") /* ty=Tensor[(15, 364), bool] */;
  %470 = power(%464, %465) /* ty=Tensor[(14, 13, 2), float32] */;
  %471 = %466.1;
  %472 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
  %473 = not_equal(%468, %469) /* ty=Tensor[(15, 364), bool] */;
  (%470, %471, %472, %473)
}

def @func_1944() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %474 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %475 = %474.0;
  %476 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%475, %476)
}

def @func_1852(%var_1808: Tensor[(5460), float64], %var_1840: Tensor[(120), uint64]) -> (Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) {
  %477 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 7), float32] */;
  %478 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %479 = cast(meta[relay.Constant][16] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %480 = reshape(%478, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %481 = reshape(%479, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %482 = @func_985(%480, %481) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) */;
  %483 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %484 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %485 = %483.1;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(364), float64] */;
  %487 = reshape(%486, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %488 = cast(meta[relay.Constant][16] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %489 = cast(%var_1808, dtype="float64") /* ty=Tensor[(5460), float64] */;
  %490 = reshape(%488, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %491 = reshape(%489, newshape=[15, 364]) /* ty=Tensor[(15, 364), float64] */;
  %492 = @func_1071(%490, %491) /* ty=(Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) */;
  %493 = cast(%var_1840, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %494 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(120), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %495 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), uint64] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %497 = log2(%477) /* ty=Tensor[(1, 7), float32] */;
  %498 = %482.0;
  %499 = %484.0;
  %500 = @func_184(%487) /* ty=Tensor[(14, 13, 2), float64] */;
  %501 = %492.0;
  %502 = add(%495, %496) /* ty=Tensor[(120), uint32] */;
  (%497, %498, meta[relay.Constant][16] /* ty=Tensor[(364), float64] */, %485, %499, %500, %501, %var_1808, %502)
}

def @func_135() -> Tensor[(4, 6, 5), uint64] {
  %503 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  %504 = asin(%503) /* ty=Tensor[(4, 6, 5), float32] */;
  %505 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 6, 5), float32] */, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_and(%507, %508) /* ty=Tensor[(4, 6, 5), uint64] */
}

def @func_5461() -> (Tensor[(1, 364), float64],) {
  %509 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %510 = %509.2;
  (%510,)
}

def @func_2763(%var_2711: Tensor[(1, 4, 16), float64], %var_2712: Tensor[(5, 4, 16), float64], %var_2749: Tensor[(5, 4, 16), float32]) -> (Tensor[(4, 6, 5), uint64], Tensor[(5, 4, 16), uint8], Tensor[(5, 4, 16), int64]) {
  %511 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %512 = cast(%var_2712, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %513 = erf(%512) /* ty=Tensor[(5, 4, 16), float64] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %515 = exp(%514) /* ty=Tensor[(5, 4, 16), float64] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(5, 4, 16), float32] */;
  %517 = atanh(%516) /* ty=Tensor[(5, 4, 16), float32] */;
  %518 = cast(%var_2749, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %522 = cast(%var_2711, dtype="float64") /* ty=Tensor[(1, 4, 16), float64] */;
  %523 = cast(%var_2712, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
  %524 = divide(%522, %523) /* ty=Tensor[(5, 4, 16), float64] */;
  %525 = cast(%524, dtype="int64") /* ty=Tensor[(5, 4, 16), int64] */;
  %526 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%515, dtype="int64") /* ty=Tensor[(5, 4, 16), int64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %529 = %511.0;
  %530 = multiply(%520, %521) /* ty=Tensor[(5, 4, 16), uint8] */;
  %531 = minimum(%527, %528) /* ty=Tensor[(5, 4, 16), int64] */;
  (%529, %530, %531)
}

def @func_3470(%var_3450: Tensor[(512), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(8, 16, 4), float64], Tensor[(512), float64], Tensor[(?, 364), uint8]) {
  %532 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %533 = cast(%var_3450, dtype="float64") /* ty=Tensor[(512), float64] */;
  %534 = reshape(%533, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float64] */;
  %535 = @func_1659(%534) /* ty=(Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) */;
  %536 = @func_2980() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) */;
  %537 = %536.2;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %539 = acosh(%538) /* ty=Tensor[(1, 364), float32] */;
  %540 = cast(%539, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %541 = tan(%540) /* ty=Tensor[(1, 364), float32] */;
  %542 = cast(%541, dtype="uint8") /* ty=Tensor[(1, 364), uint8] */;
  %543 = shape_of(%539, dtype="int32") /* ty=Tensor[(2), int32] */;
  %544 = cast(%539, dtype="uint8") /* ty=Tensor[(1, 364), uint8] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %546 = %532.0;
  %547 = %535.0;
  %548 = add(%544, %545) /* ty=Tensor[(?, 364), uint8] */;
  (%546, %547, %var_3450, %548)
}

def @func_5400() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float32], Tensor[(5460), float64]) {
  %549 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %550 = cast(meta[relay.Constant][19] /* ty=Tensor[(5460), float64] */, dtype="float64") /* ty=Tensor[(5460), float64] */;
  %551 = %549.0;
  %552 = cast(%551, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %553 = reshape(%550, newshape=[5460]) /* ty=Tensor[(5460), float64] */;
  %554 = reshape(%552, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %555 = @func_1852(%553, %554) /* ty=(Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) */;
  %556 = %555.1;
  (%551, %556, meta[relay.Constant][19] /* ty=Tensor[(5460), float64] */)
}

def @func_3899(%var_3886: Tensor[(15, 16, 11), int32], %var_3887: Tensor[(15, 16, 11), int32]) -> (Tensor[(15, 16, 11), bool],) {
  %557 = cast(%var_3887, dtype="bool") /* ty=Tensor[(15, 16, 11), bool] */;
  %558 = shape_of(%var_3886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%var_3886, dtype="bool") /* ty=Tensor[(15, 16, 11), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %561 = not_equal(%559, %560) /* ty=Tensor[(15, 16, 11), bool] */;
  (%561,)
}

def @func_2086() -> (Tensor[(4, 6, 5), uint64],) {
  %562 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %563 = %562.1;
  (%563,)
}

def @func_3321() -> Tensor[(4, 6, 5), float32] {
  %564 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  %567 = log(%566) /* ty=Tensor[(4, 6, 5), float32] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  exp(%568) /* ty=Tensor[(4, 6, 5), float32] */
}

def @func_5011(%var_4987: Tensor[(5460), float64]) -> (Tensor[(5460), float64], Tensor[(?, 364), bool], Tensor[(4, 6, 5), uint64], Tensor[(512), float64], Tensor[(14, 13, 2), int16]) {
  %569 = @func_2980() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) */;
  %570 = %569.2;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %572 = cast(%var_4987, dtype="float64") /* ty=Tensor[(5460), float64] */;
  %573 = reshape(%571, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %574 = reshape(%572, newshape=[15, 364]) /* ty=Tensor[(15, 364), float64] */;
  %575 = @func_1071(%573, %574) /* ty=(Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) */;
  %576 = %575.1;
  %577 = cast(%576, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
  %578 = shape_of(%570, dtype="int32") /* ty=Tensor[(2), int32] */;
  %579 = cast(%570, dtype="bool") /* ty=Tensor[(1, 364), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %581 = cast(meta[relay.Constant][20] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %582 = reshape(%581, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %583 = @func_3470(%582) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(8, 16, 4), float64], Tensor[(512), float64], Tensor[(?, 364), uint8]) */;
  %584 = cast(%570, dtype="int16") /* ty=Tensor[(1, 364), int16] */;
  %585 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%576, dtype="int16") /* ty=Tensor[(14, 13, 2), int16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %588 = greater(%579, %580) /* ty=Tensor[(?, 364), bool] */;
  %589 = %583.0;
  %590 = bitwise_xor(%586, %587) /* ty=Tensor[(14, 13, 2), int16] */;
  (%var_4987, %588, %589, meta[relay.Constant][20] /* ty=Tensor[(512), float64] */, %590)
}

def @func_4704() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
  %591 = @func_3276() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
  %592 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %593 = %591.0;
  %594 = %592.1;
  (%593, %594)
}

def @func_5087() -> Tensor[(14, 13, 2), float64] {
  %595 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
  %595.0
}

def @func_4186(%var_4174: Tensor[(3, 16, 4), uint64]) -> (Tensor[(3, 16, 4), uint64], Tensor[(4, 6, 5), uint64], Tensor[(3, 16, 4), float32]) {
  %596 = cast(meta[relay.Constant][21] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %597 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(3, 16, 4), uint64] */;
  %598 = @func_707() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %599 = cast(%var_4174, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
  %600 = maximum(%596, %597) /* ty=Tensor[(3, 16, 4), uint64] */;
  %601 = %598.0;
  %602 = sqrt(%599) /* ty=Tensor[(3, 16, 4), float32] */;
  (%600, %601, %602)
}

def @func_4470(%var_4430: Tensor[(15, 13, 9), float64], %var_4447: Tensor[(32, 16), float64]) -> (Tensor[(15, 13, 9), bool], Tensor[(14, 13, 2), float64], Tensor[(32, 16), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) {
  %603 = cast(%var_4430, dtype="bool") /* ty=Tensor[(15, 13, 9), bool] */;
  %604 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(15, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 13, 9), float64] */, dtype="bool") /* ty=Tensor[(15, 13, 9), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %607 = cast(%var_4447, dtype="float64") /* ty=Tensor[(32, 16), float64] */;
  %608 = reshape(%607, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float64] */;
  %609 = @func_1659(%608) /* ty=(Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) */;
  %610 = @func_2086() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %611 = equal(%605, %606) /* ty=Tensor[(15, 13, 9), bool] */;
  %612 = %609.1;
  %613 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  %614 = %610.0;
  (%611, %612, %var_4447, %613, %614)
}

def @func_5112(%var_5095: Tensor[(14, 1, 10), bool], %var_5096: Tensor[(14, 12, 10), bool]) -> (Tensor[(14, 12, 10), bool], Tensor[(14, 1, 10), float32]) {
  %615 = cast(%var_5095, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %616 = cast(%var_5096, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
  %617 = cast(%var_5095, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %618 = logical_or(%615, %616) /* ty=Tensor[(14, 12, 10), bool] */;
  %619 = acos(%617) /* ty=Tensor[(14, 1, 10), float32] */;
  (%618, %619)
}

def @func_2858() -> (Tensor[(14, 13, 2), float64],) {
  %620 = @func_2652() /* ty=Tensor[(14, 13, 2), float64] */;
  (%620,)
}

def @func_2980() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) {
  %621 = @func_2559() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %622 = @func_707() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %623 = %621.1;
  %624 = %622.0;
  %625 = @func_855() /* ty=Tensor[(1, 364), float64] */;
  (%623, %624, %625)
}

def @func_336() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) {
  %626 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %627 = cast(meta[relay.Constant][23] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %628 = reshape(%627, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %629 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %631 = %626.0;
  %632 = @func_184(%628) /* ty=Tensor[(14, 13, 2), float64] */;
  %633 = acosh(%630) /* ty=Tensor[(4, 6, 5), float64] */;
  (%631, %632, meta[relay.Constant][23] /* ty=Tensor[(364), float64] */, %633)
}

def @func_2065(%var_2041: Tensor[(364), float64], %var_2062: Tensor[(1092), float64]) -> (Tensor[(364), bool], Tensor[(1, 364), float32], Tensor[(1092), float64]) {
  %634 = @func_1038() /* ty=(Tensor[(364), float64],) */;
  %635 = %634.0;
  %636 = cast(%var_2041, dtype="bool") /* ty=Tensor[(364), bool] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(1), int32] */;
  %638 = cast(%635, dtype="bool") /* ty=Tensor[(364), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?), bool] */;
  %640 = not_equal(%638, %639) /* ty=Tensor[(364), bool] */;
  %641 = cast(%640, dtype="bool") /* ty=Tensor[(364), bool] */;
  %642 = shape_of(%635, dtype="int32") /* ty=Tensor[(1), int32] */;
  %643 = cast(%635, dtype="bool") /* ty=Tensor[(364), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?), bool] */;
  %645 = cast(%var_2062, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %646 = reshape(%645, newshape=[3, 364]) /* ty=Tensor[(3, 364), float64] */;
  %647 = @func_1528(%646) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %648 = greater(%643, %644) /* ty=Tensor[(364), bool] */;
  %649 = %647.2;
  (%648, %649, %var_2062)
}

def @func_2011() -> (Tensor[(4, 6, 5), uint64],) {
  %650 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %651 = %650.0;
  (%651,)
}

def @func_5304(%var_5279: Tensor[(16, 1, 16), float32], %var_5287: Tensor[(16, 15, 16), float32]) -> (Tensor[(16, 1, 16), float32], Tensor[(16, 15, 16), bool], Tensor[(4, 6, 5), uint64]) {
  %652 = cast(%var_5279, dtype="float32") /* ty=Tensor[(16, 1, 16), float32] */;
  %653 = cast(%var_5279, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
  %654 = cast(%var_5287, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %655 = sinh(%652) /* ty=Tensor[(16, 1, 16), float32] */;
  %656 = less_equal(%653, %654) /* ty=Tensor[(16, 15, 16), bool] */;
  %657 = @func_1358() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%655, %656, %657)
}

def @func_1334() -> (Tensor[(4, 6, 5), uint64],) {
  %658 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %659 = %658.0;
  (%659,)
}

def @func_1659(%var_1645: Tensor[(8, 16, 4), float64]) -> (Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) {
  %660 = cast(-0.007361f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %661 = cast(%var_1645, dtype="float64") /* ty=Tensor[(8, 16, 4), float64] */;
  %662 = @func_1162() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %663 = divide(%660, %661) /* ty=Tensor[(8, 16, 4), float64] */;
  %664 = %662.0;
  (%663, %664)
}

def @func_5457() -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), float64]) {
  %665 = @func_4300() /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64]) */;
  %666 = @func_1448() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %667 = %665.0;
  %668 = %666.0;
  (%667, %668)
}

def @func_5333() -> (Tensor[(14, 13, 2), float64],) {
  %669 = @func_2858() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %670 = %669.0;
  (%670,)
}

def @func_2911(%var_2901: Tensor[(364), float64]) -> (Tensor[(10, 2, 15), float64], Tensor[(364), float64], Tensor[(364), float64], Tensor[(1, 364), float64]) {
  %671 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %672 = cast(%var_2901, dtype="float64") /* ty=Tensor[(364), float64] */;
  %673 = reshape(%672, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %674 = @func_2309(%673) /* ty=(Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) */;
  %675 = log10(%671) /* ty=Tensor[(10, 2, 15), float64] */;
  %676 = %674.2;
  %677 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  (%675, %676, %var_2901, %677)
}

def @func_1038() -> (Tensor[(364), float64],) {
  %678 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %679 = %678.2;
  (%679,)
}

def @func_380() -> (Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
  %680 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %681 = %680.0;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %683 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %684 = log10(%682) /* ty=Tensor[(4, 6, 5), float64] */;
  %685 = %683.0;
  (%684, %685)
}

def @func_2323(%var_2314: Tensor[(5, 5, 15), int16], %var_2315: Tensor[(5, 5, 15), int16]) -> (Tensor[(5, 5, 15), int16], Tensor[(4, 6, 5), uint64]) {
  %686 = cast(%var_2315, dtype="int16") /* ty=Tensor[(5, 5, 15), int16] */;
  %687 = shape_of(%var_2314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%var_2314, dtype="int16") /* ty=Tensor[(5, 5, 15), int16] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %690 = @func_1317() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %691 = bitwise_xor(%688, %689) /* ty=Tensor[(5, 5, 15), int16] */;
  %692 = %690.0;
  (%691, %692)
}

def @func_2611(%var_2595: Tensor[(4, 6, 5), uint64]) -> (Tensor[(4, 6, 5), int16],) {
  %693 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %694 = %693.0;
  %695 = cast(%var_2595, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %696 = shape_of(%694, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(%694, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %699 = logical_or(%697, %698) /* ty=Tensor[(4, 6, 5), bool] */;
  %700 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 6, 5), bool] */, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %704 = minimum(%702, %703) /* ty=Tensor[(4, 6, 5), int16] */;
  (%704,)
}

def @func_764() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) {
  %705 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %706 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 364), float64] */, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %707 = reshape(%706, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %708 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %709 = %705.3;
  %710 = @func_184(%707) /* ty=Tensor[(14, 13, 2), float64] */;
  %711 = %708.1;
  (%709, %710, meta[relay.Constant][26] /* ty=Tensor[(1, 364), float64] */, %711)
}

def @func_1448() -> (Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
  %712 = @func_1102() /* ty=Tensor[(4, 6, 5), uint64] */;
  %713 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %716 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%712, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %719 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %720 = mod(%717, %718) /* ty=Tensor[(4, 6, 5), float64] */;
  %721 = %719.2;
  (%720, %721)
}

def @func_4073(%var_4054: Tensor[(11, 8, 16), float64], %var_4055: Tensor[(11, 8, 16), float64]) -> (Tensor[(11, 8, 16), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %722 = cast(%var_4055, dtype="float64") /* ty=Tensor[(11, 8, 16), float64] */;
  %723 = shape_of(%var_4054, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%var_4054, dtype="float64") /* ty=Tensor[(11, 8, 16), float64] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %726 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %727 = @func_402() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %728 = floor_mod(%724, %725) /* ty=Tensor[(11, 8, 16), float64] */;
  %729 = %726.0;
  %730 = %727.0;
  (%728, %729, %730)
}

def @func_1614(%var_1600: Tensor[(182, 2), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), int16], Tensor[(182, 2), float64]) {
  %731 = @func_1317() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %734 = cast(%var_1600, dtype="float64") /* ty=Tensor[(182, 2), float64] */;
  %735 = reshape(%733, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %736 = reshape(%734, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %737 = @func_985(%735, %736) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) */;
  %738 = %737.3;
  (%732, %738, %var_1600)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_613() -> Tensor[(14, 13, 2), float64] {
  %0 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %0.1
}

def @func_381() -> (Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
  %7 = fn () -> (Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
    %1 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %2 = %1.0;
    %3 = cast(%2, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
    %4 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %5 = log10(%3) /* ty=Tensor[(4, 6, 5), float64] */;
    %6 = %4.0;
    (%5, %6)
  };
  %7() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_4156() -> (Tensor[(4, 6, 5), uint64],) {
  %10 = fn () -> (Tensor[(4, 6, 5), uint64],) {
    %8 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %9 = %8.1;
    (%9,)
  };
  %10() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_676() -> (Tensor[(4, 6, 5), uint64],) {
  @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_985(%var_902: Tensor[(4, 6, 5), uint64], %var_947: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) {
  %11 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %12 = %11.0;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  %14 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %15 = %14.1;
  %16 = cast(%var_947, dtype="float64") /* ty=Tensor[(364), float64] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %18 = cast(%15, dtype="float64") /* ty=Tensor[(364), float64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?), float64] */;
  %20 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %21 = %20.1;
  %22 = cast(%var_902, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %23 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%12, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %26 = subtract(%24, %25) /* ty=Tensor[(4, 6, 5), float64] */;
  %27 = cast(%26, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
  %28 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%21, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %31 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %32 = cosh(%13) /* ty=Tensor[(4, 6, 5), float32] */;
  %33 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %34 = power(%18, %19) /* ty=Tensor[(364), float64] */;
  %35 = right_shift(%29, %30) /* ty=Tensor[(4, 6, 5), int16] */;
  %36 = %31.0;
  (%32, %33, %34, %35, %36)
}

def @func_2088() -> (Tensor[(4, 6, 5), uint64],) {
  @func_2086() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_1528(%var_1476: Tensor[(3, 364), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  %37 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %38 = @func_855() /* ty=Tensor[(1, 364), float64] */;
  %39 = cast(%38, dtype="bool") /* ty=Tensor[(1, 364), bool] */;
  %40 = cast(%var_1476, dtype="bool") /* ty=Tensor[(3, 364), bool] */;
  %41 = cast(%38, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %42 = @func_1317() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %43 = %37.1;
  %44 = greater(%39, %40) /* ty=Tensor[(3, 364), bool] */;
  %45 = rsqrt(%41) /* ty=Tensor[(1, 364), float32] */;
  %46 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %47 = %42.1;
  (%43, %44, %45, %46, %47)
}

def @func_2654() -> Tensor[(14, 13, 2), float64] {
  @func_2652() /* ty=Tensor[(14, 13, 2), float64] */
}

def @func_5368() -> Tensor[(11, 1, 6), int16] {
  @func_4615() /* ty=Tensor[(11, 1, 6), int16] */
}

def @func_3975() -> (Tensor[(4, 6, 5), uint64],) {
  @func_3973() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_1360() -> Tensor[(4, 6, 5), uint64] {
  @func_1358() /* ty=Tensor[(4, 6, 5), uint64] */
}

def @func_258() -> (Tensor[(4, 6, 5), uint64],) {
  @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_4705() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
  %52 = fn () -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
    %48 = @func_3276() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
    %49 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %50 = %48.0;
    %51 = %49.1;
    (%50, %51)
  };
  %52() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_3657(%var_3640: Tensor[(12, 6, 13), uint64], %var_3641: Tensor[(12, 6, 13), uint64]) -> Tensor[(12, 6, 13), float64] {
  %53 = cast(%var_3641, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %54 = shape_of(%var_3640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_3640, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = not_equal(%55, %56) /* ty=Tensor[(12, 6, 13), bool] */;
  %58 = cast(%var_3640, dtype="float64") /* ty=Tensor[(12, 6, 13), float64] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%57, dtype="float64") /* ty=Tensor[(12, 6, 13), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%60, %61) /* ty=Tensor[(12, 6, 13), float64] */
}

def @func_1102() -> Tensor[(4, 6, 5), uint64] {
  %62 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %62.0
}

def @func_2012() -> (Tensor[(4, 6, 5), uint64],) {
  %65 = fn () -> (Tensor[(4, 6, 5), uint64],) {
    %63 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %64 = %63.0;
    (%64,)
  };
  %65() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_1164() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
  @func_1162() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_766() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) {
  @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_3529() -> (Tensor[(4, 6, 5), bool],) {
  %66 = @func_2011() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %69 = asinh(%68) /* ty=Tensor[(4, 6, 5), float64] */;
  %70 = cast(%67, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %74 = logical_and(%72, %73) /* ty=Tensor[(4, 6, 5), bool] */;
  (%74,)
}

def @func_136() -> Tensor[(4, 6, 5), uint64] {
  %81 = fn () -> Tensor[(4, 6, 5), uint64] {
    %75 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 6, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
    %76 = asin(%75) /* ty=Tensor[(4, 6, 5), float32] */;
    %77 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 6, 5), float32] */, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
    %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%76, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_and(%79, %80) /* ty=Tensor[(4, 6, 5), uint64] */
  };
  %81() /* ty=Tensor[(4, 6, 5), uint64] */
}

def @func_1319() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  @func_1317() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */
}

def @func_1584(%var_1583: Tensor[(364), float64]) -> (Tensor[(364), int64], Tensor[(4, 6, 5), uint64]) {
  %91 = fn (%var_1564: Tensor[(364), float64]) -> (Tensor[(364), int64], Tensor[(4, 6, 5), uint64]) {
    %82 = @func_1038() /* ty=(Tensor[(364), float64],) */;
    %83 = %82.0;
    %84 = cast(%var_1564, dtype="int64") /* ty=Tensor[(364), int64] */;
    %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(1), int32] */;
    %86 = cast(%83, dtype="int64") /* ty=Tensor[(364), int64] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?), int64] */;
    %88 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %89 = bitwise_and(%86, %87) /* ty=Tensor[(364), int64] */;
    %90 = %88.1;
    (%89, %90)
  };
  %91(%var_1583) /* ty=(Tensor[(364), int64], Tensor[(4, 6, 5), uint64]) */
}

def @func_256() -> (Tensor[(4, 6, 5), uint64],) {
  %92 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%92,)
}

def @func_2086() -> (Tensor[(4, 6, 5), uint64],) {
  %93 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %94 = %93.1;
  (%94,)
}

def @func_4736(%var_4712: Tensor[(1, 6, 12), float32], %var_4720: Tensor[(420), float64]) -> (Tensor[(1, 6, 12), float32], Tensor[(2, 14, 15), bool], Tensor[(30), float64], Tensor[(420), float64], Tensor[(4, 6, 5), uint64]) {
  %95 = cast(%var_4712, dtype="float32") /* ty=Tensor[(1, 6, 12), float32] */;
  %96 = cast(meta[relay.Constant][2] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %97 = cast(%var_4720, dtype="float64") /* ty=Tensor[(420), float64] */;
  %98 = reshape(%96, newshape=[2, 1, 15]) /* ty=Tensor[(2, 1, 15), float64] */;
  %99 = reshape(%97, newshape=[2, 14, 15]) /* ty=Tensor[(2, 14, 15), float64] */;
  %100 = @func_3054(%98, %99) /* ty=(Tensor[(2, 14, 15), float64], Tensor[(2, 14, 15), bool]) */;
  %101 = rsqrt(%95) /* ty=Tensor[(1, 6, 12), float32] */;
  %102 = %100.1;
  %103 = @func_1358() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%101, %102, meta[relay.Constant][2] /* ty=Tensor[(30), float64] */, %var_4720, %103)
}

def @func_3277() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
  %108 = fn () -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
    %104 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
    %105 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
    %106 = %104.1;
    %107 = %105.1;
    (%106, %107)
  };
  %108() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_1336() -> (Tensor[(4, 6, 5), uint64],) {
  @func_1334() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_3903(%var_3901: Tensor[(15, 16, 11), int32], %var_3902: Tensor[(15, 16, 11), int32]) -> (Tensor[(15, 16, 11), bool],) {
  @func_3899(%var_3901, %var_3902) /* ty=(Tensor[(15, 16, 11), bool],) */
}

def @func_1358() -> Tensor[(4, 6, 5), uint64] {
  %109 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %109.0
}

def @func_5402() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float32], Tensor[(5460), float64]) {
  @func_5400() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float32], Tensor[(5460), float64]) */
}

def @func_2627() -> Tensor[(1, 364), float64] {
  %111 = fn () -> Tensor[(1, 364), float64] {
    %110 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
    %110.2
  };
  %111() /* ty=Tensor[(1, 364), float64] */
}

def @func_1071(%var_1043: Tensor[(14, 13, 2), float64], %var_1066: Tensor[(15, 364), float64]) -> (Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) {
  %112 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %113 = %112.1;
  %114 = cast(%var_1043, dtype="float32") /* ty=Tensor[(14, 13, 2), float32] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="float32") /* ty=Tensor[(14, 13, 2), float32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %118 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %119 = @func_855() /* ty=Tensor[(1, 364), float64] */;
  %120 = cast(%119, dtype="bool") /* ty=Tensor[(1, 364), bool] */;
  %121 = cast(%var_1066, dtype="bool") /* ty=Tensor[(15, 364), bool] */;
  %122 = power(%116, %117) /* ty=Tensor[(14, 13, 2), float32] */;
  %123 = %118.1;
  %124 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
  %125 = not_equal(%120, %121) /* ty=Tensor[(15, 364), bool] */;
  (%122, %123, %124, %125)
}

def @func_1856(%var_1854: Tensor[(5460), float64], %var_1855: Tensor[(120), uint64]) -> (Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) {
  @func_1852(%var_1854, %var_1855) /* ty=(Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) */
}

def @func_708() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %130 = fn () -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
    %126 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %127 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %128 = %126.1;
    %129 = %127.0;
    (%128, %129)
  };
  %130() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_5400() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float32], Tensor[(5460), float64]) {
  %131 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %132 = cast(meta[relay.Constant][3] /* ty=Tensor[(5460), float64] */, dtype="float64") /* ty=Tensor[(5460), float64] */;
  %133 = %131.0;
  %134 = cast(%133, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %135 = reshape(%132, newshape=[5460]) /* ty=Tensor[(5460), float64] */;
  %136 = reshape(%134, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %137 = @func_1852(%135, %136) /* ty=(Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) */;
  %138 = %137.1;
  (%133, %138, meta[relay.Constant][3] /* ty=Tensor[(5460), float64] */)
}

def @func_1734(%var_1732: Tensor[(14, 4, 1), int32], %var_1733: Tensor[(14, 4, 13), int32]) -> Tensor[(14, 4, 13), int16] {
  @func_1730(%var_1732, %var_1733) /* ty=Tensor[(14, 4, 13), int16] */
}

def @func_2138() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %143 = fn () -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
    %139 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %140 = @func_1944() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %141 = %139.0;
    %142 = %140.1;
    (%141, %142)
  };
  %143() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_2069(%var_2067: Tensor[(364), float64], %var_2068: Tensor[(1092), float64]) -> (Tensor[(364), bool], Tensor[(1, 364), float32], Tensor[(1092), float64]) {
  @func_2065(%var_2067, %var_2068) /* ty=(Tensor[(364), bool], Tensor[(1, 364), float32], Tensor[(1092), float64]) */
}

def @func_1252() -> (Tensor[(14, 13, 2), float64],) {
  @func_1250() /* ty=(Tensor[(14, 13, 2), float64],) */
}

def @func_3423(%var_3345: Tensor[(1092, 1), float64], %var_3378: Tensor[(375), int16]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 375), bool], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 364), bool]) {
  %144 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %145 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %146 = cast(%var_3378, dtype="int16") /* ty=Tensor[(375), int16] */;
  %147 = cast(%var_3378, dtype="int16") /* ty=Tensor[(375), int16] */;
  %148 = reshape(%146, newshape=[5, 5, 15]) /* ty=Tensor[(5, 5, 15), int16] */;
  %149 = reshape(%147, newshape=[5, 5, 15]) /* ty=Tensor[(5, 5, 15), int16] */;
  %150 = @func_2323(%148, %149) /* ty=(Tensor[(5, 5, 15), int16], Tensor[(4, 6, 5), uint64]) */;
  %151 = cast(%var_3378, dtype="bool") /* ty=Tensor[(375), bool] */;
  %152 = cast(%var_3345, dtype="bool") /* ty=Tensor[(1092, 1), bool] */;
  %153 = @func_1038() /* ty=(Tensor[(364), float64],) */;
  %154 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %155 = cast(%var_3345, dtype="bool") /* ty=Tensor[(1092, 1), bool] */;
  %156 = cast(meta[relay.Constant][4] /* ty=Tensor[(364), float64] */, dtype="bool") /* ty=Tensor[(364), bool] */;
  %157 = less(%155, %156) /* ty=Tensor[(1092, 364), bool] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(1092, 364), float64] */;
  %159 = sigmoid(%158) /* ty=Tensor[(1092, 364), float64] */;
  %160 = cast(meta[relay.Constant][4] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %161 = cast(%var_3345, dtype="float64") /* ty=Tensor[(1092, 1), float64] */;
  %162 = reshape(%160, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %163 = reshape(%161, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %164 = @func_2065(%162, %163) /* ty=(Tensor[(364), bool], Tensor[(1, 364), float32], Tensor[(1092), float64]) */;
  %165 = %164.0;
  %166 = cast(%159, dtype="bool") /* ty=Tensor[(1092, 364), bool] */;
  %167 = cast(%165, dtype="bool") /* ty=Tensor[(364), bool] */;
  %168 = %144.0;
  %169 = @func_2706() /* ty=Tensor[(4, 6, 5), uint64] */;
  %170 = %145.3;
  %171 = %150.1;
  %172 = greater_equal(%151, %152) /* ty=Tensor[(1092, 375), bool] */;
  %173 = %153.0;
  %174 = %154.0;
  %175 = greater_equal(%166, %167) /* ty=Tensor[(1092, 364), bool] */;
  (%168, %169, %170, %171, %172, %173, %174, %175)
}

def @func_5304(%var_5279: Tensor[(16, 1, 16), float32], %var_5287: Tensor[(16, 15, 16), float32]) -> (Tensor[(16, 1, 16), float32], Tensor[(16, 15, 16), bool], Tensor[(4, 6, 5), uint64]) {
  %176 = cast(%var_5279, dtype="float32") /* ty=Tensor[(16, 1, 16), float32] */;
  %177 = cast(%var_5279, dtype="bool") /* ty=Tensor[(16, 1, 16), bool] */;
  %178 = cast(%var_5287, dtype="bool") /* ty=Tensor[(16, 15, 16), bool] */;
  %179 = sinh(%176) /* ty=Tensor[(16, 1, 16), float32] */;
  %180 = less_equal(%177, %178) /* ty=Tensor[(16, 15, 16), bool] */;
  %181 = @func_1358() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%179, %180, %181)
}

def @func_244() -> (Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) {
  @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */
}

def @func_3925() -> Tensor[(4, 6, 5), uint64] {
  %182 = @func_2559() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %182.0
}

def @func_2859() -> (Tensor[(14, 13, 2), float64],) {
  %184 = fn () -> (Tensor[(14, 13, 2), float64],) {
    %183 = @func_2652() /* ty=Tensor[(14, 13, 2), float64] */;
    (%183,)
  };
  %184() /* ty=(Tensor[(14, 13, 2), float64],) */
}

def @func_5461() -> (Tensor[(1, 364), float64],) {
  %185 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %186 = %185.2;
  (%186,)
}

def @func_1661(%var_1660: Tensor[(8, 16, 4), float64]) -> (Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) {
  %192 = fn (%var_1645: Tensor[(8, 16, 4), float64]) -> (Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) {
    %187 = cast(-0.007361f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %188 = cast(%var_1645, dtype="float64") /* ty=Tensor[(8, 16, 4), float64] */;
    %189 = @func_1162() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %190 = divide(%187, %188) /* ty=Tensor[(8, 16, 4), float64] */;
    %191 = %189.0;
    (%190, %191)
  };
  %192(%var_1660) /* ty=(Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) */
}

def @func_538(%var_516: Tensor[(364), float64], %var_525: Tensor[(4, 6, 5), uint64]) -> (Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) {
  %193 = cast(%var_516, dtype="float64") /* ty=Tensor[(364), float64] */;
  %194 = reshape(%193, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %195 = @func_402() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %196 = %195.1;
  %197 = cast(%var_525, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %201 = @func_184(%194) /* ty=Tensor[(14, 13, 2), float64] */;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %203 = reshape(%202, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %204 = power(%199, %200) /* ty=Tensor[(4, 6, 5), float64] */;
  %205 = @func_184(%203) /* ty=Tensor[(14, 13, 2), float64] */;
  (%201, %var_516, %204, %205)
}

def @func_5458() -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), float64]) {
  %210 = fn () -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), float64]) {
    %206 = @func_4300() /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64]) */;
    %207 = @func_1448() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %208 = %206.0;
    %209 = %207.0;
    (%208, %209)
  };
  %210() /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), float64]) */
}

def @func_1219(%var_1206: Tensor[(2, 1, 13), float64]) -> (Tensor[(2, 1, 13), float32],) {
  %211 = cast(%var_1206, dtype="float64") /* ty=Tensor[(2, 1, 13), float64] */;
  %212 = sin(%211) /* ty=Tensor[(2, 1, 13), float64] */;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(2, 1, 13), float32] */;
  %214 = tan(%213) /* ty=Tensor[(2, 1, 13), float32] */;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(2, 1, 13), float32] */;
  %216 = exp(%215) /* ty=Tensor[(2, 1, 13), float32] */;
  (%216,)
}

def @func_5349() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  @func_5347() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */
}

def @func_5141() -> (Tensor[(4, 6, 5), uint64],) {
  %217 = @func_1102() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%217,)
}

def @func_654() -> (Tensor[(4, 6, 5), uint64],) {
  %218 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %219 = %218.1;
  (%219,)
}

def @func_5370() -> Tensor[(11, 1, 6), int16] {
  @func_5368() /* ty=Tensor[(11, 1, 6), int16] */
}

def @func_186(%var_185: Tensor[(14, 13, 2), float64]) -> Tensor[(14, 13, 2), float64] {
  %221 = fn (%var_177: Tensor[(14, 13, 2), float64]) -> Tensor[(14, 13, 2), float64] {
    %220 = cast(%var_177, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
    acosh(%220) /* ty=Tensor[(14, 13, 2), float64] */
  };
  %221(%var_185) /* ty=Tensor[(14, 13, 2), float64] */
}

def @func_2652() -> Tensor[(14, 13, 2), float64] {
  @func_613() /* ty=Tensor[(14, 13, 2), float64] */
}

def @func_2065(%var_2041: Tensor[(364), float64], %var_2062: Tensor[(1092), float64]) -> (Tensor[(364), bool], Tensor[(1, 364), float32], Tensor[(1092), float64]) {
  %222 = @func_1038() /* ty=(Tensor[(364), float64],) */;
  %223 = %222.0;
  %224 = cast(%var_2041, dtype="bool") /* ty=Tensor[(364), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(1), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(364), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?), bool] */;
  %228 = not_equal(%226, %227) /* ty=Tensor[(364), bool] */;
  %229 = cast(%228, dtype="bool") /* ty=Tensor[(364), bool] */;
  %230 = shape_of(%223, dtype="int32") /* ty=Tensor[(1), int32] */;
  %231 = cast(%223, dtype="bool") /* ty=Tensor[(364), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?), bool] */;
  %233 = cast(%var_2062, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %234 = reshape(%233, newshape=[3, 364]) /* ty=Tensor[(3, 364), float64] */;
  %235 = @func_1528(%234) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %236 = greater(%231, %232) /* ty=Tensor[(364), bool] */;
  %237 = %235.2;
  (%236, %237, %var_2062)
}

def @func_989(%var_987: Tensor[(4, 6, 5), uint64], %var_988: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) {
  @func_985(%var_987, %var_988) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) */
}

def @func_2681(%var_2679: int8, %var_2680: Tensor[(10, 14, 8), int8]) -> (Tensor[(10, 14, 8), int8],) {
  @func_2677(%var_2679, %var_2680) /* ty=(Tensor[(10, 14, 8), int8],) */
}

def @func_857() -> Tensor[(1, 364), float64] {
  @func_855() /* ty=Tensor[(1, 364), float64] */
}

def @func_5087() -> Tensor[(14, 13, 2), float64] {
  %238 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
  %238.0
}

def @func_4636() -> (Tensor[(4, 6, 5), float64], Tensor[(1, 364), float64]) {
  @func_4634() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(1, 364), float64]) */
}

def @func_1075(%var_1073: Tensor[(14, 13, 2), float64], %var_1074: Tensor[(15, 364), float64]) -> (Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) {
  @func_1071(%var_1073, %var_1074) /* ty=(Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) */
}

def @func_4568(%var_4567: Tensor[(6, 14, 8), float64]) -> (Tensor[(6, 14, 8), float64], Tensor[(6, 14, 8), float64]) {
  %246 = fn (%var_4543: Tensor[(6, 14, 8), float64]) -> (Tensor[(6, 14, 8), float64], Tensor[(6, 14, 8), float64]) {
    %239 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 14, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
    %240 = shape_of(%var_4543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %241 = cast(%var_4543, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %243 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 14, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 14, 8), float64] */;
    %244 = subtract(%241, %242) /* ty=Tensor[(6, 14, 8), float64] */;
    %245 = cos(%243) /* ty=Tensor[(6, 14, 8), float64] */;
    (%244, %245)
  };
  %246(%var_4567) /* ty=(Tensor[(6, 14, 8), float64], Tensor[(6, 14, 8), float64]) */
}

def @func_3661(%var_3659: Tensor[(12, 6, 13), uint64], %var_3660: Tensor[(12, 6, 13), uint64]) -> Tensor[(12, 6, 13), float64] {
  @func_3657(%var_3659, %var_3660) /* ty=Tensor[(12, 6, 13), float64] */
}

def @func_1531(%var_1529: Tensor[(3, 364), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  @func_1528(%var_1529) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */
}

def @func_4302() -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64]) {
  @func_4300() /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64]) */
}

def @func_2552(%var_2551: Tensor[(4, 6, 5), uint64]) -> (Tensor[(4, 6, 5), bool], Tensor[(14, 13, 2), float64]) {
  %256 = fn (%var_2515: Tensor[(4, 6, 5), uint64]) -> (Tensor[(4, 6, 5), bool], Tensor[(14, 13, 2), float64]) {
    %247 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %248 = %247.3;
    %249 = cast(%var_2515, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
    %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %251 = cast(%248, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %253 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
    %254 = not_equal(%251, %252) /* ty=Tensor[(4, 6, 5), bool] */;
    %255 = %253.0;
    (%254, %255)
  };
  %256(%var_2551) /* ty=(Tensor[(4, 6, 5), bool], Tensor[(14, 13, 2), float64]) */
}

def @func_242() -> (Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) {
  %257 = cast(meta[relay.Constant][6] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %258 = reshape(%257, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %259 = @func_184(%258) /* ty=Tensor[(14, 13, 2), float64] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %261 = reshape(%260, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %262 = cast(%259, dtype="float32") /* ty=Tensor[(14, 13, 2), float32] */;
  %263 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %264 = @func_184(%261) /* ty=Tensor[(14, 13, 2), float64] */;
  %265 = log10(%262) /* ty=Tensor[(14, 13, 2), float32] */;
  %266 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%263, meta[relay.Constant][6] /* ty=Tensor[(364), float64] */, %264, %265, %266)
}

def @func_3169(%var_3167: Tensor[(364), float64], %var_3168: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(364), uint64], Tensor[(4, 6, 5), int16], Tensor[(364), float32]) {
  @func_3165(%var_3167, %var_3168) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(364), uint64], Tensor[(4, 6, 5), int16], Tensor[(364), float32]) */
}

def @func_3321() -> Tensor[(4, 6, 5), float32] {
  %267 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %268 = %267.0;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  %270 = log(%269) /* ty=Tensor[(4, 6, 5), float32] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(4, 6, 5), float32] */;
  exp(%271) /* ty=Tensor[(4, 6, 5), float32] */
}

def @func_2361(%var_2350: Tensor[(16, 6, 1), float32]) -> (Tensor[(16, 6, 1), float32],) {
  %272 = cast(%var_2350, dtype="float32") /* ty=Tensor[(16, 6, 1), float32] */;
  %273 = atanh(%272) /* ty=Tensor[(16, 6, 1), float32] */;
  (%273,)
}

def @func_5463() -> (Tensor[(1, 364), float64],) {
  @func_5461() /* ty=(Tensor[(1, 364), float64],) */
}

def @func_3101(%var_3099: Tensor[(11, 16, 16), int64], %var_3100: Tensor[(11, 16, 16), int64]) -> (Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(4, 6, 5), uint64]) {
  %290 = fn (%var_3068: Tensor[(11, 16, 16), int64], %var_3085: Tensor[(11, 16, 16), int64]) -> (Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(4, 6, 5), uint64]) {
    %274 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 16), int64] */, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %275 = shape_of(%var_3068, dtype="int32") /* ty=Tensor[(3), int32] */;
    %276 = cast(%var_3068, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %278 = cast(%var_3085, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %279 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 16, 16), int64] */, dtype="bool") /* ty=Tensor[(11, 16, 16), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %282 = cast(%var_3068, dtype="float32") /* ty=Tensor[(11, 16, 16), float32] */;
    %283 = cosh(%282) /* ty=Tensor[(11, 16, 16), float32] */;
    %284 = cast(%283, dtype="float64") /* ty=Tensor[(11, 16, 16), float64] */;
    %285 = @func_1448() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %286 = greater_equal(%276, %277) /* ty=Tensor[(11, 16, 16), bool] */;
    %287 = not_equal(%280, %281) /* ty=Tensor[(11, 16, 16), bool] */;
    %288 = exp(%284) /* ty=Tensor[(11, 16, 16), float64] */;
    %289 = %285.1;
    (%286, %287, %288, %289)
  };
  %290(%var_3099, %var_3100) /* ty=(Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), bool], Tensor[(11, 16, 16), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_3780(%var_3777: float32, %var_3778: Tensor[(3, 12, 15), float32], %var_3779: Tensor[(3, 12, 15), float32]) -> Tensor[(3, 12, 15), uint32] {
  %298 = fn (%var_3754: float32, %var_3755: Tensor[(3, 12, 15), float32], %var_3762: Tensor[(3, 12, 15), float32]) -> Tensor[(3, 12, 15), uint32] {
    %291 = cast(%var_3754, dtype="float32") /* ty=float32 */;
    %292 = cast(%var_3755, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
    %293 = minimum(%291, %292) /* ty=Tensor[(3, 12, 15), float32] */;
    %294 = cast(%var_3762, dtype="uint32") /* ty=Tensor[(3, 12, 15), uint32] */;
    %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%293, dtype="uint32") /* ty=Tensor[(3, 12, 15), uint32] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    add(%296, %297) /* ty=Tensor[(3, 12, 15), uint32] */
  };
  %298(%var_3777, %var_3778, %var_3779) /* ty=Tensor[(3, 12, 15), uint32] */
}

def @func_2982() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) {
  @func_2980() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) */
}

def @func_5308(%var_5306: Tensor[(16, 1, 16), float32], %var_5307: Tensor[(16, 15, 16), float32]) -> (Tensor[(16, 1, 16), float32], Tensor[(16, 15, 16), bool], Tensor[(4, 6, 5), uint64]) {
  @func_5304(%var_5306, %var_5307) /* ty=(Tensor[(16, 1, 16), float32], Tensor[(16, 15, 16), bool], Tensor[(4, 6, 5), uint64]) */
}

def @func_4273() -> (Tensor[(4, 6, 5), uint64],) {
  %301 = fn () -> (Tensor[(4, 6, 5), uint64],) {
    %299 = @func_4155() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %300 = %299.0;
    (%300,)
  };
  %301() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_474() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_3165(%var_3134: Tensor[(364), float64], %var_3140: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(364), uint64], Tensor[(4, 6, 5), int16], Tensor[(364), float32]) {
  %302 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %303 = cast(%var_3140, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %304 = shape_of(%var_3134, dtype="int32") /* ty=Tensor[(1), int32] */;
  %305 = cast(%var_3134, dtype="uint64") /* ty=Tensor[(364), uint64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %307 = %302.0;
  %308 = cast(%307, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %309 = reshape(%308, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %310 = @func_2611(%309) /* ty=(Tensor[(4, 6, 5), int16],) */;
  %311 = cast(meta[relay.Constant][8] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %312 = reshape(%311, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %313 = @func_2309(%312) /* ty=(Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) */;
  %314 = %313.2;
  %315 = cast(%var_3134, dtype="bool") /* ty=Tensor[(364), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(1), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(364), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?), bool] */;
  %319 = greater_equal(%317, %318) /* ty=Tensor[(364), bool] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(364), float32] */;
  %321 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %322 = right_shift(%305, %306) /* ty=Tensor[(364), uint64] */;
  %323 = %310.0;
  %324 = asin(%320) /* ty=Tensor[(364), float32] */;
  (%307, %321, meta[relay.Constant][8] /* ty=Tensor[(364), float64] */, %322, %323, %324)
}

def @func_4542() -> (Tensor[(4, 6, 5), uint64],) {
  @func_4540() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_1250() -> (Tensor[(14, 13, 2), float64],) {
  %325 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
  (%325,)
}

def @func_5116(%var_5114: Tensor[(14, 1, 10), bool], %var_5115: Tensor[(14, 12, 10), bool]) -> (Tensor[(14, 12, 10), bool], Tensor[(14, 1, 10), float32]) {
  @func_5112(%var_5114, %var_5115) /* ty=(Tensor[(14, 12, 10), bool], Tensor[(14, 1, 10), float32]) */
}

def @func_5011(%var_4987: Tensor[(5460), float64]) -> (Tensor[(5460), float64], Tensor[(?, 364), bool], Tensor[(4, 6, 5), uint64], Tensor[(512), float64], Tensor[(14, 13, 2), int16]) {
  %326 = @func_2980() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) */;
  %327 = %326.2;
  %328 = cast(%327, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %329 = cast(%var_4987, dtype="float64") /* ty=Tensor[(5460), float64] */;
  %330 = reshape(%328, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %331 = reshape(%329, newshape=[15, 364]) /* ty=Tensor[(15, 364), float64] */;
  %332 = @func_1071(%330, %331) /* ty=(Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) */;
  %333 = %332.1;
  %334 = cast(%333, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
  %335 = shape_of(%327, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%327, dtype="bool") /* ty=Tensor[(1, 364), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %338 = cast(meta[relay.Constant][9] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %339 = reshape(%338, newshape=[512]) /* ty=Tensor[(512), float64] */;
  %340 = @func_3470(%339) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(8, 16, 4), float64], Tensor[(512), float64], Tensor[(?, 364), uint8]) */;
  %341 = cast(%327, dtype="int16") /* ty=Tensor[(1, 364), int16] */;
  %342 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%333, dtype="int16") /* ty=Tensor[(14, 13, 2), int16] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %345 = greater(%336, %337) /* ty=Tensor[(?, 364), bool] */;
  %346 = %340.0;
  %347 = bitwise_xor(%343, %344) /* ty=Tensor[(14, 13, 2), int16] */;
  (%var_4987, %345, %346, meta[relay.Constant][9] /* ty=Tensor[(512), float64] */, %347)
}

def @func_674() -> (Tensor[(4, 6, 5), uint64],) {
  %348 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %349 = %348.0;
  (%349,)
}

def @func_3973() -> (Tensor[(4, 6, 5), uint64],) {
  %350 = @func_2706() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%350,)
}

def @func_4617() -> Tensor[(11, 1, 6), int16] {
  @func_4615() /* ty=Tensor[(11, 1, 6), int16] */
}

def @func_1616(%var_1615: Tensor[(182, 2), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), int16], Tensor[(182, 2), float64]) {
  %359 = fn (%var_1600: Tensor[(182, 2), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), int16], Tensor[(182, 2), float64]) {
    %351 = @func_1317() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
    %352 = %351.0;
    %353 = cast(%352, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
    %354 = cast(%var_1600, dtype="float64") /* ty=Tensor[(182, 2), float64] */;
    %355 = reshape(%353, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
    %356 = reshape(%354, newshape=[364]) /* ty=Tensor[(364), float64] */;
    %357 = @func_985(%355, %356) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) */;
    %358 = %357.3;
    (%352, %358, %var_1600)
  };
  %359(%var_1615) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), int16], Tensor[(182, 2), float64]) */
}

def @func_3323() -> Tensor[(4, 6, 5), float32] {
  @func_3321() /* ty=Tensor[(4, 6, 5), float32] */
}

def @func_5014(%var_5012: Tensor[(5460), float64]) -> (Tensor[(5460), float64], Tensor[(?, 364), bool], Tensor[(4, 6, 5), uint64], Tensor[(512), float64], Tensor[(14, 13, 2), int16]) {
  @func_5011(%var_5012) /* ty=(Tensor[(5460), float64], Tensor[(?, 364), bool], Tensor[(4, 6, 5), uint64], Tensor[(512), float64], Tensor[(14, 13, 2), int16]) */
}

def @func_4188(%var_4187: Tensor[(3, 16, 4), uint64]) -> (Tensor[(3, 16, 4), uint64], Tensor[(4, 6, 5), uint64], Tensor[(3, 16, 4), float32]) {
  %367 = fn (%var_4174: Tensor[(3, 16, 4), uint64]) -> (Tensor[(3, 16, 4), uint64], Tensor[(4, 6, 5), uint64], Tensor[(3, 16, 4), float32]) {
    %360 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %361 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(3, 16, 4), uint64] */;
    %362 = @func_707() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %363 = cast(%var_4174, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
    %364 = maximum(%360, %361) /* ty=Tensor[(3, 16, 4), uint64] */;
    %365 = %362.0;
    %366 = sqrt(%363) /* ty=Tensor[(3, 16, 4), float32] */;
    (%364, %365, %366)
  };
  %367(%var_4187) /* ty=(Tensor[(3, 16, 4), uint64], Tensor[(4, 6, 5), uint64], Tensor[(3, 16, 4), float32]) */
}

def @func_5089() -> Tensor[(14, 13, 2), float64] {
  @func_5087() /* ty=Tensor[(14, 13, 2), float64] */
}

def @func_2444() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
  %368 = @func_1250() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %369 = @func_2011() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %370 = %368.0;
  %371 = %369.0;
  (%370, %371)
}

def @func_5112(%var_5095: Tensor[(14, 1, 10), bool], %var_5096: Tensor[(14, 12, 10), bool]) -> (Tensor[(14, 12, 10), bool], Tensor[(14, 1, 10), float32]) {
  %372 = cast(%var_5095, dtype="bool") /* ty=Tensor[(14, 1, 10), bool] */;
  %373 = cast(%var_5096, dtype="bool") /* ty=Tensor[(14, 12, 10), bool] */;
  %374 = cast(%var_5095, dtype="float32") /* ty=Tensor[(14, 1, 10), float32] */;
  %375 = logical_or(%372, %373) /* ty=Tensor[(14, 12, 10), bool] */;
  %376 = acos(%374) /* ty=Tensor[(14, 1, 10), float32] */;
  (%375, %376)
}

def @func_336() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) {
  %377 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %378 = cast(meta[relay.Constant][11] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %379 = reshape(%378, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %380 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %382 = %377.0;
  %383 = @func_184(%379) /* ty=Tensor[(14, 13, 2), float64] */;
  %384 = acosh(%381) /* ty=Tensor[(4, 6, 5), float64] */;
  (%382, %383, meta[relay.Constant][11] /* ty=Tensor[(364), float64] */, %384)
}

def @func_764() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) {
  %385 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %386 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 364), float64] */, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %387 = reshape(%386, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %388 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %389 = %385.3;
  %390 = @func_184(%387) /* ty=Tensor[(14, 13, 2), float64] */;
  %391 = %388.1;
  (%389, %390, meta[relay.Constant][12] /* ty=Tensor[(1, 364), float64] */, %391)
}

def @func_4615() -> Tensor[(11, 1, 6), int16] {
  %392 = cast(meta[relay.Constant][13] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %393 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 1, 6), int16] */, dtype="int16") /* ty=Tensor[(11, 1, 6), int16] */;
  bitwise_xor(%392, %393) /* ty=Tensor[(11, 1, 6), int16] */
}

def @func_472() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %394 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %395 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %396 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %397 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %398 = %394.0;
  %399 = %395.3;
  %400 = %396.0;
  %401 = %397.4;
  (%398, %399, %400, %401)
}

def @func_338() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) {
  @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */
}

def @func_725(%var_723: Tensor[(10, 7, 8), int64], %var_724: Tensor[(10, 7, 8), int64]) -> Tensor[(10, 7, 8), int64] {
  %406 = fn (%var_714: Tensor[(10, 7, 8), int64], %var_715: Tensor[(10, 7, 8), int64]) -> Tensor[(10, 7, 8), int64] {
    %402 = cast(%var_715, dtype="int64") /* ty=Tensor[(10, 7, 8), int64] */;
    %403 = shape_of(%var_714, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%var_714, dtype="int64") /* ty=Tensor[(10, 7, 8), int64] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    minimum(%404, %405) /* ty=Tensor[(10, 7, 8), int64] */
  };
  %406(%var_723, %var_724) /* ty=Tensor[(10, 7, 8), int64] */
}

def @func_2613(%var_2612: Tensor[(4, 6, 5), uint64]) -> (Tensor[(4, 6, 5), int16],) {
  %419 = fn (%var_2595: Tensor[(4, 6, 5), uint64]) -> (Tensor[(4, 6, 5), int16],) {
    %407 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %408 = %407.0;
    %409 = cast(%var_2595, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
    %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %411 = cast(%408, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
    %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %413 = logical_or(%411, %412) /* ty=Tensor[(4, 6, 5), bool] */;
    %414 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 6, 5), bool] */, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
    %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%413, dtype="int16") /* ty=Tensor[(4, 6, 5), int16] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %418 = minimum(%416, %417) /* ty=Tensor[(4, 6, 5), int16] */;
    (%418,)
  };
  %419(%var_2612) /* ty=(Tensor[(4, 6, 5), int16],) */
}

def @func_855() -> Tensor[(1, 364), float64] {
  %420 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %420.2
}

def @func_1133(%var_1131: Tensor[(14, 13, 2), float64], %var_1132: Tensor[(120), uint64]) -> (Tensor[(14, 13, 2), bool], Tensor[(14, 13, 2), float64], Tensor[(120), uint64]) {
  %433 = fn (%var_1120: Tensor[(14, 13, 2), float64], %var_1127: Tensor[(120), uint64]) -> (Tensor[(14, 13, 2), bool], Tensor[(14, 13, 2), float64], Tensor[(120), uint64]) {
    %421 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
    %422 = cast(%var_1120, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
    %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(%421, dtype="bool") /* ty=Tensor[(14, 13, 2), bool] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %426 = cast(%421, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
    %427 = cast(%var_1127, dtype="uint64") /* ty=Tensor[(120), uint64] */;
    %428 = reshape(%426, newshape=[364]) /* ty=Tensor[(364), float64] */;
    %429 = reshape(%427, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
    %430 = @func_538(%428, %429) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) */;
    %431 = less(%424, %425) /* ty=Tensor[(14, 13, 2), bool] */;
    %432 = %430.3;
    (%431, %432, %var_1127)
  };
  %433(%var_1131, %var_1132) /* ty=(Tensor[(14, 13, 2), bool], Tensor[(14, 13, 2), float64], Tensor[(120), uint64]) */
}

def @func_2312(%var_2310: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) {
  @func_2309(%var_2310) /* ty=(Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) */
}

def @func_2767(%var_2764: Tensor[(1, 4, 16), float64], %var_2765: Tensor[(5, 4, 16), float64], %var_2766: Tensor[(5, 4, 16), float32]) -> (Tensor[(4, 6, 5), uint64], Tensor[(5, 4, 16), uint8], Tensor[(5, 4, 16), int64]) {
  %455 = fn (%var_2711: Tensor[(1, 4, 16), float64], %var_2712: Tensor[(5, 4, 16), float64], %var_2749: Tensor[(5, 4, 16), float32]) -> (Tensor[(4, 6, 5), uint64], Tensor[(5, 4, 16), uint8], Tensor[(5, 4, 16), int64]) {
    %434 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %435 = cast(%var_2712, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
    %436 = erf(%435) /* ty=Tensor[(5, 4, 16), float64] */;
    %437 = cast(%436, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
    %438 = exp(%437) /* ty=Tensor[(5, 4, 16), float64] */;
    %439 = cast(%438, dtype="float32") /* ty=Tensor[(5, 4, 16), float32] */;
    %440 = atanh(%439) /* ty=Tensor[(5, 4, 16), float32] */;
    %441 = cast(%var_2749, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
    %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%440, dtype="uint8") /* ty=Tensor[(5, 4, 16), uint8] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %445 = cast(%var_2711, dtype="float64") /* ty=Tensor[(1, 4, 16), float64] */;
    %446 = cast(%var_2712, dtype="float64") /* ty=Tensor[(5, 4, 16), float64] */;
    %447 = divide(%445, %446) /* ty=Tensor[(5, 4, 16), float64] */;
    %448 = cast(%447, dtype="int64") /* ty=Tensor[(5, 4, 16), int64] */;
    %449 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %450 = cast(%438, dtype="int64") /* ty=Tensor[(5, 4, 16), int64] */;
    %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %452 = %434.0;
    %453 = multiply(%443, %444) /* ty=Tensor[(5, 4, 16), uint8] */;
    %454 = minimum(%450, %451) /* ty=Tensor[(5, 4, 16), int64] */;
    (%452, %453, %454)
  };
  %455(%var_2764, %var_2765, %var_2766) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(5, 4, 16), uint8], Tensor[(5, 4, 16), int64]) */
}

def @func_4010(%var_4008: int32, %var_4009: Tensor[(1, 6), int32]) -> Tensor[(1, 6), int32] {
  @func_4006(%var_4008, %var_4009) /* ty=Tensor[(1, 6), int32] */
}

def @func_4491() -> Tensor[(4, 6, 5), float32] {
  %456 = @func_4027() /* ty=(Tensor[(4, 6, 5), float32],) */;
  %456.0
}

def @func_542(%var_540: Tensor[(364), float64], %var_541: Tensor[(4, 6, 5), uint64]) -> (Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) {
  @func_538(%var_540, %var_541) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) */
}

def @func_579() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_1946() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  @func_1944() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_577() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %457 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %458 = %457.1;
  %459 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%458, %459)
}

def @func_2446() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) {
  @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_656() -> (Tensor[(4, 6, 5), uint64],) {
  @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_1039() -> (Tensor[(364), float64],) {
  %462 = fn () -> (Tensor[(364), float64],) {
    %460 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
    %461 = %460.2;
    (%461,)
  };
  %462() /* ty=(Tensor[(364), float64],) */
}

def @func_2323(%var_2314: Tensor[(5, 5, 15), int16], %var_2315: Tensor[(5, 5, 15), int16]) -> (Tensor[(5, 5, 15), int16], Tensor[(4, 6, 5), uint64]) {
  %463 = cast(%var_2315, dtype="int16") /* ty=Tensor[(5, 5, 15), int16] */;
  %464 = shape_of(%var_2314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_2314, dtype="int16") /* ty=Tensor[(5, 5, 15), int16] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %467 = @func_1317() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %468 = bitwise_xor(%465, %466) /* ty=Tensor[(5, 5, 15), int16] */;
  %469 = %467.0;
  (%468, %469)
}

def @func_1162() -> (Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
  %470 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %471 = @func_613() /* ty=Tensor[(14, 13, 2), float64] */;
  %472 = %470.3;
  %473 = @func_1102() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%471, %472, %473)
}

def @func_1449() -> (Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
  %484 = fn () -> (Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) {
    %474 = @func_1102() /* ty=Tensor[(4, 6, 5), uint64] */;
    %475 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %476 = %475.0;
    %477 = cast(%476, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
    %478 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%474, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %481 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %482 = mod(%479, %480) /* ty=Tensor[(4, 6, 5), float64] */;
    %483 = %481.2;
    (%482, %483)
  };
  %484() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_3927() -> Tensor[(4, 6, 5), uint64] {
  @func_3925() /* ty=Tensor[(4, 6, 5), uint64] */
}

def @func_5143() -> (Tensor[(4, 6, 5), uint64],) {
  @func_5141() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_2560() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %489 = fn () -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
    %485 = @func_2086() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %486 = @func_707() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %487 = %485.0;
    %488 = %486.0;
    (%487, %488)
  };
  %489() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_2327(%var_2325: Tensor[(5, 5, 15), int16], %var_2326: Tensor[(5, 5, 15), int16]) -> (Tensor[(5, 5, 15), int16], Tensor[(4, 6, 5), uint64]) {
  @func_2323(%var_2325, %var_2326) /* ty=(Tensor[(5, 5, 15), int16], Tensor[(4, 6, 5), uint64]) */
}

def @func_4343(%var_4341: Tensor[(1092), float64]) -> (Tensor[(1, 364), float64], Tensor[(4, 6, 5), float64], Tensor[(120), uint64], Tensor[(14, 13, 2), float64], Tensor[(512), float64], Tensor[(3, 364), bool], Tensor[(1092), float64]) {
  @func_4340(%var_4341) /* ty=(Tensor[(1, 364), float64], Tensor[(4, 6, 5), float64], Tensor[(120), uint64], Tensor[(14, 13, 2), float64], Tensor[(512), float64], Tensor[(3, 364), bool], Tensor[(1092), float64]) */
}

def @func_4300() -> (Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64]) {
  %490 = @func_4027() /* ty=(Tensor[(4, 6, 5), float32],) */;
  %491 = @func_2444() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), uint64]) */;
  %492 = %490.0;
  %493 = %491.1;
  (%492, %493)
}

def @func_3472(%var_3471: Tensor[(512), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(8, 16, 4), float64], Tensor[(512), float64], Tensor[(?, 364), uint8]) {
  %511 = fn (%var_3450: Tensor[(512), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(8, 16, 4), float64], Tensor[(512), float64], Tensor[(?, 364), uint8]) {
    %494 = @func_674() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %495 = cast(%var_3450, dtype="float64") /* ty=Tensor[(512), float64] */;
    %496 = reshape(%495, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float64] */;
    %497 = @func_1659(%496) /* ty=(Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) */;
    %498 = @func_2980() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) */;
    %499 = %498.2;
    %500 = cast(%499, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
    %501 = acosh(%500) /* ty=Tensor[(1, 364), float32] */;
    %502 = cast(%501, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
    %503 = tan(%502) /* ty=Tensor[(1, 364), float32] */;
    %504 = cast(%503, dtype="uint8") /* ty=Tensor[(1, 364), uint8] */;
    %505 = shape_of(%501, dtype="int32") /* ty=Tensor[(2), int32] */;
    %506 = cast(%501, dtype="uint8") /* ty=Tensor[(1, 364), uint8] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %508 = %494.0;
    %509 = %497.0;
    %510 = add(%506, %507) /* ty=Tensor[(?, 364), uint8] */;
    (%508, %509, %var_3450, %510)
  };
  %511(%var_3471) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(8, 16, 4), float64], Tensor[(512), float64], Tensor[(?, 364), uint8]) */
}

def @func_4634() -> (Tensor[(4, 6, 5), float64], Tensor[(1, 364), float64]) {
  %512 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %513 = %512.3;
  %514 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  (%513, %514)
}

def @func_3531() -> (Tensor[(4, 6, 5), bool],) {
  @func_3529() /* ty=(Tensor[(4, 6, 5), bool],) */
}

def @func_1730(%var_1699: Tensor[(14, 4, 1), int32], %var_1700: Tensor[(14, 4, 13), int32]) -> Tensor[(14, 4, 13), int16] {
  %515 = cast(%var_1699, dtype="int32") /* ty=Tensor[(14, 4, 1), int32] */;
  %516 = cast(%var_1700, dtype="int32") /* ty=Tensor[(14, 4, 13), int32] */;
  %517 = bitwise_and(%515, %516) /* ty=Tensor[(14, 4, 13), int32] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(14, 4, 13), float32] */;
  %519 = atanh(%518) /* ty=Tensor[(14, 4, 13), float32] */;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(14, 4, 13), float32] */;
  %521 = sqrt(%520) /* ty=Tensor[(14, 4, 13), float32] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(14, 4, 13), float64] */;
  %523 = cos(%522) /* ty=Tensor[(14, 4, 13), float64] */;
  %524 = cast(%517, dtype="int16") /* ty=Tensor[(14, 4, 13), int16] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="int16") /* ty=Tensor[(14, 4, 13), int16] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%526, %527) /* ty=Tensor[(14, 4, 13), int16] */
}

def @func_2677(%var_2666: int8, %var_2667: Tensor[(10, 14, 8), int8]) -> (Tensor[(10, 14, 8), int8],) {
  %528 = cast(%var_2666, dtype="int8") /* ty=int8 */;
  %529 = cast(%var_2667, dtype="int8") /* ty=Tensor[(10, 14, 8), int8] */;
  %530 = bitwise_or(%528, %529) /* ty=Tensor[(10, 14, 8), int8] */;
  (%530,)
}

def @func_2911(%var_2901: Tensor[(364), float64]) -> (Tensor[(10, 2, 15), float64], Tensor[(364), float64], Tensor[(364), float64], Tensor[(1, 364), float64]) {
  %531 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %532 = cast(%var_2901, dtype="float64") /* ty=Tensor[(364), float64] */;
  %533 = reshape(%532, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %534 = @func_2309(%533) /* ty=(Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) */;
  %535 = log10(%531) /* ty=Tensor[(10, 2, 15), float64] */;
  %536 = %534.2;
  %537 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  (%535, %536, %var_2901, %537)
}

def @func_4231(%var_4220: Tensor[(8, 3, 2), uint8]) -> Tensor[(8, 3, 2), uint8] {
  %538 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 3, 2), uint8] */, dtype="uint8") /* ty=Tensor[(8, 3, 2), uint8] */;
  %539 = shape_of(%var_4220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_4220, dtype="uint8") /* ty=Tensor[(8, 3, 2), uint8] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%540, %541) /* ty=Tensor[(8, 3, 2), uint8] */
}

def @func_3899(%var_3886: Tensor[(15, 16, 11), int32], %var_3887: Tensor[(15, 16, 11), int32]) -> (Tensor[(15, 16, 11), bool],) {
  %542 = cast(%var_3887, dtype="bool") /* ty=Tensor[(15, 16, 11), bool] */;
  %543 = shape_of(%var_3886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%var_3886, dtype="bool") /* ty=Tensor[(15, 16, 11), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %546 = not_equal(%544, %545) /* ty=Tensor[(15, 16, 11), bool] */;
  (%546,)
}

def @func_4740(%var_4738: Tensor[(1, 6, 12), float32], %var_4739: Tensor[(420), float64]) -> (Tensor[(1, 6, 12), float32], Tensor[(2, 14, 15), bool], Tensor[(30), float64], Tensor[(420), float64], Tensor[(4, 6, 5), uint64]) {
  @func_4736(%var_4738, %var_4739) /* ty=(Tensor[(1, 6, 12), float32], Tensor[(2, 14, 15), bool], Tensor[(30), float64], Tensor[(420), float64], Tensor[(4, 6, 5), uint64]) */
}

def @main(%var_5516: Tensor[(11, 4, 16), int64], %var_5517: Tensor[(11, 4, 16), int64], %var_5581: Tensor[(15, 364), float64]) -> (Tensor[(1, 364), float64], Tensor[(1408), float64], Tensor[(364), float64], Tensor[(4, 6, 5), bool], Tensor[(11, 4, 16), bool], Tensor[(15, 364), bool], Tensor[(15, 364), float64], Tensor[(11, 4, 16), float64]) {
  %547 = cast(meta[relay.Constant][18] /* ty=Tensor[(1408), float64] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %548 = reshape(%547, newshape=[2, 704]) /* ty=Tensor[(2, 704), float64] */;
  %549 = @func_5233(%548) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(2, 704), float64], Tensor[(3, 364), bool], Tensor[(7, 156), float64], Tensor[(1, 364), float64]) */;
  %550 = cast(meta[relay.Constant][18] /* ty=Tensor[(1408), float64] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %551 = reshape(%550, newshape=[2, 704]) /* ty=Tensor[(2, 704), float64] */;
  %552 = @func_5231(%551) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(2, 704), float64], Tensor[(3, 364), bool], Tensor[(7, 156), float64], Tensor[(1, 364), float64]) */;
  %553 = %552.6;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %555 = cast(%553, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %556 = reshape(%554, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %557 = reshape(%555, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %558 = @func_3169(%556, %557) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(364), uint64], Tensor[(4, 6, 5), int16], Tensor[(364), float32]) */;
  %559 = @func_3531() /* ty=(Tensor[(4, 6, 5), bool],) */;
  %560 = cast(%var_5516, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %561 = asin(%560) /* ty=Tensor[(11, 4, 16), float64] */;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %563 = atanh(%562) /* ty=Tensor[(11, 4, 16), float64] */;
  %564 = cast(%var_5517, dtype="int64") /* ty=Tensor[(11, 4, 16), int64] */;
  %565 = shape_of(%var_5516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_5516, dtype="int64") /* ty=Tensor[(11, 4, 16), int64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %568 = bitwise_xor(%566, %567) /* ty=Tensor[(11, 4, 16), int64] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %570 = tan(%569) /* ty=Tensor[(11, 4, 16), float64] */;
  %571 = cast(%570, dtype="bool") /* ty=Tensor[(11, 4, 16), bool] */;
  %572 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%563, dtype="bool") /* ty=Tensor[(11, 4, 16), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %575 = cast(%553, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %576 = cast(%553, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %577 = reshape(%575, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %578 = reshape(%576, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %579 = @func_3165(%577, %578) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(364), uint64], Tensor[(4, 6, 5), int16], Tensor[(364), float32]) */;
  %580 = %579.2;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(364), float64] */;
  %582 = cast(%var_5581, dtype="float64") /* ty=Tensor[(15, 364), float64] */;
  %583 = reshape(%581, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %584 = reshape(%582, newshape=[15, 364]) /* ty=Tensor[(15, 364), float64] */;
  %585 = @func_1075(%583, %584) /* ty=(Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) */;
  %586 = cast(%561, dtype="float64") /* ty=Tensor[(11, 4, 16), float64] */;
  %587 = %549.6;
  %588 = %558.2;
  %589 = %559.0;
  %590 = greater_equal(%573, %574) /* ty=Tensor[(11, 4, 16), bool] */;
  %591 = %585.3;
  %592 = rsqrt(%586) /* ty=Tensor[(11, 4, 16), float64] */;
  (%587, meta[relay.Constant][18] /* ty=Tensor[(1408), float64] */, %588, %589, %590, %591, %var_5581, %592)
}

def @func_5261() -> Tensor[(1, 364), float64] {
  %594 = fn () -> Tensor[(1, 364), float64] {
    %593 = @func_4818() /* ty=(Tensor[(1, 364), float64],) */;
    %593.0
  };
  %594() /* ty=Tensor[(1, 364), float64] */
}

def @func_4493() -> Tensor[(4, 6, 5), float32] {
  @func_4491() /* ty=Tensor[(4, 6, 5), float32] */
}

def @func_4819() -> (Tensor[(1, 364), float64],) {
  %596 = fn () -> (Tensor[(1, 364), float64],) {
    %595 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
    (%595,)
  };
  %596() /* ty=(Tensor[(1, 364), float64],) */
}

def @func_4591() -> (Tensor[(14, 13, 2), float64],) {
  @func_4589() /* ty=(Tensor[(14, 13, 2), float64],) */
}

def @func_3739() -> (Tensor[(4, 6, 5), float64],) {
  %599 = fn () -> (Tensor[(4, 6, 5), float64],) {
    %597 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %598 = %597.0;
    (%598,)
  };
  %599() /* ty=(Tensor[(4, 6, 5), float64],) */
}

def @func_3057(%var_3055: Tensor[(2, 1, 15), float64], %var_3056: Tensor[(2, 14, 15), float64]) -> (Tensor[(2, 14, 15), float64], Tensor[(2, 14, 15), bool]) {
  %613 = fn (%var_3027: Tensor[(2, 1, 15), float64], %var_3028: Tensor[(2, 14, 15), float64]) -> (Tensor[(2, 14, 15), float64], Tensor[(2, 14, 15), bool]) {
    %600 = cast(%var_3027, dtype="float64") /* ty=Tensor[(2, 1, 15), float64] */;
    %601 = cast(%var_3028, dtype="float64") /* ty=Tensor[(2, 14, 15), float64] */;
    %602 = cast(%var_3028, dtype="float64") /* ty=Tensor[(2, 14, 15), float64] */;
    %603 = tan(%602) /* ty=Tensor[(2, 14, 15), float64] */;
    %604 = cast(%var_3028, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
    %605 = cast(%var_3027, dtype="bool") /* ty=Tensor[(2, 1, 15), bool] */;
    %606 = logical_and(%604, %605) /* ty=Tensor[(2, 14, 15), bool] */;
    %607 = cast(%606, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
    %608 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %609 = cast(%603, dtype="bool") /* ty=Tensor[(2, 14, 15), bool] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %611 = mod(%600, %601) /* ty=Tensor[(2, 14, 15), float64] */;
    %612 = less(%609, %610) /* ty=Tensor[(2, 14, 15), bool] */;
    (%611, %612)
  };
  %613(%var_3055, %var_3056) /* ty=(Tensor[(2, 14, 15), float64], Tensor[(2, 14, 15), bool]) */
}

def @func_615() -> Tensor[(14, 13, 2), float64] {
  @func_613() /* ty=Tensor[(14, 13, 2), float64] */
}

def @func_403() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %617 = fn () -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
    %614 = @func_380() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %615 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
    %616 = %614.1;
    (%615, %616)
  };
  %617() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_1222(%var_1220: Tensor[(2, 1, 13), float64]) -> (Tensor[(2, 1, 13), float32],) {
  @func_1219(%var_1220) /* ty=(Tensor[(2, 1, 13), float32],) */
}

def @func_1334() -> (Tensor[(4, 6, 5), uint64],) {
  %618 = @func_472() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %619 = %618.0;
  (%619,)
}

def @func_4028() -> (Tensor[(4, 6, 5), float32],) {
  %621 = fn () -> (Tensor[(4, 6, 5), float32],) {
    %620 = @func_3321() /* ty=Tensor[(4, 6, 5), float32] */;
    (%620,)
  };
  %621() /* ty=(Tensor[(4, 6, 5), float32],) */
}

def @func_3427(%var_3425: Tensor[(1092, 1), float64], %var_3426: Tensor[(375), int16]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 375), bool], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 364), bool]) {
  @func_3423(%var_3425, %var_3426) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 375), bool], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(1092, 364), bool]) */
}

def @func_5334() -> (Tensor[(14, 13, 2), float64],) {
  %624 = fn () -> (Tensor[(14, 13, 2), float64],) {
    %622 = @func_2858() /* ty=(Tensor[(14, 13, 2), float64],) */;
    %623 = %622.0;
    (%623,)
  };
  %624() /* ty=(Tensor[(14, 13, 2), float64],) */
}

def @func_3884(%var_3883: Tensor[(4, 6, 5), uint64]) -> Tensor[(4, 6, 5), bool] {
  %631 = fn (%var_3874: Tensor[(4, 6, 5), uint64]) -> Tensor[(4, 6, 5), bool] {
    %625 = @func_256() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %626 = %625.0;
    %627 = cast(%var_3874, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
    %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%626, dtype="bool") /* ty=Tensor[(4, 6, 5), bool] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%629, %630) /* ty=Tensor[(4, 6, 5), bool] */
  };
  %631(%var_3883) /* ty=Tensor[(4, 6, 5), bool] */
}

def @func_5233(%var_5232: Tensor[(2, 704), float64]) -> (Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(2, 704), float64], Tensor[(3, 364), bool], Tensor[(7, 156), float64], Tensor[(1, 364), float64]) {
  %648 = fn (%var_5202: Tensor[(2, 704), float64]) -> (Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(2, 704), float64], Tensor[(3, 364), bool], Tensor[(7, 156), float64], Tensor[(1, 364), float64]) {
    %632 = @func_4589() /* ty=(Tensor[(14, 13, 2), float64],) */;
    %633 = @func_1038() /* ty=(Tensor[(364), float64],) */;
    %634 = cast(%var_5202, dtype="float64") /* ty=Tensor[(2, 704), float64] */;
    %635 = cast(%var_5202, dtype="float64") /* ty=Tensor[(2, 704), float64] */;
    %636 = reshape(%634, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float64] */;
    %637 = reshape(%635, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), float64] */;
    %638 = @func_4073(%636, %637) /* ty=(Tensor[(11, 8, 16), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %639 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 156), float64] */, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
    %640 = reshape(%639, newshape=[3, 364]) /* ty=Tensor[(3, 364), float64] */;
    %641 = @func_1528(%640) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
    %642 = @func_4818() /* ty=(Tensor[(1, 364), float64],) */;
    %643 = %632.0;
    %644 = %633.0;
    %645 = %638.2;
    %646 = %641.1;
    %647 = %642.0;
    (%643, %644, %645, %var_5202, %646, meta[relay.Constant][19] /* ty=Tensor[(7, 156), float64] */, %647)
  };
  %648(%var_5232) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(2, 704), float64], Tensor[(3, 364), bool], Tensor[(7, 156), float64], Tensor[(1, 364), float64]) */
}

def @func_5347() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  %649 = @func_2559() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %650 = @func_2858() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %651 = %649.0;
  %652 = %650.0;
  (%651, %652)
}

def @func_1317() -> (Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) {
  %653 = @func_336() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64]) */;
  %654 = @func_1250() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %655 = %653.0;
  %656 = %654.0;
  (%655, %656)
}

def @func_2309(%var_2296: Tensor[(364), float64]) -> (Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), bool], Tensor[(364), float64]) {
  %657 = @func_1448() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
  %660 = cast(%var_2296, dtype="float64") /* ty=Tensor[(364), float64] */;
  %661 = cast(%658, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
  %662 = reshape(%660, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %663 = reshape(%661, newshape=[120]) /* ty=Tensor[(120), uint64] */;
  %664 = @func_1130(%662, %663) /* ty=(Tensor[(14, 13, 2), bool], Tensor[(14, 13, 2), float64], Tensor[(120), uint64]) */;
  %665 = cos(%659) /* ty=Tensor[(4, 6, 5), float64] */;
  %666 = %664.0;
  (%665, %666, %var_2296)
}

def @func_2980() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) {
  %667 = @func_2559() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %668 = @func_707() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
  %669 = %667.1;
  %670 = %668.0;
  %671 = @func_855() /* ty=Tensor[(1, 364), float64] */;
  (%669, %670, %671)
}

def @func_4473(%var_4471: Tensor[(15, 13, 9), float64], %var_4472: Tensor[(32, 16), float64]) -> (Tensor[(15, 13, 9), bool], Tensor[(14, 13, 2), float64], Tensor[(32, 16), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) {
  %684 = fn (%var_4430: Tensor[(15, 13, 9), float64], %var_4447: Tensor[(32, 16), float64]) -> (Tensor[(15, 13, 9), bool], Tensor[(14, 13, 2), float64], Tensor[(32, 16), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) {
    %672 = cast(%var_4430, dtype="bool") /* ty=Tensor[(15, 13, 9), bool] */;
    %673 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(15, 13, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %674 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 13, 9), float64] */, dtype="bool") /* ty=Tensor[(15, 13, 9), bool] */;
    %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %676 = cast(%var_4447, dtype="float64") /* ty=Tensor[(32, 16), float64] */;
    %677 = reshape(%676, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float64] */;
    %678 = @func_1659(%677) /* ty=(Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) */;
    %679 = @func_2086() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %680 = equal(%674, %675) /* ty=Tensor[(15, 13, 9), bool] */;
    %681 = %678.1;
    %682 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
    %683 = %679.0;
    (%680, %681, %var_4447, %682, %683)
  };
  %684(%var_4471, %var_4472) /* ty=(Tensor[(15, 13, 9), bool], Tensor[(14, 13, 2), float64], Tensor[(32, 16), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */
}

def @func_3637() -> (Tensor[(4, 6, 5), float64], Tensor[(364), float64], Tensor[(364, 1), float64]) {
  %694 = fn () -> (Tensor[(4, 6, 5), float64], Tensor[(364), float64], Tensor[(364, 1), float64]) {
    %685 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
    %686 = cast(%685, dtype="float64") /* ty=Tensor[(4, 6, 5), float64] */;
    %687 = cast(meta[relay.Constant][21] /* ty=Tensor[(364, 1), float64] */, dtype="float64") /* ty=Tensor[(364, 1), float64] */;
    %688 = cast(%685, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
    %689 = reshape(%687, newshape=[364]) /* ty=Tensor[(364), float64] */;
    %690 = reshape(%688, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
    %691 = @func_538(%689, %690) /* ty=(Tensor[(14, 13, 2), float64], Tensor[(364), float64], Tensor[(4, 6, 5), float64], Tensor[(14, 13, 2), float64]) */;
    %692 = erf(%686) /* ty=Tensor[(4, 6, 5), float64] */;
    %693 = %691.1;
    (%692, %693, meta[relay.Constant][21] /* ty=Tensor[(364, 1), float64] */)
  };
  %694() /* ty=(Tensor[(4, 6, 5), float64], Tensor[(364), float64], Tensor[(364, 1), float64]) */
}

def @func_4340(%var_4333: Tensor[(1092), float64]) -> (Tensor[(1, 364), float64], Tensor[(4, 6, 5), float64], Tensor[(120), uint64], Tensor[(14, 13, 2), float64], Tensor[(512), float64], Tensor[(3, 364), bool], Tensor[(1092), float64]) {
  %695 = cast(meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %696 = @func_2626() /* ty=Tensor[(1, 364), float64] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(1, 364), float64] */;
  %698 = reshape(%695, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %699 = reshape(%697, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %700 = @func_985(%698, %699) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) */;
  %701 = cast(meta[relay.Constant][23] /* ty=Tensor[(512), float64] */, dtype="float64") /* ty=Tensor[(512), float64] */;
  %702 = reshape(%701, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), float64] */;
  %703 = @func_1659(%702) /* ty=(Tensor[(8, 16, 4), float64], Tensor[(14, 13, 2), float64]) */;
  %704 = cast(%var_4333, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %705 = reshape(%704, newshape=[3, 364]) /* ty=Tensor[(3, 364), float64] */;
  %706 = @func_1528(%705) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(3, 364), bool], Tensor[(1, 364), float32], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64]) */;
  %707 = %700.4;
  %708 = %703.1;
  %709 = %706.1;
  (%696, %707, meta[relay.Constant][22] /* ty=Tensor[(120), uint64] */, %708, meta[relay.Constant][23] /* ty=Tensor[(512), float64] */, %709, %var_4333)
}

def @func_1297(%var_1263: Tensor[(6, 5, 6), float64], %var_1274: Tensor[(8, 70), int64]) -> (Tensor[(1, 364), float64], Tensor[(6, 5, 6), float32], Tensor[(10, 7, 8), int64], Tensor[(8, 70), int64]) {
  %710 = @func_764() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(1, 364), float64], Tensor[(4, 6, 5), uint64]) */;
  %711 = cast(%var_1263, dtype="float64") /* ty=Tensor[(6, 5, 6), float64] */;
  %712 = rsqrt(%711) /* ty=Tensor[(6, 5, 6), float64] */;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(6, 5, 6), float32] */;
  %714 = cast(%var_1274, dtype="int64") /* ty=Tensor[(8, 70), int64] */;
  %715 = cast(%var_1274, dtype="int64") /* ty=Tensor[(8, 70), int64] */;
  %716 = reshape(%714, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int64] */;
  %717 = reshape(%715, newshape=[10, 7, 8]) /* ty=Tensor[(10, 7, 8), int64] */;
  %718 = %710.2;
  %719 = erf(%713) /* ty=Tensor[(6, 5, 6), float32] */;
  %720 = @func_722(%716, %717) /* ty=Tensor[(10, 7, 8), int64] */;
  (%718, %719, %720, %var_1274)
}

def @func_4540() -> (Tensor[(4, 6, 5), uint64],) {
  %721 = @func_2980() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64]) */;
  %722 = %721.1;
  (%722,)
}

def @func_2364(%var_2362: Tensor[(16, 6, 1), float32]) -> (Tensor[(16, 6, 1), float32],) {
  @func_2361(%var_2362) /* ty=(Tensor[(16, 6, 1), float32],) */
}

def @func_1104() -> Tensor[(4, 6, 5), uint64] {
  @func_1102() /* ty=Tensor[(4, 6, 5), uint64] */
}

def @func_4938() -> Tensor[(4, 6, 5), uint64] {
  %724 = fn () -> Tensor[(4, 6, 5), uint64] {
    %723 = @func_1162() /* ty=(Tensor[(14, 13, 2), float64], Tensor[(4, 6, 5), float64], Tensor[(4, 6, 5), uint64]) */;
    %723.2
  };
  %724() /* ty=Tensor[(4, 6, 5), uint64] */
}

def @func_4234(%var_4232: Tensor[(8, 3, 2), uint8]) -> Tensor[(8, 3, 2), uint8] {
  @func_4231(%var_4232) /* ty=Tensor[(8, 3, 2), uint8] */
}

def @func_4076(%var_4074: Tensor[(11, 8, 16), float64], %var_4075: Tensor[(11, 8, 16), float64]) -> (Tensor[(11, 8, 16), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %734 = fn (%var_4054: Tensor[(11, 8, 16), float64], %var_4055: Tensor[(11, 8, 16), float64]) -> (Tensor[(11, 8, 16), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
    %725 = cast(%var_4055, dtype="float64") /* ty=Tensor[(11, 8, 16), float64] */;
    %726 = shape_of(%var_4054, dtype="int32") /* ty=Tensor[(3), int32] */;
    %727 = cast(%var_4054, dtype="float64") /* ty=Tensor[(11, 8, 16), float64] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %729 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %730 = @func_402() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %731 = floor_mod(%727, %728) /* ty=Tensor[(11, 8, 16), float64] */;
    %732 = %729.0;
    %733 = %730.0;
    (%731, %732, %733)
  };
  %734(%var_4074, %var_4075) /* ty=(Tensor[(11, 8, 16), float64], Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */
}

def @func_4589() -> (Tensor[(14, 13, 2), float64],) {
  %735 = @func_1250() /* ty=(Tensor[(14, 13, 2), float64],) */;
  %736 = %735.0;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(14, 13, 2), float64] */;
  %738 = asin(%737) /* ty=Tensor[(14, 13, 2), float64] */;
  (%738,)
}

def @func_2706() -> Tensor[(4, 6, 5), uint64] {
  %739 = @func_1334() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %739.0
}

def @func_4686() -> (Tensor[(4, 6, 5), uint64],) {
  %742 = fn () -> (Tensor[(4, 6, 5), uint64],) {
    %740 = @func_1334() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %741 = %740.0;
    (%741,)
  };
  %742() /* ty=(Tensor[(4, 6, 5), uint64],) */
}

def @func_1852(%var_1808: Tensor[(5460), float64], %var_1840: Tensor[(120), uint64]) -> (Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) {
  %743 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 7), float32] */;
  %744 = cast(meta[relay.Constant][25] /* ty=Tensor[(120), uint64] */, dtype="uint64") /* ty=Tensor[(120), uint64] */;
  %745 = cast(meta[relay.Constant][26] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %746 = reshape(%744, newshape=[4, 6, 5]) /* ty=Tensor[(4, 6, 5), uint64] */;
  %747 = reshape(%745, newshape=[364]) /* ty=Tensor[(364), float64] */;
  %748 = @func_985(%746, %747) /* ty=(Tensor[(4, 6, 5), float32], Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(4, 6, 5), int16], Tensor[(4, 6, 5), float64]) */;
  %749 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %750 = @func_242() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(4, 6, 5), uint64]) */;
  %751 = %749.1;
  %752 = cast(%751, dtype="float64") /* ty=Tensor[(364), float64] */;
  %753 = reshape(%752, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %754 = cast(meta[relay.Constant][26] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %755 = cast(%var_1808, dtype="float64") /* ty=Tensor[(5460), float64] */;
  %756 = reshape(%754, newshape=[14, 13, 2]) /* ty=Tensor[(14, 13, 2), float64] */;
  %757 = reshape(%755, newshape=[15, 364]) /* ty=Tensor[(15, 364), float64] */;
  %758 = @func_1071(%756, %757) /* ty=(Tensor[(14, 13, 2), float32], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float64], Tensor[(15, 364), bool]) */;
  %759 = cast(%var_1840, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %760 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(120), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %761 = cast(meta[relay.Constant][25] /* ty=Tensor[(120), uint64] */, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %763 = log2(%743) /* ty=Tensor[(1, 7), float32] */;
  %764 = %748.0;
  %765 = %750.0;
  %766 = @func_184(%753) /* ty=Tensor[(14, 13, 2), float64] */;
  %767 = %758.0;
  %768 = add(%761, %762) /* ty=Tensor[(120), uint32] */;
  (%763, %764, meta[relay.Constant][26] /* ty=Tensor[(364), float64] */, %751, %765, %766, %767, %var_1808, %768)
}

def @func_2914(%var_2912: Tensor[(364), float64]) -> (Tensor[(10, 2, 15), float64], Tensor[(364), float64], Tensor[(364), float64], Tensor[(1, 364), float64]) {
  @func_2911(%var_2912) /* ty=(Tensor[(10, 2, 15), float64], Tensor[(364), float64], Tensor[(364), float64], Tensor[(1, 364), float64]) */
}

def @func_1944() -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) {
  %769 = @func_654() /* ty=(Tensor[(4, 6, 5), uint64],) */;
  %770 = %769.0;
  %771 = @func_135() /* ty=Tensor[(4, 6, 5), uint64] */;
  (%770, %771)
}

def @func_2708() -> Tensor[(4, 6, 5), uint64] {
  @func_2706() /* ty=Tensor[(4, 6, 5), uint64] */
}

def @func_1301(%var_1299: Tensor[(6, 5, 6), float64], %var_1300: Tensor[(8, 70), int64]) -> (Tensor[(1, 364), float64], Tensor[(6, 5, 6), float32], Tensor[(10, 7, 8), int64], Tensor[(8, 70), int64]) {
  @func_1297(%var_1299, %var_1300) /* ty=(Tensor[(1, 364), float64], Tensor[(6, 5, 6), float32], Tensor[(10, 7, 8), int64], Tensor[(8, 70), int64]) */
}

def @func_4873(%var_4872: Tensor[(5460), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(5460), float64]) {
  %780 = fn (%var_4863: Tensor[(5460), float64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(5460), float64]) {
    %772 = @func_4685() /* ty=(Tensor[(4, 6, 5), uint64],) */;
    %773 = cast(%var_4863, dtype="float64") /* ty=Tensor[(5460), float64] */;
    %774 = %772.0;
    %775 = cast(%774, dtype="uint64") /* ty=Tensor[(4, 6, 5), uint64] */;
    %776 = reshape(%773, newshape=[5460]) /* ty=Tensor[(5460), float64] */;
    %777 = reshape(%775, newshape=[120]) /* ty=Tensor[(120), uint64] */;
    %778 = @func_1852(%776, %777) /* ty=(Tensor[(1, 7), float32], Tensor[(4, 6, 5), float32], Tensor[(364), float64], Tensor[(364), float64], Tensor[(4, 6, 5), uint64], Tensor[(14, 13, 2), float64], Tensor[(14, 13, 2), float32], Tensor[(5460), float64], Tensor[(120), uint32]) */;
    %779 = %778.2;
    (%774, %779, %var_4863)
  };
  %780(%var_4872) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(364), float64], Tensor[(5460), float64]) */
}

def @func_4006(%var_3988: int32, %var_3989: Tensor[(1, 6), int32]) -> Tensor[(1, 6), int32] {
  %781 = cast(%var_3988, dtype="int32") /* ty=int32 */;
  %782 = cast(%var_3989, dtype="int32") /* ty=Tensor[(1, 6), int32] */;
  add(%781, %782) /* ty=Tensor[(1, 6), int32] */
}

def @func_2170(%var_2168: Tensor[(180), float64], %var_2169: Tensor[(560), int64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64], Tensor[(180), float64], Tensor[(560), int64]) {
  %793 = fn (%var_2161: Tensor[(180), float64], %var_2162: Tensor[(560), int64]) -> (Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64], Tensor[(180), float64], Tensor[(560), int64]) {
    %783 = @func_1944() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %784 = @func_577() /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64]) */;
    %785 = cast(%var_2161, dtype="float64") /* ty=Tensor[(180), float64] */;
    %786 = cast(%var_2162, dtype="int64") /* ty=Tensor[(560), int64] */;
    %787 = reshape(%785, newshape=[6, 5, 6]) /* ty=Tensor[(6, 5, 6), float64] */;
    %788 = reshape(%786, newshape=[8, 70]) /* ty=Tensor[(8, 70), int64] */;
    %789 = @func_1297(%787, %788) /* ty=(Tensor[(1, 364), float64], Tensor[(6, 5, 6), float32], Tensor[(10, 7, 8), int64], Tensor[(8, 70), int64]) */;
    %790 = %783.0;
    %791 = %784.0;
    %792 = %789.0;
    (%790, %791, %792, %var_2161, %var_2162)
  };
  %793(%var_2168, %var_2169) /* ty=(Tensor[(4, 6, 5), uint64], Tensor[(4, 6, 5), uint64], Tensor[(1, 364), float64], Tensor[(180), float64], Tensor[(560), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen17/build/output.py", line 2281, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:44:10] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

