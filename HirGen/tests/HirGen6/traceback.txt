==========mod==========
#[version = "0.0.5"]
def @func_7496() -> Tensor[(14, 9, 6), float32] {
  %0 = @func_5412() /* ty=(Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) */;
  %0.1
}

def @func_5713() -> (Tensor[(14, 9, 6), int16], Tensor[(?, 12, 14), float32]) {
  %1 = @func_5412() /* ty=(Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) */;
  %2 = %1.1;
  %3 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %4 = %3.0;
  %5 = cast(%4, dtype="int16") /* ty=Tensor[(14, 9, 6), int16] */;
  %6 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%2, dtype="int16") /* ty=Tensor[(14, 9, 6), int16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %10 = reshape(%9, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %11 = @func_3183(%10) /* ty=(Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */;
  %12 = %11.0;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), float32] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %17 = greater(%15, %16) /* ty=Tensor[(?, 12, 14), bool] */;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(?, 12, 14), float32] */;
  %19 = bitwise_and(%7, %8) /* ty=Tensor[(14, 9, 6), int16] */;
  %20 = atanh(%18) /* ty=Tensor[(?, 12, 14), float32] */;
  (%19, %20)
}

def @func_429(%var_425: Tensor[(10, 10, 5), float32]) -> (Tensor[(10, 10, 5), float32],) {
  %21 = cast(%var_425, dtype="float32") /* ty=Tensor[(10, 10, 5), float32] */;
  %22 = log10(%21) /* ty=Tensor[(10, 10, 5), float32] */;
  (%22,)
}

def @func_5506() -> (Tensor[(14, 9, 6), float32],) {
  %23 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %24 = %23.0;
  (%24,)
}

def @func_5241() -> Tensor[(14, 9, 6), float32] {
  @func_4188() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_5412() -> (Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) {
  %25 = @func_5049() /* ty=(Tensor[(14, 9, 6), uint8],) */;
  %26 = %25.0;
  %27 = @func_5241() /* ty=Tensor[(14, 9, 6), float32] */;
  (%26, %27)
}

def @func_127(%var_117: Tensor[(14, 10, 6), uint64]) -> Tensor[(14, 10, 6), uint64] {
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 10, 6), uint64] */, dtype="uint64") /* ty=Tensor[(14, 10, 6), uint64] */;
  %29 = shape_of(%var_117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_117, dtype="uint64") /* ty=Tensor[(14, 10, 6), uint64] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%30, %31) /* ty=Tensor[(14, 10, 6), uint64] */
}

def @func_2506(%var_2475: Tensor[(12, 9, 7), int64], %var_2500: Tensor[(5, 150), float32]) -> (Tensor[(12, 9, 7), float64], Tensor[(12, 9, 7), bool], Tensor[(11, 10, 9), uint16], Tensor[(5, 150), float32]) {
  %32 = cast(%var_2475, dtype="int64") /* ty=Tensor[(12, 9, 7), int64] */;
  %33 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(12, 9, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 9, 7), int64] */, dtype="int64") /* ty=Tensor[(12, 9, 7), int64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %36 = bitwise_and(%34, %35) /* ty=Tensor[(12, 9, 7), int64] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 9, 7), int64] */, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %41 = cast(%var_2475, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  %42 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%36, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%var_2500, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
  %46 = cast(%var_2500, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
  %47 = cast(%var_2500, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
  %48 = reshape(%45, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %49 = reshape(%46, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %50 = reshape(%47, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %51 = @func_1209(%48, %49, %50) /* ty=(Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %52 = floor_mod(%39, %40) /* ty=Tensor[(12, 9, 7), float64] */;
  %53 = not_equal(%43, %44) /* ty=Tensor[(12, 9, 7), bool] */;
  %54 = %51.4;
  (%52, %53, %54, %var_2500)
}

def @func_7659(%var_7651: Tensor[(1980), bool]) -> (Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1980), bool]) {
  %55 = @func_5049() /* ty=(Tensor[(14, 9, 6), uint8],) */;
  %56 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %59 = cast(%var_7651, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %60 = reshape(%58, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %61 = reshape(%59, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %62 = @func_4061(%60, %61) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %63 = %55.0;
  %64 = %62.2;
  (%63, %57, %64, %var_7651)
}

def @func_6345() -> (Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float64]) {
  %65 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %66 = @func_4542() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %69 = %65.1;
  %70 = sin(%68) /* ty=Tensor[(14, 9, 6), float64] */;
  (%69, %70)
}

def @func_3802() -> (Tensor[(14, 9, 6), float32],) {
  %71 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %72 = %71.0;
  (%72,)
}

def @func_7728() -> (Tensor[(14, 9, 6), float32],) {
  %73 = @func_5632() /* ty=Tensor[(14, 9, 6), float32] */;
  (%73,)
}

def @func_4158() -> (Tensor[(14, 9, 6), float32],) {
  %74 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %75 = %74.0;
  (%75,)
}

def @func_7940() -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %76 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %77 = @func_6066() /* ty=Tensor[(14, 9, 6), float32] */;
  %78 = %76.1;
  (%77, %78)
}

def @func_5343(%var_5332: Tensor[(14, 8, 13), float32]) -> (Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) {
  %79 = cast(%var_5332, dtype="float32") /* ty=Tensor[(14, 8, 13), float32] */;
  %80 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %81 = acos(%79) /* ty=Tensor[(14, 8, 13), float32] */;
  %82 = %80.0;
  (%81, %82)
}

def @func_6242(%var_6203: Tensor[(200), uint16], %var_6204: Tensor[(500), float32]) -> (Tensor[(132), int64], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(200), float32]) {
  %83 = @func_5003() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) */;
  %84 = cast(%var_6203, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %85 = cast(%var_6203, dtype="uint16") /* ty=Tensor[(200), uint16] */;
  %86 = cast(%var_6204, dtype="float32") /* ty=Tensor[(500), float32] */;
  %87 = reshape(%84, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %88 = reshape(%85, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %89 = reshape(%86, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %90 = @func_1061(%87, %88, %89) /* ty=(Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %91 = cast(%var_6203, dtype="float32") /* ty=Tensor[(200), float32] */;
  %92 = %83.2;
  %93 = %90.1;
  %94 = rsqrt(%91) /* ty=Tensor[(200), float32] */;
  (%92, %93, %var_6204, %94)
}

def @func_4601(%var_4563: Tensor[(320), float32], %var_4585: Tensor[(120, 1), float64], %var_4590: Tensor[(168), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(12, 2, 5), float64], Tensor[(120, 1), float64], Tensor[(840), uint64], Tensor[(168), float32]) {
  %95 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %96 = cast(%var_4563, dtype="float32") /* ty=Tensor[(320), float32] */;
  %97 = reshape(%96, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %98 = @func_4112(%97) /* ty=(Tensor[(16, 2, 10), float32],) */;
  %99 = cast(%var_4585, dtype="float64") /* ty=Tensor[(120, 1), float64] */;
  %100 = reshape(%99, newshape=[12, 2, 5]) /* ty=Tensor[(12, 2, 5), float64] */;
  %101 = cast(%var_4590, dtype="float32") /* ty=Tensor[(168), float32] */;
  %102 = reshape(%101, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %103 = @func_3183(%102) /* ty=(Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */;
  %104 = %95.0;
  %105 = %98.0;
  %106 = @func_3389(%100) /* ty=Tensor[(12, 2, 5), float64] */;
  %107 = %103.2;
  (%104, %105, %var_4563, %106, %var_4585, %107, %var_4590)
}

def @func_4858() -> Tensor[(14, 9, 6), float32] {
  %108 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %108.0
}

def @func_3847(%var_3842: uint64) -> (Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) {
  %109 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %110 = cast(meta[relay.Constant][3] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %111 = reshape(%110, newshape=[11, 15]) /* ty=Tensor[(11, 15), float32] */;
  %112 = @func_925(%111) /* ty=(Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) */;
  %113 = cast(%var_3842, dtype="uint64") /* ty=uint64 */;
  %114 = reshape(%113, newshape=[]) /* ty=uint64 */;
  %115 = @func_3715(%114) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) */;
  %116 = %109.0;
  %117 = %112.1;
  %118 = %115.0;
  (%116, %117, meta[relay.Constant][3] /* ty=Tensor[(165), float32] */, %118, %var_3842)
}

def @func_4112(%var_4104: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), float32],) {
  %119 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %120 = shape_of(%var_4104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%var_4104, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %123 = mod(%121, %122) /* ty=Tensor[(16, 2, 10), float32] */;
  (%123,)
}

def @func_7520() -> Tensor[(14, 9, 6), float64] {
  %124 = @func_7343() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) */;
  %124.0
}

def @func_6130() -> (Tensor[(14, 9, 6), float32],) {
  %125 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
  (%125,)
}

def @func_1061(%var_1051: Tensor[(8, 5, 5), uint16], %var_1052: Tensor[(8, 5, 5), uint16], %var_1059: Tensor[(500), float32]) -> (Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  %126 = cast(%var_1052, dtype="uint16") /* ty=Tensor[(8, 5, 5), uint16] */;
  %127 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_1051, dtype="uint16") /* ty=Tensor[(8, 5, 5), uint16] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %130 = cast(%var_1059, dtype="float32") /* ty=Tensor[(500), float32] */;
  %131 = reshape(%130, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %132 = @func_429(%131) /* ty=(Tensor[(10, 10, 5), float32],) */;
  %133 = multiply(%128, %129) /* ty=Tensor[(8, 5, 5), uint16] */;
  %134 = %132.0;
  (%133, %134, %var_1059)
}

def @func_4664(%var_4659: Tensor[(1980), bool]) -> (Tensor[(14, 9, 6), float32], Tensor[(132), int64], Tensor[(2, 11, 6), float32], Tensor[(1980), bool], Tensor[(1980), bool]) {
  %135 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %136 = cast(meta[relay.Constant][5] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
  %137 = reshape(%136, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), int64] */;
  %138 = @func_3220(%137) /* ty=(Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) */;
  %139 = %138.1;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(2, 11, 6), float32] */;
  %141 = %135.0;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %143 = cast(meta[relay.Constant][6] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %144 = reshape(%142, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %145 = reshape(%143, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %146 = @func_4061(%144, %145) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %147 = cast(%var_4659, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %148 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1980), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %149 = cast(meta[relay.Constant][6] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?), bool] */;
  %151 = erf(%140) /* ty=Tensor[(2, 11, 6), float32] */;
  %152 = %146.1;
  %153 = logical_and(%149, %150) /* ty=Tensor[(1980), bool] */;
  (%141, meta[relay.Constant][5] /* ty=Tensor[(132), int64] */, %151, %152, %153)
}

def @func_6066() -> Tensor[(14, 9, 6), float32] {
  @func_4858() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_6689() -> (Tensor[(14, 9, 6), float32],) {
  %154 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %155 = %154.0;
  (%155,)
}

def @func_6515() -> (Tensor[(14, 9, 6), float32],) {
  %156 = @func_4858() /* ty=Tensor[(14, 9, 6), float32] */;
  (%156,)
}

def @main(%var_8031: Tensor[(5, 156), int8], %var_8048: Tensor[(5, 156), int8], %var_8061: Tensor[(512), int8], %var_8063: Tensor[(165), float32], %var_8064: Tensor[(500), float32], %var_8066: Tensor[(165), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(5, 156), bool], Tensor[(5, 156), uint8], Tensor[(14, 9, 6), float32], Tensor[(165), float32], Tensor[(24), float64], uint16, Tensor[(512), int8], Tensor[(432), float32], Tensor[(500), float32], Tensor[(165), bool]) {
  %157 = @func_7940() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %158 = @func_7343() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) */;
  %159 = %158.1;
  %160 = cast(%var_8031, dtype="bool") /* ty=Tensor[(5, 156), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(2), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(5, 156), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %164 = cast(%var_8048, dtype="uint8") /* ty=Tensor[(5, 156), uint8] */;
  %165 = shape_of(%159, dtype="int32") /* ty=Tensor[(2), int32] */;
  %166 = cast(%159, dtype="uint8") /* ty=Tensor[(5, 156), uint8] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %168 = cast(meta[relay.Constant][7] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %169 = cast(meta[relay.Constant][8] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %170 = cast(%var_8061, dtype="int8") /* ty=Tensor[(512), int8] */;
  %171 = cast(meta[relay.Constant][9] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %172 = cast(%var_8063, dtype="float32") /* ty=Tensor[(165), float32] */;
  %173 = cast(%var_8064, dtype="float32") /* ty=Tensor[(500), float32] */;
  %174 = reshape(%168, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
  %175 = reshape(%169, newshape=[]) /* ty=uint16 */;
  %176 = reshape(%170, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %177 = reshape(%171, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %178 = reshape(%172, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %179 = reshape(%173, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %180 = @func_2410(%174, %175, %176, %177, %178, %179) /* ty=(Tensor[(512), int8], uint16, Tensor[(440), uint16], Tensor[(512), int8], Tensor[(9, 3, 16), uint64], Tensor[(432), float32], Tensor[(840), uint64], Tensor[(2, 12, 1), float64], Tensor[(11, 15), float32], Tensor[(165), float32], Tensor[(2, 12, 1), float64], Tensor[(8, 5, 5), uint16], Tensor[(200, 1), uint16], Tensor[(500), float32]) */;
  %181 = cast(%var_8066, dtype="bool") /* ty=Tensor[(165), bool] */;
  %182 = shape_of(%var_8063, dtype="int32") /* ty=Tensor[(1), int32] */;
  %183 = cast(%var_8063, dtype="bool") /* ty=Tensor[(165), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), bool] */;
  %185 = %157.1;
  %186 = not_equal(%162, %163) /* ty=Tensor[(5, 156), bool] */;
  %187 = right_shift(%166, %167) /* ty=Tensor[(5, 156), uint8] */;
  %188 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
  %189 = %180.9;
  %190 = equal(%183, %184) /* ty=Tensor[(165), bool] */;
  (%185, %186, %187, %188, %189, meta[relay.Constant][7] /* ty=Tensor[(24), float64] */, meta[relay.Constant][8] /* ty=uint16 */, %var_8061, meta[relay.Constant][9] /* ty=Tensor[(432), float32] */, %var_8064, %190)
}

def @func_4135() -> Tensor[(14, 9, 6), float32] {
  %191 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %191.0
}

def @func_4930(%var_4866: Tensor[(8, 16, 8), float64], %var_4887: uint64, %var_4896: Tensor[(12, 2, 5), float64], %var_4903: Tensor[(8, 16, 8), float64], %var_4923: Tensor[(512), int8]) -> (Tensor[(8, 16, 8), bool], uint64, Tensor[(12, 2, 5), int32], Tensor[(8, 16, 8), bool], Tensor[(14, 9, 6), float32], Tensor[(12, 15, 13), bool], Tensor[(12, 2, 5), float64], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) {
  %192 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 16, 8), float64] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %193 = shape_of(%var_4866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_4866, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %197 = %196.1;
  %198 = cast(%var_4896, dtype="int32") /* ty=Tensor[(12, 2, 5), int32] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="int32") /* ty=Tensor[(12, 2, 5), int32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %202 = cast(%var_4903, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %203 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(8, 16, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 16, 8), float64] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %207 = cast(%var_4887, dtype="uint64") /* ty=uint64 */;
  %208 = reshape(%207, newshape=[]) /* ty=uint64 */;
  %209 = @func_3847(%208) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) */;
  %210 = %209.3;
  %211 = cast(%var_4887, dtype="uint64") /* ty=uint64 */;
  %212 = reshape(%211, newshape=[]) /* ty=uint64 */;
  %213 = @func_3715(%212) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) */;
  %214 = %213.1;
  %215 = cast(%214, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %216 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%210, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = cast(%197, dtype="float64") /* ty=Tensor[(12, 2, 5), float64] */;
  %220 = cast(%var_4923, dtype="int8") /* ty=Tensor[(512), int8] */;
  %221 = reshape(%220, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), int8] */;
  %222 = @func_832(%221) /* ty=(Tensor[(8, 16, 4), int8],) */;
  %223 = greater_equal(%194, %195) /* ty=Tensor[(8, 16, 8), bool] */;
  %224 = minimum(%200, %201) /* ty=Tensor[(12, 2, 5), int32] */;
  %225 = less(%204, %205) /* ty=Tensor[(8, 16, 8), bool] */;
  %226 = %206.0;
  %227 = logical_and(%217, %218) /* ty=Tensor[(12, 15, 13), bool] */;
  %228 = acos(%219) /* ty=Tensor[(12, 2, 5), float64] */;
  %229 = %222.0;
  (%223, %var_4887, %224, %225, %226, %227, %228, %229, %var_4923)
}

def @func_4177() -> (Tensor[(14, 9, 6), float32],) {
  %230 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %231 = %230.0;
  (%231,)
}

def @func_6304(%var_6288: Tensor[(1980), bool], %var_6297: Tensor[(1456), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(1980), float32]) {
  %232 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %234 = cast(%var_6288, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %235 = reshape(%233, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %236 = reshape(%234, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %237 = @func_4061(%235, %236) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %238 = cast(%var_6297, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %239 = reshape(%238, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float32] */;
  %240 = @func_5343(%239) /* ty=(Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) */;
  %241 = cast(%var_6288, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %242 = %237.2;
  %243 = %240.1;
  %244 = tan(%241) /* ty=Tensor[(1980), float32] */;
  (%232, %242, %243, %var_6297, %244)
}

def @func_4398() -> (Tensor[(14, 9, 6), float32],) {
  %245 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %246 = %245.0;
  (%246,)
}

def @func_2743(%var_2728: Tensor[(5, 10), float64], %var_2736: Tensor[(840), uint64]) -> (Tensor[(5, 10), float64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
  %247 = cast(%var_2728, dtype="float64") /* ty=Tensor[(5, 10), float64] */;
  %248 = cast(%var_2736, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %249 = reshape(%248, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), uint64] */;
  %250 = cosh(%247) /* ty=Tensor[(5, 10), float64] */;
  %251 = @func_127(%249) /* ty=Tensor[(14, 10, 6), uint64] */;
  (%250, %251, %var_2736)
}

def @func_6956(%var_6948: Tensor[(6, 4, 7), int64], %var_6949: Tensor[(6, 4, 7), int64]) -> (Tensor[(6, 4, 7), int64],) {
  %252 = cast(%var_6949, dtype="int64") /* ty=Tensor[(6, 4, 7), int64] */;
  %253 = shape_of(%var_6948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_6948, dtype="int64") /* ty=Tensor[(6, 4, 7), int64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %256 = subtract(%254, %255) /* ty=Tensor[(6, 4, 7), int64] */;
  (%256,)
}

def @func_5463(%var_5455: Tensor[(5, 3, 16), float32]) -> Tensor[(5, 3, 16), float32] {
  %257 = cast(%var_5455, dtype="float32") /* ty=Tensor[(5, 3, 16), float32] */;
  acosh(%257) /* ty=Tensor[(5, 3, 16), float32] */
}

def @func_3389(%var_3374: Tensor[(12, 2, 5), float64]) -> Tensor[(12, 2, 5), float64] {
  %258 = cast(%var_3374, dtype="float64") /* ty=Tensor[(12, 2, 5), float64] */;
  asin(%258) /* ty=Tensor[(12, 2, 5), float64] */
}

def @func_4188() -> Tensor[(14, 9, 6), float32] {
  %259 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %259.0
}

def @func_832(%var_823: Tensor[(8, 16, 4), int8]) -> (Tensor[(8, 16, 4), int8],) {
  %260 = cast(meta[relay.Constant][11] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %261 = cast(%var_823, dtype="int8") /* ty=Tensor[(8, 16, 4), int8] */;
  %262 = add(%260, %261) /* ty=Tensor[(8, 16, 4), int8] */;
  (%262,)
}

def @func_1209(%var_1177: Tensor[(5, 10, 15), float32], %var_1178: Tensor[(5, 10, 15), float32], %var_1192: Tensor[(5, 10, 15), float32]) -> (Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  %263 = cast(%var_1178, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %264 = shape_of(%var_1177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_1177, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %267 = cast(meta[relay.Constant][12] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %268 = reshape(%267, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), int8] */;
  %269 = @func_832(%268) /* ty=(Tensor[(8, 16, 4), int8],) */;
  %270 = cast(%var_1192, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %271 = shape_of(%var_1178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_1178, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %274 = cast(meta[relay.Constant][13] /* ty=Tensor[(110, 9), uint8] */, dtype="uint8") /* ty=Tensor[(110, 9), uint8] */;
  %275 = reshape(%274, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %277 = reshape(%276, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %278 = @func_429(%277) /* ty=(Tensor[(10, 10, 5), float32],) */;
  %279 = subtract(%265, %266) /* ty=Tensor[(5, 10, 15), float32] */;
  %280 = %269.0;
  %281 = floor_divide(%272, %273) /* ty=Tensor[(5, 10, 15), float32] */;
  %282 = @func_722(%275) /* ty=Tensor[(11, 10, 9), uint16] */;
  %283 = %278.0;
  (%279, %280, meta[relay.Constant][12] /* ty=Tensor[(512), int8] */, %281, %282, meta[relay.Constant][13] /* ty=Tensor[(110, 9), uint8] */, %283, meta[relay.Constant][14] /* ty=Tensor[(500), float32] */)
}

def @func_7207(%var_7179: Tensor[(6, 14, 2), float32], %var_7186: Tensor[(756), float32], %var_7205: Tensor[(240), float64]) -> (Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), bool], Tensor[(6, 14, 2), bool], Tensor[(12, 2, 10), float64], Tensor[(240), float64]) {
  %284 = cast(%var_7186, dtype="float32") /* ty=Tensor[(756), float32] */;
  %285 = cast(meta[relay.Constant][15] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %286 = reshape(%284, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %287 = reshape(%285, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %288 = @func_4061(%286, %287) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %289 = cast(%var_7179, dtype="float32") /* ty=Tensor[(6, 14, 2), float32] */;
  %290 = erf(%289) /* ty=Tensor[(6, 14, 2), float32] */;
  %291 = cast(%290, dtype="int16") /* ty=Tensor[(6, 14, 2), int16] */;
  %292 = shape_of(%var_7179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_7179, dtype="int16") /* ty=Tensor[(6, 14, 2), int16] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %295 = bitwise_or(%293, %294) /* ty=Tensor[(6, 14, 2), int16] */;
  %296 = cast(%295, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %297 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%290, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = cast(%var_7205, dtype="float64") /* ty=Tensor[(240), float64] */;
  %301 = reshape(%300, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
  %302 = @func_5311(%301) /* ty=(Tensor[(12, 2, 10), float64],) */;
  %303 = %288.1;
  %304 = less_equal(%298, %299) /* ty=Tensor[(6, 14, 2), bool] */;
  %305 = %302.0;
  (%303, %var_7186, meta[relay.Constant][15] /* ty=Tensor[(1980), bool] */, %304, %305, %var_7205)
}

def @func_4203(%var_4199: Tensor[(14, 11, 8), float32]) -> Tensor[(14, 11, 8), float32] {
  %306 = cast(%var_4199, dtype="float32") /* ty=Tensor[(14, 11, 8), float32] */;
  log(%306) /* ty=Tensor[(14, 11, 8), float32] */
}

def @func_3658() -> (Tensor[(14, 9, 6), float32],) {
  %307 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %308 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 9, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %311 = minimum(%309, %310) /* ty=Tensor[(14, 9, 6), float32] */;
  (%311,)
}

def @func_3715(%var_3702: uint64) -> (Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) {
  %312 = cast(%var_3702, dtype="uint64") /* ty=uint64 */;
  %313 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 15, 13), uint64] */, dtype="uint64") /* ty=Tensor[(12, 15, 13), uint64] */;
  %314 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 15, 13), uint64] */, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %315 = subtract(%312, %313) /* ty=Tensor[(12, 15, 13), uint64] */;
  %316 = asin(%314) /* ty=Tensor[(12, 15, 13), float32] */;
  (%315, %316)
}

def @func_7629(%var_7573: int16, %var_7623: Tensor[(500), float32]) -> (Tensor[(6, 14, 12), int16], Tensor[(14, 9, 6), float32], Tensor[(8, 16, 4), int8], Tensor[(250, 3), int8], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(250, 3), float64]) {
  %317 = cast(%var_7573, dtype="int16") /* ty=int16 */;
  %318 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 14, 12), int16] */, dtype="int16") /* ty=Tensor[(6, 14, 12), int16] */;
  %319 = cast(meta[relay.Constant][20] /* ty=Tensor[(250, 3), float32] */, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
  %320 = cast(meta[relay.Constant][20] /* ty=Tensor[(250, 3), float32] */, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
  %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(250, 3), float32] */, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
  %322 = reshape(%319, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %323 = reshape(%320, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %324 = reshape(%321, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
  %325 = @func_1209(%322, %323, %324) /* ty=(Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %326 = cast(meta[relay.Constant][20] /* ty=Tensor[(250, 3), float32] */, dtype="float64") /* ty=Tensor[(250, 3), float64] */;
  %327 = rsqrt(%326) /* ty=Tensor[(250, 3), float64] */;
  %328 = cast(meta[relay.Constant][20] /* ty=Tensor[(250, 3), float32] */, dtype="int8") /* ty=Tensor[(250, 3), int8] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(2), int32] */;
  %330 = cast(%327, dtype="int8") /* ty=Tensor[(250, 3), int8] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %332 = cast(%var_7623, dtype="float32") /* ty=Tensor[(500), float32] */;
  %333 = reshape(%332, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %334 = @func_429(%333) /* ty=(Tensor[(10, 10, 5), float32],) */;
  %335 = cast(%327, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
  %336 = log2(%335) /* ty=Tensor[(250, 3), float32] */;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(250, 3), float64] */;
  %338 = multiply(%317, %318) /* ty=Tensor[(6, 14, 12), int16] */;
  %339 = @func_4135() /* ty=Tensor[(14, 9, 6), float32] */;
  %340 = %325.1;
  %341 = maximum(%330, %331) /* ty=Tensor[(250, 3), int8] */;
  %342 = %334.0;
  %343 = log10(%337) /* ty=Tensor[(250, 3), float64] */;
  (%338, %339, %340, %341, %342, %var_7623, %343)
}

def @func_5566(%var_5554: Tensor[(6, 11, 8), float32], %var_5563: Tensor[(1, 200), uint16], %var_5564: Tensor[(500), float32]) -> (Tensor[(6, 11, 8), float32], Tensor[(8, 5, 5), uint16], Tensor[(1, 200), uint16], Tensor[(500), float32]) {
  %344 = cast(%var_5554, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
  %345 = cast(%var_5563, dtype="uint16") /* ty=Tensor[(1, 200), uint16] */;
  %346 = cast(%var_5563, dtype="uint16") /* ty=Tensor[(1, 200), uint16] */;
  %347 = cast(%var_5564, dtype="float32") /* ty=Tensor[(500), float32] */;
  %348 = reshape(%345, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %349 = reshape(%346, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %350 = reshape(%347, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %351 = @func_1061(%348, %349, %350) /* ty=(Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %352 = cos(%344) /* ty=Tensor[(6, 11, 8), float32] */;
  %353 = %351.0;
  (%352, %353, %var_5563, %var_5564)
}

def @func_7874() -> (Tensor[(14, 9, 6), float32], Tensor[(1456), uint8], Tensor[(168), uint16], Tensor[(12, 15, 13), uint64], uint64) {
  %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %355 = reshape(%354, newshape=[3, 4, 14]) /* ty=Tensor[(3, 4, 14), uint16] */;
  %356 = @func_5974(%355) /* ty=(Tensor[(3, 4, 14), uint16], Tensor[(1456), uint8], Tensor[(3, 4, 14), float64]) */;
  %357 = cast(meta[relay.Constant][22] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %358 = reshape(%357, newshape=[]) /* ty=uint64 */;
  %359 = @func_3847(%358) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) */;
  %360 = @func_7496() /* ty=Tensor[(14, 9, 6), float32] */;
  %361 = %356.1;
  %362 = %359.3;
  (%360, %361, meta[relay.Constant][21] /* ty=Tensor[(168), uint16] */, %362, meta[relay.Constant][22] /* ty=uint64 */)
}

def @func_6182() -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %363 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %364 = %363.0;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %366 = reshape(%365, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %367 = @func_4343(%366) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %368 = @func_5506() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %369 = %367.0;
  %370 = %368.0;
  (%364, %369, %370)
}

def @func_5552() -> (Tensor[(14, 9, 6), float32],) {
  %371 = @func_4398() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %372 = %371.0;
  (%372,)
}

def @func_5093(%var_5078: Tensor[(468), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(4, 13, 9), float32], Tensor[(468), float32]) {
  %373 = @func_3761() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %374 = cast(%var_5078, dtype="float32") /* ty=Tensor[(468), float32] */;
  %375 = reshape(%374, newshape=[4, 13, 9]) /* ty=Tensor[(4, 13, 9), float32] */;
  %376 = %373.0;
  %377 = @func_4797(%375) /* ty=Tensor[(4, 13, 9), float32] */;
  (%376, %377, %var_5078)
}

def @func_5162(%var_5135: Tensor[(5, 11, 4), float32], %var_5145: Tensor[(756), float32], %var_5146: Tensor[(1980), bool]) -> (Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 9, 6), float32]) {
  %378 = cast(%var_5145, dtype="float32") /* ty=Tensor[(756), float32] */;
  %379 = cast(%var_5146, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %380 = reshape(%378, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %381 = reshape(%379, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %382 = @func_4061(%380, %381) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %383 = cast(meta[relay.Constant][23] /* ty=Tensor[(1980), bool] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %384 = shape_of(%var_5146, dtype="int32") /* ty=Tensor[(1), int32] */;
  %385 = cast(%var_5146, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?), float32] */;
  %387 = cast(%var_5135, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %388 = acosh(%387) /* ty=Tensor[(5, 11, 4), float32] */;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %390 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %391 = %382.1;
  %392 = floor_mod(%385, %386) /* ty=Tensor[(1980), float32] */;
  %393 = rsqrt(%389) /* ty=Tensor[(5, 11, 4), float64] */;
  %394 = %390.0;
  (%391, %var_5145, %392, %393, %394)
}

def @func_4529(%var_4504: Tensor[(14, 9, 6), float32], %var_4527: Tensor[(1080), float32]) -> (Tensor[(14, 9, 6), float64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) {
  %395 = @func_4283() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %396 = %395.0;
  %397 = cast(%var_4504, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%396, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %401 = cast(%var_4527, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %402 = reshape(%401, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
  %403 = @func_2269(%402) /* ty=(Tensor[(15, 8, 9), float32],) */;
  %404 = floor_mod(%399, %400) /* ty=Tensor[(14, 9, 6), float64] */;
  %405 = %403.0;
  (%404, %405, %var_4527)
}

def @func_5832() -> (Tensor[(14, 9, 6), float64], Tensor[(14, 9, 6), float32]) {
  %406 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %408 = atanh(%407) /* ty=Tensor[(14, 9, 6), float64] */;
  %409 = @func_4858() /* ty=Tensor[(14, 9, 6), float32] */;
  (%408, %409)
}

def @func_7482() -> (Tensor[(14, 9, 6), float32], Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(432), float64], Tensor[(14, 9, 6), float32]) {
  %410 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %411 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %412 = reshape(%410, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), uint32] */;
  %413 = reshape(%411, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), uint32] */;
  %414 = @func_5224(%412, %413) /* ty=(Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], uint64) */;
  %415 = @func_6424() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %416 = @func_6424() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %417 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), uint32] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %418 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %419 = @func_4188() /* ty=Tensor[(14, 9, 6), float32] */;
  %420 = %414.0;
  %421 = %415.0;
  %422 = %416.0;
  %423 = cos(%417) /* ty=Tensor[(432), float64] */;
  %424 = %418.0;
  (%419, %420, %421, %422, %423, %424)
}

def @func_6968(%var_6961: Tensor[(7, 5, 7), float64], %var_6962: Tensor[(7, 5, 7), float64]) -> Tensor[(7, 5, 7), float64] {
  %425 = cast(%var_6962, dtype="float64") /* ty=Tensor[(7, 5, 7), float64] */;
  %426 = shape_of(%var_6961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_6961, dtype="float64") /* ty=Tensor[(7, 5, 7), float64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%427, %428) /* ty=Tensor[(7, 5, 7), float64] */
}

def @func_4343(%var_4287: Tensor[(14, 9, 6), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %429 = @func_3761() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %430 = %429.0;
  %431 = cast(%var_4287, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %435 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %436 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %437 = power(%433, %434) /* ty=Tensor[(14, 9, 6), float32] */;
  %438 = %435.0;
  %439 = %436.0;
  (%437, %438, %439)
}

def @func_7912(%var_7897: int8, %var_7898: Tensor[(11, 1), int8], %var_7909: Tensor[(780), int8]) -> (Tensor[(11, 1), int8], Tensor[(780), int8], Tensor[(780), int8]) {
  %440 = cast(%var_7897, dtype="int8") /* ty=int8 */;
  %441 = cast(%var_7898, dtype="int8") /* ty=Tensor[(11, 1), int8] */;
  %442 = cast(%var_7909, dtype="int8") /* ty=Tensor[(780), int8] */;
  %443 = reshape(%442, newshape=[780]) /* ty=Tensor[(780), int8] */;
  %444 = @func_4099(%443) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(4, 13, 15), int8], Tensor[(780), int8]) */;
  %445 = bitwise_xor(%440, %441) /* ty=Tensor[(11, 1), int8] */;
  %446 = %444.2;
  (%445, %446, %var_7909)
}

def @func_4241() -> (Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) {
  %447 = @func_4135() /* ty=Tensor[(14, 9, 6), float32] */;
  %448 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %452 = floor_divide(%450, %451) /* ty=Tensor[(14, 9, 6), float32] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %454 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %455 = reshape(%454, newshape=[12, 2, 5]) /* ty=Tensor[(12, 2, 5), float64] */;
  %456 = asin(%453) /* ty=Tensor[(14, 9, 6), float32] */;
  %457 = @func_3389(%455) /* ty=Tensor[(12, 2, 5), float64] */;
  (%456, %457, meta[relay.Constant][26] /* ty=Tensor[(120), float64] */)
}

def @func_6761() -> Tensor[(14, 9, 6), float32] {
  %458 = @func_4701() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %458.0
}

def @func_7150() -> (Tensor[(14, 9, 6), float32],) {
  %459 = @func_5632() /* ty=Tensor[(14, 9, 6), float32] */;
  (%459,)
}

def @func_4099(%var_4088: Tensor[(780), int8]) -> (Tensor[(14, 9, 6), float32], Tensor[(4, 13, 15), int8], Tensor[(780), int8]) {
  %460 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %461 = cast(%var_4088, dtype="int8") /* ty=Tensor[(780), int8] */;
  %462 = reshape(%461, newshape=[4, 13, 15]) /* ty=Tensor[(4, 13, 15), int8] */;
  %463 = @func_1553(%462) /* ty=(Tensor[(4, 13, 15), int8],) */;
  %464 = %460.0;
  %465 = %463.0;
  (%464, %465, %var_4088)
}

def @func_7318(%var_7308: Tensor[(3, 7, 7), float32]) -> (Tensor[(3, 7, 7), float32],) {
  %466 = cast(%var_7308, dtype="float32") /* ty=Tensor[(3, 7, 7), float32] */;
  %467 = asinh(%466) /* ty=Tensor[(3, 7, 7), float32] */;
  (%467,)
}

def @func_4061(%var_4033: Tensor[(14, 9, 6), float32], %var_4041: Tensor[(1980), bool]) -> (Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) {
  %468 = cast(%var_4041, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %469 = reshape(%468, newshape=[12, 11, 15]) /* ty=Tensor[(12, 11, 15), bool] */;
  %470 = @func_192(%469) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) */;
  %471 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %472 = %471.0;
  %473 = cast(%var_4033, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %477 = mod(%475, %476) /* ty=Tensor[(14, 9, 6), float64] */;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %479 = atan(%478) /* ty=Tensor[(14, 9, 6), float32] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %481 = %470.0;
  %482 = sqrt(%480) /* ty=Tensor[(14, 9, 6), float32] */;
  (%481, %var_4041, %482)
}

def @func_6579(%var_6543: Tensor[(1456), float32], %var_6558: Tensor[(1080), float32]) -> (Tensor[(132), int64], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(15, 8, 9), float32], Tensor[(1080), float32], Tensor[(14, 9, 6), float32]) {
  %483 = @func_5003() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) */;
  %484 = cast(%var_6543, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %485 = reshape(%484, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float32] */;
  %486 = @func_5343(%485) /* ty=(Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) */;
  %487 = cast(%var_6558, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %488 = reshape(%487, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
  %489 = @func_2269(%488) /* ty=(Tensor[(15, 8, 9), float32],) */;
  %490 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %491 = %483.2;
  %492 = %486.1;
  %493 = %489.0;
  %494 = %490.0;
  (%491, %492, %var_6543, %493, %var_6558, %494)
}

def @func_7418(%var_7406: Tensor[(9, 220), bool]) -> (Tensor[(14, 9, 6), float32], Tensor[(12, 11, 15), bool], Tensor[(9, 220), float64]) {
  %495 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 220), bool] */, dtype="bool") /* ty=Tensor[(9, 220), bool] */;
  %496 = reshape(%495, newshape=[12, 11, 15]) /* ty=Tensor[(12, 11, 15), bool] */;
  %497 = @func_192(%496) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) */;
  %498 = cast(%var_7406, dtype="float64") /* ty=Tensor[(9, 220), float64] */;
  %499 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(9, 220), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %500 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 220), bool] */, dtype="float64") /* ty=Tensor[(9, 220), float64] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %502 = @func_5591() /* ty=Tensor[(14, 9, 6), float32] */;
  %503 = %497.0;
  %504 = divide(%500, %501) /* ty=Tensor[(9, 220), float64] */;
  (%502, %503, %504)
}

def @func_7024(%var_6980: Tensor[(8, 10, 14), float64], %var_7019: Tensor[(14, 9, 6), float32]) -> (Tensor[(8, 10, 14), float64], Tensor[(14, 9, 6), int32]) {
  %505 = cast(%var_6980, dtype="float64") /* ty=Tensor[(8, 10, 14), float64] */;
  %506 = @func_4398() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %507 = %506.0;
  %508 = cast(%var_7019, dtype="int32") /* ty=Tensor[(14, 9, 6), int32] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="int32") /* ty=Tensor[(14, 9, 6), int32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %512 = rsqrt(%505) /* ty=Tensor[(8, 10, 14), float64] */;
  %513 = multiply(%510, %511) /* ty=Tensor[(14, 9, 6), int32] */;
  (%512, %513)
}

def @func_7343() -> (Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) {
  %514 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %515 = %514.0;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %517 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 156), int8] */, dtype="int8") /* ty=Tensor[(5, 156), int8] */;
  %518 = reshape(%517, newshape=[4, 13, 15]) /* ty=Tensor[(4, 13, 15), int8] */;
  %519 = @func_1553(%518) /* ty=(Tensor[(4, 13, 15), int8],) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(4, 13, 15), float64] */;
  %522 = log10(%516) /* ty=Tensor[(14, 9, 6), float64] */;
  %523 = sin(%521) /* ty=Tensor[(4, 13, 15), float64] */;
  (%522, meta[relay.Constant][28] /* ty=Tensor[(5, 156), int8] */, %523)
}

def @func_1954(%var_1925: uint16, %var_1926: Tensor[(8, 5, 11), uint16], %var_1940: Tensor[(512), int8]) -> (Tensor[(8, 5, 11), uint8], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) {
  %524 = cast(%var_1925, dtype="uint16") /* ty=uint16 */;
  %525 = cast(%var_1926, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %526 = minimum(%524, %525) /* ty=Tensor[(8, 5, 11), uint16] */;
  %527 = cast(%var_1925, dtype="uint8") /* ty=uint8 */;
  %528 = cast(%526, dtype="uint8") /* ty=Tensor[(8, 5, 11), uint8] */;
  %529 = cast(%var_1940, dtype="int8") /* ty=Tensor[(512), int8] */;
  %530 = reshape(%529, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), int8] */;
  %531 = @func_832(%530) /* ty=(Tensor[(8, 16, 4), int8],) */;
  %532 = add(%527, %528) /* ty=Tensor[(8, 5, 11), uint8] */;
  %533 = %531.0;
  (%532, %533, %var_1940)
}

def @func_5478() -> (Tensor[(14, 9, 6), float32],) {
  %534 = @func_3761() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %535 = %534.0;
  (%535,)
}

def @func_7769(%var_7740: Tensor[(990, 1), uint8], %var_7750: Tensor[(220), float32], %var_7757: Tensor[(11, 10, 9), uint16]) -> (Tensor[(14, 9, 6), float32], Tensor[(990, 1), uint8], Tensor[(1980), float32], Tensor[(220), float32], Tensor[(1980), bool], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), bool]) {
  %536 = @func_6689() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %537 = cast(%var_7750, dtype="float32") /* ty=Tensor[(220), float32] */;
  %538 = %536.0;
  %539 = cast(%538, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %540 = cast(meta[relay.Constant][29] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %541 = reshape(%537, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float32] */;
  %542 = reshape(%539, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %543 = reshape(%540, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %544 = @func_5162(%541, %542, %543) /* ty=(Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 9, 6), float32]) */;
  %545 = cast(%var_7740, dtype="uint8") /* ty=Tensor[(990, 1), uint8] */;
  %546 = reshape(%545, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %547 = @func_722(%546) /* ty=Tensor[(11, 10, 9), uint16] */;
  %548 = cast(%var_7757, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = cast(%var_7740, dtype="uint8") /* ty=Tensor[(990, 1), uint8] */;
  %553 = reshape(%552, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %554 = @func_722(%553) /* ty=Tensor[(11, 10, 9), uint16] */;
  %555 = cast(%554, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %556 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%547, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = %544.2;
  %560 = less_equal(%550, %551) /* ty=Tensor[(11, 10, 9), bool] */;
  %561 = logical_and(%557, %558) /* ty=Tensor[(11, 10, 9), bool] */;
  (%538, %var_7740, %559, %var_7750, meta[relay.Constant][29] /* ty=Tensor[(1980), bool] */, %560, %561)
}

def @func_5885() -> (Tensor[(14, 9, 6), float32],) {
  %562 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %563 = %562.0;
  (%563,)
}

def @func_3183(%var_3168: Tensor[(1, 12, 14), float32]) -> (Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
  %564 = cast(%var_3168, dtype="float32") /* ty=Tensor[(1, 12, 14), float32] */;
  %565 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %566 = reshape(%565, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), uint64] */;
  %567 = acosh(%564) /* ty=Tensor[(1, 12, 14), float32] */;
  %568 = @func_127(%566) /* ty=Tensor[(14, 10, 6), uint64] */;
  (%567, %568, meta[relay.Constant][30] /* ty=Tensor[(840), uint64] */)
}

def @func_6841() -> (Tensor[(14, 9, 6), float32],) {
  %569 = @func_5049() /* ty=(Tensor[(14, 9, 6), uint8],) */;
  %570 = %569.0;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %572 = acos(%571) /* ty=Tensor[(14, 9, 6), float32] */;
  (%572,)
}

def @func_2863(%var_2854: Tensor[(13, 3, 1), float32], %var_2855: Tensor[(13, 3, 5), float32]) -> Tensor[(13, 3, 5), float32] {
  %573 = cast(%var_2854, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
  %574 = cast(%var_2855, dtype="float32") /* ty=Tensor[(13, 3, 5), float32] */;
  floor_divide(%573, %574) /* ty=Tensor[(13, 3, 5), float32] */
}

def @func_6642(%var_6619: Tensor[(2, 616), float32]) -> (Tensor[(14, 9, 6), float64], Tensor[(14, 11, 8), float32], Tensor[(2, 616), float32]) {
  %575 = @func_6345() /* ty=(Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float64]) */;
  %576 = cast(%var_6619, dtype="float32") /* ty=Tensor[(2, 616), float32] */;
  %577 = reshape(%576, newshape=[14, 11, 8]) /* ty=Tensor[(14, 11, 8), float32] */;
  %578 = %575.1;
  %579 = @func_4203(%577) /* ty=Tensor[(14, 11, 8), float32] */;
  (%578, %579, %var_6619)
}

def @func_7564() -> Tensor[(14, 9, 6), float32] {
  @func_7496() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_5974(%var_5934: Tensor[(3, 4, 14), uint16]) -> (Tensor[(3, 4, 14), uint16], Tensor[(1456), uint8], Tensor[(3, 4, 14), float64]) {
  %580 = cast(%var_5934, dtype="uint16") /* ty=Tensor[(3, 4, 14), uint16] */;
  %581 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 4, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 4, 14), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4, 14), uint16] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %584 = cast(meta[relay.Constant][32] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %585 = reshape(%584, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float32] */;
  %586 = @func_5343(%585) /* ty=(Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) */;
  %587 = %586.0;
  %588 = cast(%587, dtype="uint8") /* ty=Tensor[(14, 8, 13), uint8] */;
  %589 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(1456), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %590 = cast(meta[relay.Constant][32] /* ty=Tensor[(1456), float32] */, dtype="uint8") /* ty=Tensor[(1456), uint8] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %592 = cast(%var_5934, dtype="float64") /* ty=Tensor[(3, 4, 14), float64] */;
  %593 = right_shift(%582, %583) /* ty=Tensor[(3, 4, 14), uint16] */;
  %594 = maximum(%590, %591) /* ty=Tensor[(1456), uint8] */;
  %595 = log(%592) /* ty=Tensor[(3, 4, 14), float64] */;
  (%593, %594, %595)
}

def @func_722(%var_696: Tensor[(11, 10, 9), uint8]) -> Tensor[(11, 10, 9), uint16] {
  %596 = cast(%var_696, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %597 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 10, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 10, 9), uint8] */, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = greater(%598, %599) /* ty=Tensor[(11, 10, 9), bool] */;
  %601 = cast(%var_696, dtype="uint16") /* ty=Tensor[(11, 10, 9), uint16] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="uint16") /* ty=Tensor[(11, 10, 9), uint16] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%603, %604) /* ty=Tensor[(11, 10, 9), uint16] */
}

def @func_2269(%var_2265: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32],) {
  %605 = cast(%var_2265, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %606 = cosh(%605) /* ty=Tensor[(15, 8, 9), float32] */;
  (%606,)
}

def @func_4542() -> (Tensor[(14, 9, 6), float32],) {
  %607 = @func_4135() /* ty=Tensor[(14, 9, 6), float32] */;
  (%607,)
}

def @func_4701() -> (Tensor[(14, 9, 6), float32],) {
  %608 = @func_4283() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %609 = %608.0;
  (%609,)
}

def @func_5632() -> Tensor[(14, 9, 6), float32] {
  %610 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %610.1
}

def @func_4283() -> (Tensor[(14, 9, 6), float32],) {
  %611 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %612 = %611.0;
  (%612,)
}

def @func_1553(%var_1548: Tensor[(4, 13, 15), int8]) -> (Tensor[(4, 13, 15), int8],) {
  %613 = cast(%var_1548, dtype="int8") /* ty=Tensor[(4, 13, 15), int8] */;
  %614 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 13, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 13, 15), int8] */, dtype="int8") /* ty=Tensor[(4, 13, 15), int8] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %617 = right_shift(%615, %616) /* ty=Tensor[(4, 13, 15), int8] */;
  (%617,)
}

def @func_7296() -> (Tensor[(14, 9, 6), float64],) {
  %618 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %619 = %618.0;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %621 = exp(%620) /* ty=Tensor[(14, 9, 6), float64] */;
  (%621,)
}

def @func_4770() -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %622 = @func_4542() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %623 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %624 = %622.0;
  %625 = %623.0;
  (%624, %625)
}

def @func_7240() -> (Tensor[(14, 9, 6), float64],) {
  %626 = @func_5478() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %627 = %626.0;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %629 = sigmoid(%628) /* ty=Tensor[(14, 9, 6), float64] */;
  (%629,)
}

def @func_3220(%var_3205: Tensor[(2, 11, 6), int64]) -> (Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) {
  %630 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 11, 1), int64] */, dtype="bool") /* ty=Tensor[(2, 11, 1), bool] */;
  %631 = cast(%var_3205, dtype="bool") /* ty=Tensor[(2, 11, 6), bool] */;
  %632 = cast(%var_3205, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
  %633 = less_equal(%630, %631) /* ty=Tensor[(2, 11, 6), bool] */;
  %634 = sin(%632) /* ty=Tensor[(2, 11, 6), float64] */;
  (%633, %634)
}

def @func_5311(%var_5306: Tensor[(12, 2, 10), float64]) -> (Tensor[(12, 2, 10), float64],) {
  %635 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %636 = shape_of(%var_5306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_5306, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %639 = power(%637, %638) /* ty=Tensor[(12, 2, 10), float64] */;
  (%639,)
}

def @func_5301() -> (Tensor[(120), float64],) {
  %640 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %641 = %640.2;
  (%641,)
}

def @func_5224(%var_5181: Tensor[(6, 6, 12), uint32], %var_5182: Tensor[(6, 6, 12), uint32]) -> (Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], uint64) {
  %642 = cast(%var_5182, dtype="uint32") /* ty=Tensor[(6, 6, 12), uint32] */;
  %643 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_5181, dtype="uint32") /* ty=Tensor[(6, 6, 12), uint32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %646 = add(%644, %645) /* ty=Tensor[(6, 6, 12), uint32] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
  %648 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_5182, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %651 = cast(meta[relay.Constant][37] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %652 = reshape(%651, newshape=[]) /* ty=uint64 */;
  %653 = @func_3847(%652) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) */;
  %654 = power(%649, %650) /* ty=Tensor[(6, 6, 12), float32] */;
  %655 = %653.0;
  (%654, %655, meta[relay.Constant][37] /* ty=uint64 */)
}

def @func_348(%var_343: Tensor[(8, 14, 7), float32]) -> (Tensor[(8, 14, 7), float32],) {
  %656 = cast(%var_343, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %657 = rsqrt(%656) /* ty=Tensor[(8, 14, 7), float32] */;
  (%657,)
}

def @func_5049() -> (Tensor[(14, 9, 6), uint8],) {
  %658 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %659 = %658.1;
  %660 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 9, 6), float32] */, dtype="uint8") /* ty=Tensor[(14, 9, 6), uint8] */;
  %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%659, dtype="uint8") /* ty=Tensor[(14, 9, 6), uint8] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %664 = bitwise_or(%662, %663) /* ty=Tensor[(14, 9, 6), uint8] */;
  (%664,)
}

def @func_4797(%var_4793: Tensor[(4, 13, 9), float32]) -> Tensor[(4, 13, 9), float32] {
  %665 = cast(%var_4793, dtype="float32") /* ty=Tensor[(4, 13, 9), float32] */;
  log(%665) /* ty=Tensor[(4, 13, 9), float32] */
}

def @func_5591() -> Tensor[(14, 9, 6), float32] {
  %666 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %666.0
}

def @func_3761() -> (Tensor[(14, 9, 6), float32],) {
  %667 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %670 = log2(%669) /* ty=Tensor[(14, 9, 6), float32] */;
  (%670,)
}

def @func_7095() -> (Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float32]) {
  %671 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %672 = %671.1;
  %673 = @func_6761() /* ty=Tensor[(14, 9, 6), float32] */;
  (%672, %673)
}

def @func_2410(%var_2346: Tensor[(2, 12, 1), float64], %var_2350: uint16, %var_2352: Tensor[(512), int8], %var_2372: Tensor[(432), float32], %var_2395: Tensor[(165), float32], %var_2404: Tensor[(500), float32]) -> (Tensor[(512), int8], uint16, Tensor[(440), uint16], Tensor[(512), int8], Tensor[(9, 3, 16), uint64], Tensor[(432), float32], Tensor[(840), uint64], Tensor[(2, 12, 1), float64], Tensor[(11, 15), float32], Tensor[(165), float32], Tensor[(2, 12, 1), float64], Tensor[(8, 5, 5), uint16], Tensor[(200, 1), uint16], Tensor[(500), float32]) {
  %674 = cast(%var_2350, dtype="uint16") /* ty=uint16 */;
  %675 = cast(meta[relay.Constant][39] /* ty=Tensor[(440), uint16] */, dtype="uint16") /* ty=Tensor[(440), uint16] */;
  %676 = cast(%var_2352, dtype="int8") /* ty=Tensor[(512), int8] */;
  %677 = reshape(%674, newshape=[]) /* ty=uint16 */;
  %678 = reshape(%675, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
  %679 = reshape(%676, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %680 = @func_1954(%677, %678, %679) /* ty=(Tensor[(8, 5, 11), uint8], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) */;
  %681 = cast(%var_2372, dtype="float32") /* ty=Tensor[(432), float32] */;
  %682 = cast(%var_2372, dtype="float32") /* ty=Tensor[(432), float32] */;
  %683 = cast(%var_2372, dtype="int32") /* ty=Tensor[(432), int32] */;
  %684 = cast(meta[relay.Constant][40] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %685 = reshape(%681, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float32] */;
  %686 = reshape(%682, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float32] */;
  %687 = reshape(%683, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), int32] */;
  %688 = reshape(%684, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %689 = @func_297(%685, %686, %687, %688) /* ty=(Tensor[(9, 3, 16), uint64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */;
  %690 = cast(%var_2346, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %691 = cos(%690) /* ty=Tensor[(2, 12, 1), float64] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %693 = cast(%var_2395, dtype="float32") /* ty=Tensor[(165), float32] */;
  %694 = reshape(%693, newshape=[11, 15]) /* ty=Tensor[(11, 15), float32] */;
  %695 = @func_925(%694) /* ty=(Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) */;
  %696 = cast(%691, dtype="float32") /* ty=Tensor[(2, 12, 1), float32] */;
  %697 = tan(%696) /* ty=Tensor[(2, 12, 1), float32] */;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %699 = cast(meta[relay.Constant][41] /* ty=Tensor[(200, 1), uint16] */, dtype="uint16") /* ty=Tensor[(200, 1), uint16] */;
  %700 = cast(meta[relay.Constant][41] /* ty=Tensor[(200, 1), uint16] */, dtype="uint16") /* ty=Tensor[(200, 1), uint16] */;
  %701 = cast(%var_2404, dtype="float32") /* ty=Tensor[(500), float32] */;
  %702 = reshape(%699, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %703 = reshape(%700, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %704 = reshape(%701, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %705 = @func_1061(%702, %703, %704) /* ty=(Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %706 = %680.2;
  %707 = %689.0;
  %708 = erf(%692) /* ty=Tensor[(2, 12, 1), float64] */;
  %709 = %695.0;
  %710 = cosh(%698) /* ty=Tensor[(2, 12, 1), float64] */;
  %711 = %705.0;
  (%706, %var_2350, meta[relay.Constant][39] /* ty=Tensor[(440), uint16] */, %var_2352, %707, %var_2372, meta[relay.Constant][40] /* ty=Tensor[(840), uint64] */, %708, %709, %var_2395, %710, %711, meta[relay.Constant][41] /* ty=Tensor[(200, 1), uint16] */, %var_2404)
}

def @func_5003() -> (Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) {
  %712 = @func_4188() /* ty=Tensor[(14, 9, 6), float32] */;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %714 = cast(meta[relay.Constant][42] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
  %715 = reshape(%714, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), int64] */;
  %716 = @func_3220(%715) /* ty=(Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) */;
  %717 = asinh(%713) /* ty=Tensor[(14, 9, 6), float64] */;
  %718 = %716.1;
  (%717, %718, meta[relay.Constant][42] /* ty=Tensor[(132), int64] */)
}

def @func_5275() -> Tensor[(14, 9, 6), float32] {
  @func_5241() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_297(%var_277: Tensor[(9, 3, 16), float32], %var_278: Tensor[(9, 3, 16), float32], %var_286: Tensor[(9, 3, 16), int32], %var_294: Tensor[(840), uint64]) -> (Tensor[(9, 3, 16), uint64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
  %719 = cast(%var_278, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %720 = shape_of(%var_277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_277, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %723 = power(%721, %722) /* ty=Tensor[(9, 3, 16), float32] */;
  %724 = cast(%var_277, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %728 = left_shift(%726, %727) /* ty=Tensor[(9, 3, 16), int32] */;
  %729 = cast(%var_286, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%728, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %733 = cast(%var_294, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %734 = reshape(%733, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), uint64] */;
  %735 = multiply(%731, %732) /* ty=Tensor[(9, 3, 16), uint64] */;
  %736 = @func_127(%734) /* ty=Tensor[(14, 10, 6), uint64] */;
  (%735, %736, %var_294)
}

def @func_192(%var_179: Tensor[(12, 11, 15), bool]) -> (Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) {
  %737 = cast(%var_179, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %738 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(12, 11, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 11, 15), bool] */, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %741 = cast(%var_179, dtype="float64") /* ty=Tensor[(12, 11, 15), float64] */;
  %742 = logical_or(%739, %740) /* ty=Tensor[(12, 11, 15), bool] */;
  %743 = log(%741) /* ty=Tensor[(12, 11, 15), float64] */;
  (%742, %743)
}

def @func_6424() -> (Tensor[(14, 9, 6), float32],) {
  %744 = @func_6182() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %745 = %744.2;
  (%745,)
}

def @func_925(%var_909: Tensor[(11, 15), float32]) -> (Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) {
  %746 = cast(%var_909, dtype="float32") /* ty=Tensor[(11, 15), float32] */;
  %747 = cast(meta[relay.Constant][44] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %748 = reshape(%747, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), float32] */;
  %749 = @func_348(%748) /* ty=(Tensor[(8, 14, 7), float32],) */;
  %750 = log2(%746) /* ty=Tensor[(11, 15), float32] */;
  %751 = %749.0;
  (%750, %751, meta[relay.Constant][44] /* ty=Tensor[(784), float32] */)
}

def @func_7989() -> (Tensor[(14, 9, 6), float32],) {
  %752 = @func_7482() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(432), float64], Tensor[(14, 9, 6), float32]) */;
  %753 = %752.0;
  (%753,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1555(%var_1554: Tensor[(4, 13, 15), int8]) -> (Tensor[(4, 13, 15), int8],) {
  %5 = fn (%var_1548: Tensor[(4, 13, 15), int8]) -> (Tensor[(4, 13, 15), int8],) {
    %0 = cast(%var_1548, dtype="int8") /* ty=Tensor[(4, 13, 15), int8] */;
    %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 13, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 13, 15), int8] */, dtype="int8") /* ty=Tensor[(4, 13, 15), int8] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %4 = right_shift(%2, %3) /* ty=Tensor[(4, 13, 15), int8] */;
    (%4,)
  };
  %5(%var_1554) /* ty=(Tensor[(4, 13, 15), int8],) */
}

def @func_3802() -> (Tensor[(14, 9, 6), float32],) {
  %6 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %7 = %6.0;
  (%7,)
}

def @func_3847(%var_3842: uint64) -> (Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) {
  %8 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %10 = reshape(%9, newshape=[11, 15]) /* ty=Tensor[(11, 15), float32] */;
  %11 = @func_925(%10) /* ty=(Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) */;
  %12 = cast(%var_3842, dtype="uint64") /* ty=uint64 */;
  %13 = reshape(%12, newshape=[]) /* ty=uint64 */;
  %14 = @func_3715(%13) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) */;
  %15 = %8.0;
  %16 = %11.1;
  %17 = %14.0;
  (%15, %16, meta[relay.Constant][1] /* ty=Tensor[(165), float32] */, %17, %var_3842)
}

def @func_5050() -> (Tensor[(14, 9, 6), uint8],) {
  %25 = fn () -> (Tensor[(14, 9, 6), uint8],) {
    %18 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
    %19 = %18.1;
    %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 9, 6), float32] */, dtype="uint8") /* ty=Tensor[(14, 9, 6), uint8] */;
    %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %22 = cast(%19, dtype="uint8") /* ty=Tensor[(14, 9, 6), uint8] */;
    %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %24 = bitwise_or(%22, %23) /* ty=Tensor[(14, 9, 6), uint8] */;
    (%24,)
  };
  %25() /* ty=(Tensor[(14, 9, 6), uint8],) */
}

def @func_5715() -> (Tensor[(14, 9, 6), int16], Tensor[(?, 12, 14), float32]) {
  @func_5713() /* ty=(Tensor[(14, 9, 6), int16], Tensor[(?, 12, 14), float32]) */
}

def @func_3220(%var_3205: Tensor[(2, 11, 6), int64]) -> (Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) {
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 11, 1), int64] */, dtype="bool") /* ty=Tensor[(2, 11, 1), bool] */;
  %27 = cast(%var_3205, dtype="bool") /* ty=Tensor[(2, 11, 6), bool] */;
  %28 = cast(%var_3205, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
  %29 = less_equal(%26, %27) /* ty=Tensor[(2, 11, 6), bool] */;
  %30 = sin(%28) /* ty=Tensor[(2, 11, 6), float64] */;
  (%29, %30)
}

def @func_4858() -> Tensor[(14, 9, 6), float32] {
  %31 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %31.0
}

def @func_5506() -> (Tensor[(14, 9, 6), float32],) {
  %32 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %33 = %32.0;
  (%33,)
}

def @func_7096() -> (Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float32]) {
  %37 = fn () -> (Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float32]) {
    %34 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
    %35 = %34.1;
    %36 = @func_6761() /* ty=Tensor[(14, 9, 6), float32] */;
    (%35, %36)
  };
  %37() /* ty=(Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float32]) */
}

def @func_6642(%var_6619: Tensor[(2, 616), float32]) -> (Tensor[(14, 9, 6), float64], Tensor[(14, 11, 8), float32], Tensor[(2, 616), float32]) {
  %38 = @func_6345() /* ty=(Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float64]) */;
  %39 = cast(%var_6619, dtype="float32") /* ty=Tensor[(2, 616), float32] */;
  %40 = reshape(%39, newshape=[14, 11, 8]) /* ty=Tensor[(14, 11, 8), float32] */;
  %41 = %38.1;
  %42 = @func_4203(%40) /* ty=Tensor[(14, 11, 8), float32] */;
  (%41, %42, %var_6619)
}

def @func_722(%var_696: Tensor[(11, 10, 9), uint8]) -> Tensor[(11, 10, 9), uint16] {
  %43 = cast(%var_696, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %44 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(11, 10, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 10, 9), uint8] */, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = greater(%45, %46) /* ty=Tensor[(11, 10, 9), bool] */;
  %48 = cast(%var_696, dtype="uint16") /* ty=Tensor[(11, 10, 9), uint16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="uint16") /* ty=Tensor[(11, 10, 9), uint16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%50, %51) /* ty=Tensor[(11, 10, 9), uint16] */
}

def @func_2272(%var_2270: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32],) {
  @func_2269(%var_2270) /* ty=(Tensor[(15, 8, 9), float32],) */
}

def @func_6132() -> (Tensor[(14, 9, 6), float32],) {
  @func_6130() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_725(%var_723: Tensor[(11, 10, 9), uint8]) -> Tensor[(11, 10, 9), uint16] {
  @func_722(%var_723) /* ty=Tensor[(11, 10, 9), uint16] */
}

def @func_6689() -> (Tensor[(14, 9, 6), float32],) {
  %52 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %53 = %52.0;
  (%53,)
}

def @func_6066() -> Tensor[(14, 9, 6), float32] {
  @func_4858() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_6583(%var_6581: Tensor[(1456), float32], %var_6582: Tensor[(1080), float32]) -> (Tensor[(132), int64], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(15, 8, 9), float32], Tensor[(1080), float32], Tensor[(14, 9, 6), float32]) {
  @func_6579(%var_6581, %var_6582) /* ty=(Tensor[(132), int64], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(15, 8, 9), float32], Tensor[(1080), float32], Tensor[(14, 9, 6), float32]) */
}

def @func_7345() -> (Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) {
  @func_7343() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) */
}

def @func_6645(%var_6643: Tensor[(2, 616), float32]) -> (Tensor[(14, 9, 6), float64], Tensor[(14, 11, 8), float32], Tensor[(2, 616), float32]) {
  @func_6642(%var_6643) /* ty=(Tensor[(14, 9, 6), float64], Tensor[(14, 11, 8), float32], Tensor[(2, 616), float32]) */
}

def @func_5311(%var_5306: Tensor[(12, 2, 10), float64]) -> (Tensor[(12, 2, 10), float64],) {
  %54 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 2, 10), float64] */, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %55 = shape_of(%var_5306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_5306, dtype="float64") /* ty=Tensor[(12, 2, 10), float64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %58 = power(%56, %57) /* ty=Tensor[(12, 2, 10), float64] */;
  (%58,)
}

def @func_2746(%var_2744: Tensor[(5, 10), float64], %var_2745: Tensor[(840), uint64]) -> (Tensor[(5, 10), float64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
  %64 = fn (%var_2728: Tensor[(5, 10), float64], %var_2736: Tensor[(840), uint64]) -> (Tensor[(5, 10), float64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
    %59 = cast(%var_2728, dtype="float64") /* ty=Tensor[(5, 10), float64] */;
    %60 = cast(%var_2736, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %61 = reshape(%60, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), uint64] */;
    %62 = cosh(%59) /* ty=Tensor[(5, 10), float64] */;
    %63 = @func_127(%61) /* ty=Tensor[(14, 10, 6), uint64] */;
    (%62, %63, %var_2736)
  };
  %64(%var_2744, %var_2745) /* ty=(Tensor[(5, 10), float64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */
}

def @func_5553() -> (Tensor[(14, 9, 6), float32],) {
  %67 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %65 = @func_4398() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %66 = %65.0;
    (%66,)
  };
  %67() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_1954(%var_1925: uint16, %var_1926: Tensor[(8, 5, 11), uint16], %var_1940: Tensor[(512), int8]) -> (Tensor[(8, 5, 11), uint8], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) {
  %68 = cast(%var_1925, dtype="uint16") /* ty=uint16 */;
  %69 = cast(%var_1926, dtype="uint16") /* ty=Tensor[(8, 5, 11), uint16] */;
  %70 = minimum(%68, %69) /* ty=Tensor[(8, 5, 11), uint16] */;
  %71 = cast(%var_1925, dtype="uint8") /* ty=uint8 */;
  %72 = cast(%70, dtype="uint8") /* ty=Tensor[(8, 5, 11), uint8] */;
  %73 = cast(%var_1940, dtype="int8") /* ty=Tensor[(512), int8] */;
  %74 = reshape(%73, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), int8] */;
  %75 = @func_832(%74) /* ty=(Tensor[(8, 16, 4), int8],) */;
  %76 = add(%71, %72) /* ty=Tensor[(8, 5, 11), uint8] */;
  %77 = %75.0;
  (%76, %77, %var_1940)
}

def @func_5346(%var_5344: Tensor[(14, 8, 13), float32]) -> (Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) {
  @func_5343(%var_5344) /* ty=(Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) */
}

def @func_4179() -> (Tensor[(14, 9, 6), float32],) {
  @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_7991() -> (Tensor[(14, 9, 6), float32],) {
  @func_7989() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_4771() -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %82 = fn () -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
    %78 = @func_4542() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %79 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %80 = %78.0;
    %81 = %79.0;
    (%80, %81)
  };
  %82() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */
}

def @func_4135() -> Tensor[(14, 9, 6), float32] {
  %83 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %83.0
}

def @func_5885() -> (Tensor[(14, 9, 6), float32],) {
  %84 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %85 = %84.0;
  (%85,)
}

def @func_5242() -> Tensor[(14, 9, 6), float32] {
  %86 = fn () -> Tensor[(14, 9, 6), float32] {
    @func_4188() /* ty=Tensor[(14, 9, 6), float32] */
  };
  %86() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_4860() -> Tensor[(14, 9, 6), float32] {
  @func_4858() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_834(%var_833: Tensor[(8, 16, 4), int8]) -> (Tensor[(8, 16, 4), int8],) {
  %90 = fn (%var_823: Tensor[(8, 16, 4), int8]) -> (Tensor[(8, 16, 4), int8],) {
    %87 = cast(meta[relay.Constant][6] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %88 = cast(%var_823, dtype="int8") /* ty=Tensor[(8, 16, 4), int8] */;
    %89 = add(%87, %88) /* ty=Tensor[(8, 16, 4), int8] */;
    (%89,)
  };
  %90(%var_833) /* ty=(Tensor[(8, 16, 4), int8],) */
}

def @func_302(%var_298: Tensor[(9, 3, 16), float32], %var_299: Tensor[(9, 3, 16), float32], %var_300: Tensor[(9, 3, 16), int32], %var_301: Tensor[(840), uint64]) -> (Tensor[(9, 3, 16), uint64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
  %109 = fn (%var_277: Tensor[(9, 3, 16), float32], %var_278: Tensor[(9, 3, 16), float32], %var_286: Tensor[(9, 3, 16), int32], %var_294: Tensor[(840), uint64]) -> (Tensor[(9, 3, 16), uint64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
    %91 = cast(%var_278, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
    %92 = shape_of(%var_277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %93 = cast(%var_277, dtype="float32") /* ty=Tensor[(9, 3, 16), float32] */;
    %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %95 = power(%93, %94) /* ty=Tensor[(9, 3, 16), float32] */;
    %96 = cast(%var_277, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
    %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(%95, dtype="int32") /* ty=Tensor[(9, 3, 16), int32] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %100 = left_shift(%98, %99) /* ty=Tensor[(9, 3, 16), int32] */;
    %101 = cast(%var_286, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
    %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %103 = cast(%100, dtype="uint64") /* ty=Tensor[(9, 3, 16), uint64] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %105 = cast(%var_294, dtype="uint64") /* ty=Tensor[(840), uint64] */;
    %106 = reshape(%105, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), uint64] */;
    %107 = multiply(%103, %104) /* ty=Tensor[(9, 3, 16), uint64] */;
    %108 = @func_127(%106) /* ty=Tensor[(14, 10, 6), uint64] */;
    (%107, %108, %var_294)
  };
  %109(%var_298, %var_299, %var_300, %var_301) /* ty=(Tensor[(9, 3, 16), uint64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */
}

def @func_7211(%var_7208: Tensor[(6, 14, 2), float32], %var_7209: Tensor[(756), float32], %var_7210: Tensor[(240), float64]) -> (Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), bool], Tensor[(6, 14, 2), bool], Tensor[(12, 2, 10), float64], Tensor[(240), float64]) {
  %132 = fn (%var_7179: Tensor[(6, 14, 2), float32], %var_7186: Tensor[(756), float32], %var_7205: Tensor[(240), float64]) -> (Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), bool], Tensor[(6, 14, 2), bool], Tensor[(12, 2, 10), float64], Tensor[(240), float64]) {
    %110 = cast(%var_7186, dtype="float32") /* ty=Tensor[(756), float32] */;
    %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
    %112 = reshape(%110, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
    %113 = reshape(%111, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
    %114 = @func_4061(%112, %113) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
    %115 = cast(%var_7179, dtype="float32") /* ty=Tensor[(6, 14, 2), float32] */;
    %116 = erf(%115) /* ty=Tensor[(6, 14, 2), float32] */;
    %117 = cast(%116, dtype="int16") /* ty=Tensor[(6, 14, 2), int16] */;
    %118 = shape_of(%var_7179, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%var_7179, dtype="int16") /* ty=Tensor[(6, 14, 2), int16] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %121 = bitwise_or(%119, %120) /* ty=Tensor[(6, 14, 2), int16] */;
    %122 = cast(%121, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
    %123 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%116, dtype="bool") /* ty=Tensor[(6, 14, 2), bool] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %126 = cast(%var_7205, dtype="float64") /* ty=Tensor[(240), float64] */;
    %127 = reshape(%126, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), float64] */;
    %128 = @func_5311(%127) /* ty=(Tensor[(12, 2, 10), float64],) */;
    %129 = %114.1;
    %130 = less_equal(%124, %125) /* ty=Tensor[(6, 14, 2), bool] */;
    %131 = %128.0;
    (%129, %var_7186, meta[relay.Constant][7] /* ty=Tensor[(1980), bool] */, %130, %131, %var_7205)
  };
  %132(%var_7208, %var_7209, %var_7210) /* ty=(Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), bool], Tensor[(6, 14, 2), bool], Tensor[(12, 2, 10), float64], Tensor[(240), float64]) */
}

def @func_6972(%var_6970: Tensor[(7, 5, 7), float64], %var_6971: Tensor[(7, 5, 7), float64]) -> Tensor[(7, 5, 7), float64] {
  @func_6968(%var_6970, %var_6971) /* ty=Tensor[(7, 5, 7), float64] */
}

def @func_6691() -> (Tensor[(14, 9, 6), float32],) {
  @func_6689() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_6515() -> (Tensor[(14, 9, 6), float32],) {
  %133 = @func_4858() /* ty=Tensor[(14, 9, 6), float32] */;
  (%133,)
}

def @func_5977(%var_5975: Tensor[(3, 4, 14), uint16]) -> (Tensor[(3, 4, 14), uint16], Tensor[(1456), uint8], Tensor[(3, 4, 14), float64]) {
  @func_5974(%var_5975) /* ty=(Tensor[(3, 4, 14), uint16], Tensor[(1456), uint8], Tensor[(3, 4, 14), float64]) */
}

def @func_5162(%var_5135: Tensor[(5, 11, 4), float32], %var_5145: Tensor[(756), float32], %var_5146: Tensor[(1980), bool]) -> (Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 9, 6), float32]) {
  %134 = cast(%var_5145, dtype="float32") /* ty=Tensor[(756), float32] */;
  %135 = cast(%var_5146, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %136 = reshape(%134, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %137 = reshape(%135, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %138 = @func_4061(%136, %137) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %139 = cast(meta[relay.Constant][8] /* ty=Tensor[(1980), bool] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %140 = shape_of(%var_5146, dtype="int32") /* ty=Tensor[(1), int32] */;
  %141 = cast(%var_5146, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?), float32] */;
  %143 = cast(%var_5135, dtype="float32") /* ty=Tensor[(5, 11, 4), float32] */;
  %144 = acosh(%143) /* ty=Tensor[(5, 11, 4), float32] */;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(5, 11, 4), float64] */;
  %146 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %147 = %138.1;
  %148 = floor_mod(%141, %142) /* ty=Tensor[(1980), float32] */;
  %149 = rsqrt(%145) /* ty=Tensor[(5, 11, 4), float64] */;
  %150 = %146.0;
  (%147, %var_5145, %148, %149, %150)
}

def @func_5093(%var_5078: Tensor[(468), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(4, 13, 9), float32], Tensor[(468), float32]) {
  %151 = @func_3761() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %152 = cast(%var_5078, dtype="float32") /* ty=Tensor[(468), float32] */;
  %153 = reshape(%152, newshape=[4, 13, 9]) /* ty=Tensor[(4, 13, 9), float32] */;
  %154 = %151.0;
  %155 = @func_4797(%153) /* ty=Tensor[(4, 13, 9), float32] */;
  (%154, %155, %var_5078)
}

def @func_5005() -> (Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) {
  @func_5003() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) */
}

def @func_7940() -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %156 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %157 = @func_6066() /* ty=Tensor[(14, 9, 6), float32] */;
  %158 = %156.1;
  (%157, %158)
}

def @func_4345(%var_4344: Tensor[(14, 9, 6), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %170 = fn (%var_4287: Tensor[(14, 9, 6), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
    %159 = @func_3761() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %160 = %159.0;
    %161 = cast(%var_4287, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
    %163 = cast(%160, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %165 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %166 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %167 = power(%163, %164) /* ty=Tensor[(14, 9, 6), float32] */;
    %168 = %165.0;
    %169 = %166.0;
    (%167, %168, %169)
  };
  %170(%var_4344) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */
}

def @func_7565() -> Tensor[(14, 9, 6), float32] {
  %171 = fn () -> Tensor[(14, 9, 6), float32] {
    @func_7496() /* ty=Tensor[(14, 9, 6), float32] */
  };
  %171() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_195(%var_193: Tensor[(12, 11, 15), bool]) -> (Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) {
  @func_192(%var_193) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) */
}

def @func_5303() -> (Tensor[(120), float64],) {
  @func_5301() /* ty=(Tensor[(120), float64],) */
}

def @func_7151() -> (Tensor[(14, 9, 6), float32],) {
  %173 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %172 = @func_5632() /* ty=Tensor[(14, 9, 6), float32] */;
    (%172,)
  };
  %173() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_7769(%var_7740: Tensor[(990, 1), uint8], %var_7750: Tensor[(220), float32], %var_7757: Tensor[(11, 10, 9), uint16]) -> (Tensor[(14, 9, 6), float32], Tensor[(990, 1), uint8], Tensor[(1980), float32], Tensor[(220), float32], Tensor[(1980), bool], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), bool]) {
  %174 = @func_6689() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %175 = cast(%var_7750, dtype="float32") /* ty=Tensor[(220), float32] */;
  %176 = %174.0;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %179 = reshape(%175, newshape=[5, 11, 4]) /* ty=Tensor[(5, 11, 4), float32] */;
  %180 = reshape(%177, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %181 = reshape(%178, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %182 = @func_5162(%179, %180, %181) /* ty=(Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 9, 6), float32]) */;
  %183 = cast(%var_7740, dtype="uint8") /* ty=Tensor[(990, 1), uint8] */;
  %184 = reshape(%183, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %185 = @func_722(%184) /* ty=Tensor[(11, 10, 9), uint16] */;
  %186 = cast(%var_7757, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = cast(%var_7740, dtype="uint8") /* ty=Tensor[(990, 1), uint8] */;
  %191 = reshape(%190, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %192 = @func_722(%191) /* ty=Tensor[(11, 10, 9), uint16] */;
  %193 = cast(%192, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %194 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%185, dtype="bool") /* ty=Tensor[(11, 10, 9), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %197 = %182.2;
  %198 = less_equal(%188, %189) /* ty=Tensor[(11, 10, 9), bool] */;
  %199 = logical_and(%195, %196) /* ty=Tensor[(11, 10, 9), bool] */;
  (%176, %var_7740, %197, %var_7750, meta[relay.Constant][9] /* ty=Tensor[(1980), bool] */, %198, %199)
}

def @func_5275() -> Tensor[(14, 9, 6), float32] {
  @func_5241() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_3183(%var_3168: Tensor[(1, 12, 14), float32]) -> (Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
  %200 = cast(%var_3168, dtype="float32") /* ty=Tensor[(1, 12, 14), float32] */;
  %201 = cast(meta[relay.Constant][10] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %202 = reshape(%201, newshape=[14, 10, 6]) /* ty=Tensor[(14, 10, 6), uint64] */;
  %203 = acosh(%200) /* ty=Tensor[(1, 12, 14), float32] */;
  %204 = @func_127(%202) /* ty=Tensor[(14, 10, 6), uint64] */;
  (%203, %204, meta[relay.Constant][10] /* ty=Tensor[(840), uint64] */)
}

def @func_4606(%var_4603: Tensor[(320), float32], %var_4604: Tensor[(120, 1), float64], %var_4605: Tensor[(168), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(12, 2, 5), float64], Tensor[(120, 1), float64], Tensor[(840), uint64], Tensor[(168), float32]) {
  @func_4601(%var_4603, %var_4604, %var_4605) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(12, 2, 5), float64], Tensor[(120, 1), float64], Tensor[(840), uint64], Tensor[(168), float32]) */
}

def @func_4284() -> (Tensor[(14, 9, 6), float32],) {
  %207 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %205 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %206 = %205.0;
    (%206,)
  };
  %207() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_3660() -> (Tensor[(14, 9, 6), float32],) {
  @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_7027(%var_7025: Tensor[(8, 10, 14), float64], %var_7026: Tensor[(14, 9, 6), float32]) -> (Tensor[(8, 10, 14), float64], Tensor[(14, 9, 6), int32]) {
  %217 = fn (%var_6980: Tensor[(8, 10, 14), float64], %var_7019: Tensor[(14, 9, 6), float32]) -> (Tensor[(8, 10, 14), float64], Tensor[(14, 9, 6), int32]) {
    %208 = cast(%var_6980, dtype="float64") /* ty=Tensor[(8, 10, 14), float64] */;
    %209 = @func_4398() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %210 = %209.0;
    %211 = cast(%var_7019, dtype="int32") /* ty=Tensor[(14, 9, 6), int32] */;
    %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %213 = cast(%210, dtype="int32") /* ty=Tensor[(14, 9, 6), int32] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %215 = rsqrt(%208) /* ty=Tensor[(8, 10, 14), float64] */;
    %216 = multiply(%213, %214) /* ty=Tensor[(14, 9, 6), int32] */;
    (%215, %216)
  };
  %217(%var_7025, %var_7026) /* ty=(Tensor[(8, 10, 14), float64], Tensor[(14, 9, 6), int32]) */
}

def @func_4399() -> (Tensor[(14, 9, 6), float32],) {
  %220 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %218 = @func_4177() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %219 = %218.0;
    (%219,)
  };
  %220() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_3389(%var_3374: Tensor[(12, 2, 5), float64]) -> Tensor[(12, 2, 5), float64] {
  %221 = cast(%var_3374, dtype="float64") /* ty=Tensor[(12, 2, 5), float64] */;
  asin(%221) /* ty=Tensor[(12, 2, 5), float64] */
}

def @func_4242() -> (Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) {
  %233 = fn () -> (Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) {
    %222 = @func_4135() /* ty=Tensor[(14, 9, 6), float32] */;
    %223 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %225 = cast(%222, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %227 = floor_divide(%225, %226) /* ty=Tensor[(14, 9, 6), float32] */;
    %228 = cast(%227, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %229 = cast(meta[relay.Constant][12] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
    %230 = reshape(%229, newshape=[12, 2, 5]) /* ty=Tensor[(12, 2, 5), float64] */;
    %231 = asin(%228) /* ty=Tensor[(14, 9, 6), float32] */;
    %232 = @func_3389(%230) /* ty=Tensor[(12, 2, 5), float64] */;
    (%231, %232, meta[relay.Constant][12] /* ty=Tensor[(120), float64] */)
  };
  %233() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */
}

def @func_5412() -> (Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) {
  %234 = @func_5049() /* ty=(Tensor[(14, 9, 6), uint8],) */;
  %235 = %234.0;
  %236 = @func_5241() /* ty=Tensor[(14, 9, 6), float32] */;
  (%235, %236)
}

def @func_3762() -> (Tensor[(14, 9, 6), float32],) {
  %241 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %237 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %238 = %237.0;
    %239 = cast(%238, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %240 = log2(%239) /* ty=Tensor[(14, 9, 6), float32] */;
    (%240,)
  };
  %241() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_7729() -> (Tensor[(14, 9, 6), float32],) {
  %243 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %242 = @func_5632() /* ty=Tensor[(14, 9, 6), float32] */;
    (%242,)
  };
  %243() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_4532(%var_4530: Tensor[(14, 9, 6), float32], %var_4531: Tensor[(1080), float32]) -> (Tensor[(14, 9, 6), float64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) {
  %255 = fn (%var_4504: Tensor[(14, 9, 6), float32], %var_4527: Tensor[(1080), float32]) -> (Tensor[(14, 9, 6), float64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) {
    %244 = @func_4283() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %245 = %244.0;
    %246 = cast(%var_4504, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
    %247 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%245, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %250 = cast(%var_4527, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %251 = reshape(%250, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
    %252 = @func_2269(%251) /* ty=(Tensor[(15, 8, 9), float32],) */;
    %253 = floor_mod(%248, %249) /* ty=Tensor[(14, 9, 6), float64] */;
    %254 = %252.0;
    (%253, %254, %var_4527)
  };
  %255(%var_4530, %var_4531) /* ty=(Tensor[(14, 9, 6), float64], Tensor[(15, 8, 9), float32], Tensor[(1080), float32]) */
}

def @func_7774(%var_7771: Tensor[(990, 1), uint8], %var_7772: Tensor[(220), float32], %var_7773: Tensor[(11, 10, 9), uint16]) -> (Tensor[(14, 9, 6), float32], Tensor[(990, 1), uint8], Tensor[(1980), float32], Tensor[(220), float32], Tensor[(1980), bool], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), bool]) {
  @func_7769(%var_7771, %var_7772, %var_7773) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(990, 1), uint8], Tensor[(1980), float32], Tensor[(220), float32], Tensor[(1980), bool], Tensor[(11, 10, 9), bool], Tensor[(11, 10, 9), bool]) */
}

def @func_5479() -> (Tensor[(14, 9, 6), float32],) {
  %258 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %256 = @func_3761() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %257 = %256.0;
    (%257,)
  };
  %258() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_5314(%var_5312: Tensor[(12, 2, 10), float64]) -> (Tensor[(12, 2, 10), float64],) {
  @func_5311(%var_5312) /* ty=(Tensor[(12, 2, 10), float64],) */
}

def @func_7320(%var_7319: Tensor[(3, 7, 7), float32]) -> (Tensor[(3, 7, 7), float32],) {
  %261 = fn (%var_7308: Tensor[(3, 7, 7), float32]) -> (Tensor[(3, 7, 7), float32],) {
    %259 = cast(%var_7308, dtype="float32") /* ty=Tensor[(3, 7, 7), float32] */;
    %260 = asinh(%259) /* ty=Tensor[(3, 7, 7), float32] */;
    (%260,)
  };
  %261(%var_7319) /* ty=(Tensor[(3, 7, 7), float32],) */
}

def @func_5887() -> (Tensor[(14, 9, 6), float32],) {
  @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_7482() -> (Tensor[(14, 9, 6), float32], Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(432), float64], Tensor[(14, 9, 6), float32]) {
  %262 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %263 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %264 = reshape(%262, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), uint32] */;
  %265 = reshape(%263, newshape=[6, 6, 12]) /* ty=Tensor[(6, 6, 12), uint32] */;
  %266 = @func_5224(%264, %265) /* ty=(Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], uint64) */;
  %267 = @func_6424() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %268 = @func_6424() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %269 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), uint32] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %270 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %271 = @func_4188() /* ty=Tensor[(14, 9, 6), float32] */;
  %272 = %266.0;
  %273 = %267.0;
  %274 = %268.0;
  %275 = cos(%269) /* ty=Tensor[(432), float64] */;
  %276 = %270.0;
  (%271, %272, %273, %274, %275, %276)
}

def @func_4206(%var_4204: Tensor[(14, 11, 8), float32]) -> Tensor[(14, 11, 8), float32] {
  @func_4203(%var_4204) /* ty=Tensor[(14, 11, 8), float32] */
}

def @func_5465(%var_5464: Tensor[(5, 3, 16), float32]) -> Tensor[(5, 3, 16), float32] {
  %278 = fn (%var_5455: Tensor[(5, 3, 16), float32]) -> Tensor[(5, 3, 16), float32] {
    %277 = cast(%var_5455, dtype="float32") /* ty=Tensor[(5, 3, 16), float32] */;
    acosh(%277) /* ty=Tensor[(5, 3, 16), float32] */
  };
  %278(%var_5464) /* ty=Tensor[(5, 3, 16), float32] */
}

def @func_7916(%var_7913: int8, %var_7914: Tensor[(11, 1), int8], %var_7915: Tensor[(780), int8]) -> (Tensor[(11, 1), int8], Tensor[(780), int8], Tensor[(780), int8]) {
  %286 = fn (%var_7897: int8, %var_7898: Tensor[(11, 1), int8], %var_7909: Tensor[(780), int8]) -> (Tensor[(11, 1), int8], Tensor[(780), int8], Tensor[(780), int8]) {
    %279 = cast(%var_7897, dtype="int8") /* ty=int8 */;
    %280 = cast(%var_7898, dtype="int8") /* ty=Tensor[(11, 1), int8] */;
    %281 = cast(%var_7909, dtype="int8") /* ty=Tensor[(780), int8] */;
    %282 = reshape(%281, newshape=[780]) /* ty=Tensor[(780), int8] */;
    %283 = @func_4099(%282) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(4, 13, 15), int8], Tensor[(780), int8]) */;
    %284 = bitwise_xor(%279, %280) /* ty=Tensor[(11, 1), int8] */;
    %285 = %283.2;
    (%284, %285, %var_7909)
  };
  %286(%var_7913, %var_7914, %var_7915) /* ty=(Tensor[(11, 1), int8], Tensor[(780), int8], Tensor[(780), int8]) */
}

def @func_7874() -> (Tensor[(14, 9, 6), float32], Tensor[(1456), uint8], Tensor[(168), uint16], Tensor[(12, 15, 13), uint64], uint64) {
  %287 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %288 = reshape(%287, newshape=[3, 4, 14]) /* ty=Tensor[(3, 4, 14), uint16] */;
  %289 = @func_5974(%288) /* ty=(Tensor[(3, 4, 14), uint16], Tensor[(1456), uint8], Tensor[(3, 4, 14), float64]) */;
  %290 = cast(meta[relay.Constant][15] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %291 = reshape(%290, newshape=[]) /* ty=uint64 */;
  %292 = @func_3847(%291) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) */;
  %293 = @func_7496() /* ty=Tensor[(14, 9, 6), float32] */;
  %294 = %289.1;
  %295 = %292.3;
  (%293, %294, meta[relay.Constant][14] /* ty=Tensor[(168), uint16] */, %295, meta[relay.Constant][15] /* ty=uint64 */)
}

def @func_7484() -> (Tensor[(14, 9, 6), float32], Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(432), float64], Tensor[(14, 9, 6), float32]) {
  @func_7482() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(432), float64], Tensor[(14, 9, 6), float32]) */
}

def @func_431(%var_430: Tensor[(10, 10, 5), float32]) -> (Tensor[(10, 10, 5), float32],) {
  %298 = fn (%var_425: Tensor[(10, 10, 5), float32]) -> (Tensor[(10, 10, 5), float32],) {
    %296 = cast(%var_425, dtype="float32") /* ty=Tensor[(10, 10, 5), float32] */;
    %297 = log10(%296) /* ty=Tensor[(10, 10, 5), float32] */;
    (%297,)
  };
  %298(%var_430) /* ty=(Tensor[(10, 10, 5), float32],) */
}

def @func_3186(%var_3184: Tensor[(1, 12, 14), float32]) -> (Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) {
  @func_3183(%var_3184) /* ty=(Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */
}

def @func_5508() -> (Tensor[(14, 9, 6), float32],) {
  @func_5506() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_7632(%var_7630: int16, %var_7631: Tensor[(500), float32]) -> (Tensor[(6, 14, 12), int16], Tensor[(14, 9, 6), float32], Tensor[(8, 16, 4), int8], Tensor[(250, 3), int8], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(250, 3), float64]) {
  %326 = fn (%var_7573: int16, %var_7623: Tensor[(500), float32]) -> (Tensor[(6, 14, 12), int16], Tensor[(14, 9, 6), float32], Tensor[(8, 16, 4), int8], Tensor[(250, 3), int8], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(250, 3), float64]) {
    %299 = cast(%var_7573, dtype="int16") /* ty=int16 */;
    %300 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 14, 12), int16] */, dtype="int16") /* ty=Tensor[(6, 14, 12), int16] */;
    %301 = cast(meta[relay.Constant][17] /* ty=Tensor[(250, 3), float32] */, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
    %302 = cast(meta[relay.Constant][17] /* ty=Tensor[(250, 3), float32] */, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
    %303 = cast(meta[relay.Constant][17] /* ty=Tensor[(250, 3), float32] */, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
    %304 = reshape(%301, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %305 = reshape(%302, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %306 = reshape(%303, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %307 = @func_1209(%304, %305, %306) /* ty=(Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
    %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(250, 3), float32] */, dtype="float64") /* ty=Tensor[(250, 3), float64] */;
    %309 = rsqrt(%308) /* ty=Tensor[(250, 3), float64] */;
    %310 = cast(meta[relay.Constant][17] /* ty=Tensor[(250, 3), float32] */, dtype="int8") /* ty=Tensor[(250, 3), int8] */;
    %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(2), int32] */;
    %312 = cast(%309, dtype="int8") /* ty=Tensor[(250, 3), int8] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %314 = cast(%var_7623, dtype="float32") /* ty=Tensor[(500), float32] */;
    %315 = reshape(%314, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
    %316 = @func_429(%315) /* ty=(Tensor[(10, 10, 5), float32],) */;
    %317 = cast(%309, dtype="float32") /* ty=Tensor[(250, 3), float32] */;
    %318 = log2(%317) /* ty=Tensor[(250, 3), float32] */;
    %319 = cast(%318, dtype="float64") /* ty=Tensor[(250, 3), float64] */;
    %320 = multiply(%299, %300) /* ty=Tensor[(6, 14, 12), int16] */;
    %321 = @func_4135() /* ty=Tensor[(14, 9, 6), float32] */;
    %322 = %307.1;
    %323 = maximum(%312, %313) /* ty=Tensor[(250, 3), int8] */;
    %324 = %316.0;
    %325 = log10(%319) /* ty=Tensor[(250, 3), float64] */;
    (%320, %321, %322, %323, %324, %var_7623, %325)
  };
  %326(%var_7630, %var_7631) /* ty=(Tensor[(6, 14, 12), int16], Tensor[(14, 9, 6), float32], Tensor[(8, 16, 4), int8], Tensor[(250, 3), int8], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(250, 3), float64]) */
}

def @func_1065(%var_1062: Tensor[(8, 5, 5), uint16], %var_1063: Tensor[(8, 5, 5), uint16], %var_1064: Tensor[(500), float32]) -> (Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  %336 = fn (%var_1051: Tensor[(8, 5, 5), uint16], %var_1052: Tensor[(8, 5, 5), uint16], %var_1059: Tensor[(500), float32]) -> (Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
    %327 = cast(%var_1052, dtype="uint16") /* ty=Tensor[(8, 5, 5), uint16] */;
    %328 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%var_1051, dtype="uint16") /* ty=Tensor[(8, 5, 5), uint16] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %331 = cast(%var_1059, dtype="float32") /* ty=Tensor[(500), float32] */;
    %332 = reshape(%331, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
    %333 = @func_429(%332) /* ty=(Tensor[(10, 10, 5), float32],) */;
    %334 = multiply(%329, %330) /* ty=Tensor[(8, 5, 5), uint16] */;
    %335 = %333.0;
    (%334, %335, %var_1059)
  };
  %336(%var_1062, %var_1063, %var_1064) /* ty=(Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */
}

def @func_6517() -> (Tensor[(14, 9, 6), float32],) {
  @func_6515() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_4543() -> (Tensor[(14, 9, 6), float32],) {
  %338 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %337 = @func_4135() /* ty=Tensor[(14, 9, 6), float32] */;
    (%337,)
  };
  %338() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_351(%var_349: Tensor[(8, 14, 7), float32]) -> (Tensor[(8, 14, 7), float32],) {
  @func_348(%var_349) /* ty=(Tensor[(8, 14, 7), float32],) */
}

def @func_6346() -> (Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float64]) {
  %345 = fn () -> (Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float64]) {
    %339 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
    %340 = @func_4542() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %341 = %340.0;
    %342 = cast(%341, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
    %343 = %339.1;
    %344 = sin(%342) /* ty=Tensor[(14, 9, 6), float64] */;
    (%343, %344)
  };
  %345() /* ty=(Tensor[(12, 2, 5), float64], Tensor[(14, 9, 6), float64]) */
}

def @func_1209(%var_1177: Tensor[(5, 10, 15), float32], %var_1178: Tensor[(5, 10, 15), float32], %var_1192: Tensor[(5, 10, 15), float32]) -> (Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  %346 = cast(%var_1178, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %347 = shape_of(%var_1177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_1177, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %350 = cast(meta[relay.Constant][18] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %351 = reshape(%350, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), int8] */;
  %352 = @func_832(%351) /* ty=(Tensor[(8, 16, 4), int8],) */;
  %353 = cast(%var_1192, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %354 = shape_of(%var_1178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%var_1178, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %357 = cast(meta[relay.Constant][19] /* ty=Tensor[(110, 9), uint8] */, dtype="uint8") /* ty=Tensor[(110, 9), uint8] */;
  %358 = reshape(%357, newshape=[11, 10, 9]) /* ty=Tensor[(11, 10, 9), uint8] */;
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(500), float32] */, dtype="float32") /* ty=Tensor[(500), float32] */;
  %360 = reshape(%359, newshape=[10, 10, 5]) /* ty=Tensor[(10, 10, 5), float32] */;
  %361 = @func_429(%360) /* ty=(Tensor[(10, 10, 5), float32],) */;
  %362 = subtract(%348, %349) /* ty=Tensor[(5, 10, 15), float32] */;
  %363 = %352.0;
  %364 = floor_divide(%355, %356) /* ty=Tensor[(5, 10, 15), float32] */;
  %365 = @func_722(%358) /* ty=Tensor[(11, 10, 9), uint16] */;
  %366 = %361.0;
  (%362, %363, meta[relay.Constant][18] /* ty=Tensor[(512), int8] */, %364, %365, meta[relay.Constant][19] /* ty=Tensor[(110, 9), uint8] */, %366, meta[relay.Constant][20] /* ty=Tensor[(500), float32] */)
}

def @func_2509(%var_2507: Tensor[(12, 9, 7), int64], %var_2508: Tensor[(5, 150), float32]) -> (Tensor[(12, 9, 7), float64], Tensor[(12, 9, 7), bool], Tensor[(11, 10, 9), uint16], Tensor[(5, 150), float32]) {
  %390 = fn (%var_2475: Tensor[(12, 9, 7), int64], %var_2500: Tensor[(5, 150), float32]) -> (Tensor[(12, 9, 7), float64], Tensor[(12, 9, 7), bool], Tensor[(11, 10, 9), uint16], Tensor[(5, 150), float32]) {
    %367 = cast(%var_2475, dtype="int64") /* ty=Tensor[(12, 9, 7), int64] */;
    %368 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(12, 9, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 9, 7), int64] */, dtype="int64") /* ty=Tensor[(12, 9, 7), int64] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %371 = bitwise_and(%369, %370) /* ty=Tensor[(12, 9, 7), int64] */;
    %372 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 9, 7), int64] */, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
    %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%371, dtype="float64") /* ty=Tensor[(12, 9, 7), float64] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %376 = cast(%var_2475, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
    %377 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%371, dtype="bool") /* ty=Tensor[(12, 9, 7), bool] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %380 = cast(%var_2500, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
    %381 = cast(%var_2500, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
    %382 = cast(%var_2500, dtype="float32") /* ty=Tensor[(5, 150), float32] */;
    %383 = reshape(%380, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %384 = reshape(%381, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %385 = reshape(%382, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), float32] */;
    %386 = @func_1209(%383, %384, %385) /* ty=(Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
    %387 = floor_mod(%374, %375) /* ty=Tensor[(12, 9, 7), float64] */;
    %388 = not_equal(%378, %379) /* ty=Tensor[(12, 9, 7), bool] */;
    %389 = %386.4;
    (%387, %388, %389, %var_2500)
  };
  %390(%var_2507, %var_2508) /* ty=(Tensor[(12, 9, 7), float64], Tensor[(12, 9, 7), bool], Tensor[(11, 10, 9), uint16], Tensor[(5, 150), float32]) */
}

def @func_7420(%var_7419: Tensor[(9, 220), bool]) -> (Tensor[(14, 9, 6), float32], Tensor[(12, 11, 15), bool], Tensor[(9, 220), float64]) {
  %401 = fn (%var_7406: Tensor[(9, 220), bool]) -> (Tensor[(14, 9, 6), float32], Tensor[(12, 11, 15), bool], Tensor[(9, 220), float64]) {
    %391 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 220), bool] */, dtype="bool") /* ty=Tensor[(9, 220), bool] */;
    %392 = reshape(%391, newshape=[12, 11, 15]) /* ty=Tensor[(12, 11, 15), bool] */;
    %393 = @func_192(%392) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) */;
    %394 = cast(%var_7406, dtype="float64") /* ty=Tensor[(9, 220), float64] */;
    %395 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(9, 220), bool] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %396 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 220), bool] */, dtype="float64") /* ty=Tensor[(9, 220), float64] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %398 = @func_5591() /* ty=Tensor[(14, 9, 6), float32] */;
    %399 = %393.0;
    %400 = divide(%396, %397) /* ty=Tensor[(9, 220), float64] */;
    (%398, %399, %400)
  };
  %401(%var_7419) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 11, 15), bool], Tensor[(9, 220), float64]) */
}

def @func_5301() -> (Tensor[(120), float64],) {
  %402 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %403 = %402.2;
  (%403,)
}

def @func_2418(%var_2412: Tensor[(2, 12, 1), float64], %var_2413: uint16, %var_2414: Tensor[(512), int8], %var_2415: Tensor[(432), float32], %var_2416: Tensor[(165), float32], %var_2417: Tensor[(500), float32]) -> (Tensor[(512), int8], uint16, Tensor[(440), uint16], Tensor[(512), int8], Tensor[(9, 3, 16), uint64], Tensor[(432), float32], Tensor[(840), uint64], Tensor[(2, 12, 1), float64], Tensor[(11, 15), float32], Tensor[(165), float32], Tensor[(2, 12, 1), float64], Tensor[(8, 5, 5), uint16], Tensor[(200, 1), uint16], Tensor[(500), float32]) {
  @func_2410(%var_2412, %var_2413, %var_2414, %var_2415, %var_2416, %var_2417) /* ty=(Tensor[(512), int8], uint16, Tensor[(440), uint16], Tensor[(512), int8], Tensor[(9, 3, 16), uint64], Tensor[(432), float32], Tensor[(840), uint64], Tensor[(2, 12, 1), float64], Tensor[(11, 15), float32], Tensor[(165), float32], Tensor[(2, 12, 1), float64], Tensor[(8, 5, 5), uint16], Tensor[(200, 1), uint16], Tensor[(500), float32]) */
}

def @func_6068() -> Tensor[(14, 9, 6), float32] {
  @func_6066() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_7496() -> Tensor[(14, 9, 6), float32] {
  %404 = @func_5412() /* ty=(Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) */;
  %404.1
}

def @func_3658() -> (Tensor[(14, 9, 6), float32],) {
  %405 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %406 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(14, 9, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 9, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %409 = minimum(%407, %408) /* ty=Tensor[(14, 9, 6), float32] */;
  (%409,)
}

def @func_1214(%var_1211: Tensor[(5, 10, 15), float32], %var_1212: Tensor[(5, 10, 15), float32], %var_1213: Tensor[(5, 10, 15), float32]) -> (Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) {
  @func_1209(%var_1211, %var_1212, %var_1213) /* ty=(Tensor[(5, 10, 15), float32], Tensor[(8, 16, 4), int8], Tensor[(512), int8], Tensor[(5, 10, 15), float32], Tensor[(11, 10, 9), uint16], Tensor[(110, 9), uint8], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */
}

def @func_4667(%var_4665: Tensor[(1980), bool]) -> (Tensor[(14, 9, 6), float32], Tensor[(132), int64], Tensor[(2, 11, 6), float32], Tensor[(1980), bool], Tensor[(1980), bool]) {
  @func_4664(%var_4665) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(132), int64], Tensor[(2, 11, 6), float32], Tensor[(1980), bool], Tensor[(1980), bool]) */
}

def @func_6183() -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  %418 = fn () -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
    %410 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %411 = %410.0;
    %412 = cast(%411, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %413 = reshape(%412, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
    %414 = @func_4343(%413) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
    %415 = @func_5506() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %416 = %414.0;
    %417 = %415.0;
    (%411, %416, %417)
  };
  %418() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */
}

def @func_3804() -> (Tensor[(14, 9, 6), float32],) {
  @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_6307(%var_6305: Tensor[(1980), bool], %var_6306: Tensor[(1456), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(1980), float32]) {
  %432 = fn (%var_6288: Tensor[(1980), bool], %var_6297: Tensor[(1456), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(1980), float32]) {
    %419 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
    %420 = cast(%419, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %421 = cast(%var_6288, dtype="bool") /* ty=Tensor[(1980), bool] */;
    %422 = reshape(%420, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
    %423 = reshape(%421, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
    %424 = @func_4061(%422, %423) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
    %425 = cast(%var_6297, dtype="float32") /* ty=Tensor[(1456), float32] */;
    %426 = reshape(%425, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float32] */;
    %427 = @func_5343(%426) /* ty=(Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) */;
    %428 = cast(%var_6288, dtype="float32") /* ty=Tensor[(1980), float32] */;
    %429 = %424.2;
    %430 = %427.1;
    %431 = tan(%428) /* ty=Tensor[(1980), float32] */;
    (%419, %429, %430, %var_6297, %431)
  };
  %432(%var_6305, %var_6306) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(1980), float32]) */
}

def @func_5633() -> Tensor[(14, 9, 6), float32] {
  %434 = fn () -> Tensor[(14, 9, 6), float32] {
    %433 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
    %433.1
  };
  %434() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_7659(%var_7651: Tensor[(1980), bool]) -> (Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1980), bool]) {
  %435 = @func_5049() /* ty=(Tensor[(14, 9, 6), uint8],) */;
  %436 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %437 = %436.0;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %439 = cast(%var_7651, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %440 = reshape(%438, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %441 = reshape(%439, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %442 = @func_4061(%440, %441) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %443 = %435.0;
  %444 = %442.2;
  (%443, %437, %444, %var_7651)
}

def @func_3715(%var_3702: uint64) -> (Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) {
  %445 = cast(%var_3702, dtype="uint64") /* ty=uint64 */;
  %446 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 15, 13), uint64] */, dtype="uint64") /* ty=Tensor[(12, 15, 13), uint64] */;
  %447 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 15, 13), uint64] */, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %448 = subtract(%445, %446) /* ty=Tensor[(12, 15, 13), uint64] */;
  %449 = asin(%447) /* ty=Tensor[(12, 15, 13), float32] */;
  (%448, %449)
}

def @func_5414() -> (Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) {
  @func_5412() /* ty=(Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) */
}

def @func_4064(%var_4062: Tensor[(14, 9, 6), float32], %var_4063: Tensor[(1980), bool]) -> (Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) {
  %465 = fn (%var_4033: Tensor[(14, 9, 6), float32], %var_4041: Tensor[(1980), bool]) -> (Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) {
    %450 = cast(%var_4041, dtype="bool") /* ty=Tensor[(1980), bool] */;
    %451 = reshape(%450, newshape=[12, 11, 15]) /* ty=Tensor[(12, 11, 15), bool] */;
    %452 = @func_192(%451) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) */;
    %453 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %454 = %453.0;
    %455 = cast(%var_4033, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
    %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
    %457 = cast(%454, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %459 = mod(%457, %458) /* ty=Tensor[(14, 9, 6), float64] */;
    %460 = cast(%459, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %461 = atan(%460) /* ty=Tensor[(14, 9, 6), float32] */;
    %462 = cast(%461, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %463 = %452.0;
    %464 = sqrt(%462) /* ty=Tensor[(14, 9, 6), float32] */;
    (%463, %var_4041, %464)
  };
  %465(%var_4062, %var_4063) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */
}

def @func_5570(%var_5567: Tensor[(6, 11, 8), float32], %var_5568: Tensor[(1, 200), uint16], %var_5569: Tensor[(500), float32]) -> (Tensor[(6, 11, 8), float32], Tensor[(8, 5, 5), uint16], Tensor[(1, 200), uint16], Tensor[(500), float32]) {
  %476 = fn (%var_5554: Tensor[(6, 11, 8), float32], %var_5563: Tensor[(1, 200), uint16], %var_5564: Tensor[(500), float32]) -> (Tensor[(6, 11, 8), float32], Tensor[(8, 5, 5), uint16], Tensor[(1, 200), uint16], Tensor[(500), float32]) {
    %466 = cast(%var_5554, dtype="float32") /* ty=Tensor[(6, 11, 8), float32] */;
    %467 = cast(%var_5563, dtype="uint16") /* ty=Tensor[(1, 200), uint16] */;
    %468 = cast(%var_5563, dtype="uint16") /* ty=Tensor[(1, 200), uint16] */;
    %469 = cast(%var_5564, dtype="float32") /* ty=Tensor[(500), float32] */;
    %470 = reshape(%467, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
    %471 = reshape(%468, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
    %472 = reshape(%469, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %473 = @func_1061(%470, %471, %472) /* ty=(Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
    %474 = cos(%466) /* ty=Tensor[(6, 11, 8), float32] */;
    %475 = %473.0;
    (%474, %475, %var_5563, %var_5564)
  };
  %476(%var_5567, %var_5568, %var_5569) /* ty=(Tensor[(6, 11, 8), float32], Tensor[(8, 5, 5), uint16], Tensor[(1, 200), uint16], Tensor[(500), float32]) */
}

def @func_2866(%var_2864: Tensor[(13, 3, 1), float32], %var_2865: Tensor[(13, 3, 5), float32]) -> Tensor[(13, 3, 5), float32] {
  %479 = fn (%var_2854: Tensor[(13, 3, 1), float32], %var_2855: Tensor[(13, 3, 5), float32]) -> Tensor[(13, 3, 5), float32] {
    %477 = cast(%var_2854, dtype="float32") /* ty=Tensor[(13, 3, 1), float32] */;
    %478 = cast(%var_2855, dtype="float32") /* ty=Tensor[(13, 3, 5), float32] */;
    floor_divide(%477, %478) /* ty=Tensor[(13, 3, 5), float32] */
  };
  %479(%var_2864, %var_2865) /* ty=Tensor[(13, 3, 5), float32] */
}

def @func_6959(%var_6957: Tensor[(6, 4, 7), int64], %var_6958: Tensor[(6, 4, 7), int64]) -> (Tensor[(6, 4, 7), int64],) {
  %485 = fn (%var_6948: Tensor[(6, 4, 7), int64], %var_6949: Tensor[(6, 4, 7), int64]) -> (Tensor[(6, 4, 7), int64],) {
    %480 = cast(%var_6949, dtype="int64") /* ty=Tensor[(6, 4, 7), int64] */;
    %481 = shape_of(%var_6948, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(%var_6948, dtype="int64") /* ty=Tensor[(6, 4, 7), int64] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %484 = subtract(%482, %483) /* ty=Tensor[(6, 4, 7), int64] */;
    (%484,)
  };
  %485(%var_6957, %var_6958) /* ty=(Tensor[(6, 4, 7), int64],) */
}

def @func_4797(%var_4793: Tensor[(4, 13, 9), float32]) -> Tensor[(4, 13, 9), float32] {
  %486 = cast(%var_4793, dtype="float32") /* ty=Tensor[(4, 13, 9), float32] */;
  log(%486) /* ty=Tensor[(4, 13, 9), float32] */
}

def @func_3718(%var_3716: uint64) -> (Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) {
  @func_3715(%var_3716) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) */
}

def @func_6130() -> (Tensor[(14, 9, 6), float32],) {
  %487 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
  (%487,)
}

def @func_6425() -> (Tensor[(14, 9, 6), float32],) {
  %490 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %488 = @func_6182() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
    %489 = %488.2;
    (%489,)
  };
  %490() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_4601(%var_4563: Tensor[(320), float32], %var_4585: Tensor[(120, 1), float64], %var_4590: Tensor[(168), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(16, 2, 10), float32], Tensor[(320), float32], Tensor[(12, 2, 5), float64], Tensor[(120, 1), float64], Tensor[(840), uint64], Tensor[(168), float32]) {
  %491 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %492 = cast(%var_4563, dtype="float32") /* ty=Tensor[(320), float32] */;
  %493 = reshape(%492, newshape=[16, 2, 10]) /* ty=Tensor[(16, 2, 10), float32] */;
  %494 = @func_4112(%493) /* ty=(Tensor[(16, 2, 10), float32],) */;
  %495 = cast(%var_4585, dtype="float64") /* ty=Tensor[(120, 1), float64] */;
  %496 = reshape(%495, newshape=[12, 2, 5]) /* ty=Tensor[(12, 2, 5), float64] */;
  %497 = cast(%var_4590, dtype="float32") /* ty=Tensor[(168), float32] */;
  %498 = reshape(%497, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %499 = @func_3183(%498) /* ty=(Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */;
  %500 = %491.0;
  %501 = %494.0;
  %502 = @func_3389(%496) /* ty=Tensor[(12, 2, 5), float64] */;
  %503 = %499.2;
  (%500, %501, %var_4563, %502, %var_4585, %503, %var_4590)
}

def @func_7298() -> (Tensor[(14, 9, 6), float64],) {
  @func_7296() /* ty=(Tensor[(14, 9, 6), float64],) */
}

def @func_6245(%var_6243: Tensor[(200), uint16], %var_6244: Tensor[(500), float32]) -> (Tensor[(132), int64], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(200), float32]) {
  %516 = fn (%var_6203: Tensor[(200), uint16], %var_6204: Tensor[(500), float32]) -> (Tensor[(132), int64], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(200), float32]) {
    %504 = @func_5003() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) */;
    %505 = cast(%var_6203, dtype="uint16") /* ty=Tensor[(200), uint16] */;
    %506 = cast(%var_6203, dtype="uint16") /* ty=Tensor[(200), uint16] */;
    %507 = cast(%var_6204, dtype="float32") /* ty=Tensor[(500), float32] */;
    %508 = reshape(%505, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
    %509 = reshape(%506, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
    %510 = reshape(%507, newshape=[500]) /* ty=Tensor[(500), float32] */;
    %511 = @func_1061(%508, %509, %510) /* ty=(Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
    %512 = cast(%var_6203, dtype="float32") /* ty=Tensor[(200), float32] */;
    %513 = %504.2;
    %514 = %511.1;
    %515 = rsqrt(%512) /* ty=Tensor[(200), float32] */;
    (%513, %514, %var_6204, %515)
  };
  %516(%var_6243, %var_6244) /* ty=(Tensor[(132), int64], Tensor[(10, 10, 5), float32], Tensor[(500), float32], Tensor[(200), float32]) */
}

def @func_4189() -> Tensor[(14, 9, 6), float32] {
  %518 = fn () -> Tensor[(14, 9, 6), float32] {
    %517 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %517.0
  };
  %518() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_4159() -> (Tensor[(14, 9, 6), float32],) {
  %521 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %519 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %520 = %519.0;
    (%520,)
  };
  %521() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_2410(%var_2346: Tensor[(2, 12, 1), float64], %var_2350: uint16, %var_2352: Tensor[(512), int8], %var_2372: Tensor[(432), float32], %var_2395: Tensor[(165), float32], %var_2404: Tensor[(500), float32]) -> (Tensor[(512), int8], uint16, Tensor[(440), uint16], Tensor[(512), int8], Tensor[(9, 3, 16), uint64], Tensor[(432), float32], Tensor[(840), uint64], Tensor[(2, 12, 1), float64], Tensor[(11, 15), float32], Tensor[(165), float32], Tensor[(2, 12, 1), float64], Tensor[(8, 5, 5), uint16], Tensor[(200, 1), uint16], Tensor[(500), float32]) {
  %522 = cast(%var_2350, dtype="uint16") /* ty=uint16 */;
  %523 = cast(meta[relay.Constant][26] /* ty=Tensor[(440), uint16] */, dtype="uint16") /* ty=Tensor[(440), uint16] */;
  %524 = cast(%var_2352, dtype="int8") /* ty=Tensor[(512), int8] */;
  %525 = reshape(%522, newshape=[]) /* ty=uint16 */;
  %526 = reshape(%523, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), uint16] */;
  %527 = reshape(%524, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %528 = @func_1954(%525, %526, %527) /* ty=(Tensor[(8, 5, 11), uint8], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) */;
  %529 = cast(%var_2372, dtype="float32") /* ty=Tensor[(432), float32] */;
  %530 = cast(%var_2372, dtype="float32") /* ty=Tensor[(432), float32] */;
  %531 = cast(%var_2372, dtype="int32") /* ty=Tensor[(432), int32] */;
  %532 = cast(meta[relay.Constant][27] /* ty=Tensor[(840), uint64] */, dtype="uint64") /* ty=Tensor[(840), uint64] */;
  %533 = reshape(%529, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float32] */;
  %534 = reshape(%530, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), float32] */;
  %535 = reshape(%531, newshape=[9, 3, 16]) /* ty=Tensor[(9, 3, 16), int32] */;
  %536 = reshape(%532, newshape=[840]) /* ty=Tensor[(840), uint64] */;
  %537 = @func_297(%533, %534, %535, %536) /* ty=(Tensor[(9, 3, 16), uint64], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */;
  %538 = cast(%var_2346, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %539 = cos(%538) /* ty=Tensor[(2, 12, 1), float64] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %541 = cast(%var_2395, dtype="float32") /* ty=Tensor[(165), float32] */;
  %542 = reshape(%541, newshape=[11, 15]) /* ty=Tensor[(11, 15), float32] */;
  %543 = @func_925(%542) /* ty=(Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) */;
  %544 = cast(%539, dtype="float32") /* ty=Tensor[(2, 12, 1), float32] */;
  %545 = tan(%544) /* ty=Tensor[(2, 12, 1), float32] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(2, 12, 1), float64] */;
  %547 = cast(meta[relay.Constant][28] /* ty=Tensor[(200, 1), uint16] */, dtype="uint16") /* ty=Tensor[(200, 1), uint16] */;
  %548 = cast(meta[relay.Constant][28] /* ty=Tensor[(200, 1), uint16] */, dtype="uint16") /* ty=Tensor[(200, 1), uint16] */;
  %549 = cast(%var_2404, dtype="float32") /* ty=Tensor[(500), float32] */;
  %550 = reshape(%547, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %551 = reshape(%548, newshape=[8, 5, 5]) /* ty=Tensor[(8, 5, 5), uint16] */;
  %552 = reshape(%549, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %553 = @func_1061(%550, %551, %552) /* ty=(Tensor[(8, 5, 5), uint16], Tensor[(10, 10, 5), float32], Tensor[(500), float32]) */;
  %554 = %528.2;
  %555 = %537.0;
  %556 = erf(%540) /* ty=Tensor[(2, 12, 1), float64] */;
  %557 = %543.0;
  %558 = cosh(%546) /* ty=Tensor[(2, 12, 1), float64] */;
  %559 = %553.0;
  (%554, %var_2350, meta[relay.Constant][26] /* ty=Tensor[(440), uint16] */, %var_2352, %555, %var_2372, meta[relay.Constant][27] /* ty=Tensor[(840), uint64] */, %556, %557, %var_2395, %558, %559, meta[relay.Constant][28] /* ty=Tensor[(200, 1), uint16] */, %var_2404)
}

def @func_4099(%var_4088: Tensor[(780), int8]) -> (Tensor[(14, 9, 6), float32], Tensor[(4, 13, 15), int8], Tensor[(780), int8]) {
  %560 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %561 = cast(%var_4088, dtype="int8") /* ty=Tensor[(780), int8] */;
  %562 = reshape(%561, newshape=[4, 13, 15]) /* ty=Tensor[(4, 13, 15), int8] */;
  %563 = @func_1553(%562) /* ty=(Tensor[(4, 13, 15), int8],) */;
  %564 = %560.0;
  %565 = %563.0;
  (%564, %565, %var_4088)
}

def @func_5003() -> (Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) {
  %566 = @func_4188() /* ty=Tensor[(14, 9, 6), float32] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %568 = cast(meta[relay.Constant][29] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
  %569 = reshape(%568, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), int64] */;
  %570 = @func_3220(%569) /* ty=(Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) */;
  %571 = asinh(%567) /* ty=Tensor[(14, 9, 6), float64] */;
  %572 = %570.1;
  (%571, %572, meta[relay.Constant][29] /* ty=Tensor[(132), int64] */)
}

def @func_7498() -> Tensor[(14, 9, 6), float32] {
  @func_7496() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_348(%var_343: Tensor[(8, 14, 7), float32]) -> (Tensor[(8, 14, 7), float32],) {
  %573 = cast(%var_343, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %574 = rsqrt(%573) /* ty=Tensor[(8, 14, 7), float32] */;
  (%574,)
}

def @func_5343(%var_5332: Tensor[(14, 8, 13), float32]) -> (Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) {
  %575 = cast(%var_5332, dtype="float32") /* ty=Tensor[(14, 8, 13), float32] */;
  %576 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
  %577 = acos(%575) /* ty=Tensor[(14, 8, 13), float32] */;
  %578 = %576.0;
  (%577, %578)
}

def @func_4936(%var_4931: Tensor[(8, 16, 8), float64], %var_4932: uint64, %var_4933: Tensor[(12, 2, 5), float64], %var_4934: Tensor[(8, 16, 8), float64], %var_4935: Tensor[(512), int8]) -> (Tensor[(8, 16, 8), bool], uint64, Tensor[(12, 2, 5), int32], Tensor[(8, 16, 8), bool], Tensor[(14, 9, 6), float32], Tensor[(12, 15, 13), bool], Tensor[(12, 2, 5), float64], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) {
  %617 = fn (%var_4866: Tensor[(8, 16, 8), float64], %var_4887: uint64, %var_4896: Tensor[(12, 2, 5), float64], %var_4903: Tensor[(8, 16, 8), float64], %var_4923: Tensor[(512), int8]) -> (Tensor[(8, 16, 8), bool], uint64, Tensor[(12, 2, 5), int32], Tensor[(8, 16, 8), bool], Tensor[(14, 9, 6), float32], Tensor[(12, 15, 13), bool], Tensor[(12, 2, 5), float64], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) {
    %579 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 16, 8), float64] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
    %580 = shape_of(%var_4866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%var_4866, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %583 = @func_4241() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(12, 2, 5), float64], Tensor[(120), float64]) */;
    %584 = %583.1;
    %585 = cast(%var_4896, dtype="int32") /* ty=Tensor[(12, 2, 5), int32] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="int32") /* ty=Tensor[(12, 2, 5), int32] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %589 = cast(%var_4903, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
    %590 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(8, 16, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 16, 8), float64] */, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %593 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %594 = cast(%var_4887, dtype="uint64") /* ty=uint64 */;
    %595 = reshape(%594, newshape=[]) /* ty=uint64 */;
    %596 = @func_3847(%595) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) */;
    %597 = %596.3;
    %598 = cast(%var_4887, dtype="uint64") /* ty=uint64 */;
    %599 = reshape(%598, newshape=[]) /* ty=uint64 */;
    %600 = @func_3715(%599) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), float32]) */;
    %601 = %600.1;
    %602 = cast(%601, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
    %603 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
    %604 = cast(%597, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
    %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %606 = cast(%584, dtype="float64") /* ty=Tensor[(12, 2, 5), float64] */;
    %607 = cast(%var_4923, dtype="int8") /* ty=Tensor[(512), int8] */;
    %608 = reshape(%607, newshape=[8, 16, 4]) /* ty=Tensor[(8, 16, 4), int8] */;
    %609 = @func_832(%608) /* ty=(Tensor[(8, 16, 4), int8],) */;
    %610 = greater_equal(%581, %582) /* ty=Tensor[(8, 16, 8), bool] */;
    %611 = minimum(%587, %588) /* ty=Tensor[(12, 2, 5), int32] */;
    %612 = less(%591, %592) /* ty=Tensor[(8, 16, 8), bool] */;
    %613 = %593.0;
    %614 = logical_and(%604, %605) /* ty=Tensor[(12, 15, 13), bool] */;
    %615 = acos(%606) /* ty=Tensor[(12, 2, 5), float64] */;
    %616 = %609.0;
    (%610, %var_4887, %611, %612, %613, %614, %615, %616, %var_4923)
  };
  %617(%var_4931, %var_4932, %var_4933, %var_4934, %var_4935) /* ty=(Tensor[(8, 16, 8), bool], uint64, Tensor[(12, 2, 5), int32], Tensor[(8, 16, 8), bool], Tensor[(14, 9, 6), float32], Tensor[(12, 15, 13), bool], Tensor[(12, 2, 5), float64], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) */
}

def @func_7662(%var_7660: Tensor[(1980), bool]) -> (Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1980), bool]) {
  @func_7659(%var_7660) /* ty=(Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(1980), bool]) */
}

def @func_5096(%var_5094: Tensor[(468), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(4, 13, 9), float32], Tensor[(468), float32]) {
  @func_5093(%var_5094) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(4, 13, 9), float32], Tensor[(468), float32]) */
}

def @func_4114(%var_4113: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), float32],) {
  %623 = fn (%var_4104: Tensor[(16, 2, 10), float32]) -> (Tensor[(16, 2, 10), float32],) {
    %618 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %619 = shape_of(%var_4104, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%var_4104, dtype="float32") /* ty=Tensor[(16, 2, 10), float32] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %622 = mod(%620, %621) /* ty=Tensor[(16, 2, 10), float32] */;
    (%622,)
  };
  %623(%var_4113) /* ty=(Tensor[(16, 2, 10), float32],) */
}

def @func_192(%var_179: Tensor[(12, 11, 15), bool]) -> (Tensor[(12, 11, 15), bool], Tensor[(12, 11, 15), float64]) {
  %624 = cast(%var_179, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %625 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(12, 11, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 11, 15), bool] */, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %628 = cast(%var_179, dtype="float64") /* ty=Tensor[(12, 11, 15), float64] */;
  %629 = logical_or(%626, %627) /* ty=Tensor[(12, 11, 15), bool] */;
  %630 = log(%628) /* ty=Tensor[(12, 11, 15), float64] */;
  (%629, %630)
}

def @func_3223(%var_3221: Tensor[(2, 11, 6), int64]) -> (Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) {
  @func_3220(%var_3221) /* ty=(Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) */
}

def @func_5593() -> Tensor[(14, 9, 6), float32] {
  @func_5591() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_5227(%var_5225: Tensor[(6, 6, 12), uint32], %var_5226: Tensor[(6, 6, 12), uint32]) -> (Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], uint64) {
  %645 = fn (%var_5181: Tensor[(6, 6, 12), uint32], %var_5182: Tensor[(6, 6, 12), uint32]) -> (Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], uint64) {
    %631 = cast(%var_5182, dtype="uint32") /* ty=Tensor[(6, 6, 12), uint32] */;
    %632 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%var_5181, dtype="uint32") /* ty=Tensor[(6, 6, 12), uint32] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %635 = add(%633, %634) /* ty=Tensor[(6, 6, 12), uint32] */;
    %636 = cast(%635, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
    %637 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%var_5182, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %640 = cast(meta[relay.Constant][33] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %641 = reshape(%640, newshape=[]) /* ty=uint64 */;
    %642 = @func_3847(%641) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) */;
    %643 = power(%638, %639) /* ty=Tensor[(6, 6, 12), float32] */;
    %644 = %642.0;
    (%643, %644, meta[relay.Constant][33] /* ty=uint64 */)
  };
  %645(%var_5225, %var_5226) /* ty=(Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], uint64) */
}

def @func_7876() -> (Tensor[(14, 9, 6), float32], Tensor[(1456), uint8], Tensor[(168), uint16], Tensor[(12, 15, 13), uint64], uint64) {
  @func_7874() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(1456), uint8], Tensor[(168), uint16], Tensor[(12, 15, 13), uint64], uint64) */
}

def @func_6579(%var_6543: Tensor[(1456), float32], %var_6558: Tensor[(1080), float32]) -> (Tensor[(132), int64], Tensor[(14, 9, 6), float32], Tensor[(1456), float32], Tensor[(15, 8, 9), float32], Tensor[(1080), float32], Tensor[(14, 9, 6), float32]) {
  %646 = @func_5003() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(2, 11, 6), float64], Tensor[(132), int64]) */;
  %647 = cast(%var_6543, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %648 = reshape(%647, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float32] */;
  %649 = @func_5343(%648) /* ty=(Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) */;
  %650 = cast(%var_6558, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %651 = reshape(%650, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float32] */;
  %652 = @func_2269(%651) /* ty=(Tensor[(15, 8, 9), float32],) */;
  %653 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %654 = %646.2;
  %655 = %649.1;
  %656 = %652.0;
  %657 = %653.0;
  (%654, %655, %var_6543, %656, %var_6558, %657)
}

def @func_4203(%var_4199: Tensor[(14, 11, 8), float32]) -> Tensor[(14, 11, 8), float32] {
  %658 = cast(%var_4199, dtype="float32") /* ty=Tensor[(14, 11, 8), float32] */;
  log(%658) /* ty=Tensor[(14, 11, 8), float32] */
}

def @func_4177() -> (Tensor[(14, 9, 6), float32],) {
  %659 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %660 = %659.0;
  (%660,)
}

def @func_5167(%var_5164: Tensor[(5, 11, 4), float32], %var_5165: Tensor[(756), float32], %var_5166: Tensor[(1980), bool]) -> (Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 9, 6), float32]) {
  @func_5162(%var_5164, %var_5165, %var_5166) /* ty=(Tensor[(1980), bool], Tensor[(756), float32], Tensor[(1980), float32], Tensor[(5, 11, 4), float64], Tensor[(14, 9, 6), float32]) */
}

def @func_5713() -> (Tensor[(14, 9, 6), int16], Tensor[(?, 12, 14), float32]) {
  %661 = @func_5412() /* ty=(Tensor[(14, 9, 6), uint8], Tensor[(14, 9, 6), float32]) */;
  %662 = %661.1;
  %663 = @func_3658() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %664 = %663.0;
  %665 = cast(%664, dtype="int16") /* ty=Tensor[(14, 9, 6), int16] */;
  %666 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%662, dtype="int16") /* ty=Tensor[(14, 9, 6), int16] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %669 = cast(meta[relay.Constant][34] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %670 = reshape(%669, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %671 = @func_3183(%670) /* ty=(Tensor[(1, 12, 14), float32], Tensor[(14, 10, 6), uint64], Tensor[(840), uint64]) */;
  %672 = %671.0;
  %673 = cast(meta[relay.Constant][34] /* ty=Tensor[(168), float32] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = greater(%675, %676) /* ty=Tensor[(?, 12, 14), bool] */;
  %678 = cast(%677, dtype="float32") /* ty=Tensor[(?, 12, 14), float32] */;
  %679 = bitwise_and(%667, %668) /* ty=Tensor[(14, 9, 6), int16] */;
  %680 = atanh(%678) /* ty=Tensor[(?, 12, 14), float32] */;
  (%679, %680)
}

def @func_4701() -> (Tensor[(14, 9, 6), float32],) {
  %681 = @func_4283() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %682 = %681.0;
  (%682,)
}

def @func_5591() -> Tensor[(14, 9, 6), float32] {
  %683 = @func_4770() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %683.0
}

def @func_928(%var_926: Tensor[(11, 15), float32]) -> (Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) {
  @func_925(%var_926) /* ty=(Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) */
}

def @func_4137() -> Tensor[(14, 9, 6), float32] {
  @func_4135() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_3850(%var_3848: uint64) -> (Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) {
  @func_3847(%var_3848) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(8, 14, 7), float32], Tensor[(165), float32], Tensor[(12, 15, 13), uint64], uint64) */
}

def @func_7942() -> (Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) {
  @func_7940() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */
}

def @func_5277() -> Tensor[(14, 9, 6), float32] {
  @func_5275() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_5974(%var_5934: Tensor[(3, 4, 14), uint16]) -> (Tensor[(3, 4, 14), uint16], Tensor[(1456), uint8], Tensor[(3, 4, 14), float64]) {
  %684 = cast(%var_5934, dtype="uint16") /* ty=Tensor[(3, 4, 14), uint16] */;
  %685 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(3, 4, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 4, 14), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4, 14), uint16] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %688 = cast(meta[relay.Constant][36] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %689 = reshape(%688, newshape=[14, 8, 13]) /* ty=Tensor[(14, 8, 13), float32] */;
  %690 = @func_5343(%689) /* ty=(Tensor[(14, 8, 13), float32], Tensor[(14, 9, 6), float32]) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="uint8") /* ty=Tensor[(14, 8, 13), uint8] */;
  %693 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(1456), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %694 = cast(meta[relay.Constant][36] /* ty=Tensor[(1456), float32] */, dtype="uint8") /* ty=Tensor[(1456), uint8] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %696 = cast(%var_5934, dtype="float64") /* ty=Tensor[(3, 4, 14), float64] */;
  %697 = right_shift(%686, %687) /* ty=Tensor[(3, 4, 14), uint16] */;
  %698 = maximum(%694, %695) /* ty=Tensor[(1456), uint8] */;
  %699 = log(%696) /* ty=Tensor[(3, 4, 14), float64] */;
  (%697, %698, %699)
}

def @func_4800(%var_4798: Tensor[(4, 13, 9), float32]) -> Tensor[(4, 13, 9), float32] {
  @func_4797(%var_4798) /* ty=Tensor[(4, 13, 9), float32] */
}

def @func_4102(%var_4100: Tensor[(780), int8]) -> (Tensor[(14, 9, 6), float32], Tensor[(4, 13, 15), int8], Tensor[(780), int8]) {
  @func_4099(%var_4100) /* ty=(Tensor[(14, 9, 6), float32], Tensor[(4, 13, 15), int8], Tensor[(780), int8]) */
}

def @func_7989() -> (Tensor[(14, 9, 6), float32],) {
  %700 = @func_7482() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(6, 6, 12), float32], Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32], Tensor[(432), float64], Tensor[(14, 9, 6), float32]) */;
  %701 = %700.0;
  (%701,)
}

def @func_7343() -> (Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) {
  %702 = @func_5885() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %705 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 156), int8] */, dtype="int8") /* ty=Tensor[(5, 156), int8] */;
  %706 = reshape(%705, newshape=[4, 13, 15]) /* ty=Tensor[(4, 13, 15), int8] */;
  %707 = @func_1553(%706) /* ty=(Tensor[(4, 13, 15), int8],) */;
  %708 = %707.0;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(4, 13, 15), float64] */;
  %710 = log10(%704) /* ty=Tensor[(14, 9, 6), float64] */;
  %711 = sin(%709) /* ty=Tensor[(4, 13, 15), float64] */;
  (%710, meta[relay.Constant][37] /* ty=Tensor[(5, 156), int8] */, %711)
}

def @func_5833() -> (Tensor[(14, 9, 6), float64], Tensor[(14, 9, 6), float32]) {
  %716 = fn () -> (Tensor[(14, 9, 6), float64], Tensor[(14, 9, 6), float32]) {
    %712 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
    %713 = cast(%712, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
    %714 = atanh(%713) /* ty=Tensor[(14, 9, 6), float64] */;
    %715 = @func_4858() /* ty=Tensor[(14, 9, 6), float32] */;
    (%714, %715)
  };
  %716() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(14, 9, 6), float32]) */
}

def @func_4664(%var_4659: Tensor[(1980), bool]) -> (Tensor[(14, 9, 6), float32], Tensor[(132), int64], Tensor[(2, 11, 6), float32], Tensor[(1980), bool], Tensor[(1980), bool]) {
  %717 = @func_4158() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %718 = cast(meta[relay.Constant][38] /* ty=Tensor[(132), int64] */, dtype="int64") /* ty=Tensor[(132), int64] */;
  %719 = reshape(%718, newshape=[2, 11, 6]) /* ty=Tensor[(2, 11, 6), int64] */;
  %720 = @func_3220(%719) /* ty=(Tensor[(2, 11, 6), bool], Tensor[(2, 11, 6), float64]) */;
  %721 = %720.1;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(2, 11, 6), float32] */;
  %723 = %717.0;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
  %725 = cast(meta[relay.Constant][39] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %726 = reshape(%724, newshape=[14, 9, 6]) /* ty=Tensor[(14, 9, 6), float32] */;
  %727 = reshape(%725, newshape=[1980]) /* ty=Tensor[(1980), bool] */;
  %728 = @func_4061(%726, %727) /* ty=(Tensor[(12, 11, 15), bool], Tensor[(1980), bool], Tensor[(14, 9, 6), float32]) */;
  %729 = cast(%var_4659, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %730 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(1980), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %731 = cast(meta[relay.Constant][39] /* ty=Tensor[(1980), bool] */, dtype="bool") /* ty=Tensor[(1980), bool] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?), bool] */;
  %733 = erf(%722) /* ty=Tensor[(2, 11, 6), float32] */;
  %734 = %728.1;
  %735 = logical_and(%731, %732) /* ty=Tensor[(1980), bool] */;
  (%723, meta[relay.Constant][38] /* ty=Tensor[(132), int64] */, %733, %734, %735)
}

def @func_6762() -> Tensor[(14, 9, 6), float32] {
  %737 = fn () -> Tensor[(14, 9, 6), float32] {
    %736 = @func_4701() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %736.0
  };
  %737() /* ty=Tensor[(14, 9, 6), float32] */
}

def @func_6842() -> (Tensor[(14, 9, 6), float32],) {
  %742 = fn () -> (Tensor[(14, 9, 6), float32],) {
    %738 = @func_5049() /* ty=(Tensor[(14, 9, 6), uint8],) */;
    %739 = %738.0;
    %740 = cast(%739, dtype="float32") /* ty=Tensor[(14, 9, 6), float32] */;
    %741 = acos(%740) /* ty=Tensor[(14, 9, 6), float32] */;
    (%741,)
  };
  %742() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_7241() -> (Tensor[(14, 9, 6), float64],) {
  %747 = fn () -> (Tensor[(14, 9, 6), float64],) {
    %743 = @func_5478() /* ty=(Tensor[(14, 9, 6), float32],) */;
    %744 = %743.0;
    %745 = cast(%744, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
    %746 = sigmoid(%745) /* ty=Tensor[(14, 9, 6), float64] */;
    (%746,)
  };
  %747() /* ty=(Tensor[(14, 9, 6), float64],) */
}

def @func_925(%var_909: Tensor[(11, 15), float32]) -> (Tensor[(11, 15), float32], Tensor[(8, 14, 7), float32], Tensor[(784), float32]) {
  %748 = cast(%var_909, dtype="float32") /* ty=Tensor[(11, 15), float32] */;
  %749 = cast(meta[relay.Constant][40] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %750 = reshape(%749, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), float32] */;
  %751 = @func_348(%750) /* ty=(Tensor[(8, 14, 7), float32],) */;
  %752 = log2(%748) /* ty=Tensor[(11, 15), float32] */;
  %753 = %751.0;
  (%752, %753, meta[relay.Constant][40] /* ty=Tensor[(784), float32] */)
}

def @func_7521() -> Tensor[(14, 9, 6), float64] {
  %755 = fn () -> Tensor[(14, 9, 6), float64] {
    %754 = @func_7343() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) */;
    %754.0
  };
  %755() /* ty=Tensor[(14, 9, 6), float64] */
}

def @func_3392(%var_3390: Tensor[(12, 2, 5), float64]) -> Tensor[(12, 2, 5), float64] {
  @func_3389(%var_3390) /* ty=Tensor[(12, 2, 5), float64] */
}

def @func_1959(%var_1956: uint16, %var_1957: Tensor[(8, 5, 11), uint16], %var_1958: Tensor[(512), int8]) -> (Tensor[(8, 5, 11), uint8], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) {
  @func_1954(%var_1956, %var_1957, %var_1958) /* ty=(Tensor[(8, 5, 11), uint8], Tensor[(8, 16, 4), int8], Tensor[(512), int8]) */
}

def @func_129(%var_128: Tensor[(14, 10, 6), uint64]) -> Tensor[(14, 10, 6), uint64] {
  %760 = fn (%var_117: Tensor[(14, 10, 6), uint64]) -> Tensor[(14, 10, 6), uint64] {
    %756 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 10, 6), uint64] */, dtype="uint64") /* ty=Tensor[(14, 10, 6), uint64] */;
    %757 = shape_of(%var_117, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%var_117, dtype="uint64") /* ty=Tensor[(14, 10, 6), uint64] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%758, %759) /* ty=Tensor[(14, 10, 6), uint64] */
  };
  %760(%var_128) /* ty=Tensor[(14, 10, 6), uint64] */
}

def @func_4703() -> (Tensor[(14, 9, 6), float32],) {
  @func_4701() /* ty=(Tensor[(14, 9, 6), float32],) */
}

def @func_2269(%var_2265: Tensor[(15, 8, 9), float32]) -> (Tensor[(15, 8, 9), float32],) {
  %761 = cast(%var_2265, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %762 = cosh(%761) /* ty=Tensor[(15, 8, 9), float32] */;
  (%762,)
}

def @func_7296() -> (Tensor[(14, 9, 6), float64],) {
  %763 = @func_3802() /* ty=(Tensor[(14, 9, 6), float32],) */;
  %764 = %763.0;
  %765 = cast(%764, dtype="float64") /* ty=Tensor[(14, 9, 6), float64] */;
  %766 = exp(%765) /* ty=Tensor[(14, 9, 6), float64] */;
  (%766,)
}

def @func_6968(%var_6961: Tensor[(7, 5, 7), float64], %var_6962: Tensor[(7, 5, 7), float64]) -> Tensor[(7, 5, 7), float64] {
  %767 = cast(%var_6962, dtype="float64") /* ty=Tensor[(7, 5, 7), float64] */;
  %768 = shape_of(%var_6961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_6961, dtype="float64") /* ty=Tensor[(7, 5, 7), float64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%769, %770) /* ty=Tensor[(7, 5, 7), float64] */
}

def @main(%var_8031: Tensor[(5, 156), int8], %var_8048: Tensor[(5, 156), int8], %var_8061: Tensor[(512), int8], %var_8063: Tensor[(165), float32], %var_8064: Tensor[(500), float32], %var_8066: Tensor[(165), float32]) -> (Tensor[(14, 9, 6), float32], Tensor[(5, 156), bool], Tensor[(5, 156), uint8], Tensor[(14, 9, 6), float32], Tensor[(165), float32], Tensor[(24), float64], uint16, Tensor[(512), int8], Tensor[(432), float32], Tensor[(500), float32], Tensor[(165), bool]) {
  %771 = @func_7942() /* ty=(Tensor[(14, 9, 6), float32], Tensor[(14, 9, 6), float32]) */;
  %772 = @func_7345() /* ty=(Tensor[(14, 9, 6), float64], Tensor[(5, 156), int8], Tensor[(4, 13, 15), float64]) */;
  %773 = %772.1;
  %774 = cast(%var_8031, dtype="bool") /* ty=Tensor[(5, 156), bool] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %776 = cast(%773, dtype="bool") /* ty=Tensor[(5, 156), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %778 = cast(%var_8048, dtype="uint8") /* ty=Tensor[(5, 156), uint8] */;
  %779 = shape_of(%773, dtype="int32") /* ty=Tensor[(2), int32] */;
  %780 = cast(%773, dtype="uint8") /* ty=Tensor[(5, 156), uint8] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %783 = cast(meta[relay.Constant][43] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %784 = cast(%var_8061, dtype="int8") /* ty=Tensor[(512), int8] */;
  %785 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %786 = cast(%var_8063, dtype="float32") /* ty=Tensor[(165), float32] */;
  %787 = cast(%var_8064, dtype="float32") /* ty=Tensor[(500), float32] */;
  %788 = reshape(%782, newshape=[2, 12, 1]) /* ty=Tensor[(2, 12, 1), float64] */;
  %789 = reshape(%783, newshape=[]) /* ty=uint16 */;
  %790 = reshape(%784, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %791 = reshape(%785, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %792 = reshape(%786, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %793 = reshape(%787, newshape=[500]) /* ty=Tensor[(500), float32] */;
  %794 = @func_2418(%788, %789, %790, %791, %792, %793) /* ty=(Tensor[(512), int8], uint16, Tensor[(440), uint16], Tensor[(512), int8], Tensor[(9, 3, 16), uint64], Tensor[(432), float32], Tensor[(840), uint64], Tensor[(2, 12, 1), float64], Tensor[(11, 15), float32], Tensor[(165), float32], Tensor[(2, 12, 1), float64], Tensor[(8, 5, 5), uint16], Tensor[(200, 1), uint16], Tensor[(500), float32]) */;
  %795 = cast(%var_8066, dtype="bool") /* ty=Tensor[(165), bool] */;
  %796 = shape_of(%var_8063, dtype="int32") /* ty=Tensor[(1), int32] */;
  %797 = cast(%var_8063, dtype="bool") /* ty=Tensor[(165), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), bool] */;
  %799 = %771.1;
  %800 = not_equal(%776, %777) /* ty=Tensor[(5, 156), bool] */;
  %801 = right_shift(%780, %781) /* ty=Tensor[(5, 156), uint8] */;
  %802 = @func_5275() /* ty=Tensor[(14, 9, 6), float32] */;
  %803 = %794.9;
  %804 = equal(%797, %798) /* ty=Tensor[(165), bool] */;
  (%799, %800, %801, %802, %803, meta[relay.Constant][42] /* ty=Tensor[(24), float64] */, meta[relay.Constant][43] /* ty=uint16 */, %var_8061, meta[relay.Constant][44] /* ty=Tensor[(432), float32] */, %var_8064, %804)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen6/build/output.py", line 2125, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:43:31] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

