==========mod==========
#[version = "0.0.5"]
def @func_6562(%var_6547: Tensor[(16, 13, 6), float32]) -> (Tensor[(16, 13, 6), float32], Tensor[(3, 243), float32]) {
  %0 = cast(%var_6547, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
  %1 = @func_2590() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) */;
  %2 = cos(%0) /* ty=Tensor[(16, 13, 6), float32] */;
  %3 = %1.3;
  (%2, %3)
}

def @func_6394() -> (Tensor[(5, 8, 14), float32],) {
  %4 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
  (%4,)
}

def @func_6581() -> Tensor[(5, 8, 14), float32] {
  %5 = @func_4044() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %5.0
}

def @func_2966() -> Tensor[(5, 8, 14), float32] {
  @func_1027() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_7250(%var_7233: float32) -> (Tensor[(12, 9, 12), float32],) {
  %6 = cast(%var_7233, dtype="float32") /* ty=float32 */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 12), float32] */;
  %8 = power(%6, %7) /* ty=Tensor[(12, 9, 12), float32] */;
  (%8,)
}

def @func_4716() -> (Tensor[(5, 8, 14), float32],) {
  %9 = @func_3768() /* ty=Tensor[(5, 8, 14), float32] */;
  (%9,)
}

def @func_1618() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) {
  %10 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %12 = reshape(%11, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %13 = @func_248(%12) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %14 = %13.0;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(520), float64] */, dtype="float32") /* ty=Tensor[(520), float32] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="float32") /* ty=Tensor[(4, 13, 10), float32] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %19 = %10.1;
  %20 = minimum(%17, %18) /* ty=Tensor[(4, 13, 10), float32] */;
  (%19, %20)
}

def @func_4393() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) {
  %21 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %22 = %21.0;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %24 = reshape(%23, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %25 = @func_3455(%24) /* ty=(Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), bool]) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %28 = reshape(%27, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %29 = @func_1485(%28) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) */;
  %30 = %29.0;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %32 = reshape(%31, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %33 = @func_1296(%32) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) */;
  %34 = %33.2;
  (%22, %26, %30, %34)
}

def @func_2013() -> Tensor[(5, 8, 14), float32] {
  @func_1027() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_5359() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int8], Tensor[(4, 13, 10), int64]) {
  %35 = @func_4803() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) */;
  %36 = @func_2966() /* ty=Tensor[(5, 8, 14), float32] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 8, 14), float32] */, dtype="int8") /* ty=Tensor[(5, 8, 14), int8] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="int8") /* ty=Tensor[(5, 8, 14), int8] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %41 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %42 = %41.1;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 13, 10), float64] */, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %47 = %35.0;
  %48 = subtract(%39, %40) /* ty=Tensor[(5, 8, 14), int8] */;
  %49 = subtract(%45, %46) /* ty=Tensor[(4, 13, 10), int64] */;
  (%47, %48, %49)
}

def @func_5495() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(3, 243), float32]) {
  %50 = @func_5207() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %51 = @func_2676() /* ty=Tensor[(3, 243), float32] */;
  %52 = cast(%51, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %53 = %50.1;
  %54 = @func_4955() /* ty=Tensor[(5, 8, 14), bool] */;
  %55 = tan(%52) /* ty=Tensor[(3, 243), float32] */;
  (%53, %54, %55)
}

def @func_4044() -> (Tensor[(5, 8, 14), float32],) {
  %56 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %57 = %56.0;
  (%57,)
}

def @func_4067() -> Tensor[(5, 8, 14), float32] {
  %58 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %58.0
}

def @func_1444(%var_1389: Tensor[(5, 8, 14), float32], %var_1401: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %59 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %60 = %59.1;
  %61 = cast(%var_1401, dtype="int64") /* ty=Tensor[(5, 8, 14), int64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="int64") /* ty=Tensor[(5, 8, 14), int64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %65 = cast(%var_1389, dtype="uint16") /* ty=Tensor[(5, 8, 14), uint16] */;
  %66 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%60, dtype="uint16") /* ty=Tensor[(5, 8, 14), uint16] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %69 = left_shift(%67, %68) /* ty=Tensor[(5, 8, 14), uint16] */;
  %70 = cast(%69, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %71 = cast(%var_1401, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %72 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %73 = minimum(%63, %64) /* ty=Tensor[(5, 8, 14), int64] */;
  %74 = acosh(%70) /* ty=Tensor[(5, 8, 14), float32] */;
  %75 = log2(%71) /* ty=Tensor[(5, 8, 14), float32] */;
  %76 = %72.1;
  (%73, %74, %75, %76)
}

def @func_1700(%var_1679: Tensor[(260, 2), float64]) -> (Tensor[(5, 8, 14), float32], Tensor[(520), float64], Tensor[(1008), float32], Tensor[(260, 2), float64], Tensor[(4, 13, 10), float64]) {
  %77 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %78 = cast(meta[relay.Constant][4] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %79 = cast(%var_1679, dtype="float64") /* ty=Tensor[(260, 2), float64] */;
  %80 = reshape(%78, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %81 = reshape(%79, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %82 = @func_1254(%80, %81) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %84 = cast(%var_1679, dtype="float64") /* ty=Tensor[(260, 2), float64] */;
  %85 = reshape(%83, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %86 = reshape(%84, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %87 = @func_1254(%85, %86) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %88 = %77.0;
  %89 = %82.3;
  %90 = %87.2;
  (%88, %89, meta[relay.Constant][4] /* ty=Tensor[(1008), float32] */, %var_1679, %90)
}

def @func_5705() -> Tensor[(5, 8, 14), float32] {
  %91 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %91.0
}

def @func_6496() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
  %92 = @func_4703() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) */;
  %93 = @func_2484() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */;
  %94 = %92.1;
  %95 = %93.1;
  (%94, %95)
}

def @func_7341(%var_7319: Tensor[(3, 243), float32], %var_7335: Tensor[(1344), uint8], %var_7337: int64) -> (Tensor[(3, 243), bool], Tensor[(1, 8, 13), bool], Tensor[(1344), uint8], Tensor[(9, 260), float32], int64, Tensor[(104), int64]) {
  %96 = @func_5429() /* ty=Tensor[(3, 243), float32] */;
  %97 = cast(%var_7319, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(2), int32] */;
  %99 = cast(%96, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %101 = subtract(%99, %100) /* ty=Tensor[(3, 243), float32] */;
  %102 = cast(%101, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %103 = shape_of(%96, dtype="int32") /* ty=Tensor[(2), int32] */;
  %104 = cast(%96, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %106 = cast(%var_7335, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %107 = cast(%var_7335, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %108 = cast(%var_7335, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %109 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 260), float32] */, dtype="float32") /* ty=Tensor[(9, 260), float32] */;
  %110 = cast(%var_7337, dtype="int64") /* ty=int64 */;
  %111 = cast(meta[relay.Constant][6] /* ty=Tensor[(104), int64] */, dtype="int64") /* ty=Tensor[(104), int64] */;
  %112 = reshape(%106, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), uint8] */;
  %113 = reshape(%107, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), uint8] */;
  %114 = reshape(%108, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), uint8] */;
  %115 = reshape(%109, newshape=[2340]) /* ty=Tensor[(2340), float32] */;
  %116 = reshape(%110, newshape=[]) /* ty=int64 */;
  %117 = reshape(%111, newshape=[104]) /* ty=Tensor[(104), int64] */;
  %118 = @func_6687(%112, %113, %114, %115, %116, %117) /* ty=(Tensor[(16, 7, 12), uint8], Tensor[(5, 8, 14), float32], Tensor[(16, 7, 12), float64], Tensor[(13, 15, 12), float32], Tensor[(2340), float32], Tensor[(1, 8, 13), bool], int64, Tensor[(104), int64]) */;
  %119 = greater(%104, %105) /* ty=Tensor[(3, 243), bool] */;
  %120 = %118.5;
  (%119, %120, %var_7335, meta[relay.Constant][5] /* ty=Tensor[(9, 260), float32] */, %var_7337, meta[relay.Constant][6] /* ty=Tensor[(104), int64] */)
}

def @func_7733() -> (Tensor[(1560), float32], Tensor[(5, 8, 14), float32]) {
  %121 = @func_7308() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(60), bool], Tensor[(1560), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %122 = %121.3;
  %123 = cast(%122, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %124 = @func_7195() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) */;
  %125 = sinh(%123) /* ty=Tensor[(1560), float32] */;
  %126 = %124.0;
  (%125, %126)
}

def @func_7595(%var_7479: Tensor[(288), uint64], %var_7533: Tensor[(81, 9), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(9, 4, 8), float64], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32], Tensor[(3, 243), float32], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32]) {
  %127 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %128 = cast(meta[relay.Constant][7] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %129 = cast(%var_7479, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %130 = reshape(%128, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint64] */;
  %131 = reshape(%129, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint64] */;
  %132 = @func_4259(%130, %131) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) */;
  %133 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %134 = @func_6992() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16]) */;
  %135 = @func_4393() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) */;
  %136 = %135.3;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %138 = sigmoid(%137) /* ty=Tensor[(81, 9), float32] */;
  %139 = cast(meta[relay.Constant][8] /* ty=Tensor[(81, 9), float32] */, dtype="float64") /* ty=Tensor[(81, 9), float64] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(2), int32] */;
  %141 = cast(%138, dtype="float64") /* ty=Tensor[(81, 9), float64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %143 = power(%141, %142) /* ty=Tensor[(81, 9), float64] */;
  %144 = cast(%138, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %145 = log2(%144) /* ty=Tensor[(81, 9), float32] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %147 = shape_of(%143, dtype="int32") /* ty=Tensor[(2), int32] */;
  %148 = cast(%143, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %150 = cast(%var_7533, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %151 = reshape(%150, newshape=[3, 243]) /* ty=Tensor[(3, 243), float32] */;
  %152 = @func_5811(%151) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(520), int32], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(3, 243), float64], Tensor[(3, 243), bool]) */;
  %153 = @func_2716() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %154 = cast(%var_7533, dtype="int8") /* ty=Tensor[(81, 9), int8] */;
  %155 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
  %156 = cast(%145, dtype="int8") /* ty=Tensor[(81, 9), int8] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %158 = add(%156, %157) /* ty=Tensor[(81, 9), int8] */;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %160 = %127.0;
  %161 = %132.0;
  %162 = %133.1;
  %163 = %134.1;
  %164 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
  %165 = mod(%148, %149) /* ty=Tensor[(81, 9), float32] */;
  %166 = %152.3;
  %167 = %153.0;
  %168 = asin(%159) /* ty=Tensor[(81, 9), float32] */;
  (%160, %161, meta[relay.Constant][7] /* ty=Tensor[(32), uint64] */, %var_7479, %162, %163, %164, %165, %166, %167, %168)
}

def @func_7308() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(60), bool], Tensor[(1560), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %169 = @func_1755() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %170 = @func_4703() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) */;
  %171 = @func_5696() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(1560), float32]) */;
  %172 = @func_3925() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %173 = @func_6220() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %174 = %169.0;
  %175 = @func_4485() /* ty=Tensor[(5, 8, 14), float32] */;
  %176 = %170.7;
  %177 = %171.1;
  %178 = %172.1;
  %179 = %173.0;
  (%174, %175, %176, %177, %178, %179)
}

def @func_7888() -> (Tensor[(5, 8, 14), float32],) {
  %180 = @func_6581() /* ty=Tensor[(5, 8, 14), float32] */;
  (%180,)
}

def @func_6049() -> (Tensor[(11, 2, 15), uint32], Tensor[(11, 2, 15), bool]) {
  %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 15), float32] */;
  %182 = tan(%181) /* ty=Tensor[(11, 2, 15), float32] */;
  %183 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 2, 15), float32] */, dtype="uint32") /* ty=Tensor[(11, 2, 15), uint32] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="uint32") /* ty=Tensor[(11, 2, 15), uint32] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %187 = cast(%182, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
  %188 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 2, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 2, 15), float32] */, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %191 = bitwise_or(%185, %186) /* ty=Tensor[(11, 2, 15), uint32] */;
  %192 = less_equal(%189, %190) /* ty=Tensor[(11, 2, 15), bool] */;
  (%191, %192)
}

def @func_3645(%var_3641: Tensor[(2, 5, 6), bool]) -> Tensor[(2, 5, 6), bool] {
  %193 = cast(%var_3641, dtype="bool") /* ty=Tensor[(2, 5, 6), bool] */;
  %194 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(2, 5, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 5, 6), bool] */, dtype="bool") /* ty=Tensor[(2, 5, 6), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%195, %196) /* ty=Tensor[(2, 5, 6), bool] */
}

def @func_4876() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 104), float64], Tensor[(1008), float32], Tensor[(5, 8, 14), float32]) {
  %197 = @func_1618() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */;
  %198 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %200 = reshape(%199, newshape=[12, 84]) /* ty=Tensor[(12, 84), float32] */;
  %201 = @func_3689(%200) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) */;
  %202 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %203 = %197.0;
  %204 = %198.0;
  %205 = %201.3;
  %206 = %202.1;
  (%203, %204, %205, meta[relay.Constant][11] /* ty=Tensor[(1008), float32] */, %206)
}

def @func_1319(%var_1301: Tensor[(13, 15, 12), float32], %var_1302: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) {
  %207 = cast(%var_1302, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %208 = shape_of(%var_1301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_1301, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %211 = cast(meta[relay.Constant][12] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %212 = reshape(%211, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %213 = mod(%209, %210) /* ty=Tensor[(13, 15, 12), float32] */;
  %214 = @func_1191(%212) /* ty=Tensor[(5, 8, 14), bool] */;
  (%213, %214, meta[relay.Constant][12] /* ty=Tensor[(560), float32] */)
}

def @func_1993() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) {
  %215 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %216 = cast(meta[relay.Constant][13] /* ty=Tensor[(128), int16] */, dtype="int16") /* ty=Tensor[(128), int16] */;
  %217 = cast(meta[relay.Constant][14] /* ty=Tensor[(1792), int16] */, dtype="int16") /* ty=Tensor[(1792), int16] */;
  %218 = reshape(%216, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int16] */;
  %219 = reshape(%217, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), int16] */;
  %220 = @func_920(%218, %219) /* ty=(Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) */;
  %221 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %222 = cast(meta[relay.Constant][15] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %223 = cast(meta[relay.Constant][16] /* ty=Tensor[(1008, 1), float32] */, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
  %224 = reshape(%222, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %225 = reshape(%223, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %226 = @func_1550(%224, %225) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) */;
  %227 = %215.1;
  %228 = %220.1;
  %229 = %221.0;
  %230 = %226.1;
  (%227, %228, meta[relay.Constant][13] /* ty=Tensor[(128), int16] */, meta[relay.Constant][14] /* ty=Tensor[(1792), int16] */, %229, %230, meta[relay.Constant][15] /* ty=Tensor[(48), float64] */, meta[relay.Constant][16] /* ty=Tensor[(1008, 1), float32] */)
}

def @func_3006() -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) {
  %231 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %234 = reshape(%233, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %235 = @func_2083(%234) /* ty=(Tensor[(5, 8, 14), float64],) */;
  %236 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %237 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%232, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = %235.0;
  %241 = less_equal(%238, %239) /* ty=Tensor[(5, 8, 14), bool] */;
  (%240, %241)
}

def @func_4544(%var_4507: Tensor[(7, 13, 11), uint16], %var_4508: Tensor[(7, 13, 11), uint16]) -> (Tensor[(7, 13, 11), uint16], Tensor[(5, 8, 14), bool], Tensor[(560), float32], Tensor[(7, 13, 11), bool]) {
  %242 = cast(%var_4508, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
  %243 = shape_of(%var_4507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %246 = cast(meta[relay.Constant][18] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %247 = reshape(%246, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %248 = @func_3127(%247) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
  %249 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 13, 11), uint16] */, dtype="bool") /* ty=Tensor[(7, 13, 11), bool] */;
  %250 = shape_of(%var_4507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%var_4507, dtype="bool") /* ty=Tensor[(7, 13, 11), bool] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %253 = add(%244, %245) /* ty=Tensor[(7, 13, 11), uint16] */;
  %254 = %248.1;
  %255 = not_equal(%251, %252) /* ty=Tensor[(7, 13, 11), bool] */;
  (%253, %254, meta[relay.Constant][18] /* ty=Tensor[(560), float32] */, %255)
}

def @func_5811(%var_5772: Tensor[(3, 243), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(520), int32], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(3, 243), float64], Tensor[(3, 243), bool]) {
  %256 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %257 = cast(meta[relay.Constant][20] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %258 = cast(meta[relay.Constant][20] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %259 = reshape(%257, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %260 = reshape(%258, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %261 = @func_5273(%259, %260) /* ty=(Tensor[(48), float64], Tensor[(5, 8, 14), bool], Tensor[(520), int32]) */;
  %262 = @func_5495() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(3, 243), float32]) */;
  %263 = %262.2;
  %264 = cast(%var_5772, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(2), int32] */;
  %266 = cast(%263, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %268 = power(%266, %267) /* ty=Tensor[(3, 243), float64] */;
  %269 = cast(%268, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %270 = cast(%263, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %271 = cast(%var_5772, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %272 = shape_of(%263, dtype="int32") /* ty=Tensor[(2), int32] */;
  %273 = cast(%263, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %275 = %256.0;
  %276 = %261.2;
  %277 = log2(%269) /* ty=Tensor[(3, 243), float32] */;
  %278 = exp(%270) /* ty=Tensor[(3, 243), float64] */;
  %279 = greater_equal(%273, %274) /* ty=Tensor[(3, 243), bool] */;
  (%275, %276, meta[relay.Constant][20] /* ty=Tensor[(520), float64] */, %277, %278, %279)
}

def @func_6943(%var_6939: Tensor[(15, 8, 7), float64]) -> Tensor[(15, 8, 7), float64] {
  %280 = cast(%var_6939, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %281 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%282, %283) /* ty=Tensor[(15, 8, 7), float64] */
}

def @func_6992() -> (Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16]) {
  %284 = @func_2716() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %285 = @func_6049() /* ty=(Tensor[(11, 2, 15), uint32], Tensor[(11, 2, 15), bool]) */;
  %286 = %285.1;
  %287 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 2, 15), bool] */, dtype="uint16") /* ty=Tensor[(11, 2, 15), uint16] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="uint16") /* ty=Tensor[(11, 2, 15), uint16] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %291 = %284.0;
  %292 = bitwise_xor(%289, %290) /* ty=Tensor[(11, 2, 15), uint16] */;
  (%291, %292)
}

def @func_4303(%var_4291: Tensor[(15, 10, 8), int64], %var_4292: Tensor[(15, 10, 8), int64]) -> (Tensor[(15, 10, 8), bool],) {
  %293 = cast(%var_4292, dtype="int64") /* ty=Tensor[(15, 10, 8), int64] */;
  %294 = shape_of(%var_4291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_4291, dtype="int64") /* ty=Tensor[(15, 10, 8), int64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %297 = right_shift(%295, %296) /* ty=Tensor[(15, 10, 8), int64] */;
  %298 = cast(%var_4292, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = logical_or(%300, %301) /* ty=Tensor[(15, 10, 8), bool] */;
  (%302,)
}

def @func_3562() -> (Tensor[(5, 8, 14), float32], Tensor[(13, 10, 12), float32], Tensor[(1560), float32]) {
  %303 = @func_3550() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %304 = cast(meta[relay.Constant][23] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %305 = reshape(%304, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), float32] */;
  %306 = %303.1;
  %307 = @func_2157(%305) /* ty=Tensor[(13, 10, 12), float32] */;
  (%306, %307, meta[relay.Constant][23] /* ty=Tensor[(1560), float32] */)
}

def @func_4609() -> Tensor[(5, 8, 14), float64] {
  @func_3303() /* ty=Tensor[(5, 8, 14), float64] */
}

def @func_6687(%var_6610: Tensor[(16, 7, 12), uint8], %var_6611: Tensor[(16, 7, 12), uint8], %var_6633: Tensor[(16, 7, 12), uint8], %var_6656: Tensor[(2340), float32], %var_6675: int64, %var_6676: Tensor[(104), int64]) -> (Tensor[(16, 7, 12), uint8], Tensor[(5, 8, 14), float32], Tensor[(16, 7, 12), float64], Tensor[(13, 15, 12), float32], Tensor[(2340), float32], Tensor[(1, 8, 13), bool], int64, Tensor[(104), int64]) {
  %308 = cast(%var_6611, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %309 = shape_of(%var_6610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_6610, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %312 = @func_5729() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %313 = cast(%var_6633, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
  %314 = shape_of(%var_6610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_6610, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %317 = cast(%var_6656, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %318 = cast(%var_6656, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %319 = reshape(%317, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %320 = reshape(%318, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %321 = @func_1319(%319, %320) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) */;
  %322 = cast(%var_6675, dtype="int64") /* ty=int64 */;
  %323 = cast(%var_6676, dtype="int64") /* ty=Tensor[(104), int64] */;
  %324 = reshape(%322, newshape=[]) /* ty=int64 */;
  %325 = reshape(%323, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), int64] */;
  %326 = @func_3225(%324, %325) /* ty=(Tensor[(1, 8, 13), bool],) */;
  %327 = logical_xor(%310, %311) /* ty=Tensor[(16, 7, 12), uint8] */;
  %328 = %312.0;
  %329 = power(%315, %316) /* ty=Tensor[(16, 7, 12), float64] */;
  %330 = %321.0;
  %331 = %326.0;
  (%327, %328, %329, %330, %var_6656, %331, %var_6675, %var_6676)
}

def @func_7699() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(3, 243), float32]) {
  %332 = @func_4716() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %333 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %334 = @func_2676() /* ty=Tensor[(3, 243), float32] */;
  %335 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 243), float32] */, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(2), int32] */;
  %337 = cast(%334, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %339 = not_equal(%337, %338) /* ty=Tensor[(3, 243), bool] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %341 = @func_3768() /* ty=Tensor[(5, 8, 14), float32] */;
  %342 = %332.0;
  %343 = %333.0;
  %344 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
  %345 = erf(%340) /* ty=Tensor[(3, 243), float32] */;
  (%341, %342, %343, %344, %345)
}

def @func_2294() -> (Tensor[(5, 8, 14), float32],) {
  %346 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %347 = %346.0;
  (%347,)
}

def @func_5207() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %348 = @func_5002() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %349 = %348.0;
  %350 = @func_4485() /* ty=Tensor[(5, 8, 14), float32] */;
  (%349, %350)
}

def @func_6836() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %351 = @func_4449() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %352 = %351.0;
  %353 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  (%352, %353)
}

def @func_7044(%var_7039: Tensor[(11, 10, 7), float32]) -> (Tensor[(11, 10, 7), float32],) {
  %354 = cast(%var_7039, dtype="float32") /* ty=Tensor[(11, 10, 7), float32] */;
  %355 = log(%354) /* ty=Tensor[(11, 10, 7), float32] */;
  (%355,)
}

def @func_7846(%var_7825: Tensor[(520), float64]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(520), float64], Tensor[(4, 13, 10), float32]) {
  %356 = @func_5074() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %357 = cast(%var_7825, dtype="float64") /* ty=Tensor[(520), float64] */;
  %358 = reshape(%357, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %359 = @func_248(%358) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %360 = %359.0;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(4, 13, 10), float32] */;
  %362 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
  %363 = %356.0;
  %364 = log2(%361) /* ty=Tensor[(4, 13, 10), float32] */;
  (%362, %363, %var_7825, %364)
}

def @func_1157() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %365 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %367 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %368 = acos(%366) /* ty=Tensor[(5, 8, 14), float32] */;
  %369 = %367.1;
  (%368, %369)
}

def @func_6360() -> Tensor[(5, 8, 14), float64] {
  %370 = @func_5074() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %370.0
}

def @func_7195() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) {
  %371 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %372 = @func_4803() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) */;
  %373 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %374 = %371.1;
  %375 = %372.2;
  (%373, %374, %375)
}

def @func_7423() -> (Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32]) {
  %376 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %377 = @func_4903() /* ty=Tensor[(5, 8, 14), bool] */;
  %378 = %376.0;
  (%377, %378)
}

def @func_3933() -> (Tensor[(5, 8, 14), float32],) {
  %379 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  (%379,)
}

def @main() -> Tensor[(9, 11, 3), int32] {
  %380 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 11, 1), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 1), int32] */;
  %381 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 11, 3), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 3), int32] */;
  bitwise_and(%380, %381) /* ty=Tensor[(9, 11, 3), int32] */
}

def @func_7864() -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32]) {
  %382 = @func_4393() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) */;
  %383 = @func_6916() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %384 = %382.2;
  %385 = %383.0;
  (%384, %385)
}

def @func_6870() -> Tensor[(5, 8, 14), float32] {
  %386 = @func_2511() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) */;
  %386.0
}

def @func_6537(%var_6518: uint16, %var_6519: Tensor[(9, 3, 13), uint16]) -> (Tensor[(9, 3, 13), uint16], Tensor[(9, 3, 13), float32]) {
  %387 = cast(%var_6518, dtype="uint16") /* ty=uint16 */;
  %388 = cast(%var_6519, dtype="uint16") /* ty=Tensor[(9, 3, 13), uint16] */;
  %389 = maximum(%387, %388) /* ty=Tensor[(9, 3, 13), uint16] */;
  %390 = cast(%389, dtype="uint16") /* ty=Tensor[(9, 3, 13), uint16] */;
  %391 = shape_of(%var_6519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_6519, dtype="uint16") /* ty=Tensor[(9, 3, 13), uint16] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %394 = cast(%389, dtype="float32") /* ty=Tensor[(9, 3, 13), float32] */;
  %395 = subtract(%392, %393) /* ty=Tensor[(9, 3, 13), uint16] */;
  %396 = sinh(%394) /* ty=Tensor[(9, 3, 13), float32] */;
  (%395, %396)
}

def @func_4036() -> Tensor[(5, 8, 14), float32] {
  @func_2966() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_1929() -> Tensor[(5, 8, 14), float32] {
  %397 = @func_1755() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %398 = %397.0;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  %400 = asinh(%399) /* ty=Tensor[(5, 8, 14), float64] */;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %402 = tan(%401) /* ty=Tensor[(5, 8, 14), float32] */;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  erf(%403) /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_3225(%var_3214: int64, %var_3215: Tensor[(1, 8, 13), int64]) -> (Tensor[(1, 8, 13), bool],) {
  %404 = cast(%var_3214, dtype="bool") /* ty=bool */;
  %405 = cast(%var_3215, dtype="bool") /* ty=Tensor[(1, 8, 13), bool] */;
  %406 = less(%404, %405) /* ty=Tensor[(1, 8, 13), bool] */;
  (%406,)
}

def @func_3254() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %407 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %408 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %409 = %407.0;
  %410 = %408.0;
  (%409, %410)
}

def @func_2649() -> (Tensor[(5, 8, 14), float32],) {
  %411 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %412 = %411.0;
  (%412,)
}

def @func_2554() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %413 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %414 = %413.0;
  %415 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  (%414, %415)
}

def @func_1485(%var_1461: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) {
  %416 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %417 = %416.0;
  %418 = cast(%var_1461, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %422 = cast(%var_1461, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  %423 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 2340), float32] */, dtype="float32") /* ty=Tensor[(1, 2340), float32] */;
  %424 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 2340), float32] */, dtype="float32") /* ty=Tensor[(1, 2340), float32] */;
  %425 = reshape(%423, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %426 = reshape(%424, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %427 = @func_1319(%425, %426) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) */;
  %428 = mod(%420, %421) /* ty=Tensor[(5, 8, 14), float64] */;
  %429 = exp(%422) /* ty=Tensor[(5, 8, 14), float64] */;
  %430 = %427.0;
  (%428, %429, %430, meta[relay.Constant][27] /* ty=Tensor[(1, 2340), float32] */)
}

def @func_6144(%var_6132: Tensor[(32), uint64], %var_6133: Tensor[(288), uint64]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64]) {
  %431 = @func_5315() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %432 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %433 = cast(%var_6132, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %434 = cast(%var_6133, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %435 = reshape(%433, newshape=[32]) /* ty=Tensor[(32), uint64] */;
  %436 = reshape(%434, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %437 = @func_5168(%435, %436) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), int64]) */;
  %438 = %431.0;
  %439 = %432.0;
  %440 = %437.0;
  (%438, %439, %440, %var_6132, %var_6133)
}

def @func_986(%var_975: Tensor[(9, 9, 9), float32], %var_982: Tensor[(520), float64]) -> (Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) {
  %441 = cast(%var_975, dtype="float32") /* ty=Tensor[(9, 9, 9), float32] */;
  %442 = cast(%var_982, dtype="float64") /* ty=Tensor[(520), float64] */;
  %443 = reshape(%442, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %444 = @func_248(%443) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %445 = acosh(%441) /* ty=Tensor[(9, 9, 9), float32] */;
  %446 = %444.0;
  (%445, %446, %var_982)
}

def @func_3995(%var_3984: Tensor[(130, 4), float64]) -> (Tensor[(5, 8, 14), bool], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(4, 13, 10), float64]) {
  %447 = @func_3006() /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
  %448 = cast(%var_3984, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
  %449 = reshape(%448, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %450 = @func_248(%449) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %451 = cast(%var_3984, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
  %452 = reshape(%451, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %453 = @func_248(%452) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %454 = %447.1;
  %455 = %450.0;
  %456 = %453.0;
  (%454, %455, %var_3984, %456)
}

def @func_3925() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %457 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %458 = @func_3796() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %459 = @func_2966() /* ty=Tensor[(5, 8, 14), float32] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %461 = %457.0;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %463 = reshape(%460, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %464 = reshape(%462, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %465 = @func_1444(%463, %464) /* ty=(Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %466 = %458.0;
  %467 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
  %468 = %465.3;
  (%461, %459, %466, %467, %468)
}

def @func_5168(%var_5160: Tensor[(32), uint64], %var_5161: Tensor[(288), uint64]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), int64]) {
  %469 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %470 = cast(%var_5160, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %471 = cast(%var_5161, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %472 = reshape(%470, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint64] */;
  %473 = reshape(%471, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint64] */;
  %474 = @func_4259(%472, %473) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) */;
  %475 = %469.0;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %477 = cast(%475, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %478 = reshape(%476, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %479 = reshape(%477, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %480 = @func_1444(%478, %479) /* ty=(Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %481 = %474.1;
  %482 = %480.0;
  (%475, %481, %var_5160, %var_5161, %482)
}

def @func_6285() -> Tensor[(5, 8, 14), bool] {
  %483 = @func_5942() /* ty=Tensor[(5, 8, 14), float32] */;
  %484 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%486, %487) /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_1089() -> (Tensor[(5, 8, 14), float32],) {
  %488 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %489 = %488.0;
  (%489,)
}

def @func_3455(%var_3418: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), bool]) {
  %490 = @func_2966() /* ty=Tensor[(5, 8, 14), float32] */;
  %491 = cast(%var_3418, dtype="int32") /* ty=Tensor[(5, 8, 14), int32] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="int32") /* ty=Tensor[(5, 8, 14), int32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %495 = logical_xor(%493, %494) /* ty=Tensor[(5, 8, 14), int32] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %497 = cast(%495, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %498 = reshape(%496, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %499 = reshape(%497, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %500 = @func_2355(%498, %499) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */;
  %501 = %500.1;
  (%495, %501)
}

def @func_1356(%var_1349: Tensor[(128), int16], %var_1350: Tensor[(1792), int16]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(8, 1, 16), float64], Tensor[(128), int16], Tensor[(1792), int16]) {
  %502 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %503 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %504 = %503.0;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %506 = reshape(%505, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %507 = @func_1296(%506) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) */;
  %508 = cast(%var_1349, dtype="int16") /* ty=Tensor[(128), int16] */;
  %509 = cast(%var_1350, dtype="int16") /* ty=Tensor[(1792), int16] */;
  %510 = reshape(%508, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int16] */;
  %511 = reshape(%509, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), int16] */;
  %512 = @func_920(%510, %511) /* ty=(Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) */;
  %513 = %502.1;
  %514 = %507.1;
  %515 = %512.3;
  (%513, %504, %514, %515, %var_1349, %var_1350)
}

def @func_4259(%var_4245: Tensor[(1, 4, 8), uint64], %var_4246: Tensor[(9, 4, 8), uint64]) -> (Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) {
  %516 = cast(%var_4245, dtype="uint64") /* ty=Tensor[(1, 4, 8), uint64] */;
  %517 = cast(%var_4246, dtype="uint64") /* ty=Tensor[(9, 4, 8), uint64] */;
  %518 = multiply(%516, %517) /* ty=Tensor[(9, 4, 8), uint64] */;
  %519 = cast(%518, dtype="float64") /* ty=Tensor[(9, 4, 8), float64] */;
  %520 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %521 = log(%519) /* ty=Tensor[(9, 4, 8), float64] */;
  %522 = %520.0;
  (%521, %522)
}

def @func_3768() -> Tensor[(5, 8, 14), float32] {
  %523 = @func_3254() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %523.0
}

def @func_5273(%var_5246: Tensor[(520), float64], %var_5266: Tensor[(520), float64]) -> (Tensor[(48), float64], Tensor[(5, 8, 14), bool], Tensor[(520), int32]) {
  %524 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %525 = cast(%var_5246, dtype="float64") /* ty=Tensor[(520), float64] */;
  %526 = reshape(%525, newshape=[130, 4]) /* ty=Tensor[(130, 4), float64] */;
  %527 = @func_3995(%526) /* ty=(Tensor[(5, 8, 14), bool], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(4, 13, 10), float64]) */;
  %528 = cast(%var_5266, dtype="int32") /* ty=Tensor[(520), int32] */;
  %529 = shape_of(%var_5246, dtype="int32") /* ty=Tensor[(1), int32] */;
  %530 = cast(%var_5246, dtype="int32") /* ty=Tensor[(520), int32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?), int32] */;
  %532 = %524.6;
  %533 = %527.0;
  %534 = minimum(%530, %531) /* ty=Tensor[(520), int32] */;
  (%532, %533, %534)
}

def @func_2119() -> (Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64]) {
  %535 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %536 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %537 = %536.1;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(4, 13, 10), float64] */;
  %539 = %535.0;
  %540 = erf(%538) /* ty=Tensor[(4, 13, 10), float64] */;
  (%539, %540)
}

def @func_1191(%var_1186: Tensor[(5, 8, 14), float32]) -> Tensor[(5, 8, 14), bool] {
  %541 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %542 = cast(%var_1186, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%544, %545) /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_4703() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) {
  %546 = @func_2649() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %547 = cast(meta[relay.Constant][29] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %548 = reshape(%547, newshape=[12, 84]) /* ty=Tensor[(12, 84), float32] */;
  %549 = @func_3689(%548) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) */;
  %550 = @func_2554() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %553 = reshape(%552, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %554 = cast(meta[relay.Constant][30] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %555 = reshape(%554, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), bool] */;
  %556 = %546.0;
  %557 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
  %558 = %549.4;
  %559 = @func_1191(%553) /* ty=Tensor[(5, 8, 14), bool] */;
  %560 = @func_3645(%555) /* ty=Tensor[(2, 5, 6), bool] */;
  (%556, %557, %558, meta[relay.Constant][29] /* ty=Tensor[(1008), float32] */, %551, %559, %560, meta[relay.Constant][30] /* ty=Tensor[(60), bool] */)
}

def @func_2511() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) {
  %561 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %562 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  %563 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  %564 = %561.0;
  (%562, %563, %564)
}

def @func_4803() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) {
  %565 = @func_4716() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %566 = %565.0;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %568 = reshape(%567, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %569 = @func_3127(%568) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
  %570 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %571 = %569.0;
  %572 = %570.0;
  %573 = @func_4609() /* ty=Tensor[(5, 8, 14), float64] */;
  (%566, %571, %572, %573)
}

def @func_2484() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
  %574 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %576 = cast(%574, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %577 = reshape(%575, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %578 = reshape(%576, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %579 = @func_2355(%577, %578) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */;
  %580 = %579.1;
  (%574, %580)
}

def @func_1652() -> (Tensor[(5, 8, 14), int16],) {
  %581 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %582 = %581.1;
  %583 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 8, 14), float32] */, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %587 = right_shift(%585, %586) /* ty=Tensor[(5, 8, 14), int16] */;
  (%587,)
}

def @func_2590() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) {
  %588 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %589 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %590 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 243), float32] */, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %591 = cast(meta[relay.Constant][33] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %592 = reshape(%590, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), float32] */;
  %593 = reshape(%591, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %594 = @func_986(%592, %593) /* ty=(Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %595 = %588.0;
  %596 = %589.0;
  %597 = %594.2;
  (%595, %596, %597, meta[relay.Constant][32] /* ty=Tensor[(3, 243), float32] */, meta[relay.Constant][33] /* ty=Tensor[(520), float64] */)
}

def @func_1755() -> (Tensor[(5, 8, 14), float32],) {
  %598 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %599 = %598.0;
  (%599,)
}

def @func_6089() -> (Tensor[(5, 8, 14), float32],) {
  %600 = @func_4485() /* ty=Tensor[(5, 8, 14), float32] */;
  (%600,)
}

def @func_248(%var_243: Tensor[(4, 13, 10), float64]) -> (Tensor[(4, 13, 10), float64],) {
  %601 = cast(%var_243, dtype="float64") /* ty=Tensor[(4, 13, 10), float64] */;
  %602 = sinh(%601) /* ty=Tensor[(4, 13, 10), float64] */;
  (%602,)
}

def @func_5002() -> (Tensor[(5, 8, 14), float32],) {
  %603 = @func_4044() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %604 = %603.0;
  (%604,)
}

def @func_920(%var_881: Tensor[(8, 1, 16), int16], %var_882: Tensor[(8, 14, 16), int16]) -> (Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) {
  %605 = cast(%var_881, dtype="int16") /* ty=Tensor[(8, 1, 16), int16] */;
  %606 = cast(%var_882, dtype="int16") /* ty=Tensor[(8, 14, 16), int16] */;
  %607 = cast(meta[relay.Constant][34] /* ty=Tensor[(130, 4), float64] */, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
  %608 = reshape(%607, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %609 = @func_248(%608) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %610 = cast(%var_881, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %611 = cast(meta[relay.Constant][34] /* ty=Tensor[(130, 4), float64] */, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
  %612 = reshape(%611, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %613 = @func_248(%612) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %614 = bitwise_xor(%605, %606) /* ty=Tensor[(8, 14, 16), int16] */;
  %615 = %609.0;
  %616 = log2(%610) /* ty=Tensor[(8, 1, 16), float64] */;
  %617 = %613.0;
  (%614, %615, meta[relay.Constant][34] /* ty=Tensor[(130, 4), float64] */, %616, %617)
}

def @func_5887(%var_5850: Tensor[(8, 11, 7), float32], %var_5851: Tensor[(8, 11, 7), float32], %var_5858: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float64], Tensor[(8, 11, 7), float64]) {
  %618 = cast(%var_5851, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %619 = shape_of(%var_5850, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%var_5850, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %622 = divide(%620, %621) /* ty=Tensor[(8, 11, 7), float32] */;
  %623 = cast(%var_5858, dtype="uint8") /* ty=Tensor[(8, 11, 7), uint8] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="uint8") /* ty=Tensor[(8, 11, 7), uint8] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %627 = multiply(%625, %626) /* ty=Tensor[(8, 11, 7), uint8] */;
  %628 = cast(%var_5851, dtype="float64") /* ty=Tensor[(8, 11, 7), float64] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="float64") /* ty=Tensor[(8, 11, 7), float64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %632 = cast(%var_5858, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %633 = sqrt(%632) /* ty=Tensor[(8, 11, 7), float32] */;
  %634 = cast(%633, dtype="float64") /* ty=Tensor[(8, 11, 7), float64] */;
  %635 = floor_divide(%630, %631) /* ty=Tensor[(8, 11, 7), float64] */;
  %636 = acosh(%634) /* ty=Tensor[(8, 11, 7), float64] */;
  (%635, %636)
}

def @func_3796() -> (Tensor[(5, 8, 14), float64],) {
  %637 = @func_3303() /* ty=Tensor[(5, 8, 14), float64] */;
  (%637,)
}

def @func_1296(%var_1272: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) {
  %638 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %639 = %638.0;
  %640 = cast(%var_1272, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %644 = cast(meta[relay.Constant][35] /* ty=Tensor[(81, 9), float32] */, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %645 = cast(meta[relay.Constant][36] /* ty=Tensor[(520, 1), float64] */, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %646 = reshape(%644, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), float32] */;
  %647 = reshape(%645, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %648 = @func_986(%646, %647) /* ty=(Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %649 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %650 = maximum(%642, %643) /* ty=Tensor[(5, 8, 14), int16] */;
  %651 = %648.1;
  %652 = %649.1;
  (%650, %651, meta[relay.Constant][35] /* ty=Tensor[(81, 9), float32] */, meta[relay.Constant][36] /* ty=Tensor[(520, 1), float64] */, %652)
}

def @func_1064() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %653 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %654 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %655 = %653.0;
  (%654, %655)
}

def @func_5546(%var_5522: Tensor[(5, 9, 12), float32]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %656 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %657 = shape_of(%var_5522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%var_5522, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %660 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %661 = maximum(%658, %659) /* ty=Tensor[(5, 9, 12), float32] */;
  %662 = sin(%660) /* ty=Tensor[(5, 9, 12), float32] */;
  (%661, %662)
}

def @func_6153() -> (Tensor[(5, 8, 14), float64],) {
  %663 = @func_3303() /* ty=Tensor[(5, 8, 14), float64] */;
  (%663,)
}

def @func_5729() -> (Tensor[(5, 8, 14), float32],) {
  %664 = @func_3550() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %665 = %664.1;
  (%665,)
}

def @func_5942() -> Tensor[(5, 8, 14), float32] {
  %666 = @func_4716() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %666.0
}

def @func_1011() -> (Tensor[(5, 8, 14), float32],) {
  %667 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
  %668 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %669 = power(%667, %668) /* ty=Tensor[(5, 8, 14), float32] */;
  (%669,)
}

def @func_2355(%var_2323: Tensor[(5, 8, 14), float32], %var_2337: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
  %670 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  %671 = cast(%var_2323, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %675 = cast(%var_2337, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %676 = shape_of(%var_2323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%var_2323, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = floor_mod(%673, %674) /* ty=Tensor[(5, 8, 14), float32] */;
  %680 = greater(%677, %678) /* ty=Tensor[(5, 8, 14), bool] */;
  (%679, %680)
}

def @func_5986() -> Tensor[(5, 8, 14), float32] {
  %681 = @func_2815() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */;
  %681.0
}

def @func_4485() -> Tensor[(5, 8, 14), float32] {
  %682 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %682.0
}

def @func_2157(%var_2153: Tensor[(13, 10, 12), float32]) -> Tensor[(13, 10, 12), float32] {
  %683 = cast(%var_2153, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  erf(%683) /* ty=Tensor[(13, 10, 12), float32] */
}

def @func_5696() -> (Tensor[(5, 8, 14), float32], Tensor[(1560), float32]) {
  %684 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %685 = @func_3562() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(13, 10, 12), float32], Tensor[(1560), float32]) */;
  %686 = %684.1;
  %687 = %685.2;
  (%686, %687)
}

def @func_6916() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %688 = @func_3550() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %689 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %690 = %688.1;
  %691 = %689.0;
  (%690, %691)
}

def @func_4449() -> (Tensor[(5, 8, 14), float32],) {
  %692 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %693 = %692.0;
  (%693,)
}

def @func_3318() -> (Tensor[(5, 8, 14), float32],) {
  %694 = @func_2649() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %695 = %694.0;
  (%695,)
}

def @func_7117(%var_7068: int8, %var_7069: Tensor[(1, 11, 3), int8]) -> (Tensor[(1, 11, 3), int8], Tensor[(5, 8, 14), float32], Tensor[(1008), float32], Tensor[(11, 11, 3), float64], Tensor[(5, 8, 14), float32]) {
  %696 = cast(%var_7068, dtype="int8") /* ty=int8 */;
  %697 = cast(%var_7069, dtype="int8") /* ty=Tensor[(1, 11, 3), int8] */;
  %698 = cast(meta[relay.Constant][40] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %699 = reshape(%698, newshape=[2, 504]) /* ty=Tensor[(2, 504), float32] */;
  %700 = @func_2909(%699) /* ty=(Tensor[(3, 243), float64], Tensor[(3, 243), float64], Tensor[(5, 8, 14), float32], Tensor[(12, 4), float64], Tensor[(2, 504), float32]) */;
  %701 = cast(%var_7069, dtype="bool") /* ty=Tensor[(1, 11, 3), bool] */;
  %702 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 11, 3), int8] */, dtype="bool") /* ty=Tensor[(11, 11, 3), bool] */;
  %703 = logical_or(%701, %702) /* ty=Tensor[(11, 11, 3), bool] */;
  %704 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 11, 3), int8] */, dtype="float64") /* ty=Tensor[(11, 11, 3), float64] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="float64") /* ty=Tensor[(11, 11, 3), float64] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %708 = maximum(%696, %697) /* ty=Tensor[(1, 11, 3), int8] */;
  %709 = %700.2;
  %710 = floor_divide(%706, %707) /* ty=Tensor[(11, 11, 3), float64] */;
  %711 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
  (%708, %709, meta[relay.Constant][40] /* ty=Tensor[(1008), float32] */, %710, %711)
}

def @func_6438() -> Tensor[(5, 8, 14), bool] {
  @func_6285() /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_1821(%var_1785: Tensor[(5, 8, 14), float32], %var_1810: Tensor[(128), int16]) -> (Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32], Tensor[(1792), int16], Tensor[(128), int16], Tensor[(448, 4), int16]) {
  %712 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %713 = %712.1;
  %714 = cast(%var_1785, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = cast(%713, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %719 = cast(%var_1810, dtype="int16") /* ty=Tensor[(128), int16] */;
  %720 = cast(meta[relay.Constant][42] /* ty=Tensor[(448, 4), int16] */, dtype="int16") /* ty=Tensor[(448, 4), int16] */;
  %721 = reshape(%719, newshape=[128]) /* ty=Tensor[(128), int16] */;
  %722 = reshape(%720, newshape=[1792]) /* ty=Tensor[(1792), int16] */;
  %723 = @func_1356(%721, %722) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(8, 1, 16), float64], Tensor[(128), int16], Tensor[(1792), int16]) */;
  %724 = equal(%716, %717) /* ty=Tensor[(5, 8, 14), bool] */;
  %725 = sin(%718) /* ty=Tensor[(5, 8, 14), float32] */;
  %726 = %723.5;
  (%724, %725, %726, %var_1810, meta[relay.Constant][42] /* ty=Tensor[(448, 4), int16] */)
}

def @func_6730() -> (Tensor[(5, 8, 14), float64],) {
  %727 = @func_4609() /* ty=Tensor[(5, 8, 14), float64] */;
  (%727,)
}

def @func_6220() -> (Tensor[(5, 8, 14), float32],) {
  %728 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %729 = %728.0;
  (%729,)
}

def @func_1593(%var_1589: Tensor[(16, 10, 8), float64]) -> Tensor[(16, 10, 8), float64] {
  %730 = cast(%var_1589, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
  sigmoid(%730) /* ty=Tensor[(16, 10, 8), float64] */
}

def @func_2083(%var_2077: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64],) {
  %731 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %732 = cast(%var_2077, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %736 = floor_divide(%734, %735) /* ty=Tensor[(5, 8, 14), float64] */;
  (%736,)
}

def @func_1254(%var_1237: Tensor[(9, 7, 16), float32], %var_1249: Tensor[(520), float64]) -> (Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) {
  %737 = cast(%var_1237, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %738 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(9, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %741 = cast(%var_1249, dtype="float64") /* ty=Tensor[(520), float64] */;
  %742 = reshape(%741, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %743 = @func_248(%742) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %744 = divide(%739, %740) /* ty=Tensor[(9, 7, 16), float32] */;
  %745 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %746 = %743.0;
  (%744, %745, %746, %var_1249)
}

def @func_3180(%var_3141: Tensor[(9, 7, 16), float32]) -> (Tensor[(9, 7, 16), float32], Tensor[(9, 7, 16), bool]) {
  %747 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %748 = %747.5;
  %749 = cast(%var_3141, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %753 = cast(%var_3141, dtype="int64") /* ty=Tensor[(9, 7, 16), int64] */;
  %754 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%748, dtype="int64") /* ty=Tensor[(9, 7, 16), int64] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %757 = bitwise_xor(%755, %756) /* ty=Tensor[(9, 7, 16), int64] */;
  %758 = cast(%757, dtype="uint16") /* ty=Tensor[(9, 7, 16), uint16] */;
  %759 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%748, dtype="uint16") /* ty=Tensor[(9, 7, 16), uint16] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %762 = logical_xor(%760, %761) /* ty=Tensor[(9, 7, 16), uint16] */;
  %763 = cast(%762, dtype="bool") /* ty=Tensor[(9, 7, 16), bool] */;
  %764 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%748, dtype="bool") /* ty=Tensor[(9, 7, 16), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = add(%751, %752) /* ty=Tensor[(9, 7, 16), float32] */;
  %768 = less(%765, %766) /* ty=Tensor[(9, 7, 16), bool] */;
  (%767, %768)
}

def @func_1027() -> Tensor[(5, 8, 14), float32] {
  %769 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %769.0
}

def @func_4903() -> Tensor[(5, 8, 14), bool] {
  %770 = @func_3006() /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
  %770.1
}

def @func_3689(%var_3679: Tensor[(12, 84), float32]) -> (Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) {
  %771 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %772 = @func_2119() /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64]) */;
  %773 = cast(%var_3679, dtype="float32") /* ty=Tensor[(12, 84), float32] */;
  %774 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 104), float64] */, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
  %775 = reshape(%773, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %776 = reshape(%774, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %777 = @func_1254(%775, %776) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %778 = %777.3;
  %779 = cast(meta[relay.Constant][45] /* ty=Tensor[(520), float64] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(1), int32] */;
  %781 = cast(%778, dtype="bool") /* ty=Tensor[(520), bool] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?), bool] */;
  %783 = %771.0;
  %784 = %772.0;
  %785 = greater(%781, %782) /* ty=Tensor[(520), bool] */;
  (%783, %784, %var_3679, meta[relay.Constant][44] /* ty=Tensor[(5, 104), float64] */, %785)
}

def @func_3303() -> Tensor[(5, 8, 14), float64] {
  %786 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %787 = %786.0;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  log(%788) /* ty=Tensor[(5, 8, 14), float64] */
}

def @func_2676() -> Tensor[(3, 243), float32] {
  %789 = @func_2590() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) */;
  %789.3
}

def @func_5429() -> Tensor[(3, 243), float32] {
  @func_2676() /* ty=Tensor[(3, 243), float32] */
}

def @func_5154() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 104), float32]) {
  %790 = @func_4876() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 104), float64], Tensor[(1008), float32], Tensor[(5, 8, 14), float32]) */;
  %791 = %790.2;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
  %793 = tan(%792) /* ty=Tensor[(5, 104), float32] */;
  %794 = cast(%793, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
  %795 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
  %796 = asinh(%794) /* ty=Tensor[(5, 104), float32] */;
  (%795, %796)
}

def @func_3127(%var_3121: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) {
  %797 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %800 = sinh(%799) /* ty=Tensor[(5, 8, 14), float32] */;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %802 = reshape(%801, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %803 = @func_1485(%802) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) */;
  %804 = cast(%var_3121, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %805 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%800, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %808 = %803.0;
  %809 = not_equal(%806, %807) /* ty=Tensor[(5, 8, 14), bool] */;
  (%808, %809)
}

def @func_3550() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %810 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %811 = @func_3318() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %812 = %810.0;
  %813 = %811.0;
  (%812, %813)
}

def @func_2815() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) {
  %814 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %816 = @func_1618() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */;
  %817 = cos(%815) /* ty=Tensor[(5, 8, 14), float32] */;
  %818 = %816.1;
  (%817, %818)
}

def @func_1550(%var_1505: Tensor[(3, 1, 16), float64], %var_1514: Tensor[(1008), float32]) -> (Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) {
  %819 = cast(%var_1505, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
  %820 = cast(%var_1514, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %821 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %822 = reshape(%820, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %823 = reshape(%821, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %824 = @func_1254(%822, %823) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %825 = %824.0;
  %826 = cast(%825, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %827 = cast(meta[relay.Constant][46] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %828 = reshape(%826, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %829 = reshape(%827, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %830 = @func_1254(%828, %829) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %831 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %832 = cast(%var_1514, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %833 = %830.3;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(520), float64] */;
  %835 = reshape(%832, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %836 = reshape(%834, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %837 = @func_1254(%835, %836) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %838 = rsqrt(%819) /* ty=Tensor[(3, 1, 16), float64] */;
  %839 = %831.0;
  %840 = %837.2;
  (%838, %825, %var_1514, meta[relay.Constant][46] /* ty=Tensor[(520), float64] */, %833, %839, %840)
}

def @func_5315() -> (Tensor[(5, 8, 14), float64],) {
  %841 = @func_3796() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %842 = %841.0;
  (%842,)
}

def @func_4955() -> Tensor[(5, 8, 14), bool] {
  %843 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %844 = %843.0;
  %845 = @func_3925() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %846 = %845.1;
  %847 = cast(%846, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %848 = shape_of(%844, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%844, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%849, %850) /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_2909(%var_2882: Tensor[(2, 504), float32]) -> (Tensor[(3, 243), float64], Tensor[(3, 243), float64], Tensor[(5, 8, 14), float32], Tensor[(12, 4), float64], Tensor[(2, 504), float32]) {
  %851 = @func_2676() /* ty=Tensor[(3, 243), float32] */;
  %852 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 243), float32] */, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(2), int32] */;
  %854 = cast(%851, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %856 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 243), float32] */, dtype="int16") /* ty=Tensor[(3, 243), int16] */;
  %857 = shape_of(%851, dtype="int32") /* ty=Tensor[(2), int32] */;
  %858 = cast(%851, dtype="int16") /* ty=Tensor[(3, 243), int16] */;
  %859 = dyn.reshape(%856, %857, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %860 = logical_xor(%858, %859) /* ty=Tensor[(3, 243), int16] */;
  %861 = cast(%860, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %862 = shape_of(%851, dtype="int32") /* ty=Tensor[(2), int32] */;
  %863 = cast(%851, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %865 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %866 = cast(%var_2882, dtype="float32") /* ty=Tensor[(2, 504), float32] */;
  %867 = reshape(%865, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %868 = reshape(%866, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %869 = @func_1550(%867, %868) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) */;
  %870 = mod(%854, %855) /* ty=Tensor[(3, 243), float64] */;
  %871 = floor_mod(%863, %864) /* ty=Tensor[(3, 243), float64] */;
  %872 = %869.5;
  (%870, %871, %872, meta[relay.Constant][49] /* ty=Tensor[(12, 4), float64] */, %var_2882)
}

def @func_2716() -> (Tensor[(5, 8, 14), float32],) {
  %873 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %874 = %873.1;
  (%874,)
}

def @func_5074() -> (Tensor[(5, 8, 14), float64],) {
  %875 = @func_3796() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %876 = %875.0;
  (%876,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6155() -> (Tensor[(5, 8, 14), float64],) {
  @func_6153() /* ty=(Tensor[(5, 8, 14), float64],) */
}

def @func_2911(%var_2910: Tensor[(2, 504), float32]) -> (Tensor[(3, 243), float64], Tensor[(3, 243), float64], Tensor[(5, 8, 14), float32], Tensor[(12, 4), float64], Tensor[(2, 504), float32]) {
  %22 = fn (%var_2882: Tensor[(2, 504), float32]) -> (Tensor[(3, 243), float64], Tensor[(3, 243), float64], Tensor[(5, 8, 14), float32], Tensor[(12, 4), float64], Tensor[(2, 504), float32]) {
    %0 = @func_2676() /* ty=Tensor[(3, 243), float32] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 243), float32] */, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
    %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(2), int32] */;
    %3 = cast(%0, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 243), float32] */, dtype="int16") /* ty=Tensor[(3, 243), int16] */;
    %6 = shape_of(%0, dtype="int32") /* ty=Tensor[(2), int32] */;
    %7 = cast(%0, dtype="int16") /* ty=Tensor[(3, 243), int16] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %9 = logical_xor(%7, %8) /* ty=Tensor[(3, 243), int16] */;
    %10 = cast(%9, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
    %11 = shape_of(%0, dtype="int32") /* ty=Tensor[(2), int32] */;
    %12 = cast(%0, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
    %15 = cast(%var_2882, dtype="float32") /* ty=Tensor[(2, 504), float32] */;
    %16 = reshape(%14, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
    %17 = reshape(%15, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
    %18 = @func_1550(%16, %17) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) */;
    %19 = mod(%3, %4) /* ty=Tensor[(3, 243), float64] */;
    %20 = floor_mod(%12, %13) /* ty=Tensor[(3, 243), float64] */;
    %21 = %18.5;
    (%19, %20, %21, meta[relay.Constant][2] /* ty=Tensor[(12, 4), float64] */, %var_2882)
  };
  %22(%var_2910) /* ty=(Tensor[(3, 243), float64], Tensor[(3, 243), float64], Tensor[(5, 8, 14), float32], Tensor[(12, 4), float64], Tensor[(2, 504), float32]) */
}

def @func_1089() -> (Tensor[(5, 8, 14), float32],) {
  %23 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %24 = %23.0;
  (%24,)
}

def @func_3692(%var_3690: Tensor[(12, 84), float32]) -> (Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) {
  @func_3689(%var_3690) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) */
}

def @func_6286() -> Tensor[(5, 8, 14), bool] {
  %30 = fn () -> Tensor[(5, 8, 14), bool] {
    %25 = @func_5942() /* ty=Tensor[(5, 8, 14), float32] */;
    %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%28, %29) /* ty=Tensor[(5, 8, 14), bool] */
  };
  %30() /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_989(%var_987: Tensor[(9, 9, 9), float32], %var_988: Tensor[(520), float64]) -> (Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) {
  %37 = fn (%var_975: Tensor[(9, 9, 9), float32], %var_982: Tensor[(520), float64]) -> (Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) {
    %31 = cast(%var_975, dtype="float32") /* ty=Tensor[(9, 9, 9), float32] */;
    %32 = cast(%var_982, dtype="float64") /* ty=Tensor[(520), float64] */;
    %33 = reshape(%32, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
    %34 = @func_248(%33) /* ty=(Tensor[(4, 13, 10), float64],) */;
    %35 = acosh(%31) /* ty=Tensor[(9, 9, 9), float32] */;
    %36 = %34.0;
    (%35, %36, %var_982)
  };
  %37(%var_987, %var_988) /* ty=(Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */
}

def @func_5002() -> (Tensor[(5, 8, 14), float32],) {
  %38 = @func_4044() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %39 = %38.0;
  (%39,)
}

def @func_7120(%var_7118: int8, %var_7119: Tensor[(1, 11, 3), int8]) -> (Tensor[(1, 11, 3), int8], Tensor[(5, 8, 14), float32], Tensor[(1008), float32], Tensor[(11, 11, 3), float64], Tensor[(5, 8, 14), float32]) {
  %56 = fn (%var_7068: int8, %var_7069: Tensor[(1, 11, 3), int8]) -> (Tensor[(1, 11, 3), int8], Tensor[(5, 8, 14), float32], Tensor[(1008), float32], Tensor[(11, 11, 3), float64], Tensor[(5, 8, 14), float32]) {
    %40 = cast(%var_7068, dtype="int8") /* ty=int8 */;
    %41 = cast(%var_7069, dtype="int8") /* ty=Tensor[(1, 11, 3), int8] */;
    %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %43 = reshape(%42, newshape=[2, 504]) /* ty=Tensor[(2, 504), float32] */;
    %44 = @func_2909(%43) /* ty=(Tensor[(3, 243), float64], Tensor[(3, 243), float64], Tensor[(5, 8, 14), float32], Tensor[(12, 4), float64], Tensor[(2, 504), float32]) */;
    %45 = cast(%var_7069, dtype="bool") /* ty=Tensor[(1, 11, 3), bool] */;
    %46 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 11, 3), int8] */, dtype="bool") /* ty=Tensor[(11, 11, 3), bool] */;
    %47 = logical_or(%45, %46) /* ty=Tensor[(11, 11, 3), bool] */;
    %48 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 11, 3), int8] */, dtype="float64") /* ty=Tensor[(11, 11, 3), float64] */;
    %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(%47, dtype="float64") /* ty=Tensor[(11, 11, 3), float64] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %52 = maximum(%40, %41) /* ty=Tensor[(1, 11, 3), int8] */;
    %53 = %44.2;
    %54 = floor_divide(%50, %51) /* ty=Tensor[(11, 11, 3), float64] */;
    %55 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
    (%52, %53, meta[relay.Constant][4] /* ty=Tensor[(1008), float32] */, %54, %55)
  };
  %56(%var_7118, %var_7119) /* ty=(Tensor[(1, 11, 3), int8], Tensor[(5, 8, 14), float32], Tensor[(1008), float32], Tensor[(11, 11, 3), float64], Tensor[(5, 8, 14), float32]) */
}

def @func_1012() -> (Tensor[(5, 8, 14), float32],) {
  %60 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 1), float32] */;
    %58 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %59 = power(%57, %58) /* ty=Tensor[(5, 8, 14), float32] */;
    (%59,)
  };
  %60() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_251(%var_249: Tensor[(4, 13, 10), float64]) -> (Tensor[(4, 13, 10), float64],) {
  @func_248(%var_249) /* ty=(Tensor[(4, 13, 10), float64],) */
}

def @func_6153() -> (Tensor[(5, 8, 14), float64],) {
  %61 = @func_3303() /* ty=Tensor[(5, 8, 14), float64] */;
  (%61,)
}

def @func_1296(%var_1272: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) {
  %62 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %63 = %62.0;
  %64 = cast(%var_1272, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %68 = cast(meta[relay.Constant][8] /* ty=Tensor[(81, 9), float32] */, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
  %69 = cast(meta[relay.Constant][9] /* ty=Tensor[(520, 1), float64] */, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %70 = reshape(%68, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), float32] */;
  %71 = reshape(%69, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %72 = @func_986(%70, %71) /* ty=(Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %73 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %74 = maximum(%66, %67) /* ty=Tensor[(5, 8, 14), int16] */;
  %75 = %72.1;
  %76 = %73.1;
  (%74, %75, meta[relay.Constant][8] /* ty=Tensor[(81, 9), float32] */, meta[relay.Constant][9] /* ty=Tensor[(520, 1), float64] */, %76)
}

def @func_1158() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %82 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %77 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
    %78 = cast(%77, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %79 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %80 = acos(%78) /* ty=Tensor[(5, 8, 14), float32] */;
    %81 = %79.1;
    (%80, %81)
  };
  %82() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_5707() -> Tensor[(5, 8, 14), float32] {
  @func_5705() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_6870() -> Tensor[(5, 8, 14), float32] {
  %83 = @func_2511() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) */;
  %83.0
}

def @func_3797() -> (Tensor[(5, 8, 14), float64],) {
  %85 = fn () -> (Tensor[(5, 8, 14), float64],) {
    %84 = @func_3303() /* ty=Tensor[(5, 8, 14), float64] */;
    (%84,)
  };
  %85() /* ty=(Tensor[(5, 8, 14), float64],) */
}

def @func_6090() -> (Tensor[(5, 8, 14), float32],) {
  %87 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %86 = @func_4485() /* ty=Tensor[(5, 8, 14), float32] */;
    (%86,)
  };
  %87() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_1929() -> Tensor[(5, 8, 14), float32] {
  %88 = @func_1755() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %89 = %88.0;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
  %91 = asinh(%90) /* ty=Tensor[(5, 8, 14), float64] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %93 = tan(%92) /* ty=Tensor[(5, 8, 14), float32] */;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  erf(%94) /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_6946(%var_6944: Tensor[(15, 8, 7), float64]) -> Tensor[(15, 8, 7), float64] {
  @func_6943(%var_6944) /* ty=Tensor[(15, 8, 7), float64] */
}

def @func_3689(%var_3679: Tensor[(12, 84), float32]) -> (Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) {
  %95 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %96 = @func_2119() /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64]) */;
  %97 = cast(%var_3679, dtype="float32") /* ty=Tensor[(12, 84), float32] */;
  %98 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 104), float64] */, dtype="float64") /* ty=Tensor[(5, 104), float64] */;
  %99 = reshape(%97, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %100 = reshape(%98, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %101 = @func_1254(%99, %100) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %102 = %101.3;
  %103 = cast(meta[relay.Constant][11] /* ty=Tensor[(520), float64] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(1), int32] */;
  %105 = cast(%102, dtype="bool") /* ty=Tensor[(520), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?), bool] */;
  %107 = %95.0;
  %108 = %96.0;
  %109 = greater(%105, %106) /* ty=Tensor[(520), bool] */;
  (%107, %108, %var_3679, meta[relay.Constant][10] /* ty=Tensor[(5, 104), float64] */, %109)
}

def @func_6395() -> (Tensor[(5, 8, 14), float32],) {
  %111 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %110 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
    (%110,)
  };
  %111() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_7889() -> (Tensor[(5, 8, 14), float32],) {
  %113 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %112 = @func_6581() /* ty=Tensor[(5, 8, 14), float32] */;
    (%112,)
  };
  %113() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_1193(%var_1192: Tensor[(5, 8, 14), float32]) -> Tensor[(5, 8, 14), bool] {
  %119 = fn (%var_1186: Tensor[(5, 8, 14), float32]) -> Tensor[(5, 8, 14), bool] {
    %114 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
    %115 = cast(%var_1186, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(%114, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%117, %118) /* ty=Tensor[(5, 8, 14), bool] */
  };
  %119(%var_1192) /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_4068() -> Tensor[(5, 8, 14), float32] {
  %121 = fn () -> Tensor[(5, 8, 14), float32] {
    %120 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %120.0
  };
  %121() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_5891(%var_5888: Tensor[(8, 11, 7), float32], %var_5889: Tensor[(8, 11, 7), float32], %var_5890: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float64], Tensor[(8, 11, 7), float64]) {
  %141 = fn (%var_5850: Tensor[(8, 11, 7), float32], %var_5851: Tensor[(8, 11, 7), float32], %var_5858: Tensor[(8, 11, 7), float32]) -> (Tensor[(8, 11, 7), float64], Tensor[(8, 11, 7), float64]) {
    %122 = cast(%var_5851, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
    %123 = shape_of(%var_5850, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%var_5850, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %126 = divide(%124, %125) /* ty=Tensor[(8, 11, 7), float32] */;
    %127 = cast(%var_5858, dtype="uint8") /* ty=Tensor[(8, 11, 7), uint8] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="uint8") /* ty=Tensor[(8, 11, 7), uint8] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %131 = multiply(%129, %130) /* ty=Tensor[(8, 11, 7), uint8] */;
    %132 = cast(%var_5851, dtype="float64") /* ty=Tensor[(8, 11, 7), float64] */;
    %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(%131, dtype="float64") /* ty=Tensor[(8, 11, 7), float64] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %136 = cast(%var_5858, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
    %137 = sqrt(%136) /* ty=Tensor[(8, 11, 7), float32] */;
    %138 = cast(%137, dtype="float64") /* ty=Tensor[(8, 11, 7), float64] */;
    %139 = floor_divide(%134, %135) /* ty=Tensor[(8, 11, 7), float64] */;
    %140 = acosh(%138) /* ty=Tensor[(8, 11, 7), float64] */;
    (%139, %140)
  };
  %141(%var_5888, %var_5889, %var_5890) /* ty=(Tensor[(8, 11, 7), float64], Tensor[(8, 11, 7), float64]) */
}

def @func_4393() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) {
  %142 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %143 = %142.0;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %145 = reshape(%144, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %146 = @func_3455(%145) /* ty=(Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), bool]) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %149 = reshape(%148, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %150 = @func_1485(%149) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) */;
  %151 = %150.0;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %153 = reshape(%152, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %154 = @func_1296(%153) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) */;
  %155 = %154.2;
  (%143, %147, %151, %155)
}

def @func_5429() -> Tensor[(3, 243), float32] {
  @func_2676() /* ty=Tensor[(3, 243), float32] */
}

def @func_6943(%var_6939: Tensor[(15, 8, 7), float64]) -> Tensor[(15, 8, 7), float64] {
  %156 = cast(%var_6939, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %157 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(15, 8, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%158, %159) /* ty=Tensor[(15, 8, 7), float64] */
}

def @func_4044() -> (Tensor[(5, 8, 14), float32],) {
  %160 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %161 = %160.0;
  (%161,)
}

def @func_5549(%var_5547: Tensor[(5, 9, 12), float32]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  @func_5546(%var_5547) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */
}

def @func_4449() -> (Tensor[(5, 8, 14), float32],) {
  %162 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %163 = %162.0;
  (%163,)
}

def @func_3926() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %176 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %164 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %165 = @func_3796() /* ty=(Tensor[(5, 8, 14), float64],) */;
    %166 = @func_2966() /* ty=Tensor[(5, 8, 14), float32] */;
    %167 = cast(%166, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %168 = %164.0;
    %169 = cast(%168, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %170 = reshape(%167, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %171 = reshape(%169, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %172 = @func_1444(%170, %171) /* ty=(Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %173 = %165.0;
    %174 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
    %175 = %172.3;
    (%168, %166, %173, %174, %175)
  };
  %176() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_7701() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(3, 243), float32]) {
  @func_7699() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(3, 243), float32]) */
}

def @func_3007() -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) {
  %188 = fn () -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) {
    %177 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %178 = %177.0;
    %179 = cast(%178, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %180 = reshape(%179, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %181 = @func_2083(%180) /* ty=(Tensor[(5, 8, 14), float64],) */;
    %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 8, 14), float32] */, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %183 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %184 = cast(%178, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %186 = %181.0;
    %187 = less_equal(%184, %185) /* ty=Tensor[(5, 8, 14), bool] */;
    (%186, %187)
  };
  %188() /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */
}

def @func_2358(%var_2356: Tensor[(5, 8, 14), float32], %var_2357: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
  %200 = fn (%var_2323: Tensor[(5, 8, 14), float32], %var_2337: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
    %189 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
    %190 = cast(%var_2323, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
    %192 = cast(%189, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %194 = cast(%var_2337, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %195 = shape_of(%var_2323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(%var_2323, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %198 = floor_mod(%192, %193) /* ty=Tensor[(5, 8, 14), float32] */;
    %199 = greater(%196, %197) /* ty=Tensor[(5, 8, 14), bool] */;
    (%198, %199)
  };
  %200(%var_2356, %var_2357) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */
}

def @func_5431() -> Tensor[(3, 243), float32] {
  @func_5429() /* ty=Tensor[(3, 243), float32] */
}

def @func_6438() -> Tensor[(5, 8, 14), bool] {
  @func_6285() /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_1595(%var_1594: Tensor[(16, 10, 8), float64]) -> Tensor[(16, 10, 8), float64] {
  %202 = fn (%var_1589: Tensor[(16, 10, 8), float64]) -> Tensor[(16, 10, 8), float64] {
    %201 = cast(%var_1589, dtype="float64") /* ty=Tensor[(16, 10, 8), float64] */;
    sigmoid(%201) /* ty=Tensor[(16, 10, 8), float64] */
  };
  %202(%var_1594) /* ty=Tensor[(16, 10, 8), float64] */
}

def @func_1554(%var_1552: Tensor[(3, 1, 16), float64], %var_1553: Tensor[(1008), float32]) -> (Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) {
  @func_1550(%var_1552, %var_1553) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) */
}

def @func_2817() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) {
  @func_2815() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */
}

def @func_6837() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %206 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %203 = @func_4449() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %204 = %203.0;
    %205 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
    (%204, %205)
  };
  %206() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_5705() -> Tensor[(5, 8, 14), float32] {
  %207 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %207.0
}

def @func_3129(%var_3128: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) {
  %221 = fn (%var_3121: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) {
    %208 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
    %209 = %208.0;
    %210 = cast(%209, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %211 = sinh(%210) /* ty=Tensor[(5, 8, 14), float32] */;
    %212 = cast(%211, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %213 = reshape(%212, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %214 = @func_1485(%213) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) */;
    %215 = cast(%var_3121, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %216 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
    %217 = cast(%211, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
    %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %219 = %214.0;
    %220 = not_equal(%217, %218) /* ty=Tensor[(5, 8, 14), bool] */;
    (%219, %220)
  };
  %221(%var_3128) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */
}

def @func_7197() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) {
  @func_7195() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) */
}

def @func_2014() -> Tensor[(5, 8, 14), float32] {
  %222 = fn () -> Tensor[(5, 8, 14), float32] {
    @func_1027() /* ty=Tensor[(5, 8, 14), float32] */
  };
  %222() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_4259(%var_4245: Tensor[(1, 4, 8), uint64], %var_4246: Tensor[(9, 4, 8), uint64]) -> (Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) {
  %223 = cast(%var_4245, dtype="uint64") /* ty=Tensor[(1, 4, 8), uint64] */;
  %224 = cast(%var_4246, dtype="uint64") /* ty=Tensor[(9, 4, 8), uint64] */;
  %225 = multiply(%223, %224) /* ty=Tensor[(9, 4, 8), uint64] */;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(9, 4, 8), float64] */;
  %227 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %228 = log(%226) /* ty=Tensor[(9, 4, 8), float64] */;
  %229 = %227.0;
  (%228, %229)
}

def @func_7195() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) {
  %230 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %231 = @func_4803() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) */;
  %232 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %233 = %230.1;
  %234 = %231.2;
  (%232, %233, %234)
}

def @func_4703() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) {
  %235 = @func_2649() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %236 = cast(meta[relay.Constant][14] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %237 = reshape(%236, newshape=[12, 84]) /* ty=Tensor[(12, 84), float32] */;
  %238 = @func_3689(%237) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) */;
  %239 = @func_2554() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %242 = reshape(%241, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %243 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %244 = reshape(%243, newshape=[2, 5, 6]) /* ty=Tensor[(2, 5, 6), bool] */;
  %245 = %235.0;
  %246 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
  %247 = %238.4;
  %248 = @func_1191(%242) /* ty=Tensor[(5, 8, 14), bool] */;
  %249 = @func_3645(%244) /* ty=Tensor[(2, 5, 6), bool] */;
  (%245, %246, %247, meta[relay.Constant][14] /* ty=Tensor[(1008), float32] */, %240, %248, %249, meta[relay.Constant][15] /* ty=Tensor[(60), bool] */)
}

def @func_1487(%var_1486: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) {
  %265 = fn (%var_1461: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) {
    %250 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %251 = %250.0;
    %252 = cast(%var_1461, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
    %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%251, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %256 = cast(%var_1461, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
    %257 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 2340), float32] */, dtype="float32") /* ty=Tensor[(1, 2340), float32] */;
    %258 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 2340), float32] */, dtype="float32") /* ty=Tensor[(1, 2340), float32] */;
    %259 = reshape(%257, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
    %260 = reshape(%258, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
    %261 = @func_1319(%259, %260) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) */;
    %262 = mod(%254, %255) /* ty=Tensor[(5, 8, 14), float64] */;
    %263 = exp(%256) /* ty=Tensor[(5, 8, 14), float64] */;
    %264 = %261.0;
    (%262, %263, %264, meta[relay.Constant][16] /* ty=Tensor[(1, 2340), float32] */)
  };
  %265(%var_1486) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float64], Tensor[(13, 15, 12), float32], Tensor[(1, 2340), float32]) */
}

def @func_5156() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 104), float32]) {
  @func_5154() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 104), float32]) */
}

def @func_4717() -> (Tensor[(5, 8, 14), float32],) {
  %267 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %266 = @func_3768() /* ty=Tensor[(5, 8, 14), float32] */;
    (%266,)
  };
  %267() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_2716() -> (Tensor[(5, 8, 14), float32],) {
  %268 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %269 = %268.1;
  (%269,)
}

def @func_4036() -> Tensor[(5, 8, 14), float32] {
  @func_2966() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_2555() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %273 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %270 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %271 = %270.0;
    %272 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
    (%271, %272)
  };
  %273() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_6916() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %274 = @func_3550() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %275 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %276 = %274.1;
  %277 = %275.0;
  (%276, %277)
}

def @func_5075() -> (Tensor[(5, 8, 14), float64],) {
  %280 = fn () -> (Tensor[(5, 8, 14), float64],) {
    %278 = @func_3796() /* ty=(Tensor[(5, 8, 14), float64],) */;
    %279 = %278.0;
    (%279,)
  };
  %280() /* ty=(Tensor[(5, 8, 14), float64],) */
}

def @func_2121() -> (Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64]) {
  @func_2119() /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64]) */
}

def @func_3304() -> Tensor[(5, 8, 14), float64] {
  %284 = fn () -> Tensor[(5, 8, 14), float64] {
    %281 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %282 = %281.0;
    %283 = cast(%282, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
    log(%283) /* ty=Tensor[(5, 8, 14), float64] */
  };
  %284() /* ty=Tensor[(5, 8, 14), float64] */
}

def @func_1323(%var_1321: Tensor[(13, 15, 12), float32], %var_1322: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) {
  @func_1319(%var_1321, %var_1322) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) */
}

def @func_6564(%var_6563: Tensor[(16, 13, 6), float32]) -> (Tensor[(16, 13, 6), float32], Tensor[(3, 243), float32]) {
  %289 = fn (%var_6547: Tensor[(16, 13, 6), float32]) -> (Tensor[(16, 13, 6), float32], Tensor[(3, 243), float32]) {
    %285 = cast(%var_6547, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
    %286 = @func_2590() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) */;
    %287 = cos(%285) /* ty=Tensor[(16, 13, 6), float32] */;
    %288 = %286.3;
    (%287, %288)
  };
  %289(%var_6563) /* ty=(Tensor[(16, 13, 6), float32], Tensor[(3, 243), float32]) */
}

def @func_4046() -> (Tensor[(5, 8, 14), float32],) {
  @func_4044() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_3563() -> (Tensor[(5, 8, 14), float32], Tensor[(13, 10, 12), float32], Tensor[(1560), float32]) {
  %295 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(13, 10, 12), float32], Tensor[(1560), float32]) {
    %290 = @func_3550() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %291 = cast(meta[relay.Constant][17] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %292 = reshape(%291, newshape=[13, 10, 12]) /* ty=Tensor[(13, 10, 12), float32] */;
    %293 = %290.1;
    %294 = @func_2157(%292) /* ty=Tensor[(13, 10, 12), float32] */;
    (%293, %294, meta[relay.Constant][17] /* ty=Tensor[(1560), float32] */)
  };
  %295() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(13, 10, 12), float32], Tensor[(1560), float32]) */
}

def @func_6362() -> Tensor[(5, 8, 14), float64] {
  @func_6360() /* ty=Tensor[(5, 8, 14), float64] */
}

def @func_2484() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
  %296 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %298 = cast(%296, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %299 = reshape(%297, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %300 = reshape(%298, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %301 = @func_2355(%299, %300) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */;
  %302 = %301.1;
  (%296, %302)
}

def @func_7252(%var_7251: float32) -> (Tensor[(12, 9, 12), float32],) {
  %306 = fn (%var_7233: float32) -> (Tensor[(12, 9, 12), float32],) {
    %303 = cast(%var_7233, dtype="float32") /* ty=float32 */;
    %304 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 12), float32] */;
    %305 = power(%303, %304) /* ty=Tensor[(12, 9, 12), float32] */;
    (%305,)
  };
  %306(%var_7251) /* ty=(Tensor[(12, 9, 12), float32],) */
}

def @func_2119() -> (Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64]) {
  %307 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %308 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %309 = %308.1;
  %310 = cast(%309, dtype="float64") /* ty=Tensor[(4, 13, 10), float64] */;
  %311 = %307.0;
  %312 = erf(%310) /* ty=Tensor[(4, 13, 10), float64] */;
  (%311, %312)
}

def @func_7047(%var_7045: Tensor[(11, 10, 7), float32]) -> (Tensor[(11, 10, 7), float32],) {
  @func_7044(%var_7045) /* ty=(Tensor[(11, 10, 7), float32],) */
}

def @func_2296() -> (Tensor[(5, 8, 14), float32],) {
  @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_4486() -> Tensor[(5, 8, 14), float32] {
  %314 = fn () -> Tensor[(5, 8, 14), float32] {
    %313 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %313.0
  };
  %314() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_6695(%var_6689: Tensor[(16, 7, 12), uint8], %var_6690: Tensor[(16, 7, 12), uint8], %var_6691: Tensor[(16, 7, 12), uint8], %var_6692: Tensor[(2340), float32], %var_6693: int64, %var_6694: Tensor[(104), int64]) -> (Tensor[(16, 7, 12), uint8], Tensor[(5, 8, 14), float32], Tensor[(16, 7, 12), float64], Tensor[(13, 15, 12), float32], Tensor[(2340), float32], Tensor[(1, 8, 13), bool], int64, Tensor[(104), int64]) {
  @func_6687(%var_6689, %var_6690, %var_6691, %var_6692, %var_6693, %var_6694) /* ty=(Tensor[(16, 7, 12), uint8], Tensor[(5, 8, 14), float32], Tensor[(16, 7, 12), float64], Tensor[(13, 15, 12), float32], Tensor[(2340), float32], Tensor[(1, 8, 13), bool], int64, Tensor[(104), int64]) */
}

def @func_3457(%var_3456: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), bool]) {
  %327 = fn (%var_3418: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), bool]) {
    %315 = @func_2966() /* ty=Tensor[(5, 8, 14), float32] */;
    %316 = cast(%var_3418, dtype="int32") /* ty=Tensor[(5, 8, 14), int32] */;
    %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %318 = cast(%315, dtype="int32") /* ty=Tensor[(5, 8, 14), int32] */;
    %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %320 = logical_xor(%318, %319) /* ty=Tensor[(5, 8, 14), int32] */;
    %321 = cast(%320, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %322 = cast(%320, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %323 = reshape(%321, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %324 = reshape(%322, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %325 = @func_2355(%323, %324) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */;
    %326 = %325.1;
    (%320, %326)
  };
  %327(%var_3456) /* ty=(Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), bool]) */
}

def @func_5317() -> (Tensor[(5, 8, 14), float64],) {
  @func_5315() /* ty=(Tensor[(5, 8, 14), float64],) */
}

def @func_5546(%var_5522: Tensor[(5, 9, 12), float32]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %328 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %329 = shape_of(%var_5522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%var_5522, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %333 = maximum(%330, %331) /* ty=Tensor[(5, 9, 12), float32] */;
  %334 = sin(%332) /* ty=Tensor[(5, 9, 12), float32] */;
  (%333, %334)
}

def @func_1257(%var_1255: Tensor[(9, 7, 16), float32], %var_1256: Tensor[(520), float64]) -> (Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) {
  %345 = fn (%var_1237: Tensor[(9, 7, 16), float32], %var_1249: Tensor[(520), float64]) -> (Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) {
    %335 = cast(%var_1237, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
    %336 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(9, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %337 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
    %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %339 = cast(%var_1249, dtype="float64") /* ty=Tensor[(520), float64] */;
    %340 = reshape(%339, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
    %341 = @func_248(%340) /* ty=(Tensor[(4, 13, 10), float64],) */;
    %342 = divide(%337, %338) /* ty=Tensor[(9, 7, 16), float32] */;
    %343 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
    %344 = %341.0;
    (%342, %343, %344, %var_1249)
  };
  %345(%var_1255, %var_1256) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */
}

def @func_2592() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) {
  @func_2590() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) */
}

def @func_4263(%var_4261: Tensor[(1, 4, 8), uint64], %var_4262: Tensor[(9, 4, 8), uint64]) -> (Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) {
  @func_4259(%var_4261, %var_4262) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) */
}

def @func_2512() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) {
  %350 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) {
    %346 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
    %347 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
    %348 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
    %349 = %346.0;
    (%347, %348, %349)
  };
  %350() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) */
}

def @func_3254() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %351 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %352 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %353 = %351.0;
  %354 = %352.0;
  (%353, %354)
}

def @func_6360() -> Tensor[(5, 8, 14), float64] {
  %355 = @func_5074() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %355.0
}

def @func_4876() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 104), float64], Tensor[(1008), float32], Tensor[(5, 8, 14), float32]) {
  %356 = @func_1618() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */;
  %357 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %358 = cast(meta[relay.Constant][21] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %359 = reshape(%358, newshape=[12, 84]) /* ty=Tensor[(12, 84), float32] */;
  %360 = @func_3689(%359) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), int16], Tensor[(12, 84), float32], Tensor[(5, 104), float64], Tensor[(520), bool]) */;
  %361 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %362 = %356.0;
  %363 = %357.0;
  %364 = %360.3;
  %365 = %361.1;
  (%362, %363, %364, meta[relay.Constant][21] /* ty=Tensor[(1008), float32] */, %365)
}

def @func_7345(%var_7342: Tensor[(3, 243), float32], %var_7343: Tensor[(1344), uint8], %var_7344: int64) -> (Tensor[(3, 243), bool], Tensor[(1, 8, 13), bool], Tensor[(1344), uint8], Tensor[(9, 260), float32], int64, Tensor[(104), int64]) {
  %391 = fn (%var_7319: Tensor[(3, 243), float32], %var_7335: Tensor[(1344), uint8], %var_7337: int64) -> (Tensor[(3, 243), bool], Tensor[(1, 8, 13), bool], Tensor[(1344), uint8], Tensor[(9, 260), float32], int64, Tensor[(104), int64]) {
    %366 = @func_5429() /* ty=Tensor[(3, 243), float32] */;
    %367 = cast(%var_7319, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
    %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(2), int32] */;
    %369 = cast(%366, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %371 = subtract(%369, %370) /* ty=Tensor[(3, 243), float32] */;
    %372 = cast(%371, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
    %373 = shape_of(%366, dtype="int32") /* ty=Tensor[(2), int32] */;
    %374 = cast(%366, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %376 = cast(%var_7335, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
    %377 = cast(%var_7335, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
    %378 = cast(%var_7335, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
    %379 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 260), float32] */, dtype="float32") /* ty=Tensor[(9, 260), float32] */;
    %380 = cast(%var_7337, dtype="int64") /* ty=int64 */;
    %381 = cast(meta[relay.Constant][23] /* ty=Tensor[(104), int64] */, dtype="int64") /* ty=Tensor[(104), int64] */;
    %382 = reshape(%376, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), uint8] */;
    %383 = reshape(%377, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), uint8] */;
    %384 = reshape(%378, newshape=[16, 7, 12]) /* ty=Tensor[(16, 7, 12), uint8] */;
    %385 = reshape(%379, newshape=[2340]) /* ty=Tensor[(2340), float32] */;
    %386 = reshape(%380, newshape=[]) /* ty=int64 */;
    %387 = reshape(%381, newshape=[104]) /* ty=Tensor[(104), int64] */;
    %388 = @func_6687(%382, %383, %384, %385, %386, %387) /* ty=(Tensor[(16, 7, 12), uint8], Tensor[(5, 8, 14), float32], Tensor[(16, 7, 12), float64], Tensor[(13, 15, 12), float32], Tensor[(2340), float32], Tensor[(1, 8, 13), bool], int64, Tensor[(104), int64]) */;
    %389 = greater(%374, %375) /* ty=Tensor[(3, 243), bool] */;
    %390 = %388.5;
    (%389, %390, %var_7335, meta[relay.Constant][22] /* ty=Tensor[(9, 260), float32] */, %var_7337, meta[relay.Constant][23] /* ty=Tensor[(104), int64] */)
  };
  %391(%var_7342, %var_7343, %var_7344) /* ty=(Tensor[(3, 243), bool], Tensor[(1, 8, 13), bool], Tensor[(1344), uint8], Tensor[(9, 260), float32], int64, Tensor[(104), int64]) */
}

def @func_1447(%var_1445: Tensor[(5, 8, 14), float32], %var_1446: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %410 = fn (%var_1389: Tensor[(5, 8, 14), float32], %var_1401: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %392 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %393 = %392.1;
    %394 = cast(%var_1401, dtype="int64") /* ty=Tensor[(5, 8, 14), int64] */;
    %395 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%393, dtype="int64") /* ty=Tensor[(5, 8, 14), int64] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %398 = cast(%var_1389, dtype="uint16") /* ty=Tensor[(5, 8, 14), uint16] */;
    %399 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%393, dtype="uint16") /* ty=Tensor[(5, 8, 14), uint16] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %402 = left_shift(%400, %401) /* ty=Tensor[(5, 8, 14), uint16] */;
    %403 = cast(%402, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %404 = cast(%var_1401, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %405 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %406 = minimum(%396, %397) /* ty=Tensor[(5, 8, 14), int64] */;
    %407 = acosh(%403) /* ty=Tensor[(5, 8, 14), float32] */;
    %408 = log2(%404) /* ty=Tensor[(5, 8, 14), float32] */;
    %409 = %405.1;
    (%406, %407, %408, %409)
  };
  %410(%var_1445, %var_1446) /* ty=(Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_1995() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) {
  @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */
}

def @func_4957() -> Tensor[(5, 8, 14), bool] {
  @func_4955() /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_5273(%var_5246: Tensor[(520), float64], %var_5266: Tensor[(520), float64]) -> (Tensor[(48), float64], Tensor[(5, 8, 14), bool], Tensor[(520), int32]) {
  %411 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %412 = cast(%var_5246, dtype="float64") /* ty=Tensor[(520), float64] */;
  %413 = reshape(%412, newshape=[130, 4]) /* ty=Tensor[(130, 4), float64] */;
  %414 = @func_3995(%413) /* ty=(Tensor[(5, 8, 14), bool], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(4, 13, 10), float64]) */;
  %415 = cast(%var_5266, dtype="int32") /* ty=Tensor[(520), int32] */;
  %416 = shape_of(%var_5246, dtype="int32") /* ty=Tensor[(1), int32] */;
  %417 = cast(%var_5246, dtype="int32") /* ty=Tensor[(520), int32] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?), int32] */;
  %419 = %411.6;
  %420 = %414.0;
  %421 = minimum(%417, %418) /* ty=Tensor[(520), int32] */;
  (%419, %420, %421)
}

def @func_6582() -> Tensor[(5, 8, 14), float32] {
  %423 = fn () -> Tensor[(5, 8, 14), float32] {
    %422 = @func_4044() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %422.0
  };
  %423() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_1652() -> (Tensor[(5, 8, 14), int16],) {
  %424 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %425 = %424.1;
  %426 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 8, 14), float32] */, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="int16") /* ty=Tensor[(5, 8, 14), int16] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %430 = right_shift(%428, %429) /* ty=Tensor[(5, 8, 14), int16] */;
  (%430,)
}

def @func_1993() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) {
  %431 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %432 = cast(meta[relay.Constant][25] /* ty=Tensor[(128), int16] */, dtype="int16") /* ty=Tensor[(128), int16] */;
  %433 = cast(meta[relay.Constant][26] /* ty=Tensor[(1792), int16] */, dtype="int16") /* ty=Tensor[(1792), int16] */;
  %434 = reshape(%432, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int16] */;
  %435 = reshape(%433, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), int16] */;
  %436 = @func_920(%434, %435) /* ty=(Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) */;
  %437 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %438 = cast(meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %439 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008, 1), float32] */, dtype="float32") /* ty=Tensor[(1008, 1), float32] */;
  %440 = reshape(%438, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), float64] */;
  %441 = reshape(%439, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %442 = @func_1550(%440, %441) /* ty=(Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) */;
  %443 = %431.1;
  %444 = %436.1;
  %445 = %437.0;
  %446 = %442.1;
  (%443, %444, meta[relay.Constant][25] /* ty=Tensor[(128), int16] */, meta[relay.Constant][26] /* ty=Tensor[(1792), int16] */, %445, %446, meta[relay.Constant][27] /* ty=Tensor[(48), float64] */, meta[relay.Constant][28] /* ty=Tensor[(1008, 1), float32] */)
}

def @func_2294() -> (Tensor[(5, 8, 14), float32],) {
  %447 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %448 = %447.0;
  (%448,)
}

def @func_4903() -> Tensor[(5, 8, 14), bool] {
  %449 = @func_3006() /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
  %449.1
}

def @func_5811(%var_5772: Tensor[(3, 243), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(520), int32], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(3, 243), float64], Tensor[(3, 243), bool]) {
  %450 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %451 = cast(meta[relay.Constant][29] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %452 = cast(meta[relay.Constant][29] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %453 = reshape(%451, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %454 = reshape(%452, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %455 = @func_5273(%453, %454) /* ty=(Tensor[(48), float64], Tensor[(5, 8, 14), bool], Tensor[(520), int32]) */;
  %456 = @func_5495() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(3, 243), float32]) */;
  %457 = %456.2;
  %458 = cast(%var_5772, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(2), int32] */;
  %460 = cast(%457, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %462 = power(%460, %461) /* ty=Tensor[(3, 243), float64] */;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %464 = cast(%457, dtype="float64") /* ty=Tensor[(3, 243), float64] */;
  %465 = cast(%var_5772, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %466 = shape_of(%457, dtype="int32") /* ty=Tensor[(2), int32] */;
  %467 = cast(%457, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %469 = %450.0;
  %470 = %455.2;
  %471 = log2(%463) /* ty=Tensor[(3, 243), float32] */;
  %472 = exp(%464) /* ty=Tensor[(3, 243), float64] */;
  %473 = greater_equal(%467, %468) /* ty=Tensor[(3, 243), bool] */;
  (%469, %470, meta[relay.Constant][29] /* ty=Tensor[(520), float64] */, %471, %472, %473)
}

def @func_1654() -> (Tensor[(5, 8, 14), int16],) {
  @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */
}

def @func_4451() -> (Tensor[(5, 8, 14), float32],) {
  @func_4449() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_5208() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %477 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %474 = @func_5002() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %475 = %474.0;
    %476 = @func_4485() /* ty=Tensor[(5, 8, 14), float32] */;
    (%475, %476)
  };
  %477() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_2677() -> Tensor[(3, 243), float32] {
  %479 = fn () -> Tensor[(3, 243), float32] {
    %478 = @func_2590() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) */;
    %478.3
  };
  %479() /* ty=Tensor[(3, 243), float32] */
}

def @func_5004() -> (Tensor[(5, 8, 14), float32],) {
  @func_5002() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_3256() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  @func_3254() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_3997(%var_3996: Tensor[(130, 4), float64]) -> (Tensor[(5, 8, 14), bool], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(4, 13, 10), float64]) {
  %490 = fn (%var_3984: Tensor[(130, 4), float64]) -> (Tensor[(5, 8, 14), bool], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(4, 13, 10), float64]) {
    %480 = @func_3006() /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
    %481 = cast(%var_3984, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
    %482 = reshape(%481, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
    %483 = @func_248(%482) /* ty=(Tensor[(4, 13, 10), float64],) */;
    %484 = cast(%var_3984, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
    %485 = reshape(%484, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
    %486 = @func_248(%485) /* ty=(Tensor[(4, 13, 10), float64],) */;
    %487 = %480.1;
    %488 = %483.0;
    %489 = %486.0;
    (%487, %488, %var_3984, %489)
  };
  %490(%var_3996) /* ty=(Tensor[(5, 8, 14), bool], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(4, 13, 10), float64]) */
}

def @func_2590() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(520), float64]) {
  %491 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %492 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
  %493 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 243), float32] */, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %494 = cast(meta[relay.Constant][31] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %495 = reshape(%493, newshape=[9, 9, 9]) /* ty=Tensor[(9, 9, 9), float32] */;
  %496 = reshape(%494, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %497 = @func_986(%495, %496) /* ty=(Tensor[(9, 9, 9), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %498 = %491.0;
  %499 = %492.0;
  %500 = %497.2;
  (%498, %499, %500, meta[relay.Constant][30] /* ty=Tensor[(3, 243), float32] */, meta[relay.Constant][31] /* ty=Tensor[(520), float64] */)
}

def @func_6440() -> Tensor[(5, 8, 14), bool] {
  @func_6438() /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_5942() -> Tensor[(5, 8, 14), float32] {
  %501 = @func_4716() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %501.0
}

def @func_5814(%var_5812: Tensor[(3, 243), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(520), int32], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(3, 243), float64], Tensor[(3, 243), bool]) {
  @func_5811(%var_5812) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(520), int32], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(3, 243), float64], Tensor[(3, 243), bool]) */
}

def @func_5497() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(3, 243), float32]) {
  @func_5495() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(3, 243), float32]) */
}

def @func_7309() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(60), bool], Tensor[(1560), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %513 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(60), bool], Tensor[(1560), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %502 = @func_1755() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %503 = @func_4703() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) */;
    %504 = @func_5696() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(1560), float32]) */;
    %505 = @func_3925() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %506 = @func_6220() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %507 = %502.0;
    %508 = @func_4485() /* ty=Tensor[(5, 8, 14), float32] */;
    %509 = %503.7;
    %510 = %504.1;
    %511 = %505.1;
    %512 = %506.0;
    (%507, %508, %509, %510, %511, %512)
  };
  %513() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(60), bool], Tensor[(1560), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_1360(%var_1358: Tensor[(128), int16], %var_1359: Tensor[(1792), int16]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(8, 1, 16), float64], Tensor[(128), int16], Tensor[(1792), int16]) {
  @func_1356(%var_1358, %var_1359) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(8, 1, 16), float64], Tensor[(128), int16], Tensor[(1792), int16]) */
}

def @func_1356(%var_1349: Tensor[(128), int16], %var_1350: Tensor[(1792), int16]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(8, 1, 16), float64], Tensor[(128), int16], Tensor[(1792), int16]) {
  %514 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %515 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %516 = %515.0;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %518 = reshape(%517, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %519 = @func_1296(%518) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) */;
  %520 = cast(%var_1349, dtype="int16") /* ty=Tensor[(128), int16] */;
  %521 = cast(%var_1350, dtype="int16") /* ty=Tensor[(1792), int16] */;
  %522 = reshape(%520, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), int16] */;
  %523 = reshape(%521, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), int16] */;
  %524 = @func_920(%522, %523) /* ty=(Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) */;
  %525 = %514.1;
  %526 = %519.1;
  %527 = %524.3;
  (%525, %516, %526, %527, %var_1349, %var_1350)
}

def @func_3180(%var_3141: Tensor[(9, 7, 16), float32]) -> (Tensor[(9, 7, 16), float32], Tensor[(9, 7, 16), bool]) {
  %528 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %529 = %528.5;
  %530 = cast(%var_3141, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%529, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %534 = cast(%var_3141, dtype="int64") /* ty=Tensor[(9, 7, 16), int64] */;
  %535 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%529, dtype="int64") /* ty=Tensor[(9, 7, 16), int64] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %538 = bitwise_xor(%536, %537) /* ty=Tensor[(9, 7, 16), int64] */;
  %539 = cast(%538, dtype="uint16") /* ty=Tensor[(9, 7, 16), uint16] */;
  %540 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%529, dtype="uint16") /* ty=Tensor[(9, 7, 16), uint16] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %543 = logical_xor(%541, %542) /* ty=Tensor[(9, 7, 16), uint16] */;
  %544 = cast(%543, dtype="bool") /* ty=Tensor[(9, 7, 16), bool] */;
  %545 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%529, dtype="bool") /* ty=Tensor[(9, 7, 16), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %548 = add(%532, %533) /* ty=Tensor[(9, 7, 16), float32] */;
  %549 = less(%546, %547) /* ty=Tensor[(9, 7, 16), bool] */;
  (%548, %549)
}

def @func_4303(%var_4291: Tensor[(15, 10, 8), int64], %var_4292: Tensor[(15, 10, 8), int64]) -> (Tensor[(15, 10, 8), bool],) {
  %550 = cast(%var_4292, dtype="int64") /* ty=Tensor[(15, 10, 8), int64] */;
  %551 = shape_of(%var_4291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_4291, dtype="int64") /* ty=Tensor[(15, 10, 8), int64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %554 = right_shift(%552, %553) /* ty=Tensor[(15, 10, 8), int64] */;
  %555 = cast(%var_4292, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %559 = logical_or(%557, %558) /* ty=Tensor[(15, 10, 8), bool] */;
  (%559,)
}

def @func_6993() -> (Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16]) {
  %569 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16]) {
    %560 = @func_2716() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %561 = @func_6049() /* ty=(Tensor[(11, 2, 15), uint32], Tensor[(11, 2, 15), bool]) */;
    %562 = %561.1;
    %563 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 2, 15), bool] */, dtype="uint16") /* ty=Tensor[(11, 2, 15), uint16] */;
    %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%562, dtype="uint16") /* ty=Tensor[(11, 2, 15), uint16] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %567 = %560.0;
    %568 = bitwise_xor(%565, %566) /* ty=Tensor[(11, 2, 15), uint16] */;
    (%567, %568)
  };
  %569() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16]) */
}

def @func_6687(%var_6610: Tensor[(16, 7, 12), uint8], %var_6611: Tensor[(16, 7, 12), uint8], %var_6633: Tensor[(16, 7, 12), uint8], %var_6656: Tensor[(2340), float32], %var_6675: int64, %var_6676: Tensor[(104), int64]) -> (Tensor[(16, 7, 12), uint8], Tensor[(5, 8, 14), float32], Tensor[(16, 7, 12), float64], Tensor[(13, 15, 12), float32], Tensor[(2340), float32], Tensor[(1, 8, 13), bool], int64, Tensor[(104), int64]) {
  %570 = cast(%var_6611, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %571 = shape_of(%var_6610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%var_6610, dtype="uint8") /* ty=Tensor[(16, 7, 12), uint8] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %574 = @func_5729() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %575 = cast(%var_6633, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
  %576 = shape_of(%var_6610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%var_6610, dtype="float64") /* ty=Tensor[(16, 7, 12), float64] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %579 = cast(%var_6656, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %580 = cast(%var_6656, dtype="float32") /* ty=Tensor[(2340), float32] */;
  %581 = reshape(%579, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %582 = reshape(%580, newshape=[13, 15, 12]) /* ty=Tensor[(13, 15, 12), float32] */;
  %583 = @func_1319(%581, %582) /* ty=(Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) */;
  %584 = cast(%var_6675, dtype="int64") /* ty=int64 */;
  %585 = cast(%var_6676, dtype="int64") /* ty=Tensor[(104), int64] */;
  %586 = reshape(%584, newshape=[]) /* ty=int64 */;
  %587 = reshape(%585, newshape=[1, 8, 13]) /* ty=Tensor[(1, 8, 13), int64] */;
  %588 = @func_3225(%586, %587) /* ty=(Tensor[(1, 8, 13), bool],) */;
  %589 = logical_xor(%572, %573) /* ty=Tensor[(16, 7, 12), uint8] */;
  %590 = %574.0;
  %591 = power(%577, %578) /* ty=Tensor[(16, 7, 12), float64] */;
  %592 = %583.0;
  %593 = %588.0;
  (%589, %590, %591, %592, %var_6656, %593, %var_6675, %var_6676)
}

def @func_4547(%var_4545: Tensor[(7, 13, 11), uint16], %var_4546: Tensor[(7, 13, 11), uint16]) -> (Tensor[(7, 13, 11), uint16], Tensor[(5, 8, 14), bool], Tensor[(560), float32], Tensor[(7, 13, 11), bool]) {
  %608 = fn (%var_4507: Tensor[(7, 13, 11), uint16], %var_4508: Tensor[(7, 13, 11), uint16]) -> (Tensor[(7, 13, 11), uint16], Tensor[(5, 8, 14), bool], Tensor[(560), float32], Tensor[(7, 13, 11), bool]) {
    %594 = cast(%var_4508, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
    %595 = shape_of(%var_4507, dtype="int32") /* ty=Tensor[(3), int32] */;
    %596 = cast(%var_4507, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %598 = cast(meta[relay.Constant][33] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %599 = reshape(%598, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %600 = @func_3127(%599) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
    %601 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 13, 11), uint16] */, dtype="bool") /* ty=Tensor[(7, 13, 11), bool] */;
    %602 = shape_of(%var_4507, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%var_4507, dtype="bool") /* ty=Tensor[(7, 13, 11), bool] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %605 = add(%596, %597) /* ty=Tensor[(7, 13, 11), uint16] */;
    %606 = %600.1;
    %607 = not_equal(%603, %604) /* ty=Tensor[(7, 13, 11), bool] */;
    (%605, %606, meta[relay.Constant][33] /* ty=Tensor[(560), float32] */, %607)
  };
  %608(%var_4545, %var_4546) /* ty=(Tensor[(7, 13, 11), uint16], Tensor[(5, 8, 14), bool], Tensor[(560), float32], Tensor[(7, 13, 11), bool]) */
}

def @func_6222() -> (Tensor[(5, 8, 14), float32],) {
  @func_6220() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_2160(%var_2158: Tensor[(13, 10, 12), float32]) -> Tensor[(13, 10, 12), float32] {
  @func_2157(%var_2158) /* ty=Tensor[(13, 10, 12), float32] */
}

def @func_3183(%var_3181: Tensor[(9, 7, 16), float32]) -> (Tensor[(9, 7, 16), float32], Tensor[(9, 7, 16), bool]) {
  @func_3180(%var_3181) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(9, 7, 16), bool]) */
}

def @func_3228(%var_3226: int64, %var_3227: Tensor[(1, 8, 13), int64]) -> (Tensor[(1, 8, 13), bool],) {
  %612 = fn (%var_3214: int64, %var_3215: Tensor[(1, 8, 13), int64]) -> (Tensor[(1, 8, 13), bool],) {
    %609 = cast(%var_3214, dtype="bool") /* ty=bool */;
    %610 = cast(%var_3215, dtype="bool") /* ty=Tensor[(1, 8, 13), bool] */;
    %611 = less(%609, %610) /* ty=Tensor[(1, 8, 13), bool] */;
    (%611,)
  };
  %612(%var_3226, %var_3227) /* ty=(Tensor[(1, 8, 13), bool],) */
}

def @func_5315() -> (Tensor[(5, 8, 14), float64],) {
  %613 = @func_3796() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %614 = %613.0;
  (%614,)
}

def @func_7044(%var_7039: Tensor[(11, 10, 7), float32]) -> (Tensor[(11, 10, 7), float32],) {
  %615 = cast(%var_7039, dtype="float32") /* ty=Tensor[(11, 10, 7), float32] */;
  %616 = log(%615) /* ty=Tensor[(11, 10, 7), float32] */;
  (%616,)
}

def @func_1027() -> Tensor[(5, 8, 14), float32] {
  %617 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %617.0
}

def @func_5154() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 104), float32]) {
  %618 = @func_4876() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 104), float64], Tensor[(1008), float32], Tensor[(5, 8, 14), float32]) */;
  %619 = %618.2;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
  %621 = tan(%620) /* ty=Tensor[(5, 104), float32] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(5, 104), float32] */;
  %623 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
  %624 = asinh(%622) /* ty=Tensor[(5, 104), float32] */;
  (%623, %624)
}

def @func_1619() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) {
  %636 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) {
    %625 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %626 = cast(meta[relay.Constant][35] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
    %627 = reshape(%626, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
    %628 = @func_248(%627) /* ty=(Tensor[(4, 13, 10), float64],) */;
    %629 = %628.0;
    %630 = cast(meta[relay.Constant][35] /* ty=Tensor[(520), float64] */, dtype="float32") /* ty=Tensor[(520), float32] */;
    %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%629, dtype="float32") /* ty=Tensor[(4, 13, 10), float32] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %634 = %625.1;
    %635 = minimum(%632, %633) /* ty=Tensor[(4, 13, 10), float32] */;
    (%634, %635)
  };
  %636() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */
}

def @func_6220() -> (Tensor[(5, 8, 14), float32],) {
  %637 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %638 = %637.0;
  (%638,)
}

def @func_5495() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(3, 243), float32]) {
  %639 = @func_5207() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %640 = @func_2676() /* ty=Tensor[(3, 243), float32] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %642 = %639.1;
  %643 = @func_4955() /* ty=Tensor[(5, 8, 14), bool] */;
  %644 = tan(%641) /* ty=Tensor[(3, 243), float32] */;
  (%642, %643, %644)
}

def @func_6148(%var_6146: Tensor[(32), uint64], %var_6147: Tensor[(288), uint64]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64]) {
  @func_6144(%var_6146, %var_6147) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64]) */
}

def @main() -> Tensor[(9, 11, 3), int32] {
  %645 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 11, 1), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 1), int32] */;
  %646 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 11, 3), int32] */, dtype="int32") /* ty=Tensor[(9, 11, 3), int32] */;
  bitwise_and(%645, %646) /* ty=Tensor[(9, 11, 3), int32] */
}

def @func_4878() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 104), float64], Tensor[(1008), float32], Tensor[(5, 8, 14), float32]) {
  @func_4876() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 104), float64], Tensor[(1008), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_7734() -> (Tensor[(1560), float32], Tensor[(5, 8, 14), float32]) {
  %653 = fn () -> (Tensor[(1560), float32], Tensor[(5, 8, 14), float32]) {
    %647 = @func_7308() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(60), bool], Tensor[(1560), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %648 = %647.3;
    %649 = cast(%648, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %650 = @func_7195() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int16]) */;
    %651 = sinh(%649) /* ty=Tensor[(1560), float32] */;
    %652 = %650.0;
    (%651, %652)
  };
  %653() /* ty=(Tensor[(1560), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_5171(%var_5169: Tensor[(32), uint64], %var_5170: Tensor[(288), uint64]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), int64]) {
  %668 = fn (%var_5160: Tensor[(32), uint64], %var_5161: Tensor[(288), uint64]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), int64]) {
    %654 = @func_2294() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %655 = cast(%var_5160, dtype="uint64") /* ty=Tensor[(32), uint64] */;
    %656 = cast(%var_5161, dtype="uint64") /* ty=Tensor[(288), uint64] */;
    %657 = reshape(%655, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint64] */;
    %658 = reshape(%656, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint64] */;
    %659 = @func_4259(%657, %658) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) */;
    %660 = %654.0;
    %661 = cast(%660, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %662 = cast(%660, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %663 = reshape(%661, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %664 = reshape(%662, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %665 = @func_1444(%663, %664) /* ty=(Tensor[(5, 8, 14), int64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %666 = %659.1;
    %667 = %665.0;
    (%660, %666, %var_5160, %var_5161, %667)
  };
  %668(%var_5169, %var_5170) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), int64]) */
}

def @func_2650() -> (Tensor[(5, 8, 14), float32],) {
  %671 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %669 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %670 = %669.0;
    (%670,)
  };
  %671() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_5361() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int8], Tensor[(4, 13, 10), int64]) {
  @func_5359() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int8], Tensor[(4, 13, 10), int64]) */
}

def @func_5944() -> Tensor[(5, 8, 14), float32] {
  @func_5942() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_5697() -> (Tensor[(5, 8, 14), float32], Tensor[(1560), float32]) {
  %676 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(1560), float32]) {
    %672 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %673 = @func_3562() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(13, 10, 12), float32], Tensor[(1560), float32]) */;
    %674 = %672.1;
    %675 = %673.2;
    (%674, %675)
  };
  %676() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(1560), float32]) */
}

def @func_5987() -> Tensor[(5, 8, 14), float32] {
  %678 = fn () -> Tensor[(5, 8, 14), float32] {
    %677 = @func_2815() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */;
    %677.0
  };
  %678() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_5731() -> (Tensor[(5, 8, 14), float32],) {
  @func_5729() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_6497() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
  %683 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
    %679 = @func_4703() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) */;
    %680 = @func_2484() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */;
    %681 = %679.1;
    %682 = %680.1;
    (%681, %682)
  };
  %683() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */
}

def @func_1319(%var_1301: Tensor[(13, 15, 12), float32], %var_1302: Tensor[(13, 15, 12), float32]) -> (Tensor[(13, 15, 12), float32], Tensor[(5, 8, 14), bool], Tensor[(560), float32]) {
  %684 = cast(%var_1302, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %685 = shape_of(%var_1301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%var_1301, dtype="float32") /* ty=Tensor[(13, 15, 12), float32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %688 = cast(meta[relay.Constant][38] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %689 = reshape(%688, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
  %690 = mod(%686, %687) /* ty=Tensor[(13, 15, 12), float32] */;
  %691 = @func_1191(%689) /* ty=Tensor[(5, 8, 14), bool] */;
  (%690, %691, meta[relay.Constant][38] /* ty=Tensor[(560), float32] */)
}

def @func_6144(%var_6132: Tensor[(32), uint64], %var_6133: Tensor[(288), uint64]) -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64]) {
  %692 = @func_5315() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %693 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %694 = cast(%var_6132, dtype="uint64") /* ty=Tensor[(32), uint64] */;
  %695 = cast(%var_6133, dtype="uint64") /* ty=Tensor[(288), uint64] */;
  %696 = reshape(%694, newshape=[32]) /* ty=Tensor[(32), uint64] */;
  %697 = reshape(%695, newshape=[288]) /* ty=Tensor[(288), uint64] */;
  %698 = @func_5168(%696, %697) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), int64]) */;
  %699 = %692.0;
  %700 = %693.0;
  %701 = %698.0;
  (%699, %700, %701, %var_6132, %var_6133)
}

def @func_1756() -> (Tensor[(5, 8, 14), float32],) {
  %704 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %702 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %703 = %702.0;
    (%703,)
  };
  %704() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_7598(%var_7596: Tensor[(288), uint64], %var_7597: Tensor[(81, 9), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(9, 4, 8), float64], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32], Tensor[(3, 243), float32], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32]) {
  %747 = fn (%var_7479: Tensor[(288), uint64], %var_7533: Tensor[(81, 9), float32]) -> (Tensor[(5, 8, 14), float32], Tensor[(9, 4, 8), float64], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32], Tensor[(3, 243), float32], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32]) {
    %705 = @func_3933() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %706 = cast(meta[relay.Constant][39] /* ty=Tensor[(32), uint64] */, dtype="uint64") /* ty=Tensor[(32), uint64] */;
    %707 = cast(%var_7479, dtype="uint64") /* ty=Tensor[(288), uint64] */;
    %708 = reshape(%706, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), uint64] */;
    %709 = reshape(%707, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), uint64] */;
    %710 = @func_4259(%708, %709) /* ty=(Tensor[(9, 4, 8), float64], Tensor[(5, 8, 14), float32]) */;
    %711 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %712 = @func_6992() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16]) */;
    %713 = @func_4393() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) */;
    %714 = %713.3;
    %715 = cast(%714, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
    %716 = sigmoid(%715) /* ty=Tensor[(81, 9), float32] */;
    %717 = cast(meta[relay.Constant][40] /* ty=Tensor[(81, 9), float32] */, dtype="float64") /* ty=Tensor[(81, 9), float64] */;
    %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(2), int32] */;
    %719 = cast(%716, dtype="float64") /* ty=Tensor[(81, 9), float64] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %721 = power(%719, %720) /* ty=Tensor[(81, 9), float64] */;
    %722 = cast(%716, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
    %723 = log2(%722) /* ty=Tensor[(81, 9), float32] */;
    %724 = cast(%723, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
    %725 = shape_of(%721, dtype="int32") /* ty=Tensor[(2), int32] */;
    %726 = cast(%721, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %728 = cast(%var_7533, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
    %729 = reshape(%728, newshape=[3, 243]) /* ty=Tensor[(3, 243), float32] */;
    %730 = @func_5811(%729) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(520), int32], Tensor[(520), float64], Tensor[(3, 243), float32], Tensor[(3, 243), float64], Tensor[(3, 243), bool]) */;
    %731 = @func_2716() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %732 = cast(%var_7533, dtype="int8") /* ty=Tensor[(81, 9), int8] */;
    %733 = shape_of(%723, dtype="int32") /* ty=Tensor[(2), int32] */;
    %734 = cast(%723, dtype="int8") /* ty=Tensor[(81, 9), int8] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %736 = add(%734, %735) /* ty=Tensor[(81, 9), int8] */;
    %737 = cast(%736, dtype="float32") /* ty=Tensor[(81, 9), float32] */;
    %738 = %705.0;
    %739 = %710.0;
    %740 = %711.1;
    %741 = %712.1;
    %742 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
    %743 = mod(%726, %727) /* ty=Tensor[(81, 9), float32] */;
    %744 = %730.3;
    %745 = %731.0;
    %746 = asin(%737) /* ty=Tensor[(81, 9), float32] */;
    (%738, %739, meta[relay.Constant][39] /* ty=Tensor[(32), uint64] */, %var_7479, %740, %741, %742, %743, %744, %745, %746)
  };
  %747(%var_7596, %var_7597) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(9, 4, 8), float64], Tensor[(32), uint64], Tensor[(288), uint64], Tensor[(5, 8, 14), float32], Tensor[(11, 2, 15), uint16], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32], Tensor[(3, 243), float32], Tensor[(5, 8, 14), float32], Tensor[(81, 9), float32]) */
}

def @func_6050() -> (Tensor[(11, 2, 15), uint32], Tensor[(11, 2, 15), bool]) {
  %760 = fn () -> (Tensor[(11, 2, 15), uint32], Tensor[(11, 2, 15), bool]) {
    %748 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 15), float32] */;
    %749 = tan(%748) /* ty=Tensor[(11, 2, 15), float32] */;
    %750 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 2, 15), float32] */, dtype="uint32") /* ty=Tensor[(11, 2, 15), uint32] */;
    %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
    %752 = cast(%749, dtype="uint32") /* ty=Tensor[(11, 2, 15), uint32] */;
    %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %754 = cast(%749, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
    %755 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(11, 2, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 2, 15), float32] */, dtype="bool") /* ty=Tensor[(11, 2, 15), bool] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %758 = bitwise_or(%752, %753) /* ty=Tensor[(11, 2, 15), uint32] */;
    %759 = less_equal(%756, %757) /* ty=Tensor[(11, 2, 15), bool] */;
    (%758, %759)
  };
  %760() /* ty=(Tensor[(11, 2, 15), uint32], Tensor[(11, 2, 15), bool]) */
}

def @func_3934() -> (Tensor[(5, 8, 14), float32],) {
  %762 = fn () -> (Tensor[(5, 8, 14), float32],) {
    %761 = @func_1929() /* ty=Tensor[(5, 8, 14), float32] */;
    (%761,)
  };
  %762() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_6732() -> (Tensor[(5, 8, 14), float64],) {
  @func_6730() /* ty=(Tensor[(5, 8, 14), float64],) */
}

def @func_4395() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) {
  @func_4393() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) */
}

def @func_7849(%var_7847: Tensor[(520), float64]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(520), float64], Tensor[(4, 13, 10), float32]) {
  @func_7846(%var_7847) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(520), float64], Tensor[(4, 13, 10), float32]) */
}

def @func_5277(%var_5275: Tensor[(520), float64], %var_5276: Tensor[(520), float64]) -> (Tensor[(48), float64], Tensor[(5, 8, 14), bool], Tensor[(520), int32]) {
  @func_5273(%var_5275, %var_5276) /* ty=(Tensor[(48), float64], Tensor[(5, 8, 14), bool], Tensor[(520), int32]) */
}

def @func_7424() -> (Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32]) {
  %766 = fn () -> (Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32]) {
    %763 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %764 = @func_4903() /* ty=Tensor[(5, 8, 14), bool] */;
    %765 = %763.0;
    (%764, %765)
  };
  %766() /* ty=(Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32]) */
}

def @func_248(%var_243: Tensor[(4, 13, 10), float64]) -> (Tensor[(4, 13, 10), float64],) {
  %767 = cast(%var_243, dtype="float64") /* ty=Tensor[(4, 13, 10), float64] */;
  %768 = sinh(%767) /* ty=Tensor[(4, 13, 10), float64] */;
  (%768,)
}

def @func_1931() -> Tensor[(5, 8, 14), float32] {
  @func_1929() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_1029() -> Tensor[(5, 8, 14), float32] {
  @func_1027() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_6730() -> (Tensor[(5, 8, 14), float64],) {
  %769 = @func_4609() /* ty=Tensor[(5, 8, 14), float64] */;
  (%769,)
}

def @func_3647(%var_3646: Tensor[(2, 5, 6), bool]) -> Tensor[(2, 5, 6), bool] {
  %774 = fn (%var_3641: Tensor[(2, 5, 6), bool]) -> Tensor[(2, 5, 6), bool] {
    %770 = cast(%var_3641, dtype="bool") /* ty=Tensor[(2, 5, 6), bool] */;
    %771 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(2, 5, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 5, 6), bool] */, dtype="bool") /* ty=Tensor[(2, 5, 6), bool] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%772, %773) /* ty=Tensor[(2, 5, 6), bool] */
  };
  %774(%var_3646) /* ty=Tensor[(2, 5, 6), bool] */
}

def @func_2486() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) {
  @func_2484() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool]) */
}

def @func_1091() -> (Tensor[(5, 8, 14), float32],) {
  @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_1550(%var_1505: Tensor[(3, 1, 16), float64], %var_1514: Tensor[(1008), float32]) -> (Tensor[(3, 1, 16), float64], Tensor[(9, 7, 16), float32], Tensor[(1008), float32], Tensor[(520), float64], Tensor[(520), float64], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64]) {
  %775 = cast(%var_1505, dtype="float64") /* ty=Tensor[(3, 1, 16), float64] */;
  %776 = cast(%var_1514, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %777 = cast(meta[relay.Constant][43] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %778 = reshape(%776, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %779 = reshape(%777, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %780 = @func_1254(%778, %779) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(9, 7, 16), float32] */;
  %783 = cast(meta[relay.Constant][43] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %784 = reshape(%782, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %785 = reshape(%783, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %786 = @func_1254(%784, %785) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %787 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %788 = cast(%var_1514, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %789 = %786.3;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(520), float64] */;
  %791 = reshape(%788, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
  %792 = reshape(%790, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %793 = @func_1254(%791, %792) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
  %794 = rsqrt(%775) /* ty=Tensor[(3, 1, 16), float64] */;
  %795 = %787.0;
  %796 = %793.2;
  (%794, %781, %var_1514, meta[relay.Constant][43] /* ty=Tensor[(520), float64] */, %789, %795, %796)
}

def @func_2085(%var_2084: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64],) {
  %803 = fn (%var_2077: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), float64],) {
    %797 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
    %798 = cast(%var_2077, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
    %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %800 = cast(%797, dtype="float64") /* ty=Tensor[(5, 8, 14), float64] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %802 = floor_divide(%800, %801) /* ty=Tensor[(5, 8, 14), float64] */;
    (%802,)
  };
  %803(%var_2084) /* ty=(Tensor[(5, 8, 14), float64],) */
}

def @func_2815() -> (Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) {
  %804 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %806 = @func_1618() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float32]) */;
  %807 = cos(%805) /* ty=Tensor[(5, 8, 14), float32] */;
  %808 = %806.1;
  (%807, %808)
}

def @func_7846(%var_7825: Tensor[(520), float64]) -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(520), float64], Tensor[(4, 13, 10), float32]) {
  %809 = @func_5074() /* ty=(Tensor[(5, 8, 14), float64],) */;
  %810 = cast(%var_7825, dtype="float64") /* ty=Tensor[(520), float64] */;
  %811 = reshape(%810, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
  %812 = @func_248(%811) /* ty=(Tensor[(4, 13, 10), float64],) */;
  %813 = %812.0;
  %814 = cast(%813, dtype="float32") /* ty=Tensor[(4, 13, 10), float32] */;
  %815 = @func_4067() /* ty=Tensor[(5, 8, 14), float32] */;
  %816 = %809.0;
  %817 = log2(%814) /* ty=Tensor[(4, 13, 10), float32] */;
  (%815, %816, %var_7825, %817)
}

def @func_1299(%var_1297: Tensor[(5, 8, 14), float32]) -> (Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) {
  @func_1296(%var_1297) /* ty=(Tensor[(5, 8, 14), int16], Tensor[(4, 13, 10), float64], Tensor[(81, 9), float32], Tensor[(520, 1), float64], Tensor[(5, 8, 14), float32]) */
}

def @func_1821(%var_1785: Tensor[(5, 8, 14), float32], %var_1810: Tensor[(128), int16]) -> (Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32], Tensor[(1792), int16], Tensor[(128), int16], Tensor[(448, 4), int16]) {
  %818 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %819 = %818.1;
  %820 = cast(%var_1785, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %824 = cast(%819, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
  %825 = cast(%var_1810, dtype="int16") /* ty=Tensor[(128), int16] */;
  %826 = cast(meta[relay.Constant][44] /* ty=Tensor[(448, 4), int16] */, dtype="int16") /* ty=Tensor[(448, 4), int16] */;
  %827 = reshape(%825, newshape=[128]) /* ty=Tensor[(128), int16] */;
  %828 = reshape(%826, newshape=[1792]) /* ty=Tensor[(1792), int16] */;
  %829 = @func_1356(%827, %828) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(8, 1, 16), float64], Tensor[(128), int16], Tensor[(1792), int16]) */;
  %830 = equal(%822, %823) /* ty=Tensor[(5, 8, 14), bool] */;
  %831 = sin(%824) /* ty=Tensor[(5, 8, 14), float32] */;
  %832 = %829.5;
  (%830, %831, %832, %var_1810, meta[relay.Constant][44] /* ty=Tensor[(448, 4), int16] */)
}

def @func_6918() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  @func_6916() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_2718() -> (Tensor[(5, 8, 14), float32],) {
  @func_2716() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_7699() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(3, 243), float32]) {
  %833 = @func_4716() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %834 = @func_6836() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %835 = @func_2676() /* ty=Tensor[(3, 243), float32] */;
  %836 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 243), float32] */, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(2), int32] */;
  %838 = cast(%835, dtype="bool") /* ty=Tensor[(3, 243), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %840 = not_equal(%838, %839) /* ty=Tensor[(3, 243), bool] */;
  %841 = cast(%840, dtype="float32") /* ty=Tensor[(3, 243), float32] */;
  %842 = @func_3768() /* ty=Tensor[(5, 8, 14), float32] */;
  %843 = %833.0;
  %844 = %834.0;
  %845 = @func_2013() /* ty=Tensor[(5, 8, 14), float32] */;
  %846 = erf(%841) /* ty=Tensor[(3, 243), float32] */;
  (%842, %843, %844, %845, %846)
}

def @func_3551() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %851 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %847 = @func_1089() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %848 = @func_3318() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %849 = %847.0;
    %850 = %848.0;
    (%849, %850)
  };
  %851() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_2967() -> Tensor[(5, 8, 14), float32] {
  %852 = fn () -> Tensor[(5, 8, 14), float32] {
    @func_1027() /* ty=Tensor[(5, 8, 14), float32] */
  };
  %852() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_1825(%var_1823: Tensor[(5, 8, 14), float32], %var_1824: Tensor[(128), int16]) -> (Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32], Tensor[(1792), int16], Tensor[(128), int16], Tensor[(448, 4), int16]) {
  @func_1821(%var_1823, %var_1824) /* ty=(Tensor[(5, 8, 14), bool], Tensor[(5, 8, 14), float32], Tensor[(1792), int16], Tensor[(128), int16], Tensor[(448, 4), int16]) */
}

def @func_1065() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
  %856 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) {
    %853 = @func_1011() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %854 = @func_1027() /* ty=Tensor[(5, 8, 14), float32] */;
    %855 = %853.0;
    (%854, %855)
  };
  %856() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */
}

def @func_923(%var_921: Tensor[(8, 1, 16), int16], %var_922: Tensor[(8, 14, 16), int16]) -> (Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) {
  %870 = fn (%var_881: Tensor[(8, 1, 16), int16], %var_882: Tensor[(8, 14, 16), int16]) -> (Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) {
    %857 = cast(%var_881, dtype="int16") /* ty=Tensor[(8, 1, 16), int16] */;
    %858 = cast(%var_882, dtype="int16") /* ty=Tensor[(8, 14, 16), int16] */;
    %859 = cast(meta[relay.Constant][46] /* ty=Tensor[(130, 4), float64] */, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
    %860 = reshape(%859, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
    %861 = @func_248(%860) /* ty=(Tensor[(4, 13, 10), float64],) */;
    %862 = cast(%var_881, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
    %863 = cast(meta[relay.Constant][46] /* ty=Tensor[(130, 4), float64] */, dtype="float64") /* ty=Tensor[(130, 4), float64] */;
    %864 = reshape(%863, newshape=[4, 13, 10]) /* ty=Tensor[(4, 13, 10), float64] */;
    %865 = @func_248(%864) /* ty=(Tensor[(4, 13, 10), float64],) */;
    %866 = bitwise_xor(%857, %858) /* ty=Tensor[(8, 14, 16), int16] */;
    %867 = %861.0;
    %868 = log2(%862) /* ty=Tensor[(8, 1, 16), float64] */;
    %869 = %865.0;
    (%866, %867, meta[relay.Constant][46] /* ty=Tensor[(130, 4), float64] */, %868, %869)
  };
  %870(%var_921, %var_922) /* ty=(Tensor[(8, 14, 16), int16], Tensor[(4, 13, 10), float64], Tensor[(130, 4), float64], Tensor[(8, 1, 16), float64], Tensor[(4, 13, 10), float64]) */
}

def @func_5729() -> (Tensor[(5, 8, 14), float32],) {
  %871 = @func_3550() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %872 = %871.1;
  (%872,)
}

def @func_6540(%var_6538: uint16, %var_6539: Tensor[(9, 3, 13), uint16]) -> (Tensor[(9, 3, 13), uint16], Tensor[(9, 3, 13), float32]) {
  %883 = fn (%var_6518: uint16, %var_6519: Tensor[(9, 3, 13), uint16]) -> (Tensor[(9, 3, 13), uint16], Tensor[(9, 3, 13), float32]) {
    %873 = cast(%var_6518, dtype="uint16") /* ty=uint16 */;
    %874 = cast(%var_6519, dtype="uint16") /* ty=Tensor[(9, 3, 13), uint16] */;
    %875 = maximum(%873, %874) /* ty=Tensor[(9, 3, 13), uint16] */;
    %876 = cast(%875, dtype="uint16") /* ty=Tensor[(9, 3, 13), uint16] */;
    %877 = shape_of(%var_6519, dtype="int32") /* ty=Tensor[(3), int32] */;
    %878 = cast(%var_6519, dtype="uint16") /* ty=Tensor[(9, 3, 13), uint16] */;
    %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %880 = cast(%875, dtype="float32") /* ty=Tensor[(9, 3, 13), float32] */;
    %881 = subtract(%878, %879) /* ty=Tensor[(9, 3, 13), uint16] */;
    %882 = sinh(%880) /* ty=Tensor[(9, 3, 13), float32] */;
    (%881, %882)
  };
  %883(%var_6538, %var_6539) /* ty=(Tensor[(9, 3, 13), uint16], Tensor[(9, 3, 13), float32]) */
}

def @func_6872() -> Tensor[(5, 8, 14), float32] {
  @func_6870() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_7865() -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32]) {
  %888 = fn () -> (Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32]) {
    %884 = @func_4393() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int32], Tensor[(5, 8, 14), float64], Tensor[(81, 9), float32]) */;
    %885 = @func_6916() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %886 = %884.2;
    %887 = %885.0;
    (%886, %887)
  };
  %888() /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32]) */
}

def @func_4307(%var_4305: Tensor[(15, 10, 8), int64], %var_4306: Tensor[(15, 10, 8), int64]) -> (Tensor[(15, 10, 8), bool],) {
  @func_4303(%var_4305, %var_4306) /* ty=(Tensor[(15, 10, 8), bool],) */
}

def @func_4610() -> Tensor[(5, 8, 14), float64] {
  %889 = fn () -> Tensor[(5, 8, 14), float64] {
    @func_3303() /* ty=Tensor[(5, 8, 14), float64] */
  };
  %889() /* ty=Tensor[(5, 8, 14), float64] */
}

def @func_3320() -> (Tensor[(5, 8, 14), float32],) {
  @func_3318() /* ty=(Tensor[(5, 8, 14), float32],) */
}

def @func_4955() -> Tensor[(5, 8, 14), bool] {
  %890 = @func_1064() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %891 = %890.0;
  %892 = @func_3925() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
  %893 = %892.1;
  %894 = cast(%893, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %895 = shape_of(%891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %896 = cast(%891, dtype="bool") /* ty=Tensor[(5, 8, 14), bool] */;
  %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%896, %897) /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_4804() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) {
  %907 = fn () -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) {
    %898 = @func_4716() /* ty=(Tensor[(5, 8, 14), float32],) */;
    %899 = %898.0;
    %900 = cast(%899, dtype="float32") /* ty=Tensor[(5, 8, 14), float32] */;
    %901 = reshape(%900, newshape=[5, 8, 14]) /* ty=Tensor[(5, 8, 14), float32] */;
    %902 = @func_3127(%901) /* ty=(Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), bool]) */;
    %903 = @func_1652() /* ty=(Tensor[(5, 8, 14), int16],) */;
    %904 = %902.0;
    %905 = %903.0;
    %906 = @func_4609() /* ty=Tensor[(5, 8, 14), float64] */;
    (%899, %904, %905, %906)
  };
  %907() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) */
}

def @func_3318() -> (Tensor[(5, 8, 14), float32],) {
  %908 = @func_2649() /* ty=(Tensor[(5, 8, 14), float32],) */;
  %909 = %908.0;
  (%909,)
}

def @func_3769() -> Tensor[(5, 8, 14), float32] {
  %911 = fn () -> Tensor[(5, 8, 14), float32] {
    %910 = @func_3254() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %910.0
  };
  %911() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_4705() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) {
  @func_4703() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32], Tensor[(520), bool], Tensor[(1008), float32], Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), bool], Tensor[(2, 5, 6), bool], Tensor[(60), bool]) */
}

def @func_2157(%var_2153: Tensor[(13, 10, 12), float32]) -> Tensor[(13, 10, 12), float32] {
  %912 = cast(%var_2153, dtype="float32") /* ty=Tensor[(13, 10, 12), float32] */;
  erf(%912) /* ty=Tensor[(13, 10, 12), float32] */
}

def @func_5359() -> (Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), int8], Tensor[(4, 13, 10), int64]) {
  %913 = @func_4803() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float64], Tensor[(5, 8, 14), int16], Tensor[(5, 8, 14), float64]) */;
  %914 = @func_2966() /* ty=Tensor[(5, 8, 14), float32] */;
  %915 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 8, 14), float32] */, dtype="int8") /* ty=Tensor[(5, 8, 14), int8] */;
  %916 = shape_of(%914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%914, dtype="int8") /* ty=Tensor[(5, 8, 14), int8] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %919 = @func_1993() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(128), int16], Tensor[(1792), int16], Tensor[(5, 8, 14), float32], Tensor[(9, 7, 16), float32], Tensor[(48), float64], Tensor[(1008, 1), float32]) */;
  %920 = %919.1;
  %921 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 13, 10), float64] */, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
  %922 = shape_of(%920, dtype="int32") /* ty=Tensor[(3), int32] */;
  %923 = cast(%920, dtype="int64") /* ty=Tensor[(4, 13, 10), int64] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %925 = %913.0;
  %926 = subtract(%917, %918) /* ty=Tensor[(5, 8, 14), int8] */;
  %927 = subtract(%923, %924) /* ty=Tensor[(4, 13, 10), int64] */;
  (%925, %926, %927)
}

def @func_4038() -> Tensor[(5, 8, 14), float32] {
  @func_4036() /* ty=Tensor[(5, 8, 14), float32] */
}

def @func_4905() -> Tensor[(5, 8, 14), bool] {
  @func_4903() /* ty=Tensor[(5, 8, 14), bool] */
}

def @func_1702(%var_1701: Tensor[(260, 2), float64]) -> (Tensor[(5, 8, 14), float32], Tensor[(520), float64], Tensor[(1008), float32], Tensor[(260, 2), float64], Tensor[(4, 13, 10), float64]) {
  %942 = fn (%var_1679: Tensor[(260, 2), float64]) -> (Tensor[(5, 8, 14), float32], Tensor[(520), float64], Tensor[(1008), float32], Tensor[(260, 2), float64], Tensor[(4, 13, 10), float64]) {
    %928 = @func_1157() /* ty=(Tensor[(5, 8, 14), float32], Tensor[(5, 8, 14), float32]) */;
    %929 = cast(meta[relay.Constant][49] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %930 = cast(%var_1679, dtype="float64") /* ty=Tensor[(260, 2), float64] */;
    %931 = reshape(%929, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
    %932 = reshape(%930, newshape=[520]) /* ty=Tensor[(520), float64] */;
    %933 = @func_1254(%931, %932) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
    %934 = cast(meta[relay.Constant][49] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %935 = cast(%var_1679, dtype="float64") /* ty=Tensor[(260, 2), float64] */;
    %936 = reshape(%934, newshape=[9, 7, 16]) /* ty=Tensor[(9, 7, 16), float32] */;
    %937 = reshape(%935, newshape=[520]) /* ty=Tensor[(520), float64] */;
    %938 = @func_1254(%936, %937) /* ty=(Tensor[(9, 7, 16), float32], Tensor[(5, 8, 14), float32], Tensor[(4, 13, 10), float64], Tensor[(520), float64]) */;
    %939 = %928.0;
    %940 = %933.3;
    %941 = %938.2;
    (%939, %940, meta[relay.Constant][49] /* ty=Tensor[(1008), float32] */, %var_1679, %941)
  };
  %942(%var_1701) /* ty=(Tensor[(5, 8, 14), float32], Tensor[(520), float64], Tensor[(1008), float32], Tensor[(260, 2), float64], Tensor[(4, 13, 10), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen277/build/output.py:2575: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen277/build/output.py:2580: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen277/build/output.py:2609: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen277/build/output.py:2614: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen277/build/output.py:2619: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen277/build/output.py:2624: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %0 = (%l, %r);
  match (%0) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      %1 = match (%l) {
        Raw(%x: T) => {
          %x
        },
        One(%x1: fn () -> T) => {
          %x1() /* ty=T */
        },
        Zero(%x2: fn () -> T) => {
          %x2() /* ty=T */
        },
      };
      %2 = match (%r) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %3 = %multiply(%1, %2) /* ty=T */;
      Raw(%3) /* ty=GradCell[T] */
    },
  }
}

def @main() -> (Tensor[(9, 11, 3), int32], ()) {
  %4 = ();
  (meta[relay.Constant][0] /* ty=Tensor[(9, 11, 3), int32] */, %4)
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %5 = (%l1, %r1);
  match (%5) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      %6 = match (%l1) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %7 = match (%r1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %8 = %add(%6, %7) /* ty=T */;
      Raw(%8) /* ty=GradCell[T] */
    },
  }
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x12: T) => {
      %x12
    },
    One(%x13: fn () -> T) => {
      %x13() /* ty=T */
    },
    Zero(%x14: fn () -> T) => {
      %x14() /* ty=T */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
