==========mod==========
#[version = "0.0.5"]
def @func_3189(%var_3186: Tensor[(1144), float64]) -> (Tensor[(7, 15, 16), float32], Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %1 = cast(%var_3186, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %2 = reshape(%0, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %3 = reshape(%1, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %4 = @func_278(%2, %3) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %5 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %6 = %4.4;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(2730), float32] */, %var_3186)
}

def @func_4604() -> (Tensor[(1, 440), int16],) {
  %7 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
  %8 = %7.0;
  (%8,)
}

def @func_1375(%var_1370: Tensor[(15, 5, 5), uint16]) -> (Tensor[(15, 5, 5), uint16],) {
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(15, 5, 5), uint16] */, dtype="uint16") /* ty=Tensor[(15, 5, 5), uint16] */;
  %10 = shape_of(%var_1370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_1370, dtype="uint16") /* ty=Tensor[(15, 5, 5), uint16] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %13 = add(%11, %12) /* ty=Tensor[(15, 5, 5), uint16] */;
  (%13,)
}

def @func_2630() -> (Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) {
  %14 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %15 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(7, 5, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %18 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 40), uint64] */, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %19 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 40), uint64] */, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %20 = reshape(%18, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %21 = reshape(%19, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %22 = @func_556(%20, %21) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %23 = floor_mod(%16, %17) /* ty=Tensor[(7, 5, 10), float32] */;
  %24 = %22.6;
  (%23, %24, meta[relay.Constant][4] /* ty=Tensor[(5, 40), uint64] */)
}

def @func_2536(%var_2502: Tensor[(7, 11, 12), float64], %var_2503: Tensor[(7, 11, 12), float64], %var_2511: Tensor[(220, 2), int16], %var_2522: Tensor[(65, 6), float64]) -> (Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) {
  %25 = cast(%var_2503, dtype="bool") /* ty=Tensor[(7, 11, 12), bool] */;
  %26 = shape_of(%var_2502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%var_2502, dtype="bool") /* ty=Tensor[(7, 11, 12), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = cast(%var_2511, dtype="int16") /* ty=Tensor[(220, 2), int16] */;
  %30 = cast(%var_2511, dtype="int16") /* ty=Tensor[(220, 2), int16] */;
  %31 = reshape(%29, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %32 = reshape(%30, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %33 = @func_1322(%31, %32) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %34 = cast(%var_2522, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %35 = cast(%var_2522, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %36 = reshape(%34, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), float64] */;
  %37 = reshape(%35, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), float64] */;
  %38 = @func_807(%36, %37) /* ty=(Tensor[(2, 13, 15), float64],) */;
  %39 = cast(meta[relay.Constant][5] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %40 = cast(meta[relay.Constant][5] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %41 = reshape(%39, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %42 = reshape(%40, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %43 = @func_556(%41, %42) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %44 = greater_equal(%27, %28) /* ty=Tensor[(7, 11, 12), bool] */;
  %45 = %33.5;
  %46 = %38.0;
  %47 = %43.1;
  (%44, %45, %var_2511, %46, %var_2522, %47, meta[relay.Constant][5] /* ty=Tensor[(200), uint64] */)
}

def @func_868(%var_863: Tensor[(10, 9, 3), uint32]) -> Tensor[(10, 9, 3), bool] {
  %48 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 9, 3), uint32] */, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %49 = shape_of(%var_863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%var_863, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%50, %51) /* ty=Tensor[(10, 9, 3), bool] */
}

def @func_5347(%var_5335: Tensor[(11, 16, 7), float32]) -> (Tensor[(11, 16, 7), int64],) {
  %52 = cast(%var_5335, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
  %53 = sigmoid(%52) /* ty=Tensor[(11, 16, 7), float32] */;
  %54 = cast(%var_5335, dtype="int64") /* ty=Tensor[(11, 16, 7), int64] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="int64") /* ty=Tensor[(11, 16, 7), int64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %58 = bitwise_xor(%56, %57) /* ty=Tensor[(11, 16, 7), int64] */;
  (%58,)
}

def @func_5448() -> (Tensor[(7, 15, 16), float64],) {
  %59 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %60 = %59.1;
  (%60,)
}

def @func_5465() -> (Tensor[(7, 15, 16), float32],) {
  %61 = @func_5443() /* ty=(Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
  %62 = %61.4;
  (%62,)
}

def @func_4938(%var_4928: Tensor[(10, 440), int16]) -> (Tensor[(10, 440), bool],) {
  %63 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="bool") /* ty=Tensor[(1, 440), bool] */;
  %66 = cast(%var_4928, dtype="bool") /* ty=Tensor[(10, 440), bool] */;
  %67 = greater_equal(%65, %66) /* ty=Tensor[(10, 440), bool] */;
  (%67,)
}

def @func_3145(%var_3142: Tensor[(7, 14, 14), float32]) -> Tensor[(7, 14, 14), float32] {
  %68 = cast(%var_3142, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
  cosh(%68) /* ty=Tensor[(7, 14, 14), float32] */
}

def @main(%var_5500: Tensor[(2, 336), bool]) -> (Tensor[(3, 440), bool], Tensor[(2, 336), bool], Tensor[(2, 336), bool], Tensor[(5, 40), float32], Tensor[(3, 440), bool]) {
  %69 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="bool") /* ty=Tensor[(1, 440), bool] */;
  %72 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 440), int16] */, dtype="bool") /* ty=Tensor[(3, 440), bool] */;
  %73 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %74 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %75 = cast(%var_5500, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %76 = reshape(%73, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %77 = reshape(%74, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %78 = reshape(%75, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float32] */;
  %79 = @func_2794(%76, %77, %78) /* ty=(Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) */;
  %80 = %79.1;
  %81 = cast(%80, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %82 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(2), int32] */;
  %83 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %85 = cast(%80, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %86 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(2), int32] */;
  %87 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 440), int16] */, dtype="bool") /* ty=Tensor[(3, 440), bool] */;
  %90 = cast(%70, dtype="bool") /* ty=Tensor[(1, 440), bool] */;
  %91 = greater(%71, %72) /* ty=Tensor[(3, 440), bool] */;
  %92 = less_equal(%83, %84) /* ty=Tensor[(2, 336), bool] */;
  %93 = greater(%87, %88) /* ty=Tensor[(2, 336), bool] */;
  %94 = @func_5130() /* ty=Tensor[(5, 40), float32] */;
  %95 = greater_equal(%89, %90) /* ty=Tensor[(3, 440), bool] */;
  (%91, %92, %93, %94, %95)
}

def @func_3373() -> (Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) {
  %96 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %97 = %96.2;
  %98 = cast(%97, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
  %99 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 440), int16] */, dtype="uint32") /* ty=Tensor[(13, 440), uint32] */;
  %100 = cast(%97, dtype="uint16") /* ty=Tensor[(1, 440), uint16] */;
  %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 440), int16] */, dtype="uint16") /* ty=Tensor[(13, 440), uint16] */;
  %102 = multiply(%98, %99) /* ty=Tensor[(13, 440), uint32] */;
  %103 = bitwise_xor(%100, %101) /* ty=Tensor[(13, 440), uint16] */;
  (%102, %103)
}

def @func_278(%var_248: Tensor[(15, 13, 14), float32], %var_266: Tensor[(1144), float64]) -> (Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) {
  %104 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 14), float32] */;
  %105 = cast(meta[relay.Constant][10] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %106 = reshape(%105, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %107 = @func_170(%106) /* ty=(Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) */;
  %108 = cast(%var_248, dtype="bool") /* ty=Tensor[(15, 13, 14), bool] */;
  %109 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(15, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 13, 14), float32] */, dtype="bool") /* ty=Tensor[(15, 13, 14), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = cast(%var_248, dtype="int8") /* ty=Tensor[(15, 13, 14), int8] */;
  %113 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(15, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 13, 14), float32] */, dtype="int8") /* ty=Tensor[(15, 13, 14), int8] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %116 = cast(%var_266, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %117 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1144), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %118 = cast(meta[relay.Constant][10] /* ty=Tensor[(1144), float64] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?), bool] */;
  %120 = tan(%104) /* ty=Tensor[(15, 13, 14), float32] */;
  %121 = %107.1;
  %122 = greater(%110, %111) /* ty=Tensor[(15, 13, 14), bool] */;
  %123 = multiply(%114, %115) /* ty=Tensor[(15, 13, 14), int8] */;
  %124 = greater(%118, %119) /* ty=Tensor[(1144), bool] */;
  (%120, %121, %122, %123, %124)
}

def @func_5231(%var_5177: Tensor[(120, 8), float64], %var_5187: Tensor[(286, 4), float64], %var_5212: Tensor[(700), float64], %var_5213: Tensor[(440), int16]) -> (Tensor[(5, 40), uint64], Tensor[(120, 8), float64], Tensor[(286, 4), int8], Tensor[(7, 15, 16), float32], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16]) {
  %125 = @func_4359() /* ty=(Tensor[(5, 40), uint64],) */;
  %126 = cast(%var_5177, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
  %127 = %125.0;
  %128 = cast(%127, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %129 = reshape(%126, newshape=[16, 4, 15]) /* ty=Tensor[(16, 4, 15), float64] */;
  %130 = reshape(%128, newshape=[200]) /* ty=Tensor[(200), uint64] */;
  %131 = @func_3435(%129, %130) /* ty=(Tensor[(16, 4, 15), float64], Tensor[(1144), bool], Tensor[(910, 3), float32], Tensor[(11, 104), float64], Tensor[(286, 4), float64], Tensor[(200), uint64]) */;
  %132 = %131.4;
  %133 = cast(%var_5187, dtype="int8") /* ty=Tensor[(286, 4), int8] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(2), int32] */;
  %135 = cast(%132, dtype="int8") /* ty=Tensor[(286, 4), int8] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %137 = cast(%var_5212, dtype="float64") /* ty=Tensor[(700), float64] */;
  %138 = cast(%var_5213, dtype="int16") /* ty=Tensor[(440), int16] */;
  %139 = reshape(%137, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %140 = reshape(%138, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %141 = @func_1804(%139, %140) /* ty=(Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) */;
  %142 = bitwise_or(%135, %136) /* ty=Tensor[(286, 4), int8] */;
  %143 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %144 = %141.3;
  (%127, %var_5177, %142, %143, %144, %var_5212, %var_5213)
}

def @func_779(%var_771: Tensor[(3, 8, 1), float64]) -> (Tensor[(3, 8, 1), float64],) {
  %145 = cast(%var_771, dtype="float64") /* ty=Tensor[(3, 8, 1), float64] */;
  %146 = log(%145) /* ty=Tensor[(3, 8, 1), float64] */;
  (%146,)
}

def @func_1804(%var_1769: Tensor[(14, 10, 5), float64], %var_1775: Tensor[(440), int16]) -> (Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) {
  %147 = cast(%var_1775, dtype="int16") /* ty=Tensor[(440), int16] */;
  %148 = cast(%var_1775, dtype="int16") /* ty=Tensor[(440), int16] */;
  %149 = reshape(%147, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %150 = reshape(%148, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %151 = @func_1322(%149, %150) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %152 = cast(meta[relay.Constant][11] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %153 = cast(meta[relay.Constant][11] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %154 = reshape(%152, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %155 = reshape(%153, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %156 = @func_556(%154, %155) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %157 = cast(%var_1769, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %158 = tan(%157) /* ty=Tensor[(14, 10, 5), float64] */;
  %159 = cast(%158, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %160 = cast(%158, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %161 = %151.1;
  %162 = %156.3;
  %163 = erf(%159) /* ty=Tensor[(14, 10, 5), float64] */;
  %164 = sqrt(%160) /* ty=Tensor[(14, 10, 5), float64] */;
  (%161, %var_1775, %162, meta[relay.Constant][11] /* ty=Tensor[(200), uint64] */, %163, %164)
}

def @func_3397(%var_3394: Tensor[(9, 12, 12), float64]) -> Tensor[(9, 12, 12), float64] {
  %165 = cast(%var_3394, dtype="float64") /* ty=Tensor[(9, 12, 12), float64] */;
  log2(%165) /* ty=Tensor[(9, 12, 12), float64] */
}

def @func_1958(%var_1950: Tensor[(8, 11, 10), int16], %var_1951: Tensor[(8, 11, 10), int16]) -> (Tensor[(8, 11, 10), bool],) {
  %166 = cast(%var_1951, dtype="bool") /* ty=Tensor[(8, 11, 10), bool] */;
  %167 = shape_of(%var_1950, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_1950, dtype="bool") /* ty=Tensor[(8, 11, 10), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = greater_equal(%168, %169) /* ty=Tensor[(8, 11, 10), bool] */;
  (%170,)
}

def @func_3673(%var_3648: Tensor[(10, 440), int16], %var_3660: Tensor[(1, 2730), float32], %var_3661: Tensor[(1144), float64]) -> (Tensor[(10, 440), uint32], Tensor[(200), uint64], Tensor[(1680), float64], Tensor[(924), float64], Tensor[(15, 13, 14), bool], Tensor[(1, 2730), float32], Tensor[(1144), float64]) {
  %171 = @func_2942() /* ty=(Tensor[(1, 440), int16],) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
  %174 = cast(%var_3648, dtype="uint32") /* ty=Tensor[(10, 440), uint32] */;
  %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
  %177 = reshape(%175, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %178 = reshape(%176, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %179 = @func_3519(%177, %178) /* ty=(Tensor[(7, 15, 16), int16], Tensor[(7, 15, 16), uint64], Tensor[(924), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16], Tensor[(22, 52), float64], Tensor[(390), float64], Tensor[(7, 15, 16), float32]) */;
  %180 = cast(%var_3660, dtype="float32") /* ty=Tensor[(1, 2730), float32] */;
  %181 = cast(%var_3661, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %182 = reshape(%180, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %183 = reshape(%181, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %184 = @func_278(%182, %183) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %185 = add(%173, %174) /* ty=Tensor[(10, 440), uint32] */;
  %186 = %179.3;
  %187 = %184.2;
  (%185, %186, meta[relay.Constant][12] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][13] /* ty=Tensor[(924), float64] */, %187, %var_3660, %var_3661)
}

def @func_4523(%var_4502: Tensor[(200), uint64]) -> (Tensor[(8, 13, 11), float64], Tensor[(8, 13, 11), float64], Tensor[(200), uint64], Tensor[(200), uint64], Tensor[(24), float64], Tensor[(1144), bool], Tensor[(2730), float32]) {
  %188 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 13, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 11), float32] */;
  %189 = sin(%188) /* ty=Tensor[(8, 13, 11), float32] */;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
  %191 = cast(%189, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
  %192 = cast(%var_4502, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %193 = cast(meta[relay.Constant][15] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %194 = reshape(%192, newshape=[200]) /* ty=Tensor[(200), uint64] */;
  %195 = reshape(%193, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %196 = @func_3617(%194, %195) /* ty=(Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
  %197 = cast(meta[relay.Constant][16] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %198 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 13, 11), float32] */, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
  %199 = reshape(%197, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %200 = reshape(%198, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %201 = @func_278(%199, %200) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %202 = sinh(%190) /* ty=Tensor[(8, 13, 11), float64] */;
  %203 = acosh(%191) /* ty=Tensor[(8, 13, 11), float64] */;
  %204 = %196.2;
  %205 = %201.4;
  (%202, %203, %204, %var_4502, meta[relay.Constant][15] /* ty=Tensor[(24), float64] */, %205, meta[relay.Constant][16] /* ty=Tensor[(2730), float32] */)
}

def @func_5130() -> Tensor[(5, 40), float32] {
  %206 = @func_4316() /* ty=(Tensor[(5, 40), int8], Tensor[(5, 40), float32]) */;
  %206.1
}

def @func_2794(%var_2769: Tensor[(3, 16, 14), bool], %var_2770: Tensor[(3, 16, 14), bool], %var_2779: Tensor[(3, 16, 14), float32]) -> (Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) {
  %207 = cast(%var_2770, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %208 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_2769, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = cast(%var_2770, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %212 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_2769, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %215 = floor_divide(%213, %214) /* ty=Tensor[(3, 16, 14), float32] */;
  %216 = cast(%var_2779, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %220 = logical_or(%209, %210) /* ty=Tensor[(3, 16, 14), bool] */;
  %221 = not_equal(%218, %219) /* ty=Tensor[(3, 16, 14), bool] */;
  (%220, %221)
}

def @func_4316() -> (Tensor[(5, 40), int8], Tensor[(5, 40), float32]) {
  %222 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %223 = %222.2;
  %224 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 40), uint64] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(2), int32] */;
  %226 = cast(%223, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %228 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 40), uint64] */, dtype="float32") /* ty=Tensor[(5, 40), float32] */;
  %229 = left_shift(%226, %227) /* ty=Tensor[(5, 40), int8] */;
  %230 = atanh(%228) /* ty=Tensor[(5, 40), float32] */;
  (%229, %230)
}

def @func_3807(%var_3761: Tensor[(13, 440), uint32], %var_3778: Tensor[(24), float64]) -> (Tensor[(3, 8, 1), float64], Tensor[(24), uint32], Tensor[(13, 440), uint64], Tensor[(22, 52), float32], Tensor[(200), uint64]) {
  %231 = cast(meta[relay.Constant][18] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %232 = reshape(%231, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
  %233 = @func_779(%232) /* ty=(Tensor[(3, 8, 1), float64],) */;
  %234 = cast(%var_3778, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %235 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(24), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %236 = cast(meta[relay.Constant][18] /* ty=Tensor[(24), float64] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %238 = @func_3373() /* ty=(Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) */;
  %239 = %238.0;
  %240 = cast(%var_3761, dtype="bool") /* ty=Tensor[(13, 440), bool] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(2), int32] */;
  %242 = cast(%239, dtype="bool") /* ty=Tensor[(13, 440), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %244 = not_equal(%242, %243) /* ty=Tensor[(13, 440), bool] */;
  %245 = cast(%239, dtype="uint64") /* ty=Tensor[(13, 440), uint64] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(2), int32] */;
  %247 = cast(%244, dtype="uint64") /* ty=Tensor[(13, 440), uint64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %249 = cast(meta[relay.Constant][19] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %250 = logical_xor(%236, %237) /* ty=Tensor[(24), uint32] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(24), float64] */;
  %252 = reshape(%249, newshape=[200]) /* ty=Tensor[(200), uint64] */;
  %253 = reshape(%251, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %254 = @func_3617(%252, %253) /* ty=(Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
  %255 = %233.0;
  %256 = bitwise_and(%247, %248) /* ty=Tensor[(13, 440), uint64] */;
  %257 = %254.0;
  (%255, %250, %256, %257, meta[relay.Constant][19] /* ty=Tensor[(200), uint64] */)
}

def @func_5071(%var_5068: Tensor[(56, 12), bool]) -> (Tensor[(5, 40), uint64], Tensor[(468), int32], Tensor[(3, 156), int32], Tensor[(3, 16, 14), bool], Tensor[(56, 12), bool]) {
  %258 = @func_4359() /* ty=(Tensor[(5, 40), uint64],) */;
  %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 156), int32] */, dtype="int32") /* ty=Tensor[(3, 156), int32] */;
  %260 = reshape(%259, newshape=[468]) /* ty=Tensor[(468), int32] */;
  %261 = @func_4089(%260) /* ty=(Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) */;
  %262 = cast(%var_5068, dtype="bool") /* ty=Tensor[(56, 12), bool] */;
  %263 = cast(%var_5068, dtype="bool") /* ty=Tensor[(56, 12), bool] */;
  %264 = cast(%var_5068, dtype="float32") /* ty=Tensor[(56, 12), float32] */;
  %265 = reshape(%262, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %266 = reshape(%263, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %267 = reshape(%264, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float32] */;
  %268 = @func_2794(%265, %266, %267) /* ty=(Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) */;
  %269 = %258.0;
  %270 = %261.2;
  %271 = %268.0;
  (%269, %270, meta[relay.Constant][20] /* ty=Tensor[(3, 156), int32] */, %271, %var_5068)
}

def @func_508(%var_483: Tensor[(14, 4, 10), float32], %var_484: Tensor[(14, 4, 10), float32], %var_497: Tensor[(1144), float64]) -> (Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) {
  %272 = cast(meta[relay.Constant][21] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %273 = cast(%var_497, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %274 = reshape(%272, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %275 = reshape(%273, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %276 = @func_278(%274, %275) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %277 = cast(%var_484, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %278 = shape_of(%var_483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%var_483, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %281 = mod(%279, %280) /* ty=Tensor[(14, 4, 10), float32] */;
  %282 = cast(%281, dtype="float64") /* ty=Tensor[(14, 4, 10), float64] */;
  %283 = %276.4;
  %284 = sin(%282) /* ty=Tensor[(14, 4, 10), float64] */;
  (%283, meta[relay.Constant][21] /* ty=Tensor[(2730), float32] */, %var_497, %284)
}

def @func_4089(%var_4074: Tensor[(468), int32]) -> (Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) {
  %285 = @func_3373() /* ty=(Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) */;
  %286 = cast(%var_4074, dtype="int32") /* ty=Tensor[(468), int32] */;
  %287 = reshape(%286, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), int32] */;
  %288 = @func_609(%287) /* ty=(Tensor[(12, 13, 3), float32],) */;
  %289 = %285.0;
  %290 = %288.0;
  (%289, %290, %var_4074)
}

def @func_2846(%var_2839: Tensor[(13), int8], %var_2840: Tensor[(468), int8]) -> (Tensor[(22, 52), float64], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(12, 13, 3), float32]) {
  %291 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %292 = cast(%var_2839, dtype="int8") /* ty=Tensor[(13), int8] */;
  %293 = cast(%var_2840, dtype="int8") /* ty=Tensor[(468), int8] */;
  %294 = reshape(%292, newshape=[1, 13, 1]) /* ty=Tensor[(1, 13, 1), int8] */;
  %295 = reshape(%293, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), int8] */;
  %296 = @func_1284(%294, %295) /* ty=(Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) */;
  %297 = %296.1;
  %298 = cast(%297, dtype="int32") /* ty=Tensor[(9, 13, 4), int32] */;
  %299 = reshape(%298, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), int32] */;
  %300 = @func_609(%299) /* ty=(Tensor[(12, 13, 3), float32],) */;
  %301 = %291.1;
  %302 = %300.0;
  (%301, %297, %var_2839, %var_2840, %302)
}

def @func_4910() -> (Tensor[(7, 5, 10), int64],) {
  %303 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
  %304 = %303.4;
  (%304,)
}

def @func_4562() -> Tensor[(5, 40), int8] {
  %305 = @func_4359() /* ty=(Tensor[(5, 40), uint64],) */;
  %306 = %305.0;
  %307 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 40), uint64] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(2), int32] */;
  %309 = cast(%306, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  minimum(%309, %310) /* ty=Tensor[(5, 40), int8] */
}

def @func_2753() -> (Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) {
  %311 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 440), int16] */, dtype="int16") /* ty=Tensor[(1, 440), int16] */;
  %313 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 440), int16] */, dtype="int16") /* ty=Tensor[(1, 440), int16] */;
  %314 = reshape(%312, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %315 = reshape(%313, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %316 = @func_1322(%314, %315) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %317 = %311.1;
  %318 = %316.3;
  (%317, %318, meta[relay.Constant][23] /* ty=Tensor[(1, 440), int16] */)
}

def @func_5304(%var_5275: Tensor[(560), float32], %var_5278: Tensor[(1144), float64]) -> (Tensor[(7, 5, 10), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), uint16], Tensor[(1144), float32]) {
  %319 = cast(%var_5275, dtype="float32") /* ty=Tensor[(560), float32] */;
  %320 = cast(%var_5275, dtype="float32") /* ty=Tensor[(560), float32] */;
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %322 = reshape(%319, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %323 = reshape(%320, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %324 = reshape(%321, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %325 = @func_508(%322, %323, %324) /* ty=(Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) */;
  %326 = cast(%var_5278, dtype="uint16") /* ty=Tensor[(1144), uint16] */;
  %327 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(1144), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %328 = cast(meta[relay.Constant][24] /* ty=Tensor[(1144), float64] */, dtype="uint16") /* ty=Tensor[(1144), uint16] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %330 = cast(meta[relay.Constant][24] /* ty=Tensor[(1144), float64] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %331 = @func_2762() /* ty=Tensor[(7, 5, 10), float32] */;
  %332 = %325.2;
  %333 = logical_xor(%328, %329) /* ty=Tensor[(1144), uint16] */;
  %334 = acosh(%330) /* ty=Tensor[(1144), float32] */;
  (%331, %332, %var_5275, %333, %334)
}

def @func_1284(%var_1263: Tensor[(1, 13, 1), int8], %var_1264: Tensor[(9, 13, 4), int8]) -> (Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) {
  %335 = cast(%var_1263, dtype="int8") /* ty=Tensor[(1, 13, 1), int8] */;
  %336 = cast(%var_1264, dtype="int8") /* ty=Tensor[(9, 13, 4), int8] */;
  %337 = cast(%var_1264, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
  %338 = bitwise_and(%335, %336) /* ty=Tensor[(9, 13, 4), int8] */;
  %339 = log2(%337) /* ty=Tensor[(9, 13, 4), float32] */;
  (%338, %339)
}

def @func_846(%var_838: Tensor[(2, 2, 13), int8], %var_839: Tensor[(2, 2, 13), int8]) -> Tensor[(2, 2, 13), bool] {
  %340 = cast(%var_839, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
  %341 = shape_of(%var_838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_838, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%342, %343) /* ty=Tensor[(2, 2, 13), bool] */
}

def @func_4468(%var_4425: Tensor[(220), float64]) -> (Tensor[(7, 5, 10), int64], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(1, 440), int16], Tensor[(52), int8], Tensor[(1, 440), int16], Tensor[(7, 15, 16), bool], Tensor[(1680), float32]) {
  %344 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
  %345 = cast(%var_4425, dtype="float64") /* ty=Tensor[(220), float64] */;
  %346 = reshape(%345, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %347 = @func_37(%346) /* ty=(Tensor[(10, 2, 11), float64],) */;
  %348 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="int16") /* ty=Tensor[(1, 440), int16] */;
  %351 = reshape(%350, newshape=[110, 4]) /* ty=Tensor[(110, 4), int16] */;
  %352 = @func_2912(%351) /* ty=(Tensor[(5, 40), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(110, 4), int16], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(560), float32]) */;
  %353 = cast(meta[relay.Constant][25] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %354 = reshape(%353, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float32] */;
  %355 = @func_3987(%354) /* ty=(Tensor[(7, 15, 16), bool], Tensor[(10, 2, 11), uint16], Tensor[(1144, 1), float64]) */;
  %356 = cast(meta[relay.Constant][25] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %357 = %344.4;
  %358 = %347.0;
  %359 = %352.5;
  %360 = @func_4127() /* ty=Tensor[(1, 440), int16] */;
  %361 = %355.0;
  %362 = asinh(%356) /* ty=Tensor[(1680), float32] */;
  (%357, %358, %var_4425, %349, %359, %360, %361, %362)
}

def @func_4166() -> Tensor[(7, 5, 10), float32] {
  @func_2762() /* ty=Tensor[(7, 5, 10), float32] */
}

def @func_3936() -> (Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) {
  %363 = cast(meta[relay.Constant][26] /* ty=Tensor[(13), int8] */, dtype="int8") /* ty=Tensor[(13), int8] */;
  %364 = cast(meta[relay.Constant][27] /* ty=Tensor[(468), int8] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %365 = reshape(%363, newshape=[1, 13, 1]) /* ty=Tensor[(1, 13, 1), int8] */;
  %366 = reshape(%364, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), int8] */;
  %367 = @func_1284(%365, %366) /* ty=(Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) */;
  %368 = @func_2762() /* ty=Tensor[(7, 5, 10), float32] */;
  %369 = cast(%368, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %370 = sigmoid(%369) /* ty=Tensor[(7, 5, 10), float32] */;
  %371 = cast(%368, dtype="int64") /* ty=Tensor[(7, 5, 10), int64] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="int64") /* ty=Tensor[(7, 5, 10), int64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %375 = cast(%370, dtype="float64") /* ty=Tensor[(7, 5, 10), float64] */;
  %376 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %377 = %367.1;
  %378 = bitwise_xor(%373, %374) /* ty=Tensor[(7, 5, 10), int64] */;
  %379 = log10(%375) /* ty=Tensor[(7, 5, 10), float64] */;
  (%376, %377, meta[relay.Constant][26] /* ty=Tensor[(13), int8] */, meta[relay.Constant][27] /* ty=Tensor[(468), int8] */, %378, %379)
}

def @func_556(%var_516: Tensor[(5, 8, 5), uint64], %var_517: Tensor[(5, 8, 5), uint64]) -> (Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) {
  %380 = cast(%var_517, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %381 = shape_of(%var_516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%var_516, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %384 = cast(meta[relay.Constant][28] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %385 = reshape(%384, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %386 = @func_37(%385) /* ty=(Tensor[(10, 2, 11), float64],) */;
  %387 = cast(%var_517, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
  %388 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %389 = cast(meta[relay.Constant][29] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %390 = cast(meta[relay.Constant][30] /* ty=Tensor[(22, 52), float64] */, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %391 = reshape(%388, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %392 = reshape(%389, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %393 = reshape(%390, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %394 = @func_508(%391, %392, %393) /* ty=(Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) */;
  %395 = not_equal(%382, %383) /* ty=Tensor[(5, 8, 5), bool] */;
  %396 = %386.0;
  %397 = acos(%387) /* ty=Tensor[(5, 8, 5), float32] */;
  %398 = %394.0;
  (%395, %396, meta[relay.Constant][28] /* ty=Tensor[(220), float64] */, %397, %398, meta[relay.Constant][29] /* ty=Tensor[(560), float32] */, meta[relay.Constant][30] /* ty=Tensor[(22, 52), float64] */)
}

def @func_2699(%var_2645: Tensor[(3, 11, 2), uint32], %var_2651: Tensor[(7, 390), float32], %var_2652: Tensor[(1144), float64], %var_2660: Tensor[(440), int16]) -> (Tensor[(3, 11, 2), bool], Tensor[(1144), bool], Tensor[(7, 390), float32], Tensor[(1144), float64], Tensor[(240), float64], Tensor[(440), int16], Tensor[(375), uint8], Tensor[(1680), float64]) {
  %399 = cast(%var_2645, dtype="bool") /* ty=Tensor[(3, 11, 2), bool] */;
  %400 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 11, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 11, 2), uint32] */, dtype="bool") /* ty=Tensor[(3, 11, 2), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %403 = cast(%var_2651, dtype="float32") /* ty=Tensor[(7, 390), float32] */;
  %404 = cast(%var_2652, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %405 = reshape(%403, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %406 = reshape(%404, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %407 = @func_278(%405, %406) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %408 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %409 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %410 = reshape(%408, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %411 = reshape(%409, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %412 = @func_1322(%410, %411) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %413 = cast(meta[relay.Constant][32] /* ty=Tensor[(375), uint16] */, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %414 = reshape(%413, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), uint16] */;
  %415 = @func_1375(%414) /* ty=(Tensor[(15, 5, 5), uint16],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="uint8") /* ty=Tensor[(15, 5, 5), uint8] */;
  %418 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(375), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %419 = cast(meta[relay.Constant][32] /* ty=Tensor[(375), uint16] */, dtype="uint8") /* ty=Tensor[(375), uint8] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %421 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %422 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %423 = reshape(%421, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %424 = reshape(%422, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %425 = @func_1322(%423, %424) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %426 = less(%401, %402) /* ty=Tensor[(3, 11, 2), bool] */;
  %427 = %407.4;
  %428 = %412.4;
  %429 = bitwise_or(%419, %420) /* ty=Tensor[(375), uint8] */;
  %430 = %425.5;
  (%426, %427, %var_2651, %var_2652, %428, %var_2660, %429, %430)
}

def @func_170(%var_155: Tensor[(13, 11, 8), float64]) -> (Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) {
  %431 = cast(meta[relay.Constant][33] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %432 = reshape(%431, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %433 = @func_145(%432) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %434 = cast(%var_155, dtype="float64") /* ty=Tensor[(13, 11, 8), float64] */;
  %435 = asin(%434) /* ty=Tensor[(13, 11, 8), float64] */;
  %436 = cast(%var_155, dtype="int8") /* ty=Tensor[(13, 11, 8), int8] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="int8") /* ty=Tensor[(13, 11, 8), int8] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %440 = %433.2;
  %441 = subtract(%438, %439) /* ty=Tensor[(13, 11, 8), int8] */;
  (%440, meta[relay.Constant][33] /* ty=Tensor[(1008), float64] */, %441)
}

def @func_3435(%var_3406: Tensor[(16, 4, 15), float64], %var_3430: Tensor[(200), uint64]) -> (Tensor[(16, 4, 15), float64], Tensor[(1144), bool], Tensor[(910, 3), float32], Tensor[(11, 104), float64], Tensor[(286, 4), float64], Tensor[(200), uint64]) {
  %442 = cast(%var_3406, dtype="float64") /* ty=Tensor[(16, 4, 15), float64] */;
  %443 = sinh(%442) /* ty=Tensor[(16, 4, 15), float64] */;
  %444 = cast(%var_3406, dtype="float64") /* ty=Tensor[(16, 4, 15), float64] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="float64") /* ty=Tensor[(16, 4, 15), float64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %448 = cast(meta[relay.Constant][34] /* ty=Tensor[(910, 3), float32] */, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
  %449 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 104), float64] */, dtype="float64") /* ty=Tensor[(11, 104), float64] */;
  %450 = reshape(%448, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %451 = reshape(%449, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %452 = @func_278(%450, %451) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %453 = cast(%var_3430, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %454 = %452.4;
  %455 = cast(%454, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %456 = reshape(%453, newshape=[5, 40]) /* ty=Tensor[(5, 40), uint64] */;
  %457 = reshape(%455, newshape=[286, 4]) /* ty=Tensor[(286, 4), float64] */;
  %458 = @func_3076(%456, %457) /* ty=(Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) */;
  %459 = maximum(%446, %447) /* ty=Tensor[(16, 4, 15), float64] */;
  %460 = %458.3;
  (%459, %454, meta[relay.Constant][34] /* ty=Tensor[(910, 3), float32] */, meta[relay.Constant][35] /* ty=Tensor[(11, 104), float64] */, %460, %var_3430)
}

def @func_2942() -> (Tensor[(1, 440), int16],) {
  %461 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %462 = %461.2;
  (%462,)
}

def @func_807(%var_802: Tensor[(2, 13, 15), float64], %var_803: Tensor[(2, 13, 15), float64]) -> (Tensor[(2, 13, 15), float64],) {
  %463 = cast(%var_803, dtype="float64") /* ty=Tensor[(2, 13, 15), float64] */;
  %464 = shape_of(%var_802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_802, dtype="float64") /* ty=Tensor[(2, 13, 15), float64] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %467 = mod(%465, %466) /* ty=Tensor[(2, 13, 15), float64] */;
  (%467,)
}

def @func_4183(%var_4174: Tensor[(2, 9, 1), uint64], %var_4175: Tensor[(2, 9, 3), uint64]) -> Tensor[(2, 9, 3), uint64] {
  %468 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(2, 9, 1), uint64] */;
  %469 = cast(%var_4175, dtype="uint64") /* ty=Tensor[(2, 9, 3), uint64] */;
  bitwise_and(%468, %469) /* ty=Tensor[(2, 9, 3), uint64] */
}

def @func_5001() -> Tensor[(7, 5, 10), float32] {
  %470 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %470.0
}

def @func_37(%var_33: Tensor[(10, 2, 11), float64]) -> (Tensor[(10, 2, 11), float64],) {
  %471 = cast(%var_33, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %472 = asin(%471) /* ty=Tensor[(10, 2, 11), float64] */;
  (%472,)
}

def @func_4842(%var_4809: Tensor[(200), uint64], %var_4810: Tensor[(1144), float64]) -> (Tensor[(10, 9, 3), bool], Tensor[(200), uint64], Tensor[(1144), float64], Tensor[(7, 5, 10), int32]) {
  %473 = cast(%var_4809, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %474 = cast(%var_4810, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %475 = reshape(%473, newshape=[5, 40]) /* ty=Tensor[(5, 40), uint64] */;
  %476 = reshape(%474, newshape=[286, 4]) /* ty=Tensor[(286, 4), float64] */;
  %477 = @func_3076(%475, %476) /* ty=(Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) */;
  %478 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
  %479 = %478.4;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(7, 5, 10), float64] */;
  %481 = atanh(%480) /* ty=Tensor[(7, 5, 10), float64] */;
  %482 = cast(%479, dtype="int32") /* ty=Tensor[(7, 5, 10), int32] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="int32") /* ty=Tensor[(7, 5, 10), int32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %486 = %477.4;
  %487 = maximum(%484, %485) /* ty=Tensor[(7, 5, 10), int32] */;
  (%486, %var_4809, %var_4810, %487)
}

def @func_2997() -> Tensor[(7, 15, 16), float32] {
  %488 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %489 = %488.1;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  exp(%490) /* ty=Tensor[(7, 15, 16), float32] */
}

def @func_2912(%var_2891: Tensor[(110, 4), int16]) -> (Tensor[(5, 40), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(110, 4), int16], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(560), float32]) {
  %491 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %492 = %491.2;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
  %494 = cast(meta[relay.Constant][36] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %495 = cast(%var_2891, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
  %496 = reshape(%494, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %497 = reshape(%495, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %498 = @func_1804(%496, %497) /* ty=(Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) */;
  %499 = cast(meta[relay.Constant][37] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
  %500 = cast(meta[relay.Constant][37] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
  %501 = reshape(%499, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
  %502 = reshape(%500, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
  %503 = cast(%492, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %504 = acos(%493) /* ty=Tensor[(5, 40), float64] */;
  %505 = cast(%504, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %506 = reshape(%503, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %507 = reshape(%505, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %508 = @func_556(%506, %507) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %509 = %498.3;
  %510 = @func_846(%501, %502) /* ty=Tensor[(2, 2, 13), bool] */;
  %511 = %508.5;
  (%504, %509, meta[relay.Constant][36] /* ty=Tensor[(700), float64] */, %var_2891, %510, meta[relay.Constant][37] /* ty=Tensor[(52), int8] */, %511)
}

def @func_3212(%var_3199: Tensor[(1008), float64], %var_3204: Tensor[(110, 2), float64]) -> (Tensor[(7, 5, 10), float32], Tensor[(1008), float64], Tensor[(110, 2), int64]) {
  %512 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %513 = cast(%var_3199, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %514 = reshape(%513, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %515 = @func_145(%514) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %516 = %515.0;
  %517 = cast(%var_3204, dtype="int64") /* ty=Tensor[(110, 2), int64] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(2), int32] */;
  %519 = cast(%516, dtype="int64") /* ty=Tensor[(110, 2), int64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %521 = %512.0;
  %522 = minimum(%519, %520) /* ty=Tensor[(110, 2), int64] */;
  (%521, %var_3199, %522)
}

def @func_5443() -> (Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
  %523 = @func_4225() /* ty=(Tensor[(1, 440), float64],) */;
  %524 = cast(meta[relay.Constant][38] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
  %525 = cast(meta[relay.Constant][38] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
  %526 = reshape(%524, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
  %527 = reshape(%525, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
  %528 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 280), float32] */, dtype="float32") /* ty=Tensor[(2, 280), float32] */;
  %529 = reshape(%528, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %530 = @func_3346(%529) /* ty=(Tensor[(7, 15, 16), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), float64]) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %533 = cast(meta[relay.Constant][40] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %534 = reshape(%533, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
  %535 = @func_779(%534) /* ty=(Tensor[(3, 8, 1), float64],) */;
  %536 = %523.0;
  %537 = @func_846(%526, %527) /* ty=Tensor[(2, 2, 13), bool] */;
  %538 = atan(%532) /* ty=Tensor[(7, 15, 16), float32] */;
  %539 = @func_5001() /* ty=Tensor[(7, 5, 10), float32] */;
  %540 = %535.0;
  (%536, %537, meta[relay.Constant][38] /* ty=Tensor[(52), int8] */, meta[relay.Constant][39] /* ty=Tensor[(2, 280), float32] */, %538, %539, %540, meta[relay.Constant][40] /* ty=Tensor[(24), float64] */)
}

def @func_609(%var_571: Tensor[(12, 13, 3), int32]) -> (Tensor[(12, 13, 3), float32],) {
  %541 = cast(%var_571, dtype="int32") /* ty=Tensor[(12, 13, 3), int32] */;
  %542 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(12, 13, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 13, 3), int32] */, dtype="int32") /* ty=Tensor[(12, 13, 3), int32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %545 = logical_xor(%543, %544) /* ty=Tensor[(12, 13, 3), int32] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(12, 13, 3), float64] */;
  %547 = shape_of(%var_571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%var_571, dtype="float64") /* ty=Tensor[(12, 13, 3), float64] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %550 = floor_mod(%548, %549) /* ty=Tensor[(12, 13, 3), float64] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  %552 = sigmoid(%551) /* ty=Tensor[(12, 13, 3), float32] */;
  (%552,)
}

def @func_3845() -> (Tensor[(1, 440), int16],) {
  %553 = @func_2942() /* ty=(Tensor[(1, 440), int16],) */;
  %554 = %553.0;
  (%554,)
}

def @func_5461() -> Tensor[(1, 440), float64] {
  %555 = @func_5443() /* ty=(Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
  %555.0
}

def @func_1322(%var_1290: Tensor[(5, 11, 8), int16], %var_1291: Tensor[(5, 11, 8), int16]) -> (Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) {
  %556 = cast(%var_1291, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %557 = shape_of(%var_1290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%var_1290, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %560 = cast(meta[relay.Constant][42] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %561 = reshape(%560, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %562 = @func_145(%561) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %563 = cast(meta[relay.Constant][43] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %564 = cast(meta[relay.Constant][44] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %565 = reshape(%563, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %566 = reshape(%564, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %567 = @func_672(%565, %566) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %568 = minimum(%558, %559) /* ty=Tensor[(5, 11, 8), int16] */;
  %569 = %562.1;
  %570 = %567.0;
  (%568, %569, meta[relay.Constant][42] /* ty=Tensor[(1008), float64] */, %570, meta[relay.Constant][43] /* ty=Tensor[(240), float64] */, meta[relay.Constant][44] /* ty=Tensor[(1680), float64] */)
}

def @func_3987(%var_3974: Tensor[(7, 15, 16), float32]) -> (Tensor[(7, 15, 16), bool], Tensor[(10, 2, 11), uint16], Tensor[(1144, 1), float64]) {
  %571 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
  %572 = %571.0;
  %573 = cast(%var_3974, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %577 = cast(meta[relay.Constant][45] /* ty=Tensor[(1144, 1), float64] */, dtype="float64") /* ty=Tensor[(1144, 1), float64] */;
  %578 = reshape(%577, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %579 = @func_2454(%578) /* ty=(Tensor[(9, 3, 15), float64], Tensor[(15, 5, 5), uint16], Tensor[(375), uint16], Tensor[(110, 2), float64], Tensor[(1008), float64], Tensor[(10, 2, 11), uint16], Tensor[(1144), float64]) */;
  %580 = greater_equal(%575, %576) /* ty=Tensor[(7, 15, 16), bool] */;
  %581 = %579.5;
  (%580, %581, meta[relay.Constant][45] /* ty=Tensor[(1144, 1), float64] */)
}

def @func_4151() -> (Tensor[(1, 440), int16],) {
  %582 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
  %583 = %582.0;
  (%583,)
}

def @func_4276(%var_4264: Tensor[(2, 4, 8), int64], %var_4270: Tensor[(24), float64]) -> (Tensor[(2, 4, 8), int64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
  %584 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 4, 8), int64] */, dtype="int64") /* ty=Tensor[(2, 4, 8), int64] */;
  %585 = shape_of(%var_4264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_4264, dtype="int64") /* ty=Tensor[(2, 4, 8), int64] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %588 = cast(%var_4270, dtype="float64") /* ty=Tensor[(24), float64] */;
  %589 = reshape(%588, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
  %590 = @func_779(%589) /* ty=(Tensor[(3, 8, 1), float64],) */;
  %591 = logical_xor(%586, %587) /* ty=Tensor[(2, 4, 8), int64] */;
  %592 = %590.0;
  (%591, %592, %var_4270)
}

def @func_672(%var_667: Tensor[(1, 15, 16), float64], %var_668: Tensor[(7, 15, 16), float64]) -> (Tensor[(7, 15, 16), float64],) {
  %593 = cast(%var_667, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  %594 = cast(%var_668, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %595 = power(%593, %594) /* ty=Tensor[(7, 15, 16), float64] */;
  (%595,)
}

def @func_3300(%var_3275: Tensor[(924), float64]) -> (Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) {
  %596 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %597 = cast(%596, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %598 = cosh(%597) /* ty=Tensor[(7, 15, 16), float64] */;
  %599 = cast(%596, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%598, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %603 = cast(meta[relay.Constant][47] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %604 = reshape(%603, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %605 = @func_3189(%604) /* ty=(Tensor[(7, 15, 16), float32], Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64]) */;
  %606 = cast(%596, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %607 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%598, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %610 = cast(%598, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %611 = cast(%var_3275, dtype="float64") /* ty=Tensor[(924), float64] */;
  %612 = cast(%var_3275, dtype="float64") /* ty=Tensor[(924), float64] */;
  %613 = cast(meta[relay.Constant][48] /* ty=Tensor[(440), int16] */, dtype="int16") /* ty=Tensor[(440), int16] */;
  %614 = cast(meta[relay.Constant][49] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %615 = reshape(%611, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %616 = reshape(%612, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %617 = reshape(%613, newshape=[220, 2]) /* ty=Tensor[(220, 2), int16] */;
  %618 = reshape(%614, newshape=[65, 6]) /* ty=Tensor[(65, 6), float64] */;
  %619 = @func_2536(%615, %616, %617, %618) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) */;
  %620 = cast(meta[relay.Constant][47] /* ty=Tensor[(1144), float64] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %621 = cast(%598, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %622 = log(%621) /* ty=Tensor[(7, 15, 16), float64] */;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %624 = sinh(%623) /* ty=Tensor[(7, 15, 16), float32] */;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %626 = bitwise_and(%601, %602) /* ty=Tensor[(7, 15, 16), uint64] */;
  %627 = %605.1;
  %628 = floor_divide(%608, %609) /* ty=Tensor[(7, 15, 16), float32] */;
  %629 = log2(%610) /* ty=Tensor[(7, 15, 16), float64] */;
  %630 = %619.3;
  %631 = cosh(%620) /* ty=Tensor[(1144), float32] */;
  %632 = erf(%625) /* ty=Tensor[(7, 15, 16), float64] */;
  (%626, %627, %628, %629, %630, %var_3275, meta[relay.Constant][48] /* ty=Tensor[(440), int16] */, meta[relay.Constant][49] /* ty=Tensor[(390), float64] */, %631, %632)
}

def @func_4359() -> (Tensor[(5, 40), uint64],) {
  %633 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %634 = %633.2;
  (%634,)
}

def @func_2612(%var_2599: Tensor[(7, 13, 4), uint32], %var_2600: Tensor[(7, 13, 4), uint32]) -> (Tensor[(7, 13, 4), uint32],) {
  %635 = cast(%var_2600, dtype="uint32") /* ty=Tensor[(7, 13, 4), uint32] */;
  %636 = shape_of(%var_2599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_2599, dtype="uint32") /* ty=Tensor[(7, 13, 4), uint32] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %639 = bitwise_and(%637, %638) /* ty=Tensor[(7, 13, 4), uint32] */;
  (%639,)
}

def @func_4401() -> Tensor[(1, 440), float64] {
  %640 = @func_4225() /* ty=(Tensor[(1, 440), float64],) */;
  %640.0
}

def @func_3346(%var_3340: Tensor[(560), float32]) -> (Tensor[(7, 15, 16), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), float64]) {
  %641 = cast(%var_3340, dtype="float32") /* ty=Tensor[(560), float32] */;
  %642 = cast(%var_3340, dtype="float32") /* ty=Tensor[(560), float32] */;
  %643 = cast(meta[relay.Constant][50] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %644 = reshape(%641, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %645 = reshape(%642, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %646 = reshape(%643, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %647 = @func_508(%644, %645, %646) /* ty=(Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) */;
  %648 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %649 = %647.2;
  (%648, %649, %var_3340, meta[relay.Constant][50] /* ty=Tensor[(1144), float64] */)
}

def @func_4772(%var_4712: Tensor[(66), uint32], %var_4713: Tensor[(1, 2730), float32], %var_4714: Tensor[(110, 4), int16], %var_4745: Tensor[(22, 52), float64]) -> (Tensor[(22, 52), bool], Tensor[(440), int16], Tensor[(66), uint32], Tensor[(1, 2730), float32], Tensor[(110, 4), int16], Tensor[(13, 440), uint32], Tensor[(468), int32], Tensor[(10, 2, 11), uint16], Tensor[(22, 52), bool], Tensor[(1, 440), int16], Tensor[(22, 52), float32]) {
  %650 = cast(meta[relay.Constant][51] /* ty=Tensor[(22, 52), float64] */, dtype="float32") /* ty=Tensor[(22, 52), float32] */;
  %651 = log(%650) /* ty=Tensor[(22, 52), float32] */;
  %652 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %653 = %652.1;
  %654 = cast(meta[relay.Constant][51] /* ty=Tensor[(22, 52), float64] */, dtype="int32") /* ty=Tensor[(22, 52), int32] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(2), int32] */;
  %656 = cast(%653, dtype="int32") /* ty=Tensor[(22, 52), int32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %658 = right_shift(%656, %657) /* ty=Tensor[(22, 52), int32] */;
  %659 = cast(%658, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %660 = shape_of(%651, dtype="int32") /* ty=Tensor[(2), int32] */;
  %661 = cast(%651, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %663 = cast(%var_4712, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %664 = cast(%var_4713, dtype="float32") /* ty=Tensor[(1, 2730), float32] */;
  %665 = less_equal(%661, %662) /* ty=Tensor[(22, 52), bool] */;
  %666 = cast(%665, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %667 = cast(%var_4714, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
  %668 = reshape(%663, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), uint32] */;
  %669 = reshape(%664, newshape=[7, 390]) /* ty=Tensor[(7, 390), float32] */;
  %670 = reshape(%666, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %671 = reshape(%667, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %672 = @func_2699(%668, %669, %670, %671) /* ty=(Tensor[(3, 11, 2), bool], Tensor[(1144), bool], Tensor[(7, 390), float32], Tensor[(1144), float64], Tensor[(240), float64], Tensor[(440), int16], Tensor[(375), uint8], Tensor[(1680), float64]) */;
  %673 = cast(meta[relay.Constant][52] /* ty=Tensor[(468), int32] */, dtype="int32") /* ty=Tensor[(468), int32] */;
  %674 = reshape(%673, newshape=[468]) /* ty=Tensor[(468), int32] */;
  %675 = @func_4089(%674) /* ty=(Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) */;
  %676 = cast(%653, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %677 = reshape(%676, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %678 = @func_170(%677) /* ty=(Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) */;
  %679 = cast(%651, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %680 = log10(%679) /* ty=Tensor[(22, 52), float64] */;
  %681 = cast(meta[relay.Constant][51] /* ty=Tensor[(22, 52), float64] */, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(2), int32] */;
  %683 = cast(%680, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %685 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %686 = cast(%680, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %687 = erf(%686) /* ty=Tensor[(22, 52), float64] */;
  %688 = cast(%var_4745, dtype="int8") /* ty=Tensor[(22, 52), int8] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(2), int32] */;
  %690 = cast(%687, dtype="int8") /* ty=Tensor[(22, 52), int8] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %692 = multiply(%690, %691) /* ty=Tensor[(22, 52), int8] */;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(22, 52), float32] */;
  %694 = %672.5;
  %695 = %675.0;
  %696 = %678.0;
  %697 = less(%683, %684) /* ty=Tensor[(22, 52), bool] */;
  %698 = %685.2;
  %699 = cosh(%693) /* ty=Tensor[(22, 52), float32] */;
  (%665, %694, %var_4712, %var_4713, %var_4714, %695, meta[relay.Constant][52] /* ty=Tensor[(468), int32] */, %696, %697, %698, %699)
}

def @func_2762() -> Tensor[(7, 5, 10), float32] {
  %700 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %700.0
}

def @func_3076(%var_3055: Tensor[(5, 40), uint64], %var_3066: Tensor[(286, 4), float64]) -> (Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) {
  %701 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %702 = %701.2;
  %703 = cast(%var_3055, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(2), int32] */;
  %705 = cast(%702, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %707 = cast(meta[relay.Constant][53] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %708 = cast(%var_3066, dtype="float64") /* ty=Tensor[(286, 4), float64] */;
  %709 = reshape(%707, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %710 = reshape(%708, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %711 = @func_278(%709, %710) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %712 = cast(meta[relay.Constant][54] /* ty=Tensor[(270, 1), uint32] */, dtype="uint32") /* ty=Tensor[(270, 1), uint32] */;
  %713 = reshape(%712, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), uint32] */;
  %714 = subtract(%705, %706) /* ty=Tensor[(5, 40), int64] */;
  %715 = %711.2;
  %716 = @func_868(%713) /* ty=Tensor[(10, 9, 3), bool] */;
  (%714, %715, meta[relay.Constant][53] /* ty=Tensor[(2730), float32] */, %var_3066, %716, meta[relay.Constant][54] /* ty=Tensor[(270, 1), uint32] */)
}

def @func_4127() -> Tensor[(1, 440), int16] {
  %717 = @func_2942() /* ty=(Tensor[(1, 440), int16],) */;
  %717.0
}

def @func_4225() -> (Tensor[(1, 440), float64],) {
  %718 = @func_4127() /* ty=Tensor[(1, 440), int16] */;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(1, 440), float64] */;
  %720 = cosh(%719) /* ty=Tensor[(1, 440), float64] */;
  (%720,)
}

def @func_2454(%var_2450: Tensor[(1144), float64]) -> (Tensor[(9, 3, 15), float64], Tensor[(15, 5, 5), uint16], Tensor[(375), uint16], Tensor[(110, 2), float64], Tensor[(1008), float64], Tensor[(10, 2, 11), uint16], Tensor[(1144), float64]) {
  %721 = cast(-5.76965f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %722 = cast(meta[relay.Constant][55] /* ty=Tensor[(9, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %723 = cast(meta[relay.Constant][56] /* ty=Tensor[(375), uint16] */, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %724 = reshape(%723, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), uint16] */;
  %725 = @func_1375(%724) /* ty=(Tensor[(15, 5, 5), uint16],) */;
  %726 = cast(meta[relay.Constant][57] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %727 = reshape(%726, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %728 = @func_145(%727) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %729 = cast(%var_2450, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %730 = reshape(%729, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %731 = @func_170(%730) /* ty=(Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) */;
  %732 = floor_divide(%721, %722) /* ty=Tensor[(9, 3, 15), float64] */;
  %733 = %725.0;
  %734 = %728.0;
  %735 = %731.0;
  (%732, %733, meta[relay.Constant][56] /* ty=Tensor[(375), uint16] */, %734, meta[relay.Constant][57] /* ty=Tensor[(1008), float64] */, %735, %var_2450)
}

def @func_4584(%var_4574: Tensor[(1, 924), float64], %var_4575: Tensor[(440), int16], %var_4576: Tensor[(5, 78), float64]) -> (Tensor[(7, 15, 16), float32], Tensor[(2, 13, 15), float64], Tensor[(1, 924), float64], Tensor[(440), int16], Tensor[(5, 78), float64]) {
  %736 = cast(%var_4574, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
  %737 = cast(%var_4574, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
  %738 = cast(%var_4575, dtype="int16") /* ty=Tensor[(440), int16] */;
  %739 = cast(%var_4576, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %740 = reshape(%736, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %741 = reshape(%737, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %742 = reshape(%738, newshape=[220, 2]) /* ty=Tensor[(220, 2), int16] */;
  %743 = reshape(%739, newshape=[65, 6]) /* ty=Tensor[(65, 6), float64] */;
  %744 = @func_2536(%740, %741, %742, %743) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) */;
  %745 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %746 = %744.3;
  (%745, %746, %var_4574, %var_4575, %var_4576)
}

def @func_145(%var_111: Tensor[(14, 12, 6), float64]) -> (Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) {
  %747 = cast(%var_111, dtype="float64") /* ty=Tensor[(14, 12, 6), float64] */;
  %748 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(14, 12, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(meta[relay.Constant][59] /* ty=Tensor[(14, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 6), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %751 = power(%749, %750) /* ty=Tensor[(14, 12, 6), float64] */;
  %752 = cast(%var_111, dtype="bool") /* ty=Tensor[(14, 12, 6), bool] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="bool") /* ty=Tensor[(14, 12, 6), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = cast(meta[relay.Constant][58] /* ty=Tensor[(110, 2), float64] */, dtype="float64") /* ty=Tensor[(110, 2), float64] */;
  %757 = reshape(%756, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %758 = @func_37(%757) /* ty=(Tensor[(10, 2, 11), float64],) */;
  %759 = %758.0;
  %760 = cast(%759, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %761 = reshape(%760, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %762 = @func_37(%761) /* ty=(Tensor[(10, 2, 11), float64],) */;
  %763 = %762.0;
  %764 = cast(%759, dtype="uint16") /* ty=Tensor[(10, 2, 11), uint16] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="uint16") /* ty=Tensor[(10, 2, 11), uint16] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %768 = greater_equal(%754, %755) /* ty=Tensor[(14, 12, 6), bool] */;
  %769 = bitwise_xor(%766, %767) /* ty=Tensor[(10, 2, 11), uint16] */;
  (meta[relay.Constant][58] /* ty=Tensor[(110, 2), float64] */, %768, %769)
}

def @func_3519(%var_3474: Tensor[(7, 15, 16), float64], %var_3484: Tensor[(924), float64]) -> (Tensor[(7, 15, 16), int16], Tensor[(7, 15, 16), uint64], Tensor[(924), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16], Tensor[(22, 52), float64], Tensor[(390), float64], Tensor[(7, 15, 16), float32]) {
  %770 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %771 = %770.1;
  %772 = cast(%var_3474, dtype="int16") /* ty=Tensor[(7, 15, 16), int16] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="int16") /* ty=Tensor[(7, 15, 16), int16] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %776 = cast(%var_3484, dtype="float64") /* ty=Tensor[(924), float64] */;
  %777 = reshape(%776, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %778 = @func_3300(%777) /* ty=(Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) */;
  %779 = cast(meta[relay.Constant][60] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %780 = cast(meta[relay.Constant][61] /* ty=Tensor[(440), int16] */, dtype="int16") /* ty=Tensor[(440), int16] */;
  %781 = reshape(%779, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %782 = reshape(%780, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %783 = @func_1804(%781, %782) /* ty=(Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) */;
  %784 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %785 = cast(%var_3484, dtype="float64") /* ty=Tensor[(924), float64] */;
  %786 = reshape(%785, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %787 = @func_3300(%786) /* ty=(Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) */;
  %788 = cast(%771, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %789 = tan(%788) /* ty=Tensor[(7, 15, 16), float64] */;
  %790 = cast(%789, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %791 = minimum(%774, %775) /* ty=Tensor[(7, 15, 16), int16] */;
  %792 = %778.0;
  %793 = %783.3;
  %794 = %784.1;
  %795 = %787.7;
  %796 = sigmoid(%790) /* ty=Tensor[(7, 15, 16), float32] */;
  (%791, %792, %var_3484, %793, meta[relay.Constant][60] /* ty=Tensor[(700), float64] */, meta[relay.Constant][61] /* ty=Tensor[(440), int16] */, %794, %795, %796)
}

def @func_3617(%var_3608: Tensor[(200), uint64], %var_3615: Tensor[(24), float64]) -> (Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
  %797 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %798 = %797.0;
  %799 = cast(%798, dtype="float32") /* ty=Tensor[(22, 52), float32] */;
  %800 = cast(%var_3608, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %801 = acos(%799) /* ty=Tensor[(22, 52), float32] */;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %803 = reshape(%800, newshape=[5, 40]) /* ty=Tensor[(5, 40), uint64] */;
  %804 = reshape(%802, newshape=[286, 4]) /* ty=Tensor[(286, 4), float64] */;
  %805 = @func_3076(%803, %804) /* ty=(Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) */;
  %806 = cast(%var_3615, dtype="float64") /* ty=Tensor[(24), float64] */;
  %807 = reshape(%806, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
  %808 = @func_779(%807) /* ty=(Tensor[(3, 8, 1), float64],) */;
  %809 = %805.2;
  %810 = %808.0;
  (%801, %809, %var_3608, %810, %var_3615)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_849(%var_847: Tensor[(2, 2, 13), int8], %var_848: Tensor[(2, 2, 13), int8]) -> Tensor[(2, 2, 13), bool] {
  %4 = fn (%var_838: Tensor[(2, 2, 13), int8], %var_839: Tensor[(2, 2, 13), int8]) -> Tensor[(2, 2, 13), bool] {
    %0 = cast(%var_839, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
    %1 = shape_of(%var_838, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_838, dtype="bool") /* ty=Tensor[(2, 2, 13), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%2, %3) /* ty=Tensor[(2, 2, 13), bool] */
  };
  %4(%var_847, %var_848) /* ty=Tensor[(2, 2, 13), bool] */
}

def @func_810(%var_808: Tensor[(2, 13, 15), float64], %var_809: Tensor[(2, 13, 15), float64]) -> (Tensor[(2, 13, 15), float64],) {
  %10 = fn (%var_802: Tensor[(2, 13, 15), float64], %var_803: Tensor[(2, 13, 15), float64]) -> (Tensor[(2, 13, 15), float64],) {
    %5 = cast(%var_803, dtype="float64") /* ty=Tensor[(2, 13, 15), float64] */;
    %6 = shape_of(%var_802, dtype="int32") /* ty=Tensor[(3), int32] */;
    %7 = cast(%var_802, dtype="float64") /* ty=Tensor[(2, 13, 15), float64] */;
    %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %9 = mod(%7, %8) /* ty=Tensor[(2, 13, 15), float64] */;
    (%9,)
  };
  %10(%var_808, %var_809) /* ty=(Tensor[(2, 13, 15), float64],) */
}

def @func_5444() -> (Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
  %29 = fn () -> (Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
    %11 = @func_4225() /* ty=(Tensor[(1, 440), float64],) */;
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
    %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
    %14 = reshape(%12, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
    %15 = reshape(%13, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
    %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 280), float32] */, dtype="float32") /* ty=Tensor[(2, 280), float32] */;
    %17 = reshape(%16, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %18 = @func_3346(%17) /* ty=(Tensor[(7, 15, 16), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), float64]) */;
    %19 = %18.0;
    %20 = cast(%19, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
    %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %22 = reshape(%21, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
    %23 = @func_779(%22) /* ty=(Tensor[(3, 8, 1), float64],) */;
    %24 = %11.0;
    %25 = @func_846(%14, %15) /* ty=Tensor[(2, 2, 13), bool] */;
    %26 = atan(%20) /* ty=Tensor[(7, 15, 16), float32] */;
    %27 = @func_5001() /* ty=Tensor[(7, 5, 10), float32] */;
    %28 = %23.0;
    (%24, %25, meta[relay.Constant][0] /* ty=Tensor[(52), int8] */, meta[relay.Constant][1] /* ty=Tensor[(2, 280), float32] */, %26, %27, %28, meta[relay.Constant][2] /* ty=Tensor[(24), float64] */)
  };
  %29() /* ty=(Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */
}

def @func_173(%var_171: Tensor[(13, 11, 8), float64]) -> (Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) {
  @func_170(%var_171) /* ty=(Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) */
}

def @func_2763() -> Tensor[(7, 5, 10), float32] {
  %31 = fn () -> Tensor[(7, 5, 10), float32] {
    %30 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
    %30.0
  };
  %31() /* ty=Tensor[(7, 5, 10), float32] */
}

def @func_4778(%var_4774: Tensor[(66), uint32], %var_4775: Tensor[(1, 2730), float32], %var_4776: Tensor[(110, 4), int16], %var_4777: Tensor[(22, 52), float64]) -> (Tensor[(22, 52), bool], Tensor[(440), int16], Tensor[(66), uint32], Tensor[(1, 2730), float32], Tensor[(110, 4), int16], Tensor[(13, 440), uint32], Tensor[(468), int32], Tensor[(10, 2, 11), uint16], Tensor[(22, 52), bool], Tensor[(1, 440), int16], Tensor[(22, 52), float32]) {
  @func_4772(%var_4774, %var_4775, %var_4776, %var_4777) /* ty=(Tensor[(22, 52), bool], Tensor[(440), int16], Tensor[(66), uint32], Tensor[(1, 2730), float32], Tensor[(110, 4), int16], Tensor[(13, 440), uint32], Tensor[(468), int32], Tensor[(10, 2, 11), uint16], Tensor[(22, 52), bool], Tensor[(1, 440), int16], Tensor[(22, 52), float32]) */
}

def @func_5132() -> Tensor[(5, 40), float32] {
  @func_5130() /* ty=Tensor[(5, 40), float32] */
}

def @func_2846(%var_2839: Tensor[(13), int8], %var_2840: Tensor[(468), int8]) -> (Tensor[(22, 52), float64], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(12, 13, 3), float32]) {
  %32 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %33 = cast(%var_2839, dtype="int8") /* ty=Tensor[(13), int8] */;
  %34 = cast(%var_2840, dtype="int8") /* ty=Tensor[(468), int8] */;
  %35 = reshape(%33, newshape=[1, 13, 1]) /* ty=Tensor[(1, 13, 1), int8] */;
  %36 = reshape(%34, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), int8] */;
  %37 = @func_1284(%35, %36) /* ty=(Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) */;
  %38 = %37.1;
  %39 = cast(%38, dtype="int32") /* ty=Tensor[(9, 13, 4), int32] */;
  %40 = reshape(%39, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), int32] */;
  %41 = @func_609(%40) /* ty=(Tensor[(12, 13, 3), float32],) */;
  %42 = %32.1;
  %43 = %41.0;
  (%42, %38, %var_2839, %var_2840, %43)
}

def @func_5448() -> (Tensor[(7, 15, 16), float64],) {
  %44 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %45 = %44.1;
  (%45,)
}

def @func_3397(%var_3394: Tensor[(9, 12, 12), float64]) -> Tensor[(9, 12, 12), float64] {
  %46 = cast(%var_3394, dtype="float64") /* ty=Tensor[(9, 12, 12), float64] */;
  log2(%46) /* ty=Tensor[(9, 12, 12), float64] */
}

def @func_1322(%var_1290: Tensor[(5, 11, 8), int16], %var_1291: Tensor[(5, 11, 8), int16]) -> (Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) {
  %47 = cast(%var_1291, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %48 = shape_of(%var_1290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_1290, dtype="int16") /* ty=Tensor[(5, 11, 8), int16] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %52 = reshape(%51, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %53 = @func_145(%52) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %55 = cast(meta[relay.Constant][5] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %56 = reshape(%54, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %57 = reshape(%55, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
  %58 = @func_672(%56, %57) /* ty=(Tensor[(7, 15, 16), float64],) */;
  %59 = minimum(%49, %50) /* ty=Tensor[(5, 11, 8), int16] */;
  %60 = %53.1;
  %61 = %58.0;
  (%59, %60, meta[relay.Constant][3] /* ty=Tensor[(1008), float64] */, %61, meta[relay.Constant][4] /* ty=Tensor[(240), float64] */, meta[relay.Constant][5] /* ty=Tensor[(1680), float64] */)
}

def @func_3847() -> (Tensor[(1, 440), int16],) {
  @func_3845() /* ty=(Tensor[(1, 440), int16],) */
}

def @func_3303(%var_3301: Tensor[(924), float64]) -> (Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) {
  @func_3300(%var_3301) /* ty=(Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) */
}

def @func_145(%var_111: Tensor[(14, 12, 6), float64]) -> (Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) {
  %62 = cast(%var_111, dtype="float64") /* ty=Tensor[(14, 12, 6), float64] */;
  %63 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(14, 12, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 12, 6), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 6), float64] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %66 = power(%64, %65) /* ty=Tensor[(14, 12, 6), float64] */;
  %67 = cast(%var_111, dtype="bool") /* ty=Tensor[(14, 12, 6), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(14, 12, 6), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(110, 2), float64] */, dtype="float64") /* ty=Tensor[(110, 2), float64] */;
  %72 = reshape(%71, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %73 = @func_37(%72) /* ty=(Tensor[(10, 2, 11), float64],) */;
  %74 = %73.0;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %76 = reshape(%75, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
  %77 = @func_37(%76) /* ty=(Tensor[(10, 2, 11), float64],) */;
  %78 = %77.0;
  %79 = cast(%74, dtype="uint16") /* ty=Tensor[(10, 2, 11), uint16] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="uint16") /* ty=Tensor[(10, 2, 11), uint16] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %83 = greater_equal(%69, %70) /* ty=Tensor[(14, 12, 6), bool] */;
  %84 = bitwise_xor(%81, %82) /* ty=Tensor[(10, 2, 11), uint16] */;
  (meta[relay.Constant][6] /* ty=Tensor[(110, 2), float64] */, %83, %84)
}

def @func_4280(%var_4278: Tensor[(2, 4, 8), int64], %var_4279: Tensor[(24), float64]) -> (Tensor[(2, 4, 8), int64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
  @func_4276(%var_4278, %var_4279) /* ty=(Tensor[(2, 4, 8), int64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */
}

def @func_2616(%var_2614: Tensor[(7, 13, 4), uint32], %var_2615: Tensor[(7, 13, 4), uint32]) -> (Tensor[(7, 13, 4), uint32],) {
  @func_2612(%var_2614, %var_2615) /* ty=(Tensor[(7, 13, 4), uint32],) */
}

def @func_5350(%var_5348: Tensor[(11, 16, 7), float32]) -> (Tensor[(11, 16, 7), int64],) {
  @func_5347(%var_5348) /* ty=(Tensor[(11, 16, 7), int64],) */
}

def @func_5001() -> Tensor[(7, 5, 10), float32] {
  %85 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %85.0
}

def @func_2632() -> (Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) {
  @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */
}

def @func_2997() -> Tensor[(7, 15, 16), float32] {
  %86 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %87 = %86.1;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  exp(%88) /* ty=Tensor[(7, 15, 16), float32] */
}

def @func_4772(%var_4712: Tensor[(66), uint32], %var_4713: Tensor[(1, 2730), float32], %var_4714: Tensor[(110, 4), int16], %var_4745: Tensor[(22, 52), float64]) -> (Tensor[(22, 52), bool], Tensor[(440), int16], Tensor[(66), uint32], Tensor[(1, 2730), float32], Tensor[(110, 4), int16], Tensor[(13, 440), uint32], Tensor[(468), int32], Tensor[(10, 2, 11), uint16], Tensor[(22, 52), bool], Tensor[(1, 440), int16], Tensor[(22, 52), float32]) {
  %89 = cast(meta[relay.Constant][8] /* ty=Tensor[(22, 52), float64] */, dtype="float32") /* ty=Tensor[(22, 52), float32] */;
  %90 = log(%89) /* ty=Tensor[(22, 52), float32] */;
  %91 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %92 = %91.1;
  %93 = cast(meta[relay.Constant][8] /* ty=Tensor[(22, 52), float64] */, dtype="int32") /* ty=Tensor[(22, 52), int32] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(2), int32] */;
  %95 = cast(%92, dtype="int32") /* ty=Tensor[(22, 52), int32] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %97 = right_shift(%95, %96) /* ty=Tensor[(22, 52), int32] */;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %99 = shape_of(%90, dtype="int32") /* ty=Tensor[(2), int32] */;
  %100 = cast(%90, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %102 = cast(%var_4712, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %103 = cast(%var_4713, dtype="float32") /* ty=Tensor[(1, 2730), float32] */;
  %104 = less_equal(%100, %101) /* ty=Tensor[(22, 52), bool] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %106 = cast(%var_4714, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
  %107 = reshape(%102, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), uint32] */;
  %108 = reshape(%103, newshape=[7, 390]) /* ty=Tensor[(7, 390), float32] */;
  %109 = reshape(%105, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %110 = reshape(%106, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %111 = @func_2699(%107, %108, %109, %110) /* ty=(Tensor[(3, 11, 2), bool], Tensor[(1144), bool], Tensor[(7, 390), float32], Tensor[(1144), float64], Tensor[(240), float64], Tensor[(440), int16], Tensor[(375), uint8], Tensor[(1680), float64]) */;
  %112 = cast(meta[relay.Constant][9] /* ty=Tensor[(468), int32] */, dtype="int32") /* ty=Tensor[(468), int32] */;
  %113 = reshape(%112, newshape=[468]) /* ty=Tensor[(468), int32] */;
  %114 = @func_4089(%113) /* ty=(Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) */;
  %115 = cast(%92, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %116 = reshape(%115, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %117 = @func_170(%116) /* ty=(Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) */;
  %118 = cast(%90, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %119 = log10(%118) /* ty=Tensor[(22, 52), float64] */;
  %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(22, 52), float64] */, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %121 = shape_of(%119, dtype="int32") /* ty=Tensor[(2), int32] */;
  %122 = cast(%119, dtype="bool") /* ty=Tensor[(22, 52), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %124 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %125 = cast(%119, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
  %126 = erf(%125) /* ty=Tensor[(22, 52), float64] */;
  %127 = cast(%var_4745, dtype="int8") /* ty=Tensor[(22, 52), int8] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(2), int32] */;
  %129 = cast(%126, dtype="int8") /* ty=Tensor[(22, 52), int8] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %131 = multiply(%129, %130) /* ty=Tensor[(22, 52), int8] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(22, 52), float32] */;
  %133 = %111.5;
  %134 = %114.0;
  %135 = %117.0;
  %136 = less(%122, %123) /* ty=Tensor[(22, 52), bool] */;
  %137 = %124.2;
  %138 = cosh(%132) /* ty=Tensor[(22, 52), float32] */;
  (%104, %133, %var_4712, %var_4713, %var_4714, %134, meta[relay.Constant][9] /* ty=Tensor[(468), int32] */, %135, %136, %137, %138)
}

def @func_4941(%var_4939: Tensor[(10, 440), int16]) -> (Tensor[(10, 440), bool],) {
  @func_4938(%var_4939) /* ty=(Tensor[(10, 440), bool],) */
}

def @func_779(%var_771: Tensor[(3, 8, 1), float64]) -> (Tensor[(3, 8, 1), float64],) {
  %139 = cast(%var_771, dtype="float64") /* ty=Tensor[(3, 8, 1), float64] */;
  %140 = log(%139) /* ty=Tensor[(3, 8, 1), float64] */;
  (%140,)
}

def @func_4912() -> (Tensor[(7, 5, 10), int64],) {
  @func_4910() /* ty=(Tensor[(7, 5, 10), int64],) */
}

def @func_5462() -> Tensor[(1, 440), float64] {
  %142 = fn () -> Tensor[(1, 440), float64] {
    %141 = @func_5443() /* ty=(Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
    %141.0
  };
  %142() /* ty=Tensor[(1, 440), float64] */
}

def @func_5003() -> Tensor[(7, 5, 10), float32] {
  @func_5001() /* ty=Tensor[(7, 5, 10), float32] */
}

def @func_3216(%var_3214: Tensor[(1008), float64], %var_3215: Tensor[(110, 2), float64]) -> (Tensor[(7, 5, 10), float32], Tensor[(1008), float64], Tensor[(110, 2), int64]) {
  @func_3212(%var_3214, %var_3215) /* ty=(Tensor[(7, 5, 10), float32], Tensor[(1008), float64], Tensor[(110, 2), int64]) */
}

def @func_5071(%var_5068: Tensor[(56, 12), bool]) -> (Tensor[(5, 40), uint64], Tensor[(468), int32], Tensor[(3, 156), int32], Tensor[(3, 16, 14), bool], Tensor[(56, 12), bool]) {
  %143 = @func_4359() /* ty=(Tensor[(5, 40), uint64],) */;
  %144 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 156), int32] */, dtype="int32") /* ty=Tensor[(3, 156), int32] */;
  %145 = reshape(%144, newshape=[468]) /* ty=Tensor[(468), int32] */;
  %146 = @func_4089(%145) /* ty=(Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) */;
  %147 = cast(%var_5068, dtype="bool") /* ty=Tensor[(56, 12), bool] */;
  %148 = cast(%var_5068, dtype="bool") /* ty=Tensor[(56, 12), bool] */;
  %149 = cast(%var_5068, dtype="float32") /* ty=Tensor[(56, 12), float32] */;
  %150 = reshape(%147, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %151 = reshape(%148, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %152 = reshape(%149, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float32] */;
  %153 = @func_2794(%150, %151, %152) /* ty=(Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) */;
  %154 = %143.0;
  %155 = %146.2;
  %156 = %153.0;
  (%154, %155, meta[relay.Constant][10] /* ty=Tensor[(3, 156), int32] */, %156, %var_5068)
}

def @func_2755() -> (Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) {
  @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */
}

def @func_4129() -> Tensor[(1, 440), int16] {
  @func_4127() /* ty=Tensor[(1, 440), int16] */
}

def @func_512(%var_509: Tensor[(14, 4, 10), float32], %var_510: Tensor[(14, 4, 10), float32], %var_511: Tensor[(1144), float64]) -> (Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) {
  %170 = fn (%var_483: Tensor[(14, 4, 10), float32], %var_484: Tensor[(14, 4, 10), float32], %var_497: Tensor[(1144), float64]) -> (Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) {
    %157 = cast(meta[relay.Constant][11] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %158 = cast(%var_497, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %159 = reshape(%157, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
    %160 = reshape(%158, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %161 = @func_278(%159, %160) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
    %162 = cast(%var_484, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
    %163 = shape_of(%var_483, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%var_483, dtype="float32") /* ty=Tensor[(14, 4, 10), float32] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %166 = mod(%164, %165) /* ty=Tensor[(14, 4, 10), float32] */;
    %167 = cast(%166, dtype="float64") /* ty=Tensor[(14, 4, 10), float64] */;
    %168 = %161.4;
    %169 = sin(%167) /* ty=Tensor[(14, 4, 10), float64] */;
    (%168, meta[relay.Constant][11] /* ty=Tensor[(2730), float32] */, %var_497, %169)
  };
  %170(%var_509, %var_510, %var_511) /* ty=(Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) */
}

def @func_37(%var_33: Tensor[(10, 2, 11), float64]) -> (Tensor[(10, 2, 11), float64],) {
  %171 = cast(%var_33, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %172 = asin(%171) /* ty=Tensor[(10, 2, 11), float64] */;
  (%172,)
}

def @func_40(%var_38: Tensor[(10, 2, 11), float64]) -> (Tensor[(10, 2, 11), float64],) {
  @func_37(%var_38) /* ty=(Tensor[(10, 2, 11), float64],) */
}

def @func_3677(%var_3674: Tensor[(10, 440), int16], %var_3675: Tensor[(1, 2730), float32], %var_3676: Tensor[(1144), float64]) -> (Tensor[(10, 440), uint32], Tensor[(200), uint64], Tensor[(1680), float64], Tensor[(924), float64], Tensor[(15, 13, 14), bool], Tensor[(1, 2730), float32], Tensor[(1144), float64]) {
  %190 = fn (%var_3648: Tensor[(10, 440), int16], %var_3660: Tensor[(1, 2730), float32], %var_3661: Tensor[(1144), float64]) -> (Tensor[(10, 440), uint32], Tensor[(200), uint64], Tensor[(1680), float64], Tensor[(924), float64], Tensor[(15, 13, 14), bool], Tensor[(1, 2730), float32], Tensor[(1144), float64]) {
    %173 = @func_2942() /* ty=(Tensor[(1, 440), int16],) */;
    %174 = %173.0;
    %175 = cast(%174, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
    %176 = cast(%var_3648, dtype="uint32") /* ty=Tensor[(10, 440), uint32] */;
    %177 = cast(meta[relay.Constant][12] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %178 = cast(meta[relay.Constant][13] /* ty=Tensor[(924), float64] */, dtype="float64") /* ty=Tensor[(924), float64] */;
    %179 = reshape(%177, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float64] */;
    %180 = reshape(%178, newshape=[924]) /* ty=Tensor[(924), float64] */;
    %181 = @func_3519(%179, %180) /* ty=(Tensor[(7, 15, 16), int16], Tensor[(7, 15, 16), uint64], Tensor[(924), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16], Tensor[(22, 52), float64], Tensor[(390), float64], Tensor[(7, 15, 16), float32]) */;
    %182 = cast(%var_3660, dtype="float32") /* ty=Tensor[(1, 2730), float32] */;
    %183 = cast(%var_3661, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %184 = reshape(%182, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
    %185 = reshape(%183, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %186 = @func_278(%184, %185) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
    %187 = add(%175, %176) /* ty=Tensor[(10, 440), uint32] */;
    %188 = %181.3;
    %189 = %186.2;
    (%187, %188, meta[relay.Constant][12] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][13] /* ty=Tensor[(924), float64] */, %189, %var_3660, %var_3661)
  };
  %190(%var_3674, %var_3675, %var_3676) /* ty=(Tensor[(10, 440), uint32], Tensor[(200), uint64], Tensor[(1680), float64], Tensor[(924), float64], Tensor[(15, 13, 14), bool], Tensor[(1, 2730), float32], Tensor[(1144), float64]) */
}

def @func_3936() -> (Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) {
  %191 = cast(meta[relay.Constant][14] /* ty=Tensor[(13), int8] */, dtype="int8") /* ty=Tensor[(13), int8] */;
  %192 = cast(meta[relay.Constant][15] /* ty=Tensor[(468), int8] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %193 = reshape(%191, newshape=[1, 13, 1]) /* ty=Tensor[(1, 13, 1), int8] */;
  %194 = reshape(%192, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), int8] */;
  %195 = @func_1284(%193, %194) /* ty=(Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) */;
  %196 = @func_2762() /* ty=Tensor[(7, 5, 10), float32] */;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %198 = sigmoid(%197) /* ty=Tensor[(7, 5, 10), float32] */;
  %199 = cast(%196, dtype="int64") /* ty=Tensor[(7, 5, 10), int64] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="int64") /* ty=Tensor[(7, 5, 10), int64] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %203 = cast(%198, dtype="float64") /* ty=Tensor[(7, 5, 10), float64] */;
  %204 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %205 = %195.1;
  %206 = bitwise_xor(%201, %202) /* ty=Tensor[(7, 5, 10), int64] */;
  %207 = log10(%203) /* ty=Tensor[(7, 5, 10), float64] */;
  (%204, %205, meta[relay.Constant][14] /* ty=Tensor[(13), int8] */, meta[relay.Constant][15] /* ty=Tensor[(468), int8] */, %206, %207)
}

def @func_1804(%var_1769: Tensor[(14, 10, 5), float64], %var_1775: Tensor[(440), int16]) -> (Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) {
  %208 = cast(%var_1775, dtype="int16") /* ty=Tensor[(440), int16] */;
  %209 = cast(%var_1775, dtype="int16") /* ty=Tensor[(440), int16] */;
  %210 = reshape(%208, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %211 = reshape(%209, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %212 = @func_1322(%210, %211) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %213 = cast(meta[relay.Constant][16] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %214 = cast(meta[relay.Constant][16] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %215 = reshape(%213, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %216 = reshape(%214, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %217 = @func_556(%215, %216) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %218 = cast(%var_1769, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %219 = tan(%218) /* ty=Tensor[(14, 10, 5), float64] */;
  %220 = cast(%219, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %221 = cast(%219, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %222 = %212.1;
  %223 = %217.3;
  %224 = erf(%220) /* ty=Tensor[(14, 10, 5), float64] */;
  %225 = sqrt(%221) /* ty=Tensor[(14, 10, 5), float64] */;
  (%222, %var_1775, %223, meta[relay.Constant][16] /* ty=Tensor[(200), uint64] */, %224, %225)
}

def @func_3212(%var_3199: Tensor[(1008), float64], %var_3204: Tensor[(110, 2), float64]) -> (Tensor[(7, 5, 10), float32], Tensor[(1008), float64], Tensor[(110, 2), int64]) {
  %226 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %227 = cast(%var_3199, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %228 = reshape(%227, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %229 = @func_145(%228) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %230 = %229.0;
  %231 = cast(%var_3204, dtype="int64") /* ty=Tensor[(110, 2), int64] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(2), int32] */;
  %233 = cast(%230, dtype="int64") /* ty=Tensor[(110, 2), int64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %235 = %226.0;
  %236 = minimum(%233, %234) /* ty=Tensor[(110, 2), int64] */;
  (%235, %var_3199, %236)
}

def @func_3523(%var_3521: Tensor[(7, 15, 16), float64], %var_3522: Tensor[(924), float64]) -> (Tensor[(7, 15, 16), int16], Tensor[(7, 15, 16), uint64], Tensor[(924), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16], Tensor[(22, 52), float64], Tensor[(390), float64], Tensor[(7, 15, 16), float32]) {
  @func_3519(%var_3521, %var_3522) /* ty=(Tensor[(7, 15, 16), int16], Tensor[(7, 15, 16), uint64], Tensor[(924), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16], Tensor[(22, 52), float64], Tensor[(390), float64], Tensor[(7, 15, 16), float32]) */
}

def @func_4127() -> Tensor[(1, 440), int16] {
  %237 = @func_2942() /* ty=(Tensor[(1, 440), int16],) */;
  %237.0
}

def @func_4167() -> Tensor[(7, 5, 10), float32] {
  %238 = fn () -> Tensor[(7, 5, 10), float32] {
    @func_2762() /* ty=Tensor[(7, 5, 10), float32] */
  };
  %238() /* ty=Tensor[(7, 5, 10), float32] */
}

def @func_1961(%var_1959: Tensor[(8, 11, 10), int16], %var_1960: Tensor[(8, 11, 10), int16]) -> (Tensor[(8, 11, 10), bool],) {
  %244 = fn (%var_1950: Tensor[(8, 11, 10), int16], %var_1951: Tensor[(8, 11, 10), int16]) -> (Tensor[(8, 11, 10), bool],) {
    %239 = cast(%var_1951, dtype="bool") /* ty=Tensor[(8, 11, 10), bool] */;
    %240 = shape_of(%var_1950, dtype="int32") /* ty=Tensor[(3), int32] */;
    %241 = cast(%var_1950, dtype="bool") /* ty=Tensor[(8, 11, 10), bool] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %243 = greater_equal(%241, %242) /* ty=Tensor[(8, 11, 10), bool] */;
    (%243,)
  };
  %244(%var_1959, %var_1960) /* ty=(Tensor[(8, 11, 10), bool],) */
}

def @func_4187(%var_4185: Tensor[(2, 9, 1), uint64], %var_4186: Tensor[(2, 9, 3), uint64]) -> Tensor[(2, 9, 3), uint64] {
  @func_4183(%var_4185, %var_4186) /* ty=Tensor[(2, 9, 3), uint64] */
}

def @func_782(%var_780: Tensor[(3, 8, 1), float64]) -> (Tensor[(3, 8, 1), float64],) {
  @func_779(%var_780) /* ty=(Tensor[(3, 8, 1), float64],) */
}

def @func_2457(%var_2455: Tensor[(1144), float64]) -> (Tensor[(9, 3, 15), float64], Tensor[(15, 5, 5), uint16], Tensor[(375), uint16], Tensor[(110, 2), float64], Tensor[(1008), float64], Tensor[(10, 2, 11), uint16], Tensor[(1144), float64]) {
  @func_2454(%var_2455) /* ty=(Tensor[(9, 3, 15), float64], Tensor[(15, 5, 5), uint16], Tensor[(375), uint16], Tensor[(110, 2), float64], Tensor[(1008), float64], Tensor[(10, 2, 11), uint16], Tensor[(1144), float64]) */
}

def @func_281(%var_279: Tensor[(15, 13, 14), float32], %var_280: Tensor[(1144), float64]) -> (Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) {
  %266 = fn (%var_248: Tensor[(15, 13, 14), float32], %var_266: Tensor[(1144), float64]) -> (Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) {
    %245 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 14), float32] */;
    %246 = cast(meta[relay.Constant][18] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %247 = reshape(%246, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
    %248 = @func_170(%247) /* ty=(Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) */;
    %249 = cast(%var_248, dtype="bool") /* ty=Tensor[(15, 13, 14), bool] */;
    %250 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(15, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %251 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 13, 14), float32] */, dtype="bool") /* ty=Tensor[(15, 13, 14), bool] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %253 = cast(%var_248, dtype="int8") /* ty=Tensor[(15, 13, 14), int8] */;
    %254 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(15, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %255 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 13, 14), float32] */, dtype="int8") /* ty=Tensor[(15, 13, 14), int8] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %257 = cast(%var_266, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %258 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(1144), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %259 = cast(meta[relay.Constant][18] /* ty=Tensor[(1144), float64] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?), bool] */;
    %261 = tan(%245) /* ty=Tensor[(15, 13, 14), float32] */;
    %262 = %248.1;
    %263 = greater(%251, %252) /* ty=Tensor[(15, 13, 14), bool] */;
    %264 = multiply(%255, %256) /* ty=Tensor[(15, 13, 14), int8] */;
    %265 = greater(%259, %260) /* ty=Tensor[(1144), bool] */;
    (%261, %262, %263, %264, %265)
  };
  %266(%var_279, %var_280) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */
}

def @func_5347(%var_5335: Tensor[(11, 16, 7), float32]) -> (Tensor[(11, 16, 7), int64],) {
  %267 = cast(%var_5335, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
  %268 = sigmoid(%267) /* ty=Tensor[(11, 16, 7), float32] */;
  %269 = cast(%var_5335, dtype="int64") /* ty=Tensor[(11, 16, 7), int64] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="int64") /* ty=Tensor[(11, 16, 7), int64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %273 = bitwise_xor(%271, %272) /* ty=Tensor[(11, 16, 7), int64] */;
  (%273,)
}

def @func_3148(%var_3146: Tensor[(7, 14, 14), float32]) -> Tensor[(7, 14, 14), float32] {
  @func_3145(%var_3146) /* ty=Tensor[(7, 14, 14), float32] */
}

def @func_4588(%var_4585: Tensor[(1, 924), float64], %var_4586: Tensor[(440), int16], %var_4587: Tensor[(5, 78), float64]) -> (Tensor[(7, 15, 16), float32], Tensor[(2, 13, 15), float64], Tensor[(1, 924), float64], Tensor[(440), int16], Tensor[(5, 78), float64]) {
  %285 = fn (%var_4574: Tensor[(1, 924), float64], %var_4575: Tensor[(440), int16], %var_4576: Tensor[(5, 78), float64]) -> (Tensor[(7, 15, 16), float32], Tensor[(2, 13, 15), float64], Tensor[(1, 924), float64], Tensor[(440), int16], Tensor[(5, 78), float64]) {
    %274 = cast(%var_4574, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
    %275 = cast(%var_4574, dtype="float64") /* ty=Tensor[(1, 924), float64] */;
    %276 = cast(%var_4575, dtype="int16") /* ty=Tensor[(440), int16] */;
    %277 = cast(%var_4576, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
    %278 = reshape(%274, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
    %279 = reshape(%275, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
    %280 = reshape(%276, newshape=[220, 2]) /* ty=Tensor[(220, 2), int16] */;
    %281 = reshape(%277, newshape=[65, 6]) /* ty=Tensor[(65, 6), float64] */;
    %282 = @func_2536(%278, %279, %280, %281) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) */;
    %283 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
    %284 = %282.3;
    (%283, %284, %var_4574, %var_4575, %var_4576)
  };
  %285(%var_4585, %var_4586, %var_4587) /* ty=(Tensor[(7, 15, 16), float32], Tensor[(2, 13, 15), float64], Tensor[(1, 924), float64], Tensor[(440), int16], Tensor[(5, 78), float64]) */
}

def @func_2705(%var_2701: Tensor[(3, 11, 2), uint32], %var_2702: Tensor[(7, 390), float32], %var_2703: Tensor[(1144), float64], %var_2704: Tensor[(440), int16]) -> (Tensor[(3, 11, 2), bool], Tensor[(1144), bool], Tensor[(7, 390), float32], Tensor[(1144), float64], Tensor[(240), float64], Tensor[(440), int16], Tensor[(375), uint8], Tensor[(1680), float64]) {
  @func_2699(%var_2701, %var_2702, %var_2703, %var_2704) /* ty=(Tensor[(3, 11, 2), bool], Tensor[(1144), bool], Tensor[(7, 390), float32], Tensor[(1144), float64], Tensor[(240), float64], Tensor[(440), int16], Tensor[(375), uint8], Tensor[(1680), float64]) */
}

def @func_3845() -> (Tensor[(1, 440), int16],) {
  %286 = @func_2942() /* ty=(Tensor[(1, 440), int16],) */;
  %287 = %286.0;
  (%287,)
}

def @func_4910() -> (Tensor[(7, 5, 10), int64],) {
  %288 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
  %289 = %288.4;
  (%289,)
}

def @func_5237(%var_5233: Tensor[(120, 8), float64], %var_5234: Tensor[(286, 4), float64], %var_5235: Tensor[(700), float64], %var_5236: Tensor[(440), int16]) -> (Tensor[(5, 40), uint64], Tensor[(120, 8), float64], Tensor[(286, 4), int8], Tensor[(7, 15, 16), float32], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16]) {
  @func_5231(%var_5233, %var_5234, %var_5235, %var_5236) /* ty=(Tensor[(5, 40), uint64], Tensor[(120, 8), float64], Tensor[(286, 4), int8], Tensor[(7, 15, 16), float32], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16]) */
}

def @func_2630() -> (Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) {
  %290 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %291 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(7, 5, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 5, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %294 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 40), uint64] */, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %295 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 40), uint64] */, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %296 = reshape(%294, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %297 = reshape(%295, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %298 = @func_556(%296, %297) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %299 = floor_mod(%292, %293) /* ty=Tensor[(7, 5, 10), float32] */;
  %300 = %298.6;
  (%299, %300, meta[relay.Constant][21] /* ty=Tensor[(5, 40), uint64] */)
}

def @func_4360() -> (Tensor[(5, 40), uint64],) {
  %303 = fn () -> (Tensor[(5, 40), uint64],) {
    %301 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
    %302 = %301.2;
    (%302,)
  };
  %303() /* ty=(Tensor[(5, 40), uint64],) */
}

def @func_5308(%var_5306: Tensor[(560), float32], %var_5307: Tensor[(1144), float64]) -> (Tensor[(7, 5, 10), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), uint16], Tensor[(1144), float32]) {
  @func_5304(%var_5306, %var_5307) /* ty=(Tensor[(7, 5, 10), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), uint16], Tensor[(1144), float32]) */
}

def @func_3810(%var_3808: Tensor[(13, 440), uint32], %var_3809: Tensor[(24), float64]) -> (Tensor[(3, 8, 1), float64], Tensor[(24), uint32], Tensor[(13, 440), uint64], Tensor[(22, 52), float32], Tensor[(200), uint64]) {
  %331 = fn (%var_3761: Tensor[(13, 440), uint32], %var_3778: Tensor[(24), float64]) -> (Tensor[(3, 8, 1), float64], Tensor[(24), uint32], Tensor[(13, 440), uint64], Tensor[(22, 52), float32], Tensor[(200), uint64]) {
    %304 = cast(meta[relay.Constant][22] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %305 = reshape(%304, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
    %306 = @func_779(%305) /* ty=(Tensor[(3, 8, 1), float64],) */;
    %307 = cast(%var_3778, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %308 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(24), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %309 = cast(meta[relay.Constant][22] /* ty=Tensor[(24), float64] */, dtype="uint32") /* ty=Tensor[(24), uint32] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %311 = @func_3373() /* ty=(Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) */;
    %312 = %311.0;
    %313 = cast(%var_3761, dtype="bool") /* ty=Tensor[(13, 440), bool] */;
    %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(2), int32] */;
    %315 = cast(%312, dtype="bool") /* ty=Tensor[(13, 440), bool] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %317 = not_equal(%315, %316) /* ty=Tensor[(13, 440), bool] */;
    %318 = cast(%312, dtype="uint64") /* ty=Tensor[(13, 440), uint64] */;
    %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(2), int32] */;
    %320 = cast(%317, dtype="uint64") /* ty=Tensor[(13, 440), uint64] */;
    %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %322 = cast(meta[relay.Constant][23] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
    %323 = logical_xor(%309, %310) /* ty=Tensor[(24), uint32] */;
    %324 = cast(%323, dtype="float64") /* ty=Tensor[(24), float64] */;
    %325 = reshape(%322, newshape=[200]) /* ty=Tensor[(200), uint64] */;
    %326 = reshape(%324, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %327 = @func_3617(%325, %326) /* ty=(Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
    %328 = %306.0;
    %329 = bitwise_and(%320, %321) /* ty=Tensor[(13, 440), uint64] */;
    %330 = %327.0;
    (%328, %323, %329, %330, meta[relay.Constant][23] /* ty=Tensor[(200), uint64] */)
  };
  %331(%var_3808, %var_3809) /* ty=(Tensor[(3, 8, 1), float64], Tensor[(24), uint32], Tensor[(13, 440), uint64], Tensor[(22, 52), float32], Tensor[(200), uint64]) */
}

def @func_2699(%var_2645: Tensor[(3, 11, 2), uint32], %var_2651: Tensor[(7, 390), float32], %var_2652: Tensor[(1144), float64], %var_2660: Tensor[(440), int16]) -> (Tensor[(3, 11, 2), bool], Tensor[(1144), bool], Tensor[(7, 390), float32], Tensor[(1144), float64], Tensor[(240), float64], Tensor[(440), int16], Tensor[(375), uint8], Tensor[(1680), float64]) {
  %332 = cast(%var_2645, dtype="bool") /* ty=Tensor[(3, 11, 2), bool] */;
  %333 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 11, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 11, 2), uint32] */, dtype="bool") /* ty=Tensor[(3, 11, 2), bool] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %336 = cast(%var_2651, dtype="float32") /* ty=Tensor[(7, 390), float32] */;
  %337 = cast(%var_2652, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %338 = reshape(%336, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
  %339 = reshape(%337, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %340 = @func_278(%338, %339) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
  %341 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %342 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %343 = reshape(%341, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %344 = reshape(%342, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %345 = @func_1322(%343, %344) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %346 = cast(meta[relay.Constant][25] /* ty=Tensor[(375), uint16] */, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %347 = reshape(%346, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), uint16] */;
  %348 = @func_1375(%347) /* ty=(Tensor[(15, 5, 5), uint16],) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="uint8") /* ty=Tensor[(15, 5, 5), uint8] */;
  %351 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(375), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %352 = cast(meta[relay.Constant][25] /* ty=Tensor[(375), uint16] */, dtype="uint8") /* ty=Tensor[(375), uint8] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %354 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %355 = cast(%var_2660, dtype="int16") /* ty=Tensor[(440), int16] */;
  %356 = reshape(%354, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %357 = reshape(%355, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %358 = @func_1322(%356, %357) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %359 = less(%334, %335) /* ty=Tensor[(3, 11, 2), bool] */;
  %360 = %340.4;
  %361 = %345.4;
  %362 = bitwise_or(%352, %353) /* ty=Tensor[(375), uint8] */;
  %363 = %358.5;
  (%359, %360, %var_2651, %var_2652, %361, %var_2660, %362, %363)
}

def @func_4226() -> (Tensor[(1, 440), float64],) {
  %367 = fn () -> (Tensor[(1, 440), float64],) {
    %364 = @func_4127() /* ty=Tensor[(1, 440), int16] */;
    %365 = cast(%364, dtype="float64") /* ty=Tensor[(1, 440), float64] */;
    %366 = cosh(%365) /* ty=Tensor[(1, 440), float64] */;
    (%366,)
  };
  %367() /* ty=(Tensor[(1, 440), float64],) */
}

def @func_3938() -> (Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) {
  @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */
}

def @func_4091(%var_4090: Tensor[(468), int32]) -> (Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) {
  %374 = fn (%var_4074: Tensor[(468), int32]) -> (Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) {
    %368 = @func_3373() /* ty=(Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) */;
    %369 = cast(%var_4074, dtype="int32") /* ty=Tensor[(468), int32] */;
    %370 = reshape(%369, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), int32] */;
    %371 = @func_609(%370) /* ty=(Tensor[(12, 13, 3), float32],) */;
    %372 = %368.0;
    %373 = %371.0;
    (%372, %373, %var_4074)
  };
  %374(%var_4090) /* ty=(Tensor[(13, 440), uint32], Tensor[(12, 13, 3), float32], Tensor[(468), int32]) */
}

def @func_4938(%var_4928: Tensor[(10, 440), int16]) -> (Tensor[(10, 440), bool],) {
  %375 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
  %376 = %375.0;
  %377 = cast(%376, dtype="bool") /* ty=Tensor[(1, 440), bool] */;
  %378 = cast(%var_4928, dtype="bool") /* ty=Tensor[(10, 440), bool] */;
  %379 = greater_equal(%377, %378) /* ty=Tensor[(10, 440), bool] */;
  (%379,)
}

def @func_2454(%var_2450: Tensor[(1144), float64]) -> (Tensor[(9, 3, 15), float64], Tensor[(15, 5, 5), uint16], Tensor[(375), uint16], Tensor[(110, 2), float64], Tensor[(1008), float64], Tensor[(10, 2, 11), uint16], Tensor[(1144), float64]) {
  %380 = cast(-5.76965f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %381 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 3, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 3, 15), float64] */;
  %382 = cast(meta[relay.Constant][27] /* ty=Tensor[(375), uint16] */, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %383 = reshape(%382, newshape=[15, 5, 5]) /* ty=Tensor[(15, 5, 5), uint16] */;
  %384 = @func_1375(%383) /* ty=(Tensor[(15, 5, 5), uint16],) */;
  %385 = cast(meta[relay.Constant][28] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %386 = reshape(%385, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %387 = @func_145(%386) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %388 = cast(%var_2450, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %389 = reshape(%388, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %390 = @func_170(%389) /* ty=(Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) */;
  %391 = floor_divide(%380, %381) /* ty=Tensor[(9, 3, 15), float64] */;
  %392 = %384.0;
  %393 = %387.0;
  %394 = %390.0;
  (%391, %392, meta[relay.Constant][27] /* ty=Tensor[(375), uint16] */, %393, meta[relay.Constant][28] /* ty=Tensor[(1008), float64] */, %394, %var_2450)
}

def @func_5304(%var_5275: Tensor[(560), float32], %var_5278: Tensor[(1144), float64]) -> (Tensor[(7, 5, 10), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), uint16], Tensor[(1144), float32]) {
  %395 = cast(%var_5275, dtype="float32") /* ty=Tensor[(560), float32] */;
  %396 = cast(%var_5275, dtype="float32") /* ty=Tensor[(560), float32] */;
  %397 = cast(meta[relay.Constant][29] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %398 = reshape(%395, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %399 = reshape(%396, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
  %400 = reshape(%397, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %401 = @func_508(%398, %399, %400) /* ty=(Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) */;
  %402 = cast(%var_5278, dtype="uint16") /* ty=Tensor[(1144), uint16] */;
  %403 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(1144), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %404 = cast(meta[relay.Constant][29] /* ty=Tensor[(1144), float64] */, dtype="uint16") /* ty=Tensor[(1144), uint16] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %406 = cast(meta[relay.Constant][29] /* ty=Tensor[(1144), float64] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %407 = @func_2762() /* ty=Tensor[(7, 5, 10), float32] */;
  %408 = %401.2;
  %409 = logical_xor(%404, %405) /* ty=Tensor[(1144), uint16] */;
  %410 = acosh(%406) /* ty=Tensor[(1144), float32] */;
  (%407, %408, %var_5275, %409, %410)
}

def @func_3373() -> (Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) {
  %411 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %412 = %411.2;
  %413 = cast(%412, dtype="uint32") /* ty=Tensor[(1, 440), uint32] */;
  %414 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 440), int16] */, dtype="uint32") /* ty=Tensor[(13, 440), uint32] */;
  %415 = cast(%412, dtype="uint16") /* ty=Tensor[(1, 440), uint16] */;
  %416 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 440), int16] */, dtype="uint16") /* ty=Tensor[(13, 440), uint16] */;
  %417 = multiply(%413, %414) /* ty=Tensor[(13, 440), uint32] */;
  %418 = bitwise_xor(%415, %416) /* ty=Tensor[(13, 440), uint16] */;
  (%417, %418)
}

def @func_5074(%var_5072: Tensor[(56, 12), bool]) -> (Tensor[(5, 40), uint64], Tensor[(468), int32], Tensor[(3, 156), int32], Tensor[(3, 16, 14), bool], Tensor[(56, 12), bool]) {
  @func_5071(%var_5072) /* ty=(Tensor[(5, 40), uint64], Tensor[(468), int32], Tensor[(3, 156), int32], Tensor[(3, 16, 14), bool], Tensor[(56, 12), bool]) */
}

def @func_1377(%var_1376: Tensor[(15, 5, 5), uint16]) -> (Tensor[(15, 5, 5), uint16],) {
  %424 = fn (%var_1370: Tensor[(15, 5, 5), uint16]) -> (Tensor[(15, 5, 5), uint16],) {
    %419 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 5, 5), uint16] */, dtype="uint16") /* ty=Tensor[(15, 5, 5), uint16] */;
    %420 = shape_of(%var_1370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(%var_1370, dtype="uint16") /* ty=Tensor[(15, 5, 5), uint16] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %423 = add(%421, %422) /* ty=Tensor[(15, 5, 5), uint16] */;
    (%423,)
  };
  %424(%var_1376) /* ty=(Tensor[(15, 5, 5), uint16],) */
}

def @func_1288(%var_1286: Tensor[(1, 13, 1), int8], %var_1287: Tensor[(9, 13, 4), int8]) -> (Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) {
  @func_1284(%var_1286, %var_1287) /* ty=(Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) */
}

def @func_2850(%var_2848: Tensor[(13), int8], %var_2849: Tensor[(468), int8]) -> (Tensor[(22, 52), float64], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(12, 13, 3), float32]) {
  @func_2846(%var_2848, %var_2849) /* ty=(Tensor[(22, 52), float64], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(12, 13, 3), float32]) */
}

def @func_5467() -> (Tensor[(7, 15, 16), float32],) {
  @func_5465() /* ty=(Tensor[(7, 15, 16), float32],) */
}

def @func_4401() -> Tensor[(1, 440), float64] {
  %425 = @func_4225() /* ty=(Tensor[(1, 440), float64],) */;
  %425.0
}

def @func_3191(%var_3190: Tensor[(1144), float64]) -> (Tensor[(7, 15, 16), float32], Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64]) {
  %433 = fn (%var_3186: Tensor[(1144), float64]) -> (Tensor[(7, 15, 16), float32], Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64]) {
    %426 = cast(meta[relay.Constant][32] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %427 = cast(%var_3186, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %428 = reshape(%426, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
    %429 = reshape(%427, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %430 = @func_278(%428, %429) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
    %431 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
    %432 = %430.4;
    (%431, %432, meta[relay.Constant][32] /* ty=Tensor[(2730), float32] */, %var_3186)
  };
  %433(%var_3190) /* ty=(Tensor[(7, 15, 16), float32], Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64]) */
}

def @func_5231(%var_5177: Tensor[(120, 8), float64], %var_5187: Tensor[(286, 4), float64], %var_5212: Tensor[(700), float64], %var_5213: Tensor[(440), int16]) -> (Tensor[(5, 40), uint64], Tensor[(120, 8), float64], Tensor[(286, 4), int8], Tensor[(7, 15, 16), float32], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16]) {
  %434 = @func_4359() /* ty=(Tensor[(5, 40), uint64],) */;
  %435 = cast(%var_5177, dtype="float64") /* ty=Tensor[(120, 8), float64] */;
  %436 = %434.0;
  %437 = cast(%436, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %438 = reshape(%435, newshape=[16, 4, 15]) /* ty=Tensor[(16, 4, 15), float64] */;
  %439 = reshape(%437, newshape=[200]) /* ty=Tensor[(200), uint64] */;
  %440 = @func_3435(%438, %439) /* ty=(Tensor[(16, 4, 15), float64], Tensor[(1144), bool], Tensor[(910, 3), float32], Tensor[(11, 104), float64], Tensor[(286, 4), float64], Tensor[(200), uint64]) */;
  %441 = %440.4;
  %442 = cast(%var_5187, dtype="int8") /* ty=Tensor[(286, 4), int8] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(2), int32] */;
  %444 = cast(%441, dtype="int8") /* ty=Tensor[(286, 4), int8] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %446 = cast(%var_5212, dtype="float64") /* ty=Tensor[(700), float64] */;
  %447 = cast(%var_5213, dtype="int16") /* ty=Tensor[(440), int16] */;
  %448 = reshape(%446, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %449 = reshape(%447, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %450 = @func_1804(%448, %449) /* ty=(Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) */;
  %451 = bitwise_or(%444, %445) /* ty=Tensor[(286, 4), int8] */;
  %452 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %453 = %450.3;
  (%436, %var_5177, %451, %452, %453, %var_5212, %var_5213)
}

def @func_2799(%var_2796: Tensor[(3, 16, 14), bool], %var_2797: Tensor[(3, 16, 14), bool], %var_2798: Tensor[(3, 16, 14), float32]) -> (Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) {
  @func_2794(%var_2796, %var_2797, %var_2798) /* ty=(Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) */
}

def @func_868(%var_863: Tensor[(10, 9, 3), uint32]) -> Tensor[(10, 9, 3), bool] {
  %454 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 9, 3), uint32] */, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %455 = shape_of(%var_863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_863, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%456, %457) /* ty=Tensor[(10, 9, 3), bool] */
}

def @func_3519(%var_3474: Tensor[(7, 15, 16), float64], %var_3484: Tensor[(924), float64]) -> (Tensor[(7, 15, 16), int16], Tensor[(7, 15, 16), uint64], Tensor[(924), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(440), int16], Tensor[(22, 52), float64], Tensor[(390), float64], Tensor[(7, 15, 16), float32]) {
  %458 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
  %459 = %458.1;
  %460 = cast(%var_3474, dtype="int16") /* ty=Tensor[(7, 15, 16), int16] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="int16") /* ty=Tensor[(7, 15, 16), int16] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %464 = cast(%var_3484, dtype="float64") /* ty=Tensor[(924), float64] */;
  %465 = reshape(%464, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %466 = @func_3300(%465) /* ty=(Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) */;
  %467 = cast(meta[relay.Constant][34] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %468 = cast(meta[relay.Constant][35] /* ty=Tensor[(440), int16] */, dtype="int16") /* ty=Tensor[(440), int16] */;
  %469 = reshape(%467, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %470 = reshape(%468, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %471 = @func_1804(%469, %470) /* ty=(Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) */;
  %472 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %473 = cast(%var_3484, dtype="float64") /* ty=Tensor[(924), float64] */;
  %474 = reshape(%473, newshape=[924]) /* ty=Tensor[(924), float64] */;
  %475 = @func_3300(%474) /* ty=(Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) */;
  %476 = cast(%459, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %477 = tan(%476) /* ty=Tensor[(7, 15, 16), float64] */;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %479 = minimum(%462, %463) /* ty=Tensor[(7, 15, 16), int16] */;
  %480 = %466.0;
  %481 = %471.3;
  %482 = %472.1;
  %483 = %475.7;
  %484 = sigmoid(%478) /* ty=Tensor[(7, 15, 16), float32] */;
  (%479, %480, %var_3484, %481, meta[relay.Constant][34] /* ty=Tensor[(700), float64] */, meta[relay.Constant][35] /* ty=Tensor[(440), int16] */, %482, %483, %484)
}

def @func_2943() -> (Tensor[(1, 440), int16],) {
  %487 = fn () -> (Tensor[(1, 440), int16],) {
    %485 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
    %486 = %485.2;
    (%486,)
  };
  %487() /* ty=(Tensor[(1, 440), int16],) */
}

def @func_4317() -> (Tensor[(5, 40), int8], Tensor[(5, 40), float32]) {
  %497 = fn () -> (Tensor[(5, 40), int8], Tensor[(5, 40), float32]) {
    %488 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
    %489 = %488.2;
    %490 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 40), uint64] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
    %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(2), int32] */;
    %492 = cast(%489, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %494 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 40), uint64] */, dtype="float32") /* ty=Tensor[(5, 40), float32] */;
    %495 = left_shift(%492, %493) /* ty=Tensor[(5, 40), int8] */;
    %496 = atanh(%494) /* ty=Tensor[(5, 40), float32] */;
    (%495, %496)
  };
  %497() /* ty=(Tensor[(5, 40), int8], Tensor[(5, 40), float32]) */
}

def @func_4183(%var_4174: Tensor[(2, 9, 1), uint64], %var_4175: Tensor[(2, 9, 3), uint64]) -> Tensor[(2, 9, 3), uint64] {
  %498 = cast(%var_4174, dtype="uint64") /* ty=Tensor[(2, 9, 1), uint64] */;
  %499 = cast(%var_4175, dtype="uint64") /* ty=Tensor[(2, 9, 3), uint64] */;
  bitwise_and(%498, %499) /* ty=Tensor[(2, 9, 3), uint64] */
}

def @func_148(%var_146: Tensor[(14, 12, 6), float64]) -> (Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) {
  @func_145(%var_146) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */
}

def @func_2753() -> (Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) {
  %500 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %501 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 440), int16] */, dtype="int16") /* ty=Tensor[(1, 440), int16] */;
  %502 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 440), int16] */, dtype="int16") /* ty=Tensor[(1, 440), int16] */;
  %503 = reshape(%501, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %504 = reshape(%502, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %505 = @func_1322(%503, %504) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %506 = %500.1;
  %507 = %505.3;
  (%506, %507, meta[relay.Constant][37] /* ty=Tensor[(1, 440), int16] */)
}

def @func_1284(%var_1263: Tensor[(1, 13, 1), int8], %var_1264: Tensor[(9, 13, 4), int8]) -> (Tensor[(9, 13, 4), int8], Tensor[(9, 13, 4), float32]) {
  %508 = cast(%var_1263, dtype="int8") /* ty=Tensor[(1, 13, 1), int8] */;
  %509 = cast(%var_1264, dtype="int8") /* ty=Tensor[(9, 13, 4), int8] */;
  %510 = cast(%var_1264, dtype="float32") /* ty=Tensor[(9, 13, 4), float32] */;
  %511 = bitwise_and(%508, %509) /* ty=Tensor[(9, 13, 4), int8] */;
  %512 = log2(%510) /* ty=Tensor[(9, 13, 4), float32] */;
  (%511, %512)
}

def @func_5130() -> Tensor[(5, 40), float32] {
  %513 = @func_4316() /* ty=(Tensor[(5, 40), int8], Tensor[(5, 40), float32]) */;
  %513.1
}

def @func_2536(%var_2502: Tensor[(7, 11, 12), float64], %var_2503: Tensor[(7, 11, 12), float64], %var_2511: Tensor[(220, 2), int16], %var_2522: Tensor[(65, 6), float64]) -> (Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) {
  %514 = cast(%var_2503, dtype="bool") /* ty=Tensor[(7, 11, 12), bool] */;
  %515 = shape_of(%var_2502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_2502, dtype="bool") /* ty=Tensor[(7, 11, 12), bool] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %518 = cast(%var_2511, dtype="int16") /* ty=Tensor[(220, 2), int16] */;
  %519 = cast(%var_2511, dtype="int16") /* ty=Tensor[(220, 2), int16] */;
  %520 = reshape(%518, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %521 = reshape(%519, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), int16] */;
  %522 = @func_1322(%520, %521) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */;
  %523 = cast(%var_2522, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %524 = cast(%var_2522, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %525 = reshape(%523, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), float64] */;
  %526 = reshape(%524, newshape=[2, 13, 15]) /* ty=Tensor[(2, 13, 15), float64] */;
  %527 = @func_807(%525, %526) /* ty=(Tensor[(2, 13, 15), float64],) */;
  %528 = cast(meta[relay.Constant][38] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %529 = cast(meta[relay.Constant][38] /* ty=Tensor[(200), uint64] */, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %530 = reshape(%528, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %531 = reshape(%529, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %532 = @func_556(%530, %531) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %533 = greater_equal(%516, %517) /* ty=Tensor[(7, 11, 12), bool] */;
  %534 = %522.5;
  %535 = %527.0;
  %536 = %532.1;
  (%533, %534, %var_2511, %535, %var_2522, %536, meta[relay.Constant][38] /* ty=Tensor[(200), uint64] */)
}

def @func_5450() -> (Tensor[(7, 15, 16), float64],) {
  @func_5448() /* ty=(Tensor[(7, 15, 16), float64],) */
}

def @func_2912(%var_2891: Tensor[(110, 4), int16]) -> (Tensor[(5, 40), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(110, 4), int16], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(560), float32]) {
  %537 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
  %538 = %537.2;
  %539 = cast(%538, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
  %540 = cast(meta[relay.Constant][39] /* ty=Tensor[(700), float64] */, dtype="float64") /* ty=Tensor[(700), float64] */;
  %541 = cast(%var_2891, dtype="int16") /* ty=Tensor[(110, 4), int16] */;
  %542 = reshape(%540, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float64] */;
  %543 = reshape(%541, newshape=[440]) /* ty=Tensor[(440), int16] */;
  %544 = @func_1804(%542, %543) /* ty=(Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) */;
  %545 = cast(meta[relay.Constant][40] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
  %546 = cast(meta[relay.Constant][40] /* ty=Tensor[(52), int8] */, dtype="int8") /* ty=Tensor[(52), int8] */;
  %547 = reshape(%545, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
  %548 = reshape(%546, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), int8] */;
  %549 = cast(%538, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %550 = acos(%539) /* ty=Tensor[(5, 40), float64] */;
  %551 = cast(%550, dtype="uint64") /* ty=Tensor[(5, 40), uint64] */;
  %552 = reshape(%549, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %553 = reshape(%551, newshape=[5, 8, 5]) /* ty=Tensor[(5, 8, 5), uint64] */;
  %554 = @func_556(%552, %553) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */;
  %555 = %544.3;
  %556 = @func_846(%547, %548) /* ty=Tensor[(2, 2, 13), bool] */;
  %557 = %554.5;
  (%550, %555, meta[relay.Constant][39] /* ty=Tensor[(700), float64] */, %var_2891, %556, meta[relay.Constant][40] /* ty=Tensor[(52), int8] */, %557)
}

def @func_4276(%var_4264: Tensor[(2, 4, 8), int64], %var_4270: Tensor[(24), float64]) -> (Tensor[(2, 4, 8), int64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
  %558 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 4, 8), int64] */, dtype="int64") /* ty=Tensor[(2, 4, 8), int64] */;
  %559 = shape_of(%var_4264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%var_4264, dtype="int64") /* ty=Tensor[(2, 4, 8), int64] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %562 = cast(%var_4270, dtype="float64") /* ty=Tensor[(24), float64] */;
  %563 = reshape(%562, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
  %564 = @func_779(%563) /* ty=(Tensor[(3, 8, 1), float64],) */;
  %565 = logical_xor(%560, %561) /* ty=Tensor[(2, 4, 8), int64] */;
  %566 = %564.0;
  (%565, %566, %var_4270)
}

def @func_5465() -> (Tensor[(7, 15, 16), float32],) {
  %567 = @func_5443() /* ty=(Tensor[(1, 440), float64], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(2, 280), float32], Tensor[(7, 15, 16), float32], Tensor[(7, 5, 10), float32], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
  %568 = %567.4;
  (%568,)
}

def @func_3438(%var_3436: Tensor[(16, 4, 15), float64], %var_3437: Tensor[(200), uint64]) -> (Tensor[(16, 4, 15), float64], Tensor[(1144), bool], Tensor[(910, 3), float32], Tensor[(11, 104), float64], Tensor[(286, 4), float64], Tensor[(200), uint64]) {
  %588 = fn (%var_3406: Tensor[(16, 4, 15), float64], %var_3430: Tensor[(200), uint64]) -> (Tensor[(16, 4, 15), float64], Tensor[(1144), bool], Tensor[(910, 3), float32], Tensor[(11, 104), float64], Tensor[(286, 4), float64], Tensor[(200), uint64]) {
    %569 = cast(%var_3406, dtype="float64") /* ty=Tensor[(16, 4, 15), float64] */;
    %570 = sinh(%569) /* ty=Tensor[(16, 4, 15), float64] */;
    %571 = cast(%var_3406, dtype="float64") /* ty=Tensor[(16, 4, 15), float64] */;
    %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(%570, dtype="float64") /* ty=Tensor[(16, 4, 15), float64] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %575 = cast(meta[relay.Constant][42] /* ty=Tensor[(910, 3), float32] */, dtype="float32") /* ty=Tensor[(910, 3), float32] */;
    %576 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 104), float64] */, dtype="float64") /* ty=Tensor[(11, 104), float64] */;
    %577 = reshape(%575, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
    %578 = reshape(%576, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %579 = @func_278(%577, %578) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
    %580 = cast(%var_3430, dtype="uint64") /* ty=Tensor[(200), uint64] */;
    %581 = %579.4;
    %582 = cast(%581, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %583 = reshape(%580, newshape=[5, 40]) /* ty=Tensor[(5, 40), uint64] */;
    %584 = reshape(%582, newshape=[286, 4]) /* ty=Tensor[(286, 4), float64] */;
    %585 = @func_3076(%583, %584) /* ty=(Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) */;
    %586 = maximum(%573, %574) /* ty=Tensor[(16, 4, 15), float64] */;
    %587 = %585.3;
    (%586, %581, meta[relay.Constant][42] /* ty=Tensor[(910, 3), float32] */, meta[relay.Constant][43] /* ty=Tensor[(11, 104), float64] */, %587, %var_3430)
  };
  %588(%var_3436, %var_3437) /* ty=(Tensor[(16, 4, 15), float64], Tensor[(1144), bool], Tensor[(910, 3), float32], Tensor[(11, 104), float64], Tensor[(286, 4), float64], Tensor[(200), uint64]) */
}

def @func_2794(%var_2769: Tensor[(3, 16, 14), bool], %var_2770: Tensor[(3, 16, 14), bool], %var_2779: Tensor[(3, 16, 14), float32]) -> (Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) {
  %589 = cast(%var_2770, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %590 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_2769, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = cast(%var_2770, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %594 = shape_of(%var_2769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_2769, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %597 = floor_divide(%595, %596) /* ty=Tensor[(3, 16, 14), float32] */;
  %598 = cast(%var_2779, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%597, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %602 = logical_or(%591, %592) /* ty=Tensor[(3, 16, 14), bool] */;
  %603 = not_equal(%600, %601) /* ty=Tensor[(3, 16, 14), bool] */;
  (%602, %603)
}

def @func_3145(%var_3142: Tensor[(7, 14, 14), float32]) -> Tensor[(7, 14, 14), float32] {
  %604 = cast(%var_3142, dtype="float32") /* ty=Tensor[(7, 14, 14), float32] */;
  cosh(%604) /* ty=Tensor[(7, 14, 14), float32] */
}

def @func_2542(%var_2538: Tensor[(7, 11, 12), float64], %var_2539: Tensor[(7, 11, 12), float64], %var_2540: Tensor[(220, 2), int16], %var_2541: Tensor[(65, 6), float64]) -> (Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) {
  @func_2536(%var_2538, %var_2539, %var_2540, %var_2541) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) */
}

def @func_4606() -> (Tensor[(1, 440), int16],) {
  @func_4604() /* ty=(Tensor[(1, 440), int16],) */
}

def @func_4152() -> (Tensor[(1, 440), int16],) {
  %607 = fn () -> (Tensor[(1, 440), int16],) {
    %605 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
    %606 = %605.0;
    (%606,)
  };
  %607() /* ty=(Tensor[(1, 440), int16],) */
}

def @func_4563() -> Tensor[(5, 40), int8] {
  %614 = fn () -> Tensor[(5, 40), int8] {
    %608 = @func_4359() /* ty=(Tensor[(5, 40), uint64],) */;
    %609 = %608.0;
    %610 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 40), uint64] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
    %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(2), int32] */;
    %612 = cast(%609, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    minimum(%612, %613) /* ty=Tensor[(5, 40), int8] */
  };
  %614() /* ty=Tensor[(5, 40), int8] */
}

def @func_3620(%var_3618: Tensor[(200), uint64], %var_3619: Tensor[(24), float64]) -> (Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
  %629 = fn (%var_3608: Tensor[(200), uint64], %var_3615: Tensor[(24), float64]) -> (Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) {
    %615 = @func_2753() /* ty=(Tensor[(22, 52), float64], Tensor[(7, 15, 16), float64], Tensor[(1, 440), int16]) */;
    %616 = %615.0;
    %617 = cast(%616, dtype="float32") /* ty=Tensor[(22, 52), float32] */;
    %618 = cast(%var_3608, dtype="uint64") /* ty=Tensor[(200), uint64] */;
    %619 = acos(%617) /* ty=Tensor[(22, 52), float32] */;
    %620 = cast(%619, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
    %621 = reshape(%618, newshape=[5, 40]) /* ty=Tensor[(5, 40), uint64] */;
    %622 = reshape(%620, newshape=[286, 4]) /* ty=Tensor[(286, 4), float64] */;
    %623 = @func_3076(%621, %622) /* ty=(Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) */;
    %624 = cast(%var_3615, dtype="float64") /* ty=Tensor[(24), float64] */;
    %625 = reshape(%624, newshape=[3, 8, 1]) /* ty=Tensor[(3, 8, 1), float64] */;
    %626 = @func_779(%625) /* ty=(Tensor[(3, 8, 1), float64],) */;
    %627 = %623.2;
    %628 = %626.0;
    (%619, %627, %var_3608, %628, %var_3615)
  };
  %629(%var_3618, %var_3619) /* ty=(Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */
}

def @func_559(%var_557: Tensor[(5, 8, 5), uint64], %var_558: Tensor[(5, 8, 5), uint64]) -> (Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) {
  %649 = fn (%var_516: Tensor[(5, 8, 5), uint64], %var_517: Tensor[(5, 8, 5), uint64]) -> (Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) {
    %630 = cast(%var_517, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %631 = shape_of(%var_516, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%var_516, dtype="bool") /* ty=Tensor[(5, 8, 5), bool] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %634 = cast(meta[relay.Constant][45] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %635 = reshape(%634, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
    %636 = @func_37(%635) /* ty=(Tensor[(10, 2, 11), float64],) */;
    %637 = cast(%var_517, dtype="float32") /* ty=Tensor[(5, 8, 5), float32] */;
    %638 = cast(meta[relay.Constant][46] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %639 = cast(meta[relay.Constant][46] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %640 = cast(meta[relay.Constant][47] /* ty=Tensor[(22, 52), float64] */, dtype="float64") /* ty=Tensor[(22, 52), float64] */;
    %641 = reshape(%638, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %642 = reshape(%639, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %643 = reshape(%640, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %644 = @func_508(%641, %642, %643) /* ty=(Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) */;
    %645 = not_equal(%632, %633) /* ty=Tensor[(5, 8, 5), bool] */;
    %646 = %636.0;
    %647 = acos(%637) /* ty=Tensor[(5, 8, 5), float32] */;
    %648 = %644.0;
    (%645, %646, meta[relay.Constant][45] /* ty=Tensor[(220), float64] */, %647, %648, meta[relay.Constant][46] /* ty=Tensor[(560), float32] */, meta[relay.Constant][47] /* ty=Tensor[(22, 52), float64] */)
  };
  %649(%var_557, %var_558) /* ty=(Tensor[(5, 8, 5), bool], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(5, 8, 5), float32], Tensor[(1144), bool], Tensor[(560), float32], Tensor[(22, 52), float64]) */
}

def @func_4846(%var_4844: Tensor[(200), uint64], %var_4845: Tensor[(1144), float64]) -> (Tensor[(10, 9, 3), bool], Tensor[(200), uint64], Tensor[(1144), float64], Tensor[(7, 5, 10), int32]) {
  @func_4842(%var_4844, %var_4845) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(200), uint64], Tensor[(1144), float64], Tensor[(7, 5, 10), int32]) */
}

def @func_871(%var_869: Tensor[(10, 9, 3), uint32]) -> Tensor[(10, 9, 3), bool] {
  @func_868(%var_869) /* ty=Tensor[(10, 9, 3), bool] */
}

def @func_170(%var_155: Tensor[(13, 11, 8), float64]) -> (Tensor[(10, 2, 11), uint16], Tensor[(1008), float64], Tensor[(13, 11, 8), int8]) {
  %650 = cast(meta[relay.Constant][48] /* ty=Tensor[(1008), float64] */, dtype="float64") /* ty=Tensor[(1008), float64] */;
  %651 = reshape(%650, newshape=[14, 12, 6]) /* ty=Tensor[(14, 12, 6), float64] */;
  %652 = @func_145(%651) /* ty=(Tensor[(110, 2), float64], Tensor[(14, 12, 6), bool], Tensor[(10, 2, 11), uint16]) */;
  %653 = cast(%var_155, dtype="float64") /* ty=Tensor[(13, 11, 8), float64] */;
  %654 = asin(%653) /* ty=Tensor[(13, 11, 8), float64] */;
  %655 = cast(%var_155, dtype="int8") /* ty=Tensor[(13, 11, 8), int8] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="int8") /* ty=Tensor[(13, 11, 8), int8] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %659 = %652.2;
  %660 = subtract(%657, %658) /* ty=Tensor[(13, 11, 8), int8] */;
  (%659, meta[relay.Constant][48] /* ty=Tensor[(1008), float64] */, %660)
}

def @func_611(%var_610: Tensor[(12, 13, 3), int32]) -> (Tensor[(12, 13, 3), float32],) {
  %673 = fn (%var_571: Tensor[(12, 13, 3), int32]) -> (Tensor[(12, 13, 3), float32],) {
    %661 = cast(%var_571, dtype="int32") /* ty=Tensor[(12, 13, 3), int32] */;
    %662 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(12, 13, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 13, 3), int32] */, dtype="int32") /* ty=Tensor[(12, 13, 3), int32] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %665 = logical_xor(%663, %664) /* ty=Tensor[(12, 13, 3), int32] */;
    %666 = cast(%665, dtype="float64") /* ty=Tensor[(12, 13, 3), float64] */;
    %667 = shape_of(%var_571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%var_571, dtype="float64") /* ty=Tensor[(12, 13, 3), float64] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %670 = floor_mod(%668, %669) /* ty=Tensor[(12, 13, 3), float64] */;
    %671 = cast(%670, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
    %672 = sigmoid(%671) /* ty=Tensor[(12, 13, 3), float32] */;
    (%672,)
  };
  %673(%var_610) /* ty=(Tensor[(12, 13, 3), float32],) */
}

def @func_4525(%var_4524: Tensor[(200), uint64]) -> (Tensor[(8, 13, 11), float64], Tensor[(8, 13, 11), float64], Tensor[(200), uint64], Tensor[(200), uint64], Tensor[(24), float64], Tensor[(1144), bool], Tensor[(2730), float32]) {
  %692 = fn (%var_4502: Tensor[(200), uint64]) -> (Tensor[(8, 13, 11), float64], Tensor[(8, 13, 11), float64], Tensor[(200), uint64], Tensor[(200), uint64], Tensor[(24), float64], Tensor[(1144), bool], Tensor[(2730), float32]) {
    %674 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 13, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 11), float32] */;
    %675 = sin(%674) /* ty=Tensor[(8, 13, 11), float32] */;
    %676 = cast(%675, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
    %677 = cast(%675, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
    %678 = cast(%var_4502, dtype="uint64") /* ty=Tensor[(200), uint64] */;
    %679 = cast(meta[relay.Constant][51] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %680 = reshape(%678, newshape=[200]) /* ty=Tensor[(200), uint64] */;
    %681 = reshape(%679, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %682 = @func_3617(%680, %681) /* ty=(Tensor[(22, 52), float32], Tensor[(2730), float32], Tensor[(200), uint64], Tensor[(3, 8, 1), float64], Tensor[(24), float64]) */;
    %683 = cast(meta[relay.Constant][52] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %684 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 13, 11), float32] */, dtype="float64") /* ty=Tensor[(8, 13, 11), float64] */;
    %685 = reshape(%683, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
    %686 = reshape(%684, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %687 = @func_278(%685, %686) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
    %688 = sinh(%676) /* ty=Tensor[(8, 13, 11), float64] */;
    %689 = acosh(%677) /* ty=Tensor[(8, 13, 11), float64] */;
    %690 = %682.2;
    %691 = %687.4;
    (%688, %689, %690, %var_4502, meta[relay.Constant][51] /* ty=Tensor[(24), float64] */, %691, meta[relay.Constant][52] /* ty=Tensor[(2730), float32] */)
  };
  %692(%var_4524) /* ty=(Tensor[(8, 13, 11), float64], Tensor[(8, 13, 11), float64], Tensor[(200), uint64], Tensor[(200), uint64], Tensor[(24), float64], Tensor[(1144), bool], Tensor[(2730), float32]) */
}

def @func_1808(%var_1806: Tensor[(14, 10, 5), float64], %var_1807: Tensor[(440), int16]) -> (Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) {
  @func_1804(%var_1806, %var_1807) /* ty=(Tensor[(14, 12, 6), bool], Tensor[(440), int16], Tensor[(5, 8, 5), float32], Tensor[(200), uint64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), float64]) */
}

def @func_4470(%var_4469: Tensor[(220), float64]) -> (Tensor[(7, 5, 10), int64], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(1, 440), int16], Tensor[(52), int8], Tensor[(1, 440), int16], Tensor[(7, 15, 16), bool], Tensor[(1680), float32]) {
  %712 = fn (%var_4425: Tensor[(220), float64]) -> (Tensor[(7, 5, 10), int64], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(1, 440), int16], Tensor[(52), int8], Tensor[(1, 440), int16], Tensor[(7, 15, 16), bool], Tensor[(1680), float32]) {
    %693 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
    %694 = cast(%var_4425, dtype="float64") /* ty=Tensor[(220), float64] */;
    %695 = reshape(%694, newshape=[10, 2, 11]) /* ty=Tensor[(10, 2, 11), float64] */;
    %696 = @func_37(%695) /* ty=(Tensor[(10, 2, 11), float64],) */;
    %697 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
    %698 = %697.0;
    %699 = cast(%698, dtype="int16") /* ty=Tensor[(1, 440), int16] */;
    %700 = reshape(%699, newshape=[110, 4]) /* ty=Tensor[(110, 4), int16] */;
    %701 = @func_2912(%700) /* ty=(Tensor[(5, 40), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(110, 4), int16], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(560), float32]) */;
    %702 = cast(meta[relay.Constant][53] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %703 = reshape(%702, newshape=[7, 15, 16]) /* ty=Tensor[(7, 15, 16), float32] */;
    %704 = @func_3987(%703) /* ty=(Tensor[(7, 15, 16), bool], Tensor[(10, 2, 11), uint16], Tensor[(1144, 1), float64]) */;
    %705 = cast(meta[relay.Constant][53] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %706 = %693.4;
    %707 = %696.0;
    %708 = %701.5;
    %709 = @func_4127() /* ty=Tensor[(1, 440), int16] */;
    %710 = %704.0;
    %711 = asinh(%705) /* ty=Tensor[(1680), float32] */;
    (%706, %707, %var_4425, %698, %708, %709, %710, %711)
  };
  %712(%var_4469) /* ty=(Tensor[(7, 5, 10), int64], Tensor[(10, 2, 11), float64], Tensor[(220), float64], Tensor[(1, 440), int16], Tensor[(52), int8], Tensor[(1, 440), int16], Tensor[(7, 15, 16), bool], Tensor[(1680), float32]) */
}

def @func_4842(%var_4809: Tensor[(200), uint64], %var_4810: Tensor[(1144), float64]) -> (Tensor[(10, 9, 3), bool], Tensor[(200), uint64], Tensor[(1144), float64], Tensor[(7, 5, 10), int32]) {
  %713 = cast(%var_4809, dtype="uint64") /* ty=Tensor[(200), uint64] */;
  %714 = cast(%var_4810, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %715 = reshape(%713, newshape=[5, 40]) /* ty=Tensor[(5, 40), uint64] */;
  %716 = reshape(%714, newshape=[286, 4]) /* ty=Tensor[(286, 4), float64] */;
  %717 = @func_3076(%715, %716) /* ty=(Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) */;
  %718 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
  %719 = %718.4;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(7, 5, 10), float64] */;
  %721 = atanh(%720) /* ty=Tensor[(7, 5, 10), float64] */;
  %722 = cast(%719, dtype="int32") /* ty=Tensor[(7, 5, 10), int32] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="int32") /* ty=Tensor[(7, 5, 10), int32] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %726 = %717.4;
  %727 = maximum(%724, %725) /* ty=Tensor[(7, 5, 10), int32] */;
  (%726, %var_4809, %var_4810, %727)
}

def @func_675(%var_673: Tensor[(1, 15, 16), float64], %var_674: Tensor[(7, 15, 16), float64]) -> (Tensor[(7, 15, 16), float64],) {
  %731 = fn (%var_667: Tensor[(1, 15, 16), float64], %var_668: Tensor[(7, 15, 16), float64]) -> (Tensor[(7, 15, 16), float64],) {
    %728 = cast(%var_667, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    %729 = cast(%var_668, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
    %730 = power(%728, %729) /* ty=Tensor[(7, 15, 16), float64] */;
    (%730,)
  };
  %731(%var_673, %var_674) /* ty=(Tensor[(7, 15, 16), float64],) */
}

def @func_2915(%var_2913: Tensor[(110, 4), int16]) -> (Tensor[(5, 40), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(110, 4), int16], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(560), float32]) {
  @func_2912(%var_2913) /* ty=(Tensor[(5, 40), float64], Tensor[(200), uint64], Tensor[(700), float64], Tensor[(110, 4), int16], Tensor[(2, 2, 13), bool], Tensor[(52), int8], Tensor[(560), float32]) */
}

def @func_3400(%var_3398: Tensor[(9, 12, 12), float64]) -> Tensor[(9, 12, 12), float64] {
  @func_3397(%var_3398) /* ty=Tensor[(9, 12, 12), float64] */
}

def @func_4604() -> (Tensor[(1, 440), int16],) {
  %732 = @func_3845() /* ty=(Tensor[(1, 440), int16],) */;
  %733 = %732.0;
  (%733,)
}

def @func_3300(%var_3275: Tensor[(924), float64]) -> (Tensor[(7, 15, 16), uint64], Tensor[(1144), bool], Tensor[(7, 15, 16), float32], Tensor[(7, 15, 16), float64], Tensor[(2, 13, 15), float64], Tensor[(924), float64], Tensor[(440), int16], Tensor[(390), float64], Tensor[(1144), float32], Tensor[(7, 15, 16), float64]) {
  %734 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %736 = cosh(%735) /* ty=Tensor[(7, 15, 16), float64] */;
  %737 = cast(%734, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="uint64") /* ty=Tensor[(7, 15, 16), uint64] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %741 = cast(meta[relay.Constant][54] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %742 = reshape(%741, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %743 = @func_3189(%742) /* ty=(Tensor[(7, 15, 16), float32], Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64]) */;
  %744 = cast(%734, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %745 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%736, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %748 = cast(%736, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %749 = cast(%var_3275, dtype="float64") /* ty=Tensor[(924), float64] */;
  %750 = cast(%var_3275, dtype="float64") /* ty=Tensor[(924), float64] */;
  %751 = cast(meta[relay.Constant][55] /* ty=Tensor[(440), int16] */, dtype="int16") /* ty=Tensor[(440), int16] */;
  %752 = cast(meta[relay.Constant][56] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %753 = reshape(%749, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %754 = reshape(%750, newshape=[7, 11, 12]) /* ty=Tensor[(7, 11, 12), float64] */;
  %755 = reshape(%751, newshape=[220, 2]) /* ty=Tensor[(220, 2), int16] */;
  %756 = reshape(%752, newshape=[65, 6]) /* ty=Tensor[(65, 6), float64] */;
  %757 = @func_2536(%753, %754, %755, %756) /* ty=(Tensor[(7, 11, 12), bool], Tensor[(1680), float64], Tensor[(220, 2), int16], Tensor[(2, 13, 15), float64], Tensor[(65, 6), float64], Tensor[(10, 2, 11), float64], Tensor[(200), uint64]) */;
  %758 = cast(meta[relay.Constant][54] /* ty=Tensor[(1144), float64] */, dtype="float32") /* ty=Tensor[(1144), float32] */;
  %759 = cast(%736, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %760 = log(%759) /* ty=Tensor[(7, 15, 16), float64] */;
  %761 = cast(%760, dtype="float32") /* ty=Tensor[(7, 15, 16), float32] */;
  %762 = sinh(%761) /* ty=Tensor[(7, 15, 16), float32] */;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(7, 15, 16), float64] */;
  %764 = bitwise_and(%739, %740) /* ty=Tensor[(7, 15, 16), uint64] */;
  %765 = %743.1;
  %766 = floor_divide(%746, %747) /* ty=Tensor[(7, 15, 16), float32] */;
  %767 = log2(%748) /* ty=Tensor[(7, 15, 16), float64] */;
  %768 = %757.3;
  %769 = cosh(%758) /* ty=Tensor[(1144), float32] */;
  %770 = erf(%763) /* ty=Tensor[(7, 15, 16), float64] */;
  (%764, %765, %766, %767, %768, %var_3275, meta[relay.Constant][55] /* ty=Tensor[(440), int16] */, meta[relay.Constant][56] /* ty=Tensor[(390), float64] */, %769, %770)
}

def @func_3348(%var_3347: Tensor[(560), float32]) -> (Tensor[(7, 15, 16), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), float64]) {
  %780 = fn (%var_3340: Tensor[(560), float32]) -> (Tensor[(7, 15, 16), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), float64]) {
    %771 = cast(%var_3340, dtype="float32") /* ty=Tensor[(560), float32] */;
    %772 = cast(%var_3340, dtype="float32") /* ty=Tensor[(560), float32] */;
    %773 = cast(meta[relay.Constant][57] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %774 = reshape(%771, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %775 = reshape(%772, newshape=[14, 4, 10]) /* ty=Tensor[(14, 4, 10), float32] */;
    %776 = reshape(%773, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %777 = @func_508(%774, %775, %776) /* ty=(Tensor[(1144), bool], Tensor[(2730), float32], Tensor[(1144), float64], Tensor[(14, 4, 10), float64]) */;
    %778 = @func_2997() /* ty=Tensor[(7, 15, 16), float32] */;
    %779 = %777.2;
    (%778, %779, %var_3340, meta[relay.Constant][57] /* ty=Tensor[(1144), float64] */)
  };
  %780(%var_3347) /* ty=(Tensor[(7, 15, 16), float32], Tensor[(1144), float64], Tensor[(560), float32], Tensor[(1144), float64]) */
}

def @func_4403() -> Tensor[(1, 440), float64] {
  @func_4401() /* ty=Tensor[(1, 440), float64] */
}

def @func_3375() -> (Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) {
  @func_3373() /* ty=(Tensor[(13, 440), uint32], Tensor[(13, 440), uint16]) */
}

def @func_2999() -> Tensor[(7, 15, 16), float32] {
  @func_2997() /* ty=Tensor[(7, 15, 16), float32] */
}

def @main(%var_5500: Tensor[(2, 336), bool]) -> (Tensor[(3, 440), bool], Tensor[(2, 336), bool], Tensor[(2, 336), bool], Tensor[(5, 40), float32], Tensor[(3, 440), bool]) {
  %781 = @func_3847() /* ty=(Tensor[(1, 440), int16],) */;
  %782 = %781.0;
  %783 = cast(%782, dtype="bool") /* ty=Tensor[(1, 440), bool] */;
  %784 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 440), int16] */, dtype="bool") /* ty=Tensor[(3, 440), bool] */;
  %785 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %786 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %787 = cast(%var_5500, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %788 = reshape(%785, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %789 = reshape(%786, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), bool] */;
  %790 = reshape(%787, newshape=[3, 16, 14]) /* ty=Tensor[(3, 16, 14), float32] */;
  %791 = @func_2799(%788, %789, %790) /* ty=(Tensor[(3, 16, 14), bool], Tensor[(3, 16, 14), bool]) */;
  %792 = %791.1;
  %793 = cast(%792, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %794 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(2), int32] */;
  %795 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %797 = cast(%792, dtype="bool") /* ty=Tensor[(3, 16, 14), bool] */;
  %798 = shape_of(%var_5500, dtype="int32") /* ty=Tensor[(2), int32] */;
  %799 = cast(%var_5500, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %801 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 440), int16] */, dtype="bool") /* ty=Tensor[(3, 440), bool] */;
  %802 = cast(%782, dtype="bool") /* ty=Tensor[(1, 440), bool] */;
  %803 = greater(%783, %784) /* ty=Tensor[(3, 440), bool] */;
  %804 = less_equal(%795, %796) /* ty=Tensor[(2, 336), bool] */;
  %805 = greater(%799, %800) /* ty=Tensor[(2, 336), bool] */;
  %806 = @func_5130() /* ty=Tensor[(5, 40), float32] */;
  %807 = greater_equal(%801, %802) /* ty=Tensor[(3, 440), bool] */;
  (%803, %804, %805, %806, %807)
}

def @func_3989(%var_3988: Tensor[(7, 15, 16), float32]) -> (Tensor[(7, 15, 16), bool], Tensor[(10, 2, 11), uint16], Tensor[(1144, 1), float64]) {
  %819 = fn (%var_3974: Tensor[(7, 15, 16), float32]) -> (Tensor[(7, 15, 16), bool], Tensor[(10, 2, 11), uint16], Tensor[(1144, 1), float64]) {
    %808 = @func_3936() /* ty=(Tensor[(7, 15, 16), float32], Tensor[(9, 13, 4), float32], Tensor[(13), int8], Tensor[(468), int8], Tensor[(7, 5, 10), int64], Tensor[(7, 5, 10), float64]) */;
    %809 = %808.0;
    %810 = cast(%var_3974, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
    %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(%809, dtype="bool") /* ty=Tensor[(7, 15, 16), bool] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %814 = cast(meta[relay.Constant][59] /* ty=Tensor[(1144, 1), float64] */, dtype="float64") /* ty=Tensor[(1144, 1), float64] */;
    %815 = reshape(%814, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %816 = @func_2454(%815) /* ty=(Tensor[(9, 3, 15), float64], Tensor[(15, 5, 5), uint16], Tensor[(375), uint16], Tensor[(110, 2), float64], Tensor[(1008), float64], Tensor[(10, 2, 11), uint16], Tensor[(1144), float64]) */;
    %817 = greater_equal(%812, %813) /* ty=Tensor[(7, 15, 16), bool] */;
    %818 = %816.5;
    (%817, %818, meta[relay.Constant][59] /* ty=Tensor[(1144, 1), float64] */)
  };
  %819(%var_3988) /* ty=(Tensor[(7, 15, 16), bool], Tensor[(10, 2, 11), uint16], Tensor[(1144, 1), float64]) */
}

def @func_3079(%var_3077: Tensor[(5, 40), uint64], %var_3078: Tensor[(286, 4), float64]) -> (Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) {
  %836 = fn (%var_3055: Tensor[(5, 40), uint64], %var_3066: Tensor[(286, 4), float64]) -> (Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) {
    %820 = @func_2630() /* ty=(Tensor[(7, 5, 10), float32], Tensor[(22, 52), float64], Tensor[(5, 40), uint64]) */;
    %821 = %820.2;
    %822 = cast(%var_3055, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
    %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(2), int32] */;
    %824 = cast(%821, dtype="int64") /* ty=Tensor[(5, 40), int64] */;
    %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %826 = cast(meta[relay.Constant][60] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %827 = cast(%var_3066, dtype="float64") /* ty=Tensor[(286, 4), float64] */;
    %828 = reshape(%826, newshape=[15, 13, 14]) /* ty=Tensor[(15, 13, 14), float32] */;
    %829 = reshape(%827, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %830 = @func_278(%828, %829) /* ty=(Tensor[(15, 13, 14), float32], Tensor[(1008), float64], Tensor[(15, 13, 14), bool], Tensor[(15, 13, 14), int8], Tensor[(1144), bool]) */;
    %831 = cast(meta[relay.Constant][61] /* ty=Tensor[(270, 1), uint32] */, dtype="uint32") /* ty=Tensor[(270, 1), uint32] */;
    %832 = reshape(%831, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), uint32] */;
    %833 = subtract(%824, %825) /* ty=Tensor[(5, 40), int64] */;
    %834 = %830.2;
    %835 = @func_868(%832) /* ty=Tensor[(10, 9, 3), bool] */;
    (%833, %834, meta[relay.Constant][60] /* ty=Tensor[(2730), float32] */, %var_3066, %835, meta[relay.Constant][61] /* ty=Tensor[(270, 1), uint32] */)
  };
  %836(%var_3077, %var_3078) /* ty=(Tensor[(5, 40), int64], Tensor[(15, 13, 14), bool], Tensor[(2730), float32], Tensor[(286, 4), float64], Tensor[(10, 9, 3), bool], Tensor[(270, 1), uint32]) */
}

def @func_2612(%var_2599: Tensor[(7, 13, 4), uint32], %var_2600: Tensor[(7, 13, 4), uint32]) -> (Tensor[(7, 13, 4), uint32],) {
  %837 = cast(%var_2600, dtype="uint32") /* ty=Tensor[(7, 13, 4), uint32] */;
  %838 = shape_of(%var_2599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%var_2599, dtype="uint32") /* ty=Tensor[(7, 13, 4), uint32] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %841 = bitwise_and(%839, %840) /* ty=Tensor[(7, 13, 4), uint32] */;
  (%841,)
}

def @func_1326(%var_1324: Tensor[(5, 11, 8), int16], %var_1325: Tensor[(5, 11, 8), int16]) -> (Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) {
  @func_1322(%var_1324, %var_1325) /* ty=(Tensor[(5, 11, 8), int16], Tensor[(14, 12, 6), bool], Tensor[(1008), float64], Tensor[(7, 15, 16), float64], Tensor[(240), float64], Tensor[(1680), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen44/build/output.py", line 1734, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:46:03] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

