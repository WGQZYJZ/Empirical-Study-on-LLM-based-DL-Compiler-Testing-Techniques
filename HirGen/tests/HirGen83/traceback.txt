==========mod==========
#[version = "0.0.5"]
def @func_1390() -> (Tensor[(14, 14, 16), uint64],) {
  %0 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
  (%0,)
}

def @func_1736() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) {
  %1 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %2 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %4 = reshape(%3, newshape=[1664]) /* ty=Tensor[(1664), uint16] */;
  %5 = @func_1034(%4) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool], Tensor[(1664), float64]) */;
  %6 = %5.2;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1664), uint16] */, dtype="int32") /* ty=Tensor[(1664), int32] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(1), int32] */;
  %9 = cast(%6, dtype="int32") /* ty=Tensor[(1664), int32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?), int32] */;
  %11 = %1.0;
  %12 = %2.0;
  %13 = bitwise_xor(%9, %10) /* ty=Tensor[(1664), int32] */;
  (%11, %12, %13)
}

def @func_4057(%var_4045: Tensor[(14, 14, 16), float32]) -> (Tensor[(14, 14, 16), float64],) {
  %14 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
  %15 = %14.0;
  %16 = cast(%var_4045, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %20 = maximum(%18, %19) /* ty=Tensor[(14, 14, 16), float64] */;
  (%20,)
}

def @func_2675() -> (Tensor[(14, 14, 16), uint64],) {
  %21 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %22 = %21.0;
  (%22,)
}

def @func_2906(%var_2902: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), float32], Tensor[(6, 5, 2), float64], Tensor[(1, 60), bool], Tensor[(3600), float64]) {
  %23 = @func_2571() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */;
  %24 = %23.1;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %29 = reshape(%26, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %30 = reshape(%27, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %31 = reshape(%28, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %32 = @func_510(%29, %30, %31) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
  %33 = cast(%var_2902, dtype="float64") /* ty=Tensor[(3600), float64] */;
  %34 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3600), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(3600), int16] */, dtype="float64") /* ty=Tensor[(3600), float64] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?), float64] */;
  %37 = exp(%25) /* ty=Tensor[(14, 14, 16), float32] */;
  %38 = %32.0;
  %39 = floor_mod(%35, %36) /* ty=Tensor[(3600), float64] */;
  (%37, %38, meta[relay.Constant][1] /* ty=Tensor[(1, 60), bool] */, %39)
}

def @func_4117(%var_4106: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %40 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %41 = %40.0;
  %42 = cast(%var_4106, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %46 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
  %47 = bitwise_xor(%44, %45) /* ty=Tensor[(14, 14, 16), uint64] */;
  %48 = %46.0;
  (%47, %48)
}

def @func_3843() -> (Tensor[(14, 14, 16), uint64],) {
  %49 = @func_3601() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %50 = %49.0;
  (%50,)
}

def @func_3572() -> (Tensor[(14, 14, 16), uint64],) {
  %51 = @func_2199() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */;
  %52 = %51.3;
  (%52,)
}

def @func_130(%var_97: Tensor[(14, 10, 4), int8], %var_110: Tensor[(2, 1800), int16]) -> (Tensor[(15, 16, 15), bool], Tensor[(2, 1800), float64], Tensor[(14, 10, 4), float32]) {
  %53 = cast(%var_110, dtype="int16") /* ty=Tensor[(2, 1800), int16] */;
  %54 = cast(%var_110, dtype="int16") /* ty=Tensor[(2, 1800), int16] */;
  %55 = reshape(%53, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %56 = reshape(%54, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %57 = cast(%var_110, dtype="float64") /* ty=Tensor[(2, 1800), float64] */;
  %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 10, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 10, 4), int8] */;
  %59 = shape_of(%var_97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_97, dtype="int8") /* ty=Tensor[(14, 10, 4), int8] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %62 = multiply(%60, %61) /* ty=Tensor[(14, 10, 4), int8] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(14, 10, 4), float32] */;
  %64 = sqrt(%63) /* ty=Tensor[(14, 10, 4), float32] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(14, 10, 4), float32] */;
  %66 = @func_89(%55, %56) /* ty=Tensor[(15, 16, 15), bool] */;
  %67 = atanh(%57) /* ty=Tensor[(2, 1800), float64] */;
  %68 = acosh(%65) /* ty=Tensor[(14, 10, 4), float32] */;
  (%66, %67, %68)
}

def @func_1948() -> (Tensor[(14, 14, 16), uint64],) {
  %69 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %70 = %69.1;
  (%70,)
}

def @func_3116() -> (Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) {
  %71 = @func_2312() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(96, 1), float32] */, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %73 = reshape(%72, newshape=[8, 6, 2]) /* ty=Tensor[(8, 6, 2), float32] */;
  %74 = %71.0;
  %75 = @func_1251(%73) /* ty=Tensor[(8, 6, 2), float32] */;
  (%74, %75, meta[relay.Constant][4] /* ty=Tensor[(96, 1), float32] */)
}

def @func_3154(%var_3144: Tensor[(3600), int16]) -> (Tensor[(1664), int32], Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16], Tensor[(10, 10, 8), uint32], Tensor[(800), uint32]) {
  %76 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %77 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %78 = cast(%var_3144, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %79 = cast(%var_3144, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %80 = reshape(%78, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %81 = reshape(%79, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %82 = cast(meta[relay.Constant][5] /* ty=Tensor[(800), uint32] */, dtype="uint32") /* ty=Tensor[(800), uint32] */;
  %83 = reshape(%82, newshape=[10, 10, 8]) /* ty=Tensor[(10, 10, 8), uint32] */;
  %84 = %76.2;
  %85 = %77.0;
  %86 = @func_89(%80, %81) /* ty=Tensor[(15, 16, 15), bool] */;
  %87 = @func_1936(%83) /* ty=Tensor[(10, 10, 8), uint32] */;
  (%84, %85, %86, %var_3144, %87, meta[relay.Constant][5] /* ty=Tensor[(800), uint32] */)
}

def @func_3670() -> Tensor[(14, 14, 16), uint64] {
  %88 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
  %88.1
}

def @func_3601() -> (Tensor[(14, 14, 16), uint64],) {
  %89 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %90 = %89.0;
  (%90,)
}

def @func_5907(%var_5898: Tensor[(8, 14, 3), float32]) -> (Tensor[(8, 14, 3), float32],) {
  %91 = cast(%var_5898, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %92 = tan(%91) /* ty=Tensor[(8, 14, 3), float32] */;
  (%92,)
}

def @func_3183(%var_3178: Tensor[(2, 16, 5), float32]) -> (Tensor[(2, 16, 5), float32],) {
  %93 = cast(%var_3178, dtype="float32") /* ty=Tensor[(2, 16, 5), float32] */;
  %94 = acosh(%93) /* ty=Tensor[(2, 16, 5), float32] */;
  (%94,)
}

def @func_403(%var_390: Tensor[(16, 15, 5), uint8], %var_391: Tensor[(16, 15, 5), uint8]) -> (Tensor[(16, 15, 5), uint8], Tensor[(16, 15, 5), float32]) {
  %95 = cast(%var_391, dtype="uint8") /* ty=Tensor[(16, 15, 5), uint8] */;
  %96 = shape_of(%var_390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_390, dtype="uint8") /* ty=Tensor[(16, 15, 5), uint8] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %99 = cast(%var_391, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %100 = bitwise_and(%97, %98) /* ty=Tensor[(16, 15, 5), uint8] */;
  %101 = acosh(%99) /* ty=Tensor[(16, 15, 5), float32] */;
  (%100, %101)
}

def @func_1494() -> Tensor[(14, 14, 16), uint64] {
  %102 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %102.0
}

def @func_958(%var_931: int64) -> (Tensor[(15, 13, 15), uint32], Tensor[(15, 16, 15), bool], Tensor[(600, 6), int16], Tensor[(16, 15, 5), float32], Tensor[(1200), uint8]) {
  %103 = cast(%var_931, dtype="int64") /* ty=int64 */;
  %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 13, 15), int64] */, dtype="int64") /* ty=Tensor[(15, 13, 15), int64] */;
  %105 = logical_xor(%103, %104) /* ty=Tensor[(15, 13, 15), int64] */;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 13, 15), int64] */, dtype="uint32") /* ty=Tensor[(15, 13, 15), uint32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="uint32") /* ty=Tensor[(15, 13, 15), uint32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %111 = cast(meta[relay.Constant][7] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %112 = reshape(%110, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %113 = reshape(%111, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(1200), uint8] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(1200), uint8] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
  %116 = reshape(%114, newshape=[16, 15, 5]) /* ty=Tensor[(16, 15, 5), uint8] */;
  %117 = reshape(%115, newshape=[16, 15, 5]) /* ty=Tensor[(16, 15, 5), uint8] */;
  %118 = @func_403(%116, %117) /* ty=(Tensor[(16, 15, 5), uint8], Tensor[(16, 15, 5), float32]) */;
  %119 = minimum(%108, %109) /* ty=Tensor[(15, 13, 15), uint32] */;
  %120 = @func_89(%112, %113) /* ty=Tensor[(15, 16, 15), bool] */;
  %121 = %118.1;
  (%119, %120, meta[relay.Constant][7] /* ty=Tensor[(600, 6), int16] */, %121, meta[relay.Constant][8] /* ty=Tensor[(1200), uint8] */)
}

def @func_1220(%var_1171: Tensor[(13, 14, 9), float32]) -> (Tensor[(13, 14, 9), float64], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(13, 14, 9), bool]) {
  %122 = cast(%var_1171, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %123 = sqrt(%122) /* ty=Tensor[(13, 14, 9), float32] */;
  %124 = cast(%123, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %125 = erf(%124) /* ty=Tensor[(13, 14, 9), float32] */;
  %126 = cast(%125, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %128 = reshape(%127, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %129 = cast(%123, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %130 = log10(%129) /* ty=Tensor[(13, 14, 9), float64] */;
  %131 = cast(%125, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = log2(%126) /* ty=Tensor[(13, 14, 9), float64] */;
  %136 = @func_755(%128) /* ty=Tensor[(16, 13, 8), bool] */;
  %137 = equal(%133, %134) /* ty=Tensor[(13, 14, 9), bool] */;
  (%135, %136, meta[relay.Constant][9] /* ty=Tensor[(1664), uint16] */, %137)
}

def @func_2370() -> Tensor[(14, 14, 16), float32] {
  %138 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %138.1
}

def @func_5418() -> Tensor[(14, 14, 16), bool] {
  %139 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
  %140 = %139.1;
  %141 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%143, %144) /* ty=Tensor[(14, 14, 16), bool] */
}

def @func_1704() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) {
  %145 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %148 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  %149 = rsqrt(%147) /* ty=Tensor[(14, 14, 16), float32] */;
  (%148, %149)
}

def @func_1863(%var_1824: Tensor[(9, 3, 9), float32], %var_1833: Tensor[(600, 6), int16], %var_1841: Tensor[(416, 4), uint16], %var_1854: Tensor[(600, 6), int16]) -> (Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) {
  %150 = cast(%var_1824, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %152 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %153 = cast(meta[relay.Constant][12] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %154 = reshape(%151, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %155 = reshape(%152, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %156 = reshape(%153, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %157 = @func_510(%154, %155, %156) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
  %158 = cast(%var_1833, dtype="float32") /* ty=Tensor[(600, 6), float32] */;
  %159 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(600, 6), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(600, 6), int16] */, dtype="float32") /* ty=Tensor[(600, 6), float32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %162 = cast(%var_1841, dtype="uint16") /* ty=Tensor[(416, 4), uint16] */;
  %163 = reshape(%162, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %164 = cast(%var_1854, dtype="uint32") /* ty=Tensor[(600, 6), uint32] */;
  %165 = shape_of(%var_1833, dtype="int32") /* ty=Tensor[(2), int32] */;
  %166 = cast(%var_1833, dtype="uint32") /* ty=Tensor[(600, 6), uint32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %168 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %170 = add(%166, %167) /* ty=Tensor[(600, 6), uint32] */;
  %171 = cast(%170, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %172 = reshape(%168, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %173 = reshape(%169, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %174 = reshape(%171, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %175 = @func_510(%172, %173, %174) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
  %176 = cosh(%150) /* ty=Tensor[(9, 3, 9), float32] */;
  %177 = %157.1;
  %178 = subtract(%160, %161) /* ty=Tensor[(600, 6), float32] */;
  %179 = @func_755(%163) /* ty=Tensor[(16, 13, 8), bool] */;
  %180 = %175.2;
  (%176, %177, meta[relay.Constant][11] /* ty=Tensor[(60), bool] */, %178, %179, %var_1841, %170, %180)
}

def @func_1987() -> Tensor[(14, 14, 16), uint64] {
  %181 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %181.1
}

def @func_3549() -> (Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %182 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %183 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %184 = @func_2370() /* ty=Tensor[(14, 14, 16), float32] */;
  %185 = %182.0;
  %186 = %183.0;
  (%184, %185, %186)
}

def @func_3707() -> (Tensor[(14, 14, 16), uint64],) {
  %187 = @func_3480() /* ty=Tensor[(14, 14, 16), uint64] */;
  (%187,)
}

def @func_2412() -> (Tensor[(14, 14, 16), uint64],) {
  %188 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %189 = %188.0;
  (%189,)
}

def @func_2140() -> (Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) {
  %190 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %191 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(576, 1), float64] */, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
  %193 = cast(meta[relay.Constant][13] /* ty=Tensor[(576, 1), float64] */, dtype="uint16") /* ty=Tensor[(576, 1), uint16] */;
  %194 = reshape(%192, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %195 = reshape(%193, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint16] */;
  %196 = @func_1355(%194, %195) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) */;
  %197 = %196.1;
  %198 = cast(%197, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %199 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(576, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %200 = cast(meta[relay.Constant][13] /* ty=Tensor[(576, 1), float64] */, dtype="uint64") /* ty=Tensor[(576, 1), uint64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %202 = %190.1;
  %203 = %191.0;
  %204 = minimum(%200, %201) /* ty=Tensor[(576, ?), uint64] */;
  (%202, %203, %204)
}

def @func_1034(%var_1023: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool], Tensor[(1664), float64]) {
  %205 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %206 = cast(%var_1023, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %207 = reshape(%206, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %208 = cast(meta[relay.Constant][14] /* ty=Tensor[(1664), uint16] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %209 = shape_of(%var_1023, dtype="int32") /* ty=Tensor[(1), int32] */;
  %210 = cast(%var_1023, dtype="float64") /* ty=Tensor[(1664), float64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?), float64] */;
  %212 = %205.0;
  %213 = @func_755(%207) /* ty=Tensor[(16, 13, 8), bool] */;
  %214 = multiply(%210, %211) /* ty=Tensor[(1664), float64] */;
  (%212, %213, %214)
}

def @func_5123() -> (Tensor[(14, 14, 16), float64],) {
  %215 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %216 = %215.1;
  %217 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %221 = floor_divide(%219, %220) /* ty=Tensor[(14, 14, 16), float64] */;
  (%221,)
}

def @func_5466(%var_5420: Tensor[(8, 7, 12), int32], %var_5421: Tensor[(8, 7, 12), int32], %var_5443: Tensor[(52, 32), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(1664), float32], Tensor[(8, 7, 12), bool]) {
  %222 = @func_5053() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %223 = cast(%var_5443, dtype="uint16") /* ty=Tensor[(52, 32), uint16] */;
  %224 = reshape(%223, newshape=[1664]) /* ty=Tensor[(1664), uint16] */;
  %225 = @func_1645(%224) /* ty=(Tensor[(14, 14, 16), float64], Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16]) */;
  %226 = %225.3;
  %227 = cast(%var_5443, dtype="float32") /* ty=Tensor[(52, 32), float32] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(1), int32] */;
  %229 = cast(%226, dtype="float32") /* ty=Tensor[(1664), float32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?), float32] */;
  %231 = cast(%var_5421, dtype="int32") /* ty=Tensor[(8, 7, 12), int32] */;
  %232 = shape_of(%var_5420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_5420, dtype="int32") /* ty=Tensor[(8, 7, 12), int32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %235 = add(%233, %234) /* ty=Tensor[(8, 7, 12), int32] */;
  %236 = cast(%235, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %237 = shape_of(%var_5420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%var_5420, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %240 = %222.0;
  %241 = floor_divide(%229, %230) /* ty=Tensor[(1664), float32] */;
  %242 = less_equal(%238, %239) /* ty=Tensor[(8, 7, 12), bool] */;
  (%240, %241, %242)
}

def @func_3342() -> (Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) {
  %243 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %244 = @func_3116() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) */;
  %245 = %244.2;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %247 = %243.0;
  %248 = acos(%246) /* ty=Tensor[(96, 1), float64] */;
  (%247, %248)
}

def @func_4161(%var_4134: Tensor[(5, 12, 8), uint64], %var_4141: Tensor[(5, 12, 8), bool], %var_4157: Tensor[(1, 243), float32], %var_4159: Tensor[(1664), uint16]) -> (Tensor[(5, 12, 8), bool], Tensor[(5, 12, 8), float32], Tensor[(600, 6), int16], Tensor[(1, 243), float32], Tensor[(3600), int16], Tensor[(1664), uint16]) {
  %249 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 12, 8), uint64] */, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
  %250 = shape_of(%var_4134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%var_4134, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %253 = less_equal(%251, %252) /* ty=Tensor[(5, 12, 8), bool] */;
  %254 = cast(%var_4141, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%253, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = cast(%var_4134, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  %259 = cast(%var_4157, dtype="float32") /* ty=Tensor[(1, 243), float32] */;
  %260 = cast(meta[relay.Constant][17] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %261 = cast(%var_4159, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %262 = reshape(%259, newshape=[243]) /* ty=Tensor[(243), float32] */;
  %263 = reshape(%260, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
  %264 = reshape(%261, newshape=[1664]) /* ty=Tensor[(1664), uint16] */;
  %265 = @func_3885(%262, %263, %264) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(60), bool], Tensor[(243), float32], Tensor[(600, 6), int16], Tensor[(1664), uint16]) */;
  %266 = equal(%256, %257) /* ty=Tensor[(5, 12, 8), bool] */;
  %267 = acosh(%258) /* ty=Tensor[(5, 12, 8), float32] */;
  %268 = %265.3;
  (%266, %267, %268, %var_4157, meta[relay.Constant][17] /* ty=Tensor[(3600), int16] */, %var_4159)
}

def @func_5600() -> Tensor[(14, 14, 16), uint64] {
  %269 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %269.0
}

def @func_4878(%var_4837: Tensor[(120, 2), int8], %var_4851: Tensor[(120), float32]) -> (Tensor[(14, 14, 16), uint64], Tensor[(16, 3, 5), int8], Tensor[(120, 2), int8], Tensor[(14, 14, 16), uint64], Tensor[(120), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) {
  %270 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %271 = cast(%var_4837, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %272 = cast(%var_4837, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %273 = reshape(%271, newshape=[16, 3, 5]) /* ty=Tensor[(16, 3, 5), int8] */;
  %274 = reshape(%272, newshape=[16, 3, 5]) /* ty=Tensor[(16, 3, 5), int8] */;
  %275 = @func_4283(%273, %274) /* ty=(Tensor[(16, 3, 5), int8],) */;
  %276 = cast(%var_4851, dtype="float32") /* ty=Tensor[(120), float32] */;
  %277 = reshape(%276, newshape=[3, 40]) /* ty=Tensor[(3, 40), float32] */;
  %278 = @func_4204(%277) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(3, 40), float32], Tensor[(12, 10, 7), int32], Tensor[(14, 14, 16), uint64]) */;
  %279 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %280 = @func_2571() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */;
  %281 = %280.0;
  %282 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = %270.0;
  %287 = %275.0;
  %288 = %278.3;
  %289 = @func_2814() /* ty=Tensor[(14, 14, 16), uint64] */;
  %290 = %279.0;
  %291 = greater_equal(%284, %285) /* ty=Tensor[(14, 14, 16), bool] */;
  (%286, %287, %var_4837, %288, %var_4851, %289, %290, %291)
}

def @func_3906() -> (Tensor[(14, 14, 16), float32],) {
  %292 = @func_3549() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %293 = %292.0;
  (%293,)
}

def @func_2338() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %294 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %295 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %296 = %294.0;
  %297 = %295.0;
  (%296, %297)
}

def @func_1251(%var_1242: Tensor[(8, 6, 2), float32]) -> Tensor[(8, 6, 2), float32] {
  %298 = cast(%var_1242, dtype="float32") /* ty=Tensor[(8, 6, 2), float32] */;
  acos(%298) /* ty=Tensor[(8, 6, 2), float32] */
}

def @func_3003() -> (Tensor[(14, 14, 16), uint64],) {
  %299 = @func_2571() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */;
  %300 = %299.0;
  (%300,)
}

def @func_510(%var_477: Tensor[(6, 5, 2), bool], %var_478: Tensor[(6, 5, 2), bool], %var_507: Tensor[(3600), int16]) -> (Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) {
  %301 = cast(%var_478, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %302 = shape_of(%var_477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%var_477, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %305 = logical_and(%303, %304) /* ty=Tensor[(6, 5, 2), bool] */;
  %306 = cast(%var_478, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %310 = cast(%var_507, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %311 = cast(%var_507, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %312 = reshape(%310, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %313 = reshape(%311, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %314 = floor_mod(%308, %309) /* ty=Tensor[(6, 5, 2), float64] */;
  %315 = @func_89(%312, %313) /* ty=Tensor[(15, 16, 15), bool] */;
  (%314, %315, %var_507)
}

def @func_3633() -> Tensor[(14, 14, 16), float32] {
  %316 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %316.1
}

def @func_4763(%var_4745: Tensor[(10, 3, 3), uint32]) -> (Tensor[(10, 3, 3), uint32], Tensor[(6, 5, 2), float64], Tensor[(14, 14, 16), uint64]) {
  %317 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %318 = cast(%var_4745, dtype="uint32") /* ty=Tensor[(10, 3, 3), uint32] */;
  %319 = @func_4328() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(6, 5, 2), float64], Tensor[(60), bool], Tensor[(3600), int16]) */;
  %320 = %319.2;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %322 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
  %323 = bitwise_xor(%317, %318) /* ty=Tensor[(10, 3, 3), uint32] */;
  %324 = tan(%321) /* ty=Tensor[(6, 5, 2), float64] */;
  %325 = %322.0;
  (%323, %324, %325)
}

def @func_5745() -> (Tensor[(13, 5, 4), float64],) {
  %326 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %327 = acos(%326) /* ty=Tensor[(13, 5, 4), float64] */;
  (%327,)
}

def @func_1936(%var_1931: Tensor[(10, 10, 8), uint32]) -> Tensor[(10, 10, 8), uint32] {
  %328 = cast(%var_1931, dtype="uint32") /* ty=Tensor[(10, 10, 8), uint32] */;
  %329 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(10, 10, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 10, 8), uint32] */, dtype="uint32") /* ty=Tensor[(10, 10, 8), uint32] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%330, %331) /* ty=Tensor[(10, 10, 8), uint32] */
}

def @func_2199() -> (Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) {
  %332 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %333 = %332.1;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %335 = cast(meta[relay.Constant][22] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %336 = reshape(%335, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %337 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %338 = sinh(%334) /* ty=Tensor[(14, 14, 16), float32] */;
  %339 = @func_755(%336) /* ty=Tensor[(16, 13, 8), bool] */;
  %340 = %337.0;
  (%338, %339, meta[relay.Constant][22] /* ty=Tensor[(1664), uint16] */, %340)
}

def @func_2312() -> (Tensor[(14, 14, 16), uint64],) {
  %341 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %342 = %341.0;
  (%342,)
}

def @func_5697(%var_5675: Tensor[(9, 13, 3), uint64], %var_5676: Tensor[(9, 13, 3), uint64]) -> (Tensor[(9, 13, 3), uint64], Tensor[(9, 13, 3), float64], Tensor[(9, 13, 3), float64]) {
  %343 = cast(%var_5676, dtype="uint64") /* ty=Tensor[(9, 13, 3), uint64] */;
  %344 = shape_of(%var_5675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_5675, dtype="uint64") /* ty=Tensor[(9, 13, 3), uint64] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %347 = cast(%var_5675, dtype="float64") /* ty=Tensor[(9, 13, 3), float64] */;
  %348 = cast(%var_5676, dtype="float64") /* ty=Tensor[(9, 13, 3), float64] */;
  %349 = right_shift(%345, %346) /* ty=Tensor[(9, 13, 3), uint64] */;
  %350 = log(%347) /* ty=Tensor[(9, 13, 3), float64] */;
  %351 = log10(%348) /* ty=Tensor[(9, 13, 3), float64] */;
  (%349, %350, %351)
}

def @func_2713(%var_2687: Tensor[(14, 14, 16), uint64], %var_2705: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), int32], Tensor[(14, 14, 16), bool]) {
  %352 = @func_1987() /* ty=Tensor[(14, 14, 16), uint64] */;
  %353 = cast(%var_2687, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %357 = cast(%var_2705, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %358 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%352, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = bitwise_and(%355, %356) /* ty=Tensor[(14, 14, 16), int32] */;
  %362 = less(%359, %360) /* ty=Tensor[(14, 14, 16), bool] */;
  (%361, %362)
}

def @func_4634(%var_4628: Tensor[(576), float64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(4, 12, 12), uint32], Tensor[(576), float64]) {
  %363 = @func_2312() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %364 = cast(%var_4628, dtype="float64") /* ty=Tensor[(576), float64] */;
  %365 = cast(%var_4628, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %366 = reshape(%364, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %367 = reshape(%365, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint16] */;
  %368 = @func_1355(%366, %367) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) */;
  %369 = %363.0;
  %370 = %368.1;
  (%369, %370, %var_4628)
}

def @func_5865() -> Tensor[(14, 14, 16), bool] {
  @func_5418() /* ty=Tensor[(14, 14, 16), bool] */
}

def @func_4088() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %371 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %372 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %373 = %371.1;
  %374 = %372.0;
  (%373, %374)
}

def @func_4588() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], int64, Tensor[(1664), uint16], Tensor[(3600), int16], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32]) {
  %375 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %376 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %377 = reshape(%376, newshape=[]) /* ty=int64 */;
  %378 = @func_3287(%377) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) */;
  %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %380 = reshape(%379, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %381 = @func_2864(%380) /* ty=(Tensor[(14, 14, 16), int32], Tensor[(60), bool], Tensor[(243), float32], Tensor[(3600), int16], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */;
  %382 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %383 = @func_4465() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %384 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %385 = reshape(%384, newshape=[]) /* ty=int64 */;
  %386 = @func_3287(%385) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) */;
  %387 = %375.0;
  %388 = %378.2;
  %389 = %381.4;
  %390 = %382.1;
  %391 = %383.0;
  %392 = %386.3;
  (%387, %388, 10 /* ty=int64 */, %389, meta[relay.Constant][23] /* ty=Tensor[(3600), int16] */, %390, %391, %392)
}

def @func_3558(%var_3551: Tensor[(6, 16, 13), int16], %var_3552: Tensor[(6, 16, 13), int16]) -> (Tensor[(6, 16, 13), int16],) {
  %393 = cast(%var_3552, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
  %394 = shape_of(%var_3551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_3551, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %397 = left_shift(%395, %396) /* ty=Tensor[(6, 16, 13), int16] */;
  (%397,)
}

def @main() -> (Tensor[(15, 5, 2), int16],) {
  %398 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 2), float64] */;
  %399 = log2(%398) /* ty=Tensor[(15, 5, 2), float64] */;
  %400 = cast(%399, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %401 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(15, 5, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(meta[relay.Constant][24] /* ty=Tensor[(15, 5, 2), float64] */, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %404 = maximum(%402, %403) /* ty=Tensor[(15, 5, 2), int16] */;
  (%404,)
}

def @func_4969(%var_4962: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float64]) {
  %405 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %406 = @func_3601() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %407 = %406.0;
  %408 = cast(%var_4962, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%407, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %412 = %405.0;
  %413 = power(%410, %411) /* ty=Tensor[(14, 14, 16), float64] */;
  (%412, %413)
}

def @func_2979(%var_2951: Tensor[(1664), uint16]) -> (Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), float64], Tensor[(576, ?), uint64]) {
  %414 = cast(%var_2951, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %415 = reshape(%414, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %416 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %418 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
  %419 = @func_755(%415) /* ty=Tensor[(16, 13, 8), bool] */;
  %420 = acos(%417) /* ty=Tensor[(14, 14, 16), float64] */;
  %421 = %418.2;
  (%419, %var_2951, %420, %421)
}

def @func_5053() -> (Tensor[(14, 14, 16), uint64],) {
  %422 = @func_2814() /* ty=Tensor[(14, 14, 16), uint64] */;
  (%422,)
}

def @func_2286() -> Tensor[(14, 14, 16), uint64] {
  %423 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %423.0
}

def @func_755(%var_729: Tensor[(16, 13, 8), uint16]) -> Tensor[(16, 13, 8), bool] {
  %424 = cast(%var_729, dtype="bool") /* ty=Tensor[(16, 13, 8), bool] */;
  %425 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(16, 13, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 13, 8), uint16] */, dtype="bool") /* ty=Tensor[(16, 13, 8), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%426, %427) /* ty=Tensor[(16, 13, 8), bool] */
}

def @func_4283(%var_4277: Tensor[(16, 3, 5), int8], %var_4278: Tensor[(16, 3, 5), int8]) -> (Tensor[(16, 3, 5), int8],) {
  %428 = cast(%var_4278, dtype="int8") /* ty=Tensor[(16, 3, 5), int8] */;
  %429 = shape_of(%var_4277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%var_4277, dtype="int8") /* ty=Tensor[(16, 3, 5), int8] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %432 = right_shift(%430, %431) /* ty=Tensor[(16, 3, 5), int8] */;
  (%432,)
}

def @func_2274(%var_2253: Tensor[(96), float32], %var_2264: int64) -> (Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96), float32], Tensor[(15, 13, 15), uint32], int64) {
  %433 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %434 = cast(%var_2253, dtype="float32") /* ty=Tensor[(96), float32] */;
  %435 = reshape(%434, newshape=[8, 6, 2]) /* ty=Tensor[(8, 6, 2), float32] */;
  %436 = cast(%var_2264, dtype="int64") /* ty=int64 */;
  %437 = reshape(%436, newshape=[]) /* ty=int64 */;
  %438 = @func_958(%437) /* ty=(Tensor[(15, 13, 15), uint32], Tensor[(15, 16, 15), bool], Tensor[(600, 6), int16], Tensor[(16, 15, 5), float32], Tensor[(1200), uint8]) */;
  %439 = %433.0;
  %440 = @func_1251(%435) /* ty=Tensor[(8, 6, 2), float32] */;
  %441 = %438.0;
  (%439, %440, %var_2253, %441, %var_2264)
}

def @func_2462(%var_2454: Tensor[(16, 16, 15), float32]) -> Tensor[(16, 16, 15), float64] {
  %442 = cast(%var_2454, dtype="float32") /* ty=Tensor[(16, 16, 15), float32] */;
  %443 = sin(%442) /* ty=Tensor[(16, 16, 15), float32] */;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
  acos(%444) /* ty=Tensor[(16, 16, 15), float64] */
}

def @func_1355(%var_1307: Tensor[(4, 12, 12), float64], %var_1313: Tensor[(4, 12, 12), uint16]) -> (Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) {
  %445 = cast(%var_1307, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  %446 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 12), float64] */, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %449 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
  %450 = atan(%449) /* ty=Tensor[(4, 12, 12), float64] */;
  %451 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 12, 12), float64] */, dtype="uint16") /* ty=Tensor[(4, 12, 12), uint16] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="uint16") /* ty=Tensor[(4, 12, 12), uint16] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %455 = right_shift(%453, %454) /* ty=Tensor[(4, 12, 12), uint16] */;
  %456 = cast(%var_1313, dtype="uint32") /* ty=Tensor[(4, 12, 12), uint32] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="uint32") /* ty=Tensor[(4, 12, 12), uint32] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %460 = cast(meta[relay.Constant][27] /* ty=Tensor[(66, 6), float64] */, dtype="float64") /* ty=Tensor[(66, 6), float64] */;
  %461 = reshape(%460, newshape=[9, 11, 4]) /* ty=Tensor[(9, 11, 4), float64] */;
  %462 = cast(%455, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
  %463 = log(%462) /* ty=Tensor[(4, 12, 12), float64] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
  %465 = floor_divide(%447, %448) /* ty=Tensor[(4, 12, 12), float32] */;
  %466 = left_shift(%458, %459) /* ty=Tensor[(4, 12, 12), uint32] */;
  %467 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
  %468 = @func_915(%461) /* ty=Tensor[(9, 11, 4), float64] */;
  %469 = tan(%464) /* ty=Tensor[(4, 12, 12), float64] */;
  (%465, %466, %467, %468, meta[relay.Constant][27] /* ty=Tensor[(66, 6), float64] */, %469)
}

def @func_1645(%var_1643: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), float64], Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16]) {
  %470 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %473 = cast(%471, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %474 = acosh(%473) /* ty=Tensor[(14, 14, 16), float64] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %476 = cast(%var_1643, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %477 = reshape(%476, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %478 = log2(%472) /* ty=Tensor[(14, 14, 16), float64] */;
  %479 = log10(%475) /* ty=Tensor[(14, 14, 16), float32] */;
  %480 = @func_755(%477) /* ty=Tensor[(16, 13, 8), bool] */;
  (%478, %479, %480, %var_1643)
}

def @func_5823() -> (Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(600, 6), float64]) {
  %481 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
  %482 = cast(meta[relay.Constant][28] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %483 = reshape(%482, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %484 = @func_3154(%483) /* ty=(Tensor[(1664), int32], Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16], Tensor[(10, 10, 8), uint32], Tensor[(800), uint32]) */;
  %485 = cast(meta[relay.Constant][28] /* ty=Tensor[(600, 6), int16] */, dtype="float64") /* ty=Tensor[(600, 6), float64] */;
  %486 = %481.0;
  %487 = %484.2;
  %488 = rsqrt(%485) /* ty=Tensor[(600, 6), float64] */;
  (%486, %487, %488)
}

def @func_1512() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %489 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %490 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
  %491 = %489.0;
  (%490, %491)
}

def @func_4328() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(6, 5, 2), float64], Tensor[(60), bool], Tensor[(3600), int16]) {
  %492 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %493 = @func_3843() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %494 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %495 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %496 = cast(meta[relay.Constant][30] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %497 = reshape(%494, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %498 = reshape(%495, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %499 = reshape(%496, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %500 = @func_510(%497, %498, %499) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
  %501 = %492.0;
  %502 = %493.0;
  %503 = %500.0;
  (%501, %502, %503, meta[relay.Constant][29] /* ty=Tensor[(60), bool] */, meta[relay.Constant][30] /* ty=Tensor[(3600), int16] */)
}

def @func_3885(%var_3881: Tensor[(243), float32], %var_3882: Tensor[(600, 6), int16], %var_3883: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(60), bool], Tensor[(243), float32], Tensor[(600, 6), int16], Tensor[(1664), uint16]) {
  %504 = @func_2823() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %505 = cast(%var_3881, dtype="float32") /* ty=Tensor[(243), float32] */;
  %506 = cast(%var_3882, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %507 = cast(%var_3883, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %508 = cast(%var_3882, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %509 = reshape(%505, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
  %510 = reshape(%506, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
  %511 = reshape(%507, newshape=[416, 4]) /* ty=Tensor[(416, 4), uint16] */;
  %512 = reshape(%508, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
  %513 = @func_1863(%509, %510, %511, %512) /* ty=(Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) */;
  %514 = %504.0;
  %515 = %513.2;
  (%514, %515, %var_3881, %var_3882, %var_3883)
}

def @func_4710(%var_4657: Tensor[(1, 8, 2), float32], %var_4679: Tensor[(120), uint8], %var_4697: Tensor[(11, 8, 2), float32]) -> (Tensor[(6, 5, 4), uint8], Tensor[(120), uint8], Tensor[(?, 8, 2), uint64], Tensor[(11, 8, 2), float32], Tensor[(12, 10, 1), float32]) {
  %516 = cast(%var_4679, dtype="uint8") /* ty=Tensor[(120), uint8] */;
  %517 = reshape(%516, newshape=[6, 5, 4]) /* ty=Tensor[(6, 5, 4), uint8] */;
  %518 = @func_1806(%517) /* ty=(Tensor[(6, 5, 4), uint8], Tensor[(14, 14, 16), uint64]) */;
  %519 = cast(%var_4657, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
  %520 = cos(%519) /* ty=Tensor[(1, 8, 2), float32] */;
  %521 = cast(%520, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
  %522 = log10(%521) /* ty=Tensor[(1, 8, 2), float32] */;
  %523 = cast(%var_4657, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
  %524 = sinh(%523) /* ty=Tensor[(1, 8, 2), float32] */;
  %525 = cast(%524, dtype="uint64") /* ty=Tensor[(1, 8, 2), uint64] */;
  %526 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%522, dtype="uint64") /* ty=Tensor[(1, 8, 2), uint64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %529 = cast(%var_4657, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
  %530 = cast(%var_4697, dtype="float32") /* ty=Tensor[(11, 8, 2), float32] */;
  %531 = cast(%var_4679, dtype="float32") /* ty=Tensor[(120), float32] */;
  %532 = reshape(%531, newshape=[12, 10, 1]) /* ty=Tensor[(12, 10, 1), float32] */;
  %533 = @func_3620(%532) /* ty=(Tensor[(12, 10, 1), float32],) */;
  %534 = %518.0;
  %535 = bitwise_or(%527, %528) /* ty=Tensor[(?, 8, 2), uint64] */;
  %536 = minimum(%529, %530) /* ty=Tensor[(11, 8, 2), float32] */;
  %537 = %533.0;
  (%534, %var_4679, %535, %536, %537)
}

def @func_4465() -> (Tensor[(14, 14, 16), uint64],) {
  %538 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  (%538,)
}

def @func_5214() -> (Tensor[(14, 14, 16), float32],) {
  %539 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %542 = asin(%541) /* ty=Tensor[(14, 14, 16), float32] */;
  (%542,)
}

def @func_3620(%var_3610: Tensor[(12, 10, 1), float32]) -> (Tensor[(12, 10, 1), float32],) {
  %543 = cast(%var_3610, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %544 = tan(%543) /* ty=Tensor[(12, 10, 1), float32] */;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %546 = cos(%545) /* ty=Tensor[(12, 10, 1), float32] */;
  (%546,)
}

def @func_2571() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) {
  %547 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %549 = sin(%548) /* ty=Tensor[(14, 14, 16), float64] */;
  %550 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 14, 16), float64] */, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = floor_mod(%552, %553) /* ty=Tensor[(14, 14, 16), float32] */;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %556 = sigmoid(%555) /* ty=Tensor[(14, 14, 16), float32] */;
  %557 = cast(%554, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %561 = cast(%554, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %562 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%549, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %565 = subtract(%559, %560) /* ty=Tensor[(14, 14, 16), uint64] */;
  %566 = logical_and(%563, %564) /* ty=Tensor[(14, 14, 16), bool] */;
  (%565, %566)
}

def @func_1003() -> (Tensor[(14, 14, 16), uint64],) {
  %567 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %568 = cos(%567) /* ty=Tensor[(14, 14, 16), float64] */;
  %569 = cast(%568, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %570 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(14, 14, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 14, 16), float64] */, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %573 = left_shift(%571, %572) /* ty=Tensor[(14, 14, 16), uint64] */;
  (%573,)
}

def @func_89(%var_59: Tensor[(15, 16, 15), int16], %var_60: Tensor[(15, 16, 15), int16]) -> Tensor[(15, 16, 15), bool] {
  %574 = cast(%var_60, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
  %575 = shape_of(%var_59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_59, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%576, %577) /* ty=Tensor[(15, 16, 15), bool] */
}

def @func_1166() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %578 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %579 = %578.0;
  %580 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
  (%579, %580)
}

def @func_5840() -> Tensor[(14, 14, 16), uint64] {
  %581 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %581.0
}

def @func_5670(%var_5638: Tensor[(288, 2), float64], %var_5666: Tensor[(9, 13, 7), int64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(288, 2), float32], Tensor[(14, 14, 16), uint64], Tensor[(9, 13, 7), int32]) {
  %582 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %583 = cast(%var_5638, dtype="float64") /* ty=Tensor[(288, 2), float64] */;
  %584 = reshape(%583, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %585 = @func_4634(%584) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(4, 12, 12), uint32], Tensor[(576), float64]) */;
  %586 = cast(meta[relay.Constant][33] /* ty=Tensor[(288, 2), float64] */, dtype="float32") /* ty=Tensor[(288, 2), float32] */;
  %587 = shape_of(%var_5638, dtype="int32") /* ty=Tensor[(2), int32] */;
  %588 = cast(%var_5638, dtype="float32") /* ty=Tensor[(288, 2), float32] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %590 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %591 = reshape(%590, newshape=[]) /* ty=int64 */;
  %592 = @func_3287(%591) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) */;
  %593 = cast(1 /* ty=int64 */, dtype="int32") /* ty=int32 */;
  %594 = cast(%var_5666, dtype="int32") /* ty=Tensor[(9, 13, 7), int32] */;
  %595 = %582.0;
  %596 = %585.0;
  %597 = mod(%588, %589) /* ty=Tensor[(288, 2), float32] */;
  %598 = %592.0;
  %599 = bitwise_xor(%593, %594) /* ty=Tensor[(9, 13, 7), int32] */;
  (%595, %596, %597, %598, %599)
}

def @func_3480() -> Tensor[(14, 14, 16), uint64] {
  %600 = @func_3116() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) */;
  %600.0
}

def @func_915(%var_891: Tensor[(9, 11, 4), float64]) -> Tensor[(9, 11, 4), float64] {
  %601 = cast(%var_891, dtype="float64") /* ty=Tensor[(9, 11, 4), float64] */;
  acosh(%601) /* ty=Tensor[(9, 11, 4), float64] */
}

def @func_4799() -> Tensor[(14, 14, 16), uint64] {
  %602 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %602.0
}

def @func_4272(%var_4264: Tensor[(576), float64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(576), uint16]) {
  %603 = @func_3707() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %604 = cast(meta[relay.Constant][34] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %605 = cast(meta[relay.Constant][34] /* ty=Tensor[(576), float64] */, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %606 = reshape(%604, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %607 = reshape(%605, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint16] */;
  %608 = @func_1355(%606, %607) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) */;
  %609 = cast(%var_4264, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %610 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(576), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %611 = cast(meta[relay.Constant][34] /* ty=Tensor[(576), float64] */, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %613 = %603.0;
  %614 = %608.3;
  %615 = add(%611, %612) /* ty=Tensor[(576), uint16] */;
  (%613, %614, %615)
}

def @func_1806(%var_1794: Tensor[(6, 5, 4), uint8]) -> (Tensor[(6, 5, 4), uint8], Tensor[(14, 14, 16), uint64]) {
  %616 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 5, 4), uint8] */, dtype="uint8") /* ty=Tensor[(6, 5, 4), uint8] */;
  %617 = shape_of(%var_1794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_1794, dtype="uint8") /* ty=Tensor[(6, 5, 4), uint8] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %620 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %621 = multiply(%618, %619) /* ty=Tensor[(6, 5, 4), uint8] */;
  %622 = %620.1;
  (%621, %622)
}

def @func_5773() -> Tensor[(14, 14, 16), uint64] {
  %623 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %623.0
}

def @func_2823() -> (Tensor[(14, 14, 16), uint64],) {
  %624 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %625 = %624.0;
  (%625,)
}

def @func_2503(%var_2488: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), float32],) {
  %626 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %627 = %626.0;
  %628 = cast(%var_2488, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %632 = divide(%630, %631) /* ty=Tensor[(14, 14, 16), float32] */;
  (%632,)
}

def @func_3043(%var_3015: float32, %var_3016: Tensor[(12, 11, 13), float32]) -> (Tensor[(12, 11, 13), float32], Tensor[(12, 11, 13), uint64], Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool]) {
  %633 = cast(%var_3015, dtype="float32") /* ty=float32 */;
  %634 = cast(%var_3016, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
  %635 = cast(%var_3015, dtype="int32") /* ty=int32 */;
  %636 = cast(%var_3016, dtype="int32") /* ty=Tensor[(12, 11, 13), int32] */;
  %637 = left_shift(%635, %636) /* ty=Tensor[(12, 11, 13), int32] */;
  %638 = cast(%var_3015, dtype="uint64") /* ty=uint64 */;
  %639 = cast(%637, dtype="uint64") /* ty=Tensor[(12, 11, 13), uint64] */;
  %640 = @func_2199() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */;
  %641 = subtract(%633, %634) /* ty=Tensor[(12, 11, 13), float32] */;
  %642 = multiply(%638, %639) /* ty=Tensor[(12, 11, 13), uint64] */;
  %643 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  %644 = %640.1;
  (%641, %642, %643, %644)
}

def @func_1126() -> Tensor[(14, 14, 16), uint64] {
  %645 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %645.0
}

def @func_5623() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %646 = @func_5053() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %647 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %648 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %649 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %650 = %646.0;
  %651 = %647.1;
  %652 = %648.0;
  %653 = %649.0;
  (%650, %651, %652, %653)
}

def @func_4606() -> (Tensor[(96, 1), float64],) {
  %654 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
  %655 = %654.1;
  (%655,)
}

def @func_3287(%var_3282: int64) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) {
  %656 = @func_2823() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %657 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %658 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %659 = cast(%var_3282, dtype="int64") /* ty=int64 */;
  %660 = reshape(%658, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %661 = reshape(%659, newshape=[]) /* ty=int64 */;
  %662 = @func_2274(%660, %661) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96), float32], Tensor[(15, 13, 15), uint32], int64) */;
  %663 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
  %664 = %656.0;
  %665 = %657.1;
  %666 = %662.3;
  (%663, %664, %665, %666, meta[relay.Constant][36] /* ty=Tensor[(16, 6), float32] */, %var_3282)
}

def @func_6049(%var_5947: Tensor[(672), int32], %var_5970: Tensor[(12, 1664), uint16], %var_6029: Tensor[(12, 1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(672), int32], Tensor[(12, 1664), bool], Tensor[(14, 14, 16), uint64], Tensor[(12, 1664), int16], Tensor[(14, 14, 16), uint64], Tensor[(1, 1664), float64]) {
  %667 = @func_3707() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %668 = cast(%var_5947, dtype="int32") /* ty=Tensor[(672), int32] */;
  %669 = cast(%var_5947, dtype="int32") /* ty=Tensor[(672), int32] */;
  %670 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1664), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1664), uint16] */;
  %671 = reshape(%668, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %672 = reshape(%669, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %673 = reshape(%670, newshape=[52, 32]) /* ty=Tensor[(52, 32), uint16] */;
  %674 = @func_5466(%671, %672, %673) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(1664), float32], Tensor[(8, 7, 12), bool]) */;
  %675 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1664), uint16] */, dtype="bool") /* ty=Tensor[(1, 1664), bool] */;
  %676 = cast(%var_5970, dtype="bool") /* ty=Tensor[(12, 1664), bool] */;
  %677 = @func_3707() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %678 = cast(%var_6029, dtype="int16") /* ty=Tensor[(12, 1664), int16] */;
  %679 = shape_of(%var_5970, dtype="int32") /* ty=Tensor[(2), int32] */;
  %680 = cast(%var_5970, dtype="int16") /* ty=Tensor[(12, 1664), int16] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %682 = @func_4433() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(12, 11, 13), uint64], float32, Tensor[(858, 2), float64]) */;
  %683 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1664), uint16] */, dtype="float64") /* ty=Tensor[(1, 1664), float64] */;
  %684 = %667.0;
  %685 = %674.0;
  %686 = greater_equal(%675, %676) /* ty=Tensor[(12, 1664), bool] */;
  %687 = %677.0;
  %688 = left_shift(%680, %681) /* ty=Tensor[(12, 1664), int16] */;
  %689 = %682.0;
  %690 = acosh(%683) /* ty=Tensor[(1, 1664), float64] */;
  (%684, %685, %var_5947, %686, %687, %688, %689, %690)
}

def @func_2864(%var_2844: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), int32], Tensor[(60), bool], Tensor[(243), float32], Tensor[(3600), int16], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) {
  %691 = @func_1987() /* ty=Tensor[(14, 14, 16), uint64] */;
  %692 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %696 = cast(meta[relay.Constant][39] /* ty=Tensor[(243), float32] */, dtype="float32") /* ty=Tensor[(243), float32] */;
  %697 = cast(%var_2844, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %698 = cast(meta[relay.Constant][40] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %699 = cast(%var_2844, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %700 = reshape(%696, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
  %701 = reshape(%697, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
  %702 = reshape(%698, newshape=[416, 4]) /* ty=Tensor[(416, 4), uint16] */;
  %703 = reshape(%699, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
  %704 = @func_1863(%700, %701, %702, %703) /* ty=(Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) */;
  %705 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %706 = logical_xor(%694, %695) /* ty=Tensor[(14, 14, 16), int32] */;
  %707 = %704.2;
  %708 = %705.0;
  (%706, %707, meta[relay.Constant][39] /* ty=Tensor[(243), float32] */, %var_2844, meta[relay.Constant][40] /* ty=Tensor[(1664), uint16] */, %708)
}

def @func_4433() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(12, 11, 13), uint64], float32, Tensor[(858, 2), float64]) {
  %709 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %710 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %711 = cast(5.0224f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %712 = cast(meta[relay.Constant][41] /* ty=Tensor[(858, 2), float32] */, dtype="float32") /* ty=Tensor[(858, 2), float32] */;
  %713 = reshape(%711, newshape=[]) /* ty=float32 */;
  %714 = reshape(%712, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), float32] */;
  %715 = @func_3043(%713, %714) /* ty=(Tensor[(12, 11, 13), float32], Tensor[(12, 11, 13), uint64], Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool]) */;
  %716 = cast(meta[relay.Constant][41] /* ty=Tensor[(858, 2), float32] */, dtype="float32") /* ty=Tensor[(858, 2), float32] */;
  %717 = atan(%716) /* ty=Tensor[(858, 2), float32] */;
  %718 = cast(%717, dtype="float64") /* ty=Tensor[(858, 2), float64] */;
  %719 = %709.0;
  %720 = %710.0;
  %721 = %715.1;
  %722 = log(%718) /* ty=Tensor[(858, 2), float64] */;
  (%719, %720, %721, 5.0224f /* ty=float32 */, %722)
}

def @func_2086() -> (Tensor[(14, 14, 16), uint64],) {
  %723 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %724 = %723.0;
  (%724,)
}

def @func_4204(%var_4187: Tensor[(3, 40), float32]) -> (Tensor[(14, 14, 16), uint64], Tensor[(3, 40), float32], Tensor[(12, 10, 7), int32], Tensor[(14, 14, 16), uint64]) {
  %725 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %726 = cast(%var_4187, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
  %727 = reshape(%726, newshape=[12, 10, 1]) /* ty=Tensor[(12, 10, 1), float32] */;
  %728 = @func_3620(%727) /* ty=(Tensor[(12, 10, 1), float32],) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="int32") /* ty=Tensor[(12, 10, 1), int32] */;
  %731 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 10, 7), float32] */, dtype="int32") /* ty=Tensor[(12, 10, 7), int32] */;
  %732 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %733 = %725.0;
  %734 = minimum(%730, %731) /* ty=Tensor[(12, 10, 7), int32] */;
  %735 = %732.0;
  (%733, %var_4187, %734, %735)
}

def @func_2814() -> Tensor[(14, 14, 16), uint64] {
  %736 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %736.0
}

def @func_5258(%var_5249: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) {
  %737 = @func_2823() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %738 = cast(%var_5249, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %739 = cast(%var_5249, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %740 = reshape(%738, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %741 = reshape(%739, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %742 = %737.0;
  %743 = @func_89(%740, %741) /* ty=Tensor[(15, 16, 15), bool] */;
  (%742, %743, %var_5249)
}

def @func_3261() -> Tensor[(14, 14, 16), uint64] {
  %744 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %744.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4882(%var_4880: Tensor[(120, 2), int8], %var_4881: Tensor[(120), float32]) -> (Tensor[(14, 14, 16), uint64], Tensor[(16, 3, 5), int8], Tensor[(120, 2), int8], Tensor[(14, 14, 16), uint64], Tensor[(120), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) {
  @func_4878(%var_4880, %var_4881) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(16, 3, 5), int8], Tensor[(120, 2), int8], Tensor[(14, 14, 16), uint64], Tensor[(120), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */
}

def @func_2142() -> (Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) {
  @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */
}

def @func_1254(%var_1252: Tensor[(8, 6, 2), float32]) -> Tensor[(8, 6, 2), float32] {
  @func_1251(%var_1252) /* ty=Tensor[(8, 6, 2), float32] */
}

def @func_3287(%var_3282: int64) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) {
  %0 = @func_2823() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %1 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %3 = cast(%var_3282, dtype="int64") /* ty=int64 */;
  %4 = reshape(%2, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %5 = reshape(%3, newshape=[]) /* ty=int64 */;
  %6 = @func_2274(%4, %5) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96), float32], Tensor[(15, 13, 15), uint32], int64) */;
  %7 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
  %8 = %0.0;
  %9 = %1.1;
  %10 = %6.3;
  (%7, %8, %9, %10, meta[relay.Constant][0] /* ty=Tensor[(16, 6), float32] */, %var_3282)
}

def @func_2908(%var_2907: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), float32], Tensor[(6, 5, 2), float64], Tensor[(1, 60), bool], Tensor[(3600), float64]) {
  %28 = fn (%var_2902: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), float32], Tensor[(6, 5, 2), float64], Tensor[(1, 60), bool], Tensor[(3600), float64]) {
    %11 = @func_2571() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */;
    %12 = %11.1;
    %13 = cast(%12, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
    %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 60), bool] */, dtype="bool") /* ty=Tensor[(1, 60), bool] */;
    %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %17 = reshape(%14, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
    %18 = reshape(%15, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
    %19 = reshape(%16, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
    %20 = @func_510(%17, %18, %19) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
    %21 = cast(%var_2902, dtype="float64") /* ty=Tensor[(3600), float64] */;
    %22 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(3600), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(3600), int16] */, dtype="float64") /* ty=Tensor[(3600), float64] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?), float64] */;
    %25 = exp(%13) /* ty=Tensor[(14, 14, 16), float32] */;
    %26 = %20.0;
    %27 = floor_mod(%23, %24) /* ty=Tensor[(3600), float64] */;
    (%25, %26, meta[relay.Constant][1] /* ty=Tensor[(1, 60), bool] */, %27)
  };
  %28(%var_2907) /* ty=(Tensor[(14, 14, 16), float32], Tensor[(6, 5, 2), float64], Tensor[(1, 60), bool], Tensor[(3600), float64]) */
}

def @func_1513() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %32 = fn () -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
    %29 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %30 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
    %31 = %29.0;
    (%30, %31)
  };
  %32() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */
}

def @func_3183(%var_3178: Tensor[(2, 16, 5), float32]) -> (Tensor[(2, 16, 5), float32],) {
  %33 = cast(%var_3178, dtype="float32") /* ty=Tensor[(2, 16, 5), float32] */;
  %34 = acosh(%33) /* ty=Tensor[(2, 16, 5), float32] */;
  (%34,)
}

def @func_1003() -> (Tensor[(14, 14, 16), uint64],) {
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %36 = cos(%35) /* ty=Tensor[(14, 14, 16), float64] */;
  %37 = cast(%36, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %38 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(14, 14, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 14, 16), float64] */, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %41 = left_shift(%39, %40) /* ty=Tensor[(14, 14, 16), uint64] */;
  (%41,)
}

def @func_3186(%var_3184: Tensor[(2, 16, 5), float32]) -> (Tensor[(2, 16, 5), float32],) {
  @func_3183(%var_3184) /* ty=(Tensor[(2, 16, 5), float32],) */
}

def @func_3633() -> Tensor[(14, 14, 16), float32] {
  %42 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %42.1
}

def @func_3482() -> Tensor[(14, 14, 16), uint64] {
  @func_3480() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_1808(%var_1807: Tensor[(6, 5, 4), uint8]) -> (Tensor[(6, 5, 4), uint8], Tensor[(14, 14, 16), uint64]) {
  %50 = fn (%var_1794: Tensor[(6, 5, 4), uint8]) -> (Tensor[(6, 5, 4), uint8], Tensor[(14, 14, 16), uint64]) {
    %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 5, 4), uint8] */, dtype="uint8") /* ty=Tensor[(6, 5, 4), uint8] */;
    %44 = shape_of(%var_1794, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%var_1794, dtype="uint8") /* ty=Tensor[(6, 5, 4), uint8] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %47 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
    %48 = multiply(%45, %46) /* ty=Tensor[(6, 5, 4), uint8] */;
    %49 = %47.1;
    (%48, %49)
  };
  %50(%var_1807) /* ty=(Tensor[(6, 5, 4), uint8], Tensor[(14, 14, 16), uint64]) */
}

def @func_130(%var_97: Tensor[(14, 10, 4), int8], %var_110: Tensor[(2, 1800), int16]) -> (Tensor[(15, 16, 15), bool], Tensor[(2, 1800), float64], Tensor[(14, 10, 4), float32]) {
  %51 = cast(%var_110, dtype="int16") /* ty=Tensor[(2, 1800), int16] */;
  %52 = cast(%var_110, dtype="int16") /* ty=Tensor[(2, 1800), int16] */;
  %53 = reshape(%51, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %54 = reshape(%52, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %55 = cast(%var_110, dtype="float64") /* ty=Tensor[(2, 1800), float64] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 10, 4), int8] */, dtype="int8") /* ty=Tensor[(14, 10, 4), int8] */;
  %57 = shape_of(%var_97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_97, dtype="int8") /* ty=Tensor[(14, 10, 4), int8] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %60 = multiply(%58, %59) /* ty=Tensor[(14, 10, 4), int8] */;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(14, 10, 4), float32] */;
  %62 = sqrt(%61) /* ty=Tensor[(14, 10, 4), float32] */;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(14, 10, 4), float32] */;
  %64 = @func_89(%53, %54) /* ty=Tensor[(15, 16, 15), bool] */;
  %65 = atanh(%55) /* ty=Tensor[(2, 1800), float64] */;
  %66 = acosh(%63) /* ty=Tensor[(14, 10, 4), float32] */;
  (%64, %65, %66)
}

def @func_4971(%var_4970: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float64]) {
  %76 = fn (%var_4962: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float64]) {
    %67 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %68 = @func_3601() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %69 = %68.0;
    %70 = cast(%var_4962, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
    %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%69, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %74 = %67.0;
    %75 = power(%72, %73) /* ty=Tensor[(14, 14, 16), float64] */;
    (%74, %75)
  };
  %76(%var_4970) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float64]) */
}

def @func_1005() -> (Tensor[(14, 14, 16), uint64],) {
  @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_4434() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(12, 11, 13), uint64], float32, Tensor[(858, 2), float64]) {
  %91 = fn () -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(12, 11, 13), uint64], float32, Tensor[(858, 2), float64]) {
    %77 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %78 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %79 = cast(5.0224f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(858, 2), float32] */, dtype="float32") /* ty=Tensor[(858, 2), float32] */;
    %81 = reshape(%79, newshape=[]) /* ty=float32 */;
    %82 = reshape(%80, newshape=[12, 11, 13]) /* ty=Tensor[(12, 11, 13), float32] */;
    %83 = @func_3043(%81, %82) /* ty=(Tensor[(12, 11, 13), float32], Tensor[(12, 11, 13), uint64], Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool]) */;
    %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(858, 2), float32] */, dtype="float32") /* ty=Tensor[(858, 2), float32] */;
    %85 = atan(%84) /* ty=Tensor[(858, 2), float32] */;
    %86 = cast(%85, dtype="float64") /* ty=Tensor[(858, 2), float64] */;
    %87 = %77.0;
    %88 = %78.0;
    %89 = %83.1;
    %90 = log(%86) /* ty=Tensor[(858, 2), float64] */;
    (%87, %88, %89, 5.0224f /* ty=float32 */, %90)
  };
  %91() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(12, 11, 13), uint64], float32, Tensor[(858, 2), float64]) */
}

def @func_1168() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */
}

def @func_4286(%var_4284: Tensor[(16, 3, 5), int8], %var_4285: Tensor[(16, 3, 5), int8]) -> (Tensor[(16, 3, 5), int8],) {
  %97 = fn (%var_4277: Tensor[(16, 3, 5), int8], %var_4278: Tensor[(16, 3, 5), int8]) -> (Tensor[(16, 3, 5), int8],) {
    %92 = cast(%var_4278, dtype="int8") /* ty=Tensor[(16, 3, 5), int8] */;
    %93 = shape_of(%var_4277, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%var_4277, dtype="int8") /* ty=Tensor[(16, 3, 5), int8] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %96 = right_shift(%94, %95) /* ty=Tensor[(16, 3, 5), int8] */;
    (%96,)
  };
  %97(%var_4284, %var_4285) /* ty=(Tensor[(16, 3, 5), int8],) */
}

def @func_1705() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) {
  %103 = fn () -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) {
    %98 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %99 = %98.0;
    %100 = cast(%99, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
    %101 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
    %102 = rsqrt(%100) /* ty=Tensor[(14, 14, 16), float32] */;
    (%101, %102)
  };
  %103() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */
}

def @func_1251(%var_1242: Tensor[(8, 6, 2), float32]) -> Tensor[(8, 6, 2), float32] {
  %104 = cast(%var_1242, dtype="float32") /* ty=Tensor[(8, 6, 2), float32] */;
  acos(%104) /* ty=Tensor[(8, 6, 2), float32] */
}

def @func_1036(%var_1035: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool], Tensor[(1664), float64]) {
  %115 = fn (%var_1023: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool], Tensor[(1664), float64]) {
    %105 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %106 = cast(%var_1023, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
    %107 = reshape(%106, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
    %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(1664), uint16] */, dtype="float64") /* ty=Tensor[(1664), float64] */;
    %109 = shape_of(%var_1023, dtype="int32") /* ty=Tensor[(1), int32] */;
    %110 = cast(%var_1023, dtype="float64") /* ty=Tensor[(1664), float64] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?), float64] */;
    %112 = %105.0;
    %113 = @func_755(%107) /* ty=Tensor[(16, 13, 8), bool] */;
    %114 = multiply(%110, %111) /* ty=Tensor[(1664), float64] */;
    (%112, %113, %114)
  };
  %115(%var_1035) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool], Tensor[(1664), float64]) */
}

def @func_1223(%var_1221: Tensor[(13, 14, 9), float32]) -> (Tensor[(13, 14, 9), float64], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(13, 14, 9), bool]) {
  @func_1220(%var_1221) /* ty=(Tensor[(13, 14, 9), float64], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(13, 14, 9), bool]) */
}

def @func_2464(%var_2463: Tensor[(16, 16, 15), float32]) -> Tensor[(16, 16, 15), float64] {
  %119 = fn (%var_2454: Tensor[(16, 16, 15), float32]) -> Tensor[(16, 16, 15), float64] {
    %116 = cast(%var_2454, dtype="float32") /* ty=Tensor[(16, 16, 15), float32] */;
    %117 = sin(%116) /* ty=Tensor[(16, 16, 15), float32] */;
    %118 = cast(%117, dtype="float64") /* ty=Tensor[(16, 16, 15), float64] */;
    acos(%118) /* ty=Tensor[(16, 16, 15), float64] */
  };
  %119(%var_2463) /* ty=Tensor[(16, 16, 15), float64] */
}

def @func_3889(%var_3886: Tensor[(243), float32], %var_3887: Tensor[(600, 6), int16], %var_3888: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(60), bool], Tensor[(243), float32], Tensor[(600, 6), int16], Tensor[(1664), uint16]) {
  %132 = fn (%var_3881: Tensor[(243), float32], %var_3882: Tensor[(600, 6), int16], %var_3883: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(60), bool], Tensor[(243), float32], Tensor[(600, 6), int16], Tensor[(1664), uint16]) {
    %120 = @func_2823() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %121 = cast(%var_3881, dtype="float32") /* ty=Tensor[(243), float32] */;
    %122 = cast(%var_3882, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
    %123 = cast(%var_3883, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
    %124 = cast(%var_3882, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
    %125 = reshape(%121, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
    %126 = reshape(%122, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
    %127 = reshape(%123, newshape=[416, 4]) /* ty=Tensor[(416, 4), uint16] */;
    %128 = reshape(%124, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
    %129 = @func_1863(%125, %126, %127, %128) /* ty=(Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) */;
    %130 = %120.0;
    %131 = %129.2;
    (%130, %131, %var_3881, %var_3882, %var_3883)
  };
  %132(%var_3886, %var_3887, %var_3888) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(60), bool], Tensor[(243), float32], Tensor[(600, 6), int16], Tensor[(1664), uint16]) */
}

def @func_4801() -> Tensor[(14, 14, 16), uint64] {
  @func_4799() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_3843() -> (Tensor[(14, 14, 16), uint64],) {
  %133 = @func_3601() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %134 = %133.0;
  (%134,)
}

def @func_3845() -> (Tensor[(14, 14, 16), uint64],) {
  @func_3843() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_4714(%var_4711: Tensor[(1, 8, 2), float32], %var_4712: Tensor[(120), uint8], %var_4713: Tensor[(11, 8, 2), float32]) -> (Tensor[(6, 5, 4), uint8], Tensor[(120), uint8], Tensor[(?, 8, 2), uint64], Tensor[(11, 8, 2), float32], Tensor[(12, 10, 1), float32]) {
  %157 = fn (%var_4657: Tensor[(1, 8, 2), float32], %var_4679: Tensor[(120), uint8], %var_4697: Tensor[(11, 8, 2), float32]) -> (Tensor[(6, 5, 4), uint8], Tensor[(120), uint8], Tensor[(?, 8, 2), uint64], Tensor[(11, 8, 2), float32], Tensor[(12, 10, 1), float32]) {
    %135 = cast(%var_4679, dtype="uint8") /* ty=Tensor[(120), uint8] */;
    %136 = reshape(%135, newshape=[6, 5, 4]) /* ty=Tensor[(6, 5, 4), uint8] */;
    %137 = @func_1806(%136) /* ty=(Tensor[(6, 5, 4), uint8], Tensor[(14, 14, 16), uint64]) */;
    %138 = cast(%var_4657, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
    %139 = cos(%138) /* ty=Tensor[(1, 8, 2), float32] */;
    %140 = cast(%139, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
    %141 = log10(%140) /* ty=Tensor[(1, 8, 2), float32] */;
    %142 = cast(%var_4657, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
    %143 = sinh(%142) /* ty=Tensor[(1, 8, 2), float32] */;
    %144 = cast(%143, dtype="uint64") /* ty=Tensor[(1, 8, 2), uint64] */;
    %145 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%141, dtype="uint64") /* ty=Tensor[(1, 8, 2), uint64] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %148 = cast(%var_4657, dtype="float32") /* ty=Tensor[(1, 8, 2), float32] */;
    %149 = cast(%var_4697, dtype="float32") /* ty=Tensor[(11, 8, 2), float32] */;
    %150 = cast(%var_4679, dtype="float32") /* ty=Tensor[(120), float32] */;
    %151 = reshape(%150, newshape=[12, 10, 1]) /* ty=Tensor[(12, 10, 1), float32] */;
    %152 = @func_3620(%151) /* ty=(Tensor[(12, 10, 1), float32],) */;
    %153 = %137.0;
    %154 = bitwise_or(%146, %147) /* ty=Tensor[(?, 8, 2), uint64] */;
    %155 = minimum(%148, %149) /* ty=Tensor[(11, 8, 2), float32] */;
    %156 = %152.0;
    (%153, %var_4679, %154, %155, %156)
  };
  %157(%var_4711, %var_4712, %var_4713) /* ty=(Tensor[(6, 5, 4), uint8], Tensor[(120), uint8], Tensor[(?, 8, 2), uint64], Tensor[(11, 8, 2), float32], Tensor[(12, 10, 1), float32]) */
}

def @func_4765(%var_4764: Tensor[(10, 3, 3), uint32]) -> (Tensor[(10, 3, 3), uint32], Tensor[(6, 5, 2), float64], Tensor[(14, 14, 16), uint64]) {
  %167 = fn (%var_4745: Tensor[(10, 3, 3), uint32]) -> (Tensor[(10, 3, 3), uint32], Tensor[(6, 5, 2), float64], Tensor[(14, 14, 16), uint64]) {
    %158 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %159 = cast(%var_4745, dtype="uint32") /* ty=Tensor[(10, 3, 3), uint32] */;
    %160 = @func_4328() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(6, 5, 2), float64], Tensor[(60), bool], Tensor[(3600), int16]) */;
    %161 = %160.2;
    %162 = cast(%161, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
    %163 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
    %164 = bitwise_xor(%158, %159) /* ty=Tensor[(10, 3, 3), uint32] */;
    %165 = tan(%162) /* ty=Tensor[(6, 5, 2), float64] */;
    %166 = %163.0;
    (%164, %165, %166)
  };
  %167(%var_4764) /* ty=(Tensor[(10, 3, 3), uint32], Tensor[(6, 5, 2), float64], Tensor[(14, 14, 16), uint64]) */
}

def @func_5624() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %176 = fn () -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
    %168 = @func_5053() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %169 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %170 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %171 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %172 = %168.0;
    %173 = %169.1;
    %174 = %170.0;
    %175 = %171.0;
    (%172, %173, %174, %175)
  };
  %176() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */
}

def @func_2274(%var_2253: Tensor[(96), float32], %var_2264: int64) -> (Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96), float32], Tensor[(15, 13, 15), uint32], int64) {
  %177 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %178 = cast(%var_2253, dtype="float32") /* ty=Tensor[(96), float32] */;
  %179 = reshape(%178, newshape=[8, 6, 2]) /* ty=Tensor[(8, 6, 2), float32] */;
  %180 = cast(%var_2264, dtype="int64") /* ty=int64 */;
  %181 = reshape(%180, newshape=[]) /* ty=int64 */;
  %182 = @func_958(%181) /* ty=(Tensor[(15, 13, 15), uint32], Tensor[(15, 16, 15), bool], Tensor[(600, 6), int16], Tensor[(16, 15, 5), float32], Tensor[(1200), uint8]) */;
  %183 = %177.0;
  %184 = @func_1251(%179) /* ty=Tensor[(8, 6, 2), float32] */;
  %185 = %182.0;
  (%183, %184, %var_2253, %185, %var_2264)
}

def @func_2286() -> Tensor[(14, 14, 16), uint64] {
  %186 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %186.0
}

def @func_3623(%var_3621: Tensor[(12, 10, 1), float32]) -> (Tensor[(12, 10, 1), float32],) {
  @func_3620(%var_3621) /* ty=(Tensor[(12, 10, 1), float32],) */
}

def @func_92(%var_90: Tensor[(15, 16, 15), int16], %var_91: Tensor[(15, 16, 15), int16]) -> Tensor[(15, 16, 15), bool] {
  %191 = fn (%var_59: Tensor[(15, 16, 15), int16], %var_60: Tensor[(15, 16, 15), int16]) -> Tensor[(15, 16, 15), bool] {
    %187 = cast(%var_60, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
    %188 = shape_of(%var_59, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%var_59, dtype="bool") /* ty=Tensor[(15, 16, 15), bool] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%189, %190) /* ty=Tensor[(15, 16, 15), bool] */
  };
  %191(%var_90, %var_91) /* ty=Tensor[(15, 16, 15), bool] */
}

def @func_4634(%var_4628: Tensor[(576), float64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(4, 12, 12), uint32], Tensor[(576), float64]) {
  %192 = @func_2312() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %193 = cast(%var_4628, dtype="float64") /* ty=Tensor[(576), float64] */;
  %194 = cast(%var_4628, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %195 = reshape(%193, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %196 = reshape(%194, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint16] */;
  %197 = @func_1355(%195, %196) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) */;
  %198 = %192.0;
  %199 = %197.1;
  (%198, %199, %var_4628)
}

def @func_5907(%var_5898: Tensor[(8, 14, 3), float32]) -> (Tensor[(8, 14, 3), float32],) {
  %200 = cast(%var_5898, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %201 = tan(%200) /* ty=Tensor[(8, 14, 3), float32] */;
  (%201,)
}

def @func_918(%var_916: Tensor[(9, 11, 4), float64]) -> Tensor[(9, 11, 4), float64] {
  @func_915(%var_916) /* ty=Tensor[(9, 11, 4), float64] */
}

def @func_3558(%var_3551: Tensor[(6, 16, 13), int16], %var_3552: Tensor[(6, 16, 13), int16]) -> (Tensor[(6, 16, 13), int16],) {
  %202 = cast(%var_3552, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
  %203 = shape_of(%var_3551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%var_3551, dtype="int16") /* ty=Tensor[(6, 16, 13), int16] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %206 = left_shift(%204, %205) /* ty=Tensor[(6, 16, 13), int16] */;
  (%206,)
}

def @func_3004() -> (Tensor[(14, 14, 16), uint64],) {
  %209 = fn () -> (Tensor[(14, 14, 16), uint64],) {
    %207 = @func_2571() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */;
    %208 = %207.0;
    (%208,)
  };
  %209() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_3118() -> (Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) {
  @func_3116() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) */
}

def @func_2288() -> Tensor[(14, 14, 16), uint64] {
  @func_2286() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_5745() -> (Tensor[(13, 5, 4), float64],) {
  %210 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 5, 4), float64] */;
  %211 = acos(%210) /* ty=Tensor[(13, 5, 4), float64] */;
  (%211,)
}

def @func_3290(%var_3288: int64) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) {
  @func_3287(%var_3288) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) */
}

def @func_515(%var_512: Tensor[(6, 5, 2), bool], %var_513: Tensor[(6, 5, 2), bool], %var_514: Tensor[(3600), int16]) -> (Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) {
  @func_510(%var_512, %var_513, %var_514) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */
}

def @func_1220(%var_1171: Tensor[(13, 14, 9), float32]) -> (Tensor[(13, 14, 9), float64], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(13, 14, 9), bool]) {
  %212 = cast(%var_1171, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %213 = sqrt(%212) /* ty=Tensor[(13, 14, 9), float32] */;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(13, 14, 9), float32] */;
  %215 = erf(%214) /* ty=Tensor[(13, 14, 9), float32] */;
  %216 = cast(%215, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %217 = cast(meta[relay.Constant][10] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %218 = reshape(%217, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %219 = cast(%213, dtype="float64") /* ty=Tensor[(13, 14, 9), float64] */;
  %220 = log10(%219) /* ty=Tensor[(13, 14, 9), float64] */;
  %221 = cast(%215, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(13, 14, 9), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = log2(%216) /* ty=Tensor[(13, 14, 9), float64] */;
  %226 = @func_755(%218) /* ty=Tensor[(16, 13, 8), bool] */;
  %227 = equal(%223, %224) /* ty=Tensor[(13, 14, 9), bool] */;
  (%225, %226, meta[relay.Constant][10] /* ty=Tensor[(1664), uint16] */, %227)
}

def @func_4467() -> (Tensor[(14, 14, 16), uint64],) {
  @func_4465() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_5697(%var_5675: Tensor[(9, 13, 3), uint64], %var_5676: Tensor[(9, 13, 3), uint64]) -> (Tensor[(9, 13, 3), uint64], Tensor[(9, 13, 3), float64], Tensor[(9, 13, 3), float64]) {
  %228 = cast(%var_5676, dtype="uint64") /* ty=Tensor[(9, 13, 3), uint64] */;
  %229 = shape_of(%var_5675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%var_5675, dtype="uint64") /* ty=Tensor[(9, 13, 3), uint64] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %232 = cast(%var_5675, dtype="float64") /* ty=Tensor[(9, 13, 3), float64] */;
  %233 = cast(%var_5676, dtype="float64") /* ty=Tensor[(9, 13, 3), float64] */;
  %234 = right_shift(%230, %231) /* ty=Tensor[(9, 13, 3), uint64] */;
  %235 = log(%232) /* ty=Tensor[(9, 13, 3), float64] */;
  %236 = log10(%233) /* ty=Tensor[(9, 13, 3), float64] */;
  (%234, %235, %236)
}

def @func_755(%var_729: Tensor[(16, 13, 8), uint16]) -> Tensor[(16, 13, 8), bool] {
  %237 = cast(%var_729, dtype="bool") /* ty=Tensor[(16, 13, 8), bool] */;
  %238 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 8), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 13, 8), uint16] */, dtype="bool") /* ty=Tensor[(16, 13, 8), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%239, %240) /* ty=Tensor[(16, 13, 8), bool] */
}

def @func_1863(%var_1824: Tensor[(9, 3, 9), float32], %var_1833: Tensor[(600, 6), int16], %var_1841: Tensor[(416, 4), uint16], %var_1854: Tensor[(600, 6), int16]) -> (Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) {
  %241 = cast(%var_1824, dtype="float32") /* ty=Tensor[(9, 3, 9), float32] */;
  %242 = cast(meta[relay.Constant][12] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %243 = cast(meta[relay.Constant][12] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %244 = cast(meta[relay.Constant][13] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %245 = reshape(%242, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %246 = reshape(%243, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %247 = reshape(%244, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %248 = @func_510(%245, %246, %247) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
  %249 = cast(%var_1833, dtype="float32") /* ty=Tensor[(600, 6), float32] */;
  %250 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(600, 6), int16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %251 = cast(meta[relay.Constant][13] /* ty=Tensor[(600, 6), int16] */, dtype="float32") /* ty=Tensor[(600, 6), float32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %253 = cast(%var_1841, dtype="uint16") /* ty=Tensor[(416, 4), uint16] */;
  %254 = reshape(%253, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %255 = cast(%var_1854, dtype="uint32") /* ty=Tensor[(600, 6), uint32] */;
  %256 = shape_of(%var_1833, dtype="int32") /* ty=Tensor[(2), int32] */;
  %257 = cast(%var_1833, dtype="uint32") /* ty=Tensor[(600, 6), uint32] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %259 = cast(meta[relay.Constant][12] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %260 = cast(meta[relay.Constant][12] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %261 = add(%257, %258) /* ty=Tensor[(600, 6), uint32] */;
  %262 = cast(%261, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
  %263 = reshape(%259, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %264 = reshape(%260, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %265 = reshape(%262, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %266 = @func_510(%263, %264, %265) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
  %267 = cosh(%241) /* ty=Tensor[(9, 3, 9), float32] */;
  %268 = %248.1;
  %269 = subtract(%251, %252) /* ty=Tensor[(600, 6), float32] */;
  %270 = @func_755(%254) /* ty=Tensor[(16, 13, 8), bool] */;
  %271 = %266.2;
  (%267, %268, meta[relay.Constant][12] /* ty=Tensor[(60), bool] */, %269, %270, %var_1841, %261, %271)
}

def @func_1949() -> (Tensor[(14, 14, 16), uint64],) {
  %274 = fn () -> (Tensor[(14, 14, 16), uint64],) {
    %272 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %273 = %272.1;
    (%273,)
  };
  %274() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_2979(%var_2951: Tensor[(1664), uint16]) -> (Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), float64], Tensor[(576, ?), uint64]) {
  %275 = cast(%var_2951, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %276 = reshape(%275, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %277 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %279 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
  %280 = @func_755(%276) /* ty=Tensor[(16, 13, 8), bool] */;
  %281 = acos(%278) /* ty=Tensor[(14, 14, 16), float64] */;
  %282 = %279.2;
  (%280, %var_2951, %281, %282)
}

def @func_4465() -> (Tensor[(14, 14, 16), uint64],) {
  %283 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  (%283,)
}

def @func_2815() -> Tensor[(14, 14, 16), uint64] {
  %285 = fn () -> Tensor[(14, 14, 16), uint64] {
    %284 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %284.0
  };
  %285() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_2140() -> (Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) {
  %286 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %287 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %288 = cast(meta[relay.Constant][14] /* ty=Tensor[(576, 1), float64] */, dtype="float64") /* ty=Tensor[(576, 1), float64] */;
  %289 = cast(meta[relay.Constant][14] /* ty=Tensor[(576, 1), float64] */, dtype="uint16") /* ty=Tensor[(576, 1), uint16] */;
  %290 = reshape(%288, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %291 = reshape(%289, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint16] */;
  %292 = @func_1355(%290, %291) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) */;
  %293 = %292.1;
  %294 = cast(%293, dtype="uint64") /* ty=Tensor[(4, 12, 12), uint64] */;
  %295 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(576, 1), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(576, 1), float64] */, dtype="uint64") /* ty=Tensor[(576, 1), uint64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %298 = %286.1;
  %299 = %287.0;
  %300 = minimum(%296, %297) /* ty=Tensor[(576, ?), uint64] */;
  (%298, %299, %300)
}

def @func_960(%var_959: int64) -> (Tensor[(15, 13, 15), uint32], Tensor[(15, 16, 15), bool], Tensor[(600, 6), int16], Tensor[(16, 15, 5), float32], Tensor[(1200), uint8]) {
  %320 = fn (%var_931: int64) -> (Tensor[(15, 13, 15), uint32], Tensor[(15, 16, 15), bool], Tensor[(600, 6), int16], Tensor[(16, 15, 5), float32], Tensor[(1200), uint8]) {
    %301 = cast(%var_931, dtype="int64") /* ty=int64 */;
    %302 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 13, 15), int64] */, dtype="int64") /* ty=Tensor[(15, 13, 15), int64] */;
    %303 = logical_xor(%301, %302) /* ty=Tensor[(15, 13, 15), int64] */;
    %304 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 13, 15), int64] */, dtype="uint32") /* ty=Tensor[(15, 13, 15), uint32] */;
    %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%303, dtype="uint32") /* ty=Tensor[(15, 13, 15), uint32] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %308 = cast(meta[relay.Constant][16] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
    %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
    %310 = reshape(%308, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
    %311 = reshape(%309, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
    %312 = cast(meta[relay.Constant][17] /* ty=Tensor[(1200), uint8] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
    %313 = cast(meta[relay.Constant][17] /* ty=Tensor[(1200), uint8] */, dtype="uint8") /* ty=Tensor[(1200), uint8] */;
    %314 = reshape(%312, newshape=[16, 15, 5]) /* ty=Tensor[(16, 15, 5), uint8] */;
    %315 = reshape(%313, newshape=[16, 15, 5]) /* ty=Tensor[(16, 15, 5), uint8] */;
    %316 = @func_403(%314, %315) /* ty=(Tensor[(16, 15, 5), uint8], Tensor[(16, 15, 5), float32]) */;
    %317 = minimum(%306, %307) /* ty=Tensor[(15, 13, 15), uint32] */;
    %318 = @func_89(%310, %311) /* ty=Tensor[(15, 16, 15), bool] */;
    %319 = %316.1;
    (%317, %318, meta[relay.Constant][16] /* ty=Tensor[(600, 6), int16] */, %319, meta[relay.Constant][17] /* ty=Tensor[(1200), uint8] */)
  };
  %320(%var_959) /* ty=(Tensor[(15, 13, 15), uint32], Tensor[(15, 16, 15), bool], Tensor[(600, 6), int16], Tensor[(16, 15, 5), float32], Tensor[(1200), uint8]) */
}

def @func_1938(%var_1937: Tensor[(10, 10, 8), uint32]) -> Tensor[(10, 10, 8), uint32] {
  %325 = fn (%var_1931: Tensor[(10, 10, 8), uint32]) -> Tensor[(10, 10, 8), uint32] {
    %321 = cast(%var_1931, dtype="uint32") /* ty=Tensor[(10, 10, 8), uint32] */;
    %322 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(10, 10, 8), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 10, 8), uint32] */, dtype="uint32") /* ty=Tensor[(10, 10, 8), uint32] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%323, %324) /* ty=Tensor[(10, 10, 8), uint32] */
  };
  %325(%var_1937) /* ty=Tensor[(10, 10, 8), uint32] */
}

def @func_2866(%var_2865: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), int32], Tensor[(60), bool], Tensor[(243), float32], Tensor[(3600), int16], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) {
  %344 = fn (%var_2844: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), int32], Tensor[(60), bool], Tensor[(243), float32], Tensor[(3600), int16], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) {
    %326 = @func_1987() /* ty=Tensor[(14, 14, 16), uint64] */;
    %327 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
    %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%326, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %331 = cast(meta[relay.Constant][20] /* ty=Tensor[(243), float32] */, dtype="float32") /* ty=Tensor[(243), float32] */;
    %332 = cast(%var_2844, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %333 = cast(meta[relay.Constant][21] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
    %334 = cast(%var_2844, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %335 = reshape(%331, newshape=[9, 3, 9]) /* ty=Tensor[(9, 3, 9), float32] */;
    %336 = reshape(%332, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
    %337 = reshape(%333, newshape=[416, 4]) /* ty=Tensor[(416, 4), uint16] */;
    %338 = reshape(%334, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
    %339 = @func_1863(%335, %336, %337, %338) /* ty=(Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) */;
    %340 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %341 = logical_xor(%329, %330) /* ty=Tensor[(14, 14, 16), int32] */;
    %342 = %339.2;
    %343 = %340.0;
    (%341, %342, meta[relay.Constant][20] /* ty=Tensor[(243), float32] */, %var_2844, meta[relay.Constant][21] /* ty=Tensor[(1664), uint16] */, %343)
  };
  %344(%var_2865) /* ty=(Tensor[(14, 14, 16), int32], Tensor[(60), bool], Tensor[(243), float32], Tensor[(3600), int16], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */
}

def @func_2088() -> (Tensor[(14, 14, 16), uint64],) {
  @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_1495() -> Tensor[(14, 14, 16), uint64] {
  %346 = fn () -> Tensor[(14, 14, 16), uint64] {
    %345 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %345.0
  };
  %346() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_4272(%var_4264: Tensor[(576), float64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(576), uint16]) {
  %347 = @func_3707() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %348 = cast(meta[relay.Constant][22] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %349 = cast(meta[relay.Constant][22] /* ty=Tensor[(576), float64] */, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %350 = reshape(%348, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), float64] */;
  %351 = reshape(%349, newshape=[4, 12, 12]) /* ty=Tensor[(4, 12, 12), uint16] */;
  %352 = @func_1355(%350, %351) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) */;
  %353 = cast(%var_4264, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %354 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(576), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %355 = cast(meta[relay.Constant][22] /* ty=Tensor[(576), float64] */, dtype="uint16") /* ty=Tensor[(576), uint16] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %357 = %347.0;
  %358 = %352.3;
  %359 = add(%355, %356) /* ty=Tensor[(576), uint16] */;
  (%357, %358, %359)
}

def @func_4088() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %360 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %361 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %362 = %360.1;
  %363 = %361.0;
  (%362, %363)
}

def @func_1989() -> Tensor[(14, 14, 16), uint64] {
  @func_1987() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_4328() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(6, 5, 2), float64], Tensor[(60), bool], Tensor[(3600), int16]) {
  %364 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %365 = @func_3843() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %366 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %367 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %368 = cast(meta[relay.Constant][24] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %369 = reshape(%366, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %370 = reshape(%367, newshape=[6, 5, 2]) /* ty=Tensor[(6, 5, 2), bool] */;
  %371 = reshape(%368, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %372 = @func_510(%369, %370, %371) /* ty=(Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */;
  %373 = %364.0;
  %374 = %365.0;
  %375 = %372.0;
  (%373, %374, %375, meta[relay.Constant][23] /* ty=Tensor[(60), bool] */, meta[relay.Constant][24] /* ty=Tensor[(3600), int16] */)
}

def @func_3635() -> Tensor[(14, 14, 16), float32] {
  @func_3633() /* ty=Tensor[(14, 14, 16), float32] */
}

def @func_4588() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], int64, Tensor[(1664), uint16], Tensor[(3600), int16], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32]) {
  %376 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %377 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %378 = reshape(%377, newshape=[]) /* ty=int64 */;
  %379 = @func_3287(%378) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) */;
  %380 = cast(meta[relay.Constant][25] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %381 = reshape(%380, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
  %382 = @func_2864(%381) /* ty=(Tensor[(14, 14, 16), int32], Tensor[(60), bool], Tensor[(243), float32], Tensor[(3600), int16], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */;
  %383 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %384 = @func_4465() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %385 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %386 = reshape(%385, newshape=[]) /* ty=int64 */;
  %387 = @func_3287(%386) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) */;
  %388 = %376.0;
  %389 = %379.2;
  %390 = %382.4;
  %391 = %383.1;
  %392 = %384.0;
  %393 = %387.3;
  (%388, %389, 10 /* ty=int64 */, %390, meta[relay.Constant][25] /* ty=Tensor[(3600), int16] */, %391, %392, %393)
}

def @func_5774() -> Tensor[(14, 14, 16), uint64] {
  %395 = fn () -> Tensor[(14, 14, 16), uint64] {
    %394 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %394.0
  };
  %395() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_1737() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) {
  %409 = fn () -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) {
    %396 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %397 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %398 = cast(meta[relay.Constant][26] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
    %399 = reshape(%398, newshape=[1664]) /* ty=Tensor[(1664), uint16] */;
    %400 = @func_1034(%399) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool], Tensor[(1664), float64]) */;
    %401 = %400.2;
    %402 = cast(meta[relay.Constant][26] /* ty=Tensor[(1664), uint16] */, dtype="int32") /* ty=Tensor[(1664), int32] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(1), int32] */;
    %404 = cast(%401, dtype="int32") /* ty=Tensor[(1664), int32] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?), int32] */;
    %406 = %396.0;
    %407 = %397.0;
    %408 = bitwise_xor(%404, %405) /* ty=Tensor[(1664), int32] */;
    (%406, %407, %408)
  };
  %409() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */
}

def @func_5842() -> Tensor[(14, 14, 16), uint64] {
  @func_5840() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_3043(%var_3015: float32, %var_3016: Tensor[(12, 11, 13), float32]) -> (Tensor[(12, 11, 13), float32], Tensor[(12, 11, 13), uint64], Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool]) {
  %410 = cast(%var_3015, dtype="float32") /* ty=float32 */;
  %411 = cast(%var_3016, dtype="float32") /* ty=Tensor[(12, 11, 13), float32] */;
  %412 = cast(%var_3015, dtype="int32") /* ty=int32 */;
  %413 = cast(%var_3016, dtype="int32") /* ty=Tensor[(12, 11, 13), int32] */;
  %414 = left_shift(%412, %413) /* ty=Tensor[(12, 11, 13), int32] */;
  %415 = cast(%var_3015, dtype="uint64") /* ty=uint64 */;
  %416 = cast(%414, dtype="uint64") /* ty=Tensor[(12, 11, 13), uint64] */;
  %417 = @func_2199() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */;
  %418 = subtract(%410, %411) /* ty=Tensor[(12, 11, 13), float32] */;
  %419 = multiply(%415, %416) /* ty=Tensor[(12, 11, 13), uint64] */;
  %420 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  %421 = %417.1;
  (%418, %419, %420, %421)
}

def @func_4878(%var_4837: Tensor[(120, 2), int8], %var_4851: Tensor[(120), float32]) -> (Tensor[(14, 14, 16), uint64], Tensor[(16, 3, 5), int8], Tensor[(120, 2), int8], Tensor[(14, 14, 16), uint64], Tensor[(120), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) {
  %422 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %423 = cast(%var_4837, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %424 = cast(%var_4837, dtype="int8") /* ty=Tensor[(120, 2), int8] */;
  %425 = reshape(%423, newshape=[16, 3, 5]) /* ty=Tensor[(16, 3, 5), int8] */;
  %426 = reshape(%424, newshape=[16, 3, 5]) /* ty=Tensor[(16, 3, 5), int8] */;
  %427 = @func_4283(%425, %426) /* ty=(Tensor[(16, 3, 5), int8],) */;
  %428 = cast(%var_4851, dtype="float32") /* ty=Tensor[(120), float32] */;
  %429 = reshape(%428, newshape=[3, 40]) /* ty=Tensor[(3, 40), float32] */;
  %430 = @func_4204(%429) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(3, 40), float32], Tensor[(12, 10, 7), int32], Tensor[(14, 14, 16), uint64]) */;
  %431 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %432 = @func_2571() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */;
  %433 = %432.0;
  %434 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = %422.0;
  %439 = %427.0;
  %440 = %430.3;
  %441 = @func_2814() /* ty=Tensor[(14, 14, 16), uint64] */;
  %442 = %431.0;
  %443 = greater_equal(%436, %437) /* ty=Tensor[(14, 14, 16), bool] */;
  (%438, %439, %var_4837, %440, %var_4851, %441, %442, %443)
}

def @func_5840() -> Tensor[(14, 14, 16), uint64] {
  %444 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %444.0
}

def @func_4206(%var_4205: Tensor[(3, 40), float32]) -> (Tensor[(14, 14, 16), uint64], Tensor[(3, 40), float32], Tensor[(12, 10, 7), int32], Tensor[(14, 14, 16), uint64]) {
  %456 = fn (%var_4187: Tensor[(3, 40), float32]) -> (Tensor[(14, 14, 16), uint64], Tensor[(3, 40), float32], Tensor[(12, 10, 7), int32], Tensor[(14, 14, 16), uint64]) {
    %445 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %446 = cast(%var_4187, dtype="float32") /* ty=Tensor[(3, 40), float32] */;
    %447 = reshape(%446, newshape=[12, 10, 1]) /* ty=Tensor[(12, 10, 1), float32] */;
    %448 = @func_3620(%447) /* ty=(Tensor[(12, 10, 1), float32],) */;
    %449 = %448.0;
    %450 = cast(%449, dtype="int32") /* ty=Tensor[(12, 10, 1), int32] */;
    %451 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 10, 7), float32] */, dtype="int32") /* ty=Tensor[(12, 10, 7), int32] */;
    %452 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %453 = %445.0;
    %454 = minimum(%450, %451) /* ty=Tensor[(12, 10, 7), int32] */;
    %455 = %452.0;
    (%453, %var_4187, %454, %455)
  };
  %456(%var_4205) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(3, 40), float32], Tensor[(12, 10, 7), int32], Tensor[(14, 14, 16), uint64]) */
}

def @func_1391() -> (Tensor[(14, 14, 16), uint64],) {
  %458 = fn () -> (Tensor[(14, 14, 16), uint64],) {
    %457 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
    (%457,)
  };
  %458() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_5054() -> (Tensor[(14, 14, 16), uint64],) {
  %460 = fn () -> (Tensor[(14, 14, 16), uint64],) {
    %459 = @func_2814() /* ty=Tensor[(14, 14, 16), uint64] */;
    (%459,)
  };
  %460() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_5214() -> (Tensor[(14, 14, 16), float32],) {
  %461 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %462 = %461.0;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %464 = asin(%463) /* ty=Tensor[(14, 14, 16), float32] */;
  (%464,)
}

def @func_3671() -> Tensor[(14, 14, 16), uint64] {
  %466 = fn () -> Tensor[(14, 14, 16), uint64] {
    %465 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
    %465.1
  };
  %466() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_1166() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %467 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %468 = %467.0;
  %469 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
  (%468, %469)
}

def @func_407(%var_405: Tensor[(16, 15, 5), uint8], %var_406: Tensor[(16, 15, 5), uint8]) -> (Tensor[(16, 15, 5), uint8], Tensor[(16, 15, 5), float32]) {
  @func_403(%var_405, %var_406) /* ty=(Tensor[(16, 15, 5), uint8], Tensor[(16, 15, 5), float32]) */
}

def @func_1127() -> Tensor[(14, 14, 16), uint64] {
  %471 = fn () -> Tensor[(14, 14, 16), uint64] {
    %470 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %470.0
  };
  %471() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_4799() -> Tensor[(14, 14, 16), uint64] {
  %472 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %472.0
}

def @func_5125() -> (Tensor[(14, 14, 16), float64],) {
  @func_5123() /* ty=(Tensor[(14, 14, 16), float64],) */
}

def @func_2086() -> (Tensor[(14, 14, 16), uint64],) {
  %473 = @func_1390() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %474 = %473.0;
  (%474,)
}

def @func_510(%var_477: Tensor[(6, 5, 2), bool], %var_478: Tensor[(6, 5, 2), bool], %var_507: Tensor[(3600), int16]) -> (Tensor[(6, 5, 2), float64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) {
  %475 = cast(%var_478, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %476 = shape_of(%var_477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_477, dtype="bool") /* ty=Tensor[(6, 5, 2), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %479 = logical_and(%477, %478) /* ty=Tensor[(6, 5, 2), bool] */;
  %480 = cast(%var_478, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="float64") /* ty=Tensor[(6, 5, 2), float64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %484 = cast(%var_507, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %485 = cast(%var_507, dtype="int16") /* ty=Tensor[(3600), int16] */;
  %486 = reshape(%484, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %487 = reshape(%485, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
  %488 = floor_mod(%482, %483) /* ty=Tensor[(6, 5, 2), float64] */;
  %489 = @func_89(%486, %487) /* ty=Tensor[(15, 16, 15), bool] */;
  (%488, %489, %var_507)
}

def @func_2505(%var_2504: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), float32],) {
  %497 = fn (%var_2488: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), float32],) {
    %490 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %491 = %490.0;
    %492 = cast(%var_2488, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
    %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
    %494 = cast(%491, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
    %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %496 = divide(%494, %495) /* ty=Tensor[(14, 14, 16), float32] */;
    (%496,)
  };
  %497(%var_2504) /* ty=(Tensor[(14, 14, 16), float32],) */
}

def @func_1358(%var_1356: Tensor[(4, 12, 12), float64], %var_1357: Tensor[(4, 12, 12), uint16]) -> (Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) {
  %523 = fn (%var_1307: Tensor[(4, 12, 12), float64], %var_1313: Tensor[(4, 12, 12), uint16]) -> (Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) {
    %498 = cast(%var_1307, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
    %499 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(4, 12, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 12, 12), float64] */, dtype="float32") /* ty=Tensor[(4, 12, 12), float32] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %502 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 12, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
    %503 = atan(%502) /* ty=Tensor[(4, 12, 12), float64] */;
    %504 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 12, 12), float64] */, dtype="uint16") /* ty=Tensor[(4, 12, 12), uint16] */;
    %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
    %506 = cast(%503, dtype="uint16") /* ty=Tensor[(4, 12, 12), uint16] */;
    %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %508 = right_shift(%506, %507) /* ty=Tensor[(4, 12, 12), uint16] */;
    %509 = cast(%var_1313, dtype="uint32") /* ty=Tensor[(4, 12, 12), uint32] */;
    %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%508, dtype="uint32") /* ty=Tensor[(4, 12, 12), uint32] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %513 = cast(meta[relay.Constant][30] /* ty=Tensor[(66, 6), float64] */, dtype="float64") /* ty=Tensor[(66, 6), float64] */;
    %514 = reshape(%513, newshape=[9, 11, 4]) /* ty=Tensor[(9, 11, 4), float64] */;
    %515 = cast(%508, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
    %516 = log(%515) /* ty=Tensor[(4, 12, 12), float64] */;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(4, 12, 12), float64] */;
    %518 = floor_divide(%500, %501) /* ty=Tensor[(4, 12, 12), float32] */;
    %519 = left_shift(%511, %512) /* ty=Tensor[(4, 12, 12), uint32] */;
    %520 = @func_1126() /* ty=Tensor[(14, 14, 16), uint64] */;
    %521 = @func_915(%514) /* ty=Tensor[(9, 11, 4), float64] */;
    %522 = tan(%517) /* ty=Tensor[(4, 12, 12), float64] */;
    (%518, %519, %520, %521, meta[relay.Constant][30] /* ty=Tensor[(66, 6), float64] */, %522)
  };
  %523(%var_1356, %var_1357) /* ty=(Tensor[(4, 12, 12), float32], Tensor[(4, 12, 12), uint32], Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(66, 6), float64], Tensor[(4, 12, 12), float64]) */
}

def @func_2982(%var_2980: Tensor[(1664), uint16]) -> (Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), float64], Tensor[(576, ?), uint64]) {
  @func_2979(%var_2980) /* ty=(Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), float64], Tensor[(576, ?), uint64]) */
}

def @func_5747() -> (Tensor[(13, 5, 4), float64],) {
  @func_5745() /* ty=(Tensor[(13, 5, 4), float64],) */
}

def @func_2414() -> (Tensor[(14, 14, 16), uint64],) {
  @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_2201() -> (Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) {
  @func_2199() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */
}

def @func_758(%var_756: Tensor[(16, 13, 8), uint16]) -> Tensor[(16, 13, 8), bool] {
  @func_755(%var_756) /* ty=Tensor[(16, 13, 8), bool] */
}

def @func_5701(%var_5699: Tensor[(9, 13, 3), uint64], %var_5700: Tensor[(9, 13, 3), uint64]) -> (Tensor[(9, 13, 3), uint64], Tensor[(9, 13, 3), float64], Tensor[(9, 13, 3), float64]) {
  @func_5697(%var_5699, %var_5700) /* ty=(Tensor[(9, 13, 3), uint64], Tensor[(9, 13, 3), float64], Tensor[(9, 13, 3), float64]) */
}

def @func_2340() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */
}

def @func_3262() -> Tensor[(14, 14, 16), uint64] {
  %525 = fn () -> Tensor[(14, 14, 16), uint64] {
    %524 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %524.0
  };
  %525() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_6049(%var_5947: Tensor[(672), int32], %var_5970: Tensor[(12, 1664), uint16], %var_6029: Tensor[(12, 1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(672), int32], Tensor[(12, 1664), bool], Tensor[(14, 14, 16), uint64], Tensor[(12, 1664), int16], Tensor[(14, 14, 16), uint64], Tensor[(1, 1664), float64]) {
  %526 = @func_3707() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %527 = cast(%var_5947, dtype="int32") /* ty=Tensor[(672), int32] */;
  %528 = cast(%var_5947, dtype="int32") /* ty=Tensor[(672), int32] */;
  %529 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 1664), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1664), uint16] */;
  %530 = reshape(%527, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %531 = reshape(%528, newshape=[8, 7, 12]) /* ty=Tensor[(8, 7, 12), int32] */;
  %532 = reshape(%529, newshape=[52, 32]) /* ty=Tensor[(52, 32), uint16] */;
  %533 = @func_5466(%530, %531, %532) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(1664), float32], Tensor[(8, 7, 12), bool]) */;
  %534 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 1664), uint16] */, dtype="bool") /* ty=Tensor[(1, 1664), bool] */;
  %535 = cast(%var_5970, dtype="bool") /* ty=Tensor[(12, 1664), bool] */;
  %536 = @func_3707() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %537 = cast(%var_6029, dtype="int16") /* ty=Tensor[(12, 1664), int16] */;
  %538 = shape_of(%var_5970, dtype="int32") /* ty=Tensor[(2), int32] */;
  %539 = cast(%var_5970, dtype="int16") /* ty=Tensor[(12, 1664), int16] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %541 = @func_4433() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(12, 11, 13), uint64], float32, Tensor[(858, 2), float64]) */;
  %542 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 1664), uint16] */, dtype="float64") /* ty=Tensor[(1, 1664), float64] */;
  %543 = %526.0;
  %544 = %533.0;
  %545 = greater_equal(%534, %535) /* ty=Tensor[(12, 1664), bool] */;
  %546 = %536.0;
  %547 = left_shift(%539, %540) /* ty=Tensor[(12, 1664), int16] */;
  %548 = %541.0;
  %549 = acosh(%542) /* ty=Tensor[(1, 1664), float64] */;
  (%543, %544, %var_5947, %545, %546, %547, %548, %549)
}

def @func_3562(%var_3560: Tensor[(6, 16, 13), int16], %var_3561: Tensor[(6, 16, 13), int16]) -> (Tensor[(6, 16, 13), int16],) {
  @func_3558(%var_3560, %var_3561) /* ty=(Tensor[(6, 16, 13), int16],) */
}

def @func_3620(%var_3610: Tensor[(12, 10, 1), float32]) -> (Tensor[(12, 10, 1), float32],) {
  %550 = cast(%var_3610, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %551 = tan(%550) /* ty=Tensor[(12, 10, 1), float32] */;
  %552 = cast(%551, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %553 = cos(%552) /* ty=Tensor[(12, 10, 1), float32] */;
  (%553,)
}

def @func_4119(%var_4118: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %563 = fn (%var_4106: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
    %554 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %555 = %554.0;
    %556 = cast(%var_4106, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
    %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%555, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %560 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
    %561 = bitwise_xor(%558, %559) /* ty=Tensor[(14, 14, 16), uint64] */;
    %562 = %560.0;
    (%561, %562)
  };
  %563(%var_4118) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */
}

def @func_4606() -> (Tensor[(96, 1), float64],) {
  %564 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
  %565 = %564.1;
  (%565,)
}

def @func_5910(%var_5908: Tensor[(8, 14, 3), float32]) -> (Tensor[(8, 14, 3), float32],) {
  @func_5907(%var_5908) /* ty=(Tensor[(8, 14, 3), float32],) */
}

def @func_5216() -> (Tensor[(14, 14, 16), float32],) {
  @func_5214() /* ty=(Tensor[(14, 14, 16), float32],) */
}

def @func_403(%var_390: Tensor[(16, 15, 5), uint8], %var_391: Tensor[(16, 15, 5), uint8]) -> (Tensor[(16, 15, 5), uint8], Tensor[(16, 15, 5), float32]) {
  %566 = cast(%var_391, dtype="uint8") /* ty=Tensor[(16, 15, 5), uint8] */;
  %567 = shape_of(%var_390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_390, dtype="uint8") /* ty=Tensor[(16, 15, 5), uint8] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %570 = cast(%var_391, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %571 = bitwise_and(%568, %569) /* ty=Tensor[(16, 15, 5), uint8] */;
  %572 = acosh(%570) /* ty=Tensor[(16, 15, 5), float32] */;
  (%571, %572)
}

def @func_5866() -> Tensor[(14, 14, 16), bool] {
  %573 = fn () -> Tensor[(14, 14, 16), bool] {
    @func_5418() /* ty=Tensor[(14, 14, 16), bool] */
  };
  %573() /* ty=Tensor[(14, 14, 16), bool] */
}

def @func_915(%var_891: Tensor[(9, 11, 4), float64]) -> Tensor[(9, 11, 4), float64] {
  %574 = cast(%var_891, dtype="float64") /* ty=Tensor[(9, 11, 4), float64] */;
  acosh(%574) /* ty=Tensor[(9, 11, 4), float64] */
}

def @main() -> (Tensor[(15, 5, 2), int16],) {
  %575 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 2), float64] */;
  %576 = log2(%575) /* ty=Tensor[(15, 5, 2), float64] */;
  %577 = cast(%576, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %578 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 5, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 5, 2), float64] */, dtype="int16") /* ty=Tensor[(15, 5, 2), int16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %581 = maximum(%579, %580) /* ty=Tensor[(15, 5, 2), int16] */;
  (%581,)
}

def @func_2314() -> (Tensor[(14, 14, 16), uint64],) {
  @func_2312() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_3047(%var_3045: float32, %var_3046: Tensor[(12, 11, 13), float32]) -> (Tensor[(12, 11, 13), float32], Tensor[(12, 11, 13), uint64], Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool]) {
  @func_3043(%var_3045, %var_3046) /* ty=(Tensor[(12, 11, 13), float32], Tensor[(12, 11, 13), uint64], Tensor[(14, 14, 16), uint64], Tensor[(16, 13, 8), bool]) */
}

def @func_3343() -> (Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) {
  %588 = fn () -> (Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) {
    %582 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %583 = @func_3116() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) */;
    %584 = %583.2;
    %585 = cast(%584, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
    %586 = %582.0;
    %587 = acos(%585) /* ty=Tensor[(96, 1), float64] */;
    (%586, %587)
  };
  %588() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */
}

def @func_6054(%var_6051: Tensor[(672), int32], %var_6052: Tensor[(12, 1664), uint16], %var_6053: Tensor[(12, 1664), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(672), int32], Tensor[(12, 1664), bool], Tensor[(14, 14, 16), uint64], Tensor[(12, 1664), int16], Tensor[(14, 14, 16), uint64], Tensor[(1, 1664), float64]) {
  @func_6049(%var_6051, %var_6052, %var_6053) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(672), int32], Tensor[(12, 1664), bool], Tensor[(14, 14, 16), uint64], Tensor[(12, 1664), int16], Tensor[(14, 14, 16), uint64], Tensor[(1, 1664), float64]) */
}

def @func_4637(%var_4635: Tensor[(576), float64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(4, 12, 12), uint32], Tensor[(576), float64]) {
  @func_4634(%var_4635) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(4, 12, 12), uint32], Tensor[(576), float64]) */
}

def @func_3601() -> (Tensor[(14, 14, 16), uint64],) {
  %589 = @func_3572() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %590 = %589.0;
  (%590,)
}

def @func_2199() -> (Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) {
  %591 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %592 = %591.1;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %594 = cast(meta[relay.Constant][33] /* ty=Tensor[(1664), uint16] */, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
  %595 = reshape(%594, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
  %596 = @func_1003() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %597 = sinh(%593) /* ty=Tensor[(14, 14, 16), float32] */;
  %598 = @func_755(%595) /* ty=Tensor[(16, 13, 8), bool] */;
  %599 = %596.0;
  (%597, %598, meta[relay.Constant][33] /* ty=Tensor[(1664), uint16] */, %599)
}

def @func_5673(%var_5671: Tensor[(288, 2), float64], %var_5672: Tensor[(9, 13, 7), int64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(288, 2), float32], Tensor[(14, 14, 16), uint64], Tensor[(9, 13, 7), int32]) {
  %618 = fn (%var_5638: Tensor[(288, 2), float64], %var_5666: Tensor[(9, 13, 7), int64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(288, 2), float32], Tensor[(14, 14, 16), uint64], Tensor[(9, 13, 7), int32]) {
    %600 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %601 = cast(%var_5638, dtype="float64") /* ty=Tensor[(288, 2), float64] */;
    %602 = reshape(%601, newshape=[576]) /* ty=Tensor[(576), float64] */;
    %603 = @func_4634(%602) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(4, 12, 12), uint32], Tensor[(576), float64]) */;
    %604 = cast(meta[relay.Constant][34] /* ty=Tensor[(288, 2), float64] */, dtype="float32") /* ty=Tensor[(288, 2), float32] */;
    %605 = shape_of(%var_5638, dtype="int32") /* ty=Tensor[(2), int32] */;
    %606 = cast(%var_5638, dtype="float32") /* ty=Tensor[(288, 2), float32] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %608 = cast(1 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %609 = reshape(%608, newshape=[]) /* ty=int64 */;
    %610 = @func_3287(%609) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32], Tensor[(16, 6), float32], int64) */;
    %611 = cast(1 /* ty=int64 */, dtype="int32") /* ty=int32 */;
    %612 = cast(%var_5666, dtype="int32") /* ty=Tensor[(9, 13, 7), int32] */;
    %613 = %600.0;
    %614 = %603.0;
    %615 = mod(%606, %607) /* ty=Tensor[(288, 2), float32] */;
    %616 = %610.0;
    %617 = bitwise_xor(%611, %612) /* ty=Tensor[(9, 13, 7), int32] */;
    (%613, %614, %615, %616, %617)
  };
  %618(%var_5671, %var_5672) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(288, 2), float32], Tensor[(14, 14, 16), uint64], Tensor[(9, 13, 7), int32]) */
}

def @func_2676() -> (Tensor[(14, 14, 16), uint64],) {
  %621 = fn () -> (Tensor[(14, 14, 16), uint64],) {
    %619 = @func_2412() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %620 = %619.0;
    (%620,)
  };
  %621() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_3603() -> (Tensor[(14, 14, 16), uint64],) {
  @func_3601() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_4590() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], int64, Tensor[(1664), uint16], Tensor[(3600), int16], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32]) {
  @func_4588() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], int64, Tensor[(1664), uint16], Tensor[(3600), int16], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(15, 13, 15), uint32]) */
}

def @func_3550() -> (Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %627 = fn () -> (Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
    %622 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %623 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %624 = @func_2370() /* ty=Tensor[(14, 14, 16), float32] */;
    %625 = %622.0;
    %626 = %623.0;
    (%624, %625, %626)
  };
  %627() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */
}

def @func_4059(%var_4058: Tensor[(14, 14, 16), float32]) -> (Tensor[(14, 14, 16), float64],) {
  %635 = fn (%var_4045: Tensor[(14, 14, 16), float32]) -> (Tensor[(14, 14, 16), float64],) {
    %628 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
    %629 = %628.0;
    %630 = cast(%var_4045, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
    %631 = shape_of(%629, dtype="int32") /* ty=Tensor[(3), int32] */;
    %632 = cast(%629, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
    %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %634 = maximum(%632, %633) /* ty=Tensor[(14, 14, 16), float64] */;
    (%634,)
  };
  %635(%var_4058) /* ty=(Tensor[(14, 14, 16), float64],) */
}

def @func_3116() -> (Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) {
  %636 = @func_2312() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %637 = cast(meta[relay.Constant][35] /* ty=Tensor[(96, 1), float32] */, dtype="float32") /* ty=Tensor[(96, 1), float32] */;
  %638 = reshape(%637, newshape=[8, 6, 2]) /* ty=Tensor[(8, 6, 2), float32] */;
  %639 = %636.0;
  %640 = @func_1251(%638) /* ty=Tensor[(8, 6, 2), float32] */;
  (%639, %640, meta[relay.Constant][35] /* ty=Tensor[(96, 1), float32] */)
}

def @func_1869(%var_1865: Tensor[(9, 3, 9), float32], %var_1866: Tensor[(600, 6), int16], %var_1867: Tensor[(416, 4), uint16], %var_1868: Tensor[(600, 6), int16]) -> (Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) {
  @func_1863(%var_1865, %var_1866, %var_1867, %var_1868) /* ty=(Tensor[(9, 3, 9), float32], Tensor[(15, 16, 15), bool], Tensor[(60), bool], Tensor[(600, 6), float32], Tensor[(16, 13, 8), bool], Tensor[(416, 4), uint16], Tensor[(600, 6), uint32], Tensor[(3600), int16]) */
}

def @func_1647(%var_1646: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), float64], Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16]) {
  %652 = fn (%var_1643: Tensor[(1664), uint16]) -> (Tensor[(14, 14, 16), float64], Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16]) {
    %641 = @func_1166() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %642 = %641.0;
    %643 = cast(%642, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
    %644 = cast(%642, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
    %645 = acosh(%644) /* ty=Tensor[(14, 14, 16), float64] */;
    %646 = cast(%645, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
    %647 = cast(%var_1643, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
    %648 = reshape(%647, newshape=[16, 13, 8]) /* ty=Tensor[(16, 13, 8), uint16] */;
    %649 = log2(%643) /* ty=Tensor[(14, 14, 16), float64] */;
    %650 = log10(%646) /* ty=Tensor[(14, 14, 16), float32] */;
    %651 = @func_755(%648) /* ty=Tensor[(16, 13, 8), bool] */;
    (%649, %650, %651, %var_1643)
  };
  %652(%var_1646) /* ty=(Tensor[(14, 14, 16), float64], Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16]) */
}

def @func_5260(%var_5259: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) {
  %660 = fn (%var_5249: Tensor[(3600), int16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) {
    %653 = @func_2823() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %654 = cast(%var_5249, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %655 = cast(%var_5249, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %656 = reshape(%654, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
    %657 = reshape(%655, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
    %658 = %653.0;
    %659 = @func_89(%656, %657) /* ty=Tensor[(15, 16, 15), bool] */;
    (%658, %659, %var_5249)
  };
  %660(%var_5259) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16]) */
}

def @func_2312() -> (Tensor[(14, 14, 16), uint64],) {
  %661 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %662 = %661.0;
  (%662,)
}

def @func_3573() -> (Tensor[(14, 14, 16), uint64],) {
  %665 = fn () -> (Tensor[(14, 14, 16), uint64],) {
    %663 = @func_2199() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16], Tensor[(14, 14, 16), uint64]) */;
    %664 = %663.3;
    (%664,)
  };
  %665() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_1987() -> Tensor[(14, 14, 16), uint64] {
  %666 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %666.1
}

def @func_4090() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  @func_4088() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */
}

def @func_4330() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(6, 5, 2), float64], Tensor[(60), bool], Tensor[(3600), int16]) {
  @func_4328() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(6, 5, 2), float64], Tensor[(60), bool], Tensor[(3600), int16]) */
}

def @func_2573() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) {
  @func_2571() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) */
}

def @func_4275(%var_4273: Tensor[(576), float64]) -> (Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(576), uint16]) {
  @func_4272(%var_4273) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(9, 11, 4), float64], Tensor[(576), uint16]) */
}

def @func_5123() -> (Tensor[(14, 14, 16), float64],) {
  %667 = @func_2338() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %668 = %667.1;
  %669 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %673 = floor_divide(%671, %672) /* ty=Tensor[(14, 14, 16), float64] */;
  (%673,)
}

def @func_3480() -> Tensor[(14, 14, 16), uint64] {
  %674 = @func_3116() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96, 1), float32]) */;
  %674.0
}

def @func_5466(%var_5420: Tensor[(8, 7, 12), int32], %var_5421: Tensor[(8, 7, 12), int32], %var_5443: Tensor[(52, 32), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(1664), float32], Tensor[(8, 7, 12), bool]) {
  %675 = @func_5053() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %676 = cast(%var_5443, dtype="uint16") /* ty=Tensor[(52, 32), uint16] */;
  %677 = reshape(%676, newshape=[1664]) /* ty=Tensor[(1664), uint16] */;
  %678 = @func_1645(%677) /* ty=(Tensor[(14, 14, 16), float64], Tensor[(14, 14, 16), float32], Tensor[(16, 13, 8), bool], Tensor[(1664), uint16]) */;
  %679 = %678.3;
  %680 = cast(%var_5443, dtype="float32") /* ty=Tensor[(52, 32), float32] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(1), int32] */;
  %682 = cast(%679, dtype="float32") /* ty=Tensor[(1664), float32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?), float32] */;
  %684 = cast(%var_5421, dtype="int32") /* ty=Tensor[(8, 7, 12), int32] */;
  %685 = shape_of(%var_5420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%var_5420, dtype="int32") /* ty=Tensor[(8, 7, 12), int32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %688 = add(%686, %687) /* ty=Tensor[(8, 7, 12), int32] */;
  %689 = cast(%688, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %690 = shape_of(%var_5420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_5420, dtype="bool") /* ty=Tensor[(8, 7, 12), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %693 = %675.0;
  %694 = floor_divide(%682, %683) /* ty=Tensor[(1664), float32] */;
  %695 = less_equal(%691, %692) /* ty=Tensor[(8, 7, 12), bool] */;
  (%693, %694, %695)
}

def @func_2716(%var_2714: Tensor[(14, 14, 16), uint64], %var_2715: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), int32], Tensor[(14, 14, 16), bool]) {
  %707 = fn (%var_2687: Tensor[(14, 14, 16), uint64], %var_2705: Tensor[(14, 14, 16), uint64]) -> (Tensor[(14, 14, 16), int32], Tensor[(14, 14, 16), bool]) {
    %696 = @func_1987() /* ty=Tensor[(14, 14, 16), uint64] */;
    %697 = cast(%var_2687, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
    %698 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%696, dtype="int32") /* ty=Tensor[(14, 14, 16), int32] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %701 = cast(%var_2705, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
    %702 = shape_of(%696, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(%696, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %705 = bitwise_and(%699, %700) /* ty=Tensor[(14, 14, 16), int32] */;
    %706 = less(%703, %704) /* ty=Tensor[(14, 14, 16), bool] */;
    (%705, %706)
  };
  %707(%var_2714, %var_2715) /* ty=(Tensor[(14, 14, 16), int32], Tensor[(14, 14, 16), bool]) */
}

def @func_4608() -> (Tensor[(96, 1), float64],) {
  @func_4606() /* ty=(Tensor[(96, 1), float64],) */
}

def @func_2370() -> Tensor[(14, 14, 16), float32] {
  %708 = @func_1704() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), float32]) */;
  %708.1
}

def @func_2372() -> Tensor[(14, 14, 16), float32] {
  @func_2370() /* ty=Tensor[(14, 14, 16), float32] */
}

def @func_2278(%var_2276: Tensor[(96), float32], %var_2277: int64) -> (Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96), float32], Tensor[(15, 13, 15), uint32], int64) {
  @func_2274(%var_2276, %var_2277) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(8, 6, 2), float32], Tensor[(96), float32], Tensor[(15, 13, 15), uint32], int64) */
}

def @func_3907() -> (Tensor[(14, 14, 16), float32],) {
  %711 = fn () -> (Tensor[(14, 14, 16), float32],) {
    %709 = @func_3549() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
    %710 = %709.0;
    (%710,)
  };
  %711() /* ty=(Tensor[(14, 14, 16), float32],) */
}

def @func_3156(%var_3155: Tensor[(3600), int16]) -> (Tensor[(1664), int32], Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16], Tensor[(10, 10, 8), uint32], Tensor[(800), uint32]) {
  %724 = fn (%var_3144: Tensor[(3600), int16]) -> (Tensor[(1664), int32], Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16], Tensor[(10, 10, 8), uint32], Tensor[(800), uint32]) {
    %712 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
    %713 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %714 = cast(%var_3144, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %715 = cast(%var_3144, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %716 = reshape(%714, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
    %717 = reshape(%715, newshape=[15, 16, 15]) /* ty=Tensor[(15, 16, 15), int16] */;
    %718 = cast(meta[relay.Constant][37] /* ty=Tensor[(800), uint32] */, dtype="uint32") /* ty=Tensor[(800), uint32] */;
    %719 = reshape(%718, newshape=[10, 10, 8]) /* ty=Tensor[(10, 10, 8), uint32] */;
    %720 = %712.2;
    %721 = %713.0;
    %722 = @func_89(%716, %717) /* ty=Tensor[(15, 16, 15), bool] */;
    %723 = @func_1936(%719) /* ty=Tensor[(10, 10, 8), uint32] */;
    (%720, %721, %722, %var_3144, %723, meta[relay.Constant][37] /* ty=Tensor[(800), uint32] */)
  };
  %724(%var_3155) /* ty=(Tensor[(1664), int32], Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16], Tensor[(10, 10, 8), uint32], Tensor[(800), uint32]) */
}

def @func_2412() -> (Tensor[(14, 14, 16), uint64],) {
  %725 = @func_1512() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) */;
  %726 = %725.0;
  (%726,)
}

def @func_134(%var_132: Tensor[(14, 10, 4), int8], %var_133: Tensor[(2, 1800), int16]) -> (Tensor[(15, 16, 15), bool], Tensor[(2, 1800), float64], Tensor[(14, 10, 4), float32]) {
  @func_130(%var_132, %var_133) /* ty=(Tensor[(15, 16, 15), bool], Tensor[(2, 1800), float64], Tensor[(14, 10, 4), float32]) */
}

def @func_3708() -> (Tensor[(14, 14, 16), uint64],) {
  %728 = fn () -> (Tensor[(14, 14, 16), uint64],) {
    %727 = @func_3480() /* ty=Tensor[(14, 14, 16), uint64] */;
    (%727,)
  };
  %728() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_5419() -> Tensor[(14, 14, 16), bool] {
  %735 = fn () -> Tensor[(14, 14, 16), bool] {
    %729 = @func_2140() /* ty=(Tensor[(14, 14, 16), float32], Tensor[(14, 14, 16), uint64], Tensor[(576, ?), uint64]) */;
    %730 = %729.1;
    %731 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 14, 16), uint64] */, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
    %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
    %733 = cast(%730, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
    %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%733, %734) /* ty=Tensor[(14, 14, 16), bool] */
  };
  %735() /* ty=Tensor[(14, 14, 16), bool] */
}

def @func_4166(%var_4162: Tensor[(5, 12, 8), uint64], %var_4163: Tensor[(5, 12, 8), bool], %var_4164: Tensor[(1, 243), float32], %var_4165: Tensor[(1664), uint16]) -> (Tensor[(5, 12, 8), bool], Tensor[(5, 12, 8), float32], Tensor[(600, 6), int16], Tensor[(1, 243), float32], Tensor[(3600), int16], Tensor[(1664), uint16]) {
  %756 = fn (%var_4134: Tensor[(5, 12, 8), uint64], %var_4141: Tensor[(5, 12, 8), bool], %var_4157: Tensor[(1, 243), float32], %var_4159: Tensor[(1664), uint16]) -> (Tensor[(5, 12, 8), bool], Tensor[(5, 12, 8), float32], Tensor[(600, 6), int16], Tensor[(1, 243), float32], Tensor[(3600), int16], Tensor[(1664), uint16]) {
    %736 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 12, 8), uint64] */, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
    %737 = shape_of(%var_4134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%var_4134, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %740 = less_equal(%738, %739) /* ty=Tensor[(5, 12, 8), bool] */;
    %741 = cast(%var_4141, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
    %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
    %743 = cast(%740, dtype="bool") /* ty=Tensor[(5, 12, 8), bool] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %745 = cast(%var_4134, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
    %746 = cast(%var_4157, dtype="float32") /* ty=Tensor[(1, 243), float32] */;
    %747 = cast(meta[relay.Constant][40] /* ty=Tensor[(3600), int16] */, dtype="int16") /* ty=Tensor[(3600), int16] */;
    %748 = cast(%var_4159, dtype="uint16") /* ty=Tensor[(1664), uint16] */;
    %749 = reshape(%746, newshape=[243]) /* ty=Tensor[(243), float32] */;
    %750 = reshape(%747, newshape=[600, 6]) /* ty=Tensor[(600, 6), int16] */;
    %751 = reshape(%748, newshape=[1664]) /* ty=Tensor[(1664), uint16] */;
    %752 = @func_3885(%749, %750, %751) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(60), bool], Tensor[(243), float32], Tensor[(600, 6), int16], Tensor[(1664), uint16]) */;
    %753 = equal(%743, %744) /* ty=Tensor[(5, 12, 8), bool] */;
    %754 = acosh(%745) /* ty=Tensor[(5, 12, 8), float32] */;
    %755 = %752.3;
    (%753, %754, %755, %var_4157, meta[relay.Constant][40] /* ty=Tensor[(3600), int16] */, %var_4159)
  };
  %756(%var_4162, %var_4163, %var_4164, %var_4165) /* ty=(Tensor[(5, 12, 8), bool], Tensor[(5, 12, 8), float32], Tensor[(600, 6), int16], Tensor[(1, 243), float32], Tensor[(3600), int16], Tensor[(1664), uint16]) */
}

def @func_2825() -> (Tensor[(14, 14, 16), uint64],) {
  @func_2823() /* ty=(Tensor[(14, 14, 16), uint64],) */
}

def @func_2823() -> (Tensor[(14, 14, 16), uint64],) {
  %757 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %758 = %757.0;
  (%758,)
}

def @func_5601() -> Tensor[(14, 14, 16), uint64] {
  %760 = fn () -> Tensor[(14, 14, 16), uint64] {
    %759 = @func_1948() /* ty=(Tensor[(14, 14, 16), uint64],) */;
    %759.0
  };
  %760() /* ty=Tensor[(14, 14, 16), uint64] */
}

def @func_5824() -> (Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(600, 6), float64]) {
  %769 = fn () -> (Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(600, 6), float64]) {
    %761 = @func_3342() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(96, 1), float64]) */;
    %762 = cast(meta[relay.Constant][41] /* ty=Tensor[(600, 6), int16] */, dtype="int16") /* ty=Tensor[(600, 6), int16] */;
    %763 = reshape(%762, newshape=[3600]) /* ty=Tensor[(3600), int16] */;
    %764 = @func_3154(%763) /* ty=(Tensor[(1664), int32], Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(3600), int16], Tensor[(10, 10, 8), uint32], Tensor[(800), uint32]) */;
    %765 = cast(meta[relay.Constant][41] /* ty=Tensor[(600, 6), int16] */, dtype="float64") /* ty=Tensor[(600, 6), float64] */;
    %766 = %761.0;
    %767 = %764.2;
    %768 = rsqrt(%765) /* ty=Tensor[(600, 6), float64] */;
    (%766, %767, %768)
  };
  %769() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(15, 16, 15), bool], Tensor[(600, 6), float64]) */
}

def @func_2338() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64]) {
  %770 = @func_1736() /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), uint64], Tensor[(1664), int32]) */;
  %771 = @func_2086() /* ty=(Tensor[(14, 14, 16), uint64],) */;
  %772 = %770.0;
  %773 = %771.0;
  (%772, %773)
}

def @func_2571() -> (Tensor[(14, 14, 16), uint64], Tensor[(14, 14, 16), bool]) {
  %774 = @func_1494() /* ty=Tensor[(14, 14, 16), uint64] */;
  %775 = cast(%774, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  %776 = sin(%775) /* ty=Tensor[(14, 14, 16), float64] */;
  %777 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 14, 16), float64] */, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %781 = floor_mod(%779, %780) /* ty=Tensor[(14, 14, 16), float32] */;
  %782 = cast(%781, dtype="float32") /* ty=Tensor[(14, 14, 16), float32] */;
  %783 = sigmoid(%782) /* ty=Tensor[(14, 14, 16), float32] */;
  %784 = cast(%781, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="uint64") /* ty=Tensor[(14, 14, 16), uint64] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %788 = cast(%781, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %789 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%776, dtype="bool") /* ty=Tensor[(14, 14, 16), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = subtract(%786, %787) /* ty=Tensor[(14, 14, 16), uint64] */;
  %793 = logical_and(%790, %791) /* ty=Tensor[(14, 14, 16), bool] */;
  (%792, %793)
}

def @func_5471(%var_5468: Tensor[(8, 7, 12), int32], %var_5469: Tensor[(8, 7, 12), int32], %var_5470: Tensor[(52, 32), uint16]) -> (Tensor[(14, 14, 16), uint64], Tensor[(1664), float32], Tensor[(8, 7, 12), bool]) {
  @func_5466(%var_5468, %var_5469, %var_5470) /* ty=(Tensor[(14, 14, 16), uint64], Tensor[(1664), float32], Tensor[(8, 7, 12), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen83/build/output.py:2048: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen83/build/output.py:2053: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen83/build/output.py:2066: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen83/build/output.py:2071: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen83/build/output.py:2076: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen83/build/output.py:2081: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
def @main() -> (Tensor[(15, 5, 2), int16],) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 5, 2), float64] */, dtype="float64") /* GeneratedSource */ /* ty=Tensor[(15, 5, 2), float64] */;
  %1 = log2(%0) /* GeneratedSource */ /* ty=Tensor[(15, 5, 2), float64] */;
  %2 = cast(%1, dtype="int16") /* GeneratedSource */ /* ty=Tensor[(15, 5, 2), int16] */;
  %3 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(15, 5, 2), float64] */, dtype="int32") /* GeneratedSource */ /* ty=Tensor[(3), int32] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 5, 2), float64] */, dtype="int16") /* GeneratedSource */ /* ty=Tensor[(15, 5, 2), int16] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* GeneratedSource */ /* ty=Tensor[(?, ?, ?), int16] */;
  %6 = maximum(%4, %5) /* GeneratedSource */ /* ty=Tensor[(15, 5, 2), int16] */;
  (%6,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
