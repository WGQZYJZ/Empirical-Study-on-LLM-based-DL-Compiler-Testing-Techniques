==========mod==========
#[version = "0.0.5"]
def @func_1623(%var_1610: Tensor[(7, 14, 5), float64]) -> Tensor[(7, 14, 5), float64] {
  %0 = cast(%var_1610, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
  tan(%0) /* ty=Tensor[(7, 14, 5), float64] */
}

def @func_7524() -> (Tensor[(4, 12, 14), float32],) {
  %1 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %2 = %1.0;
  (%2,)
}

def @func_2012() -> Tensor[(4, 12, 14), float32] {
  %3 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %3.0
}

def @func_1780() -> Tensor[(4, 12, 14), float32] {
  %4 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %4.0
}

def @func_6897() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %5 = @func_5908() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %6 = @func_5908() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %7 = @func_5508() /* ty=Tensor[(4, 12, 14), float32] */;
  %8 = %5.0;
  %9 = %6.0;
  (%7, %8, %9)
}

def @func_3436() -> Tensor[(5, 7, 11), int64] {
  @func_3405() /* ty=Tensor[(5, 7, 11), int64] */
}

def @func_3012() -> Tensor[(4, 12, 14), float32] {
  @func_2277() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_7823() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(336, 1), int32]) {
  %10 = @func_4358() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %11 = @func_4951() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(336, 1), int32] */, dtype="int32") /* ty=Tensor[(336, 1), int32] */;
  %13 = reshape(%12, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %14 = @func_3835(%13) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %15 = %10.0;
  %16 = %11.0;
  %17 = %14.3;
  (%15, %16, %17, meta[relay.Constant][0] /* ty=Tensor[(336, 1), int32] */)
}

def @func_8770() -> (Tensor[(336, 1), int32],) {
  %18 = @func_8078() /* ty=Tensor[(336, 1), int32] */;
  (%18,)
}

def @func_8993() -> Tensor[(4, 12, 14), float32] {
  @func_6603() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_5469() -> Tensor[(4, 12, 14), float32] {
  @func_3167() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6253() -> (Tensor[(1372), uint16],) {
  %19 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %20 = %19.0;
  (%20,)
}

def @func_7498() -> (Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) {
  %21 = @func_7265() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %23 = reshape(%22, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %24 = %21.0;
  %25 = @func_1623(%23) /* ty=Tensor[(7, 14, 5), float64] */;
  (%24, %25, meta[relay.Constant][1] /* ty=Tensor[(490), float64] */)
}

def @func_8662() -> (Tensor[(4, 12, 14), float32], Tensor[(441), bool]) {
  %26 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  %27 = @func_7224() /* ty=Tensor[(441), bool] */;
  (%26, %27)
}

def @func_5908() -> (Tensor[(4, 12, 14), float32],) {
  %28 = @func_5743() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %29 = %28.0;
  (%29,)
}

def @func_4201(%var_4154: Tensor[(5, 7, 11), int64]) -> (Tensor[(5, 7, 11), float64], Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float64], Tensor[(336), int32]) {
  %30 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
  %31 = cast(%var_4154, dtype="float64") /* ty=Tensor[(5, 7, 11), float64] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="float64") /* ty=Tensor[(5, 7, 11), float64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %35 = cast(%30, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %37 = reshape(%36, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %38 = @func_3835(%37) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %39 = subtract(%33, %34) /* ty=Tensor[(5, 7, 11), float64] */;
  %40 = sinh(%35) /* ty=Tensor[(5, 7, 11), float32] */;
  %41 = %38.2;
  (%39, %40, %41, meta[relay.Constant][2] /* ty=Tensor[(336), int32] */)
}

def @func_6033() -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(7, 5, 2), float32], Tensor[(70), float32]) {
  %42 = @func_3752() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %43 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %45 = reshape(%44, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), float32] */;
  %46 = @func_5666(%45) /* ty=(Tensor[(7, 5, 2), float32],) */;
  %47 = %42.0;
  %48 = %43.1;
  %49 = %46.0;
  (%47, %48, %49, meta[relay.Constant][3] /* ty=Tensor[(70), float32] */)
}

def @func_3752() -> (Tensor[(4, 12, 14), float32],) {
  %50 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  (%50,)
}

def @func_215(%var_183: Tensor[(7, 9, 7), int32]) -> Tensor[(7, 9, 7), float32] {
  %51 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 9, 7), int32] */, dtype="int32") /* ty=Tensor[(7, 9, 7), int32] */;
  %52 = shape_of(%var_183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_183, dtype="int32") /* ty=Tensor[(7, 9, 7), int32] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %55 = bitwise_and(%53, %54) /* ty=Tensor[(7, 9, 7), int32] */;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
  exp(%56) /* ty=Tensor[(7, 9, 7), float32] */
}

def @func_7846() -> Tensor[(1372), uint8] {
  %57 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %58 = %57.1;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(1372), uint16] */, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
  %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(1), int32] */;
  %61 = cast(%58, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
  %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?), uint8] */;
  minimum(%61, %62) /* ty=Tensor[(1372), uint8] */
}

def @func_7459() -> (Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], Tensor[(1372, 1), float64], Tensor[(1372, 1), uint16]) {
  %63 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(1372, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1372, 1), uint16] */;
  %65 = reshape(%64, newshape=[1372, 1]) /* ty=Tensor[(1372, 1), uint16] */;
  %66 = @func_2715(%65) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) */;
  %67 = %63.0;
  %68 = @func_5285() /* ty=Tensor[(12, 3, 6), float32] */;
  %69 = %66.3;
  (%67, %68, %69, meta[relay.Constant][6] /* ty=Tensor[(1372, 1), uint16] */)
}

def @func_8608() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64]) {
  %70 = @func_6357() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %71 = %70.0;
  %72 = @func_5811() /* ty=Tensor[(4, 12, 14), float64] */;
  (%71, %72)
}

def @func_8088() -> Tensor[(12, 3, 6), float32] {
  @func_5285() /* ty=Tensor[(12, 3, 6), float32] */
}

def @func_2246() -> (Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) {
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %74 = reshape(%73, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %75 = @func_1940(%74) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
  %76 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 7, 11), uint16] */, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
  %77 = atanh(%76) /* ty=Tensor[(5, 7, 11), float32] */;
  %78 = cast(meta[relay.Constant][9] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %79 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 7, 11), uint16] */, dtype="bool") /* ty=Tensor[(5, 7, 11), bool] */;
  %80 = greater(%78, %79) /* ty=Tensor[(5, 7, 11), bool] */;
  %81 = cast(%80, dtype="int64") /* ty=Tensor[(5, 7, 11), int64] */;
  %82 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%77, dtype="int64") /* ty=Tensor[(5, 7, 11), int64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %85 = %75.4;
  %86 = add(%83, %84) /* ty=Tensor[(5, 7, 11), int64] */;
  (%85, meta[relay.Constant][7] /* ty=Tensor[(336), int32] */, %86)
}

def @func_7362(%var_7354: Tensor[(1, 1, 12), float64]) -> Tensor[(1, 1, 12), float64] {
  %87 = cast(%var_7354, dtype="float64") /* ty=Tensor[(1, 1, 12), float64] */;
  asin(%87) /* ty=Tensor[(1, 1, 12), float64] */
}

def @func_5983(%var_5963: uint16) -> (Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], uint16, Tensor[(1372), uint16], Tensor[(1, 1372), uint16], Tensor[(13, 10, 2), float32]) {
  %88 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %89 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 1372), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1372), uint16] */;
  %90 = reshape(%89, newshape=[1372]) /* ty=Tensor[(1372), uint16] */;
  %91 = @func_2429(%90) /* ty=(Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) */;
  %92 = cast(%var_5963, dtype="uint16") /* ty=uint16 */;
  %93 = reshape(%92, newshape=[]) /* ty=uint16 */;
  %94 = @func_4742(%93) /* ty=Tensor[(13, 10, 2), uint16] */;
  %95 = cast(%94, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %96 = %88.0;
  %97 = @func_5285() /* ty=Tensor[(12, 3, 6), float32] */;
  %98 = %91.2;
  %99 = exp(%95) /* ty=Tensor[(13, 10, 2), float32] */;
  (%96, %97, %var_5963, %98, meta[relay.Constant][10] /* ty=Tensor[(1, 1372), uint16] */, %99)
}

def @func_6746(%var_6735: Tensor[(11, 14, 9), float32], %var_6739: Tensor[(385), int64]) -> (Tensor[(11, 14, 9), float32], Tensor[(4, 12, 14), float64], Tensor[(385), int64]) {
  %100 = cast(%var_6735, dtype="float32") /* ty=Tensor[(11, 14, 9), float32] */;
  %101 = cast(%var_6739, dtype="int64") /* ty=Tensor[(385), int64] */;
  %102 = reshape(%101, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
  %103 = @func_4201(%102) /* ty=(Tensor[(5, 7, 11), float64], Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float64], Tensor[(336), int32]) */;
  %104 = cos(%100) /* ty=Tensor[(11, 14, 9), float32] */;
  %105 = %103.2;
  (%104, %105, %var_6739)
}

def @func_7640() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %106 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  %107 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  %108 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
  %109 = @func_7330() /* ty=Tensor[(4, 12, 14), float32] */;
  (%106, %107, %108, %109)
}

def @func_8120() -> Tensor[(4, 12, 14), float32] {
  %110 = @func_6635() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %110.1
}

def @func_9417() -> Tensor[(1372), uint16] {
  %111 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %111.0
}

def @func_7394() -> Tensor[(4, 12, 14), float32] {
  %112 = @func_6241() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(336), float64], Tensor[(4, 12, 14), float32], Tensor[(1372), bool], Tensor[(1372), float64]) */;
  %112.0
}

def @func_1727(%var_1691: Tensor[(112), int32], %var_1692: Tensor[(336), int32], %var_1712: Tensor[(4, 12, 14), float32]) -> (Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) {
  %113 = cast(%var_1691, dtype="int32") /* ty=Tensor[(112), int32] */;
  %114 = cast(%var_1692, dtype="int32") /* ty=Tensor[(336), int32] */;
  %115 = reshape(%113, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), int32] */;
  %116 = reshape(%114, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int32] */;
  %117 = @func_869(%115, %116) /* ty=(Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) */;
  %118 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  %119 = cast(%var_1712, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%118, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %123 = %117.3;
  %124 = equal(%121, %122) /* ty=Tensor[(4, 12, 14), bool] */;
  (%123, %var_1691, %var_1692, %124)
}

def @func_2640(%var_2615: float64, %var_2616: Tensor[(11, 1, 7), float64]) -> Tensor[(11, 1, 7), float64] {
  %125 = cast(%var_2615, dtype="bool") /* ty=bool */;
  %126 = cast(%var_2616, dtype="bool") /* ty=Tensor[(11, 1, 7), bool] */;
  %127 = less_equal(%125, %126) /* ty=Tensor[(11, 1, 7), bool] */;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(11, 1, 7), float32] */;
  %129 = atanh(%128) /* ty=Tensor[(11, 1, 7), float32] */;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(11, 1, 7), float64] */;
  sinh(%130) /* ty=Tensor[(11, 1, 7), float64] */
}

def @func_4916(%var_4891: Tensor[(9, 8, 10), uint32], %var_4892: Tensor[(9, 8, 10), uint32], %var_4905: Tensor[(490), float64]) -> (Tensor[(7, 14, 5), float64], Tensor[(490), float64], Tensor[(9, 8, 10), int64]) {
  %131 = cast(%var_4905, dtype="float64") /* ty=Tensor[(490), float64] */;
  %132 = reshape(%131, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %133 = cast(%var_4892, dtype="uint32") /* ty=Tensor[(9, 8, 10), uint32] */;
  %134 = shape_of(%var_4891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%var_4891, dtype="uint32") /* ty=Tensor[(9, 8, 10), uint32] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %137 = multiply(%135, %136) /* ty=Tensor[(9, 8, 10), uint32] */;
  %138 = cast(%137, dtype="int64") /* ty=Tensor[(9, 8, 10), int64] */;
  %139 = shape_of(%var_4891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_4891, dtype="int64") /* ty=Tensor[(9, 8, 10), int64] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %142 = @func_1623(%132) /* ty=Tensor[(7, 14, 5), float64] */;
  %143 = add(%140, %141) /* ty=Tensor[(9, 8, 10), int64] */;
  (%142, %var_4905, %143)
}

def @func_5811() -> Tensor[(4, 12, 14), float64] {
  @func_5529() /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_6501(%var_6493: Tensor[(3, 10, 13), bool], %var_6494: Tensor[(3, 10, 13), bool]) -> (Tensor[(3, 10, 13), bool],) {
  %144 = cast(%var_6494, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %145 = shape_of(%var_6493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_6493, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = logical_or(%146, %147) /* ty=Tensor[(3, 10, 13), bool] */;
  (%148,)
}

def @func_2942(%var_2911: Tensor[(168, 2), int32], %var_2921: Tensor[(4, 28), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(168, 2), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), bool], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) {
  %149 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %150 = cast(%var_2911, dtype="int32") /* ty=Tensor[(168, 2), int32] */;
  %151 = reshape(%150, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %152 = @func_1940(%151) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
  %153 = %152.3;
  %154 = cast(%var_2921, dtype="bool") /* ty=Tensor[(4, 28), bool] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(2), int32] */;
  %156 = cast(%153, dtype="bool") /* ty=Tensor[(4, 28), bool] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %158 = cast(%153, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
  %159 = shape_of(%var_2921, dtype="int32") /* ty=Tensor[(2), int32] */;
  %160 = cast(%var_2921, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %162 = cast(%var_2921, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %163 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  %164 = %149.1;
  %165 = less(%156, %157) /* ty=Tensor[(4, 28), bool] */;
  %166 = logical_xor(%160, %161) /* ty=Tensor[(4, 28), uint8] */;
  %167 = tan(%162) /* ty=Tensor[(4, 28), float64] */;
  (%163, %var_2911, %164, %165, %166, %167)
}

def @func_9084() -> (Tensor[(4, 12, 14), float32],) {
  %168 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %169 = %168.2;
  (%169,)
}

def @func_9271(%var_9247: Tensor[(9, 14, 7), uint32], %var_9248: Tensor[(9, 14, 7), uint32]) -> (Tensor[(9, 14, 7), uint32], Tensor[(312, 1), uint64], Tensor[(28), int32], Tensor[(4, 12, 14), float32]) {
  %170 = cast(%var_9248, dtype="uint32") /* ty=Tensor[(9, 14, 7), uint32] */;
  %171 = shape_of(%var_9247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_9247, dtype="uint32") /* ty=Tensor[(9, 14, 7), uint32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %174 = cast(meta[relay.Constant][11] /* ty=Tensor[(28), int32] */, dtype="int32") /* ty=Tensor[(28), int32] */;
  %175 = reshape(%174, newshape=[14, 1, 2]) /* ty=Tensor[(14, 1, 2), int32] */;
  %176 = @func_7892(%175) /* ty=(Tensor[(14, 11, 2), bool], Tensor[(3, 8, 13), float64], Tensor[(312, 1), uint64]) */;
  %177 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %178 = maximum(%172, %173) /* ty=Tensor[(9, 14, 7), uint32] */;
  %179 = %176.2;
  %180 = %177.0;
  (%178, %179, meta[relay.Constant][11] /* ty=Tensor[(28), int32] */, %180)
}

def @func_9549() -> Tensor[(4, 12, 14), float32] {
  @func_1566() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_7181() -> Tensor[(4, 12, 14), float32] {
  @func_6603() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_7597(%var_7564: Tensor[(7, 12, 12), uint16], %var_7565: Tensor[(7, 12, 12), uint16]) -> (Tensor[(7, 12, 12), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(3, 10, 13), bool], Tensor[(390, 1), bool], Tensor[(7, 9, 7), float32], Tensor[(336), int32]) {
  %181 = cast(%var_7565, dtype="uint16") /* ty=Tensor[(7, 12, 12), uint16] */;
  %182 = shape_of(%var_7564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%var_7564, dtype="uint16") /* ty=Tensor[(7, 12, 12), uint16] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %185 = @func_4358() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(390, 1), bool] */, dtype="bool") /* ty=Tensor[(390, 1), bool] */;
  %187 = cast(meta[relay.Constant][12] /* ty=Tensor[(390, 1), bool] */, dtype="bool") /* ty=Tensor[(390, 1), bool] */;
  %188 = reshape(%186, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %189 = reshape(%187, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %190 = @func_6501(%188, %189) /* ty=(Tensor[(3, 10, 13), bool],) */;
  %191 = cast(meta[relay.Constant][13] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %192 = reshape(%191, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
  %193 = @func_3742(%192) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
  %194 = maximum(%183, %184) /* ty=Tensor[(7, 12, 12), uint16] */;
  %195 = @func_7330() /* ty=Tensor[(4, 12, 14), float32] */;
  %196 = %185.0;
  %197 = %190.0;
  %198 = %193.3;
  (%194, %195, %196, %197, meta[relay.Constant][12] /* ty=Tensor[(390, 1), bool] */, %198, meta[relay.Constant][13] /* ty=Tensor[(336), int32] */)
}

def @func_6635() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %199 = @func_6357() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %200 = %199.0;
  %201 = @func_5469() /* ty=Tensor[(4, 12, 14), float32] */;
  (%200, %201)
}

def @func_3767() -> (Tensor[(4, 12, 14), float32],) {
  %202 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %203 = %202.0;
  (%203,)
}

def @func_1566() -> Tensor[(4, 12, 14), float32] {
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  log2(%204) /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6132(%var_6125: Tensor[(3, 8, 13), uint64], %var_6126: Tensor[(3, 8, 13), uint64]) -> (Tensor[(3, 8, 13), float64],) {
  %205 = cast(%var_6126, dtype="bool") /* ty=Tensor[(3, 8, 13), bool] */;
  %206 = shape_of(%var_6125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_6125, dtype="bool") /* ty=Tensor[(3, 8, 13), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = less(%207, %208) /* ty=Tensor[(3, 8, 13), bool] */;
  %210 = cast(%209, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
  %211 = exp(%210) /* ty=Tensor[(3, 8, 13), float64] */;
  (%211,)
}

def @func_5743() -> (Tensor[(4, 12, 14), float32],) {
  %212 = @func_3752() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %213 = %212.0;
  (%213,)
}

def @func_3459() -> (Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) {
  %214 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %216 = reshape(%215, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %217 = @func_3066(%216) /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %218 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %219 = %217.2;
  %220 = %218.1;
  (%214, %219, %220)
}

def @func_9291() -> Tensor[(4, 12, 14), float32] {
  %221 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %221.0
}

def @func_9574() -> (Tensor[(4, 12, 14), float32],) {
  %222 = @func_7640() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %223 = %222.2;
  (%223,)
}

def @func_9441() -> Tensor[(4, 12, 14), float32] {
  %224 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %224.0
}

def @func_9135() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(1372), uint16]) {
  %225 = @func_7524() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %226 = cast(meta[relay.Constant][15] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %227 = reshape(%226, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %228 = @func_1940(%227) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
  %229 = cast(meta[relay.Constant][15] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %230 = reshape(%229, newshape=[168, 2]) /* ty=Tensor[(168, 2), int32] */;
  %231 = @func_8130(%230) /* ty=(Tensor[(1372), uint16], Tensor[(4, 28), int32], Tensor[(168, 2), int32]) */;
  %232 = @func_7394() /* ty=Tensor[(4, 12, 14), float32] */;
  %233 = %225.0;
  %234 = %228.0;
  %235 = %231.0;
  (%232, %233, %234, meta[relay.Constant][15] /* ty=Tensor[(336), int32] */, %235)
}

def @func_1940(%var_1894: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) {
  %236 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %237 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %238 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 28), int32] */, dtype="int32") /* ty=Tensor[(4, 28), int32] */;
  %239 = cast(%var_1894, dtype="int32") /* ty=Tensor[(336), int32] */;
  %240 = reshape(%238, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), int32] */;
  %241 = reshape(%239, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int32] */;
  %242 = @func_869(%240, %241) /* ty=(Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) */;
  %243 = %236.1;
  %244 = %237.0;
  %245 = %242.6;
  (%243, %244, %245, meta[relay.Constant][16] /* ty=Tensor[(4, 28), int32] */, %var_1894)
}

def @func_5141() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %246 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %247 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %248 = %246.1;
  %249 = %247.0;
  (%248, %249)
}

def @func_2588(%var_2566: Tensor[(336), int32], %var_2567: Tensor[(672), float32]) -> (Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) {
  %250 = cast(meta[relay.Constant][17] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %251 = cast(%var_2566, dtype="int32") /* ty=Tensor[(336), int32] */;
  %252 = cast(%var_2567, dtype="float32") /* ty=Tensor[(672), float32] */;
  %253 = reshape(%250, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %254 = reshape(%251, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %255 = reshape(%252, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
  %256 = @func_1727(%253, %254, %255) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
  %257 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %258 = %257.2;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
  %260 = asinh(%259) /* ty=Tensor[(5, 7, 11), float32] */;
  %261 = cast(%258, dtype="int8") /* ty=Tensor[(5, 7, 11), int8] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="int8") /* ty=Tensor[(5, 7, 11), int8] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %265 = right_shift(%263, %264) /* ty=Tensor[(5, 7, 11), int8] */;
  %266 = cast(%265, dtype="uint32") /* ty=Tensor[(5, 7, 11), uint32] */;
  %267 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%260, dtype="uint32") /* ty=Tensor[(5, 7, 11), uint32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %270 = %256.2;
  %271 = multiply(%268, %269) /* ty=Tensor[(5, 7, 11), uint32] */;
  (%270, meta[relay.Constant][17] /* ty=Tensor[(112), int32] */, %var_2566, %var_2567, %271)
}

def @func_6078() -> (Tensor[(4, 12, 14), float32],) {
  %272 = @func_4553() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %273 = %272.0;
  (%273,)
}

def @func_6483() -> Tensor[(4, 12, 14), float32] {
  @func_1566() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6928() -> (Tensor[(4, 12, 14), float32],) {
  %274 = @func_4376() /* ty=Tensor[(4, 12, 14), float32] */;
  (%274,)
}

def @func_2845() -> (Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
  %275 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %276 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %277 = %275.0;
  %278 = %276.1;
  (%277, %278)
}

def @func_3338(%var_3314: Tensor[(5, 7, 11), int64]) -> Tensor[(5, 7, 11), bool] {
  %279 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %280 = %279.2;
  %281 = cast(%var_3314, dtype="bool") /* ty=Tensor[(5, 7, 11), bool] */;
  %282 = shape_of(%280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%280, dtype="bool") /* ty=Tensor[(5, 7, 11), bool] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%283, %284) /* ty=Tensor[(5, 7, 11), bool] */
}

def @func_8804() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) {
  %285 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %286 = %285.0;
  %287 = @func_6672() /* ty=Tensor[(4, 12, 14), float64] */;
  %288 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  (%286, %287, %288)
}

def @func_4553() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %289 = @func_3530() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %290 = %289.0;
  %291 = @func_4376() /* ty=Tensor[(4, 12, 14), float32] */;
  %292 = cast(%291, dtype="uint8") /* ty=Tensor[(4, 12, 14), uint8] */;
  %293 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%290, dtype="uint8") /* ty=Tensor[(4, 12, 14), uint8] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %296 = right_shift(%294, %295) /* ty=Tensor[(4, 12, 14), uint8] */;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %298 = @func_3752() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %299 = acos(%297) /* ty=Tensor[(4, 12, 14), float32] */;
  %300 = %298.0;
  (%299, %300)
}

def @func_5424(%var_5398: Tensor[(4, 12, 14), float32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %301 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  %302 = cast(%var_5398, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = less(%304, %305) /* ty=Tensor[(4, 12, 14), bool] */;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %308 = @func_5141() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %309 = erf(%307) /* ty=Tensor[(4, 12, 14), float32] */;
  %310 = %308.0;
  (%309, %310)
}

def @func_2527(%var_2447: Tensor[(336), int32], %var_2453: Tensor[(4, 28), int32], %var_2469: Tensor[(4, 28), uint32]) -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) {
  %311 = cast(%var_2447, dtype="int32") /* ty=Tensor[(336), int32] */;
  %312 = reshape(%311, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %313 = @func_1940(%312) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
  %314 = %313.3;
  %315 = cast(%var_2453, dtype="uint32") /* ty=Tensor[(4, 28), uint32] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(2), int32] */;
  %317 = cast(%314, dtype="uint32") /* ty=Tensor[(4, 28), uint32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %319 = add(%317, %318) /* ty=Tensor[(4, 28), uint32] */;
  %320 = cast(%var_2469, dtype="int8") /* ty=Tensor[(4, 28), int8] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(2), int32] */;
  %322 = cast(%319, dtype="int8") /* ty=Tensor[(4, 28), int8] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %324 = multiply(%322, %323) /* ty=Tensor[(4, 28), int8] */;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %326 = shape_of(%var_2469, dtype="int32") /* ty=Tensor[(2), int32] */;
  %327 = cast(%var_2469, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %329 = floor_divide(%327, %328) /* ty=Tensor[(4, 28), float64] */;
  %330 = cast(%329, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
  %331 = shape_of(%324, dtype="int32") /* ty=Tensor[(2), int32] */;
  %332 = cast(%324, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %334 = cast(%314, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %335 = shape_of(%329, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%329, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %338 = divide(%336, %337) /* ty=Tensor[(4, 28), float32] */;
  %339 = cast(%338, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %340 = shape_of(%324, dtype="int32") /* ty=Tensor[(2), int32] */;
  %341 = cast(%324, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %343 = mod(%341, %342) /* ty=Tensor[(4, 28), float64] */;
  %344 = cast(%324, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(2), int32] */;
  %346 = cast(%343, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %348 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
  %349 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
  %350 = right_shift(%332, %333) /* ty=Tensor[(4, 28), uint8] */;
  %351 = power(%346, %347) /* ty=Tensor[(4, 28), float64] */;
  (%348, %var_2447, %349, %350, %351)
}

def @func_3835(%var_3801: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
  %352 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %353 = cast(%var_3801, dtype="int32") /* ty=Tensor[(336), int32] */;
  %354 = reshape(%353, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
  %355 = @func_3742(%354) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
  %356 = cast(%var_3801, dtype="int32") /* ty=Tensor[(336), int32] */;
  %357 = %352.2;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %359 = reshape(%356, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %360 = reshape(%358, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %361 = @func_2588(%359, %360) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
  %362 = @func_3530() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %363 = @func_3405() /* ty=Tensor[(5, 7, 11), int64] */;
  %364 = %355.1;
  %365 = %361.2;
  %366 = %362.0;
  (%357, %363, %364, %var_3801, %365, %366)
}

def @func_6849() -> (Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %367 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  %368 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 390), bool] */, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %369 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 390), bool] */, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %370 = reshape(%368, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %371 = reshape(%369, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %372 = @func_6501(%370, %371) /* ty=(Tensor[(3, 10, 13), bool],) */;
  %373 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %374 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %375 = acos(%367) /* ty=Tensor[(2, 7, 7), float32] */;
  %376 = %372.0;
  %377 = %373.1;
  %378 = %374.1;
  (%375, %376, meta[relay.Constant][19] /* ty=Tensor[(1, 390), bool] */, %377, %378)
}

def @func_5387(%var_5364: Tensor[(100), float64]) -> (Tensor[(672), float32], Tensor[(100), float64], Tensor[(4, 12, 14), int8], Tensor[(336, 1), float32]) {
  %379 = cast(meta[relay.Constant][20] /* ty=Tensor[(336, 1), int32] */, dtype="int32") /* ty=Tensor[(336, 1), int32] */;
  %380 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %382 = reshape(%379, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %383 = reshape(%381, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %384 = @func_2588(%382, %383) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
  %385 = cast(%var_5364, dtype="float64") /* ty=Tensor[(100), float64] */;
  %386 = reshape(%385, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), float64] */;
  %387 = @func_4115(%386) /* ty=(Tensor[(5, 4, 5), float64], Tensor[(4, 12, 14), float32]) */;
  %388 = %387.1;
  %389 = cast(%388, dtype="int8") /* ty=Tensor[(4, 12, 14), int8] */;
  %390 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%380, dtype="int8") /* ty=Tensor[(4, 12, 14), int8] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %393 = cast(meta[relay.Constant][20] /* ty=Tensor[(336, 1), int32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %394 = %384.3;
  %395 = logical_xor(%391, %392) /* ty=Tensor[(4, 12, 14), int8] */;
  %396 = acosh(%393) /* ty=Tensor[(336, 1), float32] */;
  (%394, %var_5364, %395, %396)
}

def @func_3514(%var_3496: float64, %var_3497: Tensor[(77), float64]) -> (Tensor[(4, 12, 14), float32], Tensor[(11, 1, 7), float64], float64, Tensor[(77), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
  %397 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %398 = cast(%var_3496, dtype="float64") /* ty=float64 */;
  %399 = cast(%var_3497, dtype="float64") /* ty=Tensor[(77), float64] */;
  %400 = reshape(%398, newshape=[]) /* ty=float64 */;
  %401 = reshape(%399, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
  %402 = cast(%var_3497, dtype="float32") /* ty=Tensor[(77), float32] */;
  %403 = %397.0;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %405 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %406 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %407 = reshape(%404, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
  %408 = reshape(%405, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %409 = reshape(%406, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %410 = @func_2787(%407, %408, %409) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), uint16]) */;
  %411 = @func_2640(%400, %401) /* ty=Tensor[(11, 1, 7), float64] */;
  %412 = cos(%402) /* ty=Tensor[(77), float32] */;
  %413 = %410.0;
  (%403, %411, %var_3496, %412, %413, meta[relay.Constant][21] /* ty=Tensor[(336), int32] */)
}

def @func_8078() -> Tensor[(336, 1), int32] {
  %414 = @func_7823() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(336, 1), int32]) */;
  %414.3
}

def @func_8366() -> Tensor[(4, 12, 14), float32] {
  @func_3167() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6268() -> (Tensor[(4, 12, 14), float32],) {
  %415 = @func_4951() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %416 = %415.0;
  (%416,)
}

def @func_4416() -> (Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %417 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %418 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %419 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %420 = %417.1;
  %421 = %418.0;
  %422 = %419.0;
  (%420, %421, %422)
}

def @func_7330() -> Tensor[(4, 12, 14), float32] {
  @func_6483() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_4708(%var_4623: Tensor[(1372), uint16], %var_4654: Tensor[(1372), uint16]) -> (Tensor[(1372), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(1372), float64], Tensor[(1372), float64]) {
  %423 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %424 = %423.1;
  %425 = cast(%var_4623, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(1), int32] */;
  %427 = cast(%424, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?), float64] */;
  %429 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %430 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %431 = cast(%var_4654, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
  %432 = shape_of(%var_4623, dtype="int32") /* ty=Tensor[(1), int32] */;
  %433 = cast(%var_4623, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %435 = multiply(%433, %434) /* ty=Tensor[(1372), uint8] */;
  %436 = cast(%435, dtype="uint16") /* ty=Tensor[(1372), uint16] */;
  %437 = reshape(%436, newshape=[1372, 1]) /* ty=Tensor[(1372, 1), uint16] */;
  %438 = @func_2715(%437) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) */;
  %439 = cast(%424, dtype="float32") /* ty=Tensor[(1372), float32] */;
  %440 = acos(%439) /* ty=Tensor[(1372), float32] */;
  %441 = cast(%435, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(1), int32] */;
  %443 = cast(%440, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?), float64] */;
  %445 = cast(%440, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %446 = power(%427, %428) /* ty=Tensor[(1372), float64] */;
  %447 = %429.0;
  %448 = %430.0;
  %449 = %438.2;
  %450 = floor_mod(%443, %444) /* ty=Tensor[(1372), float64] */;
  %451 = asin(%445) /* ty=Tensor[(1372), float64] */;
  (%446, %447, %448, %449, %450, %451)
}

def @func_5529() -> Tensor[(4, 12, 14), float64] {
  %452 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  %453 = cast(%452, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
  rsqrt(%453) /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_3066(%var_3026: Tensor[(672), float32]) -> (Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) {
  %454 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %455 = %454.0;
  %456 = cast(%455, dtype="int32") /* ty=Tensor[(336), int32] */;
  %457 = cast(%var_3026, dtype="float32") /* ty=Tensor[(672), float32] */;
  %458 = reshape(%456, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %459 = reshape(%457, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %460 = @func_2588(%458, %459) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
  %461 = %460.0;
  %462 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  (%455, %461, %var_3026, %462)
}

def @func_5646(%var_5641: Tensor[(9, 13, 7), float32]) -> Tensor[(9, 13, 7), float32] {
  %463 = cast(%var_5641, dtype="float32") /* ty=Tensor[(9, 13, 7), float32] */;
  rsqrt(%463) /* ty=Tensor[(9, 13, 7), float32] */
}

def @func_1656() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %464 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %465 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %466 = %464.0;
  %467 = %465.0;
  (%466, %467)
}

def @func_5666(%var_5655: Tensor[(7, 5, 2), float32]) -> (Tensor[(7, 5, 2), float32],) {
  %468 = cast(%var_5655, dtype="float32") /* ty=Tensor[(7, 5, 2), float32] */;
  %469 = atanh(%468) /* ty=Tensor[(7, 5, 2), float32] */;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(7, 5, 2), float32] */;
  %471 = log10(%470) /* ty=Tensor[(7, 5, 2), float32] */;
  (%471,)
}

def @func_5787() -> (Tensor[(4, 12, 14), float32],) {
  %472 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  (%472,)
}

def @func_6241() -> (Tensor[(4, 12, 14), float32], Tensor[(336), float64], Tensor[(4, 12, 14), float32], Tensor[(1372), bool], Tensor[(1372), float64]) {
  %473 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %474 = reshape(%473, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
  %475 = @func_3742(%474) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
  %476 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), int32] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %477 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %478 = %477.1;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(1372), float32] */;
  %480 = cos(%479) /* ty=Tensor[(1372), float32] */;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %482 = asinh(%481) /* ty=Tensor[(1372), float64] */;
  %483 = cast(%478, dtype="bool") /* ty=Tensor[(1372), bool] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(1), int32] */;
  %485 = cast(%482, dtype="bool") /* ty=Tensor[(1372), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?), bool] */;
  %487 = cast(%478, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %488 = %475.2;
  %489 = log10(%476) /* ty=Tensor[(336), float64] */;
  %490 = @func_5508() /* ty=Tensor[(4, 12, 14), float32] */;
  %491 = less(%485, %486) /* ty=Tensor[(1372), bool] */;
  %492 = cosh(%487) /* ty=Tensor[(1372), float64] */;
  (%488, %489, %490, %491, %492)
}

def @func_4873(%var_4824: Tensor[(8, 6, 7), float64]) -> (Tensor[(8, 6, 7), float64], Tensor[(5, 7, 11), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
  %493 = cast(%var_4824, dtype="float64") /* ty=Tensor[(8, 6, 7), float64] */;
  %494 = sin(%493) /* ty=Tensor[(8, 6, 7), float64] */;
  %495 = cast(%494, dtype="int32") /* ty=Tensor[(8, 6, 7), int32] */;
  %496 = reshape(%495, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %497 = @func_3835(%496) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %498 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %499 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %500 = %497.1;
  %501 = %498.0;
  %502 = %499.1;
  (%494, %500, %501, %502)
}

def @func_2344() -> (Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %503 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %504 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %505 = %503.1;
  %506 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  %507 = %504.0;
  (%505, %506, %507)
}

def @func_3582() -> (Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) {
  %508 = cast(meta[relay.Constant][23] /* ty=Tensor[(1372), uint16] */, dtype="uint16") /* ty=Tensor[(1372), uint16] */;
  %509 = reshape(%508, newshape=[1372]) /* ty=Tensor[(1372), uint16] */;
  %510 = @func_2429(%509) /* ty=(Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) */;
  %511 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %513 = %510.1;
  %514 = log10(%512) /* ty=Tensor[(4, 12, 14), float32] */;
  (%513, meta[relay.Constant][23] /* ty=Tensor[(1372), uint16] */, %514)
}

def @func_6466(%var_6436: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(686, 2), uint16], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float32]) {
  %515 = cast(meta[relay.Constant][24] /* ty=Tensor[(686, 2), uint16] */, dtype="uint16") /* ty=Tensor[(686, 2), uint16] */;
  %516 = cast(%var_6436, dtype="int32") /* ty=Tensor[(336), int32] */;
  %517 = reshape(%515, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), uint16] */;
  %518 = reshape(%516, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %519 = @func_1867(%517, %518) /* ty=(Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) */;
  %520 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %521 = cast(meta[relay.Constant][25] /* ty=Tensor[(160), int64] */, dtype="int64") /* ty=Tensor[(160), int64] */;
  %522 = reshape(%521, newshape=[1, 16, 10]) /* ty=Tensor[(1, 16, 10), int64] */;
  %523 = @func_5908() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %524 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  %525 = %519.4;
  %526 = %520.0;
  %527 = @func_5488(%522) /* ty=Tensor[(?, 16, 10), bool] */;
  %528 = @func_3405() /* ty=Tensor[(5, 7, 11), int64] */;
  %529 = %523.0;
  (%524, %525, meta[relay.Constant][24] /* ty=Tensor[(686, 2), uint16] */, %var_6436, %526, %527, meta[relay.Constant][25] /* ty=Tensor[(160), int64] */, %528, %529)
}

def @func_3953(%var_3940: Tensor[(385), int64], %var_3943: Tensor[(385), int64]) -> (Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), bool], Tensor[(385), float64]) {
  %530 = cast(%var_3940, dtype="int64") /* ty=Tensor[(385), int64] */;
  %531 = reshape(%530, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
  %532 = cast(%var_3943, dtype="float64") /* ty=Tensor[(385), float64] */;
  %533 = shape_of(%var_3940, dtype="int32") /* ty=Tensor[(1), int32] */;
  %534 = cast(%var_3940, dtype="float64") /* ty=Tensor[(385), float64] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?), float64] */;
  %536 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  %537 = @func_3338(%531) /* ty=Tensor[(5, 7, 11), bool] */;
  %538 = divide(%534, %535) /* ty=Tensor[(385), float64] */;
  (%536, %537, %538)
}

def @func_9368() -> (Tensor[(4, 12, 14), float32],) {
  %539 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %540 = %539.0;
  (%540,)
}

def @func_4376() -> Tensor[(4, 12, 14), float32] {
  %541 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %541.2
}

def @func_5508() -> Tensor[(4, 12, 14), float32] {
  %542 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %542.0
}

def @func_3742(%var_3727: Tensor[(8, 42), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) {
  %543 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
  %544 = cast(%543, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
  %545 = asinh(%544) /* ty=Tensor[(4, 12, 14), float64] */;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
  %547 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %548 = cast(%var_3727, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
  %549 = reshape(%548, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %550 = @func_1940(%549) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
  %551 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
  %552 = atanh(%546) /* ty=Tensor[(4, 12, 14), float64] */;
  %553 = %547.2;
  %554 = %550.2;
  %555 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  (%551, %552, %553, %554, %var_3727, %555)
}

def @func_1608() -> (Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) {
  %556 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %559 = cast(meta[relay.Constant][26] /* ty=Tensor[(441), int32] */, dtype="int32") /* ty=Tensor[(441), int32] */;
  %560 = reshape(%559, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
  %561 = sinh(%558) /* ty=Tensor[(4, 12, 14), float32] */;
  %562 = @func_215(%560) /* ty=Tensor[(7, 9, 7), float32] */;
  (%561, %562, meta[relay.Constant][26] /* ty=Tensor[(441), int32] */)
}

def @main() -> (Tensor[(4, 12, 14), float32], Tensor[(2, 7, 7), float64]) {
  %563 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %564 = @func_6849() /* ty=(Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %567 = %563.2;
  %568 = sin(%566) /* ty=Tensor[(2, 7, 7), float64] */;
  (%567, %568)
}

def @func_1867(%var_1825: Tensor[(14, 7, 14), uint16], %var_1863: Tensor[(336), int32]) -> (Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) {
  %569 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="uint16") /* ty=Tensor[(14, 7, 14), uint16] */;
  %570 = shape_of(%var_1825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%var_1825, dtype="uint16") /* ty=Tensor[(14, 7, 14), uint16] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %573 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %574 = %573.0;
  %575 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %579 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
  %580 = cast(%var_1863, dtype="int32") /* ty=Tensor[(336), int32] */;
  %581 = mod(%577, %578) /* ty=Tensor[(4, 12, 14), float32] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %583 = reshape(%579, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %584 = reshape(%580, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %585 = reshape(%582, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
  %586 = @func_1727(%583, %584, %585) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
  %587 = logical_xor(%571, %572) /* ty=Tensor[(14, 7, 14), uint16] */;
  %588 = %586.0;
  (%587, %581, %588, meta[relay.Constant][29] /* ty=Tensor[(2, 56), int32] */, %var_1863)
}

def @func_6603() -> Tensor[(4, 12, 14), float32] {
  @func_5508() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_4822() -> (Tensor[(4, 12, 14), float32], Tensor[(2, 56), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
  %589 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %590 = @func_4553() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %591 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %593 = reshape(%592, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %594 = @func_3066(%593) /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %595 = %589.0;
  %596 = @func_4376() /* ty=Tensor[(4, 12, 14), float32] */;
  %597 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  %598 = %590.1;
  %599 = %594.1;
  (%591, %595, %596, %597, %598, %599)
}

def @func_4053() -> (Tensor[(4, 12, 14), float32],) {
  %600 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
  (%600,)
}

def @func_4358() -> (Tensor[(4, 12, 14), float32],) {
  %601 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %602 = %601.0;
  (%602,)
}

def @func_2128() -> (Tensor[(4, 12, 14), float32],) {
  %603 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %604 = %603.1;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %606 = log(%605) /* ty=Tensor[(4, 12, 14), float32] */;
  (%606,)
}

def @func_7281() -> (Tensor[(4, 12, 14), float32],) {
  %607 = @func_4553() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %608 = %607.1;
  (%608,)
}

def @func_8472(%var_8459: Tensor[(336, 7), int32]) -> (Tensor[(490), float64], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(336, 7), uint16]) {
  %609 = @func_7498() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) */;
  %610 = @func_4951() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %611 = @func_8078() /* ty=Tensor[(336, 1), int32] */;
  %612 = cast(%611, dtype="uint16") /* ty=Tensor[(336, 1), uint16] */;
  %613 = cast(%var_8459, dtype="uint16") /* ty=Tensor[(336, 7), uint16] */;
  %614 = %609.2;
  %615 = %610.0;
  %616 = @func_8120() /* ty=Tensor[(4, 12, 14), float32] */;
  %617 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
  %618 = add(%612, %613) /* ty=Tensor[(336, 7), uint16] */;
  (%614, %615, %616, %617, %618)
}

def @func_7946() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %619 = @func_3530() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %620 = @func_5469() /* ty=Tensor[(4, 12, 14), float32] */;
  %621 = %619.0;
  (%620, %621)
}

def @func_2429(%var_2422: Tensor[(1372), uint16]) -> (Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) {
  %622 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %623 = cast(%var_2422, dtype="uint16") /* ty=Tensor[(1372), uint16] */;
  %624 = %622.0;
  %625 = cast(%624, dtype="int32") /* ty=Tensor[(336), int32] */;
  %626 = reshape(%623, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), uint16] */;
  %627 = reshape(%625, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %628 = @func_1867(%626, %627) /* ty=(Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) */;
  %629 = %628.3;
  (%624, %629, %var_2422)
}

def @func_8626(%var_8619: Tensor[(13, 2, 11), bool]) -> Tensor[(13, 2, 11), bool] {
  %630 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 2, 11), bool] */, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
  %631 = shape_of(%var_8619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_8619, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%632, %633) /* ty=Tensor[(13, 2, 11), bool] */
}

def @func_9653(%var_9576: int8, %var_9577: Tensor[(14, 9, 12), int8], %var_9607: Tensor[(112), int32]) -> (Tensor[(14, 9, 12), float64], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %634 = cast(%var_9576, dtype="int8") /* ty=int8 */;
  %635 = cast(%var_9577, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
  %636 = maximum(%634, %635) /* ty=Tensor[(14, 9, 12), int8] */;
  %637 = cast(%636, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
  %638 = cast(%var_9607, dtype="int32") /* ty=Tensor[(112), int32] */;
  %639 = cast(meta[relay.Constant][31] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %640 = cast(meta[relay.Constant][32] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %641 = reshape(%638, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %642 = reshape(%639, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %643 = reshape(%640, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
  %644 = @func_1727(%641, %642, %643) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
  %645 = @func_9574() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %646 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %647 = atan(%637) /* ty=Tensor[(14, 9, 12), float64] */;
  %648 = %644.0;
  %649 = %645.0;
  %650 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
  %651 = %646.1;
  (%647, %648, %var_9607, meta[relay.Constant][31] /* ty=Tensor[(336), int32] */, meta[relay.Constant][32] /* ty=Tensor[(672), float32] */, %649, %650, %651)
}

def @func_3643(%var_3622: Tensor[(4, 15, 3), float32], %var_3623: Tensor[(4, 15, 3), float32]) -> (Tensor[(4, 15, 3), float32], Tensor[(112), int32], Tensor[(168, 2), int32], Tensor[(1, 672), float32], Tensor[(4, 15, 3), float64]) {
  %652 = cast(%var_3623, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %653 = shape_of(%var_3622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_3622, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %656 = cast(meta[relay.Constant][33] /* ty=Tensor[(168, 2), int32] */, dtype="int32") /* ty=Tensor[(168, 2), int32] */;
  %657 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 672), float32] */, dtype="float32") /* ty=Tensor[(1, 672), float32] */;
  %658 = reshape(%656, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %659 = reshape(%657, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %660 = @func_2588(%658, %659) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
  %661 = cast(%var_3623, dtype="float64") /* ty=Tensor[(4, 15, 3), float64] */;
  %662 = divide(%654, %655) /* ty=Tensor[(4, 15, 3), float32] */;
  %663 = %660.1;
  %664 = asin(%661) /* ty=Tensor[(4, 15, 3), float64] */;
  (%662, %663, meta[relay.Constant][33] /* ty=Tensor[(168, 2), int32] */, meta[relay.Constant][34] /* ty=Tensor[(1, 672), float32] */, %664)
}

def @func_9208(%var_9197: Tensor[(441), int32]) -> (Tensor[(4, 12, 14), float64], Tensor[(5, 7, 11), int64], Tensor[(441), float64]) {
  %665 = cast(%var_9197, dtype="int32") /* ty=Tensor[(441), int32] */;
  %666 = reshape(%665, newshape=[441]) /* ty=Tensor[(441), int32] */;
  %667 = @func_8258(%666) /* ty=(Tensor[(5, 7, 11), int64], Tensor[(441), uint32]) */;
  %668 = cast(%var_9197, dtype="float64") /* ty=Tensor[(441), float64] */;
  %669 = @func_5529() /* ty=Tensor[(4, 12, 14), float64] */;
  %670 = %667.0;
  %671 = asinh(%668) /* ty=Tensor[(441), float64] */;
  (%669, %670, %671)
}

def @func_7892(%var_7872: Tensor[(14, 1, 2), int32]) -> (Tensor[(14, 11, 2), bool], Tensor[(3, 8, 13), float64], Tensor[(312, 1), uint64]) {
  %672 = cast(%var_7872, dtype="bool") /* ty=Tensor[(14, 1, 2), bool] */;
  %673 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 11, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
  %674 = cast(meta[relay.Constant][36] /* ty=Tensor[(312, 1), uint64] */, dtype="uint64") /* ty=Tensor[(312, 1), uint64] */;
  %675 = cast(meta[relay.Constant][36] /* ty=Tensor[(312, 1), uint64] */, dtype="uint64") /* ty=Tensor[(312, 1), uint64] */;
  %676 = reshape(%674, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
  %677 = reshape(%675, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
  %678 = @func_6132(%676, %677) /* ty=(Tensor[(3, 8, 13), float64],) */;
  %679 = equal(%672, %673) /* ty=Tensor[(14, 11, 2), bool] */;
  %680 = %678.0;
  (%679, %680, meta[relay.Constant][36] /* ty=Tensor[(312, 1), uint64] */)
}

def @func_7265() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %681 = @func_6849() /* ty=(Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %682 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %683 = %681.4;
  %684 = %682.2;
  (%683, %684)
}

def @func_2277() -> Tensor[(4, 12, 14), float32] {
  @func_1780() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_869(%var_830: Tensor[(1, 8, 14), int32], %var_831: Tensor[(3, 8, 14), int32]) -> (Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) {
  %685 = cast(%var_830, dtype="int32") /* ty=Tensor[(1, 8, 14), int32] */;
  %686 = cast(%var_831, dtype="int32") /* ty=Tensor[(3, 8, 14), int32] */;
  %687 = cast(%var_830, dtype="float64") /* ty=Tensor[(1, 8, 14), float64] */;
  %688 = cast(%var_831, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %689 = cast(%var_830, dtype="bool") /* ty=Tensor[(1, 8, 14), bool] */;
  %690 = less_equal(%688, %689) /* ty=Tensor[(3, 8, 14), bool] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %692 = shape_of(%var_831, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%var_831, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %695 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 63), int32] */, dtype="int32") /* ty=Tensor[(7, 63), int32] */;
  %696 = reshape(%695, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
  %697 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 63), int32] */, dtype="int32") /* ty=Tensor[(7, 63), int32] */;
  %698 = reshape(%697, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
  %699 = @func_215(%698) /* ty=Tensor[(7, 9, 7), float32] */;
  %700 = cast(%699, dtype="int32") /* ty=Tensor[(7, 9, 7), int32] */;
  %701 = reshape(%700, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
  %702 = left_shift(%685, %686) /* ty=Tensor[(3, 8, 14), int32] */;
  %703 = sigmoid(%687) /* ty=Tensor[(1, 8, 14), float64] */;
  %704 = divide(%693, %694) /* ty=Tensor[(3, 8, 14), float32] */;
  %705 = @func_215(%696) /* ty=Tensor[(7, 9, 7), float32] */;
  %706 = @func_215(%701) /* ty=Tensor[(7, 9, 7), float32] */;
  (%702, %703, %704, %705, meta[relay.Constant][37] /* ty=Tensor[(7, 63), int32] */, %699, %706)
}

def @func_2402(%var_2399: Tensor[(490), float64]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) {
  %707 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %708 = cast(%var_2399, dtype="float64") /* ty=Tensor[(490), float64] */;
  %709 = reshape(%708, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %710 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  %711 = %707.1;
  %712 = @func_1623(%709) /* ty=Tensor[(7, 14, 5), float64] */;
  (%710, %711, %712, %var_2399)
}

def @func_8258(%var_8234: Tensor[(441), int32]) -> (Tensor[(5, 7, 11), int64], Tensor[(441), uint32]) {
  %713 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %714 = %713.2;
  %715 = cast(%var_8234, dtype="uint32") /* ty=Tensor[(441), uint32] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(%714, dtype="uint32") /* ty=Tensor[(441), uint32] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %719 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
  %720 = minimum(%717, %718) /* ty=Tensor[(441), uint32] */;
  (%719, %720)
}

def @func_8130(%var_8125: Tensor[(168, 2), int32]) -> (Tensor[(1372), uint16], Tensor[(4, 28), int32], Tensor[(168, 2), int32]) {
  %721 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %722 = cast(%var_8125, dtype="int32") /* ty=Tensor[(168, 2), int32] */;
  %723 = reshape(%722, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %724 = @func_1940(%723) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
  %725 = %721.1;
  %726 = %724.3;
  (%725, %726, %var_8125)
}

def @func_2715(%var_2668: Tensor[(1372, 1), uint16]) -> (Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) {
  %727 = cast(%var_2668, dtype="uint16") /* ty=Tensor[(1372, 1), uint16] */;
  %728 = reshape(%727, newshape=[1372]) /* ty=Tensor[(1372), uint16] */;
  %729 = @func_2429(%728) /* ty=(Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) */;
  %730 = cast(%var_2668, dtype="float64") /* ty=Tensor[(1372, 1), float64] */;
  %731 = sin(%730) /* ty=Tensor[(1372, 1), float64] */;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(1372, 1), float32] */;
  %733 = sigmoid(%732) /* ty=Tensor[(1372, 1), float32] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(1372, 1), float64] */;
  %735 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
  %736 = %729.2;
  %737 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  %738 = tan(%734) /* ty=Tensor[(1372, 1), float64] */;
  (%735, %736, %737, %738)
}

def @func_4115(%var_4093: Tensor[(5, 4, 5), float64]) -> (Tensor[(5, 4, 5), float64], Tensor[(4, 12, 14), float32]) {
  %739 = cast(%var_4093, dtype="float64") /* ty=Tensor[(5, 4, 5), float64] */;
  %740 = acosh(%739) /* ty=Tensor[(5, 4, 5), float64] */;
  %741 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  (%740, %741)
}

def @func_5186(%var_5153: Tensor[(385), int64], %var_5173: Tensor[(490), float64]) -> (Tensor[(336), int32], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(4, 180), uint32], Tensor[(490), float64]) {
  %742 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %743 = cast(%var_5153, dtype="int64") /* ty=Tensor[(385), int64] */;
  %744 = reshape(%743, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
  %745 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %746 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 180), uint32] */, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
  %747 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 180), uint32] */, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
  %748 = cast(%var_5173, dtype="float64") /* ty=Tensor[(490), float64] */;
  %749 = reshape(%746, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), uint32] */;
  %750 = reshape(%747, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), uint32] */;
  %751 = reshape(%748, newshape=[490]) /* ty=Tensor[(490), float64] */;
  %752 = @func_4916(%749, %750, %751) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(490), float64], Tensor[(9, 8, 10), int64]) */;
  %753 = %742.0;
  %754 = @func_3338(%744) /* ty=Tensor[(5, 7, 11), bool] */;
  %755 = %745.0;
  %756 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  %757 = %752.0;
  (%753, %754, %var_5153, %755, %756, %757, meta[relay.Constant][38] /* ty=Tensor[(4, 180), uint32] */, %var_5173)
}

def @func_6803() -> (Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) {
  %758 = @func_6357() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %759 = @func_5811() /* ty=Tensor[(4, 12, 14), float64] */;
  %760 = %758.0;
  (%759, %760)
}

def @func_6672() -> Tensor[(4, 12, 14), float64] {
  %761 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
  acosh(%763) /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_3405() -> Tensor[(5, 7, 11), int64] {
  %764 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %764.2
}

def @func_3530() -> (Tensor[(4, 12, 14), float32],) {
  %765 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %766 = %765.0;
  (%766,)
}

def @func_1595() -> (Tensor[(4, 12, 14), float32],) {
  %767 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  (%767,)
}

def @func_4742(%var_4733: uint16) -> Tensor[(13, 10, 2), uint16] {
  %768 = cast(%var_4733, dtype="uint16") /* ty=uint16 */;
  %769 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 10, 2), uint16] */, dtype="uint16") /* ty=Tensor[(13, 10, 2), uint16] */;
  bitwise_or(%768, %769) /* ty=Tensor[(13, 10, 2), uint16] */
}

def @func_5285() -> Tensor[(12, 3, 6), float32] {
  %770 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 6), float32] */;
  log2(%770) /* ty=Tensor[(12, 3, 6), float32] */
}

def @func_6357() -> (Tensor[(4, 12, 14), float32],) {
  %771 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  (%771,)
}

def @func_2787(%var_2747: Tensor[(4, 12, 14), float32], %var_2766: Tensor[(336), int32], %var_2771: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), uint16]) {
  %772 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %773 = %772.0;
  %774 = cast(%var_2747, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%773, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %778 = cast(meta[relay.Constant][41] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %779 = cast(%var_2766, dtype="int32") /* ty=Tensor[(336), int32] */;
  %780 = divide(%776, %777) /* ty=Tensor[(4, 12, 14), float32] */;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %782 = reshape(%778, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %783 = reshape(%779, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %784 = reshape(%781, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
  %785 = @func_1727(%782, %783, %784) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
  %786 = cast(%var_2771, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %787 = shape_of(%var_2766, dtype="int32") /* ty=Tensor[(1), int32] */;
  %788 = cast(%var_2766, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %790 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  %791 = %785.0;
  %792 = bitwise_and(%788, %789) /* ty=Tensor[(336), uint16] */;
  (%790, %780, %791, meta[relay.Constant][41] /* ty=Tensor[(112), int32] */, %792)
}

def @func_5778(%var_5762: Tensor[(160), int64]) -> (Tensor[(77), float32], Tensor[(77), float64], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(10, 3, 15), int64]) {
  %793 = cast(6.44485f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %794 = cast(meta[relay.Constant][42] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %795 = reshape(%793, newshape=[]) /* ty=float64 */;
  %796 = reshape(%794, newshape=[77]) /* ty=Tensor[(77), float64] */;
  %797 = @func_3514(%795, %796) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(11, 1, 7), float64], float64, Tensor[(77), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) */;
  %798 = cast(%var_5762, dtype="int64") /* ty=Tensor[(160), int64] */;
  %799 = reshape(%798, newshape=[1, 16, 10]) /* ty=Tensor[(1, 16, 10), int64] */;
  %800 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 15), float32] */;
  %801 = acosh(%800) /* ty=Tensor[(10, 3, 15), float32] */;
  %802 = cast(%801, dtype="int64") /* ty=Tensor[(10, 3, 15), int64] */;
  %803 = cast(6.44485f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %804 = %797.3;
  %805 = @func_5488(%799) /* ty=Tensor[(?, 16, 10), bool] */;
  %806 = bitwise_or(%802, %803) /* ty=Tensor[(10, 3, 15), int64] */;
  (%804, meta[relay.Constant][42] /* ty=Tensor[(77), float64] */, %805, %var_5762, %806)
}

def @func_2880(%var_2858: Tensor[(7, 9, 7), float32]) -> (Tensor[(7, 9, 7), float64],) {
  %807 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %808 = %807.1;
  %809 = cast(%var_2858, dtype="float64") /* ty=Tensor[(7, 9, 7), float64] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="float64") /* ty=Tensor[(7, 9, 7), float64] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %813 = mod(%811, %812) /* ty=Tensor[(7, 9, 7), float64] */;
  (%813,)
}

def @func_4951() -> (Tensor[(4, 12, 14), float32],) {
  %814 = @func_3767() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %815 = %814.0;
  (%815,)
}

def @func_6115() -> Tensor[(5, 7, 11), int64] {
  @func_3405() /* ty=Tensor[(5, 7, 11), int64] */
}

def @func_5092() -> Tensor[(4, 12, 14), float32] {
  %816 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %816.1
}

def @func_3137(%var_3093: Tensor[(16, 15, 10), float64], %var_3103: Tensor[(441), float32]) -> (Tensor[(16, 15, 10), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %817 = cast(2.52071f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %818 = cast(%var_3093, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
  %819 = cast(%var_3103, dtype="float32") /* ty=Tensor[(441), float32] */;
  %820 = reshape(%819, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
  %821 = @func_2880(%820) /* ty=(Tensor[(7, 9, 7), float64],) */;
  %822 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %823 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %824 = power(%817, %818) /* ty=Tensor[(16, 15, 10), float64] */;
  %825 = %821.0;
  %826 = %822.1;
  %827 = %823.0;
  (%824, %825, %var_3103, %826, %827)
}

def @func_5855() -> Tensor[(4, 12, 14), float32] {
  %828 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %828.2
}

def @func_8019() -> Tensor[(4, 12, 14), float32] {
  @func_3167() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_8346() -> (Tensor[(4, 12, 14), float32],) {
  %829 = @func_4822() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(2, 56), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) */;
  %830 = %829.3;
  (%830,)
}

def @func_3167() -> Tensor[(4, 12, 14), float32] {
  %831 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %831.1
}

def @func_7224() -> Tensor[(441), bool] {
  %832 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %833 = %832.2;
  %834 = cast(meta[relay.Constant][44] /* ty=Tensor[(441), int32] */, dtype="bool") /* ty=Tensor[(441), bool] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(1), int32] */;
  %836 = cast(%833, dtype="bool") /* ty=Tensor[(441), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater(%836, %837) /* ty=Tensor[(441), bool] */
}

def @func_4024(%var_4019: Tensor[(7, 70), float64]) -> (Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 70), float64]) {
  %838 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
  %839 = cast(%838, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
  %840 = cast(%var_4019, dtype="float64") /* ty=Tensor[(7, 70), float64] */;
  %841 = reshape(%840, newshape=[490]) /* ty=Tensor[(490), float64] */;
  %842 = @func_2402(%841) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) */;
  %843 = cosh(%839) /* ty=Tensor[(5, 7, 11), float32] */;
  %844 = %842.0;
  (%843, %844, %var_4019)
}

def @func_9360(%var_9331: Tensor[(2, 56), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(2, 56), bool], Tensor[(3, 8, 13), float64], Tensor[(312), uint64], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
  %845 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %846 = %845.0;
  %847 = cast(%var_9331, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(2), int32] */;
  %849 = cast(%846, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %851 = cast(meta[relay.Constant][45] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %852 = cast(meta[relay.Constant][45] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %853 = reshape(%851, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
  %854 = reshape(%852, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
  %855 = @func_6132(%853, %854) /* ty=(Tensor[(3, 8, 13), float64],) */;
  %856 = cast(meta[relay.Constant][46] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
  %857 = reshape(%856, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
  %858 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %859 = reshape(%858, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
  %860 = @func_3742(%859) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
  %861 = @func_5508() /* ty=Tensor[(4, 12, 14), float32] */;
  %862 = greater_equal(%849, %850) /* ty=Tensor[(2, 56), bool] */;
  %863 = %855.0;
  %864 = @func_3338(%857) /* ty=Tensor[(5, 7, 11), bool] */;
  %865 = %860.2;
  (%861, %862, %863, meta[relay.Constant][45] /* ty=Tensor[(312), uint64] */, %864, meta[relay.Constant][46] /* ty=Tensor[(385), int64] */, %865, meta[relay.Constant][47] /* ty=Tensor[(336), int32] */)
}

def @func_5699() -> Tensor[(4, 12, 14), float32] {
  %866 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %866.2
}

def @func_6574() -> Tensor[(4, 12, 14), float32] {
  @func_4376() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_5488(%var_5483: Tensor[(1, 16, 10), int64]) -> Tensor[(?, 16, 10), bool] {
  %867 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 16, 10), int64] */, dtype="bool") /* ty=Tensor[(1, 16, 10), bool] */;
  %868 = shape_of(%var_5483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%var_5483, dtype="bool") /* ty=Tensor[(1, 16, 10), bool] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%869, %870) /* ty=Tensor[(?, 16, 10), bool] */
}

def @func_5583(%var_5574: Tensor[(112), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(112), int32], Tensor[(336), int32]) {
  %871 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %872 = cast(%var_5574, dtype="int32") /* ty=Tensor[(112), int32] */;
  %873 = cast(meta[relay.Constant][49] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %874 = %871.0;
  %875 = cast(%874, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %876 = reshape(%872, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %877 = reshape(%873, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %878 = reshape(%875, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
  %879 = @func_1727(%876, %877, %878) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
  %880 = %879.3;
  (%874, %880, %var_5574, meta[relay.Constant][49] /* ty=Tensor[(336), int32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8472(%var_8459: Tensor[(336, 7), int32]) -> (Tensor[(490), float64], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(336, 7), uint16]) {
  %0 = @func_7498() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) */;
  %1 = @func_4951() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %2 = @func_8078() /* ty=Tensor[(336, 1), int32] */;
  %3 = cast(%2, dtype="uint16") /* ty=Tensor[(336, 1), uint16] */;
  %4 = cast(%var_8459, dtype="uint16") /* ty=Tensor[(336, 7), uint16] */;
  %5 = %0.2;
  %6 = %1.0;
  %7 = @func_8120() /* ty=Tensor[(4, 12, 14), float32] */;
  %8 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
  %9 = add(%3, %4) /* ty=Tensor[(336, 7), uint16] */;
  (%5, %6, %7, %8, %9)
}

def @func_3341(%var_3339: Tensor[(5, 7, 11), int64]) -> Tensor[(5, 7, 11), bool] {
  @func_3338(%var_3339) /* ty=Tensor[(5, 7, 11), bool] */
}

def @func_9363(%var_9361: Tensor[(2, 56), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(2, 56), bool], Tensor[(3, 8, 13), float64], Tensor[(312), uint64], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
  @func_9360(%var_9361) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(2, 56), bool], Tensor[(3, 8, 13), float64], Tensor[(312), uint64], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) */
}

def @func_2532(%var_2529: Tensor[(336), int32], %var_2530: Tensor[(4, 28), int32], %var_2531: Tensor[(4, 28), uint32]) -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) {
  @func_2527(%var_2529, %var_2530, %var_2531) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) */
}

def @func_2429(%var_2422: Tensor[(1372), uint16]) -> (Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) {
  %10 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %11 = cast(%var_2422, dtype="uint16") /* ty=Tensor[(1372), uint16] */;
  %12 = %10.0;
  %13 = cast(%12, dtype="int32") /* ty=Tensor[(336), int32] */;
  %14 = reshape(%11, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), uint16] */;
  %15 = reshape(%13, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %16 = @func_1867(%14, %15) /* ty=(Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) */;
  %17 = %16.3;
  (%12, %17, %var_2422)
}

def @func_1595() -> (Tensor[(4, 12, 14), float32],) {
  %18 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  (%18,)
}

def @func_3583() -> (Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) {
  %26 = fn () -> (Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) {
    %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(1372), uint16] */, dtype="uint16") /* ty=Tensor[(1372), uint16] */;
    %20 = reshape(%19, newshape=[1372]) /* ty=Tensor[(1372), uint16] */;
    %21 = @func_2429(%20) /* ty=(Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) */;
    %22 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
    %23 = cast(%22, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %24 = %21.1;
    %25 = log10(%23) /* ty=Tensor[(4, 12, 14), float32] */;
    (%24, meta[relay.Constant][0] /* ty=Tensor[(1372), uint16] */, %25)
  };
  %26() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */
}

def @func_9551() -> Tensor[(4, 12, 14), float32] {
  @func_9549() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_5093() -> Tensor[(4, 12, 14), float32] {
  %28 = fn () -> Tensor[(4, 12, 14), float32] {
    %27 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
    %27.1
  };
  %28() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_3459() -> (Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) {
  %29 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %31 = reshape(%30, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %32 = @func_3066(%31) /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %33 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %34 = %32.2;
  %35 = %33.1;
  (%29, %34, %35)
}

def @func_5744() -> (Tensor[(4, 12, 14), float32],) {
  %38 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %36 = @func_3752() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %37 = %36.0;
    (%37,)
  };
  %38() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_7461() -> (Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], Tensor[(1372, 1), float64], Tensor[(1372, 1), uint16]) {
  @func_7459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], Tensor[(1372, 1), float64], Tensor[(1372, 1), uint16]) */
}

def @func_6241() -> (Tensor[(4, 12, 14), float32], Tensor[(336), float64], Tensor[(4, 12, 14), float32], Tensor[(1372), bool], Tensor[(1372), float64]) {
  %39 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %40 = reshape(%39, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
  %41 = @func_3742(%40) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), int32] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %43 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %44 = %43.1;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(1372), float32] */;
  %46 = cos(%45) /* ty=Tensor[(1372), float32] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %48 = asinh(%47) /* ty=Tensor[(1372), float64] */;
  %49 = cast(%44, dtype="bool") /* ty=Tensor[(1372), bool] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(1), int32] */;
  %51 = cast(%48, dtype="bool") /* ty=Tensor[(1372), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?), bool] */;
  %53 = cast(%44, dtype="float64") /* ty=Tensor[(1372), float64] */;
  %54 = %41.2;
  %55 = log10(%42) /* ty=Tensor[(336), float64] */;
  %56 = @func_5508() /* ty=Tensor[(4, 12, 14), float32] */;
  %57 = less(%51, %52) /* ty=Tensor[(1372), bool] */;
  %58 = cosh(%53) /* ty=Tensor[(1372), float64] */;
  (%54, %55, %56, %57, %58)
}

def @func_8078() -> Tensor[(336, 1), int32] {
  %59 = @func_7823() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(336, 1), int32]) */;
  %59.3
}

def @func_3837(%var_3836: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
  %75 = fn (%var_3801: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
    %60 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
    %61 = cast(%var_3801, dtype="int32") /* ty=Tensor[(336), int32] */;
    %62 = reshape(%61, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
    %63 = @func_3742(%62) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
    %64 = cast(%var_3801, dtype="int32") /* ty=Tensor[(336), int32] */;
    %65 = %60.2;
    %66 = cast(%65, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %67 = reshape(%64, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %68 = reshape(%66, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %69 = @func_2588(%67, %68) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
    %70 = @func_3530() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %71 = @func_3405() /* ty=Tensor[(5, 7, 11), int64] */;
    %72 = %63.1;
    %73 = %69.2;
    %74 = %70.0;
    (%65, %71, %72, %var_3801, %73, %74)
  };
  %75(%var_3836) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */
}

def @func_9136() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(1372), uint16]) {
  %87 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(1372), uint16]) {
    %76 = @func_7524() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %77 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %78 = reshape(%77, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %79 = @func_1940(%78) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
    %80 = cast(meta[relay.Constant][2] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %81 = reshape(%80, newshape=[168, 2]) /* ty=Tensor[(168, 2), int32] */;
    %82 = @func_8130(%81) /* ty=(Tensor[(1372), uint16], Tensor[(4, 28), int32], Tensor[(168, 2), int32]) */;
    %83 = @func_7394() /* ty=Tensor[(4, 12, 14), float32] */;
    %84 = %76.0;
    %85 = %79.0;
    %86 = %82.0;
    (%83, %84, %85, meta[relay.Constant][2] /* ty=Tensor[(336), int32] */, %86)
  };
  %87() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(1372), uint16]) */
}

def @func_2432(%var_2430: Tensor[(1372), uint16]) -> (Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) {
  @func_2429(%var_2430) /* ty=(Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) */
}

def @func_9291() -> Tensor[(4, 12, 14), float32] {
  %88 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %88.0
}

def @func_9293() -> Tensor[(4, 12, 14), float32] {
  @func_9291() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6253() -> (Tensor[(1372), uint16],) {
  %89 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %90 = %89.0;
  (%90,)
}

def @func_3407() -> Tensor[(5, 7, 11), int64] {
  @func_3405() /* ty=Tensor[(5, 7, 11), int64] */
}

def @func_9370() -> (Tensor[(4, 12, 14), float32],) {
  @func_9368() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_1943(%var_1941: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) {
  @func_1940(%var_1941) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */
}

def @func_4953() -> (Tensor[(4, 12, 14), float32],) {
  @func_4951() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_6603() -> Tensor[(4, 12, 14), float32] {
  @func_5508() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_2846() -> (Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
  %95 = fn () -> (Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
    %91 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %92 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %93 = %91.0;
    %94 = %92.1;
    (%93, %94)
  };
  %95() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */
}

def @func_3140(%var_3138: Tensor[(16, 15, 10), float64], %var_3139: Tensor[(441), float32]) -> (Tensor[(16, 15, 10), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %107 = fn (%var_3093: Tensor[(16, 15, 10), float64], %var_3103: Tensor[(441), float32]) -> (Tensor[(16, 15, 10), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
    %96 = cast(2.52071f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %97 = cast(%var_3093, dtype="float64") /* ty=Tensor[(16, 15, 10), float64] */;
    %98 = cast(%var_3103, dtype="float32") /* ty=Tensor[(441), float32] */;
    %99 = reshape(%98, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), float32] */;
    %100 = @func_2880(%99) /* ty=(Tensor[(7, 9, 7), float64],) */;
    %101 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
    %102 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %103 = power(%96, %97) /* ty=Tensor[(16, 15, 10), float64] */;
    %104 = %100.0;
    %105 = %101.1;
    %106 = %102.0;
    (%103, %104, %var_3103, %105, %106)
  };
  %107(%var_3138, %var_3139) /* ty=(Tensor[(16, 15, 10), float64], Tensor[(7, 9, 7), float64], Tensor[(441), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_5666(%var_5655: Tensor[(7, 5, 2), float32]) -> (Tensor[(7, 5, 2), float32],) {
  %108 = cast(%var_5655, dtype="float32") /* ty=Tensor[(7, 5, 2), float32] */;
  %109 = atanh(%108) /* ty=Tensor[(7, 5, 2), float32] */;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(7, 5, 2), float32] */;
  %111 = log10(%110) /* ty=Tensor[(7, 5, 2), float32] */;
  (%111,)
}

def @func_5427(%var_5425: Tensor[(4, 12, 14), float32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_5424(%var_5425) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_5910() -> (Tensor[(4, 12, 14), float32],) {
  @func_5908() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_8994() -> Tensor[(4, 12, 14), float32] {
  %112 = fn () -> Tensor[(4, 12, 14), float32] {
    @func_6603() /* ty=Tensor[(4, 12, 14), float32] */
  };
  %112() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_9575() -> (Tensor[(4, 12, 14), float32],) {
  %115 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %113 = @func_7640() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %114 = %113.2;
    (%114,)
  };
  %115() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_6805() -> (Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) {
  @func_6803() /* ty=(Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) */
}

def @func_9549() -> Tensor[(4, 12, 14), float32] {
  @func_1566() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_7225() -> Tensor[(441), bool] {
  %122 = fn () -> Tensor[(441), bool] {
    %116 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
    %117 = %116.2;
    %118 = cast(meta[relay.Constant][3] /* ty=Tensor[(441), int32] */, dtype="bool") /* ty=Tensor[(441), bool] */;
    %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(1), int32] */;
    %120 = cast(%117, dtype="bool") /* ty=Tensor[(441), bool] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?), bool] */;
    greater(%120, %121) /* ty=Tensor[(441), bool] */
  };
  %122() /* ty=Tensor[(441), bool] */
}

def @func_3643(%var_3622: Tensor[(4, 15, 3), float32], %var_3623: Tensor[(4, 15, 3), float32]) -> (Tensor[(4, 15, 3), float32], Tensor[(112), int32], Tensor[(168, 2), int32], Tensor[(1, 672), float32], Tensor[(4, 15, 3), float64]) {
  %123 = cast(%var_3623, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %124 = shape_of(%var_3622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%var_3622, dtype="float32") /* ty=Tensor[(4, 15, 3), float32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %127 = cast(meta[relay.Constant][4] /* ty=Tensor[(168, 2), int32] */, dtype="int32") /* ty=Tensor[(168, 2), int32] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 672), float32] */, dtype="float32") /* ty=Tensor[(1, 672), float32] */;
  %129 = reshape(%127, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %130 = reshape(%128, newshape=[672]) /* ty=Tensor[(672), float32] */;
  %131 = @func_2588(%129, %130) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
  %132 = cast(%var_3623, dtype="float64") /* ty=Tensor[(4, 15, 3), float64] */;
  %133 = divide(%125, %126) /* ty=Tensor[(4, 15, 3), float32] */;
  %134 = %131.1;
  %135 = asin(%132) /* ty=Tensor[(4, 15, 3), float64] */;
  (%133, %134, meta[relay.Constant][4] /* ty=Tensor[(168, 2), int32] */, meta[relay.Constant][5] /* ty=Tensor[(1, 672), float32] */, %135)
}

def @func_7183() -> Tensor[(4, 12, 14), float32] {
  @func_7181() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_7330() -> Tensor[(4, 12, 14), float32] {
  @func_6483() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6485() -> Tensor[(4, 12, 14), float32] {
  @func_6483() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_9368() -> (Tensor[(4, 12, 14), float32],) {
  %136 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %137 = %136.0;
  (%137,)
}

def @func_7847() -> Tensor[(1372), uint8] {
  %144 = fn () -> Tensor[(1372), uint8] {
    %138 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
    %139 = %138.1;
    %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(1372), uint16] */, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
    %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(1), int32] */;
    %142 = cast(%139, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?), uint8] */;
    minimum(%142, %143) /* ty=Tensor[(1372), uint8] */
  };
  %144() /* ty=Tensor[(1372), uint8] */
}

def @func_6674() -> Tensor[(4, 12, 14), float64] {
  @func_6672() /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_6576() -> Tensor[(4, 12, 14), float32] {
  @func_6574() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_1625(%var_1624: Tensor[(7, 14, 5), float64]) -> Tensor[(7, 14, 5), float64] {
  %146 = fn (%var_1610: Tensor[(7, 14, 5), float64]) -> Tensor[(7, 14, 5), float64] {
    %145 = cast(%var_1610, dtype="float64") /* ty=Tensor[(7, 14, 5), float64] */;
    tan(%145) /* ty=Tensor[(7, 14, 5), float64] */
  };
  %146(%var_1624) /* ty=Tensor[(7, 14, 5), float64] */
}

def @func_5510() -> Tensor[(4, 12, 14), float32] {
  @func_5508() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_3068(%var_3067: Tensor[(672), float32]) -> (Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) {
  %156 = fn (%var_3026: Tensor[(672), float32]) -> (Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) {
    %147 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
    %148 = %147.0;
    %149 = cast(%148, dtype="int32") /* ty=Tensor[(336), int32] */;
    %150 = cast(%var_3026, dtype="float32") /* ty=Tensor[(672), float32] */;
    %151 = reshape(%149, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %152 = reshape(%150, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %153 = @func_2588(%151, %152) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
    %154 = %153.0;
    %155 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
    (%148, %154, %var_3026, %155)
  };
  %156(%var_3067) /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_2717(%var_2716: Tensor[(1372, 1), uint16]) -> (Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) {
  %169 = fn (%var_2668: Tensor[(1372, 1), uint16]) -> (Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) {
    %157 = cast(%var_2668, dtype="uint16") /* ty=Tensor[(1372, 1), uint16] */;
    %158 = reshape(%157, newshape=[1372]) /* ty=Tensor[(1372), uint16] */;
    %159 = @func_2429(%158) /* ty=(Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) */;
    %160 = cast(%var_2668, dtype="float64") /* ty=Tensor[(1372, 1), float64] */;
    %161 = sin(%160) /* ty=Tensor[(1372, 1), float64] */;
    %162 = cast(%161, dtype="float32") /* ty=Tensor[(1372, 1), float32] */;
    %163 = sigmoid(%162) /* ty=Tensor[(1372, 1), float32] */;
    %164 = cast(%163, dtype="float64") /* ty=Tensor[(1372, 1), float64] */;
    %165 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
    %166 = %159.2;
    %167 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
    %168 = tan(%164) /* ty=Tensor[(1372, 1), float64] */;
    (%165, %166, %167, %168)
  };
  %169(%var_2716) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) */
}

def @func_8610() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64]) {
  @func_8608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64]) */
}

def @func_9210(%var_9209: Tensor[(441), int32]) -> (Tensor[(4, 12, 14), float64], Tensor[(5, 7, 11), int64], Tensor[(441), float64]) {
  %177 = fn (%var_9197: Tensor[(441), int32]) -> (Tensor[(4, 12, 14), float64], Tensor[(5, 7, 11), int64], Tensor[(441), float64]) {
    %170 = cast(%var_9197, dtype="int32") /* ty=Tensor[(441), int32] */;
    %171 = reshape(%170, newshape=[441]) /* ty=Tensor[(441), int32] */;
    %172 = @func_8258(%171) /* ty=(Tensor[(5, 7, 11), int64], Tensor[(441), uint32]) */;
    %173 = cast(%var_9197, dtype="float64") /* ty=Tensor[(441), float64] */;
    %174 = @func_5529() /* ty=Tensor[(4, 12, 14), float64] */;
    %175 = %172.0;
    %176 = asinh(%173) /* ty=Tensor[(441), float64] */;
    (%174, %175, %176)
  };
  %177(%var_9209) /* ty=(Tensor[(4, 12, 14), float64], Tensor[(5, 7, 11), int64], Tensor[(441), float64]) */
}

def @func_7365(%var_7363: Tensor[(1, 1, 12), float64]) -> Tensor[(1, 1, 12), float64] {
  @func_7362(%var_7363) /* ty=Tensor[(1, 1, 12), float64] */
}

def @func_8771() -> (Tensor[(336, 1), int32],) {
  %179 = fn () -> (Tensor[(336, 1), int32],) {
    %178 = @func_8078() /* ty=Tensor[(336, 1), int32] */;
    (%178,)
  };
  %179() /* ty=(Tensor[(336, 1), int32],) */
}

def @main() -> (Tensor[(4, 12, 14), float32], Tensor[(2, 7, 7), float64]) {
  %180 = @func_2346() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %181 = @func_6851() /* ty=(Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %184 = %180.2;
  %185 = sin(%183) /* ty=Tensor[(2, 7, 7), float64] */;
  (%184, %185)
}

def @func_1657() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %190 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
    %186 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
    %187 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
    %188 = %186.0;
    %189 = %187.0;
    (%188, %189)
  };
  %190() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_5985(%var_5984: uint16) -> (Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], uint16, Tensor[(1372), uint16], Tensor[(1, 1372), uint16], Tensor[(13, 10, 2), float32]) {
  %203 = fn (%var_5963: uint16) -> (Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], uint16, Tensor[(1372), uint16], Tensor[(1, 1372), uint16], Tensor[(13, 10, 2), float32]) {
    %191 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
    %192 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1372), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1372), uint16] */;
    %193 = reshape(%192, newshape=[1372]) /* ty=Tensor[(1372), uint16] */;
    %194 = @func_2429(%193) /* ty=(Tensor[(336), int32], Tensor[(2, 56), int32], Tensor[(1372), uint16]) */;
    %195 = cast(%var_5963, dtype="uint16") /* ty=uint16 */;
    %196 = reshape(%195, newshape=[]) /* ty=uint16 */;
    %197 = @func_4742(%196) /* ty=Tensor[(13, 10, 2), uint16] */;
    %198 = cast(%197, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
    %199 = %191.0;
    %200 = @func_5285() /* ty=Tensor[(12, 3, 6), float32] */;
    %201 = %194.2;
    %202 = exp(%198) /* ty=Tensor[(13, 10, 2), float32] */;
    (%199, %200, %var_5963, %201, meta[relay.Constant][7] /* ty=Tensor[(1, 1372), uint16] */, %202)
  };
  %203(%var_5984) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], uint16, Tensor[(1372), uint16], Tensor[(1, 1372), uint16], Tensor[(13, 10, 2), float32]) */
}

def @func_5424(%var_5398: Tensor[(4, 12, 14), float32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %204 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  %205 = cast(%var_5398, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = less(%207, %208) /* ty=Tensor[(4, 12, 14), bool] */;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %211 = @func_5141() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %212 = erf(%210) /* ty=Tensor[(4, 12, 14), float32] */;
  %213 = %211.0;
  (%212, %213)
}

def @func_5857() -> Tensor[(4, 12, 14), float32] {
  @func_5855() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_2278() -> Tensor[(4, 12, 14), float32] {
  %214 = fn () -> Tensor[(4, 12, 14), float32] {
    @func_1780() /* ty=Tensor[(4, 12, 14), float32] */
  };
  %214() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_3744(%var_3743: Tensor[(8, 42), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) {
  %228 = fn (%var_3727: Tensor[(8, 42), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) {
    %215 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
    %216 = cast(%215, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
    %217 = asinh(%216) /* ty=Tensor[(4, 12, 14), float64] */;
    %218 = cast(%217, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
    %219 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %220 = cast(%var_3727, dtype="int32") /* ty=Tensor[(8, 42), int32] */;
    %221 = reshape(%220, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %222 = @func_1940(%221) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
    %223 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
    %224 = atanh(%218) /* ty=Tensor[(4, 12, 14), float64] */;
    %225 = %219.2;
    %226 = %222.2;
    %227 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
    (%223, %224, %225, %226, %var_3727, %227)
  };
  %228(%var_3743) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */
}

def @func_7181() -> Tensor[(4, 12, 14), float32] {
  @func_6603() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_3768() -> (Tensor[(4, 12, 14), float32],) {
  %231 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %229 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %230 = %229.0;
    (%230,)
  };
  %231() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_2883(%var_2881: Tensor[(7, 9, 7), float32]) -> (Tensor[(7, 9, 7), float64],) {
  @func_2880(%var_2881) /* ty=(Tensor[(7, 9, 7), float64],) */
}

def @func_4711(%var_4709: Tensor[(1372), uint16], %var_4710: Tensor[(1372), uint16]) -> (Tensor[(1372), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(1372), float64], Tensor[(1372), float64]) {
  %261 = fn (%var_4623: Tensor[(1372), uint16], %var_4654: Tensor[(1372), uint16]) -> (Tensor[(1372), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(1372), float64], Tensor[(1372), float64]) {
    %232 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
    %233 = %232.1;
    %234 = cast(%var_4623, dtype="float64") /* ty=Tensor[(1372), float64] */;
    %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(1), int32] */;
    %236 = cast(%233, dtype="float64") /* ty=Tensor[(1372), float64] */;
    %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?), float64] */;
    %238 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
    %239 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %240 = cast(%var_4654, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
    %241 = shape_of(%var_4623, dtype="int32") /* ty=Tensor[(1), int32] */;
    %242 = cast(%var_4623, dtype="uint8") /* ty=Tensor[(1372), uint8] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %244 = multiply(%242, %243) /* ty=Tensor[(1372), uint8] */;
    %245 = cast(%244, dtype="uint16") /* ty=Tensor[(1372), uint16] */;
    %246 = reshape(%245, newshape=[1372, 1]) /* ty=Tensor[(1372, 1), uint16] */;
    %247 = @func_2715(%246) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) */;
    %248 = cast(%233, dtype="float32") /* ty=Tensor[(1372), float32] */;
    %249 = acos(%248) /* ty=Tensor[(1372), float32] */;
    %250 = cast(%244, dtype="float64") /* ty=Tensor[(1372), float64] */;
    %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(1), int32] */;
    %252 = cast(%249, dtype="float64") /* ty=Tensor[(1372), float64] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?), float64] */;
    %254 = cast(%249, dtype="float64") /* ty=Tensor[(1372), float64] */;
    %255 = power(%236, %237) /* ty=Tensor[(1372), float64] */;
    %256 = %238.0;
    %257 = %239.0;
    %258 = %247.2;
    %259 = floor_mod(%252, %253) /* ty=Tensor[(1372), float64] */;
    %260 = asin(%254) /* ty=Tensor[(1372), float64] */;
    (%255, %256, %257, %258, %259, %260)
  };
  %261(%var_4709, %var_4710) /* ty=(Tensor[(1372), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(1372), float64], Tensor[(1372), float64]) */
}

def @func_3437() -> Tensor[(5, 7, 11), int64] {
  %262 = fn () -> Tensor[(5, 7, 11), int64] {
    @func_3405() /* ty=Tensor[(5, 7, 11), int64] */
  };
  %262() /* ty=Tensor[(5, 7, 11), int64] */
}

def @func_8608() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64]) {
  %263 = @func_6357() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %264 = %263.0;
  %265 = @func_5811() /* ty=Tensor[(4, 12, 14), float64] */;
  (%264, %265)
}

def @func_6116() -> Tensor[(5, 7, 11), int64] {
  %266 = fn () -> Tensor[(5, 7, 11), int64] {
    @func_3405() /* ty=Tensor[(5, 7, 11), int64] */
  };
  %266() /* ty=Tensor[(5, 7, 11), int64] */
}

def @func_8121() -> Tensor[(4, 12, 14), float32] {
  %268 = fn () -> Tensor[(4, 12, 14), float32] {
    %267 = @func_6635() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %267.1
  };
  %268() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_3530() -> (Tensor[(4, 12, 14), float32],) {
  %269 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %270 = %269.0;
  (%270,)
}

def @func_1609() -> (Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) {
  %278 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) {
    %271 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %272 = %271.0;
    %273 = cast(%272, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %274 = cast(meta[relay.Constant][8] /* ty=Tensor[(441), int32] */, dtype="int32") /* ty=Tensor[(441), int32] */;
    %275 = reshape(%274, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
    %276 = sinh(%273) /* ty=Tensor[(4, 12, 14), float32] */;
    %277 = @func_215(%275) /* ty=Tensor[(7, 9, 7), float32] */;
    (%276, %277, meta[relay.Constant][8] /* ty=Tensor[(441), int32] */)
  };
  %278() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */
}

def @func_6605() -> Tensor[(4, 12, 14), float32] {
  @func_6603() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_2014() -> Tensor[(4, 12, 14), float32] {
  @func_2012() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6899() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_6897() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_5669(%var_5667: Tensor[(7, 5, 2), float32]) -> (Tensor[(7, 5, 2), float32],) {
  @func_5666(%var_5667) /* ty=(Tensor[(7, 5, 2), float32],) */
}

def @func_4416() -> (Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %279 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %280 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %281 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %282 = %279.1;
  %283 = %280.0;
  %284 = %281.0;
  (%282, %283, %284)
}

def @func_8628(%var_8627: Tensor[(13, 2, 11), bool]) -> Tensor[(13, 2, 11), bool] {
  %289 = fn (%var_8619: Tensor[(13, 2, 11), bool]) -> Tensor[(13, 2, 11), bool] {
    %285 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 2, 11), bool] */, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
    %286 = shape_of(%var_8619, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%var_8619, dtype="bool") /* ty=Tensor[(13, 2, 11), bool] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%287, %288) /* ty=Tensor[(13, 2, 11), bool] */
  };
  %289(%var_8627) /* ty=Tensor[(13, 2, 11), bool] */
}

def @func_5855() -> Tensor[(4, 12, 14), float32] {
  %290 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %290.2
}

def @func_9275(%var_9273: Tensor[(9, 14, 7), uint32], %var_9274: Tensor[(9, 14, 7), uint32]) -> (Tensor[(9, 14, 7), uint32], Tensor[(312, 1), uint64], Tensor[(28), int32], Tensor[(4, 12, 14), float32]) {
  @func_9271(%var_9273, %var_9274) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(312, 1), uint64], Tensor[(28), int32], Tensor[(4, 12, 14), float32]) */
}

def @func_4201(%var_4154: Tensor[(5, 7, 11), int64]) -> (Tensor[(5, 7, 11), float64], Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float64], Tensor[(336), int32]) {
  %291 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
  %292 = cast(%var_4154, dtype="float64") /* ty=Tensor[(5, 7, 11), float64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="float64") /* ty=Tensor[(5, 7, 11), float64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %296 = cast(%291, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
  %297 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %298 = reshape(%297, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %299 = @func_3835(%298) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
  %300 = subtract(%294, %295) /* ty=Tensor[(5, 7, 11), float64] */;
  %301 = sinh(%296) /* ty=Tensor[(5, 7, 11), float32] */;
  %302 = %299.2;
  (%300, %301, %302, meta[relay.Constant][10] /* ty=Tensor[(336), int32] */)
}

def @func_8260(%var_8259: Tensor[(441), int32]) -> (Tensor[(5, 7, 11), int64], Tensor[(441), uint32]) {
  %311 = fn (%var_8234: Tensor[(441), int32]) -> (Tensor[(5, 7, 11), int64], Tensor[(441), uint32]) {
    %303 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
    %304 = %303.2;
    %305 = cast(%var_8234, dtype="uint32") /* ty=Tensor[(441), uint32] */;
    %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(1), int32] */;
    %307 = cast(%304, dtype="uint32") /* ty=Tensor[(441), uint32] */;
    %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %309 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
    %310 = minimum(%307, %308) /* ty=Tensor[(441), uint32] */;
    (%309, %310)
  };
  %311(%var_8259) /* ty=(Tensor[(5, 7, 11), int64], Tensor[(441), uint32]) */
}

def @func_2346() -> (Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_8662() -> (Tensor[(4, 12, 14), float32], Tensor[(441), bool]) {
  %312 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  %313 = @func_7224() /* ty=Tensor[(441), bool] */;
  (%312, %313)
}

def @func_6035() -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(7, 5, 2), float32], Tensor[(70), float32]) {
  @func_6033() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(7, 5, 2), float32], Tensor[(70), float32]) */
}

def @func_3752() -> (Tensor[(4, 12, 14), float32],) {
  %314 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  (%314,)
}

def @func_5491(%var_5489: Tensor[(1, 16, 10), int64]) -> Tensor[(?, 16, 10), bool] {
  @func_5488(%var_5489) /* ty=Tensor[(?, 16, 10), bool] */
}

def @func_8806() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) {
  @func_8804() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) */
}

def @func_9443() -> Tensor[(4, 12, 14), float32] {
  @func_9441() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_8019() -> Tensor[(4, 12, 14), float32] {
  @func_3167() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_4875(%var_4874: Tensor[(8, 6, 7), float64]) -> (Tensor[(8, 6, 7), float64], Tensor[(5, 7, 11), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
  %325 = fn (%var_4824: Tensor[(8, 6, 7), float64]) -> (Tensor[(8, 6, 7), float64], Tensor[(5, 7, 11), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) {
    %315 = cast(%var_4824, dtype="float64") /* ty=Tensor[(8, 6, 7), float64] */;
    %316 = sin(%315) /* ty=Tensor[(8, 6, 7), float64] */;
    %317 = cast(%316, dtype="int32") /* ty=Tensor[(8, 6, 7), int32] */;
    %318 = reshape(%317, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %319 = @func_3835(%318) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
    %320 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %321 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %322 = %319.1;
    %323 = %320.0;
    %324 = %321.1;
    (%316, %322, %323, %324)
  };
  %325(%var_4874) /* ty=(Tensor[(8, 6, 7), float64], Tensor[(5, 7, 11), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */
}

def @func_4377() -> Tensor[(4, 12, 14), float32] {
  %327 = fn () -> Tensor[(4, 12, 14), float32] {
    %326 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
    %326.2
  };
  %327() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_5585(%var_5584: Tensor[(112), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(112), int32], Tensor[(336), int32]) {
  %338 = fn (%var_5574: Tensor[(112), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(112), int32], Tensor[(336), int32]) {
    %328 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %329 = cast(%var_5574, dtype="int32") /* ty=Tensor[(112), int32] */;
    %330 = cast(meta[relay.Constant][11] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %331 = %328.0;
    %332 = cast(%331, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %333 = reshape(%329, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %334 = reshape(%330, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %335 = reshape(%332, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
    %336 = @func_1727(%333, %334, %335) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
    %337 = %336.3;
    (%331, %337, %var_5574, meta[relay.Constant][11] /* ty=Tensor[(336), int32] */)
  };
  %338(%var_5584) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(112), int32], Tensor[(336), int32]) */
}

def @func_5530() -> Tensor[(4, 12, 14), float64] {
  %341 = fn () -> Tensor[(4, 12, 14), float64] {
    %339 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
    %340 = cast(%339, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
    rsqrt(%340) /* ty=Tensor[(4, 12, 14), float64] */
  };
  %341() /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_3405() -> Tensor[(5, 7, 11), int64] {
  %342 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %342.2
}

def @func_218(%var_216: Tensor[(7, 9, 7), int32]) -> Tensor[(7, 9, 7), float32] {
  @func_215(%var_216) /* ty=Tensor[(7, 9, 7), float32] */
}

def @func_2405(%var_2403: Tensor[(490), float64]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) {
  @func_2402(%var_2403) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) */
}

def @func_4920(%var_4917: Tensor[(9, 8, 10), uint32], %var_4918: Tensor[(9, 8, 10), uint32], %var_4919: Tensor[(490), float64]) -> (Tensor[(7, 14, 5), float64], Tensor[(490), float64], Tensor[(9, 8, 10), int64]) {
  %356 = fn (%var_4891: Tensor[(9, 8, 10), uint32], %var_4892: Tensor[(9, 8, 10), uint32], %var_4905: Tensor[(490), float64]) -> (Tensor[(7, 14, 5), float64], Tensor[(490), float64], Tensor[(9, 8, 10), int64]) {
    %343 = cast(%var_4905, dtype="float64") /* ty=Tensor[(490), float64] */;
    %344 = reshape(%343, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
    %345 = cast(%var_4892, dtype="uint32") /* ty=Tensor[(9, 8, 10), uint32] */;
    %346 = shape_of(%var_4891, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%var_4891, dtype="uint32") /* ty=Tensor[(9, 8, 10), uint32] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %349 = multiply(%347, %348) /* ty=Tensor[(9, 8, 10), uint32] */;
    %350 = cast(%349, dtype="int64") /* ty=Tensor[(9, 8, 10), int64] */;
    %351 = shape_of(%var_4891, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%var_4891, dtype="int64") /* ty=Tensor[(9, 8, 10), int64] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %354 = @func_1623(%344) /* ty=Tensor[(7, 14, 5), float64] */;
    %355 = add(%352, %353) /* ty=Tensor[(9, 8, 10), int64] */;
    (%354, %var_4905, %355)
  };
  %356(%var_4917, %var_4918, %var_4919) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(490), float64], Tensor[(9, 8, 10), int64]) */
}

def @func_7824() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(336, 1), int32]) {
  %365 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(336, 1), int32]) {
    %357 = @func_4358() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %358 = @func_4951() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %359 = cast(meta[relay.Constant][12] /* ty=Tensor[(336, 1), int32] */, dtype="int32") /* ty=Tensor[(336, 1), int32] */;
    %360 = reshape(%359, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %361 = @func_3835(%360) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float64], Tensor[(336), int32], Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
    %362 = %357.0;
    %363 = %358.0;
    %364 = %361.3;
    (%362, %363, %364, meta[relay.Constant][12] /* ty=Tensor[(336, 1), int32] */)
  };
  %365() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(336, 1), int32]) */
}

def @func_3169() -> Tensor[(4, 12, 14), float32] {
  @func_3167() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_5787() -> (Tensor[(4, 12, 14), float32],) {
  %366 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
  (%366,)
}

def @func_3754() -> (Tensor[(4, 12, 14), float32],) {
  @func_3752() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_4115(%var_4093: Tensor[(5, 4, 5), float64]) -> (Tensor[(5, 4, 5), float64], Tensor[(4, 12, 14), float32]) {
  %367 = cast(%var_4093, dtype="float64") /* ty=Tensor[(5, 4, 5), float64] */;
  %368 = acosh(%367) /* ty=Tensor[(5, 4, 5), float64] */;
  %369 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  (%368, %369)
}

def @func_8080() -> Tensor[(336, 1), int32] {
  @func_8078() /* ty=Tensor[(336, 1), int32] */
}

def @func_7459() -> (Tensor[(4, 12, 14), float32], Tensor[(12, 3, 6), float32], Tensor[(1372, 1), float64], Tensor[(1372, 1), uint16]) {
  %370 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %371 = cast(meta[relay.Constant][13] /* ty=Tensor[(1372, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1372, 1), uint16] */;
  %372 = reshape(%371, newshape=[1372, 1]) /* ty=Tensor[(1372, 1), uint16] */;
  %373 = @func_2715(%372) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(1372, 1), float64]) */;
  %374 = %370.0;
  %375 = @func_5285() /* ty=Tensor[(12, 3, 6), float32] */;
  %376 = %373.3;
  (%374, %375, %376, meta[relay.Constant][13] /* ty=Tensor[(1372, 1), uint16] */)
}

def @func_5389(%var_5388: Tensor[(100), float64]) -> (Tensor[(672), float32], Tensor[(100), float64], Tensor[(4, 12, 14), int8], Tensor[(336, 1), float32]) {
  %395 = fn (%var_5364: Tensor[(100), float64]) -> (Tensor[(672), float32], Tensor[(100), float64], Tensor[(4, 12, 14), int8], Tensor[(336, 1), float32]) {
    %377 = cast(meta[relay.Constant][14] /* ty=Tensor[(336, 1), int32] */, dtype="int32") /* ty=Tensor[(336, 1), int32] */;
    %378 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
    %379 = cast(%378, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %380 = reshape(%377, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %381 = reshape(%379, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %382 = @func_2588(%380, %381) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */;
    %383 = cast(%var_5364, dtype="float64") /* ty=Tensor[(100), float64] */;
    %384 = reshape(%383, newshape=[5, 4, 5]) /* ty=Tensor[(5, 4, 5), float64] */;
    %385 = @func_4115(%384) /* ty=(Tensor[(5, 4, 5), float64], Tensor[(4, 12, 14), float32]) */;
    %386 = %385.1;
    %387 = cast(%386, dtype="int8") /* ty=Tensor[(4, 12, 14), int8] */;
    %388 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %389 = cast(%378, dtype="int8") /* ty=Tensor[(4, 12, 14), int8] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %391 = cast(meta[relay.Constant][14] /* ty=Tensor[(336, 1), int32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
    %392 = %382.3;
    %393 = logical_xor(%389, %390) /* ty=Tensor[(4, 12, 14), int8] */;
    %394 = acosh(%391) /* ty=Tensor[(336, 1), float32] */;
    (%392, %var_5364, %393, %394)
  };
  %395(%var_5388) /* ty=(Tensor[(672), float32], Tensor[(100), float64], Tensor[(4, 12, 14), int8], Tensor[(336, 1), float32]) */
}

def @func_6574() -> Tensor[(4, 12, 14), float32] {
  @func_4376() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6255() -> (Tensor[(1372), uint16],) {
  @func_6253() /* ty=(Tensor[(1372), uint16],) */
}

def @func_5508() -> Tensor[(4, 12, 14), float32] {
  %396 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %396.0
}

def @func_1867(%var_1825: Tensor[(14, 7, 14), uint16], %var_1863: Tensor[(336), int32]) -> (Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) {
  %397 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 7, 14), uint16] */, dtype="uint16") /* ty=Tensor[(14, 7, 14), uint16] */;
  %398 = shape_of(%var_1825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_1825, dtype="uint16") /* ty=Tensor[(14, 7, 14), uint16] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %401 = @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %402 = %401.0;
  %403 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 56), int32] */, dtype="int32") /* ty=Tensor[(2, 56), int32] */;
  %408 = cast(%var_1863, dtype="int32") /* ty=Tensor[(336), int32] */;
  %409 = mod(%405, %406) /* ty=Tensor[(4, 12, 14), float32] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %411 = reshape(%407, newshape=[112]) /* ty=Tensor[(112), int32] */;
  %412 = reshape(%408, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %413 = reshape(%410, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
  %414 = @func_1727(%411, %412, %413) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
  %415 = logical_xor(%399, %400) /* ty=Tensor[(14, 7, 14), uint16] */;
  %416 = %414.0;
  (%415, %409, %416, meta[relay.Constant][17] /* ty=Tensor[(2, 56), int32] */, %var_1863)
}

def @func_8367() -> Tensor[(4, 12, 14), float32] {
  %417 = fn () -> Tensor[(4, 12, 14), float32] {
    @func_3167() /* ty=Tensor[(4, 12, 14), float32] */
  };
  %417() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_6135(%var_6133: Tensor[(3, 8, 13), uint64], %var_6134: Tensor[(3, 8, 13), uint64]) -> (Tensor[(3, 8, 13), float64],) {
  %425 = fn (%var_6125: Tensor[(3, 8, 13), uint64], %var_6126: Tensor[(3, 8, 13), uint64]) -> (Tensor[(3, 8, 13), float64],) {
    %418 = cast(%var_6126, dtype="bool") /* ty=Tensor[(3, 8, 13), bool] */;
    %419 = shape_of(%var_6125, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%var_6125, dtype="bool") /* ty=Tensor[(3, 8, 13), bool] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %422 = less(%420, %421) /* ty=Tensor[(3, 8, 13), bool] */;
    %423 = cast(%422, dtype="float64") /* ty=Tensor[(3, 8, 13), float64] */;
    %424 = exp(%423) /* ty=Tensor[(3, 8, 13), float64] */;
    (%424,)
  };
  %425(%var_6133, %var_6134) /* ty=(Tensor[(3, 8, 13), float64],) */
}

def @func_1597() -> (Tensor[(4, 12, 14), float32],) {
  @func_1595() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_6243() -> (Tensor[(4, 12, 14), float32], Tensor[(336), float64], Tensor[(4, 12, 14), float32], Tensor[(1372), bool], Tensor[(1372), float64]) {
  @func_6241() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(336), float64], Tensor[(4, 12, 14), float32], Tensor[(1372), bool], Tensor[(1372), float64]) */
}

def @func_6483() -> Tensor[(4, 12, 14), float32] {
  @func_1566() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_4204(%var_4202: Tensor[(5, 7, 11), int64]) -> (Tensor[(5, 7, 11), float64], Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float64], Tensor[(336), int32]) {
  @func_4201(%var_4202) /* ty=(Tensor[(5, 7, 11), float64], Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float64], Tensor[(336), int32]) */
}

def @func_6504(%var_6502: Tensor[(3, 10, 13), bool], %var_6503: Tensor[(3, 10, 13), bool]) -> (Tensor[(3, 10, 13), bool],) {
  %431 = fn (%var_6493: Tensor[(3, 10, 13), bool], %var_6494: Tensor[(3, 10, 13), bool]) -> (Tensor[(3, 10, 13), bool],) {
    %426 = cast(%var_6494, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
    %427 = shape_of(%var_6493, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%var_6493, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %430 = logical_or(%428, %429) /* ty=Tensor[(3, 10, 13), bool] */;
    (%430,)
  };
  %431(%var_6502, %var_6503) /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_4823() -> (Tensor[(4, 12, 14), float32], Tensor[(2, 56), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
  %443 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(2, 56), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
    %432 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
    %433 = @func_4553() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %434 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
    %435 = cast(%434, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %436 = reshape(%435, newshape=[672]) /* ty=Tensor[(672), float32] */;
    %437 = @func_3066(%436) /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
    %438 = %432.0;
    %439 = @func_4376() /* ty=Tensor[(4, 12, 14), float32] */;
    %440 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
    %441 = %433.1;
    %442 = %437.1;
    (%434, %438, %439, %440, %441, %442)
  };
  %443() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(2, 56), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) */
}

def @func_5285() -> Tensor[(12, 3, 6), float32] {
  %444 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 3, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 3, 6), float32] */;
  log2(%444) /* ty=Tensor[(12, 3, 6), float32] */
}

def @func_2402(%var_2399: Tensor[(490), float64]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) {
  %445 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %446 = cast(%var_2399, dtype="float64") /* ty=Tensor[(490), float64] */;
  %447 = reshape(%446, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %448 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  %449 = %445.1;
  %450 = @func_1623(%447) /* ty=Tensor[(7, 14, 5), float64] */;
  (%448, %449, %450, %var_2399)
}

def @func_7395() -> Tensor[(4, 12, 14), float32] {
  %452 = fn () -> Tensor[(4, 12, 14), float32] {
    %451 = @func_6241() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(336), float64], Tensor[(4, 12, 14), float32], Tensor[(1372), bool], Tensor[(1372), float64]) */;
    %451.0
  };
  %452() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_4359() -> (Tensor[(4, 12, 14), float32],) {
  %455 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %453 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %454 = %453.0;
    (%454,)
  };
  %455() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_4555() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_4553() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_7282() -> (Tensor[(4, 12, 14), float32],) {
  %458 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %456 = @func_4553() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %457 = %456.1;
    (%457,)
  };
  %458() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_2527(%var_2447: Tensor[(336), int32], %var_2453: Tensor[(4, 28), int32], %var_2469: Tensor[(4, 28), uint32]) -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) {
  %459 = cast(%var_2447, dtype="int32") /* ty=Tensor[(336), int32] */;
  %460 = reshape(%459, newshape=[336]) /* ty=Tensor[(336), int32] */;
  %461 = @func_1940(%460) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
  %462 = %461.3;
  %463 = cast(%var_2453, dtype="uint32") /* ty=Tensor[(4, 28), uint32] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(2), int32] */;
  %465 = cast(%462, dtype="uint32") /* ty=Tensor[(4, 28), uint32] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %467 = add(%465, %466) /* ty=Tensor[(4, 28), uint32] */;
  %468 = cast(%var_2469, dtype="int8") /* ty=Tensor[(4, 28), int8] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(2), int32] */;
  %470 = cast(%467, dtype="int8") /* ty=Tensor[(4, 28), int8] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %472 = multiply(%470, %471) /* ty=Tensor[(4, 28), int8] */;
  %473 = cast(%472, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %474 = shape_of(%var_2469, dtype="int32") /* ty=Tensor[(2), int32] */;
  %475 = cast(%var_2469, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %477 = floor_divide(%475, %476) /* ty=Tensor[(4, 28), float64] */;
  %478 = cast(%477, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
  %479 = shape_of(%472, dtype="int32") /* ty=Tensor[(2), int32] */;
  %480 = cast(%472, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %482 = cast(%462, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %483 = shape_of(%477, dtype="int32") /* ty=Tensor[(2), int32] */;
  %484 = cast(%477, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %486 = divide(%484, %485) /* ty=Tensor[(4, 28), float32] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %488 = shape_of(%472, dtype="int32") /* ty=Tensor[(2), int32] */;
  %489 = cast(%472, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %491 = mod(%489, %490) /* ty=Tensor[(4, 28), float64] */;
  %492 = cast(%472, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(2), int32] */;
  %494 = cast(%491, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %496 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
  %497 = @func_2277() /* ty=Tensor[(4, 12, 14), float32] */;
  %498 = right_shift(%480, %481) /* ty=Tensor[(4, 28), uint8] */;
  %499 = power(%494, %495) /* ty=Tensor[(4, 28), float64] */;
  (%496, %var_2447, %497, %498, %499)
}

def @func_1566() -> Tensor[(4, 12, 14), float32] {
  %500 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  log2(%500) /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_7500() -> (Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) {
  @func_7498() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) */
}

def @func_7524() -> (Tensor[(4, 12, 14), float32],) {
  %501 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %502 = %501.0;
  (%502,)
}

def @func_7894(%var_7893: Tensor[(14, 1, 2), int32]) -> (Tensor[(14, 11, 2), bool], Tensor[(3, 8, 13), float64], Tensor[(312, 1), uint64]) {
  %512 = fn (%var_7872: Tensor[(14, 1, 2), int32]) -> (Tensor[(14, 11, 2), bool], Tensor[(3, 8, 13), float64], Tensor[(312, 1), uint64]) {
    %503 = cast(%var_7872, dtype="bool") /* ty=Tensor[(14, 1, 2), bool] */;
    %504 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 11, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 11, 2), bool] */;
    %505 = cast(meta[relay.Constant][21] /* ty=Tensor[(312, 1), uint64] */, dtype="uint64") /* ty=Tensor[(312, 1), uint64] */;
    %506 = cast(meta[relay.Constant][21] /* ty=Tensor[(312, 1), uint64] */, dtype="uint64") /* ty=Tensor[(312, 1), uint64] */;
    %507 = reshape(%505, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
    %508 = reshape(%506, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
    %509 = @func_6132(%507, %508) /* ty=(Tensor[(3, 8, 13), float64],) */;
    %510 = equal(%503, %504) /* ty=Tensor[(14, 11, 2), bool] */;
    %511 = %509.0;
    (%510, %511, meta[relay.Constant][21] /* ty=Tensor[(312, 1), uint64] */)
  };
  %512(%var_7893) /* ty=(Tensor[(14, 11, 2), bool], Tensor[(3, 8, 13), float64], Tensor[(312, 1), uint64]) */
}

def @func_9441() -> Tensor[(4, 12, 14), float32] {
  %513 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %513.0
}

def @func_9085() -> (Tensor[(4, 12, 14), float32],) {
  %516 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %514 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
    %515 = %514.2;
    (%515,)
  };
  %516() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_1871(%var_1869: Tensor[(14, 7, 14), uint16], %var_1870: Tensor[(336), int32]) -> (Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) {
  @func_1867(%var_1869, %var_1870) /* ty=(Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) */
}

def @func_2880(%var_2858: Tensor[(7, 9, 7), float32]) -> (Tensor[(7, 9, 7), float64],) {
  %517 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
  %518 = %517.1;
  %519 = cast(%var_2858, dtype="float64") /* ty=Tensor[(7, 9, 7), float64] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="float64") /* ty=Tensor[(7, 9, 7), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %523 = mod(%521, %522) /* ty=Tensor[(7, 9, 7), float64] */;
  (%523,)
}

def @func_1781() -> Tensor[(4, 12, 14), float32] {
  %525 = fn () -> Tensor[(4, 12, 14), float32] {
    %524 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
    %524.0
  };
  %525() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_8089() -> Tensor[(12, 3, 6), float32] {
  %526 = fn () -> Tensor[(12, 3, 6), float32] {
    @func_5285() /* ty=Tensor[(12, 3, 6), float32] */
  };
  %526() /* ty=Tensor[(12, 3, 6), float32] */
}

def @func_4418() -> (Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_3461() -> (Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) {
  @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_6636() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %530 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
    %527 = @func_6357() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %528 = %527.0;
    %529 = @func_5469() /* ty=Tensor[(4, 12, 14), float32] */;
    (%528, %529)
  };
  %530() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_7332() -> Tensor[(4, 12, 14), float32] {
  @func_7330() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_1732(%var_1729: Tensor[(112), int32], %var_1730: Tensor[(336), int32], %var_1731: Tensor[(4, 12, 14), float32]) -> (Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) {
  @func_1727(%var_1729, %var_1730, %var_1731) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */
}

def @func_5143() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_5141() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_4744(%var_4743: uint16) -> Tensor[(13, 10, 2), uint16] {
  %533 = fn (%var_4733: uint16) -> Tensor[(13, 10, 2), uint16] {
    %531 = cast(%var_4733, dtype="uint16") /* ty=uint16 */;
    %532 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 10, 2), uint16] */, dtype="uint16") /* ty=Tensor[(13, 10, 2), uint16] */;
    bitwise_or(%531, %532) /* ty=Tensor[(13, 10, 2), uint16] */
  };
  %533(%var_4743) /* ty=Tensor[(13, 10, 2), uint16] */
}

def @func_5813() -> Tensor[(4, 12, 14), float64] {
  @func_5811() /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_2591(%var_2589: Tensor[(336), int32], %var_2590: Tensor[(672), float32]) -> (Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) {
  %556 = fn (%var_2566: Tensor[(336), int32], %var_2567: Tensor[(672), float32]) -> (Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) {
    %534 = cast(meta[relay.Constant][23] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %535 = cast(%var_2566, dtype="int32") /* ty=Tensor[(336), int32] */;
    %536 = cast(%var_2567, dtype="float32") /* ty=Tensor[(672), float32] */;
    %537 = reshape(%534, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %538 = reshape(%535, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %539 = reshape(%536, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
    %540 = @func_1727(%537, %538, %539) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
    %541 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
    %542 = %541.2;
    %543 = cast(%542, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
    %544 = asinh(%543) /* ty=Tensor[(5, 7, 11), float32] */;
    %545 = cast(%542, dtype="int8") /* ty=Tensor[(5, 7, 11), int8] */;
    %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%544, dtype="int8") /* ty=Tensor[(5, 7, 11), int8] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %549 = right_shift(%547, %548) /* ty=Tensor[(5, 7, 11), int8] */;
    %550 = cast(%549, dtype="uint32") /* ty=Tensor[(5, 7, 11), uint32] */;
    %551 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%544, dtype="uint32") /* ty=Tensor[(5, 7, 11), uint32] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %554 = %540.2;
    %555 = multiply(%552, %553) /* ty=Tensor[(5, 7, 11), uint32] */;
    (%554, meta[relay.Constant][23] /* ty=Tensor[(112), int32] */, %var_2566, %var_2567, %555)
  };
  %556(%var_2589, %var_2590) /* ty=(Tensor[(336), int32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(5, 7, 11), uint32]) */
}

def @func_7947() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %560 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
    %557 = @func_3530() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %558 = @func_5469() /* ty=Tensor[(4, 12, 14), float32] */;
    %559 = %557.0;
    (%558, %559)
  };
  %560() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_2945(%var_2943: Tensor[(168, 2), int32], %var_2944: Tensor[(4, 28), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(168, 2), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), bool], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) {
  %580 = fn (%var_2911: Tensor[(168, 2), int32], %var_2921: Tensor[(4, 28), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(168, 2), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), bool], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) {
    %561 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %562 = cast(%var_2911, dtype="int32") /* ty=Tensor[(168, 2), int32] */;
    %563 = reshape(%562, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %564 = @func_1940(%563) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
    %565 = %564.3;
    %566 = cast(%var_2921, dtype="bool") /* ty=Tensor[(4, 28), bool] */;
    %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(2), int32] */;
    %568 = cast(%565, dtype="bool") /* ty=Tensor[(4, 28), bool] */;
    %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %570 = cast(%565, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
    %571 = shape_of(%var_2921, dtype="int32") /* ty=Tensor[(2), int32] */;
    %572 = cast(%var_2921, dtype="uint8") /* ty=Tensor[(4, 28), uint8] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %574 = cast(%var_2921, dtype="float64") /* ty=Tensor[(4, 28), float64] */;
    %575 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
    %576 = %561.1;
    %577 = less(%568, %569) /* ty=Tensor[(4, 28), bool] */;
    %578 = logical_xor(%572, %573) /* ty=Tensor[(4, 28), uint8] */;
    %579 = tan(%574) /* ty=Tensor[(4, 28), float64] */;
    (%575, %var_2911, %576, %577, %578, %579)
  };
  %580(%var_2943, %var_2944) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(168, 2), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 28), bool], Tensor[(4, 28), uint8], Tensor[(4, 28), float64]) */
}

def @func_8347() -> (Tensor[(4, 12, 14), float32],) {
  %583 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %581 = @func_4822() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(2, 56), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) */;
    %582 = %581.3;
    (%582,)
  };
  %583() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_7498() -> (Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) {
  %584 = @func_7265() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %585 = cast(meta[relay.Constant][24] /* ty=Tensor[(490), float64] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %586 = reshape(%585, newshape=[7, 14, 5]) /* ty=Tensor[(7, 14, 5), float64] */;
  %587 = %584.0;
  %588 = @func_1623(%586) /* ty=Tensor[(7, 14, 5), float64] */;
  (%587, %588, meta[relay.Constant][24] /* ty=Tensor[(490), float64] */)
}

def @func_3532() -> (Tensor[(4, 12, 14), float32],) {
  @func_3530() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_2644(%var_2642: float64, %var_2643: Tensor[(11, 1, 7), float64]) -> Tensor[(11, 1, 7), float64] {
  @func_2640(%var_2642, %var_2643) /* ty=Tensor[(11, 1, 7), float64] */
}

def @func_2130() -> (Tensor[(4, 12, 14), float32],) {
  @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_7526() -> (Tensor[(4, 12, 14), float32],) {
  @func_7524() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_8021() -> Tensor[(4, 12, 14), float32] {
  @func_8019() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_5189(%var_5187: Tensor[(385), int64], %var_5188: Tensor[(490), float64]) -> (Tensor[(336), int32], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(4, 180), uint32], Tensor[(490), float64]) {
  %605 = fn (%var_5153: Tensor[(385), int64], %var_5173: Tensor[(490), float64]) -> (Tensor[(336), int32], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(4, 180), uint32], Tensor[(490), float64]) {
    %589 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
    %590 = cast(%var_5153, dtype="int64") /* ty=Tensor[(385), int64] */;
    %591 = reshape(%590, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
    %592 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
    %593 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 180), uint32] */, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
    %594 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 180), uint32] */, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
    %595 = cast(%var_5173, dtype="float64") /* ty=Tensor[(490), float64] */;
    %596 = reshape(%593, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), uint32] */;
    %597 = reshape(%594, newshape=[9, 8, 10]) /* ty=Tensor[(9, 8, 10), uint32] */;
    %598 = reshape(%595, newshape=[490]) /* ty=Tensor[(490), float64] */;
    %599 = @func_4916(%596, %597, %598) /* ty=(Tensor[(7, 14, 5), float64], Tensor[(490), float64], Tensor[(9, 8, 10), int64]) */;
    %600 = %589.0;
    %601 = @func_3338(%591) /* ty=Tensor[(5, 7, 11), bool] */;
    %602 = %592.0;
    %603 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
    %604 = %599.0;
    (%600, %601, %var_5153, %602, %603, %604, meta[relay.Constant][25] /* ty=Tensor[(4, 180), uint32] */, %var_5173)
  };
  %605(%var_5187, %var_5188) /* ty=(Tensor[(336), int32], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(4, 180), uint32], Tensor[(490), float64]) */
}

def @func_6358() -> (Tensor[(4, 12, 14), float32],) {
  %607 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %606 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
    (%606,)
  };
  %607() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_6897() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %608 = @func_5908() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %609 = @func_5908() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %610 = @func_5508() /* ty=Tensor[(4, 12, 14), float32] */;
  %611 = %608.0;
  %612 = %609.0;
  (%610, %611, %612)
}

def @func_5811() -> Tensor[(4, 12, 14), float64] {
  @func_5529() /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_5488(%var_5483: Tensor[(1, 16, 10), int64]) -> Tensor[(?, 16, 10), bool] {
  %613 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 16, 10), int64] */, dtype="bool") /* ty=Tensor[(1, 16, 10), bool] */;
  %614 = shape_of(%var_5483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_5483, dtype="bool") /* ty=Tensor[(1, 16, 10), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%615, %616) /* ty=Tensor[(?, 16, 10), bool] */
}

def @func_4951() -> (Tensor[(4, 12, 14), float32],) {
  %617 = @func_3767() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %618 = %617.0;
  (%618,)
}

def @func_6803() -> (Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) {
  %619 = @func_6357() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %620 = @func_5811() /* ty=Tensor[(4, 12, 14), float64] */;
  %621 = %619.0;
  (%620, %621)
}

def @func_6930() -> (Tensor[(4, 12, 14), float32],) {
  @func_6928() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_5470() -> Tensor[(4, 12, 14), float32] {
  %622 = fn () -> Tensor[(4, 12, 14), float32] {
    @func_3167() /* ty=Tensor[(4, 12, 14), float32] */
  };
  %622() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_8132(%var_8131: Tensor[(168, 2), int32]) -> (Tensor[(1372), uint16], Tensor[(4, 28), int32], Tensor[(168, 2), int32]) {
  %629 = fn (%var_8125: Tensor[(168, 2), int32]) -> (Tensor[(1372), uint16], Tensor[(4, 28), int32], Tensor[(168, 2), int32]) {
    %623 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
    %624 = cast(%var_8125, dtype="int32") /* ty=Tensor[(168, 2), int32] */;
    %625 = reshape(%624, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %626 = @func_1940(%625) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
    %627 = %623.1;
    %628 = %626.3;
    (%627, %628, %var_8125)
  };
  %629(%var_8131) /* ty=(Tensor[(1372), uint16], Tensor[(4, 28), int32], Tensor[(168, 2), int32]) */
}

def @func_1940(%var_1894: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) {
  %630 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %631 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %632 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 28), int32] */, dtype="int32") /* ty=Tensor[(4, 28), int32] */;
  %633 = cast(%var_1894, dtype="int32") /* ty=Tensor[(336), int32] */;
  %634 = reshape(%632, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), int32] */;
  %635 = reshape(%633, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int32] */;
  %636 = @func_869(%634, %635) /* ty=(Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) */;
  %637 = %630.1;
  %638 = %631.0;
  %639 = %636.6;
  (%637, %638, %639, meta[relay.Constant][27] /* ty=Tensor[(4, 28), int32] */, %var_1894)
}

def @func_9360(%var_9331: Tensor[(2, 56), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(2, 56), bool], Tensor[(3, 8, 13), float64], Tensor[(312), uint64], Tensor[(5, 7, 11), bool], Tensor[(385), int64], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
  %640 = @func_3582() /* ty=(Tensor[(2, 56), int32], Tensor[(1372), uint16], Tensor[(4, 12, 14), float32]) */;
  %641 = %640.0;
  %642 = cast(%var_9331, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(2), int32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(2, 56), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %646 = cast(meta[relay.Constant][28] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %647 = cast(meta[relay.Constant][28] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %648 = reshape(%646, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
  %649 = reshape(%647, newshape=[3, 8, 13]) /* ty=Tensor[(3, 8, 13), uint64] */;
  %650 = @func_6132(%648, %649) /* ty=(Tensor[(3, 8, 13), float64],) */;
  %651 = cast(meta[relay.Constant][29] /* ty=Tensor[(385), int64] */, dtype="int64") /* ty=Tensor[(385), int64] */;
  %652 = reshape(%651, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
  %653 = cast(meta[relay.Constant][30] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %654 = reshape(%653, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
  %655 = @func_3742(%654) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
  %656 = @func_5508() /* ty=Tensor[(4, 12, 14), float32] */;
  %657 = greater_equal(%644, %645) /* ty=Tensor[(2, 56), bool] */;
  %658 = %650.0;
  %659 = @func_3338(%652) /* ty=Tensor[(5, 7, 11), bool] */;
  %660 = %655.2;
  (%656, %657, %658, meta[relay.Constant][28] /* ty=Tensor[(312), uint64] */, %659, meta[relay.Constant][29] /* ty=Tensor[(385), int64] */, %660, meta[relay.Constant][30] /* ty=Tensor[(336), int32] */)
}

def @func_6750(%var_6748: Tensor[(11, 14, 9), float32], %var_6749: Tensor[(385), int64]) -> (Tensor[(11, 14, 9), float32], Tensor[(4, 12, 14), float64], Tensor[(385), int64]) {
  @func_6746(%var_6748, %var_6749) /* ty=(Tensor[(11, 14, 9), float32], Tensor[(4, 12, 14), float64], Tensor[(385), int64]) */
}

def @func_7265() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %661 = @func_6849() /* ty=(Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %662 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
  %663 = %661.4;
  %664 = %662.2;
  (%663, %664)
}

def @func_6672() -> Tensor[(4, 12, 14), float64] {
  %665 = @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %666 = %665.0;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(4, 12, 14), float64] */;
  acosh(%667) /* ty=Tensor[(4, 12, 14), float64] */
}

def @func_6849() -> (Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %668 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  %669 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 390), bool] */, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %670 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 390), bool] */, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %671 = reshape(%669, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %672 = reshape(%670, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %673 = @func_6501(%671, %672) /* ty=(Tensor[(3, 10, 13), bool],) */;
  %674 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %675 = @func_2344() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %676 = acos(%668) /* ty=Tensor[(2, 7, 7), float32] */;
  %677 = %673.0;
  %678 = %674.1;
  %679 = %675.1;
  (%676, %677, meta[relay.Constant][32] /* ty=Tensor[(1, 390), bool] */, %678, %679)
}

def @func_7362(%var_7354: Tensor[(1, 1, 12), float64]) -> Tensor[(1, 1, 12), float64] {
  %680 = cast(%var_7354, dtype="float64") /* ty=Tensor[(1, 1, 12), float64] */;
  asin(%680) /* ty=Tensor[(1, 1, 12), float64] */
}

def @func_5700() -> Tensor[(4, 12, 14), float32] {
  %682 = fn () -> Tensor[(4, 12, 14), float32] {
    %681 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %681.2
  };
  %682() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_8664() -> (Tensor[(4, 12, 14), float32], Tensor[(441), bool]) {
  @func_8662() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(441), bool]) */
}

def @func_3647(%var_3645: Tensor[(4, 15, 3), float32], %var_3646: Tensor[(4, 15, 3), float32]) -> (Tensor[(4, 15, 3), float32], Tensor[(112), int32], Tensor[(168, 2), int32], Tensor[(1, 672), float32], Tensor[(4, 15, 3), float64]) {
  @func_3643(%var_3645, %var_3646) /* ty=(Tensor[(4, 15, 3), float32], Tensor[(112), int32], Tensor[(168, 2), int32], Tensor[(1, 672), float32], Tensor[(4, 15, 3), float64]) */
}

def @func_7267() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_7265() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_6079() -> (Tensor[(4, 12, 14), float32],) {
  %685 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %683 = @func_4553() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %684 = %683.0;
    (%684,)
  };
  %685() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_6269() -> (Tensor[(4, 12, 14), float32],) {
  %688 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %686 = @func_4951() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %687 = %686.0;
    (%687,)
  };
  %688() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_8475(%var_8473: Tensor[(336, 7), int32]) -> (Tensor[(490), float64], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(336, 7), uint16]) {
  @func_8472(%var_8473) /* ty=(Tensor[(490), float64], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), int64], Tensor[(336, 7), uint16]) */
}

def @func_9418() -> Tensor[(1372), uint16] {
  %690 = fn () -> Tensor[(1372), uint16] {
    %689 = @func_4416() /* ty=(Tensor[(1372), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
    %689.0
  };
  %690() /* ty=Tensor[(1372), uint16] */
}

def @func_4553() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %691 = @func_3530() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %692 = %691.0;
  %693 = @func_4376() /* ty=Tensor[(4, 12, 14), float32] */;
  %694 = cast(%693, dtype="uint8") /* ty=Tensor[(4, 12, 14), uint8] */;
  %695 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%692, dtype="uint8") /* ty=Tensor[(4, 12, 14), uint8] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %698 = right_shift(%696, %697) /* ty=Tensor[(4, 12, 14), uint8] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %700 = @func_3752() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %701 = acos(%699) /* ty=Tensor[(4, 12, 14), float32] */;
  %702 = %700.0;
  (%701, %702)
}

def @func_1727(%var_1691: Tensor[(112), int32], %var_1692: Tensor[(336), int32], %var_1712: Tensor[(4, 12, 14), float32]) -> (Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) {
  %703 = cast(%var_1691, dtype="int32") /* ty=Tensor[(112), int32] */;
  %704 = cast(%var_1692, dtype="int32") /* ty=Tensor[(336), int32] */;
  %705 = reshape(%703, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), int32] */;
  %706 = reshape(%704, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), int32] */;
  %707 = @func_869(%705, %706) /* ty=(Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) */;
  %708 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
  %709 = cast(%var_1712, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = %707.3;
  %714 = equal(%711, %712) /* ty=Tensor[(4, 12, 14), bool] */;
  (%713, %var_1691, %var_1692, %714)
}

def @func_3517(%var_3515: float64, %var_3516: Tensor[(77), float64]) -> (Tensor[(4, 12, 14), float32], Tensor[(11, 1, 7), float64], float64, Tensor[(77), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
  %732 = fn (%var_3496: float64, %var_3497: Tensor[(77), float64]) -> (Tensor[(4, 12, 14), float32], Tensor[(11, 1, 7), float64], float64, Tensor[(77), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) {
    %715 = @func_3459() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(672), float32], Tensor[(4, 12, 14), float32]) */;
    %716 = cast(%var_3496, dtype="float64") /* ty=float64 */;
    %717 = cast(%var_3497, dtype="float64") /* ty=Tensor[(77), float64] */;
    %718 = reshape(%716, newshape=[]) /* ty=float64 */;
    %719 = reshape(%717, newshape=[11, 1, 7]) /* ty=Tensor[(11, 1, 7), float64] */;
    %720 = cast(%var_3497, dtype="float32") /* ty=Tensor[(77), float32] */;
    %721 = %715.0;
    %722 = cast(%721, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %723 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %724 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %725 = reshape(%722, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
    %726 = reshape(%723, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %727 = reshape(%724, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %728 = @func_2787(%725, %726, %727) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), uint16]) */;
    %729 = @func_2640(%718, %719) /* ty=Tensor[(11, 1, 7), float64] */;
    %730 = cos(%720) /* ty=Tensor[(77), float32] */;
    %731 = %728.0;
    (%721, %729, %var_3496, %730, %731, meta[relay.Constant][33] /* ty=Tensor[(336), int32] */)
  };
  %732(%var_3515, %var_3516) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(11, 1, 7), float64], float64, Tensor[(77), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) */
}

def @func_4024(%var_4019: Tensor[(7, 70), float64]) -> (Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 70), float64]) {
  %733 = @func_3436() /* ty=Tensor[(5, 7, 11), int64] */;
  %734 = cast(%733, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
  %735 = cast(%var_4019, dtype="float64") /* ty=Tensor[(7, 70), float64] */;
  %736 = reshape(%735, newshape=[490]) /* ty=Tensor[(490), float64] */;
  %737 = @func_2402(%736) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 14, 5), float64], Tensor[(490), float64]) */;
  %738 = cosh(%734) /* ty=Tensor[(5, 7, 11), float32] */;
  %739 = %737.0;
  (%738, %739, %var_4019)
}

def @func_4054() -> (Tensor[(4, 12, 14), float32],) {
  %741 = fn () -> (Tensor[(4, 12, 14), float32],) {
    %740 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
    (%740,)
  };
  %741() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_5789() -> (Tensor[(4, 12, 14), float32],) {
  @func_5787() /* ty=(Tensor[(4, 12, 14), float32],) */
}

def @func_5908() -> (Tensor[(4, 12, 14), float32],) {
  %742 = @func_5743() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %743 = %742.0;
  (%743,)
}

def @func_2012() -> Tensor[(4, 12, 14), float32] {
  %744 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %744.0
}

def @func_5778(%var_5762: Tensor[(160), int64]) -> (Tensor[(77), float32], Tensor[(77), float64], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(10, 3, 15), int64]) {
  %745 = cast(6.44485f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %746 = cast(meta[relay.Constant][34] /* ty=Tensor[(77), float64] */, dtype="float64") /* ty=Tensor[(77), float64] */;
  %747 = reshape(%745, newshape=[]) /* ty=float64 */;
  %748 = reshape(%746, newshape=[77]) /* ty=Tensor[(77), float64] */;
  %749 = @func_3514(%747, %748) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(11, 1, 7), float64], float64, Tensor[(77), float32], Tensor[(4, 12, 14), float32], Tensor[(336), int32]) */;
  %750 = cast(%var_5762, dtype="int64") /* ty=Tensor[(160), int64] */;
  %751 = reshape(%750, newshape=[1, 16, 10]) /* ty=Tensor[(1, 16, 10), int64] */;
  %752 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 3, 15), float32] */;
  %753 = acosh(%752) /* ty=Tensor[(10, 3, 15), float32] */;
  %754 = cast(%753, dtype="int64") /* ty=Tensor[(10, 3, 15), int64] */;
  %755 = cast(6.44485f64 /* ty=float64 */, dtype="int64") /* ty=int64 */;
  %756 = %749.3;
  %757 = @func_5488(%751) /* ty=Tensor[(?, 16, 10), bool] */;
  %758 = bitwise_or(%754, %755) /* ty=Tensor[(10, 3, 15), int64] */;
  (%756, meta[relay.Constant][34] /* ty=Tensor[(77), float64] */, %757, %var_5762, %758)
}

def @func_6928() -> (Tensor[(4, 12, 14), float32],) {
  %759 = @func_4376() /* ty=Tensor[(4, 12, 14), float32] */;
  (%759,)
}

def @func_9657(%var_9654: int8, %var_9655: Tensor[(14, 9, 12), int8], %var_9656: Tensor[(112), int32]) -> (Tensor[(14, 9, 12), float64], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %778 = fn (%var_9576: int8, %var_9577: Tensor[(14, 9, 12), int8], %var_9607: Tensor[(112), int32]) -> (Tensor[(14, 9, 12), float64], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
    %760 = cast(%var_9576, dtype="int8") /* ty=int8 */;
    %761 = cast(%var_9577, dtype="int8") /* ty=Tensor[(14, 9, 12), int8] */;
    %762 = maximum(%760, %761) /* ty=Tensor[(14, 9, 12), int8] */;
    %763 = cast(%762, dtype="float64") /* ty=Tensor[(14, 9, 12), float64] */;
    %764 = cast(%var_9607, dtype="int32") /* ty=Tensor[(112), int32] */;
    %765 = cast(meta[relay.Constant][36] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %766 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %767 = reshape(%764, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %768 = reshape(%765, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %769 = reshape(%766, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
    %770 = @func_1727(%767, %768, %769) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
    %771 = @func_9574() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %772 = @func_2845() /* ty=(Tensor[(336), int32], Tensor[(4, 12, 14), float32]) */;
    %773 = atan(%763) /* ty=Tensor[(14, 9, 12), float64] */;
    %774 = %770.0;
    %775 = %771.0;
    %776 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
    %777 = %772.1;
    (%773, %774, %var_9607, meta[relay.Constant][36] /* ty=Tensor[(336), int32] */, meta[relay.Constant][37] /* ty=Tensor[(672), float32] */, %775, %776, %777)
  };
  %778(%var_9654, %var_9655, %var_9656) /* ty=(Tensor[(14, 9, 12), float64], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(672), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_2128() -> (Tensor[(4, 12, 14), float32],) {
  %779 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %780 = %779.1;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
  %782 = log(%781) /* ty=Tensor[(4, 12, 14), float32] */;
  (%782,)
}

def @func_2791(%var_2788: Tensor[(4, 12, 14), float32], %var_2789: Tensor[(336), int32], %var_2790: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), uint16]) {
  %804 = fn (%var_2747: Tensor[(4, 12, 14), float32], %var_2766: Tensor[(336), int32], %var_2771: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), uint16]) {
    %783 = @func_1608() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(441), int32]) */;
    %784 = %783.0;
    %785 = cast(%var_2747, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
    %787 = cast(%784, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %789 = cast(meta[relay.Constant][38] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %790 = cast(%var_2766, dtype="int32") /* ty=Tensor[(336), int32] */;
    %791 = divide(%787, %788) /* ty=Tensor[(4, 12, 14), float32] */;
    %792 = cast(%791, dtype="float32") /* ty=Tensor[(4, 12, 14), float32] */;
    %793 = reshape(%789, newshape=[112]) /* ty=Tensor[(112), int32] */;
    %794 = reshape(%790, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %795 = reshape(%792, newshape=[4, 12, 14]) /* ty=Tensor[(4, 12, 14), float32] */;
    %796 = @func_1727(%793, %794, %795) /* ty=(Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), int32], Tensor[(4, 12, 14), bool]) */;
    %797 = cast(%var_2771, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %798 = shape_of(%var_2766, dtype="int32") /* ty=Tensor[(1), int32] */;
    %799 = cast(%var_2766, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %801 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
    %802 = %796.0;
    %803 = bitwise_and(%799, %800) /* ty=Tensor[(336), uint16] */;
    (%801, %791, %802, meta[relay.Constant][38] /* ty=Tensor[(112), int32] */, %803)
  };
  %804(%var_2788, %var_2789, %var_2790) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(112), int32], Tensor[(336), uint16]) */
}

def @func_7600(%var_7598: Tensor[(7, 12, 12), uint16], %var_7599: Tensor[(7, 12, 12), uint16]) -> (Tensor[(7, 12, 12), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(3, 10, 13), bool], Tensor[(390, 1), bool], Tensor[(7, 9, 7), float32], Tensor[(336), int32]) {
  %823 = fn (%var_7564: Tensor[(7, 12, 12), uint16], %var_7565: Tensor[(7, 12, 12), uint16]) -> (Tensor[(7, 12, 12), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(3, 10, 13), bool], Tensor[(390, 1), bool], Tensor[(7, 9, 7), float32], Tensor[(336), int32]) {
    %805 = cast(%var_7565, dtype="uint16") /* ty=Tensor[(7, 12, 12), uint16] */;
    %806 = shape_of(%var_7564, dtype="int32") /* ty=Tensor[(3), int32] */;
    %807 = cast(%var_7564, dtype="uint16") /* ty=Tensor[(7, 12, 12), uint16] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %809 = @func_4358() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %810 = cast(meta[relay.Constant][39] /* ty=Tensor[(390, 1), bool] */, dtype="bool") /* ty=Tensor[(390, 1), bool] */;
    %811 = cast(meta[relay.Constant][39] /* ty=Tensor[(390, 1), bool] */, dtype="bool") /* ty=Tensor[(390, 1), bool] */;
    %812 = reshape(%810, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
    %813 = reshape(%811, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
    %814 = @func_6501(%812, %813) /* ty=(Tensor[(3, 10, 13), bool],) */;
    %815 = cast(meta[relay.Constant][40] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %816 = reshape(%815, newshape=[8, 42]) /* ty=Tensor[(8, 42), int32] */;
    %817 = @func_3742(%816) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(8, 42), int32], Tensor[(4, 12, 14), float32]) */;
    %818 = maximum(%807, %808) /* ty=Tensor[(7, 12, 12), uint16] */;
    %819 = @func_7330() /* ty=Tensor[(4, 12, 14), float32] */;
    %820 = %809.0;
    %821 = %814.0;
    %822 = %817.3;
    (%818, %819, %820, %821, meta[relay.Constant][39] /* ty=Tensor[(390, 1), bool] */, %822, meta[relay.Constant][40] /* ty=Tensor[(336), int32] */)
  };
  %823(%var_7598, %var_7599) /* ty=(Tensor[(7, 12, 12), uint16], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(3, 10, 13), bool], Tensor[(390, 1), bool], Tensor[(7, 9, 7), float32], Tensor[(336), int32]) */
}

def @func_6033() -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(7, 5, 2), float32], Tensor[(70), float32]) {
  %824 = @func_3752() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %825 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %826 = cast(meta[relay.Constant][41] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %827 = reshape(%826, newshape=[7, 5, 2]) /* ty=Tensor[(7, 5, 2), float32] */;
  %828 = @func_5666(%827) /* ty=(Tensor[(7, 5, 2), float32],) */;
  %829 = %824.0;
  %830 = %825.1;
  %831 = %828.0;
  (%829, %830, %831, meta[relay.Constant][41] /* ty=Tensor[(70), float32] */)
}

def @func_5141() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %832 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %833 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %834 = %832.1;
  %835 = %833.0;
  (%834, %835)
}

def @func_2344() -> (Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %836 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %837 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %838 = %836.1;
  %839 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  %840 = %837.0;
  (%838, %839, %840)
}

def @func_3953(%var_3940: Tensor[(385), int64], %var_3943: Tensor[(385), int64]) -> (Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), bool], Tensor[(385), float64]) {
  %841 = cast(%var_3940, dtype="int64") /* ty=Tensor[(385), int64] */;
  %842 = reshape(%841, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
  %843 = cast(%var_3943, dtype="float64") /* ty=Tensor[(385), float64] */;
  %844 = shape_of(%var_3940, dtype="int32") /* ty=Tensor[(1), int32] */;
  %845 = cast(%var_3940, dtype="float64") /* ty=Tensor[(385), float64] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?), float64] */;
  %847 = @func_2012() /* ty=Tensor[(4, 12, 14), float32] */;
  %848 = @func_3338(%842) /* ty=Tensor[(5, 7, 11), bool] */;
  %849 = divide(%845, %846) /* ty=Tensor[(385), float64] */;
  (%847, %848, %849)
}

def @func_4027(%var_4025: Tensor[(7, 70), float64]) -> (Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 70), float64]) {
  @func_4024(%var_4025) /* ty=(Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 70), float64]) */
}

def @func_7641() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  %854 = fn () -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
    %850 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
    %851 = @func_1566() /* ty=Tensor[(4, 12, 14), float32] */;
    %852 = @func_3167() /* ty=Tensor[(4, 12, 14), float32] */;
    %853 = @func_7330() /* ty=Tensor[(4, 12, 14), float32] */;
    (%850, %851, %852, %853)
  };
  %854() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_4118(%var_4116: Tensor[(5, 4, 5), float64]) -> (Tensor[(5, 4, 5), float64], Tensor[(4, 12, 14), float32]) {
  @func_4115(%var_4116) /* ty=(Tensor[(5, 4, 5), float64], Tensor[(4, 12, 14), float32]) */
}

def @func_6851() -> (Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) {
  @func_6849() /* ty=(Tensor[(2, 7, 7), float32], Tensor[(3, 10, 13), bool], Tensor[(1, 390), bool], Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */
}

def @func_3167() -> Tensor[(4, 12, 14), float32] {
  %855 = @func_1656() /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32]) */;
  %855.1
}

def @func_873(%var_871: Tensor[(1, 8, 14), int32], %var_872: Tensor[(3, 8, 14), int32]) -> (Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) {
  @func_869(%var_871, %var_872) /* ty=(Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) */
}

def @func_6746(%var_6735: Tensor[(11, 14, 9), float32], %var_6739: Tensor[(385), int64]) -> (Tensor[(11, 14, 9), float32], Tensor[(4, 12, 14), float64], Tensor[(385), int64]) {
  %856 = cast(%var_6735, dtype="float32") /* ty=Tensor[(11, 14, 9), float32] */;
  %857 = cast(%var_6739, dtype="int64") /* ty=Tensor[(385), int64] */;
  %858 = reshape(%857, newshape=[5, 7, 11]) /* ty=Tensor[(5, 7, 11), int64] */;
  %859 = @func_4201(%858) /* ty=(Tensor[(5, 7, 11), float64], Tensor[(5, 7, 11), float32], Tensor[(4, 12, 14), float64], Tensor[(336), int32]) */;
  %860 = cos(%856) /* ty=Tensor[(11, 14, 9), float32] */;
  %861 = %859.2;
  (%860, %861, %var_6739)
}

def @func_215(%var_183: Tensor[(7, 9, 7), int32]) -> Tensor[(7, 9, 7), float32] {
  %862 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 9, 7), int32] */, dtype="int32") /* ty=Tensor[(7, 9, 7), int32] */;
  %863 = shape_of(%var_183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_183, dtype="int32") /* ty=Tensor[(7, 9, 7), int32] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %866 = bitwise_and(%864, %865) /* ty=Tensor[(7, 9, 7), int32] */;
  %867 = cast(%866, dtype="float32") /* ty=Tensor[(7, 9, 7), float32] */;
  exp(%867) /* ty=Tensor[(7, 9, 7), float32] */
}

def @func_5287() -> Tensor[(12, 3, 6), float32] {
  @func_5285() /* ty=Tensor[(12, 3, 6), float32] */
}

def @func_6468(%var_6467: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(686, 2), uint16], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float32]) {
  %883 = fn (%var_6436: Tensor[(336), int32]) -> (Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(686, 2), uint16], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float32]) {
    %868 = cast(meta[relay.Constant][43] /* ty=Tensor[(686, 2), uint16] */, dtype="uint16") /* ty=Tensor[(686, 2), uint16] */;
    %869 = cast(%var_6436, dtype="int32") /* ty=Tensor[(336), int32] */;
    %870 = reshape(%868, newshape=[14, 7, 14]) /* ty=Tensor[(14, 7, 14), uint16] */;
    %871 = reshape(%869, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %872 = @func_1867(%870, %871) /* ty=(Tensor[(14, 7, 14), uint16], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(2, 56), int32], Tensor[(336), int32]) */;
    %873 = @func_2128() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %874 = cast(meta[relay.Constant][44] /* ty=Tensor[(160), int64] */, dtype="int64") /* ty=Tensor[(160), int64] */;
    %875 = reshape(%874, newshape=[1, 16, 10]) /* ty=Tensor[(1, 16, 10), int64] */;
    %876 = @func_5908() /* ty=(Tensor[(4, 12, 14), float32],) */;
    %877 = @func_3012() /* ty=Tensor[(4, 12, 14), float32] */;
    %878 = %872.4;
    %879 = %873.0;
    %880 = @func_5488(%875) /* ty=Tensor[(?, 16, 10), bool] */;
    %881 = @func_3405() /* ty=Tensor[(5, 7, 11), int64] */;
    %882 = %876.0;
    (%877, %878, meta[relay.Constant][43] /* ty=Tensor[(686, 2), uint16] */, %var_6436, %879, %880, meta[relay.Constant][44] /* ty=Tensor[(160), int64] */, %881, %882)
  };
  %883(%var_6467) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(336), int32], Tensor[(686, 2), uint16], Tensor[(336), int32], Tensor[(4, 12, 14), float32], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(5, 7, 11), int64], Tensor[(4, 12, 14), float32]) */
}

def @func_2640(%var_2615: float64, %var_2616: Tensor[(11, 1, 7), float64]) -> Tensor[(11, 1, 7), float64] {
  %884 = cast(%var_2615, dtype="bool") /* ty=bool */;
  %885 = cast(%var_2616, dtype="bool") /* ty=Tensor[(11, 1, 7), bool] */;
  %886 = less_equal(%884, %885) /* ty=Tensor[(11, 1, 7), bool] */;
  %887 = cast(%886, dtype="float32") /* ty=Tensor[(11, 1, 7), float32] */;
  %888 = atanh(%887) /* ty=Tensor[(11, 1, 7), float32] */;
  %889 = cast(%888, dtype="float64") /* ty=Tensor[(11, 1, 7), float64] */;
  sinh(%889) /* ty=Tensor[(11, 1, 7), float64] */
}

def @func_1568() -> Tensor[(4, 12, 14), float32] {
  @func_1566() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_9271(%var_9247: Tensor[(9, 14, 7), uint32], %var_9248: Tensor[(9, 14, 7), uint32]) -> (Tensor[(9, 14, 7), uint32], Tensor[(312, 1), uint64], Tensor[(28), int32], Tensor[(4, 12, 14), float32]) {
  %890 = cast(%var_9248, dtype="uint32") /* ty=Tensor[(9, 14, 7), uint32] */;
  %891 = shape_of(%var_9247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%var_9247, dtype="uint32") /* ty=Tensor[(9, 14, 7), uint32] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %894 = cast(meta[relay.Constant][45] /* ty=Tensor[(28), int32] */, dtype="int32") /* ty=Tensor[(28), int32] */;
  %895 = reshape(%894, newshape=[14, 1, 2]) /* ty=Tensor[(14, 1, 2), int32] */;
  %896 = @func_7892(%895) /* ty=(Tensor[(14, 11, 2), bool], Tensor[(3, 8, 13), float64], Tensor[(312, 1), uint64]) */;
  %897 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %898 = maximum(%892, %893) /* ty=Tensor[(9, 14, 7), uint32] */;
  %899 = %896.2;
  %900 = %897.0;
  (%898, %899, meta[relay.Constant][45] /* ty=Tensor[(28), int32] */, %900)
}

def @func_5648(%var_5647: Tensor[(9, 13, 7), float32]) -> Tensor[(9, 13, 7), float32] {
  %902 = fn (%var_5641: Tensor[(9, 13, 7), float32]) -> Tensor[(9, 13, 7), float32] {
    %901 = cast(%var_5641, dtype="float32") /* ty=Tensor[(9, 13, 7), float32] */;
    rsqrt(%901) /* ty=Tensor[(9, 13, 7), float32] */
  };
  %902(%var_5647) /* ty=Tensor[(9, 13, 7), float32] */
}

def @func_2247() -> (Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) {
  %917 = fn () -> (Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) {
    %903 = cast(meta[relay.Constant][46] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %904 = reshape(%903, newshape=[336]) /* ty=Tensor[(336), int32] */;
    %905 = @func_1940(%904) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(4, 28), int32], Tensor[(336), int32]) */;
    %906 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 7, 11), uint16] */, dtype="float32") /* ty=Tensor[(5, 7, 11), float32] */;
    %907 = atanh(%906) /* ty=Tensor[(5, 7, 11), float32] */;
    %908 = cast(meta[relay.Constant][48] /* ty=uint16 */, dtype="bool") /* ty=bool */;
    %909 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 7, 11), uint16] */, dtype="bool") /* ty=Tensor[(5, 7, 11), bool] */;
    %910 = greater(%908, %909) /* ty=Tensor[(5, 7, 11), bool] */;
    %911 = cast(%910, dtype="int64") /* ty=Tensor[(5, 7, 11), int64] */;
    %912 = shape_of(%907, dtype="int32") /* ty=Tensor[(3), int32] */;
    %913 = cast(%907, dtype="int64") /* ty=Tensor[(5, 7, 11), int64] */;
    %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %915 = %905.4;
    %916 = add(%913, %914) /* ty=Tensor[(5, 7, 11), int64] */;
    (%915, meta[relay.Constant][46] /* ty=Tensor[(336), int32] */, %916)
  };
  %917() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */
}

def @func_5781(%var_5779: Tensor[(160), int64]) -> (Tensor[(77), float32], Tensor[(77), float64], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(10, 3, 15), int64]) {
  @func_5778(%var_5779) /* ty=(Tensor[(77), float32], Tensor[(77), float64], Tensor[(?, 16, 10), bool], Tensor[(160), int64], Tensor[(10, 3, 15), int64]) */
}

def @func_869(%var_830: Tensor[(1, 8, 14), int32], %var_831: Tensor[(3, 8, 14), int32]) -> (Tensor[(3, 8, 14), int32], Tensor[(1, 8, 14), float64], Tensor[(3, 8, 14), float32], Tensor[(7, 9, 7), float32], Tensor[(7, 63), int32], Tensor[(7, 9, 7), float32], Tensor[(7, 9, 7), float32]) {
  %918 = cast(%var_830, dtype="int32") /* ty=Tensor[(1, 8, 14), int32] */;
  %919 = cast(%var_831, dtype="int32") /* ty=Tensor[(3, 8, 14), int32] */;
  %920 = cast(%var_830, dtype="float64") /* ty=Tensor[(1, 8, 14), float64] */;
  %921 = cast(%var_831, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %922 = cast(%var_830, dtype="bool") /* ty=Tensor[(1, 8, 14), bool] */;
  %923 = less_equal(%921, %922) /* ty=Tensor[(3, 8, 14), bool] */;
  %924 = cast(%923, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %925 = shape_of(%var_831, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%var_831, dtype="float32") /* ty=Tensor[(3, 8, 14), float32] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %928 = cast(meta[relay.Constant][49] /* ty=Tensor[(7, 63), int32] */, dtype="int32") /* ty=Tensor[(7, 63), int32] */;
  %929 = reshape(%928, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
  %930 = cast(meta[relay.Constant][49] /* ty=Tensor[(7, 63), int32] */, dtype="int32") /* ty=Tensor[(7, 63), int32] */;
  %931 = reshape(%930, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
  %932 = @func_215(%931) /* ty=Tensor[(7, 9, 7), float32] */;
  %933 = cast(%932, dtype="int32") /* ty=Tensor[(7, 9, 7), int32] */;
  %934 = reshape(%933, newshape=[7, 9, 7]) /* ty=Tensor[(7, 9, 7), int32] */;
  %935 = left_shift(%918, %919) /* ty=Tensor[(3, 8, 14), int32] */;
  %936 = sigmoid(%920) /* ty=Tensor[(1, 8, 14), float64] */;
  %937 = divide(%926, %927) /* ty=Tensor[(3, 8, 14), float32] */;
  %938 = @func_215(%929) /* ty=Tensor[(7, 9, 7), float32] */;
  %939 = @func_215(%934) /* ty=Tensor[(7, 9, 7), float32] */;
  (%935, %936, %937, %938, meta[relay.Constant][49] /* ty=Tensor[(7, 63), int32] */, %932, %939)
}

def @func_3013() -> Tensor[(4, 12, 14), float32] {
  %940 = fn () -> Tensor[(4, 12, 14), float32] {
    @func_2277() /* ty=Tensor[(4, 12, 14), float32] */
  };
  %940() /* ty=Tensor[(4, 12, 14), float32] */
}

def @func_8804() -> (Tensor[(4, 12, 14), float32], Tensor[(4, 12, 14), float64], Tensor[(4, 12, 14), float32]) {
  %941 = @func_4053() /* ty=(Tensor[(4, 12, 14), float32],) */;
  %942 = %941.0;
  %943 = @func_6672() /* ty=Tensor[(4, 12, 14), float64] */;
  %944 = @func_1780() /* ty=Tensor[(4, 12, 14), float32] */;
  (%942, %943, %944)
}

def @func_3338(%var_3314: Tensor[(5, 7, 11), int64]) -> Tensor[(5, 7, 11), bool] {
  %945 = @func_2246() /* ty=(Tensor[(336), int32], Tensor[(336), int32], Tensor[(5, 7, 11), int64]) */;
  %946 = %945.2;
  %947 = cast(%var_3314, dtype="bool") /* ty=Tensor[(5, 7, 11), bool] */;
  %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%946, dtype="bool") /* ty=Tensor[(5, 7, 11), bool] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%949, %950) /* ty=Tensor[(5, 7, 11), bool] */
}

def @func_3957(%var_3955: Tensor[(385), int64], %var_3956: Tensor[(385), int64]) -> (Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), bool], Tensor[(385), float64]) {
  @func_3953(%var_3955, %var_3956) /* ty=(Tensor[(4, 12, 14), float32], Tensor[(5, 7, 11), bool], Tensor[(385), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen418/build/output.py", line 2934, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:15:48] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

