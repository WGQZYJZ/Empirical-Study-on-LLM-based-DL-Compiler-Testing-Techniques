==========mod==========
#[version = "0.0.5"]
def @func_5236(%var_5224: Tensor[(2, 13, 14), float32]) -> (Tensor[(2, 13, 14), int32], Tensor[(2, 13, 14), uint64]) {
  %0 = @func_5136() /* ty=Tensor[(2, 13, 14), float32] */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %5 = floor_mod(%3, %4) /* ty=Tensor[(2, 13, 14), float32] */;
  %6 = cast(%0, dtype="int32") /* ty=Tensor[(2, 13, 14), int32] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="int32") /* ty=Tensor[(2, 13, 14), int32] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %10 = cast(%var_5224, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %11 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 13, 14), float32] */, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %14 = multiply(%8, %9) /* ty=Tensor[(2, 13, 14), int32] */;
  %15 = bitwise_xor(%12, %13) /* ty=Tensor[(2, 13, 14), uint64] */;
  (%14, %15)
}

def @func_4706(%var_4673: Tensor[(6, 14, 8), int16], %var_4698: Tensor[(264), float64]) -> (Tensor[(6, 14, 8), bool], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) {
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 1, 8), int16] */, dtype="bool") /* ty=Tensor[(6, 1, 8), bool] */;
  %17 = cast(%var_4673, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %18 = cast(-5.02872f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %19 = cast(%var_4698, dtype="float64") /* ty=Tensor[(264), float64] */;
  %20 = reshape(%18, newshape=[]) /* ty=float64 */;
  %21 = reshape(%19, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), float64] */;
  %22 = not_equal(%16, %17) /* ty=Tensor[(6, 14, 8), bool] */;
  %23 = @func_2860(%20, %21) /* ty=Tensor[(11, 6, 4), float64] */;
  (%22, %23, -5.02872f64 /* ty=float64 */, %var_4698)
}

def @func_316(%var_290: Tensor[(5, 13, 15), uint32], %var_291: Tensor[(5, 13, 15), uint32], %var_312: Tensor[(5, 13, 15), uint32]) -> (Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) {
  %24 = cast(%var_291, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
  %25 = shape_of(%var_290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_290, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %28 = cast(%var_312, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
  %29 = shape_of(%var_291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_291, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %32 = bitwise_and(%26, %27) /* ty=Tensor[(5, 13, 15), uint32] */;
  %33 = bitwise_or(%30, %31) /* ty=Tensor[(5, 13, 15), uint32] */;
  (%32, %33)
}

def @func_6575(%var_6559: Tensor[(4, 1, 3), float64]) -> (Tensor[(4, 1, 3), float64],) {
  %34 = cast(%var_6559, dtype="float64") /* ty=Tensor[(4, 1, 3), float64] */;
  %35 = atanh(%34) /* ty=Tensor[(4, 1, 3), float64] */;
  (%35,)
}

def @func_6083() -> (Tensor[(7, 9), float64], Tensor[(11, 14, 6), bool], Tensor[(154, 6), int8]) {
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(154, 6), int8] */, dtype="int8") /* ty=Tensor[(154, 6), int8] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(154, 6), int8] */, dtype="int8") /* ty=Tensor[(154, 6), int8] */;
  %38 = reshape(%36, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
  %39 = reshape(%37, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
  %40 = @func_4883(%38, %39) /* ty=(Tensor[(11, 14, 6), bool],) */;
  %41 = @func_5448() /* ty=Tensor[(7, 9), float64] */;
  %42 = %40.0;
  (%41, %42, meta[relay.Constant][2] /* ty=Tensor[(154, 6), int8] */)
}

def @func_1703(%var_1695: Tensor[(5, 11, 8), float32], %var_1696: Tensor[(5, 11, 8), float32]) -> (Tensor[(5, 11, 8), bool],) {
  %43 = cast(%var_1696, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %44 = shape_of(%var_1695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_1695, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %47 = less_equal(%45, %46) /* ty=Tensor[(5, 11, 8), bool] */;
  (%47,)
}

def @func_5448() -> Tensor[(7, 9), float64] {
  %48 = @func_5430() /* ty=(Tensor[(7, 9), float64],) */;
  %48.0
}

def @func_6176(%var_6150: Tensor[(11, 11, 1), float64], %var_6151: Tensor[(11, 11, 14), float64]) -> (Tensor[(11, 11, 14), float64],) {
  %49 = cast(%var_6150, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
  %50 = cast(%var_6151, dtype="float64") /* ty=Tensor[(11, 11, 14), float64] */;
  %51 = mod(%49, %50) /* ty=Tensor[(11, 11, 14), float64] */;
  (%51,)
}

def @func_3788(%var_3767: Tensor[(16, 15, 2), float32]) -> (Tensor[(16, 15, 2), float32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8]) {
  %52 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %53 = shape_of(%var_3767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%var_3767, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %56 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(72), uint8] */, dtype="uint8") /* ty=Tensor[(72), uint8] */;
  %58 = reshape(%56, newshape=[]) /* ty=uint8 */;
  %59 = reshape(%57, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), uint8] */;
  %60 = @func_2447(%58, %59) /* ty=(Tensor[(12, 1, 6), uint8],) */;
  %61 = floor_divide(%54, %55) /* ty=Tensor[(16, 15, 2), float32] */;
  %62 = %60.0;
  (%61, %62, meta[relay.Constant][4] /* ty=uint8 */, meta[relay.Constant][5] /* ty=Tensor[(72), uint8] */)
}

def @func_6548(%var_6530: Tensor[(7, 15, 14), float32]) -> Tensor[(7, 15, 14), uint16] {
  %63 = @func_5856() /* ty=Tensor[(7, 15, 14), float32] */;
  %64 = cast(%var_6530, dtype="uint16") /* ty=Tensor[(7, 15, 14), uint16] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="uint16") /* ty=Tensor[(7, 15, 14), uint16] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%66, %67) /* ty=Tensor[(7, 15, 14), uint16] */
}

def @func_6867(%var_6832: uint32, %var_6833: Tensor[(2240), uint32], %var_6842: Tensor[(45, 3), float32], %var_6846: Tensor[(924), int8]) -> (Tensor[(7, 9), float64], Tensor[(15, 1, 7), float32], uint32, Tensor[(2240), uint32], Tensor[(15, 1, 9), float32], Tensor[(2160), float32], Tensor[(45, 3), float32], Tensor[(11, 14, 6), bool], Tensor[(924), int8]) {
  %68 = cast(%var_6832, dtype="uint32") /* ty=uint32 */;
  %69 = cast(%var_6833, dtype="uint32") /* ty=Tensor[(2240), uint32] */;
  %70 = reshape(%68, newshape=[]) /* ty=uint32 */;
  %71 = reshape(%69, newshape=[14, 16, 10]) /* ty=Tensor[(14, 16, 10), uint32] */;
  %72 = @func_2813(%70, %71) /* ty=(Tensor[(14, 16, 10), uint32], Tensor[(15, 1, 7), float32], Tensor[(156), uint16]) */;
  %73 = cast(meta[relay.Constant][6] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %74 = cast(%var_6842, dtype="float32") /* ty=Tensor[(45, 3), float32] */;
  %75 = reshape(%73, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %76 = reshape(%74, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %77 = @func_235(%75, %76) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
  %78 = cast(%var_6846, dtype="int8") /* ty=Tensor[(924), int8] */;
  %79 = cast(%var_6846, dtype="int8") /* ty=Tensor[(924), int8] */;
  %80 = reshape(%78, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
  %81 = reshape(%79, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
  %82 = @func_4883(%80, %81) /* ty=(Tensor[(11, 14, 6), bool],) */;
  %83 = @func_5792() /* ty=Tensor[(7, 9), float64] */;
  %84 = %72.1;
  %85 = %77.3;
  %86 = %82.0;
  (%83, %84, %var_6832, %var_6833, %85, meta[relay.Constant][6] /* ty=Tensor[(2160), float32] */, %var_6842, %86, %var_6846)
}

def @func_4151(%var_4125: Tensor[(10, 1, 2), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(10, ?, 2), int8], Tensor[(2, 11, 13), float32], Tensor[(286), float32]) {
  %87 = cast(%var_4125, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %88 = cos(%87) /* ty=Tensor[(10, 1, 2), float32] */;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %90 = cast(%var_4125, dtype="int8") /* ty=Tensor[(10, 1, 2), int8] */;
  %91 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%88, dtype="int8") /* ty=Tensor[(10, 1, 2), int8] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
  %95 = reshape(%94, newshape=[2, 11, 13]) /* ty=Tensor[(2, 11, 13), float32] */;
  %96 = @func_3080(%95) /* ty=(Tensor[(2, 11, 13), float32],) */;
  %97 = asinh(%89) /* ty=Tensor[(10, 1, 2), float64] */;
  %98 = subtract(%92, %93) /* ty=Tensor[(10, ?, 2), int8] */;
  %99 = %96.0;
  (%97, %98, %99, meta[relay.Constant][7] /* ty=Tensor[(286), float32] */)
}

def @func_5343() -> (Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) {
  %100 = @func_5136() /* ty=Tensor[(2, 13, 14), float32] */;
  %101 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  (%100, %101)
}

def @func_4534(%var_4512: Tensor[(1, 8, 13), int16]) -> (Tensor[(2, 8, 13), bool],) {
  %102 = cast(%var_4512, dtype="bool") /* ty=Tensor[(1, 8, 13), bool] */;
  %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 8, 13), int16] */, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
  %104 = less(%102, %103) /* ty=Tensor[(2, 8, 13), bool] */;
  %105 = cast(%104, dtype="uint16") /* ty=Tensor[(2, 8, 13), uint16] */;
  %106 = cast(%var_4512, dtype="uint16") /* ty=Tensor[(1, 8, 13), uint16] */;
  %107 = multiply(%105, %106) /* ty=Tensor[(2, 8, 13), uint16] */;
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 8, 13), int16] */, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = not_equal(%110, %111) /* ty=Tensor[(2, 8, 13), bool] */;
  (%112,)
}

def @func_6744() -> (Tensor[(2, 13, 14), float32],) {
  %113 = @func_5816() /* ty=Tensor[(2, 13, 14), float64] */;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  %115 = asinh(%114) /* ty=Tensor[(2, 13, 14), float32] */;
  (%115,)
}

def @func_3253(%var_3192: Tensor[(8, 14, 13), uint16], %var_3193: Tensor[(8, 14, 13), uint16], %var_3198: Tensor[(78), float64], %var_3216: Tensor[(1568), float64], %var_3218: Tensor[(30), uint32], %var_3242: Tensor[(1568), float64]) -> (Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32], Tensor[(15, 1, 7), float64], uint8, Tensor[(30), uint32], Tensor[(13, 3, 2), float64], Tensor[(1568), uint32], Tensor[(8, 14, 13), float64]) {
  %116 = cast(%var_3198, dtype="float64") /* ty=Tensor[(78), float64] */;
  %117 = cast(%var_3198, dtype="float64") /* ty=Tensor[(78), float64] */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %119 = reshape(%116, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %120 = reshape(%117, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %121 = reshape(%118, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %122 = @func_777(%119, %120, %121) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %123 = cast(%var_3216, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %124 = cast(meta[relay.Constant][10] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %125 = cast(%var_3218, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %126 = cast(%var_3198, dtype="float64") /* ty=Tensor[(78), float64] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %128 = reshape(%123, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), float64] */;
  %129 = reshape(%124, newshape=[]) /* ty=uint8 */;
  %130 = reshape(%125, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %131 = reshape(%126, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %132 = reshape(%127, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %133 = @func_3044(%128, %129, %130, %131, %132) /* ty=(Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %134 = %122.0;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  %136 = cast(%134, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %138 = reshape(%135, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %139 = reshape(%136, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %140 = reshape(%137, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %141 = @func_777(%138, %139, %140) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %142 = cast(%var_3242, dtype="uint32") /* ty=Tensor[(1568), uint32] */;
  %143 = shape_of(%var_3216, dtype="int32") /* ty=Tensor[(1), int32] */;
  %144 = cast(%var_3216, dtype="uint32") /* ty=Tensor[(1568), uint32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %146 = cast(%var_3193, dtype="uint16") /* ty=Tensor[(8, 14, 13), uint16] */;
  %147 = shape_of(%var_3192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%var_3192, dtype="uint16") /* ty=Tensor[(8, 14, 13), uint16] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %150 = add(%148, %149) /* ty=Tensor[(8, 14, 13), uint16] */;
  %151 = cast(%var_3193, dtype="bool") /* ty=Tensor[(8, 14, 13), bool] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="bool") /* ty=Tensor[(8, 14, 13), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = logical_or(%153, %154) /* ty=Tensor[(8, 14, 13), bool] */;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(8, 14, 13), float64] */;
  %157 = %133.1;
  %158 = %141.0;
  %159 = logical_xor(%144, %145) /* ty=Tensor[(1568), uint32] */;
  %160 = rsqrt(%156) /* ty=Tensor[(8, 14, 13), float64] */;
  (%134, %var_3198, meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, %157, meta[relay.Constant][10] /* ty=uint8 */, %var_3218, %158, %159, %160)
}

def @func_3925(%var_3913: Tensor[(3, 10), float32]) -> (Tensor[(3, 10), float32],) {
  %161 = cast(%var_3913, dtype="float32") /* ty=Tensor[(3, 10), float32] */;
  %162 = sigmoid(%161) /* ty=Tensor[(3, 10), float32] */;
  (%162,)
}

def @func_4499(%var_4437: Tensor[(9, 8, 16), float64], %var_4448: uint8, %var_4466: Tensor[(264), float64], %var_4475: Tensor[(12, 15, 6), uint8], %var_4494: Tensor[(350), bool]) -> (Tensor[(3, 4, 13), uint16], Tensor[(156), uint16], uint8, Tensor[(72), uint8], Tensor[(9, 8, 16), bool], Tensor[(11, 6, 4), float64], Tensor[(264), float64], Tensor[(15, 1, 7), float32], Tensor[(12, 15, 6), bool], Tensor[(5, 10, 7), float32], Tensor[(350), bool]) {
  %163 = cast(meta[relay.Constant][11] /* ty=Tensor[(156), uint16] */, dtype="uint16") /* ty=Tensor[(156), uint16] */;
  %164 = reshape(%163, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint16] */;
  %165 = @func_2129(%164) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %166 = cast(%var_4437, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %167 = rsqrt(%166) /* ty=Tensor[(9, 8, 16), float64] */;
  %168 = cast(%var_4437, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = cast(%var_4448, dtype="float64") /* ty=float64 */;
  %173 = cast(%var_4466, dtype="float64") /* ty=Tensor[(264), float64] */;
  %174 = reshape(%172, newshape=[]) /* ty=float64 */;
  %175 = reshape(%173, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), float64] */;
  %176 = cast(meta[relay.Constant][11] /* ty=Tensor[(156), uint16] */, dtype="uint16") /* ty=Tensor[(156), uint16] */;
  %177 = reshape(%176, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint16] */;
  %178 = @func_2129(%177) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %179 = cast(%var_4448, dtype="uint8") /* ty=uint8 */;
  %180 = cast(meta[relay.Constant][12] /* ty=Tensor[(72), uint8] */, dtype="uint8") /* ty=Tensor[(72), uint8] */;
  %181 = reshape(%179, newshape=[]) /* ty=uint8 */;
  %182 = reshape(%180, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), uint8] */;
  %183 = @func_2447(%181, %182) /* ty=(Tensor[(12, 1, 6), uint8],) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
  %186 = cast(%var_4475, dtype="bool") /* ty=Tensor[(12, 15, 6), bool] */;
  %187 = cast(%var_4494, dtype="bool") /* ty=Tensor[(350), bool] */;
  %188 = reshape(%187, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), bool] */;
  %189 = @func_1152(%188) /* ty=(Tensor[(5, 10, 7), float32],) */;
  %190 = %165.0;
  %191 = logical_and(%170, %171) /* ty=Tensor[(9, 8, 16), bool] */;
  %192 = @func_2860(%174, %175) /* ty=Tensor[(11, 6, 4), float64] */;
  %193 = %178.1;
  %194 = less(%185, %186) /* ty=Tensor[(12, 15, 6), bool] */;
  %195 = %189.0;
  (%190, meta[relay.Constant][11] /* ty=Tensor[(156), uint16] */, %var_4448, meta[relay.Constant][12] /* ty=Tensor[(72), uint8] */, %191, %192, %var_4466, %193, %194, %195, %var_4494)
}

def @func_5651(%var_5606: Tensor[(324), uint32], %var_5628: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float64], Tensor[(9, 12, 3), uint32], Tensor[(324), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %196 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(2, 13, 14), float64] */;
  %198 = cast(%var_5606, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %199 = cast(%var_5606, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %200 = reshape(%198, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %201 = reshape(%199, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %202 = @func_2400(%200, %201) /* ty=(Tensor[(9, 12, 3), bool], Tensor[(9, 12, 3), uint32]) */;
  %203 = cast(%var_5628, dtype="float32") /* ty=Tensor[(135), float32] */;
  %204 = reshape(%203, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %205 = @func_81(%204) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %206 = asin(%197) /* ty=Tensor[(2, 13, 14), float64] */;
  %207 = %202.1;
  %208 = %205.0;
  (%206, %207, %var_5606, %208, %var_5628)
}

def @func_81(%var_76: Tensor[(15, 1, 9), float32]) -> (Tensor[(15, 1, 9), float32],) {
  %209 = cast(%var_76, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %210 = erf(%209) /* ty=Tensor[(15, 1, 9), float32] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %212 = log2(%211) /* ty=Tensor[(15, 1, 9), float32] */;
  (%212,)
}

def @func_2400(%var_2387: Tensor[(9, 12, 3), uint32], %var_2388: Tensor[(9, 12, 3), uint32]) -> (Tensor[(9, 12, 3), bool], Tensor[(9, 12, 3), uint32]) {
  %213 = cast(%var_2388, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
  %214 = shape_of(%var_2387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%var_2387, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = cast(%var_2388, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %218 = cosh(%217) /* ty=Tensor[(9, 12, 3), float64] */;
  %219 = cast(%var_2388, dtype="uint32") /* ty=Tensor[(9, 12, 3), uint32] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="uint32") /* ty=Tensor[(9, 12, 3), uint32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %223 = not_equal(%215, %216) /* ty=Tensor[(9, 12, 3), bool] */;
  %224 = right_shift(%221, %222) /* ty=Tensor[(9, 12, 3), uint32] */;
  (%223, %224)
}

def @func_6427(%var_6418: Tensor[(4, 4, 4), float64]) -> (Tensor[(4, 4, 4), float64], Tensor[(4, 4, 4), float32]) {
  %225 = cast(%var_6418, dtype="float64") /* ty=Tensor[(4, 4, 4), float64] */;
  %226 = cast(%var_6418, dtype="float32") /* ty=Tensor[(4, 4, 4), float32] */;
  %227 = sqrt(%225) /* ty=Tensor[(4, 4, 4), float64] */;
  %228 = cosh(%226) /* ty=Tensor[(4, 4, 4), float32] */;
  (%227, %228)
}

def @func_685(%var_669: Tensor[(975), uint32]) -> (Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) {
  %229 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 7), float32] */;
  %230 = erf(%229) /* ty=Tensor[(15, 1, 7), float32] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(15, 1, 7), float64] */;
  %232 = cast(%230, dtype="float32") /* ty=Tensor[(15, 1, 7), float32] */;
  %233 = cast(%var_669, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %234 = cast(%var_669, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %235 = cast(%var_669, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %236 = reshape(%233, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %237 = reshape(%234, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %238 = reshape(%235, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %239 = @func_316(%236, %237, %238) /* ty=(Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) */;
  %240 = atanh(%231) /* ty=Tensor[(15, 1, 7), float64] */;
  %241 = cosh(%232) /* ty=Tensor[(15, 1, 7), float32] */;
  %242 = %239.0;
  (%240, %241, %242, %var_669)
}

def @func_1152(%var_1128: Tensor[(5, 10, 7), bool]) -> (Tensor[(5, 10, 7), float32],) {
  %243 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 10, 7), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
  %244 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%var_1128, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = logical_or(%245, %246) /* ty=Tensor[(5, 10, 7), bool] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
  %249 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%var_1128, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %252 = divide(%250, %251) /* ty=Tensor[(5, 10, 7), float32] */;
  (%252,)
}

def @func_6804() -> (Tensor[(7, 9), float64],) {
  %253 = @func_6013() /* ty=(Tensor[(7, 9), float64],) */;
  %254 = %253.0;
  (%254,)
}

def @func_6825() -> Tensor[(7, 9), float64] {
  @func_5686() /* ty=Tensor[(7, 9), float64] */
}

def @func_6013() -> (Tensor[(7, 9), float64],) {
  %255 = @func_5686() /* ty=Tensor[(7, 9), float64] */;
  (%255,)
}

def @func_6474(%var_6464: Tensor[(8, 16, 2), float64]) -> (Tensor[(8, 16, 2), float64],) {
  %256 = cast(%var_6464, dtype="float64") /* ty=Tensor[(8, 16, 2), float64] */;
  %257 = sqrt(%256) /* ty=Tensor[(8, 16, 2), float64] */;
  (%257,)
}

def @func_4281(%var_4248: Tensor[(4, 16, 9), float32], %var_4254: Tensor[(56), float32], %var_4272: Tensor[(2160), float32]) -> (Tensor[(4, 16, 9), float32], Tensor[(56), float32], Tensor[(216), int16], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(26, 3), float64], Tensor[(2, 7, 10), uint64], Tensor[(1, 140), uint64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32]) {
  %258 = cast(%var_4248, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
  %259 = cast(meta[relay.Constant][15] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %260 = cast(meta[relay.Constant][16] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %261 = cast(%var_4254, dtype="float32") /* ty=Tensor[(56), float32] */;
  %262 = cast(meta[relay.Constant][17] /* ty=Tensor[(26, 3), float64] */, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
  %263 = reshape(%259, newshape=[4, 6, 9]) /* ty=Tensor[(4, 6, 9), int16] */;
  %264 = reshape(%260, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %265 = reshape(%261, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %266 = reshape(%262, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %267 = @func_1682(%263, %264, %265, %266) /* ty=(Tensor[(4, 6, 9), int16], Tensor[(4, 6, 9), uint8], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(13, 3, 2), float32]) */;
  %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 140), uint64] */, dtype="uint64") /* ty=Tensor[(1, 140), uint64] */;
  %269 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 140), uint64] */, dtype="uint64") /* ty=Tensor[(1, 140), uint64] */;
  %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %271 = reshape(%268, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
  %272 = reshape(%269, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
  %273 = reshape(%270, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %274 = @func_1975(%271, %272, %273) /* ty=(Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %275 = cast(%var_4272, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %276 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %277 = reshape(%275, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %278 = reshape(%276, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %279 = @func_235(%277, %278) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
  %280 = sqrt(%258) /* ty=Tensor[(4, 16, 9), float32] */;
  %281 = %267.4;
  %282 = %274.0;
  %283 = %279.2;
  (%280, %281, meta[relay.Constant][15] /* ty=Tensor[(216), int16] */, meta[relay.Constant][16] /* ty=Tensor[(975), uint32] */, %var_4254, meta[relay.Constant][17] /* ty=Tensor[(26, 3), float64] */, %282, meta[relay.Constant][18] /* ty=Tensor[(1, 140), uint64] */, %283, %var_4272, meta[relay.Constant][19] /* ty=Tensor[(135), float32] */)
}

def @func_5772(%var_5736: Tensor[(198), bool]) -> (Tensor[(7, 9), float64], Tensor[(11, 3, 6), bool], Tensor[(198), bool]) {
  %284 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
  %285 = cast(%var_5736, dtype="bool") /* ty=Tensor[(198), bool] */;
  %286 = cast(%var_5736, dtype="bool") /* ty=Tensor[(198), bool] */;
  %287 = reshape(%285, newshape=[11, 3, 6]) /* ty=Tensor[(11, 3, 6), bool] */;
  %288 = reshape(%286, newshape=[11, 3, 6]) /* ty=Tensor[(11, 3, 6), bool] */;
  %289 = %284.0;
  %290 = @func_4383(%287, %288) /* ty=Tensor[(11, 3, 6), bool] */;
  (%289, %290, %var_5736)
}

def @func_1521(%var_1491: Tensor[(14, 4, 1), float32], %var_1518: Tensor[(78), float64]) -> (Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) {
  %291 = cast(%var_1491, dtype="float32") /* ty=Tensor[(14, 4, 1), float32] */;
  %292 = cast(%var_1491, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %293 = rsqrt(%292) /* ty=Tensor[(14, 4, 1), float64] */;
  %294 = cast(%293, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
  %295 = shape_of(%var_1491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%var_1491, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = cast(%var_1491, dtype="uint64") /* ty=Tensor[(14, 4, 1), uint64] */;
  %299 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 4, 13), float32] */, dtype="uint64") /* ty=Tensor[(14, 4, 13), uint64] */;
  %300 = cast(%var_1518, dtype="float64") /* ty=Tensor[(78), float64] */;
  %301 = cast(%var_1518, dtype="float64") /* ty=Tensor[(78), float64] */;
  %302 = cast(meta[relay.Constant][21] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %303 = reshape(%300, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %304 = reshape(%301, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %305 = reshape(%302, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %306 = @func_777(%303, %304, %305) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %307 = cosh(%291) /* ty=Tensor[(14, 4, 1), float32] */;
  %308 = logical_or(%296, %297) /* ty=Tensor[(14, 4, ?), bool] */;
  %309 = left_shift(%298, %299) /* ty=Tensor[(14, 4, 13), uint64] */;
  %310 = %306.0;
  (%307, %308, %309, %310, %var_1518, meta[relay.Constant][21] /* ty=Tensor[(135), float32] */)
}

def @func_5816() -> Tensor[(2, 13, 14), float64] {
  %311 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
  %311.1
}

def @func_777(%var_763: Tensor[(13, 3, 2), float64], %var_764: Tensor[(13, 3, 2), float64], %var_773: Tensor[(135), float32]) -> (Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %312 = cast(%var_764, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  %313 = shape_of(%var_763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_763, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %316 = cast(%var_773, dtype="float32") /* ty=Tensor[(135), float32] */;
  %317 = reshape(%316, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %318 = @func_81(%317) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %319 = multiply(%314, %315) /* ty=Tensor[(13, 3, 2), float64] */;
  %320 = %318.0;
  (%319, %320, %var_773)
}

def @func_5808() -> Tensor[(2, 13, 14), float32] {
  %321 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
  %321.0
}

def @func_5136() -> Tensor[(2, 13, 14), float32] {
  %322 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  sqrt(%323) /* ty=Tensor[(2, 13, 14), float32] */
}

def @func_6898(%var_6874: int64) -> (Tensor[(13, 8, 6), int64],) {
  %324 = cast(%var_6874, dtype="int64") /* ty=int64 */;
  %325 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 8, 6), int64] */, dtype="int64") /* ty=Tensor[(13, 8, 6), int64] */;
  %326 = bitwise_xor(%324, %325) /* ty=Tensor[(13, 8, 6), int64] */;
  (%326,)
}

def @func_2129(%var_2104: Tensor[(3, 4, 13), uint16]) -> (Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %327 = cast(%var_2104, dtype="uint16") /* ty=Tensor[(3, 4, 13), uint16] */;
  %328 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(3, 4, 13), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 4, 13), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4, 13), uint16] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %331 = cast(meta[relay.Constant][24] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %332 = reshape(%331, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %333 = @func_685(%332) /* ty=(Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) */;
  %334 = cast(meta[relay.Constant][25] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %335 = reshape(%334, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %336 = @func_81(%335) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %337 = logical_xor(%329, %330) /* ty=Tensor[(3, 4, 13), uint16] */;
  %338 = %333.1;
  %339 = %336.0;
  (%337, %338, meta[relay.Constant][24] /* ty=Tensor[(975), uint32] */, %339, meta[relay.Constant][25] /* ty=Tensor[(135), float32] */)
}

def @func_6942() -> (Tensor[(154, 6), int8], Tensor[(7, 15, 13), int64], Tensor[(7, 15, 13), int8]) {
  %340 = @func_6083() /* ty=(Tensor[(7, 9), float64], Tensor[(11, 14, 6), bool], Tensor[(154, 6), int8]) */;
  %341 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %342 = sigmoid(%341) /* ty=Tensor[(7, 15, 13), float32] */;
  %343 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = equal(%345, %346) /* ty=Tensor[(7, 15, 13), bool] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
  %349 = sqrt(%348) /* ty=Tensor[(7, 15, 13), float32] */;
  %350 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = not_equal(%352, %353) /* ty=Tensor[(7, 15, 13), bool] */;
  %355 = cast(%347, dtype="int64") /* ty=Tensor[(7, 15, 13), int64] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="int64") /* ty=Tensor[(7, 15, 13), int64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %359 = cast(%354, dtype="int8") /* ty=Tensor[(7, 15, 13), int8] */;
  %360 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%349, dtype="int8") /* ty=Tensor[(7, 15, 13), int8] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %363 = %340.2;
  %364 = multiply(%357, %358) /* ty=Tensor[(7, 15, 13), int64] */;
  %365 = bitwise_or(%361, %362) /* ty=Tensor[(7, 15, 13), int8] */;
  (%363, %364, %365)
}

def @func_4383(%var_4372: Tensor[(11, 3, 6), bool], %var_4373: Tensor[(11, 3, 6), bool]) -> Tensor[(11, 3, 6), bool] {
  %366 = cast(%var_4373, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
  %367 = shape_of(%var_4372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_4372, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%368, %369) /* ty=Tensor[(11, 3, 6), bool] */
}

def @func_7044(%var_6973: Tensor[(91, 4), float64]) -> (Tensor[(7, 15, 13), int8], Tensor[(91, 4), float64], Tensor[(2, 13, 14), float64]) {
  %370 = @func_6942() /* ty=(Tensor[(154, 6), int8], Tensor[(7, 15, 13), int64], Tensor[(7, 15, 13), int8]) */;
  %371 = cast(%var_6973, dtype="float64") /* ty=Tensor[(91, 4), float64] */;
  %372 = reshape(%371, newshape=[2, 13, 14]) /* ty=Tensor[(2, 13, 14), float64] */;
  %373 = @func_6512(%372) /* ty=(Tensor[(2, 13, 14), bool],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(2, 13, 14), float64] */;
  %376 = %370.2;
  %377 = cosh(%375) /* ty=Tensor[(2, 13, 14), float64] */;
  (%376, %var_6973, %377)
}

def @func_5079(%var_5039: Tensor[(6, 44), float64], %var_5055: Tensor[(1568), float64], %var_5058: Tensor[(78), float64], %var_5059: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float64], Tensor[(14, 16, 15), float32], Tensor[(6, 44), float64], Tensor[(30), uint32], Tensor[(1568), float64], uint8, Tensor[(10, 3), uint32], Tensor[(78), float64], Tensor[(135), float32]) {
  %378 = cast(%var_5039, dtype="float64") /* ty=Tensor[(6, 44), float64] */;
  %379 = reshape(%378, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %380 = @func_3156(%379) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) */;
  %381 = cast(%var_5055, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %382 = cast(meta[relay.Constant][28] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %383 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 3), uint32] */, dtype="uint32") /* ty=Tensor[(10, 3), uint32] */;
  %384 = cast(%var_5058, dtype="float64") /* ty=Tensor[(78), float64] */;
  %385 = cast(%var_5059, dtype="float32") /* ty=Tensor[(135), float32] */;
  %386 = reshape(%381, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), float64] */;
  %387 = reshape(%382, newshape=[]) /* ty=uint8 */;
  %388 = reshape(%383, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %389 = reshape(%384, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %390 = reshape(%385, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %391 = @func_3044(%386, %387, %388, %389, %390) /* ty=(Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %392 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %393 = %380.0;
  %394 = %391.7;
  (%392, %393, %var_5039, %394, %var_5055, meta[relay.Constant][28] /* ty=uint8 */, meta[relay.Constant][29] /* ty=Tensor[(10, 3), uint32] */, %var_5058, %var_5059)
}

def @func_5115() -> (Tensor[(7, 9), float64],) {
  %395 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 9), float64] */;
  %396 = acos(%395) /* ty=Tensor[(7, 9), float64] */;
  (%396,)
}

def @func_6389(%var_6355: Tensor[(440), float32]) -> (Tensor[(7, 9), float64], Tensor[(2, 13, 14), float64], Tensor[(440), float32], Tensor[(2, 13, 14), float64]) {
  %397 = @func_6013() /* ty=(Tensor[(7, 9), float64],) */;
  %398 = cast(%var_6355, dtype="float32") /* ty=Tensor[(440), float32] */;
  %399 = reshape(%398, newshape=[440, 1]) /* ty=Tensor[(440, 1), float32] */;
  %400 = @func_5475(%399) /* ty=(Tensor[(7, 9), float64], Tensor[(5, 11, 8), bool], Tensor[(2, 13, 14), float64], Tensor[(440, 1), float64]) */;
  %401 = %397.0;
  %402 = %400.2;
  %403 = @func_5816() /* ty=Tensor[(2, 13, 14), float64] */;
  (%401, %402, %var_6355, %403)
}

def @func_5475(%var_5462: Tensor[(440, 1), float32]) -> (Tensor[(7, 9), float64], Tensor[(5, 11, 8), bool], Tensor[(2, 13, 14), float64], Tensor[(440, 1), float64]) {
  %404 = @func_5430() /* ty=(Tensor[(7, 9), float64],) */;
  %405 = cast(%var_5462, dtype="float32") /* ty=Tensor[(440, 1), float32] */;
  %406 = cast(%var_5462, dtype="float32") /* ty=Tensor[(440, 1), float32] */;
  %407 = reshape(%405, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float32] */;
  %408 = reshape(%406, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float32] */;
  %409 = @func_1703(%407, %408) /* ty=(Tensor[(5, 11, 8), bool],) */;
  %410 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
  %411 = cast(%var_5462, dtype="float64") /* ty=Tensor[(440, 1), float64] */;
  %412 = %404.0;
  %413 = %409.0;
  %414 = %410.1;
  %415 = exp(%411) /* ty=Tensor[(440, 1), float64] */;
  (%412, %413, %414, %415)
}

def @func_4883(%var_4878: Tensor[(11, 14, 6), int8], %var_4879: Tensor[(11, 14, 6), int8]) -> (Tensor[(11, 14, 6), bool],) {
  %416 = cast(%var_4879, dtype="bool") /* ty=Tensor[(11, 14, 6), bool] */;
  %417 = shape_of(%var_4878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%var_4878, dtype="bool") /* ty=Tensor[(11, 14, 6), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = equal(%418, %419) /* ty=Tensor[(11, 14, 6), bool] */;
  (%420,)
}

def @func_6339() -> (Tensor[(7, 9), float64],) {
  %421 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
  %422 = %421.0;
  (%422,)
}

def @func_5792() -> Tensor[(7, 9), float64] {
  @func_5448() /* ty=Tensor[(7, 9), float64] */
}

def @func_5686() -> Tensor[(7, 9), float64] {
  %423 = @func_5430() /* ty=(Tensor[(7, 9), float64],) */;
  %423.0
}

def @func_4981() -> Tensor[(2, 13, 14), float64] {
  %424 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 13, 14), float64] */;
  sin(%424) /* ty=Tensor[(2, 13, 14), float64] */
}

def @func_6189() -> (Tensor[(7, 9), float64],) {
  %425 = @func_5448() /* ty=Tensor[(7, 9), float64] */;
  (%425,)
}

def @func_2860(%var_2843: float64, %var_2844: Tensor[(11, 6, 4), float64]) -> Tensor[(11, 6, 4), float64] {
  %426 = cast(%var_2843, dtype="float64") /* ty=float64 */;
  %427 = cast(%var_2844, dtype="float64") /* ty=Tensor[(11, 6, 4), float64] */;
  %428 = power(%426, %427) /* ty=Tensor[(11, 6, 4), float64] */;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(11, 6, 4), float64] */;
  tan(%429) /* ty=Tensor[(11, 6, 4), float64] */
}

def @func_1022(%var_1004: Tensor[(3, 5, 2), uint32], %var_1010: Tensor[(78), float64]) -> (Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) {
  %430 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 5, 2), uint32] */, dtype="uint32") /* ty=Tensor[(3, 5, 2), uint32] */;
  %431 = shape_of(%var_1004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_1004, dtype="uint32") /* ty=Tensor[(3, 5, 2), uint32] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %434 = cast(%var_1010, dtype="float64") /* ty=Tensor[(78), float64] */;
  %435 = cast(%var_1010, dtype="float64") /* ty=Tensor[(78), float64] */;
  %436 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %437 = reshape(%434, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %438 = reshape(%435, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %439 = reshape(%436, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %440 = @func_777(%437, %438, %439) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %441 = %440.1;
  %442 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 135), float32] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %446 = add(%432, %433) /* ty=Tensor[(3, 5, 2), uint32] */;
  %447 = equal(%444, %445) /* ty=Tensor[(15, ?, 9), bool] */;
  (%446, %var_1010, %447)
}

def @func_3044(%var_2965: Tensor[(14, 16, 7), float64], %var_2999: uint8, %var_3016: Tensor[(30), uint32], %var_3017: Tensor[(78), float64], %var_3024: Tensor[(135), float32]) -> (Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %448 = cast(%var_2965, dtype="float64") /* ty=Tensor[(14, 16, 7), float64] */;
  %449 = sin(%448) /* ty=Tensor[(14, 16, 7), float64] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(14, 16, 7), float64] */;
  %451 = cast(meta[relay.Constant][34] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %452 = reshape(%451, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %453 = @func_685(%452) /* ty=(Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) */;
  %454 = cast(%var_2999, dtype="uint8") /* ty=uint8 */;
  %455 = cast(meta[relay.Constant][35] /* ty=Tensor[(72), uint8] */, dtype="uint8") /* ty=Tensor[(72), uint8] */;
  %456 = reshape(%454, newshape=[]) /* ty=uint8 */;
  %457 = reshape(%455, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), uint8] */;
  %458 = @func_2447(%456, %457) /* ty=(Tensor[(12, 1, 6), uint8],) */;
  %459 = cast(%var_3016, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %460 = cast(%var_3017, dtype="float64") /* ty=Tensor[(78), float64] */;
  %461 = reshape(%459, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
  %462 = reshape(%460, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %463 = @func_1022(%461, %462) /* ty=(Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) */;
  %464 = cast(%var_3024, dtype="float32") /* ty=Tensor[(135), float32] */;
  %465 = reshape(%464, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %466 = @func_81(%465) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %467 = acos(%450) /* ty=Tensor[(14, 16, 7), float64] */;
  %468 = %453.0;
  %469 = %458.0;
  %470 = %463.1;
  %471 = %466.0;
  (%467, %468, meta[relay.Constant][34] /* ty=Tensor[(975), uint32] */, %469, %var_2999, meta[relay.Constant][35] /* ty=Tensor[(72), uint8] */, %470, %var_3016, %var_3017, %471, %var_3024)
}

def @func_5973(%var_5957: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32], Tensor[(2160), float64]) {
  %472 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
  %473 = cast(meta[relay.Constant][36] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %474 = cast(%var_5957, dtype="float32") /* ty=Tensor[(135), float32] */;
  %475 = reshape(%473, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %476 = reshape(%474, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %477 = @func_235(%475, %476) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
  %478 = cast(meta[relay.Constant][36] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %479 = cosh(%478) /* ty=Tensor[(2160), float32] */;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %481 = %472.0;
  %482 = %477.3;
  %483 = asin(%480) /* ty=Tensor[(2160), float64] */;
  (%481, %482, %var_5957, %483)
}

def @func_6327(%var_6302: float32) -> (Tensor[(7, 15, 14), float32], Tensor[(2, 13, 14), bool], Tensor[(13, 3, 2), float64], Tensor[(56), float32], Tensor[(78), float64], Tensor[(1, 98), float32], Tensor[(15, 1, 9), bool], Tensor[(15, 1, 9), float32]) {
  %484 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %485 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 13, 14), float64] */, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = cast(meta[relay.Constant][38] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %490 = cast(meta[relay.Constant][39] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %491 = reshape(%489, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float32] */;
  %492 = reshape(%490, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %493 = @func_1521(%491, %492) /* ty=(Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) */;
  %494 = cast(%var_6302, dtype="float32") /* ty=float32 */;
  %495 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, dtype="float32") /* ty=Tensor[(1, 98), float32] */;
  %496 = reshape(%494, newshape=[]) /* ty=float32 */;
  %497 = reshape(%495, newshape=[1, 14, 7]) /* ty=Tensor[(1, 14, 7), float32] */;
  %498 = @func_2089(%496, %497) /* ty=(Tensor[(1, 14, 7), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %499 = %498.1;
  %500 = cast(%499, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %501 = cast(%var_6302, dtype="bool") /* ty=bool */;
  %502 = cast(%499, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %503 = @func_5856() /* ty=Tensor[(7, 15, 14), float32] */;
  %504 = equal(%487, %488) /* ty=Tensor[(2, 13, 14), bool] */;
  %505 = %493.3;
  %506 = greater_equal(%500, %501) /* ty=Tensor[(15, 1, 9), bool] */;
  %507 = sin(%502) /* ty=Tensor[(15, 1, 9), float32] */;
  (%503, %504, %505, meta[relay.Constant][38] /* ty=Tensor[(56), float32] */, meta[relay.Constant][39] /* ty=Tensor[(78), float64] */, meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, %506, %507)
}

def @func_1975(%var_1892: Tensor[(2, 7, 10), uint64], %var_1893: Tensor[(2, 7, 10), uint64], %var_1909: Tensor[(975), uint32]) -> (Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %508 = cast(%var_1893, dtype="uint64") /* ty=Tensor[(2, 7, 10), uint64] */;
  %509 = shape_of(%var_1892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%var_1892, dtype="uint64") /* ty=Tensor[(2, 7, 10), uint64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %512 = cast(%var_1893, dtype="float32") /* ty=Tensor[(2, 7, 10), float32] */;
  %513 = cast(%var_1909, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %514 = cast(%var_1909, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %515 = cast(%var_1909, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %516 = reshape(%513, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %517 = reshape(%514, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %518 = reshape(%515, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %519 = @func_316(%516, %517, %518) /* ty=(Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) */;
  %520 = %519.1;
  %521 = cast(%520, dtype="int32") /* ty=Tensor[(5, 13, 15), int32] */;
  %522 = shape_of(%var_1909, dtype="int32") /* ty=Tensor[(1), int32] */;
  %523 = cast(%var_1909, dtype="int32") /* ty=Tensor[(975), int32] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?), int32] */;
  %525 = cast(%var_1892, dtype="float32") /* ty=Tensor[(2, 7, 10), float32] */;
  %526 = sinh(%525) /* ty=Tensor[(2, 7, 10), float32] */;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(2, 7, 10), float64] */;
  %528 = cast(meta[relay.Constant][41] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %529 = reshape(%528, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %530 = @func_81(%529) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %531 = minimum(%510, %511) /* ty=Tensor[(2, 7, 10), uint64] */;
  %532 = rsqrt(%512) /* ty=Tensor[(2, 7, 10), float32] */;
  %533 = minimum(%523, %524) /* ty=Tensor[(975), int32] */;
  %534 = sin(%527) /* ty=Tensor[(2, 7, 10), float64] */;
  %535 = %530.0;
  (%531, %532, %533, %534, %535, meta[relay.Constant][41] /* ty=Tensor[(135), float32] */)
}

def @func_2447(%var_2442: uint8, %var_2443: Tensor[(12, 1, 6), uint8]) -> (Tensor[(12, 1, 6), uint8],) {
  %536 = cast(%var_2442, dtype="uint8") /* ty=uint8 */;
  %537 = cast(%var_2443, dtype="uint8") /* ty=Tensor[(12, 1, 6), uint8] */;
  %538 = bitwise_or(%536, %537) /* ty=Tensor[(12, 1, 6), uint8] */;
  (%538,)
}

def @func_5897(%var_5892: int8, %var_5893: Tensor[(3, 11, 9), int8]) -> Tensor[(3, 11, 9), int8] {
  %539 = cast(%var_5892, dtype="int8") /* ty=int8 */;
  %540 = cast(%var_5893, dtype="int8") /* ty=Tensor[(3, 11, 9), int8] */;
  bitwise_or(%539, %540) /* ty=Tensor[(3, 11, 9), int8] */
}

def @func_5832() -> Tensor[(7, 15, 14), float32] {
  %541 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  acos(%541) /* ty=Tensor[(7, 15, 14), float32] */
}

def @func_5887() -> (Tensor[(7, 9), float64],) {
  %542 = @func_5686() /* ty=Tensor[(7, 9), float64] */;
  (%542,)
}

def @func_2089(%var_2076: float32, %var_2077: Tensor[(1, 14, 7), float32]) -> (Tensor[(1, 14, 7), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %543 = cast(%var_2076, dtype="float32") /* ty=float32 */;
  %544 = cast(%var_2077, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
  %545 = cast(meta[relay.Constant][43] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %546 = reshape(%545, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %547 = @func_81(%546) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %548 = power(%543, %544) /* ty=Tensor[(1, 14, 7), float32] */;
  %549 = %547.0;
  (%548, %549, meta[relay.Constant][43] /* ty=Tensor[(135), float32] */)
}

def @func_2813(%var_2786: uint32, %var_2787: Tensor[(14, 16, 10), uint32]) -> (Tensor[(14, 16, 10), uint32], Tensor[(15, 1, 7), float32], Tensor[(156), uint16]) {
  %550 = cast(%var_2786, dtype="uint32") /* ty=uint32 */;
  %551 = cast(%var_2787, dtype="uint32") /* ty=Tensor[(14, 16, 10), uint32] */;
  %552 = cast(meta[relay.Constant][44] /* ty=Tensor[(156), uint16] */, dtype="uint16") /* ty=Tensor[(156), uint16] */;
  %553 = reshape(%552, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint16] */;
  %554 = @func_2129(%553) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %555 = bitwise_or(%550, %551) /* ty=Tensor[(14, 16, 10), uint32] */;
  %556 = %554.1;
  (%555, %556, meta[relay.Constant][44] /* ty=Tensor[(156), uint16] */)
}

def @func_6255(%var_6246: Tensor[(2, 13, 14), float32]) -> (Tensor[(2, 13, 14), int64],) {
  %557 = @func_5808() /* ty=Tensor[(2, 13, 14), float32] */;
  %558 = cast(%var_6246, dtype="int64") /* ty=Tensor[(2, 13, 14), int64] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="int64") /* ty=Tensor[(2, 13, 14), int64] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %562 = add(%560, %561) /* ty=Tensor[(2, 13, 14), int64] */;
  (%562,)
}

def @func_6512(%var_6504: Tensor[(2, 13, 14), float64]) -> (Tensor[(2, 13, 14), bool],) {
  %563 = @func_5816() /* ty=Tensor[(2, 13, 14), float64] */;
  %564 = cast(%var_6504, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %568 = greater_equal(%566, %567) /* ty=Tensor[(2, 13, 14), bool] */;
  (%568,)
}

def @func_3080(%var_3076: Tensor[(2, 11, 13), float32]) -> (Tensor[(2, 11, 13), float32],) {
  %569 = cast(%var_3076, dtype="float32") /* ty=Tensor[(2, 11, 13), float32] */;
  %570 = sinh(%569) /* ty=Tensor[(2, 11, 13), float32] */;
  (%570,)
}

def @func_4662(%var_4658: Tensor[(7, 13, 5), float64]) -> (Tensor[(7, 13, 5), float64],) {
  %571 = cast(%var_4658, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
  %572 = atan(%571) /* ty=Tensor[(7, 13, 5), float64] */;
  (%572,)
}

def @func_1682(%var_1606: Tensor[(4, 6, 9), int16], %var_1637: Tensor[(975), uint32], %var_1645: Tensor[(56), float32], %var_1646: Tensor[(78), float64]) -> (Tensor[(4, 6, 9), int16], Tensor[(4, 6, 9), uint8], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(13, 3, 2), float32]) {
  %573 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 6, 9), int16] */, dtype="int16") /* ty=Tensor[(4, 6, 9), int16] */;
  %574 = shape_of(%var_1606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_1606, dtype="int16") /* ty=Tensor[(4, 6, 9), int16] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %577 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 6, 9), int16] */, dtype="uint8") /* ty=Tensor[(4, 6, 9), uint8] */;
  %578 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(4, 6, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 6, 9), int16] */, dtype="uint8") /* ty=Tensor[(4, 6, 9), uint8] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %581 = cast(%var_1637, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %582 = reshape(%581, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %583 = @func_685(%582) /* ty=(Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) */;
  %584 = cast(%var_1645, dtype="float32") /* ty=Tensor[(56), float32] */;
  %585 = cast(%var_1646, dtype="float64") /* ty=Tensor[(78), float64] */;
  %586 = reshape(%584, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float32] */;
  %587 = reshape(%585, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %588 = @func_1521(%586, %587) /* ty=(Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) */;
  %589 = %588.3;
  %590 = cast(%var_1646, dtype="float32") /* ty=Tensor[(78), float32] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="float32") /* ty=Tensor[(13, 3, 2), float32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %594 = add(%575, %576) /* ty=Tensor[(4, 6, 9), int16] */;
  %595 = maximum(%579, %580) /* ty=Tensor[(4, 6, 9), uint8] */;
  %596 = %583.2;
  %597 = floor_mod(%592, %593) /* ty=Tensor[(13, 3, 2), float32] */;
  (%594, %595, %596, %var_1637, %var_1645, %597)
}

def @func_5325(%var_5249: Tensor[(2, 11, 3), float32], %var_5312: Tensor[(1568), float64]) -> (Tensor[(2, 11, 3), uint64], Tensor[(5, 10, 7), float32], Tensor[(350, 1), bool], Tensor[(2, 11, 3), float32], Tensor[(2, 11, 3), float64], Tensor[(2, 11, 3), bool], Tensor[(78), float64], Tensor[(56, 26), uint16], Tensor[(78), float64], Tensor[(1568), float64], Tensor[(30), uint32], Tensor[(2, 7, 10), float64], Tensor[(140), uint64], Tensor[(975), uint32]) {
  %598 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 11, 3), float32] */, dtype="uint64") /* ty=Tensor[(2, 11, 3), uint64] */;
  %599 = shape_of(%var_5249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%var_5249, dtype="uint64") /* ty=Tensor[(2, 11, 3), uint64] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %602 = cast(meta[relay.Constant][48] /* ty=Tensor[(350, 1), bool] */, dtype="bool") /* ty=Tensor[(350, 1), bool] */;
  %603 = reshape(%602, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), bool] */;
  %604 = @func_1152(%603) /* ty=(Tensor[(5, 10, 7), float32],) */;
  %605 = cast(%var_5249, dtype="float32") /* ty=Tensor[(2, 11, 3), float32] */;
  %606 = rsqrt(%605) /* ty=Tensor[(2, 11, 3), float32] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(2, 11, 3), float64] */;
  %608 = log10(%607) /* ty=Tensor[(2, 11, 3), float64] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(2, 11, 3), float32] */;
  %610 = cast(%608, dtype="float64") /* ty=Tensor[(2, 11, 3), float64] */;
  %611 = cast(%606, dtype="bool") /* ty=Tensor[(2, 11, 3), bool] */;
  %612 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(2, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 11, 3), float32] */, dtype="bool") /* ty=Tensor[(2, 11, 3), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = cast(meta[relay.Constant][49] /* ty=Tensor[(56, 26), uint16] */, dtype="uint16") /* ty=Tensor[(56, 26), uint16] */;
  %616 = cast(meta[relay.Constant][49] /* ty=Tensor[(56, 26), uint16] */, dtype="uint16") /* ty=Tensor[(56, 26), uint16] */;
  %617 = cast(meta[relay.Constant][50] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %618 = cast(%var_5312, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %619 = cast(meta[relay.Constant][51] /* ty=Tensor[(30), uint32] */, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %620 = cast(%var_5312, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %621 = reshape(%615, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), uint16] */;
  %622 = reshape(%616, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), uint16] */;
  %623 = reshape(%617, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %624 = reshape(%618, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %625 = reshape(%619, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %626 = reshape(%620, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %627 = @func_3253(%621, %622, %623, %624, %625, %626) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32], Tensor[(15, 1, 7), float64], uint8, Tensor[(30), uint32], Tensor[(13, 3, 2), float64], Tensor[(1568), uint32], Tensor[(8, 14, 13), float64]) */;
  %628 = cast(meta[relay.Constant][52] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %629 = cast(meta[relay.Constant][52] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %630 = cast(meta[relay.Constant][53] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %631 = reshape(%628, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
  %632 = reshape(%629, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
  %633 = reshape(%630, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %634 = @func_1975(%631, %632, %633) /* ty=(Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %635 = right_shift(%600, %601) /* ty=Tensor[(2, 11, 3), uint64] */;
  %636 = %604.0;
  %637 = tan(%609) /* ty=Tensor[(2, 11, 3), float32] */;
  %638 = sinh(%610) /* ty=Tensor[(2, 11, 3), float64] */;
  %639 = greater_equal(%613, %614) /* ty=Tensor[(2, 11, 3), bool] */;
  %640 = %627.1;
  %641 = %634.3;
  (%635, %636, meta[relay.Constant][48] /* ty=Tensor[(350, 1), bool] */, %637, %638, %639, %640, meta[relay.Constant][49] /* ty=Tensor[(56, 26), uint16] */, meta[relay.Constant][50] /* ty=Tensor[(78), float64] */, %var_5312, meta[relay.Constant][51] /* ty=Tensor[(30), uint32] */, %641, meta[relay.Constant][52] /* ty=Tensor[(140), uint64] */, meta[relay.Constant][53] /* ty=Tensor[(975), uint32] */)
}

def @func_235(%var_169: Tensor[(15, 9, 16), float32], %var_181: Tensor[(15, 9), float32]) -> (Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) {
  %642 = cast(%var_169, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
  %643 = cast(%var_181, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %644 = reshape(%643, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %645 = @func_81(%644) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %648 = reshape(%647, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %649 = @func_81(%648) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %650 = cast(%646, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %651 = reshape(%650, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %652 = @func_81(%651) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %653 = cosh(%642) /* ty=Tensor[(15, 9, 16), float32] */;
  %654 = %649.0;
  %655 = %652.0;
  (%653, %646, %var_181, %654, %655)
}

def @func_5430() -> (Tensor[(7, 9), float64],) {
  %656 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
  %657 = %656.0;
  (%657,)
}

def @func_3855(%var_3818: Tensor[(1, 9, 1), float64]) -> Tensor[(2, 9, 5), uint32] {
  %658 = cast(%var_3818, dtype="float64") /* ty=Tensor[(1, 9, 1), float64] */;
  %659 = rsqrt(%658) /* ty=Tensor[(1, 9, 1), float64] */;
  %660 = cast(%659, dtype="uint32") /* ty=Tensor[(1, 9, 1), uint32] */;
  %661 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 9, 5), float64] */, dtype="uint32") /* ty=Tensor[(2, 9, 5), uint32] */;
  logical_xor(%660, %661) /* ty=Tensor[(2, 9, 5), uint32] */
}

def @func_5856() -> Tensor[(7, 15, 14), float32] {
  @func_5832() /* ty=Tensor[(7, 15, 14), float32] */
}

def @func_3156(%var_3145: Tensor[(264), float64]) -> (Tensor[(14, 16, 15), float32], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) {
  %662 = cast(meta[relay.Constant][55] /* ty=Tensor[(14, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
  %663 = cast(-8.57712f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %664 = cast(%var_3145, dtype="float64") /* ty=Tensor[(264), float64] */;
  %665 = reshape(%663, newshape=[]) /* ty=float64 */;
  %666 = reshape(%664, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), float64] */;
  %667 = acosh(%662) /* ty=Tensor[(14, 16, 15), float32] */;
  %668 = @func_2860(%665, %666) /* ty=Tensor[(11, 6, 4), float64] */;
  (%667, %668, -8.57712f64 /* ty=float64 */, %var_3145)
}

def @func_6654(%var_6607: Tensor[(2160), float32]) -> (Tensor[(7, 9), float64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32], Tensor[(7, 9), float64]) {
  %669 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
  %670 = cast(%var_6607, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %671 = cast(meta[relay.Constant][56] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %672 = reshape(%670, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %673 = reshape(%671, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %674 = @func_235(%672, %673) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
  %675 = @func_5887() /* ty=(Tensor[(7, 9), float64],) */;
  %676 = %669.0;
  %677 = %674.2;
  %678 = %675.0;
  (%676, %677, %var_6607, meta[relay.Constant][56] /* ty=Tensor[(135), float32] */, %678)
}

def @main(%var_7068: Tensor[(1568), float64], %var_7088: Tensor[(30), uint32], %var_7092: Tensor[(66, 1), float32]) -> (Tensor[(7, 9), float64], Tensor[(5, 10, 7), float32], Tensor[(1568), float64], Tensor[(3, 5, 2), uint32], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(66, ?), uint8]) {
  %679 = cast(meta[relay.Constant][57] /* ty=Tensor[(66, 1), float32] */, dtype="float32") /* ty=Tensor[(66, 1), float32] */;
  %680 = cast(%var_7068, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %681 = reshape(%679, newshape=[2, 11, 3]) /* ty=Tensor[(2, 11, 3), float32] */;
  %682 = reshape(%680, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %683 = @func_5325(%681, %682) /* ty=(Tensor[(2, 11, 3), uint64], Tensor[(5, 10, 7), float32], Tensor[(350, 1), bool], Tensor[(2, 11, 3), float32], Tensor[(2, 11, 3), float64], Tensor[(2, 11, 3), bool], Tensor[(78), float64], Tensor[(56, 26), uint16], Tensor[(78), float64], Tensor[(1568), float64], Tensor[(30), uint32], Tensor[(2, 7, 10), float64], Tensor[(140), uint64], Tensor[(975), uint32]) */;
  %684 = cast(%var_7088, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %685 = cast(meta[relay.Constant][58] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %686 = reshape(%684, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
  %687 = reshape(%685, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %688 = @func_1022(%686, %687) /* ty=(Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) */;
  %689 = cast(%var_7092, dtype="uint8") /* ty=Tensor[(66, 1), uint8] */;
  %690 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(66, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %691 = cast(meta[relay.Constant][57] /* ty=Tensor[(66, 1), float32] */, dtype="uint8") /* ty=Tensor[(66, 1), uint8] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %693 = @func_5448() /* ty=Tensor[(7, 9), float64] */;
  %694 = %683.1;
  %695 = %688.0;
  %696 = bitwise_or(%691, %692) /* ty=Tensor[(66, ?), uint8] */;
  (%693, %694, %var_7068, %695, %var_7088, meta[relay.Constant][58] /* ty=Tensor[(78), float64] */, %696)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1682(%var_1606: Tensor[(4, 6, 9), int16], %var_1637: Tensor[(975), uint32], %var_1645: Tensor[(56), float32], %var_1646: Tensor[(78), float64]) -> (Tensor[(4, 6, 9), int16], Tensor[(4, 6, 9), uint8], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(13, 3, 2), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 6, 9), int16] */, dtype="int16") /* ty=Tensor[(4, 6, 9), int16] */;
  %1 = shape_of(%var_1606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_1606, dtype="int16") /* ty=Tensor[(4, 6, 9), int16] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %4 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 6, 9), int16] */, dtype="uint8") /* ty=Tensor[(4, 6, 9), uint8] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 6, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 6, 9), int16] */, dtype="uint8") /* ty=Tensor[(4, 6, 9), uint8] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %8 = cast(%var_1637, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %9 = reshape(%8, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %10 = @func_685(%9) /* ty=(Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) */;
  %11 = cast(%var_1645, dtype="float32") /* ty=Tensor[(56), float32] */;
  %12 = cast(%var_1646, dtype="float64") /* ty=Tensor[(78), float64] */;
  %13 = reshape(%11, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float32] */;
  %14 = reshape(%12, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %15 = @func_1521(%13, %14) /* ty=(Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) */;
  %16 = %15.3;
  %17 = cast(%var_1646, dtype="float32") /* ty=Tensor[(78), float32] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="float32") /* ty=Tensor[(13, 3, 2), float32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %21 = add(%2, %3) /* ty=Tensor[(4, 6, 9), int16] */;
  %22 = maximum(%6, %7) /* ty=Tensor[(4, 6, 9), uint8] */;
  %23 = %10.2;
  %24 = floor_mod(%19, %20) /* ty=Tensor[(13, 3, 2), float32] */;
  (%21, %22, %23, %var_1637, %var_1645, %24)
}

def @func_5478(%var_5476: Tensor[(440, 1), float32]) -> (Tensor[(7, 9), float64], Tensor[(5, 11, 8), bool], Tensor[(2, 13, 14), float64], Tensor[(440, 1), float64]) {
  @func_5475(%var_5476) /* ty=(Tensor[(7, 9), float64], Tensor[(5, 11, 8), bool], Tensor[(2, 13, 14), float64], Tensor[(440, 1), float64]) */
}

def @func_3083(%var_3081: Tensor[(2, 11, 13), float32]) -> (Tensor[(2, 11, 13), float32],) {
  @func_3080(%var_3081) /* ty=(Tensor[(2, 11, 13), float32],) */
}

def @func_5900(%var_5898: int8, %var_5899: Tensor[(3, 11, 9), int8]) -> Tensor[(3, 11, 9), int8] {
  %27 = fn (%var_5892: int8, %var_5893: Tensor[(3, 11, 9), int8]) -> Tensor[(3, 11, 9), int8] {
    %25 = cast(%var_5892, dtype="int8") /* ty=int8 */;
    %26 = cast(%var_5893, dtype="int8") /* ty=Tensor[(3, 11, 9), int8] */;
    bitwise_or(%25, %26) /* ty=Tensor[(3, 11, 9), int8] */
  };
  %27(%var_5898, %var_5899) /* ty=Tensor[(3, 11, 9), int8] */
}

def @func_3080(%var_3076: Tensor[(2, 11, 13), float32]) -> (Tensor[(2, 11, 13), float32],) {
  %28 = cast(%var_3076, dtype="float32") /* ty=Tensor[(2, 11, 13), float32] */;
  %29 = sinh(%28) /* ty=Tensor[(2, 11, 13), float32] */;
  (%29,)
}

def @func_6255(%var_6246: Tensor[(2, 13, 14), float32]) -> (Tensor[(2, 13, 14), int64],) {
  %30 = @func_5808() /* ty=Tensor[(2, 13, 14), float32] */;
  %31 = cast(%var_6246, dtype="int64") /* ty=Tensor[(2, 13, 14), int64] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="int64") /* ty=Tensor[(2, 13, 14), int64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %35 = add(%33, %34) /* ty=Tensor[(2, 13, 14), int64] */;
  (%35,)
}

def @func_6656(%var_6655: Tensor[(2160), float32]) -> (Tensor[(7, 9), float64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32], Tensor[(7, 9), float64]) {
  %46 = fn (%var_6607: Tensor[(2160), float32]) -> (Tensor[(7, 9), float64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32], Tensor[(7, 9), float64]) {
    %36 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
    %37 = cast(%var_6607, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %39 = reshape(%37, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %40 = reshape(%38, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
    %41 = @func_235(%39, %40) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
    %42 = @func_5887() /* ty=(Tensor[(7, 9), float64],) */;
    %43 = %36.0;
    %44 = %41.2;
    %45 = %42.0;
    (%43, %44, %var_6607, meta[relay.Constant][2] /* ty=Tensor[(135), float32] */, %45)
  };
  %46(%var_6655) /* ty=(Tensor[(7, 9), float64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32], Tensor[(7, 9), float64]) */
}

def @func_6746() -> (Tensor[(2, 13, 14), float32],) {
  @func_6744() /* ty=(Tensor[(2, 13, 14), float32],) */
}

def @func_781(%var_778: Tensor[(13, 3, 2), float64], %var_779: Tensor[(13, 3, 2), float64], %var_780: Tensor[(135), float32]) -> (Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %56 = fn (%var_763: Tensor[(13, 3, 2), float64], %var_764: Tensor[(13, 3, 2), float64], %var_773: Tensor[(135), float32]) -> (Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
    %47 = cast(%var_764, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
    %48 = shape_of(%var_763, dtype="int32") /* ty=Tensor[(3), int32] */;
    %49 = cast(%var_763, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %51 = cast(%var_773, dtype="float32") /* ty=Tensor[(135), float32] */;
    %52 = reshape(%51, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
    %53 = @func_81(%52) /* ty=(Tensor[(15, 1, 9), float32],) */;
    %54 = multiply(%49, %50) /* ty=Tensor[(13, 3, 2), float64] */;
    %55 = %53.0;
    (%54, %55, %var_773)
  };
  %56(%var_778, %var_779, %var_780) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */
}

def @func_2129(%var_2104: Tensor[(3, 4, 13), uint16]) -> (Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %57 = cast(%var_2104, dtype="uint16") /* ty=Tensor[(3, 4, 13), uint16] */;
  %58 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(3, 4, 13), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 4, 13), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4, 13), uint16] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %62 = reshape(%61, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %63 = @func_685(%62) /* ty=(Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) */;
  %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %65 = reshape(%64, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %66 = @func_81(%65) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %67 = logical_xor(%59, %60) /* ty=Tensor[(3, 4, 13), uint16] */;
  %68 = %63.1;
  %69 = %66.0;
  (%67, %68, meta[relay.Constant][4] /* ty=Tensor[(975), uint32] */, %69, meta[relay.Constant][5] /* ty=Tensor[(135), float32] */)
}

def @func_3159(%var_3157: Tensor[(264), float64]) -> (Tensor[(14, 16, 15), float32], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) {
  @func_3156(%var_3157) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) */
}

def @func_5775(%var_5773: Tensor[(198), bool]) -> (Tensor[(7, 9), float64], Tensor[(11, 3, 6), bool], Tensor[(198), bool]) {
  @func_5772(%var_5773) /* ty=(Tensor[(7, 9), float64], Tensor[(11, 3, 6), bool], Tensor[(198), bool]) */
}

def @func_4506(%var_4501: Tensor[(9, 8, 16), float64], %var_4502: uint8, %var_4503: Tensor[(264), float64], %var_4504: Tensor[(12, 15, 6), uint8], %var_4505: Tensor[(350), bool]) -> (Tensor[(3, 4, 13), uint16], Tensor[(156), uint16], uint8, Tensor[(72), uint8], Tensor[(9, 8, 16), bool], Tensor[(11, 6, 4), float64], Tensor[(264), float64], Tensor[(15, 1, 7), float32], Tensor[(12, 15, 6), bool], Tensor[(5, 10, 7), float32], Tensor[(350), bool]) {
  @func_4499(%var_4501, %var_4502, %var_4503, %var_4504, %var_4505) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(156), uint16], uint8, Tensor[(72), uint8], Tensor[(9, 8, 16), bool], Tensor[(11, 6, 4), float64], Tensor[(264), float64], Tensor[(15, 1, 7), float32], Tensor[(12, 15, 6), bool], Tensor[(5, 10, 7), float32], Tensor[(350), bool]) */
}

def @func_5450() -> Tensor[(7, 9), float64] {
  @func_5448() /* ty=Tensor[(7, 9), float64] */
}

def @func_5345() -> (Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) {
  @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */
}

def @func_5328(%var_5326: Tensor[(2, 11, 3), float32], %var_5327: Tensor[(1568), float64]) -> (Tensor[(2, 11, 3), uint64], Tensor[(5, 10, 7), float32], Tensor[(350, 1), bool], Tensor[(2, 11, 3), float32], Tensor[(2, 11, 3), float64], Tensor[(2, 11, 3), bool], Tensor[(78), float64], Tensor[(56, 26), uint16], Tensor[(78), float64], Tensor[(1568), float64], Tensor[(30), uint32], Tensor[(2, 7, 10), float64], Tensor[(140), uint64], Tensor[(975), uint32]) {
  %114 = fn (%var_5249: Tensor[(2, 11, 3), float32], %var_5312: Tensor[(1568), float64]) -> (Tensor[(2, 11, 3), uint64], Tensor[(5, 10, 7), float32], Tensor[(350, 1), bool], Tensor[(2, 11, 3), float32], Tensor[(2, 11, 3), float64], Tensor[(2, 11, 3), bool], Tensor[(78), float64], Tensor[(56, 26), uint16], Tensor[(78), float64], Tensor[(1568), float64], Tensor[(30), uint32], Tensor[(2, 7, 10), float64], Tensor[(140), uint64], Tensor[(975), uint32]) {
    %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 11, 3), float32] */, dtype="uint64") /* ty=Tensor[(2, 11, 3), uint64] */;
    %71 = shape_of(%var_5249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%var_5249, dtype="uint64") /* ty=Tensor[(2, 11, 3), uint64] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(350, 1), bool] */, dtype="bool") /* ty=Tensor[(350, 1), bool] */;
    %75 = reshape(%74, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), bool] */;
    %76 = @func_1152(%75) /* ty=(Tensor[(5, 10, 7), float32],) */;
    %77 = cast(%var_5249, dtype="float32") /* ty=Tensor[(2, 11, 3), float32] */;
    %78 = rsqrt(%77) /* ty=Tensor[(2, 11, 3), float32] */;
    %79 = cast(%78, dtype="float64") /* ty=Tensor[(2, 11, 3), float64] */;
    %80 = log10(%79) /* ty=Tensor[(2, 11, 3), float64] */;
    %81 = cast(%80, dtype="float32") /* ty=Tensor[(2, 11, 3), float32] */;
    %82 = cast(%80, dtype="float64") /* ty=Tensor[(2, 11, 3), float64] */;
    %83 = cast(%78, dtype="bool") /* ty=Tensor[(2, 11, 3), bool] */;
    %84 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(2, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %85 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 11, 3), float32] */, dtype="bool") /* ty=Tensor[(2, 11, 3), bool] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %87 = cast(meta[relay.Constant][8] /* ty=Tensor[(56, 26), uint16] */, dtype="uint16") /* ty=Tensor[(56, 26), uint16] */;
    %88 = cast(meta[relay.Constant][8] /* ty=Tensor[(56, 26), uint16] */, dtype="uint16") /* ty=Tensor[(56, 26), uint16] */;
    %89 = cast(meta[relay.Constant][9] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
    %90 = cast(%var_5312, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %91 = cast(meta[relay.Constant][10] /* ty=Tensor[(30), uint32] */, dtype="uint32") /* ty=Tensor[(30), uint32] */;
    %92 = cast(%var_5312, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %93 = reshape(%87, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), uint16] */;
    %94 = reshape(%88, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), uint16] */;
    %95 = reshape(%89, newshape=[78]) /* ty=Tensor[(78), float64] */;
    %96 = reshape(%90, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %97 = reshape(%91, newshape=[30]) /* ty=Tensor[(30), uint32] */;
    %98 = reshape(%92, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %99 = @func_3253(%93, %94, %95, %96, %97, %98) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32], Tensor[(15, 1, 7), float64], uint8, Tensor[(30), uint32], Tensor[(13, 3, 2), float64], Tensor[(1568), uint32], Tensor[(8, 14, 13), float64]) */;
    %100 = cast(meta[relay.Constant][11] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
    %101 = cast(meta[relay.Constant][11] /* ty=Tensor[(140), uint64] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
    %102 = cast(meta[relay.Constant][12] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
    %103 = reshape(%100, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
    %104 = reshape(%101, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
    %105 = reshape(%102, newshape=[975]) /* ty=Tensor[(975), uint32] */;
    %106 = @func_1975(%103, %104, %105) /* ty=(Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
    %107 = right_shift(%72, %73) /* ty=Tensor[(2, 11, 3), uint64] */;
    %108 = %76.0;
    %109 = tan(%81) /* ty=Tensor[(2, 11, 3), float32] */;
    %110 = sinh(%82) /* ty=Tensor[(2, 11, 3), float64] */;
    %111 = greater_equal(%85, %86) /* ty=Tensor[(2, 11, 3), bool] */;
    %112 = %99.1;
    %113 = %106.3;
    (%107, %108, meta[relay.Constant][7] /* ty=Tensor[(350, 1), bool] */, %109, %110, %111, %112, meta[relay.Constant][8] /* ty=Tensor[(56, 26), uint16] */, meta[relay.Constant][9] /* ty=Tensor[(78), float64] */, %var_5312, meta[relay.Constant][10] /* ty=Tensor[(30), uint32] */, %113, meta[relay.Constant][11] /* ty=Tensor[(140), uint64] */, meta[relay.Constant][12] /* ty=Tensor[(975), uint32] */)
  };
  %114(%var_5326, %var_5327) /* ty=(Tensor[(2, 11, 3), uint64], Tensor[(5, 10, 7), float32], Tensor[(350, 1), bool], Tensor[(2, 11, 3), float32], Tensor[(2, 11, 3), float64], Tensor[(2, 11, 3), bool], Tensor[(78), float64], Tensor[(56, 26), uint16], Tensor[(78), float64], Tensor[(1568), float64], Tensor[(30), uint32], Tensor[(2, 7, 10), float64], Tensor[(140), uint64], Tensor[(975), uint32]) */
}

def @func_6474(%var_6464: Tensor[(8, 16, 2), float64]) -> (Tensor[(8, 16, 2), float64],) {
  %115 = cast(%var_6464, dtype="float64") /* ty=Tensor[(8, 16, 2), float64] */;
  %116 = sqrt(%115) /* ty=Tensor[(8, 16, 2), float64] */;
  (%116,)
}

def @func_6804() -> (Tensor[(7, 9), float64],) {
  %117 = @func_6013() /* ty=(Tensor[(7, 9), float64],) */;
  %118 = %117.0;
  (%118,)
}

def @func_4154(%var_4152: Tensor[(10, 1, 2), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(10, ?, 2), int8], Tensor[(2, 11, 13), float32], Tensor[(286), float32]) {
  @func_4151(%var_4152) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, ?, 2), int8], Tensor[(2, 11, 13), float32], Tensor[(286), float32]) */
}

def @func_84(%var_82: Tensor[(15, 1, 9), float32]) -> (Tensor[(15, 1, 9), float32],) {
  @func_81(%var_82) /* ty=(Tensor[(15, 1, 9), float32],) */
}

def @func_1979(%var_1976: Tensor[(2, 7, 10), uint64], %var_1977: Tensor[(2, 7, 10), uint64], %var_1978: Tensor[(975), uint32]) -> (Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %147 = fn (%var_1892: Tensor[(2, 7, 10), uint64], %var_1893: Tensor[(2, 7, 10), uint64], %var_1909: Tensor[(975), uint32]) -> (Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
    %119 = cast(%var_1893, dtype="uint64") /* ty=Tensor[(2, 7, 10), uint64] */;
    %120 = shape_of(%var_1892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %121 = cast(%var_1892, dtype="uint64") /* ty=Tensor[(2, 7, 10), uint64] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %123 = cast(%var_1893, dtype="float32") /* ty=Tensor[(2, 7, 10), float32] */;
    %124 = cast(%var_1909, dtype="uint32") /* ty=Tensor[(975), uint32] */;
    %125 = cast(%var_1909, dtype="uint32") /* ty=Tensor[(975), uint32] */;
    %126 = cast(%var_1909, dtype="uint32") /* ty=Tensor[(975), uint32] */;
    %127 = reshape(%124, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
    %128 = reshape(%125, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
    %129 = reshape(%126, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
    %130 = @func_316(%127, %128, %129) /* ty=(Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) */;
    %131 = %130.1;
    %132 = cast(%131, dtype="int32") /* ty=Tensor[(5, 13, 15), int32] */;
    %133 = shape_of(%var_1909, dtype="int32") /* ty=Tensor[(1), int32] */;
    %134 = cast(%var_1909, dtype="int32") /* ty=Tensor[(975), int32] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?), int32] */;
    %136 = cast(%var_1892, dtype="float32") /* ty=Tensor[(2, 7, 10), float32] */;
    %137 = sinh(%136) /* ty=Tensor[(2, 7, 10), float32] */;
    %138 = cast(%137, dtype="float64") /* ty=Tensor[(2, 7, 10), float64] */;
    %139 = cast(meta[relay.Constant][13] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %140 = reshape(%139, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
    %141 = @func_81(%140) /* ty=(Tensor[(15, 1, 9), float32],) */;
    %142 = minimum(%121, %122) /* ty=Tensor[(2, 7, 10), uint64] */;
    %143 = rsqrt(%123) /* ty=Tensor[(2, 7, 10), float32] */;
    %144 = minimum(%134, %135) /* ty=Tensor[(975), int32] */;
    %145 = sin(%138) /* ty=Tensor[(2, 7, 10), float64] */;
    %146 = %141.0;
    (%142, %143, %144, %145, %146, meta[relay.Constant][13] /* ty=Tensor[(135), float32] */)
  };
  %147(%var_1976, %var_1977, %var_1978) /* ty=(Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */
}

def @func_4883(%var_4878: Tensor[(11, 14, 6), int8], %var_4879: Tensor[(11, 14, 6), int8]) -> (Tensor[(11, 14, 6), bool],) {
  %148 = cast(%var_4879, dtype="bool") /* ty=Tensor[(11, 14, 6), bool] */;
  %149 = shape_of(%var_4878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_4878, dtype="bool") /* ty=Tensor[(11, 14, 6), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = equal(%150, %151) /* ty=Tensor[(11, 14, 6), bool] */;
  (%152,)
}

def @func_1688(%var_1684: Tensor[(4, 6, 9), int16], %var_1685: Tensor[(975), uint32], %var_1686: Tensor[(56), float32], %var_1687: Tensor[(78), float64]) -> (Tensor[(4, 6, 9), int16], Tensor[(4, 6, 9), uint8], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(13, 3, 2), float32]) {
  @func_1682(%var_1684, %var_1685, %var_1686, %var_1687) /* ty=(Tensor[(4, 6, 9), int16], Tensor[(4, 6, 9), uint8], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(13, 3, 2), float32]) */
}

def @func_4887(%var_4885: Tensor[(11, 14, 6), int8], %var_4886: Tensor[(11, 14, 6), int8]) -> (Tensor[(11, 14, 6), bool],) {
  @func_4883(%var_4885, %var_4886) /* ty=(Tensor[(11, 14, 6), bool],) */
}

def @func_6806() -> (Tensor[(7, 9), float64],) {
  @func_6804() /* ty=(Tensor[(7, 9), float64],) */
}

def @func_7046(%var_7045: Tensor[(91, 4), float64]) -> (Tensor[(7, 15, 13), int8], Tensor[(91, 4), float64], Tensor[(2, 13, 14), float64]) {
  %161 = fn (%var_6973: Tensor[(91, 4), float64]) -> (Tensor[(7, 15, 13), int8], Tensor[(91, 4), float64], Tensor[(2, 13, 14), float64]) {
    %153 = @func_6942() /* ty=(Tensor[(154, 6), int8], Tensor[(7, 15, 13), int64], Tensor[(7, 15, 13), int8]) */;
    %154 = cast(%var_6973, dtype="float64") /* ty=Tensor[(91, 4), float64] */;
    %155 = reshape(%154, newshape=[2, 13, 14]) /* ty=Tensor[(2, 13, 14), float64] */;
    %156 = @func_6512(%155) /* ty=(Tensor[(2, 13, 14), bool],) */;
    %157 = %156.0;
    %158 = cast(%157, dtype="float64") /* ty=Tensor[(2, 13, 14), float64] */;
    %159 = %153.2;
    %160 = cosh(%158) /* ty=Tensor[(2, 13, 14), float64] */;
    (%159, %var_6973, %160)
  };
  %161(%var_7045) /* ty=(Tensor[(7, 15, 13), int8], Tensor[(91, 4), float64], Tensor[(2, 13, 14), float64]) */
}

def @func_4499(%var_4437: Tensor[(9, 8, 16), float64], %var_4448: uint8, %var_4466: Tensor[(264), float64], %var_4475: Tensor[(12, 15, 6), uint8], %var_4494: Tensor[(350), bool]) -> (Tensor[(3, 4, 13), uint16], Tensor[(156), uint16], uint8, Tensor[(72), uint8], Tensor[(9, 8, 16), bool], Tensor[(11, 6, 4), float64], Tensor[(264), float64], Tensor[(15, 1, 7), float32], Tensor[(12, 15, 6), bool], Tensor[(5, 10, 7), float32], Tensor[(350), bool]) {
  %162 = cast(meta[relay.Constant][14] /* ty=Tensor[(156), uint16] */, dtype="uint16") /* ty=Tensor[(156), uint16] */;
  %163 = reshape(%162, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint16] */;
  %164 = @func_2129(%163) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %165 = cast(%var_4437, dtype="float64") /* ty=Tensor[(9, 8, 16), float64] */;
  %166 = rsqrt(%165) /* ty=Tensor[(9, 8, 16), float64] */;
  %167 = cast(%var_4437, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="bool") /* ty=Tensor[(9, 8, 16), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = cast(%var_4448, dtype="float64") /* ty=float64 */;
  %172 = cast(%var_4466, dtype="float64") /* ty=Tensor[(264), float64] */;
  %173 = reshape(%171, newshape=[]) /* ty=float64 */;
  %174 = reshape(%172, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), float64] */;
  %175 = cast(meta[relay.Constant][14] /* ty=Tensor[(156), uint16] */, dtype="uint16") /* ty=Tensor[(156), uint16] */;
  %176 = reshape(%175, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint16] */;
  %177 = @func_2129(%176) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %178 = cast(%var_4448, dtype="uint8") /* ty=uint8 */;
  %179 = cast(meta[relay.Constant][15] /* ty=Tensor[(72), uint8] */, dtype="uint8") /* ty=Tensor[(72), uint8] */;
  %180 = reshape(%178, newshape=[]) /* ty=uint8 */;
  %181 = reshape(%179, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), uint8] */;
  %182 = @func_2447(%180, %181) /* ty=(Tensor[(12, 1, 6), uint8],) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="bool") /* ty=Tensor[(12, 1, 6), bool] */;
  %185 = cast(%var_4475, dtype="bool") /* ty=Tensor[(12, 15, 6), bool] */;
  %186 = cast(%var_4494, dtype="bool") /* ty=Tensor[(350), bool] */;
  %187 = reshape(%186, newshape=[5, 10, 7]) /* ty=Tensor[(5, 10, 7), bool] */;
  %188 = @func_1152(%187) /* ty=(Tensor[(5, 10, 7), float32],) */;
  %189 = %164.0;
  %190 = logical_and(%169, %170) /* ty=Tensor[(9, 8, 16), bool] */;
  %191 = @func_2860(%173, %174) /* ty=Tensor[(11, 6, 4), float64] */;
  %192 = %177.1;
  %193 = less(%184, %185) /* ty=Tensor[(12, 15, 6), bool] */;
  %194 = %188.0;
  (%189, meta[relay.Constant][14] /* ty=Tensor[(156), uint16] */, %var_4448, meta[relay.Constant][15] /* ty=Tensor[(72), uint8] */, %190, %191, %var_4466, %192, %193, %194, %var_4494)
}

def @func_2092(%var_2090: float32, %var_2091: Tensor[(1, 14, 7), float32]) -> (Tensor[(1, 14, 7), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %202 = fn (%var_2076: float32, %var_2077: Tensor[(1, 14, 7), float32]) -> (Tensor[(1, 14, 7), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
    %195 = cast(%var_2076, dtype="float32") /* ty=float32 */;
    %196 = cast(%var_2077, dtype="float32") /* ty=Tensor[(1, 14, 7), float32] */;
    %197 = cast(meta[relay.Constant][16] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %198 = reshape(%197, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
    %199 = @func_81(%198) /* ty=(Tensor[(15, 1, 9), float32],) */;
    %200 = power(%195, %196) /* ty=Tensor[(1, 14, 7), float32] */;
    %201 = %199.0;
    (%200, %201, meta[relay.Constant][16] /* ty=Tensor[(135), float32] */)
  };
  %202(%var_2090, %var_2091) /* ty=(Tensor[(1, 14, 7), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */
}

def @func_5343() -> (Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) {
  %203 = @func_5136() /* ty=Tensor[(2, 13, 14), float32] */;
  %204 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  (%203, %204)
}

def @func_5973(%var_5957: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32], Tensor[(2160), float64]) {
  %205 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
  %206 = cast(meta[relay.Constant][17] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %207 = cast(%var_5957, dtype="float32") /* ty=Tensor[(135), float32] */;
  %208 = reshape(%206, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
  %209 = reshape(%207, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %210 = @func_235(%208, %209) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
  %211 = cast(meta[relay.Constant][17] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %212 = cosh(%211) /* ty=Tensor[(2160), float32] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %214 = %205.0;
  %215 = %210.3;
  %216 = asin(%213) /* ty=Tensor[(2160), float64] */;
  (%214, %215, %var_5957, %216)
}

def @func_6084() -> (Tensor[(7, 9), float64], Tensor[(11, 14, 6), bool], Tensor[(154, 6), int8]) {
  %224 = fn () -> (Tensor[(7, 9), float64], Tensor[(11, 14, 6), bool], Tensor[(154, 6), int8]) {
    %217 = cast(meta[relay.Constant][18] /* ty=Tensor[(154, 6), int8] */, dtype="int8") /* ty=Tensor[(154, 6), int8] */;
    %218 = cast(meta[relay.Constant][18] /* ty=Tensor[(154, 6), int8] */, dtype="int8") /* ty=Tensor[(154, 6), int8] */;
    %219 = reshape(%217, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
    %220 = reshape(%218, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
    %221 = @func_4883(%219, %220) /* ty=(Tensor[(11, 14, 6), bool],) */;
    %222 = @func_5448() /* ty=Tensor[(7, 9), float64] */;
    %223 = %221.0;
    (%222, %223, meta[relay.Constant][18] /* ty=Tensor[(154, 6), int8] */)
  };
  %224() /* ty=(Tensor[(7, 9), float64], Tensor[(11, 14, 6), bool], Tensor[(154, 6), int8]) */
}

def @func_6578(%var_6576: Tensor[(4, 1, 3), float64]) -> (Tensor[(4, 1, 3), float64],) {
  @func_6575(%var_6576) /* ty=(Tensor[(4, 1, 3), float64],) */
}

def @func_5239(%var_5237: Tensor[(2, 13, 14), float32]) -> (Tensor[(2, 13, 14), int32], Tensor[(2, 13, 14), uint64]) {
  @func_5236(%var_5237) /* ty=(Tensor[(2, 13, 14), int32], Tensor[(2, 13, 14), uint64]) */
}

def @func_3261(%var_3255: Tensor[(8, 14, 13), uint16], %var_3256: Tensor[(8, 14, 13), uint16], %var_3257: Tensor[(78), float64], %var_3258: Tensor[(1568), float64], %var_3259: Tensor[(30), uint32], %var_3260: Tensor[(1568), float64]) -> (Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32], Tensor[(15, 1, 7), float64], uint8, Tensor[(30), uint32], Tensor[(13, 3, 2), float64], Tensor[(1568), uint32], Tensor[(8, 14, 13), float64]) {
  @func_3253(%var_3255, %var_3256, %var_3257, %var_3258, %var_3259, %var_3260) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32], Tensor[(15, 1, 7), float64], uint8, Tensor[(30), uint32], Tensor[(13, 3, 2), float64], Tensor[(1568), uint32], Tensor[(8, 14, 13), float64]) */
}

def @func_5687() -> Tensor[(7, 9), float64] {
  %226 = fn () -> Tensor[(7, 9), float64] {
    %225 = @func_5430() /* ty=(Tensor[(7, 9), float64],) */;
    %225.0
  };
  %226() /* ty=Tensor[(7, 9), float64] */
}

def @func_2132(%var_2130: Tensor[(3, 4, 13), uint16]) -> (Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  @func_2129(%var_2130) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */
}

def @func_4983() -> Tensor[(2, 13, 14), float64] {
  @func_4981() /* ty=Tensor[(2, 13, 14), float64] */
}

def @func_5817() -> Tensor[(2, 13, 14), float64] {
  %228 = fn () -> Tensor[(2, 13, 14), float64] {
    %227 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
    %227.1
  };
  %228() /* ty=Tensor[(2, 13, 14), float64] */
}

def @func_238(%var_236: Tensor[(15, 9, 16), float32], %var_237: Tensor[(15, 9), float32]) -> (Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) {
  %243 = fn (%var_169: Tensor[(15, 9, 16), float32], %var_181: Tensor[(15, 9), float32]) -> (Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) {
    %229 = cast(%var_169, dtype="float32") /* ty=Tensor[(15, 9, 16), float32] */;
    %230 = cast(%var_181, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
    %231 = reshape(%230, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
    %232 = @func_81(%231) /* ty=(Tensor[(15, 1, 9), float32],) */;
    %233 = %232.0;
    %234 = cast(%233, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
    %235 = reshape(%234, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
    %236 = @func_81(%235) /* ty=(Tensor[(15, 1, 9), float32],) */;
    %237 = cast(%233, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
    %238 = reshape(%237, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
    %239 = @func_81(%238) /* ty=(Tensor[(15, 1, 9), float32],) */;
    %240 = cosh(%229) /* ty=Tensor[(15, 9, 16), float32] */;
    %241 = %236.0;
    %242 = %239.0;
    (%240, %233, %var_181, %241, %242)
  };
  %243(%var_236, %var_237) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */
}

def @func_5808() -> Tensor[(2, 13, 14), float32] {
  %244 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
  %244.0
}

def @func_4709(%var_4707: Tensor[(6, 14, 8), int16], %var_4708: Tensor[(264), float64]) -> (Tensor[(6, 14, 8), bool], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) {
  %253 = fn (%var_4673: Tensor[(6, 14, 8), int16], %var_4698: Tensor[(264), float64]) -> (Tensor[(6, 14, 8), bool], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) {
    %245 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 1, 8), int16] */, dtype="bool") /* ty=Tensor[(6, 1, 8), bool] */;
    %246 = cast(%var_4673, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
    %247 = cast(-5.02872f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %248 = cast(%var_4698, dtype="float64") /* ty=Tensor[(264), float64] */;
    %249 = reshape(%247, newshape=[]) /* ty=float64 */;
    %250 = reshape(%248, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), float64] */;
    %251 = not_equal(%245, %246) /* ty=Tensor[(6, 14, 8), bool] */;
    %252 = @func_2860(%249, %250) /* ty=Tensor[(11, 6, 4), float64] */;
    (%251, %252, -5.02872f64 /* ty=float64 */, %var_4698)
  };
  %253(%var_4707, %var_4708) /* ty=(Tensor[(6, 14, 8), bool], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) */
}

def @func_5857() -> Tensor[(7, 15, 14), float32] {
  %254 = fn () -> Tensor[(7, 15, 14), float32] {
    @func_5832() /* ty=Tensor[(7, 15, 14), float32] */
  };
  %254() /* ty=Tensor[(7, 15, 14), float32] */
}

def @func_5772(%var_5736: Tensor[(198), bool]) -> (Tensor[(7, 9), float64], Tensor[(11, 3, 6), bool], Tensor[(198), bool]) {
  %255 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
  %256 = cast(%var_5736, dtype="bool") /* ty=Tensor[(198), bool] */;
  %257 = cast(%var_5736, dtype="bool") /* ty=Tensor[(198), bool] */;
  %258 = reshape(%256, newshape=[11, 3, 6]) /* ty=Tensor[(11, 3, 6), bool] */;
  %259 = reshape(%257, newshape=[11, 3, 6]) /* ty=Tensor[(11, 3, 6), bool] */;
  %260 = %255.0;
  %261 = @func_4383(%258, %259) /* ty=Tensor[(11, 3, 6), bool] */;
  (%260, %261, %var_5736)
}

def @func_5079(%var_5039: Tensor[(6, 44), float64], %var_5055: Tensor[(1568), float64], %var_5058: Tensor[(78), float64], %var_5059: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float64], Tensor[(14, 16, 15), float32], Tensor[(6, 44), float64], Tensor[(30), uint32], Tensor[(1568), float64], uint8, Tensor[(10, 3), uint32], Tensor[(78), float64], Tensor[(135), float32]) {
  %262 = cast(%var_5039, dtype="float64") /* ty=Tensor[(6, 44), float64] */;
  %263 = reshape(%262, newshape=[264]) /* ty=Tensor[(264), float64] */;
  %264 = @func_3156(%263) /* ty=(Tensor[(14, 16, 15), float32], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) */;
  %265 = cast(%var_5055, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %266 = cast(meta[relay.Constant][20] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %267 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 3), uint32] */, dtype="uint32") /* ty=Tensor[(10, 3), uint32] */;
  %268 = cast(%var_5058, dtype="float64") /* ty=Tensor[(78), float64] */;
  %269 = cast(%var_5059, dtype="float32") /* ty=Tensor[(135), float32] */;
  %270 = reshape(%265, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), float64] */;
  %271 = reshape(%266, newshape=[]) /* ty=uint8 */;
  %272 = reshape(%267, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %273 = reshape(%268, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %274 = reshape(%269, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %275 = @func_3044(%270, %271, %272, %273, %274) /* ty=(Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %276 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %277 = %264.0;
  %278 = %275.7;
  (%276, %277, %var_5039, %278, %var_5055, meta[relay.Constant][20] /* ty=uint8 */, meta[relay.Constant][21] /* ty=Tensor[(10, 3), uint32] */, %var_5058, %var_5059)
}

def @func_5655(%var_5653: Tensor[(324), uint32], %var_5654: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float64], Tensor[(9, 12, 3), uint32], Tensor[(324), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  @func_5651(%var_5653, %var_5654) /* ty=(Tensor[(2, 13, 14), float64], Tensor[(9, 12, 3), uint32], Tensor[(324), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */
}

def @func_2450(%var_2448: uint8, %var_2449: Tensor[(12, 1, 6), uint8]) -> (Tensor[(12, 1, 6), uint8],) {
  %282 = fn (%var_2442: uint8, %var_2443: Tensor[(12, 1, 6), uint8]) -> (Tensor[(12, 1, 6), uint8],) {
    %279 = cast(%var_2442, dtype="uint8") /* ty=uint8 */;
    %280 = cast(%var_2443, dtype="uint8") /* ty=Tensor[(12, 1, 6), uint8] */;
    %281 = bitwise_or(%279, %280) /* ty=Tensor[(12, 1, 6), uint8] */;
    (%281,)
  };
  %282(%var_2448, %var_2449) /* ty=(Tensor[(12, 1, 6), uint8],) */
}

def @func_3044(%var_2965: Tensor[(14, 16, 7), float64], %var_2999: uint8, %var_3016: Tensor[(30), uint32], %var_3017: Tensor[(78), float64], %var_3024: Tensor[(135), float32]) -> (Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %283 = cast(%var_2965, dtype="float64") /* ty=Tensor[(14, 16, 7), float64] */;
  %284 = sin(%283) /* ty=Tensor[(14, 16, 7), float64] */;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(14, 16, 7), float64] */;
  %286 = cast(meta[relay.Constant][22] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %287 = reshape(%286, newshape=[975]) /* ty=Tensor[(975), uint32] */;
  %288 = @func_685(%287) /* ty=(Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) */;
  %289 = cast(%var_2999, dtype="uint8") /* ty=uint8 */;
  %290 = cast(meta[relay.Constant][23] /* ty=Tensor[(72), uint8] */, dtype="uint8") /* ty=Tensor[(72), uint8] */;
  %291 = reshape(%289, newshape=[]) /* ty=uint8 */;
  %292 = reshape(%290, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), uint8] */;
  %293 = @func_2447(%291, %292) /* ty=(Tensor[(12, 1, 6), uint8],) */;
  %294 = cast(%var_3016, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %295 = cast(%var_3017, dtype="float64") /* ty=Tensor[(78), float64] */;
  %296 = reshape(%294, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
  %297 = reshape(%295, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %298 = @func_1022(%296, %297) /* ty=(Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) */;
  %299 = cast(%var_3024, dtype="float32") /* ty=Tensor[(135), float32] */;
  %300 = reshape(%299, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %301 = @func_81(%300) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %302 = acos(%285) /* ty=Tensor[(14, 16, 7), float64] */;
  %303 = %288.0;
  %304 = %293.0;
  %305 = %298.1;
  %306 = %301.0;
  (%302, %303, meta[relay.Constant][22] /* ty=Tensor[(975), uint32] */, %304, %var_2999, meta[relay.Constant][23] /* ty=Tensor[(72), uint8] */, %305, %var_3016, %var_3017, %306, %var_3024)
}

def @func_1706(%var_1704: Tensor[(5, 11, 8), float32], %var_1705: Tensor[(5, 11, 8), float32]) -> (Tensor[(5, 11, 8), bool],) {
  %312 = fn (%var_1695: Tensor[(5, 11, 8), float32], %var_1696: Tensor[(5, 11, 8), float32]) -> (Tensor[(5, 11, 8), bool],) {
    %307 = cast(%var_1696, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %308 = shape_of(%var_1695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%var_1695, dtype="bool") /* ty=Tensor[(5, 11, 8), bool] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %311 = less_equal(%309, %310) /* ty=Tensor[(5, 11, 8), bool] */;
    (%311,)
  };
  %312(%var_1704, %var_1705) /* ty=(Tensor[(5, 11, 8), bool],) */
}

def @func_5138() -> Tensor[(2, 13, 14), float32] {
  @func_5136() /* ty=Tensor[(2, 13, 14), float32] */
}

def @func_3788(%var_3767: Tensor[(16, 15, 2), float32]) -> (Tensor[(16, 15, 2), float32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8]) {
  %313 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %314 = shape_of(%var_3767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_3767, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %317 = cast(meta[relay.Constant][25] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %318 = cast(meta[relay.Constant][26] /* ty=Tensor[(72), uint8] */, dtype="uint8") /* ty=Tensor[(72), uint8] */;
  %319 = reshape(%317, newshape=[]) /* ty=uint8 */;
  %320 = reshape(%318, newshape=[12, 1, 6]) /* ty=Tensor[(12, 1, 6), uint8] */;
  %321 = @func_2447(%319, %320) /* ty=(Tensor[(12, 1, 6), uint8],) */;
  %322 = floor_divide(%315, %316) /* ty=Tensor[(16, 15, 2), float32] */;
  %323 = %321.0;
  (%322, %323, meta[relay.Constant][25] /* ty=uint8 */, meta[relay.Constant][26] /* ty=Tensor[(72), uint8] */)
}

def @func_1022(%var_1004: Tensor[(3, 5, 2), uint32], %var_1010: Tensor[(78), float64]) -> (Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) {
  %324 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 5, 2), uint32] */, dtype="uint32") /* ty=Tensor[(3, 5, 2), uint32] */;
  %325 = shape_of(%var_1004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_1004, dtype="uint32") /* ty=Tensor[(3, 5, 2), uint32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %328 = cast(%var_1010, dtype="float64") /* ty=Tensor[(78), float64] */;
  %329 = cast(%var_1010, dtype="float64") /* ty=Tensor[(78), float64] */;
  %330 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 135), float32] */, dtype="float32") /* ty=Tensor[(1, 135), float32] */;
  %331 = reshape(%328, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %332 = reshape(%329, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %333 = reshape(%330, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %334 = @func_777(%331, %332, %333) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %335 = %334.1;
  %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 135), float32] */, dtype="bool") /* ty=Tensor[(1, 135), bool] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = add(%326, %327) /* ty=Tensor[(3, 5, 2), uint32] */;
  %341 = equal(%338, %339) /* ty=Tensor[(15, ?, 9), bool] */;
  (%340, %var_1010, %341)
}

def @func_5651(%var_5606: Tensor[(324), uint32], %var_5628: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float64], Tensor[(9, 12, 3), uint32], Tensor[(324), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  %342 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(2, 13, 14), float64] */;
  %344 = cast(%var_5606, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %345 = cast(%var_5606, dtype="uint32") /* ty=Tensor[(324), uint32] */;
  %346 = reshape(%344, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %347 = reshape(%345, newshape=[9, 12, 3]) /* ty=Tensor[(9, 12, 3), uint32] */;
  %348 = @func_2400(%346, %347) /* ty=(Tensor[(9, 12, 3), bool], Tensor[(9, 12, 3), uint32]) */;
  %349 = cast(%var_5628, dtype="float32") /* ty=Tensor[(135), float32] */;
  %350 = reshape(%349, newshape=[15, 1, 9]) /* ty=Tensor[(15, 1, 9), float32] */;
  %351 = @func_81(%350) /* ty=(Tensor[(15, 1, 9), float32],) */;
  %352 = asin(%343) /* ty=Tensor[(2, 13, 14), float64] */;
  %353 = %348.1;
  %354 = %351.0;
  (%352, %353, %var_5606, %354, %var_5628)
}

def @func_3791(%var_3789: Tensor[(16, 15, 2), float32]) -> (Tensor[(16, 15, 2), float32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8]) {
  @func_3788(%var_3789) /* ty=(Tensor[(16, 15, 2), float32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8]) */
}

def @func_1525(%var_1523: Tensor[(14, 4, 1), float32], %var_1524: Tensor[(78), float64]) -> (Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) {
  @func_1521(%var_1523, %var_1524) /* ty=(Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) */
}

def @func_4386(%var_4384: Tensor[(11, 3, 6), bool], %var_4385: Tensor[(11, 3, 6), bool]) -> Tensor[(11, 3, 6), bool] {
  %359 = fn (%var_4372: Tensor[(11, 3, 6), bool], %var_4373: Tensor[(11, 3, 6), bool]) -> Tensor[(11, 3, 6), bool] {
    %355 = cast(%var_4373, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
    %356 = shape_of(%var_4372, dtype="int32") /* ty=Tensor[(3), int32] */;
    %357 = cast(%var_4372, dtype="bool") /* ty=Tensor[(11, 3, 6), bool] */;
    %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%357, %358) /* ty=Tensor[(11, 3, 6), bool] */
  };
  %359(%var_4384, %var_4385) /* ty=Tensor[(11, 3, 6), bool] */
}

def @func_3857(%var_3856: Tensor[(1, 9, 1), float64]) -> Tensor[(2, 9, 5), uint32] {
  %364 = fn (%var_3818: Tensor[(1, 9, 1), float64]) -> Tensor[(2, 9, 5), uint32] {
    %360 = cast(%var_3818, dtype="float64") /* ty=Tensor[(1, 9, 1), float64] */;
    %361 = rsqrt(%360) /* ty=Tensor[(1, 9, 1), float64] */;
    %362 = cast(%361, dtype="uint32") /* ty=Tensor[(1, 9, 1), uint32] */;
    %363 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 9, 5), float64] */, dtype="uint32") /* ty=Tensor[(2, 9, 5), uint32] */;
    logical_xor(%362, %363) /* ty=Tensor[(2, 9, 5), uint32] */
  };
  %364(%var_3856) /* ty=Tensor[(2, 9, 5), uint32] */
}

def @func_5115() -> (Tensor[(7, 9), float64],) {
  %365 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 9), float64] */, dtype="float64") /* ty=Tensor[(7, 9), float64] */;
  %366 = acos(%365) /* ty=Tensor[(7, 9), float64] */;
  (%366,)
}

def @func_4536(%var_4535: Tensor[(1, 8, 13), int16]) -> (Tensor[(2, 8, 13), bool],) {
  %378 = fn (%var_4512: Tensor[(1, 8, 13), int16]) -> (Tensor[(2, 8, 13), bool],) {
    %367 = cast(%var_4512, dtype="bool") /* ty=Tensor[(1, 8, 13), bool] */;
    %368 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 8, 13), int16] */, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
    %369 = less(%367, %368) /* ty=Tensor[(2, 8, 13), bool] */;
    %370 = cast(%369, dtype="uint16") /* ty=Tensor[(2, 8, 13), uint16] */;
    %371 = cast(%var_4512, dtype="uint16") /* ty=Tensor[(1, 8, 13), uint16] */;
    %372 = multiply(%370, %371) /* ty=Tensor[(2, 8, 13), uint16] */;
    %373 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 8, 13), int16] */, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
    %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%372, dtype="bool") /* ty=Tensor[(2, 8, 13), bool] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %377 = not_equal(%375, %376) /* ty=Tensor[(2, 8, 13), bool] */;
    (%377,)
  };
  %378(%var_4535) /* ty=(Tensor[(2, 8, 13), bool],) */
}

def @func_6013() -> (Tensor[(7, 9), float64],) {
  %379 = @func_5686() /* ty=Tensor[(7, 9), float64] */;
  (%379,)
}

def @func_5793() -> Tensor[(7, 9), float64] {
  %380 = fn () -> Tensor[(7, 9), float64] {
    @func_5448() /* ty=Tensor[(7, 9), float64] */
  };
  %380() /* ty=Tensor[(7, 9), float64] */
}

def @func_6477(%var_6475: Tensor[(8, 16, 2), float64]) -> (Tensor[(8, 16, 2), float64],) {
  @func_6474(%var_6475) /* ty=(Tensor[(8, 16, 2), float64],) */
}

def @main(%var_7068: Tensor[(1568), float64], %var_7088: Tensor[(30), uint32], %var_7092: Tensor[(66, 1), float32]) -> (Tensor[(7, 9), float64], Tensor[(5, 10, 7), float32], Tensor[(1568), float64], Tensor[(3, 5, 2), uint32], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(66, ?), uint8]) {
  %381 = cast(meta[relay.Constant][32] /* ty=Tensor[(66, 1), float32] */, dtype="float32") /* ty=Tensor[(66, 1), float32] */;
  %382 = cast(%var_7068, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %383 = reshape(%381, newshape=[2, 11, 3]) /* ty=Tensor[(2, 11, 3), float32] */;
  %384 = reshape(%382, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %385 = @func_5328(%383, %384) /* ty=(Tensor[(2, 11, 3), uint64], Tensor[(5, 10, 7), float32], Tensor[(350, 1), bool], Tensor[(2, 11, 3), float32], Tensor[(2, 11, 3), float64], Tensor[(2, 11, 3), bool], Tensor[(78), float64], Tensor[(56, 26), uint16], Tensor[(78), float64], Tensor[(1568), float64], Tensor[(30), uint32], Tensor[(2, 7, 10), float64], Tensor[(140), uint64], Tensor[(975), uint32]) */;
  %386 = cast(%var_7088, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %387 = cast(meta[relay.Constant][33] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %388 = reshape(%386, newshape=[3, 5, 2]) /* ty=Tensor[(3, 5, 2), uint32] */;
  %389 = reshape(%387, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %390 = @func_1026(%388, %389) /* ty=(Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) */;
  %391 = cast(%var_7092, dtype="uint8") /* ty=Tensor[(66, 1), uint8] */;
  %392 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(66, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %393 = cast(meta[relay.Constant][32] /* ty=Tensor[(66, 1), float32] */, dtype="uint8") /* ty=Tensor[(66, 1), uint8] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %395 = @func_5448() /* ty=Tensor[(7, 9), float64] */;
  %396 = %385.1;
  %397 = %390.0;
  %398 = bitwise_or(%393, %394) /* ty=Tensor[(66, ?), uint8] */;
  (%395, %396, %var_7068, %397, %var_7088, meta[relay.Constant][33] /* ty=Tensor[(78), float64] */, %398)
}

def @func_6943() -> (Tensor[(154, 6), int8], Tensor[(7, 15, 13), int64], Tensor[(7, 15, 13), int8]) {
  %425 = fn () -> (Tensor[(154, 6), int8], Tensor[(7, 15, 13), int64], Tensor[(7, 15, 13), int8]) {
    %399 = @func_6083() /* ty=(Tensor[(7, 9), float64], Tensor[(11, 14, 6), bool], Tensor[(154, 6), int8]) */;
    %400 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
    %401 = sigmoid(%400) /* ty=Tensor[(7, 15, 13), float32] */;
    %402 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%401, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %406 = equal(%404, %405) /* ty=Tensor[(7, 15, 13), bool] */;
    %407 = cast(%406, dtype="float32") /* ty=Tensor[(7, 15, 13), float32] */;
    %408 = sqrt(%407) /* ty=Tensor[(7, 15, 13), float32] */;
    %409 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
    %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %411 = cast(%408, dtype="bool") /* ty=Tensor[(7, 15, 13), bool] */;
    %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %413 = not_equal(%411, %412) /* ty=Tensor[(7, 15, 13), bool] */;
    %414 = cast(%406, dtype="int64") /* ty=Tensor[(7, 15, 13), int64] */;
    %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%413, dtype="int64") /* ty=Tensor[(7, 15, 13), int64] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %418 = cast(%413, dtype="int8") /* ty=Tensor[(7, 15, 13), int8] */;
    %419 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%408, dtype="int8") /* ty=Tensor[(7, 15, 13), int8] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %422 = %399.2;
    %423 = multiply(%416, %417) /* ty=Tensor[(7, 15, 13), int64] */;
    %424 = bitwise_or(%420, %421) /* ty=Tensor[(7, 15, 13), int8] */;
    (%422, %423, %424)
  };
  %425() /* ty=(Tensor[(154, 6), int8], Tensor[(7, 15, 13), int64], Tensor[(7, 15, 13), int8]) */
}

def @func_5136() -> Tensor[(2, 13, 14), float32] {
  %426 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %427 = cast(%426, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  sqrt(%427) /* ty=Tensor[(2, 13, 14), float32] */
}

def @func_5887() -> (Tensor[(7, 9), float64],) {
  %428 = @func_5686() /* ty=Tensor[(7, 9), float64] */;
  (%428,)
}

def @func_1026(%var_1024: Tensor[(3, 5, 2), uint32], %var_1025: Tensor[(78), float64]) -> (Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) {
  @func_1022(%var_1024, %var_1025) /* ty=(Tensor[(3, 5, 2), uint32], Tensor[(78), float64], Tensor[(15, ?, 9), bool]) */
}

def @func_5976(%var_5974: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32], Tensor[(2160), float64]) {
  @func_5973(%var_5974) /* ty=(Tensor[(2, 13, 14), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32], Tensor[(2160), float64]) */
}

def @func_6550(%var_6549: Tensor[(7, 15, 14), float32]) -> Tensor[(7, 15, 14), uint16] {
  %434 = fn (%var_6530: Tensor[(7, 15, 14), float32]) -> Tensor[(7, 15, 14), uint16] {
    %429 = @func_5856() /* ty=Tensor[(7, 15, 14), float32] */;
    %430 = cast(%var_6530, dtype="uint16") /* ty=Tensor[(7, 15, 14), uint16] */;
    %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%429, dtype="uint16") /* ty=Tensor[(7, 15, 14), uint16] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%432, %433) /* ty=Tensor[(7, 15, 14), uint16] */
  };
  %434(%var_6549) /* ty=Tensor[(7, 15, 14), uint16] */
}

def @func_688(%var_686: Tensor[(975), uint32]) -> (Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) {
  @func_685(%var_686) /* ty=(Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) */
}

def @func_5810() -> Tensor[(2, 13, 14), float32] {
  @func_5808() /* ty=Tensor[(2, 13, 14), float32] */
}

def @func_5833() -> Tensor[(7, 15, 14), float32] {
  %436 = fn () -> Tensor[(7, 15, 14), float32] {
    %435 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
    acos(%435) /* ty=Tensor[(7, 15, 14), float32] */
  };
  %436() /* ty=Tensor[(7, 15, 14), float32] */
}

def @func_6327(%var_6302: float32) -> (Tensor[(7, 15, 14), float32], Tensor[(2, 13, 14), bool], Tensor[(13, 3, 2), float64], Tensor[(56), float32], Tensor[(78), float64], Tensor[(1, 98), float32], Tensor[(15, 1, 9), bool], Tensor[(15, 1, 9), float32]) {
  %437 = @func_4981() /* ty=Tensor[(2, 13, 14), float64] */;
  %438 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 13, 14), float64] */, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %442 = cast(meta[relay.Constant][38] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %443 = cast(meta[relay.Constant][39] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %444 = reshape(%442, newshape=[14, 4, 1]) /* ty=Tensor[(14, 4, 1), float32] */;
  %445 = reshape(%443, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %446 = @func_1521(%444, %445) /* ty=(Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) */;
  %447 = cast(%var_6302, dtype="float32") /* ty=float32 */;
  %448 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, dtype="float32") /* ty=Tensor[(1, 98), float32] */;
  %449 = reshape(%447, newshape=[]) /* ty=float32 */;
  %450 = reshape(%448, newshape=[1, 14, 7]) /* ty=Tensor[(1, 14, 7), float32] */;
  %451 = @func_2089(%449, %450) /* ty=(Tensor[(1, 14, 7), float32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %452 = %451.1;
  %453 = cast(%452, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %454 = cast(%var_6302, dtype="bool") /* ty=bool */;
  %455 = cast(%452, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %456 = @func_5856() /* ty=Tensor[(7, 15, 14), float32] */;
  %457 = equal(%440, %441) /* ty=Tensor[(2, 13, 14), bool] */;
  %458 = %446.3;
  %459 = greater_equal(%453, %454) /* ty=Tensor[(15, 1, 9), bool] */;
  %460 = sin(%455) /* ty=Tensor[(15, 1, 9), float32] */;
  (%456, %457, %458, meta[relay.Constant][38] /* ty=Tensor[(56), float32] */, meta[relay.Constant][39] /* ty=Tensor[(78), float64] */, meta[relay.Constant][40] /* ty=Tensor[(1, 98), float32] */, %459, %460)
}

def @func_81(%var_76: Tensor[(15, 1, 9), float32]) -> (Tensor[(15, 1, 9), float32],) {
  %461 = cast(%var_76, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %462 = erf(%461) /* ty=Tensor[(15, 1, 9), float32] */;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(15, 1, 9), float32] */;
  %464 = log2(%463) /* ty=Tensor[(15, 1, 9), float32] */;
  (%464,)
}

def @func_4151(%var_4125: Tensor[(10, 1, 2), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(10, ?, 2), int8], Tensor[(2, 11, 13), float32], Tensor[(286), float32]) {
  %465 = cast(%var_4125, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %466 = cos(%465) /* ty=Tensor[(10, 1, 2), float32] */;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %468 = cast(%var_4125, dtype="int8") /* ty=Tensor[(10, 1, 2), int8] */;
  %469 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%466, dtype="int8") /* ty=Tensor[(10, 1, 2), int8] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %472 = cast(meta[relay.Constant][41] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
  %473 = reshape(%472, newshape=[2, 11, 13]) /* ty=Tensor[(2, 11, 13), float32] */;
  %474 = @func_3080(%473) /* ty=(Tensor[(2, 11, 13), float32],) */;
  %475 = asinh(%467) /* ty=Tensor[(10, 1, 2), float64] */;
  %476 = subtract(%470, %471) /* ty=Tensor[(10, ?, 2), int8] */;
  %477 = %474.0;
  (%475, %476, %477, meta[relay.Constant][41] /* ty=Tensor[(286), float32] */)
}

def @func_2863(%var_2861: float64, %var_2862: Tensor[(11, 6, 4), float64]) -> Tensor[(11, 6, 4), float64] {
  %482 = fn (%var_2843: float64, %var_2844: Tensor[(11, 6, 4), float64]) -> Tensor[(11, 6, 4), float64] {
    %478 = cast(%var_2843, dtype="float64") /* ty=float64 */;
    %479 = cast(%var_2844, dtype="float64") /* ty=Tensor[(11, 6, 4), float64] */;
    %480 = power(%478, %479) /* ty=Tensor[(11, 6, 4), float64] */;
    %481 = cast(%480, dtype="float64") /* ty=Tensor[(11, 6, 4), float64] */;
    tan(%481) /* ty=Tensor[(11, 6, 4), float64] */
  };
  %482(%var_2861, %var_2862) /* ty=Tensor[(11, 6, 4), float64] */
}

def @func_6258(%var_6256: Tensor[(2, 13, 14), float32]) -> (Tensor[(2, 13, 14), int64],) {
  @func_6255(%var_6256) /* ty=(Tensor[(2, 13, 14), int64],) */
}

def @func_4285(%var_4282: Tensor[(4, 16, 9), float32], %var_4283: Tensor[(56), float32], %var_4284: Tensor[(2160), float32]) -> (Tensor[(4, 16, 9), float32], Tensor[(56), float32], Tensor[(216), int16], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(26, 3), float64], Tensor[(2, 7, 10), uint64], Tensor[(1, 140), uint64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32]) {
  %509 = fn (%var_4248: Tensor[(4, 16, 9), float32], %var_4254: Tensor[(56), float32], %var_4272: Tensor[(2160), float32]) -> (Tensor[(4, 16, 9), float32], Tensor[(56), float32], Tensor[(216), int16], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(26, 3), float64], Tensor[(2, 7, 10), uint64], Tensor[(1, 140), uint64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32]) {
    %483 = cast(%var_4248, dtype="float32") /* ty=Tensor[(4, 16, 9), float32] */;
    %484 = cast(meta[relay.Constant][42] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
    %485 = cast(meta[relay.Constant][43] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
    %486 = cast(%var_4254, dtype="float32") /* ty=Tensor[(56), float32] */;
    %487 = cast(meta[relay.Constant][44] /* ty=Tensor[(26, 3), float64] */, dtype="float64") /* ty=Tensor[(26, 3), float64] */;
    %488 = reshape(%484, newshape=[4, 6, 9]) /* ty=Tensor[(4, 6, 9), int16] */;
    %489 = reshape(%485, newshape=[975]) /* ty=Tensor[(975), uint32] */;
    %490 = reshape(%486, newshape=[56]) /* ty=Tensor[(56), float32] */;
    %491 = reshape(%487, newshape=[78]) /* ty=Tensor[(78), float64] */;
    %492 = @func_1682(%488, %489, %490, %491) /* ty=(Tensor[(4, 6, 9), int16], Tensor[(4, 6, 9), uint8], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(13, 3, 2), float32]) */;
    %493 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 140), uint64] */, dtype="uint64") /* ty=Tensor[(1, 140), uint64] */;
    %494 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 140), uint64] */, dtype="uint64") /* ty=Tensor[(1, 140), uint64] */;
    %495 = cast(meta[relay.Constant][43] /* ty=Tensor[(975), uint32] */, dtype="uint32") /* ty=Tensor[(975), uint32] */;
    %496 = reshape(%493, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
    %497 = reshape(%494, newshape=[2, 7, 10]) /* ty=Tensor[(2, 7, 10), uint64] */;
    %498 = reshape(%495, newshape=[975]) /* ty=Tensor[(975), uint32] */;
    %499 = @func_1975(%496, %497, %498) /* ty=(Tensor[(2, 7, 10), uint64], Tensor[(2, 7, 10), float32], Tensor[(975), int32], Tensor[(2, 7, 10), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
    %500 = cast(%var_4272, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %501 = cast(meta[relay.Constant][46] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %502 = reshape(%500, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %503 = reshape(%501, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
    %504 = @func_235(%502, %503) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
    %505 = sqrt(%483) /* ty=Tensor[(4, 16, 9), float32] */;
    %506 = %492.4;
    %507 = %499.0;
    %508 = %504.2;
    (%505, %506, meta[relay.Constant][42] /* ty=Tensor[(216), int16] */, meta[relay.Constant][43] /* ty=Tensor[(975), uint32] */, %var_4254, meta[relay.Constant][44] /* ty=Tensor[(26, 3), float64] */, %507, meta[relay.Constant][45] /* ty=Tensor[(1, 140), uint64] */, %508, %var_4272, meta[relay.Constant][46] /* ty=Tensor[(135), float32] */)
  };
  %509(%var_4282, %var_4283, %var_4284) /* ty=(Tensor[(4, 16, 9), float32], Tensor[(56), float32], Tensor[(216), int16], Tensor[(975), uint32], Tensor[(56), float32], Tensor[(26, 3), float64], Tensor[(2, 7, 10), uint64], Tensor[(1, 140), uint64], Tensor[(15, 9), float32], Tensor[(2160), float32], Tensor[(135), float32]) */
}

def @func_5085(%var_5081: Tensor[(6, 44), float64], %var_5082: Tensor[(1568), float64], %var_5083: Tensor[(78), float64], %var_5084: Tensor[(135), float32]) -> (Tensor[(2, 13, 14), float64], Tensor[(14, 16, 15), float32], Tensor[(6, 44), float64], Tensor[(30), uint32], Tensor[(1568), float64], uint8, Tensor[(10, 3), uint32], Tensor[(78), float64], Tensor[(135), float32]) {
  @func_5079(%var_5081, %var_5082, %var_5083, %var_5084) /* ty=(Tensor[(2, 13, 14), float64], Tensor[(14, 16, 15), float32], Tensor[(6, 44), float64], Tensor[(30), uint32], Tensor[(1568), float64], uint8, Tensor[(10, 3), uint32], Tensor[(78), float64], Tensor[(135), float32]) */
}

def @func_6340() -> (Tensor[(7, 9), float64],) {
  %512 = fn () -> (Tensor[(7, 9), float64],) {
    %510 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
    %511 = %510.0;
    (%511,)
  };
  %512() /* ty=(Tensor[(7, 9), float64],) */
}

def @func_6179(%var_6177: Tensor[(11, 11, 1), float64], %var_6178: Tensor[(11, 11, 14), float64]) -> (Tensor[(11, 11, 14), float64],) {
  %516 = fn (%var_6150: Tensor[(11, 11, 1), float64], %var_6151: Tensor[(11, 11, 14), float64]) -> (Tensor[(11, 11, 14), float64],) {
    %513 = cast(%var_6150, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
    %514 = cast(%var_6151, dtype="float64") /* ty=Tensor[(11, 11, 14), float64] */;
    %515 = mod(%513, %514) /* ty=Tensor[(11, 11, 14), float64] */;
    (%515,)
  };
  %516(%var_6177, %var_6178) /* ty=(Tensor[(11, 11, 14), float64],) */
}

def @func_6015() -> (Tensor[(7, 9), float64],) {
  @func_6013() /* ty=(Tensor[(7, 9), float64],) */
}

def @func_6391(%var_6390: Tensor[(440), float32]) -> (Tensor[(7, 9), float64], Tensor[(2, 13, 14), float64], Tensor[(440), float32], Tensor[(2, 13, 14), float64]) {
  %524 = fn (%var_6355: Tensor[(440), float32]) -> (Tensor[(7, 9), float64], Tensor[(2, 13, 14), float64], Tensor[(440), float32], Tensor[(2, 13, 14), float64]) {
    %517 = @func_6013() /* ty=(Tensor[(7, 9), float64],) */;
    %518 = cast(%var_6355, dtype="float32") /* ty=Tensor[(440), float32] */;
    %519 = reshape(%518, newshape=[440, 1]) /* ty=Tensor[(440, 1), float32] */;
    %520 = @func_5475(%519) /* ty=(Tensor[(7, 9), float64], Tensor[(5, 11, 8), bool], Tensor[(2, 13, 14), float64], Tensor[(440, 1), float64]) */;
    %521 = %517.0;
    %522 = %520.2;
    %523 = @func_5816() /* ty=Tensor[(2, 13, 14), float64] */;
    (%521, %522, %var_6355, %523)
  };
  %524(%var_6390) /* ty=(Tensor[(7, 9), float64], Tensor[(2, 13, 14), float64], Tensor[(440), float32], Tensor[(2, 13, 14), float64]) */
}

def @func_6427(%var_6418: Tensor[(4, 4, 4), float64]) -> (Tensor[(4, 4, 4), float64], Tensor[(4, 4, 4), float32]) {
  %525 = cast(%var_6418, dtype="float64") /* ty=Tensor[(4, 4, 4), float64] */;
  %526 = cast(%var_6418, dtype="float32") /* ty=Tensor[(4, 4, 4), float32] */;
  %527 = sqrt(%525) /* ty=Tensor[(4, 4, 4), float64] */;
  %528 = cosh(%526) /* ty=Tensor[(4, 4, 4), float32] */;
  (%527, %528)
}

def @func_6514(%var_6513: Tensor[(2, 13, 14), float64]) -> (Tensor[(2, 13, 14), bool],) {
  %535 = fn (%var_6504: Tensor[(2, 13, 14), float64]) -> (Tensor[(2, 13, 14), bool],) {
    %529 = @func_5816() /* ty=Tensor[(2, 13, 14), float64] */;
    %530 = cast(%var_6504, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
    %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%529, dtype="bool") /* ty=Tensor[(2, 13, 14), bool] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %534 = greater_equal(%532, %533) /* ty=Tensor[(2, 13, 14), bool] */;
    (%534,)
  };
  %535(%var_6513) /* ty=(Tensor[(2, 13, 14), bool],) */
}

def @func_6872(%var_6868: uint32, %var_6869: Tensor[(2240), uint32], %var_6870: Tensor[(45, 3), float32], %var_6871: Tensor[(924), int8]) -> (Tensor[(7, 9), float64], Tensor[(15, 1, 7), float32], uint32, Tensor[(2240), uint32], Tensor[(15, 1, 9), float32], Tensor[(2160), float32], Tensor[(45, 3), float32], Tensor[(11, 14, 6), bool], Tensor[(924), int8]) {
  %555 = fn (%var_6832: uint32, %var_6833: Tensor[(2240), uint32], %var_6842: Tensor[(45, 3), float32], %var_6846: Tensor[(924), int8]) -> (Tensor[(7, 9), float64], Tensor[(15, 1, 7), float32], uint32, Tensor[(2240), uint32], Tensor[(15, 1, 9), float32], Tensor[(2160), float32], Tensor[(45, 3), float32], Tensor[(11, 14, 6), bool], Tensor[(924), int8]) {
    %536 = cast(%var_6832, dtype="uint32") /* ty=uint32 */;
    %537 = cast(%var_6833, dtype="uint32") /* ty=Tensor[(2240), uint32] */;
    %538 = reshape(%536, newshape=[]) /* ty=uint32 */;
    %539 = reshape(%537, newshape=[14, 16, 10]) /* ty=Tensor[(14, 16, 10), uint32] */;
    %540 = @func_2813(%538, %539) /* ty=(Tensor[(14, 16, 10), uint32], Tensor[(15, 1, 7), float32], Tensor[(156), uint16]) */;
    %541 = cast(meta[relay.Constant][47] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %542 = cast(%var_6842, dtype="float32") /* ty=Tensor[(45, 3), float32] */;
    %543 = reshape(%541, newshape=[15, 9, 16]) /* ty=Tensor[(15, 9, 16), float32] */;
    %544 = reshape(%542, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
    %545 = @func_235(%543, %544) /* ty=(Tensor[(15, 9, 16), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 9), float32], Tensor[(15, 1, 9), float32], Tensor[(15, 1, 9), float32]) */;
    %546 = cast(%var_6846, dtype="int8") /* ty=Tensor[(924), int8] */;
    %547 = cast(%var_6846, dtype="int8") /* ty=Tensor[(924), int8] */;
    %548 = reshape(%546, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
    %549 = reshape(%547, newshape=[11, 14, 6]) /* ty=Tensor[(11, 14, 6), int8] */;
    %550 = @func_4883(%548, %549) /* ty=(Tensor[(11, 14, 6), bool],) */;
    %551 = @func_5792() /* ty=Tensor[(7, 9), float64] */;
    %552 = %540.1;
    %553 = %545.3;
    %554 = %550.0;
    (%551, %552, %var_6832, %var_6833, %553, meta[relay.Constant][47] /* ty=Tensor[(2160), float32] */, %var_6842, %554, %var_6846)
  };
  %555(%var_6868, %var_6869, %var_6870, %var_6871) /* ty=(Tensor[(7, 9), float64], Tensor[(15, 1, 7), float32], uint32, Tensor[(2240), uint32], Tensor[(15, 1, 9), float32], Tensor[(2160), float32], Tensor[(45, 3), float32], Tensor[(11, 14, 6), bool], Tensor[(924), int8]) */
}

def @func_2816(%var_2814: uint32, %var_2815: Tensor[(14, 16, 10), uint32]) -> (Tensor[(14, 16, 10), uint32], Tensor[(15, 1, 7), float32], Tensor[(156), uint16]) {
  %563 = fn (%var_2786: uint32, %var_2787: Tensor[(14, 16, 10), uint32]) -> (Tensor[(14, 16, 10), uint32], Tensor[(15, 1, 7), float32], Tensor[(156), uint16]) {
    %556 = cast(%var_2786, dtype="uint32") /* ty=uint32 */;
    %557 = cast(%var_2787, dtype="uint32") /* ty=Tensor[(14, 16, 10), uint32] */;
    %558 = cast(meta[relay.Constant][48] /* ty=Tensor[(156), uint16] */, dtype="uint16") /* ty=Tensor[(156), uint16] */;
    %559 = reshape(%558, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint16] */;
    %560 = @func_2129(%559) /* ty=(Tensor[(3, 4, 13), uint16], Tensor[(15, 1, 7), float32], Tensor[(975), uint32], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
    %561 = bitwise_or(%556, %557) /* ty=Tensor[(14, 16, 10), uint32] */;
    %562 = %560.1;
    (%561, %562, meta[relay.Constant][48] /* ty=Tensor[(156), uint16] */)
  };
  %563(%var_2814, %var_2815) /* ty=(Tensor[(14, 16, 10), uint32], Tensor[(15, 1, 7), float32], Tensor[(156), uint16]) */
}

def @func_5889() -> (Tensor[(7, 9), float64],) {
  @func_5887() /* ty=(Tensor[(7, 9), float64],) */
}

def @func_4665(%var_4663: Tensor[(7, 13, 5), float64]) -> (Tensor[(7, 13, 5), float64],) {
  @func_4662(%var_4663) /* ty=(Tensor[(7, 13, 5), float64],) */
}

def @func_3051(%var_3046: Tensor[(14, 16, 7), float64], %var_3047: uint8, %var_3048: Tensor[(30), uint32], %var_3049: Tensor[(78), float64], %var_3050: Tensor[(135), float32]) -> (Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) {
  @func_3044(%var_3046, %var_3047, %var_3048, %var_3049, %var_3050) /* ty=(Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */
}

def @func_4981() -> Tensor[(2, 13, 14), float64] {
  %564 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 13, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 13, 14), float64] */;
  sin(%564) /* ty=Tensor[(2, 13, 14), float64] */
}

def @func_6575(%var_6559: Tensor[(4, 1, 3), float64]) -> (Tensor[(4, 1, 3), float64],) {
  %565 = cast(%var_6559, dtype="float64") /* ty=Tensor[(4, 1, 3), float64] */;
  %566 = atanh(%565) /* ty=Tensor[(4, 1, 3), float64] */;
  (%566,)
}

def @func_6900(%var_6899: int64) -> (Tensor[(13, 8, 6), int64],) {
  %570 = fn (%var_6874: int64) -> (Tensor[(13, 8, 6), int64],) {
    %567 = cast(%var_6874, dtype="int64") /* ty=int64 */;
    %568 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 8, 6), int64] */, dtype="int64") /* ty=Tensor[(13, 8, 6), int64] */;
    %569 = bitwise_xor(%567, %568) /* ty=Tensor[(13, 8, 6), int64] */;
    (%569,)
  };
  %570(%var_6899) /* ty=(Tensor[(13, 8, 6), int64],) */
}

def @func_5117() -> (Tensor[(7, 9), float64],) {
  @func_5115() /* ty=(Tensor[(7, 9), float64],) */
}

def @func_1154(%var_1153: Tensor[(5, 10, 7), bool]) -> (Tensor[(5, 10, 7), float32],) {
  %581 = fn (%var_1128: Tensor[(5, 10, 7), bool]) -> (Tensor[(5, 10, 7), float32],) {
    %571 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 10, 7), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
    %572 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(%var_1128, dtype="bool") /* ty=Tensor[(5, 10, 7), bool] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %575 = logical_or(%573, %574) /* ty=Tensor[(5, 10, 7), bool] */;
    %576 = cast(%575, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
    %577 = shape_of(%var_1128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(%var_1128, dtype="float32") /* ty=Tensor[(5, 10, 7), float32] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %580 = divide(%578, %579) /* ty=Tensor[(5, 10, 7), float32] */;
    (%580,)
  };
  %581(%var_1153) /* ty=(Tensor[(5, 10, 7), float32],) */
}

def @func_4662(%var_4658: Tensor[(7, 13, 5), float64]) -> (Tensor[(7, 13, 5), float64],) {
  %582 = cast(%var_4658, dtype="float64") /* ty=Tensor[(7, 13, 5), float64] */;
  %583 = atan(%582) /* ty=Tensor[(7, 13, 5), float64] */;
  (%583,)
}

def @func_6190() -> (Tensor[(7, 9), float64],) {
  %585 = fn () -> (Tensor[(7, 9), float64],) {
    %584 = @func_5448() /* ty=Tensor[(7, 9), float64] */;
    (%584,)
  };
  %585() /* ty=(Tensor[(7, 9), float64],) */
}

def @func_6826() -> Tensor[(7, 9), float64] {
  %586 = fn () -> Tensor[(7, 9), float64] {
    @func_5686() /* ty=Tensor[(7, 9), float64] */
  };
  %586() /* ty=Tensor[(7, 9), float64] */
}

def @func_685(%var_669: Tensor[(975), uint32]) -> (Tensor[(15, 1, 7), float64], Tensor[(15, 1, 7), float32], Tensor[(5, 13, 15), uint32], Tensor[(975), uint32]) {
  %587 = cast(meta[relay.Constant][52] /* ty=Tensor[(15, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(15, 1, 7), float32] */;
  %588 = erf(%587) /* ty=Tensor[(15, 1, 7), float32] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(15, 1, 7), float64] */;
  %590 = cast(%588, dtype="float32") /* ty=Tensor[(15, 1, 7), float32] */;
  %591 = cast(%var_669, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %592 = cast(%var_669, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %593 = cast(%var_669, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %594 = reshape(%591, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %595 = reshape(%592, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %596 = reshape(%593, newshape=[5, 13, 15]) /* ty=Tensor[(5, 13, 15), uint32] */;
  %597 = @func_316(%594, %595, %596) /* ty=(Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) */;
  %598 = atanh(%589) /* ty=Tensor[(15, 1, 7), float64] */;
  %599 = cosh(%590) /* ty=Tensor[(15, 1, 7), float32] */;
  %600 = %597.0;
  (%598, %599, %600, %var_669)
}

def @func_5431() -> (Tensor[(7, 9), float64],) {
  %603 = fn () -> (Tensor[(7, 9), float64],) {
    %601 = @func_5115() /* ty=(Tensor[(7, 9), float64],) */;
    %602 = %601.0;
    (%602,)
  };
  %603() /* ty=(Tensor[(7, 9), float64],) */
}

def @func_2403(%var_2401: Tensor[(9, 12, 3), uint32], %var_2402: Tensor[(9, 12, 3), uint32]) -> (Tensor[(9, 12, 3), bool], Tensor[(9, 12, 3), uint32]) {
  %616 = fn (%var_2387: Tensor[(9, 12, 3), uint32], %var_2388: Tensor[(9, 12, 3), uint32]) -> (Tensor[(9, 12, 3), bool], Tensor[(9, 12, 3), uint32]) {
    %604 = cast(%var_2388, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
    %605 = shape_of(%var_2387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%var_2387, dtype="bool") /* ty=Tensor[(9, 12, 3), bool] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %608 = cast(%var_2388, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
    %609 = cosh(%608) /* ty=Tensor[(9, 12, 3), float64] */;
    %610 = cast(%var_2388, dtype="uint32") /* ty=Tensor[(9, 12, 3), uint32] */;
    %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(%609, dtype="uint32") /* ty=Tensor[(9, 12, 3), uint32] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %614 = not_equal(%606, %607) /* ty=Tensor[(9, 12, 3), bool] */;
    %615 = right_shift(%612, %613) /* ty=Tensor[(9, 12, 3), uint32] */;
    (%614, %615)
  };
  %616(%var_2401, %var_2402) /* ty=(Tensor[(9, 12, 3), bool], Tensor[(9, 12, 3), uint32]) */
}

def @func_5448() -> Tensor[(7, 9), float64] {
  %617 = @func_5430() /* ty=(Tensor[(7, 9), float64],) */;
  %617.0
}

def @func_5236(%var_5224: Tensor[(2, 13, 14), float32]) -> (Tensor[(2, 13, 14), int32], Tensor[(2, 13, 14), uint64]) {
  %618 = @func_5136() /* ty=Tensor[(2, 13, 14), float32] */;
  %619 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 13, 14), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %623 = floor_mod(%621, %622) /* ty=Tensor[(2, 13, 14), float32] */;
  %624 = cast(%618, dtype="int32") /* ty=Tensor[(2, 13, 14), int32] */;
  %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%623, dtype="int32") /* ty=Tensor[(2, 13, 14), int32] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %628 = cast(%var_5224, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %629 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(2, 13, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 13, 14), float32] */, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %632 = multiply(%626, %627) /* ty=Tensor[(2, 13, 14), int32] */;
  %633 = bitwise_xor(%630, %631) /* ty=Tensor[(2, 13, 14), uint64] */;
  (%632, %633)
}

def @func_6744() -> (Tensor[(2, 13, 14), float32],) {
  %634 = @func_5816() /* ty=Tensor[(2, 13, 14), float64] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(2, 13, 14), float32] */;
  %636 = asinh(%635) /* ty=Tensor[(2, 13, 14), float32] */;
  (%636,)
}

def @func_1521(%var_1491: Tensor[(14, 4, 1), float32], %var_1518: Tensor[(78), float64]) -> (Tensor[(14, 4, 1), float32], Tensor[(14, 4, ?), bool], Tensor[(14, 4, 13), uint64], Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32]) {
  %637 = cast(%var_1491, dtype="float32") /* ty=Tensor[(14, 4, 1), float32] */;
  %638 = cast(%var_1491, dtype="float64") /* ty=Tensor[(14, 4, 1), float64] */;
  %639 = rsqrt(%638) /* ty=Tensor[(14, 4, 1), float64] */;
  %640 = cast(%639, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
  %641 = shape_of(%var_1491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%var_1491, dtype="bool") /* ty=Tensor[(14, 4, 1), bool] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %644 = cast(%var_1491, dtype="uint64") /* ty=Tensor[(14, 4, 1), uint64] */;
  %645 = cast(meta[relay.Constant][54] /* ty=Tensor[(14, 4, 13), float32] */, dtype="uint64") /* ty=Tensor[(14, 4, 13), uint64] */;
  %646 = cast(%var_1518, dtype="float64") /* ty=Tensor[(78), float64] */;
  %647 = cast(%var_1518, dtype="float64") /* ty=Tensor[(78), float64] */;
  %648 = cast(meta[relay.Constant][55] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %649 = reshape(%646, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %650 = reshape(%647, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %651 = reshape(%648, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %652 = @func_777(%649, %650, %651) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %653 = cosh(%637) /* ty=Tensor[(14, 4, 1), float32] */;
  %654 = logical_or(%642, %643) /* ty=Tensor[(14, 4, ?), bool] */;
  %655 = left_shift(%644, %645) /* ty=Tensor[(14, 4, 13), uint64] */;
  %656 = %652.0;
  (%653, %654, %655, %656, %var_1518, meta[relay.Constant][55] /* ty=Tensor[(135), float32] */)
}

def @func_3925(%var_3913: Tensor[(3, 10), float32]) -> (Tensor[(3, 10), float32],) {
  %657 = cast(%var_3913, dtype="float32") /* ty=Tensor[(3, 10), float32] */;
  %658 = sigmoid(%657) /* ty=Tensor[(3, 10), float32] */;
  (%658,)
}

def @func_5475(%var_5462: Tensor[(440, 1), float32]) -> (Tensor[(7, 9), float64], Tensor[(5, 11, 8), bool], Tensor[(2, 13, 14), float64], Tensor[(440, 1), float64]) {
  %659 = @func_5430() /* ty=(Tensor[(7, 9), float64],) */;
  %660 = cast(%var_5462, dtype="float32") /* ty=Tensor[(440, 1), float32] */;
  %661 = cast(%var_5462, dtype="float32") /* ty=Tensor[(440, 1), float32] */;
  %662 = reshape(%660, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float32] */;
  %663 = reshape(%661, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float32] */;
  %664 = @func_1703(%662, %663) /* ty=(Tensor[(5, 11, 8), bool],) */;
  %665 = @func_5343() /* ty=(Tensor[(2, 13, 14), float32], Tensor[(2, 13, 14), float64]) */;
  %666 = cast(%var_5462, dtype="float64") /* ty=Tensor[(440, 1), float64] */;
  %667 = %659.0;
  %668 = %664.0;
  %669 = %665.1;
  %670 = exp(%666) /* ty=Tensor[(440, 1), float64] */;
  (%667, %668, %669, %670)
}

def @func_3156(%var_3145: Tensor[(264), float64]) -> (Tensor[(14, 16, 15), float32], Tensor[(11, 6, 4), float64], float64, Tensor[(264), float64]) {
  %671 = cast(meta[relay.Constant][56] /* ty=Tensor[(14, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
  %672 = cast(-8.57712f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %673 = cast(%var_3145, dtype="float64") /* ty=Tensor[(264), float64] */;
  %674 = reshape(%672, newshape=[]) /* ty=float64 */;
  %675 = reshape(%673, newshape=[11, 6, 4]) /* ty=Tensor[(11, 6, 4), float64] */;
  %676 = acosh(%671) /* ty=Tensor[(14, 16, 15), float32] */;
  %677 = @func_2860(%674, %675) /* ty=Tensor[(11, 6, 4), float64] */;
  (%676, %677, -8.57712f64 /* ty=float64 */, %var_3145)
}

def @func_6330(%var_6328: float32) -> (Tensor[(7, 15, 14), float32], Tensor[(2, 13, 14), bool], Tensor[(13, 3, 2), float64], Tensor[(56), float32], Tensor[(78), float64], Tensor[(1, 98), float32], Tensor[(15, 1, 9), bool], Tensor[(15, 1, 9), float32]) {
  @func_6327(%var_6328) /* ty=(Tensor[(7, 15, 14), float32], Tensor[(2, 13, 14), bool], Tensor[(13, 3, 2), float64], Tensor[(56), float32], Tensor[(78), float64], Tensor[(1, 98), float32], Tensor[(15, 1, 9), bool], Tensor[(15, 1, 9), float32]) */
}

def @func_3928(%var_3926: Tensor[(3, 10), float32]) -> (Tensor[(3, 10), float32],) {
  @func_3925(%var_3926) /* ty=(Tensor[(3, 10), float32],) */
}

def @func_6430(%var_6428: Tensor[(4, 4, 4), float64]) -> (Tensor[(4, 4, 4), float64], Tensor[(4, 4, 4), float32]) {
  @func_6427(%var_6428) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(4, 4, 4), float32]) */
}

def @func_320(%var_317: Tensor[(5, 13, 15), uint32], %var_318: Tensor[(5, 13, 15), uint32], %var_319: Tensor[(5, 13, 15), uint32]) -> (Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) {
  %688 = fn (%var_290: Tensor[(5, 13, 15), uint32], %var_291: Tensor[(5, 13, 15), uint32], %var_312: Tensor[(5, 13, 15), uint32]) -> (Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) {
    %678 = cast(%var_291, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
    %679 = shape_of(%var_290, dtype="int32") /* ty=Tensor[(3), int32] */;
    %680 = cast(%var_290, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %682 = cast(%var_312, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
    %683 = shape_of(%var_291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%var_291, dtype="uint32") /* ty=Tensor[(5, 13, 15), uint32] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %686 = bitwise_and(%680, %681) /* ty=Tensor[(5, 13, 15), uint32] */;
    %687 = bitwise_or(%684, %685) /* ty=Tensor[(5, 13, 15), uint32] */;
    (%686, %687)
  };
  %688(%var_317, %var_318, %var_319) /* ty=(Tensor[(5, 13, 15), uint32], Tensor[(5, 13, 15), uint32]) */
}

def @func_3253(%var_3192: Tensor[(8, 14, 13), uint16], %var_3193: Tensor[(8, 14, 13), uint16], %var_3198: Tensor[(78), float64], %var_3216: Tensor[(1568), float64], %var_3218: Tensor[(30), uint32], %var_3242: Tensor[(1568), float64]) -> (Tensor[(13, 3, 2), float64], Tensor[(78), float64], Tensor[(135), float32], Tensor[(15, 1, 7), float64], uint8, Tensor[(30), uint32], Tensor[(13, 3, 2), float64], Tensor[(1568), uint32], Tensor[(8, 14, 13), float64]) {
  %689 = cast(%var_3198, dtype="float64") /* ty=Tensor[(78), float64] */;
  %690 = cast(%var_3198, dtype="float64") /* ty=Tensor[(78), float64] */;
  %691 = cast(meta[relay.Constant][57] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %692 = reshape(%689, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %693 = reshape(%690, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %694 = reshape(%691, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %695 = @func_777(%692, %693, %694) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %696 = cast(%var_3216, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %697 = cast(meta[relay.Constant][58] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %698 = cast(%var_3218, dtype="uint32") /* ty=Tensor[(30), uint32] */;
  %699 = cast(%var_3198, dtype="float64") /* ty=Tensor[(78), float64] */;
  %700 = cast(meta[relay.Constant][57] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %701 = reshape(%696, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), float64] */;
  %702 = reshape(%697, newshape=[]) /* ty=uint8 */;
  %703 = reshape(%698, newshape=[30]) /* ty=Tensor[(30), uint32] */;
  %704 = reshape(%699, newshape=[78]) /* ty=Tensor[(78), float64] */;
  %705 = reshape(%700, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %706 = @func_3044(%701, %702, %703, %704, %705) /* ty=(Tensor[(14, 16, 7), float64], Tensor[(15, 1, 7), float64], Tensor[(975), uint32], Tensor[(12, 1, 6), uint8], uint8, Tensor[(72), uint8], Tensor[(78), float64], Tensor[(30), uint32], Tensor[(78), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %707 = %695.0;
  %708 = cast(%707, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  %709 = cast(%707, dtype="float64") /* ty=Tensor[(13, 3, 2), float64] */;
  %710 = cast(meta[relay.Constant][57] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %711 = reshape(%708, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %712 = reshape(%709, newshape=[13, 3, 2]) /* ty=Tensor[(13, 3, 2), float64] */;
  %713 = reshape(%710, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %714 = @func_777(%711, %712, %713) /* ty=(Tensor[(13, 3, 2), float64], Tensor[(15, 1, 9), float32], Tensor[(135), float32]) */;
  %715 = cast(%var_3242, dtype="uint32") /* ty=Tensor[(1568), uint32] */;
  %716 = shape_of(%var_3216, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(%var_3216, dtype="uint32") /* ty=Tensor[(1568), uint32] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %719 = cast(%var_3193, dtype="uint16") /* ty=Tensor[(8, 14, 13), uint16] */;
  %720 = shape_of(%var_3192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_3192, dtype="uint16") /* ty=Tensor[(8, 14, 13), uint16] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %723 = add(%721, %722) /* ty=Tensor[(8, 14, 13), uint16] */;
  %724 = cast(%var_3193, dtype="bool") /* ty=Tensor[(8, 14, 13), bool] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="bool") /* ty=Tensor[(8, 14, 13), bool] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %728 = logical_or(%726, %727) /* ty=Tensor[(8, 14, 13), bool] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(8, 14, 13), float64] */;
  %730 = %706.1;
  %731 = %714.0;
  %732 = logical_xor(%717, %718) /* ty=Tensor[(1568), uint32] */;
  %733 = rsqrt(%729) /* ty=Tensor[(8, 14, 13), float64] */;
  (%707, %var_3198, meta[relay.Constant][57] /* ty=Tensor[(135), float32] */, %730, meta[relay.Constant][58] /* ty=uint8 */, %var_3218, %731, %732, %733)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen36/build/output.py", line 1586, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:32] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

